
micro-Ros_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016560  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  08016740  08016740  00017740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017458  08017458  00019168  2**0
                  CONTENTS
  4 .ARM          00000008  08017458  08017458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017460  08017460  00019168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017460  08017460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017464  08017464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08017468  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012568  20000168  080175d0  00019168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200126d0  080175d0  000196d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d25  00000000  00000000  00019198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b4b  00000000  00000000  0003bebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00040a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  000424c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6a7  00000000  00000000  00043962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e1e  00000000  00000000  00070009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110aa3  00000000  00000000  00091e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  001a28ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf0  00000000  00000000  001a2968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  001aa658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000168 	.word	0x20000168
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016728 	.word	0x08016728

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000016c 	.word	0x2000016c
 800021c:	08016728 	.word	0x08016728

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROSTask */
  microROSTaskHandle = osThreadNew(microROSTaskFunction, NULL, &microROSTask_attributes);
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <MX_FREERTOS_Init+0x18>)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_FREERTOS_Init+0x1c>)
 800068a:	f005 fb35 	bl	8005cf8 <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <MX_FREERTOS_Init+0x20>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	0801686c 	.word	0x0801686c
 800069c:	080006a5 	.word	0x080006a5
 80006a0:	20000208 	.word	0x20000208

080006a4 <microROSTaskFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_microROSTaskFunction */
void microROSTaskFunction(void *argument)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b0cc      	sub	sp, #304	@ 0x130
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006b2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN microROSTaskFunction */

  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 80006b4:	4bb5      	ldr	r3, [pc, #724]	@ (800098c <microROSTaskFunction+0x2e8>)
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	4bb5      	ldr	r3, [pc, #724]	@ (8000990 <microROSTaskFunction+0x2ec>)
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4bb5      	ldr	r3, [pc, #724]	@ (8000994 <microROSTaskFunction+0x2f0>)
 80006be:	4ab6      	ldr	r2, [pc, #728]	@ (8000998 <microROSTaskFunction+0x2f4>)
 80006c0:	49b6      	ldr	r1, [pc, #728]	@ (800099c <microROSTaskFunction+0x2f8>)
 80006c2:	2001      	movs	r0, #1
 80006c4:	f00b f868 	bl	800b798 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80006c8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80006cc:	4618      	mov	r0, r3
 80006ce:	f00a fdb9 	bl	800b244 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80006d2:	4bb3      	ldr	r3, [pc, #716]	@ (80009a0 <microROSTaskFunction+0x2fc>)
 80006d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  freeRTOS_allocator.deallocate = microros_deallocate;
 80006d8:	4bb2      	ldr	r3, [pc, #712]	@ (80009a4 <microROSTaskFunction+0x300>)
 80006da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  freeRTOS_allocator.reallocate = microros_reallocate;
 80006de:	4bb2      	ldr	r3, [pc, #712]	@ (80009a8 <microROSTaskFunction+0x304>)
 80006e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80006e4:	4bb1      	ldr	r3, [pc, #708]	@ (80009ac <microROSTaskFunction+0x308>)
 80006e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80006ea:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80006ee:	4618      	mov	r0, r3
 80006f0:	f00a fdb6 	bl	800b260 <rcutils_set_default_allocator>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f083 0301 	eor.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <microROSTaskFunction+0x64>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8000700:	21b1      	movs	r1, #177	@ 0xb1
 8000702:	48ab      	ldr	r0, [pc, #684]	@ (80009b0 <microROSTaskFunction+0x30c>)
 8000704:	f014 ff40 	bl	8015588 <iprintf>
  rcl_allocator_t allocator;
  rcl_node_t node;
  rclc_executor_t executor;
  rcl_init_options_t init_options;

  allocator = rcl_get_default_allocator();
 8000708:	463b      	mov	r3, r7
 800070a:	4618      	mov	r0, r3
 800070c:	f00a fdc8 	bl	800b2a0 <rcutils_get_default_allocator>
 8000710:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000714:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000718:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 800071c:	461d      	mov	r5, r3
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	682b      	ldr	r3, [r5, #0]
 8000724:	6023      	str	r3, [r4, #0]
  init_options = rcl_get_zero_initialized_init_options();
 8000726:	f009 fcef 	bl	800a108 <rcl_get_zero_initialized_init_options>
 800072a:	4603      	mov	r3, r0
 800072c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rcl_init_options_init(&init_options, allocator);
 800072e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000732:	466a      	mov	r2, sp
 8000734:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000738:	e893 0003 	ldmia.w	r3, {r0, r1}
 800073c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000740:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000746:	4620      	mov	r0, r4
 8000748:	f009 fce0 	bl	800a10c <rcl_init_options_init>

  // create init_options
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800074c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000750:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8000754:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	4613      	mov	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	f00a fc68 	bl	800b034 <rclc_support_init_with_options>

  // create node
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 8000764:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800076c:	4618      	mov	r0, r3
 800076e:	f009 fde9 	bl	800a344 <rcl_node_get_default_options>
  node_ops.domain_id = 25;
 8000772:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800077a:	2219      	movs	r2, #25
 800077c:	601a      	str	r2, [r3, #0]
  rclc_node_init_with_options(&node, "acquisition_system", "", &support, &node_ops);
 800077e:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8000782:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	4613      	mov	r3, r2
 800078e:	4a89      	ldr	r2, [pc, #548]	@ (80009b4 <microROSTaskFunction+0x310>)
 8000790:	4989      	ldr	r1, [pc, #548]	@ (80009b8 <microROSTaskFunction+0x314>)
 8000792:	f00a fc8b 	bl	800b0ac <rclc_node_init_with_options>


  //time sync
  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 8000796:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079a:	f00b ff0d 	bl	800c5b8 <rmw_uros_sync_session>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <microROSTaskFunction+0x108>
	  printf("Error on time sync (line %d)\n", __LINE__);
 80007a4:	21f5      	movs	r1, #245	@ 0xf5
 80007a6:	4885      	ldr	r0, [pc, #532]	@ (80009bc <microROSTaskFunction+0x318>)
 80007a8:	f014 feee 	bl	8015588 <iprintf>
  //int64_t time_ns;
  //time_ns = rmw_uros_epoch_nanos();


  // create cmd_vel_sub
  cmd_vel_sub = rcl_get_zero_initialized_subscription();
 80007ac:	f009 ff46 	bl	800a63c <rcl_get_zero_initialized_subscription>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a83      	ldr	r2, [pc, #524]	@ (80009c0 <microROSTaskFunction+0x31c>)
 80007b4:	6013      	str	r3, [r2, #0]
  rclc_subscription_init_best_effort(
 80007b6:	f008 f82f 	bl	8008818 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80007ba:	4602      	mov	r2, r0
 80007bc:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80007c0:	4b80      	ldr	r3, [pc, #512]	@ (80009c4 <microROSTaskFunction+0x320>)
 80007c2:	487f      	ldr	r0, [pc, #508]	@ (80009c0 <microROSTaskFunction+0x31c>)
 80007c4:	f00a fcd4 	bl	800b170 <rclc_subscription_init_best_effort>
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
		  "/cmd_vel");

  // create joint_state_pub
  rclc_publisher_init_default(
 80007c8:	f00c fa3c 	bl	800cc44 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80007d2:	4b7d      	ldr	r3, [pc, #500]	@ (80009c8 <microROSTaskFunction+0x324>)
 80007d4:	487d      	ldr	r0, [pc, #500]	@ (80009cc <microROSTaskFunction+0x328>)
 80007d6:	f00a fc97 	bl	800b108 <rclc_publisher_init_default>
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
	"/joint_state");

  // joint_state message allocation. Described in https://micro.ros.org/docs/tutorials/advanced/handling_type_memory/
  joint_state_msg.header.frame_id.capacity = 20;
 80007da:	4b7d      	ldr	r3, [pc, #500]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80007dc:	2214      	movs	r2, #20
 80007de:	611a      	str	r2, [r3, #16]
  joint_state_msg.header.frame_id.data = (char*) pvPortMalloc(joint_state_msg.header.frame_id.capacity  * sizeof(char));
 80007e0:	4b7b      	ldr	r3, [pc, #492]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 fe29 	bl	800843c <pvPortMalloc>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a78      	ldr	r2, [pc, #480]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80007ee:	6093      	str	r3, [r2, #8]
  joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);
 80007f0:	4b77      	ldr	r3, [pc, #476]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd1d 	bl	8000234 <strlen>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a74      	ldr	r2, [pc, #464]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80007fe:	60d3      	str	r3, [r2, #12]

  joint_state_msg.name.capacity = 2;
 8000800:	4b73      	ldr	r3, [pc, #460]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000802:	2202      	movs	r2, #2
 8000804:	61da      	str	r2, [r3, #28]
  joint_state_msg.name.data = (rosidl_runtime_c__String*) pvPortMalloc(joint_state_msg.name.capacity * sizeof(rosidl_runtime_c__String));
 8000806:	4b72      	ldr	r3, [pc, #456]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f007 fe12 	bl	800843c <pvPortMalloc>
 8000818:	4603      	mov	r3, r0
 800081a:	4a6d      	ldr	r2, [pc, #436]	@ (80009d0 <microROSTaskFunction+0x32c>)
 800081c:	6153      	str	r3, [r2, #20]
  joint_state_msg.name.size = 2;
 800081e:	4b6c      	ldr	r3, [pc, #432]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000820:	2202      	movs	r2, #2
 8000822:	619a      	str	r2, [r3, #24]

	joint_state_msg.name.data[0].capacity = 20;
 8000824:	4b6a      	ldr	r3, [pc, #424]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	2214      	movs	r2, #20
 800082a:	609a      	str	r2, [r3, #8]
	joint_state_msg.name.data[0].data = (char*) pvPortMalloc(joint_state_msg.name.data[0].capacity * sizeof(char));
 800082c:	4b68      	ldr	r3, [pc, #416]	@ (80009d0 <microROSTaskFunction+0x32c>)
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	4a67      	ldr	r2, [pc, #412]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000834:	6954      	ldr	r4, [r2, #20]
 8000836:	4618      	mov	r0, r3
 8000838:	f007 fe00 	bl	800843c <pvPortMalloc>
 800083c:	4603      	mov	r3, r0
 800083e:	6023      	str	r3, [r4, #0]
	strcpy(joint_state_msg.name.data[0].data, "Roda_L_Joint");
 8000840:	4b63      	ldr	r3, [pc, #396]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000842:	695b      	ldr	r3, [r3, #20]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a63      	ldr	r2, [pc, #396]	@ (80009d4 <microROSTaskFunction+0x330>)
 8000848:	461c      	mov	r4, r3
 800084a:	4613      	mov	r3, r2
 800084c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800084e:	6020      	str	r0, [r4, #0]
 8000850:	6061      	str	r1, [r4, #4]
 8000852:	60a2      	str	r2, [r4, #8]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	7323      	strb	r3, [r4, #12]
	joint_state_msg.name.data[0].size = strlen(joint_state_msg.name.data[0].data);
 8000858:	4b5d      	ldr	r3, [pc, #372]	@ (80009d0 <microROSTaskFunction+0x32c>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a5c      	ldr	r2, [pc, #368]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000860:	6954      	ldr	r4, [r2, #20]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fce6 	bl	8000234 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	6063      	str	r3, [r4, #4]
	joint_state_msg.name.data[1].capacity = 20;
 800086c:	4b58      	ldr	r3, [pc, #352]	@ (80009d0 <microROSTaskFunction+0x32c>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	330c      	adds	r3, #12
 8000872:	2214      	movs	r2, #20
 8000874:	609a      	str	r2, [r3, #8]
	joint_state_msg.name.data[1].data = (char*) pvPortMalloc(joint_state_msg.name.data[1].capacity* sizeof(char));
 8000876:	4b56      	ldr	r3, [pc, #344]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	330c      	adds	r3, #12
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	4b54      	ldr	r3, [pc, #336]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f103 040c 	add.w	r4, r3, #12
 8000886:	4610      	mov	r0, r2
 8000888:	f007 fdd8 	bl	800843c <pvPortMalloc>
 800088c:	4603      	mov	r3, r0
 800088e:	6023      	str	r3, [r4, #0]
	strcpy(joint_state_msg.name.data[1].data, "Roda_R123_Joint");
 8000890:	4b4f      	ldr	r3, [pc, #316]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	330c      	adds	r3, #12
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a4f      	ldr	r2, [pc, #316]	@ (80009d8 <microROSTaskFunction+0x334>)
 800089a:	461c      	mov	r4, r3
 800089c:	4615      	mov	r5, r2
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	6020      	str	r0, [r4, #0]
 80008a2:	6061      	str	r1, [r4, #4]
 80008a4:	60a2      	str	r2, [r4, #8]
 80008a6:	60e3      	str	r3, [r4, #12]
	joint_state_msg.name.data[1].size = strlen(joint_state_msg.name.data[1].data);
 80008a8:	4b49      	ldr	r3, [pc, #292]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	330c      	adds	r3, #12
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b47      	ldr	r3, [pc, #284]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f103 040c 	add.w	r4, r3, #12
 80008b8:	4610      	mov	r0, r2
 80008ba:	f7ff fcbb 	bl	8000234 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	6063      	str	r3, [r4, #4]
	joint_state_msg.name.size=2;
 80008c2:	4b43      	ldr	r3, [pc, #268]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	619a      	str	r2, [r3, #24]

	joint_state_msg.position.capacity = 2;
 80008c8:	4b41      	ldr	r3, [pc, #260]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
	joint_state_msg.position.data = (double*) pvPortMalloc(joint_state_msg.position.capacity * sizeof(double));
 80008ce:	4b40      	ldr	r3, [pc, #256]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f007 fdb1 	bl	800843c <pvPortMalloc>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a3c      	ldr	r2, [pc, #240]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008de:	6213      	str	r3, [r2, #32]
	joint_state_msg.position.data[0] = 0;
 80008e0:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008e2:	6a19      	ldr	r1, [r3, #32]
 80008e4:	f04f 0200 	mov.w	r2, #0
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	e9c1 2300 	strd	r2, r3, [r1]
	joint_state_msg.position.data[1] = 0;
 80008f0:	4b37      	ldr	r3, [pc, #220]	@ (80009d0 <microROSTaskFunction+0x32c>)
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	f103 0108 	add.w	r1, r3, #8
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	f04f 0300 	mov.w	r3, #0
 8000900:	e9c1 2300 	strd	r2, r3, [r1]
	joint_state_msg.position.size = 2;
 8000904:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000906:	2202      	movs	r2, #2
 8000908:	625a      	str	r2, [r3, #36]	@ 0x24

  joint_state_msg.velocity.capacity = 2;
 800090a:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <microROSTaskFunction+0x32c>)
 800090c:	2202      	movs	r2, #2
 800090e:	635a      	str	r2, [r3, #52]	@ 0x34
  joint_state_msg.velocity.data = (double*) pvPortMalloc(joint_state_msg.velocity.capacity * sizeof(double));
 8000910:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fd90 	bl	800843c <pvPortMalloc>
 800091c:	4603      	mov	r3, r0
 800091e:	4a2c      	ldr	r2, [pc, #176]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000920:	62d3      	str	r3, [r2, #44]	@ 0x2c
  joint_state_msg.velocity.data[0] = 0;
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	e9c1 2300 	strd	r2, r3, [r1]
  joint_state_msg.velocity.data[1] = 0;
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	f103 0108 	add.w	r1, r3, #8
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	e9c1 2300 	strd	r2, r3, [r1]
  joint_state_msg.velocity.size = 2;
 8000946:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000948:	2202      	movs	r2, #2
 800094a:	631a      	str	r2, [r3, #48]	@ 0x30

  joint_state_msg.effort.capacity = 2;
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <microROSTaskFunction+0x32c>)
 800094e:	2202      	movs	r2, #2
 8000950:	641a      	str	r2, [r3, #64]	@ 0x40
  joint_state_msg.effort.data = (double*) pvPortMalloc(joint_state_msg.effort.capacity * sizeof(double));
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4618      	mov	r0, r3
 800095a:	f007 fd6f 	bl	800843c <pvPortMalloc>
 800095e:	4603      	mov	r3, r0
 8000960:	4a1b      	ldr	r2, [pc, #108]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000962:	6393      	str	r3, [r2, #56]	@ 0x38
  joint_state_msg.effort.data[0]=-1;
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000966:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000968:	f04f 0200 	mov.w	r2, #0
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <microROSTaskFunction+0x338>)
 800096e:	e9c1 2300 	strd	r2, r3, [r1]
  joint_state_msg.effort.data[1]=-1;
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000976:	f103 0108 	add.w	r1, r3, #8
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <microROSTaskFunction+0x338>)
 8000980:	e9c1 2300 	strd	r2, r3, [r1]
  joint_state_msg.effort.size = 2;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <microROSTaskFunction+0x32c>)
 8000986:	2202      	movs	r2, #2
 8000988:	63da      	str	r2, [r3, #60]	@ 0x3c
 800098a:	e029      	b.n	80009e0 <microROSTaskFunction+0x33c>
 800098c:	08001149 	.word	0x08001149
 8000990:	080010e5 	.word	0x080010e5
 8000994:	080010c5 	.word	0x080010c5
 8000998:	08001099 	.word	0x08001099
 800099c:	20006a88 	.word	0x20006a88
 80009a0:	080013bd 	.word	0x080013bd
 80009a4:	08001401 	.word	0x08001401
 80009a8:	08001439 	.word	0x08001439
 80009ac:	080014a5 	.word	0x080014a5
 80009b0:	08016750 	.word	0x08016750
 80009b4:	08016778 	.word	0x08016778
 80009b8:	0801677c 	.word	0x0801677c
 80009bc:	08016790 	.word	0x08016790
 80009c0:	20000184 	.word	0x20000184
 80009c4:	080167b0 	.word	0x080167b0
 80009c8:	080167bc 	.word	0x080167bc
 80009cc:	20000188 	.word	0x20000188
 80009d0:	20000190 	.word	0x20000190
 80009d4:	080167cc 	.word	0x080167cc
 80009d8:	080167dc 	.word	0x080167dc
 80009dc:	bff00000 	.word	0xbff00000

  // Create a timer
  rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(10), timer_callback);
 80009e0:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 80009e4:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <microROSTaskFunction+0x398>)
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <microROSTaskFunction+0x39c>)
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	4815      	ldr	r0, [pc, #84]	@ (8000a44 <microROSTaskFunction+0x3a0>)
 80009f0:	f00a fbf2 	bl	800b1d8 <rclc_timer_init_default>

  // Create executor
  rclc_executor_init(&executor, &support.context, 2, &allocator);
 80009f4:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 80009f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009fc:	1d19      	adds	r1, r3, #4
 80009fe:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000a02:	4613      	mov	r3, r2
 8000a04:	2202      	movs	r2, #2
 8000a06:	f00a f887 	bl	800ab18 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg,
 8000a0a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <microROSTaskFunction+0x3a4>)
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <microROSTaskFunction+0x3a8>)
 8000a16:	490e      	ldr	r1, [pc, #56]	@ (8000a50 <microROSTaskFunction+0x3ac>)
 8000a18:	f00a f8f2 	bl	800ac00 <rclc_executor_add_subscription>
		  &cmd_vel_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
  rclc_executor_add_timer(&executor, &timer);
 8000a1c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a20:	4908      	ldr	r1, [pc, #32]	@ (8000a44 <microROSTaskFunction+0x3a0>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f00a f926 	bl	800ac74 <rclc_executor_add_timer>

  // Run executor
  rclc_executor_spin(&executor);
 8000a28:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00a fac7 	bl	800afc0 <rclc_executor_spin>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f005 f9f2 	bl	8005e1c <osDelay>
 8000a38:	e7fb      	b.n	8000a32 <microROSTaskFunction+0x38e>
 8000a3a:	bf00      	nop
 8000a3c:	08000a55 	.word	0x08000a55
 8000a40:	00989680 	.word	0x00989680
 8000a44:	2000018c 	.word	0x2000018c
 8000a48:	08000b35 	.word	0x08000b35
 8000a4c:	200001d8 	.word	0x200001d8
 8000a50:	20000184 	.word	0x20000184

08000a54 <timer_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	@ 0x30
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d051      	beq.n	8000b0a <timer_callback+0xb6>
		//HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);

		// Fill the message timestamp
		struct timespec ts;
		int64_t time_ns;
		time_ns = rmw_uros_epoch_nanos();
 8000a66:	f00b fd99 	bl	800c59c <rmw_uros_epoch_nanos>
 8000a6a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
		UTILS_NanosecondsToTimespec(time_ns, &ts);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	461a      	mov	r2, r3
 8000a74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000a78:	f000 fd3e 	bl	80014f8 <UTILS_NanosecondsToTimespec>
		//clock_gettime(CLOCK_REALTIME, &ts);

		// Create the Header
		joint_state_msg.header.stamp.sec = ts.tv_sec;
 8000a7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <timer_callback+0xc0>)
 8000a82:	601a      	str	r2, [r3, #0]
		joint_state_msg.header.stamp.nanosec = ts.tv_nsec;
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <timer_callback+0xc0>)
 8000a8a:	605a      	str	r2, [r3, #4]

		//sprintf(joint_state_msg.header.frame_id.data, "%ld", seq_no);
		//joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);

		joint_state_msg.position.data[0] = 1;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <timer_callback+0xc0>)
 8000a8e:	6a19      	ldr	r1, [r3, #32]
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <timer_callback+0xc4>)
 8000a96:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.position.data[1] = 2;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <timer_callback+0xc0>)
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	f103 0108 	add.w	r1, r3, #8
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aaa:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.velocity.data[0] = 3;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <timer_callback+0xc0>)
 8000ab0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <timer_callback+0xc8>)
 8000ab8:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.velocity.data[1] = 4;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <timer_callback+0xc0>)
 8000abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac0:	f103 0108 	add.w	r1, r3, #8
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <timer_callback+0xcc>)
 8000aca:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.effort.data[0] = 5;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <timer_callback+0xc0>)
 8000ad0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <timer_callback+0xd0>)
 8000ad8:	e9c1 2300 	strd	r2, r3, [r1]
		joint_state_msg.effort.data[1] = 6;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <timer_callback+0xc0>)
 8000ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ae0:	f103 0108 	add.w	r1, r3, #8
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <timer_callback+0xd4>)
 8000aea:	e9c1 2300 	strd	r2, r3, [r1]

		// Publish the message
		rcl_ret_t ret = rcl_publish(&joint_state_pub, &joint_state_msg, NULL);
 8000aee:	2200      	movs	r2, #0
 8000af0:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <timer_callback+0xc0>)
 8000af2:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <timer_callback+0xd8>)
 8000af4:	f009 fd7e 	bl	800a5f4 <rcl_publish>
 8000af8:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ret != RCL_RET_OK)
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <timer_callback+0xb6>
		{
		  printf("Error publishing joint_state (line %d)\n", __LINE__);
 8000b00:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 8000b04:	480a      	ldr	r0, [pc, #40]	@ (8000b30 <timer_callback+0xdc>)
 8000b06:	f014 fd3f 	bl	8015588 <iprintf>
		}
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3730      	adds	r7, #48	@ 0x30
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000190 	.word	0x20000190
 8000b18:	3ff00000 	.word	0x3ff00000
 8000b1c:	40080000 	.word	0x40080000
 8000b20:	40100000 	.word	0x40100000
 8000b24:	40140000 	.word	0x40140000
 8000b28:	40180000 	.word	0x40180000
 8000b2c:	20000188 	.word	0x20000188
 8000b30:	080167ec 	.word	0x080167ec

08000b34 <cmd_vel_callback>:

void cmd_vel_callback(const void * msgin)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	@ 0x40
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	double leftWheelVelocity, rightWheelVelocity;
	double linearX, linearY, linearZ, angularX, angularY, angularZ;
	const geometry_msgs__msg__Twist * cmd_vel_msg;

	if (msgin != NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d024      	beq.n	8000b8c <cmd_vel_callback+0x58>
	{

		// Blink the LED2 (orange) for debugging
		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8000b42:	2120      	movs	r1, #32
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b48:	f001 fe78 	bl	800283c <HAL_GPIO_TogglePin>

		cmd_vel_msg = (const geometry_msgs__msg__Twist *)msgin;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

		linearX = cmd_vel_msg->linear.x;
 8000b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		linearY = cmd_vel_msg->linear.y;
 8000b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b60:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		linearZ = cmd_vel_msg->linear.z;
 8000b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		angularX = cmd_vel_msg->angular.x;
 8000b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b74:	e9c7 2306 	strd	r2, r3, [r7, #24]
		angularY = cmd_vel_msg->angular.y;
 8000b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000b7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angularZ = cmd_vel_msg->angular.z;
 8000b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b84:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3740      	adds	r7, #64	@ 0x40
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000ba0:	f006 f99e 	bl	8006ee0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d10 <pvPortMallocMicroROS+0x17c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000bac:	f000 f986 	bl	8000ebc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000bb0:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <pvPortMallocMicroROS+0x180>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8090 	bne.w	8000cde <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d01e      	beq.n	8000c02 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d015      	beq.n	8000c02 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f023 0307 	bic.w	r3, r3, #7
 8000bdc:	3308      	adds	r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00b      	beq.n	8000c02 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	e7fd      	b.n	8000bfe <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d06a      	beq.n	8000cde <pvPortMallocMicroROS+0x14a>
 8000c08:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <pvPortMallocMicroROS+0x184>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d865      	bhi.n	8000cde <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000c12:	4b42      	ldr	r3, [pc, #264]	@ (8000d1c <pvPortMallocMicroROS+0x188>)
 8000c14:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000c16:	4b41      	ldr	r3, [pc, #260]	@ (8000d1c <pvPortMallocMicroROS+0x188>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c1c:	e004      	b.n	8000c28 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d903      	bls.n	8000c3a <pvPortMallocMicroROS+0xa6>
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f1      	bne.n	8000c1e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000c3a:	4b35      	ldr	r3, [pc, #212]	@ (8000d10 <pvPortMallocMicroROS+0x17c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d04c      	beq.n	8000cde <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2208      	movs	r2, #8
 8000c4a:	4413      	add	r3, r2
 8000c4c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	1ad2      	subs	r2, r2, r3
 8000c5e:	2308      	movs	r3, #8
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d920      	bls.n	8000ca8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00b      	beq.n	8000c90 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c7c:	f383 8811 	msr	BASEPRI, r3
 8000c80:	f3bf 8f6f 	isb	sy
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	613b      	str	r3, [r7, #16]
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	1ad2      	subs	r2, r2, r3
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ca2:	69b8      	ldr	r0, [r7, #24]
 8000ca4:	f000 f96c 	bl	8000f80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <pvPortMallocMicroROS+0x184>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	4a19      	ldr	r2, [pc, #100]	@ (8000d18 <pvPortMallocMicroROS+0x184>)
 8000cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <pvPortMallocMicroROS+0x184>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <pvPortMallocMicroROS+0x18c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d203      	bcs.n	8000cca <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <pvPortMallocMicroROS+0x184>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a16      	ldr	r2, [pc, #88]	@ (8000d20 <pvPortMallocMicroROS+0x18c>)
 8000cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <pvPortMallocMicroROS+0x180>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000cde:	f006 f90d 	bl	8006efc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00b      	beq.n	8000d04 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cf0:	f383 8811 	msr	BASEPRI, r3
 8000cf4:	f3bf 8f6f 	isb	sy
 8000cf8:	f3bf 8f4f 	dsb	sy
 8000cfc:	60fb      	str	r3, [r7, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000d04:	69fb      	ldr	r3, [r7, #28]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20006214 	.word	0x20006214
 8000d14:	20006220 	.word	0x20006220
 8000d18:	20006218 	.word	0x20006218
 8000d1c:	2000620c 	.word	0x2000620c
 8000d20:	2000621c 	.word	0x2000621c

08000d24 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d04a      	beq.n	8000dcc <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000d36:	2308      	movs	r3, #8
 8000d38:	425b      	negs	r3, r3
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <vPortFreeMicroROS+0xb0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10b      	bne.n	8000d6a <vPortFreeMicroROS+0x46>
	__asm volatile
 8000d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d56:	f383 8811 	msr	BASEPRI, r3
 8000d5a:	f3bf 8f6f 	isb	sy
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	60fb      	str	r3, [r7, #12]
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	e7fd      	b.n	8000d66 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <vPortFreeMicroROS+0x66>
	__asm volatile
 8000d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	60bb      	str	r3, [r7, #8]
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <vPortFreeMicroROS+0xb0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d019      	beq.n	8000dcc <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d115      	bne.n	8000dcc <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <vPortFreeMicroROS+0xb0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000db0:	f006 f896 	bl	8006ee0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <vPortFreeMicroROS+0xb4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <vPortFreeMicroROS+0xb4>)
 8000dc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000dc2:	6938      	ldr	r0, [r7, #16]
 8000dc4:	f000 f8dc 	bl	8000f80 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000dc8:	f006 f898 	bl	8006efc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20006220 	.word	0x20006220
 8000dd8:	20006218 	.word	0x20006218

08000ddc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000de8:	2308      	movs	r3, #8
 8000dea:	425b      	negs	r3, r3
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4413      	add	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <getBlockSize+0x38>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

	return count;
 8000e04:	68fb      	ldr	r3, [r7, #12]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20006220 	.word	0x20006220

08000e18 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000e22:	f006 f85d 	bl	8006ee0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000e26:	6838      	ldr	r0, [r7, #0]
 8000e28:	f7ff feb4 	bl	8000b94 <pvPortMallocMicroROS>
 8000e2c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d017      	beq.n	8000e64 <pvPortReallocMicroROS+0x4c>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d014      	beq.n	8000e64 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffce 	bl	8000ddc <getBlockSize>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2208      	movs	r2, #8
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d201      	bcs.n	8000e54 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	68b8      	ldr	r0, [r7, #8]
 8000e5a:	f014 fd90 	bl	801597e <memcpy>

		vPortFreeMicroROS(pv);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff60 	bl	8000d24 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000e64:	f006 f84a 	bl	8006efc <xTaskResumeAll>

	return newmem;
 8000e68:	68bb      	ldr	r3, [r7, #8]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000e7c:	f006 f830 	bl	8006ee0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff fe82 	bl	8000b94 <pvPortMallocMicroROS>
 8000e90:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000e96:	e004      	b.n	8000ea2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	613a      	str	r2, [r7, #16]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	617a      	str	r2, [r7, #20]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f5      	bne.n	8000e98 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000eac:	f006 f826 	bl	8006efc <xTaskResumeAll>
  	return mem;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000ec2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ec6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <prvHeapInit+0xac>)
 8000eca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00c      	beq.n	8000ef0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f023 0307 	bic.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <prvHeapInit+0xac>)
 8000eec:	4413      	add	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <prvHeapInit+0xb0>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <prvHeapInit+0xb0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	4413      	add	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000f08:	2208      	movs	r2, #8
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 0307 	bic.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4a15      	ldr	r2, [pc, #84]	@ (8000f70 <prvHeapInit+0xb4>)
 8000f1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <prvHeapInit+0xb4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <prvHeapInit+0xb4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	1ad2      	subs	r2, r2, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <prvHeapInit+0xb4>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <prvHeapInit+0xb8>)
 8000f4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <prvHeapInit+0xbc>)
 8000f52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <prvHeapInit+0xc0>)
 8000f56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	2000020c 	.word	0x2000020c
 8000f6c:	2000620c 	.word	0x2000620c
 8000f70:	20006214 	.word	0x20006214
 8000f74:	2000621c 	.word	0x2000621c
 8000f78:	20006218 	.word	0x20006218
 8000f7c:	20006220 	.word	0x20006220

08000f80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <prvInsertBlockIntoFreeList+0xac>)
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e002      	b.n	8000f94 <prvInsertBlockIntoFreeList+0x14>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d8f7      	bhi.n	8000f8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	4413      	add	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d108      	bne.n	8000fc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	441a      	add	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	441a      	add	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d118      	bne.n	8001008 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <prvInsertBlockIntoFreeList+0xb0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d00d      	beq.n	8000ffe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	441a      	add	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e008      	b.n	8001010 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <prvInsertBlockIntoFreeList+0xb0>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e003      	b.n	8001010 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	d002      	beq.n	800101e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000620c 	.word	0x2000620c
 8001030:	20006214 	.word	0x20006214

08001034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_DMA_Init+0x60>)
 800103c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103e:	4a15      	ldr	r2, [pc, #84]	@ (8001094 <MX_DMA_Init+0x60>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6493      	str	r3, [r2, #72]	@ 0x48
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <MX_DMA_Init+0x60>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001052:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <MX_DMA_Init+0x60>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001056:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <MX_DMA_Init+0x60>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6493      	str	r3, [r2, #72]	@ 0x48
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <MX_DMA_Init+0x60>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	200b      	movs	r0, #11
 8001070:	f000 fee4 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001074:	200b      	movs	r0, #11
 8001076:	f000 fefb 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	200c      	movs	r0, #12
 8001080:	f000 fedc 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001084:	200c      	movs	r0, #12
 8001086:	f000 fef3 	bl	8001e70 <HAL_NVIC_EnableIRQ>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010a6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80010a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010ac:	4904      	ldr	r1, [pc, #16]	@ (80010c0 <cubemx_transport_open+0x28>)
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f003 f880 	bl	80041b4 <HAL_UART_Receive_DMA>
    return true;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20006224 	.word	0x20006224

080010c4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010d2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f003 f8b9 	bl	800424c <HAL_UART_DMAStop>
    return true;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010f8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001100:	2b20      	cmp	r3, #32
 8001102:	d11b      	bne.n	800113c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f002 ffd1 	bl	80040b4 <HAL_UART_Transmit_DMA>
 8001112:	4603      	mov	r3, r0
 8001114:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001116:	e002      	b.n	800111e <cubemx_transport_write+0x3a>
            osDelay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f004 fe7f 	bl	8005e1c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800111e:	7cfb      	ldrb	r3, [r7, #19]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <cubemx_transport_write+0x4a>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112a:	2b20      	cmp	r3, #32
 800112c:	d1f4      	bne.n	8001118 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800112e:	7cfb      	ldrb	r3, [r7, #19]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <cubemx_transport_write+0x54>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	e002      	b.n	800113e <cubemx_transport_write+0x5a>
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 800113c:	2300      	movs	r3, #0
    }
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800115c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001174:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <cubemx_transport_read+0x9c>)
 8001176:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001178:	b662      	cpsie	i
}
 800117a:	bf00      	nop
        __enable_irq();
        ms_used++;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001182:	2001      	movs	r0, #1
 8001184:	f004 fe4a 	bl	8005e1c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <cubemx_transport_read+0xa0>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <cubemx_transport_read+0x9c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d103      	bne.n	800119c <cubemx_transport_read+0x54>
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbe2      	blt.n	8001162 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011a0:	e011      	b.n	80011c6 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <cubemx_transport_read+0xa0>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	440b      	add	r3, r1
 80011ac:	490f      	ldr	r1, [pc, #60]	@ (80011ec <cubemx_transport_read+0xa4>)
 80011ae:	5c8a      	ldrb	r2, [r1, r2]
 80011b0:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <cubemx_transport_read+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011bc:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <cubemx_transport_read+0xa0>)
 80011be:	6013      	str	r3, [r2, #0]
        wrote++;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <cubemx_transport_read+0xa0>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <cubemx_transport_read+0x9c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d003      	beq.n	80011da <cubemx_transport_read+0x92>
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3e3      	bcc.n	80011a2 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80011da:	69bb      	ldr	r3, [r7, #24]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20006a28 	.word	0x20006a28
 80011e8:	20006a24 	.word	0x20006a24
 80011ec:	20006224 	.word	0x20006224

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a28      	ldr	r2, [pc, #160]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a22      	ldr	r2, [pc, #136]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_GPIO_Init+0xd4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f001 facd 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001278:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	480f      	ldr	r0, [pc, #60]	@ (80012c8 <MX_GPIO_Init+0xd8>)
 800128a:	f001 f93d 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800128e:	2320      	movs	r3, #32
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a8:	f001 f92e 	bl	8002508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	2028      	movs	r0, #40	@ 0x28
 80012b2:	f000 fdc3 	bl	8001e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b6:	2028      	movs	r0, #40	@ 0x28
 80012b8:	f000 fdda 	bl	8001e70 <HAL_NVIC_EnableIRQ>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	@ 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000800 	.word	0x48000800

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f000 fcc5 	bl	8001c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f80e 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f7ff ff8a 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012dc:	f7ff feaa 	bl	8001034 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80012e0:	f000 fb8c 	bl	80019fc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012e4:	f004 fcbe 	bl	8005c64 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012e8:	f7ff f9ca 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012ec:	f004 fcde 	bl	8005cac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <main+0x24>

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	2238      	movs	r2, #56	@ 0x38
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f014 fa1c 	bl	8015740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001316:	2000      	movs	r0, #0
 8001318:	f001 face 	bl	80028b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2340      	movs	r3, #64	@ 0x40
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132e:	2302      	movs	r3, #2
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001332:	2304      	movs	r3, #4
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001336:	2355      	movs	r3, #85	@ 0x55
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fb68 	bl	8002a20 <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001356:	f000 f82b 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2303      	movs	r3, #3
 8001360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fe66 	bl	8003044 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800137e:	f000 f817 	bl	80013b0 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	@ 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800139e:	f000 fc77 	bl	8001c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40001000 	.word	0x40001000

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <microros_allocate+0x3c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <microros_allocate+0x3c>)
 80013d4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <microros_allocate+0x40>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <microros_allocate+0x40>)
 80013e4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fbd4 	bl	8000b94 <pvPortMallocMicroROS>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20006a2c 	.word	0x20006a2c
 80013fc:	20006a30 	.word	0x20006a30

08001400 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00c      	beq.n	800142a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fce3 	bl	8000ddc <getBlockSize>
 8001416:	4603      	mov	r3, r0
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <microros_deallocate+0x34>)
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	461a      	mov	r2, r3
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <microros_deallocate+0x34>)
 8001422:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fc7d 	bl	8000d24 <vPortFreeMicroROS>
  }
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20006a30 	.word	0x20006a30

08001438 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <microros_reallocate+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4413      	add	r3, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <microros_reallocate+0x64>)
 8001452:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <microros_reallocate+0x68>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	461a      	mov	r2, r3
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <microros_reallocate+0x68>)
 8001462:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d104      	bne.n	8001474 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fb92 	bl	8000b94 <pvPortMallocMicroROS>
 8001470:	4603      	mov	r3, r0
 8001472:	e00e      	b.n	8001492 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fcb1 	bl	8000ddc <getBlockSize>
 800147a:	4603      	mov	r3, r0
 800147c:	4a08      	ldr	r2, [pc, #32]	@ (80014a0 <microros_reallocate+0x68>)
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	461a      	mov	r2, r3
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <microros_reallocate+0x68>)
 8001486:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff fcc4 	bl	8000e18 <pvPortReallocMicroROS>
 8001490:	4603      	mov	r3, r0
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20006a2c 	.word	0x20006a2c
 80014a0:	20006a30 	.word	0x20006a30

080014a4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	4a0c      	ldr	r2, [pc, #48]	@ (80014ec <microros_zero_allocate+0x48>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	461a      	mov	r2, r3
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <microros_zero_allocate+0x48>)
 80014c2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	4a08      	ldr	r2, [pc, #32]	@ (80014f0 <microros_zero_allocate+0x4c>)
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <microros_zero_allocate+0x4c>)
 80014d6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fcc9 	bl	8000e72 <pvPortCallocMicroROS>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20006a2c 	.word	0x20006a2c
 80014f0:	20006a30 	.word	0x20006a30
 80014f4:	00000000 	.word	0x00000000

080014f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80014f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800150a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800150e:	a320      	add	r3, pc, #128	@ (adr r3, 8001590 <UTILS_NanosecondsToTimespec+0x98>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7fe feec 	bl	80002f0 <__aeabi_ldivmod>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001526:	a31a      	add	r3, pc, #104	@ (adr r3, 8001590 <UTILS_NanosecondsToTimespec+0x98>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7fe fee0 	bl	80002f0 <__aeabi_ldivmod>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da20      	bge.n	800157e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a11      	ldr	r2, [pc, #68]	@ (8001588 <UTILS_NanosecondsToTimespec+0x90>)
 8001542:	fb82 1203 	smull	r1, r2, r2, r3
 8001546:	1712      	asrs	r2, r2, #28
 8001548:	17db      	asrs	r3, r3, #31
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	6979      	ldr	r1, [r7, #20]
 8001558:	17c8      	asrs	r0, r1, #31
 800155a:	460c      	mov	r4, r1
 800155c:	4605      	mov	r5, r0
 800155e:	ebb2 0804 	subs.w	r8, r2, r4
 8001562:	eb63 0905 	sbc.w	r9, r3, r5
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4906      	ldr	r1, [pc, #24]	@ (800158c <UTILS_NanosecondsToTimespec+0x94>)
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	441a      	add	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]
    }
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001588:	44b82fa1 	.word	0x44b82fa1
 800158c:	3b9aca00 	.word	0x3b9aca00
 8001590:	3b9aca00 	.word	0x3b9aca00
 8001594:	00000000 	.word	0x00000000

08001598 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b08e      	sub	sp, #56	@ 0x38
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80015a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80015a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80015a8:	2300      	movs	r3, #0
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80015ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 ff20 	bl	8007404 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80015c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c6:	17da      	asrs	r2, r3, #31
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	61fa      	str	r2, [r7, #28]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	69b9      	ldr	r1, [r7, #24]
 80015d6:	000b      	movs	r3, r1
 80015d8:	2200      	movs	r2, #0
 80015da:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80015de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e0:	2200      	movs	r2, #0
 80015e2:	461c      	mov	r4, r3
 80015e4:	4615      	mov	r5, r2
 80015e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80015ea:	1911      	adds	r1, r2, r4
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	416b      	adcs	r3, r5
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80015fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	f04f 0400 	mov.w	r4, #0
 8001606:	f04f 0500 	mov.w	r5, #0
 800160a:	015d      	lsls	r5, r3, #5
 800160c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001610:	0154      	lsls	r4, r2, #5
 8001612:	4622      	mov	r2, r4
 8001614:	462b      	mov	r3, r5
 8001616:	ebb2 0800 	subs.w	r8, r2, r0
 800161a:	eb63 0901 	sbc.w	r9, r3, r1
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800162a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800162e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001632:	4690      	mov	r8, r2
 8001634:	4699      	mov	r9, r3
 8001636:	eb18 0a00 	adds.w	sl, r8, r0
 800163a:	eb49 0b01 	adc.w	fp, r9, r1
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800164a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800164e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001652:	ebb2 040a 	subs.w	r4, r2, sl
 8001656:	603c      	str	r4, [r7, #0]
 8001658:	eb63 030b 	sbc.w	r3, r3, fp
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001662:	4623      	mov	r3, r4
 8001664:	181b      	adds	r3, r3, r0
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	462b      	mov	r3, r5
 800166a:	eb41 0303 	adc.w	r3, r1, r3
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001676:	f7ff ff3f 	bl	80014f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800167a:	2300      	movs	r3, #0
 800167c:	4618      	mov	r0, r3
 800167e:	3738      	adds	r7, #56	@ 0x38
 8001680:	46bd      	mov	sp, r7
 8001682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_MspInit+0x50>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001692:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <HAL_MspInit+0x50>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	@ 0x60
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x50>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x50>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	4a0b      	ldr	r2, [pc, #44]	@ (80016d8 <HAL_MspInit+0x50>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x50>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	210f      	movs	r1, #15
 80016c2:	f06f 0001 	mvn.w	r0, #1
 80016c6:	f000 fbb9 	bl	8001e3c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ca:	f001 f999 	bl	8002a00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	@ 0x30
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016ec:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <HAL_InitTick+0xc4>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <HAL_InitTick+0xc4>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_InitTick+0xc4>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001704:	f107 020c 	add.w	r2, r7, #12
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fe6e 	bl	80033f0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001714:	f001 fe40 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8001718:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171c:	4a21      	ldr	r2, [pc, #132]	@ (80017a4 <HAL_InitTick+0xc8>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	3b01      	subs	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_InitTick+0xcc>)
 800172a:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <HAL_InitTick+0xd0>)
 800172c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_InitTick+0xcc>)
 8001730:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001734:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <HAL_InitTick+0xcc>)
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_InitTick+0xcc>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_InitTick+0xcc>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001748:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <HAL_InitTick+0xcc>)
 800174a:	f002 f917 	bl	800397c <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001758:	2b00      	cmp	r3, #0
 800175a:	d11b      	bne.n	8001794 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800175c:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <HAL_InitTick+0xcc>)
 800175e:	f002 f96f 	bl	8003a40 <HAL_TIM_Base_Start_IT>
 8001762:	4603      	mov	r3, r0
 8001764:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001770:	2036      	movs	r0, #54	@ 0x36
 8001772:	f000 fb7d 	bl	8001e70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d808      	bhi.n	800178e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2036      	movs	r0, #54	@ 0x36
 8001782:	f000 fb5b 	bl	8001e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_InitTick+0xd4>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e002      	b.n	8001794 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001798:	4618      	mov	r0, r3
 800179a:	3730      	adds	r7, #48	@ 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	20006a34 	.word	0x20006a34
 80017ac:	40001000 	.word	0x40001000
 80017b0:	20000008 	.word	0x20000008

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <DMA1_Channel1_IRQHandler+0x10>)
 80017f2:	f000 fd2e 	bl	8002252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20006b1c 	.word	0x20006b1c

08001800 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <DMA1_Channel2_IRQHandler+0x10>)
 8001806:	f000 fd24 	bl	8002252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20006b7c 	.word	0x20006b7c

08001814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001818:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800181c:	f001 f828 	bl	8002870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <TIM6_DAC_IRQHandler+0x10>)
 800182a:	f002 f981 	bl	8003b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20006a34 	.word	0x20006a34

08001838 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <LPUART1_IRQHandler+0x10>)
 800183e:	f002 fd9b 	bl	8004378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20006a88 	.word	0x20006a88

0800184c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_kill>:

int _kill(int pid, int sig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001866:	f014 f855 	bl	8015914 <__errno>
 800186a:	4603      	mov	r3, r0
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
	return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_exit>:

void _exit (int status)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001884:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe7 	bl	800185c <_kill>
	while (1) {}		/* Make sure we hang here */
 800188e:	bf00      	nop
 8001890:	e7fd      	b.n	800188e <_exit+0x12>

08001892 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e00a      	b.n	80018ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a4:	f3af 8000 	nop.w
 80018a8:	4601      	mov	r1, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	b2ca      	uxtb	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf0      	blt.n	80018a4 <_read+0x12>
	}

return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e009      	b.n	80018f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf1      	blt.n	80018de <_write+0x12>
	}
	return len;
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_close>:

int _close(int file)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	605a      	str	r2, [r3, #4]
	return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_isatty>:

int _isatty(int file)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
	return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f013 ffba 	bl	8015914 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20020000 	.word	0x20020000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	20006a84 	.word	0x20006a84
 80019d4:	200126d0 	.word	0x200126d0

080019d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a02:	4a22      	ldr	r2, [pc, #136]	@ (8001a8c <MX_LPUART1_UART_Init+0x90>)
 8001a04:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a3e:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a40:	f002 fae8 	bl	8004014 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a4a:	f7ff fcb1 	bl	80013b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a52:	f003 fff8 	bl	8005a46 <HAL_UARTEx_SetTxFifoThreshold>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a5c:	f7ff fca8 	bl	80013b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	4809      	ldr	r0, [pc, #36]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a64:	f004 f82d 	bl	8005ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a6e:	f7ff fc9f 	bl	80013b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <MX_LPUART1_UART_Init+0x8c>)
 8001a74:	f003 ffae 	bl	80059d4 <HAL_UARTEx_DisableFifoMode>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a7e:	f7ff fc97 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20006a88 	.word	0x20006a88
 8001a8c:	40008000 	.word	0x40008000

08001a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b09e      	sub	sp, #120	@ 0x78
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	2254      	movs	r2, #84	@ 0x54
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f013 fe45 	bl	8015740 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf4 <HAL_UART_MspInit+0x164>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 8094 	bne.w	8001bea <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 fd06 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ada:	f7ff fc69 	bl	80013b0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ade:	4b46      	ldr	r3, [pc, #280]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	4a45      	ldr	r2, [pc, #276]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001aea:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf8 <HAL_UART_MspInit+0x168>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b0e:	230c      	movs	r3, #12
 8001b10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b1e:	230c      	movs	r3, #12
 8001b20:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2c:	f000 fcec 	bl	8002508 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b32:	4a33      	ldr	r2, [pc, #204]	@ (8001c00 <HAL_UART_MspInit+0x170>)
 8001b34:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b38:	2222      	movs	r2, #34	@ 0x22
 8001b3a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b62:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001b68:	4824      	ldr	r0, [pc, #144]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b6a:	f000 f98f 	bl	8001e8c <HAL_DMA_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001b74:	f7ff fc1c 	bl	80013b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b80:	4a1e      	ldr	r2, [pc, #120]	@ (8001bfc <HAL_UART_MspInit+0x16c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001b88:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <HAL_UART_MspInit+0x178>)
 8001b8a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001b8e:	2223      	movs	r2, #35	@ 0x23
 8001b90:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001b94:	2210      	movs	r2, #16
 8001b96:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001bb8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001bbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001bbe:	4811      	ldr	r0, [pc, #68]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001bc0:	f000 f964 	bl	8001e8c <HAL_DMA_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001bca:	f7ff fbf1 	bl	80013b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001bd2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_UART_MspInit+0x174>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	205b      	movs	r0, #91	@ 0x5b
 8001be0:	f000 f92c 	bl	8001e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001be4:	205b      	movs	r0, #91	@ 0x5b
 8001be6:	f000 f943 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3778      	adds	r7, #120	@ 0x78
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40008000 	.word	0x40008000
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20006b1c 	.word	0x20006b1c
 8001c00:	40020008 	.word	0x40020008
 8001c04:	20006b7c 	.word	0x20006b7c
 8001c08:	4002001c 	.word	0x4002001c

08001c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c0c:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	@ (8001c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	@ (8001c58 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c36:	f7ff fecf 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f013 fe71 	bl	8015920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3e:	f7ff fb45 	bl	80012cc <main>

08001c42 <LoopForever>:

LoopForever:
    b LoopForever
 8001c42:	e7fe      	b.n	8001c42 <LoopForever>
  ldr   r0, =_estack
 8001c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001c50:	08017468 	.word	0x08017468
  ldr r2, =_sbss
 8001c54:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001c58:	200126d0 	.word	0x200126d0

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>

08001c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f8dc 	bl	8001e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff fd34 	bl	80016dc <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e001      	b.n	8001c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c80:	f7ff fd02 	bl	8001688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c84:	79fb      	ldrb	r3, [r7, #7]

}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_IncTick+0x1c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_IncTick+0x20>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a03      	ldr	r2, [pc, #12]	@ (8001cac <HAL_IncTick+0x1c>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20006bdc 	.word	0x20006bdc
 8001cb0:	2000000c 	.word	0x2000000c

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20006bdc 	.word	0x20006bdc

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	@ (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	@ (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	@ (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	@ 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
         );
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	@ 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff4c 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4a:	f7ff ff63 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7ff ffb3 	bl	8001dc0 <NVIC_EncodePriority>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff82 	bl	8001d6c <__NVIC_SetPriority>
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff56 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e08d      	b.n	8001fba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b47      	ldr	r3, [pc, #284]	@ (8001fc4 <HAL_DMA_Init+0x138>)
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d80f      	bhi.n	8001eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b45      	ldr	r3, [pc, #276]	@ (8001fc8 <HAL_DMA_Init+0x13c>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a45      	ldr	r2, [pc, #276]	@ (8001fcc <HAL_DMA_Init+0x140>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	009a      	lsls	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a42      	ldr	r2, [pc, #264]	@ (8001fd0 <HAL_DMA_Init+0x144>)
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ec8:	e00e      	b.n	8001ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <HAL_DMA_Init+0x148>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8001fcc <HAL_DMA_Init+0x140>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8001fd8 <HAL_DMA_Init+0x14c>)
 8001ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2202      	movs	r2, #2
 8001eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fa82 	bl	8002444 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f48:	d102      	bne.n	8001f50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_DMA_Init+0x104>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d80c      	bhi.n	8001f90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 faa2 	bl	80024c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	e008      	b.n	8001fa2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020407 	.word	0x40020407
 8001fc8:	bffdfff8 	.word	0xbffdfff8
 8001fcc:	cccccccd 	.word	0xcccccccd
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	bffdfbf8 	.word	0xbffdfbf8
 8001fd8:	40020400 	.word	0x40020400

08001fdc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_DMA_Start_IT+0x20>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e066      	b.n	80020ca <HAL_DMA_Start_IT+0xee>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d155      	bne.n	80020bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f9c7 	bl	80023c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 020e 	orr.w	r2, r2, #14
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e00f      	b.n	8002074 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 020a 	orr.w	r2, r2, #10
 8002072:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002090:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e005      	b.n	80020c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
 80020c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d005      	beq.n	80020f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e037      	b.n	8002166 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 020e 	bic.w	r2, r2, #14
 8002104:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002110:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002114:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 021f 	and.w	r2, r3, #31
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002142:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00c      	beq.n	8002166 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800215a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002164:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d00d      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2204      	movs	r2, #4
 80021a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e047      	b.n	8002248 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020e 	bic.w	r2, r2, #14
 80021c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002204:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002226:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
    }
  }
  return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2204      	movs	r2, #4
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d026      	beq.n	80022cc <HAL_DMA_IRQHandler+0x7a>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d021      	beq.n	80022cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0204 	bic.w	r2, r2, #4
 80022a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f003 021f 	and.w	r2, r3, #31
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	2104      	movs	r1, #4
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d071      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022ca:	e06c      	b.n	80023a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2202      	movs	r2, #2
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d02e      	beq.n	800233e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d029      	beq.n	800233e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 020a 	bic.w	r2, r2, #10
 8002306:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2102      	movs	r1, #2
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d038      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800233c:	e033      	b.n	80023a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2208      	movs	r2, #8
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02a      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d025      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020e 	bic.w	r2, r2, #14
 800236a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
}
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f003 021f 	and.w	r2, r3, #31
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f202 	lsl.w	r2, r1, r2
 8002404:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d108      	bne.n	8002428 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002426:	e007      	b.n	8002438 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	60da      	str	r2, [r3, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002454:	429a      	cmp	r2, r3
 8002456:	d802      	bhi.n	800245e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002458:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e001      	b.n	8002462 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002460:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3b08      	subs	r3, #8
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a0b      	ldr	r2, [pc, #44]	@ (80024bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800248e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40020407 	.word	0x40020407
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020820 	.word	0x40020820
 80024b8:	cccccccd 	.word	0xcccccccd
 80024bc:	40020880 	.word	0x40020880

080024c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2201      	movs	r2, #1
 80024ee:	409a      	lsls	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	1000823f 	.word	0x1000823f
 8002504:	40020940 	.word	0x40020940

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002516:	e15a      	b.n	80027ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 814c 	beq.w	80027c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d005      	beq.n	8002548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002544:	2b02      	cmp	r3, #2
 8002546:	d130      	bne.n	80025aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0201 	and.w	r2, r3, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d017      	beq.n	80025e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d123      	bne.n	800263a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	08da      	lsrs	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3208      	adds	r2, #8
 80025fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	6939      	ldr	r1, [r7, #16]
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a6 	beq.w	80027c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267c:	4b5b      	ldr	r3, [pc, #364]	@ (80027ec <HAL_GPIO_Init+0x2e4>)
 800267e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002680:	4a5a      	ldr	r2, [pc, #360]	@ (80027ec <HAL_GPIO_Init+0x2e4>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6613      	str	r3, [r2, #96]	@ 0x60
 8002688:	4b58      	ldr	r3, [pc, #352]	@ (80027ec <HAL_GPIO_Init+0x2e4>)
 800268a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002694:	4a56      	ldr	r2, [pc, #344]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026be:	d01f      	beq.n	8002700 <HAL_GPIO_Init+0x1f8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a4c      	ldr	r2, [pc, #304]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d019      	beq.n	80026fc <HAL_GPIO_Init+0x1f4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a4b      	ldr	r2, [pc, #300]	@ (80027f8 <HAL_GPIO_Init+0x2f0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_GPIO_Init+0x1f0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a4a      	ldr	r2, [pc, #296]	@ (80027fc <HAL_GPIO_Init+0x2f4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00d      	beq.n	80026f4 <HAL_GPIO_Init+0x1ec>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <HAL_GPIO_Init+0x2f8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <HAL_GPIO_Init+0x1e8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_GPIO_Init+0x2fc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_GPIO_Init+0x1e4>
 80026e8:	2305      	movs	r3, #5
 80026ea:	e00a      	b.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026ec:	2306      	movs	r3, #6
 80026ee:	e008      	b.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e006      	b.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026f4:	2303      	movs	r3, #3
 80026f6:	e004      	b.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e002      	b.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_GPIO_Init+0x1fa>
 8002700:	2300      	movs	r3, #0
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	f002 0203 	and.w	r2, r2, #3
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	4093      	lsls	r3, r2
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002712:	4937      	ldr	r1, [pc, #220]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002720:	4b39      	ldr	r3, [pc, #228]	@ (8002808 <HAL_GPIO_Init+0x300>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002744:	4a30      	ldr	r2, [pc, #192]	@ (8002808 <HAL_GPIO_Init+0x300>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800274a:	4b2f      	ldr	r3, [pc, #188]	@ (8002808 <HAL_GPIO_Init+0x300>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800276e:	4a26      	ldr	r2, [pc, #152]	@ (8002808 <HAL_GPIO_Init+0x300>)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_GPIO_Init+0x300>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002798:	4a1b      	ldr	r2, [pc, #108]	@ (8002808 <HAL_GPIO_Init+0x300>)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <HAL_GPIO_Init+0x300>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027c2:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <HAL_GPIO_Init+0x300>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	3301      	adds	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f47f ae9d 	bne.w	8002518 <HAL_GPIO_Init+0x10>
  }
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40010000 	.word	0x40010000
 80027f4:	48000400 	.word	0x48000400
 80027f8:	48000800 	.word	0x48000800
 80027fc:	48000c00 	.word	0x48000c00
 8002800:	48001000 	.word	0x48001000
 8002804:	48001400 	.word	0x48001400
 8002808:	40010400 	.word	0x40010400

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002828:	e002      	b.n	8002830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43d9      	mvns	r1, r3
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	400b      	ands	r3, r1
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	619a      	str	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800287a:	4b08      	ldr	r3, [pc, #32]	@ (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002886:	4a05      	ldr	r2, [pc, #20]	@ (800289c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f806 	bl	80028a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d141      	bne.n	800294a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c6:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d2:	d131      	bne.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028d4:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028da:	4a46      	ldr	r2, [pc, #280]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e4:	4b43      	ldr	r3, [pc, #268]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028ec:	4a41      	ldr	r2, [pc, #260]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028f4:	4b40      	ldr	r3, [pc, #256]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2232      	movs	r2, #50	@ 0x32
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	0c9b      	lsrs	r3, r3, #18
 8002906:	3301      	adds	r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290a:	e002      	b.n	8002912 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3b01      	subs	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002912:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291e:	d102      	bne.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f2      	bne.n	800290c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002926:	4b33      	ldr	r3, [pc, #204]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002932:	d158      	bne.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e057      	b.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002938:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800293e:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002944:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002948:	e04d      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002950:	d141      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002952:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	d131      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002966:	4a23      	ldr	r2, [pc, #140]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002970:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002978:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2232      	movs	r2, #50	@ 0x32
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	4a1c      	ldr	r2, [pc, #112]	@ (80029fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	0c9b      	lsrs	r3, r3, #18
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002996:	e002      	b.n	800299e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3b01      	subs	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029aa:	d102      	bne.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f2      	bne.n	8002998 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029be:	d112      	bne.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e011      	b.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ca:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029d4:	e007      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029de:	4a05      	ldr	r2, [pc, #20]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40007000 	.word	0x40007000
 80029f8:	20000004 	.word	0x20000004
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a04:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0e:	6093      	str	r3, [r2, #8]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40007000 	.word	0x40007000

08002a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e2fe      	b.n	8003030 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d075      	beq.n	8002b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3e:	4b97      	ldr	r3, [pc, #604]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a48:	4b94      	ldr	r3, [pc, #592]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_OscConfig+0x3e>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_OscConfig+0x44>
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b8d      	ldr	r3, [pc, #564]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d05b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x108>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d157      	bne.n	8002b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e2d9      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x74>
 8002a86:	4b85      	ldr	r3, [pc, #532]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a84      	ldr	r2, [pc, #528]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e01d      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x98>
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7b      	ldr	r2, [pc, #492]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
 8002ab8:	4b78      	ldr	r3, [pc, #480]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a77      	ldr	r2, [pc, #476]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b75      	ldr	r3, [pc, #468]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a74      	ldr	r2, [pc, #464]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7ff f8ec 	bl	8001cb4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff f8e8 	bl	8001cb4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e29e      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xc0>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7ff f8d8 	bl	8001cb4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f8d4 	bl	8001cb4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e28a      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1a:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0xe8>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d075      	beq.n	8002c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b36:	4b59      	ldr	r3, [pc, #356]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b40:	4b56      	ldr	r3, [pc, #344]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d102      	bne.n	8002b56 <HAL_RCC_OscConfig+0x136>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d002      	beq.n	8002b5c <HAL_RCC_OscConfig+0x13c>
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d11f      	bne.n	8002b9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_OscConfig+0x154>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e25d      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4b49      	ldr	r3, [pc, #292]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	4946      	ldr	r1, [pc, #280]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b88:	4b45      	ldr	r3, [pc, #276]	@ (8002ca0 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fda5 	bl	80016dc <HAL_InitTick>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d043      	beq.n	8002c20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e249      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f880 	bl	8001cb4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f87c 	bl	8001cb4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e232      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bca:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	492d      	ldr	r1, [pc, #180]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
 8002bea:	e01a      	b.n	8002c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bec:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7ff f85c 	bl	8001cb4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7ff f858 	bl	8001cb4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e20e      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c12:	4b22      	ldr	r3, [pc, #136]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1e0>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d041      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c3c:	4a17      	ldr	r2, [pc, #92]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7ff f835 	bl	8001cb4 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7ff f831 	bl	8001cb4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1e7      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c60:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ef      	beq.n	8002c4e <HAL_RCC_OscConfig+0x22e>
 8002c6e:	e020      	b.n	8002cb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c76:	4a09      	ldr	r2, [pc, #36]	@ (8002c9c <HAL_RCC_OscConfig+0x27c>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7ff f818 	bl	8001cb4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c86:	e00d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7ff f814 	bl	8001cb4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d906      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1ca      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ea      	bne.n	8002c88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a6 	beq.w	8002e0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cc4:	4b84      	ldr	r3, [pc, #528]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2b4>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x2b6>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf6:	4b79      	ldr	r3, [pc, #484]	@ (8002edc <HAL_RCC_OscConfig+0x4bc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d02:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCC_OscConfig+0x4bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x4bc>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7fe ffd1 	bl	8001cb4 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe ffcd 	bl	8001cb4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e183      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d28:	4b6c      	ldr	r3, [pc, #432]	@ (8002edc <HAL_RCC_OscConfig+0x4bc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <HAL_RCC_OscConfig+0x32e>
 8002d3c:	4b66      	ldr	r3, [pc, #408]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	4a65      	ldr	r2, [pc, #404]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d4c:	e024      	b.n	8002d98 <HAL_RCC_OscConfig+0x378>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d110      	bne.n	8002d78 <HAL_RCC_OscConfig+0x358>
 8002d56:	4b60      	ldr	r3, [pc, #384]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d66:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d76:	e00f      	b.n	8002d98 <HAL_RCC_OscConfig+0x378>
 8002d78:	4b57      	ldr	r3, [pc, #348]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	4a56      	ldr	r2, [pc, #344]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d88:	4b53      	ldr	r3, [pc, #332]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	4a52      	ldr	r2, [pc, #328]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe ff88 	bl	8001cb4 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe ff84 	bl	8001cb4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e138      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbe:	4b46      	ldr	r3, [pc, #280]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ed      	beq.n	8002da8 <HAL_RCC_OscConfig+0x388>
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe ff71 	bl	8001cb4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe ff6d 	bl	8001cb4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e121      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dec:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ed      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b35      	ldr	r3, [pc, #212]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	4a34      	ldr	r2, [pc, #208]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e20:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e26:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe ff40 	bl	8001cb4 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e38:	f7fe ff3c 	bl	8001cb4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0f2      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e4a:	4b23      	ldr	r3, [pc, #140]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCC_OscConfig+0x418>
 8002e58:	e01b      	b.n	8002e92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e60:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe ff23 	bl	8001cb4 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e72:	f7fe ff1f 	bl	8001cb4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0d5      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e84:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80c9 	beq.w	800302e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	f000 8083 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d15e      	bne.n	8002f70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a08      	ldr	r2, [pc, #32]	@ (8002ed8 <HAL_RCC_OscConfig+0x4b8>)
 8002eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fef9 	bl	8001cb4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec4:	e00c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fef5 	bl	8001cb4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d905      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0ab      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee0:	4b55      	ldr	r3, [pc, #340]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ec      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eec:	4b52      	ldr	r3, [pc, #328]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	4b52      	ldr	r3, [pc, #328]	@ (800303c <HAL_RCC_OscConfig+0x61c>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6a11      	ldr	r1, [r2, #32]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002efc:	3a01      	subs	r2, #1
 8002efe:	0112      	lsls	r2, r2, #4
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002f06:	0212      	lsls	r2, r2, #8
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f0e:	0852      	lsrs	r2, r2, #1
 8002f10:	3a01      	subs	r2, #1
 8002f12:	0552      	lsls	r2, r2, #21
 8002f14:	4311      	orrs	r1, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0652      	lsls	r2, r2, #25
 8002f20:	4311      	orrs	r1, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f26:	06d2      	lsls	r2, r2, #27
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4943      	ldr	r1, [pc, #268]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f30:	4b41      	ldr	r3, [pc, #260]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a40      	ldr	r2, [pc, #256]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a3d      	ldr	r2, [pc, #244]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe feb4 	bl	8001cb4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe feb0 	bl	8001cb4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e066      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f62:	4b35      	ldr	r3, [pc, #212]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x530>
 8002f6e:	e05e      	b.n	800302e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b31      	ldr	r3, [pc, #196]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a30      	ldr	r2, [pc, #192]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fe9a 	bl	8001cb4 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fe96 	bl	8001cb4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e04c      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f96:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002fa2:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	4924      	ldr	r1, [pc, #144]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_RCC_OscConfig+0x620>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	60cb      	str	r3, [r1, #12]
 8002fae:	e03e      	b.n	800302e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e039      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_RCC_OscConfig+0x618>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d12c      	bne.n	800302a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d123      	bne.n	800302a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d11b      	bne.n	800302a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d113      	bne.n	800302a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	3b01      	subs	r3, #1
 8003010:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d109      	bne.n	800302a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	019f800c 	.word	0x019f800c
 8003040:	feeefffc 	.word	0xfeeefffc

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e11e      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b91      	ldr	r3, [pc, #580]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d910      	bls.n	800308c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b8e      	ldr	r3, [pc, #568]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	498c      	ldr	r1, [pc, #560]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b8a      	ldr	r3, [pc, #552]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e106      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d073      	beq.n	8003180 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d129      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a0:	4b81      	ldr	r3, [pc, #516]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0f4      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80030b0:	f000 f9d0 	bl	8003454 <RCC_GetSysClockFreqFromPLLSource>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4a7c      	ldr	r2, [pc, #496]	@ (80032ac <HAL_RCC_ClockConfig+0x268>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d93f      	bls.n	800313e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030be:	4b7a      	ldr	r3, [pc, #488]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d033      	beq.n	800313e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d12f      	bne.n	800313e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030de:	4b72      	ldr	r3, [pc, #456]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030e6:	4a70      	ldr	r2, [pc, #448]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e024      	b.n	800313e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d107      	bne.n	800310c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0c6      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0be      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800311c:	f000 f8ce 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4a61      	ldr	r2, [pc, #388]	@ (80032ac <HAL_RCC_ClockConfig+0x268>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d909      	bls.n	800313e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800312a:	4b5f      	ldr	r3, [pc, #380]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003132:	4a5d      	ldr	r2, [pc, #372]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003138:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b5a      	ldr	r3, [pc, #360]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4957      	ldr	r1, [pc, #348]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe fdb0 	bl	8001cb4 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7fe fdac 	bl	8001cb4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e095      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b4e      	ldr	r3, [pc, #312]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b43      	ldr	r3, [pc, #268]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a42      	ldr	r2, [pc, #264]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800319e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80031b0:	4b3d      	ldr	r3, [pc, #244]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031b8:	4a3b      	ldr	r2, [pc, #236]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c0:	4b39      	ldr	r3, [pc, #228]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4936      	ldr	r1, [pc, #216]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031da:	4b33      	ldr	r3, [pc, #204]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 80031e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e6:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d21d      	bcs.n	8003230 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f4:	4b2b      	ldr	r3, [pc, #172]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 020f 	bic.w	r2, r3, #15
 80031fc:	4929      	ldr	r1, [pc, #164]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003204:	f7fe fd56 	bl	8001cb4 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe fd52 	bl	8001cb4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e03b      	b.n	800329a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_RCC_ClockConfig+0x260>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d1ed      	bne.n	800320c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323c:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4917      	ldr	r1, [pc, #92]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325a:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	490f      	ldr	r1, [pc, #60]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326e:	f000 f825 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_RCC_ClockConfig+0x264>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	490c      	ldr	r1, [pc, #48]	@ (80032b0 <HAL_RCC_ClockConfig+0x26c>)
 8003280:	5ccb      	ldrb	r3, [r1, r3]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <HAL_RCC_ClockConfig+0x270>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <HAL_RCC_ClockConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fa22 	bl	80016dc <HAL_InitTick>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	04c4b400 	.word	0x04c4b400
 80032b0:	08016890 	.word	0x08016890
 80032b4:	20000004 	.word	0x20000004
 80032b8:	20000008 	.word	0x20000008

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d102      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e047      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032d4:	4b27      	ldr	r3, [pc, #156]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d102      	bne.n	80032e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e0:	4b26      	ldr	r3, [pc, #152]	@ (800337c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e03e      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80032e6:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d136      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3301      	adds	r3, #1
 8003308:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d10c      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003310:	4a1a      	ldr	r2, [pc, #104]	@ (800337c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	4a16      	ldr	r2, [pc, #88]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331a:	68d2      	ldr	r2, [r2, #12]
 800331c:	0a12      	lsrs	r2, r2, #8
 800331e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
      break;
 8003328:	e00c      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800332a:	4a13      	ldr	r2, [pc, #76]	@ (8003378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	4a10      	ldr	r2, [pc, #64]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	0a12      	lsrs	r2, r2, #8
 8003338:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800333c:	fb02 f303 	mul.w	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
      break;
 8003342:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0e5b      	lsrs	r3, r3, #25
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	3301      	adds	r3, #1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	e001      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003364:	693b      	ldr	r3, [r7, #16]
}
 8003366:	4618      	mov	r0, r3
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	00f42400 	.word	0x00f42400
 800337c:	016e3600 	.word	0x016e3600

08003380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	@ (80033c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	080168a0 	.word	0x080168a0

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c8:	f7ff ffda 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0adb      	lsrs	r3, r3, #11
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4904      	ldr	r1, [pc, #16]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	080168a0 	.word	0x080168a0

080033f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	220f      	movs	r2, #15
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003400:	4b12      	ldr	r3, [pc, #72]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_GetClockConfig+0x5c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <HAL_RCC_GetClockConfig+0x60>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	40022000 	.word	0x40022000

08003454 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800345a:	4b1e      	ldr	r3, [pc, #120]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d10c      	bne.n	8003492 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003482:	68d2      	ldr	r2, [r2, #12]
 8003484:	0a12      	lsrs	r2, r2, #8
 8003486:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	617b      	str	r3, [r7, #20]
    break;
 8003490:	e00c      	b.n	80034ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003492:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	4a0e      	ldr	r2, [pc, #56]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	0a12      	lsrs	r2, r2, #8
 80034a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
    break;
 80034aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	0e5b      	lsrs	r3, r3, #25
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034c6:	687b      	ldr	r3, [r7, #4]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40021000 	.word	0x40021000
 80034d8:	016e3600 	.word	0x016e3600
 80034dc:	00f42400 	.word	0x00f42400

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ec:	2300      	movs	r3, #0
 80034ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8098 	beq.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b43      	ldr	r3, [pc, #268]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	4a3f      	ldr	r2, [pc, #252]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003518:	6593      	str	r3, [r2, #88]	@ 0x58
 800351a:	4b3d      	ldr	r3, [pc, #244]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800352a:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a39      	ldr	r2, [pc, #228]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003536:	f7fe fbbd 	bl	8001cb4 <HAL_GetTick>
 800353a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800353c:	e009      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7fe fbb9 	bl	8001cb4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d902      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	74fb      	strb	r3, [r7, #19]
        break;
 8003550:	e005      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003552:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ef      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d159      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003564:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01e      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	429a      	cmp	r2, r3
 800357e:	d019      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003580:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003592:	4a1f      	ldr	r2, [pc, #124]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800359c:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fb79 	bl	8001cb4 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c4:	e00b      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7fe fb75 	bl	8001cb4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d902      	bls.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	74fb      	strb	r3, [r7, #19]
            break;
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ec      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f2:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003600:	4903      	ldr	r1, [pc, #12]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003608:	e008      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	74bb      	strb	r3, [r7, #18]
 800360e:	e005      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003610:	40021000 	.word	0x40021000
 8003614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361c:	7c7b      	ldrb	r3, [r7, #17]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4ba7      	ldr	r3, [pc, #668]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	4aa6      	ldr	r2, [pc, #664]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800363a:	4ba1      	ldr	r3, [pc, #644]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003640:	f023 0203 	bic.w	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	499d      	ldr	r1, [pc, #628]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800365c:	4b98      	ldr	r3, [pc, #608]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	f023 020c 	bic.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4995      	ldr	r1, [pc, #596]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800367e:	4b90      	ldr	r3, [pc, #576]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	498c      	ldr	r1, [pc, #560]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036a0:	4b87      	ldr	r3, [pc, #540]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	4984      	ldr	r1, [pc, #528]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036c2:	4b7f      	ldr	r3, [pc, #508]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	497b      	ldr	r1, [pc, #492]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e4:	4b76      	ldr	r3, [pc, #472]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	4973      	ldr	r1, [pc, #460]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003706:	4b6e      	ldr	r3, [pc, #440]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	496a      	ldr	r1, [pc, #424]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003728:	4b65      	ldr	r3, [pc, #404]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4962      	ldr	r1, [pc, #392]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374a:	4b5d      	ldr	r3, [pc, #372]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	4959      	ldr	r1, [pc, #356]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376c:	4b54      	ldr	r3, [pc, #336]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800376e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	4951      	ldr	r1, [pc, #324]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800378e:	4b4c      	ldr	r3, [pc, #304]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003794:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4948      	ldr	r1, [pc, #288]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b0:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	4940      	ldr	r1, [pc, #256]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ce:	d105      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d0:	4b3b      	ldr	r3, [pc, #236]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a3a      	ldr	r2, [pc, #232]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d015      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037e8:	4b35      	ldr	r3, [pc, #212]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	4932      	ldr	r1, [pc, #200]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003808:	4b2d      	ldr	r3, [pc, #180]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a2c      	ldr	r2, [pc, #176]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003812:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003820:	4b27      	ldr	r3, [pc, #156]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	4924      	ldr	r1, [pc, #144]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800383e:	d105      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003840:	4b1f      	ldr	r3, [pc, #124]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800384a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003866:	4916      	ldr	r1, [pc, #88]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003876:	d105      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003878:	4b11      	ldr	r3, [pc, #68]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a10      	ldr	r2, [pc, #64]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003882:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d019      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	4908      	ldr	r1, [pc, #32]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038ae:	d109      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a02      	ldr	r2, [pc, #8]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038ba:	60d3      	str	r3, [r2, #12]
 80038bc:	e002      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d015      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d0:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	4926      	ldr	r1, [pc, #152]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ee:	d105      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038f0:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a20      	ldr	r2, [pc, #128]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003916:	4918      	ldr	r1, [pc, #96]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003926:	d105      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a12      	ldr	r2, [pc, #72]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800392e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003932:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003940:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003946:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394e:	490a      	ldr	r1, [pc, #40]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800395e:	d105      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800396a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800396c:	7cbb      	ldrb	r3, [r7, #18]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000

0800397c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e049      	b.n	8003a22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f841 	bl	8003a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f000 fa30 	bl	8003e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d001      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e054      	b.n	8003b02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a26      	ldr	r2, [pc, #152]	@ (8003b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d022      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a82:	d01d      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a22      	ldr	r2, [pc, #136]	@ (8003b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8003b20 <HAL_TIM_Base_Start_IT+0xe0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <HAL_TIM_Base_Start_IT+0xe4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x80>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1b      	ldr	r2, [pc, #108]	@ (8003b28 <HAL_TIM_Base_Start_IT+0xe8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d115      	bne.n	8003aec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_TIM_Base_Start_IT+0xec>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d015      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0xbe>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad8:	d011      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aea:	e008      	b.n	8003afe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e000      	b.n	8003b00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40013400 	.word	0x40013400
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40015000 	.word	0x40015000
 8003b2c:	00010007 	.word	0x00010007

08003b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d020      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0202 	mvn.w	r2, #2
 8003b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f931 	bl	8003de2 <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f923 	bl	8003dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f934 	bl	8003df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d020      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01b      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0204 	mvn.w	r2, #4
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f90b 	bl	8003de2 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8fd 	bl	8003dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f90e 	bl	8003df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d020      	beq.n	8003c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8e5 	bl	8003de2 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8d7 	bl	8003dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8e8 	bl	8003df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0210 	mvn.w	r2, #16
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8bf 	bl	8003de2 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f8b1 	bl	8003dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8c2 	bl	8003df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fb78 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f969 	bl	8003f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00c      	beq.n	8003cee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f961 	bl	8003fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00c      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f87c 	bl	8003e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00c      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f06f 0220 	mvn.w	r2, #32
 8003d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f929 	bl	8003f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f935 	bl	8003fc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f92d 	bl	8003fd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00c      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f925 	bl	8003fec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f91d 	bl	8004000 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a4c      	ldr	r2, [pc, #304]	@ (8003f64 <TIM_Base_SetConfig+0x144>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d017      	beq.n	8003e68 <TIM_Base_SetConfig+0x48>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3e:	d013      	beq.n	8003e68 <TIM_Base_SetConfig+0x48>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a49      	ldr	r2, [pc, #292]	@ (8003f68 <TIM_Base_SetConfig+0x148>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a48      	ldr	r2, [pc, #288]	@ (8003f6c <TIM_Base_SetConfig+0x14c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0x48>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a47      	ldr	r2, [pc, #284]	@ (8003f70 <TIM_Base_SetConfig+0x150>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0x48>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a46      	ldr	r2, [pc, #280]	@ (8003f74 <TIM_Base_SetConfig+0x154>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0x48>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a45      	ldr	r2, [pc, #276]	@ (8003f78 <TIM_Base_SetConfig+0x158>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d108      	bne.n	8003e7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a39      	ldr	r2, [pc, #228]	@ (8003f64 <TIM_Base_SetConfig+0x144>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a36      	ldr	r2, [pc, #216]	@ (8003f68 <TIM_Base_SetConfig+0x148>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a35      	ldr	r2, [pc, #212]	@ (8003f6c <TIM_Base_SetConfig+0x14c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a34      	ldr	r2, [pc, #208]	@ (8003f70 <TIM_Base_SetConfig+0x150>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a33      	ldr	r2, [pc, #204]	@ (8003f74 <TIM_Base_SetConfig+0x154>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <TIM_Base_SetConfig+0x15c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a32      	ldr	r2, [pc, #200]	@ (8003f80 <TIM_Base_SetConfig+0x160>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	@ (8003f84 <TIM_Base_SetConfig+0x164>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f78 <TIM_Base_SetConfig+0x158>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a18      	ldr	r2, [pc, #96]	@ (8003f64 <TIM_Base_SetConfig+0x144>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <TIM_Base_SetConfig+0x110>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f74 <TIM_Base_SetConfig+0x154>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_Base_SetConfig+0x110>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a1a      	ldr	r2, [pc, #104]	@ (8003f7c <TIM_Base_SetConfig+0x15c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x110>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a19      	ldr	r2, [pc, #100]	@ (8003f80 <TIM_Base_SetConfig+0x160>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x110>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <TIM_Base_SetConfig+0x164>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x110>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <TIM_Base_SetConfig+0x158>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	611a      	str	r2, [r3, #16]
  }
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40015000 	.word	0x40015000
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40014800 	.word	0x40014800

08003f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e042      	b.n	80040ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fd fd29 	bl	8001a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	@ 0x24
 8004042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f001 f806 	bl	8005070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fd07 	bl	8004a78 <UART_SetConfig>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01b      	b.n	80040ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f001 f885 	bl	80051b4 <UART_CheckIdleState>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d167      	bne.n	800419c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_UART_Transmit_DMA+0x24>
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e060      	b.n	800419e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2221      	movs	r2, #33	@ 0x21
 80040fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d028      	beq.n	800415c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410e:	4a26      	ldr	r2, [pc, #152]	@ (80041a8 <HAL_UART_Transmit_DMA+0xf4>)
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004116:	4a25      	ldr	r2, [pc, #148]	@ (80041ac <HAL_UART_Transmit_DMA+0xf8>)
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411e:	4a24      	ldr	r2, [pc, #144]	@ (80041b0 <HAL_UART_Transmit_DMA+0xfc>)
 8004120:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004126:	2200      	movs	r2, #0
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	4619      	mov	r1, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3328      	adds	r3, #40	@ 0x28
 800413a:	461a      	mov	r2, r3
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	f7fd ff4d 	bl	8001fdc <HAL_DMA_Start_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2210      	movs	r2, #16
 800414c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e020      	b.n	800419e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2240      	movs	r2, #64	@ 0x40
 8004162:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	613b      	str	r3, [r7, #16]
   return(result);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	623a      	str	r2, [r7, #32]
 8004186:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69f9      	ldr	r1, [r7, #28]
 800418a:	6a3a      	ldr	r2, [r7, #32]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	61bb      	str	r3, [r7, #24]
   return(result);
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3728      	adds	r7, #40	@ 0x28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	0800567f 	.word	0x0800567f
 80041ac:	08005719 	.word	0x08005719
 80041b0:	0800589f 	.word	0x0800589f

080041b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	@ 0x28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d137      	bne.n	800423c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_UART_Receive_DMA+0x24>
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e030      	b.n	800423e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a18      	ldr	r2, [pc, #96]	@ (8004248 <HAL_UART_Receive_DMA+0x94>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d01f      	beq.n	800422c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d018      	beq.n	800422c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	613b      	str	r3, [r7, #16]
   return(result);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	623b      	str	r3, [r7, #32]
 800421a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	69f9      	ldr	r1, [r7, #28]
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	61bb      	str	r3, [r7, #24]
   return(result);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e6      	bne.n	80041fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	461a      	mov	r2, r3
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f001 f8d6 	bl	80053e4 <UART_Start_Receive_DMA>
 8004238:	4603      	mov	r3, r0
 800423a:	e000      	b.n	800423e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3728      	adds	r7, #40	@ 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40008000 	.word	0x40008000

0800424c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b090      	sub	sp, #64	@ 0x40
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004262:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426e:	2b80      	cmp	r3, #128	@ 0x80
 8004270:	d139      	bne.n	80042e6 <HAL_UART_DMAStop+0x9a>
 8004272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004274:	2b21      	cmp	r3, #33	@ 0x21
 8004276:	d136      	bne.n	80042e6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800429e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fd ff0a 	bl	80020d2 <HAL_DMA_Abort>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe f871 	bl	80023b0 <HAL_DMA_GetError>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d105      	bne.n	80042e0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2210      	movs	r2, #16
 80042d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e047      	b.n	8004370 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 f925 	bl	8005530 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d13c      	bne.n	800436e <HAL_UART_DMAStop+0x122>
 80042f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f6:	2b22      	cmp	r3, #34	@ 0x22
 80042f8:	d139      	bne.n	800436e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3308      	adds	r3, #8
 8004300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	60bb      	str	r3, [r7, #8]
   return(result);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004310:	633b      	str	r3, [r7, #48]	@ 0x30
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3308      	adds	r3, #8
 8004318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431a:	61ba      	str	r2, [r7, #24]
 800431c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	613b      	str	r3, [r7, #16]
   return(result);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	d017      	beq.n	8004368 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd fec7 	bl	80020d2 <HAL_DMA_Abort>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00e      	beq.n	8004368 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe f82d 	bl	80023b0 <HAL_DMA_GetError>
 8004356:	4603      	mov	r3, r0
 8004358:	2b20      	cmp	r3, #32
 800435a:	d105      	bne.n	8004368 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2210      	movs	r2, #16
 8004360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e003      	b.n	8004370 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 f922 	bl	80055b2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3740      	adds	r7, #64	@ 0x40
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b0ba      	sub	sp, #232	@ 0xe8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800439e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80043a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80043a6:	4013      	ands	r3, r2
 80043a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80043ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11b      	bne.n	80043ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8300 	beq.w	80049e2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
      }
      return;
 80043ea:	e2fa      	b.n	80049e2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8123 	beq.w	800463c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80043f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80043fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004630 <HAL_UART_IRQHandler+0x2b8>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004402:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004406:	4b8b      	ldr	r3, [pc, #556]	@ (8004634 <HAL_UART_IRQHandler+0x2bc>)
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8116 	beq.w	800463c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d011      	beq.n	8004440 <HAL_UART_IRQHandler+0xc8>
 800441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2201      	movs	r2, #1
 800442e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d011      	beq.n	8004470 <HAL_UART_IRQHandler+0xf8>
 800444c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2202      	movs	r2, #2
 800445e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d011      	beq.n	80044a0 <HAL_UART_IRQHandler+0x128>
 800447c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00b      	beq.n	80044a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2204      	movs	r2, #4
 800448e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d017      	beq.n	80044dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80044bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004630 <HAL_UART_IRQHandler+0x2b8>)
 80044be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2208      	movs	r2, #8
 80044ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	f043 0208 	orr.w	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d012      	beq.n	800450e <HAL_UART_IRQHandler+0x196>
 80044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8266 	beq.w	80049e6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d013      	beq.n	800454e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	2b40      	cmp	r3, #64	@ 0x40
 8004564:	d005      	beq.n	8004572 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800456a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800456e:	2b00      	cmp	r3, #0
 8004570:	d054      	beq.n	800461c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f001 f81d 	bl	80055b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d146      	bne.n	8004614 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800459c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1d9      	bne.n	8004586 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d017      	beq.n	800460c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045e2:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <HAL_UART_IRQHandler+0x2c0>)
 80045e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fdc9 	bl	8002184 <HAL_DMA_Abort_IT>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d019      	beq.n	800462c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004606:	4610      	mov	r0, r2
 8004608:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460a:	e00f      	b.n	800462c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fa1d 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004612:	e00b      	b.n	800462c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fa19 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461a:	e007      	b.n	800462c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fa15 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800462a:	e1dc      	b.n	80049e6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	bf00      	nop
    return;
 800462e:	e1da      	b.n	80049e6 <HAL_UART_IRQHandler+0x66e>
 8004630:	10000001 	.word	0x10000001
 8004634:	04000120 	.word	0x04000120
 8004638:	0800591f 	.word	0x0800591f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 8170 	bne.w	8004926 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8169 	beq.w	8004926 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8162 	beq.w	8004926 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2210      	movs	r2, #16
 8004668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b40      	cmp	r3, #64	@ 0x40
 8004676:	f040 80d8 	bne.w	800482a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004688:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80af 	beq.w	80047f0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004698:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800469c:	429a      	cmp	r2, r3
 800469e:	f080 80a7 	bcs.w	80047f0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 8087 	bne.w	80047ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1da      	bne.n	80046c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800471a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800472e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004732:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004736:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e1      	bne.n	800470a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3308      	adds	r3, #8
 800474c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3308      	adds	r3, #8
 8004766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800476a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004770:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e3      	bne.n	8004746 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800479a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800479c:	f023 0310 	bic.w	r3, r3, #16
 80047a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e4      	bne.n	800478c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fd fc82 	bl	80020d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f939 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80047ee:	e0fc      	b.n	80049ea <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f040 80f5 	bne.w	80049ea <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	f040 80eb 	bne.w	80049ea <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f91c 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
      return;
 8004828:	e0df      	b.n	80049ea <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004836:	b29b      	uxth	r3, r3
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80d1 	beq.w	80049ee <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800484c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80cc 	beq.w	80049ee <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800486a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
 800487a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800487e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e4      	bne.n	8004856 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	623b      	str	r3, [r7, #32]
   return(result);
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e1      	bne.n	800488c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	617b      	str	r3, [r7, #20]
   return(result);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e4      	bne.n	80048dc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f89e 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004924:	e063      	b.n	80049ee <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <HAL_UART_IRQHandler+0x5d8>
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004946:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 f825 	bl	8005998 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800494e:	e051      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d014      	beq.n	8004986 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004978:	2b00      	cmp	r3, #0
 800497a:	d03a      	beq.n	80049f2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
    }
    return;
 8004984:	e035      	b.n	80049f2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_UART_IRQHandler+0x62e>
 8004992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 ffcf 	bl	8005942 <UART_EndTransmit_IT>
    return;
 80049a4:	e026      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_UART_IRQHandler+0x64e>
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fffe 	bl	80059c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049c4:	e016      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_UART_IRQHandler+0x67c>
 80049d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0c      	bge.n	80049f4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 ffe6 	bl	80059ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049e0:	e008      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80049e2:	bf00      	nop
 80049e4:	e006      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
    return;
 80049e6:	bf00      	nop
 80049e8:	e004      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
      return;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_UART_IRQHandler+0x67c>
    return;
 80049f2:	bf00      	nop
  }
}
 80049f4:	37e8      	adds	r7, #232	@ 0xe8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop

080049fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a7c:	b08c      	sub	sp, #48	@ 0x30
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4baa      	ldr	r3, [pc, #680]	@ (8004d50 <UART_SetConfig+0x2d8>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a9f      	ldr	r2, [pc, #636]	@ (8004d54 <UART_SetConfig+0x2dc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004aee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	f023 010f 	bic.w	r1, r3, #15
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a90      	ldr	r2, [pc, #576]	@ (8004d58 <UART_SetConfig+0x2e0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d125      	bne.n	8004b68 <UART_SetConfig+0xf0>
 8004b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d81a      	bhi.n	8004b60 <UART_SetConfig+0xe8>
 8004b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b30 <UART_SetConfig+0xb8>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b59 	.word	0x08004b59
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e116      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e112      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e10e      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5e:	e10a      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b66:	e106      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d60 <UART_SetConfig+0x2e8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d138      	bne.n	8004be4 <UART_SetConfig+0x16c>
 8004b72:	4b7a      	ldr	r3, [pc, #488]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d82d      	bhi.n	8004bdc <UART_SetConfig+0x164>
 8004b80:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <UART_SetConfig+0x110>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004bdd 	.word	0x08004bdd
 8004b98:	08004bcd 	.word	0x08004bcd
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc2:	e0d8      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bca:	e0d4      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd2:	e0d0      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bda:	e0cc      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	e0c8      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5e      	ldr	r2, [pc, #376]	@ (8004d64 <UART_SetConfig+0x2ec>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d125      	bne.n	8004c3a <UART_SetConfig+0x1c2>
 8004bee:	4b5b      	ldr	r3, [pc, #364]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bf8:	2b30      	cmp	r3, #48	@ 0x30
 8004bfa:	d016      	beq.n	8004c2a <UART_SetConfig+0x1b2>
 8004bfc:	2b30      	cmp	r3, #48	@ 0x30
 8004bfe:	d818      	bhi.n	8004c32 <UART_SetConfig+0x1ba>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d00a      	beq.n	8004c1a <UART_SetConfig+0x1a2>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d814      	bhi.n	8004c32 <UART_SetConfig+0x1ba>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <UART_SetConfig+0x19a>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d008      	beq.n	8004c22 <UART_SetConfig+0x1aa>
 8004c10:	e00f      	b.n	8004c32 <UART_SetConfig+0x1ba>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c18:	e0ad      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c20:	e0a9      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c22:	2304      	movs	r3, #4
 8004c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c28:	e0a5      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c30:	e0a1      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c32:	2310      	movs	r3, #16
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c38:	e09d      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d68 <UART_SetConfig+0x2f0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d125      	bne.n	8004c90 <UART_SetConfig+0x218>
 8004c44:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c50:	d016      	beq.n	8004c80 <UART_SetConfig+0x208>
 8004c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c54:	d818      	bhi.n	8004c88 <UART_SetConfig+0x210>
 8004c56:	2b80      	cmp	r3, #128	@ 0x80
 8004c58:	d00a      	beq.n	8004c70 <UART_SetConfig+0x1f8>
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d814      	bhi.n	8004c88 <UART_SetConfig+0x210>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <UART_SetConfig+0x1f0>
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	d008      	beq.n	8004c78 <UART_SetConfig+0x200>
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x210>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e082      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e07e      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e07a      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c86:	e076      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8e:	e072      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <UART_SetConfig+0x2f4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d12a      	bne.n	8004cf0 <UART_SetConfig+0x278>
 8004c9a:	4b30      	ldr	r3, [pc, #192]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca8:	d01a      	beq.n	8004ce0 <UART_SetConfig+0x268>
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cae:	d81b      	bhi.n	8004ce8 <UART_SetConfig+0x270>
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb4:	d00c      	beq.n	8004cd0 <UART_SetConfig+0x258>
 8004cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cba:	d815      	bhi.n	8004ce8 <UART_SetConfig+0x270>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <UART_SetConfig+0x250>
 8004cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc4:	d008      	beq.n	8004cd8 <UART_SetConfig+0x260>
 8004cc6:	e00f      	b.n	8004ce8 <UART_SetConfig+0x270>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	e052      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd6:	e04e      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cde:	e04a      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce6:	e046      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cee:	e042      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a17      	ldr	r2, [pc, #92]	@ (8004d54 <UART_SetConfig+0x2dc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d13a      	bne.n	8004d70 <UART_SetConfig+0x2f8>
 8004cfa:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <UART_SetConfig+0x2e4>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d08:	d01a      	beq.n	8004d40 <UART_SetConfig+0x2c8>
 8004d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d0e:	d81b      	bhi.n	8004d48 <UART_SetConfig+0x2d0>
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d14:	d00c      	beq.n	8004d30 <UART_SetConfig+0x2b8>
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1a:	d815      	bhi.n	8004d48 <UART_SetConfig+0x2d0>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UART_SetConfig+0x2b0>
 8004d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d24:	d008      	beq.n	8004d38 <UART_SetConfig+0x2c0>
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x2d0>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2e:	e022      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d36:	e01e      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004d38:	2304      	movs	r3, #4
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3e:	e01a      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004d40:	2308      	movs	r3, #8
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d46:	e016      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004d48:	2310      	movs	r3, #16
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4e:	e012      	b.n	8004d76 <UART_SetConfig+0x2fe>
 8004d50:	cfff69f3 	.word	0xcfff69f3
 8004d54:	40008000 	.word	0x40008000
 8004d58:	40013800 	.word	0x40013800
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40004400 	.word	0x40004400
 8004d64:	40004800 	.word	0x40004800
 8004d68:	40004c00 	.word	0x40004c00
 8004d6c:	40005000 	.word	0x40005000
 8004d70:	2310      	movs	r3, #16
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4aae      	ldr	r2, [pc, #696]	@ (8005034 <UART_SetConfig+0x5bc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f040 8097 	bne.w	8004eb0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d823      	bhi.n	8004dd2 <UART_SetConfig+0x35a>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <UART_SetConfig+0x318>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dd3 	.word	0x08004dd3
 8004d98:	08004dbd 	.word	0x08004dbd
 8004d9c:	08004dd3 	.word	0x08004dd3
 8004da0:	08004dc3 	.word	0x08004dc3
 8004da4:	08004dd3 	.word	0x08004dd3
 8004da8:	08004dd3 	.word	0x08004dd3
 8004dac:	08004dd3 	.word	0x08004dd3
 8004db0:	08004dcb 	.word	0x08004dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fe faf0 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dba:	e010      	b.n	8004dde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8005038 <UART_SetConfig+0x5c0>)
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dc0:	e00d      	b.n	8004dde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc2:	f7fe fa7b 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8004dc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dc8:	e009      	b.n	8004dde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dd0:	e005      	b.n	8004dde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8130 	beq.w	8005046 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	4a94      	ldr	r2, [pc, #592]	@ (800503c <UART_SetConfig+0x5c4>)
 8004dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d305      	bcc.n	8004e16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d903      	bls.n	8004e1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e1c:	e113      	b.n	8005046 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	2200      	movs	r2, #0
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	60fa      	str	r2, [r7, #12]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	4a84      	ldr	r2, [pc, #528]	@ (800503c <UART_SetConfig+0x5c4>)
 8004e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2200      	movs	r2, #0
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e40:	f7fb faa6 	bl	8000390 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	020b      	lsls	r3, r1, #8
 8004e56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e5a:	0202      	lsls	r2, r0, #8
 8004e5c:	6979      	ldr	r1, [r7, #20]
 8004e5e:	6849      	ldr	r1, [r1, #4]
 8004e60:	0849      	lsrs	r1, r1, #1
 8004e62:	2000      	movs	r0, #0
 8004e64:	460c      	mov	r4, r1
 8004e66:	4605      	mov	r5, r0
 8004e68:	eb12 0804 	adds.w	r8, r2, r4
 8004e6c:	eb43 0905 	adc.w	r9, r3, r5
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	469a      	mov	sl, r3
 8004e78:	4693      	mov	fp, r2
 8004e7a:	4652      	mov	r2, sl
 8004e7c:	465b      	mov	r3, fp
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb fa85 	bl	8000390 <__aeabi_uldivmod>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e94:	d308      	bcc.n	8004ea8 <UART_SetConfig+0x430>
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9c:	d204      	bcs.n	8004ea8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e0ce      	b.n	8005046 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eae:	e0ca      	b.n	8005046 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eb8:	d166      	bne.n	8004f88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004eba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d827      	bhi.n	8004f12 <UART_SetConfig+0x49a>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x450>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe fa54 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe fa66 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b4e      	ldr	r3, [pc, #312]	@ (8005038 <UART_SetConfig+0x5c0>)
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fe f9db 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8004f06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8090 	beq.w	8005046 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	4a44      	ldr	r2, [pc, #272]	@ (800503c <UART_SetConfig+0x5c4>)
 8004f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f38:	005a      	lsls	r2, r3, #1
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	441a      	add	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d916      	bls.n	8004f80 <UART_SetConfig+0x508>
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d212      	bcs.n	8004f80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f023 030f 	bic.w	r3, r3, #15
 8004f62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	8bfb      	ldrh	r3, [r7, #30]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	8bfa      	ldrh	r2, [r7, #30]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	e062      	b.n	8005046 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f86:	e05e      	b.n	8005046 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d828      	bhi.n	8004fe2 <UART_SetConfig+0x56a>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <UART_SetConfig+0x520>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fe3 	.word	0x08004fe3
 8004fa8:	08004fd3 	.word	0x08004fd3
 8004fac:	08004fe3 	.word	0x08004fe3
 8004fb0:	08004fe3 	.word	0x08004fe3
 8004fb4:	08004fe3 	.word	0x08004fe3
 8004fb8:	08004fdb 	.word	0x08004fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fe f9ec 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fc2:	e014      	b.n	8004fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fe f9fe 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 8004fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fca:	e010      	b.n	8004fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8005038 <UART_SetConfig+0x5c0>)
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fd0:	e00d      	b.n	8004fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd2:	f7fe f973 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8004fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fd8:	e009      	b.n	8004fee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe0:	e005      	b.n	8004fee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fec:	bf00      	nop
    }

    if (pclk != 0U)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d028      	beq.n	8005046 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	4a10      	ldr	r2, [pc, #64]	@ (800503c <UART_SetConfig+0x5c4>)
 8004ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	fbb3 f2f2 	udiv	r2, r3, r2
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	441a      	add	r2, r3
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d910      	bls.n	8005040 <UART_SetConfig+0x5c8>
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005024:	d20c      	bcs.n	8005040 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	b29a      	uxth	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e009      	b.n	8005046 <UART_SetConfig+0x5ce>
 8005032:	bf00      	nop
 8005034:	40008000 	.word	0x40008000
 8005038:	00f42400 	.word	0x00f42400
 800503c:	080168a8 	.word	0x080168a8
      }
      else
      {
        ret = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2201      	movs	r2, #1
 800504a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2201      	movs	r2, #1
 8005052:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005062:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005066:	4618      	mov	r0, r3
 8005068:	3730      	adds	r7, #48	@ 0x30
 800506a:	46bd      	mov	sp, r7
 800506c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01a      	beq.n	8005186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516e:	d10a      	bne.n	8005186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b098      	sub	sp, #96	@ 0x60
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c4:	f7fc fd76 	bl	8001cb4 <HAL_GetTick>
 80051c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d12f      	bne.n	8005238 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f88e 	bl	8005308 <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d022      	beq.n	8005238 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005206:	653b      	str	r3, [r7, #80]	@ 0x50
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005210:	647b      	str	r3, [r7, #68]	@ 0x44
 8005212:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800521e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e063      	b.n	8005300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d149      	bne.n	80052da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005246:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524e:	2200      	movs	r2, #0
 8005250:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f857 	bl	8005308 <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d03c      	beq.n	80052da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	623b      	str	r3, [r7, #32]
   return(result);
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800527e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005280:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e6      	bne.n	8005260 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b2:	61fa      	str	r2, [r7, #28]
 80052b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	69b9      	ldr	r1, [r7, #24]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	617b      	str	r3, [r7, #20]
   return(result);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e012      	b.n	8005300 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3758      	adds	r7, #88	@ 0x58
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005318:	e04f      	b.n	80053ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005320:	d04b      	beq.n	80053ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fc fcc7 	bl	8001cb4 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <UART_WaitOnFlagUntilTimeout+0x30>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e04e      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d037      	beq.n	80053ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b80      	cmp	r3, #128	@ 0x80
 800534e:	d034      	beq.n	80053ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b40      	cmp	r3, #64	@ 0x40
 8005354:	d031      	beq.n	80053ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d110      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2208      	movs	r2, #8
 800536a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f920 	bl	80055b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2208      	movs	r2, #8
 8005376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e029      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005394:	d111      	bne.n	80053ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800539e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f906 	bl	80055b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e00f      	b.n	80053da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d0a0      	beq.n	800531a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b096      	sub	sp, #88	@ 0x58
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2222      	movs	r2, #34	@ 0x22
 800540c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005416:	2b00      	cmp	r3, #0
 8005418:	d02d      	beq.n	8005476 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005420:	4a40      	ldr	r2, [pc, #256]	@ (8005524 <UART_Start_Receive_DMA+0x140>)
 8005422:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800542a:	4a3f      	ldr	r2, [pc, #252]	@ (8005528 <UART_Start_Receive_DMA+0x144>)
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005434:	4a3d      	ldr	r2, [pc, #244]	@ (800552c <UART_Start_Receive_DMA+0x148>)
 8005436:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543e:	2200      	movs	r2, #0
 8005440:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3324      	adds	r3, #36	@ 0x24
 800544e:	4619      	mov	r1, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	461a      	mov	r2, r3
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	f7fc fdc0 	bl	8001fdc <HAL_DMA_Start_IT>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2210      	movs	r2, #16
 8005466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e051      	b.n	800551a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005492:	657b      	str	r3, [r7, #84]	@ 0x54
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80054aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e6      	bne.n	800547e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80054d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	613b      	str	r3, [r7, #16]
   return(result);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005504:	623a      	str	r2, [r7, #32]
 8005506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	69f9      	ldr	r1, [r7, #28]
 800550a:	6a3a      	ldr	r2, [r7, #32]
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	61bb      	str	r3, [r7, #24]
   return(result);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3758      	adds	r7, #88	@ 0x58
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	08005735 	.word	0x08005735
 8005528:	08005861 	.word	0x08005861
 800552c:	0800589f 	.word	0x0800589f

08005530 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b08f      	sub	sp, #60	@ 0x3c
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	61fb      	str	r3, [r7, #28]
   return(result);
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800554c:	637b      	str	r3, [r7, #52]	@ 0x34
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005558:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800555c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e6      	bne.n	8005538 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	60bb      	str	r3, [r7, #8]
   return(result);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005580:	633b      	str	r3, [r7, #48]	@ 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558a:	61ba      	str	r2, [r7, #24]
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6979      	ldr	r1, [r7, #20]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	613b      	str	r3, [r7, #16]
   return(result);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80055a6:	bf00      	nop
 80055a8:	373c      	adds	r7, #60	@ 0x3c
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b095      	sub	sp, #84	@ 0x54
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e3      	bne.n	80055ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d118      	bne.n	800565e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	60bb      	str	r3, [r7, #8]
   return(result);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 0310 	bic.w	r3, r3, #16
 8005640:	647b      	str	r3, [r7, #68]	@ 0x44
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	613b      	str	r3, [r7, #16]
   return(result);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005672:	bf00      	nop
 8005674:	3754      	adds	r7, #84	@ 0x54
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b090      	sub	sp, #64	@ 0x40
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d137      	bne.n	800570a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	2200      	movs	r2, #0
 800569e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	623b      	str	r3, [r7, #32]
   return(result);
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	69b9      	ldr	r1, [r7, #24]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	617b      	str	r3, [r7, #20]
   return(result);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e6      	bne.n	80056d6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005708:	e002      	b.n	8005710 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800570a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800570c:	f7ff f976 	bl	80049fc <HAL_UART_TxCpltCallback>
}
 8005710:	bf00      	nop
 8005712:	3740      	adds	r7, #64	@ 0x40
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff f972 	bl	8004a10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b09c      	sub	sp, #112	@ 0x70
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d171      	bne.n	8005834 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005752:	2200      	movs	r2, #0
 8005754:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800576c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800576e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005776:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005778:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800577c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e6      	bne.n	8005758 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	f023 0301 	bic.w	r3, r3, #1
 80057a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80057a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80057ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	623b      	str	r3, [r7, #32]
   return(result);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80057d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057de:	633a      	str	r2, [r7, #48]	@ 0x30
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d118      	bne.n	8005834 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	617b      	str	r3, [r7, #20]
   return(result);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005836:	2200      	movs	r2, #0
 8005838:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800583e:	2b01      	cmp	r3, #1
 8005840:	d107      	bne.n	8005852 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005848:	4619      	mov	r1, r3
 800584a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800584c:	f7ff f908 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005850:	e002      	b.n	8005858 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005852:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005854:	f7ff f8e6 	bl	8004a24 <HAL_UART_RxCpltCallback>
}
 8005858:	bf00      	nop
 800585a:	3770      	adds	r7, #112	@ 0x70
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d109      	bne.n	8005890 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	b29b      	uxth	r3, r3
 8005886:	4619      	mov	r1, r3
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff f8e9 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800588e:	e002      	b.n	8005896 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff f8d1 	bl	8004a38 <HAL_UART_RxHalfCpltCallback>
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	2b80      	cmp	r3, #128	@ 0x80
 80058c8:	d109      	bne.n	80058de <UART_DMAError+0x40>
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b21      	cmp	r3, #33	@ 0x21
 80058ce:	d106      	bne.n	80058de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80058d8:	6978      	ldr	r0, [r7, #20]
 80058da:	f7ff fe29 	bl	8005530 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d109      	bne.n	8005900 <UART_DMAError+0x62>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b22      	cmp	r3, #34	@ 0x22
 80058f0:	d106      	bne.n	8005900 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80058fa:	6978      	ldr	r0, [r7, #20]
 80058fc:	f7ff fe59 	bl	80055b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005906:	f043 0210 	orr.w	r2, r3, #16
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005910:	6978      	ldr	r0, [r7, #20]
 8005912:	f7ff f89b 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005916:	bf00      	nop
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7ff f889 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	60bb      	str	r3, [r7, #8]
   return(result);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	613b      	str	r3, [r7, #16]
   return(result);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff f836 	bl	80049fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005990:	bf00      	nop
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_UARTEx_DisableFifoMode+0x16>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e027      	b.n	8005a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2224      	movs	r2, #36	@ 0x24
 80059f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e02d      	b.n	8005aba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2224      	movs	r2, #36	@ 0x24
 8005a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f850 	bl	8005b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e02d      	b.n	8005b36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2224      	movs	r2, #36	@ 0x24
 8005ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f812 	bl	8005b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d108      	bne.n	8005b62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b60:	e031      	b.n	8005bc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b62:	2308      	movs	r3, #8
 8005b64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b66:	2308      	movs	r3, #8
 8005b68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	0e5b      	lsrs	r3, r3, #25
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	0f5b      	lsrs	r3, r3, #29
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	7b3a      	ldrb	r2, [r7, #12]
 8005b8e:	4911      	ldr	r1, [pc, #68]	@ (8005bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005b90:	5c8a      	ldrb	r2, [r1, r2]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b96:	7b3a      	ldrb	r2, [r7, #12]
 8005b98:	490f      	ldr	r1, [pc, #60]	@ (8005bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005b9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	7b7a      	ldrb	r2, [r7, #13]
 8005bac:	4909      	ldr	r1, [pc, #36]	@ (8005bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005bae:	5c8a      	ldrb	r2, [r1, r2]
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bb4:	7b7a      	ldrb	r2, [r7, #13]
 8005bb6:	4908      	ldr	r1, [pc, #32]	@ (8005bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005bb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	080168c0 	.word	0x080168c0
 8005bd8:	080168c8 	.word	0x080168c8

08005bdc <__NVIC_SetPriority>:
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	6039      	str	r1, [r7, #0]
 8005be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db0a      	blt.n	8005c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	490c      	ldr	r1, [pc, #48]	@ (8005c28 <__NVIC_SetPriority+0x4c>)
 8005bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	440b      	add	r3, r1
 8005c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c04:	e00a      	b.n	8005c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4908      	ldr	r1, [pc, #32]	@ (8005c2c <__NVIC_SetPriority+0x50>)
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3b04      	subs	r3, #4
 8005c14:	0112      	lsls	r2, r2, #4
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	440b      	add	r3, r1
 8005c1a:	761a      	strb	r2, [r3, #24]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000e100 	.word	0xe000e100
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c34:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <SysTick_Handler+0x1c>)
 8005c36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c38:	f001 fd6e 	bl	8007718 <xTaskGetSchedulerState>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d001      	beq.n	8005c46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c42:	f002 fb69 	bl	8008318 <xPortSysTickHandler>
  }
}
 8005c46:	bf00      	nop
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	e000e010 	.word	0xe000e010

08005c50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c54:	2100      	movs	r1, #0
 8005c56:	f06f 0004 	mvn.w	r0, #4
 8005c5a:	f7ff ffbf 	bl	8005bdc <__NVIC_SetPriority>
#endif
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6a:	f3ef 8305 	mrs	r3, IPSR
 8005c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c76:	f06f 0305 	mvn.w	r3, #5
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	e00c      	b.n	8005c98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <osKernelInitialize+0x44>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d105      	bne.n	8005c92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c86:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <osKernelInitialize+0x44>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	e002      	b.n	8005c98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c98:	687b      	ldr	r3, [r7, #4]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20006be0 	.word	0x20006be0

08005cac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb2:	f3ef 8305 	mrs	r3, IPSR
 8005cb6:	603b      	str	r3, [r7, #0]
  return(result);
 8005cb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005cbe:	f06f 0305 	mvn.w	r3, #5
 8005cc2:	607b      	str	r3, [r7, #4]
 8005cc4:	e010      	b.n	8005ce8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <osKernelStart+0x48>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d109      	bne.n	8005ce2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cce:	f7ff ffbf 	bl	8005c50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <osKernelStart+0x48>)
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005cd8:	f001 f892 	bl	8006e00 <vTaskStartScheduler>
      stat = osOK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	e002      	b.n	8005ce8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ce6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ce8:	687b      	ldr	r3, [r7, #4]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20006be0 	.word	0x20006be0

08005cf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08e      	sub	sp, #56	@ 0x38
 8005cfc:	af04      	add	r7, sp, #16
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d08:	f3ef 8305 	mrs	r3, IPSR
 8005d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d17e      	bne.n	8005e12 <osThreadNew+0x11a>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d07b      	beq.n	8005e12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d1a:	2380      	movs	r3, #128	@ 0x80
 8005d1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d1e:	2318      	movs	r3, #24
 8005d20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d045      	beq.n	8005dbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <osThreadNew+0x48>
        name = attr->name;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <osThreadNew+0x6e>
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b38      	cmp	r3, #56	@ 0x38
 8005d58:	d805      	bhi.n	8005d66 <osThreadNew+0x6e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <osThreadNew+0x72>
        return (NULL);
 8005d66:	2300      	movs	r3, #0
 8005d68:	e054      	b.n	8005e14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00e      	beq.n	8005da0 <osThreadNew+0xa8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2ba7      	cmp	r3, #167	@ 0xa7
 8005d88:	d90a      	bls.n	8005da0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d006      	beq.n	8005da0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <osThreadNew+0xa8>
        mem = 1;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	e010      	b.n	8005dc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10c      	bne.n	8005dc2 <osThreadNew+0xca>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <osThreadNew+0xca>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <osThreadNew+0xca>
          mem = 0;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e001      	b.n	8005dc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d110      	bne.n	8005dea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005dd0:	9202      	str	r2, [sp, #8]
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fe1a 	bl	8006a18 <xTaskCreateStatic>
 8005de4:	4603      	mov	r3, r0
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	e013      	b.n	8005e12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d110      	bne.n	8005e12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	f107 0310 	add.w	r3, r7, #16
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fe68 	bl	8006ad8 <xTaskCreate>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d001      	beq.n	8005e12 <osThreadNew+0x11a>
            hTask = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e12:	693b      	ldr	r3, [r7, #16]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	@ 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e24:	f3ef 8305 	mrs	r3, IPSR
 8005e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <osDelay+0x1c>
    stat = osErrorISR;
 8005e30:	f06f 0305 	mvn.w	r3, #5
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e007      	b.n	8005e48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 ffa6 	bl	8006d94 <vTaskDelay>
    }
  }

  return (stat);
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a07      	ldr	r2, [pc, #28]	@ (8005e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4a06      	ldr	r2, [pc, #24]	@ (8005e84 <vApplicationGetIdleTaskMemory+0x30>)
 8005e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2280      	movs	r2, #128	@ 0x80
 8005e70:	601a      	str	r2, [r3, #0]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20006be4 	.word	0x20006be4
 8005e84:	20006c8c 	.word	0x20006c8c

08005e88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a07      	ldr	r2, [pc, #28]	@ (8005eb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a06      	ldr	r2, [pc, #24]	@ (8005eb8 <vApplicationGetTimerTaskMemory+0x30>)
 8005e9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ea6:	601a      	str	r2, [r3, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20006e8c 	.word	0x20006e8c
 8005eb8:	20006f34 	.word	0x20006f34

08005ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f103 0208 	add.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f103 0208 	add.w	r2, r3, #8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f103 0208 	add.w	r2, r3, #8
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	601a      	str	r2, [r3, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f74:	d103      	bne.n	8005f7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e00c      	b.n	8005f98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3308      	adds	r3, #8
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e002      	b.n	8005f8c <vListInsert+0x2e>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d2f6      	bcs.n	8005f86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6892      	ldr	r2, [r2, #8]
 8005fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6852      	ldr	r2, [r2, #4]
 8005ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d103      	bne.n	8006004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <xQueueGenericReset+0x2c>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60bb      	str	r3, [r7, #8]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006050:	f002 f8d2 	bl	80081f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	441a      	add	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006080:	3b01      	subs	r3, #1
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	441a      	add	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	22ff      	movs	r2, #255	@ 0xff
 8006094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	22ff      	movs	r2, #255	@ 0xff
 800609c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d114      	bne.n	80060d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01a      	beq.n	80060e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3310      	adds	r3, #16
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 f942 	bl	800733c <xTaskRemoveFromEventList>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d012      	beq.n	80060e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060be:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <xQueueGenericReset+0xd0>)
 80060c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	e009      	b.n	80060e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3310      	adds	r3, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fef1 	bl	8005ebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3324      	adds	r3, #36	@ 0x24
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff feec 	bl	8005ebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060e4:	f002 f8ba 	bl	800825c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060e8:	2301      	movs	r3, #1
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	@ 0x38
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	e7fd      	b.n	8006120 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10b      	bne.n	8006142 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <xQueueGenericCreateStatic+0x56>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <xQueueGenericCreateStatic+0x5a>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <xQueueGenericCreateStatic+0x5c>
 8006152:	2300      	movs	r3, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	623b      	str	r3, [r7, #32]
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <xQueueGenericCreateStatic+0x84>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <xQueueGenericCreateStatic+0x88>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <xQueueGenericCreateStatic+0x8a>
 8006180:	2300      	movs	r3, #0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	61fb      	str	r3, [r7, #28]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800619e:	2350      	movs	r3, #80	@ 0x50
 80061a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b50      	cmp	r3, #80	@ 0x50
 80061a6:	d00b      	beq.n	80061c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	61bb      	str	r3, [r7, #24]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f805 	bl	80061f2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3730      	adds	r7, #48	@ 0x30
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e002      	b.n	8006214 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006220:	2101      	movs	r1, #1
 8006222:	69b8      	ldr	r0, [r7, #24]
 8006224:	f7ff fefe 	bl	8006024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	@ 0x38
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <xQueueGenericSend+0x34>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <xQueueGenericSend+0x42>
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <xQueueGenericSend+0x46>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <xQueueGenericSend+0x48>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <xQueueGenericSend+0x64>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d103      	bne.n	80062aa <xQueueGenericSend+0x72>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <xQueueGenericSend+0x76>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <xQueueGenericSend+0x78>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <xQueueGenericSend+0x94>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	623b      	str	r3, [r7, #32]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062cc:	f001 fa24 	bl	8007718 <xTaskGetSchedulerState>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <xQueueGenericSend+0xa4>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <xQueueGenericSend+0xa8>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <xQueueGenericSend+0xaa>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <xQueueGenericSend+0xc6>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	61fb      	str	r3, [r7, #28]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062fe:	f001 ff7b 	bl	80081f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <xQueueGenericSend+0xdc>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d129      	bne.n	8006368 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800631a:	f000 fa0f 	bl	800673c <prvCopyDataToQueue>
 800631e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	3324      	adds	r3, #36	@ 0x24
 800632c:	4618      	mov	r0, r3
 800632e:	f001 f805 	bl	800733c <xTaskRemoveFromEventList>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006338:	4b3f      	ldr	r3, [pc, #252]	@ (8006438 <xQueueGenericSend+0x200>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	e00a      	b.n	8006360 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006350:	4b39      	ldr	r3, [pc, #228]	@ (8006438 <xQueueGenericSend+0x200>)
 8006352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006360:	f001 ff7c 	bl	800825c <vPortExitCritical>
				return pdPASS;
 8006364:	2301      	movs	r3, #1
 8006366:	e063      	b.n	8006430 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800636e:	f001 ff75 	bl	800825c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006372:	2300      	movs	r3, #0
 8006374:	e05c      	b.n	8006430 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800637c:	f107 0314 	add.w	r3, r7, #20
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f867 	bl	8007454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800638a:	f001 ff67 	bl	800825c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800638e:	f000 fda7 	bl	8006ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006392:	f001 ff31 	bl	80081f8 <vPortEnterCritical>
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800639c:	b25b      	sxtb	r3, r3
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063a2:	d103      	bne.n	80063ac <xQueueGenericSend+0x174>
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSend+0x18a>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063c2:	f001 ff4b 	bl	800825c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c6:	1d3a      	adds	r2, r7, #4
 80063c8:	f107 0314 	add.w	r3, r7, #20
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 f856 	bl	8007480 <xTaskCheckForTimeOut>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d124      	bne.n	8006424 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063dc:	f000 faa6 	bl	800692c <prvIsQueueFull>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	3310      	adds	r3, #16
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4611      	mov	r1, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 ff52 	bl	8007298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063f6:	f000 fa31 	bl	800685c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063fa:	f000 fd7f 	bl	8006efc <xTaskResumeAll>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f47f af7c 	bne.w	80062fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006406:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <xQueueGenericSend+0x200>)
 8006408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	e772      	b.n	80062fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006418:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800641a:	f000 fa1f 	bl	800685c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800641e:	f000 fd6d 	bl	8006efc <xTaskResumeAll>
 8006422:	e76c      	b.n	80062fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006426:	f000 fa19 	bl	800685c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800642a:	f000 fd67 	bl	8006efc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800642e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006430:	4618      	mov	r0, r3
 8006432:	3738      	adds	r7, #56	@ 0x38
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b090      	sub	sp, #64	@ 0x40
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <xQueueGenericSendFromISR+0x3e>
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueGenericSendFromISR+0x42>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueGenericSendFromISR+0x44>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d103      	bne.n	80064aa <xQueueGenericSendFromISR+0x6e>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <xQueueGenericSendFromISR+0x72>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <xQueueGenericSendFromISR+0x74>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	623b      	str	r3, [r7, #32]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064cc:	f001 ff74 	bl	80083b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064d0:	f3ef 8211 	mrs	r2, BASEPRI
 80064d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	61fa      	str	r2, [r7, #28]
 80064e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <xQueueGenericSendFromISR+0xc2>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d12f      	bne.n	800655e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006500:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006504:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006514:	f000 f912 	bl	800673c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006518:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006520:	d112      	bne.n	8006548 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	3324      	adds	r3, #36	@ 0x24
 800652e:	4618      	mov	r0, r3
 8006530:	f000 ff04 	bl	800733c <xTaskRemoveFromEventList>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e007      	b.n	8006558 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006548:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800654c:	3301      	adds	r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	b25a      	sxtb	r2, r3
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006558:	2301      	movs	r3, #1
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800655c:	e001      	b.n	8006562 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800655e:	2300      	movs	r3, #0
 8006560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006564:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800656c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800656e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006570:	4618      	mov	r0, r3
 8006572:	3740      	adds	r7, #64	@ 0x40
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08c      	sub	sp, #48	@ 0x30
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <xQueueReceive+0x32>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	623b      	str	r3, [r7, #32]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <xQueueReceive+0x40>
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <xQueueReceive+0x44>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <xQueueReceive+0x46>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <xQueueReceive+0x62>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	61fb      	str	r3, [r7, #28]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065da:	f001 f89d 	bl	8007718 <xTaskGetSchedulerState>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <xQueueReceive+0x72>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueReceive+0x76>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueReceive+0x78>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueReceive+0x94>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61bb      	str	r3, [r7, #24]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800660c:	f001 fdf4 	bl	80081f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01f      	beq.n	800665c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006620:	f000 f8f6 	bl	8006810 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00f      	beq.n	8006654 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	3310      	adds	r3, #16
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fe7f 	bl	800733c <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006644:	4b3c      	ldr	r3, [pc, #240]	@ (8006738 <xQueueReceive+0x1c0>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006654:	f001 fe02 	bl	800825c <vPortExitCritical>
				return pdPASS;
 8006658:	2301      	movs	r3, #1
 800665a:	e069      	b.n	8006730 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006662:	f001 fdfb 	bl	800825c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006666:	2300      	movs	r3, #0
 8006668:	e062      	b.n	8006730 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	4618      	mov	r0, r3
 8006676:	f000 feed 	bl	8007454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800667e:	f001 fded 	bl	800825c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006682:	f000 fc2d 	bl	8006ee0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006686:	f001 fdb7 	bl	80081f8 <vPortEnterCritical>
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006690:	b25b      	sxtb	r3, r3
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006696:	d103      	bne.n	80066a0 <xQueueReceive+0x128>
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ac:	d103      	bne.n	80066b6 <xQueueReceive+0x13e>
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066b6:	f001 fdd1 	bl	800825c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ba:	1d3a      	adds	r2, r7, #4
 80066bc:	f107 0310 	add.w	r3, r7, #16
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fedc 	bl	8007480 <xTaskCheckForTimeOut>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d123      	bne.n	8006716 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d0:	f000 f916 	bl	8006900 <prvIsQueueEmpty>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d017      	beq.n	800670a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	3324      	adds	r3, #36	@ 0x24
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fdd8 	bl	8007298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ea:	f000 f8b7 	bl	800685c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066ee:	f000 fc05 	bl	8006efc <xTaskResumeAll>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d189      	bne.n	800660c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006738 <xQueueReceive+0x1c0>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	e780      	b.n	800660c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800670a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670c:	f000 f8a6 	bl	800685c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006710:	f000 fbf4 	bl	8006efc <xTaskResumeAll>
 8006714:	e77a      	b.n	800660c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006718:	f000 f8a0 	bl	800685c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800671c:	f000 fbee 	bl	8006efc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006722:	f000 f8ed 	bl	8006900 <prvIsQueueEmpty>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	f43f af6f 	beq.w	800660c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800672e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006730:	4618      	mov	r0, r3
 8006732:	3730      	adds	r7, #48	@ 0x30
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d14d      	bne.n	80067fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fff4 	bl	8007754 <xTaskPriorityDisinherit>
 800676c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	e043      	b.n	80067fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d119      	bne.n	80067b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6858      	ldr	r0, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	461a      	mov	r2, r3
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	f00f f8f9 	bl	801597e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	441a      	add	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d32b      	bcc.n	80067fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	e026      	b.n	80067fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	68d8      	ldr	r0, [r3, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b8:	461a      	mov	r2, r3
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	f00f f8df 	bl	801597e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c8:	425b      	negs	r3, r3
 80067ca:	441a      	add	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d207      	bcs.n	80067ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	425b      	negs	r3, r3
 80067e6:	441a      	add	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d105      	bne.n	80067fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006806:	697b      	ldr	r3, [r7, #20]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	441a      	add	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	429a      	cmp	r2, r3
 800683a:	d303      	bcc.n	8006844 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68d9      	ldr	r1, [r3, #12]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684c:	461a      	mov	r2, r3
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f00f f895 	bl	801597e <memcpy>
	}
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006864:	f001 fcc8 	bl	80081f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800686e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006870:	e011      	b.n	8006896 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d012      	beq.n	80068a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3324      	adds	r3, #36	@ 0x24
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fd5c 	bl	800733c <xTaskRemoveFromEventList>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800688a:	f000 fe5d 	bl	8007548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	3b01      	subs	r3, #1
 8006892:	b2db      	uxtb	r3, r3
 8006894:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dce9      	bgt.n	8006872 <prvUnlockQueue+0x16>
 800689e:	e000      	b.n	80068a2 <prvUnlockQueue+0x46>
					break;
 80068a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	22ff      	movs	r2, #255	@ 0xff
 80068a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068aa:	f001 fcd7 	bl	800825c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068ae:	f001 fca3 	bl	80081f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ba:	e011      	b.n	80068e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d012      	beq.n	80068ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3310      	adds	r3, #16
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fd37 	bl	800733c <xTaskRemoveFromEventList>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068d4:	f000 fe38 	bl	8007548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	3b01      	subs	r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dce9      	bgt.n	80068bc <prvUnlockQueue+0x60>
 80068e8:	e000      	b.n	80068ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	22ff      	movs	r2, #255	@ 0xff
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068f4:	f001 fcb2 	bl	800825c <vPortExitCritical>
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006908:	f001 fc76 	bl	80081f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e001      	b.n	800691e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800691e:	f001 fc9d 	bl	800825c <vPortExitCritical>

	return xReturn;
 8006922:	68fb      	ldr	r3, [r7, #12]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006934:	f001 fc60 	bl	80081f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006940:	429a      	cmp	r2, r3
 8006942:	d102      	bne.n	800694a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e001      	b.n	800694e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800694e:	f001 fc85 	bl	800825c <vPortExitCritical>

	return xReturn;
 8006952:	68fb      	ldr	r3, [r7, #12]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	e014      	b.n	8006996 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800696c:	4a0f      	ldr	r2, [pc, #60]	@ (80069ac <vQueueAddToRegistry+0x50>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10b      	bne.n	8006990 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006978:	490c      	ldr	r1, [pc, #48]	@ (80069ac <vQueueAddToRegistry+0x50>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006982:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <vQueueAddToRegistry+0x50>)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800698e:	e006      	b.n	800699e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b07      	cmp	r3, #7
 800699a:	d9e7      	bls.n	800696c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20007334 	.word	0x20007334

080069b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069c0:	f001 fc1a 	bl	80081f8 <vPortEnterCritical>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069ca:	b25b      	sxtb	r3, r3
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069d0:	d103      	bne.n	80069da <vQueueWaitForMessageRestricted+0x2a>
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e6:	d103      	bne.n	80069f0 <vQueueWaitForMessageRestricted+0x40>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069f0:	f001 fc34 	bl	800825c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	3324      	adds	r3, #36	@ 0x24
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fc6d 	bl	80072e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a0a:	6978      	ldr	r0, [r7, #20]
 8006a0c:	f7ff ff26 	bl	800685c <prvUnlockQueue>
	}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08e      	sub	sp, #56	@ 0x38
 8006a1c:	af04      	add	r7, sp, #16
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	623b      	str	r3, [r7, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61fb      	str	r3, [r7, #28]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a62:	23a8      	movs	r3, #168	@ 0xa8
 8006a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a6a:	d00b      	beq.n	8006a84 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61bb      	str	r3, [r7, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <xTaskCreateStatic+0xb2>
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01b      	beq.n	8006aca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	f107 0314 	add.w	r3, r7, #20
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f851 	bl	8006b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ac4:	f000 f8f6 	bl	8006cb4 <prvAddNewTaskToReadyList>
 8006ac8:	e001      	b.n	8006ace <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ace:	697b      	ldr	r3, [r7, #20]
	}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3728      	adds	r7, #40	@ 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	@ 0x30
 8006adc:	af04      	add	r7, sp, #16
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fca5 	bl	800843c <pvPortMalloc>
 8006af2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00e      	beq.n	8006b18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006afa:	20a8      	movs	r0, #168	@ 0xa8
 8006afc:	f001 fc9e 	bl	800843c <pvPortMalloc>
 8006b00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b0e:	e005      	b.n	8006b1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b10:	6978      	ldr	r0, [r7, #20]
 8006b12:	f001 fd61 	bl	80085d8 <vPortFree>
 8006b16:	e001      	b.n	8006b1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d017      	beq.n	8006b52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b2a:	88fa      	ldrh	r2, [r7, #6]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f80f 	bl	8006b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b46:	69f8      	ldr	r0, [r7, #28]
 8006b48:	f000 f8b4 	bl	8006cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	e002      	b.n	8006b58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b58:	69bb      	ldr	r3, [r7, #24]
	}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	21a5      	movs	r1, #165	@ 0xa5
 8006b7e:	f00e fddf 	bl	8015740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	617b      	str	r3, [r7, #20]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	e012      	b.n	8006bf0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	7819      	ldrb	r1, [r3, #0]
 8006bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3334      	adds	r3, #52	@ 0x34
 8006bda:	460a      	mov	r2, r1
 8006bdc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d006      	beq.n	8006bf8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3301      	adds	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d9e9      	bls.n	8006bca <prvInitialiseNewTask+0x66>
 8006bf6:	e000      	b.n	8006bfa <prvInitialiseNewTask+0x96>
			{
				break;
 8006bf8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c02:	e003      	b.n	8006c0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0e:	2b37      	cmp	r3, #55	@ 0x37
 8006c10:	d901      	bls.n	8006c16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c12:	2337      	movs	r3, #55	@ 0x37
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	2200      	movs	r2, #0
 8006c26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff f965 	bl	8005efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	3318      	adds	r3, #24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff f960 	bl	8005efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	3354      	adds	r3, #84	@ 0x54
 8006c66:	224c      	movs	r2, #76	@ 0x4c
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f00e fd68 	bl	8015740 <memset>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca8 <prvInitialiseNewTask+0x144>)
 8006c74:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	4a0c      	ldr	r2, [pc, #48]	@ (8006cac <prvInitialiseNewTask+0x148>)
 8006c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006cb0 <prvInitialiseNewTask+0x14c>)
 8006c80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	69b8      	ldr	r0, [r7, #24]
 8006c88:	f001 f982 	bl	8007f90 <pxPortInitialiseStack>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	2000dbc0 	.word	0x2000dbc0
 8006cac:	2000dc28 	.word	0x2000dc28
 8006cb0:	2000dc90 	.word	0x2000dc90

08006cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cbc:	f001 fa9c 	bl	80081f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d78 <prvAddNewTaskToReadyList+0xc4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d78 <prvAddNewTaskToReadyList+0xc4>)
 8006cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cca:	4b2c      	ldr	r3, [pc, #176]	@ (8006d7c <prvAddNewTaskToReadyList+0xc8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d7c <prvAddNewTaskToReadyList+0xc8>)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cd8:	4b27      	ldr	r3, [pc, #156]	@ (8006d78 <prvAddNewTaskToReadyList+0xc4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d110      	bne.n	8006d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ce0:	f000 fc56 	bl	8007590 <prvInitialiseTaskLists>
 8006ce4:	e00d      	b.n	8006d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ce6:	4b26      	ldr	r3, [pc, #152]	@ (8006d80 <prvAddNewTaskToReadyList+0xcc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cee:	4b23      	ldr	r3, [pc, #140]	@ (8006d7c <prvAddNewTaskToReadyList+0xc8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d802      	bhi.n	8006d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d7c <prvAddNewTaskToReadyList+0xc8>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d02:	4b20      	ldr	r3, [pc, #128]	@ (8006d84 <prvAddNewTaskToReadyList+0xd0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3301      	adds	r3, #1
 8006d08:	4a1e      	ldr	r2, [pc, #120]	@ (8006d84 <prvAddNewTaskToReadyList+0xd0>)
 8006d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <prvAddNewTaskToReadyList+0xd0>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <prvAddNewTaskToReadyList+0xd4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d903      	bls.n	8006d28 <prvAddNewTaskToReadyList+0x74>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <prvAddNewTaskToReadyList+0xd4>)
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <prvAddNewTaskToReadyList+0xd8>)
 8006d36:	441a      	add	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f7ff f8e9 	bl	8005f16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d44:	f001 fa8a 	bl	800825c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d48:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <prvAddNewTaskToReadyList+0xcc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d50:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <prvAddNewTaskToReadyList+0xc8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d207      	bcs.n	8006d6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d90 <prvAddNewTaskToReadyList+0xdc>)
 8006d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20007848 	.word	0x20007848
 8006d7c:	20007374 	.word	0x20007374
 8006d80:	20007854 	.word	0x20007854
 8006d84:	20007864 	.word	0x20007864
 8006d88:	20007850 	.word	0x20007850
 8006d8c:	20007378 	.word	0x20007378
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006da6:	4b14      	ldr	r3, [pc, #80]	@ (8006df8 <vTaskDelay+0x64>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <vTaskDelay+0x32>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60bb      	str	r3, [r7, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dc6:	f000 f88b 	bl	8006ee0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dca:	2100      	movs	r1, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fd31 	bl	8007834 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dd2:	f000 f893 	bl	8006efc <xTaskResumeAll>
 8006dd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d107      	bne.n	8006dee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006dde:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <vTaskDelay+0x68>)
 8006de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20007870 	.word	0x20007870
 8006dfc:	e000ed04 	.word	0xe000ed04

08006e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e0e:	463a      	mov	r2, r7
 8006e10:	1d39      	adds	r1, r7, #4
 8006e12:	f107 0308 	add.w	r3, r7, #8
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff f81c 	bl	8005e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	9202      	str	r2, [sp, #8]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	2300      	movs	r3, #0
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	4924      	ldr	r1, [pc, #144]	@ (8006ec0 <vTaskStartScheduler+0xc0>)
 8006e30:	4824      	ldr	r0, [pc, #144]	@ (8006ec4 <vTaskStartScheduler+0xc4>)
 8006e32:	f7ff fdf1 	bl	8006a18 <xTaskCreateStatic>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4a23      	ldr	r2, [pc, #140]	@ (8006ec8 <vTaskStartScheduler+0xc8>)
 8006e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e3c:	4b22      	ldr	r3, [pc, #136]	@ (8006ec8 <vTaskStartScheduler+0xc8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e44:	2301      	movs	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	e001      	b.n	8006e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d102      	bne.n	8006e5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e54:	f000 fd42 	bl	80078dc <xTimerCreateTimerTask>
 8006e58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d11b      	bne.n	8006e98 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	613b      	str	r3, [r7, #16]
}
 8006e72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e74:	4b15      	ldr	r3, [pc, #84]	@ (8006ecc <vTaskStartScheduler+0xcc>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3354      	adds	r3, #84	@ 0x54
 8006e7a:	4a15      	ldr	r2, [pc, #84]	@ (8006ed0 <vTaskStartScheduler+0xd0>)
 8006e7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e7e:	4b15      	ldr	r3, [pc, #84]	@ (8006ed4 <vTaskStartScheduler+0xd4>)
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e86:	4b14      	ldr	r3, [pc, #80]	@ (8006ed8 <vTaskStartScheduler+0xd8>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e8c:	4b13      	ldr	r3, [pc, #76]	@ (8006edc <vTaskStartScheduler+0xdc>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e92:	f001 f90d 	bl	80080b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e96:	e00f      	b.n	8006eb8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e9e:	d10b      	bne.n	8006eb8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <vTaskStartScheduler+0xb4>
}
 8006eb8:	bf00      	nop
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	08016814 	.word	0x08016814
 8006ec4:	08007561 	.word	0x08007561
 8006ec8:	2000786c 	.word	0x2000786c
 8006ecc:	20007374 	.word	0x20007374
 8006ed0:	20000118 	.word	0x20000118
 8006ed4:	20007868 	.word	0x20007868
 8006ed8:	20007854 	.word	0x20007854
 8006edc:	2000784c 	.word	0x2000784c

08006ee0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ee4:	4b04      	ldr	r3, [pc, #16]	@ (8006ef8 <vTaskSuspendAll+0x18>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	4a03      	ldr	r2, [pc, #12]	@ (8006ef8 <vTaskSuspendAll+0x18>)
 8006eec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eee:	bf00      	nop
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20007870 	.word	0x20007870

08006efc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f0a:	4b42      	ldr	r3, [pc, #264]	@ (8007014 <xTaskResumeAll+0x118>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <xTaskResumeAll+0x2e>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	603b      	str	r3, [r7, #0]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f2a:	f001 f965 	bl	80081f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f2e:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <xTaskResumeAll+0x118>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	4a37      	ldr	r2, [pc, #220]	@ (8007014 <xTaskResumeAll+0x118>)
 8006f36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f38:	4b36      	ldr	r3, [pc, #216]	@ (8007014 <xTaskResumeAll+0x118>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d162      	bne.n	8007006 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f40:	4b35      	ldr	r3, [pc, #212]	@ (8007018 <xTaskResumeAll+0x11c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05e      	beq.n	8007006 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f48:	e02f      	b.n	8006faa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f4a:	4b34      	ldr	r3, [pc, #208]	@ (800701c <xTaskResumeAll+0x120>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff f83a 	bl	8005fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff f835 	bl	8005fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007020 <xTaskResumeAll+0x124>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d903      	bls.n	8006f7a <xTaskResumeAll+0x7e>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	4a2a      	ldr	r2, [pc, #168]	@ (8007020 <xTaskResumeAll+0x124>)
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a27      	ldr	r2, [pc, #156]	@ (8007024 <xTaskResumeAll+0x128>)
 8006f88:	441a      	add	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f7fe ffc0 	bl	8005f16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9a:	4b23      	ldr	r3, [pc, #140]	@ (8007028 <xTaskResumeAll+0x12c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d302      	bcc.n	8006faa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006fa4:	4b21      	ldr	r3, [pc, #132]	@ (800702c <xTaskResumeAll+0x130>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006faa:	4b1c      	ldr	r3, [pc, #112]	@ (800701c <xTaskResumeAll+0x120>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1cb      	bne.n	8006f4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fb8:	f000 fb8e 	bl	80076d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8007030 <xTaskResumeAll+0x134>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d010      	beq.n	8006fea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fc8:	f000 f846 	bl	8007058 <xTaskIncrementTick>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006fd2:	4b16      	ldr	r3, [pc, #88]	@ (800702c <xTaskResumeAll+0x130>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f1      	bne.n	8006fc8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006fe4:	4b12      	ldr	r3, [pc, #72]	@ (8007030 <xTaskResumeAll+0x134>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fea:	4b10      	ldr	r3, [pc, #64]	@ (800702c <xTaskResumeAll+0x130>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <xTaskResumeAll+0x138>)
 8006ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007006:	f001 f929 	bl	800825c <vPortExitCritical>

	return xAlreadyYielded;
 800700a:	68bb      	ldr	r3, [r7, #8]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20007870 	.word	0x20007870
 8007018:	20007848 	.word	0x20007848
 800701c:	20007808 	.word	0x20007808
 8007020:	20007850 	.word	0x20007850
 8007024:	20007378 	.word	0x20007378
 8007028:	20007374 	.word	0x20007374
 800702c:	2000785c 	.word	0x2000785c
 8007030:	20007858 	.word	0x20007858
 8007034:	e000ed04 	.word	0xe000ed04

08007038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800703e:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <xTaskGetTickCount+0x1c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007044:	687b      	ldr	r3, [r7, #4]
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	2000784c 	.word	0x2000784c

08007058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007062:	4b4f      	ldr	r3, [pc, #316]	@ (80071a0 <xTaskIncrementTick+0x148>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 8090 	bne.w	800718c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800706c:	4b4d      	ldr	r3, [pc, #308]	@ (80071a4 <xTaskIncrementTick+0x14c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007074:	4a4b      	ldr	r2, [pc, #300]	@ (80071a4 <xTaskIncrementTick+0x14c>)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d121      	bne.n	80070c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007080:	4b49      	ldr	r3, [pc, #292]	@ (80071a8 <xTaskIncrementTick+0x150>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	603b      	str	r3, [r7, #0]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <xTaskIncrementTick+0x46>
 80070a2:	4b41      	ldr	r3, [pc, #260]	@ (80071a8 <xTaskIncrementTick+0x150>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	4b40      	ldr	r3, [pc, #256]	@ (80071ac <xTaskIncrementTick+0x154>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3e      	ldr	r2, [pc, #248]	@ (80071a8 <xTaskIncrementTick+0x150>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4a3e      	ldr	r2, [pc, #248]	@ (80071ac <xTaskIncrementTick+0x154>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	4b3e      	ldr	r3, [pc, #248]	@ (80071b0 <xTaskIncrementTick+0x158>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a3c      	ldr	r2, [pc, #240]	@ (80071b0 <xTaskIncrementTick+0x158>)
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	f000 fb0a 	bl	80076d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070c4:	4b3b      	ldr	r3, [pc, #236]	@ (80071b4 <xTaskIncrementTick+0x15c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d349      	bcc.n	8007162 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ce:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <xTaskIncrementTick+0x150>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d8:	4b36      	ldr	r3, [pc, #216]	@ (80071b4 <xTaskIncrementTick+0x15c>)
 80070da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070de:	601a      	str	r2, [r3, #0]
					break;
 80070e0:	e03f      	b.n	8007162 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e2:	4b31      	ldr	r3, [pc, #196]	@ (80071a8 <xTaskIncrementTick+0x150>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d203      	bcs.n	8007102 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070fa:	4a2e      	ldr	r2, [pc, #184]	@ (80071b4 <xTaskIncrementTick+0x15c>)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007100:	e02f      	b.n	8007162 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	3304      	adds	r3, #4
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe ff62 	bl	8005fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	3318      	adds	r3, #24
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe ff59 	bl	8005fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	4b25      	ldr	r3, [pc, #148]	@ (80071b8 <xTaskIncrementTick+0x160>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d903      	bls.n	8007132 <xTaskIncrementTick+0xda>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	4a22      	ldr	r2, [pc, #136]	@ (80071b8 <xTaskIncrementTick+0x160>)
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4a1f      	ldr	r2, [pc, #124]	@ (80071bc <xTaskIncrementTick+0x164>)
 8007140:	441a      	add	r2, r3
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f7fe fee4 	bl	8005f16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	4b1b      	ldr	r3, [pc, #108]	@ (80071c0 <xTaskIncrementTick+0x168>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007158:	429a      	cmp	r2, r3
 800715a:	d3b8      	bcc.n	80070ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007160:	e7b5      	b.n	80070ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007162:	4b17      	ldr	r3, [pc, #92]	@ (80071c0 <xTaskIncrementTick+0x168>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007168:	4914      	ldr	r1, [pc, #80]	@ (80071bc <xTaskIncrementTick+0x164>)
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d901      	bls.n	800717e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800717a:	2301      	movs	r3, #1
 800717c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800717e:	4b11      	ldr	r3, [pc, #68]	@ (80071c4 <xTaskIncrementTick+0x16c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	e004      	b.n	8007196 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800718c:	4b0e      	ldr	r3, [pc, #56]	@ (80071c8 <xTaskIncrementTick+0x170>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3301      	adds	r3, #1
 8007192:	4a0d      	ldr	r2, [pc, #52]	@ (80071c8 <xTaskIncrementTick+0x170>)
 8007194:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007196:	697b      	ldr	r3, [r7, #20]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20007870 	.word	0x20007870
 80071a4:	2000784c 	.word	0x2000784c
 80071a8:	20007800 	.word	0x20007800
 80071ac:	20007804 	.word	0x20007804
 80071b0:	20007860 	.word	0x20007860
 80071b4:	20007868 	.word	0x20007868
 80071b8:	20007850 	.word	0x20007850
 80071bc:	20007378 	.word	0x20007378
 80071c0:	20007374 	.word	0x20007374
 80071c4:	2000785c 	.word	0x2000785c
 80071c8:	20007858 	.word	0x20007858

080071cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007280 <vTaskSwitchContext+0xb4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071da:	4b2a      	ldr	r3, [pc, #168]	@ (8007284 <vTaskSwitchContext+0xb8>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071e0:	e047      	b.n	8007272 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80071e2:	4b28      	ldr	r3, [pc, #160]	@ (8007284 <vTaskSwitchContext+0xb8>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e8:	4b27      	ldr	r3, [pc, #156]	@ (8007288 <vTaskSwitchContext+0xbc>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e011      	b.n	8007214 <vTaskSwitchContext+0x48>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <vTaskSwitchContext+0x42>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	607b      	str	r3, [r7, #4]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <vTaskSwitchContext+0x3e>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3b01      	subs	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	491d      	ldr	r1, [pc, #116]	@ (800728c <vTaskSwitchContext+0xc0>)
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0e3      	beq.n	80071f0 <vTaskSwitchContext+0x24>
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4a16      	ldr	r2, [pc, #88]	@ (800728c <vTaskSwitchContext+0xc0>)
 8007234:	4413      	add	r3, r2
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	3308      	adds	r3, #8
 800724a:	429a      	cmp	r2, r3
 800724c:	d104      	bne.n	8007258 <vTaskSwitchContext+0x8c>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	4a0c      	ldr	r2, [pc, #48]	@ (8007290 <vTaskSwitchContext+0xc4>)
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	4a09      	ldr	r2, [pc, #36]	@ (8007288 <vTaskSwitchContext+0xbc>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007268:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <vTaskSwitchContext+0xc4>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3354      	adds	r3, #84	@ 0x54
 800726e:	4a09      	ldr	r2, [pc, #36]	@ (8007294 <vTaskSwitchContext+0xc8>)
 8007270:	6013      	str	r3, [r2, #0]
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20007870 	.word	0x20007870
 8007284:	2000785c 	.word	0x2000785c
 8007288:	20007850 	.word	0x20007850
 800728c:	20007378 	.word	0x20007378
 8007290:	20007374 	.word	0x20007374
 8007294:	20000118 	.word	0x20000118

08007298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
}
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
 80072be:	e7fd      	b.n	80072bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c0:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <vTaskPlaceOnEventList+0x48>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3318      	adds	r3, #24
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fe fe48 	bl	8005f5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072ce:	2101      	movs	r1, #1
 80072d0:	6838      	ldr	r0, [r7, #0]
 80072d2:	f000 faaf 	bl	8007834 <prvAddCurrentTaskToDelayedList>
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20007374 	.word	0x20007374

080072e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	617b      	str	r3, [r7, #20]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800730e:	4b0a      	ldr	r3, [pc, #40]	@ (8007338 <vTaskPlaceOnEventListRestricted+0x54>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3318      	adds	r3, #24
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7fe fdfd 	bl	8005f16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007326:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	68b8      	ldr	r0, [r7, #8]
 800732c:	f000 fa82 	bl	8007834 <prvAddCurrentTaskToDelayedList>
	}
 8007330:	bf00      	nop
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20007374 	.word	0x20007374

0800733c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60fb      	str	r3, [r7, #12]
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3318      	adds	r3, #24
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fe2e 	bl	8005fd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007374:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <xTaskRemoveFromEventList+0xb0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d11d      	bne.n	80073b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3304      	adds	r3, #4
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fe25 	bl	8005fd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738a:	4b19      	ldr	r3, [pc, #100]	@ (80073f0 <xTaskRemoveFromEventList+0xb4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d903      	bls.n	800739a <xTaskRemoveFromEventList+0x5e>
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	4a16      	ldr	r2, [pc, #88]	@ (80073f0 <xTaskRemoveFromEventList+0xb4>)
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4a13      	ldr	r2, [pc, #76]	@ (80073f4 <xTaskRemoveFromEventList+0xb8>)
 80073a8:	441a      	add	r2, r3
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4619      	mov	r1, r3
 80073b0:	4610      	mov	r0, r2
 80073b2:	f7fe fdb0 	bl	8005f16 <vListInsertEnd>
 80073b6:	e005      	b.n	80073c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	3318      	adds	r3, #24
 80073bc:	4619      	mov	r1, r3
 80073be:	480e      	ldr	r0, [pc, #56]	@ (80073f8 <xTaskRemoveFromEventList+0xbc>)
 80073c0:	f7fe fda9 	bl	8005f16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c8:	4b0c      	ldr	r3, [pc, #48]	@ (80073fc <xTaskRemoveFromEventList+0xc0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d905      	bls.n	80073de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073d2:	2301      	movs	r3, #1
 80073d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007400 <xTaskRemoveFromEventList+0xc4>)
 80073d8:	2201      	movs	r2, #1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e001      	b.n	80073e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20007870 	.word	0x20007870
 80073f0:	20007850 	.word	0x20007850
 80073f4:	20007378 	.word	0x20007378
 80073f8:	20007808 	.word	0x20007808
 80073fc:	20007374 	.word	0x20007374
 8007400:	2000785c 	.word	0x2000785c

08007404 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60fb      	str	r3, [r7, #12]
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800742a:	f000 fee5 	bl	80081f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800742e:	4b07      	ldr	r3, [pc, #28]	@ (800744c <vTaskSetTimeOutState+0x48>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007436:	4b06      	ldr	r3, [pc, #24]	@ (8007450 <vTaskSetTimeOutState+0x4c>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800743e:	f000 ff0d 	bl	800825c <vPortExitCritical>
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20007860 	.word	0x20007860
 8007450:	2000784c 	.word	0x2000784c

08007454 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800745c:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <vTaskInternalSetTimeOutState+0x24>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <vTaskInternalSetTimeOutState+0x28>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	605a      	str	r2, [r3, #4]
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	20007860 	.word	0x20007860
 800747c:	2000784c 	.word	0x2000784c

08007480 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10b      	bne.n	80074a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	613b      	str	r3, [r7, #16]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10b      	bne.n	80074c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	60fb      	str	r3, [r7, #12]
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	e7fd      	b.n	80074c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80074c6:	f000 fe97 	bl	80081f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007540 <xTaskCheckForTimeOut+0xc0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074e2:	d102      	bne.n	80074ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e023      	b.n	8007532 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <xTaskCheckForTimeOut+0xc4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d007      	beq.n	8007506 <xTaskCheckForTimeOut+0x86>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d302      	bcc.n	8007506 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	61fb      	str	r3, [r7, #28]
 8007504:	e015      	b.n	8007532 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	429a      	cmp	r2, r3
 800750e:	d20b      	bcs.n	8007528 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ff99 	bl	8007454 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e004      	b.n	8007532 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800752e:	2301      	movs	r3, #1
 8007530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007532:	f000 fe93 	bl	800825c <vPortExitCritical>

	return xReturn;
 8007536:	69fb      	ldr	r3, [r7, #28]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	2000784c 	.word	0x2000784c
 8007544:	20007860 	.word	0x20007860

08007548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800754c:	4b03      	ldr	r3, [pc, #12]	@ (800755c <vTaskMissedYield+0x14>)
 800754e:	2201      	movs	r2, #1
 8007550:	601a      	str	r2, [r3, #0]
}
 8007552:	bf00      	nop
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	2000785c 	.word	0x2000785c

08007560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007568:	f000 f852 	bl	8007610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <prvIdleTask+0x28>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d9f9      	bls.n	8007568 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007574:	4b05      	ldr	r3, [pc, #20]	@ (800758c <prvIdleTask+0x2c>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007584:	e7f0      	b.n	8007568 <prvIdleTask+0x8>
 8007586:	bf00      	nop
 8007588:	20007378 	.word	0x20007378
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	e00c      	b.n	80075b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4a12      	ldr	r2, [pc, #72]	@ (80075f0 <prvInitialiseTaskLists+0x60>)
 80075a8:	4413      	add	r3, r2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fc86 	bl	8005ebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3301      	adds	r3, #1
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b37      	cmp	r3, #55	@ 0x37
 80075ba:	d9ef      	bls.n	800759c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075bc:	480d      	ldr	r0, [pc, #52]	@ (80075f4 <prvInitialiseTaskLists+0x64>)
 80075be:	f7fe fc7d 	bl	8005ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075c2:	480d      	ldr	r0, [pc, #52]	@ (80075f8 <prvInitialiseTaskLists+0x68>)
 80075c4:	f7fe fc7a 	bl	8005ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075c8:	480c      	ldr	r0, [pc, #48]	@ (80075fc <prvInitialiseTaskLists+0x6c>)
 80075ca:	f7fe fc77 	bl	8005ebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075ce:	480c      	ldr	r0, [pc, #48]	@ (8007600 <prvInitialiseTaskLists+0x70>)
 80075d0:	f7fe fc74 	bl	8005ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075d4:	480b      	ldr	r0, [pc, #44]	@ (8007604 <prvInitialiseTaskLists+0x74>)
 80075d6:	f7fe fc71 	bl	8005ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075da:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <prvInitialiseTaskLists+0x78>)
 80075dc:	4a05      	ldr	r2, [pc, #20]	@ (80075f4 <prvInitialiseTaskLists+0x64>)
 80075de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075e0:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <prvInitialiseTaskLists+0x7c>)
 80075e2:	4a05      	ldr	r2, [pc, #20]	@ (80075f8 <prvInitialiseTaskLists+0x68>)
 80075e4:	601a      	str	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20007378 	.word	0x20007378
 80075f4:	200077d8 	.word	0x200077d8
 80075f8:	200077ec 	.word	0x200077ec
 80075fc:	20007808 	.word	0x20007808
 8007600:	2000781c 	.word	0x2000781c
 8007604:	20007834 	.word	0x20007834
 8007608:	20007800 	.word	0x20007800
 800760c:	20007804 	.word	0x20007804

08007610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007616:	e019      	b.n	800764c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007618:	f000 fdee 	bl	80081f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761c:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <prvCheckTasksWaitingTermination+0x50>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fcd1 	bl	8005fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800762e:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <prvCheckTasksWaitingTermination+0x54>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3b01      	subs	r3, #1
 8007634:	4a0b      	ldr	r2, [pc, #44]	@ (8007664 <prvCheckTasksWaitingTermination+0x54>)
 8007636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007638:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <prvCheckTasksWaitingTermination+0x58>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3b01      	subs	r3, #1
 800763e:	4a0a      	ldr	r2, [pc, #40]	@ (8007668 <prvCheckTasksWaitingTermination+0x58>)
 8007640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007642:	f000 fe0b 	bl	800825c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f810 	bl	800766c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800764c:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <prvCheckTasksWaitingTermination+0x58>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e1      	bne.n	8007618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	2000781c 	.word	0x2000781c
 8007664:	20007848 	.word	0x20007848
 8007668:	20007830 	.word	0x20007830

0800766c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3354      	adds	r3, #84	@ 0x54
 8007678:	4618      	mov	r0, r3
 800767a:	f00e f8af 	bl	80157dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007684:	2b00      	cmp	r3, #0
 8007686:	d108      	bne.n	800769a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768c:	4618      	mov	r0, r3
 800768e:	f000 ffa3 	bl	80085d8 <vPortFree>
				vPortFree( pxTCB );
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 ffa0 	bl	80085d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007698:	e019      	b.n	80076ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d103      	bne.n	80076ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 ff97 	bl	80085d8 <vPortFree>
	}
 80076aa:	e010      	b.n	80076ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d00b      	beq.n	80076ce <prvDeleteTCB+0x62>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <prvDeleteTCB+0x5e>
	}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076de:	4b0c      	ldr	r3, [pc, #48]	@ (8007710 <prvResetNextTaskUnblockTime+0x38>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <prvResetNextTaskUnblockTime+0x3c>)
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076f0:	e008      	b.n	8007704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f2:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <prvResetNextTaskUnblockTime+0x38>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	4a04      	ldr	r2, [pc, #16]	@ (8007714 <prvResetNextTaskUnblockTime+0x3c>)
 8007702:	6013      	str	r3, [r2, #0]
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	20007800 	.word	0x20007800
 8007714:	20007868 	.word	0x20007868

08007718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800771e:	4b0b      	ldr	r3, [pc, #44]	@ (800774c <xTaskGetSchedulerState+0x34>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d102      	bne.n	800772c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007726:	2301      	movs	r3, #1
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	e008      	b.n	800773e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772c:	4b08      	ldr	r3, [pc, #32]	@ (8007750 <xTaskGetSchedulerState+0x38>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d102      	bne.n	800773a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007734:	2302      	movs	r3, #2
 8007736:	607b      	str	r3, [r7, #4]
 8007738:	e001      	b.n	800773e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800773e:	687b      	ldr	r3, [r7, #4]
	}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	20007854 	.word	0x20007854
 8007750:	20007870 	.word	0x20007870

08007754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d058      	beq.n	800781c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800776a:	4b2f      	ldr	r3, [pc, #188]	@ (8007828 <xTaskPriorityDisinherit+0xd4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d00b      	beq.n	800778c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	60fb      	str	r3, [r7, #12]
}
 8007786:	bf00      	nop
 8007788:	bf00      	nop
 800778a:	e7fd      	b.n	8007788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60bb      	str	r3, [r7, #8]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b0:	1e5a      	subs	r2, r3, #1
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d02c      	beq.n	800781c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d128      	bne.n	800781c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fbfe 	bl	8005fd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ec:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <xTaskPriorityDisinherit+0xd8>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d903      	bls.n	80077fc <xTaskPriorityDisinherit+0xa8>
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4a0c      	ldr	r2, [pc, #48]	@ (800782c <xTaskPriorityDisinherit+0xd8>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4a09      	ldr	r2, [pc, #36]	@ (8007830 <xTaskPriorityDisinherit+0xdc>)
 800780a:	441a      	add	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7fe fb7f 	bl	8005f16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800781c:	697b      	ldr	r3, [r7, #20]
	}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20007374 	.word	0x20007374
 800782c:	20007850 	.word	0x20007850
 8007830:	20007378 	.word	0x20007378

08007834 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800783e:	4b21      	ldr	r3, [pc, #132]	@ (80078c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007844:	4b20      	ldr	r3, [pc, #128]	@ (80078c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fbc0 	bl	8005fd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007856:	d10a      	bne.n	800786e <prvAddCurrentTaskToDelayedList+0x3a>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d007      	beq.n	800786e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800785e:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4819      	ldr	r0, [pc, #100]	@ (80078cc <prvAddCurrentTaskToDelayedList+0x98>)
 8007868:	f7fe fb55 	bl	8005f16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800786c:	e026      	b.n	80078bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007876:	4b14      	ldr	r3, [pc, #80]	@ (80078c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	429a      	cmp	r2, r3
 8007884:	d209      	bcs.n	800789a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007886:	4b12      	ldr	r3, [pc, #72]	@ (80078d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b0f      	ldr	r3, [pc, #60]	@ (80078c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3304      	adds	r3, #4
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fe fb63 	bl	8005f5e <vListInsert>
}
 8007898:	e010      	b.n	80078bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800789a:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f7fe fb59 	bl	8005f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078ac:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d202      	bcs.n	80078bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078b6:	4a08      	ldr	r2, [pc, #32]	@ (80078d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	6013      	str	r3, [r2, #0]
}
 80078bc:	bf00      	nop
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000784c 	.word	0x2000784c
 80078c8:	20007374 	.word	0x20007374
 80078cc:	20007834 	.word	0x20007834
 80078d0:	20007804 	.word	0x20007804
 80078d4:	20007800 	.word	0x20007800
 80078d8:	20007868 	.word	0x20007868

080078dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	@ 0x28
 80078e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078e6:	f000 fb13 	bl	8007f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007960 <xTimerCreateTimerTask+0x84>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d021      	beq.n	8007936 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078fa:	1d3a      	adds	r2, r7, #4
 80078fc:	f107 0108 	add.w	r1, r7, #8
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fabf 	bl	8005e88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	9202      	str	r2, [sp, #8]
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	2302      	movs	r3, #2
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	2300      	movs	r3, #0
 800791a:	460a      	mov	r2, r1
 800791c:	4911      	ldr	r1, [pc, #68]	@ (8007964 <xTimerCreateTimerTask+0x88>)
 800791e:	4812      	ldr	r0, [pc, #72]	@ (8007968 <xTimerCreateTimerTask+0x8c>)
 8007920:	f7ff f87a 	bl	8006a18 <xTaskCreateStatic>
 8007924:	4603      	mov	r3, r0
 8007926:	4a11      	ldr	r2, [pc, #68]	@ (800796c <xTimerCreateTimerTask+0x90>)
 8007928:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800792a:	4b10      	ldr	r3, [pc, #64]	@ (800796c <xTimerCreateTimerTask+0x90>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007932:	2301      	movs	r3, #1
 8007934:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10b      	bne.n	8007954 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	613b      	str	r3, [r7, #16]
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	e7fd      	b.n	8007950 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007954:	697b      	ldr	r3, [r7, #20]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	200078a4 	.word	0x200078a4
 8007964:	0801681c 	.word	0x0801681c
 8007968:	08007aa9 	.word	0x08007aa9
 800796c:	200078a8 	.word	0x200078a8

08007970 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	@ 0x28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	623b      	str	r3, [r7, #32]
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079a0:	4b19      	ldr	r3, [pc, #100]	@ (8007a08 <xTimerGenericCommand+0x98>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d02a      	beq.n	80079fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	dc18      	bgt.n	80079ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079ba:	f7ff fead 	bl	8007718 <xTaskGetSchedulerState>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d109      	bne.n	80079d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079c4:	4b10      	ldr	r3, [pc, #64]	@ (8007a08 <xTimerGenericCommand+0x98>)
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	f107 0110 	add.w	r1, r7, #16
 80079cc:	2300      	movs	r3, #0
 80079ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079d0:	f7fe fc32 	bl	8006238 <xQueueGenericSend>
 80079d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80079d6:	e012      	b.n	80079fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a08 <xTimerGenericCommand+0x98>)
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	f107 0110 	add.w	r1, r7, #16
 80079e0:	2300      	movs	r3, #0
 80079e2:	2200      	movs	r2, #0
 80079e4:	f7fe fc28 	bl	8006238 <xQueueGenericSend>
 80079e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80079ea:	e008      	b.n	80079fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079ec:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <xTimerGenericCommand+0x98>)
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	f107 0110 	add.w	r1, r7, #16
 80079f4:	2300      	movs	r3, #0
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	f7fe fd20 	bl	800643c <xQueueGenericSendFromISR>
 80079fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3728      	adds	r7, #40	@ 0x28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200078a4 	.word	0x200078a4

08007a0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a16:	4b23      	ldr	r3, [pc, #140]	@ (8007aa4 <prvProcessExpiredTimer+0x98>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe fad3 	bl	8005fd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d023      	beq.n	8007a80 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	18d1      	adds	r1, r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	6978      	ldr	r0, [r7, #20]
 8007a46:	f000 f8d5 	bl	8007bf4 <prvInsertTimerInActiveList>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d020      	beq.n	8007a92 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a50:	2300      	movs	r3, #0
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	6978      	ldr	r0, [r7, #20]
 8007a5c:	f7ff ff88 	bl	8007970 <xTimerGenericCommand>
 8007a60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d114      	bne.n	8007a92 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	bf00      	nop
 8007a7e:	e7fd      	b.n	8007a7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a86:	f023 0301 	bic.w	r3, r3, #1
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	6978      	ldr	r0, [r7, #20]
 8007a98:	4798      	blx	r3
}
 8007a9a:	bf00      	nop
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	2000789c 	.word	0x2000789c

08007aa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f859 	bl	8007b6c <prvGetNextExpireTime>
 8007aba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f805 	bl	8007ad0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ac6:	f000 f8d7 	bl	8007c78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aca:	bf00      	nop
 8007acc:	e7f0      	b.n	8007ab0 <prvTimerTask+0x8>
	...

08007ad0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ada:	f7ff fa01 	bl	8006ee0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ade:	f107 0308 	add.w	r3, r7, #8
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f866 	bl	8007bb4 <prvSampleTimeNow>
 8007ae8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d130      	bne.n	8007b52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <prvProcessTimerOrBlockTask+0x3c>
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d806      	bhi.n	8007b0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007afe:	f7ff f9fd 	bl	8006efc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff ff81 	bl	8007a0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b0a:	e024      	b.n	8007b56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d008      	beq.n	8007b24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b12:	4b13      	ldr	r3, [pc, #76]	@ (8007b60 <prvProcessTimerOrBlockTask+0x90>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <prvProcessTimerOrBlockTask+0x50>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <prvProcessTimerOrBlockTask+0x52>
 8007b20:	2300      	movs	r3, #0
 8007b22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b24:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <prvProcessTimerOrBlockTask+0x94>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4619      	mov	r1, r3
 8007b32:	f7fe ff3d 	bl	80069b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b36:	f7ff f9e1 	bl	8006efc <xTaskResumeAll>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b40:	4b09      	ldr	r3, [pc, #36]	@ (8007b68 <prvProcessTimerOrBlockTask+0x98>)
 8007b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
}
 8007b50:	e001      	b.n	8007b56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b52:	f7ff f9d3 	bl	8006efc <xTaskResumeAll>
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200078a0 	.word	0x200078a0
 8007b64:	200078a4 	.word	0x200078a4
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b74:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <prvGetNextExpireTime+0x44>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <prvGetNextExpireTime+0x16>
 8007b7e:	2201      	movs	r2, #1
 8007b80:	e000      	b.n	8007b84 <prvGetNextExpireTime+0x18>
 8007b82:	2200      	movs	r2, #0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <prvGetNextExpireTime+0x44>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	e001      	b.n	8007ba0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	2000789c 	.word	0x2000789c

08007bb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bbc:	f7ff fa3c 	bl	8007038 <xTaskGetTickCount>
 8007bc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <prvSampleTimeNow+0x3c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d205      	bcs.n	8007bd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bcc:	f000 f93a 	bl	8007e44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e002      	b.n	8007bde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bde:	4a04      	ldr	r2, [pc, #16]	@ (8007bf0 <prvSampleTimeNow+0x3c>)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007be4:	68fb      	ldr	r3, [r7, #12]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200078ac 	.word	0x200078ac

08007bf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d812      	bhi.n	8007c40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d302      	bcc.n	8007c2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	e01b      	b.n	8007c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c2e:	4b10      	ldr	r3, [pc, #64]	@ (8007c70 <prvInsertTimerInActiveList+0x7c>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f7fe f990 	bl	8005f5e <vListInsert>
 8007c3e:	e012      	b.n	8007c66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d206      	bcs.n	8007c56 <prvInsertTimerInActiveList+0x62>
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d302      	bcc.n	8007c56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c50:	2301      	movs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e007      	b.n	8007c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c56:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <prvInsertTimerInActiveList+0x80>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f7fe f97c 	bl	8005f5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c66:	697b      	ldr	r3, [r7, #20]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	200078a0 	.word	0x200078a0
 8007c74:	2000789c 	.word	0x2000789c

08007c78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08e      	sub	sp, #56	@ 0x38
 8007c7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c7e:	e0ce      	b.n	8007e1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	da19      	bge.n	8007cba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c86:	1d3b      	adds	r3, r7, #4
 8007c88:	3304      	adds	r3, #4
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10b      	bne.n	8007caa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	61fb      	str	r3, [r7, #28]
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	e7fd      	b.n	8007ca6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb0:	6850      	ldr	r0, [r2, #4]
 8007cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb4:	6892      	ldr	r2, [r2, #8]
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f2c0 80ae 	blt.w	8007e1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe f97c 	bl	8005fd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cd8:	463b      	mov	r3, r7
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff ff6a 	bl	8007bb4 <prvSampleTimeNow>
 8007ce0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	f200 8097 	bhi.w	8007e18 <prvProcessReceivedCommands+0x1a0>
 8007cea:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf0 <prvProcessReceivedCommands+0x78>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d19 	.word	0x08007d19
 8007cf8:	08007d19 	.word	0x08007d19
 8007cfc:	08007d8f 	.word	0x08007d8f
 8007d00:	08007da3 	.word	0x08007da3
 8007d04:	08007def 	.word	0x08007def
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d19 	.word	0x08007d19
 8007d10:	08007d8f 	.word	0x08007d8f
 8007d14:	08007da3 	.word	0x08007da3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	18d1      	adds	r1, r2, r3
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d38:	f7ff ff5c 	bl	8007bf4 <prvInsertTimerInActiveList>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d06c      	beq.n	8007e1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d061      	beq.n	8007e1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	441a      	add	r2, r3
 8007d60:	2300      	movs	r3, #0
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d6a:	f7ff fe01 	bl	8007970 <xTimerGenericCommand>
 8007d6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d152      	bne.n	8007e1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	61bb      	str	r3, [r7, #24]
}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	e7fd      	b.n	8007d8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007da0:	e03d      	b.n	8007e1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007da8:	f043 0301 	orr.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	617b      	str	r3, [r7, #20]
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de0:	18d1      	adds	r1, r2, r3
 8007de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de8:	f7ff ff04 	bl	8007bf4 <prvInsertTimerInActiveList>
					break;
 8007dec:	e017      	b.n	8007e1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007dfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dfe:	f000 fbeb 	bl	80085d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e02:	e00c      	b.n	8007e1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e16:	e002      	b.n	8007e1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e18:	bf00      	nop
 8007e1a:	e000      	b.n	8007e1e <prvProcessReceivedCommands+0x1a6>
					break;
 8007e1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e1e:	4b08      	ldr	r3, [pc, #32]	@ (8007e40 <prvProcessReceivedCommands+0x1c8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	1d39      	adds	r1, r7, #4
 8007e24:	2200      	movs	r2, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fba6 	bl	8006578 <xQueueReceive>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f47f af26 	bne.w	8007c80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	3730      	adds	r7, #48	@ 0x30
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200078a4 	.word	0x200078a4

08007e44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e4a:	e049      	b.n	8007ee0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007f08 <prvSwitchTimerLists+0xc4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e56:	4b2c      	ldr	r3, [pc, #176]	@ (8007f08 <prvSwitchTimerLists+0xc4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3304      	adds	r3, #4
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe f8b3 	bl	8005fd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d02f      	beq.n	8007ee0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d90e      	bls.n	8007eb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007f08 <prvSwitchTimerLists+0xc4>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7fe f858 	bl	8005f5e <vListInsert>
 8007eae:	e017      	b.n	8007ee0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fd58 	bl	8007970 <xTimerGenericCommand>
 8007ec0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	603b      	str	r3, [r7, #0]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ee0:	4b09      	ldr	r3, [pc, #36]	@ (8007f08 <prvSwitchTimerLists+0xc4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1b0      	bne.n	8007e4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eea:	4b07      	ldr	r3, [pc, #28]	@ (8007f08 <prvSwitchTimerLists+0xc4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ef0:	4b06      	ldr	r3, [pc, #24]	@ (8007f0c <prvSwitchTimerLists+0xc8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a04      	ldr	r2, [pc, #16]	@ (8007f08 <prvSwitchTimerLists+0xc4>)
 8007ef6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ef8:	4a04      	ldr	r2, [pc, #16]	@ (8007f0c <prvSwitchTimerLists+0xc8>)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6013      	str	r3, [r2, #0]
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000789c 	.word	0x2000789c
 8007f0c:	200078a0 	.word	0x200078a0

08007f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f16:	f000 f96f 	bl	80081f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f1a:	4b15      	ldr	r3, [pc, #84]	@ (8007f70 <prvCheckForValidListAndQueue+0x60>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d120      	bne.n	8007f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f22:	4814      	ldr	r0, [pc, #80]	@ (8007f74 <prvCheckForValidListAndQueue+0x64>)
 8007f24:	f7fd ffca 	bl	8005ebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f28:	4813      	ldr	r0, [pc, #76]	@ (8007f78 <prvCheckForValidListAndQueue+0x68>)
 8007f2a:	f7fd ffc7 	bl	8005ebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f2e:	4b13      	ldr	r3, [pc, #76]	@ (8007f7c <prvCheckForValidListAndQueue+0x6c>)
 8007f30:	4a10      	ldr	r2, [pc, #64]	@ (8007f74 <prvCheckForValidListAndQueue+0x64>)
 8007f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f34:	4b12      	ldr	r3, [pc, #72]	@ (8007f80 <prvCheckForValidListAndQueue+0x70>)
 8007f36:	4a10      	ldr	r2, [pc, #64]	@ (8007f78 <prvCheckForValidListAndQueue+0x68>)
 8007f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <prvCheckForValidListAndQueue+0x74>)
 8007f40:	4a11      	ldr	r2, [pc, #68]	@ (8007f88 <prvCheckForValidListAndQueue+0x78>)
 8007f42:	2110      	movs	r1, #16
 8007f44:	200a      	movs	r0, #10
 8007f46:	f7fe f8d7 	bl	80060f8 <xQueueGenericCreateStatic>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4a08      	ldr	r2, [pc, #32]	@ (8007f70 <prvCheckForValidListAndQueue+0x60>)
 8007f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f50:	4b07      	ldr	r3, [pc, #28]	@ (8007f70 <prvCheckForValidListAndQueue+0x60>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d005      	beq.n	8007f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f58:	4b05      	ldr	r3, [pc, #20]	@ (8007f70 <prvCheckForValidListAndQueue+0x60>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	490b      	ldr	r1, [pc, #44]	@ (8007f8c <prvCheckForValidListAndQueue+0x7c>)
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fcfc 	bl	800695c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f64:	f000 f97a 	bl	800825c <vPortExitCritical>
}
 8007f68:	bf00      	nop
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200078a4 	.word	0x200078a4
 8007f74:	20007874 	.word	0x20007874
 8007f78:	20007888 	.word	0x20007888
 8007f7c:	2000789c 	.word	0x2000789c
 8007f80:	200078a0 	.word	0x200078a0
 8007f84:	20007950 	.word	0x20007950
 8007f88:	200078b0 	.word	0x200078b0
 8007f8c:	08016824 	.word	0x08016824

08007f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3b04      	subs	r3, #4
 8007fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f023 0201 	bic.w	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3b04      	subs	r3, #4
 8007fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ff4 <pxPortInitialiseStack+0x64>)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3b14      	subs	r3, #20
 8007fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f06f 0202 	mvn.w	r2, #2
 8007fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3b20      	subs	r3, #32
 8007fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	08007ff9 	.word	0x08007ff9

08007ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008002:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <prvTaskExitError+0x58>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800800a:	d00b      	beq.n	8008024 <prvTaskExitError+0x2c>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	60fb      	str	r3, [r7, #12]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <prvTaskExitError+0x28>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	60bb      	str	r3, [r7, #8]
}
 8008036:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008038:	bf00      	nop
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0fc      	beq.n	800803a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	20000010 	.word	0x20000010
	...

08008060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008060:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <pxCurrentTCBConst2>)
 8008062:	6819      	ldr	r1, [r3, #0]
 8008064:	6808      	ldr	r0, [r1, #0]
 8008066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	f380 8809 	msr	PSP, r0
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f04f 0000 	mov.w	r0, #0
 8008076:	f380 8811 	msr	BASEPRI, r0
 800807a:	4770      	bx	lr
 800807c:	f3af 8000 	nop.w

08008080 <pxCurrentTCBConst2>:
 8008080:	20007374 	.word	0x20007374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop

08008088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008088:	4808      	ldr	r0, [pc, #32]	@ (80080ac <prvPortStartFirstTask+0x24>)
 800808a:	6800      	ldr	r0, [r0, #0]
 800808c:	6800      	ldr	r0, [r0, #0]
 800808e:	f380 8808 	msr	MSP, r0
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f380 8814 	msr	CONTROL, r0
 800809a:	b662      	cpsie	i
 800809c:	b661      	cpsie	f
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	df00      	svc	0
 80080a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080aa:	bf00      	nop
 80080ac:	e000ed08 	.word	0xe000ed08

080080b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080b6:	4b47      	ldr	r3, [pc, #284]	@ (80081d4 <xPortStartScheduler+0x124>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a47      	ldr	r2, [pc, #284]	@ (80081d8 <xPortStartScheduler+0x128>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d10b      	bne.n	80080d8 <xPortStartScheduler+0x28>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	e7fd      	b.n	80080d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080d8:	4b3e      	ldr	r3, [pc, #248]	@ (80081d4 <xPortStartScheduler+0x124>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a3f      	ldr	r2, [pc, #252]	@ (80081dc <xPortStartScheduler+0x12c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d10b      	bne.n	80080fa <xPortStartScheduler+0x4a>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60fb      	str	r3, [r7, #12]
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	e7fd      	b.n	80080f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080fa:	4b39      	ldr	r3, [pc, #228]	@ (80081e0 <xPortStartScheduler+0x130>)
 80080fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	22ff      	movs	r2, #255	@ 0xff
 800810a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800811c:	b2da      	uxtb	r2, r3
 800811e:	4b31      	ldr	r3, [pc, #196]	@ (80081e4 <xPortStartScheduler+0x134>)
 8008120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008122:	4b31      	ldr	r3, [pc, #196]	@ (80081e8 <xPortStartScheduler+0x138>)
 8008124:	2207      	movs	r2, #7
 8008126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008128:	e009      	b.n	800813e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800812a:	4b2f      	ldr	r3, [pc, #188]	@ (80081e8 <xPortStartScheduler+0x138>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3b01      	subs	r3, #1
 8008130:	4a2d      	ldr	r2, [pc, #180]	@ (80081e8 <xPortStartScheduler+0x138>)
 8008132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	b2db      	uxtb	r3, r3
 800813c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800813e:	78fb      	ldrb	r3, [r7, #3]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008146:	2b80      	cmp	r3, #128	@ 0x80
 8008148:	d0ef      	beq.n	800812a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800814a:	4b27      	ldr	r3, [pc, #156]	@ (80081e8 <xPortStartScheduler+0x138>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f1c3 0307 	rsb	r3, r3, #7
 8008152:	2b04      	cmp	r3, #4
 8008154:	d00b      	beq.n	800816e <xPortStartScheduler+0xbe>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	60bb      	str	r3, [r7, #8]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800816e:	4b1e      	ldr	r3, [pc, #120]	@ (80081e8 <xPortStartScheduler+0x138>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	4a1c      	ldr	r2, [pc, #112]	@ (80081e8 <xPortStartScheduler+0x138>)
 8008176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008178:	4b1b      	ldr	r3, [pc, #108]	@ (80081e8 <xPortStartScheduler+0x138>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008180:	4a19      	ldr	r2, [pc, #100]	@ (80081e8 <xPortStartScheduler+0x138>)
 8008182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	b2da      	uxtb	r2, r3
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800818c:	4b17      	ldr	r3, [pc, #92]	@ (80081ec <xPortStartScheduler+0x13c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a16      	ldr	r2, [pc, #88]	@ (80081ec <xPortStartScheduler+0x13c>)
 8008192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008198:	4b14      	ldr	r3, [pc, #80]	@ (80081ec <xPortStartScheduler+0x13c>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a13      	ldr	r2, [pc, #76]	@ (80081ec <xPortStartScheduler+0x13c>)
 800819e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081a4:	f000 f8da 	bl	800835c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081a8:	4b11      	ldr	r3, [pc, #68]	@ (80081f0 <xPortStartScheduler+0x140>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081ae:	f000 f8f9 	bl	80083a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081b2:	4b10      	ldr	r3, [pc, #64]	@ (80081f4 <xPortStartScheduler+0x144>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a0f      	ldr	r2, [pc, #60]	@ (80081f4 <xPortStartScheduler+0x144>)
 80081b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80081bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081be:	f7ff ff63 	bl	8008088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081c2:	f7ff f803 	bl	80071cc <vTaskSwitchContext>
	prvTaskExitError();
 80081c6:	f7ff ff17 	bl	8007ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	e000ed00 	.word	0xe000ed00
 80081d8:	410fc271 	.word	0x410fc271
 80081dc:	410fc270 	.word	0x410fc270
 80081e0:	e000e400 	.word	0xe000e400
 80081e4:	200079a0 	.word	0x200079a0
 80081e8:	200079a4 	.word	0x200079a4
 80081ec:	e000ed20 	.word	0xe000ed20
 80081f0:	20000010 	.word	0x20000010
 80081f4:	e000ef34 	.word	0xe000ef34

080081f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008212:	4b10      	ldr	r3, [pc, #64]	@ (8008254 <vPortEnterCritical+0x5c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	4a0e      	ldr	r2, [pc, #56]	@ (8008254 <vPortEnterCritical+0x5c>)
 800821a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800821c:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <vPortEnterCritical+0x5c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d110      	bne.n	8008246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008224:	4b0c      	ldr	r3, [pc, #48]	@ (8008258 <vPortEnterCritical+0x60>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <vPortEnterCritical+0x4e>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	603b      	str	r3, [r7, #0]
}
 8008240:	bf00      	nop
 8008242:	bf00      	nop
 8008244:	e7fd      	b.n	8008242 <vPortEnterCritical+0x4a>
	}
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000010 	.word	0x20000010
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008262:	4b12      	ldr	r3, [pc, #72]	@ (80082ac <vPortExitCritical+0x50>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <vPortExitCritical+0x26>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	607b      	str	r3, [r7, #4]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008282:	4b0a      	ldr	r3, [pc, #40]	@ (80082ac <vPortExitCritical+0x50>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3b01      	subs	r3, #1
 8008288:	4a08      	ldr	r2, [pc, #32]	@ (80082ac <vPortExitCritical+0x50>)
 800828a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800828c:	4b07      	ldr	r3, [pc, #28]	@ (80082ac <vPortExitCritical+0x50>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <vPortExitCritical+0x44>
 8008294:	2300      	movs	r3, #0
 8008296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f383 8811 	msr	BASEPRI, r3
}
 800829e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	20000010 	.word	0x20000010

080082b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082b0:	f3ef 8009 	mrs	r0, PSP
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4b15      	ldr	r3, [pc, #84]	@ (8008310 <pxCurrentTCBConst>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f01e 0f10 	tst.w	lr, #16
 80082c0:	bf08      	it	eq
 80082c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80082d4:	f380 8811 	msr	BASEPRI, r0
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f7fe ff74 	bl	80071cc <vTaskSwitchContext>
 80082e4:	f04f 0000 	mov.w	r0, #0
 80082e8:	f380 8811 	msr	BASEPRI, r0
 80082ec:	bc09      	pop	{r0, r3}
 80082ee:	6819      	ldr	r1, [r3, #0]
 80082f0:	6808      	ldr	r0, [r1, #0]
 80082f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f6:	f01e 0f10 	tst.w	lr, #16
 80082fa:	bf08      	it	eq
 80082fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008300:	f380 8809 	msr	PSP, r0
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	f3af 8000 	nop.w

08008310 <pxCurrentTCBConst>:
 8008310:	20007374 	.word	0x20007374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	607b      	str	r3, [r7, #4]
}
 8008330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008332:	f7fe fe91 	bl	8007058 <xTaskIncrementTick>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800833c:	4b06      	ldr	r3, [pc, #24]	@ (8008358 <xPortSysTickHandler+0x40>)
 800833e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f383 8811 	msr	BASEPRI, r3
}
 800834e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008360:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <vPortSetupTimerInterrupt+0x34>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008366:	4b0b      	ldr	r3, [pc, #44]	@ (8008394 <vPortSetupTimerInterrupt+0x38>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800836c:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <vPortSetupTimerInterrupt+0x3c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a0a      	ldr	r2, [pc, #40]	@ (800839c <vPortSetupTimerInterrupt+0x40>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	4a09      	ldr	r2, [pc, #36]	@ (80083a0 <vPortSetupTimerInterrupt+0x44>)
 800837a:	3b01      	subs	r3, #1
 800837c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800837e:	4b04      	ldr	r3, [pc, #16]	@ (8008390 <vPortSetupTimerInterrupt+0x34>)
 8008380:	2207      	movs	r2, #7
 8008382:	601a      	str	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	e000e010 	.word	0xe000e010
 8008394:	e000e018 	.word	0xe000e018
 8008398:	20000004 	.word	0x20000004
 800839c:	10624dd3 	.word	0x10624dd3
 80083a0:	e000e014 	.word	0xe000e014

080083a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80083b4 <vPortEnableVFP+0x10>
 80083a8:	6801      	ldr	r1, [r0, #0]
 80083aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083ae:	6001      	str	r1, [r0, #0]
 80083b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083b2:	bf00      	nop
 80083b4:	e000ed88 	.word	0xe000ed88

080083b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083be:	f3ef 8305 	mrs	r3, IPSR
 80083c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b0f      	cmp	r3, #15
 80083c8:	d915      	bls.n	80083f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ca:	4a18      	ldr	r2, [pc, #96]	@ (800842c <vPortValidateInterruptPriority+0x74>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083d4:	4b16      	ldr	r3, [pc, #88]	@ (8008430 <vPortValidateInterruptPriority+0x78>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	7afa      	ldrb	r2, [r7, #11]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d20b      	bcs.n	80083f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
}
 80083f0:	bf00      	nop
 80083f2:	bf00      	nop
 80083f4:	e7fd      	b.n	80083f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008434 <vPortValidateInterruptPriority+0x7c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80083fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008438 <vPortValidateInterruptPriority+0x80>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d90b      	bls.n	800841e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	603b      	str	r3, [r7, #0]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <vPortValidateInterruptPriority+0x62>
	}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	e000e3f0 	.word	0xe000e3f0
 8008430:	200079a0 	.word	0x200079a0
 8008434:	e000ed0c 	.word	0xe000ed0c
 8008438:	200079a4 	.word	0x200079a4

0800843c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	@ 0x28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008448:	f7fe fd4a 	bl	8006ee0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800844c:	4b5c      	ldr	r3, [pc, #368]	@ (80085c0 <pvPortMalloc+0x184>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008454:	f000 f924 	bl	80086a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008458:	4b5a      	ldr	r3, [pc, #360]	@ (80085c4 <pvPortMalloc+0x188>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 8095 	bne.w	8008590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01e      	beq.n	80084aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800846c:	2208      	movs	r2, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d015      	beq.n	80084aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f023 0307 	bic.w	r3, r3, #7
 8008484:	3308      	adds	r3, #8
 8008486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <pvPortMalloc+0x6e>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	617b      	str	r3, [r7, #20]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d06f      	beq.n	8008590 <pvPortMalloc+0x154>
 80084b0:	4b45      	ldr	r3, [pc, #276]	@ (80085c8 <pvPortMalloc+0x18c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d86a      	bhi.n	8008590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084ba:	4b44      	ldr	r3, [pc, #272]	@ (80085cc <pvPortMalloc+0x190>)
 80084bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084be:	4b43      	ldr	r3, [pc, #268]	@ (80085cc <pvPortMalloc+0x190>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084c4:	e004      	b.n	80084d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d903      	bls.n	80084e2 <pvPortMalloc+0xa6>
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f1      	bne.n	80084c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084e2:	4b37      	ldr	r3, [pc, #220]	@ (80085c0 <pvPortMalloc+0x184>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d051      	beq.n	8008590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2208      	movs	r2, #8
 80084f2:	4413      	add	r3, r2
 80084f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	1ad2      	subs	r2, r2, r3
 8008506:	2308      	movs	r3, #8
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	429a      	cmp	r2, r3
 800850c:	d920      	bls.n	8008550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800850e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <pvPortMalloc+0xfc>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	613b      	str	r3, [r7, #16]
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	e7fd      	b.n	8008534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800854a:	69b8      	ldr	r0, [r7, #24]
 800854c:	f000 f90a 	bl	8008764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008550:	4b1d      	ldr	r3, [pc, #116]	@ (80085c8 <pvPortMalloc+0x18c>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	4a1b      	ldr	r2, [pc, #108]	@ (80085c8 <pvPortMalloc+0x18c>)
 800855c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800855e:	4b1a      	ldr	r3, [pc, #104]	@ (80085c8 <pvPortMalloc+0x18c>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b1b      	ldr	r3, [pc, #108]	@ (80085d0 <pvPortMalloc+0x194>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d203      	bcs.n	8008572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800856a:	4b17      	ldr	r3, [pc, #92]	@ (80085c8 <pvPortMalloc+0x18c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a18      	ldr	r2, [pc, #96]	@ (80085d0 <pvPortMalloc+0x194>)
 8008570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	4b13      	ldr	r3, [pc, #76]	@ (80085c4 <pvPortMalloc+0x188>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	431a      	orrs	r2, r3
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008586:	4b13      	ldr	r3, [pc, #76]	@ (80085d4 <pvPortMalloc+0x198>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	4a11      	ldr	r2, [pc, #68]	@ (80085d4 <pvPortMalloc+0x198>)
 800858e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008590:	f7fe fcb4 	bl	8006efc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00b      	beq.n	80085b6 <pvPortMalloc+0x17a>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <pvPortMalloc+0x176>
	return pvReturn;
 80085b6:	69fb      	ldr	r3, [r7, #28]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3728      	adds	r7, #40	@ 0x28
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	2000d9b0 	.word	0x2000d9b0
 80085c4:	2000d9c4 	.word	0x2000d9c4
 80085c8:	2000d9b4 	.word	0x2000d9b4
 80085cc:	2000d9a8 	.word	0x2000d9a8
 80085d0:	2000d9b8 	.word	0x2000d9b8
 80085d4:	2000d9bc 	.word	0x2000d9bc

080085d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04f      	beq.n	800868a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ea:	2308      	movs	r3, #8
 80085ec:	425b      	negs	r3, r3
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	4b25      	ldr	r3, [pc, #148]	@ (8008694 <vPortFree+0xbc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <vPortFree+0x46>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	60fb      	str	r3, [r7, #12]
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	e7fd      	b.n	800861a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <vPortFree+0x66>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60bb      	str	r3, [r7, #8]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	4b14      	ldr	r3, [pc, #80]	@ (8008694 <vPortFree+0xbc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01e      	beq.n	800868a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d11a      	bne.n	800868a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	4b0e      	ldr	r3, [pc, #56]	@ (8008694 <vPortFree+0xbc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	43db      	mvns	r3, r3
 800865e:	401a      	ands	r2, r3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008664:	f7fe fc3c 	bl	8006ee0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <vPortFree+0xc0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4413      	add	r3, r2
 8008672:	4a09      	ldr	r2, [pc, #36]	@ (8008698 <vPortFree+0xc0>)
 8008674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008676:	6938      	ldr	r0, [r7, #16]
 8008678:	f000 f874 	bl	8008764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800867c:	4b07      	ldr	r3, [pc, #28]	@ (800869c <vPortFree+0xc4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	4a06      	ldr	r2, [pc, #24]	@ (800869c <vPortFree+0xc4>)
 8008684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008686:	f7fe fc39 	bl	8006efc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800868a:	bf00      	nop
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	2000d9c4 	.word	0x2000d9c4
 8008698:	2000d9b4 	.word	0x2000d9b4
 800869c:	2000d9c0 	.word	0x2000d9c0

080086a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086a6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80086aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086ac:	4b27      	ldr	r3, [pc, #156]	@ (800874c <prvHeapInit+0xac>)
 80086ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3307      	adds	r3, #7
 80086be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	4a1f      	ldr	r2, [pc, #124]	@ (800874c <prvHeapInit+0xac>)
 80086d0:	4413      	add	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008750 <prvHeapInit+0xb0>)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086de:	4b1c      	ldr	r3, [pc, #112]	@ (8008750 <prvHeapInit+0xb0>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086ec:	2208      	movs	r2, #8
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <prvHeapInit+0xb4>)
 8008700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <prvHeapInit+0xb4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800870a:	4b12      	ldr	r3, [pc, #72]	@ (8008754 <prvHeapInit+0xb4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	1ad2      	subs	r2, r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <prvHeapInit+0xb4>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	4a0a      	ldr	r2, [pc, #40]	@ (8008758 <prvHeapInit+0xb8>)
 800872e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	4a09      	ldr	r2, [pc, #36]	@ (800875c <prvHeapInit+0xbc>)
 8008736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008738:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <prvHeapInit+0xc0>)
 800873a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800873e:	601a      	str	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	200079a8 	.word	0x200079a8
 8008750:	2000d9a8 	.word	0x2000d9a8
 8008754:	2000d9b0 	.word	0x2000d9b0
 8008758:	2000d9b8 	.word	0x2000d9b8
 800875c:	2000d9b4 	.word	0x2000d9b4
 8008760:	2000d9c4 	.word	0x2000d9c4

08008764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800876c:	4b28      	ldr	r3, [pc, #160]	@ (8008810 <prvInsertBlockIntoFreeList+0xac>)
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e002      	b.n	8008778 <prvInsertBlockIntoFreeList+0x14>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	429a      	cmp	r2, r3
 8008780:	d8f7      	bhi.n	8008772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4413      	add	r3, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d108      	bne.n	80087a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	441a      	add	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	441a      	add	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d118      	bne.n	80087ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b15      	ldr	r3, [pc, #84]	@ (8008814 <prvInsertBlockIntoFreeList+0xb0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d00d      	beq.n	80087e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	441a      	add	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e008      	b.n	80087f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008814 <prvInsertBlockIntoFreeList+0xb0>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	e003      	b.n	80087f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d002      	beq.n	8008802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	2000d9a8 	.word	0x2000d9a8
 8008814:	2000d9b0 	.word	0x2000d9b0

08008818 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8008818:	f000 b862 	b.w	80088e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

0800881c <get_serialized_size_geometry_msgs__msg__Twist>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4604      	mov	r4, r0
 8008820:	b148      	cbz	r0, 8008836 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8008822:	460d      	mov	r5, r1
 8008824:	f000 f860 	bl	80088e8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008828:	4606      	mov	r6, r0
 800882a:	1829      	adds	r1, r5, r0
 800882c:	f104 0018 	add.w	r0, r4, #24
 8008830:	f000 f85a 	bl	80088e8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8008834:	4430      	add	r0, r6
 8008836:	bd70      	pop	{r4, r5, r6, pc}

08008838 <_Twist__cdr_deserialize>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	b189      	cbz	r1, 8008862 <_Twist__cdr_deserialize+0x2a>
 800883e:	4605      	mov	r5, r0
 8008840:	f000 f8de 	bl	8008a00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008844:	6843      	ldr	r3, [r0, #4]
 8008846:	4621      	mov	r1, r4
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	4628      	mov	r0, r5
 800884c:	4798      	blx	r3
 800884e:	f000 f8d7 	bl	8008a00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008852:	6843      	ldr	r3, [r0, #4]
 8008854:	f104 0118 	add.w	r1, r4, #24
 8008858:	4628      	mov	r0, r5
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008860:	4718      	bx	r3
 8008862:	4608      	mov	r0, r1
 8008864:	bd70      	pop	{r4, r5, r6, pc}
 8008866:	bf00      	nop

08008868 <_Twist__cdr_serialize>:
 8008868:	b510      	push	{r4, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	9101      	str	r1, [sp, #4]
 800886e:	b190      	cbz	r0, 8008896 <_Twist__cdr_serialize+0x2e>
 8008870:	4604      	mov	r4, r0
 8008872:	f000 f8c5 	bl	8008a00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008876:	6843      	ldr	r3, [r0, #4]
 8008878:	9901      	ldr	r1, [sp, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	4620      	mov	r0, r4
 800887e:	4798      	blx	r3
 8008880:	f000 f8be 	bl	8008a00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8008884:	6843      	ldr	r3, [r0, #4]
 8008886:	9901      	ldr	r1, [sp, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f104 0018 	add.w	r0, r4, #24
 800888e:	b002      	add	sp, #8
 8008890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008894:	4718      	bx	r3
 8008896:	b002      	add	sp, #8
 8008898:	bd10      	pop	{r4, pc}
 800889a:	bf00      	nop

0800889c <_Twist__get_serialized_size>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4604      	mov	r4, r0
 80088a0:	b148      	cbz	r0, 80088b6 <_Twist__get_serialized_size+0x1a>
 80088a2:	2100      	movs	r1, #0
 80088a4:	f000 f820 	bl	80088e8 <get_serialized_size_geometry_msgs__msg__Vector3>
 80088a8:	4605      	mov	r5, r0
 80088aa:	4629      	mov	r1, r5
 80088ac:	f104 0018 	add.w	r0, r4, #24
 80088b0:	f000 f81a 	bl	80088e8 <get_serialized_size_geometry_msgs__msg__Vector3>
 80088b4:	4428      	add	r0, r5
 80088b6:	bd38      	pop	{r3, r4, r5, pc}

080088b8 <_Twist__max_serialized_size>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	2301      	movs	r3, #1
 80088be:	f10d 0007 	add.w	r0, sp, #7
 80088c2:	2100      	movs	r1, #0
 80088c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80088c8:	f000 f87e 	bl	80089c8 <max_serialized_size_geometry_msgs__msg__Vector3>
 80088cc:	4604      	mov	r4, r0
 80088ce:	4621      	mov	r1, r4
 80088d0:	f10d 0007 	add.w	r0, sp, #7
 80088d4:	f000 f878 	bl	80089c8 <max_serialized_size_geometry_msgs__msg__Vector3>
 80088d8:	4420      	add	r0, r4
 80088da:	b002      	add	sp, #8
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	bf00      	nop

080088e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80088e0:	4800      	ldr	r0, [pc, #0]	@ (80088e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 80088e2:	4770      	bx	lr
 80088e4:	20000014 	.word	0x20000014

080088e8 <get_serialized_size_geometry_msgs__msg__Vector3>:
 80088e8:	b1b8      	cbz	r0, 800891a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 80088ea:	b538      	push	{r3, r4, r5, lr}
 80088ec:	460d      	mov	r5, r1
 80088ee:	4628      	mov	r0, r5
 80088f0:	2108      	movs	r1, #8
 80088f2:	f001 fb9d 	bl	800a030 <ucdr_alignment>
 80088f6:	f105 0308 	add.w	r3, r5, #8
 80088fa:	181c      	adds	r4, r3, r0
 80088fc:	4620      	mov	r0, r4
 80088fe:	2108      	movs	r1, #8
 8008900:	f001 fb96 	bl	800a030 <ucdr_alignment>
 8008904:	3008      	adds	r0, #8
 8008906:	4404      	add	r4, r0
 8008908:	4620      	mov	r0, r4
 800890a:	2108      	movs	r1, #8
 800890c:	f001 fb90 	bl	800a030 <ucdr_alignment>
 8008910:	f1c5 0508 	rsb	r5, r5, #8
 8008914:	4428      	add	r0, r5
 8008916:	4420      	add	r0, r4
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	4770      	bx	lr

0800891c <_Vector3__cdr_deserialize>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	460c      	mov	r4, r1
 8008920:	b171      	cbz	r1, 8008940 <_Vector3__cdr_deserialize+0x24>
 8008922:	4605      	mov	r5, r0
 8008924:	f001 f99a 	bl	8009c5c <ucdr_deserialize_double>
 8008928:	f104 0108 	add.w	r1, r4, #8
 800892c:	4628      	mov	r0, r5
 800892e:	f001 f995 	bl	8009c5c <ucdr_deserialize_double>
 8008932:	f104 0110 	add.w	r1, r4, #16
 8008936:	4628      	mov	r0, r5
 8008938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800893c:	f001 b98e 	b.w	8009c5c <ucdr_deserialize_double>
 8008940:	4608      	mov	r0, r1
 8008942:	bd38      	pop	{r3, r4, r5, pc}

08008944 <_Vector3__cdr_serialize>:
 8008944:	b198      	cbz	r0, 800896e <_Vector3__cdr_serialize+0x2a>
 8008946:	b538      	push	{r3, r4, r5, lr}
 8008948:	ed90 0b00 	vldr	d0, [r0]
 800894c:	460d      	mov	r5, r1
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	f000 ffe1 	bl	8009918 <ucdr_serialize_double>
 8008956:	ed94 0b02 	vldr	d0, [r4, #8]
 800895a:	4628      	mov	r0, r5
 800895c:	f000 ffdc 	bl	8009918 <ucdr_serialize_double>
 8008960:	ed94 0b04 	vldr	d0, [r4, #16]
 8008964:	4628      	mov	r0, r5
 8008966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800896a:	f000 bfd5 	b.w	8009918 <ucdr_serialize_double>
 800896e:	4770      	bx	lr

08008970 <_Vector3__get_serialized_size>:
 8008970:	b198      	cbz	r0, 800899a <_Vector3__get_serialized_size+0x2a>
 8008972:	b510      	push	{r4, lr}
 8008974:	2108      	movs	r1, #8
 8008976:	2000      	movs	r0, #0
 8008978:	f001 fb5a 	bl	800a030 <ucdr_alignment>
 800897c:	f100 0408 	add.w	r4, r0, #8
 8008980:	4620      	mov	r0, r4
 8008982:	2108      	movs	r1, #8
 8008984:	f001 fb54 	bl	800a030 <ucdr_alignment>
 8008988:	3008      	adds	r0, #8
 800898a:	4404      	add	r4, r0
 800898c:	4620      	mov	r0, r4
 800898e:	2108      	movs	r1, #8
 8008990:	f001 fb4e 	bl	800a030 <ucdr_alignment>
 8008994:	3008      	adds	r0, #8
 8008996:	4420      	add	r0, r4
 8008998:	bd10      	pop	{r4, pc}
 800899a:	4770      	bx	lr

0800899c <_Vector3__max_serialized_size>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	2108      	movs	r1, #8
 80089a0:	2000      	movs	r0, #0
 80089a2:	f001 fb45 	bl	800a030 <ucdr_alignment>
 80089a6:	f100 0508 	add.w	r5, r0, #8
 80089aa:	4628      	mov	r0, r5
 80089ac:	2108      	movs	r1, #8
 80089ae:	f001 fb3f 	bl	800a030 <ucdr_alignment>
 80089b2:	f100 0408 	add.w	r4, r0, #8
 80089b6:	442c      	add	r4, r5
 80089b8:	4620      	mov	r0, r4
 80089ba:	2108      	movs	r1, #8
 80089bc:	f001 fb38 	bl	800a030 <ucdr_alignment>
 80089c0:	3008      	adds	r0, #8
 80089c2:	4420      	add	r0, r4
 80089c4:	bd38      	pop	{r3, r4, r5, pc}
 80089c6:	bf00      	nop

080089c8 <max_serialized_size_geometry_msgs__msg__Vector3>:
 80089c8:	2301      	movs	r3, #1
 80089ca:	b570      	push	{r4, r5, r6, lr}
 80089cc:	7003      	strb	r3, [r0, #0]
 80089ce:	460c      	mov	r4, r1
 80089d0:	4608      	mov	r0, r1
 80089d2:	2108      	movs	r1, #8
 80089d4:	f001 fb2c 	bl	800a030 <ucdr_alignment>
 80089d8:	f104 0508 	add.w	r5, r4, #8
 80089dc:	1946      	adds	r6, r0, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	2108      	movs	r1, #8
 80089e2:	f001 fb25 	bl	800a030 <ucdr_alignment>
 80089e6:	f100 0508 	add.w	r5, r0, #8
 80089ea:	4435      	add	r5, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	2108      	movs	r1, #8
 80089f0:	f001 fb1e 	bl	800a030 <ucdr_alignment>
 80089f4:	f1c4 0408 	rsb	r4, r4, #8
 80089f8:	4420      	add	r0, r4
 80089fa:	4428      	add	r0, r5
 80089fc:	bd70      	pop	{r4, r5, r6, pc}
 80089fe:	bf00      	nop

08008a00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8008a00:	4800      	ldr	r0, [pc, #0]	@ (8008a04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8008a02:	4770      	bx	lr
 8008a04:	2000003c 	.word	0x2000003c

08008a08 <ucdr_serialize_bool>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f001 fac4 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008a14:	b148      	cbz	r0, 8008a2a <ucdr_serialize_bool+0x22>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	701d      	strb	r5, [r3, #0]
 8008a1a:	68a2      	ldr	r2, [r4, #8]
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	3201      	adds	r2, #1
 8008a20:	3301      	adds	r3, #1
 8008a22:	2101      	movs	r1, #1
 8008a24:	60a2      	str	r2, [r4, #8]
 8008a26:	6123      	str	r3, [r4, #16]
 8008a28:	7561      	strb	r1, [r4, #21]
 8008a2a:	7da0      	ldrb	r0, [r4, #22]
 8008a2c:	f080 0001 	eor.w	r0, r0, #1
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	bf00      	nop

08008a34 <ucdr_deserialize_bool>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	460d      	mov	r5, r1
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	f001 faae 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008a40:	b168      	cbz	r0, 8008a5e <ucdr_deserialize_bool+0x2a>
 8008a42:	68a2      	ldr	r2, [r4, #8]
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a4a:	3900      	subs	r1, #0
 8008a4c:	f103 0301 	add.w	r3, r3, #1
 8008a50:	bf18      	it	ne
 8008a52:	2101      	movne	r1, #1
 8008a54:	2001      	movs	r0, #1
 8008a56:	7029      	strb	r1, [r5, #0]
 8008a58:	60a2      	str	r2, [r4, #8]
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	7560      	strb	r0, [r4, #21]
 8008a5e:	7da0      	ldrb	r0, [r4, #22]
 8008a60:	f080 0001 	eor.w	r0, r0, #1
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	bf00      	nop

08008a68 <ucdr_serialize_uint8_t>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4604      	mov	r4, r0
 8008a70:	f001 fa94 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008a74:	b148      	cbz	r0, 8008a8a <ucdr_serialize_uint8_t+0x22>
 8008a76:	68a3      	ldr	r3, [r4, #8]
 8008a78:	701d      	strb	r5, [r3, #0]
 8008a7a:	68a2      	ldr	r2, [r4, #8]
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	3201      	adds	r2, #1
 8008a80:	3301      	adds	r3, #1
 8008a82:	2101      	movs	r1, #1
 8008a84:	60a2      	str	r2, [r4, #8]
 8008a86:	6123      	str	r3, [r4, #16]
 8008a88:	7561      	strb	r1, [r4, #21]
 8008a8a:	7da0      	ldrb	r0, [r4, #22]
 8008a8c:	f080 0001 	eor.w	r0, r0, #1
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop

08008a94 <ucdr_deserialize_uint8_t>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	460d      	mov	r5, r1
 8008a98:	2101      	movs	r1, #1
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	f001 fa7e 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008aa0:	b150      	cbz	r0, 8008ab8 <ucdr_deserialize_uint8_t+0x24>
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	702b      	strb	r3, [r5, #0]
 8008aa8:	68a2      	ldr	r2, [r4, #8]
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	3201      	adds	r2, #1
 8008aae:	3301      	adds	r3, #1
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	60a2      	str	r2, [r4, #8]
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	7561      	strb	r1, [r4, #21]
 8008ab8:	7da0      	ldrb	r0, [r4, #22]
 8008aba:	f080 0001 	eor.w	r0, r0, #1
 8008abe:	bd38      	pop	{r3, r4, r5, pc}

08008ac0 <ucdr_serialize_uint16_t>:
 8008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	2102      	movs	r1, #2
 8008aca:	4604      	mov	r4, r0
 8008acc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008ad0:	f001 fab6 	bl	800a040 <ucdr_buffer_alignment>
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	7d67      	ldrb	r7, [r4, #21]
 8008ada:	f001 faf5 	bl	800a0c8 <ucdr_advance_buffer>
 8008ade:	4620      	mov	r0, r4
 8008ae0:	2102      	movs	r1, #2
 8008ae2:	f001 fa4f 	bl	8009f84 <ucdr_check_buffer_available_for>
 8008ae6:	bb78      	cbnz	r0, 8008b48 <ucdr_serialize_uint16_t+0x88>
 8008ae8:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8008aec:	42b5      	cmp	r5, r6
 8008aee:	d926      	bls.n	8008b3e <ucdr_serialize_uint16_t+0x7e>
 8008af0:	6922      	ldr	r2, [r4, #16]
 8008af2:	60a5      	str	r5, [r4, #8]
 8008af4:	1bad      	subs	r5, r5, r6
 8008af6:	442a      	add	r2, r5
 8008af8:	f1c5 0802 	rsb	r8, r5, #2
 8008afc:	6122      	str	r2, [r4, #16]
 8008afe:	4641      	mov	r1, r8
 8008b00:	4620      	mov	r0, r4
 8008b02:	f001 fa4b 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d03b      	beq.n	8008b82 <ucdr_serialize_uint16_t+0xc2>
 8008b0a:	7d23      	ldrb	r3, [r4, #20]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d04a      	beq.n	8008ba6 <ucdr_serialize_uint16_t+0xe6>
 8008b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008b14:	7033      	strb	r3, [r6, #0]
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	d040      	beq.n	8008b9c <ucdr_serialize_uint16_t+0xdc>
 8008b1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b1e:	7073      	strb	r3, [r6, #1]
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	68a2      	ldr	r2, [r4, #8]
 8008b24:	7da0      	ldrb	r0, [r4, #22]
 8008b26:	3302      	adds	r3, #2
 8008b28:	1b5b      	subs	r3, r3, r5
 8008b2a:	4442      	add	r2, r8
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	f080 0001 	eor.w	r0, r0, #1
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	60a2      	str	r2, [r4, #8]
 8008b36:	7561      	strb	r1, [r4, #21]
 8008b38:	b002      	add	sp, #8
 8008b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4620      	mov	r0, r4
 8008b42:	f001 fa2b 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008b46:	b190      	cbz	r0, 8008b6e <ucdr_serialize_uint16_t+0xae>
 8008b48:	7d23      	ldrb	r3, [r4, #20]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	68a3      	ldr	r3, [r4, #8]
 8008b4e:	d014      	beq.n	8008b7a <ucdr_serialize_uint16_t+0xba>
 8008b50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008b54:	701a      	strb	r2, [r3, #0]
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008b5c:	705a      	strb	r2, [r3, #1]
 8008b5e:	68a2      	ldr	r2, [r4, #8]
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	3202      	adds	r2, #2
 8008b64:	3302      	adds	r3, #2
 8008b66:	2102      	movs	r1, #2
 8008b68:	60a2      	str	r2, [r4, #8]
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	7561      	strb	r1, [r4, #21]
 8008b6e:	7da0      	ldrb	r0, [r4, #22]
 8008b70:	f080 0001 	eor.w	r0, r0, #1
 8008b74:	b002      	add	sp, #8
 8008b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e7ed      	b.n	8008b5e <ucdr_serialize_uint16_t+0x9e>
 8008b82:	68a2      	ldr	r2, [r4, #8]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	7da0      	ldrb	r0, [r4, #22]
 8008b88:	7567      	strb	r7, [r4, #21]
 8008b8a:	1b52      	subs	r2, r2, r5
 8008b8c:	1b5b      	subs	r3, r3, r5
 8008b8e:	f080 0001 	eor.w	r0, r0, #1
 8008b92:	60a2      	str	r2, [r4, #8]
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	b002      	add	sp, #8
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	68a3      	ldr	r3, [r4, #8]
 8008b9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	e7bc      	b.n	8008b20 <ucdr_serialize_uint16_t+0x60>
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f10d 0606 	add.w	r6, sp, #6
 8008bac:	4631      	mov	r1, r6
 8008bae:	462a      	mov	r2, r5
 8008bb0:	f00c fee5 	bl	801597e <memcpy>
 8008bb4:	68a0      	ldr	r0, [r4, #8]
 8008bb6:	4642      	mov	r2, r8
 8008bb8:	1971      	adds	r1, r6, r5
 8008bba:	f00c fee0 	bl	801597e <memcpy>
 8008bbe:	e7af      	b.n	8008b20 <ucdr_serialize_uint16_t+0x60>

08008bc0 <ucdr_serialize_endian_uint16_t>:
 8008bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	2102      	movs	r1, #2
 8008bca:	4604      	mov	r4, r0
 8008bcc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008bd0:	f001 fa36 	bl	800a040 <ucdr_buffer_alignment>
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008bdc:	f001 fa74 	bl	800a0c8 <ucdr_advance_buffer>
 8008be0:	4620      	mov	r0, r4
 8008be2:	2102      	movs	r1, #2
 8008be4:	f001 f9ce 	bl	8009f84 <ucdr_check_buffer_available_for>
 8008be8:	bb70      	cbnz	r0, 8008c48 <ucdr_serialize_endian_uint16_t+0x88>
 8008bea:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008bee:	42be      	cmp	r6, r7
 8008bf0:	d925      	bls.n	8008c3e <ucdr_serialize_endian_uint16_t+0x7e>
 8008bf2:	6922      	ldr	r2, [r4, #16]
 8008bf4:	60a6      	str	r6, [r4, #8]
 8008bf6:	1bf6      	subs	r6, r6, r7
 8008bf8:	4432      	add	r2, r6
 8008bfa:	f1c6 0902 	rsb	r9, r6, #2
 8008bfe:	6122      	str	r2, [r4, #16]
 8008c00:	4649      	mov	r1, r9
 8008c02:	4620      	mov	r0, r4
 8008c04:	f001 f9ca 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d039      	beq.n	8008c80 <ucdr_serialize_endian_uint16_t+0xc0>
 8008c0c:	2d01      	cmp	r5, #1
 8008c0e:	d04a      	beq.n	8008ca6 <ucdr_serialize_endian_uint16_t+0xe6>
 8008c10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c14:	703b      	strb	r3, [r7, #0]
 8008c16:	2e00      	cmp	r6, #0
 8008c18:	d040      	beq.n	8008c9c <ucdr_serialize_endian_uint16_t+0xdc>
 8008c1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c1e:	707b      	strb	r3, [r7, #1]
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	68a2      	ldr	r2, [r4, #8]
 8008c24:	7da0      	ldrb	r0, [r4, #22]
 8008c26:	3302      	adds	r3, #2
 8008c28:	1b9b      	subs	r3, r3, r6
 8008c2a:	444a      	add	r2, r9
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	f080 0001 	eor.w	r0, r0, #1
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	60a2      	str	r2, [r4, #8]
 8008c36:	7561      	strb	r1, [r4, #21]
 8008c38:	b003      	add	sp, #12
 8008c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	2102      	movs	r1, #2
 8008c40:	4620      	mov	r0, r4
 8008c42:	f001 f9ab 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008c46:	b188      	cbz	r0, 8008c6c <ucdr_serialize_endian_uint16_t+0xac>
 8008c48:	2d01      	cmp	r5, #1
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	d014      	beq.n	8008c78 <ucdr_serialize_endian_uint16_t+0xb8>
 8008c4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	68a3      	ldr	r3, [r4, #8]
 8008c56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c5a:	705a      	strb	r2, [r3, #1]
 8008c5c:	68a2      	ldr	r2, [r4, #8]
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	3202      	adds	r2, #2
 8008c62:	3302      	adds	r3, #2
 8008c64:	2102      	movs	r1, #2
 8008c66:	60a2      	str	r2, [r4, #8]
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	7561      	strb	r1, [r4, #21]
 8008c6c:	7da0      	ldrb	r0, [r4, #22]
 8008c6e:	f080 0001 	eor.w	r0, r0, #1
 8008c72:	b003      	add	sp, #12
 8008c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	e7ed      	b.n	8008c5c <ucdr_serialize_endian_uint16_t+0x9c>
 8008c80:	68a2      	ldr	r2, [r4, #8]
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	7da0      	ldrb	r0, [r4, #22]
 8008c86:	f884 8015 	strb.w	r8, [r4, #21]
 8008c8a:	1b92      	subs	r2, r2, r6
 8008c8c:	1b9b      	subs	r3, r3, r6
 8008c8e:	f080 0001 	eor.w	r0, r0, #1
 8008c92:	60a2      	str	r2, [r4, #8]
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	b003      	add	sp, #12
 8008c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c9c:	68a3      	ldr	r3, [r4, #8]
 8008c9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	e7bc      	b.n	8008c20 <ucdr_serialize_endian_uint16_t+0x60>
 8008ca6:	f10d 0506 	add.w	r5, sp, #6
 8008caa:	4629      	mov	r1, r5
 8008cac:	4632      	mov	r2, r6
 8008cae:	4638      	mov	r0, r7
 8008cb0:	f00c fe65 	bl	801597e <memcpy>
 8008cb4:	68a0      	ldr	r0, [r4, #8]
 8008cb6:	464a      	mov	r2, r9
 8008cb8:	19a9      	adds	r1, r5, r6
 8008cba:	f00c fe60 	bl	801597e <memcpy>
 8008cbe:	e7af      	b.n	8008c20 <ucdr_serialize_endian_uint16_t+0x60>

08008cc0 <ucdr_deserialize_uint16_t>:
 8008cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	2102      	movs	r1, #2
 8008cc8:	4604      	mov	r4, r0
 8008cca:	f001 f9b9 	bl	800a040 <ucdr_buffer_alignment>
 8008cce:	4601      	mov	r1, r0
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008cd6:	f001 f9f7 	bl	800a0c8 <ucdr_advance_buffer>
 8008cda:	4620      	mov	r0, r4
 8008cdc:	2102      	movs	r1, #2
 8008cde:	f001 f951 	bl	8009f84 <ucdr_check_buffer_available_for>
 8008ce2:	bb60      	cbnz	r0, 8008d3e <ucdr_deserialize_uint16_t+0x7e>
 8008ce4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008ce8:	42be      	cmp	r6, r7
 8008cea:	d923      	bls.n	8008d34 <ucdr_deserialize_uint16_t+0x74>
 8008cec:	6922      	ldr	r2, [r4, #16]
 8008cee:	60a6      	str	r6, [r4, #8]
 8008cf0:	1bf6      	subs	r6, r6, r7
 8008cf2:	4432      	add	r2, r6
 8008cf4:	f1c6 0902 	rsb	r9, r6, #2
 8008cf8:	6122      	str	r2, [r4, #16]
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f001 f94d 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d034      	beq.n	8008d70 <ucdr_deserialize_uint16_t+0xb0>
 8008d06:	7d23      	ldrb	r3, [r4, #20]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d042      	beq.n	8008d92 <ucdr_deserialize_uint16_t+0xd2>
 8008d0c:	787b      	ldrb	r3, [r7, #1]
 8008d0e:	702b      	strb	r3, [r5, #0]
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	d03a      	beq.n	8008d8a <ucdr_deserialize_uint16_t+0xca>
 8008d14:	783b      	ldrb	r3, [r7, #0]
 8008d16:	706b      	strb	r3, [r5, #1]
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	68a2      	ldr	r2, [r4, #8]
 8008d1c:	7da0      	ldrb	r0, [r4, #22]
 8008d1e:	2102      	movs	r1, #2
 8008d20:	3302      	adds	r3, #2
 8008d22:	1b9b      	subs	r3, r3, r6
 8008d24:	444a      	add	r2, r9
 8008d26:	7561      	strb	r1, [r4, #21]
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	60a2      	str	r2, [r4, #8]
 8008d2c:	f080 0001 	eor.w	r0, r0, #1
 8008d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d34:	2102      	movs	r1, #2
 8008d36:	4620      	mov	r0, r4
 8008d38:	f001 f930 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008d3c:	b180      	cbz	r0, 8008d60 <ucdr_deserialize_uint16_t+0xa0>
 8008d3e:	7d23      	ldrb	r3, [r4, #20]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	d011      	beq.n	8008d6a <ucdr_deserialize_uint16_t+0xaa>
 8008d46:	785b      	ldrb	r3, [r3, #1]
 8008d48:	702b      	strb	r3, [r5, #0]
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	706b      	strb	r3, [r5, #1]
 8008d50:	68a2      	ldr	r2, [r4, #8]
 8008d52:	6923      	ldr	r3, [r4, #16]
 8008d54:	3202      	adds	r2, #2
 8008d56:	3302      	adds	r3, #2
 8008d58:	2102      	movs	r1, #2
 8008d5a:	60a2      	str	r2, [r4, #8]
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	7561      	strb	r1, [r4, #21]
 8008d60:	7da0      	ldrb	r0, [r4, #22]
 8008d62:	f080 0001 	eor.w	r0, r0, #1
 8008d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	802b      	strh	r3, [r5, #0]
 8008d6e:	e7ef      	b.n	8008d50 <ucdr_deserialize_uint16_t+0x90>
 8008d70:	68a2      	ldr	r2, [r4, #8]
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	7da0      	ldrb	r0, [r4, #22]
 8008d76:	f884 8015 	strb.w	r8, [r4, #21]
 8008d7a:	1b92      	subs	r2, r2, r6
 8008d7c:	1b9b      	subs	r3, r3, r6
 8008d7e:	60a2      	str	r2, [r4, #8]
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	f080 0001 	eor.w	r0, r0, #1
 8008d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	706b      	strb	r3, [r5, #1]
 8008d90:	e7c2      	b.n	8008d18 <ucdr_deserialize_uint16_t+0x58>
 8008d92:	4639      	mov	r1, r7
 8008d94:	4632      	mov	r2, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	f00c fdf1 	bl	801597e <memcpy>
 8008d9c:	68a1      	ldr	r1, [r4, #8]
 8008d9e:	464a      	mov	r2, r9
 8008da0:	19a8      	adds	r0, r5, r6
 8008da2:	f00c fdec 	bl	801597e <memcpy>
 8008da6:	e7b7      	b.n	8008d18 <ucdr_deserialize_uint16_t+0x58>

08008da8 <ucdr_deserialize_endian_uint16_t>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	460e      	mov	r6, r1
 8008dae:	2102      	movs	r1, #2
 8008db0:	4604      	mov	r4, r0
 8008db2:	4615      	mov	r5, r2
 8008db4:	f001 f944 	bl	800a040 <ucdr_buffer_alignment>
 8008db8:	4601      	mov	r1, r0
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008dc0:	f001 f982 	bl	800a0c8 <ucdr_advance_buffer>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	f001 f8dc 	bl	8009f84 <ucdr_check_buffer_available_for>
 8008dcc:	bb70      	cbnz	r0, 8008e2c <ucdr_deserialize_endian_uint16_t+0x84>
 8008dce:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008dd2:	4547      	cmp	r7, r8
 8008dd4:	d925      	bls.n	8008e22 <ucdr_deserialize_endian_uint16_t+0x7a>
 8008dd6:	6922      	ldr	r2, [r4, #16]
 8008dd8:	60a7      	str	r7, [r4, #8]
 8008dda:	eba7 0708 	sub.w	r7, r7, r8
 8008dde:	443a      	add	r2, r7
 8008de0:	f1c7 0a02 	rsb	sl, r7, #2
 8008de4:	6122      	str	r2, [r4, #16]
 8008de6:	4651      	mov	r1, sl
 8008de8:	4620      	mov	r0, r4
 8008dea:	f001 f8d7 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d034      	beq.n	8008e5c <ucdr_deserialize_endian_uint16_t+0xb4>
 8008df2:	2e01      	cmp	r6, #1
 8008df4:	d043      	beq.n	8008e7e <ucdr_deserialize_endian_uint16_t+0xd6>
 8008df6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008dfa:	702b      	strb	r3, [r5, #0]
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	d03a      	beq.n	8008e76 <ucdr_deserialize_endian_uint16_t+0xce>
 8008e00:	f898 3000 	ldrb.w	r3, [r8]
 8008e04:	706b      	strb	r3, [r5, #1]
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	68a2      	ldr	r2, [r4, #8]
 8008e0a:	7da0      	ldrb	r0, [r4, #22]
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	3302      	adds	r3, #2
 8008e10:	1bdb      	subs	r3, r3, r7
 8008e12:	4452      	add	r2, sl
 8008e14:	7561      	strb	r1, [r4, #21]
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	60a2      	str	r2, [r4, #8]
 8008e1a:	f080 0001 	eor.w	r0, r0, #1
 8008e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e22:	2102      	movs	r1, #2
 8008e24:	4620      	mov	r0, r4
 8008e26:	f001 f8b9 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008e2a:	b178      	cbz	r0, 8008e4c <ucdr_deserialize_endian_uint16_t+0xa4>
 8008e2c:	2e01      	cmp	r6, #1
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	d011      	beq.n	8008e56 <ucdr_deserialize_endian_uint16_t+0xae>
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	702b      	strb	r3, [r5, #0]
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	706b      	strb	r3, [r5, #1]
 8008e3c:	68a2      	ldr	r2, [r4, #8]
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	3202      	adds	r2, #2
 8008e42:	3302      	adds	r3, #2
 8008e44:	2102      	movs	r1, #2
 8008e46:	60a2      	str	r2, [r4, #8]
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	7561      	strb	r1, [r4, #21]
 8008e4c:	7da0      	ldrb	r0, [r4, #22]
 8008e4e:	f080 0001 	eor.w	r0, r0, #1
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	802b      	strh	r3, [r5, #0]
 8008e5a:	e7ef      	b.n	8008e3c <ucdr_deserialize_endian_uint16_t+0x94>
 8008e5c:	68a2      	ldr	r2, [r4, #8]
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	7da0      	ldrb	r0, [r4, #22]
 8008e62:	f884 9015 	strb.w	r9, [r4, #21]
 8008e66:	1bd2      	subs	r2, r2, r7
 8008e68:	1bdb      	subs	r3, r3, r7
 8008e6a:	60a2      	str	r2, [r4, #8]
 8008e6c:	6123      	str	r3, [r4, #16]
 8008e6e:	f080 0001 	eor.w	r0, r0, #1
 8008e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	706b      	strb	r3, [r5, #1]
 8008e7c:	e7c3      	b.n	8008e06 <ucdr_deserialize_endian_uint16_t+0x5e>
 8008e7e:	4641      	mov	r1, r8
 8008e80:	463a      	mov	r2, r7
 8008e82:	4628      	mov	r0, r5
 8008e84:	f00c fd7b 	bl	801597e <memcpy>
 8008e88:	68a1      	ldr	r1, [r4, #8]
 8008e8a:	4652      	mov	r2, sl
 8008e8c:	19e8      	adds	r0, r5, r7
 8008e8e:	f00c fd76 	bl	801597e <memcpy>
 8008e92:	e7b8      	b.n	8008e06 <ucdr_deserialize_endian_uint16_t+0x5e>

08008e94 <ucdr_serialize_uint32_t>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	9101      	str	r1, [sp, #4]
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	f001 f8ce 	bl	800a040 <ucdr_buffer_alignment>
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	7d67      	ldrb	r7, [r4, #21]
 8008eaa:	f001 f90d 	bl	800a0c8 <ucdr_advance_buffer>
 8008eae:	4620      	mov	r0, r4
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	f001 f867 	bl	8009f84 <ucdr_check_buffer_available_for>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d139      	bne.n	8008f2e <ucdr_serialize_uint32_t+0x9a>
 8008eba:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8008ebe:	42ae      	cmp	r6, r5
 8008ec0:	d930      	bls.n	8008f24 <ucdr_serialize_uint32_t+0x90>
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	60a6      	str	r6, [r4, #8]
 8008ec6:	1b76      	subs	r6, r6, r5
 8008ec8:	4432      	add	r2, r6
 8008eca:	f1c6 0804 	rsb	r8, r6, #4
 8008ece:	6122      	str	r2, [r4, #16]
 8008ed0:	4641      	mov	r1, r8
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f001 f862 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d04c      	beq.n	8008f76 <ucdr_serialize_uint32_t+0xe2>
 8008edc:	7d23      	ldrb	r3, [r4, #20]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d063      	beq.n	8008faa <ucdr_serialize_uint32_t+0x116>
 8008ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ee6:	702b      	strb	r3, [r5, #0]
 8008ee8:	2e00      	cmp	r6, #0
 8008eea:	d051      	beq.n	8008f90 <ucdr_serialize_uint32_t+0xfc>
 8008eec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ef0:	706b      	strb	r3, [r5, #1]
 8008ef2:	2e01      	cmp	r6, #1
 8008ef4:	d050      	beq.n	8008f98 <ucdr_serialize_uint32_t+0x104>
 8008ef6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008efa:	70ab      	strb	r3, [r5, #2]
 8008efc:	2e02      	cmp	r6, #2
 8008efe:	d04f      	beq.n	8008fa0 <ucdr_serialize_uint32_t+0x10c>
 8008f00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008f04:	70eb      	strb	r3, [r5, #3]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	68a2      	ldr	r2, [r4, #8]
 8008f0a:	7da0      	ldrb	r0, [r4, #22]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	1b9b      	subs	r3, r3, r6
 8008f10:	4442      	add	r2, r8
 8008f12:	2104      	movs	r1, #4
 8008f14:	f080 0001 	eor.w	r0, r0, #1
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	60a2      	str	r2, [r4, #8]
 8008f1c:	7561      	strb	r1, [r4, #21]
 8008f1e:	b002      	add	sp, #8
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	2104      	movs	r1, #4
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 f838 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8008f2c:	b1d0      	cbz	r0, 8008f64 <ucdr_serialize_uint32_t+0xd0>
 8008f2e:	7d23      	ldrb	r3, [r4, #20]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	d01c      	beq.n	8008f70 <ucdr_serialize_uint32_t+0xdc>
 8008f36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	68a3      	ldr	r3, [r4, #8]
 8008f3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f42:	705a      	strb	r2, [r3, #1]
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f4a:	709a      	strb	r2, [r3, #2]
 8008f4c:	68a3      	ldr	r3, [r4, #8]
 8008f4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f52:	70da      	strb	r2, [r3, #3]
 8008f54:	68a2      	ldr	r2, [r4, #8]
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	3204      	adds	r2, #4
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	2104      	movs	r1, #4
 8008f5e:	60a2      	str	r2, [r4, #8]
 8008f60:	6123      	str	r3, [r4, #16]
 8008f62:	7561      	strb	r1, [r4, #21]
 8008f64:	7da0      	ldrb	r0, [r4, #22]
 8008f66:	f080 0001 	eor.w	r0, r0, #1
 8008f6a:	b002      	add	sp, #8
 8008f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f70:	9a01      	ldr	r2, [sp, #4]
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	e7ee      	b.n	8008f54 <ucdr_serialize_uint32_t+0xc0>
 8008f76:	68a2      	ldr	r2, [r4, #8]
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	7da0      	ldrb	r0, [r4, #22]
 8008f7c:	7567      	strb	r7, [r4, #21]
 8008f7e:	1b92      	subs	r2, r2, r6
 8008f80:	1b9b      	subs	r3, r3, r6
 8008f82:	f080 0001 	eor.w	r0, r0, #1
 8008f86:	60a2      	str	r2, [r4, #8]
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	b002      	add	sp, #8
 8008f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f90:	68a3      	ldr	r3, [r4, #8]
 8008f92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	68a3      	ldr	r3, [r4, #8]
 8008fa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	e7ad      	b.n	8008f06 <ucdr_serialize_uint32_t+0x72>
 8008faa:	4628      	mov	r0, r5
 8008fac:	ad01      	add	r5, sp, #4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	f00c fce4 	bl	801597e <memcpy>
 8008fb6:	68a0      	ldr	r0, [r4, #8]
 8008fb8:	4642      	mov	r2, r8
 8008fba:	19a9      	adds	r1, r5, r6
 8008fbc:	f00c fcdf 	bl	801597e <memcpy>
 8008fc0:	e7a1      	b.n	8008f06 <ucdr_serialize_uint32_t+0x72>
 8008fc2:	bf00      	nop

08008fc4 <ucdr_serialize_endian_uint32_t>:
 8008fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	460d      	mov	r5, r1
 8008fcc:	2104      	movs	r1, #4
 8008fce:	4604      	mov	r4, r0
 8008fd0:	9201      	str	r2, [sp, #4]
 8008fd2:	f001 f835 	bl	800a040 <ucdr_buffer_alignment>
 8008fd6:	4601      	mov	r1, r0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008fde:	f001 f873 	bl	800a0c8 <ucdr_advance_buffer>
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	2104      	movs	r1, #4
 8008fe6:	f000 ffcd 	bl	8009f84 <ucdr_check_buffer_available_for>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d138      	bne.n	8009060 <ucdr_serialize_endian_uint32_t+0x9c>
 8008fee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008ff2:	42b7      	cmp	r7, r6
 8008ff4:	d92f      	bls.n	8009056 <ucdr_serialize_endian_uint32_t+0x92>
 8008ff6:	6922      	ldr	r2, [r4, #16]
 8008ff8:	60a7      	str	r7, [r4, #8]
 8008ffa:	1bbf      	subs	r7, r7, r6
 8008ffc:	443a      	add	r2, r7
 8008ffe:	f1c7 0904 	rsb	r9, r7, #4
 8009002:	6122      	str	r2, [r4, #16]
 8009004:	4649      	mov	r1, r9
 8009006:	4620      	mov	r0, r4
 8009008:	f000 ffc8 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800900c:	2800      	cmp	r0, #0
 800900e:	d04a      	beq.n	80090a6 <ucdr_serialize_endian_uint32_t+0xe2>
 8009010:	2d01      	cmp	r5, #1
 8009012:	d063      	beq.n	80090dc <ucdr_serialize_endian_uint32_t+0x118>
 8009014:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009018:	7033      	strb	r3, [r6, #0]
 800901a:	2f00      	cmp	r7, #0
 800901c:	d051      	beq.n	80090c2 <ucdr_serialize_endian_uint32_t+0xfe>
 800901e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009022:	7073      	strb	r3, [r6, #1]
 8009024:	2f01      	cmp	r7, #1
 8009026:	d050      	beq.n	80090ca <ucdr_serialize_endian_uint32_t+0x106>
 8009028:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800902c:	70b3      	strb	r3, [r6, #2]
 800902e:	2f02      	cmp	r7, #2
 8009030:	d04f      	beq.n	80090d2 <ucdr_serialize_endian_uint32_t+0x10e>
 8009032:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009036:	70f3      	strb	r3, [r6, #3]
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	68a2      	ldr	r2, [r4, #8]
 800903c:	7da0      	ldrb	r0, [r4, #22]
 800903e:	3304      	adds	r3, #4
 8009040:	1bdb      	subs	r3, r3, r7
 8009042:	444a      	add	r2, r9
 8009044:	2104      	movs	r1, #4
 8009046:	f080 0001 	eor.w	r0, r0, #1
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	60a2      	str	r2, [r4, #8]
 800904e:	7561      	strb	r1, [r4, #21]
 8009050:	b003      	add	sp, #12
 8009052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009056:	2104      	movs	r1, #4
 8009058:	4620      	mov	r0, r4
 800905a:	f000 ff9f 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800905e:	b1c8      	cbz	r0, 8009094 <ucdr_serialize_endian_uint32_t+0xd0>
 8009060:	2d01      	cmp	r5, #1
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	d01c      	beq.n	80090a0 <ucdr_serialize_endian_uint32_t+0xdc>
 8009066:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800906a:	701a      	strb	r2, [r3, #0]
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009072:	705a      	strb	r2, [r3, #1]
 8009074:	68a3      	ldr	r3, [r4, #8]
 8009076:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800907a:	709a      	strb	r2, [r3, #2]
 800907c:	68a3      	ldr	r3, [r4, #8]
 800907e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009082:	70da      	strb	r2, [r3, #3]
 8009084:	68a2      	ldr	r2, [r4, #8]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	3204      	adds	r2, #4
 800908a:	3304      	adds	r3, #4
 800908c:	2104      	movs	r1, #4
 800908e:	60a2      	str	r2, [r4, #8]
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	7561      	strb	r1, [r4, #21]
 8009094:	7da0      	ldrb	r0, [r4, #22]
 8009096:	f080 0001 	eor.w	r0, r0, #1
 800909a:	b003      	add	sp, #12
 800909c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090a0:	9a01      	ldr	r2, [sp, #4]
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	e7ee      	b.n	8009084 <ucdr_serialize_endian_uint32_t+0xc0>
 80090a6:	68a2      	ldr	r2, [r4, #8]
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	7da0      	ldrb	r0, [r4, #22]
 80090ac:	f884 8015 	strb.w	r8, [r4, #21]
 80090b0:	1bd2      	subs	r2, r2, r7
 80090b2:	1bdb      	subs	r3, r3, r7
 80090b4:	f080 0001 	eor.w	r0, r0, #1
 80090b8:	60a2      	str	r2, [r4, #8]
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	b003      	add	sp, #12
 80090be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80090c8:	701a      	strb	r2, [r3, #0]
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e7ad      	b.n	8009038 <ucdr_serialize_endian_uint32_t+0x74>
 80090dc:	ad01      	add	r5, sp, #4
 80090de:	4629      	mov	r1, r5
 80090e0:	463a      	mov	r2, r7
 80090e2:	4630      	mov	r0, r6
 80090e4:	f00c fc4b 	bl	801597e <memcpy>
 80090e8:	68a0      	ldr	r0, [r4, #8]
 80090ea:	464a      	mov	r2, r9
 80090ec:	19e9      	adds	r1, r5, r7
 80090ee:	f00c fc46 	bl	801597e <memcpy>
 80090f2:	e7a1      	b.n	8009038 <ucdr_serialize_endian_uint32_t+0x74>

080090f4 <ucdr_deserialize_uint32_t>:
 80090f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f8:	460d      	mov	r5, r1
 80090fa:	2104      	movs	r1, #4
 80090fc:	4604      	mov	r4, r0
 80090fe:	f000 ff9f 	bl	800a040 <ucdr_buffer_alignment>
 8009102:	4601      	mov	r1, r0
 8009104:	4620      	mov	r0, r4
 8009106:	f894 8015 	ldrb.w	r8, [r4, #21]
 800910a:	f000 ffdd 	bl	800a0c8 <ucdr_advance_buffer>
 800910e:	4620      	mov	r0, r4
 8009110:	2104      	movs	r1, #4
 8009112:	f000 ff37 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009116:	2800      	cmp	r0, #0
 8009118:	d138      	bne.n	800918c <ucdr_deserialize_uint32_t+0x98>
 800911a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800911e:	42b7      	cmp	r7, r6
 8009120:	d92f      	bls.n	8009182 <ucdr_deserialize_uint32_t+0x8e>
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	60a7      	str	r7, [r4, #8]
 8009126:	1bbf      	subs	r7, r7, r6
 8009128:	443a      	add	r2, r7
 800912a:	f1c7 0904 	rsb	r9, r7, #4
 800912e:	6122      	str	r2, [r4, #16]
 8009130:	4649      	mov	r1, r9
 8009132:	4620      	mov	r0, r4
 8009134:	f000 ff32 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009138:	2800      	cmp	r0, #0
 800913a:	d046      	beq.n	80091ca <ucdr_deserialize_uint32_t+0xd6>
 800913c:	7d23      	ldrb	r3, [r4, #20]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d05c      	beq.n	80091fc <ucdr_deserialize_uint32_t+0x108>
 8009142:	78f3      	ldrb	r3, [r6, #3]
 8009144:	702b      	strb	r3, [r5, #0]
 8009146:	2f00      	cmp	r7, #0
 8009148:	d04c      	beq.n	80091e4 <ucdr_deserialize_uint32_t+0xf0>
 800914a:	78b3      	ldrb	r3, [r6, #2]
 800914c:	706b      	strb	r3, [r5, #1]
 800914e:	2f01      	cmp	r7, #1
 8009150:	f105 0302 	add.w	r3, r5, #2
 8009154:	d04a      	beq.n	80091ec <ucdr_deserialize_uint32_t+0xf8>
 8009156:	7873      	ldrb	r3, [r6, #1]
 8009158:	70ab      	strb	r3, [r5, #2]
 800915a:	2f02      	cmp	r7, #2
 800915c:	f105 0303 	add.w	r3, r5, #3
 8009160:	d048      	beq.n	80091f4 <ucdr_deserialize_uint32_t+0x100>
 8009162:	7833      	ldrb	r3, [r6, #0]
 8009164:	70eb      	strb	r3, [r5, #3]
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	68a2      	ldr	r2, [r4, #8]
 800916a:	7da0      	ldrb	r0, [r4, #22]
 800916c:	2104      	movs	r1, #4
 800916e:	3304      	adds	r3, #4
 8009170:	1bdb      	subs	r3, r3, r7
 8009172:	444a      	add	r2, r9
 8009174:	7561      	strb	r1, [r4, #21]
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	60a2      	str	r2, [r4, #8]
 800917a:	f080 0001 	eor.w	r0, r0, #1
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	2104      	movs	r1, #4
 8009184:	4620      	mov	r0, r4
 8009186:	f000 ff09 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800918a:	b1b0      	cbz	r0, 80091ba <ucdr_deserialize_uint32_t+0xc6>
 800918c:	7d23      	ldrb	r3, [r4, #20]
 800918e:	2b01      	cmp	r3, #1
 8009190:	68a3      	ldr	r3, [r4, #8]
 8009192:	d017      	beq.n	80091c4 <ucdr_deserialize_uint32_t+0xd0>
 8009194:	78db      	ldrb	r3, [r3, #3]
 8009196:	702b      	strb	r3, [r5, #0]
 8009198:	68a3      	ldr	r3, [r4, #8]
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	706b      	strb	r3, [r5, #1]
 800919e:	68a3      	ldr	r3, [r4, #8]
 80091a0:	785b      	ldrb	r3, [r3, #1]
 80091a2:	70ab      	strb	r3, [r5, #2]
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	70eb      	strb	r3, [r5, #3]
 80091aa:	68a2      	ldr	r2, [r4, #8]
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	3204      	adds	r2, #4
 80091b0:	3304      	adds	r3, #4
 80091b2:	2104      	movs	r1, #4
 80091b4:	60a2      	str	r2, [r4, #8]
 80091b6:	6123      	str	r3, [r4, #16]
 80091b8:	7561      	strb	r1, [r4, #21]
 80091ba:	7da0      	ldrb	r0, [r4, #22]
 80091bc:	f080 0001 	eor.w	r0, r0, #1
 80091c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	e7ef      	b.n	80091aa <ucdr_deserialize_uint32_t+0xb6>
 80091ca:	68a2      	ldr	r2, [r4, #8]
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	7da0      	ldrb	r0, [r4, #22]
 80091d0:	f884 8015 	strb.w	r8, [r4, #21]
 80091d4:	1bd2      	subs	r2, r2, r7
 80091d6:	1bdb      	subs	r3, r3, r7
 80091d8:	60a2      	str	r2, [r4, #8]
 80091da:	6123      	str	r3, [r4, #16]
 80091dc:	f080 0001 	eor.w	r0, r0, #1
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	789b      	ldrb	r3, [r3, #2]
 80091e8:	706b      	strb	r3, [r5, #1]
 80091ea:	1cab      	adds	r3, r5, #2
 80091ec:	68a2      	ldr	r2, [r4, #8]
 80091ee:	7852      	ldrb	r2, [r2, #1]
 80091f0:	f803 2b01 	strb.w	r2, [r3], #1
 80091f4:	68a2      	ldr	r2, [r4, #8]
 80091f6:	7812      	ldrb	r2, [r2, #0]
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e7b4      	b.n	8009166 <ucdr_deserialize_uint32_t+0x72>
 80091fc:	4631      	mov	r1, r6
 80091fe:	463a      	mov	r2, r7
 8009200:	4628      	mov	r0, r5
 8009202:	f00c fbbc 	bl	801597e <memcpy>
 8009206:	68a1      	ldr	r1, [r4, #8]
 8009208:	464a      	mov	r2, r9
 800920a:	19e8      	adds	r0, r5, r7
 800920c:	f00c fbb7 	bl	801597e <memcpy>
 8009210:	e7a9      	b.n	8009166 <ucdr_deserialize_uint32_t+0x72>
 8009212:	bf00      	nop

08009214 <ucdr_deserialize_endian_uint32_t>:
 8009214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	460e      	mov	r6, r1
 800921a:	2104      	movs	r1, #4
 800921c:	4604      	mov	r4, r0
 800921e:	4615      	mov	r5, r2
 8009220:	f000 ff0e 	bl	800a040 <ucdr_buffer_alignment>
 8009224:	4601      	mov	r1, r0
 8009226:	4620      	mov	r0, r4
 8009228:	f894 9015 	ldrb.w	r9, [r4, #21]
 800922c:	f000 ff4c 	bl	800a0c8 <ucdr_advance_buffer>
 8009230:	4620      	mov	r0, r4
 8009232:	2104      	movs	r1, #4
 8009234:	f000 fea6 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009238:	2800      	cmp	r0, #0
 800923a:	d13c      	bne.n	80092b6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800923c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009240:	42bb      	cmp	r3, r7
 8009242:	d933      	bls.n	80092ac <ucdr_deserialize_endian_uint32_t+0x98>
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	eba3 0807 	sub.w	r8, r3, r7
 800924c:	4442      	add	r2, r8
 800924e:	f1c8 0a04 	rsb	sl, r8, #4
 8009252:	6122      	str	r2, [r4, #16]
 8009254:	4651      	mov	r1, sl
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fea0 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800925c:	2800      	cmp	r0, #0
 800925e:	d048      	beq.n	80092f2 <ucdr_deserialize_endian_uint32_t+0xde>
 8009260:	2e01      	cmp	r6, #1
 8009262:	d061      	beq.n	8009328 <ucdr_deserialize_endian_uint32_t+0x114>
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	702b      	strb	r3, [r5, #0]
 8009268:	f1b8 0f00 	cmp.w	r8, #0
 800926c:	d050      	beq.n	8009310 <ucdr_deserialize_endian_uint32_t+0xfc>
 800926e:	78bb      	ldrb	r3, [r7, #2]
 8009270:	706b      	strb	r3, [r5, #1]
 8009272:	f1b8 0f01 	cmp.w	r8, #1
 8009276:	f105 0302 	add.w	r3, r5, #2
 800927a:	d04d      	beq.n	8009318 <ucdr_deserialize_endian_uint32_t+0x104>
 800927c:	787b      	ldrb	r3, [r7, #1]
 800927e:	70ab      	strb	r3, [r5, #2]
 8009280:	f1b8 0f02 	cmp.w	r8, #2
 8009284:	f105 0303 	add.w	r3, r5, #3
 8009288:	d04a      	beq.n	8009320 <ucdr_deserialize_endian_uint32_t+0x10c>
 800928a:	783b      	ldrb	r3, [r7, #0]
 800928c:	70eb      	strb	r3, [r5, #3]
 800928e:	6923      	ldr	r3, [r4, #16]
 8009290:	68a2      	ldr	r2, [r4, #8]
 8009292:	7da0      	ldrb	r0, [r4, #22]
 8009294:	2104      	movs	r1, #4
 8009296:	3304      	adds	r3, #4
 8009298:	eba3 0308 	sub.w	r3, r3, r8
 800929c:	4452      	add	r2, sl
 800929e:	7561      	strb	r1, [r4, #21]
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	60a2      	str	r2, [r4, #8]
 80092a4:	f080 0001 	eor.w	r0, r0, #1
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	2104      	movs	r1, #4
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fe74 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 80092b4:	b1a8      	cbz	r0, 80092e2 <ucdr_deserialize_endian_uint32_t+0xce>
 80092b6:	2e01      	cmp	r6, #1
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	d017      	beq.n	80092ec <ucdr_deserialize_endian_uint32_t+0xd8>
 80092bc:	78db      	ldrb	r3, [r3, #3]
 80092be:	702b      	strb	r3, [r5, #0]
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	789b      	ldrb	r3, [r3, #2]
 80092c4:	706b      	strb	r3, [r5, #1]
 80092c6:	68a3      	ldr	r3, [r4, #8]
 80092c8:	785b      	ldrb	r3, [r3, #1]
 80092ca:	70ab      	strb	r3, [r5, #2]
 80092cc:	68a3      	ldr	r3, [r4, #8]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	70eb      	strb	r3, [r5, #3]
 80092d2:	68a2      	ldr	r2, [r4, #8]
 80092d4:	6923      	ldr	r3, [r4, #16]
 80092d6:	3204      	adds	r2, #4
 80092d8:	3304      	adds	r3, #4
 80092da:	2104      	movs	r1, #4
 80092dc:	60a2      	str	r2, [r4, #8]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	7561      	strb	r1, [r4, #21]
 80092e2:	7da0      	ldrb	r0, [r4, #22]
 80092e4:	f080 0001 	eor.w	r0, r0, #1
 80092e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	e7ef      	b.n	80092d2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80092f2:	68a2      	ldr	r2, [r4, #8]
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	7da0      	ldrb	r0, [r4, #22]
 80092f8:	f884 9015 	strb.w	r9, [r4, #21]
 80092fc:	eba2 0208 	sub.w	r2, r2, r8
 8009300:	eba3 0308 	sub.w	r3, r3, r8
 8009304:	60a2      	str	r2, [r4, #8]
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	f080 0001 	eor.w	r0, r0, #1
 800930c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009310:	68a3      	ldr	r3, [r4, #8]
 8009312:	789b      	ldrb	r3, [r3, #2]
 8009314:	706b      	strb	r3, [r5, #1]
 8009316:	1cab      	adds	r3, r5, #2
 8009318:	68a2      	ldr	r2, [r4, #8]
 800931a:	7852      	ldrb	r2, [r2, #1]
 800931c:	f803 2b01 	strb.w	r2, [r3], #1
 8009320:	68a2      	ldr	r2, [r4, #8]
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	e7b2      	b.n	800928e <ucdr_deserialize_endian_uint32_t+0x7a>
 8009328:	4639      	mov	r1, r7
 800932a:	4642      	mov	r2, r8
 800932c:	4628      	mov	r0, r5
 800932e:	f00c fb26 	bl	801597e <memcpy>
 8009332:	68a1      	ldr	r1, [r4, #8]
 8009334:	4652      	mov	r2, sl
 8009336:	eb05 0008 	add.w	r0, r5, r8
 800933a:	f00c fb20 	bl	801597e <memcpy>
 800933e:	e7a6      	b.n	800928e <ucdr_deserialize_endian_uint32_t+0x7a>

08009340 <ucdr_serialize_uint64_t>:
 8009340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009344:	2108      	movs	r1, #8
 8009346:	b082      	sub	sp, #8
 8009348:	4604      	mov	r4, r0
 800934a:	e9cd 2300 	strd	r2, r3, [sp]
 800934e:	f000 fe77 	bl	800a040 <ucdr_buffer_alignment>
 8009352:	4601      	mov	r1, r0
 8009354:	4620      	mov	r0, r4
 8009356:	7d67      	ldrb	r7, [r4, #21]
 8009358:	f000 feb6 	bl	800a0c8 <ucdr_advance_buffer>
 800935c:	4620      	mov	r0, r4
 800935e:	2108      	movs	r1, #8
 8009360:	f000 fe10 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009364:	2800      	cmp	r0, #0
 8009366:	d14e      	bne.n	8009406 <ucdr_serialize_uint64_t+0xc6>
 8009368:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800936c:	42b5      	cmp	r5, r6
 800936e:	d945      	bls.n	80093fc <ucdr_serialize_uint64_t+0xbc>
 8009370:	6923      	ldr	r3, [r4, #16]
 8009372:	60a5      	str	r5, [r4, #8]
 8009374:	1bad      	subs	r5, r5, r6
 8009376:	442b      	add	r3, r5
 8009378:	f1c5 0808 	rsb	r8, r5, #8
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	4641      	mov	r1, r8
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fe0b 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009386:	2800      	cmp	r0, #0
 8009388:	d074      	beq.n	8009474 <ucdr_serialize_uint64_t+0x134>
 800938a:	7d23      	ldrb	r3, [r4, #20]
 800938c:	2b01      	cmp	r3, #1
 800938e:	f000 809b 	beq.w	80094c8 <ucdr_serialize_uint64_t+0x188>
 8009392:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009396:	7033      	strb	r3, [r6, #0]
 8009398:	2d00      	cmp	r5, #0
 800939a:	d078      	beq.n	800948e <ucdr_serialize_uint64_t+0x14e>
 800939c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093a0:	7073      	strb	r3, [r6, #1]
 80093a2:	2d01      	cmp	r5, #1
 80093a4:	d077      	beq.n	8009496 <ucdr_serialize_uint64_t+0x156>
 80093a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80093aa:	70b3      	strb	r3, [r6, #2]
 80093ac:	2d02      	cmp	r5, #2
 80093ae:	d076      	beq.n	800949e <ucdr_serialize_uint64_t+0x15e>
 80093b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80093b4:	70f3      	strb	r3, [r6, #3]
 80093b6:	2d03      	cmp	r5, #3
 80093b8:	d075      	beq.n	80094a6 <ucdr_serialize_uint64_t+0x166>
 80093ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80093be:	7133      	strb	r3, [r6, #4]
 80093c0:	2d04      	cmp	r5, #4
 80093c2:	d074      	beq.n	80094ae <ucdr_serialize_uint64_t+0x16e>
 80093c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80093c8:	7173      	strb	r3, [r6, #5]
 80093ca:	2d05      	cmp	r5, #5
 80093cc:	d073      	beq.n	80094b6 <ucdr_serialize_uint64_t+0x176>
 80093ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80093d2:	71b3      	strb	r3, [r6, #6]
 80093d4:	2d06      	cmp	r5, #6
 80093d6:	d072      	beq.n	80094be <ucdr_serialize_uint64_t+0x17e>
 80093d8:	f89d 3000 	ldrb.w	r3, [sp]
 80093dc:	71f3      	strb	r3, [r6, #7]
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	68a2      	ldr	r2, [r4, #8]
 80093e2:	7da0      	ldrb	r0, [r4, #22]
 80093e4:	3308      	adds	r3, #8
 80093e6:	1b5d      	subs	r5, r3, r5
 80093e8:	4442      	add	r2, r8
 80093ea:	2308      	movs	r3, #8
 80093ec:	f080 0001 	eor.w	r0, r0, #1
 80093f0:	6125      	str	r5, [r4, #16]
 80093f2:	60a2      	str	r2, [r4, #8]
 80093f4:	7563      	strb	r3, [r4, #21]
 80093f6:	b002      	add	sp, #8
 80093f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fc:	2108      	movs	r1, #8
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fdcc 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009404:	b350      	cbz	r0, 800945c <ucdr_serialize_uint64_t+0x11c>
 8009406:	7d23      	ldrb	r3, [r4, #20]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d02d      	beq.n	8009468 <ucdr_serialize_uint64_t+0x128>
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800941a:	705a      	strb	r2, [r3, #1]
 800941c:	68a3      	ldr	r3, [r4, #8]
 800941e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009422:	709a      	strb	r2, [r3, #2]
 8009424:	68a3      	ldr	r3, [r4, #8]
 8009426:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800942a:	70da      	strb	r2, [r3, #3]
 800942c:	68a3      	ldr	r3, [r4, #8]
 800942e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009432:	711a      	strb	r2, [r3, #4]
 8009434:	68a3      	ldr	r3, [r4, #8]
 8009436:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800943a:	715a      	strb	r2, [r3, #5]
 800943c:	68a3      	ldr	r3, [r4, #8]
 800943e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009442:	719a      	strb	r2, [r3, #6]
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	f89d 2000 	ldrb.w	r2, [sp]
 800944a:	71da      	strb	r2, [r3, #7]
 800944c:	68a2      	ldr	r2, [r4, #8]
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	3208      	adds	r2, #8
 8009452:	3308      	adds	r3, #8
 8009454:	2108      	movs	r1, #8
 8009456:	60a2      	str	r2, [r4, #8]
 8009458:	6123      	str	r3, [r4, #16]
 800945a:	7561      	strb	r1, [r4, #21]
 800945c:	7da0      	ldrb	r0, [r4, #22]
 800945e:	f080 0001 	eor.w	r0, r0, #1
 8009462:	b002      	add	sp, #8
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	466b      	mov	r3, sp
 800946a:	cb03      	ldmia	r3!, {r0, r1}
 800946c:	68a3      	ldr	r3, [r4, #8]
 800946e:	6018      	str	r0, [r3, #0]
 8009470:	6059      	str	r1, [r3, #4]
 8009472:	e7eb      	b.n	800944c <ucdr_serialize_uint64_t+0x10c>
 8009474:	68a2      	ldr	r2, [r4, #8]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	7da0      	ldrb	r0, [r4, #22]
 800947a:	7567      	strb	r7, [r4, #21]
 800947c:	1b52      	subs	r2, r2, r5
 800947e:	f080 0001 	eor.w	r0, r0, #1
 8009482:	1b5d      	subs	r5, r3, r5
 8009484:	60a2      	str	r2, [r4, #8]
 8009486:	6125      	str	r5, [r4, #16]
 8009488:	b002      	add	sp, #8
 800948a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	68a3      	ldr	r3, [r4, #8]
 8009498:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	f89d 2000 	ldrb.w	r2, [sp]
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	e78a      	b.n	80093de <ucdr_serialize_uint64_t+0x9e>
 80094c8:	4630      	mov	r0, r6
 80094ca:	466e      	mov	r6, sp
 80094cc:	4631      	mov	r1, r6
 80094ce:	462a      	mov	r2, r5
 80094d0:	f00c fa55 	bl	801597e <memcpy>
 80094d4:	68a0      	ldr	r0, [r4, #8]
 80094d6:	4642      	mov	r2, r8
 80094d8:	1971      	adds	r1, r6, r5
 80094da:	f00c fa50 	bl	801597e <memcpy>
 80094de:	e77e      	b.n	80093de <ucdr_serialize_uint64_t+0x9e>

080094e0 <ucdr_serialize_int16_t>:
 80094e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	460b      	mov	r3, r1
 80094e8:	2102      	movs	r1, #2
 80094ea:	4604      	mov	r4, r0
 80094ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80094f0:	f000 fda6 	bl	800a040 <ucdr_buffer_alignment>
 80094f4:	4601      	mov	r1, r0
 80094f6:	4620      	mov	r0, r4
 80094f8:	7d67      	ldrb	r7, [r4, #21]
 80094fa:	f000 fde5 	bl	800a0c8 <ucdr_advance_buffer>
 80094fe:	4620      	mov	r0, r4
 8009500:	2102      	movs	r1, #2
 8009502:	f000 fd3f 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009506:	bb78      	cbnz	r0, 8009568 <ucdr_serialize_int16_t+0x88>
 8009508:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800950c:	42b5      	cmp	r5, r6
 800950e:	d926      	bls.n	800955e <ucdr_serialize_int16_t+0x7e>
 8009510:	6922      	ldr	r2, [r4, #16]
 8009512:	60a5      	str	r5, [r4, #8]
 8009514:	1bad      	subs	r5, r5, r6
 8009516:	442a      	add	r2, r5
 8009518:	f1c5 0802 	rsb	r8, r5, #2
 800951c:	6122      	str	r2, [r4, #16]
 800951e:	4641      	mov	r1, r8
 8009520:	4620      	mov	r0, r4
 8009522:	f000 fd3b 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009526:	2800      	cmp	r0, #0
 8009528:	d03b      	beq.n	80095a2 <ucdr_serialize_int16_t+0xc2>
 800952a:	7d23      	ldrb	r3, [r4, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d04a      	beq.n	80095c6 <ucdr_serialize_int16_t+0xe6>
 8009530:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009534:	7033      	strb	r3, [r6, #0]
 8009536:	2d00      	cmp	r5, #0
 8009538:	d040      	beq.n	80095bc <ucdr_serialize_int16_t+0xdc>
 800953a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800953e:	7073      	strb	r3, [r6, #1]
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	68a2      	ldr	r2, [r4, #8]
 8009544:	7da0      	ldrb	r0, [r4, #22]
 8009546:	3302      	adds	r3, #2
 8009548:	1b5b      	subs	r3, r3, r5
 800954a:	4442      	add	r2, r8
 800954c:	2102      	movs	r1, #2
 800954e:	f080 0001 	eor.w	r0, r0, #1
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	60a2      	str	r2, [r4, #8]
 8009556:	7561      	strb	r1, [r4, #21]
 8009558:	b002      	add	sp, #8
 800955a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955e:	2102      	movs	r1, #2
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fd1b 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009566:	b190      	cbz	r0, 800958e <ucdr_serialize_int16_t+0xae>
 8009568:	7d23      	ldrb	r3, [r4, #20]
 800956a:	2b01      	cmp	r3, #1
 800956c:	68a3      	ldr	r3, [r4, #8]
 800956e:	d014      	beq.n	800959a <ucdr_serialize_int16_t+0xba>
 8009570:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009574:	701a      	strb	r2, [r3, #0]
 8009576:	68a3      	ldr	r3, [r4, #8]
 8009578:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800957c:	705a      	strb	r2, [r3, #1]
 800957e:	68a2      	ldr	r2, [r4, #8]
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	3202      	adds	r2, #2
 8009584:	3302      	adds	r3, #2
 8009586:	2102      	movs	r1, #2
 8009588:	60a2      	str	r2, [r4, #8]
 800958a:	6123      	str	r3, [r4, #16]
 800958c:	7561      	strb	r1, [r4, #21]
 800958e:	7da0      	ldrb	r0, [r4, #22]
 8009590:	f080 0001 	eor.w	r0, r0, #1
 8009594:	b002      	add	sp, #8
 8009596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	e7ed      	b.n	800957e <ucdr_serialize_int16_t+0x9e>
 80095a2:	68a2      	ldr	r2, [r4, #8]
 80095a4:	6923      	ldr	r3, [r4, #16]
 80095a6:	7da0      	ldrb	r0, [r4, #22]
 80095a8:	7567      	strb	r7, [r4, #21]
 80095aa:	1b52      	subs	r2, r2, r5
 80095ac:	1b5b      	subs	r3, r3, r5
 80095ae:	f080 0001 	eor.w	r0, r0, #1
 80095b2:	60a2      	str	r2, [r4, #8]
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	b002      	add	sp, #8
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	e7bc      	b.n	8009540 <ucdr_serialize_int16_t+0x60>
 80095c6:	4630      	mov	r0, r6
 80095c8:	f10d 0606 	add.w	r6, sp, #6
 80095cc:	4631      	mov	r1, r6
 80095ce:	462a      	mov	r2, r5
 80095d0:	f00c f9d5 	bl	801597e <memcpy>
 80095d4:	68a0      	ldr	r0, [r4, #8]
 80095d6:	4642      	mov	r2, r8
 80095d8:	1971      	adds	r1, r6, r5
 80095da:	f00c f9d0 	bl	801597e <memcpy>
 80095de:	e7af      	b.n	8009540 <ucdr_serialize_int16_t+0x60>

080095e0 <ucdr_deserialize_int16_t>:
 80095e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	2102      	movs	r1, #2
 80095e8:	4604      	mov	r4, r0
 80095ea:	f000 fd29 	bl	800a040 <ucdr_buffer_alignment>
 80095ee:	4601      	mov	r1, r0
 80095f0:	4620      	mov	r0, r4
 80095f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80095f6:	f000 fd67 	bl	800a0c8 <ucdr_advance_buffer>
 80095fa:	4620      	mov	r0, r4
 80095fc:	2102      	movs	r1, #2
 80095fe:	f000 fcc1 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009602:	bb60      	cbnz	r0, 800965e <ucdr_deserialize_int16_t+0x7e>
 8009604:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009608:	42be      	cmp	r6, r7
 800960a:	d923      	bls.n	8009654 <ucdr_deserialize_int16_t+0x74>
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	60a6      	str	r6, [r4, #8]
 8009610:	1bf6      	subs	r6, r6, r7
 8009612:	4432      	add	r2, r6
 8009614:	f1c6 0902 	rsb	r9, r6, #2
 8009618:	6122      	str	r2, [r4, #16]
 800961a:	4649      	mov	r1, r9
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fcbd 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009622:	2800      	cmp	r0, #0
 8009624:	d034      	beq.n	8009690 <ucdr_deserialize_int16_t+0xb0>
 8009626:	7d23      	ldrb	r3, [r4, #20]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d042      	beq.n	80096b2 <ucdr_deserialize_int16_t+0xd2>
 800962c:	787b      	ldrb	r3, [r7, #1]
 800962e:	702b      	strb	r3, [r5, #0]
 8009630:	2e00      	cmp	r6, #0
 8009632:	d03a      	beq.n	80096aa <ucdr_deserialize_int16_t+0xca>
 8009634:	783b      	ldrb	r3, [r7, #0]
 8009636:	706b      	strb	r3, [r5, #1]
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	68a2      	ldr	r2, [r4, #8]
 800963c:	7da0      	ldrb	r0, [r4, #22]
 800963e:	2102      	movs	r1, #2
 8009640:	3302      	adds	r3, #2
 8009642:	1b9b      	subs	r3, r3, r6
 8009644:	444a      	add	r2, r9
 8009646:	7561      	strb	r1, [r4, #21]
 8009648:	6123      	str	r3, [r4, #16]
 800964a:	60a2      	str	r2, [r4, #8]
 800964c:	f080 0001 	eor.w	r0, r0, #1
 8009650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009654:	2102      	movs	r1, #2
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fca0 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800965c:	b180      	cbz	r0, 8009680 <ucdr_deserialize_int16_t+0xa0>
 800965e:	7d23      	ldrb	r3, [r4, #20]
 8009660:	2b01      	cmp	r3, #1
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	d011      	beq.n	800968a <ucdr_deserialize_int16_t+0xaa>
 8009666:	785b      	ldrb	r3, [r3, #1]
 8009668:	702b      	strb	r3, [r5, #0]
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	706b      	strb	r3, [r5, #1]
 8009670:	68a2      	ldr	r2, [r4, #8]
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	3202      	adds	r2, #2
 8009676:	3302      	adds	r3, #2
 8009678:	2102      	movs	r1, #2
 800967a:	60a2      	str	r2, [r4, #8]
 800967c:	6123      	str	r3, [r4, #16]
 800967e:	7561      	strb	r1, [r4, #21]
 8009680:	7da0      	ldrb	r0, [r4, #22]
 8009682:	f080 0001 	eor.w	r0, r0, #1
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	802b      	strh	r3, [r5, #0]
 800968e:	e7ef      	b.n	8009670 <ucdr_deserialize_int16_t+0x90>
 8009690:	68a2      	ldr	r2, [r4, #8]
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	7da0      	ldrb	r0, [r4, #22]
 8009696:	f884 8015 	strb.w	r8, [r4, #21]
 800969a:	1b92      	subs	r2, r2, r6
 800969c:	1b9b      	subs	r3, r3, r6
 800969e:	60a2      	str	r2, [r4, #8]
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	f080 0001 	eor.w	r0, r0, #1
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	706b      	strb	r3, [r5, #1]
 80096b0:	e7c2      	b.n	8009638 <ucdr_deserialize_int16_t+0x58>
 80096b2:	4639      	mov	r1, r7
 80096b4:	4632      	mov	r2, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	f00c f961 	bl	801597e <memcpy>
 80096bc:	68a1      	ldr	r1, [r4, #8]
 80096be:	464a      	mov	r2, r9
 80096c0:	19a8      	adds	r0, r5, r6
 80096c2:	f00c f95c 	bl	801597e <memcpy>
 80096c6:	e7b7      	b.n	8009638 <ucdr_deserialize_int16_t+0x58>

080096c8 <ucdr_serialize_int32_t>:
 80096c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	4604      	mov	r4, r0
 80096d0:	9101      	str	r1, [sp, #4]
 80096d2:	2104      	movs	r1, #4
 80096d4:	f000 fcb4 	bl	800a040 <ucdr_buffer_alignment>
 80096d8:	4601      	mov	r1, r0
 80096da:	4620      	mov	r0, r4
 80096dc:	7d67      	ldrb	r7, [r4, #21]
 80096de:	f000 fcf3 	bl	800a0c8 <ucdr_advance_buffer>
 80096e2:	4620      	mov	r0, r4
 80096e4:	2104      	movs	r1, #4
 80096e6:	f000 fc4d 	bl	8009f84 <ucdr_check_buffer_available_for>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d139      	bne.n	8009762 <ucdr_serialize_int32_t+0x9a>
 80096ee:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80096f2:	42ae      	cmp	r6, r5
 80096f4:	d930      	bls.n	8009758 <ucdr_serialize_int32_t+0x90>
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	60a6      	str	r6, [r4, #8]
 80096fa:	1b76      	subs	r6, r6, r5
 80096fc:	4432      	add	r2, r6
 80096fe:	f1c6 0804 	rsb	r8, r6, #4
 8009702:	6122      	str	r2, [r4, #16]
 8009704:	4641      	mov	r1, r8
 8009706:	4620      	mov	r0, r4
 8009708:	f000 fc48 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800970c:	2800      	cmp	r0, #0
 800970e:	d04c      	beq.n	80097aa <ucdr_serialize_int32_t+0xe2>
 8009710:	7d23      	ldrb	r3, [r4, #20]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d063      	beq.n	80097de <ucdr_serialize_int32_t+0x116>
 8009716:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800971a:	702b      	strb	r3, [r5, #0]
 800971c:	2e00      	cmp	r6, #0
 800971e:	d051      	beq.n	80097c4 <ucdr_serialize_int32_t+0xfc>
 8009720:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009724:	706b      	strb	r3, [r5, #1]
 8009726:	2e01      	cmp	r6, #1
 8009728:	d050      	beq.n	80097cc <ucdr_serialize_int32_t+0x104>
 800972a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800972e:	70ab      	strb	r3, [r5, #2]
 8009730:	2e02      	cmp	r6, #2
 8009732:	d04f      	beq.n	80097d4 <ucdr_serialize_int32_t+0x10c>
 8009734:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009738:	70eb      	strb	r3, [r5, #3]
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	68a2      	ldr	r2, [r4, #8]
 800973e:	7da0      	ldrb	r0, [r4, #22]
 8009740:	3304      	adds	r3, #4
 8009742:	1b9b      	subs	r3, r3, r6
 8009744:	4442      	add	r2, r8
 8009746:	2104      	movs	r1, #4
 8009748:	f080 0001 	eor.w	r0, r0, #1
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	60a2      	str	r2, [r4, #8]
 8009750:	7561      	strb	r1, [r4, #21]
 8009752:	b002      	add	sp, #8
 8009754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009758:	2104      	movs	r1, #4
 800975a:	4620      	mov	r0, r4
 800975c:	f000 fc1e 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009760:	b1d0      	cbz	r0, 8009798 <ucdr_serialize_int32_t+0xd0>
 8009762:	7d23      	ldrb	r3, [r4, #20]
 8009764:	2b01      	cmp	r3, #1
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	d01c      	beq.n	80097a4 <ucdr_serialize_int32_t+0xdc>
 800976a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	68a3      	ldr	r3, [r4, #8]
 8009772:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009776:	705a      	strb	r2, [r3, #1]
 8009778:	68a3      	ldr	r3, [r4, #8]
 800977a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800977e:	709a      	strb	r2, [r3, #2]
 8009780:	68a3      	ldr	r3, [r4, #8]
 8009782:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009786:	70da      	strb	r2, [r3, #3]
 8009788:	68a2      	ldr	r2, [r4, #8]
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	3204      	adds	r2, #4
 800978e:	3304      	adds	r3, #4
 8009790:	2104      	movs	r1, #4
 8009792:	60a2      	str	r2, [r4, #8]
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	7561      	strb	r1, [r4, #21]
 8009798:	7da0      	ldrb	r0, [r4, #22]
 800979a:	f080 0001 	eor.w	r0, r0, #1
 800979e:	b002      	add	sp, #8
 80097a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a4:	9a01      	ldr	r2, [sp, #4]
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	e7ee      	b.n	8009788 <ucdr_serialize_int32_t+0xc0>
 80097aa:	68a2      	ldr	r2, [r4, #8]
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	7da0      	ldrb	r0, [r4, #22]
 80097b0:	7567      	strb	r7, [r4, #21]
 80097b2:	1b92      	subs	r2, r2, r6
 80097b4:	1b9b      	subs	r3, r3, r6
 80097b6:	f080 0001 	eor.w	r0, r0, #1
 80097ba:	60a2      	str	r2, [r4, #8]
 80097bc:	6123      	str	r3, [r4, #16]
 80097be:	b002      	add	sp, #8
 80097c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	68a3      	ldr	r3, [r4, #8]
 80097d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e7ad      	b.n	800973a <ucdr_serialize_int32_t+0x72>
 80097de:	4628      	mov	r0, r5
 80097e0:	ad01      	add	r5, sp, #4
 80097e2:	4629      	mov	r1, r5
 80097e4:	4632      	mov	r2, r6
 80097e6:	f00c f8ca 	bl	801597e <memcpy>
 80097ea:	68a0      	ldr	r0, [r4, #8]
 80097ec:	4642      	mov	r2, r8
 80097ee:	19a9      	adds	r1, r5, r6
 80097f0:	f00c f8c5 	bl	801597e <memcpy>
 80097f4:	e7a1      	b.n	800973a <ucdr_serialize_int32_t+0x72>
 80097f6:	bf00      	nop

080097f8 <ucdr_deserialize_int32_t>:
 80097f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fc:	460d      	mov	r5, r1
 80097fe:	2104      	movs	r1, #4
 8009800:	4604      	mov	r4, r0
 8009802:	f000 fc1d 	bl	800a040 <ucdr_buffer_alignment>
 8009806:	4601      	mov	r1, r0
 8009808:	4620      	mov	r0, r4
 800980a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800980e:	f000 fc5b 	bl	800a0c8 <ucdr_advance_buffer>
 8009812:	4620      	mov	r0, r4
 8009814:	2104      	movs	r1, #4
 8009816:	f000 fbb5 	bl	8009f84 <ucdr_check_buffer_available_for>
 800981a:	2800      	cmp	r0, #0
 800981c:	d138      	bne.n	8009890 <ucdr_deserialize_int32_t+0x98>
 800981e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009822:	42b7      	cmp	r7, r6
 8009824:	d92f      	bls.n	8009886 <ucdr_deserialize_int32_t+0x8e>
 8009826:	6922      	ldr	r2, [r4, #16]
 8009828:	60a7      	str	r7, [r4, #8]
 800982a:	1bbf      	subs	r7, r7, r6
 800982c:	443a      	add	r2, r7
 800982e:	f1c7 0904 	rsb	r9, r7, #4
 8009832:	6122      	str	r2, [r4, #16]
 8009834:	4649      	mov	r1, r9
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fbb0 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800983c:	2800      	cmp	r0, #0
 800983e:	d046      	beq.n	80098ce <ucdr_deserialize_int32_t+0xd6>
 8009840:	7d23      	ldrb	r3, [r4, #20]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d05c      	beq.n	8009900 <ucdr_deserialize_int32_t+0x108>
 8009846:	78f3      	ldrb	r3, [r6, #3]
 8009848:	702b      	strb	r3, [r5, #0]
 800984a:	2f00      	cmp	r7, #0
 800984c:	d04c      	beq.n	80098e8 <ucdr_deserialize_int32_t+0xf0>
 800984e:	78b3      	ldrb	r3, [r6, #2]
 8009850:	706b      	strb	r3, [r5, #1]
 8009852:	2f01      	cmp	r7, #1
 8009854:	f105 0302 	add.w	r3, r5, #2
 8009858:	d04a      	beq.n	80098f0 <ucdr_deserialize_int32_t+0xf8>
 800985a:	7873      	ldrb	r3, [r6, #1]
 800985c:	70ab      	strb	r3, [r5, #2]
 800985e:	2f02      	cmp	r7, #2
 8009860:	f105 0303 	add.w	r3, r5, #3
 8009864:	d048      	beq.n	80098f8 <ucdr_deserialize_int32_t+0x100>
 8009866:	7833      	ldrb	r3, [r6, #0]
 8009868:	70eb      	strb	r3, [r5, #3]
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	68a2      	ldr	r2, [r4, #8]
 800986e:	7da0      	ldrb	r0, [r4, #22]
 8009870:	2104      	movs	r1, #4
 8009872:	3304      	adds	r3, #4
 8009874:	1bdb      	subs	r3, r3, r7
 8009876:	444a      	add	r2, r9
 8009878:	7561      	strb	r1, [r4, #21]
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	60a2      	str	r2, [r4, #8]
 800987e:	f080 0001 	eor.w	r0, r0, #1
 8009882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009886:	2104      	movs	r1, #4
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fb87 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800988e:	b1b0      	cbz	r0, 80098be <ucdr_deserialize_int32_t+0xc6>
 8009890:	7d23      	ldrb	r3, [r4, #20]
 8009892:	2b01      	cmp	r3, #1
 8009894:	68a3      	ldr	r3, [r4, #8]
 8009896:	d017      	beq.n	80098c8 <ucdr_deserialize_int32_t+0xd0>
 8009898:	78db      	ldrb	r3, [r3, #3]
 800989a:	702b      	strb	r3, [r5, #0]
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	789b      	ldrb	r3, [r3, #2]
 80098a0:	706b      	strb	r3, [r5, #1]
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	70ab      	strb	r3, [r5, #2]
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	70eb      	strb	r3, [r5, #3]
 80098ae:	68a2      	ldr	r2, [r4, #8]
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	3204      	adds	r2, #4
 80098b4:	3304      	adds	r3, #4
 80098b6:	2104      	movs	r1, #4
 80098b8:	60a2      	str	r2, [r4, #8]
 80098ba:	6123      	str	r3, [r4, #16]
 80098bc:	7561      	strb	r1, [r4, #21]
 80098be:	7da0      	ldrb	r0, [r4, #22]
 80098c0:	f080 0001 	eor.w	r0, r0, #1
 80098c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	e7ef      	b.n	80098ae <ucdr_deserialize_int32_t+0xb6>
 80098ce:	68a2      	ldr	r2, [r4, #8]
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	7da0      	ldrb	r0, [r4, #22]
 80098d4:	f884 8015 	strb.w	r8, [r4, #21]
 80098d8:	1bd2      	subs	r2, r2, r7
 80098da:	1bdb      	subs	r3, r3, r7
 80098dc:	60a2      	str	r2, [r4, #8]
 80098de:	6123      	str	r3, [r4, #16]
 80098e0:	f080 0001 	eor.w	r0, r0, #1
 80098e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	789b      	ldrb	r3, [r3, #2]
 80098ec:	706b      	strb	r3, [r5, #1]
 80098ee:	1cab      	adds	r3, r5, #2
 80098f0:	68a2      	ldr	r2, [r4, #8]
 80098f2:	7852      	ldrb	r2, [r2, #1]
 80098f4:	f803 2b01 	strb.w	r2, [r3], #1
 80098f8:	68a2      	ldr	r2, [r4, #8]
 80098fa:	7812      	ldrb	r2, [r2, #0]
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e7b4      	b.n	800986a <ucdr_deserialize_int32_t+0x72>
 8009900:	4631      	mov	r1, r6
 8009902:	463a      	mov	r2, r7
 8009904:	4628      	mov	r0, r5
 8009906:	f00c f83a 	bl	801597e <memcpy>
 800990a:	68a1      	ldr	r1, [r4, #8]
 800990c:	464a      	mov	r2, r9
 800990e:	19e8      	adds	r0, r5, r7
 8009910:	f00c f835 	bl	801597e <memcpy>
 8009914:	e7a9      	b.n	800986a <ucdr_deserialize_int32_t+0x72>
 8009916:	bf00      	nop

08009918 <ucdr_serialize_double>:
 8009918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991c:	2108      	movs	r1, #8
 800991e:	b082      	sub	sp, #8
 8009920:	4604      	mov	r4, r0
 8009922:	ed8d 0b00 	vstr	d0, [sp]
 8009926:	f000 fb8b 	bl	800a040 <ucdr_buffer_alignment>
 800992a:	4601      	mov	r1, r0
 800992c:	4620      	mov	r0, r4
 800992e:	7d67      	ldrb	r7, [r4, #21]
 8009930:	f000 fbca 	bl	800a0c8 <ucdr_advance_buffer>
 8009934:	4620      	mov	r0, r4
 8009936:	2108      	movs	r1, #8
 8009938:	f000 fb24 	bl	8009f84 <ucdr_check_buffer_available_for>
 800993c:	2800      	cmp	r0, #0
 800993e:	d14e      	bne.n	80099de <ucdr_serialize_double+0xc6>
 8009940:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009944:	42b5      	cmp	r5, r6
 8009946:	d945      	bls.n	80099d4 <ucdr_serialize_double+0xbc>
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	60a5      	str	r5, [r4, #8]
 800994c:	1bad      	subs	r5, r5, r6
 800994e:	442b      	add	r3, r5
 8009950:	f1c5 0808 	rsb	r8, r5, #8
 8009954:	6123      	str	r3, [r4, #16]
 8009956:	4641      	mov	r1, r8
 8009958:	4620      	mov	r0, r4
 800995a:	f000 fb1f 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 800995e:	2800      	cmp	r0, #0
 8009960:	d074      	beq.n	8009a4c <ucdr_serialize_double+0x134>
 8009962:	7d23      	ldrb	r3, [r4, #20]
 8009964:	2b01      	cmp	r3, #1
 8009966:	f000 809b 	beq.w	8009aa0 <ucdr_serialize_double+0x188>
 800996a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800996e:	7033      	strb	r3, [r6, #0]
 8009970:	2d00      	cmp	r5, #0
 8009972:	d078      	beq.n	8009a66 <ucdr_serialize_double+0x14e>
 8009974:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009978:	7073      	strb	r3, [r6, #1]
 800997a:	2d01      	cmp	r5, #1
 800997c:	d077      	beq.n	8009a6e <ucdr_serialize_double+0x156>
 800997e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009982:	70b3      	strb	r3, [r6, #2]
 8009984:	2d02      	cmp	r5, #2
 8009986:	d076      	beq.n	8009a76 <ucdr_serialize_double+0x15e>
 8009988:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800998c:	70f3      	strb	r3, [r6, #3]
 800998e:	2d03      	cmp	r5, #3
 8009990:	d075      	beq.n	8009a7e <ucdr_serialize_double+0x166>
 8009992:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009996:	7133      	strb	r3, [r6, #4]
 8009998:	2d04      	cmp	r5, #4
 800999a:	d074      	beq.n	8009a86 <ucdr_serialize_double+0x16e>
 800999c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80099a0:	7173      	strb	r3, [r6, #5]
 80099a2:	2d05      	cmp	r5, #5
 80099a4:	d073      	beq.n	8009a8e <ucdr_serialize_double+0x176>
 80099a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80099aa:	71b3      	strb	r3, [r6, #6]
 80099ac:	2d06      	cmp	r5, #6
 80099ae:	d072      	beq.n	8009a96 <ucdr_serialize_double+0x17e>
 80099b0:	f89d 3000 	ldrb.w	r3, [sp]
 80099b4:	71f3      	strb	r3, [r6, #7]
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	68a2      	ldr	r2, [r4, #8]
 80099ba:	7da0      	ldrb	r0, [r4, #22]
 80099bc:	3308      	adds	r3, #8
 80099be:	1b5d      	subs	r5, r3, r5
 80099c0:	4442      	add	r2, r8
 80099c2:	2308      	movs	r3, #8
 80099c4:	f080 0001 	eor.w	r0, r0, #1
 80099c8:	6125      	str	r5, [r4, #16]
 80099ca:	60a2      	str	r2, [r4, #8]
 80099cc:	7563      	strb	r3, [r4, #21]
 80099ce:	b002      	add	sp, #8
 80099d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d4:	2108      	movs	r1, #8
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 fae0 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 80099dc:	b350      	cbz	r0, 8009a34 <ucdr_serialize_double+0x11c>
 80099de:	7d23      	ldrb	r3, [r4, #20]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d02d      	beq.n	8009a40 <ucdr_serialize_double+0x128>
 80099e4:	68a3      	ldr	r3, [r4, #8]
 80099e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	68a3      	ldr	r3, [r4, #8]
 80099ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80099f2:	705a      	strb	r2, [r3, #1]
 80099f4:	68a3      	ldr	r3, [r4, #8]
 80099f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80099fa:	709a      	strb	r2, [r3, #2]
 80099fc:	68a3      	ldr	r3, [r4, #8]
 80099fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a02:	70da      	strb	r2, [r3, #3]
 8009a04:	68a3      	ldr	r3, [r4, #8]
 8009a06:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009a0a:	711a      	strb	r2, [r3, #4]
 8009a0c:	68a3      	ldr	r3, [r4, #8]
 8009a0e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009a12:	715a      	strb	r2, [r3, #5]
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009a1a:	719a      	strb	r2, [r3, #6]
 8009a1c:	68a3      	ldr	r3, [r4, #8]
 8009a1e:	f89d 2000 	ldrb.w	r2, [sp]
 8009a22:	71da      	strb	r2, [r3, #7]
 8009a24:	68a2      	ldr	r2, [r4, #8]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	3208      	adds	r2, #8
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	2108      	movs	r1, #8
 8009a2e:	60a2      	str	r2, [r4, #8]
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	7561      	strb	r1, [r4, #21]
 8009a34:	7da0      	ldrb	r0, [r4, #22]
 8009a36:	f080 0001 	eor.w	r0, r0, #1
 8009a3a:	b002      	add	sp, #8
 8009a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a40:	466b      	mov	r3, sp
 8009a42:	cb03      	ldmia	r3!, {r0, r1}
 8009a44:	68a3      	ldr	r3, [r4, #8]
 8009a46:	6018      	str	r0, [r3, #0]
 8009a48:	6059      	str	r1, [r3, #4]
 8009a4a:	e7eb      	b.n	8009a24 <ucdr_serialize_double+0x10c>
 8009a4c:	68a2      	ldr	r2, [r4, #8]
 8009a4e:	6923      	ldr	r3, [r4, #16]
 8009a50:	7da0      	ldrb	r0, [r4, #22]
 8009a52:	7567      	strb	r7, [r4, #21]
 8009a54:	1b52      	subs	r2, r2, r5
 8009a56:	f080 0001 	eor.w	r0, r0, #1
 8009a5a:	1b5d      	subs	r5, r3, r5
 8009a5c:	60a2      	str	r2, [r4, #8]
 8009a5e:	6125      	str	r5, [r4, #16]
 8009a60:	b002      	add	sp, #8
 8009a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a66:	68a3      	ldr	r3, [r4, #8]
 8009a68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	68a3      	ldr	r3, [r4, #8]
 8009a80:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009a8c:	701a      	strb	r2, [r3, #0]
 8009a8e:	68a3      	ldr	r3, [r4, #8]
 8009a90:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	f89d 2000 	ldrb.w	r2, [sp]
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	e78a      	b.n	80099b6 <ucdr_serialize_double+0x9e>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	466e      	mov	r6, sp
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	f00b ff69 	bl	801597e <memcpy>
 8009aac:	68a0      	ldr	r0, [r4, #8]
 8009aae:	4642      	mov	r2, r8
 8009ab0:	1971      	adds	r1, r6, r5
 8009ab2:	f00b ff64 	bl	801597e <memcpy>
 8009ab6:	e77e      	b.n	80099b6 <ucdr_serialize_double+0x9e>

08009ab8 <ucdr_serialize_endian_double>:
 8009ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009abc:	460e      	mov	r6, r1
 8009abe:	b083      	sub	sp, #12
 8009ac0:	2108      	movs	r1, #8
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	ed8d 0b00 	vstr	d0, [sp]
 8009ac8:	f000 faba 	bl	800a040 <ucdr_buffer_alignment>
 8009acc:	4601      	mov	r1, r0
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009ad4:	f000 faf8 	bl	800a0c8 <ucdr_advance_buffer>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	2108      	movs	r1, #8
 8009adc:	f000 fa52 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d14d      	bne.n	8009b80 <ucdr_serialize_endian_double+0xc8>
 8009ae4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8009ae8:	42bd      	cmp	r5, r7
 8009aea:	d944      	bls.n	8009b76 <ucdr_serialize_endian_double+0xbe>
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	60a5      	str	r5, [r4, #8]
 8009af0:	1bed      	subs	r5, r5, r7
 8009af2:	442b      	add	r3, r5
 8009af4:	f1c5 0908 	rsb	r9, r5, #8
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	4649      	mov	r1, r9
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 fa4d 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d072      	beq.n	8009bec <ucdr_serialize_endian_double+0x134>
 8009b06:	2e01      	cmp	r6, #1
 8009b08:	f000 809b 	beq.w	8009c42 <ucdr_serialize_endian_double+0x18a>
 8009b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009b10:	703b      	strb	r3, [r7, #0]
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	d078      	beq.n	8009c08 <ucdr_serialize_endian_double+0x150>
 8009b16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009b1a:	707b      	strb	r3, [r7, #1]
 8009b1c:	2d01      	cmp	r5, #1
 8009b1e:	d077      	beq.n	8009c10 <ucdr_serialize_endian_double+0x158>
 8009b20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009b24:	70bb      	strb	r3, [r7, #2]
 8009b26:	2d02      	cmp	r5, #2
 8009b28:	d076      	beq.n	8009c18 <ucdr_serialize_endian_double+0x160>
 8009b2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009b2e:	70fb      	strb	r3, [r7, #3]
 8009b30:	2d03      	cmp	r5, #3
 8009b32:	d075      	beq.n	8009c20 <ucdr_serialize_endian_double+0x168>
 8009b34:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009b38:	713b      	strb	r3, [r7, #4]
 8009b3a:	2d04      	cmp	r5, #4
 8009b3c:	d074      	beq.n	8009c28 <ucdr_serialize_endian_double+0x170>
 8009b3e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009b42:	717b      	strb	r3, [r7, #5]
 8009b44:	2d05      	cmp	r5, #5
 8009b46:	d073      	beq.n	8009c30 <ucdr_serialize_endian_double+0x178>
 8009b48:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8009b4c:	71bb      	strb	r3, [r7, #6]
 8009b4e:	2d06      	cmp	r5, #6
 8009b50:	d072      	beq.n	8009c38 <ucdr_serialize_endian_double+0x180>
 8009b52:	f89d 3000 	ldrb.w	r3, [sp]
 8009b56:	71fb      	strb	r3, [r7, #7]
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	68a2      	ldr	r2, [r4, #8]
 8009b5c:	7da0      	ldrb	r0, [r4, #22]
 8009b5e:	3308      	adds	r3, #8
 8009b60:	1b5d      	subs	r5, r3, r5
 8009b62:	444a      	add	r2, r9
 8009b64:	2308      	movs	r3, #8
 8009b66:	f080 0001 	eor.w	r0, r0, #1
 8009b6a:	6125      	str	r5, [r4, #16]
 8009b6c:	60a2      	str	r2, [r4, #8]
 8009b6e:	7563      	strb	r3, [r4, #21]
 8009b70:	b003      	add	sp, #12
 8009b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b76:	2108      	movs	r1, #8
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 fa0f 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009b7e:	b348      	cbz	r0, 8009bd4 <ucdr_serialize_endian_double+0x11c>
 8009b80:	2e01      	cmp	r6, #1
 8009b82:	d02d      	beq.n	8009be0 <ucdr_serialize_endian_double+0x128>
 8009b84:	68a3      	ldr	r3, [r4, #8]
 8009b86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	68a3      	ldr	r3, [r4, #8]
 8009b8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009b92:	705a      	strb	r2, [r3, #1]
 8009b94:	68a3      	ldr	r3, [r4, #8]
 8009b96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009b9a:	709a      	strb	r2, [r3, #2]
 8009b9c:	68a3      	ldr	r3, [r4, #8]
 8009b9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ba2:	70da      	strb	r2, [r3, #3]
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009baa:	711a      	strb	r2, [r3, #4]
 8009bac:	68a3      	ldr	r3, [r4, #8]
 8009bae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009bb2:	715a      	strb	r2, [r3, #5]
 8009bb4:	68a3      	ldr	r3, [r4, #8]
 8009bb6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009bba:	719a      	strb	r2, [r3, #6]
 8009bbc:	68a3      	ldr	r3, [r4, #8]
 8009bbe:	f89d 2000 	ldrb.w	r2, [sp]
 8009bc2:	71da      	strb	r2, [r3, #7]
 8009bc4:	68a2      	ldr	r2, [r4, #8]
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	3208      	adds	r2, #8
 8009bca:	3308      	adds	r3, #8
 8009bcc:	2108      	movs	r1, #8
 8009bce:	60a2      	str	r2, [r4, #8]
 8009bd0:	6123      	str	r3, [r4, #16]
 8009bd2:	7561      	strb	r1, [r4, #21]
 8009bd4:	7da0      	ldrb	r0, [r4, #22]
 8009bd6:	f080 0001 	eor.w	r0, r0, #1
 8009bda:	b003      	add	sp, #12
 8009bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009be0:	466b      	mov	r3, sp
 8009be2:	cb03      	ldmia	r3!, {r0, r1}
 8009be4:	68a3      	ldr	r3, [r4, #8]
 8009be6:	6018      	str	r0, [r3, #0]
 8009be8:	6059      	str	r1, [r3, #4]
 8009bea:	e7eb      	b.n	8009bc4 <ucdr_serialize_endian_double+0x10c>
 8009bec:	68a2      	ldr	r2, [r4, #8]
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	7da0      	ldrb	r0, [r4, #22]
 8009bf2:	f884 8015 	strb.w	r8, [r4, #21]
 8009bf6:	1b52      	subs	r2, r2, r5
 8009bf8:	f080 0001 	eor.w	r0, r0, #1
 8009bfc:	1b5d      	subs	r5, r3, r5
 8009bfe:	60a2      	str	r2, [r4, #8]
 8009c00:	6125      	str	r5, [r4, #16]
 8009c02:	b003      	add	sp, #12
 8009c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c08:	68a3      	ldr	r3, [r4, #8]
 8009c0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009c0e:	701a      	strb	r2, [r3, #0]
 8009c10:	68a3      	ldr	r3, [r4, #8]
 8009c12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009c16:	701a      	strb	r2, [r3, #0]
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009c1e:	701a      	strb	r2, [r3, #0]
 8009c20:	68a3      	ldr	r3, [r4, #8]
 8009c22:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009c26:	701a      	strb	r2, [r3, #0]
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009c36:	701a      	strb	r2, [r3, #0]
 8009c38:	68a3      	ldr	r3, [r4, #8]
 8009c3a:	f89d 2000 	ldrb.w	r2, [sp]
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e78a      	b.n	8009b58 <ucdr_serialize_endian_double+0xa0>
 8009c42:	466e      	mov	r6, sp
 8009c44:	4631      	mov	r1, r6
 8009c46:	462a      	mov	r2, r5
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f00b fe98 	bl	801597e <memcpy>
 8009c4e:	68a0      	ldr	r0, [r4, #8]
 8009c50:	464a      	mov	r2, r9
 8009c52:	1971      	adds	r1, r6, r5
 8009c54:	f00b fe93 	bl	801597e <memcpy>
 8009c58:	e77e      	b.n	8009b58 <ucdr_serialize_endian_double+0xa0>
 8009c5a:	bf00      	nop

08009c5c <ucdr_deserialize_double>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	460d      	mov	r5, r1
 8009c62:	2108      	movs	r1, #8
 8009c64:	4604      	mov	r4, r0
 8009c66:	f000 f9eb 	bl	800a040 <ucdr_buffer_alignment>
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009c72:	f000 fa29 	bl	800a0c8 <ucdr_advance_buffer>
 8009c76:	4620      	mov	r0, r4
 8009c78:	2108      	movs	r1, #8
 8009c7a:	f000 f983 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d151      	bne.n	8009d26 <ucdr_deserialize_double+0xca>
 8009c82:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009c86:	42be      	cmp	r6, r7
 8009c88:	d948      	bls.n	8009d1c <ucdr_deserialize_double+0xc0>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	60a6      	str	r6, [r4, #8]
 8009c8e:	1bf6      	subs	r6, r6, r7
 8009c90:	4433      	add	r3, r6
 8009c92:	f1c6 0808 	rsb	r8, r6, #8
 8009c96:	6123      	str	r3, [r4, #16]
 8009c98:	4641      	mov	r1, r8
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 f97e 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d06d      	beq.n	8009d80 <ucdr_deserialize_double+0x124>
 8009ca4:	7d23      	ldrb	r3, [r4, #20]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	f000 8093 	beq.w	8009dd2 <ucdr_deserialize_double+0x176>
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	702b      	strb	r3, [r5, #0]
 8009cb0:	2e00      	cmp	r6, #0
 8009cb2:	d072      	beq.n	8009d9a <ucdr_deserialize_double+0x13e>
 8009cb4:	79bb      	ldrb	r3, [r7, #6]
 8009cb6:	706b      	strb	r3, [r5, #1]
 8009cb8:	2e01      	cmp	r6, #1
 8009cba:	f105 0302 	add.w	r3, r5, #2
 8009cbe:	d070      	beq.n	8009da2 <ucdr_deserialize_double+0x146>
 8009cc0:	797b      	ldrb	r3, [r7, #5]
 8009cc2:	70ab      	strb	r3, [r5, #2]
 8009cc4:	2e02      	cmp	r6, #2
 8009cc6:	f105 0303 	add.w	r3, r5, #3
 8009cca:	d06e      	beq.n	8009daa <ucdr_deserialize_double+0x14e>
 8009ccc:	793b      	ldrb	r3, [r7, #4]
 8009cce:	70eb      	strb	r3, [r5, #3]
 8009cd0:	2e03      	cmp	r6, #3
 8009cd2:	f105 0304 	add.w	r3, r5, #4
 8009cd6:	d06c      	beq.n	8009db2 <ucdr_deserialize_double+0x156>
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	712b      	strb	r3, [r5, #4]
 8009cdc:	2e04      	cmp	r6, #4
 8009cde:	f105 0305 	add.w	r3, r5, #5
 8009ce2:	d06a      	beq.n	8009dba <ucdr_deserialize_double+0x15e>
 8009ce4:	78bb      	ldrb	r3, [r7, #2]
 8009ce6:	716b      	strb	r3, [r5, #5]
 8009ce8:	2e05      	cmp	r6, #5
 8009cea:	f105 0306 	add.w	r3, r5, #6
 8009cee:	d068      	beq.n	8009dc2 <ucdr_deserialize_double+0x166>
 8009cf0:	787b      	ldrb	r3, [r7, #1]
 8009cf2:	71ab      	strb	r3, [r5, #6]
 8009cf4:	2e06      	cmp	r6, #6
 8009cf6:	f105 0307 	add.w	r3, r5, #7
 8009cfa:	d066      	beq.n	8009dca <ucdr_deserialize_double+0x16e>
 8009cfc:	783b      	ldrb	r3, [r7, #0]
 8009cfe:	71eb      	strb	r3, [r5, #7]
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	68a2      	ldr	r2, [r4, #8]
 8009d04:	7da0      	ldrb	r0, [r4, #22]
 8009d06:	3308      	adds	r3, #8
 8009d08:	1b9e      	subs	r6, r3, r6
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	4442      	add	r2, r8
 8009d0e:	7563      	strb	r3, [r4, #21]
 8009d10:	6126      	str	r6, [r4, #16]
 8009d12:	60a2      	str	r2, [r4, #8]
 8009d14:	f080 0001 	eor.w	r0, r0, #1
 8009d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1c:	2108      	movs	r1, #8
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 f93c 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009d24:	b310      	cbz	r0, 8009d6c <ucdr_deserialize_double+0x110>
 8009d26:	7d23      	ldrb	r3, [r4, #20]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	68a3      	ldr	r3, [r4, #8]
 8009d2c:	d023      	beq.n	8009d76 <ucdr_deserialize_double+0x11a>
 8009d2e:	79db      	ldrb	r3, [r3, #7]
 8009d30:	702b      	strb	r3, [r5, #0]
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	799b      	ldrb	r3, [r3, #6]
 8009d36:	706b      	strb	r3, [r5, #1]
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	795b      	ldrb	r3, [r3, #5]
 8009d3c:	70ab      	strb	r3, [r5, #2]
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	70eb      	strb	r3, [r5, #3]
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	78db      	ldrb	r3, [r3, #3]
 8009d48:	712b      	strb	r3, [r5, #4]
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	789b      	ldrb	r3, [r3, #2]
 8009d4e:	716b      	strb	r3, [r5, #5]
 8009d50:	68a3      	ldr	r3, [r4, #8]
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	71ab      	strb	r3, [r5, #6]
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	71eb      	strb	r3, [r5, #7]
 8009d5c:	68a2      	ldr	r2, [r4, #8]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	3208      	adds	r2, #8
 8009d62:	3308      	adds	r3, #8
 8009d64:	2108      	movs	r1, #8
 8009d66:	60a2      	str	r2, [r4, #8]
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	7561      	strb	r1, [r4, #21]
 8009d6c:	7da0      	ldrb	r0, [r4, #22]
 8009d6e:	f080 0001 	eor.w	r0, r0, #1
 8009d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	606b      	str	r3, [r5, #4]
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	e7ed      	b.n	8009d5c <ucdr_deserialize_double+0x100>
 8009d80:	68a2      	ldr	r2, [r4, #8]
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	7da0      	ldrb	r0, [r4, #22]
 8009d86:	f884 9015 	strb.w	r9, [r4, #21]
 8009d8a:	1b92      	subs	r2, r2, r6
 8009d8c:	1b9e      	subs	r6, r3, r6
 8009d8e:	60a2      	str	r2, [r4, #8]
 8009d90:	6126      	str	r6, [r4, #16]
 8009d92:	f080 0001 	eor.w	r0, r0, #1
 8009d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9a:	68a3      	ldr	r3, [r4, #8]
 8009d9c:	799b      	ldrb	r3, [r3, #6]
 8009d9e:	706b      	strb	r3, [r5, #1]
 8009da0:	1cab      	adds	r3, r5, #2
 8009da2:	68a2      	ldr	r2, [r4, #8]
 8009da4:	7952      	ldrb	r2, [r2, #5]
 8009da6:	f803 2b01 	strb.w	r2, [r3], #1
 8009daa:	68a2      	ldr	r2, [r4, #8]
 8009dac:	7912      	ldrb	r2, [r2, #4]
 8009dae:	f803 2b01 	strb.w	r2, [r3], #1
 8009db2:	68a2      	ldr	r2, [r4, #8]
 8009db4:	78d2      	ldrb	r2, [r2, #3]
 8009db6:	f803 2b01 	strb.w	r2, [r3], #1
 8009dba:	68a2      	ldr	r2, [r4, #8]
 8009dbc:	7892      	ldrb	r2, [r2, #2]
 8009dbe:	f803 2b01 	strb.w	r2, [r3], #1
 8009dc2:	68a2      	ldr	r2, [r4, #8]
 8009dc4:	7852      	ldrb	r2, [r2, #1]
 8009dc6:	f803 2b01 	strb.w	r2, [r3], #1
 8009dca:	68a2      	ldr	r2, [r4, #8]
 8009dcc:	7812      	ldrb	r2, [r2, #0]
 8009dce:	701a      	strb	r2, [r3, #0]
 8009dd0:	e796      	b.n	8009d00 <ucdr_deserialize_double+0xa4>
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f00b fdd1 	bl	801597e <memcpy>
 8009ddc:	68a1      	ldr	r1, [r4, #8]
 8009dde:	4642      	mov	r2, r8
 8009de0:	19a8      	adds	r0, r5, r6
 8009de2:	f00b fdcc 	bl	801597e <memcpy>
 8009de6:	e78b      	b.n	8009d00 <ucdr_deserialize_double+0xa4>

08009de8 <ucdr_deserialize_endian_double>:
 8009de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dec:	460f      	mov	r7, r1
 8009dee:	2108      	movs	r1, #8
 8009df0:	4604      	mov	r4, r0
 8009df2:	4615      	mov	r5, r2
 8009df4:	f000 f924 	bl	800a040 <ucdr_buffer_alignment>
 8009df8:	4601      	mov	r1, r0
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009e00:	f000 f962 	bl	800a0c8 <ucdr_advance_buffer>
 8009e04:	4620      	mov	r0, r4
 8009e06:	2108      	movs	r1, #8
 8009e08:	f000 f8bc 	bl	8009f84 <ucdr_check_buffer_available_for>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d159      	bne.n	8009ec4 <ucdr_deserialize_endian_double+0xdc>
 8009e10:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8009e14:	4546      	cmp	r6, r8
 8009e16:	d950      	bls.n	8009eba <ucdr_deserialize_endian_double+0xd2>
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	60a6      	str	r6, [r4, #8]
 8009e1c:	eba6 0608 	sub.w	r6, r6, r8
 8009e20:	4433      	add	r3, r6
 8009e22:	f1c6 0a08 	rsb	sl, r6, #8
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	4651      	mov	r1, sl
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 f8b6 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d073      	beq.n	8009f1c <ucdr_deserialize_endian_double+0x134>
 8009e34:	2f01      	cmp	r7, #1
 8009e36:	f000 809a 	beq.w	8009f6e <ucdr_deserialize_endian_double+0x186>
 8009e3a:	f898 3007 	ldrb.w	r3, [r8, #7]
 8009e3e:	702b      	strb	r3, [r5, #0]
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	d078      	beq.n	8009f36 <ucdr_deserialize_endian_double+0x14e>
 8009e44:	f898 3006 	ldrb.w	r3, [r8, #6]
 8009e48:	706b      	strb	r3, [r5, #1]
 8009e4a:	2e01      	cmp	r6, #1
 8009e4c:	f105 0302 	add.w	r3, r5, #2
 8009e50:	d075      	beq.n	8009f3e <ucdr_deserialize_endian_double+0x156>
 8009e52:	f898 3005 	ldrb.w	r3, [r8, #5]
 8009e56:	70ab      	strb	r3, [r5, #2]
 8009e58:	2e02      	cmp	r6, #2
 8009e5a:	f105 0303 	add.w	r3, r5, #3
 8009e5e:	d072      	beq.n	8009f46 <ucdr_deserialize_endian_double+0x15e>
 8009e60:	f898 3004 	ldrb.w	r3, [r8, #4]
 8009e64:	70eb      	strb	r3, [r5, #3]
 8009e66:	2e03      	cmp	r6, #3
 8009e68:	f105 0304 	add.w	r3, r5, #4
 8009e6c:	d06f      	beq.n	8009f4e <ucdr_deserialize_endian_double+0x166>
 8009e6e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8009e72:	712b      	strb	r3, [r5, #4]
 8009e74:	2e04      	cmp	r6, #4
 8009e76:	f105 0305 	add.w	r3, r5, #5
 8009e7a:	d06c      	beq.n	8009f56 <ucdr_deserialize_endian_double+0x16e>
 8009e7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009e80:	716b      	strb	r3, [r5, #5]
 8009e82:	2e05      	cmp	r6, #5
 8009e84:	f105 0306 	add.w	r3, r5, #6
 8009e88:	d069      	beq.n	8009f5e <ucdr_deserialize_endian_double+0x176>
 8009e8a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e8e:	71ab      	strb	r3, [r5, #6]
 8009e90:	2e06      	cmp	r6, #6
 8009e92:	f105 0307 	add.w	r3, r5, #7
 8009e96:	d066      	beq.n	8009f66 <ucdr_deserialize_endian_double+0x17e>
 8009e98:	f898 3000 	ldrb.w	r3, [r8]
 8009e9c:	71eb      	strb	r3, [r5, #7]
 8009e9e:	6923      	ldr	r3, [r4, #16]
 8009ea0:	68a2      	ldr	r2, [r4, #8]
 8009ea2:	7da0      	ldrb	r0, [r4, #22]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	1b9e      	subs	r6, r3, r6
 8009ea8:	2308      	movs	r3, #8
 8009eaa:	4452      	add	r2, sl
 8009eac:	7563      	strb	r3, [r4, #21]
 8009eae:	6126      	str	r6, [r4, #16]
 8009eb0:	60a2      	str	r2, [r4, #8]
 8009eb2:	f080 0001 	eor.w	r0, r0, #1
 8009eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eba:	2108      	movs	r1, #8
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 f86d 	bl	8009f9c <ucdr_check_final_buffer_behavior>
 8009ec2:	b308      	cbz	r0, 8009f08 <ucdr_deserialize_endian_double+0x120>
 8009ec4:	2f01      	cmp	r7, #1
 8009ec6:	68a3      	ldr	r3, [r4, #8]
 8009ec8:	d023      	beq.n	8009f12 <ucdr_deserialize_endian_double+0x12a>
 8009eca:	79db      	ldrb	r3, [r3, #7]
 8009ecc:	702b      	strb	r3, [r5, #0]
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	799b      	ldrb	r3, [r3, #6]
 8009ed2:	706b      	strb	r3, [r5, #1]
 8009ed4:	68a3      	ldr	r3, [r4, #8]
 8009ed6:	795b      	ldrb	r3, [r3, #5]
 8009ed8:	70ab      	strb	r3, [r5, #2]
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	791b      	ldrb	r3, [r3, #4]
 8009ede:	70eb      	strb	r3, [r5, #3]
 8009ee0:	68a3      	ldr	r3, [r4, #8]
 8009ee2:	78db      	ldrb	r3, [r3, #3]
 8009ee4:	712b      	strb	r3, [r5, #4]
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	789b      	ldrb	r3, [r3, #2]
 8009eea:	716b      	strb	r3, [r5, #5]
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	71ab      	strb	r3, [r5, #6]
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	71eb      	strb	r3, [r5, #7]
 8009ef8:	68a2      	ldr	r2, [r4, #8]
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	3208      	adds	r2, #8
 8009efe:	3308      	adds	r3, #8
 8009f00:	2108      	movs	r1, #8
 8009f02:	60a2      	str	r2, [r4, #8]
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	7561      	strb	r1, [r4, #21]
 8009f08:	7da0      	ldrb	r0, [r4, #22]
 8009f0a:	f080 0001 	eor.w	r0, r0, #1
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	606b      	str	r3, [r5, #4]
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	e7ed      	b.n	8009ef8 <ucdr_deserialize_endian_double+0x110>
 8009f1c:	68a2      	ldr	r2, [r4, #8]
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	7da0      	ldrb	r0, [r4, #22]
 8009f22:	f884 9015 	strb.w	r9, [r4, #21]
 8009f26:	1b92      	subs	r2, r2, r6
 8009f28:	1b9e      	subs	r6, r3, r6
 8009f2a:	60a2      	str	r2, [r4, #8]
 8009f2c:	6126      	str	r6, [r4, #16]
 8009f2e:	f080 0001 	eor.w	r0, r0, #1
 8009f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	799b      	ldrb	r3, [r3, #6]
 8009f3a:	706b      	strb	r3, [r5, #1]
 8009f3c:	1cab      	adds	r3, r5, #2
 8009f3e:	68a2      	ldr	r2, [r4, #8]
 8009f40:	7952      	ldrb	r2, [r2, #5]
 8009f42:	f803 2b01 	strb.w	r2, [r3], #1
 8009f46:	68a2      	ldr	r2, [r4, #8]
 8009f48:	7912      	ldrb	r2, [r2, #4]
 8009f4a:	f803 2b01 	strb.w	r2, [r3], #1
 8009f4e:	68a2      	ldr	r2, [r4, #8]
 8009f50:	78d2      	ldrb	r2, [r2, #3]
 8009f52:	f803 2b01 	strb.w	r2, [r3], #1
 8009f56:	68a2      	ldr	r2, [r4, #8]
 8009f58:	7892      	ldrb	r2, [r2, #2]
 8009f5a:	f803 2b01 	strb.w	r2, [r3], #1
 8009f5e:	68a2      	ldr	r2, [r4, #8]
 8009f60:	7852      	ldrb	r2, [r2, #1]
 8009f62:	f803 2b01 	strb.w	r2, [r3], #1
 8009f66:	68a2      	ldr	r2, [r4, #8]
 8009f68:	7812      	ldrb	r2, [r2, #0]
 8009f6a:	701a      	strb	r2, [r3, #0]
 8009f6c:	e797      	b.n	8009e9e <ucdr_deserialize_endian_double+0xb6>
 8009f6e:	4641      	mov	r1, r8
 8009f70:	4632      	mov	r2, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	f00b fd03 	bl	801597e <memcpy>
 8009f78:	68a1      	ldr	r1, [r4, #8]
 8009f7a:	4652      	mov	r2, sl
 8009f7c:	19a8      	adds	r0, r5, r6
 8009f7e:	f00b fcfe 	bl	801597e <memcpy>
 8009f82:	e78c      	b.n	8009e9e <ucdr_deserialize_endian_double+0xb6>

08009f84 <ucdr_check_buffer_available_for>:
 8009f84:	7d83      	ldrb	r3, [r0, #22]
 8009f86:	b93b      	cbnz	r3, 8009f98 <ucdr_check_buffer_available_for+0x14>
 8009f88:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009f8c:	4419      	add	r1, r3
 8009f8e:	4288      	cmp	r0, r1
 8009f90:	bf34      	ite	cc
 8009f92:	2000      	movcc	r0, #0
 8009f94:	2001      	movcs	r0, #1
 8009f96:	4770      	bx	lr
 8009f98:	2000      	movs	r0, #0
 8009f9a:	4770      	bx	lr

08009f9c <ucdr_check_final_buffer_behavior>:
 8009f9c:	7d83      	ldrb	r3, [r0, #22]
 8009f9e:	b943      	cbnz	r3, 8009fb2 <ucdr_check_final_buffer_behavior+0x16>
 8009fa0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009fa4:	4291      	cmp	r1, r2
 8009fa6:	b510      	push	{r4, lr}
 8009fa8:	4604      	mov	r4, r0
 8009faa:	d205      	bcs.n	8009fb8 <ucdr_check_final_buffer_behavior+0x1c>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4618      	mov	r0, r3
 8009fb0:	bd10      	pop	{r4, pc}
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	4770      	bx	lr
 8009fb8:	6982      	ldr	r2, [r0, #24]
 8009fba:	b13a      	cbz	r2, 8009fcc <ucdr_check_final_buffer_behavior+0x30>
 8009fbc:	69c1      	ldr	r1, [r0, #28]
 8009fbe:	4790      	blx	r2
 8009fc0:	f080 0301 	eor.w	r3, r0, #1
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	75a0      	strb	r0, [r4, #22]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	bd10      	pop	{r4, pc}
 8009fcc:	2001      	movs	r0, #1
 8009fce:	75a0      	strb	r0, [r4, #22]
 8009fd0:	e7fa      	b.n	8009fc8 <ucdr_check_final_buffer_behavior+0x2c>
 8009fd2:	bf00      	nop

08009fd4 <ucdr_set_on_full_buffer_callback>:
 8009fd4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop

08009fdc <ucdr_init_buffer_origin_offset_endian>:
 8009fdc:	b430      	push	{r4, r5}
 8009fde:	9c02      	ldr	r4, [sp, #8]
 8009fe0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8009fe4:	6001      	str	r1, [r0, #0]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	60c3      	str	r3, [r0, #12]
 8009fea:	4421      	add	r1, r4
 8009fec:	441c      	add	r4, r3
 8009fee:	2300      	movs	r3, #0
 8009ff0:	6104      	str	r4, [r0, #16]
 8009ff2:	7505      	strb	r5, [r0, #20]
 8009ff4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009ff8:	bc30      	pop	{r4, r5}
 8009ffa:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8009ffe:	7543      	strb	r3, [r0, #21]
 800a000:	7583      	strb	r3, [r0, #22]
 800a002:	4770      	bx	lr

0800a004 <ucdr_init_buffer_origin_offset>:
 800a004:	b510      	push	{r4, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	9c04      	ldr	r4, [sp, #16]
 800a00a:	9400      	str	r4, [sp, #0]
 800a00c:	2401      	movs	r4, #1
 800a00e:	9401      	str	r4, [sp, #4]
 800a010:	f7ff ffe4 	bl	8009fdc <ucdr_init_buffer_origin_offset_endian>
 800a014:	b002      	add	sp, #8
 800a016:	bd10      	pop	{r4, pc}

0800a018 <ucdr_init_buffer_origin>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	2400      	movs	r4, #0
 800a01e:	9400      	str	r4, [sp, #0]
 800a020:	f7ff fff0 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800a024:	b002      	add	sp, #8
 800a026:	bd10      	pop	{r4, pc}

0800a028 <ucdr_init_buffer>:
 800a028:	2300      	movs	r3, #0
 800a02a:	f7ff bff5 	b.w	800a018 <ucdr_init_buffer_origin>
 800a02e:	bf00      	nop

0800a030 <ucdr_alignment>:
 800a030:	fbb0 f3f1 	udiv	r3, r0, r1
 800a034:	fb03 0011 	mls	r0, r3, r1, r0
 800a038:	1a08      	subs	r0, r1, r0
 800a03a:	3901      	subs	r1, #1
 800a03c:	4008      	ands	r0, r1
 800a03e:	4770      	bx	lr

0800a040 <ucdr_buffer_alignment>:
 800a040:	7d43      	ldrb	r3, [r0, #21]
 800a042:	428b      	cmp	r3, r1
 800a044:	d208      	bcs.n	800a058 <ucdr_buffer_alignment+0x18>
 800a046:	6903      	ldr	r3, [r0, #16]
 800a048:	fbb3 f0f1 	udiv	r0, r3, r1
 800a04c:	fb01 3010 	mls	r0, r1, r0, r3
 800a050:	1a08      	subs	r0, r1, r0
 800a052:	3901      	subs	r1, #1
 800a054:	4008      	ands	r0, r1
 800a056:	4770      	bx	lr
 800a058:	2000      	movs	r0, #0
 800a05a:	4770      	bx	lr

0800a05c <ucdr_align_to>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	4604      	mov	r4, r0
 800a060:	460e      	mov	r6, r1
 800a062:	f7ff ffed 	bl	800a040 <ucdr_buffer_alignment>
 800a066:	68a5      	ldr	r5, [r4, #8]
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	6922      	ldr	r2, [r4, #16]
 800a06c:	7566      	strb	r6, [r4, #21]
 800a06e:	4405      	add	r5, r0
 800a070:	42ab      	cmp	r3, r5
 800a072:	4410      	add	r0, r2
 800a074:	bf28      	it	cs
 800a076:	462b      	movcs	r3, r5
 800a078:	6120      	str	r0, [r4, #16]
 800a07a:	60a3      	str	r3, [r4, #8]
 800a07c:	bd70      	pop	{r4, r5, r6, pc}
 800a07e:	bf00      	nop

0800a080 <ucdr_buffer_length>:
 800a080:	6882      	ldr	r2, [r0, #8]
 800a082:	6800      	ldr	r0, [r0, #0]
 800a084:	1a10      	subs	r0, r2, r0
 800a086:	4770      	bx	lr

0800a088 <ucdr_buffer_remaining>:
 800a088:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800a08c:	1a10      	subs	r0, r2, r0
 800a08e:	4770      	bx	lr

0800a090 <ucdr_check_final_buffer_behavior_array>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	7d83      	ldrb	r3, [r0, #22]
 800a094:	b963      	cbnz	r3, 800a0b0 <ucdr_check_final_buffer_behavior_array+0x20>
 800a096:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	4604      	mov	r4, r0
 800a09e:	460d      	mov	r5, r1
 800a0a0:	d308      	bcc.n	800a0b4 <ucdr_check_final_buffer_behavior_array+0x24>
 800a0a2:	b139      	cbz	r1, 800a0b4 <ucdr_check_final_buffer_behavior_array+0x24>
 800a0a4:	6983      	ldr	r3, [r0, #24]
 800a0a6:	b163      	cbz	r3, 800a0c2 <ucdr_check_final_buffer_behavior_array+0x32>
 800a0a8:	69c1      	ldr	r1, [r0, #28]
 800a0aa:	4798      	blx	r3
 800a0ac:	75a0      	strb	r0, [r4, #22]
 800a0ae:	b108      	cbz	r0, 800a0b4 <ucdr_check_final_buffer_behavior_array+0x24>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f7ff ffe7 	bl	800a088 <ucdr_buffer_remaining>
 800a0ba:	42a8      	cmp	r0, r5
 800a0bc:	bf28      	it	cs
 800a0be:	4628      	movcs	r0, r5
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	7583      	strb	r3, [r0, #22]
 800a0c6:	e7f3      	b.n	800a0b0 <ucdr_check_final_buffer_behavior_array+0x20>

0800a0c8 <ucdr_advance_buffer>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	460d      	mov	r5, r1
 800a0ce:	f7ff ff59 	bl	8009f84 <ucdr_check_buffer_available_for>
 800a0d2:	b178      	cbz	r0, 800a0f4 <ucdr_advance_buffer+0x2c>
 800a0d4:	68a3      	ldr	r3, [r4, #8]
 800a0d6:	6921      	ldr	r1, [r4, #16]
 800a0d8:	442b      	add	r3, r5
 800a0da:	60a3      	str	r3, [r4, #8]
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4429      	add	r1, r5
 800a0e0:	7563      	strb	r3, [r4, #21]
 800a0e2:	6121      	str	r1, [r4, #16]
 800a0e4:	bd38      	pop	{r3, r4, r5, pc}
 800a0e6:	68a2      	ldr	r2, [r4, #8]
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	4402      	add	r2, r0
 800a0ec:	4403      	add	r3, r0
 800a0ee:	1a2d      	subs	r5, r5, r0
 800a0f0:	60a2      	str	r2, [r4, #8]
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f7ff ffc9 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d1f1      	bne.n	800a0e6 <ucdr_advance_buffer+0x1e>
 800a102:	2301      	movs	r3, #1
 800a104:	7563      	strb	r3, [r4, #21]
 800a106:	bd38      	pop	{r3, r4, r5, pc}

0800a108 <rcl_get_zero_initialized_init_options>:
 800a108:	2000      	movs	r0, #0
 800a10a:	4770      	bx	lr

0800a10c <rcl_init_options_init>:
 800a10c:	b084      	sub	sp, #16
 800a10e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a110:	b091      	sub	sp, #68	@ 0x44
 800a112:	af17      	add	r7, sp, #92	@ 0x5c
 800a114:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800a118:	2800      	cmp	r0, #0
 800a11a:	d044      	beq.n	800a1a6 <rcl_init_options_init+0x9a>
 800a11c:	6803      	ldr	r3, [r0, #0]
 800a11e:	4606      	mov	r6, r0
 800a120:	b133      	cbz	r3, 800a130 <rcl_init_options_init+0x24>
 800a122:	2464      	movs	r4, #100	@ 0x64
 800a124:	4620      	mov	r0, r4
 800a126:	b011      	add	sp, #68	@ 0x44
 800a128:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a12c:	b004      	add	sp, #16
 800a12e:	4770      	bx	lr
 800a130:	4638      	mov	r0, r7
 800a132:	f001 f8c3 	bl	800b2bc <rcutils_allocator_is_valid>
 800a136:	2800      	cmp	r0, #0
 800a138:	d035      	beq.n	800a1a6 <rcl_init_options_init+0x9a>
 800a13a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a13c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a13e:	2050      	movs	r0, #80	@ 0x50
 800a140:	4798      	blx	r3
 800a142:	4604      	mov	r4, r0
 800a144:	6030      	str	r0, [r6, #0]
 800a146:	2800      	cmp	r0, #0
 800a148:	d02f      	beq.n	800a1aa <rcl_init_options_init+0x9e>
 800a14a:	46bc      	mov	ip, r7
 800a14c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a150:	4625      	mov	r5, r4
 800a152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a154:	f8dc 3000 	ldr.w	r3, [ip]
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	a802      	add	r0, sp, #8
 800a15c:	ad02      	add	r5, sp, #8
 800a15e:	f001 fa69 	bl	800b634 <rmw_get_zero_initialized_init_options>
 800a162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a164:	3418      	adds	r4, #24
 800a166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a16a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a16c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a16e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a170:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a174:	6833      	ldr	r3, [r6, #0]
 800a176:	e884 0003 	stmia.w	r4, {r0, r1}
 800a17a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800a17e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a182:	f103 0018 	add.w	r0, r3, #24
 800a186:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a18a:	f001 fb1b 	bl	800b7c4 <rmw_init_options_init>
 800a18e:	4604      	mov	r4, r0
 800a190:	2800      	cmp	r0, #0
 800a192:	d0c7      	beq.n	800a124 <rcl_init_options_init+0x18>
 800a194:	6830      	ldr	r0, [r6, #0]
 800a196:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a198:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a19a:	4798      	blx	r3
 800a19c:	4620      	mov	r0, r4
 800a19e:	f006 fdc7 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	e7be      	b.n	800a124 <rcl_init_options_init+0x18>
 800a1a6:	240b      	movs	r4, #11
 800a1a8:	e7bc      	b.n	800a124 <rcl_init_options_init+0x18>
 800a1aa:	240a      	movs	r4, #10
 800a1ac:	e7ba      	b.n	800a124 <rcl_init_options_init+0x18>
 800a1ae:	bf00      	nop

0800a1b0 <rcl_init_options_fini>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	b1c0      	cbz	r0, 800a1e8 <rcl_init_options_fini+0x38>
 800a1b6:	6804      	ldr	r4, [r0, #0]
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	b1ac      	cbz	r4, 800a1e8 <rcl_init_options_fini+0x38>
 800a1bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1be:	ad01      	add	r5, sp, #4
 800a1c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	a801      	add	r0, sp, #4
 800a1c8:	f001 f878 	bl	800b2bc <rcutils_allocator_is_valid>
 800a1cc:	b160      	cbz	r0, 800a1e8 <rcl_init_options_fini+0x38>
 800a1ce:	6830      	ldr	r0, [r6, #0]
 800a1d0:	3018      	adds	r0, #24
 800a1d2:	f001 fb91 	bl	800b8f8 <rmw_init_options_fini>
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	b950      	cbnz	r0, 800a1f0 <rcl_init_options_fini+0x40>
 800a1da:	6830      	ldr	r0, [r6, #0]
 800a1dc:	9b02      	ldr	r3, [sp, #8]
 800a1de:	9905      	ldr	r1, [sp, #20]
 800a1e0:	4798      	blx	r3
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	b006      	add	sp, #24
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	240b      	movs	r4, #11
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b006      	add	sp, #24
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	f006 fd9e 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	e7f8      	b.n	800a1ea <rcl_init_options_fini+0x3a>

0800a1f8 <rcl_init_options_copy>:
 800a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fc:	b096      	sub	sp, #88	@ 0x58
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d063      	beq.n	800a2ca <rcl_init_options_copy+0xd2>
 800a202:	6806      	ldr	r6, [r0, #0]
 800a204:	4605      	mov	r5, r0
 800a206:	2e00      	cmp	r6, #0
 800a208:	d05f      	beq.n	800a2ca <rcl_init_options_copy+0xd2>
 800a20a:	460c      	mov	r4, r1
 800a20c:	2900      	cmp	r1, #0
 800a20e:	d05c      	beq.n	800a2ca <rcl_init_options_copy+0xd2>
 800a210:	680b      	ldr	r3, [r1, #0]
 800a212:	b123      	cbz	r3, 800a21e <rcl_init_options_copy+0x26>
 800a214:	2664      	movs	r6, #100	@ 0x64
 800a216:	4630      	mov	r0, r6
 800a218:	b016      	add	sp, #88	@ 0x58
 800a21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a220:	af11      	add	r7, sp, #68	@ 0x44
 800a222:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a224:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800a228:	6833      	ldr	r3, [r6, #0]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4640      	mov	r0, r8
 800a22e:	f001 f845 	bl	800b2bc <rcutils_allocator_is_valid>
 800a232:	2800      	cmp	r0, #0
 800a234:	d049      	beq.n	800a2ca <rcl_init_options_copy+0xd2>
 800a236:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a238:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800a23a:	2050      	movs	r0, #80	@ 0x50
 800a23c:	4798      	blx	r3
 800a23e:	4606      	mov	r6, r0
 800a240:	6020      	str	r0, [r4, #0]
 800a242:	2800      	cmp	r0, #0
 800a244:	d077      	beq.n	800a336 <rcl_init_options_copy+0x13e>
 800a246:	46c4      	mov	ip, r8
 800a248:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a24c:	4637      	mov	r7, r6
 800a24e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a250:	f8dc 3000 	ldr.w	r3, [ip]
 800a254:	603b      	str	r3, [r7, #0]
 800a256:	a802      	add	r0, sp, #8
 800a258:	af02      	add	r7, sp, #8
 800a25a:	f001 f9eb 	bl	800b634 <rmw_get_zero_initialized_init_options>
 800a25e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a260:	3618      	adds	r6, #24
 800a262:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a264:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a266:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a268:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a26a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a26c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a270:	ab16      	add	r3, sp, #88	@ 0x58
 800a272:	e886 0003 	stmia.w	r6, {r0, r1}
 800a276:	e913 0003 	ldmdb	r3, {r0, r1}
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a280:	f103 0018 	add.w	r0, r3, #24
 800a284:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800a288:	f001 fa9c 	bl	800b7c4 <rmw_init_options_init>
 800a28c:	4606      	mov	r6, r0
 800a28e:	bb08      	cbnz	r0, 800a2d4 <rcl_init_options_copy+0xdc>
 800a290:	682f      	ldr	r7, [r5, #0]
 800a292:	f8d4 c000 	ldr.w	ip, [r4]
 800a296:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a298:	4666      	mov	r6, ip
 800a29a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6033      	str	r3, [r6, #0]
 800a2a0:	f10c 0018 	add.w	r0, ip, #24
 800a2a4:	f001 fb28 	bl	800b8f8 <rmw_init_options_fini>
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	b1f0      	cbz	r0, 800a2ea <rcl_init_options_copy+0xf2>
 800a2ac:	f001 f814 	bl	800b2d8 <rcutils_get_error_string>
 800a2b0:	f001 f828 	bl	800b304 <rcutils_reset_error>
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f7ff ff7b 	bl	800a1b0 <rcl_init_options_fini>
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d1aa      	bne.n	800a216 <rcl_init_options_copy+0x1e>
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	f006 fd35 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	e7a5      	b.n	800a216 <rcl_init_options_copy+0x1e>
 800a2ca:	260b      	movs	r6, #11
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	b016      	add	sp, #88	@ 0x58
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a2d6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	4798      	blx	r3
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f006 fd27 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d0d3      	beq.n	800a290 <rcl_init_options_copy+0x98>
 800a2e8:	e795      	b.n	800a216 <rcl_init_options_copy+0x1e>
 800a2ea:	a802      	add	r0, sp, #8
 800a2ec:	ae02      	add	r6, sp, #8
 800a2ee:	6827      	ldr	r7, [r4, #0]
 800a2f0:	f001 f9a0 	bl	800b634 <rmw_get_zero_initialized_init_options>
 800a2f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a2fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a2fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a2fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a300:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a302:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a306:	682a      	ldr	r2, [r5, #0]
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	e887 0003 	stmia.w	r7, {r0, r1}
 800a30e:	f102 0018 	add.w	r0, r2, #24
 800a312:	f103 0118 	add.w	r1, r3, #24
 800a316:	f001 faad 	bl	800b874 <rmw_init_options_copy>
 800a31a:	4606      	mov	r6, r0
 800a31c:	2800      	cmp	r0, #0
 800a31e:	f43f af7a 	beq.w	800a216 <rcl_init_options_copy+0x1e>
 800a322:	f000 ffd9 	bl	800b2d8 <rcutils_get_error_string>
 800a326:	f000 ffed 	bl	800b304 <rcutils_reset_error>
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7ff ff40 	bl	800a1b0 <rcl_init_options_fini>
 800a330:	b118      	cbz	r0, 800a33a <rcl_init_options_copy+0x142>
 800a332:	4606      	mov	r6, r0
 800a334:	e76f      	b.n	800a216 <rcl_init_options_copy+0x1e>
 800a336:	260a      	movs	r6, #10
 800a338:	e76d      	b.n	800a216 <rcl_init_options_copy+0x1e>
 800a33a:	4630      	mov	r0, r6
 800a33c:	f006 fcf8 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 800a340:	4606      	mov	r6, r0
 800a342:	e768      	b.n	800a216 <rcl_init_options_copy+0x1e>

0800a344 <rcl_node_get_default_options>:
 800a344:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a346:	b087      	sub	sp, #28
 800a348:	4607      	mov	r7, r0
 800a34a:	466d      	mov	r5, sp
 800a34c:	4668      	mov	r0, sp
 800a34e:	f000 ffa7 	bl	800b2a0 <rcutils_get_default_allocator>
 800a352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a354:	4c08      	ldr	r4, [pc, #32]	@ (800a378 <rcl_node_get_default_options+0x34>)
 800a356:	f8d5 c000 	ldr.w	ip, [r5]
 800a35a:	1d26      	adds	r6, r4, #4
 800a35c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a35e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a360:	463d      	mov	r5, r7
 800a362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a364:	f8c6 c000 	str.w	ip, [r6]
 800a368:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a36c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a370:	4638      	mov	r0, r7
 800a372:	b007      	add	sp, #28
 800a374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a376:	bf00      	nop
 800a378:	20000064 	.word	0x20000064

0800a37c <rcl_node_options_copy>:
 800a37c:	b1c8      	cbz	r0, 800a3b2 <rcl_node_options_copy+0x36>
 800a37e:	b4f0      	push	{r4, r5, r6, r7}
 800a380:	460f      	mov	r7, r1
 800a382:	b199      	cbz	r1, 800a3ac <rcl_node_options_copy+0x30>
 800a384:	4288      	cmp	r0, r1
 800a386:	4606      	mov	r6, r0
 800a388:	d010      	beq.n	800a3ac <rcl_node_options_copy+0x30>
 800a38a:	4605      	mov	r5, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a392:	f844 3b04 	str.w	r3, [r4], #4
 800a396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a39a:	7e32      	ldrb	r2, [r6, #24]
 800a39c:	6829      	ldr	r1, [r5, #0]
 800a39e:	7e73      	ldrb	r3, [r6, #25]
 800a3a0:	6021      	str	r1, [r4, #0]
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	763a      	strb	r2, [r7, #24]
 800a3a6:	767b      	strb	r3, [r7, #25]
 800a3a8:	bcf0      	pop	{r4, r5, r6, r7}
 800a3aa:	4770      	bx	lr
 800a3ac:	200b      	movs	r0, #11
 800a3ae:	bcf0      	pop	{r4, r5, r6, r7}
 800a3b0:	4770      	bx	lr
 800a3b2:	200b      	movs	r0, #11
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop

0800a3b8 <rcl_get_zero_initialized_publisher>:
 800a3b8:	4b01      	ldr	r3, [pc, #4]	@ (800a3c0 <rcl_get_zero_initialized_publisher+0x8>)
 800a3ba:	6818      	ldr	r0, [r3, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	08016918 	.word	0x08016918

0800a3c4 <rcl_publisher_init>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	b091      	sub	sp, #68	@ 0x44
 800a3ca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800a3cc:	b3d7      	cbz	r7, 800a444 <rcl_publisher_init+0x80>
 800a3ce:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4648      	mov	r0, r9
 800a3d6:	4688      	mov	r8, r1
 800a3d8:	4616      	mov	r6, r2
 800a3da:	461d      	mov	r5, r3
 800a3dc:	f000 ff6e 	bl	800b2bc <rcutils_allocator_is_valid>
 800a3e0:	b380      	cbz	r0, 800a444 <rcl_publisher_init+0x80>
 800a3e2:	b37c      	cbz	r4, 800a444 <rcl_publisher_init+0x80>
 800a3e4:	f8d4 a000 	ldr.w	sl, [r4]
 800a3e8:	f1ba 0f00 	cmp.w	sl, #0
 800a3ec:	d004      	beq.n	800a3f8 <rcl_publisher_init+0x34>
 800a3ee:	2564      	movs	r5, #100	@ 0x64
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	b011      	add	sp, #68	@ 0x44
 800a3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	f007 f933 	bl	8011664 <rcl_node_is_valid>
 800a3fe:	b330      	cbz	r0, 800a44e <rcl_publisher_init+0x8a>
 800a400:	b306      	cbz	r6, 800a444 <rcl_publisher_init+0x80>
 800a402:	b1fd      	cbz	r5, 800a444 <rcl_publisher_init+0x80>
 800a404:	46ce      	mov	lr, r9
 800a406:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a40a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800a40e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a412:	f8de 3000 	ldr.w	r3, [lr]
 800a416:	f8cc 3000 	str.w	r3, [ip]
 800a41a:	f000 ff8b 	bl	800b334 <rcutils_get_zero_initialized_string_map>
 800a41e:	ab10      	add	r3, sp, #64	@ 0x40
 800a420:	4684      	mov	ip, r0
 800a422:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a426:	f8cd c020 	str.w	ip, [sp, #32]
 800a42a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a42e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800a432:	4651      	mov	r1, sl
 800a434:	a808      	add	r0, sp, #32
 800a436:	f000 fff7 	bl	800b428 <rcutils_string_map_init>
 800a43a:	b150      	cbz	r0, 800a452 <rcl_publisher_init+0x8e>
 800a43c:	280a      	cmp	r0, #10
 800a43e:	d013      	beq.n	800a468 <rcl_publisher_init+0xa4>
 800a440:	2501      	movs	r5, #1
 800a442:	e7d5      	b.n	800a3f0 <rcl_publisher_init+0x2c>
 800a444:	250b      	movs	r5, #11
 800a446:	4628      	mov	r0, r5
 800a448:	b011      	add	sp, #68	@ 0x44
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	25c8      	movs	r5, #200	@ 0xc8
 800a450:	e7ce      	b.n	800a3f0 <rcl_publisher_init+0x2c>
 800a452:	a808      	add	r0, sp, #32
 800a454:	f006 fe5a 	bl	801110c <rcl_get_default_topic_name_substitutions>
 800a458:	4682      	mov	sl, r0
 800a45a:	b138      	cbz	r0, 800a46c <rcl_publisher_init+0xa8>
 800a45c:	a808      	add	r0, sp, #32
 800a45e:	f001 f823 	bl	800b4a8 <rcutils_string_map_fini>
 800a462:	f1ba 0f0a 	cmp.w	sl, #10
 800a466:	d1eb      	bne.n	800a440 <rcl_publisher_init+0x7c>
 800a468:	250a      	movs	r5, #10
 800a46a:	e7c1      	b.n	800a3f0 <rcl_publisher_init+0x2c>
 800a46c:	4640      	mov	r0, r8
 800a46e:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800a472:	f007 f901 	bl	8011678 <rcl_node_get_name>
 800a476:	4682      	mov	sl, r0
 800a478:	4640      	mov	r0, r8
 800a47a:	f007 f905 	bl	8011688 <rcl_node_get_namespace>
 800a47e:	4686      	mov	lr, r0
 800a480:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a484:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800a488:	46ec      	mov	ip, sp
 800a48a:	f8cd b014 	str.w	fp, [sp, #20]
 800a48e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a492:	f8d9 3000 	ldr.w	r3, [r9]
 800a496:	f8cc 3000 	str.w	r3, [ip]
 800a49a:	4628      	mov	r0, r5
 800a49c:	4651      	mov	r1, sl
 800a49e:	4672      	mov	r2, lr
 800a4a0:	ab08      	add	r3, sp, #32
 800a4a2:	f006 fccd 	bl	8010e40 <rcl_expand_topic_name>
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	a808      	add	r0, sp, #32
 800a4aa:	f000 fffd 	bl	800b4a8 <rcutils_string_map_fini>
 800a4ae:	b920      	cbnz	r0, 800a4ba <rcl_publisher_init+0xf6>
 800a4b0:	b15d      	cbz	r5, 800a4ca <rcl_publisher_init+0x106>
 800a4b2:	2d67      	cmp	r5, #103	@ 0x67
 800a4b4:	d002      	beq.n	800a4bc <rcl_publisher_init+0xf8>
 800a4b6:	2d69      	cmp	r5, #105	@ 0x69
 800a4b8:	d05f      	beq.n	800a57a <rcl_publisher_init+0x1b6>
 800a4ba:	2501      	movs	r5, #1
 800a4bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d096      	beq.n	800a3f0 <rcl_publisher_init+0x2c>
 800a4c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a4c6:	4798      	blx	r3
 800a4c8:	e792      	b.n	800a3f0 <rcl_publisher_init+0x2c>
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	f007 f8e4 	bl	8011698 <rcl_node_get_options>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d0f2      	beq.n	800a4ba <rcl_publisher_init+0xf6>
 800a4d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d6:	f7f5 fead 	bl	8000234 <strlen>
 800a4da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a4de:	3001      	adds	r0, #1
 800a4e0:	4798      	blx	r3
 800a4e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4e4:	9107      	str	r1, [sp, #28]
 800a4e6:	4681      	mov	r9, r0
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	f7f5 fea3 	bl	8000234 <strlen>
 800a4ee:	9907      	ldr	r1, [sp, #28]
 800a4f0:	1c42      	adds	r2, r0, #1
 800a4f2:	4648      	mov	r0, r9
 800a4f4:	f00b fa43 	bl	801597e <memcpy>
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	4648      	mov	r0, r9
 800a4fc:	a90a      	add	r1, sp, #40	@ 0x28
 800a4fe:	f001 f8c5 	bl	800b68c <rmw_validate_full_topic_name>
 800a502:	2800      	cmp	r0, #0
 800a504:	d137      	bne.n	800a576 <rcl_publisher_init+0x1b2>
 800a506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d138      	bne.n	800a57e <rcl_publisher_init+0x1ba>
 800a50c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a50e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a510:	20c0      	movs	r0, #192	@ 0xc0
 800a512:	4798      	blx	r3
 800a514:	6020      	str	r0, [r4, #0]
 800a516:	b3a0      	cbz	r0, 800a582 <rcl_publisher_init+0x1be>
 800a518:	4640      	mov	r0, r8
 800a51a:	f007 f8c5 	bl	80116a8 <rcl_node_get_rmw_handle>
 800a51e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4631      	mov	r1, r6
 800a526:	463b      	mov	r3, r7
 800a528:	464a      	mov	r2, r9
 800a52a:	6825      	ldr	r5, [r4, #0]
 800a52c:	f001 fd06 	bl	800bf3c <rmw_create_publisher>
 800a530:	6821      	ldr	r1, [r4, #0]
 800a532:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 800a536:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 800a53a:	b388      	cbz	r0, 800a5a0 <rcl_publisher_init+0x1dc>
 800a53c:	3168      	adds	r1, #104	@ 0x68
 800a53e:	f001 fdd7 	bl	800c0f0 <rmw_publisher_get_actual_qos>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	4605      	mov	r5, r0
 800a546:	b9f0      	cbnz	r0, 800a586 <rcl_publisher_init+0x1c2>
 800a548:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800a54c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800a550:	4618      	mov	r0, r3
 800a552:	2268      	movs	r2, #104	@ 0x68
 800a554:	4639      	mov	r1, r7
 800a556:	f00b fa12 	bl	801597e <memcpy>
 800a55a:	f8d8 2000 	ldr.w	r2, [r8]
 800a55e:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 800a562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a564:	b110      	cbz	r0, 800a56c <rcl_publisher_init+0x1a8>
 800a566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a568:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a56a:	4798      	blx	r3
 800a56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a56e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a570:	4648      	mov	r0, r9
 800a572:	4798      	blx	r3
 800a574:	e73c      	b.n	800a3f0 <rcl_publisher_init+0x2c>
 800a576:	2501      	movs	r5, #1
 800a578:	e7f3      	b.n	800a562 <rcl_publisher_init+0x19e>
 800a57a:	2567      	movs	r5, #103	@ 0x67
 800a57c:	e79e      	b.n	800a4bc <rcl_publisher_init+0xf8>
 800a57e:	2567      	movs	r5, #103	@ 0x67
 800a580:	e7ef      	b.n	800a562 <rcl_publisher_init+0x19e>
 800a582:	250a      	movs	r5, #10
 800a584:	e7ed      	b.n	800a562 <rcl_publisher_init+0x19e>
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0f5      	beq.n	800a576 <rcl_publisher_init+0x1b2>
 800a58a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a58e:	b13b      	cbz	r3, 800a5a0 <rcl_publisher_init+0x1dc>
 800a590:	4640      	mov	r0, r8
 800a592:	f007 f889 	bl	80116a8 <rcl_node_get_rmw_handle>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 800a59c:	f001 fdb6 	bl	800c10c <rmw_destroy_publisher>
 800a5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	4798      	blx	r3
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	2501      	movs	r5, #1
 800a5ae:	e7d8      	b.n	800a562 <rcl_publisher_init+0x19e>

0800a5b0 <rcl_publisher_get_default_options>:
 800a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b2:	4f0e      	ldr	r7, [pc, #56]	@ (800a5ec <rcl_publisher_get_default_options+0x3c>)
 800a5b4:	490e      	ldr	r1, [pc, #56]	@ (800a5f0 <rcl_publisher_get_default_options+0x40>)
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	2250      	movs	r2, #80	@ 0x50
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f00b f9de 	bl	801597e <memcpy>
 800a5c2:	466c      	mov	r4, sp
 800a5c4:	4668      	mov	r0, sp
 800a5c6:	f000 fe6b 	bl	800b2a0 <rcutils_get_default_allocator>
 800a5ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a5cc:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800a5d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	f001 f83d 	bl	800b654 <rmw_get_default_publisher_options>
 800a5da:	4639      	mov	r1, r7
 800a5dc:	6678      	str	r0, [r7, #100]	@ 0x64
 800a5de:	2268      	movs	r2, #104	@ 0x68
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f00b f9cc 	bl	801597e <memcpy>
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	b007      	add	sp, #28
 800a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ec:	2000d9c8 	.word	0x2000d9c8
 800a5f0:	08016920 	.word	0x08016920

0800a5f4 <rcl_publish>:
 800a5f4:	b1f8      	cbz	r0, 800a636 <rcl_publish+0x42>
 800a5f6:	6803      	ldr	r3, [r0, #0]
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	b1b3      	cbz	r3, 800a62c <rcl_publish+0x38>
 800a5fe:	4616      	mov	r6, r2
 800a600:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800a604:	b192      	cbz	r2, 800a62c <rcl_publish+0x38>
 800a606:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800a60a:	460d      	mov	r5, r1
 800a60c:	f006 fbae 	bl	8010d6c <rcl_context_is_valid>
 800a610:	b160      	cbz	r0, 800a62c <rcl_publish+0x38>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800a618:	b140      	cbz	r0, 800a62c <rcl_publish+0x38>
 800a61a:	b155      	cbz	r5, 800a632 <rcl_publish+0x3e>
 800a61c:	4632      	mov	r2, r6
 800a61e:	4629      	mov	r1, r5
 800a620:	f001 fc2c 	bl	800be7c <rmw_publish>
 800a624:	3800      	subs	r0, #0
 800a626:	bf18      	it	ne
 800a628:	2001      	movne	r0, #1
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a630:	bd70      	pop	{r4, r5, r6, pc}
 800a632:	200b      	movs	r0, #11
 800a634:	bd70      	pop	{r4, r5, r6, pc}
 800a636:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a63a:	4770      	bx	lr

0800a63c <rcl_get_zero_initialized_subscription>:
 800a63c:	4b01      	ldr	r3, [pc, #4]	@ (800a644 <rcl_get_zero_initialized_subscription+0x8>)
 800a63e:	6818      	ldr	r0, [r3, #0]
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	08016970 	.word	0x08016970

0800a648 <rcl_subscription_init>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	b091      	sub	sp, #68	@ 0x44
 800a64e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800a650:	b1d7      	cbz	r7, 800a688 <rcl_subscription_init+0x40>
 800a652:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800a656:	4604      	mov	r4, r0
 800a658:	4648      	mov	r0, r9
 800a65a:	4688      	mov	r8, r1
 800a65c:	4616      	mov	r6, r2
 800a65e:	461d      	mov	r5, r3
 800a660:	f000 fe2c 	bl	800b2bc <rcutils_allocator_is_valid>
 800a664:	b180      	cbz	r0, 800a688 <rcl_subscription_init+0x40>
 800a666:	b17c      	cbz	r4, 800a688 <rcl_subscription_init+0x40>
 800a668:	4640      	mov	r0, r8
 800a66a:	f006 fffb 	bl	8011664 <rcl_node_is_valid>
 800a66e:	b380      	cbz	r0, 800a6d2 <rcl_subscription_init+0x8a>
 800a670:	b156      	cbz	r6, 800a688 <rcl_subscription_init+0x40>
 800a672:	b14d      	cbz	r5, 800a688 <rcl_subscription_init+0x40>
 800a674:	f8d4 a000 	ldr.w	sl, [r4]
 800a678:	f1ba 0f00 	cmp.w	sl, #0
 800a67c:	d009      	beq.n	800a692 <rcl_subscription_init+0x4a>
 800a67e:	2564      	movs	r5, #100	@ 0x64
 800a680:	4628      	mov	r0, r5
 800a682:	b011      	add	sp, #68	@ 0x44
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	250b      	movs	r5, #11
 800a68a:	4628      	mov	r0, r5
 800a68c:	b011      	add	sp, #68	@ 0x44
 800a68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a692:	46ce      	mov	lr, r9
 800a694:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a698:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800a69c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6a0:	f8de 3000 	ldr.w	r3, [lr]
 800a6a4:	f8cc 3000 	str.w	r3, [ip]
 800a6a8:	f000 fe44 	bl	800b334 <rcutils_get_zero_initialized_string_map>
 800a6ac:	ab10      	add	r3, sp, #64	@ 0x40
 800a6ae:	4684      	mov	ip, r0
 800a6b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a6b4:	f8cd c020 	str.w	ip, [sp, #32]
 800a6b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a6bc:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800a6c0:	4651      	mov	r1, sl
 800a6c2:	a808      	add	r0, sp, #32
 800a6c4:	f000 feb0 	bl	800b428 <rcutils_string_map_init>
 800a6c8:	b140      	cbz	r0, 800a6dc <rcl_subscription_init+0x94>
 800a6ca:	280a      	cmp	r0, #10
 800a6cc:	d011      	beq.n	800a6f2 <rcl_subscription_init+0xaa>
 800a6ce:	2501      	movs	r5, #1
 800a6d0:	e7db      	b.n	800a68a <rcl_subscription_init+0x42>
 800a6d2:	25c8      	movs	r5, #200	@ 0xc8
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	b011      	add	sp, #68	@ 0x44
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	a808      	add	r0, sp, #32
 800a6de:	f006 fd15 	bl	801110c <rcl_get_default_topic_name_substitutions>
 800a6e2:	4682      	mov	sl, r0
 800a6e4:	b138      	cbz	r0, 800a6f6 <rcl_subscription_init+0xae>
 800a6e6:	a808      	add	r0, sp, #32
 800a6e8:	f000 fede 	bl	800b4a8 <rcutils_string_map_fini>
 800a6ec:	f1ba 0f0a 	cmp.w	sl, #10
 800a6f0:	d1ed      	bne.n	800a6ce <rcl_subscription_init+0x86>
 800a6f2:	250a      	movs	r5, #10
 800a6f4:	e7c9      	b.n	800a68a <rcl_subscription_init+0x42>
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800a6fc:	f006 ffbc 	bl	8011678 <rcl_node_get_name>
 800a700:	4682      	mov	sl, r0
 800a702:	4640      	mov	r0, r8
 800a704:	f006 ffc0 	bl	8011688 <rcl_node_get_namespace>
 800a708:	4686      	mov	lr, r0
 800a70a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a70e:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800a712:	46ec      	mov	ip, sp
 800a714:	f8cd b014 	str.w	fp, [sp, #20]
 800a718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a71c:	f8d9 3000 	ldr.w	r3, [r9]
 800a720:	f8cc 3000 	str.w	r3, [ip]
 800a724:	4628      	mov	r0, r5
 800a726:	4651      	mov	r1, sl
 800a728:	4672      	mov	r2, lr
 800a72a:	ab08      	add	r3, sp, #32
 800a72c:	f006 fb88 	bl	8010e40 <rcl_expand_topic_name>
 800a730:	4605      	mov	r5, r0
 800a732:	a808      	add	r0, sp, #32
 800a734:	f000 feb8 	bl	800b4a8 <rcutils_string_map_fini>
 800a738:	b920      	cbnz	r0, 800a744 <rcl_subscription_init+0xfc>
 800a73a:	b15d      	cbz	r5, 800a754 <rcl_subscription_init+0x10c>
 800a73c:	2d67      	cmp	r5, #103	@ 0x67
 800a73e:	d002      	beq.n	800a746 <rcl_subscription_init+0xfe>
 800a740:	2d69      	cmp	r5, #105	@ 0x69
 800a742:	d05a      	beq.n	800a7fa <rcl_subscription_init+0x1b2>
 800a744:	2501      	movs	r5, #1
 800a746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a748:	2800      	cmp	r0, #0
 800a74a:	d09e      	beq.n	800a68a <rcl_subscription_init+0x42>
 800a74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a74e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a750:	4798      	blx	r3
 800a752:	e79a      	b.n	800a68a <rcl_subscription_init+0x42>
 800a754:	4640      	mov	r0, r8
 800a756:	f006 ff9f 	bl	8011698 <rcl_node_get_options>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0f2      	beq.n	800a744 <rcl_subscription_init+0xfc>
 800a75e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a760:	f7f5 fd68 	bl	8000234 <strlen>
 800a764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a766:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a768:	3001      	adds	r0, #1
 800a76a:	4798      	blx	r3
 800a76c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a76e:	9107      	str	r1, [sp, #28]
 800a770:	4681      	mov	r9, r0
 800a772:	4608      	mov	r0, r1
 800a774:	f7f5 fd5e 	bl	8000234 <strlen>
 800a778:	9907      	ldr	r1, [sp, #28]
 800a77a:	1c42      	adds	r2, r0, #1
 800a77c:	4648      	mov	r0, r9
 800a77e:	f00b f8fe 	bl	801597e <memcpy>
 800a782:	462a      	mov	r2, r5
 800a784:	4648      	mov	r0, r9
 800a786:	a90a      	add	r1, sp, #40	@ 0x28
 800a788:	f000 ff80 	bl	800b68c <rmw_validate_full_topic_name>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d132      	bne.n	800a7f6 <rcl_subscription_init+0x1ae>
 800a790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d133      	bne.n	800a7fe <rcl_subscription_init+0x1b6>
 800a796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a798:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a79a:	20c8      	movs	r0, #200	@ 0xc8
 800a79c:	4798      	blx	r3
 800a79e:	6020      	str	r0, [r4, #0]
 800a7a0:	b378      	cbz	r0, 800a802 <rcl_subscription_init+0x1ba>
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	f006 ff80 	bl	80116a8 <rcl_node_get_rmw_handle>
 800a7a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	464a      	mov	r2, r9
 800a7b4:	6825      	ldr	r5, [r4, #0]
 800a7b6:	f001 fd3d 	bl	800c234 <rmw_create_subscription>
 800a7ba:	6821      	ldr	r1, [r4, #0]
 800a7bc:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 800a7c0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 800a7c4:	b368      	cbz	r0, 800a822 <rcl_subscription_init+0x1da>
 800a7c6:	3170      	adds	r1, #112	@ 0x70
 800a7c8:	f001 fe10 	bl	800c3ec <rmw_subscription_get_actual_qos>
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	b9d0      	cbnz	r0, 800a806 <rcl_subscription_init+0x1be>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800a7d6:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800a7da:	2270      	movs	r2, #112	@ 0x70
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f00b f8ce 	bl	801597e <memcpy>
 800a7e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7e4:	b110      	cbz	r0, 800a7ec <rcl_subscription_init+0x1a4>
 800a7e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7e8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a7ea:	4798      	blx	r3
 800a7ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a7f0:	4648      	mov	r0, r9
 800a7f2:	4798      	blx	r3
 800a7f4:	e749      	b.n	800a68a <rcl_subscription_init+0x42>
 800a7f6:	2501      	movs	r5, #1
 800a7f8:	e7f3      	b.n	800a7e2 <rcl_subscription_init+0x19a>
 800a7fa:	2567      	movs	r5, #103	@ 0x67
 800a7fc:	e7a3      	b.n	800a746 <rcl_subscription_init+0xfe>
 800a7fe:	2567      	movs	r5, #103	@ 0x67
 800a800:	e7ef      	b.n	800a7e2 <rcl_subscription_init+0x19a>
 800a802:	250a      	movs	r5, #10
 800a804:	e7ed      	b.n	800a7e2 <rcl_subscription_init+0x19a>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0f4      	beq.n	800a7f6 <rcl_subscription_init+0x1ae>
 800a80c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a810:	b13b      	cbz	r3, 800a822 <rcl_subscription_init+0x1da>
 800a812:	4640      	mov	r0, r8
 800a814:	f006 ff48 	bl	80116a8 <rcl_node_get_rmw_handle>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a81e:	f001 fdf3 	bl	800c408 <rmw_destroy_subscription>
 800a822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a824:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800a826:	6820      	ldr	r0, [r4, #0]
 800a828:	4798      	blx	r3
 800a82a:	2300      	movs	r3, #0
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	2501      	movs	r5, #1
 800a830:	e7d7      	b.n	800a7e2 <rcl_subscription_init+0x19a>
 800a832:	bf00      	nop

0800a834 <rcl_subscription_get_default_options>:
 800a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a838:	4f12      	ldr	r7, [pc, #72]	@ (800a884 <rcl_subscription_get_default_options+0x50>)
 800a83a:	4913      	ldr	r1, [pc, #76]	@ (800a888 <rcl_subscription_get_default_options+0x54>)
 800a83c:	b088      	sub	sp, #32
 800a83e:	4606      	mov	r6, r0
 800a840:	2250      	movs	r2, #80	@ 0x50
 800a842:	4638      	mov	r0, r7
 800a844:	f00b f89b 	bl	801597e <memcpy>
 800a848:	ac02      	add	r4, sp, #8
 800a84a:	a802      	add	r0, sp, #8
 800a84c:	f000 fd28 	bl	800b2a0 <rcutils_get_default_allocator>
 800a850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a852:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800a856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a858:	46e8      	mov	r8, sp
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	4640      	mov	r0, r8
 800a860:	f000 fefe 	bl	800b660 <rmw_get_default_subscription_options>
 800a864:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a868:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a86c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a870:	2270      	movs	r2, #112	@ 0x70
 800a872:	4639      	mov	r1, r7
 800a874:	4630      	mov	r0, r6
 800a876:	f00b f882 	bl	801597e <memcpy>
 800a87a:	4630      	mov	r0, r6
 800a87c:	b008      	add	sp, #32
 800a87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a882:	bf00      	nop
 800a884:	2000da30 	.word	0x2000da30
 800a888:	08016978 	.word	0x08016978

0800a88c <rcl_take>:
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d03f      	beq.n	800a910 <rcl_take+0x84>
 800a890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a894:	4617      	mov	r7, r2
 800a896:	6802      	ldr	r2, [r0, #0]
 800a898:	b09d      	sub	sp, #116	@ 0x74
 800a89a:	4606      	mov	r6, r0
 800a89c:	b382      	cbz	r2, 800a900 <rcl_take+0x74>
 800a89e:	4699      	mov	r9, r3
 800a8a0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800a8a4:	b363      	cbz	r3, 800a900 <rcl_take+0x74>
 800a8a6:	4688      	mov	r8, r1
 800a8a8:	b381      	cbz	r1, 800a90c <rcl_take+0x80>
 800a8aa:	2f00      	cmp	r7, #0
 800a8ac:	d034      	beq.n	800a918 <rcl_take+0x8c>
 800a8ae:	a802      	add	r0, sp, #8
 800a8b0:	ac02      	add	r4, sp, #8
 800a8b2:	f000 fed9 	bl	800b668 <rmw_get_zero_initialized_message_info>
 800a8b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8b8:	463d      	mov	r5, r7
 800a8ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a8be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a8c4:	6834      	ldr	r4, [r6, #0]
 800a8c6:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 800a8ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a8ce:	2400      	movs	r4, #0
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f8cd 9000 	str.w	r9, [sp]
 800a8d8:	4641      	mov	r1, r8
 800a8da:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 800a8de:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 800a8e2:	f001 fdef 	bl	800c4c4 <rmw_take_with_info>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	b9c0      	cbnz	r0, 800a91c <rcl_take+0x90>
 800a8ea:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 800a8ee:	f240 1291 	movw	r2, #401	@ 0x191
 800a8f2:	2900      	cmp	r1, #0
 800a8f4:	bf08      	it	eq
 800a8f6:	4613      	moveq	r3, r2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	b01d      	add	sp, #116	@ 0x74
 800a8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a900:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a904:	4618      	mov	r0, r3
 800a906:	b01d      	add	sp, #116	@ 0x74
 800a908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a90c:	230b      	movs	r3, #11
 800a90e:	e7f3      	b.n	800a8f8 <rcl_take+0x6c>
 800a910:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800a914:	4618      	mov	r0, r3
 800a916:	4770      	bx	lr
 800a918:	af10      	add	r7, sp, #64	@ 0x40
 800a91a:	e7c8      	b.n	800a8ae <rcl_take+0x22>
 800a91c:	f006 fa08 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 800a920:	4603      	mov	r3, r0
 800a922:	e7e9      	b.n	800a8f8 <rcl_take+0x6c>

0800a924 <rcl_subscription_get_rmw_handle>:
 800a924:	b118      	cbz	r0, 800a92e <rcl_subscription_get_rmw_handle+0xa>
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	b108      	cbz	r0, 800a92e <rcl_subscription_get_rmw_handle+0xa>
 800a92a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800a92e:	4770      	bx	lr

0800a930 <_rclc_check_for_new_data>:
 800a930:	b1e0      	cbz	r0, 800a96c <_rclc_check_for_new_data+0x3c>
 800a932:	7803      	ldrb	r3, [r0, #0]
 800a934:	2b08      	cmp	r3, #8
 800a936:	d81b      	bhi.n	800a970 <_rclc_check_for_new_data+0x40>
 800a938:	e8df f003 	tbb	[pc, r3]
 800a93c:	12161010 	.word	0x12161010
 800a940:	05050512 	.word	0x05050512
 800a944:	14          	.byte	0x14
 800a945:	00          	.byte	0x00
 800a946:	6a0b      	ldr	r3, [r1, #32]
 800a948:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94e:	3b00      	subs	r3, #0
 800a950:	bf18      	it	ne
 800a952:	2301      	movne	r3, #1
 800a954:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800a958:	2000      	movs	r0, #0
 800a95a:	4770      	bx	lr
 800a95c:	680b      	ldr	r3, [r1, #0]
 800a95e:	e7f3      	b.n	800a948 <_rclc_check_for_new_data+0x18>
 800a960:	698b      	ldr	r3, [r1, #24]
 800a962:	e7f1      	b.n	800a948 <_rclc_check_for_new_data+0x18>
 800a964:	688b      	ldr	r3, [r1, #8]
 800a966:	e7ef      	b.n	800a948 <_rclc_check_for_new_data+0x18>
 800a968:	690b      	ldr	r3, [r1, #16]
 800a96a:	e7ed      	b.n	800a948 <_rclc_check_for_new_data+0x18>
 800a96c:	200b      	movs	r0, #11
 800a96e:	4770      	bx	lr
 800a970:	2300      	movs	r3, #0
 800a972:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800a976:	2001      	movs	r0, #1
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop

0800a97c <_rclc_take_new_data>:
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d049      	beq.n	800aa14 <_rclc_take_new_data+0x98>
 800a980:	b510      	push	{r4, lr}
 800a982:	7803      	ldrb	r3, [r0, #0]
 800a984:	b08e      	sub	sp, #56	@ 0x38
 800a986:	4604      	mov	r4, r0
 800a988:	2b08      	cmp	r3, #8
 800a98a:	d84a      	bhi.n	800aa22 <_rclc_take_new_data+0xa6>
 800a98c:	e8df f003 	tbb	[pc, r3]
 800a990:	2b121515 	.word	0x2b121515
 800a994:	0505052b 	.word	0x0505052b
 800a998:	12          	.byte	0x12
 800a999:	00          	.byte	0x00
 800a99a:	6a0b      	ldr	r3, [r1, #32]
 800a99c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a2:	b13b      	cbz	r3, 800a9b4 <_rclc_take_new_data+0x38>
 800a9a4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a9a8:	f104 0110 	add.w	r1, r4, #16
 800a9ac:	f006 ff7c 	bl	80118a8 <rcl_take_request>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d131      	bne.n	800aa18 <_rclc_take_new_data+0x9c>
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	b00e      	add	sp, #56	@ 0x38
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	680b      	ldr	r3, [r1, #0]
 800a9bc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0f6      	beq.n	800a9b4 <_rclc_take_new_data+0x38>
 800a9c6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	aa02      	add	r2, sp, #8
 800a9ce:	f7ff ff5d 	bl	800a88c <rcl_take>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0ef      	beq.n	800a9b6 <_rclc_take_new_data+0x3a>
 800a9d6:	f240 1391 	movw	r3, #401	@ 0x191
 800a9da:	4298      	cmp	r0, r3
 800a9dc:	d115      	bne.n	800aa0a <_rclc_take_new_data+0x8e>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a9e4:	e7e7      	b.n	800a9b6 <_rclc_take_new_data+0x3a>
 800a9e6:	698b      	ldr	r3, [r1, #24]
 800a9e8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0e0      	beq.n	800a9b4 <_rclc_take_new_data+0x38>
 800a9f2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a9f6:	f104 0110 	add.w	r1, r4, #16
 800a9fa:	f006 f95d 	bl	8010cb8 <rcl_take_response>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d0d8      	beq.n	800a9b4 <_rclc_take_new_data+0x38>
 800aa02:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800aa06:	4298      	cmp	r0, r3
 800aa08:	d0d5      	beq.n	800a9b6 <_rclc_take_new_data+0x3a>
 800aa0a:	9001      	str	r0, [sp, #4]
 800aa0c:	f000 fc7a 	bl	800b304 <rcutils_reset_error>
 800aa10:	9801      	ldr	r0, [sp, #4]
 800aa12:	e7d0      	b.n	800a9b6 <_rclc_take_new_data+0x3a>
 800aa14:	200b      	movs	r0, #11
 800aa16:	4770      	bx	lr
 800aa18:	f240 2359 	movw	r3, #601	@ 0x259
 800aa1c:	4298      	cmp	r0, r3
 800aa1e:	d0de      	beq.n	800a9de <_rclc_take_new_data+0x62>
 800aa20:	e7f3      	b.n	800aa0a <_rclc_take_new_data+0x8e>
 800aa22:	2001      	movs	r0, #1
 800aa24:	e7c7      	b.n	800a9b6 <_rclc_take_new_data+0x3a>
 800aa26:	bf00      	nop

0800aa28 <rclc_executor_trigger_any>:
 800aa28:	b170      	cbz	r0, 800aa48 <rclc_executor_trigger_any+0x20>
 800aa2a:	b179      	cbz	r1, 800aa4c <rclc_executor_trigger_any+0x24>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2200      	movs	r2, #0
 800aa30:	e005      	b.n	800aa3e <rclc_executor_trigger_any+0x16>
 800aa32:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800aa36:	3340      	adds	r3, #64	@ 0x40
 800aa38:	b930      	cbnz	r0, 800aa48 <rclc_executor_trigger_any+0x20>
 800aa3a:	4291      	cmp	r1, r2
 800aa3c:	d005      	beq.n	800aa4a <rclc_executor_trigger_any+0x22>
 800aa3e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800aa42:	3201      	adds	r2, #1
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d1f4      	bne.n	800aa32 <rclc_executor_trigger_any+0xa>
 800aa48:	4770      	bx	lr
 800aa4a:	4770      	bx	lr
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	e7fb      	b.n	800aa48 <rclc_executor_trigger_any+0x20>

0800aa50 <_rclc_execute.part.0>:
 800aa50:	b530      	push	{r4, r5, lr}
 800aa52:	7803      	ldrb	r3, [r0, #0]
 800aa54:	b083      	sub	sp, #12
 800aa56:	4604      	mov	r4, r0
 800aa58:	2b08      	cmp	r3, #8
 800aa5a:	d85b      	bhi.n	800ab14 <_rclc_execute.part.0+0xc4>
 800aa5c:	e8df f003 	tbb	[pc, r3]
 800aa60:	3036271f 	.word	0x3036271f
 800aa64:	0505053f 	.word	0x0505053f
 800aa68:	1a          	.byte	0x1a
 800aa69:	00          	.byte	0x00
 800aa6a:	2b06      	cmp	r3, #6
 800aa6c:	d049      	beq.n	800ab02 <_rclc_execute.part.0+0xb2>
 800aa6e:	2b07      	cmp	r3, #7
 800aa70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa72:	d140      	bne.n	800aaf6 <_rclc_execute.part.0+0xa6>
 800aa74:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800aa78:	6880      	ldr	r0, [r0, #8]
 800aa7a:	4798      	blx	r3
 800aa7c:	f104 0110 	add.w	r1, r4, #16
 800aa80:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800aa82:	6860      	ldr	r0, [r4, #4]
 800aa84:	f006 ff48 	bl	8011918 <rcl_send_response>
 800aa88:	b138      	cbz	r0, 800aa9a <_rclc_execute.part.0+0x4a>
 800aa8a:	9001      	str	r0, [sp, #4]
 800aa8c:	f000 fc3a 	bl	800b304 <rcutils_reset_error>
 800aa90:	9801      	ldr	r0, [sp, #4]
 800aa92:	e002      	b.n	800aa9a <_rclc_execute.part.0+0x4a>
 800aa94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa96:	4798      	blx	r3
 800aa98:	2000      	movs	r0, #0
 800aa9a:	b003      	add	sp, #12
 800aa9c:	bd30      	pop	{r4, r5, pc}
 800aa9e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aaa2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aaa4:	b96d      	cbnz	r5, 800aac2 <_rclc_execute.part.0+0x72>
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	4798      	blx	r3
 800aaaa:	4628      	mov	r0, r5
 800aaac:	e7f5      	b.n	800aa9a <_rclc_execute.part.0+0x4a>
 800aaae:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aab2:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800aab6:	b1d5      	cbz	r5, 800aaee <_rclc_execute.part.0+0x9e>
 800aab8:	6880      	ldr	r0, [r0, #8]
 800aaba:	4798      	blx	r3
 800aabc:	2000      	movs	r0, #0
 800aabe:	e7ec      	b.n	800aa9a <_rclc_execute.part.0+0x4a>
 800aac0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aac2:	68a0      	ldr	r0, [r4, #8]
 800aac4:	4798      	blx	r3
 800aac6:	2000      	movs	r0, #0
 800aac8:	b003      	add	sp, #12
 800aaca:	bd30      	pop	{r4, r5, pc}
 800aacc:	6840      	ldr	r0, [r0, #4]
 800aace:	f007 f9f7 	bl	8011ec0 <rcl_timer_call>
 800aad2:	f240 3321 	movw	r3, #801	@ 0x321
 800aad6:	4298      	cmp	r0, r3
 800aad8:	d1d6      	bne.n	800aa88 <_rclc_execute.part.0+0x38>
 800aada:	2000      	movs	r0, #0
 800aadc:	e7dd      	b.n	800aa9a <_rclc_execute.part.0+0x4a>
 800aade:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aae0:	6880      	ldr	r0, [r0, #8]
 800aae2:	f104 0110 	add.w	r1, r4, #16
 800aae6:	4798      	blx	r3
 800aae8:	2000      	movs	r0, #0
 800aaea:	b003      	add	sp, #12
 800aaec:	bd30      	pop	{r4, r5, pc}
 800aaee:	4628      	mov	r0, r5
 800aaf0:	4798      	blx	r3
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	e7d1      	b.n	800aa9a <_rclc_execute.part.0+0x4a>
 800aaf6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aaf8:	6880      	ldr	r0, [r0, #8]
 800aafa:	4798      	blx	r3
 800aafc:	f104 0110 	add.w	r1, r4, #16
 800ab00:	e7be      	b.n	800aa80 <_rclc_execute.part.0+0x30>
 800ab02:	f100 0110 	add.w	r1, r0, #16
 800ab06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab08:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ab0a:	6880      	ldr	r0, [r0, #8]
 800ab0c:	9101      	str	r1, [sp, #4]
 800ab0e:	4798      	blx	r3
 800ab10:	9901      	ldr	r1, [sp, #4]
 800ab12:	e7b5      	b.n	800aa80 <_rclc_execute.part.0+0x30>
 800ab14:	2001      	movs	r0, #1
 800ab16:	e7c0      	b.n	800aa9a <_rclc_execute.part.0+0x4a>

0800ab18 <rclc_executor_init>:
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d063      	beq.n	800abe4 <rclc_executor_init+0xcc>
 800ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	460f      	mov	r7, r1
 800ab22:	b0ae      	sub	sp, #184	@ 0xb8
 800ab24:	2900      	cmp	r1, #0
 800ab26:	d055      	beq.n	800abd4 <rclc_executor_init+0xbc>
 800ab28:	4605      	mov	r5, r0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	4616      	mov	r6, r2
 800ab2e:	4698      	mov	r8, r3
 800ab30:	f000 fbc4 	bl	800b2bc <rcutils_allocator_is_valid>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d04d      	beq.n	800abd4 <rclc_executor_init+0xbc>
 800ab38:	2e00      	cmp	r6, #0
 800ab3a:	d04b      	beq.n	800abd4 <rclc_executor_init+0xbc>
 800ab3c:	492e      	ldr	r1, [pc, #184]	@ (800abf8 <rclc_executor_init+0xe0>)
 800ab3e:	2280      	movs	r2, #128	@ 0x80
 800ab40:	a80e      	add	r0, sp, #56	@ 0x38
 800ab42:	f00a ff1c 	bl	801597e <memcpy>
 800ab46:	2400      	movs	r4, #0
 800ab48:	a90e      	add	r1, sp, #56	@ 0x38
 800ab4a:	2280      	movs	r2, #128	@ 0x80
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f00a ff16 	bl	801597e <memcpy>
 800ab52:	602f      	str	r7, [r5, #0]
 800ab54:	4668      	mov	r0, sp
 800ab56:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800ab5a:	466f      	mov	r7, sp
 800ab5c:	f007 fc0a 	bl	8012374 <rcl_get_zero_initialized_wait_set>
 800ab60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab62:	f105 0c14 	add.w	ip, r5, #20
 800ab66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab6a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab76:	a31e      	add	r3, pc, #120	@ (adr r3, 800abf0 <rclc_executor_init+0xd8>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	f8cc 1000 	str.w	r1, [ip]
 800ab82:	f8d8 7000 	ldr.w	r7, [r8]
 800ab86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ab8a:	f8c5 8010 	str.w	r8, [r5, #16]
 800ab8e:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 800ab92:	01b0      	lsls	r0, r6, #6
 800ab94:	47b8      	blx	r7
 800ab96:	6068      	str	r0, [r5, #4]
 800ab98:	b908      	cbnz	r0, 800ab9e <rclc_executor_init+0x86>
 800ab9a:	e025      	b.n	800abe8 <rclc_executor_init+0xd0>
 800ab9c:	6868      	ldr	r0, [r5, #4]
 800ab9e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800aba2:	4631      	mov	r1, r6
 800aba4:	3401      	adds	r4, #1
 800aba6:	f000 fa31 	bl	800b00c <rclc_executor_handle_init>
 800abaa:	42a6      	cmp	r6, r4
 800abac:	d1f6      	bne.n	800ab9c <rclc_executor_init+0x84>
 800abae:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800abb2:	f000 fa1f 	bl	800aff4 <rclc_executor_handle_counters_zero_init>
 800abb6:	686b      	ldr	r3, [r5, #4]
 800abb8:	4a10      	ldr	r2, [pc, #64]	@ (800abfc <rclc_executor_init+0xe4>)
 800abba:	672a      	str	r2, [r5, #112]	@ 0x70
 800abbc:	2000      	movs	r0, #0
 800abbe:	6768      	str	r0, [r5, #116]	@ 0x74
 800abc0:	b163      	cbz	r3, 800abdc <rclc_executor_init+0xc4>
 800abc2:	692b      	ldr	r3, [r5, #16]
 800abc4:	b153      	cbz	r3, 800abdc <rclc_executor_init+0xc4>
 800abc6:	68ab      	ldr	r3, [r5, #8]
 800abc8:	b143      	cbz	r3, 800abdc <rclc_executor_init+0xc4>
 800abca:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 800abce:	b02e      	add	sp, #184	@ 0xb8
 800abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd4:	200b      	movs	r0, #11
 800abd6:	b02e      	add	sp, #184	@ 0xb8
 800abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abdc:	4618      	mov	r0, r3
 800abde:	b02e      	add	sp, #184	@ 0xb8
 800abe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe4:	200b      	movs	r0, #11
 800abe6:	4770      	bx	lr
 800abe8:	200a      	movs	r0, #10
 800abea:	e7f4      	b.n	800abd6 <rclc_executor_init+0xbe>
 800abec:	f3af 8000 	nop.w
 800abf0:	3b9aca00 	.word	0x3b9aca00
 800abf4:	00000000 	.word	0x00000000
 800abf8:	080169c8 	.word	0x080169c8
 800abfc:	0800aa29 	.word	0x0800aa29

0800ac00 <rclc_executor_add_subscription>:
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800ac08:	b358      	cbz	r0, 800ac62 <rclc_executor_add_subscription+0x62>
 800ac0a:	b351      	cbz	r1, 800ac62 <rclc_executor_add_subscription+0x62>
 800ac0c:	b34a      	cbz	r2, 800ac62 <rclc_executor_add_subscription+0x62>
 800ac0e:	b343      	cbz	r3, 800ac62 <rclc_executor_add_subscription+0x62>
 800ac10:	4604      	mov	r4, r0
 800ac12:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800ac16:	4285      	cmp	r5, r0
 800ac18:	d302      	bcc.n	800ac20 <rclc_executor_add_subscription+0x20>
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac20:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800ac24:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800ac28:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800ac2c:	f04f 0c00 	mov.w	ip, #0
 800ac30:	f80e c008 	strb.w	ip, [lr, r8]
 800ac34:	2001      	movs	r0, #1
 800ac36:	3501      	adds	r5, #1
 800ac38:	f104 0814 	add.w	r8, r4, #20
 800ac3c:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 800ac40:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800ac44:	6333      	str	r3, [r6, #48]	@ 0x30
 800ac46:	7077      	strb	r7, [r6, #1]
 800ac48:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	60e5      	str	r5, [r4, #12]
 800ac50:	f007 fba2 	bl	8012398 <rcl_wait_set_is_valid>
 800ac54:	b940      	cbnz	r0, 800ac68 <rclc_executor_add_subscription+0x68>
 800ac56:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ac58:	3301      	adds	r3, #1
 800ac5a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac62:	200b      	movs	r0, #11
 800ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac68:	4640      	mov	r0, r8
 800ac6a:	f007 fb9b 	bl	80123a4 <rcl_wait_set_fini>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0f1      	beq.n	800ac56 <rclc_executor_add_subscription+0x56>
 800ac72:	e7d3      	b.n	800ac1c <rclc_executor_add_subscription+0x1c>

0800ac74 <rclc_executor_add_timer>:
 800ac74:	b308      	cbz	r0, 800acba <rclc_executor_add_timer+0x46>
 800ac76:	b301      	cbz	r1, 800acba <rclc_executor_add_timer+0x46>
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	4604      	mov	r4, r0
 800ac82:	d301      	bcc.n	800ac88 <rclc_executor_add_timer+0x14>
 800ac84:	2001      	movs	r0, #1
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac88:	6840      	ldr	r0, [r0, #4]
 800ac8a:	019d      	lsls	r5, r3, #6
 800ac8c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ac90:	2702      	movs	r7, #2
 800ac92:	6051      	str	r1, [r2, #4]
 800ac94:	3301      	adds	r3, #1
 800ac96:	5347      	strh	r7, [r0, r5]
 800ac98:	2601      	movs	r6, #1
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	f104 0514 	add.w	r5, r4, #20
 800aca0:	f882 6038 	strb.w	r6, [r2, #56]	@ 0x38
 800aca4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800aca6:	4628      	mov	r0, r5
 800aca8:	60e3      	str	r3, [r4, #12]
 800acaa:	f007 fb75 	bl	8012398 <rcl_wait_set_is_valid>
 800acae:	b930      	cbnz	r0, 800acbe <rclc_executor_add_timer+0x4a>
 800acb0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800acb2:	3301      	adds	r3, #1
 800acb4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800acb6:	2000      	movs	r0, #0
 800acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acba:	200b      	movs	r0, #11
 800acbc:	4770      	bx	lr
 800acbe:	4628      	mov	r0, r5
 800acc0:	f007 fb70 	bl	80123a4 <rcl_wait_set_fini>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d0f3      	beq.n	800acb0 <rclc_executor_add_timer+0x3c>
 800acc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acca:	bf00      	nop

0800accc <rclc_executor_prepare>:
 800accc:	2800      	cmp	r0, #0
 800acce:	d03d      	beq.n	800ad4c <rclc_executor_prepare+0x80>
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	f100 0814 	add.w	r8, r0, #20
 800acd8:	b09a      	sub	sp, #104	@ 0x68
 800acda:	4604      	mov	r4, r0
 800acdc:	4640      	mov	r0, r8
 800acde:	f007 fb5b 	bl	8012398 <rcl_wait_set_is_valid>
 800ace2:	b118      	cbz	r0, 800acec <rclc_executor_prepare+0x20>
 800ace4:	2000      	movs	r0, #0
 800ace6:	b01a      	add	sp, #104	@ 0x68
 800ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acec:	4640      	mov	r0, r8
 800acee:	f007 fb59 	bl	80123a4 <rcl_wait_set_fini>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d127      	bne.n	800ad46 <rclc_executor_prepare+0x7a>
 800acf6:	a80c      	add	r0, sp, #48	@ 0x30
 800acf8:	ad0c      	add	r5, sp, #48	@ 0x30
 800acfa:	f007 fb3b 	bl	8012374 <rcl_get_zero_initialized_wait_set>
 800acfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad00:	4646      	mov	r6, r8
 800ad02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad0a:	6927      	ldr	r7, [r4, #16]
 800ad0c:	682d      	ldr	r5, [r5, #0]
 800ad0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad12:	6035      	str	r5, [r6, #0]
 800ad14:	ad04      	add	r5, sp, #16
 800ad16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad18:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800ad1c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800ad1e:	6826      	ldr	r6, [r4, #0]
 800ad20:	6838      	ldr	r0, [r7, #0]
 800ad22:	6028      	str	r0, [r5, #0]
 800ad24:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800ad28:	e9cd 3200 	strd	r3, r2, [sp]
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ad30:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800ad32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ad34:	f007 fe54 	bl	80129e0 <rcl_wait_set_init>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d0d4      	beq.n	800ace6 <rclc_executor_prepare+0x1a>
 800ad3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ad3e:	f000 fae1 	bl	800b304 <rcutils_reset_error>
 800ad42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ad44:	e7cf      	b.n	800ace6 <rclc_executor_prepare+0x1a>
 800ad46:	f000 fadd 	bl	800b304 <rcutils_reset_error>
 800ad4a:	e7d4      	b.n	800acf6 <rclc_executor_prepare+0x2a>
 800ad4c:	200b      	movs	r0, #11
 800ad4e:	4770      	bx	lr

0800ad50 <rclc_executor_spin_some.part.0>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	f100 0814 	add.w	r8, r0, #20
 800ad58:	b083      	sub	sp, #12
 800ad5a:	4692      	mov	sl, r2
 800ad5c:	4699      	mov	r9, r3
 800ad5e:	4605      	mov	r5, r0
 800ad60:	f7ff ffb4 	bl	800accc <rclc_executor_prepare>
 800ad64:	4640      	mov	r0, r8
 800ad66:	f007 fbe9 	bl	801253c <rcl_wait_set_clear>
 800ad6a:	4607      	mov	r7, r0
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	f040 80be 	bne.w	800aeee <rclc_executor_spin_some.part.0+0x19e>
 800ad72:	68ab      	ldr	r3, [r5, #8]
 800ad74:	4604      	mov	r4, r0
 800ad76:	b1eb      	cbz	r3, 800adb4 <rclc_executor_spin_some.part.0+0x64>
 800ad78:	686e      	ldr	r6, [r5, #4]
 800ad7a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800ad7e:	01a2      	lsls	r2, r4, #6
 800ad80:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 800ad84:	b1b3      	cbz	r3, 800adb4 <rclc_executor_spin_some.part.0+0x64>
 800ad86:	5cb3      	ldrb	r3, [r6, r2]
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	f200 80a9 	bhi.w	800aee0 <rclc_executor_spin_some.part.0+0x190>
 800ad8e:	e8df f003 	tbb	[pc, r3]
 800ad92:	8989      	.short	0x8989
 800ad94:	057b7b93 	.word	0x057b7b93
 800ad98:	0505      	.short	0x0505
 800ad9a:	9d          	.byte	0x9d
 800ad9b:	00          	.byte	0x00
 800ad9c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800ada0:	4640      	mov	r0, r8
 800ada2:	6849      	ldr	r1, [r1, #4]
 800ada4:	f007 ff32 	bl	8012c0c <rcl_wait_set_add_service>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d175      	bne.n	800ae98 <rclc_executor_spin_some.part.0+0x148>
 800adac:	68ab      	ldr	r3, [r5, #8]
 800adae:	3401      	adds	r4, #1
 800adb0:	429c      	cmp	r4, r3
 800adb2:	d3e1      	bcc.n	800ad78 <rclc_executor_spin_some.part.0+0x28>
 800adb4:	464b      	mov	r3, r9
 800adb6:	4652      	mov	r2, sl
 800adb8:	4640      	mov	r0, r8
 800adba:	f007 ff55 	bl	8012c68 <rcl_wait>
 800adbe:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 809b 	beq.w	800aefe <rclc_executor_spin_some.part.0+0x1ae>
 800adc8:	2b01      	cmp	r3, #1
 800adca:	f040 8089 	bne.w	800aee0 <rclc_executor_spin_some.part.0+0x190>
 800adce:	68ab      	ldr	r3, [r5, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 80ef 	beq.w	800afb4 <rclc_executor_spin_some.part.0+0x264>
 800add6:	2400      	movs	r4, #0
 800add8:	4626      	mov	r6, r4
 800adda:	f240 1991 	movw	r9, #401	@ 0x191
 800adde:	e00a      	b.n	800adf6 <rclc_executor_spin_some.part.0+0xa6>
 800ade0:	f7ff fda6 	bl	800a930 <_rclc_check_for_new_data>
 800ade4:	4604      	mov	r4, r0
 800ade6:	b110      	cbz	r0, 800adee <rclc_executor_spin_some.part.0+0x9e>
 800ade8:	4548      	cmp	r0, r9
 800adea:	f040 8086 	bne.w	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800adee:	68ab      	ldr	r3, [r5, #8]
 800adf0:	429e      	cmp	r6, r3
 800adf2:	f080 80db 	bcs.w	800afac <rclc_executor_spin_some.part.0+0x25c>
 800adf6:	686a      	ldr	r2, [r5, #4]
 800adf8:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800adfc:	4641      	mov	r1, r8
 800adfe:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ae02:	3601      	adds	r6, #1
 800ae04:	f1bc 0f00 	cmp.w	ip, #0
 800ae08:	d1ea      	bne.n	800ade0 <rclc_executor_spin_some.part.0+0x90>
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800ae12:	4798      	blx	r3
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d070      	beq.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800ae18:	68aa      	ldr	r2, [r5, #8]
 800ae1a:	2a00      	cmp	r2, #0
 800ae1c:	d06d      	beq.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800ae1e:	2600      	movs	r6, #0
 800ae20:	f240 1991 	movw	r9, #401	@ 0x191
 800ae24:	e008      	b.n	800ae38 <rclc_executor_spin_some.part.0+0xe8>
 800ae26:	f7ff fda9 	bl	800a97c <_rclc_take_new_data>
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	b108      	cbz	r0, 800ae32 <rclc_executor_spin_some.part.0+0xe2>
 800ae2e:	4548      	cmp	r0, r9
 800ae30:	d163      	bne.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800ae32:	68aa      	ldr	r2, [r5, #8]
 800ae34:	4296      	cmp	r6, r2
 800ae36:	d208      	bcs.n	800ae4a <rclc_executor_spin_some.part.0+0xfa>
 800ae38:	6868      	ldr	r0, [r5, #4]
 800ae3a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800ae3e:	4641      	mov	r1, r8
 800ae40:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ae44:	3601      	adds	r6, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1ed      	bne.n	800ae26 <rclc_executor_spin_some.part.0+0xd6>
 800ae4a:	2600      	movs	r6, #0
 800ae4c:	b932      	cbnz	r2, 800ae5c <rclc_executor_spin_some.part.0+0x10c>
 800ae4e:	e054      	b.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800ae50:	2901      	cmp	r1, #1
 800ae52:	d012      	beq.n	800ae7a <rclc_executor_spin_some.part.0+0x12a>
 800ae54:	3601      	adds	r6, #1
 800ae56:	4296      	cmp	r6, r2
 800ae58:	d245      	bcs.n	800aee6 <rclc_executor_spin_some.part.0+0x196>
 800ae5a:	2400      	movs	r4, #0
 800ae5c:	686b      	ldr	r3, [r5, #4]
 800ae5e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800ae62:	4618      	mov	r0, r3
 800ae64:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	d046      	beq.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800ae6c:	7859      	ldrb	r1, [r3, #1]
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	d1ee      	bne.n	800ae50 <rclc_executor_spin_some.part.0+0x100>
 800ae72:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0ec      	beq.n	800ae54 <rclc_executor_spin_some.part.0+0x104>
 800ae7a:	f7ff fde9 	bl	800aa50 <_rclc_execute.part.0>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	f040 8096 	bne.w	800afb0 <rclc_executor_spin_some.part.0+0x260>
 800ae84:	68aa      	ldr	r2, [r5, #8]
 800ae86:	e7e5      	b.n	800ae54 <rclc_executor_spin_some.part.0+0x104>
 800ae88:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	6849      	ldr	r1, [r1, #4]
 800ae90:	f007 fe90 	bl	8012bb4 <rcl_wait_set_add_client>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d089      	beq.n	800adac <rclc_executor_spin_some.part.0+0x5c>
 800ae98:	9001      	str	r0, [sp, #4]
 800ae9a:	f000 fa33 	bl	800b304 <rcutils_reset_error>
 800ae9e:	9801      	ldr	r0, [sp, #4]
 800aea0:	4607      	mov	r7, r0
 800aea2:	e020      	b.n	800aee6 <rclc_executor_spin_some.part.0+0x196>
 800aea4:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800aea8:	4640      	mov	r0, r8
 800aeaa:	6849      	ldr	r1, [r1, #4]
 800aeac:	f007 fb1a 	bl	80124e4 <rcl_wait_set_add_subscription>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f43f af7b 	beq.w	800adac <rclc_executor_spin_some.part.0+0x5c>
 800aeb6:	e7ef      	b.n	800ae98 <rclc_executor_spin_some.part.0+0x148>
 800aeb8:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800aebc:	4640      	mov	r0, r8
 800aebe:	6849      	ldr	r1, [r1, #4]
 800aec0:	f007 fe48 	bl	8012b54 <rcl_wait_set_add_timer>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	f43f af71 	beq.w	800adac <rclc_executor_spin_some.part.0+0x5c>
 800aeca:	e7e5      	b.n	800ae98 <rclc_executor_spin_some.part.0+0x148>
 800aecc:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800aed0:	4640      	mov	r0, r8
 800aed2:	6849      	ldr	r1, [r1, #4]
 800aed4:	f007 fe12 	bl	8012afc <rcl_wait_set_add_guard_condition>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f43f af67 	beq.w	800adac <rclc_executor_spin_some.part.0+0x5c>
 800aede:	e7db      	b.n	800ae98 <rclc_executor_spin_some.part.0+0x148>
 800aee0:	f000 fa10 	bl	800b304 <rcutils_reset_error>
 800aee4:	2701      	movs	r7, #1
 800aee6:	4638      	mov	r0, r7
 800aee8:	b003      	add	sp, #12
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeee:	f000 fa09 	bl	800b304 <rcutils_reset_error>
 800aef2:	4638      	mov	r0, r7
 800aef4:	b003      	add	sp, #12
 800aef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefa:	4627      	mov	r7, r4
 800aefc:	e7f3      	b.n	800aee6 <rclc_executor_spin_some.part.0+0x196>
 800aefe:	68ab      	ldr	r3, [r5, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d05a      	beq.n	800afba <rclc_executor_spin_some.part.0+0x26a>
 800af04:	2400      	movs	r4, #0
 800af06:	4626      	mov	r6, r4
 800af08:	f240 1991 	movw	r9, #401	@ 0x191
 800af0c:	e008      	b.n	800af20 <rclc_executor_spin_some.part.0+0x1d0>
 800af0e:	f7ff fd0f 	bl	800a930 <_rclc_check_for_new_data>
 800af12:	4604      	mov	r4, r0
 800af14:	b108      	cbz	r0, 800af1a <rclc_executor_spin_some.part.0+0x1ca>
 800af16:	4548      	cmp	r0, r9
 800af18:	d1ef      	bne.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800af1a:	68ab      	ldr	r3, [r5, #8]
 800af1c:	429e      	cmp	r6, r3
 800af1e:	d243      	bcs.n	800afa8 <rclc_executor_spin_some.part.0+0x258>
 800af20:	686a      	ldr	r2, [r5, #4]
 800af22:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800af26:	4641      	mov	r1, r8
 800af28:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800af2c:	3601      	adds	r6, #1
 800af2e:	f1bc 0f00 	cmp.w	ip, #0
 800af32:	d1ec      	bne.n	800af0e <rclc_executor_spin_some.part.0+0x1be>
 800af34:	4619      	mov	r1, r3
 800af36:	4610      	mov	r0, r2
 800af38:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800af3c:	4798      	blx	r3
 800af3e:	2800      	cmp	r0, #0
 800af40:	d0db      	beq.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800af42:	68ab      	ldr	r3, [r5, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0d8      	beq.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800af48:	f04f 0a00 	mov.w	sl, #0
 800af4c:	f240 1691 	movw	r6, #401	@ 0x191
 800af50:	f240 2959 	movw	r9, #601	@ 0x259
 800af54:	e00b      	b.n	800af6e <rclc_executor_spin_some.part.0+0x21e>
 800af56:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800af5a:	b113      	cbz	r3, 800af62 <rclc_executor_spin_some.part.0+0x212>
 800af5c:	f7ff fd78 	bl	800aa50 <_rclc_execute.part.0>
 800af60:	bb30      	cbnz	r0, 800afb0 <rclc_executor_spin_some.part.0+0x260>
 800af62:	68ab      	ldr	r3, [r5, #8]
 800af64:	f10a 0a01 	add.w	sl, sl, #1
 800af68:	459a      	cmp	sl, r3
 800af6a:	d2bc      	bcs.n	800aee6 <rclc_executor_spin_some.part.0+0x196>
 800af6c:	2400      	movs	r4, #0
 800af6e:	6868      	ldr	r0, [r5, #4]
 800af70:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800af74:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800af78:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0bc      	beq.n	800aefa <rclc_executor_spin_some.part.0+0x1aa>
 800af80:	4641      	mov	r1, r8
 800af82:	f7ff fcfb 	bl	800a97c <_rclc_take_new_data>
 800af86:	b118      	cbz	r0, 800af90 <rclc_executor_spin_some.part.0+0x240>
 800af88:	42b0      	cmp	r0, r6
 800af8a:	d001      	beq.n	800af90 <rclc_executor_spin_some.part.0+0x240>
 800af8c:	4548      	cmp	r0, r9
 800af8e:	d10f      	bne.n	800afb0 <rclc_executor_spin_some.part.0+0x260>
 800af90:	6868      	ldr	r0, [r5, #4]
 800af92:	eb10 000b 	adds.w	r0, r0, fp
 800af96:	d005      	beq.n	800afa4 <rclc_executor_spin_some.part.0+0x254>
 800af98:	7843      	ldrb	r3, [r0, #1]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0db      	beq.n	800af56 <rclc_executor_spin_some.part.0+0x206>
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d1df      	bne.n	800af62 <rclc_executor_spin_some.part.0+0x212>
 800afa2:	e7db      	b.n	800af5c <rclc_executor_spin_some.part.0+0x20c>
 800afa4:	270b      	movs	r7, #11
 800afa6:	e79e      	b.n	800aee6 <rclc_executor_spin_some.part.0+0x196>
 800afa8:	686a      	ldr	r2, [r5, #4]
 800afaa:	e7c3      	b.n	800af34 <rclc_executor_spin_some.part.0+0x1e4>
 800afac:	686a      	ldr	r2, [r5, #4]
 800afae:	e72c      	b.n	800ae0a <rclc_executor_spin_some.part.0+0xba>
 800afb0:	4607      	mov	r7, r0
 800afb2:	e798      	b.n	800aee6 <rclc_executor_spin_some.part.0+0x196>
 800afb4:	686a      	ldr	r2, [r5, #4]
 800afb6:	461c      	mov	r4, r3
 800afb8:	e727      	b.n	800ae0a <rclc_executor_spin_some.part.0+0xba>
 800afba:	686a      	ldr	r2, [r5, #4]
 800afbc:	461c      	mov	r4, r3
 800afbe:	e7b9      	b.n	800af34 <rclc_executor_spin_some.part.0+0x1e4>

0800afc0 <rclc_executor_spin>:
 800afc0:	b1a8      	cbz	r0, 800afee <rclc_executor_spin+0x2e>
 800afc2:	b5d0      	push	{r4, r6, r7, lr}
 800afc4:	4604      	mov	r4, r0
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	@ 0x60
 800afcc:	f005 fece 	bl	8010d6c <rcl_context_is_valid>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4632      	mov	r2, r6
 800afd4:	463b      	mov	r3, r7
 800afd6:	4620      	mov	r0, r4
 800afd8:	b129      	cbz	r1, 800afe6 <rclc_executor_spin+0x26>
 800afda:	f7ff feb9 	bl	800ad50 <rclc_executor_spin_some.part.0>
 800afde:	f030 0302 	bics.w	r3, r0, #2
 800afe2:	d0f0      	beq.n	800afc6 <rclc_executor_spin+0x6>
 800afe4:	bdd0      	pop	{r4, r6, r7, pc}
 800afe6:	f000 f98d 	bl	800b304 <rcutils_reset_error>
 800afea:	2001      	movs	r0, #1
 800afec:	bdd0      	pop	{r4, r6, r7, pc}
 800afee:	200b      	movs	r0, #11
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop

0800aff4 <rclc_executor_handle_counters_zero_init>:
 800aff4:	b140      	cbz	r0, 800b008 <rclc_executor_handle_counters_zero_init+0x14>
 800aff6:	2300      	movs	r3, #0
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	6043      	str	r3, [r0, #4]
 800affc:	6083      	str	r3, [r0, #8]
 800affe:	60c3      	str	r3, [r0, #12]
 800b000:	6103      	str	r3, [r0, #16]
 800b002:	6143      	str	r3, [r0, #20]
 800b004:	4618      	mov	r0, r3
 800b006:	4770      	bx	lr
 800b008:	200b      	movs	r0, #11
 800b00a:	4770      	bx	lr

0800b00c <rclc_executor_handle_init>:
 800b00c:	b178      	cbz	r0, 800b02e <rclc_executor_handle_init+0x22>
 800b00e:	b430      	push	{r4, r5}
 800b010:	4603      	mov	r3, r0
 800b012:	2209      	movs	r2, #9
 800b014:	2000      	movs	r0, #0
 800b016:	2400      	movs	r4, #0
 800b018:	2500      	movs	r5, #0
 800b01a:	801a      	strh	r2, [r3, #0]
 800b01c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 800b020:	bc30      	pop	{r4, r5}
 800b022:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800b026:	6359      	str	r1, [r3, #52]	@ 0x34
 800b028:	6318      	str	r0, [r3, #48]	@ 0x30
 800b02a:	8718      	strh	r0, [r3, #56]	@ 0x38
 800b02c:	4770      	bx	lr
 800b02e:	200b      	movs	r0, #11
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop

0800b034 <rclc_support_init_with_options>:
 800b034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b03e:	b380      	cbz	r0, 800b0a2 <rclc_support_init_with_options+0x6e>
 800b040:	461c      	mov	r4, r3
 800b042:	b373      	cbz	r3, 800b0a2 <rclc_support_init_with_options+0x6e>
 800b044:	f1b8 0f00 	cmp.w	r8, #0
 800b048:	d02b      	beq.n	800b0a2 <rclc_support_init_with_options+0x6e>
 800b04a:	4605      	mov	r5, r0
 800b04c:	460e      	mov	r6, r1
 800b04e:	4617      	mov	r7, r2
 800b050:	f7ff f85a 	bl	800a108 <rcl_get_zero_initialized_init_options>
 800b054:	4629      	mov	r1, r5
 800b056:	6028      	str	r0, [r5, #0]
 800b058:	4620      	mov	r0, r4
 800b05a:	f7ff f8cd 	bl	800a1f8 <rcl_init_options_copy>
 800b05e:	4604      	mov	r4, r0
 800b060:	b9c8      	cbnz	r0, 800b096 <rclc_support_init_with_options+0x62>
 800b062:	466c      	mov	r4, sp
 800b064:	4620      	mov	r0, r4
 800b066:	f005 fe77 	bl	8010d58 <rcl_get_zero_initialized_context>
 800b06a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b06e:	1d2b      	adds	r3, r5, #4
 800b070:	e883 0003 	stmia.w	r3, {r0, r1}
 800b074:	462a      	mov	r2, r5
 800b076:	4639      	mov	r1, r7
 800b078:	4630      	mov	r0, r6
 800b07a:	f006 f84d 	bl	8011118 <rcl_init>
 800b07e:	4604      	mov	r4, r0
 800b080:	b948      	cbnz	r0, 800b096 <rclc_support_init_with_options+0x62>
 800b082:	f8c5 800c 	str.w	r8, [r5, #12]
 800b086:	4642      	mov	r2, r8
 800b088:	f105 0110 	add.w	r1, r5, #16
 800b08c:	2003      	movs	r0, #3
 800b08e:	f006 fc71 	bl	8011974 <rcl_clock_init>
 800b092:	4604      	mov	r4, r0
 800b094:	b108      	cbz	r0, 800b09a <rclc_support_init_with_options+0x66>
 800b096:	f000 f935 	bl	800b304 <rcutils_reset_error>
 800b09a:	4620      	mov	r0, r4
 800b09c:	b002      	add	sp, #8
 800b09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a2:	240b      	movs	r4, #11
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	b002      	add	sp, #8
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0ac <rclc_node_init_with_options>:
 800b0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0b0:	b087      	sub	sp, #28
 800b0b2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800b0b4:	b1e0      	cbz	r0, 800b0f0 <rclc_node_init_with_options+0x44>
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	b1d1      	cbz	r1, 800b0f0 <rclc_node_init_with_options+0x44>
 800b0ba:	4616      	mov	r6, r2
 800b0bc:	b1c2      	cbz	r2, 800b0f0 <rclc_node_init_with_options+0x44>
 800b0be:	4698      	mov	r8, r3
 800b0c0:	b1b3      	cbz	r3, 800b0f0 <rclc_node_init_with_options+0x44>
 800b0c2:	b1af      	cbz	r7, 800b0f0 <rclc_node_init_with_options+0x44>
 800b0c4:	f10d 0910 	add.w	r9, sp, #16
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	4648      	mov	r0, r9
 800b0cc:	f006 f950 	bl	8011370 <rcl_get_zero_initialized_node>
 800b0d0:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b0d4:	f108 0304 	add.w	r3, r8, #4
 800b0d8:	9700      	str	r7, [sp, #0]
 800b0da:	4632      	mov	r2, r6
 800b0dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f006 f94e 	bl	8011384 <rcl_node_init>
 800b0e8:	b930      	cbnz	r0, 800b0f8 <rclc_node_init_with_options+0x4c>
 800b0ea:	b007      	add	sp, #28
 800b0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f0:	200b      	movs	r0, #11
 800b0f2:	b007      	add	sp, #28
 800b0f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f8:	9003      	str	r0, [sp, #12]
 800b0fa:	f000 f903 	bl	800b304 <rcutils_reset_error>
 800b0fe:	9803      	ldr	r0, [sp, #12]
 800b100:	b007      	add	sp, #28
 800b102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b106:	bf00      	nop

0800b108 <rclc_publisher_init_default>:
 800b108:	b368      	cbz	r0, 800b166 <rclc_publisher_init_default+0x5e>
 800b10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10e:	460d      	mov	r5, r1
 800b110:	b09e      	sub	sp, #120	@ 0x78
 800b112:	b321      	cbz	r1, 800b15e <rclc_publisher_init_default+0x56>
 800b114:	4616      	mov	r6, r2
 800b116:	b312      	cbz	r2, 800b15e <rclc_publisher_init_default+0x56>
 800b118:	461f      	mov	r7, r3
 800b11a:	b303      	cbz	r3, 800b15e <rclc_publisher_init_default+0x56>
 800b11c:	4604      	mov	r4, r0
 800b11e:	f7ff f94b 	bl	800a3b8 <rcl_get_zero_initialized_publisher>
 800b122:	f10d 0810 	add.w	r8, sp, #16
 800b126:	6020      	str	r0, [r4, #0]
 800b128:	4640      	mov	r0, r8
 800b12a:	f7ff fa41 	bl	800a5b0 <rcl_publisher_get_default_options>
 800b12e:	490f      	ldr	r1, [pc, #60]	@ (800b16c <rclc_publisher_init_default+0x64>)
 800b130:	2250      	movs	r2, #80	@ 0x50
 800b132:	4640      	mov	r0, r8
 800b134:	f00a fc23 	bl	801597e <memcpy>
 800b138:	f8cd 8000 	str.w	r8, [sp]
 800b13c:	463b      	mov	r3, r7
 800b13e:	4632      	mov	r2, r6
 800b140:	4629      	mov	r1, r5
 800b142:	4620      	mov	r0, r4
 800b144:	f7ff f93e 	bl	800a3c4 <rcl_publisher_init>
 800b148:	b910      	cbnz	r0, 800b150 <rclc_publisher_init_default+0x48>
 800b14a:	b01e      	add	sp, #120	@ 0x78
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	9003      	str	r0, [sp, #12]
 800b152:	f000 f8d7 	bl	800b304 <rcutils_reset_error>
 800b156:	9803      	ldr	r0, [sp, #12]
 800b158:	b01e      	add	sp, #120	@ 0x78
 800b15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15e:	200b      	movs	r0, #11
 800b160:	b01e      	add	sp, #120	@ 0x78
 800b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b166:	200b      	movs	r0, #11
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	08016a48 	.word	0x08016a48

0800b170 <rclc_subscription_init_best_effort>:
 800b170:	b368      	cbz	r0, 800b1ce <rclc_subscription_init_best_effort+0x5e>
 800b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	460d      	mov	r5, r1
 800b178:	b0a0      	sub	sp, #128	@ 0x80
 800b17a:	b321      	cbz	r1, 800b1c6 <rclc_subscription_init_best_effort+0x56>
 800b17c:	4616      	mov	r6, r2
 800b17e:	b312      	cbz	r2, 800b1c6 <rclc_subscription_init_best_effort+0x56>
 800b180:	461f      	mov	r7, r3
 800b182:	b303      	cbz	r3, 800b1c6 <rclc_subscription_init_best_effort+0x56>
 800b184:	4604      	mov	r4, r0
 800b186:	f7ff fa59 	bl	800a63c <rcl_get_zero_initialized_subscription>
 800b18a:	f10d 0810 	add.w	r8, sp, #16
 800b18e:	6020      	str	r0, [r4, #0]
 800b190:	4640      	mov	r0, r8
 800b192:	f7ff fb4f 	bl	800a834 <rcl_subscription_get_default_options>
 800b196:	490f      	ldr	r1, [pc, #60]	@ (800b1d4 <rclc_subscription_init_best_effort+0x64>)
 800b198:	2250      	movs	r2, #80	@ 0x50
 800b19a:	4640      	mov	r0, r8
 800b19c:	f00a fbef 	bl	801597e <memcpy>
 800b1a0:	f8cd 8000 	str.w	r8, [sp]
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	4632      	mov	r2, r6
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f7ff fa4c 	bl	800a648 <rcl_subscription_init>
 800b1b0:	b910      	cbnz	r0, 800b1b8 <rclc_subscription_init_best_effort+0x48>
 800b1b2:	b020      	add	sp, #128	@ 0x80
 800b1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b8:	9003      	str	r0, [sp, #12]
 800b1ba:	f000 f8a3 	bl	800b304 <rcutils_reset_error>
 800b1be:	9803      	ldr	r0, [sp, #12]
 800b1c0:	b020      	add	sp, #128	@ 0x80
 800b1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c6:	200b      	movs	r0, #11
 800b1c8:	b020      	add	sp, #128	@ 0x80
 800b1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ce:	200b      	movs	r0, #11
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	08016a98 	.word	0x08016a98

0800b1d8 <rclc_timer_init_default>:
 800b1d8:	b348      	cbz	r0, 800b22e <rclc_timer_init_default+0x56>
 800b1da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	b08b      	sub	sp, #44	@ 0x2c
 800b1e2:	b301      	cbz	r1, 800b226 <rclc_timer_init_default+0x4e>
 800b1e4:	4691      	mov	r9, r2
 800b1e6:	4698      	mov	r8, r3
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	f006 fdaf 	bl	8011d4c <rcl_get_zero_initialized_timer>
 800b1ee:	68e6      	ldr	r6, [r4, #12]
 800b1f0:	6038      	str	r0, [r7, #0]
 800b1f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b1f4:	ad03      	add	r5, sp, #12
 800b1f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b1f8:	6833      	ldr	r3, [r6, #0]
 800b1fa:	602b      	str	r3, [r5, #0]
 800b1fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1fe:	9302      	str	r3, [sp, #8]
 800b200:	e9cd 9800 	strd	r9, r8, [sp]
 800b204:	4638      	mov	r0, r7
 800b206:	1d22      	adds	r2, r4, #4
 800b208:	f104 0110 	add.w	r1, r4, #16
 800b20c:	f006 fda4 	bl	8011d58 <rcl_timer_init>
 800b210:	b910      	cbnz	r0, 800b218 <rclc_timer_init_default+0x40>
 800b212:	b00b      	add	sp, #44	@ 0x2c
 800b214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b218:	9009      	str	r0, [sp, #36]	@ 0x24
 800b21a:	f000 f873 	bl	800b304 <rcutils_reset_error>
 800b21e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b220:	b00b      	add	sp, #44	@ 0x2c
 800b222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b226:	200b      	movs	r0, #11
 800b228:	b00b      	add	sp, #44	@ 0x2c
 800b22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b22e:	200b      	movs	r0, #11
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop

0800b234 <__default_zero_allocate>:
 800b234:	f009 beaa 	b.w	8014f8c <calloc>

0800b238 <__default_reallocate>:
 800b238:	f00a b836 	b.w	80152a8 <realloc>

0800b23c <__default_deallocate>:
 800b23c:	f009 bf12 	b.w	8015064 <free>

0800b240 <__default_allocate>:
 800b240:	f009 bf08 	b.w	8015054 <malloc>

0800b244 <rcutils_get_zero_initialized_allocator>:
 800b244:	b470      	push	{r4, r5, r6}
 800b246:	4d05      	ldr	r5, [pc, #20]	@ (800b25c <rcutils_get_zero_initialized_allocator+0x18>)
 800b248:	4606      	mov	r6, r0
 800b24a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b24c:	4634      	mov	r4, r6
 800b24e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	4630      	mov	r0, r6
 800b256:	bc70      	pop	{r4, r5, r6}
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	08016ae8 	.word	0x08016ae8

0800b260 <rcutils_set_default_allocator>:
 800b260:	b1a0      	cbz	r0, 800b28c <rcutils_set_default_allocator+0x2c>
 800b262:	6801      	ldr	r1, [r0, #0]
 800b264:	b199      	cbz	r1, 800b28e <rcutils_set_default_allocator+0x2e>
 800b266:	b430      	push	{r4, r5}
 800b268:	6844      	ldr	r4, [r0, #4]
 800b26a:	b194      	cbz	r4, 800b292 <rcutils_set_default_allocator+0x32>
 800b26c:	68c5      	ldr	r5, [r0, #12]
 800b26e:	b15d      	cbz	r5, 800b288 <rcutils_set_default_allocator+0x28>
 800b270:	6883      	ldr	r3, [r0, #8]
 800b272:	b18b      	cbz	r3, 800b298 <rcutils_set_default_allocator+0x38>
 800b274:	4a09      	ldr	r2, [pc, #36]	@ (800b29c <rcutils_set_default_allocator+0x3c>)
 800b276:	e9c2 1400 	strd	r1, r4, [r2]
 800b27a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800b27e:	2000      	movs	r0, #0
 800b280:	6110      	str	r0, [r2, #16]
 800b282:	2001      	movs	r0, #1
 800b284:	bc30      	pop	{r4, r5}
 800b286:	4770      	bx	lr
 800b288:	4628      	mov	r0, r5
 800b28a:	e7fb      	b.n	800b284 <rcutils_set_default_allocator+0x24>
 800b28c:	4770      	bx	lr
 800b28e:	4608      	mov	r0, r1
 800b290:	4770      	bx	lr
 800b292:	4620      	mov	r0, r4
 800b294:	bc30      	pop	{r4, r5}
 800b296:	4770      	bx	lr
 800b298:	4618      	mov	r0, r3
 800b29a:	e7f3      	b.n	800b284 <rcutils_set_default_allocator+0x24>
 800b29c:	20000080 	.word	0x20000080

0800b2a0 <rcutils_get_default_allocator>:
 800b2a0:	b470      	push	{r4, r5, r6}
 800b2a2:	4d05      	ldr	r5, [pc, #20]	@ (800b2b8 <rcutils_get_default_allocator+0x18>)
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a8:	4634      	mov	r4, r6
 800b2aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	bc70      	pop	{r4, r5, r6}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	20000080 	.word	0x20000080

0800b2bc <rcutils_allocator_is_valid>:
 800b2bc:	b158      	cbz	r0, 800b2d6 <rcutils_allocator_is_valid+0x1a>
 800b2be:	6803      	ldr	r3, [r0, #0]
 800b2c0:	b143      	cbz	r3, 800b2d4 <rcutils_allocator_is_valid+0x18>
 800b2c2:	6843      	ldr	r3, [r0, #4]
 800b2c4:	b133      	cbz	r3, 800b2d4 <rcutils_allocator_is_valid+0x18>
 800b2c6:	68c3      	ldr	r3, [r0, #12]
 800b2c8:	b123      	cbz	r3, 800b2d4 <rcutils_allocator_is_valid+0x18>
 800b2ca:	6880      	ldr	r0, [r0, #8]
 800b2cc:	3800      	subs	r0, #0
 800b2ce:	bf18      	it	ne
 800b2d0:	2001      	movne	r0, #1
 800b2d2:	4770      	bx	lr
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	4770      	bx	lr

0800b2d8 <rcutils_get_error_string>:
 800b2d8:	4b06      	ldr	r3, [pc, #24]	@ (800b2f4 <rcutils_get_error_string+0x1c>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	b13b      	cbz	r3, 800b2ee <rcutils_get_error_string+0x16>
 800b2de:	4b06      	ldr	r3, [pc, #24]	@ (800b2f8 <rcutils_get_error_string+0x20>)
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	b90a      	cbnz	r2, 800b2e8 <rcutils_get_error_string+0x10>
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	4b04      	ldr	r3, [pc, #16]	@ (800b2fc <rcutils_get_error_string+0x24>)
 800b2ea:	7818      	ldrb	r0, [r3, #0]
 800b2ec:	4770      	bx	lr
 800b2ee:	4b04      	ldr	r3, [pc, #16]	@ (800b300 <rcutils_get_error_string+0x28>)
 800b2f0:	7818      	ldrb	r0, [r3, #0]
 800b2f2:	4770      	bx	lr
 800b2f4:	2000daa0 	.word	0x2000daa0
 800b2f8:	2000daa1 	.word	0x2000daa1
 800b2fc:	2000dd08 	.word	0x2000dd08
 800b300:	08016afc 	.word	0x08016afc

0800b304 <rcutils_reset_error>:
 800b304:	b4d0      	push	{r4, r6, r7}
 800b306:	4a07      	ldr	r2, [pc, #28]	@ (800b324 <rcutils_reset_error+0x20>)
 800b308:	4807      	ldr	r0, [pc, #28]	@ (800b328 <rcutils_reset_error+0x24>)
 800b30a:	4c08      	ldr	r4, [pc, #32]	@ (800b32c <rcutils_reset_error+0x28>)
 800b30c:	4908      	ldr	r1, [pc, #32]	@ (800b330 <rcutils_reset_error+0x2c>)
 800b30e:	2300      	movs	r3, #0
 800b310:	2600      	movs	r6, #0
 800b312:	2700      	movs	r7, #0
 800b314:	8013      	strh	r3, [r2, #0]
 800b316:	7003      	strb	r3, [r0, #0]
 800b318:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800b31c:	7023      	strb	r3, [r4, #0]
 800b31e:	700b      	strb	r3, [r1, #0]
 800b320:	bcd0      	pop	{r4, r6, r7}
 800b322:	4770      	bx	lr
 800b324:	2000dd10 	.word	0x2000dd10
 800b328:	2000dd08 	.word	0x2000dd08
 800b32c:	2000daa1 	.word	0x2000daa1
 800b330:	2000daa0 	.word	0x2000daa0

0800b334 <rcutils_get_zero_initialized_string_map>:
 800b334:	4b01      	ldr	r3, [pc, #4]	@ (800b33c <rcutils_get_zero_initialized_string_map+0x8>)
 800b336:	2000      	movs	r0, #0
 800b338:	6018      	str	r0, [r3, #0]
 800b33a:	4770      	bx	lr
 800b33c:	2000daa4 	.word	0x2000daa4

0800b340 <rcutils_string_map_reserve>:
 800b340:	2800      	cmp	r0, #0
 800b342:	d061      	beq.n	800b408 <rcutils_string_map_reserve+0xc8>
 800b344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b348:	6805      	ldr	r5, [r0, #0]
 800b34a:	b083      	sub	sp, #12
 800b34c:	460c      	mov	r4, r1
 800b34e:	4606      	mov	r6, r0
 800b350:	b12d      	cbz	r5, 800b35e <rcutils_string_map_reserve+0x1e>
 800b352:	68eb      	ldr	r3, [r5, #12]
 800b354:	42a3      	cmp	r3, r4
 800b356:	d906      	bls.n	800b366 <rcutils_string_map_reserve+0x26>
 800b358:	461c      	mov	r4, r3
 800b35a:	2d00      	cmp	r5, #0
 800b35c:	d1f9      	bne.n	800b352 <rcutils_string_map_reserve+0x12>
 800b35e:	201f      	movs	r0, #31
 800b360:	b003      	add	sp, #12
 800b362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b366:	68ab      	ldr	r3, [r5, #8]
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d049      	beq.n	800b400 <rcutils_string_map_reserve+0xc0>
 800b36c:	6a2f      	ldr	r7, [r5, #32]
 800b36e:	2c00      	cmp	r4, #0
 800b370:	d035      	beq.n	800b3de <rcutils_string_map_reserve+0x9e>
 800b372:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b376:	d245      	bcs.n	800b404 <rcutils_string_map_reserve+0xc4>
 800b378:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800b37c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800b380:	6828      	ldr	r0, [r5, #0]
 800b382:	4641      	mov	r1, r8
 800b384:	463a      	mov	r2, r7
 800b386:	47c8      	blx	r9
 800b388:	2800      	cmp	r0, #0
 800b38a:	d03b      	beq.n	800b404 <rcutils_string_map_reserve+0xc4>
 800b38c:	6833      	ldr	r3, [r6, #0]
 800b38e:	463a      	mov	r2, r7
 800b390:	6018      	str	r0, [r3, #0]
 800b392:	4641      	mov	r1, r8
 800b394:	6858      	ldr	r0, [r3, #4]
 800b396:	47c8      	blx	r9
 800b398:	2800      	cmp	r0, #0
 800b39a:	d033      	beq.n	800b404 <rcutils_string_map_reserve+0xc4>
 800b39c:	6835      	ldr	r5, [r6, #0]
 800b39e:	68ab      	ldr	r3, [r5, #8]
 800b3a0:	6068      	str	r0, [r5, #4]
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	d227      	bcs.n	800b3f6 <rcutils_string_map_reserve+0xb6>
 800b3a6:	682a      	ldr	r2, [r5, #0]
 800b3a8:	eb00 0108 	add.w	r1, r0, r8
 800b3ac:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800b3b0:	428f      	cmp	r7, r1
 800b3b2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800b3b6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800b3ba:	d203      	bcs.n	800b3c4 <rcutils_string_map_reserve+0x84>
 800b3bc:	eb02 0108 	add.w	r1, r2, r8
 800b3c0:	428e      	cmp	r6, r1
 800b3c2:	d323      	bcc.n	800b40c <rcutils_string_map_reserve+0xcc>
 800b3c4:	1ae3      	subs	r3, r4, r3
 800b3c6:	009a      	lsls	r2, r3, #2
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	9201      	str	r2, [sp, #4]
 800b3ce:	f00a f9b7 	bl	8015740 <memset>
 800b3d2:	9a01      	ldr	r2, [sp, #4]
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	f00a f9b2 	bl	8015740 <memset>
 800b3dc:	e00b      	b.n	800b3f6 <rcutils_string_map_reserve+0xb6>
 800b3de:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800b3e2:	6828      	ldr	r0, [r5, #0]
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	47c0      	blx	r8
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	6858      	ldr	r0, [r3, #4]
 800b3ee:	601c      	str	r4, [r3, #0]
 800b3f0:	47c0      	blx	r8
 800b3f2:	6835      	ldr	r5, [r6, #0]
 800b3f4:	606c      	str	r4, [r5, #4]
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	60ac      	str	r4, [r5, #8]
 800b3fa:	b003      	add	sp, #12
 800b3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b400:	2000      	movs	r0, #0
 800b402:	e7ad      	b.n	800b360 <rcutils_string_map_reserve+0x20>
 800b404:	200a      	movs	r0, #10
 800b406:	e7ab      	b.n	800b360 <rcutils_string_map_reserve+0x20>
 800b408:	200b      	movs	r0, #11
 800b40a:	4770      	bx	lr
 800b40c:	1f13      	subs	r3, r2, #4
 800b40e:	f1ac 0c04 	sub.w	ip, ip, #4
 800b412:	4498      	add	r8, r3
 800b414:	4460      	add	r0, ip
 800b416:	4462      	add	r2, ip
 800b418:	2300      	movs	r3, #0
 800b41a:	f842 3f04 	str.w	r3, [r2, #4]!
 800b41e:	4542      	cmp	r2, r8
 800b420:	f840 3f04 	str.w	r3, [r0, #4]!
 800b424:	d1f9      	bne.n	800b41a <rcutils_string_map_reserve+0xda>
 800b426:	e7e6      	b.n	800b3f6 <rcutils_string_map_reserve+0xb6>

0800b428 <rcutils_string_map_init>:
 800b428:	b082      	sub	sp, #8
 800b42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42c:	460e      	mov	r6, r1
 800b42e:	a906      	add	r1, sp, #24
 800b430:	e881 000c 	stmia.w	r1, {r2, r3}
 800b434:	b380      	cbz	r0, 800b498 <rcutils_string_map_init+0x70>
 800b436:	6807      	ldr	r7, [r0, #0]
 800b438:	4604      	mov	r4, r0
 800b43a:	b12f      	cbz	r7, 800b448 <rcutils_string_map_init+0x20>
 800b43c:	251e      	movs	r5, #30
 800b43e:	4628      	mov	r0, r5
 800b440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b444:	b002      	add	sp, #8
 800b446:	4770      	bx	lr
 800b448:	a806      	add	r0, sp, #24
 800b44a:	f7ff ff37 	bl	800b2bc <rcutils_allocator_is_valid>
 800b44e:	b318      	cbz	r0, 800b498 <rcutils_string_map_init+0x70>
 800b450:	9b06      	ldr	r3, [sp, #24]
 800b452:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b454:	2024      	movs	r0, #36	@ 0x24
 800b456:	4798      	blx	r3
 800b458:	4605      	mov	r5, r0
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	b310      	cbz	r0, 800b4a4 <rcutils_string_map_init+0x7c>
 800b45e:	f10d 0e18 	add.w	lr, sp, #24
 800b462:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b466:	f105 0c10 	add.w	ip, r5, #16
 800b46a:	e9c5 7700 	strd	r7, r7, [r5]
 800b46e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800b472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b476:	f8de 3000 	ldr.w	r3, [lr]
 800b47a:	f8cc 3000 	str.w	r3, [ip]
 800b47e:	4631      	mov	r1, r6
 800b480:	4620      	mov	r0, r4
 800b482:	f7ff ff5d 	bl	800b340 <rcutils_string_map_reserve>
 800b486:	4605      	mov	r5, r0
 800b488:	2800      	cmp	r0, #0
 800b48a:	d0d8      	beq.n	800b43e <rcutils_string_map_init+0x16>
 800b48c:	9b07      	ldr	r3, [sp, #28]
 800b48e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b490:	6820      	ldr	r0, [r4, #0]
 800b492:	4798      	blx	r3
 800b494:	6027      	str	r7, [r4, #0]
 800b496:	e7d2      	b.n	800b43e <rcutils_string_map_init+0x16>
 800b498:	250b      	movs	r5, #11
 800b49a:	4628      	mov	r0, r5
 800b49c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4a0:	b002      	add	sp, #8
 800b4a2:	4770      	bx	lr
 800b4a4:	250a      	movs	r5, #10
 800b4a6:	e7ca      	b.n	800b43e <rcutils_string_map_init+0x16>

0800b4a8 <rcutils_string_map_fini>:
 800b4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ac:	b082      	sub	sp, #8
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d039      	beq.n	800b526 <rcutils_string_map_fini+0x7e>
 800b4b2:	6804      	ldr	r4, [r0, #0]
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	2c00      	cmp	r4, #0
 800b4b8:	d031      	beq.n	800b51e <rcutils_string_map_fini+0x76>
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	b323      	cbz	r3, 800b508 <rcutils_string_map_fini+0x60>
 800b4be:	2500      	movs	r5, #0
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	46a8      	mov	r8, r5
 800b4c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b4c8:	b1d8      	cbz	r0, 800b502 <rcutils_string_map_fini+0x5a>
 800b4ca:	6a21      	ldr	r1, [r4, #32]
 800b4cc:	6967      	ldr	r7, [r4, #20]
 800b4ce:	9101      	str	r1, [sp, #4]
 800b4d0:	47b8      	blx	r7
 800b4d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b4d6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800b4da:	9901      	ldr	r1, [sp, #4]
 800b4dc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4e0:	47b8      	blx	r7
 800b4e2:	68e3      	ldr	r3, [r4, #12]
 800b4e4:	6862      	ldr	r2, [r4, #4]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800b4ec:	60e3      	str	r3, [r4, #12]
 800b4ee:	6834      	ldr	r4, [r6, #0]
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	3501      	adds	r5, #1
 800b4f4:	429d      	cmp	r5, r3
 800b4f6:	d207      	bcs.n	800b508 <rcutils_string_map_fini+0x60>
 800b4f8:	6822      	ldr	r2, [r4, #0]
 800b4fa:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d1e3      	bne.n	800b4ca <rcutils_string_map_fini+0x22>
 800b502:	3501      	adds	r5, #1
 800b504:	429d      	cmp	r5, r3
 800b506:	d3dd      	bcc.n	800b4c4 <rcutils_string_map_fini+0x1c>
 800b508:	2100      	movs	r1, #0
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff ff18 	bl	800b340 <rcutils_string_map_reserve>
 800b510:	4604      	mov	r4, r0
 800b512:	b920      	cbnz	r0, 800b51e <rcutils_string_map_fini+0x76>
 800b514:	6830      	ldr	r0, [r6, #0]
 800b516:	6943      	ldr	r3, [r0, #20]
 800b518:	6a01      	ldr	r1, [r0, #32]
 800b51a:	4798      	blx	r3
 800b51c:	6034      	str	r4, [r6, #0]
 800b51e:	4620      	mov	r0, r4
 800b520:	b002      	add	sp, #8
 800b522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b526:	240b      	movs	r4, #11
 800b528:	4620      	mov	r0, r4
 800b52a:	b002      	add	sp, #8
 800b52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b530 <rcutils_string_map_getn>:
 800b530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	b308      	cbz	r0, 800b57c <rcutils_string_map_getn+0x4c>
 800b538:	6804      	ldr	r4, [r0, #0]
 800b53a:	b304      	cbz	r4, 800b57e <rcutils_string_map_getn+0x4e>
 800b53c:	460d      	mov	r5, r1
 800b53e:	b1e9      	cbz	r1, 800b57c <rcutils_string_map_getn+0x4c>
 800b540:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800b544:	6827      	ldr	r7, [r4, #0]
 800b546:	f1b9 0f00 	cmp.w	r9, #0
 800b54a:	d017      	beq.n	800b57c <rcutils_string_map_getn+0x4c>
 800b54c:	4690      	mov	r8, r2
 800b54e:	3f04      	subs	r7, #4
 800b550:	2600      	movs	r6, #0
 800b552:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b556:	9101      	str	r1, [sp, #4]
 800b558:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b55c:	4608      	mov	r0, r1
 800b55e:	3601      	adds	r6, #1
 800b560:	b151      	cbz	r1, 800b578 <rcutils_string_map_getn+0x48>
 800b562:	f7f4 fe67 	bl	8000234 <strlen>
 800b566:	4540      	cmp	r0, r8
 800b568:	4602      	mov	r2, r0
 800b56a:	9901      	ldr	r1, [sp, #4]
 800b56c:	bf38      	it	cc
 800b56e:	4642      	movcc	r2, r8
 800b570:	4628      	mov	r0, r5
 800b572:	f00a f8fa 	bl	801576a <strncmp>
 800b576:	b130      	cbz	r0, 800b586 <rcutils_string_map_getn+0x56>
 800b578:	45b1      	cmp	r9, r6
 800b57a:	d1ea      	bne.n	800b552 <rcutils_string_map_getn+0x22>
 800b57c:	2400      	movs	r4, #0
 800b57e:	4620      	mov	r0, r4
 800b580:	b002      	add	sp, #8
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	6863      	ldr	r3, [r4, #4]
 800b588:	f853 400a 	ldr.w	r4, [r3, sl]
 800b58c:	4620      	mov	r0, r4
 800b58e:	b002      	add	sp, #8
 800b590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b594 <rcutils_system_time_now>:
 800b594:	b310      	cbz	r0, 800b5dc <rcutils_system_time_now+0x48>
 800b596:	b570      	push	{r4, r5, r6, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	4669      	mov	r1, sp
 800b59c:	4604      	mov	r4, r0
 800b59e:	2001      	movs	r0, #1
 800b5a0:	f7f5 fffa 	bl	8001598 <clock_gettime>
 800b5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	f171 0300 	sbcs.w	r3, r1, #0
 800b5ae:	db12      	blt.n	800b5d6 <rcutils_system_time_now+0x42>
 800b5b0:	9d02      	ldr	r5, [sp, #8]
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	db0c      	blt.n	800b5d0 <rcutils_system_time_now+0x3c>
 800b5b6:	4e0a      	ldr	r6, [pc, #40]	@ (800b5e0 <rcutils_system_time_now+0x4c>)
 800b5b8:	fba0 2306 	umull	r2, r3, r0, r6
 800b5bc:	1952      	adds	r2, r2, r5
 800b5be:	fb06 3301 	mla	r3, r6, r1, r3
 800b5c2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e9c4 2300 	strd	r2, r3, [r4]
 800b5cc:	b004      	add	sp, #16
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	ea50 0301 	orrs.w	r3, r0, r1
 800b5d4:	d1ef      	bne.n	800b5b6 <rcutils_system_time_now+0x22>
 800b5d6:	2002      	movs	r0, #2
 800b5d8:	b004      	add	sp, #16
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	200b      	movs	r0, #11
 800b5de:	4770      	bx	lr
 800b5e0:	3b9aca00 	.word	0x3b9aca00

0800b5e4 <rcutils_steady_time_now>:
 800b5e4:	b310      	cbz	r0, 800b62c <rcutils_steady_time_now+0x48>
 800b5e6:	b570      	push	{r4, r5, r6, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	4669      	mov	r1, sp
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	f7f5 ffd2 	bl	8001598 <clock_gettime>
 800b5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	f171 0300 	sbcs.w	r3, r1, #0
 800b5fe:	db12      	blt.n	800b626 <rcutils_steady_time_now+0x42>
 800b600:	9d02      	ldr	r5, [sp, #8]
 800b602:	2d00      	cmp	r5, #0
 800b604:	db0c      	blt.n	800b620 <rcutils_steady_time_now+0x3c>
 800b606:	4e0a      	ldr	r6, [pc, #40]	@ (800b630 <rcutils_steady_time_now+0x4c>)
 800b608:	fba0 2306 	umull	r2, r3, r0, r6
 800b60c:	1952      	adds	r2, r2, r5
 800b60e:	fb06 3301 	mla	r3, r6, r1, r3
 800b612:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800b616:	2000      	movs	r0, #0
 800b618:	e9c4 2300 	strd	r2, r3, [r4]
 800b61c:	b004      	add	sp, #16
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	ea50 0301 	orrs.w	r3, r0, r1
 800b624:	d1ef      	bne.n	800b606 <rcutils_steady_time_now+0x22>
 800b626:	2002      	movs	r0, #2
 800b628:	b004      	add	sp, #16
 800b62a:	bd70      	pop	{r4, r5, r6, pc}
 800b62c:	200b      	movs	r0, #11
 800b62e:	4770      	bx	lr
 800b630:	3b9aca00 	.word	0x3b9aca00

0800b634 <rmw_get_zero_initialized_init_options>:
 800b634:	b510      	push	{r4, lr}
 800b636:	2238      	movs	r2, #56	@ 0x38
 800b638:	4604      	mov	r4, r0
 800b63a:	2100      	movs	r1, #0
 800b63c:	f00a f880 	bl	8015740 <memset>
 800b640:	f104 0010 	add.w	r0, r4, #16
 800b644:	f000 f808 	bl	800b658 <rmw_get_default_security_options>
 800b648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b64c:	60e3      	str	r3, [r4, #12]
 800b64e:	4620      	mov	r0, r4
 800b650:	bd10      	pop	{r4, pc}
 800b652:	bf00      	nop

0800b654 <rmw_get_default_publisher_options>:
 800b654:	2000      	movs	r0, #0
 800b656:	4770      	bx	lr

0800b658 <rmw_get_default_security_options>:
 800b658:	2200      	movs	r2, #0
 800b65a:	7002      	strb	r2, [r0, #0]
 800b65c:	6042      	str	r2, [r0, #4]
 800b65e:	4770      	bx	lr

0800b660 <rmw_get_default_subscription_options>:
 800b660:	2200      	movs	r2, #0
 800b662:	6002      	str	r2, [r0, #0]
 800b664:	7102      	strb	r2, [r0, #4]
 800b666:	4770      	bx	lr

0800b668 <rmw_get_zero_initialized_message_info>:
 800b668:	b470      	push	{r4, r5, r6}
 800b66a:	4d07      	ldr	r5, [pc, #28]	@ (800b688 <rmw_get_zero_initialized_message_info+0x20>)
 800b66c:	4606      	mov	r6, r0
 800b66e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b670:	4634      	mov	r4, r6
 800b672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b678:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b67c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b680:	4630      	mov	r0, r6
 800b682:	bc70      	pop	{r4, r5, r6}
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	08016830 	.word	0x08016830

0800b68c <rmw_validate_full_topic_name>:
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d062      	beq.n	800b756 <rmw_validate_full_topic_name+0xca>
 800b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b694:	460d      	mov	r5, r1
 800b696:	2900      	cmp	r1, #0
 800b698:	d05f      	beq.n	800b75a <rmw_validate_full_topic_name+0xce>
 800b69a:	4616      	mov	r6, r2
 800b69c:	4604      	mov	r4, r0
 800b69e:	f7f4 fdc9 	bl	8000234 <strlen>
 800b6a2:	b148      	cbz	r0, 800b6b8 <rmw_validate_full_topic_name+0x2c>
 800b6a4:	7823      	ldrb	r3, [r4, #0]
 800b6a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6a8:	d00d      	beq.n	800b6c6 <rmw_validate_full_topic_name+0x3a>
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	b13e      	cbz	r6, 800b6c0 <rmw_validate_full_topic_name+0x34>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	6030      	str	r0, [r6, #0]
 800b6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	602b      	str	r3, [r5, #0]
 800b6bc:	2e00      	cmp	r6, #0
 800b6be:	d1f7      	bne.n	800b6b0 <rmw_validate_full_topic_name+0x24>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	1e47      	subs	r7, r0, #1
 800b6c8:	5de3      	ldrb	r3, [r4, r7]
 800b6ca:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6cc:	d047      	beq.n	800b75e <rmw_validate_full_topic_name+0xd2>
 800b6ce:	1e63      	subs	r3, r4, #1
 800b6d0:	eb03 0900 	add.w	r9, r3, r0
 800b6d4:	f1c4 0e01 	rsb	lr, r4, #1
 800b6d8:	eb0e 0803 	add.w	r8, lr, r3
 800b6dc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b6e0:	f021 0220 	bic.w	r2, r1, #32
 800b6e4:	3a41      	subs	r2, #65	@ 0x41
 800b6e6:	2a19      	cmp	r2, #25
 800b6e8:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800b6ec:	d90c      	bls.n	800b708 <rmw_validate_full_topic_name+0x7c>
 800b6ee:	295f      	cmp	r1, #95	@ 0x5f
 800b6f0:	d00a      	beq.n	800b708 <rmw_validate_full_topic_name+0x7c>
 800b6f2:	f1bc 0f0a 	cmp.w	ip, #10
 800b6f6:	d907      	bls.n	800b708 <rmw_validate_full_topic_name+0x7c>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	2e00      	cmp	r6, #0
 800b6fe:	d0df      	beq.n	800b6c0 <rmw_validate_full_topic_name+0x34>
 800b700:	f8c6 8000 	str.w	r8, [r6]
 800b704:	2000      	movs	r0, #0
 800b706:	e7d5      	b.n	800b6b4 <rmw_validate_full_topic_name+0x28>
 800b708:	454b      	cmp	r3, r9
 800b70a:	d1e5      	bne.n	800b6d8 <rmw_validate_full_topic_name+0x4c>
 800b70c:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800b794 <rmw_validate_full_topic_name+0x108>
 800b710:	2300      	movs	r3, #0
 800b712:	f107 0801 	add.w	r8, r7, #1
 800b716:	e005      	b.n	800b724 <rmw_validate_full_topic_name+0x98>
 800b718:	4611      	mov	r1, r2
 800b71a:	4288      	cmp	r0, r1
 800b71c:	4613      	mov	r3, r2
 800b71e:	f104 0401 	add.w	r4, r4, #1
 800b722:	d925      	bls.n	800b770 <rmw_validate_full_topic_name+0xe4>
 800b724:	429f      	cmp	r7, r3
 800b726:	f103 0201 	add.w	r2, r3, #1
 800b72a:	d01e      	beq.n	800b76a <rmw_validate_full_topic_name+0xde>
 800b72c:	7821      	ldrb	r1, [r4, #0]
 800b72e:	292f      	cmp	r1, #47	@ 0x2f
 800b730:	d1f2      	bne.n	800b718 <rmw_validate_full_topic_name+0x8c>
 800b732:	f894 c001 	ldrb.w	ip, [r4, #1]
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800b73c:	4611      	mov	r1, r2
 800b73e:	d024      	beq.n	800b78a <rmw_validate_full_topic_name+0xfe>
 800b740:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800b744:	075b      	lsls	r3, r3, #29
 800b746:	d5e8      	bpl.n	800b71a <rmw_validate_full_topic_name+0x8e>
 800b748:	2306      	movs	r3, #6
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	d0b7      	beq.n	800b6c0 <rmw_validate_full_topic_name+0x34>
 800b750:	6032      	str	r2, [r6, #0]
 800b752:	2000      	movs	r0, #0
 800b754:	e7ae      	b.n	800b6b4 <rmw_validate_full_topic_name+0x28>
 800b756:	200b      	movs	r0, #11
 800b758:	4770      	bx	lr
 800b75a:	200b      	movs	r0, #11
 800b75c:	e7aa      	b.n	800b6b4 <rmw_validate_full_topic_name+0x28>
 800b75e:	2303      	movs	r3, #3
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	2e00      	cmp	r6, #0
 800b764:	d0ac      	beq.n	800b6c0 <rmw_validate_full_topic_name+0x34>
 800b766:	6037      	str	r7, [r6, #0]
 800b768:	e7aa      	b.n	800b6c0 <rmw_validate_full_topic_name+0x34>
 800b76a:	4641      	mov	r1, r8
 800b76c:	1c7a      	adds	r2, r7, #1
 800b76e:	e7d4      	b.n	800b71a <rmw_validate_full_topic_name+0x8e>
 800b770:	28f7      	cmp	r0, #247	@ 0xf7
 800b772:	d802      	bhi.n	800b77a <rmw_validate_full_topic_name+0xee>
 800b774:	2000      	movs	r0, #0
 800b776:	6028      	str	r0, [r5, #0]
 800b778:	e79c      	b.n	800b6b4 <rmw_validate_full_topic_name+0x28>
 800b77a:	2307      	movs	r3, #7
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	2e00      	cmp	r6, #0
 800b780:	d09e      	beq.n	800b6c0 <rmw_validate_full_topic_name+0x34>
 800b782:	23f6      	movs	r3, #246	@ 0xf6
 800b784:	6033      	str	r3, [r6, #0]
 800b786:	2000      	movs	r0, #0
 800b788:	e794      	b.n	800b6b4 <rmw_validate_full_topic_name+0x28>
 800b78a:	2305      	movs	r3, #5
 800b78c:	602b      	str	r3, [r5, #0]
 800b78e:	2e00      	cmp	r6, #0
 800b790:	d1de      	bne.n	800b750 <rmw_validate_full_topic_name+0xc4>
 800b792:	e795      	b.n	800b6c0 <rmw_validate_full_topic_name+0x34>
 800b794:	080172e8 	.word	0x080172e8

0800b798 <rmw_uros_set_custom_transport>:
 800b798:	b470      	push	{r4, r5, r6}
 800b79a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b79e:	b162      	cbz	r2, 800b7ba <rmw_uros_set_custom_transport+0x22>
 800b7a0:	b15b      	cbz	r3, 800b7ba <rmw_uros_set_custom_transport+0x22>
 800b7a2:	b155      	cbz	r5, 800b7ba <rmw_uros_set_custom_transport+0x22>
 800b7a4:	b14e      	cbz	r6, 800b7ba <rmw_uros_set_custom_transport+0x22>
 800b7a6:	4c06      	ldr	r4, [pc, #24]	@ (800b7c0 <rmw_uros_set_custom_transport+0x28>)
 800b7a8:	7020      	strb	r0, [r4, #0]
 800b7aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b7ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b7b2:	6166      	str	r6, [r4, #20]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	bc70      	pop	{r4, r5, r6}
 800b7b8:	4770      	bx	lr
 800b7ba:	200b      	movs	r0, #11
 800b7bc:	bc70      	pop	{r4, r5, r6}
 800b7be:	4770      	bx	lr
 800b7c0:	2000dd20 	.word	0x2000dd20

0800b7c4 <rmw_init_options_init>:
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ca:	ad09      	add	r5, sp, #36	@ 0x24
 800b7cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b7d0:	b130      	cbz	r0, 800b7e0 <rmw_init_options_init+0x1c>
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f7ff fd71 	bl	800b2bc <rcutils_allocator_is_valid>
 800b7da:	b108      	cbz	r0, 800b7e0 <rmw_init_options_init+0x1c>
 800b7dc:	68a3      	ldr	r3, [r4, #8]
 800b7de:	b123      	cbz	r3, 800b7ea <rmw_init_options_init+0x26>
 800b7e0:	200b      	movs	r0, #11
 800b7e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e6:	b004      	add	sp, #16
 800b7e8:	4770      	bx	lr
 800b7ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7ec:	4f1c      	ldr	r7, [pc, #112]	@ (800b860 <rmw_init_options_init+0x9c>)
 800b7ee:	682e      	ldr	r6, [r5, #0]
 800b7f0:	683d      	ldr	r5, [r7, #0]
 800b7f2:	60a5      	str	r5, [r4, #8]
 800b7f4:	f04f 0800 	mov.w	r8, #0
 800b7f8:	f04f 0900 	mov.w	r9, #0
 800b7fc:	f104 0520 	add.w	r5, r4, #32
 800b800:	e9c4 8900 	strd	r8, r9, [r4]
 800b804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b806:	4b17      	ldr	r3, [pc, #92]	@ (800b864 <rmw_init_options_init+0xa0>)
 800b808:	4817      	ldr	r0, [pc, #92]	@ (800b868 <rmw_init_options_init+0xa4>)
 800b80a:	602e      	str	r6, [r5, #0]
 800b80c:	4917      	ldr	r1, [pc, #92]	@ (800b86c <rmw_init_options_init+0xa8>)
 800b80e:	61e3      	str	r3, [r4, #28]
 800b810:	2203      	movs	r2, #3
 800b812:	f000 ffbd 	bl	800c790 <rmw_uxrce_init_init_options_impl_memory>
 800b816:	4814      	ldr	r0, [pc, #80]	@ (800b868 <rmw_init_options_init+0xa4>)
 800b818:	f007 ff72 	bl	8013700 <get_memory>
 800b81c:	b1e8      	cbz	r0, 800b85a <rmw_init_options_init+0x96>
 800b81e:	4a14      	ldr	r2, [pc, #80]	@ (800b870 <rmw_init_options_init+0xac>)
 800b820:	68c3      	ldr	r3, [r0, #12]
 800b822:	6851      	ldr	r1, [r2, #4]
 800b824:	7810      	ldrb	r0, [r2, #0]
 800b826:	6363      	str	r3, [r4, #52]	@ 0x34
 800b828:	7418      	strb	r0, [r3, #16]
 800b82a:	6159      	str	r1, [r3, #20]
 800b82c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800b830:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800b834:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800b838:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800b83c:	f004 f81a 	bl	800f874 <uxr_nanos>
 800b840:	f009 fcc6 	bl	80151d0 <srand>
 800b844:	f009 fcf2 	bl	801522c <rand>
 800b848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b84a:	6298      	str	r0, [r3, #40]	@ 0x28
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d0f9      	beq.n	800b844 <rmw_init_options_init+0x80>
 800b850:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	2000      	movs	r0, #0
 800b856:	b004      	add	sp, #16
 800b858:	4770      	bx	lr
 800b85a:	2001      	movs	r0, #1
 800b85c:	e7c1      	b.n	800b7e2 <rmw_init_options_init+0x1e>
 800b85e:	bf00      	nop
 800b860:	0801725c 	.word	0x0801725c
 800b864:	08016b00 	.word	0x08016b00
 800b868:	2001103c 	.word	0x2001103c
 800b86c:	20010c90 	.word	0x20010c90
 800b870:	2000dd20 	.word	0x2000dd20

0800b874 <rmw_init_options_copy>:
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b876:	b158      	cbz	r0, 800b890 <rmw_init_options_copy+0x1c>
 800b878:	460e      	mov	r6, r1
 800b87a:	b149      	cbz	r1, 800b890 <rmw_init_options_copy+0x1c>
 800b87c:	4604      	mov	r4, r0
 800b87e:	6880      	ldr	r0, [r0, #8]
 800b880:	b120      	cbz	r0, 800b88c <rmw_init_options_copy+0x18>
 800b882:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f0 <rmw_init_options_copy+0x7c>)
 800b884:	6819      	ldr	r1, [r3, #0]
 800b886:	f7f4 fccb 	bl	8000220 <strcmp>
 800b88a:	bb60      	cbnz	r0, 800b8e6 <rmw_init_options_copy+0x72>
 800b88c:	68b3      	ldr	r3, [r6, #8]
 800b88e:	b113      	cbz	r3, 800b896 <rmw_init_options_copy+0x22>
 800b890:	230b      	movs	r3, #11
 800b892:	4618      	mov	r0, r3
 800b894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b896:	4623      	mov	r3, r4
 800b898:	4632      	mov	r2, r6
 800b89a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800b89e:	681d      	ldr	r5, [r3, #0]
 800b8a0:	6858      	ldr	r0, [r3, #4]
 800b8a2:	6899      	ldr	r1, [r3, #8]
 800b8a4:	68df      	ldr	r7, [r3, #12]
 800b8a6:	60d7      	str	r7, [r2, #12]
 800b8a8:	3310      	adds	r3, #16
 800b8aa:	4563      	cmp	r3, ip
 800b8ac:	6015      	str	r5, [r2, #0]
 800b8ae:	6050      	str	r0, [r2, #4]
 800b8b0:	6091      	str	r1, [r2, #8]
 800b8b2:	f102 0210 	add.w	r2, r2, #16
 800b8b6:	d1f2      	bne.n	800b89e <rmw_init_options_copy+0x2a>
 800b8b8:	6819      	ldr	r1, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	480d      	ldr	r0, [pc, #52]	@ (800b8f4 <rmw_init_options_copy+0x80>)
 800b8be:	6053      	str	r3, [r2, #4]
 800b8c0:	6011      	str	r1, [r2, #0]
 800b8c2:	f007 ff1d 	bl	8013700 <get_memory>
 800b8c6:	b188      	cbz	r0, 800b8ec <rmw_init_options_copy+0x78>
 800b8c8:	68c5      	ldr	r5, [r0, #12]
 800b8ca:	6375      	str	r5, [r6, #52]	@ 0x34
 800b8cc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800b8ce:	3610      	adds	r6, #16
 800b8d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b8d2:	f105 0410 	add.w	r4, r5, #16
 800b8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e7d0      	b.n	800b892 <rmw_init_options_copy+0x1e>
 800b8f0:	0801725c 	.word	0x0801725c
 800b8f4:	2001103c 	.word	0x2001103c

0800b8f8 <rmw_init_options_fini>:
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d036      	beq.n	800b96a <rmw_init_options_fini+0x72>
 800b8fc:	b530      	push	{r4, r5, lr}
 800b8fe:	4604      	mov	r4, r0
 800b900:	b08f      	sub	sp, #60	@ 0x3c
 800b902:	3020      	adds	r0, #32
 800b904:	f7ff fcda 	bl	800b2bc <rcutils_allocator_is_valid>
 800b908:	b328      	cbz	r0, 800b956 <rmw_init_options_fini+0x5e>
 800b90a:	68a0      	ldr	r0, [r4, #8]
 800b90c:	b120      	cbz	r0, 800b918 <rmw_init_options_fini+0x20>
 800b90e:	4b18      	ldr	r3, [pc, #96]	@ (800b970 <rmw_init_options_fini+0x78>)
 800b910:	6819      	ldr	r1, [r3, #0]
 800b912:	f7f4 fc85 	bl	8000220 <strcmp>
 800b916:	bb30      	cbnz	r0, 800b966 <rmw_init_options_fini+0x6e>
 800b918:	4b16      	ldr	r3, [pc, #88]	@ (800b974 <rmw_init_options_fini+0x7c>)
 800b91a:	6819      	ldr	r1, [r3, #0]
 800b91c:	b1f9      	cbz	r1, 800b95e <rmw_init_options_fini+0x66>
 800b91e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b920:	e001      	b.n	800b926 <rmw_init_options_fini+0x2e>
 800b922:	6889      	ldr	r1, [r1, #8]
 800b924:	b1d9      	cbz	r1, 800b95e <rmw_init_options_fini+0x66>
 800b926:	68cb      	ldr	r3, [r1, #12]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d1fa      	bne.n	800b922 <rmw_init_options_fini+0x2a>
 800b92c:	4811      	ldr	r0, [pc, #68]	@ (800b974 <rmw_init_options_fini+0x7c>)
 800b92e:	f007 fef7 	bl	8013720 <put_memory>
 800b932:	466d      	mov	r5, sp
 800b934:	4668      	mov	r0, sp
 800b936:	f7ff fe7d 	bl	800b634 <rmw_get_zero_initialized_init_options>
 800b93a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b93c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b93e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b946:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b94a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b94e:	2300      	movs	r3, #0
 800b950:	4618      	mov	r0, r3
 800b952:	b00f      	add	sp, #60	@ 0x3c
 800b954:	bd30      	pop	{r4, r5, pc}
 800b956:	230b      	movs	r3, #11
 800b958:	4618      	mov	r0, r3
 800b95a:	b00f      	add	sp, #60	@ 0x3c
 800b95c:	bd30      	pop	{r4, r5, pc}
 800b95e:	2301      	movs	r3, #1
 800b960:	4618      	mov	r0, r3
 800b962:	b00f      	add	sp, #60	@ 0x3c
 800b964:	bd30      	pop	{r4, r5, pc}
 800b966:	230c      	movs	r3, #12
 800b968:	e7f2      	b.n	800b950 <rmw_init_options_fini+0x58>
 800b96a:	230b      	movs	r3, #11
 800b96c:	4618      	mov	r0, r3
 800b96e:	4770      	bx	lr
 800b970:	0801725c 	.word	0x0801725c
 800b974:	2001103c 	.word	0x2001103c

0800b978 <rmw_init>:
 800b978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	2800      	cmp	r0, #0
 800b980:	f000 80d6 	beq.w	800bb30 <rmw_init+0x1b8>
 800b984:	460e      	mov	r6, r1
 800b986:	2900      	cmp	r1, #0
 800b988:	f000 80d2 	beq.w	800bb30 <rmw_init+0x1b8>
 800b98c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b98e:	4605      	mov	r5, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 80cd 	beq.w	800bb30 <rmw_init+0x1b8>
 800b996:	4b79      	ldr	r3, [pc, #484]	@ (800bb7c <rmw_init+0x204>)
 800b998:	6880      	ldr	r0, [r0, #8]
 800b99a:	f8d3 9000 	ldr.w	r9, [r3]
 800b99e:	b128      	cbz	r0, 800b9ac <rmw_init+0x34>
 800b9a0:	4649      	mov	r1, r9
 800b9a2:	f7f4 fc3d 	bl	8000220 <strcmp>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f040 80cc 	bne.w	800bb44 <rmw_init+0x1cc>
 800b9ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b9b0:	68eb      	ldr	r3, [r5, #12]
 800b9b2:	61f3      	str	r3, [r6, #28]
 800b9b4:	e9c6 0100 	strd	r0, r1, [r6]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	4971      	ldr	r1, [pc, #452]	@ (800bb80 <rmw_init+0x208>)
 800b9bc:	4871      	ldr	r0, [pc, #452]	@ (800bb84 <rmw_init+0x20c>)
 800b9be:	f8c6 9008 	str.w	r9, [r6, #8]
 800b9c2:	f000 fe8d 	bl	800c6e0 <rmw_uxrce_init_session_memory>
 800b9c6:	4870      	ldr	r0, [pc, #448]	@ (800bb88 <rmw_init+0x210>)
 800b9c8:	4970      	ldr	r1, [pc, #448]	@ (800bb8c <rmw_init+0x214>)
 800b9ca:	2204      	movs	r2, #4
 800b9cc:	f000 fec2 	bl	800c754 <rmw_uxrce_init_static_input_buffer_memory>
 800b9d0:	486c      	ldr	r0, [pc, #432]	@ (800bb84 <rmw_init+0x20c>)
 800b9d2:	f007 fe95 	bl	8013700 <get_memory>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f000 80af 	beq.w	800bb3a <rmw_init+0x1c2>
 800b9dc:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800b9de:	68c4      	ldr	r4, [r0, #12]
 800b9e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9e2:	7c39      	ldrb	r1, [r7, #16]
 800b9e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9e8:	9001      	str	r0, [sp, #4]
 800b9ea:	6a38      	ldr	r0, [r7, #32]
 800b9ec:	9000      	str	r0, [sp, #0]
 800b9ee:	f104 0a10 	add.w	sl, r4, #16
 800b9f2:	4650      	mov	r0, sl
 800b9f4:	f001 fe92 	bl	800d71c <uxr_set_custom_transport_callbacks>
 800b9f8:	f241 5294 	movw	r2, #5524	@ 0x1594
 800b9fc:	f241 5398 	movw	r3, #5528	@ 0x1598
 800ba00:	f04f 0800 	mov.w	r8, #0
 800ba04:	f241 509c 	movw	r0, #5532	@ 0x159c
 800ba08:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800ba0c:	f844 8002 	str.w	r8, [r4, r2]
 800ba10:	f844 8003 	str.w	r8, [r4, r3]
 800ba14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ba18:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800ba1c:	f844 8000 	str.w	r8, [r4, r0]
 800ba20:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800ba24:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ba28:	4859      	ldr	r0, [pc, #356]	@ (800bb90 <rmw_init+0x218>)
 800ba2a:	f8c1 8000 	str.w	r8, [r1]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800ba34:	4957      	ldr	r1, [pc, #348]	@ (800bb94 <rmw_init+0x21c>)
 800ba36:	64b4      	str	r4, [r6, #72]	@ 0x48
 800ba38:	f000 fe38 	bl	800c6ac <rmw_uxrce_init_node_memory>
 800ba3c:	4956      	ldr	r1, [pc, #344]	@ (800bb98 <rmw_init+0x220>)
 800ba3e:	4857      	ldr	r0, [pc, #348]	@ (800bb9c <rmw_init+0x224>)
 800ba40:	2205      	movs	r2, #5
 800ba42:	f000 fe19 	bl	800c678 <rmw_uxrce_init_subscription_memory>
 800ba46:	4956      	ldr	r1, [pc, #344]	@ (800bba0 <rmw_init+0x228>)
 800ba48:	4856      	ldr	r0, [pc, #344]	@ (800bba4 <rmw_init+0x22c>)
 800ba4a:	220a      	movs	r2, #10
 800ba4c:	f000 fdfa 	bl	800c644 <rmw_uxrce_init_publisher_memory>
 800ba50:	4955      	ldr	r1, [pc, #340]	@ (800bba8 <rmw_init+0x230>)
 800ba52:	4856      	ldr	r0, [pc, #344]	@ (800bbac <rmw_init+0x234>)
 800ba54:	2201      	movs	r2, #1
 800ba56:	f000 fdc1 	bl	800c5dc <rmw_uxrce_init_service_memory>
 800ba5a:	4955      	ldr	r1, [pc, #340]	@ (800bbb0 <rmw_init+0x238>)
 800ba5c:	4855      	ldr	r0, [pc, #340]	@ (800bbb4 <rmw_init+0x23c>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f000 fdd6 	bl	800c610 <rmw_uxrce_init_client_memory>
 800ba64:	4954      	ldr	r1, [pc, #336]	@ (800bbb8 <rmw_init+0x240>)
 800ba66:	4855      	ldr	r0, [pc, #340]	@ (800bbbc <rmw_init+0x244>)
 800ba68:	220f      	movs	r2, #15
 800ba6a:	f000 fe57 	bl	800c71c <rmw_uxrce_init_topic_memory>
 800ba6e:	4954      	ldr	r1, [pc, #336]	@ (800bbc0 <rmw_init+0x248>)
 800ba70:	4854      	ldr	r0, [pc, #336]	@ (800bbc4 <rmw_init+0x24c>)
 800ba72:	2203      	movs	r2, #3
 800ba74:	f000 fe8c 	bl	800c790 <rmw_uxrce_init_init_options_impl_memory>
 800ba78:	4953      	ldr	r1, [pc, #332]	@ (800bbc8 <rmw_init+0x250>)
 800ba7a:	4854      	ldr	r0, [pc, #336]	@ (800bbcc <rmw_init+0x254>)
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	f000 fea1 	bl	800c7c4 <rmw_uxrce_init_wait_set_memory>
 800ba82:	4953      	ldr	r1, [pc, #332]	@ (800bbd0 <rmw_init+0x258>)
 800ba84:	4853      	ldr	r0, [pc, #332]	@ (800bbd4 <rmw_init+0x25c>)
 800ba86:	2204      	movs	r2, #4
 800ba88:	f000 feb8 	bl	800c7fc <rmw_uxrce_init_guard_condition_memory>
 800ba8c:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ba8e:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800ba90:	4642      	mov	r2, r8
 800ba92:	f000 fd6b 	bl	800c56c <rmw_uxrce_transport_init>
 800ba96:	4607      	mov	r7, r0
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d158      	bne.n	800bb4e <rmw_init+0x1d6>
 800ba9c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ba9e:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800baa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baa4:	4628      	mov	r0, r5
 800baa6:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800baaa:	f002 f85d 	bl	800db68 <uxr_init_session>
 800baae:	494a      	ldr	r1, [pc, #296]	@ (800bbd8 <rmw_init+0x260>)
 800bab0:	4622      	mov	r2, r4
 800bab2:	4628      	mov	r0, r5
 800bab4:	f002 f87a 	bl	800dbac <uxr_set_topic_callback>
 800bab8:	4948      	ldr	r1, [pc, #288]	@ (800bbdc <rmw_init+0x264>)
 800baba:	463a      	mov	r2, r7
 800babc:	4628      	mov	r0, r5
 800babe:	f002 f871 	bl	800dba4 <uxr_set_status_callback>
 800bac2:	4947      	ldr	r1, [pc, #284]	@ (800bbe0 <rmw_init+0x268>)
 800bac4:	463a      	mov	r2, r7
 800bac6:	4628      	mov	r0, r5
 800bac8:	f002 f874 	bl	800dbb4 <uxr_set_request_callback>
 800bacc:	4945      	ldr	r1, [pc, #276]	@ (800bbe4 <rmw_init+0x26c>)
 800bace:	463a      	mov	r2, r7
 800bad0:	4628      	mov	r0, r5
 800bad2:	f002 f873 	bl	800dbbc <uxr_set_reply_callback>
 800bad6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bada:	2304      	movs	r3, #4
 800badc:	0092      	lsls	r2, r2, #2
 800bade:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bae2:	4628      	mov	r0, r5
 800bae4:	f002 f8aa 	bl	800dc3c <uxr_create_input_reliable_stream>
 800bae8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800baec:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800baf0:	0092      	lsls	r2, r2, #2
 800baf2:	2304      	movs	r3, #4
 800baf4:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800baf8:	4628      	mov	r0, r5
 800bafa:	f002 f875 	bl	800dbe8 <uxr_create_output_reliable_stream>
 800bafe:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800bb02:	4628      	mov	r0, r5
 800bb04:	f002 f894 	bl	800dc30 <uxr_create_input_best_effort_stream>
 800bb08:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800bb0c:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800bb10:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bb14:	4628      	mov	r0, r5
 800bb16:	3114      	adds	r1, #20
 800bb18:	f002 f854 	bl	800dbc4 <uxr_create_output_best_effort_stream>
 800bb1c:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800bb20:	4628      	mov	r0, r5
 800bb22:	f002 fd39 	bl	800e598 <uxr_create_session>
 800bb26:	b1f8      	cbz	r0, 800bb68 <rmw_init+0x1f0>
 800bb28:	4638      	mov	r0, r7
 800bb2a:	b002      	add	sp, #8
 800bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb30:	270b      	movs	r7, #11
 800bb32:	4638      	mov	r0, r7
 800bb34:	b002      	add	sp, #8
 800bb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3a:	2701      	movs	r7, #1
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	b002      	add	sp, #8
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	270c      	movs	r7, #12
 800bb46:	4638      	mov	r0, r7
 800bb48:	b002      	add	sp, #8
 800bb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb4e:	4650      	mov	r0, sl
 800bb50:	f001 fe24 	bl	800d79c <uxr_close_custom_transport>
 800bb54:	480b      	ldr	r0, [pc, #44]	@ (800bb84 <rmw_init+0x20c>)
 800bb56:	4621      	mov	r1, r4
 800bb58:	f007 fde2 	bl	8013720 <put_memory>
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800bb62:	b002      	add	sp, #8
 800bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb68:	4650      	mov	r0, sl
 800bb6a:	f001 fe17 	bl	800d79c <uxr_close_custom_transport>
 800bb6e:	4805      	ldr	r0, [pc, #20]	@ (800bb84 <rmw_init+0x20c>)
 800bb70:	4621      	mov	r1, r4
 800bb72:	f007 fdd5 	bl	8013720 <put_memory>
 800bb76:	64b7      	str	r7, [r6, #72]	@ 0x48
 800bb78:	2701      	movs	r7, #1
 800bb7a:	e7d5      	b.n	800bb28 <rmw_init+0x1b0>
 800bb7c:	0801725c 	.word	0x0801725c
 800bb80:	20011118 	.word	0x20011118
 800bb84:	20010ee8 	.word	0x20010ee8
 800bb88:	2000dd40 	.word	0x2000dd40
 800bb8c:	2000eb20 	.word	0x2000eb20
 800bb90:	20010d14 	.word	0x20010d14
 800bb94:	20010ef8 	.word	0x20010ef8
 800bb98:	2000e648 	.word	0x2000e648
 800bb9c:	20010fac 	.word	0x20010fac
 800bba0:	2000dd60 	.word	0x2000dd60
 800bba4:	2000dd50 	.word	0x2000dd50
 800bba8:	20011050 	.word	0x20011050
 800bbac:	20010f9c 	.word	0x20010f9c
 800bbb0:	2000ea58 	.word	0x2000ea58
 800bbb4:	2000e5d0 	.word	0x2000e5d0
 800bbb8:	20010d24 	.word	0x20010d24
 800bbbc:	20010ed8 	.word	0x20010ed8
 800bbc0:	20010c90 	.word	0x20010c90
 800bbc4:	2001103c 	.word	0x2001103c
 800bbc8:	20010c20 	.word	0x20010c20
 800bbcc:	200126c0 	.word	0x200126c0
 800bbd0:	20010fbc 	.word	0x20010fbc
 800bbd4:	20010ec8 	.word	0x20010ec8
 800bbd8:	08013541 	.word	0x08013541
 800bbdc:	08013539 	.word	0x08013539
 800bbe0:	080135d5 	.word	0x080135d5
 800bbe4:	0801366d 	.word	0x0801366d

0800bbe8 <rmw_context_fini>:
 800bbe8:	4b17      	ldr	r3, [pc, #92]	@ (800bc48 <rmw_context_fini+0x60>)
 800bbea:	b570      	push	{r4, r5, r6, lr}
 800bbec:	681c      	ldr	r4, [r3, #0]
 800bbee:	4605      	mov	r5, r0
 800bbf0:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800bbf2:	b33c      	cbz	r4, 800bc44 <rmw_context_fini+0x5c>
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800bbfa:	691a      	ldr	r2, [r3, #16]
 800bbfc:	4282      	cmp	r2, r0
 800bbfe:	d018      	beq.n	800bc32 <rmw_context_fini+0x4a>
 800bc00:	2c00      	cmp	r4, #0
 800bc02:	d1f8      	bne.n	800bbf6 <rmw_context_fini+0xe>
 800bc04:	b188      	cbz	r0, 800bc2a <rmw_context_fini+0x42>
 800bc06:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bc0a:	789b      	ldrb	r3, [r3, #2]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	bf14      	ite	ne
 800bc10:	210a      	movne	r1, #10
 800bc12:	2100      	moveq	r1, #0
 800bc14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bc18:	f002 fe80 	bl	800e91c <uxr_delete_session_retries>
 800bc1c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bc1e:	f000 fe07 	bl	800c830 <rmw_uxrce_fini_session_memory>
 800bc22:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bc24:	3010      	adds	r0, #16
 800bc26:	f001 fdb9 	bl	800d79c <uxr_close_custom_transport>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	64ab      	str	r3, [r5, #72]	@ 0x48
 800bc30:	bd70      	pop	{r4, r5, r6, pc}
 800bc32:	f103 0018 	add.w	r0, r3, #24
 800bc36:	f000 f89b 	bl	800bd70 <rmw_destroy_node>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800bc3e:	2c00      	cmp	r4, #0
 800bc40:	d1d9      	bne.n	800bbf6 <rmw_context_fini+0xe>
 800bc42:	e7df      	b.n	800bc04 <rmw_context_fini+0x1c>
 800bc44:	4626      	mov	r6, r4
 800bc46:	e7dd      	b.n	800bc04 <rmw_context_fini+0x1c>
 800bc48:	20010d14 	.word	0x20010d14

0800bc4c <create_node>:
 800bc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc50:	b083      	sub	sp, #12
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d05f      	beq.n	800bd16 <create_node+0xca>
 800bc56:	4606      	mov	r6, r0
 800bc58:	4835      	ldr	r0, [pc, #212]	@ (800bd30 <create_node+0xe4>)
 800bc5a:	460f      	mov	r7, r1
 800bc5c:	4690      	mov	r8, r2
 800bc5e:	461d      	mov	r5, r3
 800bc60:	f007 fd4e 	bl	8013700 <get_memory>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d056      	beq.n	800bd16 <create_node+0xca>
 800bc68:	68c4      	ldr	r4, [r0, #12]
 800bc6a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800bc6c:	6123      	str	r3, [r4, #16]
 800bc6e:	f007 fdaf 	bl	80137d0 <rmw_get_implementation_identifier>
 800bc72:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bc76:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bc7a:	f8c4 9020 	str.w	r9, [r4, #32]
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7f4 fad8 	bl	8000234 <strlen>
 800bc84:	1c42      	adds	r2, r0, #1
 800bc86:	2a3c      	cmp	r2, #60	@ 0x3c
 800bc88:	f104 0518 	add.w	r5, r4, #24
 800bc8c:	d840      	bhi.n	800bd10 <create_node+0xc4>
 800bc8e:	4648      	mov	r0, r9
 800bc90:	4631      	mov	r1, r6
 800bc92:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bc96:	f009 fe72 	bl	801597e <memcpy>
 800bc9a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bc9e:	4638      	mov	r0, r7
 800bca0:	f7f4 fac8 	bl	8000234 <strlen>
 800bca4:	1c42      	adds	r2, r0, #1
 800bca6:	2a3c      	cmp	r2, #60	@ 0x3c
 800bca8:	d832      	bhi.n	800bd10 <create_node+0xc4>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4648      	mov	r0, r9
 800bcae:	f009 fe66 	bl	801597e <memcpy>
 800bcb2:	f241 5394 	movw	r3, #5524	@ 0x1594
 800bcb6:	6922      	ldr	r2, [r4, #16]
 800bcb8:	5ad0      	ldrh	r0, [r2, r3]
 800bcba:	2101      	movs	r1, #1
 800bcbc:	eb00 0c01 	add.w	ip, r0, r1
 800bcc0:	f822 c003 	strh.w	ip, [r2, r3]
 800bcc4:	f001 fd6e 	bl	800d7a4 <uxr_object_id>
 800bcc8:	6160      	str	r0, [r4, #20]
 800bcca:	783b      	ldrb	r3, [r7, #0]
 800bccc:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcce:	d127      	bne.n	800bd20 <create_node+0xd4>
 800bcd0:	787b      	ldrb	r3, [r7, #1]
 800bcd2:	bb2b      	cbnz	r3, 800bd20 <create_node+0xd4>
 800bcd4:	4a17      	ldr	r2, [pc, #92]	@ (800bd34 <create_node+0xe8>)
 800bcd6:	4818      	ldr	r0, [pc, #96]	@ (800bd38 <create_node+0xec>)
 800bcd8:	4633      	mov	r3, r6
 800bcda:	213c      	movs	r1, #60	@ 0x3c
 800bcdc:	f009 fc66 	bl	80155ac <sniprintf>
 800bce0:	6920      	ldr	r0, [r4, #16]
 800bce2:	4b15      	ldr	r3, [pc, #84]	@ (800bd38 <create_node+0xec>)
 800bce4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	2306      	movs	r3, #6
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	6811      	ldr	r1, [r2, #0]
 800bcf0:	6962      	ldr	r2, [r4, #20]
 800bcf2:	fa1f f388 	uxth.w	r3, r8
 800bcf6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bcfa:	f001 fadd 	bl	800d2b8 <uxr_buffer_create_participant_bin>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	6920      	ldr	r0, [r4, #16]
 800bd02:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bd06:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bd0a:	f000 ff01 	bl	800cb10 <run_xrce_session>
 800bd0e:	b918      	cbnz	r0, 800bd18 <create_node+0xcc>
 800bd10:	4628      	mov	r0, r5
 800bd12:	f000 fd93 	bl	800c83c <rmw_uxrce_fini_node_memory>
 800bd16:	2500      	movs	r5, #0
 800bd18:	4628      	mov	r0, r5
 800bd1a:	b003      	add	sp, #12
 800bd1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd20:	4a06      	ldr	r2, [pc, #24]	@ (800bd3c <create_node+0xf0>)
 800bd22:	9600      	str	r6, [sp, #0]
 800bd24:	463b      	mov	r3, r7
 800bd26:	213c      	movs	r1, #60	@ 0x3c
 800bd28:	4803      	ldr	r0, [pc, #12]	@ (800bd38 <create_node+0xec>)
 800bd2a:	f009 fc3f 	bl	80155ac <sniprintf>
 800bd2e:	e7d7      	b.n	800bce0 <create_node+0x94>
 800bd30:	20010d14 	.word	0x20010d14
 800bd34:	08016b1c 	.word	0x08016b1c
 800bd38:	2000daa8 	.word	0x2000daa8
 800bd3c:	08016b04 	.word	0x08016b04

0800bd40 <rmw_create_node>:
 800bd40:	b199      	cbz	r1, 800bd6a <rmw_create_node+0x2a>
 800bd42:	b430      	push	{r4, r5}
 800bd44:	4615      	mov	r5, r2
 800bd46:	461a      	mov	r2, r3
 800bd48:	780b      	ldrb	r3, [r1, #0]
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	b153      	cbz	r3, 800bd64 <rmw_create_node+0x24>
 800bd4e:	b14d      	cbz	r5, 800bd64 <rmw_create_node+0x24>
 800bd50:	782b      	ldrb	r3, [r5, #0]
 800bd52:	b13b      	cbz	r3, 800bd64 <rmw_create_node+0x24>
 800bd54:	b902      	cbnz	r2, 800bd58 <rmw_create_node+0x18>
 800bd56:	69c2      	ldr	r2, [r0, #28]
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	bc30      	pop	{r4, r5}
 800bd60:	f7ff bf74 	b.w	800bc4c <create_node>
 800bd64:	2000      	movs	r0, #0
 800bd66:	bc30      	pop	{r4, r5}
 800bd68:	4770      	bx	lr
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop

0800bd70 <rmw_destroy_node>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	b328      	cbz	r0, 800bdc0 <rmw_destroy_node+0x50>
 800bd74:	4607      	mov	r7, r0
 800bd76:	6800      	ldr	r0, [r0, #0]
 800bd78:	b120      	cbz	r0, 800bd84 <rmw_destroy_node+0x14>
 800bd7a:	4b36      	ldr	r3, [pc, #216]	@ (800be54 <rmw_destroy_node+0xe4>)
 800bd7c:	6819      	ldr	r1, [r3, #0]
 800bd7e:	f7f4 fa4f 	bl	8000220 <strcmp>
 800bd82:	b9e8      	cbnz	r0, 800bdc0 <rmw_destroy_node+0x50>
 800bd84:	687d      	ldr	r5, [r7, #4]
 800bd86:	b1dd      	cbz	r5, 800bdc0 <rmw_destroy_node+0x50>
 800bd88:	4b33      	ldr	r3, [pc, #204]	@ (800be58 <rmw_destroy_node+0xe8>)
 800bd8a:	681c      	ldr	r4, [r3, #0]
 800bd8c:	2c00      	cmp	r4, #0
 800bd8e:	d05f      	beq.n	800be50 <rmw_destroy_node+0xe0>
 800bd90:	2600      	movs	r6, #0
 800bd92:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800bd96:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800bd9a:	429d      	cmp	r5, r3
 800bd9c:	d013      	beq.n	800bdc6 <rmw_destroy_node+0x56>
 800bd9e:	2c00      	cmp	r4, #0
 800bda0:	d1f7      	bne.n	800bd92 <rmw_destroy_node+0x22>
 800bda2:	4b2e      	ldr	r3, [pc, #184]	@ (800be5c <rmw_destroy_node+0xec>)
 800bda4:	681c      	ldr	r4, [r3, #0]
 800bda6:	b1c4      	cbz	r4, 800bdda <rmw_destroy_node+0x6a>
 800bda8:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800bdac:	6a0b      	ldr	r3, [r1, #32]
 800bdae:	429d      	cmp	r5, r3
 800bdb0:	d1f9      	bne.n	800bda6 <rmw_destroy_node+0x36>
 800bdb2:	317c      	adds	r1, #124	@ 0x7c
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	f000 fb27 	bl	800c408 <rmw_destroy_subscription>
 800bdba:	2801      	cmp	r0, #1
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	d1f2      	bne.n	800bda6 <rmw_destroy_node+0x36>
 800bdc0:	2601      	movs	r6, #1
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc6:	3184      	adds	r1, #132	@ 0x84
 800bdc8:	4638      	mov	r0, r7
 800bdca:	f000 f99f 	bl	800c10c <rmw_destroy_publisher>
 800bdce:	2801      	cmp	r0, #1
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	d0f5      	beq.n	800bdc0 <rmw_destroy_node+0x50>
 800bdd4:	2c00      	cmp	r4, #0
 800bdd6:	d1dc      	bne.n	800bd92 <rmw_destroy_node+0x22>
 800bdd8:	e7e3      	b.n	800bda2 <rmw_destroy_node+0x32>
 800bdda:	4b21      	ldr	r3, [pc, #132]	@ (800be60 <rmw_destroy_node+0xf0>)
 800bddc:	681c      	ldr	r4, [r3, #0]
 800bdde:	b16c      	cbz	r4, 800bdfc <rmw_destroy_node+0x8c>
 800bde0:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800bde4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800bde6:	429d      	cmp	r5, r3
 800bde8:	d1f9      	bne.n	800bdde <rmw_destroy_node+0x6e>
 800bdea:	317c      	adds	r1, #124	@ 0x7c
 800bdec:	4638      	mov	r0, r7
 800bdee:	f000 f9dd 	bl	800c1ac <rmw_destroy_service>
 800bdf2:	2801      	cmp	r0, #1
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	d0e3      	beq.n	800bdc0 <rmw_destroy_node+0x50>
 800bdf8:	2c00      	cmp	r4, #0
 800bdfa:	d1f1      	bne.n	800bde0 <rmw_destroy_node+0x70>
 800bdfc:	4b19      	ldr	r3, [pc, #100]	@ (800be64 <rmw_destroy_node+0xf4>)
 800bdfe:	681c      	ldr	r4, [r3, #0]
 800be00:	b16c      	cbz	r4, 800be1e <rmw_destroy_node+0xae>
 800be02:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800be06:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800be08:	429d      	cmp	r5, r3
 800be0a:	d1f9      	bne.n	800be00 <rmw_destroy_node+0x90>
 800be0c:	317c      	adds	r1, #124	@ 0x7c
 800be0e:	4638      	mov	r0, r7
 800be10:	f007 fc9a 	bl	8013748 <rmw_destroy_client>
 800be14:	2801      	cmp	r0, #1
 800be16:	4606      	mov	r6, r0
 800be18:	d0d2      	beq.n	800bdc0 <rmw_destroy_node+0x50>
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	d1f1      	bne.n	800be02 <rmw_destroy_node+0x92>
 800be1e:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800be22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800be26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be2a:	6819      	ldr	r1, [r3, #0]
 800be2c:	f001 f9f8 	bl	800d220 <uxr_buffer_delete_entity>
 800be30:	4602      	mov	r2, r0
 800be32:	6928      	ldr	r0, [r5, #16]
 800be34:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be38:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be3c:	f000 fe68 	bl	800cb10 <run_xrce_session>
 800be40:	2800      	cmp	r0, #0
 800be42:	bf08      	it	eq
 800be44:	2602      	moveq	r6, #2
 800be46:	4638      	mov	r0, r7
 800be48:	f000 fcf8 	bl	800c83c <rmw_uxrce_fini_node_memory>
 800be4c:	4630      	mov	r0, r6
 800be4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be50:	4626      	mov	r6, r4
 800be52:	e7a6      	b.n	800bda2 <rmw_destroy_node+0x32>
 800be54:	0801725c 	.word	0x0801725c
 800be58:	2000dd50 	.word	0x2000dd50
 800be5c:	20010fac 	.word	0x20010fac
 800be60:	20010f9c 	.word	0x20010f9c
 800be64:	2000e5d0 	.word	0x2000e5d0

0800be68 <rmw_node_get_graph_guard_condition>:
 800be68:	6843      	ldr	r3, [r0, #4]
 800be6a:	6918      	ldr	r0, [r3, #16]
 800be6c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop

0800be74 <flush_session>:
 800be74:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800be76:	f002 bac3 	b.w	800e400 <uxr_run_session_until_confirm_delivery>
 800be7a:	bf00      	nop

0800be7c <rmw_publish>:
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d053      	beq.n	800bf28 <rmw_publish+0xac>
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	460d      	mov	r5, r1
 800be84:	b08e      	sub	sp, #56	@ 0x38
 800be86:	2900      	cmp	r1, #0
 800be88:	d04b      	beq.n	800bf22 <rmw_publish+0xa6>
 800be8a:	4604      	mov	r4, r0
 800be8c:	6800      	ldr	r0, [r0, #0]
 800be8e:	f000 febf 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800be92:	2800      	cmp	r0, #0
 800be94:	d045      	beq.n	800bf22 <rmw_publish+0xa6>
 800be96:	6866      	ldr	r6, [r4, #4]
 800be98:	2e00      	cmp	r6, #0
 800be9a:	d042      	beq.n	800bf22 <rmw_publish+0xa6>
 800be9c:	69b4      	ldr	r4, [r6, #24]
 800be9e:	4628      	mov	r0, r5
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	4798      	blx	r3
 800bea4:	69f3      	ldr	r3, [r6, #28]
 800bea6:	9005      	str	r0, [sp, #20]
 800bea8:	b113      	cbz	r3, 800beb0 <rmw_publish+0x34>
 800beaa:	a805      	add	r0, sp, #20
 800beac:	4798      	blx	r3
 800beae:	9805      	ldr	r0, [sp, #20]
 800beb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	9000      	str	r0, [sp, #0]
 800beb8:	6972      	ldr	r2, [r6, #20]
 800beba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bebc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bec0:	ab06      	add	r3, sp, #24
 800bec2:	f003 fd77 	bl	800f9b4 <uxr_prepare_output_stream>
 800bec6:	b1d8      	cbz	r0, 800bf00 <rmw_publish+0x84>
 800bec8:	68a3      	ldr	r3, [r4, #8]
 800beca:	4628      	mov	r0, r5
 800becc:	a906      	add	r1, sp, #24
 800bece:	4798      	blx	r3
 800bed0:	6a33      	ldr	r3, [r6, #32]
 800bed2:	4604      	mov	r4, r0
 800bed4:	b10b      	cbz	r3, 800beda <rmw_publish+0x5e>
 800bed6:	a806      	add	r0, sp, #24
 800bed8:	4798      	blx	r3
 800beda:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800bede:	2b01      	cmp	r3, #1
 800bee0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bee4:	d022      	beq.n	800bf2c <rmw_publish+0xb0>
 800bee6:	6918      	ldr	r0, [r3, #16]
 800bee8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800beea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800beee:	f002 fa87 	bl	800e400 <uxr_run_session_until_confirm_delivery>
 800bef2:	4020      	ands	r0, r4
 800bef4:	b2c4      	uxtb	r4, r0
 800bef6:	f084 0001 	eor.w	r0, r4, #1
 800befa:	b2c0      	uxtb	r0, r0
 800befc:	b00e      	add	sp, #56	@ 0x38
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bf04:	4a0c      	ldr	r2, [pc, #48]	@ (800bf38 <rmw_publish+0xbc>)
 800bf06:	6918      	ldr	r0, [r3, #16]
 800bf08:	9b05      	ldr	r3, [sp, #20]
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800bf10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf14:	6972      	ldr	r2, [r6, #20]
 800bf16:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bf18:	ab06      	add	r3, sp, #24
 800bf1a:	f003 fd7b 	bl	800fa14 <uxr_prepare_output_stream_fragmented>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d1d2      	bne.n	800bec8 <rmw_publish+0x4c>
 800bf22:	2001      	movs	r0, #1
 800bf24:	b00e      	add	sp, #56	@ 0x38
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	2001      	movs	r0, #1
 800bf2a:	4770      	bx	lr
 800bf2c:	6918      	ldr	r0, [r3, #16]
 800bf2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf32:	f001 fea9 	bl	800dc88 <uxr_flash_output_streams>
 800bf36:	e7de      	b.n	800bef6 <rmw_publish+0x7a>
 800bf38:	0800be75 	.word	0x0800be75

0800bf3c <rmw_create_publisher>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	b087      	sub	sp, #28
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f000 80c9 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf48:	460e      	mov	r6, r1
 800bf4a:	2900      	cmp	r1, #0
 800bf4c:	f000 80c5 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf50:	4604      	mov	r4, r0
 800bf52:	6800      	ldr	r0, [r0, #0]
 800bf54:	4615      	mov	r5, r2
 800bf56:	4698      	mov	r8, r3
 800bf58:	f000 fe5a 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	f000 80bc 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf62:	2d00      	cmp	r5, #0
 800bf64:	f000 80b9 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf68:	782b      	ldrb	r3, [r5, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f000 80b5 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf70:	f1b8 0f00 	cmp.w	r8, #0
 800bf74:	f000 80b1 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf78:	485a      	ldr	r0, [pc, #360]	@ (800c0e4 <rmw_create_publisher+0x1a8>)
 800bf7a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bf7e:	f007 fbbf 	bl	8013700 <get_memory>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f000 80a9 	beq.w	800c0da <rmw_create_publisher+0x19e>
 800bf88:	68c4      	ldr	r4, [r0, #12]
 800bf8a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800bf8e:	f007 fc1f 	bl	80137d0 <rmw_get_implementation_identifier>
 800bf92:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800bf96:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bf9a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f7f4 f948 	bl	8000234 <strlen>
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	283c      	cmp	r0, #60	@ 0x3c
 800bfa8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800bfac:	f200 808e 	bhi.w	800c0cc <rmw_create_publisher+0x190>
 800bfb0:	4a4d      	ldr	r2, [pc, #308]	@ (800c0e8 <rmw_create_publisher+0x1ac>)
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	213c      	movs	r1, #60	@ 0x3c
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	f009 faf8 	bl	80155ac <sniprintf>
 800bfbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bfc0:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 800bfc4:	4641      	mov	r1, r8
 800bfc6:	2250      	movs	r2, #80	@ 0x50
 800bfc8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bfcc:	f009 fcd7 	bl	801597e <memcpy>
 800bfd0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bfd4:	4945      	ldr	r1, [pc, #276]	@ (800c0ec <rmw_create_publisher+0x1b0>)
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfdc:	bf0c      	ite	eq
 800bfde:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800bfe2:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bfe6:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bfe8:	2300      	movs	r3, #0
 800bfea:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 fe1c 	bl	800cc2c <get_message_typesupport_handle>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d069      	beq.n	800c0cc <rmw_create_publisher+0x190>
 800bff8:	6842      	ldr	r2, [r0, #4]
 800bffa:	61a2      	str	r2, [r4, #24]
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	d065      	beq.n	800c0cc <rmw_create_publisher+0x190>
 800c000:	4629      	mov	r1, r5
 800c002:	4643      	mov	r3, r8
 800c004:	4648      	mov	r0, r9
 800c006:	f007 fbe9 	bl	80137dc <create_topic>
 800c00a:	6260      	str	r0, [r4, #36]	@ 0x24
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d061      	beq.n	800c0d4 <rmw_create_publisher+0x198>
 800c010:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c014:	f241 5398 	movw	r3, #5528	@ 0x1598
 800c018:	2103      	movs	r1, #3
 800c01a:	5ad0      	ldrh	r0, [r2, r3]
 800c01c:	1c45      	adds	r5, r0, #1
 800c01e:	52d5      	strh	r5, [r2, r3]
 800c020:	f001 fbc0 	bl	800d7a4 <uxr_object_id>
 800c024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c028:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c02c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c030:	6912      	ldr	r2, [r2, #16]
 800c032:	6120      	str	r0, [r4, #16]
 800c034:	f04f 0a06 	mov.w	sl, #6
 800c038:	f8cd a000 	str.w	sl, [sp]
 800c03c:	6819      	ldr	r1, [r3, #0]
 800c03e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c042:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 800c046:	6922      	ldr	r2, [r4, #16]
 800c048:	f001 f99c 	bl	800d384 <uxr_buffer_create_publisher_bin>
 800c04c:	4602      	mov	r2, r0
 800c04e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c052:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c056:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c05a:	f000 fd59 	bl	800cb10 <run_xrce_session>
 800c05e:	b3a8      	cbz	r0, 800c0cc <rmw_create_publisher+0x190>
 800c060:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c064:	f241 539a 	movw	r3, #5530	@ 0x159a
 800c068:	2105      	movs	r1, #5
 800c06a:	5ad0      	ldrh	r0, [r2, r3]
 800c06c:	1c45      	adds	r5, r0, #1
 800c06e:	52d5      	strh	r5, [r2, r3]
 800c070:	f001 fb98 	bl	800d7a4 <uxr_object_id>
 800c074:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c078:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c07c:	6915      	ldr	r5, [r2, #16]
 800c07e:	6160      	str	r0, [r4, #20]
 800c080:	ae04      	add	r6, sp, #16
 800c082:	4641      	mov	r1, r8
 800c084:	4630      	mov	r0, r6
 800c086:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c08a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c08e:	f000 fd5b 	bl	800cb48 <convert_qos_profile>
 800c092:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c096:	f8cd a00c 	str.w	sl, [sp, #12]
 800c09a:	9001      	str	r0, [sp, #4]
 800c09c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c0a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800c0aa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c0ae:	f8d8 1000 	ldr.w	r1, [r8]
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f001 f9c4 	bl	800d440 <uxr_buffer_create_datawriter_bin>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c0be:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c0c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c0c6:	f000 fd23 	bl	800cb10 <run_xrce_session>
 800c0ca:	b938      	cbnz	r0, 800c0dc <rmw_create_publisher+0x1a0>
 800c0cc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c0ce:	b108      	cbz	r0, 800c0d4 <rmw_create_publisher+0x198>
 800c0d0:	f000 fc24 	bl	800c91c <rmw_uxrce_fini_topic_memory>
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f000 fbc9 	bl	800c86c <rmw_uxrce_fini_publisher_memory>
 800c0da:	2700      	movs	r7, #0
 800c0dc:	4638      	mov	r0, r7
 800c0de:	b007      	add	sp, #28
 800c0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e4:	2000dd50 	.word	0x2000dd50
 800c0e8:	08016b1c 	.word	0x08016b1c
 800c0ec:	080168d0 	.word	0x080168d0

0800c0f0 <rmw_publisher_get_actual_qos>:
 800c0f0:	b150      	cbz	r0, 800c108 <rmw_publisher_get_actual_qos+0x18>
 800c0f2:	b149      	cbz	r1, 800c108 <rmw_publisher_get_actual_qos+0x18>
 800c0f4:	b508      	push	{r3, lr}
 800c0f6:	6843      	ldr	r3, [r0, #4]
 800c0f8:	2250      	movs	r2, #80	@ 0x50
 800c0fa:	4608      	mov	r0, r1
 800c0fc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c100:	f009 fc3d 	bl	801597e <memcpy>
 800c104:	2000      	movs	r0, #0
 800c106:	bd08      	pop	{r3, pc}
 800c108:	200b      	movs	r0, #11
 800c10a:	4770      	bx	lr

0800c10c <rmw_destroy_publisher>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	b128      	cbz	r0, 800c11c <rmw_destroy_publisher+0x10>
 800c110:	4604      	mov	r4, r0
 800c112:	6800      	ldr	r0, [r0, #0]
 800c114:	460d      	mov	r5, r1
 800c116:	f000 fd7b 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c11a:	b910      	cbnz	r0, 800c122 <rmw_destroy_publisher+0x16>
 800c11c:	2401      	movs	r4, #1
 800c11e:	4620      	mov	r0, r4
 800c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c122:	6863      	ldr	r3, [r4, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0f9      	beq.n	800c11c <rmw_destroy_publisher+0x10>
 800c128:	2d00      	cmp	r5, #0
 800c12a:	d0f7      	beq.n	800c11c <rmw_destroy_publisher+0x10>
 800c12c:	6828      	ldr	r0, [r5, #0]
 800c12e:	f000 fd6f 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c132:	2800      	cmp	r0, #0
 800c134:	d0f2      	beq.n	800c11c <rmw_destroy_publisher+0x10>
 800c136:	686c      	ldr	r4, [r5, #4]
 800c138:	2c00      	cmp	r4, #0
 800c13a:	d0ef      	beq.n	800c11c <rmw_destroy_publisher+0x10>
 800c13c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c13e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c142:	f007 fb9b 	bl	801387c <destroy_topic>
 800c146:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c14a:	6962      	ldr	r2, [r4, #20]
 800c14c:	6918      	ldr	r0, [r3, #16]
 800c14e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c152:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c156:	6819      	ldr	r1, [r3, #0]
 800c158:	f001 f862 	bl	800d220 <uxr_buffer_delete_entity>
 800c15c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800c160:	6922      	ldr	r2, [r4, #16]
 800c162:	4603      	mov	r3, r0
 800c164:	6908      	ldr	r0, [r1, #16]
 800c166:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c16a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c16e:	6809      	ldr	r1, [r1, #0]
 800c170:	461c      	mov	r4, r3
 800c172:	f001 f855 	bl	800d220 <uxr_buffer_delete_entity>
 800c176:	4606      	mov	r6, r0
 800c178:	6938      	ldr	r0, [r7, #16]
 800c17a:	4622      	mov	r2, r4
 800c17c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c180:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c184:	f000 fcc4 	bl	800cb10 <run_xrce_session>
 800c188:	4604      	mov	r4, r0
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	4632      	mov	r2, r6
 800c18e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c192:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c196:	f000 fcbb 	bl	800cb10 <run_xrce_session>
 800c19a:	b12c      	cbz	r4, 800c1a8 <rmw_destroy_publisher+0x9c>
 800c19c:	b120      	cbz	r0, 800c1a8 <rmw_destroy_publisher+0x9c>
 800c19e:	2400      	movs	r4, #0
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f000 fb63 	bl	800c86c <rmw_uxrce_fini_publisher_memory>
 800c1a6:	e7ba      	b.n	800c11e <rmw_destroy_publisher+0x12>
 800c1a8:	2402      	movs	r4, #2
 800c1aa:	e7f9      	b.n	800c1a0 <rmw_destroy_publisher+0x94>

0800c1ac <rmw_destroy_service>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	b128      	cbz	r0, 800c1bc <rmw_destroy_service+0x10>
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	6800      	ldr	r0, [r0, #0]
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	f000 fd2b 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c1ba:	b910      	cbnz	r0, 800c1c2 <rmw_destroy_service+0x16>
 800c1bc:	2401      	movs	r4, #1
 800c1be:	4620      	mov	r0, r4
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
 800c1c2:	6863      	ldr	r3, [r4, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0f9      	beq.n	800c1bc <rmw_destroy_service+0x10>
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	d0f7      	beq.n	800c1bc <rmw_destroy_service+0x10>
 800c1cc:	6828      	ldr	r0, [r5, #0]
 800c1ce:	f000 fd1f 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d0f2      	beq.n	800c1bc <rmw_destroy_service+0x10>
 800c1d6:	686e      	ldr	r6, [r5, #4]
 800c1d8:	2e00      	cmp	r6, #0
 800c1da:	d0ef      	beq.n	800c1bc <rmw_destroy_service+0x10>
 800c1dc:	6864      	ldr	r4, [r4, #4]
 800c1de:	6932      	ldr	r2, [r6, #16]
 800c1e0:	6920      	ldr	r0, [r4, #16]
 800c1e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c1e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1ea:	6819      	ldr	r1, [r3, #0]
 800c1ec:	f001 fb42 	bl	800d874 <uxr_buffer_cancel_data>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	6920      	ldr	r0, [r4, #16]
 800c1f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c1f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c1fc:	f000 fc88 	bl	800cb10 <run_xrce_session>
 800c200:	6920      	ldr	r0, [r4, #16]
 800c202:	6932      	ldr	r2, [r6, #16]
 800c204:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c20c:	6819      	ldr	r1, [r3, #0]
 800c20e:	f001 f807 	bl	800d220 <uxr_buffer_delete_entity>
 800c212:	4602      	mov	r2, r0
 800c214:	6920      	ldr	r0, [r4, #16]
 800c216:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c21a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c21e:	f000 fc77 	bl	800cb10 <run_xrce_session>
 800c222:	2800      	cmp	r0, #0
 800c224:	4628      	mov	r0, r5
 800c226:	bf14      	ite	ne
 800c228:	2400      	movne	r4, #0
 800c22a:	2402      	moveq	r4, #2
 800c22c:	f000 fb4a 	bl	800c8c4 <rmw_uxrce_fini_service_memory>
 800c230:	e7c5      	b.n	800c1be <rmw_destroy_service+0x12>
 800c232:	bf00      	nop

0800c234 <rmw_create_subscription>:
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	b08d      	sub	sp, #52	@ 0x34
 800c23a:	2800      	cmp	r0, #0
 800c23c:	f000 80cb 	beq.w	800c3d6 <rmw_create_subscription+0x1a2>
 800c240:	460e      	mov	r6, r1
 800c242:	2900      	cmp	r1, #0
 800c244:	f000 80c7 	beq.w	800c3d6 <rmw_create_subscription+0x1a2>
 800c248:	4604      	mov	r4, r0
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	4615      	mov	r5, r2
 800c24e:	4698      	mov	r8, r3
 800c250:	f000 fcde 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c254:	2800      	cmp	r0, #0
 800c256:	f000 80be 	beq.w	800c3d6 <rmw_create_subscription+0x1a2>
 800c25a:	2d00      	cmp	r5, #0
 800c25c:	f000 80bb 	beq.w	800c3d6 <rmw_create_subscription+0x1a2>
 800c260:	782b      	ldrb	r3, [r5, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 80b7 	beq.w	800c3d6 <rmw_create_subscription+0x1a2>
 800c268:	f1b8 0f00 	cmp.w	r8, #0
 800c26c:	f000 80b3 	beq.w	800c3d6 <rmw_create_subscription+0x1a2>
 800c270:	485b      	ldr	r0, [pc, #364]	@ (800c3e0 <rmw_create_subscription+0x1ac>)
 800c272:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c276:	f007 fa43 	bl	8013700 <get_memory>
 800c27a:	4604      	mov	r4, r0
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f000 80ab 	beq.w	800c3d8 <rmw_create_subscription+0x1a4>
 800c282:	68c7      	ldr	r7, [r0, #12]
 800c284:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c288:	f007 faa2 	bl	80137d0 <rmw_get_implementation_identifier>
 800c28c:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 800c290:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c292:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c296:	4628      	mov	r0, r5
 800c298:	f7f3 ffcc 	bl	8000234 <strlen>
 800c29c:	3001      	adds	r0, #1
 800c29e:	283c      	cmp	r0, #60	@ 0x3c
 800c2a0:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c2a4:	f200 8090 	bhi.w	800c3c8 <rmw_create_subscription+0x194>
 800c2a8:	4a4e      	ldr	r2, [pc, #312]	@ (800c3e4 <rmw_create_subscription+0x1b0>)
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	213c      	movs	r1, #60	@ 0x3c
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	f009 f97c 	bl	80155ac <sniprintf>
 800c2b4:	4641      	mov	r1, r8
 800c2b6:	f8c7 9020 	str.w	r9, [r7, #32]
 800c2ba:	2250      	movs	r2, #80	@ 0x50
 800c2bc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c2c0:	f009 fb5d 	bl	801597e <memcpy>
 800c2c4:	4948      	ldr	r1, [pc, #288]	@ (800c3e8 <rmw_create_subscription+0x1b4>)
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f000 fcb0 	bl	800cc2c <get_message_typesupport_handle>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d07b      	beq.n	800c3c8 <rmw_create_subscription+0x194>
 800c2d0:	6842      	ldr	r2, [r0, #4]
 800c2d2:	61ba      	str	r2, [r7, #24]
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	d077      	beq.n	800c3c8 <rmw_create_subscription+0x194>
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4643      	mov	r3, r8
 800c2dc:	4648      	mov	r0, r9
 800c2de:	f007 fa7d 	bl	80137dc <create_topic>
 800c2e2:	61f8      	str	r0, [r7, #28]
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d073      	beq.n	800c3d0 <rmw_create_subscription+0x19c>
 800c2e8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c2ec:	f241 539c 	movw	r3, #5532	@ 0x159c
 800c2f0:	2104      	movs	r1, #4
 800c2f2:	5ad0      	ldrh	r0, [r2, r3]
 800c2f4:	1c45      	adds	r5, r0, #1
 800c2f6:	52d5      	strh	r5, [r2, r3]
 800c2f8:	f001 fa54 	bl	800d7a4 <uxr_object_id>
 800c2fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c300:	6138      	str	r0, [r7, #16]
 800c302:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800c306:	2606      	movs	r6, #6
 800c308:	9600      	str	r6, [sp, #0]
 800c30a:	6811      	ldr	r1, [r2, #0]
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c312:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c316:	f001 f863 	bl	800d3e0 <uxr_buffer_create_subscriber_bin>
 800c31a:	4602      	mov	r2, r0
 800c31c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c320:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c324:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c328:	f000 fbf2 	bl	800cb10 <run_xrce_session>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	d04b      	beq.n	800c3c8 <rmw_create_subscription+0x194>
 800c330:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c334:	f241 539e 	movw	r3, #5534	@ 0x159e
 800c338:	4631      	mov	r1, r6
 800c33a:	5ad0      	ldrh	r0, [r2, r3]
 800c33c:	1c45      	adds	r5, r0, #1
 800c33e:	52d5      	strh	r5, [r2, r3]
 800c340:	f001 fa30 	bl	800d7a4 <uxr_object_id>
 800c344:	ad08      	add	r5, sp, #32
 800c346:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	6178      	str	r0, [r7, #20]
 800c34e:	4641      	mov	r1, r8
 800c350:	4628      	mov	r0, r5
 800c352:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c356:	9305      	str	r3, [sp, #20]
 800c358:	f000 fbf6 	bl	800cb48 <convert_qos_profile>
 800c35c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c360:	9b05      	ldr	r3, [sp, #20]
 800c362:	9001      	str	r0, [sp, #4]
 800c364:	9603      	str	r6, [sp, #12]
 800c366:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c372:	f8db 1000 	ldr.w	r1, [fp]
 800c376:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c37a:	f001 f8d9 	bl	800d530 <uxr_buffer_create_datareader_bin>
 800c37e:	4602      	mov	r2, r0
 800c380:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c384:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c388:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c38c:	f000 fbc0 	bl	800cb10 <run_xrce_session>
 800c390:	b1d0      	cbz	r0, 800c3c8 <rmw_create_subscription+0x194>
 800c392:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c396:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c39a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c39e:	2200      	movs	r2, #0
 800c3a0:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3aa:	bf0c      	ite	eq
 800c3ac:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c3b0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c3b4:	9307      	str	r3, [sp, #28]
 800c3b6:	aa0a      	add	r2, sp, #40	@ 0x28
 800c3b8:	9200      	str	r2, [sp, #0]
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	6809      	ldr	r1, [r1, #0]
 800c3be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3c2:	f001 fa1d 	bl	800d800 <uxr_buffer_request_data>
 800c3c6:	e007      	b.n	800c3d8 <rmw_create_subscription+0x1a4>
 800c3c8:	69f8      	ldr	r0, [r7, #28]
 800c3ca:	b108      	cbz	r0, 800c3d0 <rmw_create_subscription+0x19c>
 800c3cc:	f000 faa6 	bl	800c91c <rmw_uxrce_fini_topic_memory>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 fa61 	bl	800c898 <rmw_uxrce_fini_subscription_memory>
 800c3d6:	2400      	movs	r4, #0
 800c3d8:	4620      	mov	r0, r4
 800c3da:	b00d      	add	sp, #52	@ 0x34
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	20010fac 	.word	0x20010fac
 800c3e4:	08016b1c 	.word	0x08016b1c
 800c3e8:	080168d0 	.word	0x080168d0

0800c3ec <rmw_subscription_get_actual_qos>:
 800c3ec:	b150      	cbz	r0, 800c404 <rmw_subscription_get_actual_qos+0x18>
 800c3ee:	b149      	cbz	r1, 800c404 <rmw_subscription_get_actual_qos+0x18>
 800c3f0:	b508      	push	{r3, lr}
 800c3f2:	6843      	ldr	r3, [r0, #4]
 800c3f4:	2250      	movs	r2, #80	@ 0x50
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c3fc:	f009 fabf 	bl	801597e <memcpy>
 800c400:	2000      	movs	r0, #0
 800c402:	bd08      	pop	{r3, pc}
 800c404:	200b      	movs	r0, #11
 800c406:	4770      	bx	lr

0800c408 <rmw_destroy_subscription>:
 800c408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40a:	b128      	cbz	r0, 800c418 <rmw_destroy_subscription+0x10>
 800c40c:	4604      	mov	r4, r0
 800c40e:	6800      	ldr	r0, [r0, #0]
 800c410:	460d      	mov	r5, r1
 800c412:	f000 fbfd 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c416:	b910      	cbnz	r0, 800c41e <rmw_destroy_subscription+0x16>
 800c418:	2401      	movs	r4, #1
 800c41a:	4620      	mov	r0, r4
 800c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c41e:	6863      	ldr	r3, [r4, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0f9      	beq.n	800c418 <rmw_destroy_subscription+0x10>
 800c424:	2d00      	cmp	r5, #0
 800c426:	d0f7      	beq.n	800c418 <rmw_destroy_subscription+0x10>
 800c428:	6828      	ldr	r0, [r5, #0]
 800c42a:	f000 fbf1 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d0f2      	beq.n	800c418 <rmw_destroy_subscription+0x10>
 800c432:	686c      	ldr	r4, [r5, #4]
 800c434:	2c00      	cmp	r4, #0
 800c436:	d0ef      	beq.n	800c418 <rmw_destroy_subscription+0x10>
 800c438:	6a26      	ldr	r6, [r4, #32]
 800c43a:	6962      	ldr	r2, [r4, #20]
 800c43c:	6930      	ldr	r0, [r6, #16]
 800c43e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c442:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c446:	6819      	ldr	r1, [r3, #0]
 800c448:	f001 fa14 	bl	800d874 <uxr_buffer_cancel_data>
 800c44c:	4602      	mov	r2, r0
 800c44e:	6930      	ldr	r0, [r6, #16]
 800c450:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c454:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c458:	f000 fb5a 	bl	800cb10 <run_xrce_session>
 800c45c:	69e0      	ldr	r0, [r4, #28]
 800c45e:	f007 fa0d 	bl	801387c <destroy_topic>
 800c462:	6a23      	ldr	r3, [r4, #32]
 800c464:	6962      	ldr	r2, [r4, #20]
 800c466:	6918      	ldr	r0, [r3, #16]
 800c468:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c46c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c470:	6819      	ldr	r1, [r3, #0]
 800c472:	f000 fed5 	bl	800d220 <uxr_buffer_delete_entity>
 800c476:	6a21      	ldr	r1, [r4, #32]
 800c478:	6922      	ldr	r2, [r4, #16]
 800c47a:	4603      	mov	r3, r0
 800c47c:	6908      	ldr	r0, [r1, #16]
 800c47e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c482:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c486:	6809      	ldr	r1, [r1, #0]
 800c488:	461c      	mov	r4, r3
 800c48a:	f000 fec9 	bl	800d220 <uxr_buffer_delete_entity>
 800c48e:	4607      	mov	r7, r0
 800c490:	6930      	ldr	r0, [r6, #16]
 800c492:	4622      	mov	r2, r4
 800c494:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c498:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c49c:	f000 fb38 	bl	800cb10 <run_xrce_session>
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	6930      	ldr	r0, [r6, #16]
 800c4a4:	463a      	mov	r2, r7
 800c4a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c4aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c4ae:	f000 fb2f 	bl	800cb10 <run_xrce_session>
 800c4b2:	b12c      	cbz	r4, 800c4c0 <rmw_destroy_subscription+0xb8>
 800c4b4:	b120      	cbz	r0, 800c4c0 <rmw_destroy_subscription+0xb8>
 800c4b6:	2400      	movs	r4, #0
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f000 f9ed 	bl	800c898 <rmw_uxrce_fini_subscription_memory>
 800c4be:	e7ac      	b.n	800c41a <rmw_destroy_subscription+0x12>
 800c4c0:	2402      	movs	r4, #2
 800c4c2:	e7f9      	b.n	800c4b8 <rmw_destroy_subscription+0xb0>

0800c4c4 <rmw_take_with_info>:
 800c4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	6800      	ldr	r0, [r0, #0]
 800c4ca:	b089      	sub	sp, #36	@ 0x24
 800c4cc:	460f      	mov	r7, r1
 800c4ce:	4615      	mov	r5, r2
 800c4d0:	b128      	cbz	r0, 800c4de <rmw_take_with_info+0x1a>
 800c4d2:	4b24      	ldr	r3, [pc, #144]	@ (800c564 <rmw_take_with_info+0xa0>)
 800c4d4:	6819      	ldr	r1, [r3, #0]
 800c4d6:	f7f3 fea3 	bl	8000220 <strcmp>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d13e      	bne.n	800c55c <rmw_take_with_info+0x98>
 800c4de:	b305      	cbz	r5, 800c522 <rmw_take_with_info+0x5e>
 800c4e0:	6864      	ldr	r4, [r4, #4]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	702b      	strb	r3, [r5, #0]
 800c4e6:	f000 fa9b 	bl	800ca20 <rmw_uxrce_clean_expired_static_input_buffer>
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fa6e 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	b1f0      	cbz	r0, 800c532 <rmw_take_with_info+0x6e>
 800c4f4:	68c1      	ldr	r1, [r0, #12]
 800c4f6:	4668      	mov	r0, sp
 800c4f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c4fc:	3110      	adds	r1, #16
 800c4fe:	f7fd fd93 	bl	800a028 <ucdr_init_buffer>
 800c502:	69a3      	ldr	r3, [r4, #24]
 800c504:	4639      	mov	r1, r7
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	4668      	mov	r0, sp
 800c50a:	4798      	blx	r3
 800c50c:	4631      	mov	r1, r6
 800c50e:	4604      	mov	r4, r0
 800c510:	4815      	ldr	r0, [pc, #84]	@ (800c568 <rmw_take_with_info+0xa4>)
 800c512:	f007 f905 	bl	8013720 <put_memory>
 800c516:	702c      	strb	r4, [r5, #0]
 800c518:	f084 0001 	eor.w	r0, r4, #1
 800c51c:	b2c0      	uxtb	r0, r0
 800c51e:	b009      	add	sp, #36	@ 0x24
 800c520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c522:	6864      	ldr	r4, [r4, #4]
 800c524:	f000 fa7c 	bl	800ca20 <rmw_uxrce_clean_expired_static_input_buffer>
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 fa4f 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 800c52e:	4605      	mov	r5, r0
 800c530:	b910      	cbnz	r0, 800c538 <rmw_take_with_info+0x74>
 800c532:	2001      	movs	r0, #1
 800c534:	b009      	add	sp, #36	@ 0x24
 800c536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c538:	68e9      	ldr	r1, [r5, #12]
 800c53a:	4668      	mov	r0, sp
 800c53c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800c540:	3110      	adds	r1, #16
 800c542:	f7fd fd71 	bl	800a028 <ucdr_init_buffer>
 800c546:	69a3      	ldr	r3, [r4, #24]
 800c548:	4639      	mov	r1, r7
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	4668      	mov	r0, sp
 800c54e:	4798      	blx	r3
 800c550:	4629      	mov	r1, r5
 800c552:	4604      	mov	r4, r0
 800c554:	4804      	ldr	r0, [pc, #16]	@ (800c568 <rmw_take_with_info+0xa4>)
 800c556:	f007 f8e3 	bl	8013720 <put_memory>
 800c55a:	e7dd      	b.n	800c518 <rmw_take_with_info+0x54>
 800c55c:	200c      	movs	r0, #12
 800c55e:	b009      	add	sp, #36	@ 0x24
 800c560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c562:	bf00      	nop
 800c564:	0801725c 	.word	0x0801725c
 800c568:	2000dd40 	.word	0x2000dd40

0800c56c <rmw_uxrce_transport_init>:
 800c56c:	b508      	push	{r3, lr}
 800c56e:	b108      	cbz	r0, 800c574 <rmw_uxrce_transport_init+0x8>
 800c570:	f100 0210 	add.w	r2, r0, #16
 800c574:	b139      	cbz	r1, 800c586 <rmw_uxrce_transport_init+0x1a>
 800c576:	6949      	ldr	r1, [r1, #20]
 800c578:	4610      	mov	r0, r2
 800c57a:	f001 f8db 	bl	800d734 <uxr_init_custom_transport>
 800c57e:	f080 0001 	eor.w	r0, r0, #1
 800c582:	b2c0      	uxtb	r0, r0
 800c584:	bd08      	pop	{r3, pc}
 800c586:	4b04      	ldr	r3, [pc, #16]	@ (800c598 <rmw_uxrce_transport_init+0x2c>)
 800c588:	4610      	mov	r0, r2
 800c58a:	6859      	ldr	r1, [r3, #4]
 800c58c:	f001 f8d2 	bl	800d734 <uxr_init_custom_transport>
 800c590:	f080 0001 	eor.w	r0, r0, #1
 800c594:	b2c0      	uxtb	r0, r0
 800c596:	bd08      	pop	{r3, pc}
 800c598:	2000dd20 	.word	0x2000dd20

0800c59c <rmw_uros_epoch_nanos>:
 800c59c:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <rmw_uros_epoch_nanos+0x18>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	b123      	cbz	r3, 800c5ac <rmw_uros_epoch_nanos+0x10>
 800c5a2:	68d8      	ldr	r0, [r3, #12]
 800c5a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5a8:	f001 bb64 	b.w	800dc74 <uxr_epoch_nanos>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20010ee8 	.word	0x20010ee8

0800c5b8 <rmw_uros_sync_session>:
 800c5b8:	b508      	push	{r3, lr}
 800c5ba:	4b07      	ldr	r3, [pc, #28]	@ (800c5d8 <rmw_uros_sync_session+0x20>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	b14b      	cbz	r3, 800c5d4 <rmw_uros_sync_session+0x1c>
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	68d8      	ldr	r0, [r3, #12]
 800c5c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c5c8:	f001 ff92 	bl	800e4f0 <uxr_sync_session>
 800c5cc:	f080 0001 	eor.w	r0, r0, #1
 800c5d0:	b2c0      	uxtb	r0, r0
 800c5d2:	bd08      	pop	{r3, pc}
 800c5d4:	2001      	movs	r0, #1
 800c5d6:	bd08      	pop	{r3, pc}
 800c5d8:	20010ee8 	.word	0x20010ee8

0800c5dc <rmw_uxrce_init_service_memory>:
 800c5dc:	b1b2      	cbz	r2, 800c60c <rmw_uxrce_init_service_memory+0x30>
 800c5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e0:	7a07      	ldrb	r7, [r0, #8]
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	b98f      	cbnz	r7, 800c60a <rmw_uxrce_init_service_memory+0x2e>
 800c5e6:	e9c0 7700 	strd	r7, r7, [r0]
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	23c8      	movs	r3, #200	@ 0xc8
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	fb03 4602 	mla	r6, r3, r2, r4
 800c5f4:	60c3      	str	r3, [r0, #12]
 800c5f6:	7201      	strb	r1, [r0, #8]
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f007 f890 	bl	8013720 <put_memory>
 800c600:	60e4      	str	r4, [r4, #12]
 800c602:	f804 7bc8 	strb.w	r7, [r4], #200
 800c606:	42a6      	cmp	r6, r4
 800c608:	d1f6      	bne.n	800c5f8 <rmw_uxrce_init_service_memory+0x1c>
 800c60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop

0800c610 <rmw_uxrce_init_client_memory>:
 800c610:	b1b2      	cbz	r2, 800c640 <rmw_uxrce_init_client_memory+0x30>
 800c612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c614:	7a07      	ldrb	r7, [r0, #8]
 800c616:	4605      	mov	r5, r0
 800c618:	b98f      	cbnz	r7, 800c63e <rmw_uxrce_init_client_memory+0x2e>
 800c61a:	e9c0 7700 	strd	r7, r7, [r0]
 800c61e:	460c      	mov	r4, r1
 800c620:	23c8      	movs	r3, #200	@ 0xc8
 800c622:	2101      	movs	r1, #1
 800c624:	fb03 4602 	mla	r6, r3, r2, r4
 800c628:	60c3      	str	r3, [r0, #12]
 800c62a:	7201      	strb	r1, [r0, #8]
 800c62c:	4621      	mov	r1, r4
 800c62e:	4628      	mov	r0, r5
 800c630:	f007 f876 	bl	8013720 <put_memory>
 800c634:	60e4      	str	r4, [r4, #12]
 800c636:	f804 7bc8 	strb.w	r7, [r4], #200
 800c63a:	42a6      	cmp	r6, r4
 800c63c:	d1f6      	bne.n	800c62c <rmw_uxrce_init_client_memory+0x1c>
 800c63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop

0800c644 <rmw_uxrce_init_publisher_memory>:
 800c644:	b1b2      	cbz	r2, 800c674 <rmw_uxrce_init_publisher_memory+0x30>
 800c646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c648:	7a07      	ldrb	r7, [r0, #8]
 800c64a:	4605      	mov	r5, r0
 800c64c:	b98f      	cbnz	r7, 800c672 <rmw_uxrce_init_publisher_memory+0x2e>
 800c64e:	e9c0 7700 	strd	r7, r7, [r0]
 800c652:	460c      	mov	r4, r1
 800c654:	23d8      	movs	r3, #216	@ 0xd8
 800c656:	2101      	movs	r1, #1
 800c658:	fb03 4602 	mla	r6, r3, r2, r4
 800c65c:	60c3      	str	r3, [r0, #12]
 800c65e:	7201      	strb	r1, [r0, #8]
 800c660:	4621      	mov	r1, r4
 800c662:	4628      	mov	r0, r5
 800c664:	f007 f85c 	bl	8013720 <put_memory>
 800c668:	60e4      	str	r4, [r4, #12]
 800c66a:	f804 7bd8 	strb.w	r7, [r4], #216
 800c66e:	42a6      	cmp	r6, r4
 800c670:	d1f6      	bne.n	800c660 <rmw_uxrce_init_publisher_memory+0x1c>
 800c672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop

0800c678 <rmw_uxrce_init_subscription_memory>:
 800c678:	b1b2      	cbz	r2, 800c6a8 <rmw_uxrce_init_subscription_memory+0x30>
 800c67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67c:	7a07      	ldrb	r7, [r0, #8]
 800c67e:	4605      	mov	r5, r0
 800c680:	b98f      	cbnz	r7, 800c6a6 <rmw_uxrce_init_subscription_memory+0x2e>
 800c682:	e9c0 7700 	strd	r7, r7, [r0]
 800c686:	460c      	mov	r4, r1
 800c688:	23d0      	movs	r3, #208	@ 0xd0
 800c68a:	2101      	movs	r1, #1
 800c68c:	fb03 4602 	mla	r6, r3, r2, r4
 800c690:	60c3      	str	r3, [r0, #12]
 800c692:	7201      	strb	r1, [r0, #8]
 800c694:	4621      	mov	r1, r4
 800c696:	4628      	mov	r0, r5
 800c698:	f007 f842 	bl	8013720 <put_memory>
 800c69c:	60e4      	str	r4, [r4, #12]
 800c69e:	f804 7bd0 	strb.w	r7, [r4], #208
 800c6a2:	42a6      	cmp	r6, r4
 800c6a4:	d1f6      	bne.n	800c694 <rmw_uxrce_init_subscription_memory+0x1c>
 800c6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop

0800c6ac <rmw_uxrce_init_node_memory>:
 800c6ac:	b1b2      	cbz	r2, 800c6dc <rmw_uxrce_init_node_memory+0x30>
 800c6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b0:	7a07      	ldrb	r7, [r0, #8]
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	b98f      	cbnz	r7, 800c6da <rmw_uxrce_init_node_memory+0x2e>
 800c6b6:	e9c0 7700 	strd	r7, r7, [r0]
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	23a4      	movs	r3, #164	@ 0xa4
 800c6be:	2101      	movs	r1, #1
 800c6c0:	fb03 4602 	mla	r6, r3, r2, r4
 800c6c4:	60c3      	str	r3, [r0, #12]
 800c6c6:	7201      	strb	r1, [r0, #8]
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f007 f828 	bl	8013720 <put_memory>
 800c6d0:	60e4      	str	r4, [r4, #12]
 800c6d2:	f804 7ba4 	strb.w	r7, [r4], #164
 800c6d6:	42a6      	cmp	r6, r4
 800c6d8:	d1f6      	bne.n	800c6c8 <rmw_uxrce_init_node_memory+0x1c>
 800c6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop

0800c6e0 <rmw_uxrce_init_session_memory>:
 800c6e0:	b1d2      	cbz	r2, 800c718 <rmw_uxrce_init_session_memory+0x38>
 800c6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e6:	7a07      	ldrb	r7, [r0, #8]
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	b99f      	cbnz	r7, 800c714 <rmw_uxrce_init_session_memory+0x34>
 800c6ec:	e9c0 7700 	strd	r7, r7, [r0]
 800c6f0:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	fb03 4602 	mla	r6, r3, r2, r4
 800c6fc:	60c3      	str	r3, [r0, #12]
 800c6fe:	4698      	mov	r8, r3
 800c700:	7201      	strb	r1, [r0, #8]
 800c702:	4621      	mov	r1, r4
 800c704:	4628      	mov	r0, r5
 800c706:	f007 f80b 	bl	8013720 <put_memory>
 800c70a:	60e4      	str	r4, [r4, #12]
 800c70c:	7027      	strb	r7, [r4, #0]
 800c70e:	4444      	add	r4, r8
 800c710:	42a6      	cmp	r6, r4
 800c712:	d1f6      	bne.n	800c702 <rmw_uxrce_init_session_memory+0x22>
 800c714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop

0800c71c <rmw_uxrce_init_topic_memory>:
 800c71c:	b1c2      	cbz	r2, 800c750 <rmw_uxrce_init_topic_memory+0x34>
 800c71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c720:	7a07      	ldrb	r7, [r0, #8]
 800c722:	4606      	mov	r6, r0
 800c724:	b99f      	cbnz	r7, 800c74e <rmw_uxrce_init_topic_memory+0x32>
 800c726:	e9c0 7700 	strd	r7, r7, [r0]
 800c72a:	460c      	mov	r4, r1
 800c72c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c730:	2101      	movs	r1, #1
 800c732:	231c      	movs	r3, #28
 800c734:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c738:	7201      	strb	r1, [r0, #8]
 800c73a:	60c3      	str	r3, [r0, #12]
 800c73c:	4621      	mov	r1, r4
 800c73e:	4630      	mov	r0, r6
 800c740:	f006 ffee 	bl	8013720 <put_memory>
 800c744:	60e4      	str	r4, [r4, #12]
 800c746:	f804 7b1c 	strb.w	r7, [r4], #28
 800c74a:	42a5      	cmp	r5, r4
 800c74c:	d1f6      	bne.n	800c73c <rmw_uxrce_init_topic_memory+0x20>
 800c74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop

0800c754 <rmw_uxrce_init_static_input_buffer_memory>:
 800c754:	b1d2      	cbz	r2, 800c78c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800c756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c758:	7a07      	ldrb	r7, [r0, #8]
 800c75a:	4606      	mov	r6, r0
 800c75c:	b9af      	cbnz	r7, 800c78a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800c75e:	e9c0 7700 	strd	r7, r7, [r0]
 800c762:	460c      	mov	r4, r1
 800c764:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800c768:	2101      	movs	r1, #1
 800c76a:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c76e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800c772:	7201      	strb	r1, [r0, #8]
 800c774:	60c3      	str	r3, [r0, #12]
 800c776:	4621      	mov	r1, r4
 800c778:	4630      	mov	r0, r6
 800c77a:	f006 ffd1 	bl	8013720 <put_memory>
 800c77e:	60e4      	str	r4, [r4, #12]
 800c780:	7027      	strb	r7, [r4, #0]
 800c782:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c786:	42a5      	cmp	r5, r4
 800c788:	d1f5      	bne.n	800c776 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop

0800c790 <rmw_uxrce_init_init_options_impl_memory>:
 800c790:	b1b2      	cbz	r2, 800c7c0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800c792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c794:	7a07      	ldrb	r7, [r0, #8]
 800c796:	4605      	mov	r5, r0
 800c798:	b98f      	cbnz	r7, 800c7be <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800c79a:	e9c0 7700 	strd	r7, r7, [r0]
 800c79e:	460c      	mov	r4, r1
 800c7a0:	232c      	movs	r3, #44	@ 0x2c
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	fb03 4602 	mla	r6, r3, r2, r4
 800c7a8:	60c3      	str	r3, [r0, #12]
 800c7aa:	7201      	strb	r1, [r0, #8]
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f006 ffb6 	bl	8013720 <put_memory>
 800c7b4:	60e4      	str	r4, [r4, #12]
 800c7b6:	f804 7b2c 	strb.w	r7, [r4], #44
 800c7ba:	42a6      	cmp	r6, r4
 800c7bc:	d1f6      	bne.n	800c7ac <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800c7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop

0800c7c4 <rmw_uxrce_init_wait_set_memory>:
 800c7c4:	b1c2      	cbz	r2, 800c7f8 <rmw_uxrce_init_wait_set_memory+0x34>
 800c7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c8:	7a07      	ldrb	r7, [r0, #8]
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	b99f      	cbnz	r7, 800c7f6 <rmw_uxrce_init_wait_set_memory+0x32>
 800c7ce:	e9c0 7700 	strd	r7, r7, [r0]
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c7d8:	2101      	movs	r1, #1
 800c7da:	231c      	movs	r3, #28
 800c7dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7e0:	7201      	strb	r1, [r0, #8]
 800c7e2:	60c3      	str	r3, [r0, #12]
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f006 ff9a 	bl	8013720 <put_memory>
 800c7ec:	60e4      	str	r4, [r4, #12]
 800c7ee:	f804 7b1c 	strb.w	r7, [r4], #28
 800c7f2:	42a5      	cmp	r5, r4
 800c7f4:	d1f6      	bne.n	800c7e4 <rmw_uxrce_init_wait_set_memory+0x20>
 800c7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop

0800c7fc <rmw_uxrce_init_guard_condition_memory>:
 800c7fc:	b1b2      	cbz	r2, 800c82c <rmw_uxrce_init_guard_condition_memory+0x30>
 800c7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c800:	7a07      	ldrb	r7, [r0, #8]
 800c802:	4605      	mov	r5, r0
 800c804:	b98f      	cbnz	r7, 800c82a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800c806:	e9c0 7700 	strd	r7, r7, [r0]
 800c80a:	460c      	mov	r4, r1
 800c80c:	2320      	movs	r3, #32
 800c80e:	2101      	movs	r1, #1
 800c810:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800c814:	7201      	strb	r1, [r0, #8]
 800c816:	60c3      	str	r3, [r0, #12]
 800c818:	4621      	mov	r1, r4
 800c81a:	4628      	mov	r0, r5
 800c81c:	f006 ff80 	bl	8013720 <put_memory>
 800c820:	60e4      	str	r4, [r4, #12]
 800c822:	f804 7b20 	strb.w	r7, [r4], #32
 800c826:	42a6      	cmp	r6, r4
 800c828:	d1f6      	bne.n	800c818 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800c82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop

0800c830 <rmw_uxrce_fini_session_memory>:
 800c830:	4601      	mov	r1, r0
 800c832:	4801      	ldr	r0, [pc, #4]	@ (800c838 <rmw_uxrce_fini_session_memory+0x8>)
 800c834:	f006 bf74 	b.w	8013720 <put_memory>
 800c838:	20010ee8 	.word	0x20010ee8

0800c83c <rmw_uxrce_fini_node_memory>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	6800      	ldr	r0, [r0, #0]
 800c842:	b128      	cbz	r0, 800c850 <rmw_uxrce_fini_node_memory+0x14>
 800c844:	4b07      	ldr	r3, [pc, #28]	@ (800c864 <rmw_uxrce_fini_node_memory+0x28>)
 800c846:	6819      	ldr	r1, [r3, #0]
 800c848:	f7f3 fcea 	bl	8000220 <strcmp>
 800c84c:	b940      	cbnz	r0, 800c860 <rmw_uxrce_fini_node_memory+0x24>
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	6861      	ldr	r1, [r4, #4]
 800c852:	b129      	cbz	r1, 800c860 <rmw_uxrce_fini_node_memory+0x24>
 800c854:	2500      	movs	r5, #0
 800c856:	4804      	ldr	r0, [pc, #16]	@ (800c868 <rmw_uxrce_fini_node_memory+0x2c>)
 800c858:	610d      	str	r5, [r1, #16]
 800c85a:	f006 ff61 	bl	8013720 <put_memory>
 800c85e:	6065      	str	r5, [r4, #4]
 800c860:	bd38      	pop	{r3, r4, r5, pc}
 800c862:	bf00      	nop
 800c864:	0801725c 	.word	0x0801725c
 800c868:	20010d14 	.word	0x20010d14

0800c86c <rmw_uxrce_fini_publisher_memory>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	4604      	mov	r4, r0
 800c870:	6800      	ldr	r0, [r0, #0]
 800c872:	b128      	cbz	r0, 800c880 <rmw_uxrce_fini_publisher_memory+0x14>
 800c874:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c876:	6819      	ldr	r1, [r3, #0]
 800c878:	f7f3 fcd2 	bl	8000220 <strcmp>
 800c87c:	b938      	cbnz	r0, 800c88e <rmw_uxrce_fini_publisher_memory+0x22>
 800c87e:	6020      	str	r0, [r4, #0]
 800c880:	6861      	ldr	r1, [r4, #4]
 800c882:	b121      	cbz	r1, 800c88e <rmw_uxrce_fini_publisher_memory+0x22>
 800c884:	4803      	ldr	r0, [pc, #12]	@ (800c894 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c886:	f006 ff4b 	bl	8013720 <put_memory>
 800c88a:	2300      	movs	r3, #0
 800c88c:	6063      	str	r3, [r4, #4]
 800c88e:	bd10      	pop	{r4, pc}
 800c890:	0801725c 	.word	0x0801725c
 800c894:	2000dd50 	.word	0x2000dd50

0800c898 <rmw_uxrce_fini_subscription_memory>:
 800c898:	b510      	push	{r4, lr}
 800c89a:	4604      	mov	r4, r0
 800c89c:	6800      	ldr	r0, [r0, #0]
 800c89e:	b128      	cbz	r0, 800c8ac <rmw_uxrce_fini_subscription_memory+0x14>
 800c8a0:	4b06      	ldr	r3, [pc, #24]	@ (800c8bc <rmw_uxrce_fini_subscription_memory+0x24>)
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	f7f3 fcbc 	bl	8000220 <strcmp>
 800c8a8:	b938      	cbnz	r0, 800c8ba <rmw_uxrce_fini_subscription_memory+0x22>
 800c8aa:	6020      	str	r0, [r4, #0]
 800c8ac:	6861      	ldr	r1, [r4, #4]
 800c8ae:	b121      	cbz	r1, 800c8ba <rmw_uxrce_fini_subscription_memory+0x22>
 800c8b0:	4803      	ldr	r0, [pc, #12]	@ (800c8c0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c8b2:	f006 ff35 	bl	8013720 <put_memory>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	bd10      	pop	{r4, pc}
 800c8bc:	0801725c 	.word	0x0801725c
 800c8c0:	20010fac 	.word	0x20010fac

0800c8c4 <rmw_uxrce_fini_service_memory>:
 800c8c4:	b510      	push	{r4, lr}
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	6800      	ldr	r0, [r0, #0]
 800c8ca:	b128      	cbz	r0, 800c8d8 <rmw_uxrce_fini_service_memory+0x14>
 800c8cc:	4b06      	ldr	r3, [pc, #24]	@ (800c8e8 <rmw_uxrce_fini_service_memory+0x24>)
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	f7f3 fca6 	bl	8000220 <strcmp>
 800c8d4:	b938      	cbnz	r0, 800c8e6 <rmw_uxrce_fini_service_memory+0x22>
 800c8d6:	6020      	str	r0, [r4, #0]
 800c8d8:	6861      	ldr	r1, [r4, #4]
 800c8da:	b121      	cbz	r1, 800c8e6 <rmw_uxrce_fini_service_memory+0x22>
 800c8dc:	4803      	ldr	r0, [pc, #12]	@ (800c8ec <rmw_uxrce_fini_service_memory+0x28>)
 800c8de:	f006 ff1f 	bl	8013720 <put_memory>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6063      	str	r3, [r4, #4]
 800c8e6:	bd10      	pop	{r4, pc}
 800c8e8:	0801725c 	.word	0x0801725c
 800c8ec:	20010f9c 	.word	0x20010f9c

0800c8f0 <rmw_uxrce_fini_client_memory>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	6800      	ldr	r0, [r0, #0]
 800c8f6:	b128      	cbz	r0, 800c904 <rmw_uxrce_fini_client_memory+0x14>
 800c8f8:	4b06      	ldr	r3, [pc, #24]	@ (800c914 <rmw_uxrce_fini_client_memory+0x24>)
 800c8fa:	6819      	ldr	r1, [r3, #0]
 800c8fc:	f7f3 fc90 	bl	8000220 <strcmp>
 800c900:	b938      	cbnz	r0, 800c912 <rmw_uxrce_fini_client_memory+0x22>
 800c902:	6020      	str	r0, [r4, #0]
 800c904:	6861      	ldr	r1, [r4, #4]
 800c906:	b121      	cbz	r1, 800c912 <rmw_uxrce_fini_client_memory+0x22>
 800c908:	4803      	ldr	r0, [pc, #12]	@ (800c918 <rmw_uxrce_fini_client_memory+0x28>)
 800c90a:	f006 ff09 	bl	8013720 <put_memory>
 800c90e:	2300      	movs	r3, #0
 800c910:	6063      	str	r3, [r4, #4]
 800c912:	bd10      	pop	{r4, pc}
 800c914:	0801725c 	.word	0x0801725c
 800c918:	2000e5d0 	.word	0x2000e5d0

0800c91c <rmw_uxrce_fini_topic_memory>:
 800c91c:	b510      	push	{r4, lr}
 800c91e:	4601      	mov	r1, r0
 800c920:	4604      	mov	r4, r0
 800c922:	4803      	ldr	r0, [pc, #12]	@ (800c930 <rmw_uxrce_fini_topic_memory+0x14>)
 800c924:	f006 fefc 	bl	8013720 <put_memory>
 800c928:	2300      	movs	r3, #0
 800c92a:	61a3      	str	r3, [r4, #24]
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	bf00      	nop
 800c930:	20010ed8 	.word	0x20010ed8

0800c934 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c934:	b082      	sub	sp, #8
 800c936:	b4f0      	push	{r4, r5, r6, r7}
 800c938:	4923      	ldr	r1, [pc, #140]	@ (800c9c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800c93a:	ac04      	add	r4, sp, #16
 800c93c:	e884 000c 	stmia.w	r4, {r2, r3}
 800c940:	680d      	ldr	r5, [r1, #0]
 800c942:	9c05      	ldr	r4, [sp, #20]
 800c944:	2d00      	cmp	r5, #0
 800c946:	d03d      	beq.n	800c9c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800c948:	462b      	mov	r3, r5
 800c94a:	2100      	movs	r1, #0
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c954:	4290      	cmp	r0, r2
 800c956:	bf08      	it	eq
 800c958:	3101      	addeq	r1, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1f6      	bne.n	800c94c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c95e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c962:	2b02      	cmp	r3, #2
 800c964:	d026      	beq.n	800c9b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800c966:	d906      	bls.n	800c976 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d004      	beq.n	800c976 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800c96c:	2100      	movs	r1, #0
 800c96e:	bcf0      	pop	{r4, r5, r6, r7}
 800c970:	4608      	mov	r0, r1
 800c972:	b002      	add	sp, #8
 800c974:	4770      	bx	lr
 800c976:	b304      	cbz	r4, 800c9ba <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c978:	428c      	cmp	r4, r1
 800c97a:	d81e      	bhi.n	800c9ba <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c97c:	2d00      	cmp	r5, #0
 800c97e:	d0f5      	beq.n	800c96c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c980:	2100      	movs	r1, #0
 800c982:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800c986:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800c98a:	e002      	b.n	800c992 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800c98c:	68ad      	ldr	r5, [r5, #8]
 800c98e:	2d00      	cmp	r5, #0
 800c990:	d0ed      	beq.n	800c96e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c992:	68eb      	ldr	r3, [r5, #12]
 800c994:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c998:	4290      	cmp	r0, r2
 800c99a:	d1f7      	bne.n	800c98c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800c99c:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	42b2      	cmp	r2, r6
 800c9a6:	eb73 0407 	sbcs.w	r4, r3, r7
 800c9aa:	daef      	bge.n	800c98c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800c9ac:	4616      	mov	r6, r2
 800c9ae:	461f      	mov	r7, r3
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	e7eb      	b.n	800c98c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800c9b4:	b10c      	cbz	r4, 800c9ba <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c9b6:	428c      	cmp	r4, r1
 800c9b8:	d9d8      	bls.n	800c96c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c9ba:	bcf0      	pop	{r4, r5, r6, r7}
 800c9bc:	4802      	ldr	r0, [pc, #8]	@ (800c9c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800c9be:	b002      	add	sp, #8
 800c9c0:	f006 be9e 	b.w	8013700 <get_memory>
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	e7ca      	b.n	800c95e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c9c8:	2000dd40 	.word	0x2000dd40

0800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c9cc:	4b12      	ldr	r3, [pc, #72]	@ (800ca18 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	b1fb      	cbz	r3, 800ca12 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800c9d2:	b4f0      	push	{r4, r5, r6, r7}
 800c9d4:	f04f 0c00 	mov.w	ip, #0
 800c9d8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c9dc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800c9e0:	e001      	b.n	800c9e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	b193      	cbz	r3, 800ca0c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800c9e6:	68da      	ldr	r2, [r3, #12]
 800c9e8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c9ec:	4288      	cmp	r0, r1
 800c9ee:	d1f8      	bne.n	800c9e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800c9f0:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 800c9f4:	e9d2 6700 	ldrd	r6, r7, [r2]
 800c9f8:	42a6      	cmp	r6, r4
 800c9fa:	eb77 0205 	sbcs.w	r2, r7, r5
 800c9fe:	daf0      	bge.n	800c9e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ca00:	469c      	mov	ip, r3
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	4634      	mov	r4, r6
 800ca06:	463d      	mov	r5, r7
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1ec      	bne.n	800c9e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ca0c:	4660      	mov	r0, ip
 800ca0e:	bcf0      	pop	{r4, r5, r6, r7}
 800ca10:	4770      	bx	lr
 800ca12:	4618      	mov	r0, r3
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	2000dd40 	.word	0x2000dd40
 800ca1c:	00000000 	.word	0x00000000

0800ca20 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	4e38      	ldr	r6, [pc, #224]	@ (800cb08 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ca26:	f8d6 8000 	ldr.w	r8, [r6]
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	f7ff fdb6 	bl	800c59c <rmw_uros_epoch_nanos>
 800ca30:	f1b8 0f00 	cmp.w	r8, #0
 800ca34:	d05f      	beq.n	800caf6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ca36:	46b1      	mov	r9, r6
 800ca38:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ca3c:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800ca40:	2b04      	cmp	r3, #4
 800ca42:	4682      	mov	sl, r0
 800ca44:	468b      	mov	fp, r1
 800ca46:	d02d      	beq.n	800caa4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ca48:	2b05      	cmp	r3, #5
 800ca4a:	d041      	beq.n	800cad0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d029      	beq.n	800caa4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ca50:	2200      	movs	r2, #0
 800ca52:	2300      	movs	r3, #0
 800ca54:	e9cd 2300 	strd	r2, r3, [sp]
 800ca58:	2001      	movs	r0, #1
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	9b00      	ldr	r3, [sp, #0]
 800ca5e:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 800ca62:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ca66:	18c2      	adds	r2, r0, r3
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	eb41 0303 	adc.w	r3, r1, r3
 800ca6e:	1994      	adds	r4, r2, r6
 800ca70:	eb43 0507 	adc.w	r5, r3, r7
 800ca74:	4554      	cmp	r4, sl
 800ca76:	eb75 020b 	sbcs.w	r2, r5, fp
 800ca7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca7e:	db03      	blt.n	800ca88 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ca80:	45b2      	cmp	sl, r6
 800ca82:	eb7b 0207 	sbcs.w	r2, fp, r7
 800ca86:	da05      	bge.n	800ca94 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800ca88:	4641      	mov	r1, r8
 800ca8a:	4648      	mov	r0, r9
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	f006 fe47 	bl	8013720 <put_memory>
 800ca92:	9b00      	ldr	r3, [sp, #0]
 800ca94:	b37b      	cbz	r3, 800caf6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ca96:	4698      	mov	r8, r3
 800ca98:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ca9c:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	d1d1      	bne.n	800ca48 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800caa4:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800caa8:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 800caac:	e9cd 2300 	strd	r2, r3, [sp]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 800cab6:	d015      	beq.n	800cae4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cab8:	9a01      	ldr	r2, [sp, #4]
 800caba:	4b14      	ldr	r3, [pc, #80]	@ (800cb0c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800cabc:	fb03 f702 	mul.w	r7, r3, r2
 800cac0:	9a00      	ldr	r2, [sp, #0]
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	e9cd 2300 	strd	r2, r3, [sp]
 800caca:	443b      	add	r3, r7
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	e7c5      	b.n	800ca5c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800cad0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 800cad4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800cad8:	e9cd 2300 	strd	r2, r3, [sp]
 800cadc:	4313      	orrs	r3, r2
 800cade:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 800cae2:	d1e9      	bne.n	800cab8 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800cae4:	ea50 0301 	orrs.w	r3, r0, r1
 800cae8:	bf02      	ittt	eq
 800caea:	a305      	addeq	r3, pc, #20	@ (adr r3, 800cb00 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800caec:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800caf0:	e9cd 2300 	strdeq	r2, r3, [sp]
 800caf4:	e7b2      	b.n	800ca5c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800caf6:	b003      	add	sp, #12
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafc:	f3af 8000 	nop.w
 800cb00:	fc23ac00 	.word	0xfc23ac00
 800cb04:	00000006 	.word	0x00000006
 800cb08:	2000dd40 	.word	0x2000dd40
 800cb0c:	3b9aca00 	.word	0x3b9aca00

0800cb10 <run_xrce_session>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	788c      	ldrb	r4, [r1, #2]
 800cb14:	b086      	sub	sp, #24
 800cb16:	2c01      	cmp	r4, #1
 800cb18:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cb1c:	d00c      	beq.n	800cb38 <run_xrce_session+0x28>
 800cb1e:	4619      	mov	r1, r3
 800cb20:	2301      	movs	r3, #1
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	f10d 020e 	add.w	r2, sp, #14
 800cb28:	f10d 0317 	add.w	r3, sp, #23
 800cb2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb30:	f001 fc8c 	bl	800e44c <uxr_run_session_until_all_status>
 800cb34:	b006      	add	sp, #24
 800cb36:	bd10      	pop	{r4, pc}
 800cb38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cb3c:	f001 f8a4 	bl	800dc88 <uxr_flash_output_streams>
 800cb40:	4620      	mov	r0, r4
 800cb42:	b006      	add	sp, #24
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	bf00      	nop

0800cb48 <convert_qos_profile>:
 800cb48:	b430      	push	{r4, r5}
 800cb4a:	7a0d      	ldrb	r5, [r1, #8]
 800cb4c:	780c      	ldrb	r4, [r1, #0]
 800cb4e:	7a4a      	ldrb	r2, [r1, #9]
 800cb50:	8889      	ldrh	r1, [r1, #4]
 800cb52:	8081      	strh	r1, [r0, #4]
 800cb54:	f1a5 0502 	sub.w	r5, r5, #2
 800cb58:	f1a4 0402 	sub.w	r4, r4, #2
 800cb5c:	2a02      	cmp	r2, #2
 800cb5e:	fab5 f585 	clz	r5, r5
 800cb62:	fab4 f484 	clz	r4, r4
 800cb66:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800cb6a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800cb6e:	bf18      	it	ne
 800cb70:	2200      	movne	r2, #0
 800cb72:	7045      	strb	r5, [r0, #1]
 800cb74:	7084      	strb	r4, [r0, #2]
 800cb76:	7002      	strb	r2, [r0, #0]
 800cb78:	bc30      	pop	{r4, r5}
 800cb7a:	4770      	bx	lr

0800cb7c <generate_type_name>:
 800cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7e:	2300      	movs	r3, #0
 800cb80:	700b      	strb	r3, [r1, #0]
 800cb82:	6803      	ldr	r3, [r0, #0]
 800cb84:	b087      	sub	sp, #28
 800cb86:	4614      	mov	r4, r2
 800cb88:	b1d3      	cbz	r3, 800cbc0 <generate_type_name+0x44>
 800cb8a:	4d0f      	ldr	r5, [pc, #60]	@ (800cbc8 <generate_type_name+0x4c>)
 800cb8c:	462f      	mov	r7, r5
 800cb8e:	4a0f      	ldr	r2, [pc, #60]	@ (800cbcc <generate_type_name+0x50>)
 800cb90:	4e0f      	ldr	r6, [pc, #60]	@ (800cbd0 <generate_type_name+0x54>)
 800cb92:	6840      	ldr	r0, [r0, #4]
 800cb94:	9004      	str	r0, [sp, #16]
 800cb96:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	9205      	str	r2, [sp, #20]
 800cb9e:	9503      	str	r5, [sp, #12]
 800cba0:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd4 <generate_type_name+0x58>)
 800cba2:	9700      	str	r7, [sp, #0]
 800cba4:	4621      	mov	r1, r4
 800cba6:	f008 fd01 	bl	80155ac <sniprintf>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	db05      	blt.n	800cbba <generate_type_name+0x3e>
 800cbae:	4284      	cmp	r4, r0
 800cbb0:	bfd4      	ite	le
 800cbb2:	2000      	movle	r0, #0
 800cbb4:	2001      	movgt	r0, #1
 800cbb6:	b007      	add	sp, #28
 800cbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbba:	2000      	movs	r0, #0
 800cbbc:	b007      	add	sp, #28
 800cbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc0:	4b05      	ldr	r3, [pc, #20]	@ (800cbd8 <generate_type_name+0x5c>)
 800cbc2:	4d01      	ldr	r5, [pc, #4]	@ (800cbc8 <generate_type_name+0x4c>)
 800cbc4:	461f      	mov	r7, r3
 800cbc6:	e7e2      	b.n	800cb8e <generate_type_name+0x12>
 800cbc8:	08016b0c 	.word	0x08016b0c
 800cbcc:	08016b20 	.word	0x08016b20
 800cbd0:	08016b24 	.word	0x08016b24
 800cbd4:	08016b10 	.word	0x08016b10
 800cbd8:	08017034 	.word	0x08017034

0800cbdc <generate_topic_name>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <generate_topic_name+0x2c>)
 800cbe2:	9000      	str	r0, [sp, #0]
 800cbe4:	4614      	mov	r4, r2
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4a08      	ldr	r2, [pc, #32]	@ (800cc0c <generate_topic_name+0x30>)
 800cbec:	f008 fcde 	bl	80155ac <sniprintf>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	db05      	blt.n	800cc00 <generate_topic_name+0x24>
 800cbf4:	4284      	cmp	r4, r0
 800cbf6:	bfd4      	ite	le
 800cbf8:	2000      	movle	r0, #0
 800cbfa:	2001      	movgt	r0, #1
 800cbfc:	b002      	add	sp, #8
 800cbfe:	bd10      	pop	{r4, pc}
 800cc00:	2000      	movs	r0, #0
 800cc02:	b002      	add	sp, #8
 800cc04:	bd10      	pop	{r4, pc}
 800cc06:	bf00      	nop
 800cc08:	08016b30 	.word	0x08016b30
 800cc0c:	08016b28 	.word	0x08016b28

0800cc10 <is_uxrce_rmw_identifier_valid>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4604      	mov	r4, r0
 800cc14:	b140      	cbz	r0, 800cc28 <is_uxrce_rmw_identifier_valid+0x18>
 800cc16:	f006 fddb 	bl	80137d0 <rmw_get_implementation_identifier>
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f7f3 faff 	bl	8000220 <strcmp>
 800cc22:	fab0 f080 	clz	r0, r0
 800cc26:	0940      	lsrs	r0, r0, #5
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	bf00      	nop

0800cc2c <get_message_typesupport_handle>:
 800cc2c:	6883      	ldr	r3, [r0, #8]
 800cc2e:	4718      	bx	r3

0800cc30 <get_message_typesupport_handle_function>:
 800cc30:	b510      	push	{r4, lr}
 800cc32:	4604      	mov	r4, r0
 800cc34:	6800      	ldr	r0, [r0, #0]
 800cc36:	f7f3 faf3 	bl	8000220 <strcmp>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	bf0c      	ite	eq
 800cc3e:	4620      	moveq	r0, r4
 800cc40:	2000      	movne	r0, #0
 800cc42:	bd10      	pop	{r4, pc}

0800cc44 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800cc44:	f000 b968 	b.w	800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>

0800cc48 <_JointState__max_serialized_size>:
 800cc48:	b500      	push	{lr}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	2100      	movs	r1, #0
 800cc50:	f10d 0007 	add.w	r0, sp, #7
 800cc54:	f88d 3007 	strb.w	r3, [sp, #7]
 800cc58:	f000 f9e8 	bl	800d02c <max_serialized_size_std_msgs__msg__Header>
 800cc5c:	b003      	add	sp, #12
 800cc5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc62:	bf00      	nop

0800cc64 <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 800cc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc68:	4688      	mov	r8, r1
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	f000 f966 	bl	800cf3c <get_serialized_size_std_msgs__msg__Header>
 800cc70:	eb08 0400 	add.w	r4, r8, r0
 800cc74:	4620      	mov	r0, r4
 800cc76:	2104      	movs	r1, #4
 800cc78:	69b7      	ldr	r7, [r6, #24]
 800cc7a:	f7fd f9d9 	bl	800a030 <ucdr_alignment>
 800cc7e:	3004      	adds	r0, #4
 800cc80:	4404      	add	r4, r0
 800cc82:	b18f      	cbz	r7, 800cca8 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x44>
 800cc84:	2500      	movs	r5, #0
 800cc86:	4620      	mov	r0, r4
 800cc88:	2104      	movs	r1, #4
 800cc8a:	f7fd f9d1 	bl	800a030 <ucdr_alignment>
 800cc8e:	6973      	ldr	r3, [r6, #20]
 800cc90:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800cc94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cc98:	4420      	add	r0, r4
 800cc9a:	3501      	adds	r5, #1
 800cc9c:	685c      	ldr	r4, [r3, #4]
 800cc9e:	42af      	cmp	r7, r5
 800cca0:	f100 0305 	add.w	r3, r0, #5
 800cca4:	441c      	add	r4, r3
 800cca6:	d1ee      	bne.n	800cc86 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 800cca8:	4620      	mov	r0, r4
 800ccaa:	2104      	movs	r1, #4
 800ccac:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 800ccae:	f7fd f9bf 	bl	800a030 <ucdr_alignment>
 800ccb2:	4420      	add	r0, r4
 800ccb4:	1d04      	adds	r4, r0, #4
 800ccb6:	b99d      	cbnz	r5, 800cce0 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x7c>
 800ccb8:	4620      	mov	r0, r4
 800ccba:	2104      	movs	r1, #4
 800ccbc:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800ccbe:	f7fd f9b7 	bl	800a030 <ucdr_alignment>
 800ccc2:	4404      	add	r4, r0
 800ccc4:	3404      	adds	r4, #4
 800ccc6:	b9f5      	cbnz	r5, 800cd06 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0xa2>
 800ccc8:	4620      	mov	r0, r4
 800ccca:	2104      	movs	r1, #4
 800cccc:	6bf5      	ldr	r5, [r6, #60]	@ 0x3c
 800ccce:	f7fd f9af 	bl	800a030 <ucdr_alignment>
 800ccd2:	4404      	add	r4, r0
 800ccd4:	3404      	adds	r4, #4
 800ccd6:	b95d      	cbnz	r5, 800ccf0 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x8c>
 800ccd8:	eba4 0008 	sub.w	r0, r4, r8
 800ccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce0:	4620      	mov	r0, r4
 800cce2:	2108      	movs	r1, #8
 800cce4:	f7fd f9a4 	bl	800a030 <ucdr_alignment>
 800cce8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccec:	4404      	add	r4, r0
 800ccee:	e7e3      	b.n	800ccb8 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x54>
 800ccf0:	2108      	movs	r1, #8
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f7fd f99c 	bl	800a030 <ucdr_alignment>
 800ccf8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccfc:	4404      	add	r4, r0
 800ccfe:	eba4 0008 	sub.w	r0, r4, r8
 800cd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd06:	4620      	mov	r0, r4
 800cd08:	2108      	movs	r1, #8
 800cd0a:	f7fd f991 	bl	800a030 <ucdr_alignment>
 800cd0e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd12:	4404      	add	r4, r0
 800cd14:	e7d8      	b.n	800ccc8 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x64>
 800cd16:	bf00      	nop

0800cd18 <get_serialized_size_sensor_msgs__msg__JointState>:
 800cd18:	b108      	cbz	r0, 800cd1e <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 800cd1a:	f7ff bfa3 	b.w	800cc64 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800cd1e:	4770      	bx	lr

0800cd20 <_JointState__get_serialized_size>:
 800cd20:	b110      	cbz	r0, 800cd28 <_JointState__get_serialized_size+0x8>
 800cd22:	2100      	movs	r1, #0
 800cd24:	f7ff bf9e 	b.w	800cc64 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop

0800cd2c <_JointState__cdr_deserialize>:
 800cd2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd30:	460d      	mov	r5, r1
 800cd32:	b083      	sub	sp, #12
 800cd34:	2900      	cmp	r1, #0
 800cd36:	d075      	beq.n	800ce24 <_JointState__cdr_deserialize+0xf8>
 800cd38:	4606      	mov	r6, r0
 800cd3a:	f000 f981 	bl	800d040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cd3e:	6843      	ldr	r3, [r0, #4]
 800cd40:	4629      	mov	r1, r5
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	4630      	mov	r0, r6
 800cd46:	4798      	blx	r3
 800cd48:	4669      	mov	r1, sp
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7fc f9d2 	bl	80090f4 <ucdr_deserialize_uint32_t>
 800cd50:	9900      	ldr	r1, [sp, #0]
 800cd52:	69eb      	ldr	r3, [r5, #28]
 800cd54:	428b      	cmp	r3, r1
 800cd56:	d34f      	bcc.n	800cdf8 <_JointState__cdr_deserialize+0xcc>
 800cd58:	61a9      	str	r1, [r5, #24]
 800cd5a:	f10d 0804 	add.w	r8, sp, #4
 800cd5e:	b330      	cbz	r0, 800cdae <_JointState__cdr_deserialize+0x82>
 800cd60:	2400      	movs	r4, #0
 800cd62:	f10d 0804 	add.w	r8, sp, #4
 800cd66:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800cd6a:	428c      	cmp	r4, r1
 800cd6c:	4643      	mov	r3, r8
 800cd6e:	4630      	mov	r0, r6
 800cd70:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800cd74:	d21b      	bcs.n	800cdae <_JointState__cdr_deserialize+0x82>
 800cd76:	6969      	ldr	r1, [r5, #20]
 800cd78:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800cd7c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800cd80:	f8dc 9008 	ldr.w	r9, [ip, #8]
 800cd84:	464a      	mov	r2, r9
 800cd86:	f000 f9d9 	bl	800d13c <ucdr_deserialize_sequence_char>
 800cd8a:	2800      	cmp	r0, #0
 800cd8c:	d039      	beq.n	800ce02 <_JointState__cdr_deserialize+0xd6>
 800cd8e:	9a01      	ldr	r2, [sp, #4]
 800cd90:	b102      	cbz	r2, 800cd94 <_JointState__cdr_deserialize+0x68>
 800cd92:	3a01      	subs	r2, #1
 800cd94:	696b      	ldr	r3, [r5, #20]
 800cd96:	9900      	ldr	r1, [sp, #0]
 800cd98:	441f      	add	r7, r3
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	607a      	str	r2, [r7, #4]
 800cd9e:	428c      	cmp	r4, r1
 800cda0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800cda4:	4643      	mov	r3, r8
 800cda6:	4630      	mov	r0, r6
 800cda8:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800cdac:	d3e3      	bcc.n	800cd76 <_JointState__cdr_deserialize+0x4a>
 800cdae:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800cdb0:	6a29      	ldr	r1, [r5, #32]
 800cdb2:	4643      	mov	r3, r8
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f000 fa18 	bl	800d1ec <ucdr_deserialize_sequence_double>
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d055      	beq.n	800ce6e <_JointState__cdr_deserialize+0x142>
 800cdc2:	626b      	str	r3, [r5, #36]	@ 0x24
 800cdc4:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 800cdc6:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800cdc8:	4643      	mov	r3, r8
 800cdca:	4622      	mov	r2, r4
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f000 fa0d 	bl	800d1ec <ucdr_deserialize_sequence_double>
 800cdd2:	9b01      	ldr	r3, [sp, #4]
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d03a      	beq.n	800ce4e <_JointState__cdr_deserialize+0x122>
 800cdd8:	632b      	str	r3, [r5, #48]	@ 0x30
 800cdda:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
 800cddc:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 800cdde:	4643      	mov	r3, r8
 800cde0:	463a      	mov	r2, r7
 800cde2:	4630      	mov	r0, r6
 800cde4:	f000 fa02 	bl	800d1ec <ucdr_deserialize_sequence_double>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	4604      	mov	r4, r0
 800cdec:	b1f8      	cbz	r0, 800ce2e <_JointState__cdr_deserialize+0x102>
 800cdee:	4620      	mov	r0, r4
 800cdf0:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800cdf2:	b003      	add	sp, #12
 800cdf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdf8:	2400      	movs	r4, #0
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	b003      	add	sp, #12
 800cdfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce02:	9b01      	ldr	r3, [sp, #4]
 800ce04:	4599      	cmp	r9, r3
 800ce06:	d2d2      	bcs.n	800cdae <_JointState__cdr_deserialize+0x82>
 800ce08:	2101      	movs	r1, #1
 800ce0a:	7571      	strb	r1, [r6, #21]
 800ce0c:	696b      	ldr	r3, [r5, #20]
 800ce0e:	75b0      	strb	r0, [r6, #22]
 800ce10:	441f      	add	r7, r3
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7fd f921 	bl	800a05c <ucdr_align_to>
 800ce1a:	9901      	ldr	r1, [sp, #4]
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f7fd f953 	bl	800a0c8 <ucdr_advance_buffer>
 800ce22:	e7c4      	b.n	800cdae <_JointState__cdr_deserialize+0x82>
 800ce24:	460c      	mov	r4, r1
 800ce26:	4620      	mov	r0, r4
 800ce28:	b003      	add	sp, #12
 800ce2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce2e:	429f      	cmp	r7, r3
 800ce30:	d2e3      	bcs.n	800cdfa <_JointState__cdr_deserialize+0xce>
 800ce32:	2301      	movs	r3, #1
 800ce34:	75b0      	strb	r0, [r6, #22]
 800ce36:	7573      	strb	r3, [r6, #21]
 800ce38:	2108      	movs	r1, #8
 800ce3a:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7fd f90d 	bl	800a05c <ucdr_align_to>
 800ce42:	9901      	ldr	r1, [sp, #4]
 800ce44:	4630      	mov	r0, r6
 800ce46:	00c9      	lsls	r1, r1, #3
 800ce48:	f7fd f93e 	bl	800a0c8 <ucdr_advance_buffer>
 800ce4c:	e7d5      	b.n	800cdfa <_JointState__cdr_deserialize+0xce>
 800ce4e:	429c      	cmp	r4, r3
 800ce50:	d2c3      	bcs.n	800cdda <_JointState__cdr_deserialize+0xae>
 800ce52:	2301      	movs	r3, #1
 800ce54:	75b0      	strb	r0, [r6, #22]
 800ce56:	7573      	strb	r3, [r6, #21]
 800ce58:	2108      	movs	r1, #8
 800ce5a:	6328      	str	r0, [r5, #48]	@ 0x30
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7fd f8fd 	bl	800a05c <ucdr_align_to>
 800ce62:	9901      	ldr	r1, [sp, #4]
 800ce64:	4630      	mov	r0, r6
 800ce66:	00c9      	lsls	r1, r1, #3
 800ce68:	f7fd f92e 	bl	800a0c8 <ucdr_advance_buffer>
 800ce6c:	e7b5      	b.n	800cdda <_JointState__cdr_deserialize+0xae>
 800ce6e:	429c      	cmp	r4, r3
 800ce70:	d2a8      	bcs.n	800cdc4 <_JointState__cdr_deserialize+0x98>
 800ce72:	2301      	movs	r3, #1
 800ce74:	75b0      	strb	r0, [r6, #22]
 800ce76:	7573      	strb	r3, [r6, #21]
 800ce78:	2108      	movs	r1, #8
 800ce7a:	6268      	str	r0, [r5, #36]	@ 0x24
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7fd f8ed 	bl	800a05c <ucdr_align_to>
 800ce82:	9901      	ldr	r1, [sp, #4]
 800ce84:	4630      	mov	r0, r6
 800ce86:	00c9      	lsls	r1, r1, #3
 800ce88:	f7fd f91e 	bl	800a0c8 <ucdr_advance_buffer>
 800ce8c:	e79a      	b.n	800cdc4 <_JointState__cdr_deserialize+0x98>
 800ce8e:	bf00      	nop

0800ce90 <_JointState__cdr_serialize>:
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d040      	beq.n	800cf16 <_JointState__cdr_serialize+0x86>
 800ce94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce98:	460f      	mov	r7, r1
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	f000 f8d0 	bl	800d040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cea0:	6843      	ldr	r3, [r0, #4]
 800cea2:	4639      	mov	r1, r7
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	4630      	mov	r0, r6
 800cea8:	4798      	blx	r3
 800ceaa:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800ceae:	4638      	mov	r0, r7
 800ceb0:	4641      	mov	r1, r8
 800ceb2:	f7fb ffef 	bl	8008e94 <ucdr_serialize_uint32_t>
 800ceb6:	b1e8      	cbz	r0, 800cef4 <_JointState__cdr_serialize+0x64>
 800ceb8:	f1b8 0f00 	cmp.w	r8, #0
 800cebc:	d01a      	beq.n	800cef4 <_JointState__cdr_serialize+0x64>
 800cebe:	2400      	movs	r4, #0
 800cec0:	e00b      	b.n	800ceda <_JointState__cdr_serialize+0x4a>
 800cec2:	f7f3 f9b7 	bl	8000234 <strlen>
 800cec6:	1c42      	adds	r2, r0, #1
 800cec8:	6068      	str	r0, [r5, #4]
 800ceca:	4649      	mov	r1, r9
 800cecc:	4638      	mov	r0, r7
 800cece:	f000 f923 	bl	800d118 <ucdr_serialize_sequence_char>
 800ced2:	3401      	adds	r4, #1
 800ced4:	b170      	cbz	r0, 800cef4 <_JointState__cdr_serialize+0x64>
 800ced6:	45a0      	cmp	r8, r4
 800ced8:	d00c      	beq.n	800cef4 <_JointState__cdr_serialize+0x64>
 800ceda:	6973      	ldr	r3, [r6, #20]
 800cedc:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800cee0:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
 800cee4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800cee8:	4648      	mov	r0, r9
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	d1e8      	bne.n	800cec2 <_JointState__cdr_serialize+0x32>
 800cef0:	464a      	mov	r2, r9
 800cef2:	e7e9      	b.n	800cec8 <_JointState__cdr_serialize+0x38>
 800cef4:	e9d6 1208 	ldrd	r1, r2, [r6, #32]
 800cef8:	4638      	mov	r0, r7
 800cefa:	f000 f965 	bl	800d1c8 <ucdr_serialize_sequence_double>
 800cefe:	e9d6 120b 	ldrd	r1, r2, [r6, #44]	@ 0x2c
 800cf02:	4638      	mov	r0, r7
 800cf04:	f000 f960 	bl	800d1c8 <ucdr_serialize_sequence_double>
 800cf08:	e9d6 120e 	ldrd	r1, r2, [r6, #56]	@ 0x38
 800cf0c:	4638      	mov	r0, r7
 800cf0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf12:	f000 b959 	b.w	800d1c8 <ucdr_serialize_sequence_double>
 800cf16:	4770      	bx	lr

0800cf18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800cf18:	4800      	ldr	r0, [pc, #0]	@ (800cf1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800cf1a:	4770      	bx	lr
 800cf1c:	20000094 	.word	0x20000094

0800cf20 <_Header__max_serialized_size>:
 800cf20:	b500      	push	{lr}
 800cf22:	b083      	sub	sp, #12
 800cf24:	2301      	movs	r3, #1
 800cf26:	2100      	movs	r1, #0
 800cf28:	f10d 0007 	add.w	r0, sp, #7
 800cf2c:	f88d 3007 	strb.w	r3, [sp, #7]
 800cf30:	f000 f8da 	bl	800d0e8 <max_serialized_size_builtin_interfaces__msg__Time>
 800cf34:	b003      	add	sp, #12
 800cf36:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf3a:	bf00      	nop

0800cf3c <get_serialized_size_std_msgs__msg__Header>:
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	4605      	mov	r5, r0
 800cf40:	b168      	cbz	r0, 800cf5e <get_serialized_size_std_msgs__msg__Header+0x22>
 800cf42:	460c      	mov	r4, r1
 800cf44:	f000 f880 	bl	800d048 <get_serialized_size_builtin_interfaces__msg__Time>
 800cf48:	1826      	adds	r6, r4, r0
 800cf4a:	2104      	movs	r1, #4
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f7fd f86f 	bl	800a030 <ucdr_alignment>
 800cf52:	68e9      	ldr	r1, [r5, #12]
 800cf54:	f1c4 0405 	rsb	r4, r4, #5
 800cf58:	440c      	add	r4, r1
 800cf5a:	4404      	add	r4, r0
 800cf5c:	19a0      	adds	r0, r4, r6
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}

0800cf60 <_Header__cdr_deserialize>:
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	460c      	mov	r4, r1
 800cf64:	b083      	sub	sp, #12
 800cf66:	b1e1      	cbz	r1, 800cfa2 <_Header__cdr_deserialize+0x42>
 800cf68:	4606      	mov	r6, r0
 800cf6a:	f000 f8d1 	bl	800d110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800cf6e:	6843      	ldr	r3, [r0, #4]
 800cf70:	4621      	mov	r1, r4
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	4630      	mov	r0, r6
 800cf76:	4798      	blx	r3
 800cf78:	6927      	ldr	r7, [r4, #16]
 800cf7a:	68a1      	ldr	r1, [r4, #8]
 800cf7c:	ab01      	add	r3, sp, #4
 800cf7e:	463a      	mov	r2, r7
 800cf80:	4630      	mov	r0, r6
 800cf82:	f000 f8db 	bl	800d13c <ucdr_deserialize_sequence_char>
 800cf86:	9b01      	ldr	r3, [sp, #4]
 800cf88:	4605      	mov	r5, r0
 800cf8a:	b920      	cbnz	r0, 800cf96 <_Header__cdr_deserialize+0x36>
 800cf8c:	429f      	cmp	r7, r3
 800cf8e:	d30c      	bcc.n	800cfaa <_Header__cdr_deserialize+0x4a>
 800cf90:	4628      	mov	r0, r5
 800cf92:	b003      	add	sp, #12
 800cf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf96:	b103      	cbz	r3, 800cf9a <_Header__cdr_deserialize+0x3a>
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	60e3      	str	r3, [r4, #12]
 800cf9e:	b003      	add	sp, #12
 800cfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfa2:	460d      	mov	r5, r1
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	b003      	add	sp, #12
 800cfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfaa:	2101      	movs	r1, #1
 800cfac:	75b0      	strb	r0, [r6, #22]
 800cfae:	7571      	strb	r1, [r6, #21]
 800cfb0:	60e0      	str	r0, [r4, #12]
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f7fd f852 	bl	800a05c <ucdr_align_to>
 800cfb8:	4630      	mov	r0, r6
 800cfba:	9901      	ldr	r1, [sp, #4]
 800cfbc:	f7fd f884 	bl	800a0c8 <ucdr_advance_buffer>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	b003      	add	sp, #12
 800cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc6:	bf00      	nop

0800cfc8 <_Header__cdr_serialize>:
 800cfc8:	b1f8      	cbz	r0, 800d00a <_Header__cdr_serialize+0x42>
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	4604      	mov	r4, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	f000 f89e 	bl	800d110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800cfd4:	6843      	ldr	r3, [r0, #4]
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4798      	blx	r3
 800cfde:	68a6      	ldr	r6, [r4, #8]
 800cfe0:	b156      	cbz	r6, 800cff8 <_Header__cdr_serialize+0x30>
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f7f3 f926 	bl	8000234 <strlen>
 800cfe8:	4631      	mov	r1, r6
 800cfea:	60e0      	str	r0, [r4, #12]
 800cfec:	1c42      	adds	r2, r0, #1
 800cfee:	4628      	mov	r0, r5
 800cff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff4:	f000 b890 	b.w	800d118 <ucdr_serialize_sequence_char>
 800cff8:	4630      	mov	r0, r6
 800cffa:	60e0      	str	r0, [r4, #12]
 800cffc:	4632      	mov	r2, r6
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d006:	f000 b887 	b.w	800d118 <ucdr_serialize_sequence_char>
 800d00a:	4770      	bx	lr

0800d00c <_Header__get_serialized_size>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4604      	mov	r4, r0
 800d010:	b150      	cbz	r0, 800d028 <_Header__get_serialized_size+0x1c>
 800d012:	2100      	movs	r1, #0
 800d014:	f000 f818 	bl	800d048 <get_serialized_size_builtin_interfaces__msg__Time>
 800d018:	2104      	movs	r1, #4
 800d01a:	4605      	mov	r5, r0
 800d01c:	f7fd f808 	bl	800a030 <ucdr_alignment>
 800d020:	68e2      	ldr	r2, [r4, #12]
 800d022:	3205      	adds	r2, #5
 800d024:	1953      	adds	r3, r2, r5
 800d026:	4418      	add	r0, r3
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	bf00      	nop

0800d02c <max_serialized_size_std_msgs__msg__Header>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	2301      	movs	r3, #1
 800d030:	4604      	mov	r4, r0
 800d032:	7003      	strb	r3, [r0, #0]
 800d034:	f000 f858 	bl	800d0e8 <max_serialized_size_builtin_interfaces__msg__Time>
 800d038:	2300      	movs	r3, #0
 800d03a:	7023      	strb	r3, [r4, #0]
 800d03c:	bd10      	pop	{r4, pc}
 800d03e:	bf00      	nop

0800d040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d040:	4800      	ldr	r0, [pc, #0]	@ (800d044 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800d042:	4770      	bx	lr
 800d044:	200000bc 	.word	0x200000bc

0800d048 <get_serialized_size_builtin_interfaces__msg__Time>:
 800d048:	b180      	cbz	r0, 800d06c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800d04a:	b538      	push	{r3, r4, r5, lr}
 800d04c:	460d      	mov	r5, r1
 800d04e:	4628      	mov	r0, r5
 800d050:	2104      	movs	r1, #4
 800d052:	f7fc ffed 	bl	800a030 <ucdr_alignment>
 800d056:	1d2b      	adds	r3, r5, #4
 800d058:	181c      	adds	r4, r3, r0
 800d05a:	4620      	mov	r0, r4
 800d05c:	2104      	movs	r1, #4
 800d05e:	f7fc ffe7 	bl	800a030 <ucdr_alignment>
 800d062:	f1c5 0504 	rsb	r5, r5, #4
 800d066:	4428      	add	r0, r5
 800d068:	4420      	add	r0, r4
 800d06a:	bd38      	pop	{r3, r4, r5, pc}
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop

0800d070 <_Time__cdr_deserialize>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	460c      	mov	r4, r1
 800d074:	b141      	cbz	r1, 800d088 <_Time__cdr_deserialize+0x18>
 800d076:	4605      	mov	r5, r0
 800d078:	f7fc fbbe 	bl	80097f8 <ucdr_deserialize_int32_t>
 800d07c:	1d21      	adds	r1, r4, #4
 800d07e:	4628      	mov	r0, r5
 800d080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d084:	f7fc b836 	b.w	80090f4 <ucdr_deserialize_uint32_t>
 800d088:	4608      	mov	r0, r1
 800d08a:	bd38      	pop	{r3, r4, r5, pc}

0800d08c <_Time__cdr_serialize>:
 800d08c:	b160      	cbz	r0, 800d0a8 <_Time__cdr_serialize+0x1c>
 800d08e:	b538      	push	{r3, r4, r5, lr}
 800d090:	460d      	mov	r5, r1
 800d092:	4604      	mov	r4, r0
 800d094:	6801      	ldr	r1, [r0, #0]
 800d096:	4628      	mov	r0, r5
 800d098:	f7fc fb16 	bl	80096c8 <ucdr_serialize_int32_t>
 800d09c:	6861      	ldr	r1, [r4, #4]
 800d09e:	4628      	mov	r0, r5
 800d0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a4:	f7fb bef6 	b.w	8008e94 <ucdr_serialize_uint32_t>
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop

0800d0ac <_Time__get_serialized_size>:
 800d0ac:	b160      	cbz	r0, 800d0c8 <_Time__get_serialized_size+0x1c>
 800d0ae:	b510      	push	{r4, lr}
 800d0b0:	2104      	movs	r1, #4
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	f7fc ffbc 	bl	800a030 <ucdr_alignment>
 800d0b8:	1d04      	adds	r4, r0, #4
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	2104      	movs	r1, #4
 800d0be:	f7fc ffb7 	bl	800a030 <ucdr_alignment>
 800d0c2:	3004      	adds	r0, #4
 800d0c4:	4420      	add	r0, r4
 800d0c6:	bd10      	pop	{r4, pc}
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop

0800d0cc <_Time__max_serialized_size>:
 800d0cc:	b510      	push	{r4, lr}
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	f7fc ffad 	bl	800a030 <ucdr_alignment>
 800d0d6:	1d04      	adds	r4, r0, #4
 800d0d8:	4620      	mov	r0, r4
 800d0da:	2104      	movs	r1, #4
 800d0dc:	f7fc ffa8 	bl	800a030 <ucdr_alignment>
 800d0e0:	3004      	adds	r0, #4
 800d0e2:	4420      	add	r0, r4
 800d0e4:	bd10      	pop	{r4, pc}
 800d0e6:	bf00      	nop

0800d0e8 <max_serialized_size_builtin_interfaces__msg__Time>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	7003      	strb	r3, [r0, #0]
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	2104      	movs	r1, #4
 800d0f4:	f7fc ff9c 	bl	800a030 <ucdr_alignment>
 800d0f8:	1d25      	adds	r5, r4, #4
 800d0fa:	4405      	add	r5, r0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	2104      	movs	r1, #4
 800d100:	f7fc ff96 	bl	800a030 <ucdr_alignment>
 800d104:	f1c4 0404 	rsb	r4, r4, #4
 800d108:	4420      	add	r0, r4
 800d10a:	4428      	add	r0, r5
 800d10c:	bd38      	pop	{r3, r4, r5, pc}
 800d10e:	bf00      	nop

0800d110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d110:	4800      	ldr	r0, [pc, #0]	@ (800d114 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800d112:	4770      	bx	lr
 800d114:	200000e4 	.word	0x200000e4

0800d118 <ucdr_serialize_sequence_char>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	460e      	mov	r6, r1
 800d11c:	4615      	mov	r5, r2
 800d11e:	7d01      	ldrb	r1, [r0, #20]
 800d120:	4604      	mov	r4, r0
 800d122:	f7fb ff4f 	bl	8008fc4 <ucdr_serialize_endian_uint32_t>
 800d126:	b90d      	cbnz	r5, 800d12c <ucdr_serialize_sequence_char+0x14>
 800d128:	2001      	movs	r0, #1
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
 800d12c:	7d21      	ldrb	r1, [r4, #20]
 800d12e:	462b      	mov	r3, r5
 800d130:	4632      	mov	r2, r6
 800d132:	4620      	mov	r0, r4
 800d134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d138:	f006 be68 	b.w	8013e0c <ucdr_serialize_endian_array_char>

0800d13c <ucdr_deserialize_sequence_char>:
 800d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d140:	461d      	mov	r5, r3
 800d142:	4616      	mov	r6, r2
 800d144:	460f      	mov	r7, r1
 800d146:	461a      	mov	r2, r3
 800d148:	7d01      	ldrb	r1, [r0, #20]
 800d14a:	4604      	mov	r4, r0
 800d14c:	f7fc f862 	bl	8009214 <ucdr_deserialize_endian_uint32_t>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	429e      	cmp	r6, r3
 800d154:	bf3c      	itt	cc
 800d156:	2201      	movcc	r2, #1
 800d158:	75a2      	strbcc	r2, [r4, #22]
 800d15a:	b913      	cbnz	r3, 800d162 <ucdr_deserialize_sequence_char+0x26>
 800d15c:	2001      	movs	r0, #1
 800d15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d162:	7d21      	ldrb	r1, [r4, #20]
 800d164:	463a      	mov	r2, r7
 800d166:	4620      	mov	r0, r4
 800d168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d16c:	f006 be80 	b.w	8013e70 <ucdr_deserialize_endian_array_char>

0800d170 <ucdr_serialize_sequence_uint8_t>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	460e      	mov	r6, r1
 800d174:	4615      	mov	r5, r2
 800d176:	7d01      	ldrb	r1, [r0, #20]
 800d178:	4604      	mov	r4, r0
 800d17a:	f7fb ff23 	bl	8008fc4 <ucdr_serialize_endian_uint32_t>
 800d17e:	b90d      	cbnz	r5, 800d184 <ucdr_serialize_sequence_uint8_t+0x14>
 800d180:	2001      	movs	r0, #1
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	7d21      	ldrb	r1, [r4, #20]
 800d186:	462b      	mov	r3, r5
 800d188:	4632      	mov	r2, r6
 800d18a:	4620      	mov	r0, r4
 800d18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d190:	f006 bed2 	b.w	8013f38 <ucdr_serialize_endian_array_uint8_t>

0800d194 <ucdr_deserialize_sequence_uint8_t>:
 800d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d198:	461d      	mov	r5, r3
 800d19a:	4616      	mov	r6, r2
 800d19c:	460f      	mov	r7, r1
 800d19e:	461a      	mov	r2, r3
 800d1a0:	7d01      	ldrb	r1, [r0, #20]
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	f7fc f836 	bl	8009214 <ucdr_deserialize_endian_uint32_t>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	429e      	cmp	r6, r3
 800d1ac:	bf3c      	itt	cc
 800d1ae:	2201      	movcc	r2, #1
 800d1b0:	75a2      	strbcc	r2, [r4, #22]
 800d1b2:	b913      	cbnz	r3, 800d1ba <ucdr_deserialize_sequence_uint8_t+0x26>
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ba:	7d21      	ldrb	r1, [r4, #20]
 800d1bc:	463a      	mov	r2, r7
 800d1be:	4620      	mov	r0, r4
 800d1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c4:	f006 bf1c 	b.w	8014000 <ucdr_deserialize_endian_array_uint8_t>

0800d1c8 <ucdr_serialize_sequence_double>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	460e      	mov	r6, r1
 800d1cc:	4615      	mov	r5, r2
 800d1ce:	7d01      	ldrb	r1, [r0, #20]
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	f7fb fef7 	bl	8008fc4 <ucdr_serialize_endian_uint32_t>
 800d1d6:	b90d      	cbnz	r5, 800d1dc <ucdr_serialize_sequence_double+0x14>
 800d1d8:	2001      	movs	r0, #1
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	7d21      	ldrb	r1, [r4, #20]
 800d1de:	462b      	mov	r3, r5
 800d1e0:	4632      	mov	r2, r6
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1e8:	f006 bf3c 	b.w	8014064 <ucdr_serialize_endian_array_double>

0800d1ec <ucdr_deserialize_sequence_double>:
 800d1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f0:	461d      	mov	r5, r3
 800d1f2:	4616      	mov	r6, r2
 800d1f4:	460f      	mov	r7, r1
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	7d01      	ldrb	r1, [r0, #20]
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	f7fc f80a 	bl	8009214 <ucdr_deserialize_endian_uint32_t>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	429e      	cmp	r6, r3
 800d204:	bf3c      	itt	cc
 800d206:	2201      	movcc	r2, #1
 800d208:	75a2      	strbcc	r2, [r4, #22]
 800d20a:	b913      	cbnz	r3, 800d212 <ucdr_deserialize_sequence_double+0x26>
 800d20c:	2001      	movs	r0, #1
 800d20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d212:	7d21      	ldrb	r1, [r4, #20]
 800d214:	463a      	mov	r2, r7
 800d216:	4620      	mov	r0, r4
 800d218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21c:	f006 bf78 	b.w	8014110 <ucdr_deserialize_endian_array_double>

0800d220 <uxr_buffer_delete_entity>:
 800d220:	b530      	push	{r4, r5, lr}
 800d222:	b08f      	sub	sp, #60	@ 0x3c
 800d224:	2403      	movs	r4, #3
 800d226:	2500      	movs	r5, #0
 800d228:	e9cd 4500 	strd	r4, r5, [sp]
 800d22c:	9202      	str	r2, [sp, #8]
 800d22e:	ab06      	add	r3, sp, #24
 800d230:	2204      	movs	r2, #4
 800d232:	9103      	str	r1, [sp, #12]
 800d234:	4604      	mov	r4, r0
 800d236:	f001 fb99 	bl	800e96c <uxr_prepare_stream_to_write_submessage>
 800d23a:	b918      	cbnz	r0, 800d244 <uxr_buffer_delete_entity+0x24>
 800d23c:	4604      	mov	r4, r0
 800d23e:	4620      	mov	r0, r4
 800d240:	b00f      	add	sp, #60	@ 0x3c
 800d242:	bd30      	pop	{r4, r5, pc}
 800d244:	9902      	ldr	r1, [sp, #8]
 800d246:	aa05      	add	r2, sp, #20
 800d248:	4620      	mov	r0, r4
 800d24a:	f001 fcc9 	bl	800ebe0 <uxr_init_base_object_request>
 800d24e:	a905      	add	r1, sp, #20
 800d250:	4604      	mov	r4, r0
 800d252:	a806      	add	r0, sp, #24
 800d254:	f003 fb82 	bl	801095c <uxr_serialize_DELETE_Payload>
 800d258:	4620      	mov	r0, r4
 800d25a:	b00f      	add	sp, #60	@ 0x3c
 800d25c:	bd30      	pop	{r4, r5, pc}
 800d25e:	bf00      	nop

0800d260 <uxr_common_create_entity>:
 800d260:	b530      	push	{r4, r5, lr}
 800d262:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800d266:	b08d      	sub	sp, #52	@ 0x34
 800d268:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d26c:	2d01      	cmp	r5, #1
 800d26e:	bf0c      	ite	eq
 800d270:	f003 0201 	andeq.w	r2, r3, #1
 800d274:	2200      	movne	r2, #0
 800d276:	330e      	adds	r3, #14
 800d278:	4604      	mov	r4, r0
 800d27a:	441a      	add	r2, r3
 800d27c:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 800d280:	9001      	str	r0, [sp, #4]
 800d282:	2101      	movs	r1, #1
 800d284:	9100      	str	r1, [sp, #0]
 800d286:	b292      	uxth	r2, r2
 800d288:	9903      	ldr	r1, [sp, #12]
 800d28a:	ab04      	add	r3, sp, #16
 800d28c:	4620      	mov	r0, r4
 800d28e:	f001 fb6d 	bl	800e96c <uxr_prepare_stream_to_write_submessage>
 800d292:	b918      	cbnz	r0, 800d29c <uxr_common_create_entity+0x3c>
 800d294:	4604      	mov	r4, r0
 800d296:	4620      	mov	r0, r4
 800d298:	b00d      	add	sp, #52	@ 0x34
 800d29a:	bd30      	pop	{r4, r5, pc}
 800d29c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d29e:	9902      	ldr	r1, [sp, #8]
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f001 fc9d 	bl	800ebe0 <uxr_init_base_object_request>
 800d2a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	a804      	add	r0, sp, #16
 800d2ac:	f003 faaa 	bl	8010804 <uxr_serialize_CREATE_Payload>
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	b00d      	add	sp, #52	@ 0x34
 800d2b4:	bd30      	pop	{r4, r5, pc}
 800d2b6:	bf00      	nop

0800d2b8 <uxr_buffer_create_participant_bin>:
 800d2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ba:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800d2be:	ac11      	add	r4, sp, #68	@ 0x44
 800d2c0:	9103      	str	r1, [sp, #12]
 800d2c2:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 800d2c4:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 800d2c8:	2103      	movs	r1, #3
 800d2ca:	7221      	strb	r1, [r4, #8]
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	7123      	strb	r3, [r4, #4]
 800d2d2:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 800d2d6:	9202      	str	r2, [sp, #8]
 800d2d8:	4605      	mov	r5, r0
 800d2da:	f88d 1014 	strb.w	r1, [sp, #20]
 800d2de:	b1ce      	cbz	r6, 800d314 <uxr_buffer_create_participant_bin+0x5c>
 800d2e0:	f88d 301c 	strb.w	r3, [sp, #28]
 800d2e4:	9608      	str	r6, [sp, #32]
 800d2e6:	a809      	add	r0, sp, #36	@ 0x24
 800d2e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2ec:	a915      	add	r1, sp, #84	@ 0x54
 800d2ee:	f7fc fe9b 	bl	800a028 <ucdr_init_buffer>
 800d2f2:	a905      	add	r1, sp, #20
 800d2f4:	a809      	add	r0, sp, #36	@ 0x24
 800d2f6:	f002 fe4d 	bl	800ff94 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d2fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d2fc:	9401      	str	r4, [sp, #4]
 800d2fe:	b283      	uxth	r3, r0
 800d300:	9700      	str	r7, [sp, #0]
 800d302:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d306:	60e0      	str	r0, [r4, #12]
 800d308:	4628      	mov	r0, r5
 800d30a:	f7ff ffa9 	bl	800d260 <uxr_common_create_entity>
 800d30e:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 800d312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d314:	f88d 601c 	strb.w	r6, [sp, #28]
 800d318:	e7e5      	b.n	800d2e6 <uxr_buffer_create_participant_bin+0x2e>
 800d31a:	bf00      	nop

0800d31c <uxr_buffer_create_topic_bin>:
 800d31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d31e:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d322:	ac13      	add	r4, sp, #76	@ 0x4c
 800d324:	4605      	mov	r5, r0
 800d326:	9105      	str	r1, [sp, #20]
 800d328:	4618      	mov	r0, r3
 800d32a:	a997      	add	r1, sp, #604	@ 0x25c
 800d32c:	2602      	movs	r6, #2
 800d32e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d332:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 800d336:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 800d33a:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 800d33c:	f000 fa54 	bl	800d7e8 <uxr_object_id_to_raw>
 800d340:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 800d342:	9206      	str	r2, [sp, #24]
 800d344:	2303      	movs	r3, #3
 800d346:	2101      	movs	r1, #1
 800d348:	7223      	strb	r3, [r4, #8]
 800d34a:	a80b      	add	r0, sp, #44	@ 0x2c
 800d34c:	2300      	movs	r3, #0
 800d34e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d352:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d356:	a917      	add	r1, sp, #92	@ 0x5c
 800d358:	f88d 301c 	strb.w	r3, [sp, #28]
 800d35c:	960a      	str	r6, [sp, #40]	@ 0x28
 800d35e:	f7fc fe63 	bl	800a028 <ucdr_init_buffer>
 800d362:	a906      	add	r1, sp, #24
 800d364:	a80b      	add	r0, sp, #44	@ 0x2c
 800d366:	f002 fe37 	bl	800ffd8 <uxr_serialize_OBJK_Topic_Binary>
 800d36a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800d36c:	9401      	str	r4, [sp, #4]
 800d36e:	9700      	str	r7, [sp, #0]
 800d370:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d374:	4628      	mov	r0, r5
 800d376:	b2b3      	uxth	r3, r6
 800d378:	60e6      	str	r6, [r4, #12]
 800d37a:	f7ff ff71 	bl	800d260 <uxr_common_create_entity>
 800d37e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d384 <uxr_buffer_create_publisher_bin>:
 800d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d386:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d38a:	ac0e      	add	r4, sp, #56	@ 0x38
 800d38c:	4605      	mov	r5, r0
 800d38e:	9105      	str	r1, [sp, #20]
 800d390:	4618      	mov	r0, r3
 800d392:	2603      	movs	r6, #3
 800d394:	a992      	add	r1, sp, #584	@ 0x248
 800d396:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d39a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d39e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d3a2:	f000 fa21 	bl	800d7e8 <uxr_object_id_to_raw>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	a806      	add	r0, sp, #24
 800d3aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3ae:	a912      	add	r1, sp, #72	@ 0x48
 800d3b0:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d3b4:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d3b8:	7226      	strb	r6, [r4, #8]
 800d3ba:	f7fc fe35 	bl	800a028 <ucdr_init_buffer>
 800d3be:	a993      	add	r1, sp, #588	@ 0x24c
 800d3c0:	a806      	add	r0, sp, #24
 800d3c2:	f002 febd 	bl	8010140 <uxr_serialize_OBJK_Publisher_Binary>
 800d3c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d3c8:	9700      	str	r7, [sp, #0]
 800d3ca:	9401      	str	r4, [sp, #4]
 800d3cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	b2b3      	uxth	r3, r6
 800d3d4:	60e6      	str	r6, [r4, #12]
 800d3d6:	f7ff ff43 	bl	800d260 <uxr_common_create_entity>
 800d3da:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d3de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3e0 <uxr_buffer_create_subscriber_bin>:
 800d3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d3e6:	ac0e      	add	r4, sp, #56	@ 0x38
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	9105      	str	r1, [sp, #20]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	a992      	add	r1, sp, #584	@ 0x248
 800d3f0:	2604      	movs	r6, #4
 800d3f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d3f6:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d3fa:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d3fe:	f000 f9f3 	bl	800d7e8 <uxr_object_id_to_raw>
 800d402:	2103      	movs	r1, #3
 800d404:	2300      	movs	r3, #0
 800d406:	a806      	add	r0, sp, #24
 800d408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d40c:	7221      	strb	r1, [r4, #8]
 800d40e:	a912      	add	r1, sp, #72	@ 0x48
 800d410:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d414:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d418:	f7fc fe06 	bl	800a028 <ucdr_init_buffer>
 800d41c:	a993      	add	r1, sp, #588	@ 0x24c
 800d41e:	a806      	add	r0, sp, #24
 800d420:	f002 ff3e 	bl	80102a0 <uxr_serialize_OBJK_Subscriber_Binary>
 800d424:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d426:	9700      	str	r7, [sp, #0]
 800d428:	9401      	str	r4, [sp, #4]
 800d42a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d42e:	4628      	mov	r0, r5
 800d430:	b2b3      	uxth	r3, r6
 800d432:	60e6      	str	r6, [r4, #12]
 800d434:	f7ff ff14 	bl	800d260 <uxr_common_create_entity>
 800d438:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d43e:	bf00      	nop

0800d440 <uxr_buffer_create_datawriter_bin>:
 800d440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d444:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d448:	ac1d      	add	r4, sp, #116	@ 0x74
 800d44a:	2505      	movs	r5, #5
 800d44c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d450:	9105      	str	r1, [sp, #20]
 800d452:	4606      	mov	r6, r0
 800d454:	a9a1      	add	r1, sp, #644	@ 0x284
 800d456:	4618      	mov	r0, r3
 800d458:	7125      	strb	r5, [r4, #4]
 800d45a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800d45e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800d462:	2703      	movs	r7, #3
 800d464:	f000 f9c0 	bl	800d7e8 <uxr_object_id_to_raw>
 800d468:	a90e      	add	r1, sp, #56	@ 0x38
 800d46a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d46c:	7227      	strb	r7, [r4, #8]
 800d46e:	f000 f9bb 	bl	800d7e8 <uxr_object_id_to_raw>
 800d472:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d476:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 800d47a:	3d00      	subs	r5, #0
 800d47c:	f04f 0300 	mov.w	r3, #0
 800d480:	bf18      	it	ne
 800d482:	2501      	movne	r5, #1
 800d484:	2201      	movs	r2, #1
 800d486:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d48a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800d48e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d492:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d496:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d49a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d49e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d4a2:	bb89      	cbnz	r1, 800d508 <uxr_buffer_create_datawriter_bin+0xc8>
 800d4a4:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d4a8:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d4ac:	f04f 0c13 	mov.w	ip, #19
 800d4b0:	250b      	movs	r5, #11
 800d4b2:	2221      	movs	r2, #33	@ 0x21
 800d4b4:	2111      	movs	r1, #17
 800d4b6:	2009      	movs	r0, #9
 800d4b8:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d4bc:	b923      	cbnz	r3, 800d4c8 <uxr_buffer_create_datawriter_bin+0x88>
 800d4be:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d4c2:	4672      	mov	r2, lr
 800d4c4:	4661      	mov	r1, ip
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d025      	beq.n	800d51c <uxr_buffer_create_datawriter_bin+0xdc>
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d029      	beq.n	800d528 <uxr_buffer_create_datawriter_bin+0xe8>
 800d4d4:	b32b      	cbz	r3, 800d522 <uxr_buffer_create_datawriter_bin+0xe2>
 800d4d6:	a806      	add	r0, sp, #24
 800d4d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4dc:	a921      	add	r1, sp, #132	@ 0x84
 800d4de:	f7fc fda3 	bl	800a028 <ucdr_init_buffer>
 800d4e2:	a90e      	add	r1, sp, #56	@ 0x38
 800d4e4:	a806      	add	r0, sp, #24
 800d4e6:	f002 ff8d 	bl	8010404 <uxr_serialize_OBJK_DataWriter_Binary>
 800d4ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4ec:	9401      	str	r4, [sp, #4]
 800d4ee:	b283      	uxth	r3, r0
 800d4f0:	f8cd 8000 	str.w	r8, [sp]
 800d4f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d4f8:	60e0      	str	r0, [r4, #12]
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff feb0 	bl	800d260 <uxr_common_create_entity>
 800d500:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d50c:	f04f 0c12 	mov.w	ip, #18
 800d510:	250a      	movs	r5, #10
 800d512:	2220      	movs	r2, #32
 800d514:	2110      	movs	r1, #16
 800d516:	2008      	movs	r0, #8
 800d518:	2702      	movs	r7, #2
 800d51a:	e7cd      	b.n	800d4b8 <uxr_buffer_create_datawriter_bin+0x78>
 800d51c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d520:	e7d9      	b.n	800d4d6 <uxr_buffer_create_datawriter_bin+0x96>
 800d522:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d526:	e7d6      	b.n	800d4d6 <uxr_buffer_create_datawriter_bin+0x96>
 800d528:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d52c:	e7d3      	b.n	800d4d6 <uxr_buffer_create_datawriter_bin+0x96>
 800d52e:	bf00      	nop

0800d530 <uxr_buffer_create_datareader_bin>:
 800d530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d534:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d538:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d53a:	2506      	movs	r5, #6
 800d53c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800d540:	9105      	str	r1, [sp, #20]
 800d542:	4606      	mov	r6, r0
 800d544:	a9a3      	add	r1, sp, #652	@ 0x28c
 800d546:	4618      	mov	r0, r3
 800d548:	7125      	strb	r5, [r4, #4]
 800d54a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800d54e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800d552:	2703      	movs	r7, #3
 800d554:	f000 f948 	bl	800d7e8 <uxr_object_id_to_raw>
 800d558:	a90e      	add	r1, sp, #56	@ 0x38
 800d55a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800d55c:	7227      	strb	r7, [r4, #8]
 800d55e:	f000 f943 	bl	800d7e8 <uxr_object_id_to_raw>
 800d562:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800d566:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 800d56a:	3d00      	subs	r5, #0
 800d56c:	f04f 0300 	mov.w	r3, #0
 800d570:	bf18      	it	ne
 800d572:	2501      	movne	r5, #1
 800d574:	2201      	movs	r2, #1
 800d576:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800d57a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800d57e:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800d582:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800d586:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800d58a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800d58e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d592:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d596:	bb89      	cbnz	r1, 800d5fc <uxr_buffer_create_datareader_bin+0xcc>
 800d598:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d59c:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d5a0:	f04f 0c13 	mov.w	ip, #19
 800d5a4:	250b      	movs	r5, #11
 800d5a6:	2221      	movs	r2, #33	@ 0x21
 800d5a8:	2111      	movs	r1, #17
 800d5aa:	2009      	movs	r0, #9
 800d5ac:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800d5b0:	b923      	cbnz	r3, 800d5bc <uxr_buffer_create_datareader_bin+0x8c>
 800d5b2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d5b6:	4672      	mov	r2, lr
 800d5b8:	4661      	mov	r1, ip
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d025      	beq.n	800d610 <uxr_buffer_create_datareader_bin+0xe0>
 800d5c4:	2b03      	cmp	r3, #3
 800d5c6:	d029      	beq.n	800d61c <uxr_buffer_create_datareader_bin+0xec>
 800d5c8:	b32b      	cbz	r3, 800d616 <uxr_buffer_create_datareader_bin+0xe6>
 800d5ca:	a806      	add	r0, sp, #24
 800d5cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5d0:	a923      	add	r1, sp, #140	@ 0x8c
 800d5d2:	f7fc fd29 	bl	800a028 <ucdr_init_buffer>
 800d5d6:	a90e      	add	r1, sp, #56	@ 0x38
 800d5d8:	a806      	add	r0, sp, #24
 800d5da:	f002 fed7 	bl	801038c <uxr_serialize_OBJK_DataReader_Binary>
 800d5de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d5e0:	9401      	str	r4, [sp, #4]
 800d5e2:	b283      	uxth	r3, r0
 800d5e4:	f8cd 8000 	str.w	r8, [sp]
 800d5e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d5ec:	60e0      	str	r0, [r4, #12]
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f7ff fe36 	bl	800d260 <uxr_common_create_entity>
 800d5f4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5fc:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d600:	f04f 0c12 	mov.w	ip, #18
 800d604:	250a      	movs	r5, #10
 800d606:	2220      	movs	r2, #32
 800d608:	2110      	movs	r1, #16
 800d60a:	2008      	movs	r0, #8
 800d60c:	2702      	movs	r7, #2
 800d60e:	e7cd      	b.n	800d5ac <uxr_buffer_create_datareader_bin+0x7c>
 800d610:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d614:	e7d9      	b.n	800d5ca <uxr_buffer_create_datareader_bin+0x9a>
 800d616:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d61a:	e7d6      	b.n	800d5ca <uxr_buffer_create_datareader_bin+0x9a>
 800d61c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d620:	e7d3      	b.n	800d5ca <uxr_buffer_create_datareader_bin+0x9a>
 800d622:	bf00      	nop

0800d624 <get_custom_error>:
 800d624:	4b01      	ldr	r3, [pc, #4]	@ (800d62c <get_custom_error+0x8>)
 800d626:	7818      	ldrb	r0, [r3, #0]
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop
 800d62c:	2000dae4 	.word	0x2000dae4

0800d630 <recv_custom_msg>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800d638:	b089      	sub	sp, #36	@ 0x24
 800d63a:	2600      	movs	r6, #0
 800d63c:	4604      	mov	r4, r0
 800d63e:	9305      	str	r3, [sp, #20]
 800d640:	468a      	mov	sl, r1
 800d642:	4693      	mov	fp, r2
 800d644:	f88d 601e 	strb.w	r6, [sp, #30]
 800d648:	b325      	cbz	r5, 800d694 <recv_custom_msg+0x64>
 800d64a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800d64e:	f10d 081f 	add.w	r8, sp, #31
 800d652:	af05      	add	r7, sp, #20
 800d654:	f10d 061e 	add.w	r6, sp, #30
 800d658:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800d65c:	e002      	b.n	800d664 <recv_custom_msg+0x34>
 800d65e:	9b05      	ldr	r3, [sp, #20]
 800d660:	2b00      	cmp	r3, #0
 800d662:	dd0f      	ble.n	800d684 <recv_custom_msg+0x54>
 800d664:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d668:	e9cd 5600 	strd	r5, r6, [sp]
 800d66c:	4623      	mov	r3, r4
 800d66e:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800d672:	4622      	mov	r2, r4
 800d674:	4648      	mov	r0, r9
 800d676:	f001 fcd1 	bl	800f01c <uxr_read_framed_msg>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d0ef      	beq.n	800d65e <recv_custom_msg+0x2e>
 800d67e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d682:	b1b3      	cbz	r3, 800d6b2 <recv_custom_msg+0x82>
 800d684:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c4 <recv_custom_msg+0x94>)
 800d686:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d68a:	701a      	strb	r2, [r3, #0]
 800d68c:	2000      	movs	r0, #0
 800d68e:	b009      	add	sp, #36	@ 0x24
 800d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d694:	f10d 021f 	add.w	r2, sp, #31
 800d698:	9200      	str	r2, [sp, #0]
 800d69a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800d69e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	47a8      	blx	r5
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d0ec      	beq.n	800d684 <recv_custom_msg+0x54>
 800d6aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1e8      	bne.n	800d684 <recv_custom_msg+0x54>
 800d6b2:	f8cb 0000 	str.w	r0, [fp]
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	f8ca 4000 	str.w	r4, [sl]
 800d6bc:	b009      	add	sp, #36	@ 0x24
 800d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c2:	bf00      	nop
 800d6c4:	2000dae4 	.word	0x2000dae4

0800d6c8 <send_custom_msg>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	b975      	cbnz	r5, 800d6f2 <send_custom_msg+0x2a>
 800d6d4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d6d8:	f10d 0317 	add.w	r3, sp, #23
 800d6dc:	47a0      	blx	r4
 800d6de:	b108      	cbz	r0, 800d6e4 <send_custom_msg+0x1c>
 800d6e0:	42b0      	cmp	r0, r6
 800d6e2:	d015      	beq.n	800d710 <send_custom_msg+0x48>
 800d6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d718 <send_custom_msg+0x50>)
 800d6e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	b006      	add	sp, #24
 800d6f0:	bd70      	pop	{r4, r5, r6, pc}
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f10d 0117 	add.w	r1, sp, #23
 800d6fa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d6fe:	9600      	str	r6, [sp, #0]
 800d700:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800d704:	4602      	mov	r2, r0
 800d706:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d70a:	f001 fa9f 	bl	800ec4c <uxr_write_framed_msg>
 800d70e:	e7e6      	b.n	800d6de <send_custom_msg+0x16>
 800d710:	2001      	movs	r0, #1
 800d712:	b006      	add	sp, #24
 800d714:	bd70      	pop	{r4, r5, r6, pc}
 800d716:	bf00      	nop
 800d718:	2000dae4 	.word	0x2000dae4

0800d71c <uxr_set_custom_transport_callbacks>:
 800d71c:	b430      	push	{r4, r5}
 800d71e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800d722:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d726:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 800d72a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d72e:	bc30      	pop	{r4, r5}
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop

0800d734 <uxr_init_custom_transport>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d73a:	b303      	cbz	r3, 800d77e <uxr_init_custom_transport+0x4a>
 800d73c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d740:	4604      	mov	r4, r0
 800d742:	b1e2      	cbz	r2, 800d77e <uxr_init_custom_transport+0x4a>
 800d744:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d748:	b1ca      	cbz	r2, 800d77e <uxr_init_custom_transport+0x4a>
 800d74a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d74e:	b1b2      	cbz	r2, 800d77e <uxr_init_custom_transport+0x4a>
 800d750:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d754:	4798      	blx	r3
 800d756:	4605      	mov	r5, r0
 800d758:	b188      	cbz	r0, 800d77e <uxr_init_custom_transport+0x4a>
 800d75a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d75e:	b98b      	cbnz	r3, 800d784 <uxr_init_custom_transport+0x50>
 800d760:	480b      	ldr	r0, [pc, #44]	@ (800d790 <uxr_init_custom_transport+0x5c>)
 800d762:	490c      	ldr	r1, [pc, #48]	@ (800d794 <uxr_init_custom_transport+0x60>)
 800d764:	4a0c      	ldr	r2, [pc, #48]	@ (800d798 <uxr_init_custom_transport+0x64>)
 800d766:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 800d76a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d76e:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 800d772:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d776:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d77a:	4628      	mov	r0, r5
 800d77c:	bd38      	pop	{r3, r4, r5, pc}
 800d77e:	2500      	movs	r5, #0
 800d780:	4628      	mov	r0, r5
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	2100      	movs	r1, #0
 800d786:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d78a:	f001 fa59 	bl	800ec40 <uxr_init_framing_io>
 800d78e:	e7e7      	b.n	800d760 <uxr_init_custom_transport+0x2c>
 800d790:	0800d6c9 	.word	0x0800d6c9
 800d794:	0800d631 	.word	0x0800d631
 800d798:	0800d625 	.word	0x0800d625

0800d79c <uxr_close_custom_transport>:
 800d79c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d7a0:	4718      	bx	r3
 800d7a2:	bf00      	nop

0800d7a4 <uxr_object_id>:
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f88d 1006 	strb.w	r1, [sp, #6]
 800d7ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d7b0:	f360 030f 	bfi	r3, r0, #0, #16
 800d7b4:	f362 431f 	bfi	r3, r2, #16, #16
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	b002      	add	sp, #8
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop

0800d7c0 <uxr_object_id_from_raw>:
 800d7c0:	7843      	ldrb	r3, [r0, #1]
 800d7c2:	7801      	ldrb	r1, [r0, #0]
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	f003 000f 	and.w	r0, r3, #15
 800d7ca:	f88d 0006 	strb.w	r0, [sp, #6]
 800d7ce:	091b      	lsrs	r3, r3, #4
 800d7d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800d7da:	f363 020f 	bfi	r2, r3, #0, #16
 800d7de:	f361 421f 	bfi	r2, r1, #16, #16
 800d7e2:	4610      	mov	r0, r2
 800d7e4:	b002      	add	sp, #8
 800d7e6:	4770      	bx	lr

0800d7e8 <uxr_object_id_to_raw>:
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800d7f4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800d7f8:	700a      	strb	r2, [r1, #0]
 800d7fa:	704b      	strb	r3, [r1, #1]
 800d7fc:	b002      	add	sp, #8
 800d7fe:	4770      	bx	lr

0800d800 <uxr_buffer_request_data>:
 800d800:	b530      	push	{r4, r5, lr}
 800d802:	b095      	sub	sp, #84	@ 0x54
 800d804:	4604      	mov	r4, r0
 800d806:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d808:	9105      	str	r1, [sp, #20]
 800d80a:	2d00      	cmp	r5, #0
 800d80c:	bf14      	ite	ne
 800d80e:	2101      	movne	r1, #1
 800d810:	2100      	moveq	r1, #0
 800d812:	9204      	str	r2, [sp, #16]
 800d814:	f04f 0200 	mov.w	r2, #0
 800d818:	9303      	str	r3, [sp, #12]
 800d81a:	f88d 301c 	strb.w	r3, [sp, #28]
 800d81e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d822:	f88d 201d 	strb.w	r2, [sp, #29]
 800d826:	f88d 201e 	strb.w	r2, [sp, #30]
 800d82a:	d021      	beq.n	800d870 <uxr_buffer_request_data+0x70>
 800d82c:	686a      	ldr	r2, [r5, #4]
 800d82e:	682b      	ldr	r3, [r5, #0]
 800d830:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 800d834:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d838:	2210      	movs	r2, #16
 800d83a:	2000      	movs	r0, #0
 800d83c:	2108      	movs	r1, #8
 800d83e:	e9cd 1000 	strd	r1, r0, [sp]
 800d842:	ab0c      	add	r3, sp, #48	@ 0x30
 800d844:	9905      	ldr	r1, [sp, #20]
 800d846:	4620      	mov	r0, r4
 800d848:	f001 f890 	bl	800e96c <uxr_prepare_stream_to_write_submessage>
 800d84c:	b918      	cbnz	r0, 800d856 <uxr_buffer_request_data+0x56>
 800d84e:	4604      	mov	r4, r0
 800d850:	4620      	mov	r0, r4
 800d852:	b015      	add	sp, #84	@ 0x54
 800d854:	bd30      	pop	{r4, r5, pc}
 800d856:	9904      	ldr	r1, [sp, #16]
 800d858:	aa06      	add	r2, sp, #24
 800d85a:	4620      	mov	r0, r4
 800d85c:	f001 f9c0 	bl	800ebe0 <uxr_init_base_object_request>
 800d860:	a906      	add	r1, sp, #24
 800d862:	4604      	mov	r4, r0
 800d864:	a80c      	add	r0, sp, #48	@ 0x30
 800d866:	f003 f923 	bl	8010ab0 <uxr_serialize_READ_DATA_Payload>
 800d86a:	4620      	mov	r0, r4
 800d86c:	b015      	add	sp, #84	@ 0x54
 800d86e:	bd30      	pop	{r4, r5, pc}
 800d870:	2208      	movs	r2, #8
 800d872:	e7e2      	b.n	800d83a <uxr_buffer_request_data+0x3a>

0800d874 <uxr_buffer_cancel_data>:
 800d874:	b530      	push	{r4, r5, lr}
 800d876:	b095      	sub	sp, #84	@ 0x54
 800d878:	2400      	movs	r4, #0
 800d87a:	2308      	movs	r3, #8
 800d87c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	9205      	str	r2, [sp, #20]
 800d884:	2501      	movs	r5, #1
 800d886:	ab0c      	add	r3, sp, #48	@ 0x30
 800d888:	2210      	movs	r2, #16
 800d88a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d88e:	f88d 401e 	strb.w	r4, [sp, #30]
 800d892:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 800d896:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 800d89a:	9103      	str	r1, [sp, #12]
 800d89c:	4604      	mov	r4, r0
 800d89e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800d8a2:	f001 f863 	bl	800e96c <uxr_prepare_stream_to_write_submessage>
 800d8a6:	b918      	cbnz	r0, 800d8b0 <uxr_buffer_cancel_data+0x3c>
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	b015      	add	sp, #84	@ 0x54
 800d8ae:	bd30      	pop	{r4, r5, pc}
 800d8b0:	9905      	ldr	r1, [sp, #20]
 800d8b2:	aa06      	add	r2, sp, #24
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f001 f993 	bl	800ebe0 <uxr_init_base_object_request>
 800d8ba:	a906      	add	r1, sp, #24
 800d8bc:	4604      	mov	r4, r0
 800d8be:	a80c      	add	r0, sp, #48	@ 0x30
 800d8c0:	f003 f8f6 	bl	8010ab0 <uxr_serialize_READ_DATA_Payload>
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	b015      	add	sp, #84	@ 0x54
 800d8c8:	bd30      	pop	{r4, r5, pc}
 800d8ca:	bf00      	nop

0800d8cc <read_submessage_format>:
 800d8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8d0:	b095      	sub	sp, #84	@ 0x54
 800d8d2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 800d8d6:	b113      	cbz	r3, 800d8de <read_submessage_format+0x12>
 800d8d8:	b015      	add	sp, #84	@ 0x54
 800d8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8de:	460c      	mov	r4, r1
 800d8e0:	4616      	mov	r6, r2
 800d8e2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d8e6:	461d      	mov	r5, r3
 800d8e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	1a52      	subs	r2, r2, r1
 800d8ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8f0:	9305      	str	r3, [sp, #20]
 800d8f2:	4607      	mov	r7, r0
 800d8f4:	a80c      	add	r0, sp, #48	@ 0x30
 800d8f6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d8fa:	f7fc fb95 	bl	800a028 <ucdr_init_buffer>
 800d8fe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d902:	a80c      	add	r0, sp, #48	@ 0x30
 800d904:	f7fc fb66 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 800d908:	69e3      	ldr	r3, [r4, #28]
 800d90a:	b193      	cbz	r3, 800d932 <read_submessage_format+0x66>
 800d90c:	f1b8 0f07 	cmp.w	r8, #7
 800d910:	751d      	strb	r5, [r3, #20]
 800d912:	d03e      	beq.n	800d992 <read_submessage_format+0xc6>
 800d914:	f1b8 0f08 	cmp.w	r8, #8
 800d918:	d02c      	beq.n	800d974 <read_submessage_format+0xa8>
 800d91a:	f1b8 0f06 	cmp.w	r8, #6
 800d91e:	d011      	beq.n	800d944 <read_submessage_format+0x78>
 800d920:	2201      	movs	r2, #1
 800d922:	751a      	strb	r2, [r3, #20]
 800d924:	4631      	mov	r1, r6
 800d926:	4620      	mov	r0, r4
 800d928:	f7fc fbce 	bl	800a0c8 <ucdr_advance_buffer>
 800d92c:	b015      	add	sp, #84	@ 0x54
 800d92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d932:	f1b8 0f07 	cmp.w	r8, #7
 800d936:	d02c      	beq.n	800d992 <read_submessage_format+0xc6>
 800d938:	f1b8 0f08 	cmp.w	r8, #8
 800d93c:	d01a      	beq.n	800d974 <read_submessage_format+0xa8>
 800d93e:	f1b8 0f06 	cmp.w	r8, #6
 800d942:	d1ef      	bne.n	800d924 <read_submessage_format+0x58>
 800d944:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800d948:	b18d      	cbz	r5, 800d96e <read_submessage_format+0xa2>
 800d94a:	2306      	movs	r3, #6
 800d94c:	f88d 3016 	strb.w	r3, [sp, #22]
 800d950:	aa0c      	add	r2, sp, #48	@ 0x30
 800d952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d956:	9302      	str	r3, [sp, #8]
 800d958:	9200      	str	r2, [sp, #0]
 800d95a:	9b04      	ldr	r3, [sp, #16]
 800d95c:	9905      	ldr	r1, [sp, #20]
 800d95e:	9601      	str	r6, [sp, #4]
 800d960:	464a      	mov	r2, r9
 800d962:	4638      	mov	r0, r7
 800d964:	47a8      	blx	r5
 800d966:	2301      	movs	r3, #1
 800d968:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d96c:	69e3      	ldr	r3, [r4, #28]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1d6      	bne.n	800d920 <read_submessage_format+0x54>
 800d972:	e7d7      	b.n	800d924 <read_submessage_format+0x58>
 800d974:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d978:	2a00      	cmp	r2, #0
 800d97a:	d0f8      	beq.n	800d96e <read_submessage_format+0xa2>
 800d97c:	a906      	add	r1, sp, #24
 800d97e:	a80c      	add	r0, sp, #48	@ 0x30
 800d980:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d982:	f003 f969 	bl	8010c58 <uxr_deserialize_SampleIdentity>
 800d986:	2800      	cmp	r0, #0
 800d988:	d13c      	bne.n	800da04 <read_submessage_format+0x138>
 800d98a:	69e3      	ldr	r3, [r4, #28]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1c7      	bne.n	800d920 <read_submessage_format+0x54>
 800d990:	e7c8      	b.n	800d924 <read_submessage_format+0x58>
 800d992:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d996:	b132      	cbz	r2, 800d9a6 <read_submessage_format+0xda>
 800d998:	a906      	add	r1, sp, #24
 800d99a:	a80c      	add	r0, sp, #48	@ 0x30
 800d99c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d99e:	f002 fe0b 	bl	80105b8 <uxr_deserialize_BaseObjectRequest>
 800d9a2:	b930      	cbnz	r0, 800d9b2 <read_submessage_format+0xe6>
 800d9a4:	69e3      	ldr	r3, [r4, #28]
 800d9a6:	68a2      	ldr	r2, [r4, #8]
 800d9a8:	4432      	add	r2, r6
 800d9aa:	60a2      	str	r2, [r4, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1b7      	bne.n	800d920 <read_submessage_format+0x54>
 800d9b0:	e7b8      	b.n	800d924 <read_submessage_format+0x58>
 800d9b2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d9b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9b8:	1a52      	subs	r2, r2, r1
 800d9ba:	a80c      	add	r0, sp, #48	@ 0x30
 800d9bc:	1aed      	subs	r5, r5, r3
 800d9be:	f7fc fb33 	bl	800a028 <ucdr_init_buffer>
 800d9c2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d9c6:	a80c      	add	r0, sp, #48	@ 0x30
 800d9c8:	f7fc fb04 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 800d9cc:	4435      	add	r5, r6
 800d9ce:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d9d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d9d6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800d9da:	9002      	str	r0, [sp, #8]
 800d9dc:	2207      	movs	r2, #7
 800d9de:	f88d 2016 	strb.w	r2, [sp, #22]
 800d9e2:	b2ad      	uxth	r5, r5
 800d9e4:	aa0c      	add	r2, sp, #48	@ 0x30
 800d9e6:	9200      	str	r2, [sp, #0]
 800d9e8:	9501      	str	r5, [sp, #4]
 800d9ea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	9905      	ldr	r1, [sp, #20]
 800d9f2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 800d9f6:	464a      	mov	r2, r9
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	47a8      	blx	r5
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800da02:	e7cf      	b.n	800d9a4 <read_submessage_format+0xd8>
 800da04:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800da08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da0a:	1a52      	subs	r2, r2, r1
 800da0c:	a80c      	add	r0, sp, #48	@ 0x30
 800da0e:	1aed      	subs	r5, r5, r3
 800da10:	f7fc fb0a 	bl	800a028 <ucdr_init_buffer>
 800da14:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800da18:	a80c      	add	r0, sp, #48	@ 0x30
 800da1a:	f7fc fadb 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 800da1e:	4435      	add	r5, r6
 800da20:	2308      	movs	r3, #8
 800da22:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800da26:	f88d 3016 	strb.w	r3, [sp, #22]
 800da2a:	b2ad      	uxth	r5, r5
 800da2c:	ab0c      	add	r3, sp, #48	@ 0x30
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	9002      	str	r0, [sp, #8]
 800da32:	9501      	str	r5, [sp, #4]
 800da34:	ab06      	add	r3, sp, #24
 800da36:	9905      	ldr	r1, [sp, #20]
 800da38:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 800da3c:	464a      	mov	r2, r9
 800da3e:	4638      	mov	r0, r7
 800da40:	47a8      	blx	r5
 800da42:	2301      	movs	r3, #1
 800da44:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800da48:	e79f      	b.n	800d98a <read_submessage_format+0xbe>
 800da4a:	bf00      	nop

0800da4c <on_get_fragmentation_info>:
 800da4c:	b500      	push	{lr}
 800da4e:	b08b      	sub	sp, #44	@ 0x2c
 800da50:	4601      	mov	r1, r0
 800da52:	2204      	movs	r2, #4
 800da54:	a802      	add	r0, sp, #8
 800da56:	f7fc fae7 	bl	800a028 <ucdr_init_buffer>
 800da5a:	f10d 0305 	add.w	r3, sp, #5
 800da5e:	a802      	add	r0, sp, #8
 800da60:	f10d 0206 	add.w	r2, sp, #6
 800da64:	a901      	add	r1, sp, #4
 800da66:	f001 febd 	bl	800f7e4 <uxr_read_submessage_header>
 800da6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da6e:	2b0d      	cmp	r3, #13
 800da70:	d003      	beq.n	800da7a <on_get_fragmentation_info+0x2e>
 800da72:	2000      	movs	r0, #0
 800da74:	b00b      	add	sp, #44	@ 0x2c
 800da76:	f85d fb04 	ldr.w	pc, [sp], #4
 800da7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da7e:	f013 0f02 	tst.w	r3, #2
 800da82:	bf14      	ite	ne
 800da84:	2002      	movne	r0, #2
 800da86:	2001      	moveq	r0, #1
 800da88:	b00b      	add	sp, #44	@ 0x2c
 800da8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800da8e:	bf00      	nop

0800da90 <read_submessage_get_info>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	2500      	movs	r5, #0
 800da94:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800da98:	4604      	mov	r4, r0
 800da9a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800da9e:	460e      	mov	r6, r1
 800daa0:	a810      	add	r0, sp, #64	@ 0x40
 800daa2:	4629      	mov	r1, r5
 800daa4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800daa8:	f007 fe4a 	bl	8015740 <memset>
 800daac:	a903      	add	r1, sp, #12
 800daae:	4630      	mov	r0, r6
 800dab0:	f002 ff40 	bl	8010934 <uxr_deserialize_GET_INFO_Payload>
 800dab4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800dab8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dabc:	4620      	mov	r0, r4
 800dabe:	f001 f887 	bl	800ebd0 <uxr_session_header_offset>
 800dac2:	462b      	mov	r3, r5
 800dac4:	9000      	str	r0, [sp, #0]
 800dac6:	a905      	add	r1, sp, #20
 800dac8:	a808      	add	r0, sp, #32
 800daca:	220c      	movs	r2, #12
 800dacc:	f7fc fa9a 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800dad0:	a910      	add	r1, sp, #64	@ 0x40
 800dad2:	a808      	add	r0, sp, #32
 800dad4:	f002 ffa0 	bl	8010a18 <uxr_serialize_INFO_Payload>
 800dad8:	9b08      	ldr	r3, [sp, #32]
 800dada:	462a      	mov	r2, r5
 800dadc:	4629      	mov	r1, r5
 800dade:	4620      	mov	r0, r4
 800dae0:	f001 f81e 	bl	800eb20 <uxr_stamp_session_header>
 800dae4:	a808      	add	r0, sp, #32
 800dae6:	f7fc facb 	bl	800a080 <ucdr_buffer_length>
 800daea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800daec:	4602      	mov	r2, r0
 800daee:	a905      	add	r1, sp, #20
 800daf0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800daf4:	47a0      	blx	r4
 800daf6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800dafa:	bd70      	pop	{r4, r5, r6, pc}

0800dafc <write_submessage_acknack.isra.0>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	b092      	sub	sp, #72	@ 0x48
 800db00:	4605      	mov	r5, r0
 800db02:	460e      	mov	r6, r1
 800db04:	4614      	mov	r4, r2
 800db06:	f001 f863 	bl	800ebd0 <uxr_session_header_offset>
 800db0a:	a905      	add	r1, sp, #20
 800db0c:	9000      	str	r0, [sp, #0]
 800db0e:	2300      	movs	r3, #0
 800db10:	a80a      	add	r0, sp, #40	@ 0x28
 800db12:	2211      	movs	r2, #17
 800db14:	f7fc fa76 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800db18:	2218      	movs	r2, #24
 800db1a:	fb02 5404 	mla	r4, r2, r4, r5
 800db1e:	2300      	movs	r3, #0
 800db20:	2205      	movs	r2, #5
 800db22:	3450      	adds	r4, #80	@ 0x50
 800db24:	a80a      	add	r0, sp, #40	@ 0x28
 800db26:	210a      	movs	r1, #10
 800db28:	f001 fe42 	bl	800f7b0 <uxr_buffer_submessage_header>
 800db2c:	a903      	add	r1, sp, #12
 800db2e:	4620      	mov	r0, r4
 800db30:	f006 fcf2 	bl	8014518 <uxr_compute_acknack>
 800db34:	a903      	add	r1, sp, #12
 800db36:	ba43      	rev16	r3, r0
 800db38:	a80a      	add	r0, sp, #40	@ 0x28
 800db3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db3e:	f88d 6010 	strb.w	r6, [sp, #16]
 800db42:	f002 ffd9 	bl	8010af8 <uxr_serialize_ACKNACK_Payload>
 800db46:	2200      	movs	r2, #0
 800db48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db4a:	4611      	mov	r1, r2
 800db4c:	4628      	mov	r0, r5
 800db4e:	f000 ffe7 	bl	800eb20 <uxr_stamp_session_header>
 800db52:	a80a      	add	r0, sp, #40	@ 0x28
 800db54:	f7fc fa94 	bl	800a080 <ucdr_buffer_length>
 800db58:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800db5a:	4602      	mov	r2, r0
 800db5c:	a905      	add	r1, sp, #20
 800db5e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800db62:	47a0      	blx	r4
 800db64:	b012      	add	sp, #72	@ 0x48
 800db66:	bd70      	pop	{r4, r5, r6, pc}

0800db68 <uxr_init_session>:
 800db68:	b5d0      	push	{r4, r6, r7, lr}
 800db6a:	2300      	movs	r3, #0
 800db6c:	2600      	movs	r6, #0
 800db6e:	2700      	movs	r7, #0
 800db70:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 800db74:	4604      	mov	r4, r0
 800db76:	6701      	str	r1, [r0, #112]	@ 0x70
 800db78:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 800db7c:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 800db80:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 800db84:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 800db88:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 800db8c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800db90:	2181      	movs	r1, #129	@ 0x81
 800db92:	f000 ff2f 	bl	800e9f4 <uxr_init_session_info>
 800db96:	f104 0008 	add.w	r0, r4, #8
 800db9a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800db9e:	f001 bd23 	b.w	800f5e8 <uxr_init_stream_storage>
 800dba2:	bf00      	nop

0800dba4 <uxr_set_status_callback>:
 800dba4:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop

0800dbac <uxr_set_topic_callback>:
 800dbac:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop

0800dbb4 <uxr_set_request_callback>:
 800dbb4:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop

0800dbbc <uxr_set_reply_callback>:
 800dbbc:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop

0800dbc4 <uxr_create_output_best_effort_stream>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	e9cd 2100 	strd	r2, r1, [sp]
 800dbcc:	4604      	mov	r4, r0
 800dbce:	f000 ffff 	bl	800ebd0 <uxr_session_header_offset>
 800dbd2:	e9dd 2100 	ldrd	r2, r1, [sp]
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	f104 0008 	add.w	r0, r4, #8
 800dbdc:	b004      	add	sp, #16
 800dbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbe2:	f001 bd4b 	b.w	800f67c <uxr_add_output_best_effort_buffer>
 800dbe6:	bf00      	nop

0800dbe8 <uxr_create_output_reliable_stream>:
 800dbe8:	b530      	push	{r4, r5, lr}
 800dbea:	b089      	sub	sp, #36	@ 0x24
 800dbec:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800dbf0:	9303      	str	r3, [sp, #12]
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	f000 ffec 	bl	800ebd0 <uxr_session_header_offset>
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800dbfe:	9905      	ldr	r1, [sp, #20]
 800dc00:	9500      	str	r5, [sp, #0]
 800dc02:	f104 0008 	add.w	r0, r4, #8
 800dc06:	f001 fd4b 	bl	800f6a0 <uxr_add_output_reliable_buffer>
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	b2c3      	uxtb	r3, r0
 800dc0e:	f363 0207 	bfi	r2, r3, #0, #8
 800dc12:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dc16:	f363 220f 	bfi	r2, r3, #8, #8
 800dc1a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dc1e:	f363 4217 	bfi	r2, r3, #16, #8
 800dc22:	0e03      	lsrs	r3, r0, #24
 800dc24:	f363 621f 	bfi	r2, r3, #24, #8
 800dc28:	4610      	mov	r0, r2
 800dc2a:	b009      	add	sp, #36	@ 0x24
 800dc2c:	bd30      	pop	{r4, r5, pc}
 800dc2e:	bf00      	nop

0800dc30 <uxr_create_input_best_effort_stream>:
 800dc30:	b082      	sub	sp, #8
 800dc32:	3008      	adds	r0, #8
 800dc34:	b002      	add	sp, #8
 800dc36:	f001 bd4d 	b.w	800f6d4 <uxr_add_input_best_effort_buffer>
 800dc3a:	bf00      	nop

0800dc3c <uxr_create_input_reliable_stream>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	4c0b      	ldr	r4, [pc, #44]	@ (800dc70 <uxr_create_input_reliable_stream+0x34>)
 800dc42:	9400      	str	r4, [sp, #0]
 800dc44:	3008      	adds	r0, #8
 800dc46:	f001 fd5b 	bl	800f700 <uxr_add_input_reliable_buffer>
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	b2c3      	uxtb	r3, r0
 800dc4e:	f363 0207 	bfi	r2, r3, #0, #8
 800dc52:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800dc56:	f363 220f 	bfi	r2, r3, #8, #8
 800dc5a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dc5e:	f363 4217 	bfi	r2, r3, #16, #8
 800dc62:	0e03      	lsrs	r3, r0, #24
 800dc64:	f363 621f 	bfi	r2, r3, #24, #8
 800dc68:	4610      	mov	r0, r2
 800dc6a:	b004      	add	sp, #16
 800dc6c:	bd10      	pop	{r4, pc}
 800dc6e:	bf00      	nop
 800dc70:	0800da4d 	.word	0x0800da4d

0800dc74 <uxr_epoch_nanos>:
 800dc74:	b510      	push	{r4, lr}
 800dc76:	4604      	mov	r4, r0
 800dc78:	f001 fdfc 	bl	800f874 <uxr_nanos>
 800dc7c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800dc80:	1ac0      	subs	r0, r0, r3
 800dc82:	eb61 0102 	sbc.w	r1, r1, r2
 800dc86:	bd10      	pop	{r4, pc}

0800dc88 <uxr_flash_output_streams>:
 800dc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc8c:	7e03      	ldrb	r3, [r0, #24]
 800dc8e:	b084      	sub	sp, #16
 800dc90:	4604      	mov	r4, r0
 800dc92:	b1fb      	cbz	r3, 800dcd4 <uxr_flash_output_streams+0x4c>
 800dc94:	f04f 0900 	mov.w	r9, #0
 800dc98:	4648      	mov	r0, r9
 800dc9a:	f10d 0802 	add.w	r8, sp, #2
 800dc9e:	af03      	add	r7, sp, #12
 800dca0:	ae02      	add	r6, sp, #8
 800dca2:	2201      	movs	r2, #1
 800dca4:	4611      	mov	r1, r2
 800dca6:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800dcaa:	f001 fc47 	bl	800f53c <uxr_stream_id>
 800dcae:	3508      	adds	r5, #8
 800dcb0:	4684      	mov	ip, r0
 800dcb2:	4643      	mov	r3, r8
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	4631      	mov	r1, r6
 800dcba:	f8cd c004 	str.w	ip, [sp, #4]
 800dcbe:	f006 fcb3 	bl	8014628 <uxr_prepare_best_effort_buffer_to_send>
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d13d      	bne.n	800dd42 <uxr_flash_output_streams+0xba>
 800dcc6:	7e23      	ldrb	r3, [r4, #24]
 800dcc8:	f109 0901 	add.w	r9, r9, #1
 800dccc:	fa5f f089 	uxtb.w	r0, r9
 800dcd0:	4283      	cmp	r3, r0
 800dcd2:	d8e6      	bhi.n	800dca2 <uxr_flash_output_streams+0x1a>
 800dcd4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dcd8:	b383      	cbz	r3, 800dd3c <uxr_flash_output_streams+0xb4>
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	4648      	mov	r0, r9
 800dce0:	f10d 0802 	add.w	r8, sp, #2
 800dce4:	af03      	add	r7, sp, #12
 800dce6:	ae02      	add	r6, sp, #8
 800dce8:	2201      	movs	r2, #1
 800dcea:	2102      	movs	r1, #2
 800dcec:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800dcf0:	f001 fc24 	bl	800f53c <uxr_stream_id>
 800dcf4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800dcf8:	3520      	adds	r5, #32
 800dcfa:	9001      	str	r0, [sp, #4]
 800dcfc:	e00c      	b.n	800dd18 <uxr_flash_output_streams+0x90>
 800dcfe:	9b02      	ldr	r3, [sp, #8]
 800dd00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dd04:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dd08:	f000 ff0a 	bl	800eb20 <uxr_stamp_session_header>
 800dd0c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd0e:	9a03      	ldr	r2, [sp, #12]
 800dd10:	9902      	ldr	r1, [sp, #8]
 800dd12:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800dd16:	47d0      	blx	sl
 800dd18:	4643      	mov	r3, r8
 800dd1a:	463a      	mov	r2, r7
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f006 fe96 	bl	8014a50 <uxr_prepare_next_reliable_buffer_to_send>
 800dd24:	4603      	mov	r3, r0
 800dd26:	4620      	mov	r0, r4
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1e8      	bne.n	800dcfe <uxr_flash_output_streams+0x76>
 800dd2c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dd30:	f109 0901 	add.w	r9, r9, #1
 800dd34:	fa5f f089 	uxtb.w	r0, r9
 800dd38:	4283      	cmp	r3, r0
 800dd3a:	d8d5      	bhi.n	800dce8 <uxr_flash_output_streams+0x60>
 800dd3c:	b004      	add	sp, #16
 800dd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd42:	9b02      	ldr	r3, [sp, #8]
 800dd44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dd48:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 fee7 	bl	800eb20 <uxr_stamp_session_header>
 800dd52:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd54:	9a03      	ldr	r2, [sp, #12]
 800dd56:	9902      	ldr	r1, [sp, #8]
 800dd58:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dd5c:	47a8      	blx	r5
 800dd5e:	f109 0901 	add.w	r9, r9, #1
 800dd62:	7e23      	ldrb	r3, [r4, #24]
 800dd64:	fa5f f089 	uxtb.w	r0, r9
 800dd68:	4283      	cmp	r3, r0
 800dd6a:	d89a      	bhi.n	800dca2 <uxr_flash_output_streams+0x1a>
 800dd6c:	e7b2      	b.n	800dcd4 <uxr_flash_output_streams+0x4c>
 800dd6e:	bf00      	nop

0800dd70 <read_submessage_info>:
 800dd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd74:	460d      	mov	r5, r1
 800dd76:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dd7a:	4669      	mov	r1, sp
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	4628      	mov	r0, r5
 800dd80:	f002 fcde 	bl	8010740 <uxr_deserialize_BaseObjectReply>
 800dd84:	a902      	add	r1, sp, #8
 800dd86:	4604      	mov	r4, r0
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dd8e:	f7fa fe51 	bl	8008a34 <ucdr_deserialize_bool>
 800dd92:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dd96:	4004      	ands	r4, r0
 800dd98:	b2e4      	uxtb	r4, r4
 800dd9a:	b95b      	cbnz	r3, 800ddb4 <read_submessage_info+0x44>
 800dd9c:	a987      	add	r1, sp, #540	@ 0x21c
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f7fa fe48 	bl	8008a34 <ucdr_deserialize_bool>
 800dda4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dda8:	4606      	mov	r6, r0
 800ddaa:	b94b      	cbnz	r3, 800ddc0 <read_submessage_info+0x50>
 800ddac:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	a903      	add	r1, sp, #12
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f002 fb50 	bl	801045c <uxr_deserialize_ObjectVariant>
 800ddbc:	4004      	ands	r4, r0
 800ddbe:	e7ed      	b.n	800dd9c <read_submessage_info+0x2c>
 800ddc0:	a988      	add	r1, sp, #544	@ 0x220
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f7fa fe66 	bl	8008a94 <ucdr_deserialize_uint8_t>
 800ddc8:	4234      	tst	r4, r6
 800ddca:	d0ef      	beq.n	800ddac <read_submessage_info+0x3c>
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d0ed      	beq.n	800ddac <read_submessage_info+0x3c>
 800ddd0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ddd4:	2b0d      	cmp	r3, #13
 800ddd6:	d1e9      	bne.n	800ddac <read_submessage_info+0x3c>
 800ddd8:	4628      	mov	r0, r5
 800ddda:	a98a      	add	r1, sp, #552	@ 0x228
 800dddc:	f7fb fc00 	bl	80095e0 <ucdr_deserialize_int16_t>
 800dde0:	b140      	cbz	r0, 800ddf4 <read_submessage_info+0x84>
 800dde2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	dd07      	ble.n	800ddfa <read_submessage_info+0x8a>
 800ddea:	f1b8 0f00 	cmp.w	r8, #0
 800ddee:	bf14      	ite	ne
 800ddf0:	2001      	movne	r0, #1
 800ddf2:	2002      	moveq	r0, #2
 800ddf4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ddf8:	e7d8      	b.n	800ddac <read_submessage_info+0x3c>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	e7fa      	b.n	800ddf4 <read_submessage_info+0x84>
 800ddfe:	bf00      	nop

0800de00 <read_submessage_list>:
 800de00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	b098      	sub	sp, #96	@ 0x60
 800de06:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 800e10c <read_submessage_list+0x30c>
 800de0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de0c:	4604      	mov	r4, r0
 800de0e:	4688      	mov	r8, r1
 800de10:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 800de14:	aa0e      	add	r2, sp, #56	@ 0x38
 800de16:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 800de1a:	4640      	mov	r0, r8
 800de1c:	f001 fce2 	bl	800f7e4 <uxr_read_submessage_header>
 800de20:	2800      	cmp	r0, #0
 800de22:	f000 813d 	beq.w	800e0a0 <read_submessage_list+0x2a0>
 800de26:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 800de2a:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 800de2e:	3b02      	subs	r3, #2
 800de30:	2b0d      	cmp	r3, #13
 800de32:	d8ed      	bhi.n	800de10 <read_submessage_list+0x10>
 800de34:	a101      	add	r1, pc, #4	@ (adr r1, 800de3c <read_submessage_list+0x3c>)
 800de36:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de3a:	bf00      	nop
 800de3c:	0800e097 	.word	0x0800e097
 800de40:	0800de11 	.word	0x0800de11
 800de44:	0800e087 	.word	0x0800e087
 800de48:	0800e02b 	.word	0x0800e02b
 800de4c:	0800e021 	.word	0x0800e021
 800de50:	0800de11 	.word	0x0800de11
 800de54:	0800de11 	.word	0x0800de11
 800de58:	0800df83 	.word	0x0800df83
 800de5c:	0800df15 	.word	0x0800df15
 800de60:	0800ded3 	.word	0x0800ded3
 800de64:	0800de11 	.word	0x0800de11
 800de68:	0800de11 	.word	0x0800de11
 800de6c:	0800de11 	.word	0x0800de11
 800de70:	0800de75 	.word	0x0800de75
 800de74:	a912      	add	r1, sp, #72	@ 0x48
 800de76:	4640      	mov	r0, r8
 800de78:	f002 fe9c 	bl	8010bb4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800de7c:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 800de80:	2d00      	cmp	r5, #0
 800de82:	f000 8115 	beq.w	800e0b0 <read_submessage_list+0x2b0>
 800de86:	f001 fcf5 	bl	800f874 <uxr_nanos>
 800de8a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800de8c:	460b      	mov	r3, r1
 800de8e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800de90:	2700      	movs	r7, #0
 800de92:	fbc9 6701 	smlal	r6, r7, r9, r1
 800de96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800de9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de9c:	4602      	mov	r2, r0
 800de9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dea0:	460e      	mov	r6, r1
 800dea2:	2700      	movs	r7, #0
 800dea4:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800dea8:	9106      	str	r1, [sp, #24]
 800deaa:	fbc9 6700 	smlal	r6, r7, r9, r0
 800deae:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800deb0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800deb4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800deb6:	2700      	movs	r7, #0
 800deb8:	4608      	mov	r0, r1
 800deba:	4639      	mov	r1, r7
 800debc:	fbc9 0106 	smlal	r0, r1, r9, r6
 800dec0:	e9cd 0100 	strd	r0, r1, [sp]
 800dec4:	4620      	mov	r0, r4
 800dec6:	47a8      	blx	r5
 800dec8:	f04f 0301 	mov.w	r3, #1
 800decc:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800ded0:	e79e      	b.n	800de10 <read_submessage_list+0x10>
 800ded2:	a912      	add	r1, sp, #72	@ 0x48
 800ded4:	4640      	mov	r0, r8
 800ded6:	f002 fe4d 	bl	8010b74 <uxr_deserialize_HEARTBEAT_Payload>
 800deda:	2100      	movs	r1, #0
 800dedc:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800dee0:	f001 fb56 	bl	800f590 <uxr_stream_id_from_raw>
 800dee4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800dee8:	4603      	mov	r3, r0
 800deea:	4629      	mov	r1, r5
 800deec:	f104 0008 	add.w	r0, r4, #8
 800def0:	9311      	str	r3, [sp, #68]	@ 0x44
 800def2:	f001 fc3b 	bl	800f76c <uxr_get_input_reliable_stream>
 800def6:	2800      	cmp	r0, #0
 800def8:	d08a      	beq.n	800de10 <read_submessage_list+0x10>
 800defa:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 800defe:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 800df02:	f006 fafd 	bl	8014500 <uxr_process_heartbeat>
 800df06:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 800df0a:	462a      	mov	r2, r5
 800df0c:	4620      	mov	r0, r4
 800df0e:	f7ff fdf5 	bl	800dafc <write_submessage_acknack.isra.0>
 800df12:	e77d      	b.n	800de10 <read_submessage_list+0x10>
 800df14:	a912      	add	r1, sp, #72	@ 0x48
 800df16:	4640      	mov	r0, r8
 800df18:	f002 fe04 	bl	8010b24 <uxr_deserialize_ACKNACK_Payload>
 800df1c:	2100      	movs	r1, #0
 800df1e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800df22:	f001 fb35 	bl	800f590 <uxr_stream_id_from_raw>
 800df26:	4603      	mov	r3, r0
 800df28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800df2c:	f104 0008 	add.w	r0, r4, #8
 800df30:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df32:	f001 fc05 	bl	800f740 <uxr_get_output_reliable_stream>
 800df36:	4605      	mov	r5, r0
 800df38:	2800      	cmp	r0, #0
 800df3a:	f43f af69 	beq.w	800de10 <read_submessage_list+0x10>
 800df3e:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 800df42:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 800df46:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800df4a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800df4e:	b289      	uxth	r1, r1
 800df50:	f006 fe26 	bl	8014ba0 <uxr_process_acknack>
 800df54:	4628      	mov	r0, r5
 800df56:	f006 fde9 	bl	8014b2c <uxr_begin_output_nack_buffer_it>
 800df5a:	af10      	add	r7, sp, #64	@ 0x40
 800df5c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 800df60:	e005      	b.n	800df6e <read_submessage_list+0x16e>
 800df62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df66:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800df68:	e9d3 0600 	ldrd	r0, r6, [r3]
 800df6c:	47b0      	blx	r6
 800df6e:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 800df72:	aa11      	add	r2, sp, #68	@ 0x44
 800df74:	4639      	mov	r1, r7
 800df76:	4628      	mov	r0, r5
 800df78:	f006 fdda 	bl	8014b30 <uxr_next_reliable_nack_buffer_to_send>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d1f0      	bne.n	800df62 <read_submessage_list+0x162>
 800df80:	e746      	b.n	800de10 <read_submessage_list+0x10>
 800df82:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 800df86:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 800df8a:	af10      	add	r7, sp, #64	@ 0x40
 800df8c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 800df90:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 800df94:	4639      	mov	r1, r7
 800df96:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800df9a:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 800df9e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800dfa2:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800dfac:	f002 fb04 	bl	80105b8 <uxr_deserialize_BaseObjectRequest>
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	a911      	add	r1, sp, #68	@ 0x44
 800dfb4:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 800dfb8:	f000 fe30 	bl	800ec1c <uxr_parse_base_object_request>
 800dfbc:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800dfc0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800dfc2:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 800dfc6:	9112      	str	r1, [sp, #72]	@ 0x48
 800dfc8:	3d04      	subs	r5, #4
 800dfca:	f006 060e 	and.w	r6, r6, #14
 800dfce:	b2ad      	uxth	r5, r5
 800dfd0:	f1ba 0f00 	cmp.w	sl, #0
 800dfd4:	d006      	beq.n	800dfe4 <read_submessage_list+0x1e4>
 800dfd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	463a      	mov	r2, r7
 800dfde:	2300      	movs	r3, #0
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	47d0      	blx	sl
 800dfe4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800dfe6:	b168      	cbz	r0, 800e004 <read_submessage_list+0x204>
 800dfe8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800dfea:	2300      	movs	r3, #0
 800dfec:	3902      	subs	r1, #2
 800dfee:	e002      	b.n	800dff6 <read_submessage_list+0x1f6>
 800dff0:	3301      	adds	r3, #1
 800dff2:	4283      	cmp	r3, r0
 800dff4:	d006      	beq.n	800e004 <read_submessage_list+0x204>
 800dff6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800dffa:	42ba      	cmp	r2, r7
 800dffc:	d1f8      	bne.n	800dff0 <read_submessage_list+0x1f0>
 800dffe:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800e000:	2100      	movs	r1, #0
 800e002:	54d1      	strb	r1, [r2, r3]
 800e004:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e006:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e008:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 800e00c:	9302      	str	r3, [sp, #8]
 800e00e:	e9cd 1000 	strd	r1, r0, [sp]
 800e012:	4633      	mov	r3, r6
 800e014:	462a      	mov	r2, r5
 800e016:	4641      	mov	r1, r8
 800e018:	4620      	mov	r0, r4
 800e01a:	f7ff fc57 	bl	800d8cc <read_submessage_format>
 800e01e:	e6f7      	b.n	800de10 <read_submessage_list+0x10>
 800e020:	4641      	mov	r1, r8
 800e022:	4620      	mov	r0, r4
 800e024:	f7ff fea4 	bl	800dd70 <read_submessage_info>
 800e028:	e6f2      	b.n	800de10 <read_submessage_list+0x10>
 800e02a:	2a00      	cmp	r2, #0
 800e02c:	d03b      	beq.n	800e0a6 <read_submessage_list+0x2a6>
 800e02e:	a912      	add	r1, sp, #72	@ 0x48
 800e030:	4640      	mov	r0, r8
 800e032:	f002 fcd3 	bl	80109dc <uxr_deserialize_STATUS_Payload>
 800e036:	a910      	add	r1, sp, #64	@ 0x40
 800e038:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e03a:	a812      	add	r0, sp, #72	@ 0x48
 800e03c:	f000 fdee 	bl	800ec1c <uxr_parse_base_object_request>
 800e040:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800e044:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e046:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 800e04a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 800e04e:	9111      	str	r1, [sp, #68]	@ 0x44
 800e050:	b135      	cbz	r5, 800e060 <read_submessage_list+0x260>
 800e052:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	4632      	mov	r2, r6
 800e05a:	463b      	mov	r3, r7
 800e05c:	4620      	mov	r0, r4
 800e05e:	47a8      	blx	r5
 800e060:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800e062:	2b00      	cmp	r3, #0
 800e064:	f43f aed4 	beq.w	800de10 <read_submessage_list+0x10>
 800e068:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e06a:	2100      	movs	r1, #0
 800e06c:	3802      	subs	r0, #2
 800e06e:	e003      	b.n	800e078 <read_submessage_list+0x278>
 800e070:	3101      	adds	r1, #1
 800e072:	4299      	cmp	r1, r3
 800e074:	f43f aecc 	beq.w	800de10 <read_submessage_list+0x10>
 800e078:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800e07c:	42b2      	cmp	r2, r6
 800e07e:	d1f7      	bne.n	800e070 <read_submessage_list+0x270>
 800e080:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e082:	545f      	strb	r7, [r3, r1]
 800e084:	e6c4      	b.n	800de10 <read_submessage_list+0x10>
 800e086:	2a00      	cmp	r2, #0
 800e088:	f47f aec2 	bne.w	800de10 <read_submessage_list+0x10>
 800e08c:	4641      	mov	r1, r8
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 fd08 	bl	800eaa4 <uxr_read_create_session_status>
 800e094:	e6bc      	b.n	800de10 <read_submessage_list+0x10>
 800e096:	4641      	mov	r1, r8
 800e098:	4620      	mov	r0, r4
 800e09a:	f7ff fcf9 	bl	800da90 <read_submessage_get_info>
 800e09e:	e6b7      	b.n	800de10 <read_submessage_list+0x10>
 800e0a0:	b018      	add	sp, #96	@ 0x60
 800e0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a6:	4641      	mov	r1, r8
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 fd07 	bl	800eabc <uxr_read_delete_session_status>
 800e0ae:	e6af      	b.n	800de10 <read_submessage_list+0x10>
 800e0b0:	f001 fbe0 	bl	800f874 <uxr_nanos>
 800e0b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0b6:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800e0b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e0ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e0bc:	2700      	movs	r7, #0
 800e0be:	fbc9 6703 	smlal	r6, r7, r9, r3
 800e0c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0c4:	eb16 0c00 	adds.w	ip, r6, r0
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0cc:	eb47 0e01 	adc.w	lr, r7, r1
 800e0d0:	461e      	mov	r6, r3
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	2700      	movs	r7, #0
 800e0d6:	fbc9 0105 	smlal	r0, r1, r9, r5
 800e0da:	fbc9 6702 	smlal	r6, r7, r9, r2
 800e0de:	1983      	adds	r3, r0, r6
 800e0e0:	eb41 0207 	adc.w	r2, r1, r7
 800e0e4:	ebbc 0303 	subs.w	r3, ip, r3
 800e0e8:	9308      	str	r3, [sp, #32]
 800e0ea:	eb6e 0302 	sbc.w	r3, lr, r2
 800e0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e0f4:	0fd3      	lsrs	r3, r2, #31
 800e0f6:	18c9      	adds	r1, r1, r3
 800e0f8:	f142 0200 	adc.w	r2, r2, #0
 800e0fc:	084b      	lsrs	r3, r1, #1
 800e0fe:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800e102:	1052      	asrs	r2, r2, #1
 800e104:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 800e108:	e6de      	b.n	800dec8 <read_submessage_list+0xc8>
 800e10a:	bf00      	nop
 800e10c:	3b9aca00 	.word	0x3b9aca00

0800e110 <listen_message_reliably>:
 800e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	1e0b      	subs	r3, r1, #0
 800e116:	b09d      	sub	sp, #116	@ 0x74
 800e118:	bfb8      	it	lt
 800e11a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e11e:	9305      	str	r3, [sp, #20]
 800e120:	4607      	mov	r7, r0
 800e122:	f001 fb8b 	bl	800f83c <uxr_millis>
 800e126:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800e12a:	4681      	mov	r9, r0
 800e12c:	2a00      	cmp	r2, #0
 800e12e:	f000 8095 	beq.w	800e25c <listen_message_reliably+0x14c>
 800e132:	2600      	movs	r6, #0
 800e134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e138:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e13c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e140:	4630      	mov	r0, r6
 800e142:	4688      	mov	r8, r1
 800e144:	46ca      	mov	sl, r9
 800e146:	e00f      	b.n	800e168 <listen_message_reliably+0x58>
 800e148:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e14c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e150:	42a2      	cmp	r2, r4
 800e152:	eb73 0105 	sbcs.w	r1, r3, r5
 800e156:	bfb8      	it	lt
 800e158:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800e15c:	3601      	adds	r6, #1
 800e15e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e162:	b2f0      	uxtb	r0, r6
 800e164:	4283      	cmp	r3, r0
 800e166:	d951      	bls.n	800e20c <listen_message_reliably+0xfc>
 800e168:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e16c:	2201      	movs	r2, #1
 800e16e:	2102      	movs	r1, #2
 800e170:	f001 f9e4 	bl	800f53c <uxr_stream_id>
 800e174:	00e4      	lsls	r4, r4, #3
 800e176:	f104 0520 	add.w	r5, r4, #32
 800e17a:	443d      	add	r5, r7
 800e17c:	4601      	mov	r1, r0
 800e17e:	4643      	mov	r3, r8
 800e180:	4652      	mov	r2, sl
 800e182:	4628      	mov	r0, r5
 800e184:	9109      	str	r1, [sp, #36]	@ 0x24
 800e186:	f006 fca5 	bl	8014ad4 <uxr_update_output_stream_heartbeat_timestamp>
 800e18a:	193b      	adds	r3, r7, r4
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d0db      	beq.n	800e148 <listen_message_reliably+0x38>
 800e190:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800e194:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800e198:	4638      	mov	r0, r7
 800e19a:	f000 fd19 	bl	800ebd0 <uxr_session_header_offset>
 800e19e:	3501      	adds	r5, #1
 800e1a0:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 800e1a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e1a8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800e1ac:	9000      	str	r0, [sp, #0]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4658      	mov	r0, fp
 800e1b2:	2211      	movs	r2, #17
 800e1b4:	a90c      	add	r1, sp, #48	@ 0x30
 800e1b6:	f7fb ff25 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2205      	movs	r2, #5
 800e1be:	210b      	movs	r1, #11
 800e1c0:	4658      	mov	r0, fp
 800e1c2:	f001 faf5 	bl	800f7b0 <uxr_buffer_submessage_header>
 800e1c6:	8968      	ldrh	r0, [r5, #10]
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	f006 fd41 	bl	8014c50 <uxr_seq_num_add>
 800e1ce:	892a      	ldrh	r2, [r5, #8]
 800e1d0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	a90a      	add	r1, sp, #40	@ 0x28
 800e1d8:	4658      	mov	r0, fp
 800e1da:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800e1de:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 800e1e2:	f002 fcb3 	bl	8010b4c <uxr_serialize_HEARTBEAT_Payload>
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	f000 fc97 	bl	800eb20 <uxr_stamp_session_header>
 800e1f2:	4658      	mov	r0, fp
 800e1f4:	f7fb ff44 	bl	800a080 <ucdr_buffer_length>
 800e1f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	a90c      	add	r1, sp, #48	@ 0x30
 800e1fe:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e202:	443c      	add	r4, r7
 800e204:	47a8      	blx	r5
 800e206:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800e20a:	e79f      	b.n	800e14c <listen_message_reliably+0x3c>
 800e20c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800e210:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e214:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e218:	4294      	cmp	r4, r2
 800e21a:	bf08      	it	eq
 800e21c:	428b      	cmpeq	r3, r1
 800e21e:	d01d      	beq.n	800e25c <listen_message_reliably+0x14c>
 800e220:	eba3 030a 	sub.w	r3, r3, sl
 800e224:	9905      	ldr	r1, [sp, #20]
 800e226:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e228:	2b00      	cmp	r3, #0
 800e22a:	bf08      	it	eq
 800e22c:	2301      	moveq	r3, #1
 800e22e:	4299      	cmp	r1, r3
 800e230:	bfa8      	it	ge
 800e232:	4619      	movge	r1, r3
 800e234:	6894      	ldr	r4, [r2, #8]
 800e236:	6810      	ldr	r0, [r2, #0]
 800e238:	4689      	mov	r9, r1
 800e23a:	460b      	mov	r3, r1
 800e23c:	aa08      	add	r2, sp, #32
 800e23e:	a907      	add	r1, sp, #28
 800e240:	47a0      	blx	r4
 800e242:	b968      	cbnz	r0, 800e260 <listen_message_reliably+0x150>
 800e244:	9b05      	ldr	r3, [sp, #20]
 800e246:	eba3 0309 	sub.w	r3, r3, r9
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	9305      	str	r3, [sp, #20]
 800e24e:	f73f af68 	bgt.w	800e122 <listen_message_reliably+0x12>
 800e252:	4604      	mov	r4, r0
 800e254:	4620      	mov	r0, r4
 800e256:	b01d      	add	sp, #116	@ 0x74
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	9b05      	ldr	r3, [sp, #20]
 800e25e:	e7e1      	b.n	800e224 <listen_message_reliably+0x114>
 800e260:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e264:	4604      	mov	r4, r0
 800e266:	a80c      	add	r0, sp, #48	@ 0x30
 800e268:	f7fb fede 	bl	800a028 <ucdr_init_buffer>
 800e26c:	2500      	movs	r5, #0
 800e26e:	a90c      	add	r1, sp, #48	@ 0x30
 800e270:	f10d 031a 	add.w	r3, sp, #26
 800e274:	aa06      	add	r2, sp, #24
 800e276:	4638      	mov	r0, r7
 800e278:	f88d 5018 	strb.w	r5, [sp, #24]
 800e27c:	f000 fc66 	bl	800eb4c <uxr_read_session_header>
 800e280:	b918      	cbnz	r0, 800e28a <listen_message_reliably+0x17a>
 800e282:	4620      	mov	r0, r4
 800e284:	b01d      	add	sp, #116	@ 0x74
 800e286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28a:	4629      	mov	r1, r5
 800e28c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e290:	f001 f97e 	bl	800f590 <uxr_stream_id_from_raw>
 800e294:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e298:	2e01      	cmp	r6, #1
 800e29a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e29e:	900a      	str	r0, [sp, #40]	@ 0x28
 800e2a0:	fa5f fa80 	uxtb.w	sl, r0
 800e2a4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e2a8:	d04b      	beq.n	800e342 <listen_message_reliably+0x232>
 800e2aa:	2e02      	cmp	r6, #2
 800e2ac:	d00f      	beq.n	800e2ce <listen_message_reliably+0x1be>
 800e2ae:	2e00      	cmp	r6, #0
 800e2b0:	d1e7      	bne.n	800e282 <listen_message_reliably+0x172>
 800e2b2:	4631      	mov	r1, r6
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f001 f96b 	bl	800f590 <uxr_stream_id_from_raw>
 800e2ba:	a90c      	add	r1, sp, #48	@ 0x30
 800e2bc:	4602      	mov	r2, r0
 800e2be:	4638      	mov	r0, r7
 800e2c0:	920a      	str	r2, [sp, #40]	@ 0x28
 800e2c2:	f7ff fd9d 	bl	800de00 <read_submessage_list>
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	b01d      	add	sp, #116	@ 0x74
 800e2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	f107 0008 	add.w	r0, r7, #8
 800e2d4:	f001 fa4a 	bl	800f76c <uxr_get_input_reliable_stream>
 800e2d8:	4680      	mov	r8, r0
 800e2da:	b348      	cbz	r0, 800e330 <listen_message_reliably+0x220>
 800e2dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2de:	9202      	str	r2, [sp, #8]
 800e2e0:	a80c      	add	r0, sp, #48	@ 0x30
 800e2e2:	f7fb fed1 	bl	800a088 <ucdr_buffer_remaining>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	f10d 0019 	add.w	r0, sp, #25
 800e2ec:	9000      	str	r0, [sp, #0]
 800e2ee:	9a02      	ldr	r2, [sp, #8]
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	4640      	mov	r0, r8
 800e2f4:	f006 f806 	bl	8014304 <uxr_receive_reliable_message>
 800e2f8:	b1d0      	cbz	r0, 800e330 <listen_message_reliably+0x220>
 800e2fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d037      	beq.n	800e372 <listen_message_reliably+0x262>
 800e302:	ae14      	add	r6, sp, #80	@ 0x50
 800e304:	f04f 0902 	mov.w	r9, #2
 800e308:	e008      	b.n	800e31c <listen_message_reliably+0x20c>
 800e30a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800e30e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800e312:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e318:	f7ff fd72 	bl	800de00 <read_submessage_list>
 800e31c:	4631      	mov	r1, r6
 800e31e:	2204      	movs	r2, #4
 800e320:	4640      	mov	r0, r8
 800e322:	f006 f86f 	bl	8014404 <uxr_next_input_reliable_buffer_available>
 800e326:	4603      	mov	r3, r0
 800e328:	4631      	mov	r1, r6
 800e32a:	4638      	mov	r0, r7
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1ec      	bne.n	800e30a <listen_message_reliably+0x1fa>
 800e330:	4638      	mov	r0, r7
 800e332:	462a      	mov	r2, r5
 800e334:	4651      	mov	r1, sl
 800e336:	f7ff fbe1 	bl	800dafc <write_submessage_acknack.isra.0>
 800e33a:	4620      	mov	r0, r4
 800e33c:	b01d      	add	sp, #116	@ 0x74
 800e33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e342:	4629      	mov	r1, r5
 800e344:	f107 0008 	add.w	r0, r7, #8
 800e348:	f001 fa06 	bl	800f758 <uxr_get_input_best_effort_stream>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d098      	beq.n	800e282 <listen_message_reliably+0x172>
 800e350:	4649      	mov	r1, r9
 800e352:	f005 ff53 	bl	80141fc <uxr_receive_best_effort_message>
 800e356:	2800      	cmp	r0, #0
 800e358:	d093      	beq.n	800e282 <listen_message_reliably+0x172>
 800e35a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800e35e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800e362:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e368:	a90c      	add	r1, sp, #48	@ 0x30
 800e36a:	4638      	mov	r0, r7
 800e36c:	f7ff fd48 	bl	800de00 <read_submessage_list>
 800e370:	e787      	b.n	800e282 <listen_message_reliably+0x172>
 800e372:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800e376:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 800e37a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e37e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e380:	a90c      	add	r1, sp, #48	@ 0x30
 800e382:	4638      	mov	r0, r7
 800e384:	f7ff fd3c 	bl	800de00 <read_submessage_list>
 800e388:	e7bb      	b.n	800e302 <listen_message_reliably+0x1f2>
 800e38a:	bf00      	nop

0800e38c <uxr_run_session_timeout>:
 800e38c:	b570      	push	{r4, r5, r6, lr}
 800e38e:	4604      	mov	r4, r0
 800e390:	460d      	mov	r5, r1
 800e392:	f001 fa53 	bl	800f83c <uxr_millis>
 800e396:	4606      	mov	r6, r0
 800e398:	4620      	mov	r0, r4
 800e39a:	f7ff fc75 	bl	800dc88 <uxr_flash_output_streams>
 800e39e:	4629      	mov	r1, r5
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f7ff feb5 	bl	800e110 <listen_message_reliably>
 800e3a6:	f001 fa49 	bl	800f83c <uxr_millis>
 800e3aa:	1b83      	subs	r3, r0, r6
 800e3ac:	1ae9      	subs	r1, r5, r3
 800e3ae:	2900      	cmp	r1, #0
 800e3b0:	dcf6      	bgt.n	800e3a0 <uxr_run_session_timeout+0x14>
 800e3b2:	f104 0008 	add.w	r0, r4, #8
 800e3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3ba:	f001 b9e3 	b.w	800f784 <uxr_output_streams_confirmed>
 800e3be:	bf00      	nop

0800e3c0 <uxr_run_session_until_data>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	460d      	mov	r5, r1
 800e3c6:	f001 fa39 	bl	800f83c <uxr_millis>
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f7ff fc5b 	bl	800dc88 <uxr_flash_output_streams>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e3d8:	4629      	mov	r1, r5
 800e3da:	e005      	b.n	800e3e8 <uxr_run_session_until_data+0x28>
 800e3dc:	f001 fa2e 	bl	800f83c <uxr_millis>
 800e3e0:	1b83      	subs	r3, r0, r6
 800e3e2:	1ae9      	subs	r1, r5, r3
 800e3e4:	2900      	cmp	r1, #0
 800e3e6:	dd07      	ble.n	800e3f8 <uxr_run_session_until_data+0x38>
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f7ff fe91 	bl	800e110 <listen_message_reliably>
 800e3ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d0f2      	beq.n	800e3dc <uxr_run_session_until_data+0x1c>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e3fc:	bd70      	pop	{r4, r5, r6, pc}
 800e3fe:	bf00      	nop

0800e400 <uxr_run_session_until_confirm_delivery>:
 800e400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e404:	4606      	mov	r6, r0
 800e406:	460d      	mov	r5, r1
 800e408:	f001 fa18 	bl	800f83c <uxr_millis>
 800e40c:	4607      	mov	r7, r0
 800e40e:	4630      	mov	r0, r6
 800e410:	f7ff fc3a 	bl	800dc88 <uxr_flash_output_streams>
 800e414:	2d00      	cmp	r5, #0
 800e416:	f106 0808 	add.w	r8, r6, #8
 800e41a:	bfa8      	it	ge
 800e41c:	462c      	movge	r4, r5
 800e41e:	da07      	bge.n	800e430 <uxr_run_session_until_confirm_delivery+0x30>
 800e420:	e00e      	b.n	800e440 <uxr_run_session_until_confirm_delivery+0x40>
 800e422:	f7ff fe75 	bl	800e110 <listen_message_reliably>
 800e426:	f001 fa09 	bl	800f83c <uxr_millis>
 800e42a:	1bc3      	subs	r3, r0, r7
 800e42c:	1aec      	subs	r4, r5, r3
 800e42e:	d407      	bmi.n	800e440 <uxr_run_session_until_confirm_delivery+0x40>
 800e430:	4640      	mov	r0, r8
 800e432:	f001 f9a7 	bl	800f784 <uxr_output_streams_confirmed>
 800e436:	4603      	mov	r3, r0
 800e438:	4621      	mov	r1, r4
 800e43a:	4630      	mov	r0, r6
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d0f0      	beq.n	800e422 <uxr_run_session_until_confirm_delivery+0x22>
 800e440:	4640      	mov	r0, r8
 800e442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e446:	f001 b99d 	b.w	800f784 <uxr_output_streams_confirmed>
 800e44a:	bf00      	nop

0800e44c <uxr_run_session_until_all_status>:
 800e44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e450:	9d08      	ldr	r5, [sp, #32]
 800e452:	460f      	mov	r7, r1
 800e454:	4692      	mov	sl, r2
 800e456:	461c      	mov	r4, r3
 800e458:	4606      	mov	r6, r0
 800e45a:	f7ff fc15 	bl	800dc88 <uxr_flash_output_streams>
 800e45e:	b125      	cbz	r5, 800e46a <uxr_run_session_until_all_status+0x1e>
 800e460:	462a      	mov	r2, r5
 800e462:	21ff      	movs	r1, #255	@ 0xff
 800e464:	4620      	mov	r0, r4
 800e466:	f007 f96b 	bl	8015740 <memset>
 800e46a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 800e46e:	67f5      	str	r5, [r6, #124]	@ 0x7c
 800e470:	f001 f9e4 	bl	800f83c <uxr_millis>
 800e474:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 800e478:	f1aa 0a02 	sub.w	sl, sl, #2
 800e47c:	4680      	mov	r8, r0
 800e47e:	4639      	mov	r1, r7
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff fe45 	bl	800e110 <listen_message_reliably>
 800e486:	f001 f9d9 	bl	800f83c <uxr_millis>
 800e48a:	eba0 0008 	sub.w	r0, r0, r8
 800e48e:	1a39      	subs	r1, r7, r0
 800e490:	b33d      	cbz	r5, 800e4e2 <uxr_run_session_until_all_status+0x96>
 800e492:	46cc      	mov	ip, r9
 800e494:	464a      	mov	r2, r9
 800e496:	2301      	movs	r3, #1
 800e498:	e002      	b.n	800e4a0 <uxr_run_session_until_all_status+0x54>
 800e49a:	42ab      	cmp	r3, r5
 800e49c:	d20c      	bcs.n	800e4b8 <uxr_run_session_until_all_status+0x6c>
 800e49e:	3301      	adds	r3, #1
 800e4a0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800e4a4:	2cff      	cmp	r4, #255	@ 0xff
 800e4a6:	d1f8      	bne.n	800e49a <uxr_run_session_until_all_status+0x4e>
 800e4a8:	42ab      	cmp	r3, r5
 800e4aa:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800e4ae:	d213      	bcs.n	800e4d8 <uxr_run_session_until_all_status+0x8c>
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d0f4      	beq.n	800e49e <uxr_run_session_until_all_status+0x52>
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	dce3      	bgt.n	800e480 <uxr_run_session_until_all_status+0x34>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	444d      	add	r5, r9
 800e4bc:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800e4be:	e001      	b.n	800e4c4 <uxr_run_session_until_all_status+0x78>
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d812      	bhi.n	800e4ea <uxr_run_session_until_all_status+0x9e>
 800e4c4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e4c8:	4565      	cmp	r5, ip
 800e4ca:	d1f9      	bne.n	800e4c0 <uxr_run_session_until_all_status+0x74>
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	bf8c      	ite	hi
 800e4d0:	2000      	movhi	r0, #0
 800e4d2:	2001      	movls	r0, #1
 800e4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d8:	2900      	cmp	r1, #0
 800e4da:	dded      	ble.n	800e4b8 <uxr_run_session_until_all_status+0x6c>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d1cf      	bne.n	800e480 <uxr_run_session_until_all_status+0x34>
 800e4e0:	e7ea      	b.n	800e4b8 <uxr_run_session_until_all_status+0x6c>
 800e4e2:	67f5      	str	r5, [r6, #124]	@ 0x7c
 800e4e4:	2001      	movs	r0, #1
 800e4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e4f0 <uxr_sync_session>:
 800e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4f2:	b093      	sub	sp, #76	@ 0x4c
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	460d      	mov	r5, r1
 800e4f8:	f000 fb6a 	bl	800ebd0 <uxr_session_header_offset>
 800e4fc:	a905      	add	r1, sp, #20
 800e4fe:	9000      	str	r0, [sp, #0]
 800e500:	2300      	movs	r3, #0
 800e502:	a80a      	add	r0, sp, #40	@ 0x28
 800e504:	2214      	movs	r2, #20
 800e506:	f7fb fd7d 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800e50a:	2300      	movs	r3, #0
 800e50c:	2208      	movs	r2, #8
 800e50e:	210e      	movs	r1, #14
 800e510:	a80a      	add	r0, sp, #40	@ 0x28
 800e512:	f001 f94d 	bl	800f7b0 <uxr_buffer_submessage_header>
 800e516:	f001 f9ad 	bl	800f874 <uxr_nanos>
 800e51a:	a31d      	add	r3, pc, #116	@ (adr r3, 800e590 <uxr_sync_session+0xa0>)
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	4606      	mov	r6, r0
 800e522:	460f      	mov	r7, r1
 800e524:	f7f1 fee4 	bl	80002f0 <__aeabi_ldivmod>
 800e528:	a319      	add	r3, pc, #100	@ (adr r3, 800e590 <uxr_sync_session+0xa0>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	4684      	mov	ip, r0
 800e530:	4639      	mov	r1, r7
 800e532:	4630      	mov	r0, r6
 800e534:	f8cd c00c 	str.w	ip, [sp, #12]
 800e538:	f7f1 feda 	bl	80002f0 <__aeabi_ldivmod>
 800e53c:	a903      	add	r1, sp, #12
 800e53e:	a80a      	add	r0, sp, #40	@ 0x28
 800e540:	9204      	str	r2, [sp, #16]
 800e542:	f002 fb29 	bl	8010b98 <uxr_serialize_TIMESTAMP_Payload>
 800e546:	2200      	movs	r2, #0
 800e548:	4611      	mov	r1, r2
 800e54a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e54c:	4620      	mov	r0, r4
 800e54e:	f000 fae7 	bl	800eb20 <uxr_stamp_session_header>
 800e552:	a80a      	add	r0, sp, #40	@ 0x28
 800e554:	f7fb fd94 	bl	800a080 <ucdr_buffer_length>
 800e558:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e55a:	4602      	mov	r2, r0
 800e55c:	a905      	add	r1, sp, #20
 800e55e:	e9d3 0600 	ldrd	r0, r6, [r3]
 800e562:	47b0      	blx	r6
 800e564:	f001 f96a 	bl	800f83c <uxr_millis>
 800e568:	2300      	movs	r3, #0
 800e56a:	4606      	mov	r6, r0
 800e56c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800e570:	4629      	mov	r1, r5
 800e572:	e000      	b.n	800e576 <uxr_sync_session+0x86>
 800e574:	b950      	cbnz	r0, 800e58c <uxr_sync_session+0x9c>
 800e576:	4620      	mov	r0, r4
 800e578:	f7ff fdca 	bl	800e110 <listen_message_reliably>
 800e57c:	f001 f95e 	bl	800f83c <uxr_millis>
 800e580:	1b83      	subs	r3, r0, r6
 800e582:	1ae9      	subs	r1, r5, r3
 800e584:	2900      	cmp	r1, #0
 800e586:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800e58a:	dcf3      	bgt.n	800e574 <uxr_sync_session+0x84>
 800e58c:	b013      	add	sp, #76	@ 0x4c
 800e58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e590:	3b9aca00 	.word	0x3b9aca00
 800e594:	00000000 	.word	0x00000000

0800e598 <uxr_create_session>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	ed2d 8b02 	vpush	{d8}
 800e5a0:	f100 0808 	add.w	r8, r0, #8
 800e5a4:	b0a9      	sub	sp, #164	@ 0xa4
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	4640      	mov	r0, r8
 800e5aa:	f001 f827 	bl	800f5fc <uxr_reset_stream_storage>
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f000 fb0e 	bl	800ebd0 <uxr_session_header_offset>
 800e5b4:	a909      	add	r1, sp, #36	@ 0x24
 800e5b6:	9000      	str	r0, [sp, #0]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	a810      	add	r0, sp, #64	@ 0x40
 800e5bc:	221c      	movs	r2, #28
 800e5be:	f7fb fd21 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800e5c2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5c4:	8a1a      	ldrh	r2, [r3, #16]
 800e5c6:	3a04      	subs	r2, #4
 800e5c8:	b292      	uxth	r2, r2
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	a910      	add	r1, sp, #64	@ 0x40
 800e5ce:	f000 fa23 	bl	800ea18 <uxr_buffer_create_session>
 800e5d2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	f000 fa8f 	bl	800eaf8 <uxr_stamp_create_session_header>
 800e5da:	a810      	add	r0, sp, #64	@ 0x40
 800e5dc:	f7fb fd50 	bl	800a080 <ucdr_buffer_length>
 800e5e0:	23ff      	movs	r3, #255	@ 0xff
 800e5e2:	ee08 0a10 	vmov	s16, r0
 800e5e6:	7163      	strb	r3, [r4, #5]
 800e5e8:	f04f 090a 	mov.w	r9, #10
 800e5ec:	46c2      	mov	sl, r8
 800e5ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5f0:	ee18 2a10 	vmov	r2, s16
 800e5f4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e5f8:	a909      	add	r1, sp, #36	@ 0x24
 800e5fa:	47a8      	blx	r5
 800e5fc:	f001 f91e 	bl	800f83c <uxr_millis>
 800e600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e604:	9002      	str	r0, [sp, #8]
 800e606:	e00c      	b.n	800e622 <uxr_create_session+0x8a>
 800e608:	f001 f918 	bl	800f83c <uxr_millis>
 800e60c:	9b02      	ldr	r3, [sp, #8]
 800e60e:	7962      	ldrb	r2, [r4, #5]
 800e610:	1ac0      	subs	r0, r0, r3
 800e612:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e616:	2b00      	cmp	r3, #0
 800e618:	f340 8094 	ble.w	800e744 <uxr_create_session+0x1ac>
 800e61c:	2aff      	cmp	r2, #255	@ 0xff
 800e61e:	f040 8097 	bne.w	800e750 <uxr_create_session+0x1b8>
 800e622:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e624:	a905      	add	r1, sp, #20
 800e626:	6895      	ldr	r5, [r2, #8]
 800e628:	6810      	ldr	r0, [r2, #0]
 800e62a:	aa06      	add	r2, sp, #24
 800e62c:	47a8      	blx	r5
 800e62e:	2800      	cmp	r0, #0
 800e630:	d0ea      	beq.n	800e608 <uxr_create_session+0x70>
 800e632:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800e636:	a818      	add	r0, sp, #96	@ 0x60
 800e638:	f7fb fcf6 	bl	800a028 <ucdr_init_buffer>
 800e63c:	2500      	movs	r5, #0
 800e63e:	f10d 0312 	add.w	r3, sp, #18
 800e642:	aa04      	add	r2, sp, #16
 800e644:	a918      	add	r1, sp, #96	@ 0x60
 800e646:	4620      	mov	r0, r4
 800e648:	f88d 5010 	strb.w	r5, [sp, #16]
 800e64c:	f000 fa7e 	bl	800eb4c <uxr_read_session_header>
 800e650:	2800      	cmp	r0, #0
 800e652:	d0d9      	beq.n	800e608 <uxr_create_session+0x70>
 800e654:	4629      	mov	r1, r5
 800e656:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800e65a:	f000 ff99 	bl	800f590 <uxr_stream_id_from_raw>
 800e65e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e662:	2f01      	cmp	r7, #1
 800e664:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800e668:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800e66c:	fa5f f880 	uxtb.w	r8, r0
 800e670:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e674:	d04d      	beq.n	800e712 <uxr_create_session+0x17a>
 800e676:	2f02      	cmp	r7, #2
 800e678:	d00c      	beq.n	800e694 <uxr_create_session+0xfc>
 800e67a:	2f00      	cmp	r7, #0
 800e67c:	d1c4      	bne.n	800e608 <uxr_create_session+0x70>
 800e67e:	4639      	mov	r1, r7
 800e680:	4638      	mov	r0, r7
 800e682:	f000 ff85 	bl	800f590 <uxr_stream_id_from_raw>
 800e686:	a918      	add	r1, sp, #96	@ 0x60
 800e688:	4602      	mov	r2, r0
 800e68a:	4620      	mov	r0, r4
 800e68c:	9208      	str	r2, [sp, #32]
 800e68e:	f7ff fbb7 	bl	800de00 <read_submessage_list>
 800e692:	e7b9      	b.n	800e608 <uxr_create_session+0x70>
 800e694:	4629      	mov	r1, r5
 800e696:	4650      	mov	r0, sl
 800e698:	f001 f868 	bl	800f76c <uxr_get_input_reliable_stream>
 800e69c:	4606      	mov	r6, r0
 800e69e:	b390      	cbz	r0, 800e706 <uxr_create_session+0x16e>
 800e6a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e6a2:	9203      	str	r2, [sp, #12]
 800e6a4:	a818      	add	r0, sp, #96	@ 0x60
 800e6a6:	f7fb fcef 	bl	800a088 <ucdr_buffer_remaining>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	f10d 0011 	add.w	r0, sp, #17
 800e6b0:	9000      	str	r0, [sp, #0]
 800e6b2:	9a03      	ldr	r2, [sp, #12]
 800e6b4:	4659      	mov	r1, fp
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f005 fe24 	bl	8014304 <uxr_receive_reliable_message>
 800e6bc:	b318      	cbz	r0, 800e706 <uxr_create_session+0x16e>
 800e6be:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800e6c2:	b9b3      	cbnz	r3, 800e6f2 <uxr_create_session+0x15a>
 800e6c4:	f88d 8020 	strb.w	r8, [sp, #32]
 800e6c8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e6cc:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800e6d0:	9a08      	ldr	r2, [sp, #32]
 800e6d2:	a918      	add	r1, sp, #96	@ 0x60
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7ff fb93 	bl	800de00 <read_submessage_list>
 800e6da:	e00a      	b.n	800e6f2 <uxr_create_session+0x15a>
 800e6dc:	f04f 0302 	mov.w	r3, #2
 800e6e0:	f88d 8020 	strb.w	r8, [sp, #32]
 800e6e4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e6e8:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 800e6ec:	9a08      	ldr	r2, [sp, #32]
 800e6ee:	f7ff fb87 	bl	800de00 <read_submessage_list>
 800e6f2:	a920      	add	r1, sp, #128	@ 0x80
 800e6f4:	2204      	movs	r2, #4
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f005 fe84 	bl	8014404 <uxr_next_input_reliable_buffer_available>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	a920      	add	r1, sp, #128	@ 0x80
 800e700:	4620      	mov	r0, r4
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1ea      	bne.n	800e6dc <uxr_create_session+0x144>
 800e706:	462a      	mov	r2, r5
 800e708:	4641      	mov	r1, r8
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff f9f6 	bl	800dafc <write_submessage_acknack.isra.0>
 800e710:	e77a      	b.n	800e608 <uxr_create_session+0x70>
 800e712:	4629      	mov	r1, r5
 800e714:	4650      	mov	r0, sl
 800e716:	f001 f81f 	bl	800f758 <uxr_get_input_best_effort_stream>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	f43f af74 	beq.w	800e608 <uxr_create_session+0x70>
 800e720:	4659      	mov	r1, fp
 800e722:	f005 fd6b 	bl	80141fc <uxr_receive_best_effort_message>
 800e726:	2800      	cmp	r0, #0
 800e728:	f43f af6e 	beq.w	800e608 <uxr_create_session+0x70>
 800e72c:	f88d 8020 	strb.w	r8, [sp, #32]
 800e730:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e734:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 800e738:	9a08      	ldr	r2, [sp, #32]
 800e73a:	a918      	add	r1, sp, #96	@ 0x60
 800e73c:	4620      	mov	r0, r4
 800e73e:	f7ff fb5f 	bl	800de00 <read_submessage_list>
 800e742:	e761      	b.n	800e608 <uxr_create_session+0x70>
 800e744:	f1b9 0901 	subs.w	r9, r9, #1
 800e748:	d002      	beq.n	800e750 <uxr_create_session+0x1b8>
 800e74a:	2aff      	cmp	r2, #255	@ 0xff
 800e74c:	f43f af4f 	beq.w	800e5ee <uxr_create_session+0x56>
 800e750:	b12a      	cbz	r2, 800e75e <uxr_create_session+0x1c6>
 800e752:	2000      	movs	r0, #0
 800e754:	b029      	add	sp, #164	@ 0xa4
 800e756:	ecbd 8b02 	vpop	{d8}
 800e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75e:	4650      	mov	r0, sl
 800e760:	f000 ff4c 	bl	800f5fc <uxr_reset_stream_storage>
 800e764:	2001      	movs	r0, #1
 800e766:	b029      	add	sp, #164	@ 0xa4
 800e768:	ecbd 8b02 	vpop	{d8}
 800e76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e770 <wait_session_status>:
 800e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e774:	4604      	mov	r4, r0
 800e776:	b09d      	sub	sp, #116	@ 0x74
 800e778:	20ff      	movs	r0, #255	@ 0xff
 800e77a:	7160      	strb	r0, [r4, #5]
 800e77c:	9304      	str	r3, [sp, #16]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f000 80b8 	beq.w	800e8f4 <wait_session_status+0x184>
 800e784:	2300      	movs	r3, #0
 800e786:	468b      	mov	fp, r1
 800e788:	4692      	mov	sl, r2
 800e78a:	9303      	str	r3, [sp, #12]
 800e78c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e78e:	4652      	mov	r2, sl
 800e790:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e794:	4659      	mov	r1, fp
 800e796:	47a8      	blx	r5
 800e798:	f001 f850 	bl	800f83c <uxr_millis>
 800e79c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	e009      	b.n	800e7b8 <wait_session_status+0x48>
 800e7a4:	f001 f84a 	bl	800f83c <uxr_millis>
 800e7a8:	1b40      	subs	r0, r0, r5
 800e7aa:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	dd42      	ble.n	800e838 <wait_session_status+0xc8>
 800e7b2:	7960      	ldrb	r0, [r4, #5]
 800e7b4:	28ff      	cmp	r0, #255	@ 0xff
 800e7b6:	d148      	bne.n	800e84a <wait_session_status+0xda>
 800e7b8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e7ba:	a908      	add	r1, sp, #32
 800e7bc:	6896      	ldr	r6, [r2, #8]
 800e7be:	6810      	ldr	r0, [r2, #0]
 800e7c0:	aa09      	add	r2, sp, #36	@ 0x24
 800e7c2:	47b0      	blx	r6
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d0ed      	beq.n	800e7a4 <wait_session_status+0x34>
 800e7c8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800e7cc:	a80c      	add	r0, sp, #48	@ 0x30
 800e7ce:	f7fb fc2b 	bl	800a028 <ucdr_init_buffer>
 800e7d2:	2600      	movs	r6, #0
 800e7d4:	f10d 031e 	add.w	r3, sp, #30
 800e7d8:	aa07      	add	r2, sp, #28
 800e7da:	a90c      	add	r1, sp, #48	@ 0x30
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f88d 601c 	strb.w	r6, [sp, #28]
 800e7e2:	f000 f9b3 	bl	800eb4c <uxr_read_session_header>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d0dc      	beq.n	800e7a4 <wait_session_status+0x34>
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800e7f0:	f000 fece 	bl	800f590 <uxr_stream_id_from_raw>
 800e7f4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e7f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e7fc:	9302      	str	r3, [sp, #8]
 800e7fe:	2f01      	cmp	r7, #1
 800e800:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800e804:	fa5f f880 	uxtb.w	r8, r0
 800e808:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e80c:	d058      	beq.n	800e8c0 <wait_session_status+0x150>
 800e80e:	2f02      	cmp	r7, #2
 800e810:	d021      	beq.n	800e856 <wait_session_status+0xe6>
 800e812:	2f00      	cmp	r7, #0
 800e814:	d1c6      	bne.n	800e7a4 <wait_session_status+0x34>
 800e816:	4639      	mov	r1, r7
 800e818:	4638      	mov	r0, r7
 800e81a:	f000 feb9 	bl	800f590 <uxr_stream_id_from_raw>
 800e81e:	a90c      	add	r1, sp, #48	@ 0x30
 800e820:	4602      	mov	r2, r0
 800e822:	4620      	mov	r0, r4
 800e824:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e826:	f7ff faeb 	bl	800de00 <read_submessage_list>
 800e82a:	f001 f807 	bl	800f83c <uxr_millis>
 800e82e:	1b40      	subs	r0, r0, r5
 800e830:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e834:	2b00      	cmp	r3, #0
 800e836:	dcbc      	bgt.n	800e7b2 <wait_session_status+0x42>
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	9a04      	ldr	r2, [sp, #16]
 800e83c:	7960      	ldrb	r0, [r4, #5]
 800e83e:	3301      	adds	r3, #1
 800e840:	429a      	cmp	r2, r3
 800e842:	9303      	str	r3, [sp, #12]
 800e844:	d001      	beq.n	800e84a <wait_session_status+0xda>
 800e846:	28ff      	cmp	r0, #255	@ 0xff
 800e848:	d0a0      	beq.n	800e78c <wait_session_status+0x1c>
 800e84a:	38ff      	subs	r0, #255	@ 0xff
 800e84c:	bf18      	it	ne
 800e84e:	2001      	movne	r0, #1
 800e850:	b01d      	add	sp, #116	@ 0x74
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	4631      	mov	r1, r6
 800e858:	f104 0008 	add.w	r0, r4, #8
 800e85c:	f000 ff86 	bl	800f76c <uxr_get_input_reliable_stream>
 800e860:	4681      	mov	r9, r0
 800e862:	b338      	cbz	r0, 800e8b4 <wait_session_status+0x144>
 800e864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e866:	9205      	str	r2, [sp, #20]
 800e868:	a80c      	add	r0, sp, #48	@ 0x30
 800e86a:	f7fb fc0d 	bl	800a088 <ucdr_buffer_remaining>
 800e86e:	4603      	mov	r3, r0
 800e870:	f10d 001d 	add.w	r0, sp, #29
 800e874:	9000      	str	r0, [sp, #0]
 800e876:	9a05      	ldr	r2, [sp, #20]
 800e878:	9902      	ldr	r1, [sp, #8]
 800e87a:	4648      	mov	r0, r9
 800e87c:	f005 fd42 	bl	8014304 <uxr_receive_reliable_message>
 800e880:	b1c0      	cbz	r0, 800e8b4 <wait_session_status+0x144>
 800e882:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e886:	b95b      	cbnz	r3, 800e8a0 <wait_session_status+0x130>
 800e888:	e03c      	b.n	800e904 <wait_session_status+0x194>
 800e88a:	f04f 0302 	mov.w	r3, #2
 800e88e:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800e892:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e896:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800e89a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e89c:	f7ff fab0 	bl	800de00 <read_submessage_list>
 800e8a0:	a914      	add	r1, sp, #80	@ 0x50
 800e8a2:	2204      	movs	r2, #4
 800e8a4:	4648      	mov	r0, r9
 800e8a6:	f005 fdad 	bl	8014404 <uxr_next_input_reliable_buffer_available>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	a914      	add	r1, sp, #80	@ 0x50
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1ea      	bne.n	800e88a <wait_session_status+0x11a>
 800e8b4:	4632      	mov	r2, r6
 800e8b6:	4641      	mov	r1, r8
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f7ff f91f 	bl	800dafc <write_submessage_acknack.isra.0>
 800e8be:	e771      	b.n	800e7a4 <wait_session_status+0x34>
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	f104 0008 	add.w	r0, r4, #8
 800e8c6:	f000 ff47 	bl	800f758 <uxr_get_input_best_effort_stream>
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	f43f af6a 	beq.w	800e7a4 <wait_session_status+0x34>
 800e8d0:	9902      	ldr	r1, [sp, #8]
 800e8d2:	f005 fc93 	bl	80141fc <uxr_receive_best_effort_message>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f43f af64 	beq.w	800e7a4 <wait_session_status+0x34>
 800e8dc:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800e8e0:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e8e4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e8e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8ea:	a90c      	add	r1, sp, #48	@ 0x30
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f7ff fa87 	bl	800de00 <read_submessage_list>
 800e8f2:	e757      	b.n	800e7a4 <wait_session_status+0x34>
 800e8f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e8f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e8fa:	47a0      	blx	r4
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	b01d      	add	sp, #116	@ 0x74
 800e900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e904:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 800e908:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800e90c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800e910:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e912:	a90c      	add	r1, sp, #48	@ 0x30
 800e914:	4620      	mov	r0, r4
 800e916:	f7ff fa73 	bl	800de00 <read_submessage_list>
 800e91a:	e7c1      	b.n	800e8a0 <wait_session_status+0x130>

0800e91c <uxr_delete_session_retries>:
 800e91c:	b530      	push	{r4, r5, lr}
 800e91e:	b08f      	sub	sp, #60	@ 0x3c
 800e920:	4604      	mov	r4, r0
 800e922:	460d      	mov	r5, r1
 800e924:	f000 f954 	bl	800ebd0 <uxr_session_header_offset>
 800e928:	2300      	movs	r3, #0
 800e92a:	2210      	movs	r2, #16
 800e92c:	9000      	str	r0, [sp, #0]
 800e92e:	a902      	add	r1, sp, #8
 800e930:	a806      	add	r0, sp, #24
 800e932:	f7fb fb67 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800e936:	a906      	add	r1, sp, #24
 800e938:	4620      	mov	r0, r4
 800e93a:	f000 f897 	bl	800ea6c <uxr_buffer_delete_session>
 800e93e:	2200      	movs	r2, #0
 800e940:	4611      	mov	r1, r2
 800e942:	9b06      	ldr	r3, [sp, #24]
 800e944:	4620      	mov	r0, r4
 800e946:	f000 f8eb 	bl	800eb20 <uxr_stamp_session_header>
 800e94a:	a806      	add	r0, sp, #24
 800e94c:	f7fb fb98 	bl	800a080 <ucdr_buffer_length>
 800e950:	462b      	mov	r3, r5
 800e952:	4602      	mov	r2, r0
 800e954:	a902      	add	r1, sp, #8
 800e956:	4620      	mov	r0, r4
 800e958:	f7ff ff0a 	bl	800e770 <wait_session_status>
 800e95c:	b118      	cbz	r0, 800e966 <uxr_delete_session_retries+0x4a>
 800e95e:	7960      	ldrb	r0, [r4, #5]
 800e960:	fab0 f080 	clz	r0, r0
 800e964:	0940      	lsrs	r0, r0, #5
 800e966:	b00f      	add	sp, #60	@ 0x3c
 800e968:	bd30      	pop	{r4, r5, pc}
 800e96a:	bf00      	nop

0800e96c <uxr_prepare_stream_to_write_submessage>:
 800e96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e970:	b082      	sub	sp, #8
 800e972:	4682      	mov	sl, r0
 800e974:	4610      	mov	r0, r2
 800e976:	4615      	mov	r5, r2
 800e978:	461e      	mov	r6, r3
 800e97a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e97e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e982:	9101      	str	r1, [sp, #4]
 800e984:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e988:	f000 ff52 	bl	800f830 <uxr_submessage_padding>
 800e98c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e990:	f105 0904 	add.w	r9, r5, #4
 800e994:	2b01      	cmp	r3, #1
 800e996:	4481      	add	r9, r0
 800e998:	d01d      	beq.n	800e9d6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800e99a:	2b02      	cmp	r3, #2
 800e99c:	d116      	bne.n	800e9cc <uxr_prepare_stream_to_write_submessage+0x60>
 800e99e:	4621      	mov	r1, r4
 800e9a0:	f10a 0008 	add.w	r0, sl, #8
 800e9a4:	f000 fecc 	bl	800f740 <uxr_get_output_reliable_stream>
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	b158      	cbz	r0, 800e9c4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	4632      	mov	r2, r6
 800e9b0:	f005 fede 	bl	8014770 <uxr_prepare_reliable_buffer_to_write>
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	b12c      	cbz	r4, 800e9c4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e9b8:	4643      	mov	r3, r8
 800e9ba:	b2aa      	uxth	r2, r5
 800e9bc:	4639      	mov	r1, r7
 800e9be:	4630      	mov	r0, r6
 800e9c0:	f000 fef6 	bl	800f7b0 <uxr_buffer_submessage_header>
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	b002      	add	sp, #8
 800e9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9cc:	2400      	movs	r4, #0
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	b002      	add	sp, #8
 800e9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d6:	4621      	mov	r1, r4
 800e9d8:	f10a 0008 	add.w	r0, sl, #8
 800e9dc:	f000 fea8 	bl	800f730 <uxr_get_output_best_effort_stream>
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d0ee      	beq.n	800e9c4 <uxr_prepare_stream_to_write_submessage+0x58>
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	4632      	mov	r2, r6
 800e9ea:	f005 fdfd 	bl	80145e8 <uxr_prepare_best_effort_buffer_to_write>
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	e7e1      	b.n	800e9b6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800e9f2:	bf00      	nop

0800e9f4 <uxr_init_session_info>:
 800e9f4:	b470      	push	{r4, r5, r6}
 800e9f6:	7102      	strb	r2, [r0, #4]
 800e9f8:	0e16      	lsrs	r6, r2, #24
 800e9fa:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800e9fe:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800ea02:	23ff      	movs	r3, #255	@ 0xff
 800ea04:	2209      	movs	r2, #9
 800ea06:	7046      	strb	r6, [r0, #1]
 800ea08:	7085      	strb	r5, [r0, #2]
 800ea0a:	70c4      	strb	r4, [r0, #3]
 800ea0c:	7001      	strb	r1, [r0, #0]
 800ea0e:	bc70      	pop	{r4, r5, r6}
 800ea10:	80c2      	strh	r2, [r0, #6]
 800ea12:	7143      	strb	r3, [r0, #5]
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop

0800ea18 <uxr_buffer_create_session>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	b088      	sub	sp, #32
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4d12      	ldr	r5, [pc, #72]	@ (800ea68 <uxr_buffer_create_session+0x50>)
 800ea20:	9307      	str	r3, [sp, #28]
 800ea22:	f8ad 201c 	strh.w	r2, [sp, #28]
 800ea26:	7802      	ldrb	r2, [r0, #0]
 800ea28:	9303      	str	r3, [sp, #12]
 800ea2a:	460c      	mov	r4, r1
 800ea2c:	f88d 200c 	strb.w	r2, [sp, #12]
 800ea30:	2101      	movs	r1, #1
 800ea32:	682a      	ldr	r2, [r5, #0]
 800ea34:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800ea38:	88ad      	ldrh	r5, [r5, #4]
 800ea3a:	80c1      	strh	r1, [r0, #6]
 800ea3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ea40:	9200      	str	r2, [sp, #0]
 800ea42:	4619      	mov	r1, r3
 800ea44:	2210      	movs	r2, #16
 800ea46:	4620      	mov	r0, r4
 800ea48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ea4c:	9306      	str	r3, [sp, #24]
 800ea4e:	f88d 300d 	strb.w	r3, [sp, #13]
 800ea52:	9602      	str	r6, [sp, #8]
 800ea54:	f8ad 5006 	strh.w	r5, [sp, #6]
 800ea58:	f000 feaa 	bl	800f7b0 <uxr_buffer_submessage_header>
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	4669      	mov	r1, sp
 800ea60:	f001 fece 	bl	8010800 <uxr_serialize_CREATE_CLIENT_Payload>
 800ea64:	b008      	add	sp, #32
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	08016860 	.word	0x08016860

0800ea6c <uxr_buffer_delete_session>:
 800ea6c:	b530      	push	{r4, r5, lr}
 800ea6e:	4b0c      	ldr	r3, [pc, #48]	@ (800eaa0 <uxr_buffer_delete_session+0x34>)
 800ea70:	b083      	sub	sp, #12
 800ea72:	891b      	ldrh	r3, [r3, #8]
 800ea74:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea78:	2202      	movs	r2, #2
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	80c2      	strh	r2, [r0, #6]
 800ea7e:	2300      	movs	r3, #0
 800ea80:	2204      	movs	r2, #4
 800ea82:	4608      	mov	r0, r1
 800ea84:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ea88:	2103      	movs	r1, #3
 800ea8a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800ea8e:	f000 fe8f 	bl	800f7b0 <uxr_buffer_submessage_header>
 800ea92:	4620      	mov	r0, r4
 800ea94:	a901      	add	r1, sp, #4
 800ea96:	f001 ff61 	bl	801095c <uxr_serialize_DELETE_Payload>
 800ea9a:	b003      	add	sp, #12
 800ea9c:	bd30      	pop	{r4, r5, pc}
 800ea9e:	bf00      	nop
 800eaa0:	08016860 	.word	0x08016860

0800eaa4 <uxr_read_create_session_status>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	b088      	sub	sp, #32
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	4608      	mov	r0, r1
 800eaac:	a901      	add	r1, sp, #4
 800eaae:	f001 ff65 	bl	801097c <uxr_deserialize_STATUS_AGENT_Payload>
 800eab2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eab6:	7163      	strb	r3, [r4, #5]
 800eab8:	b008      	add	sp, #32
 800eaba:	bd10      	pop	{r4, pc}

0800eabc <uxr_read_delete_session_status>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	4604      	mov	r4, r0
 800eac0:	b084      	sub	sp, #16
 800eac2:	4608      	mov	r0, r1
 800eac4:	a902      	add	r1, sp, #8
 800eac6:	f001 ff89 	bl	80109dc <uxr_deserialize_STATUS_Payload>
 800eaca:	88e3      	ldrh	r3, [r4, #6]
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d001      	beq.n	800ead4 <uxr_read_delete_session_status+0x18>
 800ead0:	b004      	add	sp, #16
 800ead2:	bd10      	pop	{r4, pc}
 800ead4:	f10d 000a 	add.w	r0, sp, #10
 800ead8:	f7fe fe72 	bl	800d7c0 <uxr_object_id_from_raw>
 800eadc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800eae0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800eae4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	bf04      	itt	eq
 800eaee:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800eaf2:	7163      	strbeq	r3, [r4, #5]
 800eaf4:	b004      	add	sp, #16
 800eaf6:	bd10      	pop	{r4, pc}

0800eaf8 <uxr_stamp_create_session_header>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	4604      	mov	r4, r0
 800eafc:	b08a      	sub	sp, #40	@ 0x28
 800eafe:	a802      	add	r0, sp, #8
 800eb00:	2208      	movs	r2, #8
 800eb02:	f7fb fa91 	bl	800a028 <ucdr_init_buffer>
 800eb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb0a:	9400      	str	r4, [sp, #0]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	a802      	add	r0, sp, #8
 800eb10:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800eb14:	461a      	mov	r2, r3
 800eb16:	f001 f849 	bl	800fbac <uxr_serialize_message_header>
 800eb1a:	b00a      	add	sp, #40	@ 0x28
 800eb1c:	bd10      	pop	{r4, pc}
 800eb1e:	bf00      	nop

0800eb20 <uxr_stamp_session_header>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	4604      	mov	r4, r0
 800eb24:	b08c      	sub	sp, #48	@ 0x30
 800eb26:	460d      	mov	r5, r1
 800eb28:	4616      	mov	r6, r2
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	a804      	add	r0, sp, #16
 800eb2e:	2208      	movs	r2, #8
 800eb30:	9603      	str	r6, [sp, #12]
 800eb32:	f7fb fa79 	bl	800a028 <ucdr_init_buffer>
 800eb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb3a:	9b03      	ldr	r3, [sp, #12]
 800eb3c:	9400      	str	r4, [sp, #0]
 800eb3e:	462a      	mov	r2, r5
 800eb40:	a804      	add	r0, sp, #16
 800eb42:	f001 f833 	bl	800fbac <uxr_serialize_message_header>
 800eb46:	b00c      	add	sp, #48	@ 0x30
 800eb48:	bd70      	pop	{r4, r5, r6, pc}
 800eb4a:	bf00      	nop

0800eb4c <uxr_read_session_header>:
 800eb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb50:	4607      	mov	r7, r0
 800eb52:	b084      	sub	sp, #16
 800eb54:	4608      	mov	r0, r1
 800eb56:	460c      	mov	r4, r1
 800eb58:	4615      	mov	r5, r2
 800eb5a:	461e      	mov	r6, r3
 800eb5c:	f7fb fa94 	bl	800a088 <ucdr_buffer_remaining>
 800eb60:	2808      	cmp	r0, #8
 800eb62:	d803      	bhi.n	800eb6c <uxr_read_session_header+0x20>
 800eb64:	2000      	movs	r0, #0
 800eb66:	b004      	add	sp, #16
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6c:	f10d 080c 	add.w	r8, sp, #12
 800eb70:	4633      	mov	r3, r6
 800eb72:	462a      	mov	r2, r5
 800eb74:	4620      	mov	r0, r4
 800eb76:	f8cd 8000 	str.w	r8, [sp]
 800eb7a:	f10d 010b 	add.w	r1, sp, #11
 800eb7e:	f001 f833 	bl	800fbe8 <uxr_deserialize_message_header>
 800eb82:	783a      	ldrb	r2, [r7, #0]
 800eb84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d1eb      	bne.n	800eb64 <uxr_read_session_header+0x18>
 800eb8c:	061b      	lsls	r3, r3, #24
 800eb8e:	d41c      	bmi.n	800ebca <uxr_read_session_header+0x7e>
 800eb90:	f898 2000 	ldrb.w	r2, [r8]
 800eb94:	787b      	ldrb	r3, [r7, #1]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d003      	beq.n	800eba2 <uxr_read_session_header+0x56>
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	f080 0001 	eor.w	r0, r0, #1
 800eba0:	e7e1      	b.n	800eb66 <uxr_read_session_header+0x1a>
 800eba2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800eba6:	78bb      	ldrb	r3, [r7, #2]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	f107 0102 	add.w	r1, r7, #2
 800ebae:	d1f4      	bne.n	800eb9a <uxr_read_session_header+0x4e>
 800ebb0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ebb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d1ee      	bne.n	800eb9a <uxr_read_session_header+0x4e>
 800ebbc:	784b      	ldrb	r3, [r1, #1]
 800ebbe:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d1e9      	bne.n	800eb9a <uxr_read_session_header+0x4e>
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	e7e8      	b.n	800eb9c <uxr_read_session_header+0x50>
 800ebca:	2001      	movs	r0, #1
 800ebcc:	e7cb      	b.n	800eb66 <uxr_read_session_header+0x1a>
 800ebce:	bf00      	nop

0800ebd0 <uxr_session_header_offset>:
 800ebd0:	f990 3000 	ldrsb.w	r3, [r0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	bfac      	ite	ge
 800ebd8:	2008      	movge	r0, #8
 800ebda:	2004      	movlt	r0, #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop

0800ebe0 <uxr_init_base_object_request>:
 800ebe0:	b530      	push	{r4, r5, lr}
 800ebe2:	88c3      	ldrh	r3, [r0, #6]
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ebea:	9101      	str	r1, [sp, #4]
 800ebec:	f1a3 010a 	sub.w	r1, r3, #10
 800ebf0:	b289      	uxth	r1, r1
 800ebf2:	42a1      	cmp	r1, r4
 800ebf4:	d80e      	bhi.n	800ec14 <uxr_init_base_object_request+0x34>
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	b29c      	uxth	r4, r3
 800ebfa:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	80c4      	strh	r4, [r0, #6]
 800ec02:	1c91      	adds	r1, r2, #2
 800ec04:	9801      	ldr	r0, [sp, #4]
 800ec06:	7015      	strb	r5, [r2, #0]
 800ec08:	7053      	strb	r3, [r2, #1]
 800ec0a:	f7fe fded 	bl	800d7e8 <uxr_object_id_to_raw>
 800ec0e:	4620      	mov	r0, r4
 800ec10:	b003      	add	sp, #12
 800ec12:	bd30      	pop	{r4, r5, pc}
 800ec14:	230a      	movs	r3, #10
 800ec16:	461c      	mov	r4, r3
 800ec18:	2500      	movs	r5, #0
 800ec1a:	e7f1      	b.n	800ec00 <uxr_init_base_object_request+0x20>

0800ec1c <uxr_parse_base_object_request>:
 800ec1c:	b570      	push	{r4, r5, r6, lr}
 800ec1e:	4604      	mov	r4, r0
 800ec20:	3002      	adds	r0, #2
 800ec22:	460d      	mov	r5, r1
 800ec24:	4616      	mov	r6, r2
 800ec26:	f7fe fdcb 	bl	800d7c0 <uxr_object_id_from_raw>
 800ec2a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ec2e:	8028      	strh	r0, [r5, #0]
 800ec30:	806b      	strh	r3, [r5, #2]
 800ec32:	7822      	ldrb	r2, [r4, #0]
 800ec34:	7863      	ldrb	r3, [r4, #1]
 800ec36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ec3a:	8033      	strh	r3, [r6, #0]
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
 800ec3e:	bf00      	nop

0800ec40 <uxr_init_framing_io>:
 800ec40:	2300      	movs	r3, #0
 800ec42:	7041      	strb	r1, [r0, #1]
 800ec44:	7003      	strb	r3, [r0, #0]
 800ec46:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop

0800ec4c <uxr_write_framed_msg>:
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	7845      	ldrb	r5, [r0, #1]
 800ec52:	b085      	sub	sp, #20
 800ec54:	4604      	mov	r4, r0
 800ec56:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800ec5a:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 800ec5e:	f1bc 0f01 	cmp.w	ip, #1
 800ec62:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 800ec66:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ec6a:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 800ec6e:	460e      	mov	r6, r1
 800ec70:	4617      	mov	r7, r2
 800ec72:	469b      	mov	fp, r3
 800ec74:	f240 8116 	bls.w	800eea4 <uxr_write_framed_msg+0x258>
 800ec78:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	2a01      	cmp	r2, #1
 800ec80:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 800ec84:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ec88:	f240 8091 	bls.w	800edae <uxr_write_framed_msg+0x162>
 800ec8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec8e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800ec92:	b2d9      	uxtb	r1, r3
 800ec94:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 800ec98:	2203      	movs	r2, #3
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eca0:	f240 809a 	bls.w	800edd8 <uxr_write_framed_msg+0x18c>
 800eca4:	18a3      	adds	r3, r4, r2
 800eca6:	3201      	adds	r2, #1
 800eca8:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 800ecac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ecb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800ecb6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ecba:	2901      	cmp	r1, #1
 800ecbc:	eb04 0102 	add.w	r1, r4, r2
 800ecc0:	f240 8101 	bls.w	800eec6 <uxr_write_framed_msg+0x27a>
 800ecc4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ecc8:	3201      	adds	r2, #1
 800ecca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eccc:	b2d2      	uxtb	r2, r2
 800ecce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 8106 	beq.w	800eee4 <uxr_write_framed_msg+0x298>
 800ecd8:	f04f 0a00 	mov.w	sl, #0
 800ecdc:	46d1      	mov	r9, sl
 800ecde:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800ece2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ece6:	2901      	cmp	r1, #1
 800ece8:	f240 80a3 	bls.w	800ee32 <uxr_write_framed_msg+0x1e6>
 800ecec:	2a29      	cmp	r2, #41	@ 0x29
 800ecee:	d87f      	bhi.n	800edf0 <uxr_write_framed_msg+0x1a4>
 800ecf0:	18a1      	adds	r1, r4, r2
 800ecf2:	3201      	adds	r2, #1
 800ecf4:	b2d2      	uxtb	r2, r2
 800ecf6:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ecfa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ecfe:	ea8a 0303 	eor.w	r3, sl, r3
 800ed02:	4984      	ldr	r1, [pc, #528]	@ (800ef14 <uxr_write_framed_msg+0x2c8>)
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	f109 0901 	add.w	r9, r9, #1
 800ed0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ed0e:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 800ed12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed14:	454b      	cmp	r3, r9
 800ed16:	d8e2      	bhi.n	800ecde <uxr_write_framed_msg+0x92>
 800ed18:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800ed1c:	fa5f f98a 	uxtb.w	r9, sl
 800ed20:	9301      	str	r3, [sp, #4]
 800ed22:	f04f 0b00 	mov.w	fp, #0
 800ed26:	f88d 900c 	strb.w	r9, [sp, #12]
 800ed2a:	f88d 300d 	strb.w	r3, [sp, #13]
 800ed2e:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 800ed32:	fa5f f18a 	uxtb.w	r1, sl
 800ed36:	2901      	cmp	r1, #1
 800ed38:	d920      	bls.n	800ed7c <uxr_write_framed_msg+0x130>
 800ed3a:	2a29      	cmp	r2, #41	@ 0x29
 800ed3c:	f240 808b 	bls.w	800ee56 <uxr_write_framed_msg+0x20a>
 800ed40:	2500      	movs	r5, #0
 800ed42:	e000      	b.n	800ed46 <uxr_write_framed_msg+0xfa>
 800ed44:	b160      	cbz	r0, 800ed60 <uxr_write_framed_msg+0x114>
 800ed46:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ed4a:	1b52      	subs	r2, r2, r5
 800ed4c:	4421      	add	r1, r4
 800ed4e:	4643      	mov	r3, r8
 800ed50:	4638      	mov	r0, r7
 800ed52:	47b0      	blx	r6
 800ed54:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ed58:	4405      	add	r5, r0
 800ed5a:	4295      	cmp	r5, r2
 800ed5c:	d3f2      	bcc.n	800ed44 <uxr_write_framed_msg+0xf8>
 800ed5e:	d003      	beq.n	800ed68 <uxr_write_framed_msg+0x11c>
 800ed60:	2000      	movs	r0, #0
 800ed62:	b005      	add	sp, #20
 800ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed68:	fa5f f18a 	uxtb.w	r1, sl
 800ed6c:	f04f 0300 	mov.w	r3, #0
 800ed70:	2901      	cmp	r1, #1
 800ed72:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ed76:	f04f 0200 	mov.w	r2, #0
 800ed7a:	d86c      	bhi.n	800ee56 <uxr_write_framed_msg+0x20a>
 800ed7c:	1c51      	adds	r1, r2, #1
 800ed7e:	b2c9      	uxtb	r1, r1
 800ed80:	2929      	cmp	r1, #41	@ 0x29
 800ed82:	d8dd      	bhi.n	800ed40 <uxr_write_framed_msg+0xf4>
 800ed84:	18a0      	adds	r0, r4, r2
 800ed86:	3202      	adds	r2, #2
 800ed88:	f089 0920 	eor.w	r9, r9, #32
 800ed8c:	b2d2      	uxtb	r2, r2
 800ed8e:	4659      	mov	r1, fp
 800ed90:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800ed94:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 800ed98:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800ed9c:	f04f 0b01 	mov.w	fp, #1
 800eda0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eda4:	2900      	cmp	r1, #0
 800eda6:	d162      	bne.n	800ee6e <uxr_write_framed_msg+0x222>
 800eda8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800edac:	e7bf      	b.n	800ed2e <uxr_write_framed_msg+0xe2>
 800edae:	2204      	movs	r2, #4
 800edb0:	2503      	movs	r5, #3
 800edb2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800edb4:	4423      	add	r3, r4
 800edb6:	b2c9      	uxtb	r1, r1
 800edb8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800edbc:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800edc0:	4425      	add	r5, r4
 800edc2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 800edc6:	f080 0020 	eor.w	r0, r0, #32
 800edca:	2b01      	cmp	r3, #1
 800edcc:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 800edd0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800edd4:	f63f af66 	bhi.w	800eca4 <uxr_write_framed_msg+0x58>
 800edd8:	18a3      	adds	r3, r4, r2
 800edda:	f081 0120 	eor.w	r1, r1, #32
 800edde:	3202      	adds	r2, #2
 800ede0:	207d      	movs	r0, #125	@ 0x7d
 800ede2:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 800ede6:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 800edea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800edee:	e75f      	b.n	800ecb0 <uxr_write_framed_msg+0x64>
 800edf0:	2500      	movs	r5, #0
 800edf2:	e001      	b.n	800edf8 <uxr_write_framed_msg+0x1ac>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d0b3      	beq.n	800ed60 <uxr_write_framed_msg+0x114>
 800edf8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800edfc:	1b52      	subs	r2, r2, r5
 800edfe:	4421      	add	r1, r4
 800ee00:	4643      	mov	r3, r8
 800ee02:	4638      	mov	r0, r7
 800ee04:	47b0      	blx	r6
 800ee06:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ee0a:	4405      	add	r5, r0
 800ee0c:	4295      	cmp	r5, r2
 800ee0e:	d3f1      	bcc.n	800edf4 <uxr_write_framed_msg+0x1a8>
 800ee10:	d1a6      	bne.n	800ed60 <uxr_write_framed_msg+0x114>
 800ee12:	f04f 0300 	mov.w	r3, #0
 800ee16:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ee1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee1c:	454b      	cmp	r3, r9
 800ee1e:	d971      	bls.n	800ef04 <uxr_write_framed_msg+0x2b8>
 800ee20:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800ee24:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ee28:	2901      	cmp	r1, #1
 800ee2a:	f04f 0200 	mov.w	r2, #0
 800ee2e:	f63f af5d 	bhi.w	800ecec <uxr_write_framed_msg+0xa0>
 800ee32:	1c51      	adds	r1, r2, #1
 800ee34:	b2c9      	uxtb	r1, r1
 800ee36:	2929      	cmp	r1, #41	@ 0x29
 800ee38:	d8da      	bhi.n	800edf0 <uxr_write_framed_msg+0x1a4>
 800ee3a:	18a0      	adds	r0, r4, r2
 800ee3c:	3202      	adds	r2, #2
 800ee3e:	b2d2      	uxtb	r2, r2
 800ee40:	f083 0120 	eor.w	r1, r3, #32
 800ee44:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800ee48:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800ee4c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800ee50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee54:	e753      	b.n	800ecfe <uxr_write_framed_msg+0xb2>
 800ee56:	18a0      	adds	r0, r4, r2
 800ee58:	3201      	adds	r2, #1
 800ee5a:	b2d2      	uxtb	r2, r2
 800ee5c:	4659      	mov	r1, fp
 800ee5e:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 800ee62:	f04f 0b01 	mov.w	fp, #1
 800ee66:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ee6a:	2900      	cmp	r1, #0
 800ee6c:	d09c      	beq.n	800eda8 <uxr_write_framed_msg+0x15c>
 800ee6e:	2500      	movs	r5, #0
 800ee70:	e002      	b.n	800ee78 <uxr_write_framed_msg+0x22c>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	f43f af74 	beq.w	800ed60 <uxr_write_framed_msg+0x114>
 800ee78:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ee7c:	1b52      	subs	r2, r2, r5
 800ee7e:	4421      	add	r1, r4
 800ee80:	4643      	mov	r3, r8
 800ee82:	4638      	mov	r0, r7
 800ee84:	47b0      	blx	r6
 800ee86:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ee8a:	4405      	add	r5, r0
 800ee8c:	4295      	cmp	r5, r2
 800ee8e:	d3f0      	bcc.n	800ee72 <uxr_write_framed_msg+0x226>
 800ee90:	f47f af66 	bne.w	800ed60 <uxr_write_framed_msg+0x114>
 800ee94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee96:	2300      	movs	r3, #0
 800ee98:	b290      	uxth	r0, r2
 800ee9a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ee9e:	b005      	add	sp, #20
 800eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea4:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 800eea8:	f085 0520 	eor.w	r5, r5, #32
 800eeac:	2303      	movs	r3, #3
 800eeae:	217d      	movs	r1, #125	@ 0x7d
 800eeb0:	2a01      	cmp	r2, #1
 800eeb2:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 800eeb6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eeba:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800eebe:	d814      	bhi.n	800eeea <uxr_write_framed_msg+0x29e>
 800eec0:	2205      	movs	r2, #5
 800eec2:	2504      	movs	r5, #4
 800eec4:	e775      	b.n	800edb2 <uxr_write_framed_msg+0x166>
 800eec6:	f083 0320 	eor.w	r3, r3, #32
 800eeca:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 800eece:	3202      	adds	r2, #2
 800eed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eed2:	b2d2      	uxtb	r2, r2
 800eed4:	207d      	movs	r0, #125	@ 0x7d
 800eed6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800eeda:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eede:	2b00      	cmp	r3, #0
 800eee0:	f47f aefa 	bne.w	800ecd8 <uxr_write_framed_msg+0x8c>
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	4699      	mov	r9, r3
 800eee8:	e71b      	b.n	800ed22 <uxr_write_framed_msg+0xd6>
 800eeea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeec:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800eef0:	b2d9      	uxtb	r1, r3
 800eef2:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 800eef6:	2204      	movs	r2, #4
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eefe:	f63f aed1 	bhi.w	800eca4 <uxr_write_framed_msg+0x58>
 800ef02:	e769      	b.n	800edd8 <uxr_write_framed_msg+0x18c>
 800ef04:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800ef08:	fa5f f98a 	uxtb.w	r9, sl
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	e707      	b.n	800ed22 <uxr_write_framed_msg+0xd6>
 800ef12:	bf00      	nop
 800ef14:	08016b8c 	.word	0x08016b8c

0800ef18 <uxr_framing_read_transport>:
 800ef18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	b083      	sub	sp, #12
 800ef20:	461f      	mov	r7, r3
 800ef22:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800ef26:	4689      	mov	r9, r1
 800ef28:	4692      	mov	sl, r2
 800ef2a:	f000 fc87 	bl	800f83c <uxr_millis>
 800ef2e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ef32:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800ef36:	42b3      	cmp	r3, r6
 800ef38:	4680      	mov	r8, r0
 800ef3a:	d05f      	beq.n	800effc <uxr_framing_read_transport+0xe4>
 800ef3c:	d81b      	bhi.n	800ef76 <uxr_framing_read_transport+0x5e>
 800ef3e:	1e75      	subs	r5, r6, #1
 800ef40:	1aed      	subs	r5, r5, r3
 800ef42:	b2ed      	uxtb	r5, r5
 800ef44:	2600      	movs	r6, #0
 800ef46:	455d      	cmp	r5, fp
 800ef48:	d81e      	bhi.n	800ef88 <uxr_framing_read_transport+0x70>
 800ef4a:	19ab      	adds	r3, r5, r6
 800ef4c:	455b      	cmp	r3, fp
 800ef4e:	bf84      	itt	hi
 800ef50:	ebab 0605 	subhi.w	r6, fp, r5
 800ef54:	b2f6      	uxtbhi	r6, r6
 800ef56:	b9e5      	cbnz	r5, 800ef92 <uxr_framing_read_transport+0x7a>
 800ef58:	f04f 0b00 	mov.w	fp, #0
 800ef5c:	f000 fc6e 	bl	800f83c <uxr_millis>
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	eba0 0008 	sub.w	r0, r0, r8
 800ef66:	1a1b      	subs	r3, r3, r0
 800ef68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ef6c:	4658      	mov	r0, fp
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	b003      	add	sp, #12
 800ef72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef76:	2e00      	cmp	r6, #0
 800ef78:	d048      	beq.n	800f00c <uxr_framing_read_transport+0xf4>
 800ef7a:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800ef7e:	b2ed      	uxtb	r5, r5
 800ef80:	3e01      	subs	r6, #1
 800ef82:	455d      	cmp	r5, fp
 800ef84:	b2f6      	uxtb	r6, r6
 800ef86:	d9e0      	bls.n	800ef4a <uxr_framing_read_transport+0x32>
 800ef88:	fa5f f58b 	uxtb.w	r5, fp
 800ef8c:	2600      	movs	r6, #0
 800ef8e:	2d00      	cmp	r5, #0
 800ef90:	d0e2      	beq.n	800ef58 <uxr_framing_read_transport+0x40>
 800ef92:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ef96:	3102      	adds	r1, #2
 800ef98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	4421      	add	r1, r4
 800efa0:	462a      	mov	r2, r5
 800efa2:	4650      	mov	r0, sl
 800efa4:	47c8      	blx	r9
 800efa6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800efaa:	4a1b      	ldr	r2, [pc, #108]	@ (800f018 <uxr_framing_read_transport+0x100>)
 800efac:	4403      	add	r3, r0
 800efae:	0859      	lsrs	r1, r3, #1
 800efb0:	fba2 2101 	umull	r2, r1, r2, r1
 800efb4:	0889      	lsrs	r1, r1, #2
 800efb6:	222a      	movs	r2, #42	@ 0x2a
 800efb8:	fb02 3111 	mls	r1, r2, r1, r3
 800efbc:	4683      	mov	fp, r0
 800efbe:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d0c8      	beq.n	800ef58 <uxr_framing_read_transport+0x40>
 800efc6:	42a8      	cmp	r0, r5
 800efc8:	d1c8      	bne.n	800ef5c <uxr_framing_read_transport+0x44>
 800efca:	b31e      	cbz	r6, 800f014 <uxr_framing_read_transport+0xfc>
 800efcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	3102      	adds	r1, #2
 800efd2:	4421      	add	r1, r4
 800efd4:	4632      	mov	r2, r6
 800efd6:	2300      	movs	r3, #0
 800efd8:	4650      	mov	r0, sl
 800efda:	47c8      	blx	r9
 800efdc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800efe0:	490d      	ldr	r1, [pc, #52]	@ (800f018 <uxr_framing_read_transport+0x100>)
 800efe2:	181a      	adds	r2, r3, r0
 800efe4:	0853      	lsrs	r3, r2, #1
 800efe6:	fba1 1303 	umull	r1, r3, r1, r3
 800efea:	089b      	lsrs	r3, r3, #2
 800efec:	212a      	movs	r1, #42	@ 0x2a
 800efee:	fb01 2313 	mls	r3, r1, r3, r2
 800eff2:	eb00 0b05 	add.w	fp, r0, r5
 800eff6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800effa:	e7af      	b.n	800ef5c <uxr_framing_read_transport+0x44>
 800effc:	2600      	movs	r6, #0
 800effe:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f002:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f004:	d9c0      	bls.n	800ef88 <uxr_framing_read_transport+0x70>
 800f006:	2102      	movs	r1, #2
 800f008:	2529      	movs	r5, #41	@ 0x29
 800f00a:	e7c5      	b.n	800ef98 <uxr_framing_read_transport+0x80>
 800f00c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f010:	b2ed      	uxtb	r5, r5
 800f012:	e798      	b.n	800ef46 <uxr_framing_read_transport+0x2e>
 800f014:	46ab      	mov	fp, r5
 800f016:	e7a1      	b.n	800ef5c <uxr_framing_read_transport+0x44>
 800f018:	30c30c31 	.word	0x30c30c31

0800f01c <uxr_read_framed_msg>:
 800f01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f020:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 800f024:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 800f028:	42ae      	cmp	r6, r5
 800f02a:	b083      	sub	sp, #12
 800f02c:	4604      	mov	r4, r0
 800f02e:	461f      	mov	r7, r3
 800f030:	4689      	mov	r9, r1
 800f032:	4692      	mov	sl, r2
 800f034:	f000 817d 	beq.w	800f332 <uxr_read_framed_msg+0x316>
 800f038:	7823      	ldrb	r3, [r4, #0]
 800f03a:	4ecc      	ldr	r6, [pc, #816]	@ (800f36c <uxr_read_framed_msg+0x350>)
 800f03c:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 800f370 <uxr_read_framed_msg+0x354>
 800f040:	2b07      	cmp	r3, #7
 800f042:	d8fd      	bhi.n	800f040 <uxr_read_framed_msg+0x24>
 800f044:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f048:	00f40113 	.word	0x00f40113
 800f04c:	00b700d4 	.word	0x00b700d4
 800f050:	004d008e 	.word	0x004d008e
 800f054:	00080030 	.word	0x00080030
 800f058:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f05c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f060:	4298      	cmp	r0, r3
 800f062:	f000 8141 	beq.w	800f2e8 <uxr_read_framed_msg+0x2cc>
 800f066:	18e2      	adds	r2, r4, r3
 800f068:	7891      	ldrb	r1, [r2, #2]
 800f06a:	297d      	cmp	r1, #125	@ 0x7d
 800f06c:	f000 81a2 	beq.w	800f3b4 <uxr_read_framed_msg+0x398>
 800f070:	3301      	adds	r3, #1
 800f072:	085a      	lsrs	r2, r3, #1
 800f074:	fba6 0202 	umull	r0, r2, r6, r2
 800f078:	0892      	lsrs	r2, r2, #2
 800f07a:	202a      	movs	r0, #42	@ 0x2a
 800f07c:	fb00 3312 	mls	r3, r0, r2, r3
 800f080:	297e      	cmp	r1, #126	@ 0x7e
 800f082:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f086:	f000 8251 	beq.w	800f52c <uxr_read_framed_msg+0x510>
 800f08a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f08c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f08e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f092:	b29b      	uxth	r3, r3
 800f094:	2100      	movs	r1, #0
 800f096:	429a      	cmp	r2, r3
 800f098:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f09a:	7021      	strb	r1, [r4, #0]
 800f09c:	f000 8182 	beq.w	800f3a4 <uxr_read_framed_msg+0x388>
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	b003      	add	sp, #12
 800f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f0ac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f0b0:	4298      	cmp	r0, r3
 800f0b2:	f000 8128 	beq.w	800f306 <uxr_read_framed_msg+0x2ea>
 800f0b6:	18e2      	adds	r2, r4, r3
 800f0b8:	7891      	ldrb	r1, [r2, #2]
 800f0ba:	297d      	cmp	r1, #125	@ 0x7d
 800f0bc:	f000 8196 	beq.w	800f3ec <uxr_read_framed_msg+0x3d0>
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	085a      	lsrs	r2, r3, #1
 800f0c4:	fba6 0202 	umull	r0, r2, r6, r2
 800f0c8:	0892      	lsrs	r2, r2, #2
 800f0ca:	202a      	movs	r0, #42	@ 0x2a
 800f0cc:	fb00 3312 	mls	r3, r0, r2, r3
 800f0d0:	297e      	cmp	r1, #126	@ 0x7e
 800f0d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f0d6:	f000 8219 	beq.w	800f50c <uxr_read_framed_msg+0x4f0>
 800f0da:	2307      	movs	r3, #7
 800f0dc:	86a1      	strh	r1, [r4, #52]	@ 0x34
 800f0de:	7023      	strb	r3, [r4, #0]
 800f0e0:	e7ae      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f0e2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f0e4:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 800f0e6:	429d      	cmp	r5, r3
 800f0e8:	d937      	bls.n	800f15a <uxr_read_framed_msg+0x13e>
 800f0ea:	ee07 9a90 	vmov	s15, r9
 800f0ee:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f0f2:	e01e      	b.n	800f132 <uxr_read_framed_msg+0x116>
 800f0f4:	f89e e002 	ldrb.w	lr, [lr, #2]
 800f0f8:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800f0fc:	f000 80d2 	beq.w	800f2a4 <uxr_read_framed_msg+0x288>
 800f100:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f104:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f108:	f000 8214 	beq.w	800f534 <uxr_read_framed_msg+0x518>
 800f10c:	f807 e003 	strb.w	lr, [r7, r3]
 800f110:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800f112:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f114:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 800f116:	ea80 010e 	eor.w	r1, r0, lr
 800f11a:	b2c9      	uxtb	r1, r1
 800f11c:	3301      	adds	r3, #1
 800f11e:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 800f122:	b29b      	uxth	r3, r3
 800f124:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800f128:	42ab      	cmp	r3, r5
 800f12a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f12c:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f12e:	f080 8121 	bcs.w	800f374 <uxr_read_framed_msg+0x358>
 800f132:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 800f136:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f13a:	f101 0b01 	add.w	fp, r1, #1
 800f13e:	ea4f 025b 	mov.w	r2, fp, lsr #1
 800f142:	fba6 9202 	umull	r9, r2, r6, r2
 800f146:	0892      	lsrs	r2, r2, #2
 800f148:	4288      	cmp	r0, r1
 800f14a:	eb04 0e01 	add.w	lr, r4, r1
 800f14e:	fb0c b212 	mls	r2, ip, r2, fp
 800f152:	d1cf      	bne.n	800f0f4 <uxr_read_framed_msg+0xd8>
 800f154:	ee17 9a90 	vmov	r9, s15
 800f158:	429d      	cmp	r5, r3
 800f15a:	f040 8112 	bne.w	800f382 <uxr_read_framed_msg+0x366>
 800f15e:	2306      	movs	r3, #6
 800f160:	7023      	strb	r3, [r4, #0]
 800f162:	e76d      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f164:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f168:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f16c:	4298      	cmp	r0, r3
 800f16e:	f000 80bb 	beq.w	800f2e8 <uxr_read_framed_msg+0x2cc>
 800f172:	18e2      	adds	r2, r4, r3
 800f174:	7891      	ldrb	r1, [r2, #2]
 800f176:	297d      	cmp	r1, #125	@ 0x7d
 800f178:	f000 8153 	beq.w	800f422 <uxr_read_framed_msg+0x406>
 800f17c:	3301      	adds	r3, #1
 800f17e:	085a      	lsrs	r2, r3, #1
 800f180:	fba6 0202 	umull	r0, r2, r6, r2
 800f184:	0892      	lsrs	r2, r2, #2
 800f186:	202a      	movs	r0, #42	@ 0x2a
 800f188:	fb00 3212 	mls	r2, r0, r2, r3
 800f18c:	297e      	cmp	r1, #126	@ 0x7e
 800f18e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f192:	f000 81cb 	beq.w	800f52c <uxr_read_framed_msg+0x510>
 800f196:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f198:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f19c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	428b      	cmp	r3, r1
 800f1a4:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f1a6:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f1a8:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f1aa:	f240 80db 	bls.w	800f364 <uxr_read_framed_msg+0x348>
 800f1ae:	7020      	strb	r0, [r4, #0]
 800f1b0:	b003      	add	sp, #12
 800f1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f1ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f1be:	4298      	cmp	r0, r3
 800f1c0:	f000 80a1 	beq.w	800f306 <uxr_read_framed_msg+0x2ea>
 800f1c4:	18e2      	adds	r2, r4, r3
 800f1c6:	7891      	ldrb	r1, [r2, #2]
 800f1c8:	297d      	cmp	r1, #125	@ 0x7d
 800f1ca:	f000 8167 	beq.w	800f49c <uxr_read_framed_msg+0x480>
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	085a      	lsrs	r2, r3, #1
 800f1d2:	fba6 0202 	umull	r0, r2, r6, r2
 800f1d6:	0892      	lsrs	r2, r2, #2
 800f1d8:	202a      	movs	r0, #42	@ 0x2a
 800f1da:	fb00 3312 	mls	r3, r0, r2, r3
 800f1de:	297e      	cmp	r1, #126	@ 0x7e
 800f1e0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f1e4:	f000 8192 	beq.w	800f50c <uxr_read_framed_msg+0x4f0>
 800f1e8:	2304      	movs	r3, #4
 800f1ea:	8621      	strh	r1, [r4, #48]	@ 0x30
 800f1ec:	7023      	strb	r3, [r4, #0]
 800f1ee:	e727      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f1f0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f1f4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f1f8:	4290      	cmp	r0, r2
 800f1fa:	f000 80b1 	beq.w	800f360 <uxr_read_framed_msg+0x344>
 800f1fe:	18a3      	adds	r3, r4, r2
 800f200:	7899      	ldrb	r1, [r3, #2]
 800f202:	297d      	cmp	r1, #125	@ 0x7d
 800f204:	f000 8166 	beq.w	800f4d4 <uxr_read_framed_msg+0x4b8>
 800f208:	3201      	adds	r2, #1
 800f20a:	0850      	lsrs	r0, r2, #1
 800f20c:	fba6 3000 	umull	r3, r0, r6, r0
 800f210:	0880      	lsrs	r0, r0, #2
 800f212:	232a      	movs	r3, #42	@ 0x2a
 800f214:	fb03 2210 	mls	r2, r3, r0, r2
 800f218:	297e      	cmp	r1, #126	@ 0x7e
 800f21a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f21e:	f000 8187 	beq.w	800f530 <uxr_read_framed_msg+0x514>
 800f222:	7863      	ldrb	r3, [r4, #1]
 800f224:	428b      	cmp	r3, r1
 800f226:	bf0c      	ite	eq
 800f228:	2303      	moveq	r3, #3
 800f22a:	2300      	movne	r3, #0
 800f22c:	7023      	strb	r3, [r4, #0]
 800f22e:	e707      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f230:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f234:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f238:	2200      	movs	r2, #0
 800f23a:	4299      	cmp	r1, r3
 800f23c:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f240:	d063      	beq.n	800f30a <uxr_read_framed_msg+0x2ee>
 800f242:	18e2      	adds	r2, r4, r3
 800f244:	7892      	ldrb	r2, [r2, #2]
 800f246:	2a7d      	cmp	r2, #125	@ 0x7d
 800f248:	f000 8107 	beq.w	800f45a <uxr_read_framed_msg+0x43e>
 800f24c:	1c59      	adds	r1, r3, #1
 800f24e:	084b      	lsrs	r3, r1, #1
 800f250:	fba6 0303 	umull	r0, r3, r6, r3
 800f254:	089b      	lsrs	r3, r3, #2
 800f256:	202a      	movs	r0, #42	@ 0x2a
 800f258:	fb00 1313 	mls	r3, r0, r3, r1
 800f25c:	2a7e      	cmp	r2, #126	@ 0x7e
 800f25e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f262:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f266:	d050      	beq.n	800f30a <uxr_read_framed_msg+0x2ee>
 800f268:	2302      	movs	r3, #2
 800f26a:	7023      	strb	r3, [r4, #0]
 800f26c:	e6e8      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f26e:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 800f272:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f276:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f27a:	1c51      	adds	r1, r2, #1
 800f27c:	084b      	lsrs	r3, r1, #1
 800f27e:	fba6 5303 	umull	r5, r3, r6, r3
 800f282:	089b      	lsrs	r3, r3, #2
 800f284:	fb0c 1313 	mls	r3, ip, r3, r1
 800f288:	4596      	cmp	lr, r2
 800f28a:	eb04 0002 	add.w	r0, r4, r2
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	f43f af06 	beq.w	800f0a0 <uxr_read_framed_msg+0x84>
 800f294:	7883      	ldrb	r3, [r0, #2]
 800f296:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f29a:	2b7e      	cmp	r3, #126	@ 0x7e
 800f29c:	d1ed      	bne.n	800f27a <uxr_read_framed_msg+0x25e>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	7023      	strb	r3, [r4, #0]
 800f2a2:	e6cd      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f2a4:	f101 0b01 	add.w	fp, r1, #1
 800f2a8:	ea4f 025b 	mov.w	r2, fp, lsr #1
 800f2ac:	fba6 e202 	umull	lr, r2, r6, r2
 800f2b0:	3102      	adds	r1, #2
 800f2b2:	0892      	lsrs	r2, r2, #2
 800f2b4:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800f2b8:	fb0c b212 	mls	r2, ip, r2, fp
 800f2bc:	fba6 9e0e 	umull	r9, lr, r6, lr
 800f2c0:	eb04 0b02 	add.w	fp, r4, r2
 800f2c4:	b2d2      	uxtb	r2, r2
 800f2c6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800f2ca:	4290      	cmp	r0, r2
 800f2cc:	fb0c 111e 	mls	r1, ip, lr, r1
 800f2d0:	f43f af40 	beq.w	800f154 <uxr_read_framed_msg+0x138>
 800f2d4:	f89b e002 	ldrb.w	lr, [fp, #2]
 800f2d8:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 800f2dc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f2e0:	d036      	beq.n	800f350 <uxr_read_framed_msg+0x334>
 800f2e2:	f08e 0e20 	eor.w	lr, lr, #32
 800f2e6:	e711      	b.n	800f10c <uxr_read_framed_msg+0xf0>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f2ec:	4649      	mov	r1, r9
 800f2ee:	e9cd 2300 	strd	r2, r3, [sp]
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2f6:	4652      	mov	r2, sl
 800f2f8:	f7ff fe0e 	bl	800ef18 <uxr_framing_read_transport>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	f43f aecf 	beq.w	800f0a0 <uxr_read_framed_msg+0x84>
 800f302:	7823      	ldrb	r3, [r4, #0]
 800f304:	e69c      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f306:	2302      	movs	r3, #2
 800f308:	e7ef      	b.n	800f2ea <uxr_read_framed_msg+0x2ce>
 800f30a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f30c:	2304      	movs	r3, #4
 800f30e:	e9cd 2300 	strd	r2, r3, [sp]
 800f312:	4649      	mov	r1, r9
 800f314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f316:	4652      	mov	r2, sl
 800f318:	4620      	mov	r0, r4
 800f31a:	f7ff fdfd 	bl	800ef18 <uxr_framing_read_transport>
 800f31e:	2800      	cmp	r0, #0
 800f320:	d1ef      	bne.n	800f302 <uxr_read_framed_msg+0x2e6>
 800f322:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800f326:	387e      	subs	r0, #126	@ 0x7e
 800f328:	bf18      	it	ne
 800f32a:	2001      	movne	r0, #1
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d0e8      	beq.n	800f302 <uxr_read_framed_msg+0x2e6>
 800f330:	e6b6      	b.n	800f0a0 <uxr_read_framed_msg+0x84>
 800f332:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800f334:	2305      	movs	r3, #5
 800f336:	e9cd 5300 	strd	r5, r3, [sp]
 800f33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f33c:	f7ff fdec 	bl	800ef18 <uxr_framing_read_transport>
 800f340:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f344:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f348:	429a      	cmp	r2, r3
 800f34a:	f43f aea9 	beq.w	800f0a0 <uxr_read_framed_msg+0x84>
 800f34e:	e673      	b.n	800f038 <uxr_read_framed_msg+0x1c>
 800f350:	429d      	cmp	r5, r3
 800f352:	ee17 9a90 	vmov	r9, s15
 800f356:	f43f af02 	beq.w	800f15e <uxr_read_framed_msg+0x142>
 800f35a:	2301      	movs	r3, #1
 800f35c:	7023      	strb	r3, [r4, #0]
 800f35e:	e66f      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f360:	2303      	movs	r3, #3
 800f362:	e7c2      	b.n	800f2ea <uxr_read_framed_msg+0x2ce>
 800f364:	2305      	movs	r3, #5
 800f366:	7023      	strb	r3, [r4, #0]
 800f368:	e66a      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f36a:	bf00      	nop
 800f36c:	30c30c31 	.word	0x30c30c31
 800f370:	08016b8c 	.word	0x08016b8c
 800f374:	ee17 9a90 	vmov	r9, s15
 800f378:	f43f aef1 	beq.w	800f15e <uxr_read_framed_msg+0x142>
 800f37c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f380:	d08d      	beq.n	800f29e <uxr_read_framed_msg+0x282>
 800f382:	1aeb      	subs	r3, r5, r3
 800f384:	3302      	adds	r3, #2
 800f386:	9301      	str	r3, [sp, #4]
 800f388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	4652      	mov	r2, sl
 800f38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f390:	4649      	mov	r1, r9
 800f392:	4620      	mov	r0, r4
 800f394:	f7ff fdc0 	bl	800ef18 <uxr_framing_read_transport>
 800f398:	fab0 f080 	clz	r0, r0
 800f39c:	0940      	lsrs	r0, r0, #5
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d0af      	beq.n	800f302 <uxr_read_framed_msg+0x2e6>
 800f3a2:	e67d      	b.n	800f0a0 <uxr_read_framed_msg+0x84>
 800f3a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3a6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f3aa:	7013      	strb	r3, [r2, #0]
 800f3ac:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f3ae:	b003      	add	sp, #12
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	1c59      	adds	r1, r3, #1
 800f3b6:	084a      	lsrs	r2, r1, #1
 800f3b8:	fba6 5202 	umull	r5, r2, r6, r2
 800f3bc:	0892      	lsrs	r2, r2, #2
 800f3be:	252a      	movs	r5, #42	@ 0x2a
 800f3c0:	fb05 1212 	mls	r2, r5, r2, r1
 800f3c4:	b2d1      	uxtb	r1, r2
 800f3c6:	4288      	cmp	r0, r1
 800f3c8:	d08e      	beq.n	800f2e8 <uxr_read_framed_msg+0x2cc>
 800f3ca:	3302      	adds	r3, #2
 800f3cc:	4422      	add	r2, r4
 800f3ce:	0858      	lsrs	r0, r3, #1
 800f3d0:	fba6 1000 	umull	r1, r0, r6, r0
 800f3d4:	7891      	ldrb	r1, [r2, #2]
 800f3d6:	0882      	lsrs	r2, r0, #2
 800f3d8:	fb05 3312 	mls	r3, r5, r2, r3
 800f3dc:	297e      	cmp	r1, #126	@ 0x7e
 800f3de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f3e2:	f000 80a3 	beq.w	800f52c <uxr_read_framed_msg+0x510>
 800f3e6:	f081 0120 	eor.w	r1, r1, #32
 800f3ea:	e64e      	b.n	800f08a <uxr_read_framed_msg+0x6e>
 800f3ec:	1c59      	adds	r1, r3, #1
 800f3ee:	084a      	lsrs	r2, r1, #1
 800f3f0:	fba6 5202 	umull	r5, r2, r6, r2
 800f3f4:	0892      	lsrs	r2, r2, #2
 800f3f6:	252a      	movs	r5, #42	@ 0x2a
 800f3f8:	fb05 1212 	mls	r2, r5, r2, r1
 800f3fc:	b2d1      	uxtb	r1, r2
 800f3fe:	4288      	cmp	r0, r1
 800f400:	d081      	beq.n	800f306 <uxr_read_framed_msg+0x2ea>
 800f402:	3302      	adds	r3, #2
 800f404:	4422      	add	r2, r4
 800f406:	0858      	lsrs	r0, r3, #1
 800f408:	fba6 1000 	umull	r1, r0, r6, r0
 800f40c:	7891      	ldrb	r1, [r2, #2]
 800f40e:	0882      	lsrs	r2, r0, #2
 800f410:	fb05 3312 	mls	r3, r5, r2, r3
 800f414:	297e      	cmp	r1, #126	@ 0x7e
 800f416:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f41a:	d077      	beq.n	800f50c <uxr_read_framed_msg+0x4f0>
 800f41c:	f081 0120 	eor.w	r1, r1, #32
 800f420:	e65b      	b.n	800f0da <uxr_read_framed_msg+0xbe>
 800f422:	1c59      	adds	r1, r3, #1
 800f424:	084a      	lsrs	r2, r1, #1
 800f426:	fba6 5202 	umull	r5, r2, r6, r2
 800f42a:	0892      	lsrs	r2, r2, #2
 800f42c:	252a      	movs	r5, #42	@ 0x2a
 800f42e:	fb05 1212 	mls	r2, r5, r2, r1
 800f432:	b2d1      	uxtb	r1, r2
 800f434:	4288      	cmp	r0, r1
 800f436:	f43f af57 	beq.w	800f2e8 <uxr_read_framed_msg+0x2cc>
 800f43a:	3302      	adds	r3, #2
 800f43c:	4422      	add	r2, r4
 800f43e:	0858      	lsrs	r0, r3, #1
 800f440:	fba6 1000 	umull	r1, r0, r6, r0
 800f444:	7891      	ldrb	r1, [r2, #2]
 800f446:	0882      	lsrs	r2, r0, #2
 800f448:	fb05 3312 	mls	r3, r5, r2, r3
 800f44c:	297e      	cmp	r1, #126	@ 0x7e
 800f44e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f452:	d06b      	beq.n	800f52c <uxr_read_framed_msg+0x510>
 800f454:	f081 0120 	eor.w	r1, r1, #32
 800f458:	e69d      	b.n	800f196 <uxr_read_framed_msg+0x17a>
 800f45a:	1c5d      	adds	r5, r3, #1
 800f45c:	086a      	lsrs	r2, r5, #1
 800f45e:	fba6 0202 	umull	r0, r2, r6, r2
 800f462:	0892      	lsrs	r2, r2, #2
 800f464:	202a      	movs	r0, #42	@ 0x2a
 800f466:	fb00 5212 	mls	r2, r0, r2, r5
 800f46a:	b2d5      	uxtb	r5, r2
 800f46c:	42a9      	cmp	r1, r5
 800f46e:	f43f af4c 	beq.w	800f30a <uxr_read_framed_msg+0x2ee>
 800f472:	3302      	adds	r3, #2
 800f474:	4422      	add	r2, r4
 800f476:	0859      	lsrs	r1, r3, #1
 800f478:	fba6 5101 	umull	r5, r1, r6, r1
 800f47c:	7895      	ldrb	r5, [r2, #2]
 800f47e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 800f482:	088a      	lsrs	r2, r1, #2
 800f484:	fb00 3312 	mls	r3, r0, r2, r3
 800f488:	2d7e      	cmp	r5, #126	@ 0x7e
 800f48a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f48e:	f43f af3c 	beq.w	800f30a <uxr_read_framed_msg+0x2ee>
 800f492:	f085 0520 	eor.w	r5, r5, #32
 800f496:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 800f49a:	e6e5      	b.n	800f268 <uxr_read_framed_msg+0x24c>
 800f49c:	1c59      	adds	r1, r3, #1
 800f49e:	084a      	lsrs	r2, r1, #1
 800f4a0:	fba6 5202 	umull	r5, r2, r6, r2
 800f4a4:	0892      	lsrs	r2, r2, #2
 800f4a6:	252a      	movs	r5, #42	@ 0x2a
 800f4a8:	fb05 1212 	mls	r2, r5, r2, r1
 800f4ac:	b2d1      	uxtb	r1, r2
 800f4ae:	4288      	cmp	r0, r1
 800f4b0:	f43f af29 	beq.w	800f306 <uxr_read_framed_msg+0x2ea>
 800f4b4:	3302      	adds	r3, #2
 800f4b6:	4422      	add	r2, r4
 800f4b8:	0858      	lsrs	r0, r3, #1
 800f4ba:	fba6 1000 	umull	r1, r0, r6, r0
 800f4be:	7891      	ldrb	r1, [r2, #2]
 800f4c0:	0882      	lsrs	r2, r0, #2
 800f4c2:	fb05 3312 	mls	r3, r5, r2, r3
 800f4c6:	297e      	cmp	r1, #126	@ 0x7e
 800f4c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f4cc:	d01e      	beq.n	800f50c <uxr_read_framed_msg+0x4f0>
 800f4ce:	f081 0120 	eor.w	r1, r1, #32
 800f4d2:	e689      	b.n	800f1e8 <uxr_read_framed_msg+0x1cc>
 800f4d4:	1c51      	adds	r1, r2, #1
 800f4d6:	084b      	lsrs	r3, r1, #1
 800f4d8:	fba6 5303 	umull	r5, r3, r6, r3
 800f4dc:	089b      	lsrs	r3, r3, #2
 800f4de:	252a      	movs	r5, #42	@ 0x2a
 800f4e0:	fb05 1313 	mls	r3, r5, r3, r1
 800f4e4:	b2d9      	uxtb	r1, r3
 800f4e6:	4288      	cmp	r0, r1
 800f4e8:	f43f af3a 	beq.w	800f360 <uxr_read_framed_msg+0x344>
 800f4ec:	3202      	adds	r2, #2
 800f4ee:	4423      	add	r3, r4
 800f4f0:	0850      	lsrs	r0, r2, #1
 800f4f2:	789b      	ldrb	r3, [r3, #2]
 800f4f4:	fba6 1000 	umull	r1, r0, r6, r0
 800f4f8:	0880      	lsrs	r0, r0, #2
 800f4fa:	fb05 2210 	mls	r2, r5, r0, r2
 800f4fe:	2b7e      	cmp	r3, #126	@ 0x7e
 800f500:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f504:	d014      	beq.n	800f530 <uxr_read_framed_msg+0x514>
 800f506:	f083 0120 	eor.w	r1, r3, #32
 800f50a:	e68a      	b.n	800f222 <uxr_read_framed_msg+0x206>
 800f50c:	2302      	movs	r3, #2
 800f50e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f510:	4649      	mov	r1, r9
 800f512:	e9cd 2300 	strd	r2, r3, [sp]
 800f516:	4620      	mov	r0, r4
 800f518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f51a:	4652      	mov	r2, sl
 800f51c:	f7ff fcfc 	bl	800ef18 <uxr_framing_read_transport>
 800f520:	2800      	cmp	r0, #0
 800f522:	f47f aeee 	bne.w	800f302 <uxr_read_framed_msg+0x2e6>
 800f526:	2301      	movs	r3, #1
 800f528:	7023      	strb	r3, [r4, #0]
 800f52a:	e589      	b.n	800f040 <uxr_read_framed_msg+0x24>
 800f52c:	2301      	movs	r3, #1
 800f52e:	e7ee      	b.n	800f50e <uxr_read_framed_msg+0x4f2>
 800f530:	2303      	movs	r3, #3
 800f532:	e7ec      	b.n	800f50e <uxr_read_framed_msg+0x4f2>
 800f534:	ee17 9a90 	vmov	r9, s15
 800f538:	e6b1      	b.n	800f29e <uxr_read_framed_msg+0x282>
 800f53a:	bf00      	nop

0800f53c <uxr_stream_id>:
 800f53c:	b410      	push	{r4}
 800f53e:	2901      	cmp	r1, #1
 800f540:	b083      	sub	sp, #12
 800f542:	d01f      	beq.n	800f584 <uxr_stream_id+0x48>
 800f544:	2902      	cmp	r1, #2
 800f546:	f04f 0400 	mov.w	r4, #0
 800f54a:	d01e      	beq.n	800f58a <uxr_stream_id+0x4e>
 800f54c:	2300      	movs	r3, #0
 800f54e:	f364 0307 	bfi	r3, r4, #0, #8
 800f552:	f360 230f 	bfi	r3, r0, #8, #8
 800f556:	f361 4317 	bfi	r3, r1, #16, #8
 800f55a:	f362 631f 	bfi	r3, r2, #24, #8
 800f55e:	b2da      	uxtb	r2, r3
 800f560:	2000      	movs	r0, #0
 800f562:	f362 0007 	bfi	r0, r2, #0, #8
 800f566:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f56a:	f362 200f 	bfi	r0, r2, #8, #8
 800f56e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f572:	f362 4017 	bfi	r0, r2, #16, #8
 800f576:	0e1b      	lsrs	r3, r3, #24
 800f578:	f363 601f 	bfi	r0, r3, #24, #8
 800f57c:	b003      	add	sp, #12
 800f57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	1c44      	adds	r4, r0, #1
 800f586:	b2e4      	uxtb	r4, r4
 800f588:	e7e0      	b.n	800f54c <uxr_stream_id+0x10>
 800f58a:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 800f58e:	e7dd      	b.n	800f54c <uxr_stream_id+0x10>

0800f590 <uxr_stream_id_from_raw>:
 800f590:	b410      	push	{r4}
 800f592:	b083      	sub	sp, #12
 800f594:	b128      	cbz	r0, 800f5a2 <uxr_stream_id_from_raw+0x12>
 800f596:	0603      	lsls	r3, r0, #24
 800f598:	d421      	bmi.n	800f5de <uxr_stream_id_from_raw+0x4e>
 800f59a:	1e42      	subs	r2, r0, #1
 800f59c:	b2d2      	uxtb	r2, r2
 800f59e:	2401      	movs	r4, #1
 800f5a0:	e001      	b.n	800f5a6 <uxr_stream_id_from_raw+0x16>
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f360 0307 	bfi	r3, r0, #0, #8
 800f5ac:	f362 230f 	bfi	r3, r2, #8, #8
 800f5b0:	f364 4317 	bfi	r3, r4, #16, #8
 800f5b4:	f361 631f 	bfi	r3, r1, #24, #8
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	f362 0007 	bfi	r0, r2, #0, #8
 800f5c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f5c4:	f362 200f 	bfi	r0, r2, #8, #8
 800f5c8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f5cc:	f362 4017 	bfi	r0, r2, #16, #8
 800f5d0:	0e1b      	lsrs	r3, r3, #24
 800f5d2:	f363 601f 	bfi	r0, r3, #24, #8
 800f5d6:	b003      	add	sp, #12
 800f5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800f5e2:	2402      	movs	r4, #2
 800f5e4:	e7df      	b.n	800f5a6 <uxr_stream_id_from_raw+0x16>
 800f5e6:	bf00      	nop

0800f5e8 <uxr_init_stream_storage>:
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	7403      	strb	r3, [r0, #16]
 800f5ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800f5f0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800f5f4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop

0800f5fc <uxr_reset_stream_storage>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	7c03      	ldrb	r3, [r0, #16]
 800f600:	4604      	mov	r4, r0
 800f602:	b153      	cbz	r3, 800f61a <uxr_reset_stream_storage+0x1e>
 800f604:	4606      	mov	r6, r0
 800f606:	2500      	movs	r5, #0
 800f608:	4630      	mov	r0, r6
 800f60a:	f004 ffe7 	bl	80145dc <uxr_reset_output_best_effort_stream>
 800f60e:	7c23      	ldrb	r3, [r4, #16]
 800f610:	3501      	adds	r5, #1
 800f612:	42ab      	cmp	r3, r5
 800f614:	f106 0610 	add.w	r6, r6, #16
 800f618:	d8f6      	bhi.n	800f608 <uxr_reset_stream_storage+0xc>
 800f61a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f61e:	b163      	cbz	r3, 800f63a <uxr_reset_stream_storage+0x3e>
 800f620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f624:	2500      	movs	r5, #0
 800f626:	4630      	mov	r0, r6
 800f628:	f004 fde4 	bl	80141f4 <uxr_reset_input_best_effort_stream>
 800f62c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f630:	3501      	adds	r5, #1
 800f632:	42ab      	cmp	r3, r5
 800f634:	f106 0602 	add.w	r6, r6, #2
 800f638:	d8f5      	bhi.n	800f626 <uxr_reset_stream_storage+0x2a>
 800f63a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f63e:	b163      	cbz	r3, 800f65a <uxr_reset_stream_storage+0x5e>
 800f640:	f104 0618 	add.w	r6, r4, #24
 800f644:	2500      	movs	r5, #0
 800f646:	4630      	mov	r0, r6
 800f648:	f005 f868 	bl	801471c <uxr_reset_output_reliable_stream>
 800f64c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f650:	3501      	adds	r5, #1
 800f652:	42ab      	cmp	r3, r5
 800f654:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800f658:	d8f5      	bhi.n	800f646 <uxr_reset_stream_storage+0x4a>
 800f65a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f65e:	b163      	cbz	r3, 800f67a <uxr_reset_stream_storage+0x7e>
 800f660:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800f664:	2500      	movs	r5, #0
 800f666:	4630      	mov	r0, r6
 800f668:	f004 fe2c 	bl	80142c4 <uxr_reset_input_reliable_stream>
 800f66c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f670:	3501      	adds	r5, #1
 800f672:	42ab      	cmp	r3, r5
 800f674:	f106 0618 	add.w	r6, r6, #24
 800f678:	d8f5      	bhi.n	800f666 <uxr_reset_stream_storage+0x6a>
 800f67a:	bd70      	pop	{r4, r5, r6, pc}

0800f67c <uxr_add_output_best_effort_buffer>:
 800f67c:	b530      	push	{r4, r5, lr}
 800f67e:	7c04      	ldrb	r4, [r0, #16]
 800f680:	1c65      	adds	r5, r4, #1
 800f682:	b083      	sub	sp, #12
 800f684:	7405      	strb	r5, [r0, #16]
 800f686:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f68a:	f004 ff9b 	bl	80145c4 <uxr_init_output_best_effort_stream>
 800f68e:	2201      	movs	r2, #1
 800f690:	4620      	mov	r0, r4
 800f692:	4611      	mov	r1, r2
 800f694:	b003      	add	sp, #12
 800f696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f69a:	f7ff bf4f 	b.w	800f53c <uxr_stream_id>
 800f69e:	bf00      	nop

0800f6a0 <uxr_add_output_reliable_buffer>:
 800f6a0:	b570      	push	{r4, r5, r6, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 800f6a8:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800f6ac:	9600      	str	r6, [sp, #0]
 800f6ae:	2528      	movs	r5, #40	@ 0x28
 800f6b0:	1c66      	adds	r6, r4, #1
 800f6b2:	fb05 0504 	mla	r5, r5, r4, r0
 800f6b6:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 800f6ba:	f105 0018 	add.w	r0, r5, #24
 800f6be:	f004 fffb 	bl	80146b8 <uxr_init_output_reliable_stream>
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	2102      	movs	r1, #2
 800f6c8:	b004      	add	sp, #16
 800f6ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6ce:	f7ff bf35 	b.w	800f53c <uxr_stream_id>
 800f6d2:	bf00      	nop

0800f6d4 <uxr_add_input_best_effort_buffer>:
 800f6d4:	b510      	push	{r4, lr}
 800f6d6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800f6da:	1c62      	adds	r2, r4, #1
 800f6dc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800f6e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f6ea:	f004 fd7f 	bl	80141ec <uxr_init_input_best_effort_stream>
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	2101      	movs	r1, #1
 800f6f4:	b002      	add	sp, #8
 800f6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6fa:	f7ff bf1f 	b.w	800f53c <uxr_stream_id>
 800f6fe:	bf00      	nop

0800f700 <uxr_add_input_reliable_buffer>:
 800f700:	b570      	push	{r4, r5, r6, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800f708:	9e08      	ldr	r6, [sp, #32]
 800f70a:	9600      	str	r6, [sp, #0]
 800f70c:	2518      	movs	r5, #24
 800f70e:	1c66      	adds	r6, r4, #1
 800f710:	fb05 0504 	mla	r5, r5, r4, r0
 800f714:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 800f718:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f71c:	f004 fdae 	bl	801427c <uxr_init_input_reliable_stream>
 800f720:	4620      	mov	r0, r4
 800f722:	2200      	movs	r2, #0
 800f724:	2102      	movs	r1, #2
 800f726:	b004      	add	sp, #16
 800f728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f72c:	f7ff bf06 	b.w	800f53c <uxr_stream_id>

0800f730 <uxr_get_output_best_effort_stream>:
 800f730:	7c03      	ldrb	r3, [r0, #16]
 800f732:	428b      	cmp	r3, r1
 800f734:	bf8c      	ite	hi
 800f736:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f73a:	2000      	movls	r0, #0
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop

0800f740 <uxr_get_output_reliable_stream>:
 800f740:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f744:	428b      	cmp	r3, r1
 800f746:	bf83      	ittte	hi
 800f748:	2328      	movhi	r3, #40	@ 0x28
 800f74a:	fb03 0101 	mlahi	r1, r3, r1, r0
 800f74e:	f101 0018 	addhi.w	r0, r1, #24
 800f752:	2000      	movls	r0, #0
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <uxr_get_input_best_effort_stream>:
 800f758:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f75c:	428b      	cmp	r3, r1
 800f75e:	bf86      	itte	hi
 800f760:	3121      	addhi	r1, #33	@ 0x21
 800f762:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f766:	2000      	movls	r0, #0
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop

0800f76c <uxr_get_input_reliable_stream>:
 800f76c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800f770:	428b      	cmp	r3, r1
 800f772:	bf83      	ittte	hi
 800f774:	2318      	movhi	r3, #24
 800f776:	fb03 0101 	mlahi	r1, r3, r1, r0
 800f77a:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 800f77e:	2000      	movls	r0, #0
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop

0800f784 <uxr_output_streams_confirmed>:
 800f784:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f788:	b183      	cbz	r3, 800f7ac <uxr_output_streams_confirmed+0x28>
 800f78a:	b570      	push	{r4, r5, r6, lr}
 800f78c:	4606      	mov	r6, r0
 800f78e:	f100 0518 	add.w	r5, r0, #24
 800f792:	2400      	movs	r4, #0
 800f794:	e001      	b.n	800f79a <uxr_output_streams_confirmed+0x16>
 800f796:	3528      	adds	r5, #40	@ 0x28
 800f798:	b138      	cbz	r0, 800f7aa <uxr_output_streams_confirmed+0x26>
 800f79a:	4628      	mov	r0, r5
 800f79c:	f005 fa2e 	bl	8014bfc <uxr_is_output_up_to_date>
 800f7a0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f7a4:	3401      	adds	r4, #1
 800f7a6:	42a3      	cmp	r3, r4
 800f7a8:	d8f5      	bhi.n	800f796 <uxr_output_streams_confirmed+0x12>
 800f7aa:	bd70      	pop	{r4, r5, r6, pc}
 800f7ac:	2001      	movs	r0, #1
 800f7ae:	4770      	bx	lr

0800f7b0 <uxr_buffer_submessage_header>:
 800f7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	4615      	mov	r5, r2
 800f7ba:	461f      	mov	r7, r3
 800f7bc:	f7fa fc4e 	bl	800a05c <ucdr_align_to>
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	ea47 0203 	orr.w	r2, r7, r3
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	7523      	strb	r3, [r4, #20]
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	462b      	mov	r3, r5
 800f7ce:	f000 fa2b 	bl	800fc28 <uxr_serialize_submessage_header>
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7fa fc58 	bl	800a088 <ucdr_buffer_remaining>
 800f7d8:	42a8      	cmp	r0, r5
 800f7da:	bf34      	ite	cc
 800f7dc:	2000      	movcc	r0, #0
 800f7de:	2001      	movcs	r0, #1
 800f7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7e2:	bf00      	nop

0800f7e4 <uxr_read_submessage_header>:
 800f7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	2104      	movs	r1, #4
 800f7ee:	4616      	mov	r6, r2
 800f7f0:	4698      	mov	r8, r3
 800f7f2:	f7fa fc33 	bl	800a05c <ucdr_align_to>
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f7fa fc46 	bl	800a088 <ucdr_buffer_remaining>
 800f7fc:	2803      	cmp	r0, #3
 800f7fe:	bf8c      	ite	hi
 800f800:	2701      	movhi	r7, #1
 800f802:	2700      	movls	r7, #0
 800f804:	d802      	bhi.n	800f80c <uxr_read_submessage_header+0x28>
 800f806:	4638      	mov	r0, r7
 800f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80c:	4633      	mov	r3, r6
 800f80e:	4642      	mov	r2, r8
 800f810:	4620      	mov	r0, r4
 800f812:	4629      	mov	r1, r5
 800f814:	f000 fa1c 	bl	800fc50 <uxr_deserialize_submessage_header>
 800f818:	f898 3000 	ldrb.w	r3, [r8]
 800f81c:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	f888 2000 	strb.w	r2, [r8]
 800f828:	7523      	strb	r3, [r4, #20]
 800f82a:	4638      	mov	r0, r7
 800f82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f830 <uxr_submessage_padding>:
 800f830:	f010 0003 	ands.w	r0, r0, #3
 800f834:	bf18      	it	ne
 800f836:	f1c0 0004 	rsbne	r0, r0, #4
 800f83a:	4770      	bx	lr

0800f83c <uxr_millis>:
 800f83c:	b510      	push	{r4, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	4669      	mov	r1, sp
 800f842:	2001      	movs	r0, #1
 800f844:	f7f1 fea8 	bl	8001598 <clock_gettime>
 800f848:	e9dd 2400 	ldrd	r2, r4, [sp]
 800f84c:	4907      	ldr	r1, [pc, #28]	@ (800f86c <uxr_millis+0x30>)
 800f84e:	9802      	ldr	r0, [sp, #8]
 800f850:	fba2 2301 	umull	r2, r3, r2, r1
 800f854:	fb01 3304 	mla	r3, r1, r4, r3
 800f858:	4604      	mov	r4, r0
 800f85a:	1810      	adds	r0, r2, r0
 800f85c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800f860:	4a03      	ldr	r2, [pc, #12]	@ (800f870 <uxr_millis+0x34>)
 800f862:	2300      	movs	r3, #0
 800f864:	f7f0 fd44 	bl	80002f0 <__aeabi_ldivmod>
 800f868:	b004      	add	sp, #16
 800f86a:	bd10      	pop	{r4, pc}
 800f86c:	3b9aca00 	.word	0x3b9aca00
 800f870:	000f4240 	.word	0x000f4240

0800f874 <uxr_nanos>:
 800f874:	b510      	push	{r4, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	4669      	mov	r1, sp
 800f87a:	2001      	movs	r0, #1
 800f87c:	f7f1 fe8c 	bl	8001598 <clock_gettime>
 800f880:	e9dd 2400 	ldrd	r2, r4, [sp]
 800f884:	4905      	ldr	r1, [pc, #20]	@ (800f89c <uxr_nanos+0x28>)
 800f886:	9802      	ldr	r0, [sp, #8]
 800f888:	fba2 2301 	umull	r2, r3, r2, r1
 800f88c:	fb01 3304 	mla	r3, r1, r4, r3
 800f890:	4604      	mov	r4, r0
 800f892:	1810      	adds	r0, r2, r0
 800f894:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800f898:	b004      	add	sp, #16
 800f89a:	bd10      	pop	{r4, pc}
 800f89c:	3b9aca00 	.word	0x3b9aca00

0800f8a0 <on_full_output_buffer_fragmented>:
 800f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	460c      	mov	r4, r1
 800f8a6:	b08a      	sub	sp, #40	@ 0x28
 800f8a8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	f104 0008 	add.w	r0, r4, #8
 800f8b2:	f7ff ff45 	bl	800f740 <uxr_get_output_reliable_stream>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	f005 f9aa 	bl	8014c10 <get_available_free_slots>
 800f8bc:	b968      	cbnz	r0, 800f8da <on_full_output_buffer_fragmented+0x3a>
 800f8be:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4798      	blx	r3
 800f8c6:	b918      	cbnz	r0, 800f8d0 <on_full_output_buffer_fragmented+0x30>
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	b00a      	add	sp, #40	@ 0x28
 800f8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f005 f99d 	bl	8014c10 <get_available_free_slots>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d0f6      	beq.n	800f8c8 <on_full_output_buffer_fragmented+0x28>
 800f8da:	8928      	ldrh	r0, [r5, #8]
 800f8dc:	89eb      	ldrh	r3, [r5, #14]
 800f8de:	7b2a      	ldrb	r2, [r5, #12]
 800f8e0:	fbb3 f1f0 	udiv	r1, r3, r0
 800f8e4:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 800f8e8:	fb00 3111 	mls	r1, r0, r1, r3
 800f8ec:	b28b      	uxth	r3, r1
 800f8ee:	32fc      	adds	r2, #252	@ 0xfc
 800f8f0:	6869      	ldr	r1, [r5, #4]
 800f8f2:	fbb1 f1f0 	udiv	r1, r1, r0
 800f8f6:	1f0f      	subs	r7, r1, #4
 800f8f8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 800f8fc:	fb01 f103 	mul.w	r1, r1, r3
 800f900:	443a      	add	r2, r7
 800f902:	682b      	ldr	r3, [r5, #0]
 800f904:	fa1f f882 	uxth.w	r8, r2
 800f908:	3104      	adds	r1, #4
 800f90a:	4419      	add	r1, r3
 800f90c:	eba0 0008 	sub.w	r0, r0, r8
 800f910:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800f914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	463a      	mov	r2, r7
 800f91c:	2300      	movs	r3, #0
 800f91e:	a802      	add	r0, sp, #8
 800f920:	f7fa fb70 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800f924:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f928:	f102 0308 	add.w	r3, r2, #8
 800f92c:	42bb      	cmp	r3, r7
 800f92e:	d927      	bls.n	800f980 <on_full_output_buffer_fragmented+0xe0>
 800f930:	4642      	mov	r2, r8
 800f932:	2300      	movs	r3, #0
 800f934:	210d      	movs	r1, #13
 800f936:	a802      	add	r0, sp, #8
 800f938:	f7ff ff3a 	bl	800f7b0 <uxr_buffer_submessage_header>
 800f93c:	8928      	ldrh	r0, [r5, #8]
 800f93e:	89eb      	ldrh	r3, [r5, #14]
 800f940:	fbb3 f1f0 	udiv	r1, r3, r0
 800f944:	fb00 3111 	mls	r1, r0, r1, r3
 800f948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f94c:	b289      	uxth	r1, r1
 800f94e:	fbb3 f3f0 	udiv	r3, r3, r0
 800f952:	fb03 f301 	mul.w	r3, r3, r1
 800f956:	50d7      	str	r7, [r2, r3]
 800f958:	89e8      	ldrh	r0, [r5, #14]
 800f95a:	2101      	movs	r1, #1
 800f95c:	f005 f978 	bl	8014c50 <uxr_seq_num_add>
 800f960:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f964:	81e8      	strh	r0, [r5, #14]
 800f966:	1a52      	subs	r2, r2, r1
 800f968:	4630      	mov	r0, r6
 800f96a:	f7fa fb5d 	bl	800a028 <ucdr_init_buffer>
 800f96e:	4630      	mov	r0, r6
 800f970:	490f      	ldr	r1, [pc, #60]	@ (800f9b0 <on_full_output_buffer_fragmented+0x110>)
 800f972:	4622      	mov	r2, r4
 800f974:	f7fa fb2e 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 800f978:	2000      	movs	r0, #0
 800f97a:	b00a      	add	sp, #40	@ 0x28
 800f97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f980:	b292      	uxth	r2, r2
 800f982:	2302      	movs	r3, #2
 800f984:	210d      	movs	r1, #13
 800f986:	a802      	add	r0, sp, #8
 800f988:	f7ff ff12 	bl	800f7b0 <uxr_buffer_submessage_header>
 800f98c:	8928      	ldrh	r0, [r5, #8]
 800f98e:	89eb      	ldrh	r3, [r5, #14]
 800f990:	fbb3 f2f0 	udiv	r2, r3, r0
 800f994:	fb00 3212 	mls	r2, r0, r2, r3
 800f998:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 800f99c:	686b      	ldr	r3, [r5, #4]
 800f99e:	fbb3 f3f0 	udiv	r3, r3, r0
 800f9a2:	b292      	uxth	r2, r2
 800f9a4:	6828      	ldr	r0, [r5, #0]
 800f9a6:	fb03 f302 	mul.w	r3, r3, r2
 800f9aa:	3108      	adds	r1, #8
 800f9ac:	50c1      	str	r1, [r0, r3]
 800f9ae:	e7d3      	b.n	800f958 <on_full_output_buffer_fragmented+0xb8>
 800f9b0:	0800f8a1 	.word	0x0800f8a1

0800f9b4 <uxr_prepare_output_stream>:
 800f9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9b6:	b087      	sub	sp, #28
 800f9b8:	2407      	movs	r4, #7
 800f9ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f9bc:	9202      	str	r2, [sp, #8]
 800f9be:	2500      	movs	r5, #0
 800f9c0:	1d32      	adds	r2, r6, #4
 800f9c2:	e9cd 4500 	strd	r4, r5, [sp]
 800f9c6:	9103      	str	r1, [sp, #12]
 800f9c8:	461c      	mov	r4, r3
 800f9ca:	4606      	mov	r6, r0
 800f9cc:	f7fe ffce 	bl	800e96c <uxr_prepare_stream_to_write_submessage>
 800f9d0:	f080 0201 	eor.w	r2, r0, #1
 800f9d4:	b2d2      	uxtb	r2, r2
 800f9d6:	75a2      	strb	r2, [r4, #22]
 800f9d8:	b112      	cbz	r2, 800f9e0 <uxr_prepare_output_stream+0x2c>
 800f9da:	4628      	mov	r0, r5
 800f9dc:	b007      	add	sp, #28
 800f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e0:	aa05      	add	r2, sp, #20
 800f9e2:	9902      	ldr	r1, [sp, #8]
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	f7ff f8fb 	bl	800ebe0 <uxr_init_base_object_request>
 800f9ea:	a905      	add	r1, sp, #20
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f001 f872 	bl	8010ad8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f9f4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f9f8:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800f9fc:	1a52      	subs	r2, r2, r1
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f7fa fb12 	bl	800a028 <ucdr_init_buffer>
 800fa04:	4620      	mov	r0, r4
 800fa06:	463a      	mov	r2, r7
 800fa08:	4631      	mov	r1, r6
 800fa0a:	f7fa fae3 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 800fa0e:	4628      	mov	r0, r5
 800fa10:	b007      	add	sp, #28
 800fa12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa14 <uxr_prepare_output_stream_fragmented>:
 800fa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa18:	b093      	sub	sp, #76	@ 0x4c
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	9107      	str	r1, [sp, #28]
 800fa1e:	3008      	adds	r0, #8
 800fa20:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800fa24:	9303      	str	r3, [sp, #12]
 800fa26:	9206      	str	r2, [sp, #24]
 800fa28:	f7ff fe8a 	bl	800f740 <uxr_get_output_reliable_stream>
 800fa2c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	f000 8094 	beq.w	800fb5e <uxr_prepare_output_stream_fragmented+0x14a>
 800fa36:	4604      	mov	r4, r0
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	f000 8090 	beq.w	800fb5e <uxr_prepare_output_stream_fragmented+0x14a>
 800fa3e:	f005 f8e7 	bl	8014c10 <get_available_free_slots>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	f000 8086 	beq.w	800fb54 <uxr_prepare_output_stream_fragmented+0x140>
 800fa48:	8922      	ldrh	r2, [r4, #8]
 800fa4a:	89e7      	ldrh	r7, [r4, #14]
 800fa4c:	fbb7 f8f2 	udiv	r8, r7, r2
 800fa50:	e9d4 3100 	ldrd	r3, r1, [r4]
 800fa54:	fb02 7818 	mls	r8, r2, r8, r7
 800fa58:	fa1f f888 	uxth.w	r8, r8
 800fa5c:	fbb1 f2f2 	udiv	r2, r1, r2
 800fa60:	fb02 f808 	mul.w	r8, r2, r8
 800fa64:	f108 0804 	add.w	r8, r8, #4
 800fa68:	4498      	add	r8, r3
 800fa6a:	7b23      	ldrb	r3, [r4, #12]
 800fa6c:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800fa70:	9204      	str	r2, [sp, #16]
 800fa72:	4553      	cmp	r3, sl
 800fa74:	f1a2 0b04 	sub.w	fp, r2, #4
 800fa78:	d37d      	bcc.n	800fb76 <uxr_prepare_output_stream_fragmented+0x162>
 800fa7a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fa7c:	f8cd a000 	str.w	sl, [sp]
 800fa80:	f1ab 0904 	sub.w	r9, fp, #4
 800fa84:	eba9 0903 	sub.w	r9, r9, r3
 800fa88:	3608      	adds	r6, #8
 800fa8a:	a80a      	add	r0, sp, #40	@ 0x28
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	465a      	mov	r2, fp
 800fa90:	4641      	mov	r1, r8
 800fa92:	fa1f f989 	uxth.w	r9, r9
 800fa96:	9605      	str	r6, [sp, #20]
 800fa98:	f7fa fab4 	bl	800a004 <ucdr_init_buffer_origin_offset>
 800fa9c:	455e      	cmp	r6, fp
 800fa9e:	bf34      	ite	cc
 800faa0:	2302      	movcc	r3, #2
 800faa2:	2300      	movcs	r3, #0
 800faa4:	464a      	mov	r2, r9
 800faa6:	210d      	movs	r1, #13
 800faa8:	a80a      	add	r0, sp, #40	@ 0x28
 800faaa:	f7ff fe81 	bl	800f7b0 <uxr_buffer_submessage_header>
 800faae:	8920      	ldrh	r0, [r4, #8]
 800fab0:	fbb7 f3f0 	udiv	r3, r7, r0
 800fab4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800fab8:	fb00 7313 	mls	r3, r0, r3, r7
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	fbb1 f1f0 	udiv	r1, r1, r0
 800fac2:	fb03 f301 	mul.w	r3, r3, r1
 800fac6:	4638      	mov	r0, r7
 800fac8:	f842 b003 	str.w	fp, [r2, r3]
 800facc:	2101      	movs	r1, #1
 800face:	f005 f8bf 	bl	8014c50 <uxr_seq_num_add>
 800fad2:	9b04      	ldr	r3, [sp, #16]
 800fad4:	9e03      	ldr	r6, [sp, #12]
 800fad6:	f1a3 0208 	sub.w	r2, r3, #8
 800fada:	f10a 0104 	add.w	r1, sl, #4
 800fade:	4607      	mov	r7, r0
 800fae0:	eba2 020a 	sub.w	r2, r2, sl
 800fae4:	4441      	add	r1, r8
 800fae6:	4630      	mov	r0, r6
 800fae8:	f7fa fa9e 	bl	800a028 <ucdr_init_buffer>
 800faec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800faee:	81e7      	strh	r7, [r4, #14]
 800faf0:	1d1a      	adds	r2, r3, #4
 800faf2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800faf6:	bf28      	it	cs
 800faf8:	2200      	movcs	r2, #0
 800fafa:	b292      	uxth	r2, r2
 800fafc:	2300      	movs	r3, #0
 800fafe:	2107      	movs	r1, #7
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7ff fe55 	bl	800f7b0 <uxr_buffer_submessage_header>
 800fb06:	9906      	ldr	r1, [sp, #24]
 800fb08:	aa09      	add	r2, sp, #36	@ 0x24
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f7ff f868 	bl	800ebe0 <uxr_init_base_object_request>
 800fb10:	4604      	mov	r4, r0
 800fb12:	b328      	cbz	r0, 800fb60 <uxr_prepare_output_stream_fragmented+0x14c>
 800fb14:	9e03      	ldr	r6, [sp, #12]
 800fb16:	a909      	add	r1, sp, #36	@ 0x24
 800fb18:	4630      	mov	r0, r6
 800fb1a:	f000 ffdd 	bl	8010ad8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fb1e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800fb22:	4630      	mov	r0, r6
 800fb24:	1a52      	subs	r2, r2, r1
 800fb26:	f7fa fa7f 	bl	800a028 <ucdr_init_buffer>
 800fb2a:	9a05      	ldr	r2, [sp, #20]
 800fb2c:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 800fb30:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fb32:	9b07      	ldr	r3, [sp, #28]
 800fb34:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 800fb38:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800fb3a:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 800fb3e:	4630      	mov	r0, r6
 800fb40:	4919      	ldr	r1, [pc, #100]	@ (800fba8 <uxr_prepare_output_stream_fragmented+0x194>)
 800fb42:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800fb46:	462a      	mov	r2, r5
 800fb48:	f7fa fa44 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	b013      	add	sp, #76	@ 0x4c
 800fb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb54:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800fb56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb58:	4628      	mov	r0, r5
 800fb5a:	4798      	blx	r3
 800fb5c:	b920      	cbnz	r0, 800fb68 <uxr_prepare_output_stream_fragmented+0x154>
 800fb5e:	2400      	movs	r4, #0
 800fb60:	4620      	mov	r0, r4
 800fb62:	b013      	add	sp, #76	@ 0x4c
 800fb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f005 f851 	bl	8014c10 <get_available_free_slots>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	f47f af6a 	bne.w	800fa48 <uxr_prepare_output_stream_fragmented+0x34>
 800fb74:	e7f3      	b.n	800fb5e <uxr_prepare_output_stream_fragmented+0x14a>
 800fb76:	4638      	mov	r0, r7
 800fb78:	2101      	movs	r1, #1
 800fb7a:	f005 f869 	bl	8014c50 <uxr_seq_num_add>
 800fb7e:	8922      	ldrh	r2, [r4, #8]
 800fb80:	fbb0 f8f2 	udiv	r8, r0, r2
 800fb84:	fb02 0818 	mls	r8, r2, r8, r0
 800fb88:	fa1f f888 	uxth.w	r8, r8
 800fb8c:	6863      	ldr	r3, [r4, #4]
 800fb8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb92:	6822      	ldr	r2, [r4, #0]
 800fb94:	fb08 f803 	mul.w	r8, r8, r3
 800fb98:	f108 0804 	add.w	r8, r8, #4
 800fb9c:	4490      	add	r8, r2
 800fb9e:	7b23      	ldrb	r3, [r4, #12]
 800fba0:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800fba4:	4607      	mov	r7, r0
 800fba6:	e768      	b.n	800fa7a <uxr_prepare_output_stream_fragmented+0x66>
 800fba8:	0800f8a1 	.word	0x0800f8a1

0800fbac <uxr_serialize_message_header>:
 800fbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	4616      	mov	r6, r2
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	460d      	mov	r5, r1
 800fbb8:	9f08      	ldr	r7, [sp, #32]
 800fbba:	f7f8 ff55 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f7f8 ff51 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fbc6:	9a01      	ldr	r2, [sp, #4]
 800fbc8:	4620      	mov	r0, r4
 800fbca:	2101      	movs	r1, #1
 800fbcc:	f7f8 fff8 	bl	8008bc0 <ucdr_serialize_endian_uint16_t>
 800fbd0:	062b      	lsls	r3, r5, #24
 800fbd2:	d501      	bpl.n	800fbd8 <uxr_serialize_message_header+0x2c>
 800fbd4:	b003      	add	sp, #12
 800fbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd8:	4639      	mov	r1, r7
 800fbda:	4620      	mov	r0, r4
 800fbdc:	2204      	movs	r2, #4
 800fbde:	b003      	add	sp, #12
 800fbe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fbe4:	f004 b976 	b.w	8013ed4 <ucdr_serialize_array_uint8_t>

0800fbe8 <uxr_deserialize_message_header>:
 800fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbea:	b083      	sub	sp, #12
 800fbec:	4616      	mov	r6, r2
 800fbee:	4604      	mov	r4, r0
 800fbf0:	9301      	str	r3, [sp, #4]
 800fbf2:	460d      	mov	r5, r1
 800fbf4:	9f08      	ldr	r7, [sp, #32]
 800fbf6:	f7f8 ff4d 	bl	8008a94 <ucdr_deserialize_uint8_t>
 800fbfa:	4631      	mov	r1, r6
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7f8 ff49 	bl	8008a94 <ucdr_deserialize_uint8_t>
 800fc02:	9a01      	ldr	r2, [sp, #4]
 800fc04:	4620      	mov	r0, r4
 800fc06:	2101      	movs	r1, #1
 800fc08:	f7f9 f8ce 	bl	8008da8 <ucdr_deserialize_endian_uint16_t>
 800fc0c:	f995 3000 	ldrsb.w	r3, [r5]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	da01      	bge.n	800fc18 <uxr_deserialize_message_header+0x30>
 800fc14:	b003      	add	sp, #12
 800fc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc18:	4639      	mov	r1, r7
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	2204      	movs	r2, #4
 800fc1e:	b003      	add	sp, #12
 800fc20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fc24:	f004 b9ba 	b.w	8013f9c <ucdr_deserialize_array_uint8_t>

0800fc28 <uxr_serialize_submessage_header>:
 800fc28:	b530      	push	{r4, r5, lr}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	4615      	mov	r5, r2
 800fc2e:	4604      	mov	r4, r0
 800fc30:	9301      	str	r3, [sp, #4]
 800fc32:	f7f8 ff19 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fc36:	4629      	mov	r1, r5
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f7f8 ff15 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fc3e:	9a01      	ldr	r2, [sp, #4]
 800fc40:	4620      	mov	r0, r4
 800fc42:	2101      	movs	r1, #1
 800fc44:	b003      	add	sp, #12
 800fc46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc4a:	f7f8 bfb9 	b.w	8008bc0 <ucdr_serialize_endian_uint16_t>
 800fc4e:	bf00      	nop

0800fc50 <uxr_deserialize_submessage_header>:
 800fc50:	b530      	push	{r4, r5, lr}
 800fc52:	b083      	sub	sp, #12
 800fc54:	4615      	mov	r5, r2
 800fc56:	4604      	mov	r4, r0
 800fc58:	9301      	str	r3, [sp, #4]
 800fc5a:	f7f8 ff1b 	bl	8008a94 <ucdr_deserialize_uint8_t>
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4620      	mov	r0, r4
 800fc62:	f7f8 ff17 	bl	8008a94 <ucdr_deserialize_uint8_t>
 800fc66:	9a01      	ldr	r2, [sp, #4]
 800fc68:	4620      	mov	r0, r4
 800fc6a:	2101      	movs	r1, #1
 800fc6c:	b003      	add	sp, #12
 800fc6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc72:	f7f9 b899 	b.w	8008da8 <ucdr_deserialize_endian_uint16_t>
 800fc76:	bf00      	nop

0800fc78 <uxr_serialize_CLIENT_Representation>:
 800fc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc7c:	2204      	movs	r2, #4
 800fc7e:	460c      	mov	r4, r1
 800fc80:	4605      	mov	r5, r0
 800fc82:	f004 f927 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fc86:	1d21      	adds	r1, r4, #4
 800fc88:	4607      	mov	r7, r0
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	f004 f921 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fc92:	1da1      	adds	r1, r4, #6
 800fc94:	4007      	ands	r7, r0
 800fc96:	2202      	movs	r2, #2
 800fc98:	4628      	mov	r0, r5
 800fc9a:	f004 f91b 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fc9e:	fa5f f887 	uxtb.w	r8, r7
 800fca2:	2204      	movs	r2, #4
 800fca4:	4607      	mov	r7, r0
 800fca6:	f104 0108 	add.w	r1, r4, #8
 800fcaa:	4628      	mov	r0, r5
 800fcac:	f004 f912 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fcb0:	ea08 0707 	and.w	r7, r8, r7
 800fcb4:	7b21      	ldrb	r1, [r4, #12]
 800fcb6:	4680      	mov	r8, r0
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f7f8 fed5 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fcbe:	ea08 0807 	and.w	r8, r8, r7
 800fcc2:	7b61      	ldrb	r1, [r4, #13]
 800fcc4:	4607      	mov	r7, r0
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f7f8 fe9e 	bl	8008a08 <ucdr_serialize_bool>
 800fccc:	7b63      	ldrb	r3, [r4, #13]
 800fcce:	ea08 0707 	and.w	r7, r8, r7
 800fcd2:	ea07 0600 	and.w	r6, r7, r0
 800fcd6:	b933      	cbnz	r3, 800fce6 <uxr_serialize_CLIENT_Representation+0x6e>
 800fcd8:	8ba1      	ldrh	r1, [r4, #28]
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f7f8 fef0 	bl	8008ac0 <ucdr_serialize_uint16_t>
 800fce0:	4030      	ands	r0, r6
 800fce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fce6:	6921      	ldr	r1, [r4, #16]
 800fce8:	4628      	mov	r0, r5
 800fcea:	f7f9 f8d3 	bl	8008e94 <ucdr_serialize_uint32_t>
 800fcee:	6923      	ldr	r3, [r4, #16]
 800fcf0:	b1cb      	cbz	r3, 800fd26 <uxr_serialize_CLIENT_Representation+0xae>
 800fcf2:	b1d0      	cbz	r0, 800fd2a <uxr_serialize_CLIENT_Representation+0xb2>
 800fcf4:	46a0      	mov	r8, r4
 800fcf6:	f04f 0900 	mov.w	r9, #0
 800fcfa:	e002      	b.n	800fd02 <uxr_serialize_CLIENT_Representation+0x8a>
 800fcfc:	f108 0808 	add.w	r8, r8, #8
 800fd00:	b198      	cbz	r0, 800fd2a <uxr_serialize_CLIENT_Representation+0xb2>
 800fd02:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fd06:	4628      	mov	r0, r5
 800fd08:	f004 fa58 	bl	80141bc <ucdr_serialize_string>
 800fd0c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800fd10:	4607      	mov	r7, r0
 800fd12:	4628      	mov	r0, r5
 800fd14:	f004 fa52 	bl	80141bc <ucdr_serialize_string>
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	f109 0901 	add.w	r9, r9, #1
 800fd1e:	4038      	ands	r0, r7
 800fd20:	4599      	cmp	r9, r3
 800fd22:	b2c0      	uxtb	r0, r0
 800fd24:	d3ea      	bcc.n	800fcfc <uxr_serialize_CLIENT_Representation+0x84>
 800fd26:	4006      	ands	r6, r0
 800fd28:	e7d6      	b.n	800fcd8 <uxr_serialize_CLIENT_Representation+0x60>
 800fd2a:	2600      	movs	r6, #0
 800fd2c:	e7d4      	b.n	800fcd8 <uxr_serialize_CLIENT_Representation+0x60>
 800fd2e:	bf00      	nop

0800fd30 <uxr_deserialize_CLIENT_Representation>:
 800fd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd34:	2204      	movs	r2, #4
 800fd36:	460c      	mov	r4, r1
 800fd38:	4605      	mov	r5, r0
 800fd3a:	f004 f92f 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 800fd3e:	1d21      	adds	r1, r4, #4
 800fd40:	4607      	mov	r7, r0
 800fd42:	2202      	movs	r2, #2
 800fd44:	4628      	mov	r0, r5
 800fd46:	f004 f929 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 800fd4a:	1da1      	adds	r1, r4, #6
 800fd4c:	4007      	ands	r7, r0
 800fd4e:	2202      	movs	r2, #2
 800fd50:	4628      	mov	r0, r5
 800fd52:	f004 f923 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 800fd56:	fa5f f887 	uxtb.w	r8, r7
 800fd5a:	2204      	movs	r2, #4
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	f104 0108 	add.w	r1, r4, #8
 800fd62:	4628      	mov	r0, r5
 800fd64:	f004 f91a 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 800fd68:	ea08 0707 	and.w	r7, r8, r7
 800fd6c:	f104 010c 	add.w	r1, r4, #12
 800fd70:	4680      	mov	r8, r0
 800fd72:	4628      	mov	r0, r5
 800fd74:	f7f8 fe8e 	bl	8008a94 <ucdr_deserialize_uint8_t>
 800fd78:	ea08 0807 	and.w	r8, r8, r7
 800fd7c:	f104 010d 	add.w	r1, r4, #13
 800fd80:	4607      	mov	r7, r0
 800fd82:	4628      	mov	r0, r5
 800fd84:	f7f8 fe56 	bl	8008a34 <ucdr_deserialize_bool>
 800fd88:	7b63      	ldrb	r3, [r4, #13]
 800fd8a:	ea08 0707 	and.w	r7, r8, r7
 800fd8e:	ea07 0600 	and.w	r6, r7, r0
 800fd92:	b93b      	cbnz	r3, 800fda4 <uxr_deserialize_CLIENT_Representation+0x74>
 800fd94:	f104 011c 	add.w	r1, r4, #28
 800fd98:	4628      	mov	r0, r5
 800fd9a:	f7f8 ff91 	bl	8008cc0 <ucdr_deserialize_uint16_t>
 800fd9e:	4030      	ands	r0, r6
 800fda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fda4:	f104 0110 	add.w	r1, r4, #16
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f7f9 f9a3 	bl	80090f4 <ucdr_deserialize_uint32_t>
 800fdae:	6923      	ldr	r3, [r4, #16]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d903      	bls.n	800fdbc <uxr_deserialize_CLIENT_Representation+0x8c>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	75ab      	strb	r3, [r5, #22]
 800fdb8:	2600      	movs	r6, #0
 800fdba:	e7eb      	b.n	800fd94 <uxr_deserialize_CLIENT_Representation+0x64>
 800fdbc:	b1fb      	cbz	r3, 800fdfe <uxr_deserialize_CLIENT_Representation+0xce>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d0fa      	beq.n	800fdb8 <uxr_deserialize_CLIENT_Representation+0x88>
 800fdc2:	46a0      	mov	r8, r4
 800fdc4:	f04f 0900 	mov.w	r9, #0
 800fdc8:	e003      	b.n	800fdd2 <uxr_deserialize_CLIENT_Representation+0xa2>
 800fdca:	f108 0808 	add.w	r8, r8, #8
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d0f2      	beq.n	800fdb8 <uxr_deserialize_CLIENT_Representation+0x88>
 800fdd2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fdd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdda:	4628      	mov	r0, r5
 800fddc:	f004 f9fe 	bl	80141dc <ucdr_deserialize_string>
 800fde0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800fde4:	4607      	mov	r7, r0
 800fde6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdea:	4628      	mov	r0, r5
 800fdec:	f004 f9f6 	bl	80141dc <ucdr_deserialize_string>
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	f109 0901 	add.w	r9, r9, #1
 800fdf6:	4038      	ands	r0, r7
 800fdf8:	4599      	cmp	r9, r3
 800fdfa:	b2c0      	uxtb	r0, r0
 800fdfc:	d3e5      	bcc.n	800fdca <uxr_deserialize_CLIENT_Representation+0x9a>
 800fdfe:	4006      	ands	r6, r0
 800fe00:	e7c8      	b.n	800fd94 <uxr_deserialize_CLIENT_Representation+0x64>
 800fe02:	bf00      	nop

0800fe04 <uxr_serialize_AGENT_Representation>:
 800fe04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe08:	2204      	movs	r2, #4
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	4605      	mov	r5, r0
 800fe0e:	f004 f861 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fe12:	1d21      	adds	r1, r4, #4
 800fe14:	4606      	mov	r6, r0
 800fe16:	2202      	movs	r2, #2
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f004 f85b 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fe1e:	1da1      	adds	r1, r4, #6
 800fe20:	4006      	ands	r6, r0
 800fe22:	2202      	movs	r2, #2
 800fe24:	4628      	mov	r0, r5
 800fe26:	f004 f855 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800fe2a:	b2f6      	uxtb	r6, r6
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	7a21      	ldrb	r1, [r4, #8]
 800fe30:	4628      	mov	r0, r5
 800fe32:	401e      	ands	r6, r3
 800fe34:	f7f8 fde8 	bl	8008a08 <ucdr_serialize_bool>
 800fe38:	7a23      	ldrb	r3, [r4, #8]
 800fe3a:	ea00 0706 	and.w	r7, r0, r6
 800fe3e:	b913      	cbnz	r3, 800fe46 <uxr_serialize_AGENT_Representation+0x42>
 800fe40:	4638      	mov	r0, r7
 800fe42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe46:	68e1      	ldr	r1, [r4, #12]
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f7f9 f823 	bl	8008e94 <ucdr_serialize_uint32_t>
 800fe4e:	68e3      	ldr	r3, [r4, #12]
 800fe50:	b313      	cbz	r3, 800fe98 <uxr_serialize_AGENT_Representation+0x94>
 800fe52:	b1e8      	cbz	r0, 800fe90 <uxr_serialize_AGENT_Representation+0x8c>
 800fe54:	46a0      	mov	r8, r4
 800fe56:	f04f 0900 	mov.w	r9, #0
 800fe5a:	e002      	b.n	800fe62 <uxr_serialize_AGENT_Representation+0x5e>
 800fe5c:	f108 0808 	add.w	r8, r8, #8
 800fe60:	b1b3      	cbz	r3, 800fe90 <uxr_serialize_AGENT_Representation+0x8c>
 800fe62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe66:	4628      	mov	r0, r5
 800fe68:	f004 f9a8 	bl	80141bc <ucdr_serialize_string>
 800fe6c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fe70:	4606      	mov	r6, r0
 800fe72:	4628      	mov	r0, r5
 800fe74:	f004 f9a2 	bl	80141bc <ucdr_serialize_string>
 800fe78:	68e2      	ldr	r2, [r4, #12]
 800fe7a:	f109 0901 	add.w	r9, r9, #1
 800fe7e:	ea06 0300 	and.w	r3, r6, r0
 800fe82:	4591      	cmp	r9, r2
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	d3e9      	bcc.n	800fe5c <uxr_serialize_AGENT_Representation+0x58>
 800fe88:	401f      	ands	r7, r3
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe90:	2700      	movs	r7, #0
 800fe92:	4638      	mov	r0, r7
 800fe94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe98:	4007      	ands	r7, r0
 800fe9a:	e7d1      	b.n	800fe40 <uxr_serialize_AGENT_Representation+0x3c>

0800fe9c <uxr_serialize_ObjectVariant.part.0>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	780b      	ldrb	r3, [r1, #0]
 800fea0:	3b01      	subs	r3, #1
 800fea2:	460c      	mov	r4, r1
 800fea4:	4605      	mov	r5, r0
 800fea6:	2b0d      	cmp	r3, #13
 800fea8:	d869      	bhi.n	800ff7e <uxr_serialize_ObjectVariant.part.0+0xe2>
 800feaa:	e8df f003 	tbb	[pc, r3]
 800feae:	074a      	.short	0x074a
 800feb0:	07073030 	.word	0x07073030
 800feb4:	21680707 	.word	0x21680707
 800feb8:	45632121 	.word	0x45632121
 800febc:	7909      	ldrb	r1, [r1, #4]
 800febe:	f7f8 fdd3 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fec2:	4606      	mov	r6, r0
 800fec4:	b158      	cbz	r0, 800fede <uxr_serialize_ObjectVariant.part.0+0x42>
 800fec6:	7923      	ldrb	r3, [r4, #4]
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d003      	beq.n	800fed4 <uxr_serialize_ObjectVariant.part.0+0x38>
 800fecc:	2b03      	cmp	r3, #3
 800fece:	d029      	beq.n	800ff24 <uxr_serialize_ObjectVariant.part.0+0x88>
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d104      	bne.n	800fede <uxr_serialize_ObjectVariant.part.0+0x42>
 800fed4:	68a1      	ldr	r1, [r4, #8]
 800fed6:	4628      	mov	r0, r5
 800fed8:	f004 f970 	bl	80141bc <ucdr_serialize_string>
 800fedc:	4606      	mov	r6, r0
 800fede:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800fee2:	4628      	mov	r0, r5
 800fee4:	2202      	movs	r2, #2
 800fee6:	f003 fff5 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 800feea:	4030      	ands	r0, r6
 800feec:	b2c0      	uxtb	r0, r0
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	7909      	ldrb	r1, [r1, #4]
 800fef2:	f7f8 fdb9 	bl	8008a68 <ucdr_serialize_uint8_t>
 800fef6:	b1e8      	cbz	r0, 800ff34 <uxr_serialize_ObjectVariant.part.0+0x98>
 800fef8:	7923      	ldrb	r3, [r4, #4]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d001      	beq.n	800ff02 <uxr_serialize_ObjectVariant.part.0+0x66>
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	d13d      	bne.n	800ff7e <uxr_serialize_ObjectVariant.part.0+0xe2>
 800ff02:	68a1      	ldr	r1, [r4, #8]
 800ff04:	4628      	mov	r0, r5
 800ff06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff0a:	f004 b957 	b.w	80141bc <ucdr_serialize_string>
 800ff0e:	7909      	ldrb	r1, [r1, #4]
 800ff10:	f7f8 fdaa 	bl	8008a68 <ucdr_serialize_uint8_t>
 800ff14:	4606      	mov	r6, r0
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d0e1      	beq.n	800fede <uxr_serialize_ObjectVariant.part.0+0x42>
 800ff1a:	7923      	ldrb	r3, [r4, #4]
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d0d9      	beq.n	800fed4 <uxr_serialize_ObjectVariant.part.0+0x38>
 800ff20:	2b03      	cmp	r3, #3
 800ff22:	d1dc      	bne.n	800fede <uxr_serialize_ObjectVariant.part.0+0x42>
 800ff24:	68a2      	ldr	r2, [r4, #8]
 800ff26:	f104 010c 	add.w	r1, r4, #12
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f7fd f920 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 800ff30:	4606      	mov	r6, r0
 800ff32:	e7d4      	b.n	800fede <uxr_serialize_ObjectVariant.part.0+0x42>
 800ff34:	2000      	movs	r0, #0
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff3c:	3104      	adds	r1, #4
 800ff3e:	f7ff be9b 	b.w	800fc78 <uxr_serialize_CLIENT_Representation>
 800ff42:	7909      	ldrb	r1, [r1, #4]
 800ff44:	f7f8 fd90 	bl	8008a68 <ucdr_serialize_uint8_t>
 800ff48:	4606      	mov	r6, r0
 800ff4a:	b158      	cbz	r0, 800ff64 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800ff4c:	7923      	ldrb	r3, [r4, #4]
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d003      	beq.n	800ff5a <uxr_serialize_ObjectVariant.part.0+0xbe>
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	d015      	beq.n	800ff82 <uxr_serialize_ObjectVariant.part.0+0xe6>
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d104      	bne.n	800ff64 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800ff5a:	68a1      	ldr	r1, [r4, #8]
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	f004 f92d 	bl	80141bc <ucdr_serialize_string>
 800ff62:	4606      	mov	r6, r0
 800ff64:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f7f9 fab9 	bl	80094e0 <ucdr_serialize_int16_t>
 800ff6e:	4030      	ands	r0, r6
 800ff70:	b2c0      	uxtb	r0, r0
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
 800ff74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff78:	3104      	adds	r1, #4
 800ff7a:	f7ff bf43 	b.w	800fe04 <uxr_serialize_AGENT_Representation>
 800ff7e:	2001      	movs	r0, #1
 800ff80:	bd70      	pop	{r4, r5, r6, pc}
 800ff82:	68a2      	ldr	r2, [r4, #8]
 800ff84:	f104 010c 	add.w	r1, r4, #12
 800ff88:	4628      	mov	r0, r5
 800ff8a:	f7fd f8f1 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 800ff8e:	4606      	mov	r6, r0
 800ff90:	e7e8      	b.n	800ff64 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800ff92:	bf00      	nop

0800ff94 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ff94:	b570      	push	{r4, r5, r6, lr}
 800ff96:	460d      	mov	r5, r1
 800ff98:	7809      	ldrb	r1, [r1, #0]
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	f7f8 fd34 	bl	8008a08 <ucdr_serialize_bool>
 800ffa0:	782b      	ldrb	r3, [r5, #0]
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	b94b      	cbnz	r3, 800ffba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ffa6:	7a29      	ldrb	r1, [r5, #8]
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f7f8 fd2d 	bl	8008a08 <ucdr_serialize_bool>
 800ffae:	7a2b      	ldrb	r3, [r5, #8]
 800ffb0:	4004      	ands	r4, r0
 800ffb2:	b2e4      	uxtb	r4, r4
 800ffb4:	b943      	cbnz	r3, 800ffc8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	bd70      	pop	{r4, r5, r6, pc}
 800ffba:	6869      	ldr	r1, [r5, #4]
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	f004 f8fd 	bl	80141bc <ucdr_serialize_string>
 800ffc2:	4004      	ands	r4, r0
 800ffc4:	b2e4      	uxtb	r4, r4
 800ffc6:	e7ee      	b.n	800ffa6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ffc8:	68e9      	ldr	r1, [r5, #12]
 800ffca:	4630      	mov	r0, r6
 800ffcc:	f004 f8f6 	bl	80141bc <ucdr_serialize_string>
 800ffd0:	4004      	ands	r4, r0
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	bd70      	pop	{r4, r5, r6, pc}
 800ffd6:	bf00      	nop

0800ffd8 <uxr_serialize_OBJK_Topic_Binary>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	460d      	mov	r5, r1
 800ffdc:	6809      	ldr	r1, [r1, #0]
 800ffde:	4606      	mov	r6, r0
 800ffe0:	f004 f8ec 	bl	80141bc <ucdr_serialize_string>
 800ffe4:	7929      	ldrb	r1, [r5, #4]
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	4630      	mov	r0, r6
 800ffea:	f7f8 fd0d 	bl	8008a08 <ucdr_serialize_bool>
 800ffee:	792b      	ldrb	r3, [r5, #4]
 800fff0:	4004      	ands	r4, r0
 800fff2:	b2e4      	uxtb	r4, r4
 800fff4:	b943      	cbnz	r3, 8010008 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800fff6:	7b29      	ldrb	r1, [r5, #12]
 800fff8:	4630      	mov	r0, r6
 800fffa:	f7f8 fd05 	bl	8008a08 <ucdr_serialize_bool>
 800fffe:	7b2b      	ldrb	r3, [r5, #12]
 8010000:	4004      	ands	r4, r0
 8010002:	b93b      	cbnz	r3, 8010014 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010004:	4620      	mov	r0, r4
 8010006:	bd70      	pop	{r4, r5, r6, pc}
 8010008:	68a9      	ldr	r1, [r5, #8]
 801000a:	4630      	mov	r0, r6
 801000c:	f004 f8d6 	bl	80141bc <ucdr_serialize_string>
 8010010:	4004      	ands	r4, r0
 8010012:	e7f0      	b.n	800fff6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010014:	6929      	ldr	r1, [r5, #16]
 8010016:	4630      	mov	r0, r6
 8010018:	f004 f8d0 	bl	80141bc <ucdr_serialize_string>
 801001c:	4004      	ands	r4, r0
 801001e:	b2e4      	uxtb	r4, r4
 8010020:	4620      	mov	r0, r4
 8010022:	bd70      	pop	{r4, r5, r6, pc}

08010024 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010028:	460c      	mov	r4, r1
 801002a:	7809      	ldrb	r1, [r1, #0]
 801002c:	4606      	mov	r6, r0
 801002e:	f7f8 fceb 	bl	8008a08 <ucdr_serialize_bool>
 8010032:	7823      	ldrb	r3, [r4, #0]
 8010034:	4605      	mov	r5, r0
 8010036:	b96b      	cbnz	r3, 8010054 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010038:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801003c:	4630      	mov	r0, r6
 801003e:	f7f8 fce3 	bl	8008a08 <ucdr_serialize_bool>
 8010042:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010046:	4005      	ands	r5, r0
 8010048:	b2ed      	uxtb	r5, r5
 801004a:	2b00      	cmp	r3, #0
 801004c:	d169      	bne.n	8010122 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801004e:	4628      	mov	r0, r5
 8010050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010054:	6861      	ldr	r1, [r4, #4]
 8010056:	4630      	mov	r0, r6
 8010058:	f7f8 ff1c 	bl	8008e94 <ucdr_serialize_uint32_t>
 801005c:	6863      	ldr	r3, [r4, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d06b      	beq.n	801013a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010062:	2800      	cmp	r0, #0
 8010064:	d067      	beq.n	8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010066:	68a1      	ldr	r1, [r4, #8]
 8010068:	4630      	mov	r0, r6
 801006a:	f004 f8a7 	bl	80141bc <ucdr_serialize_string>
 801006e:	6863      	ldr	r3, [r4, #4]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d953      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010074:	2800      	cmp	r0, #0
 8010076:	d05e      	beq.n	8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010078:	68e1      	ldr	r1, [r4, #12]
 801007a:	4630      	mov	r0, r6
 801007c:	f004 f89e 	bl	80141bc <ucdr_serialize_string>
 8010080:	6863      	ldr	r3, [r4, #4]
 8010082:	2b02      	cmp	r3, #2
 8010084:	d94a      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010086:	2800      	cmp	r0, #0
 8010088:	d055      	beq.n	8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801008a:	6921      	ldr	r1, [r4, #16]
 801008c:	4630      	mov	r0, r6
 801008e:	f004 f895 	bl	80141bc <ucdr_serialize_string>
 8010092:	6863      	ldr	r3, [r4, #4]
 8010094:	2b03      	cmp	r3, #3
 8010096:	d941      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010098:	2800      	cmp	r0, #0
 801009a:	d04c      	beq.n	8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801009c:	6961      	ldr	r1, [r4, #20]
 801009e:	4630      	mov	r0, r6
 80100a0:	f004 f88c 	bl	80141bc <ucdr_serialize_string>
 80100a4:	6863      	ldr	r3, [r4, #4]
 80100a6:	2b04      	cmp	r3, #4
 80100a8:	d938      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80100aa:	2800      	cmp	r0, #0
 80100ac:	d043      	beq.n	8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80100ae:	69a1      	ldr	r1, [r4, #24]
 80100b0:	4630      	mov	r0, r6
 80100b2:	f004 f883 	bl	80141bc <ucdr_serialize_string>
 80100b6:	6863      	ldr	r3, [r4, #4]
 80100b8:	2b05      	cmp	r3, #5
 80100ba:	d92f      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80100bc:	2800      	cmp	r0, #0
 80100be:	d03a      	beq.n	8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80100c0:	69e1      	ldr	r1, [r4, #28]
 80100c2:	4630      	mov	r0, r6
 80100c4:	f004 f87a 	bl	80141bc <ucdr_serialize_string>
 80100c8:	6863      	ldr	r3, [r4, #4]
 80100ca:	2b06      	cmp	r3, #6
 80100cc:	d926      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80100ce:	b390      	cbz	r0, 8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80100d0:	6a21      	ldr	r1, [r4, #32]
 80100d2:	4630      	mov	r0, r6
 80100d4:	f004 f872 	bl	80141bc <ucdr_serialize_string>
 80100d8:	6863      	ldr	r3, [r4, #4]
 80100da:	2b07      	cmp	r3, #7
 80100dc:	d91e      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80100de:	b350      	cbz	r0, 8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80100e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80100e2:	4630      	mov	r0, r6
 80100e4:	f004 f86a 	bl	80141bc <ucdr_serialize_string>
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	2b08      	cmp	r3, #8
 80100ec:	d916      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80100ee:	b310      	cbz	r0, 8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80100f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80100f2:	4630      	mov	r0, r6
 80100f4:	f004 f862 	bl	80141bc <ucdr_serialize_string>
 80100f8:	6863      	ldr	r3, [r4, #4]
 80100fa:	2b09      	cmp	r3, #9
 80100fc:	d90e      	bls.n	801011c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80100fe:	b1d0      	cbz	r0, 8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010100:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010104:	2709      	movs	r7, #9
 8010106:	e000      	b.n	801010a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010108:	b1a8      	cbz	r0, 8010136 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801010a:	f858 1b04 	ldr.w	r1, [r8], #4
 801010e:	4630      	mov	r0, r6
 8010110:	f004 f854 	bl	80141bc <ucdr_serialize_string>
 8010114:	6862      	ldr	r2, [r4, #4]
 8010116:	3701      	adds	r7, #1
 8010118:	4297      	cmp	r7, r2
 801011a:	d3f5      	bcc.n	8010108 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801011c:	4005      	ands	r5, r0
 801011e:	b2ed      	uxtb	r5, r5
 8010120:	e78a      	b.n	8010038 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010122:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010124:	4630      	mov	r0, r6
 8010126:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801012a:	f7fd f821 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 801012e:	4005      	ands	r5, r0
 8010130:	4628      	mov	r0, r5
 8010132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010136:	2500      	movs	r5, #0
 8010138:	e77e      	b.n	8010038 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801013a:	4028      	ands	r0, r5
 801013c:	b2c5      	uxtb	r5, r0
 801013e:	e77b      	b.n	8010038 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010140 <uxr_serialize_OBJK_Publisher_Binary>:
 8010140:	b570      	push	{r4, r5, r6, lr}
 8010142:	460d      	mov	r5, r1
 8010144:	7809      	ldrb	r1, [r1, #0]
 8010146:	4606      	mov	r6, r0
 8010148:	f7f8 fc5e 	bl	8008a08 <ucdr_serialize_bool>
 801014c:	782b      	ldrb	r3, [r5, #0]
 801014e:	4604      	mov	r4, r0
 8010150:	b94b      	cbnz	r3, 8010166 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010152:	7a29      	ldrb	r1, [r5, #8]
 8010154:	4630      	mov	r0, r6
 8010156:	f7f8 fc57 	bl	8008a08 <ucdr_serialize_bool>
 801015a:	7a2b      	ldrb	r3, [r5, #8]
 801015c:	4004      	ands	r4, r0
 801015e:	b2e4      	uxtb	r4, r4
 8010160:	b943      	cbnz	r3, 8010174 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010162:	4620      	mov	r0, r4
 8010164:	bd70      	pop	{r4, r5, r6, pc}
 8010166:	6869      	ldr	r1, [r5, #4]
 8010168:	4630      	mov	r0, r6
 801016a:	f004 f827 	bl	80141bc <ucdr_serialize_string>
 801016e:	4004      	ands	r4, r0
 8010170:	b2e4      	uxtb	r4, r4
 8010172:	e7ee      	b.n	8010152 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010174:	f105 010c 	add.w	r1, r5, #12
 8010178:	4630      	mov	r0, r6
 801017a:	f7ff ff53 	bl	8010024 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801017e:	4004      	ands	r4, r0
 8010180:	4620      	mov	r0, r4
 8010182:	bd70      	pop	{r4, r5, r6, pc}

08010184 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010188:	460c      	mov	r4, r1
 801018a:	7809      	ldrb	r1, [r1, #0]
 801018c:	4606      	mov	r6, r0
 801018e:	f7f8 fc3b 	bl	8008a08 <ucdr_serialize_bool>
 8010192:	7823      	ldrb	r3, [r4, #0]
 8010194:	4605      	mov	r5, r0
 8010196:	b96b      	cbnz	r3, 80101b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010198:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801019c:	4630      	mov	r0, r6
 801019e:	f7f8 fc33 	bl	8008a08 <ucdr_serialize_bool>
 80101a2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80101a6:	4005      	ands	r5, r0
 80101a8:	b2ed      	uxtb	r5, r5
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d169      	bne.n	8010282 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80101ae:	4628      	mov	r0, r5
 80101b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101b4:	6861      	ldr	r1, [r4, #4]
 80101b6:	4630      	mov	r0, r6
 80101b8:	f7f8 fe6c 	bl	8008e94 <ucdr_serialize_uint32_t>
 80101bc:	6863      	ldr	r3, [r4, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d06b      	beq.n	801029a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	d067      	beq.n	8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80101c6:	68a1      	ldr	r1, [r4, #8]
 80101c8:	4630      	mov	r0, r6
 80101ca:	f003 fff7 	bl	80141bc <ucdr_serialize_string>
 80101ce:	6863      	ldr	r3, [r4, #4]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d953      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80101d4:	2800      	cmp	r0, #0
 80101d6:	d05e      	beq.n	8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80101d8:	68e1      	ldr	r1, [r4, #12]
 80101da:	4630      	mov	r0, r6
 80101dc:	f003 ffee 	bl	80141bc <ucdr_serialize_string>
 80101e0:	6863      	ldr	r3, [r4, #4]
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	d94a      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d055      	beq.n	8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80101ea:	6921      	ldr	r1, [r4, #16]
 80101ec:	4630      	mov	r0, r6
 80101ee:	f003 ffe5 	bl	80141bc <ucdr_serialize_string>
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d941      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80101f8:	2800      	cmp	r0, #0
 80101fa:	d04c      	beq.n	8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80101fc:	6961      	ldr	r1, [r4, #20]
 80101fe:	4630      	mov	r0, r6
 8010200:	f003 ffdc 	bl	80141bc <ucdr_serialize_string>
 8010204:	6863      	ldr	r3, [r4, #4]
 8010206:	2b04      	cmp	r3, #4
 8010208:	d938      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801020a:	2800      	cmp	r0, #0
 801020c:	d043      	beq.n	8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801020e:	69a1      	ldr	r1, [r4, #24]
 8010210:	4630      	mov	r0, r6
 8010212:	f003 ffd3 	bl	80141bc <ucdr_serialize_string>
 8010216:	6863      	ldr	r3, [r4, #4]
 8010218:	2b05      	cmp	r3, #5
 801021a:	d92f      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801021c:	2800      	cmp	r0, #0
 801021e:	d03a      	beq.n	8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010220:	69e1      	ldr	r1, [r4, #28]
 8010222:	4630      	mov	r0, r6
 8010224:	f003 ffca 	bl	80141bc <ucdr_serialize_string>
 8010228:	6863      	ldr	r3, [r4, #4]
 801022a:	2b06      	cmp	r3, #6
 801022c:	d926      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801022e:	b390      	cbz	r0, 8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010230:	6a21      	ldr	r1, [r4, #32]
 8010232:	4630      	mov	r0, r6
 8010234:	f003 ffc2 	bl	80141bc <ucdr_serialize_string>
 8010238:	6863      	ldr	r3, [r4, #4]
 801023a:	2b07      	cmp	r3, #7
 801023c:	d91e      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801023e:	b350      	cbz	r0, 8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010240:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010242:	4630      	mov	r0, r6
 8010244:	f003 ffba 	bl	80141bc <ucdr_serialize_string>
 8010248:	6863      	ldr	r3, [r4, #4]
 801024a:	2b08      	cmp	r3, #8
 801024c:	d916      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801024e:	b310      	cbz	r0, 8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010250:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010252:	4630      	mov	r0, r6
 8010254:	f003 ffb2 	bl	80141bc <ucdr_serialize_string>
 8010258:	6863      	ldr	r3, [r4, #4]
 801025a:	2b09      	cmp	r3, #9
 801025c:	d90e      	bls.n	801027c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801025e:	b1d0      	cbz	r0, 8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010260:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010264:	2709      	movs	r7, #9
 8010266:	e000      	b.n	801026a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010268:	b1a8      	cbz	r0, 8010296 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801026a:	f858 1b04 	ldr.w	r1, [r8], #4
 801026e:	4630      	mov	r0, r6
 8010270:	f003 ffa4 	bl	80141bc <ucdr_serialize_string>
 8010274:	6862      	ldr	r2, [r4, #4]
 8010276:	3701      	adds	r7, #1
 8010278:	4297      	cmp	r7, r2
 801027a:	d3f5      	bcc.n	8010268 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801027c:	4005      	ands	r5, r0
 801027e:	b2ed      	uxtb	r5, r5
 8010280:	e78a      	b.n	8010198 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010282:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010284:	4630      	mov	r0, r6
 8010286:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801028a:	f7fc ff71 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 801028e:	4005      	ands	r5, r0
 8010290:	4628      	mov	r0, r5
 8010292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010296:	2500      	movs	r5, #0
 8010298:	e77e      	b.n	8010198 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801029a:	4028      	ands	r0, r5
 801029c:	b2c5      	uxtb	r5, r0
 801029e:	e77b      	b.n	8010198 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080102a0 <uxr_serialize_OBJK_Subscriber_Binary>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	460d      	mov	r5, r1
 80102a4:	7809      	ldrb	r1, [r1, #0]
 80102a6:	4606      	mov	r6, r0
 80102a8:	f7f8 fbae 	bl	8008a08 <ucdr_serialize_bool>
 80102ac:	782b      	ldrb	r3, [r5, #0]
 80102ae:	4604      	mov	r4, r0
 80102b0:	b94b      	cbnz	r3, 80102c6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80102b2:	7a29      	ldrb	r1, [r5, #8]
 80102b4:	4630      	mov	r0, r6
 80102b6:	f7f8 fba7 	bl	8008a08 <ucdr_serialize_bool>
 80102ba:	7a2b      	ldrb	r3, [r5, #8]
 80102bc:	4004      	ands	r4, r0
 80102be:	b2e4      	uxtb	r4, r4
 80102c0:	b943      	cbnz	r3, 80102d4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80102c2:	4620      	mov	r0, r4
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
 80102c6:	6869      	ldr	r1, [r5, #4]
 80102c8:	4630      	mov	r0, r6
 80102ca:	f003 ff77 	bl	80141bc <ucdr_serialize_string>
 80102ce:	4004      	ands	r4, r0
 80102d0:	b2e4      	uxtb	r4, r4
 80102d2:	e7ee      	b.n	80102b2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80102d4:	f105 010c 	add.w	r1, r5, #12
 80102d8:	4630      	mov	r0, r6
 80102da:	f7ff ff53 	bl	8010184 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80102de:	4004      	ands	r4, r0
 80102e0:	4620      	mov	r0, r4
 80102e2:	bd70      	pop	{r4, r5, r6, pc}

080102e4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80102e4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80102e8:	4688      	mov	r8, r1
 80102ea:	8809      	ldrh	r1, [r1, #0]
 80102ec:	4681      	mov	r9, r0
 80102ee:	f7f8 fbe7 	bl	8008ac0 <ucdr_serialize_uint16_t>
 80102f2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80102f6:	4606      	mov	r6, r0
 80102f8:	4648      	mov	r0, r9
 80102fa:	f7f8 fb85 	bl	8008a08 <ucdr_serialize_bool>
 80102fe:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010302:	4030      	ands	r0, r6
 8010304:	b2c5      	uxtb	r5, r0
 8010306:	b9eb      	cbnz	r3, 8010344 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010308:	f898 1006 	ldrb.w	r1, [r8, #6]
 801030c:	4648      	mov	r0, r9
 801030e:	f7f8 fb7b 	bl	8008a08 <ucdr_serialize_bool>
 8010312:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010316:	4005      	ands	r5, r0
 8010318:	bb7b      	cbnz	r3, 801037a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801031a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801031e:	4648      	mov	r0, r9
 8010320:	f7f8 fb72 	bl	8008a08 <ucdr_serialize_bool>
 8010324:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010328:	4005      	ands	r5, r0
 801032a:	b9f3      	cbnz	r3, 801036a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801032c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010330:	4648      	mov	r0, r9
 8010332:	f7f8 fb69 	bl	8008a08 <ucdr_serialize_bool>
 8010336:	f898 3014 	ldrb.w	r3, [r8, #20]
 801033a:	4005      	ands	r5, r0
 801033c:	b94b      	cbnz	r3, 8010352 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801033e:	4628      	mov	r0, r5
 8010340:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010344:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010348:	4648      	mov	r0, r9
 801034a:	f7f8 fbb9 	bl	8008ac0 <ucdr_serialize_uint16_t>
 801034e:	4005      	ands	r5, r0
 8010350:	e7da      	b.n	8010308 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010352:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010356:	4648      	mov	r0, r9
 8010358:	f108 011c 	add.w	r1, r8, #28
 801035c:	f7fc ff08 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 8010360:	4028      	ands	r0, r5
 8010362:	b2c5      	uxtb	r5, r0
 8010364:	4628      	mov	r0, r5
 8010366:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801036a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801036e:	4648      	mov	r0, r9
 8010370:	f7f8 fd90 	bl	8008e94 <ucdr_serialize_uint32_t>
 8010374:	4028      	ands	r0, r5
 8010376:	b2c5      	uxtb	r5, r0
 8010378:	e7d8      	b.n	801032c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801037a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801037e:	4648      	mov	r0, r9
 8010380:	f7f8 fd88 	bl	8008e94 <ucdr_serialize_uint32_t>
 8010384:	4028      	ands	r0, r5
 8010386:	b2c5      	uxtb	r5, r0
 8010388:	e7c7      	b.n	801031a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801038a:	bf00      	nop

0801038c <uxr_serialize_OBJK_DataReader_Binary>:
 801038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038e:	2202      	movs	r2, #2
 8010390:	460c      	mov	r4, r1
 8010392:	4606      	mov	r6, r0
 8010394:	f003 fd9e 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010398:	78a1      	ldrb	r1, [r4, #2]
 801039a:	4605      	mov	r5, r0
 801039c:	4630      	mov	r0, r6
 801039e:	f7f8 fb33 	bl	8008a08 <ucdr_serialize_bool>
 80103a2:	78a3      	ldrb	r3, [r4, #2]
 80103a4:	4005      	ands	r5, r0
 80103a6:	b2ed      	uxtb	r5, r5
 80103a8:	b90b      	cbnz	r3, 80103ae <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80103aa:	4628      	mov	r0, r5
 80103ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ae:	f104 0108 	add.w	r1, r4, #8
 80103b2:	4630      	mov	r0, r6
 80103b4:	f7ff ff96 	bl	80102e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80103b8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80103bc:	4607      	mov	r7, r0
 80103be:	4630      	mov	r0, r6
 80103c0:	f7f8 fb22 	bl	8008a08 <ucdr_serialize_bool>
 80103c4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80103c8:	4038      	ands	r0, r7
 80103ca:	b2c7      	uxtb	r7, r0
 80103cc:	b95b      	cbnz	r3, 80103e6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80103ce:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80103d2:	4630      	mov	r0, r6
 80103d4:	f7f8 fb18 	bl	8008a08 <ucdr_serialize_bool>
 80103d8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80103dc:	4007      	ands	r7, r0
 80103de:	b94b      	cbnz	r3, 80103f4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80103e0:	403d      	ands	r5, r7
 80103e2:	4628      	mov	r0, r5
 80103e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80103ea:	4630      	mov	r0, r6
 80103ec:	f7f8 ffa8 	bl	8009340 <ucdr_serialize_uint64_t>
 80103f0:	4007      	ands	r7, r0
 80103f2:	e7ec      	b.n	80103ce <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80103f4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80103f6:	4630      	mov	r0, r6
 80103f8:	f003 fee0 	bl	80141bc <ucdr_serialize_string>
 80103fc:	4007      	ands	r7, r0
 80103fe:	b2ff      	uxtb	r7, r7
 8010400:	e7ee      	b.n	80103e0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8010402:	bf00      	nop

08010404 <uxr_serialize_OBJK_DataWriter_Binary>:
 8010404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010406:	2202      	movs	r2, #2
 8010408:	460d      	mov	r5, r1
 801040a:	4606      	mov	r6, r0
 801040c:	f003 fd62 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010410:	78a9      	ldrb	r1, [r5, #2]
 8010412:	4604      	mov	r4, r0
 8010414:	4630      	mov	r0, r6
 8010416:	f7f8 faf7 	bl	8008a08 <ucdr_serialize_bool>
 801041a:	78ab      	ldrb	r3, [r5, #2]
 801041c:	4004      	ands	r4, r0
 801041e:	b2e4      	uxtb	r4, r4
 8010420:	b90b      	cbnz	r3, 8010426 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8010422:	4620      	mov	r0, r4
 8010424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010426:	f105 0108 	add.w	r1, r5, #8
 801042a:	4630      	mov	r0, r6
 801042c:	f7ff ff5a 	bl	80102e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010430:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8010434:	4607      	mov	r7, r0
 8010436:	4630      	mov	r0, r6
 8010438:	f7f8 fae6 	bl	8008a08 <ucdr_serialize_bool>
 801043c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010440:	4007      	ands	r7, r0
 8010442:	b2ff      	uxtb	r7, r7
 8010444:	b913      	cbnz	r3, 801044c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8010446:	403c      	ands	r4, r7
 8010448:	4620      	mov	r0, r4
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801044c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8010450:	4630      	mov	r0, r6
 8010452:	f7f8 ff75 	bl	8009340 <ucdr_serialize_uint64_t>
 8010456:	4007      	ands	r7, r0
 8010458:	e7f5      	b.n	8010446 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801045a:	bf00      	nop

0801045c <uxr_deserialize_ObjectVariant>:
 801045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045e:	4605      	mov	r5, r0
 8010460:	460e      	mov	r6, r1
 8010462:	f7f8 fb17 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010466:	b320      	cbz	r0, 80104b2 <uxr_deserialize_ObjectVariant+0x56>
 8010468:	7833      	ldrb	r3, [r6, #0]
 801046a:	3b01      	subs	r3, #1
 801046c:	4604      	mov	r4, r0
 801046e:	2b0d      	cmp	r3, #13
 8010470:	d81d      	bhi.n	80104ae <uxr_deserialize_ObjectVariant+0x52>
 8010472:	e8df f003 	tbb	[pc, r3]
 8010476:	2107      	.short	0x2107
 8010478:	21214b4b 	.word	0x21214b4b
 801047c:	381c2121 	.word	0x381c2121
 8010480:	876a3838 	.word	0x876a3838
 8010484:	1d31      	adds	r1, r6, #4
 8010486:	4628      	mov	r0, r5
 8010488:	f7f8 fb04 	bl	8008a94 <ucdr_deserialize_uint8_t>
 801048c:	4607      	mov	r7, r0
 801048e:	b138      	cbz	r0, 80104a0 <uxr_deserialize_ObjectVariant+0x44>
 8010490:	7933      	ldrb	r3, [r6, #4]
 8010492:	2b02      	cmp	r3, #2
 8010494:	d07c      	beq.n	8010590 <uxr_deserialize_ObjectVariant+0x134>
 8010496:	2b03      	cmp	r3, #3
 8010498:	f000 8082 	beq.w	80105a0 <uxr_deserialize_ObjectVariant+0x144>
 801049c:	2b01      	cmp	r3, #1
 801049e:	d077      	beq.n	8010590 <uxr_deserialize_ObjectVariant+0x134>
 80104a0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80104a4:	4628      	mov	r0, r5
 80104a6:	f7f9 f89b 	bl	80095e0 <ucdr_deserialize_int16_t>
 80104aa:	4038      	ands	r0, r7
 80104ac:	b2c4      	uxtb	r4, r0
 80104ae:	4620      	mov	r0, r4
 80104b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104b2:	2400      	movs	r4, #0
 80104b4:	4620      	mov	r0, r4
 80104b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104b8:	1d31      	adds	r1, r6, #4
 80104ba:	4628      	mov	r0, r5
 80104bc:	f7f8 faea 	bl	8008a94 <ucdr_deserialize_uint8_t>
 80104c0:	4607      	mov	r7, r0
 80104c2:	b130      	cbz	r0, 80104d2 <uxr_deserialize_ObjectVariant+0x76>
 80104c4:	7933      	ldrb	r3, [r6, #4]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d037      	beq.n	801053a <uxr_deserialize_ObjectVariant+0xde>
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	d02a      	beq.n	8010524 <uxr_deserialize_ObjectVariant+0xc8>
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d033      	beq.n	801053a <uxr_deserialize_ObjectVariant+0xde>
 80104d2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80104d6:	4628      	mov	r0, r5
 80104d8:	2202      	movs	r2, #2
 80104da:	f003 fd5f 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80104de:	4038      	ands	r0, r7
 80104e0:	b2c4      	uxtb	r4, r0
 80104e2:	4620      	mov	r0, r4
 80104e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104e6:	1d31      	adds	r1, r6, #4
 80104e8:	4628      	mov	r0, r5
 80104ea:	f7f8 fad3 	bl	8008a94 <ucdr_deserialize_uint8_t>
 80104ee:	2800      	cmp	r0, #0
 80104f0:	d0df      	beq.n	80104b2 <uxr_deserialize_ObjectVariant+0x56>
 80104f2:	7933      	ldrb	r3, [r6, #4]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d001      	beq.n	80104fc <uxr_deserialize_ObjectVariant+0xa0>
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d1d8      	bne.n	80104ae <uxr_deserialize_ObjectVariant+0x52>
 80104fc:	68b1      	ldr	r1, [r6, #8]
 80104fe:	4628      	mov	r0, r5
 8010500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010504:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010508:	f003 be68 	b.w	80141dc <ucdr_deserialize_string>
 801050c:	1d31      	adds	r1, r6, #4
 801050e:	4628      	mov	r0, r5
 8010510:	f7f8 fac0 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010514:	4607      	mov	r7, r0
 8010516:	2800      	cmp	r0, #0
 8010518:	d0db      	beq.n	80104d2 <uxr_deserialize_ObjectVariant+0x76>
 801051a:	7933      	ldrb	r3, [r6, #4]
 801051c:	2b02      	cmp	r3, #2
 801051e:	d00c      	beq.n	801053a <uxr_deserialize_ObjectVariant+0xde>
 8010520:	2b03      	cmp	r3, #3
 8010522:	d1d6      	bne.n	80104d2 <uxr_deserialize_ObjectVariant+0x76>
 8010524:	f106 0308 	add.w	r3, r6, #8
 8010528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801052c:	f106 010c 	add.w	r1, r6, #12
 8010530:	4628      	mov	r0, r5
 8010532:	f7fc fe2f 	bl	800d194 <ucdr_deserialize_sequence_uint8_t>
 8010536:	4607      	mov	r7, r0
 8010538:	e7cb      	b.n	80104d2 <uxr_deserialize_ObjectVariant+0x76>
 801053a:	68b1      	ldr	r1, [r6, #8]
 801053c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010540:	4628      	mov	r0, r5
 8010542:	f003 fe4b 	bl	80141dc <ucdr_deserialize_string>
 8010546:	4607      	mov	r7, r0
 8010548:	e7c3      	b.n	80104d2 <uxr_deserialize_ObjectVariant+0x76>
 801054a:	2204      	movs	r2, #4
 801054c:	18b1      	adds	r1, r6, r2
 801054e:	4628      	mov	r0, r5
 8010550:	f003 fd24 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010554:	2202      	movs	r2, #2
 8010556:	4604      	mov	r4, r0
 8010558:	f106 0108 	add.w	r1, r6, #8
 801055c:	4628      	mov	r0, r5
 801055e:	f003 fd1d 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010562:	2202      	movs	r2, #2
 8010564:	4004      	ands	r4, r0
 8010566:	f106 010a 	add.w	r1, r6, #10
 801056a:	4628      	mov	r0, r5
 801056c:	f003 fd16 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010570:	b2e4      	uxtb	r4, r4
 8010572:	4603      	mov	r3, r0
 8010574:	f106 010c 	add.w	r1, r6, #12
 8010578:	4628      	mov	r0, r5
 801057a:	401c      	ands	r4, r3
 801057c:	f7f8 fa5a 	bl	8008a34 <ucdr_deserialize_bool>
 8010580:	4004      	ands	r4, r0
 8010582:	e794      	b.n	80104ae <uxr_deserialize_ObjectVariant+0x52>
 8010584:	1d31      	adds	r1, r6, #4
 8010586:	4628      	mov	r0, r5
 8010588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801058c:	f7ff bbd0 	b.w	800fd30 <uxr_deserialize_CLIENT_Representation>
 8010590:	68b1      	ldr	r1, [r6, #8]
 8010592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010596:	4628      	mov	r0, r5
 8010598:	f003 fe20 	bl	80141dc <ucdr_deserialize_string>
 801059c:	4607      	mov	r7, r0
 801059e:	e77f      	b.n	80104a0 <uxr_deserialize_ObjectVariant+0x44>
 80105a0:	f106 0308 	add.w	r3, r6, #8
 80105a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105a8:	f106 010c 	add.w	r1, r6, #12
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7fc fdf1 	bl	800d194 <ucdr_deserialize_sequence_uint8_t>
 80105b2:	4607      	mov	r7, r0
 80105b4:	e774      	b.n	80104a0 <uxr_deserialize_ObjectVariant+0x44>
 80105b6:	bf00      	nop

080105b8 <uxr_deserialize_BaseObjectRequest>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	2202      	movs	r2, #2
 80105bc:	4605      	mov	r5, r0
 80105be:	460e      	mov	r6, r1
 80105c0:	f003 fcec 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80105c4:	1cb1      	adds	r1, r6, #2
 80105c6:	4604      	mov	r4, r0
 80105c8:	2202      	movs	r2, #2
 80105ca:	4628      	mov	r0, r5
 80105cc:	f003 fce6 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80105d0:	4020      	ands	r0, r4
 80105d2:	b2c0      	uxtb	r0, r0
 80105d4:	bd70      	pop	{r4, r5, r6, pc}
 80105d6:	bf00      	nop

080105d8 <uxr_serialize_AGENT_ActivityInfo>:
 80105d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105dc:	460e      	mov	r6, r1
 80105de:	f9b1 1000 	ldrsh.w	r1, [r1]
 80105e2:	4607      	mov	r7, r0
 80105e4:	f7f8 ff7c 	bl	80094e0 <ucdr_serialize_int16_t>
 80105e8:	6871      	ldr	r1, [r6, #4]
 80105ea:	4680      	mov	r8, r0
 80105ec:	4638      	mov	r0, r7
 80105ee:	f7f8 fc51 	bl	8008e94 <ucdr_serialize_uint32_t>
 80105f2:	6873      	ldr	r3, [r6, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d06a      	beq.n	80106ce <uxr_serialize_AGENT_ActivityInfo+0xf6>
 80105f8:	b318      	cbz	r0, 8010642 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80105fa:	f106 0904 	add.w	r9, r6, #4
 80105fe:	2500      	movs	r5, #0
 8010600:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8010604:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8010608:	7a21      	ldrb	r1, [r4, #8]
 801060a:	4638      	mov	r0, r7
 801060c:	f7f8 fa2c 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010610:	2800      	cmp	r0, #0
 8010612:	d051      	beq.n	80106b8 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8010614:	7a23      	ldrb	r3, [r4, #8]
 8010616:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801061a:	00c9      	lsls	r1, r1, #3
 801061c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8010620:	2b03      	cmp	r3, #3
 8010622:	d859      	bhi.n	80106d8 <uxr_serialize_AGENT_ActivityInfo+0x100>
 8010624:	e8df f003 	tbb	[pc, r3]
 8010628:	02122436 	.word	0x02122436
 801062c:	4449      	add	r1, r9
 801062e:	4638      	mov	r0, r7
 8010630:	6889      	ldr	r1, [r1, #8]
 8010632:	f003 fdc3 	bl	80141bc <ucdr_serialize_string>
 8010636:	6873      	ldr	r3, [r6, #4]
 8010638:	3501      	adds	r5, #1
 801063a:	429d      	cmp	r5, r3
 801063c:	d240      	bcs.n	80106c0 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 801063e:	2800      	cmp	r0, #0
 8010640:	d1de      	bne.n	8010600 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8010642:	f04f 0800 	mov.w	r8, #0
 8010646:	4640      	mov	r0, r8
 8010648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064c:	3108      	adds	r1, #8
 801064e:	4449      	add	r1, r9
 8010650:	2210      	movs	r2, #16
 8010652:	4638      	mov	r0, r7
 8010654:	f003 fc3e 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010658:	44aa      	add	sl, r5
 801065a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801065e:	4604      	mov	r4, r0
 8010660:	f8da 101c 	ldr.w	r1, [sl, #28]
 8010664:	4638      	mov	r0, r7
 8010666:	f7f8 fc15 	bl	8008e94 <ucdr_serialize_uint32_t>
 801066a:	4020      	ands	r0, r4
 801066c:	b2c0      	uxtb	r0, r0
 801066e:	e7e2      	b.n	8010636 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8010670:	3108      	adds	r1, #8
 8010672:	4449      	add	r1, r9
 8010674:	2204      	movs	r2, #4
 8010676:	4638      	mov	r0, r7
 8010678:	f003 fc2c 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 801067c:	44aa      	add	sl, r5
 801067e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8010682:	4604      	mov	r4, r0
 8010684:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8010688:	4638      	mov	r0, r7
 801068a:	f7f8 fa19 	bl	8008ac0 <ucdr_serialize_uint16_t>
 801068e:	4020      	ands	r0, r4
 8010690:	b2c0      	uxtb	r0, r0
 8010692:	e7d0      	b.n	8010636 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8010694:	3108      	adds	r1, #8
 8010696:	4449      	add	r1, r9
 8010698:	2202      	movs	r2, #2
 801069a:	4638      	mov	r0, r7
 801069c:	f003 fc1a 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 80106a0:	44aa      	add	sl, r5
 80106a2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80106a6:	4604      	mov	r4, r0
 80106a8:	f89a 100e 	ldrb.w	r1, [sl, #14]
 80106ac:	4638      	mov	r0, r7
 80106ae:	f7f8 f9db 	bl	8008a68 <ucdr_serialize_uint8_t>
 80106b2:	4020      	ands	r0, r4
 80106b4:	b2c0      	uxtb	r0, r0
 80106b6:	e7be      	b.n	8010636 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80106b8:	6873      	ldr	r3, [r6, #4]
 80106ba:	3501      	adds	r5, #1
 80106bc:	429d      	cmp	r5, r3
 80106be:	d3c0      	bcc.n	8010642 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80106c0:	ea08 0000 	and.w	r0, r8, r0
 80106c4:	fa5f f880 	uxtb.w	r8, r0
 80106c8:	4640      	mov	r0, r8
 80106ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ce:	ea08 0800 	and.w	r8, r8, r0
 80106d2:	fa5f f888 	uxtb.w	r8, r8
 80106d6:	e7b6      	b.n	8010646 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80106d8:	6873      	ldr	r3, [r6, #4]
 80106da:	3501      	adds	r5, #1
 80106dc:	42ab      	cmp	r3, r5
 80106de:	f104 0418 	add.w	r4, r4, #24
 80106e2:	d891      	bhi.n	8010608 <uxr_serialize_AGENT_ActivityInfo+0x30>
 80106e4:	e7af      	b.n	8010646 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80106e6:	bf00      	nop

080106e8 <uxr_serialize_ActivityInfoVariant>:
 80106e8:	b570      	push	{r4, r5, r6, lr}
 80106ea:	460d      	mov	r5, r1
 80106ec:	7809      	ldrb	r1, [r1, #0]
 80106ee:	4606      	mov	r6, r0
 80106f0:	f7f8 f9ba 	bl	8008a68 <ucdr_serialize_uint8_t>
 80106f4:	b130      	cbz	r0, 8010704 <uxr_serialize_ActivityInfoVariant+0x1c>
 80106f6:	782b      	ldrb	r3, [r5, #0]
 80106f8:	2b06      	cmp	r3, #6
 80106fa:	d019      	beq.n	8010730 <uxr_serialize_ActivityInfoVariant+0x48>
 80106fc:	2b0d      	cmp	r3, #13
 80106fe:	d010      	beq.n	8010722 <uxr_serialize_ActivityInfoVariant+0x3a>
 8010700:	2b05      	cmp	r3, #5
 8010702:	d000      	beq.n	8010706 <uxr_serialize_ActivityInfoVariant+0x1e>
 8010704:	bd70      	pop	{r4, r5, r6, pc}
 8010706:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801070a:	4630      	mov	r0, r6
 801070c:	f7f8 fee8 	bl	80094e0 <ucdr_serialize_int16_t>
 8010710:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010714:	4604      	mov	r4, r0
 8010716:	4630      	mov	r0, r6
 8010718:	f7f8 fe12 	bl	8009340 <ucdr_serialize_uint64_t>
 801071c:	4020      	ands	r0, r4
 801071e:	b2c0      	uxtb	r0, r0
 8010720:	bd70      	pop	{r4, r5, r6, pc}
 8010722:	f105 0108 	add.w	r1, r5, #8
 8010726:	4630      	mov	r0, r6
 8010728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801072c:	f7ff bf54 	b.w	80105d8 <uxr_serialize_AGENT_ActivityInfo>
 8010730:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010734:	4630      	mov	r0, r6
 8010736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801073a:	f7f8 bed1 	b.w	80094e0 <ucdr_serialize_int16_t>
 801073e:	bf00      	nop

08010740 <uxr_deserialize_BaseObjectReply>:
 8010740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010744:	2202      	movs	r2, #2
 8010746:	4606      	mov	r6, r0
 8010748:	460f      	mov	r7, r1
 801074a:	f003 fc27 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 801074e:	2202      	movs	r2, #2
 8010750:	1cb9      	adds	r1, r7, #2
 8010752:	4605      	mov	r5, r0
 8010754:	4630      	mov	r0, r6
 8010756:	f003 fc21 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 801075a:	1d39      	adds	r1, r7, #4
 801075c:	4680      	mov	r8, r0
 801075e:	4630      	mov	r0, r6
 8010760:	f7f8 f998 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010764:	1d79      	adds	r1, r7, #5
 8010766:	4604      	mov	r4, r0
 8010768:	4630      	mov	r0, r6
 801076a:	f7f8 f993 	bl	8008a94 <ucdr_deserialize_uint8_t>
 801076e:	ea05 0508 	and.w	r5, r5, r8
 8010772:	402c      	ands	r4, r5
 8010774:	4020      	ands	r0, r4
 8010776:	b2c0      	uxtb	r0, r0
 8010778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801077c <uxr_serialize_ReadSpecification>:
 801077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010780:	460e      	mov	r6, r1
 8010782:	7809      	ldrb	r1, [r1, #0]
 8010784:	4607      	mov	r7, r0
 8010786:	f7f8 f96f 	bl	8008a68 <ucdr_serialize_uint8_t>
 801078a:	7871      	ldrb	r1, [r6, #1]
 801078c:	4604      	mov	r4, r0
 801078e:	4638      	mov	r0, r7
 8010790:	f7f8 f96a 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010794:	78b1      	ldrb	r1, [r6, #2]
 8010796:	4004      	ands	r4, r0
 8010798:	4638      	mov	r0, r7
 801079a:	f7f8 f935 	bl	8008a08 <ucdr_serialize_bool>
 801079e:	78b3      	ldrb	r3, [r6, #2]
 80107a0:	b2e4      	uxtb	r4, r4
 80107a2:	4004      	ands	r4, r0
 80107a4:	b94b      	cbnz	r3, 80107ba <uxr_serialize_ReadSpecification+0x3e>
 80107a6:	7a31      	ldrb	r1, [r6, #8]
 80107a8:	4638      	mov	r0, r7
 80107aa:	f7f8 f92d 	bl	8008a08 <ucdr_serialize_bool>
 80107ae:	7a33      	ldrb	r3, [r6, #8]
 80107b0:	4004      	ands	r4, r0
 80107b2:	b943      	cbnz	r3, 80107c6 <uxr_serialize_ReadSpecification+0x4a>
 80107b4:	4620      	mov	r0, r4
 80107b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ba:	6871      	ldr	r1, [r6, #4]
 80107bc:	4638      	mov	r0, r7
 80107be:	f003 fcfd 	bl	80141bc <ucdr_serialize_string>
 80107c2:	4004      	ands	r4, r0
 80107c4:	e7ef      	b.n	80107a6 <uxr_serialize_ReadSpecification+0x2a>
 80107c6:	8971      	ldrh	r1, [r6, #10]
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7f8 f979 	bl	8008ac0 <ucdr_serialize_uint16_t>
 80107ce:	89b1      	ldrh	r1, [r6, #12]
 80107d0:	4605      	mov	r5, r0
 80107d2:	4638      	mov	r0, r7
 80107d4:	f7f8 f974 	bl	8008ac0 <ucdr_serialize_uint16_t>
 80107d8:	89f1      	ldrh	r1, [r6, #14]
 80107da:	4005      	ands	r5, r0
 80107dc:	4638      	mov	r0, r7
 80107de:	f7f8 f96f 	bl	8008ac0 <ucdr_serialize_uint16_t>
 80107e2:	8a31      	ldrh	r1, [r6, #16]
 80107e4:	4680      	mov	r8, r0
 80107e6:	4638      	mov	r0, r7
 80107e8:	f7f8 f96a 	bl	8008ac0 <ucdr_serialize_uint16_t>
 80107ec:	b2ed      	uxtb	r5, r5
 80107ee:	4025      	ands	r5, r4
 80107f0:	ea08 0505 	and.w	r5, r8, r5
 80107f4:	ea00 0405 	and.w	r4, r0, r5
 80107f8:	4620      	mov	r0, r4
 80107fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107fe:	bf00      	nop

08010800 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010800:	f7ff ba3a 	b.w	800fc78 <uxr_serialize_CLIENT_Representation>

08010804 <uxr_serialize_CREATE_Payload>:
 8010804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010806:	2202      	movs	r2, #2
 8010808:	4606      	mov	r6, r0
 801080a:	460d      	mov	r5, r1
 801080c:	f003 fb62 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010810:	1ca9      	adds	r1, r5, #2
 8010812:	4604      	mov	r4, r0
 8010814:	2202      	movs	r2, #2
 8010816:	4630      	mov	r0, r6
 8010818:	f003 fb5c 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 801081c:	7929      	ldrb	r1, [r5, #4]
 801081e:	4607      	mov	r7, r0
 8010820:	4630      	mov	r0, r6
 8010822:	f7f8 f921 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010826:	b328      	cbz	r0, 8010874 <uxr_serialize_CREATE_Payload+0x70>
 8010828:	792b      	ldrb	r3, [r5, #4]
 801082a:	403c      	ands	r4, r7
 801082c:	3b01      	subs	r3, #1
 801082e:	b2e4      	uxtb	r4, r4
 8010830:	2b0d      	cmp	r3, #13
 8010832:	d81d      	bhi.n	8010870 <uxr_serialize_CREATE_Payload+0x6c>
 8010834:	e8df f003 	tbb	[pc, r3]
 8010838:	32320753 	.word	0x32320753
 801083c:	07070707 	.word	0x07070707
 8010840:	2121211c 	.word	0x2121211c
 8010844:	684c      	.short	0x684c
 8010846:	7a29      	ldrb	r1, [r5, #8]
 8010848:	4630      	mov	r0, r6
 801084a:	f7f8 f90d 	bl	8008a68 <ucdr_serialize_uint8_t>
 801084e:	4607      	mov	r7, r0
 8010850:	b130      	cbz	r0, 8010860 <uxr_serialize_CREATE_Payload+0x5c>
 8010852:	7a2b      	ldrb	r3, [r5, #8]
 8010854:	2b02      	cmp	r3, #2
 8010856:	d035      	beq.n	80108c4 <uxr_serialize_CREATE_Payload+0xc0>
 8010858:	2b03      	cmp	r3, #3
 801085a:	d02b      	beq.n	80108b4 <uxr_serialize_CREATE_Payload+0xb0>
 801085c:	2b01      	cmp	r3, #1
 801085e:	d031      	beq.n	80108c4 <uxr_serialize_CREATE_Payload+0xc0>
 8010860:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8010864:	4630      	mov	r0, r6
 8010866:	2202      	movs	r2, #2
 8010868:	f003 fb34 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 801086c:	4038      	ands	r0, r7
 801086e:	4004      	ands	r4, r0
 8010870:	4620      	mov	r0, r4
 8010872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010874:	2400      	movs	r4, #0
 8010876:	4620      	mov	r0, r4
 8010878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801087a:	7a29      	ldrb	r1, [r5, #8]
 801087c:	4630      	mov	r0, r6
 801087e:	f7f8 f8f3 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010882:	2800      	cmp	r0, #0
 8010884:	d0f6      	beq.n	8010874 <uxr_serialize_CREATE_Payload+0x70>
 8010886:	7a2b      	ldrb	r3, [r5, #8]
 8010888:	2b01      	cmp	r3, #1
 801088a:	d001      	beq.n	8010890 <uxr_serialize_CREATE_Payload+0x8c>
 801088c:	2b02      	cmp	r3, #2
 801088e:	d1ef      	bne.n	8010870 <uxr_serialize_CREATE_Payload+0x6c>
 8010890:	68e9      	ldr	r1, [r5, #12]
 8010892:	4630      	mov	r0, r6
 8010894:	f003 fc92 	bl	80141bc <ucdr_serialize_string>
 8010898:	4004      	ands	r4, r0
 801089a:	e7e9      	b.n	8010870 <uxr_serialize_CREATE_Payload+0x6c>
 801089c:	7a29      	ldrb	r1, [r5, #8]
 801089e:	4630      	mov	r0, r6
 80108a0:	f7f8 f8e2 	bl	8008a68 <ucdr_serialize_uint8_t>
 80108a4:	4607      	mov	r7, r0
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d0da      	beq.n	8010860 <uxr_serialize_CREATE_Payload+0x5c>
 80108aa:	7a2b      	ldrb	r3, [r5, #8]
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d009      	beq.n	80108c4 <uxr_serialize_CREATE_Payload+0xc0>
 80108b0:	2b03      	cmp	r3, #3
 80108b2:	d1d5      	bne.n	8010860 <uxr_serialize_CREATE_Payload+0x5c>
 80108b4:	68ea      	ldr	r2, [r5, #12]
 80108b6:	f105 0110 	add.w	r1, r5, #16
 80108ba:	4630      	mov	r0, r6
 80108bc:	f7fc fc58 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 80108c0:	4607      	mov	r7, r0
 80108c2:	e7cd      	b.n	8010860 <uxr_serialize_CREATE_Payload+0x5c>
 80108c4:	68e9      	ldr	r1, [r5, #12]
 80108c6:	4630      	mov	r0, r6
 80108c8:	f003 fc78 	bl	80141bc <ucdr_serialize_string>
 80108cc:	4607      	mov	r7, r0
 80108ce:	e7c7      	b.n	8010860 <uxr_serialize_CREATE_Payload+0x5c>
 80108d0:	f105 0108 	add.w	r1, r5, #8
 80108d4:	4630      	mov	r0, r6
 80108d6:	f7ff fa95 	bl	800fe04 <uxr_serialize_AGENT_Representation>
 80108da:	4004      	ands	r4, r0
 80108dc:	e7c8      	b.n	8010870 <uxr_serialize_CREATE_Payload+0x6c>
 80108de:	7a29      	ldrb	r1, [r5, #8]
 80108e0:	4630      	mov	r0, r6
 80108e2:	f7f8 f8c1 	bl	8008a68 <ucdr_serialize_uint8_t>
 80108e6:	4607      	mov	r7, r0
 80108e8:	b130      	cbz	r0, 80108f8 <uxr_serialize_CREATE_Payload+0xf4>
 80108ea:	7a2b      	ldrb	r3, [r5, #8]
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d012      	beq.n	8010916 <uxr_serialize_CREATE_Payload+0x112>
 80108f0:	2b03      	cmp	r3, #3
 80108f2:	d016      	beq.n	8010922 <uxr_serialize_CREATE_Payload+0x11e>
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d00e      	beq.n	8010916 <uxr_serialize_CREATE_Payload+0x112>
 80108f8:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 80108fc:	4630      	mov	r0, r6
 80108fe:	f7f8 fdef 	bl	80094e0 <ucdr_serialize_int16_t>
 8010902:	4038      	ands	r0, r7
 8010904:	4004      	ands	r4, r0
 8010906:	e7b3      	b.n	8010870 <uxr_serialize_CREATE_Payload+0x6c>
 8010908:	f105 0108 	add.w	r1, r5, #8
 801090c:	4630      	mov	r0, r6
 801090e:	f7ff f9b3 	bl	800fc78 <uxr_serialize_CLIENT_Representation>
 8010912:	4004      	ands	r4, r0
 8010914:	e7ac      	b.n	8010870 <uxr_serialize_CREATE_Payload+0x6c>
 8010916:	68e9      	ldr	r1, [r5, #12]
 8010918:	4630      	mov	r0, r6
 801091a:	f003 fc4f 	bl	80141bc <ucdr_serialize_string>
 801091e:	4607      	mov	r7, r0
 8010920:	e7ea      	b.n	80108f8 <uxr_serialize_CREATE_Payload+0xf4>
 8010922:	68ea      	ldr	r2, [r5, #12]
 8010924:	f105 0110 	add.w	r1, r5, #16
 8010928:	4630      	mov	r0, r6
 801092a:	f7fc fc21 	bl	800d170 <ucdr_serialize_sequence_uint8_t>
 801092e:	4607      	mov	r7, r0
 8010930:	e7e2      	b.n	80108f8 <uxr_serialize_CREATE_Payload+0xf4>
 8010932:	bf00      	nop

08010934 <uxr_deserialize_GET_INFO_Payload>:
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	2202      	movs	r2, #2
 8010938:	4605      	mov	r5, r0
 801093a:	460e      	mov	r6, r1
 801093c:	f003 fb2e 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010940:	1cb1      	adds	r1, r6, #2
 8010942:	2202      	movs	r2, #2
 8010944:	4604      	mov	r4, r0
 8010946:	4628      	mov	r0, r5
 8010948:	f003 fb28 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 801094c:	1d31      	adds	r1, r6, #4
 801094e:	4004      	ands	r4, r0
 8010950:	4628      	mov	r0, r5
 8010952:	f7f8 fbcf 	bl	80090f4 <ucdr_deserialize_uint32_t>
 8010956:	b2e4      	uxtb	r4, r4
 8010958:	4020      	ands	r0, r4
 801095a:	bd70      	pop	{r4, r5, r6, pc}

0801095c <uxr_serialize_DELETE_Payload>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	2202      	movs	r2, #2
 8010960:	4605      	mov	r5, r0
 8010962:	460e      	mov	r6, r1
 8010964:	f003 fab6 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010968:	1cb1      	adds	r1, r6, #2
 801096a:	4604      	mov	r4, r0
 801096c:	2202      	movs	r2, #2
 801096e:	4628      	mov	r0, r5
 8010970:	f003 fab0 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010974:	4020      	ands	r0, r4
 8010976:	b2c0      	uxtb	r0, r0
 8010978:	bd70      	pop	{r4, r5, r6, pc}
 801097a:	bf00      	nop

0801097c <uxr_deserialize_STATUS_AGENT_Payload>:
 801097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010980:	4606      	mov	r6, r0
 8010982:	460f      	mov	r7, r1
 8010984:	f7f8 f886 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010988:	1c79      	adds	r1, r7, #1
 801098a:	4605      	mov	r5, r0
 801098c:	4630      	mov	r0, r6
 801098e:	f7f8 f881 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010992:	1d39      	adds	r1, r7, #4
 8010994:	4681      	mov	r9, r0
 8010996:	2204      	movs	r2, #4
 8010998:	4630      	mov	r0, r6
 801099a:	f003 faff 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 801099e:	f107 0108 	add.w	r1, r7, #8
 80109a2:	4604      	mov	r4, r0
 80109a4:	2202      	movs	r2, #2
 80109a6:	4630      	mov	r0, r6
 80109a8:	f003 faf8 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80109ac:	f107 010a 	add.w	r1, r7, #10
 80109b0:	4680      	mov	r8, r0
 80109b2:	2202      	movs	r2, #2
 80109b4:	4630      	mov	r0, r6
 80109b6:	f003 faf1 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80109ba:	ea05 0509 	and.w	r5, r5, r9
 80109be:	b2ed      	uxtb	r5, r5
 80109c0:	402c      	ands	r4, r5
 80109c2:	f107 010c 	add.w	r1, r7, #12
 80109c6:	4605      	mov	r5, r0
 80109c8:	4630      	mov	r0, r6
 80109ca:	f7f8 f833 	bl	8008a34 <ucdr_deserialize_bool>
 80109ce:	ea08 0404 	and.w	r4, r8, r4
 80109d2:	4025      	ands	r5, r4
 80109d4:	4028      	ands	r0, r5
 80109d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109da:	bf00      	nop

080109dc <uxr_deserialize_STATUS_Payload>:
 80109dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e0:	2202      	movs	r2, #2
 80109e2:	4606      	mov	r6, r0
 80109e4:	460f      	mov	r7, r1
 80109e6:	f003 fad9 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80109ea:	2202      	movs	r2, #2
 80109ec:	1cb9      	adds	r1, r7, #2
 80109ee:	4605      	mov	r5, r0
 80109f0:	4630      	mov	r0, r6
 80109f2:	f003 fad3 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80109f6:	1d39      	adds	r1, r7, #4
 80109f8:	4680      	mov	r8, r0
 80109fa:	4630      	mov	r0, r6
 80109fc:	f7f8 f84a 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010a00:	1d79      	adds	r1, r7, #5
 8010a02:	4604      	mov	r4, r0
 8010a04:	4630      	mov	r0, r6
 8010a06:	f7f8 f845 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010a0a:	ea05 0508 	and.w	r5, r5, r8
 8010a0e:	402c      	ands	r4, r5
 8010a10:	4020      	ands	r0, r4
 8010a12:	b2c0      	uxtb	r0, r0
 8010a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a18 <uxr_serialize_INFO_Payload>:
 8010a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1c:	2202      	movs	r2, #2
 8010a1e:	460c      	mov	r4, r1
 8010a20:	4605      	mov	r5, r0
 8010a22:	f003 fa57 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010a26:	2202      	movs	r2, #2
 8010a28:	4680      	mov	r8, r0
 8010a2a:	1ca1      	adds	r1, r4, #2
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	f003 fa51 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010a32:	7921      	ldrb	r1, [r4, #4]
 8010a34:	4607      	mov	r7, r0
 8010a36:	4628      	mov	r0, r5
 8010a38:	f7f8 f816 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010a3c:	7961      	ldrb	r1, [r4, #5]
 8010a3e:	4606      	mov	r6, r0
 8010a40:	4628      	mov	r0, r5
 8010a42:	f7f8 f811 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010a46:	ea08 0807 	and.w	r8, r8, r7
 8010a4a:	ea06 0608 	and.w	r6, r6, r8
 8010a4e:	4006      	ands	r6, r0
 8010a50:	7a21      	ldrb	r1, [r4, #8]
 8010a52:	4628      	mov	r0, r5
 8010a54:	f7f7 ffd8 	bl	8008a08 <ucdr_serialize_bool>
 8010a58:	7a23      	ldrb	r3, [r4, #8]
 8010a5a:	b2f7      	uxtb	r7, r6
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	b96b      	cbnz	r3, 8010a7c <uxr_serialize_INFO_Payload+0x64>
 8010a60:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010a64:	4628      	mov	r0, r5
 8010a66:	f7f7 ffcf 	bl	8008a08 <ucdr_serialize_bool>
 8010a6a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010a6e:	4030      	ands	r0, r6
 8010a70:	b2c6      	uxtb	r6, r0
 8010a72:	b983      	cbnz	r3, 8010a96 <uxr_serialize_INFO_Payload+0x7e>
 8010a74:	ea06 0007 	and.w	r0, r6, r7
 8010a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7c:	7b21      	ldrb	r1, [r4, #12]
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f7f7 fff2 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010a84:	b188      	cbz	r0, 8010aaa <uxr_serialize_INFO_Payload+0x92>
 8010a86:	f104 010c 	add.w	r1, r4, #12
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	f7ff fa06 	bl	800fe9c <uxr_serialize_ObjectVariant.part.0>
 8010a90:	4030      	ands	r0, r6
 8010a92:	b2c6      	uxtb	r6, r0
 8010a94:	e7e4      	b.n	8010a60 <uxr_serialize_INFO_Payload+0x48>
 8010a96:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f7ff fe24 	bl	80106e8 <uxr_serialize_ActivityInfoVariant>
 8010aa0:	4006      	ands	r6, r0
 8010aa2:	ea06 0007 	and.w	r0, r6, r7
 8010aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aaa:	4606      	mov	r6, r0
 8010aac:	e7d8      	b.n	8010a60 <uxr_serialize_INFO_Payload+0x48>
 8010aae:	bf00      	nop

08010ab0 <uxr_serialize_READ_DATA_Payload>:
 8010ab0:	b570      	push	{r4, r5, r6, lr}
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	4605      	mov	r5, r0
 8010ab6:	460e      	mov	r6, r1
 8010ab8:	f003 fa0c 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010abc:	1cb1      	adds	r1, r6, #2
 8010abe:	2202      	movs	r2, #2
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f003 fa06 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010ac8:	1d31      	adds	r1, r6, #4
 8010aca:	4004      	ands	r4, r0
 8010acc:	4628      	mov	r0, r5
 8010ace:	f7ff fe55 	bl	801077c <uxr_serialize_ReadSpecification>
 8010ad2:	b2e4      	uxtb	r4, r4
 8010ad4:	4020      	ands	r0, r4
 8010ad6:	bd70      	pop	{r4, r5, r6, pc}

08010ad8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	2202      	movs	r2, #2
 8010adc:	4605      	mov	r5, r0
 8010ade:	460e      	mov	r6, r1
 8010ae0:	f003 f9f8 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010ae4:	1cb1      	adds	r1, r6, #2
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	2202      	movs	r2, #2
 8010aea:	4628      	mov	r0, r5
 8010aec:	f003 f9f2 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010af0:	4020      	ands	r0, r4
 8010af2:	b2c0      	uxtb	r0, r0
 8010af4:	bd70      	pop	{r4, r5, r6, pc}
 8010af6:	bf00      	nop

08010af8 <uxr_serialize_ACKNACK_Payload>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	460f      	mov	r7, r1
 8010afc:	460e      	mov	r6, r1
 8010afe:	f837 1b02 	ldrh.w	r1, [r7], #2
 8010b02:	4605      	mov	r5, r0
 8010b04:	f7f7 ffdc 	bl	8008ac0 <ucdr_serialize_uint16_t>
 8010b08:	4639      	mov	r1, r7
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	4628      	mov	r0, r5
 8010b10:	f003 f9e0 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010b14:	7931      	ldrb	r1, [r6, #4]
 8010b16:	4004      	ands	r4, r0
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f7f7 ffa5 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010b1e:	b2e4      	uxtb	r4, r4
 8010b20:	4020      	ands	r0, r4
 8010b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b24 <uxr_deserialize_ACKNACK_Payload>:
 8010b24:	b570      	push	{r4, r5, r6, lr}
 8010b26:	4605      	mov	r5, r0
 8010b28:	460e      	mov	r6, r1
 8010b2a:	f7f8 f8c9 	bl	8008cc0 <ucdr_deserialize_uint16_t>
 8010b2e:	1cb1      	adds	r1, r6, #2
 8010b30:	2202      	movs	r2, #2
 8010b32:	4604      	mov	r4, r0
 8010b34:	4628      	mov	r0, r5
 8010b36:	f003 fa31 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010b3a:	1d31      	adds	r1, r6, #4
 8010b3c:	4004      	ands	r4, r0
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f7f7 ffa8 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010b44:	b2e4      	uxtb	r4, r4
 8010b46:	4020      	ands	r0, r4
 8010b48:	bd70      	pop	{r4, r5, r6, pc}
 8010b4a:	bf00      	nop

08010b4c <uxr_serialize_HEARTBEAT_Payload>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	460d      	mov	r5, r1
 8010b50:	8809      	ldrh	r1, [r1, #0]
 8010b52:	4606      	mov	r6, r0
 8010b54:	f7f7 ffb4 	bl	8008ac0 <ucdr_serialize_uint16_t>
 8010b58:	8869      	ldrh	r1, [r5, #2]
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7f7 ffaf 	bl	8008ac0 <ucdr_serialize_uint16_t>
 8010b62:	7929      	ldrb	r1, [r5, #4]
 8010b64:	4004      	ands	r4, r0
 8010b66:	4630      	mov	r0, r6
 8010b68:	f7f7 ff7e 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010b6c:	b2e4      	uxtb	r4, r4
 8010b6e:	4020      	ands	r0, r4
 8010b70:	bd70      	pop	{r4, r5, r6, pc}
 8010b72:	bf00      	nop

08010b74 <uxr_deserialize_HEARTBEAT_Payload>:
 8010b74:	b570      	push	{r4, r5, r6, lr}
 8010b76:	4605      	mov	r5, r0
 8010b78:	460e      	mov	r6, r1
 8010b7a:	f7f8 f8a1 	bl	8008cc0 <ucdr_deserialize_uint16_t>
 8010b7e:	1cb1      	adds	r1, r6, #2
 8010b80:	4604      	mov	r4, r0
 8010b82:	4628      	mov	r0, r5
 8010b84:	f7f8 f89c 	bl	8008cc0 <ucdr_deserialize_uint16_t>
 8010b88:	1d31      	adds	r1, r6, #4
 8010b8a:	4004      	ands	r4, r0
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f7f7 ff81 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010b92:	b2e4      	uxtb	r4, r4
 8010b94:	4020      	ands	r0, r4
 8010b96:	bd70      	pop	{r4, r5, r6, pc}

08010b98 <uxr_serialize_TIMESTAMP_Payload>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	460d      	mov	r5, r1
 8010b9c:	6809      	ldr	r1, [r1, #0]
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	f7f8 fd92 	bl	80096c8 <ucdr_serialize_int32_t>
 8010ba4:	6869      	ldr	r1, [r5, #4]
 8010ba6:	4604      	mov	r4, r0
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f7f8 f973 	bl	8008e94 <ucdr_serialize_uint32_t>
 8010bae:	4020      	ands	r0, r4
 8010bb0:	b2c0      	uxtb	r0, r0
 8010bb2:	bd70      	pop	{r4, r5, r6, pc}

08010bb4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb8:	4605      	mov	r5, r0
 8010bba:	460e      	mov	r6, r1
 8010bbc:	f7f8 fe1c 	bl	80097f8 <ucdr_deserialize_int32_t>
 8010bc0:	1d31      	adds	r1, r6, #4
 8010bc2:	4607      	mov	r7, r0
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	f7f8 fa95 	bl	80090f4 <ucdr_deserialize_uint32_t>
 8010bca:	f106 0108 	add.w	r1, r6, #8
 8010bce:	4680      	mov	r8, r0
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	f7f8 fe11 	bl	80097f8 <ucdr_deserialize_int32_t>
 8010bd6:	f106 010c 	add.w	r1, r6, #12
 8010bda:	4604      	mov	r4, r0
 8010bdc:	4628      	mov	r0, r5
 8010bde:	f7f8 fa89 	bl	80090f4 <ucdr_deserialize_uint32_t>
 8010be2:	ea07 0708 	and.w	r7, r7, r8
 8010be6:	403c      	ands	r4, r7
 8010be8:	f106 0110 	add.w	r1, r6, #16
 8010bec:	4004      	ands	r4, r0
 8010bee:	4628      	mov	r0, r5
 8010bf0:	f7f8 fe02 	bl	80097f8 <ucdr_deserialize_int32_t>
 8010bf4:	f106 0114 	add.w	r1, r6, #20
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	461d      	mov	r5, r3
 8010bfe:	f7f8 fa79 	bl	80090f4 <ucdr_deserialize_uint32_t>
 8010c02:	b2e4      	uxtb	r4, r4
 8010c04:	402c      	ands	r4, r5
 8010c06:	4020      	ands	r0, r4
 8010c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c0c <uxr_serialize_SampleIdentity>:
 8010c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c10:	220c      	movs	r2, #12
 8010c12:	4604      	mov	r4, r0
 8010c14:	460d      	mov	r5, r1
 8010c16:	f003 f95d 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010c1a:	2203      	movs	r2, #3
 8010c1c:	f105 010c 	add.w	r1, r5, #12
 8010c20:	4607      	mov	r7, r0
 8010c22:	4620      	mov	r0, r4
 8010c24:	f003 f956 	bl	8013ed4 <ucdr_serialize_array_uint8_t>
 8010c28:	7be9      	ldrb	r1, [r5, #15]
 8010c2a:	4680      	mov	r8, r0
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f7f7 ff1b 	bl	8008a68 <ucdr_serialize_uint8_t>
 8010c32:	6929      	ldr	r1, [r5, #16]
 8010c34:	4606      	mov	r6, r0
 8010c36:	4620      	mov	r0, r4
 8010c38:	f7f8 fd46 	bl	80096c8 <ucdr_serialize_int32_t>
 8010c3c:	6969      	ldr	r1, [r5, #20]
 8010c3e:	4603      	mov	r3, r0
 8010c40:	4620      	mov	r0, r4
 8010c42:	ea07 0708 	and.w	r7, r7, r8
 8010c46:	461c      	mov	r4, r3
 8010c48:	f7f8 f924 	bl	8008e94 <ucdr_serialize_uint32_t>
 8010c4c:	403e      	ands	r6, r7
 8010c4e:	4034      	ands	r4, r6
 8010c50:	4020      	ands	r0, r4
 8010c52:	b2c0      	uxtb	r0, r0
 8010c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c58 <uxr_deserialize_SampleIdentity>:
 8010c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5c:	220c      	movs	r2, #12
 8010c5e:	4604      	mov	r4, r0
 8010c60:	460d      	mov	r5, r1
 8010c62:	f003 f99b 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010c66:	2203      	movs	r2, #3
 8010c68:	f105 010c 	add.w	r1, r5, #12
 8010c6c:	4607      	mov	r7, r0
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f003 f994 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8010c74:	f105 010f 	add.w	r1, r5, #15
 8010c78:	4680      	mov	r8, r0
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	f7f7 ff0a 	bl	8008a94 <ucdr_deserialize_uint8_t>
 8010c80:	f105 0110 	add.w	r1, r5, #16
 8010c84:	4606      	mov	r6, r0
 8010c86:	4620      	mov	r0, r4
 8010c88:	f7f8 fdb6 	bl	80097f8 <ucdr_deserialize_int32_t>
 8010c8c:	f105 0114 	add.w	r1, r5, #20
 8010c90:	4603      	mov	r3, r0
 8010c92:	4620      	mov	r0, r4
 8010c94:	ea07 0708 	and.w	r7, r7, r8
 8010c98:	461c      	mov	r4, r3
 8010c9a:	f7f8 fa2b 	bl	80090f4 <ucdr_deserialize_uint32_t>
 8010c9e:	403e      	ands	r6, r7
 8010ca0:	4034      	ands	r4, r6
 8010ca2:	4020      	ands	r0, r4
 8010ca4:	b2c0      	uxtb	r0, r0
 8010ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010caa:	bf00      	nop

08010cac <rcl_client_get_rmw_handle>:
 8010cac:	b110      	cbz	r0, 8010cb4 <rcl_client_get_rmw_handle+0x8>
 8010cae:	6800      	ldr	r0, [r0, #0]
 8010cb0:	b100      	cbz	r0, 8010cb4 <rcl_client_get_rmw_handle+0x8>
 8010cb2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <rcl_take_response>:
 8010cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cba:	460e      	mov	r6, r1
 8010cbc:	460c      	mov	r4, r1
 8010cbe:	4607      	mov	r7, r0
 8010cc0:	4694      	mov	ip, r2
 8010cc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010cc4:	b08d      	sub	sp, #52	@ 0x34
 8010cc6:	ad06      	add	r5, sp, #24
 8010cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cca:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010cce:	e885 0003 	stmia.w	r5, {r0, r1}
 8010cd2:	b337      	cbz	r7, 8010d22 <rcl_take_response+0x6a>
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	b323      	cbz	r3, 8010d22 <rcl_take_response+0x6a>
 8010cd8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010cda:	b310      	cbz	r0, 8010d22 <rcl_take_response+0x6a>
 8010cdc:	4662      	mov	r2, ip
 8010cde:	b31a      	cbz	r2, 8010d28 <rcl_take_response+0x70>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	2600      	movs	r6, #0
 8010ce4:	2700      	movs	r7, #0
 8010ce6:	f88d 3007 	strb.w	r3, [sp, #7]
 8010cea:	a902      	add	r1, sp, #8
 8010cec:	f10d 0307 	add.w	r3, sp, #7
 8010cf0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010cf4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010cf8:	f002 fe9e 	bl	8013a38 <rmw_take_response>
 8010cfc:	4606      	mov	r6, r0
 8010cfe:	b9a8      	cbnz	r0, 8010d2c <rcl_take_response+0x74>
 8010d00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d04:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010d08:	2a00      	cmp	r2, #0
 8010d0a:	bf08      	it	eq
 8010d0c:	461e      	moveq	r6, r3
 8010d0e:	ad06      	add	r5, sp, #24
 8010d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010d18:	e884 0003 	stmia.w	r4, {r0, r1}
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	b00d      	add	sp, #52	@ 0x34
 8010d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d22:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010d26:	e7f2      	b.n	8010d0e <rcl_take_response+0x56>
 8010d28:	260b      	movs	r6, #11
 8010d2a:	e7f0      	b.n	8010d0e <rcl_take_response+0x56>
 8010d2c:	2601      	movs	r6, #1
 8010d2e:	e7ee      	b.n	8010d0e <rcl_take_response+0x56>

08010d30 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010d30:	280b      	cmp	r0, #11
 8010d32:	dc0d      	bgt.n	8010d50 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	db09      	blt.n	8010d4c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010d38:	280b      	cmp	r0, #11
 8010d3a:	d807      	bhi.n	8010d4c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010d3c:	e8df f000 	tbb	[pc, r0]
 8010d40:	07060607 	.word	0x07060607
 8010d44:	06060606 	.word	0x06060606
 8010d48:	07070606 	.word	0x07070606
 8010d4c:	2001      	movs	r0, #1
 8010d4e:	4770      	bx	lr
 8010d50:	28cb      	cmp	r0, #203	@ 0xcb
 8010d52:	bf18      	it	ne
 8010d54:	2001      	movne	r0, #1
 8010d56:	4770      	bx	lr

08010d58 <rcl_get_zero_initialized_context>:
 8010d58:	4a03      	ldr	r2, [pc, #12]	@ (8010d68 <rcl_get_zero_initialized_context+0x10>)
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d60:	e883 0003 	stmia.w	r3, {r0, r1}
 8010d64:	4618      	mov	r0, r3
 8010d66:	4770      	bx	lr
 8010d68:	08016d8c 	.word	0x08016d8c

08010d6c <rcl_context_is_valid>:
 8010d6c:	b118      	cbz	r0, 8010d76 <rcl_context_is_valid+0xa>
 8010d6e:	6840      	ldr	r0, [r0, #4]
 8010d70:	3800      	subs	r0, #0
 8010d72:	bf18      	it	ne
 8010d74:	2001      	movne	r0, #1
 8010d76:	4770      	bx	lr

08010d78 <__cleanup_context>:
 8010d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	6800      	ldr	r0, [r0, #0]
 8010d80:	2300      	movs	r3, #0
 8010d82:	6073      	str	r3, [r6, #4]
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d04d      	beq.n	8010e24 <__cleanup_context+0xac>
 8010d88:	6947      	ldr	r7, [r0, #20]
 8010d8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010d8e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010d92:	b137      	cbz	r7, 8010da2 <__cleanup_context+0x2a>
 8010d94:	3014      	adds	r0, #20
 8010d96:	f7f9 fa0b 	bl	800a1b0 <rcl_init_options_fini>
 8010d9a:	4607      	mov	r7, r0
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d148      	bne.n	8010e32 <__cleanup_context+0xba>
 8010da0:	6830      	ldr	r0, [r6, #0]
 8010da2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010da4:	b143      	cbz	r3, 8010db8 <__cleanup_context+0x40>
 8010da6:	3028      	adds	r0, #40	@ 0x28
 8010da8:	f7fa ff1e 	bl	800bbe8 <rmw_context_fini>
 8010dac:	b118      	cbz	r0, 8010db6 <__cleanup_context+0x3e>
 8010dae:	2f00      	cmp	r7, #0
 8010db0:	d042      	beq.n	8010e38 <__cleanup_context+0xc0>
 8010db2:	f7fa faa7 	bl	800b304 <rcutils_reset_error>
 8010db6:	6830      	ldr	r0, [r6, #0]
 8010db8:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8010dbc:	f1bc 0f00 	cmp.w	ip, #0
 8010dc0:	d01c      	beq.n	8010dfc <__cleanup_context+0x84>
 8010dc2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010dc6:	2a01      	cmp	r2, #1
 8010dc8:	f173 0100 	sbcs.w	r1, r3, #0
 8010dcc:	db12      	blt.n	8010df4 <__cleanup_context+0x7c>
 8010dce:	2400      	movs	r4, #0
 8010dd0:	2500      	movs	r5, #0
 8010dd2:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8010dd6:	4649      	mov	r1, r9
 8010dd8:	b1c0      	cbz	r0, 8010e0c <__cleanup_context+0x94>
 8010dda:	47c0      	blx	r8
 8010ddc:	6831      	ldr	r1, [r6, #0]
 8010dde:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8010de2:	3401      	adds	r4, #1
 8010de4:	f145 0500 	adc.w	r5, r5, #0
 8010de8:	4294      	cmp	r4, r2
 8010dea:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8010dee:	eb75 0103 	sbcs.w	r1, r5, r3
 8010df2:	dbee      	blt.n	8010dd2 <__cleanup_context+0x5a>
 8010df4:	4660      	mov	r0, ip
 8010df6:	4649      	mov	r1, r9
 8010df8:	47c0      	blx	r8
 8010dfa:	6830      	ldr	r0, [r6, #0]
 8010dfc:	4649      	mov	r1, r9
 8010dfe:	47c0      	blx	r8
 8010e00:	2300      	movs	r3, #0
 8010e02:	e9c6 3300 	strd	r3, r3, [r6]
 8010e06:	4638      	mov	r0, r7
 8010e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0c:	3401      	adds	r4, #1
 8010e0e:	f145 0500 	adc.w	r5, r5, #0
 8010e12:	4294      	cmp	r4, r2
 8010e14:	eb75 0103 	sbcs.w	r1, r5, r3
 8010e18:	dbdb      	blt.n	8010dd2 <__cleanup_context+0x5a>
 8010e1a:	4660      	mov	r0, ip
 8010e1c:	4649      	mov	r1, r9
 8010e1e:	47c0      	blx	r8
 8010e20:	6830      	ldr	r0, [r6, #0]
 8010e22:	e7eb      	b.n	8010dfc <__cleanup_context+0x84>
 8010e24:	4607      	mov	r7, r0
 8010e26:	2300      	movs	r3, #0
 8010e28:	e9c6 3300 	strd	r3, r3, [r6]
 8010e2c:	4638      	mov	r0, r7
 8010e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e32:	f7fa fa67 	bl	800b304 <rcutils_reset_error>
 8010e36:	e7b3      	b.n	8010da0 <__cleanup_context+0x28>
 8010e38:	f7ff ff7a 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 8010e3c:	4607      	mov	r7, r0
 8010e3e:	e7b8      	b.n	8010db2 <__cleanup_context+0x3a>

08010e40 <rcl_expand_topic_name>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	b08b      	sub	sp, #44	@ 0x2c
 8010e46:	9306      	str	r3, [sp, #24]
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	f000 80d2 	beq.w	8010ff2 <rcl_expand_topic_name+0x1b2>
 8010e4e:	460e      	mov	r6, r1
 8010e50:	2900      	cmp	r1, #0
 8010e52:	f000 80ce 	beq.w	8010ff2 <rcl_expand_topic_name+0x1b2>
 8010e56:	4617      	mov	r7, r2
 8010e58:	2a00      	cmp	r2, #0
 8010e5a:	f000 80ca 	beq.w	8010ff2 <rcl_expand_topic_name+0x1b2>
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 80c7 	beq.w	8010ff2 <rcl_expand_topic_name+0x1b2>
 8010e64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f000 80c3 	beq.w	8010ff2 <rcl_expand_topic_name+0x1b2>
 8010e6c:	a909      	add	r1, sp, #36	@ 0x24
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4680      	mov	r8, r0
 8010e72:	f001 f995 	bl	80121a0 <rcl_validate_topic_name>
 8010e76:	4604      	mov	r4, r0
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	f040 80b6 	bne.w	8010fea <rcl_expand_topic_name+0x1aa>
 8010e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f040 80bf 	bne.w	8011004 <rcl_expand_topic_name+0x1c4>
 8010e86:	4602      	mov	r2, r0
 8010e88:	a909      	add	r1, sp, #36	@ 0x24
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f002 faf6 	bl	801347c <rmw_validate_node_name>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	f040 80b3 	bne.w	8010ffc <rcl_expand_topic_name+0x1bc>
 8010e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	f040 80b8 	bne.w	801100e <rcl_expand_topic_name+0x1ce>
 8010e9e:	a909      	add	r1, sp, #36	@ 0x24
 8010ea0:	4638      	mov	r0, r7
 8010ea2:	f002 facd 	bl	8013440 <rmw_validate_namespace>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f040 80a8 	bne.w	8010ffc <rcl_expand_topic_name+0x1bc>
 8010eac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010eae:	2c00      	cmp	r4, #0
 8010eb0:	f040 80f6 	bne.w	80110a0 <rcl_expand_topic_name+0x260>
 8010eb4:	217b      	movs	r1, #123	@ 0x7b
 8010eb6:	4640      	mov	r0, r8
 8010eb8:	f004 fc4a 	bl	8015750 <strchr>
 8010ebc:	f898 3000 	ldrb.w	r3, [r8]
 8010ec0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	f000 80c4 	beq.w	8011050 <rcl_expand_topic_name+0x210>
 8010ec8:	2b7e      	cmp	r3, #126	@ 0x7e
 8010eca:	d16f      	bne.n	8010fac <rcl_expand_topic_name+0x16c>
 8010ecc:	4638      	mov	r0, r7
 8010ece:	f7ef f9b1 	bl	8000234 <strlen>
 8010ed2:	4b87      	ldr	r3, [pc, #540]	@ (80110f0 <rcl_expand_topic_name+0x2b0>)
 8010ed4:	4987      	ldr	r1, [pc, #540]	@ (80110f4 <rcl_expand_topic_name+0x2b4>)
 8010ed6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010ed8:	9604      	str	r6, [sp, #16]
 8010eda:	2801      	cmp	r0, #1
 8010edc:	bf0c      	ite	eq
 8010ede:	4618      	moveq	r0, r3
 8010ee0:	4608      	movne	r0, r1
 8010ee2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010ee6:	e9cd 2300 	strd	r2, r3, [sp]
 8010eea:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8010eee:	f108 0101 	add.w	r1, r8, #1
 8010ef2:	9105      	str	r1, [sp, #20]
 8010ef4:	ab14      	add	r3, sp, #80	@ 0x50
 8010ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ef8:	f002 f8e4 	bl	80130c4 <rcutils_format_string_limit>
 8010efc:	4682      	mov	sl, r0
 8010efe:	2800      	cmp	r0, #0
 8010f00:	f000 80d0 	beq.w	80110a4 <rcl_expand_topic_name+0x264>
 8010f04:	2d00      	cmp	r5, #0
 8010f06:	f000 80aa 	beq.w	801105e <rcl_expand_topic_name+0x21e>
 8010f0a:	217b      	movs	r1, #123	@ 0x7b
 8010f0c:	f004 fc20 	bl	8015750 <strchr>
 8010f10:	46d1      	mov	r9, sl
 8010f12:	4605      	mov	r5, r0
 8010f14:	9407      	str	r4, [sp, #28]
 8010f16:	46d3      	mov	fp, sl
 8010f18:	464c      	mov	r4, r9
 8010f1a:	2d00      	cmp	r5, #0
 8010f1c:	f000 80c7 	beq.w	80110ae <rcl_expand_topic_name+0x26e>
 8010f20:	217d      	movs	r1, #125	@ 0x7d
 8010f22:	4620      	mov	r0, r4
 8010f24:	f004 fc14 	bl	8015750 <strchr>
 8010f28:	eba0 0905 	sub.w	r9, r0, r5
 8010f2c:	f109 0a01 	add.w	sl, r9, #1
 8010f30:	4871      	ldr	r0, [pc, #452]	@ (80110f8 <rcl_expand_topic_name+0x2b8>)
 8010f32:	4652      	mov	r2, sl
 8010f34:	4629      	mov	r1, r5
 8010f36:	f004 fc18 	bl	801576a <strncmp>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	f000 808d 	beq.w	801105a <rcl_expand_topic_name+0x21a>
 8010f40:	486e      	ldr	r0, [pc, #440]	@ (80110fc <rcl_expand_topic_name+0x2bc>)
 8010f42:	4652      	mov	r2, sl
 8010f44:	4629      	mov	r1, r5
 8010f46:	f004 fc10 	bl	801576a <strncmp>
 8010f4a:	b130      	cbz	r0, 8010f5a <rcl_expand_topic_name+0x11a>
 8010f4c:	486c      	ldr	r0, [pc, #432]	@ (8011100 <rcl_expand_topic_name+0x2c0>)
 8010f4e:	4652      	mov	r2, sl
 8010f50:	4629      	mov	r1, r5
 8010f52:	f004 fc0a 	bl	801576a <strncmp>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d15b      	bne.n	8011012 <rcl_expand_topic_name+0x1d2>
 8010f5a:	46b9      	mov	r9, r7
 8010f5c:	ab16      	add	r3, sp, #88	@ 0x58
 8010f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f62:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f66:	ab14      	add	r3, sp, #80	@ 0x50
 8010f68:	4628      	mov	r0, r5
 8010f6a:	cb0c      	ldmia	r3, {r2, r3}
 8010f6c:	4651      	mov	r1, sl
 8010f6e:	f002 f9f5 	bl	801335c <rcutils_strndup>
 8010f72:	4605      	mov	r5, r0
 8010f74:	2800      	cmp	r0, #0
 8010f76:	f000 80a4 	beq.w	80110c2 <rcl_expand_topic_name+0x282>
 8010f7a:	464a      	mov	r2, r9
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	ab14      	add	r3, sp, #80	@ 0x50
 8010f80:	4629      	mov	r1, r5
 8010f82:	f002 f8f1 	bl	8013168 <rcutils_repl_str>
 8010f86:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010f88:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	4798      	blx	r3
 8010f90:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010f92:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010f94:	4658      	mov	r0, fp
 8010f96:	4798      	blx	r3
 8010f98:	2c00      	cmp	r4, #0
 8010f9a:	f000 8083 	beq.w	80110a4 <rcl_expand_topic_name+0x264>
 8010f9e:	217b      	movs	r1, #123	@ 0x7b
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f004 fbd5 	bl	8015750 <strchr>
 8010fa6:	46a3      	mov	fp, r4
 8010fa8:	4605      	mov	r5, r0
 8010faa:	e7b6      	b.n	8010f1a <rcl_expand_topic_name+0xda>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d151      	bne.n	8011054 <rcl_expand_topic_name+0x214>
 8010fb0:	4638      	mov	r0, r7
 8010fb2:	f7ef f93f 	bl	8000234 <strlen>
 8010fb6:	4b53      	ldr	r3, [pc, #332]	@ (8011104 <rcl_expand_topic_name+0x2c4>)
 8010fb8:	4a53      	ldr	r2, [pc, #332]	@ (8011108 <rcl_expand_topic_name+0x2c8>)
 8010fba:	f8cd 8010 	str.w	r8, [sp, #16]
 8010fbe:	2801      	cmp	r0, #1
 8010fc0:	bf0c      	ite	eq
 8010fc2:	4618      	moveq	r0, r3
 8010fc4:	4610      	movne	r0, r2
 8010fc6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010fcc:	e9cd 3200 	strd	r3, r2, [sp]
 8010fd0:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8010fd4:	ab14      	add	r3, sp, #80	@ 0x50
 8010fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010fd8:	f002 f874 	bl	80130c4 <rcutils_format_string_limit>
 8010fdc:	4682      	mov	sl, r0
 8010fde:	4653      	mov	r3, sl
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d05f      	beq.n	80110a4 <rcl_expand_topic_name+0x264>
 8010fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010fe6:	f8c3 a000 	str.w	sl, [r3]
 8010fea:	4620      	mov	r0, r4
 8010fec:	b00b      	add	sp, #44	@ 0x2c
 8010fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff2:	240b      	movs	r4, #11
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	b00b      	add	sp, #44	@ 0x2c
 8010ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffc:	f7ff fe98 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 8011000:	4604      	mov	r4, r0
 8011002:	e7f2      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 8011004:	2467      	movs	r4, #103	@ 0x67
 8011006:	4620      	mov	r0, r4
 8011008:	b00b      	add	sp, #44	@ 0x2c
 801100a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100e:	24c9      	movs	r4, #201	@ 0xc9
 8011010:	e7eb      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 8011012:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8011016:	9806      	ldr	r0, [sp, #24]
 8011018:	1c69      	adds	r1, r5, #1
 801101a:	f7fa fa89 	bl	800b530 <rcutils_string_map_getn>
 801101e:	4681      	mov	r9, r0
 8011020:	2800      	cmp	r0, #0
 8011022:	d19b      	bne.n	8010f5c <rcl_expand_topic_name+0x11c>
 8011024:	aa16      	add	r2, sp, #88	@ 0x58
 8011026:	ca07      	ldmia	r2, {r0, r1, r2}
 8011028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801102a:	f8c3 9000 	str.w	r9, [r3]
 801102e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011032:	ab14      	add	r3, sp, #80	@ 0x50
 8011034:	cb0c      	ldmia	r3, {r2, r3}
 8011036:	4651      	mov	r1, sl
 8011038:	4628      	mov	r0, r5
 801103a:	f002 f98f 	bl	801335c <rcutils_strndup>
 801103e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011040:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011042:	4798      	blx	r3
 8011044:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011046:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011048:	4658      	mov	r0, fp
 801104a:	4798      	blx	r3
 801104c:	2469      	movs	r4, #105	@ 0x69
 801104e:	e7cc      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 8011050:	2800      	cmp	r0, #0
 8011052:	d03e      	beq.n	80110d2 <rcl_expand_topic_name+0x292>
 8011054:	46c1      	mov	r9, r8
 8011056:	46a2      	mov	sl, r4
 8011058:	e75c      	b.n	8010f14 <rcl_expand_topic_name+0xd4>
 801105a:	46b1      	mov	r9, r6
 801105c:	e77e      	b.n	8010f5c <rcl_expand_topic_name+0x11c>
 801105e:	f89a 3000 	ldrb.w	r3, [sl]
 8011062:	2b2f      	cmp	r3, #47	@ 0x2f
 8011064:	d0be      	beq.n	8010fe4 <rcl_expand_topic_name+0x1a4>
 8011066:	4638      	mov	r0, r7
 8011068:	f7ef f8e4 	bl	8000234 <strlen>
 801106c:	4b25      	ldr	r3, [pc, #148]	@ (8011104 <rcl_expand_topic_name+0x2c4>)
 801106e:	4926      	ldr	r1, [pc, #152]	@ (8011108 <rcl_expand_topic_name+0x2c8>)
 8011070:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011072:	f8cd a010 	str.w	sl, [sp, #16]
 8011076:	2801      	cmp	r0, #1
 8011078:	bf0c      	ite	eq
 801107a:	4618      	moveq	r0, r3
 801107c:	4608      	movne	r0, r1
 801107e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011082:	e9cd 2300 	strd	r2, r3, [sp]
 8011086:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801108a:	ab14      	add	r3, sp, #80	@ 0x50
 801108c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801108e:	f002 f819 	bl	80130c4 <rcutils_format_string_limit>
 8011092:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011094:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011096:	4603      	mov	r3, r0
 8011098:	4650      	mov	r0, sl
 801109a:	469a      	mov	sl, r3
 801109c:	4790      	blx	r2
 801109e:	e79e      	b.n	8010fde <rcl_expand_topic_name+0x19e>
 80110a0:	24ca      	movs	r4, #202	@ 0xca
 80110a2:	e7a2      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 80110a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80110a6:	2300      	movs	r3, #0
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	240a      	movs	r4, #10
 80110ac:	e79d      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 80110ae:	465b      	mov	r3, fp
 80110b0:	9c07      	ldr	r4, [sp, #28]
 80110b2:	46da      	mov	sl, fp
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d1d2      	bne.n	801105e <rcl_expand_topic_name+0x21e>
 80110b8:	f898 3000 	ldrb.w	r3, [r8]
 80110bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80110be:	d091      	beq.n	8010fe4 <rcl_expand_topic_name+0x1a4>
 80110c0:	e776      	b.n	8010fb0 <rcl_expand_topic_name+0x170>
 80110c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110c4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80110c6:	601d      	str	r5, [r3, #0]
 80110c8:	4658      	mov	r0, fp
 80110ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80110cc:	4798      	blx	r3
 80110ce:	240a      	movs	r4, #10
 80110d0:	e78b      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 80110d2:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 80110d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80110da:	ab14      	add	r3, sp, #80	@ 0x50
 80110dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80110de:	4640      	mov	r0, r8
 80110e0:	f002 f91a 	bl	8013318 <rcutils_strdup>
 80110e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110e6:	2800      	cmp	r0, #0
 80110e8:	bf08      	it	eq
 80110ea:	240a      	moveq	r4, #10
 80110ec:	6018      	str	r0, [r3, #0]
 80110ee:	e77c      	b.n	8010fea <rcl_expand_topic_name+0x1aa>
 80110f0:	08016b18 	.word	0x08016b18
 80110f4:	08016d94 	.word	0x08016d94
 80110f8:	08016d9c 	.word	0x08016d9c
 80110fc:	08016da4 	.word	0x08016da4
 8011100:	08016dac 	.word	0x08016dac
 8011104:	08016b28 	.word	0x08016b28
 8011108:	08016b04 	.word	0x08016b04

0801110c <rcl_get_default_topic_name_substitutions>:
 801110c:	2800      	cmp	r0, #0
 801110e:	bf0c      	ite	eq
 8011110:	200b      	moveq	r0, #11
 8011112:	2000      	movne	r0, #0
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop

08011118 <rcl_init>:
 8011118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111c:	1e07      	subs	r7, r0, #0
 801111e:	b09f      	sub	sp, #124	@ 0x7c
 8011120:	4688      	mov	r8, r1
 8011122:	4692      	mov	sl, r2
 8011124:	4699      	mov	r9, r3
 8011126:	f340 8097 	ble.w	8011258 <rcl_init+0x140>
 801112a:	2900      	cmp	r1, #0
 801112c:	f000 8097 	beq.w	801125e <rcl_init+0x146>
 8011130:	1f0d      	subs	r5, r1, #4
 8011132:	2400      	movs	r4, #0
 8011134:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8011138:	3401      	adds	r4, #1
 801113a:	2e00      	cmp	r6, #0
 801113c:	f000 808f 	beq.w	801125e <rcl_init+0x146>
 8011140:	42a7      	cmp	r7, r4
 8011142:	d1f7      	bne.n	8011134 <rcl_init+0x1c>
 8011144:	f1ba 0f00 	cmp.w	sl, #0
 8011148:	f000 8089 	beq.w	801125e <rcl_init+0x146>
 801114c:	f8da 4000 	ldr.w	r4, [sl]
 8011150:	2c00      	cmp	r4, #0
 8011152:	f000 8084 	beq.w	801125e <rcl_init+0x146>
 8011156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011158:	ad19      	add	r5, sp, #100	@ 0x64
 801115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801115c:	6823      	ldr	r3, [r4, #0]
 801115e:	602b      	str	r3, [r5, #0]
 8011160:	a819      	add	r0, sp, #100	@ 0x64
 8011162:	f7fa f8ab 	bl	800b2bc <rcutils_allocator_is_valid>
 8011166:	2800      	cmp	r0, #0
 8011168:	d079      	beq.n	801125e <rcl_init+0x146>
 801116a:	f1b9 0f00 	cmp.w	r9, #0
 801116e:	d076      	beq.n	801125e <rcl_init+0x146>
 8011170:	f8d9 3000 	ldr.w	r3, [r9]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d177      	bne.n	8011268 <rcl_init+0x150>
 8011178:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801117c:	2178      	movs	r1, #120	@ 0x78
 801117e:	2001      	movs	r0, #1
 8011180:	4798      	blx	r3
 8011182:	4604      	mov	r4, r0
 8011184:	f8c9 0000 	str.w	r0, [r9]
 8011188:	2800      	cmp	r0, #0
 801118a:	f000 80ba 	beq.w	8011302 <rcl_init+0x1ea>
 801118e:	a802      	add	r0, sp, #8
 8011190:	f002 f900 	bl	8013394 <rmw_get_zero_initialized_context>
 8011194:	a902      	add	r1, sp, #8
 8011196:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801119a:	2250      	movs	r2, #80	@ 0x50
 801119c:	ac19      	add	r4, sp, #100	@ 0x64
 801119e:	f004 fbee 	bl	801597e <memcpy>
 80111a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111a4:	f8d9 5000 	ldr.w	r5, [r9]
 80111a8:	6826      	ldr	r6, [r4, #0]
 80111aa:	462c      	mov	r4, r5
 80111ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111ae:	f105 0114 	add.w	r1, r5, #20
 80111b2:	6026      	str	r6, [r4, #0]
 80111b4:	4650      	mov	r0, sl
 80111b6:	f7f9 f81f 	bl	800a1f8 <rcl_init_options_copy>
 80111ba:	4606      	mov	r6, r0
 80111bc:	2800      	cmp	r0, #0
 80111be:	d144      	bne.n	801124a <rcl_init+0x132>
 80111c0:	f8d9 a000 	ldr.w	sl, [r9]
 80111c4:	463c      	mov	r4, r7
 80111c6:	17fd      	asrs	r5, r7, #31
 80111c8:	e9ca 4506 	strd	r4, r5, [sl, #24]
 80111cc:	f8ca 0020 	str.w	r0, [sl, #32]
 80111d0:	2f00      	cmp	r7, #0
 80111d2:	d050      	beq.n	8011276 <rcl_init+0x15e>
 80111d4:	f1b8 0f00 	cmp.w	r8, #0
 80111d8:	d04d      	beq.n	8011276 <rcl_init+0x15e>
 80111da:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80111de:	4638      	mov	r0, r7
 80111e0:	2104      	movs	r1, #4
 80111e2:	4798      	blx	r3
 80111e4:	f8ca 0020 	str.w	r0, [sl, #32]
 80111e8:	f8d9 a000 	ldr.w	sl, [r9]
 80111ec:	f8da 3020 	ldr.w	r3, [sl, #32]
 80111f0:	46d3      	mov	fp, sl
 80111f2:	b34b      	cbz	r3, 8011248 <rcl_init+0x130>
 80111f4:	2f01      	cmp	r7, #1
 80111f6:	f175 0300 	sbcs.w	r3, r5, #0
 80111fa:	db3c      	blt.n	8011276 <rcl_init+0x15e>
 80111fc:	f1a8 0804 	sub.w	r8, r8, #4
 8011200:	2600      	movs	r6, #0
 8011202:	2700      	movs	r7, #0
 8011204:	e00c      	b.n	8011220 <rcl_init+0x108>
 8011206:	f8d8 1000 	ldr.w	r1, [r8]
 801120a:	f004 fbb8 	bl	801597e <memcpy>
 801120e:	3601      	adds	r6, #1
 8011210:	f147 0700 	adc.w	r7, r7, #0
 8011214:	42bd      	cmp	r5, r7
 8011216:	bf08      	it	eq
 8011218:	42b4      	cmpeq	r4, r6
 801121a:	d02a      	beq.n	8011272 <rcl_init+0x15a>
 801121c:	f8d9 b000 	ldr.w	fp, [r9]
 8011220:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8011224:	f7ef f806 	bl	8000234 <strlen>
 8011228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801122a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801122c:	f8db a020 	ldr.w	sl, [fp, #32]
 8011230:	9001      	str	r0, [sp, #4]
 8011232:	4798      	blx	r3
 8011234:	f8d9 1000 	ldr.w	r1, [r9]
 8011238:	9a01      	ldr	r2, [sp, #4]
 801123a:	6a09      	ldr	r1, [r1, #32]
 801123c:	00b3      	lsls	r3, r6, #2
 801123e:	f84a 0003 	str.w	r0, [sl, r3]
 8011242:	58c8      	ldr	r0, [r1, r3]
 8011244:	2800      	cmp	r0, #0
 8011246:	d1de      	bne.n	8011206 <rcl_init+0xee>
 8011248:	260a      	movs	r6, #10
 801124a:	4648      	mov	r0, r9
 801124c:	f7ff fd94 	bl	8010d78 <__cleanup_context>
 8011250:	4630      	mov	r0, r6
 8011252:	b01f      	add	sp, #124	@ 0x7c
 8011254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011258:	2900      	cmp	r1, #0
 801125a:	f43f af73 	beq.w	8011144 <rcl_init+0x2c>
 801125e:	260b      	movs	r6, #11
 8011260:	4630      	mov	r0, r6
 8011262:	b01f      	add	sp, #124	@ 0x7c
 8011264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011268:	2664      	movs	r6, #100	@ 0x64
 801126a:	4630      	mov	r0, r6
 801126c:	b01f      	add	sp, #124	@ 0x7c
 801126e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011272:	f8d9 a000 	ldr.w	sl, [r9]
 8011276:	4a2c      	ldr	r2, [pc, #176]	@ (8011328 <rcl_init+0x210>)
 8011278:	6813      	ldr	r3, [r2, #0]
 801127a:	3301      	adds	r3, #1
 801127c:	d03b      	beq.n	80112f6 <rcl_init+0x1de>
 801127e:	6013      	str	r3, [r2, #0]
 8011280:	4619      	mov	r1, r3
 8011282:	2000      	movs	r0, #0
 8011284:	f8da 4014 	ldr.w	r4, [sl, #20]
 8011288:	f8c9 3004 	str.w	r3, [r9, #4]
 801128c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801128e:	3301      	adds	r3, #1
 8011290:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8011294:	d039      	beq.n	801130a <rcl_init+0x1f2>
 8011296:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801129a:	b94b      	cbnz	r3, 80112b0 <rcl_init+0x198>
 801129c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80112a0:	f000 f844 	bl	801132c <rcl_get_localhost_only>
 80112a4:	4606      	mov	r6, r0
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d1cf      	bne.n	801124a <rcl_init+0x132>
 80112aa:	f8d9 3000 	ldr.w	r3, [r9]
 80112ae:	695c      	ldr	r4, [r3, #20]
 80112b0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80112b2:	aa18      	add	r2, sp, #96	@ 0x60
 80112b4:	a917      	add	r1, sp, #92	@ 0x5c
 80112b6:	f000 ff61 	bl	801217c <rcl_validate_enclave_name>
 80112ba:	4606      	mov	r6, r0
 80112bc:	2800      	cmp	r0, #0
 80112be:	d1c4      	bne.n	801124a <rcl_init+0x132>
 80112c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112c2:	bb03      	cbnz	r3, 8011306 <rcl_init+0x1ee>
 80112c4:	f8d9 1000 	ldr.w	r1, [r9]
 80112c8:	694b      	ldr	r3, [r1, #20]
 80112ca:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80112cc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80112d0:	f000 fa9a 	bl	8011808 <rcl_get_security_options_from_environment>
 80112d4:	4606      	mov	r6, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d1b7      	bne.n	801124a <rcl_init+0x132>
 80112da:	f8d9 1000 	ldr.w	r1, [r9]
 80112de:	6948      	ldr	r0, [r1, #20]
 80112e0:	3128      	adds	r1, #40	@ 0x28
 80112e2:	3018      	adds	r0, #24
 80112e4:	f7fa fb48 	bl	800b978 <rmw_init>
 80112e8:	4606      	mov	r6, r0
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d0b8      	beq.n	8011260 <rcl_init+0x148>
 80112ee:	f7ff fd1f 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 80112f2:	4606      	mov	r6, r0
 80112f4:	e7a9      	b.n	801124a <rcl_init+0x132>
 80112f6:	2401      	movs	r4, #1
 80112f8:	4618      	mov	r0, r3
 80112fa:	4621      	mov	r1, r4
 80112fc:	6014      	str	r4, [r2, #0]
 80112fe:	4623      	mov	r3, r4
 8011300:	e7c0      	b.n	8011284 <rcl_init+0x16c>
 8011302:	260a      	movs	r6, #10
 8011304:	e7ac      	b.n	8011260 <rcl_init+0x148>
 8011306:	2601      	movs	r6, #1
 8011308:	e79f      	b.n	801124a <rcl_init+0x132>
 801130a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801130e:	f003 fcbf 	bl	8014c90 <rcl_get_default_domain_id>
 8011312:	4606      	mov	r6, r0
 8011314:	2800      	cmp	r0, #0
 8011316:	d198      	bne.n	801124a <rcl_init+0x132>
 8011318:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801131a:	3301      	adds	r3, #1
 801131c:	f8d9 3000 	ldr.w	r3, [r9]
 8011320:	bf08      	it	eq
 8011322:	6260      	streq	r0, [r4, #36]	@ 0x24
 8011324:	695c      	ldr	r4, [r3, #20]
 8011326:	e7b6      	b.n	8011296 <rcl_init+0x17e>
 8011328:	2000dae8 	.word	0x2000dae8

0801132c <rcl_get_localhost_only>:
 801132c:	b510      	push	{r4, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	2300      	movs	r3, #0
 8011332:	9301      	str	r3, [sp, #4]
 8011334:	b1b8      	cbz	r0, 8011366 <rcl_get_localhost_only+0x3a>
 8011336:	4604      	mov	r4, r0
 8011338:	a901      	add	r1, sp, #4
 801133a:	480c      	ldr	r0, [pc, #48]	@ (801136c <rcl_get_localhost_only+0x40>)
 801133c:	f001 fefc 	bl	8013138 <rcutils_get_env>
 8011340:	b110      	cbz	r0, 8011348 <rcl_get_localhost_only+0x1c>
 8011342:	2001      	movs	r0, #1
 8011344:	b002      	add	sp, #8
 8011346:	bd10      	pop	{r4, pc}
 8011348:	9b01      	ldr	r3, [sp, #4]
 801134a:	b113      	cbz	r3, 8011352 <rcl_get_localhost_only+0x26>
 801134c:	781a      	ldrb	r2, [r3, #0]
 801134e:	2a31      	cmp	r2, #49	@ 0x31
 8011350:	d004      	beq.n	801135c <rcl_get_localhost_only+0x30>
 8011352:	2302      	movs	r3, #2
 8011354:	2000      	movs	r0, #0
 8011356:	7023      	strb	r3, [r4, #0]
 8011358:	b002      	add	sp, #8
 801135a:	bd10      	pop	{r4, pc}
 801135c:	785b      	ldrb	r3, [r3, #1]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d1f7      	bne.n	8011352 <rcl_get_localhost_only+0x26>
 8011362:	2301      	movs	r3, #1
 8011364:	e7f6      	b.n	8011354 <rcl_get_localhost_only+0x28>
 8011366:	200b      	movs	r0, #11
 8011368:	b002      	add	sp, #8
 801136a:	bd10      	pop	{r4, pc}
 801136c:	08016db8 	.word	0x08016db8

08011370 <rcl_get_zero_initialized_node>:
 8011370:	4a03      	ldr	r2, [pc, #12]	@ (8011380 <rcl_get_zero_initialized_node+0x10>)
 8011372:	4603      	mov	r3, r0
 8011374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011378:	e883 0003 	stmia.w	r3, {r0, r1}
 801137c:	4618      	mov	r0, r3
 801137e:	4770      	bx	lr
 8011380:	08016dd4 	.word	0x08016dd4

08011384 <rcl_node_init>:
 8011384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011388:	b09b      	sub	sp, #108	@ 0x6c
 801138a:	4604      	mov	r4, r0
 801138c:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 8011390:	f04f 0c00 	mov.w	ip, #0
 8011394:	a815      	add	r0, sp, #84	@ 0x54
 8011396:	460e      	mov	r6, r1
 8011398:	4615      	mov	r5, r2
 801139a:	461f      	mov	r7, r3
 801139c:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 80113a0:	f003 fd8c 	bl	8014ebc <rcl_guard_condition_get_default_options>
 80113a4:	f1b8 0f00 	cmp.w	r8, #0
 80113a8:	f000 80fd 	beq.w	80115a6 <rcl_node_init+0x222>
 80113ac:	f108 0b04 	add.w	fp, r8, #4
 80113b0:	4658      	mov	r0, fp
 80113b2:	f7f9 ff83 	bl	800b2bc <rcutils_allocator_is_valid>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f000 80f5 	beq.w	80115a6 <rcl_node_init+0x222>
 80113bc:	2e00      	cmp	r6, #0
 80113be:	f000 80f2 	beq.w	80115a6 <rcl_node_init+0x222>
 80113c2:	2d00      	cmp	r5, #0
 80113c4:	f000 80ef 	beq.w	80115a6 <rcl_node_init+0x222>
 80113c8:	2c00      	cmp	r4, #0
 80113ca:	f000 80ec 	beq.w	80115a6 <rcl_node_init+0x222>
 80113ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80113d2:	f1b9 0f00 	cmp.w	r9, #0
 80113d6:	f040 8112 	bne.w	80115fe <rcl_node_init+0x27a>
 80113da:	2f00      	cmp	r7, #0
 80113dc:	f000 80e3 	beq.w	80115a6 <rcl_node_init+0x222>
 80113e0:	4638      	mov	r0, r7
 80113e2:	f7ff fcc3 	bl	8010d6c <rcl_context_is_valid>
 80113e6:	4682      	mov	sl, r0
 80113e8:	2800      	cmp	r0, #0
 80113ea:	f000 80e2 	beq.w	80115b2 <rcl_node_init+0x22e>
 80113ee:	464a      	mov	r2, r9
 80113f0:	a914      	add	r1, sp, #80	@ 0x50
 80113f2:	4630      	mov	r0, r6
 80113f4:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80113f8:	f002 f840 	bl	801347c <rmw_validate_node_name>
 80113fc:	4681      	mov	r9, r0
 80113fe:	2800      	cmp	r0, #0
 8011400:	f040 80d3 	bne.w	80115aa <rcl_node_init+0x226>
 8011404:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011406:	2800      	cmp	r0, #0
 8011408:	f040 8105 	bne.w	8011616 <rcl_node_init+0x292>
 801140c:	4628      	mov	r0, r5
 801140e:	f7ee ff11 	bl	8000234 <strlen>
 8011412:	2800      	cmp	r0, #0
 8011414:	f040 80d0 	bne.w	80115b8 <rcl_node_init+0x234>
 8011418:	4d8e      	ldr	r5, [pc, #568]	@ (8011654 <rcl_node_init+0x2d0>)
 801141a:	a914      	add	r1, sp, #80	@ 0x50
 801141c:	2200      	movs	r2, #0
 801141e:	4628      	mov	r0, r5
 8011420:	f002 f80e 	bl	8013440 <rmw_validate_namespace>
 8011424:	4681      	mov	r9, r0
 8011426:	2800      	cmp	r0, #0
 8011428:	f040 80bf 	bne.w	80115aa <rcl_node_init+0x226>
 801142c:	4682      	mov	sl, r0
 801142e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011430:	2b00      	cmp	r3, #0
 8011432:	f040 80f5 	bne.w	8011620 <rcl_node_init+0x29c>
 8011436:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801143a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801143e:	9307      	str	r3, [sp, #28]
 8011440:	2030      	movs	r0, #48	@ 0x30
 8011442:	4790      	blx	r2
 8011444:	4681      	mov	r9, r0
 8011446:	6060      	str	r0, [r4, #4]
 8011448:	2800      	cmp	r0, #0
 801144a:	f000 80de 	beq.w	801160a <rcl_node_init+0x286>
 801144e:	9b07      	ldr	r3, [sp, #28]
 8011450:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8011454:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8011458:	a80a      	add	r0, sp, #40	@ 0x28
 801145a:	f7f8 ff73 	bl	800a344 <rcl_node_get_default_options>
 801145e:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 8011462:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011466:	46cc      	mov	ip, r9
 8011468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801146c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011470:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8011474:	6861      	ldr	r1, [r4, #4]
 8011476:	6027      	str	r7, [r4, #0]
 8011478:	4640      	mov	r0, r8
 801147a:	f7f8 ff7f 	bl	800a37c <rcl_node_options_copy>
 801147e:	2800      	cmp	r0, #0
 8011480:	d167      	bne.n	8011552 <rcl_node_init+0x1ce>
 8011482:	4628      	mov	r0, r5
 8011484:	f7ee fed6 	bl	8000234 <strlen>
 8011488:	4428      	add	r0, r5
 801148a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801148e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011492:	2b2f      	cmp	r3, #47	@ 0x2f
 8011494:	bf08      	it	eq
 8011496:	4970      	ldreq	r1, [pc, #448]	@ (8011658 <rcl_node_init+0x2d4>)
 8011498:	f8db 3010 	ldr.w	r3, [fp, #16]
 801149c:	bf18      	it	ne
 801149e:	496f      	ldrne	r1, [pc, #444]	@ (801165c <rcl_node_init+0x2d8>)
 80114a0:	9604      	str	r6, [sp, #16]
 80114a2:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80114a6:	e9cd 3200 	strd	r3, r2, [sp]
 80114aa:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80114ae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80114b2:	f001 fe07 	bl	80130c4 <rcutils_format_string_limit>
 80114b6:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 80114ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80114be:	f8d9 3000 	ldr.w	r3, [r9]
 80114c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80114c4:	1c59      	adds	r1, r3, #1
 80114c6:	f000 80b7 	beq.w	8011638 <rcl_node_init+0x2b4>
 80114ca:	683a      	ldr	r2, [r7, #0]
 80114cc:	f8c9 301c 	str.w	r3, [r9, #28]
 80114d0:	6952      	ldr	r2, [r2, #20]
 80114d2:	6821      	ldr	r1, [r4, #0]
 80114d4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80114d8:	6808      	ldr	r0, [r1, #0]
 80114da:	f1a2 0201 	sub.w	r2, r2, #1
 80114de:	fab2 f282 	clz	r2, r2
 80114e2:	0952      	lsrs	r2, r2, #5
 80114e4:	9200      	str	r2, [sp, #0]
 80114e6:	4631      	mov	r1, r6
 80114e8:	3028      	adds	r0, #40	@ 0x28
 80114ea:	462a      	mov	r2, r5
 80114ec:	f7fa fc28 	bl	800bd40 <rmw_create_node>
 80114f0:	6863      	ldr	r3, [r4, #4]
 80114f2:	f8c9 0020 	str.w	r0, [r9, #32]
 80114f6:	6a18      	ldr	r0, [r3, #32]
 80114f8:	b368      	cbz	r0, 8011556 <rcl_node_init+0x1d2>
 80114fa:	f7fa fcb5 	bl	800be68 <rmw_node_get_graph_guard_condition>
 80114fe:	4681      	mov	r9, r0
 8011500:	b338      	cbz	r0, 8011552 <rcl_node_init+0x1ce>
 8011502:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011506:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801150a:	6866      	ldr	r6, [r4, #4]
 801150c:	2008      	movs	r0, #8
 801150e:	4798      	blx	r3
 8011510:	6863      	ldr	r3, [r4, #4]
 8011512:	6270      	str	r0, [r6, #36]	@ 0x24
 8011514:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8011516:	b1f6      	cbz	r6, 8011556 <rcl_node_init+0x1d2>
 8011518:	a808      	add	r0, sp, #32
 801151a:	f003 fbed 	bl	8014cf8 <rcl_get_zero_initialized_guard_condition>
 801151e:	a808      	add	r0, sp, #32
 8011520:	c803      	ldmia	r0, {r0, r1}
 8011522:	e886 0003 	stmia.w	r6, {r0, r1}
 8011526:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801152a:	ae15      	add	r6, sp, #84	@ 0x54
 801152c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801152e:	f8db 3000 	ldr.w	r3, [fp]
 8011532:	6033      	str	r3, [r6, #0]
 8011534:	ab1a      	add	r3, sp, #104	@ 0x68
 8011536:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801153a:	6866      	ldr	r6, [r4, #4]
 801153c:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 801153e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011542:	4649      	mov	r1, r9
 8011544:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011546:	4630      	mov	r0, r6
 8011548:	463a      	mov	r2, r7
 801154a:	f003 fc39 	bl	8014dc0 <rcl_guard_condition_init_from_rmw>
 801154e:	4681      	mov	r9, r0
 8011550:	b328      	cbz	r0, 801159e <rcl_node_init+0x21a>
 8011552:	6863      	ldr	r3, [r4, #4]
 8011554:	b1f3      	cbz	r3, 8011594 <rcl_node_init+0x210>
 8011556:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011558:	b128      	cbz	r0, 8011566 <rcl_node_init+0x1e2>
 801155a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801155e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011562:	4798      	blx	r3
 8011564:	6863      	ldr	r3, [r4, #4]
 8011566:	6a18      	ldr	r0, [r3, #32]
 8011568:	b110      	cbz	r0, 8011570 <rcl_node_init+0x1ec>
 801156a:	f7fa fc01 	bl	800bd70 <rmw_destroy_node>
 801156e:	6863      	ldr	r3, [r4, #4]
 8011570:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011572:	b148      	cbz	r0, 8011588 <rcl_node_init+0x204>
 8011574:	f003 fc7c 	bl	8014e70 <rcl_guard_condition_fini>
 8011578:	6862      	ldr	r2, [r4, #4]
 801157a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801157e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8011580:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011584:	4798      	blx	r3
 8011586:	6863      	ldr	r3, [r4, #4]
 8011588:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801158c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011590:	4618      	mov	r0, r3
 8011592:	4790      	blx	r2
 8011594:	2300      	movs	r3, #0
 8011596:	e9c4 3300 	strd	r3, r3, [r4]
 801159a:	f04f 0901 	mov.w	r9, #1
 801159e:	f1ba 0f00 	cmp.w	sl, #0
 80115a2:	d125      	bne.n	80115f0 <rcl_node_init+0x26c>
 80115a4:	e001      	b.n	80115aa <rcl_node_init+0x226>
 80115a6:	f04f 090b 	mov.w	r9, #11
 80115aa:	4648      	mov	r0, r9
 80115ac:	b01b      	add	sp, #108	@ 0x6c
 80115ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b2:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80115b6:	e7f8      	b.n	80115aa <rcl_node_init+0x226>
 80115b8:	782b      	ldrb	r3, [r5, #0]
 80115ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80115bc:	f43f af2d 	beq.w	801141a <rcl_node_init+0x96>
 80115c0:	4927      	ldr	r1, [pc, #156]	@ (8011660 <rcl_node_init+0x2dc>)
 80115c2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80115cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80115d0:	9503      	str	r5, [sp, #12]
 80115d2:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80115d6:	f001 fd75 	bl	80130c4 <rcutils_format_string_limit>
 80115da:	4605      	mov	r5, r0
 80115dc:	b348      	cbz	r0, 8011632 <rcl_node_init+0x2ae>
 80115de:	2200      	movs	r2, #0
 80115e0:	a914      	add	r1, sp, #80	@ 0x50
 80115e2:	9214      	str	r2, [sp, #80]	@ 0x50
 80115e4:	f001 ff2c 	bl	8013440 <rmw_validate_namespace>
 80115e8:	4681      	mov	r9, r0
 80115ea:	2800      	cmp	r0, #0
 80115ec:	f43f af1f 	beq.w	801142e <rcl_node_init+0xaa>
 80115f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115f4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80115f8:	4628      	mov	r0, r5
 80115fa:	4798      	blx	r3
 80115fc:	e7d5      	b.n	80115aa <rcl_node_init+0x226>
 80115fe:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8011602:	4648      	mov	r0, r9
 8011604:	b01b      	add	sp, #108	@ 0x6c
 8011606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801160a:	f04f 090a 	mov.w	r9, #10
 801160e:	f1ba 0f00 	cmp.w	sl, #0
 8011612:	d1ed      	bne.n	80115f0 <rcl_node_init+0x26c>
 8011614:	e7c9      	b.n	80115aa <rcl_node_init+0x226>
 8011616:	f001 ff83 	bl	8013520 <rmw_node_name_validation_result_string>
 801161a:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 801161e:	e7c4      	b.n	80115aa <rcl_node_init+0x226>
 8011620:	4618      	mov	r0, r3
 8011622:	f001 ff1f 	bl	8013464 <rmw_namespace_validation_result_string>
 8011626:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801162a:	f1ba 0f00 	cmp.w	sl, #0
 801162e:	d1df      	bne.n	80115f0 <rcl_node_init+0x26c>
 8011630:	e7bb      	b.n	80115aa <rcl_node_init+0x226>
 8011632:	f04f 090a 	mov.w	r9, #10
 8011636:	e7b8      	b.n	80115aa <rcl_node_init+0x226>
 8011638:	a813      	add	r0, sp, #76	@ 0x4c
 801163a:	f003 fb29 	bl	8014c90 <rcl_get_default_domain_id>
 801163e:	2800      	cmp	r0, #0
 8011640:	d187      	bne.n	8011552 <rcl_node_init+0x1ce>
 8011642:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011644:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011648:	1c5a      	adds	r2, r3, #1
 801164a:	bf04      	itt	eq
 801164c:	9013      	streq	r0, [sp, #76]	@ 0x4c
 801164e:	4603      	moveq	r3, r0
 8011650:	e73b      	b.n	80114ca <rcl_node_init+0x146>
 8011652:	bf00      	nop
 8011654:	08016b00 	.word	0x08016b00
 8011658:	08016b28 	.word	0x08016b28
 801165c:	08016b04 	.word	0x08016b04
 8011660:	08016dd0 	.word	0x08016dd0

08011664 <rcl_node_is_valid>:
 8011664:	b130      	cbz	r0, 8011674 <rcl_node_is_valid+0x10>
 8011666:	6843      	ldr	r3, [r0, #4]
 8011668:	b123      	cbz	r3, 8011674 <rcl_node_is_valid+0x10>
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	b113      	cbz	r3, 8011674 <rcl_node_is_valid+0x10>
 801166e:	6800      	ldr	r0, [r0, #0]
 8011670:	f7ff bb7c 	b.w	8010d6c <rcl_context_is_valid>
 8011674:	2000      	movs	r0, #0
 8011676:	4770      	bx	lr

08011678 <rcl_node_get_name>:
 8011678:	b120      	cbz	r0, 8011684 <rcl_node_get_name+0xc>
 801167a:	6840      	ldr	r0, [r0, #4]
 801167c:	b110      	cbz	r0, 8011684 <rcl_node_get_name+0xc>
 801167e:	6a00      	ldr	r0, [r0, #32]
 8011680:	b100      	cbz	r0, 8011684 <rcl_node_get_name+0xc>
 8011682:	6880      	ldr	r0, [r0, #8]
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <rcl_node_get_namespace>:
 8011688:	b120      	cbz	r0, 8011694 <rcl_node_get_namespace+0xc>
 801168a:	6840      	ldr	r0, [r0, #4]
 801168c:	b110      	cbz	r0, 8011694 <rcl_node_get_namespace+0xc>
 801168e:	6a00      	ldr	r0, [r0, #32]
 8011690:	b100      	cbz	r0, 8011694 <rcl_node_get_namespace+0xc>
 8011692:	68c0      	ldr	r0, [r0, #12]
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop

08011698 <rcl_node_get_options>:
 8011698:	b128      	cbz	r0, 80116a6 <rcl_node_get_options+0xe>
 801169a:	6840      	ldr	r0, [r0, #4]
 801169c:	b118      	cbz	r0, 80116a6 <rcl_node_get_options+0xe>
 801169e:	6a03      	ldr	r3, [r0, #32]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	bf08      	it	eq
 80116a4:	2000      	moveq	r0, #0
 80116a6:	4770      	bx	lr

080116a8 <rcl_node_get_rmw_handle>:
 80116a8:	b110      	cbz	r0, 80116b0 <rcl_node_get_rmw_handle+0x8>
 80116aa:	6840      	ldr	r0, [r0, #4]
 80116ac:	b100      	cbz	r0, 80116b0 <rcl_node_get_rmw_handle+0x8>
 80116ae:	6a00      	ldr	r0, [r0, #32]
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop

080116b4 <exact_match_lookup>:
 80116b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116b6:	f102 0708 	add.w	r7, r2, #8
 80116ba:	460b      	mov	r3, r1
 80116bc:	4614      	mov	r4, r2
 80116be:	4606      	mov	r6, r0
 80116c0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80116c4:	b085      	sub	sp, #20
 80116c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116ca:	4618      	mov	r0, r3
 80116cc:	4918      	ldr	r1, [pc, #96]	@ (8011730 <exact_match_lookup+0x7c>)
 80116ce:	e894 000c 	ldmia.w	r4, {r2, r3}
 80116d2:	f001 fce9 	bl	80130a8 <rcutils_join_path>
 80116d6:	7833      	ldrb	r3, [r6, #0]
 80116d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80116da:	4605      	mov	r5, r0
 80116dc:	d021      	beq.n	8011722 <exact_match_lookup+0x6e>
 80116de:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80116e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80116e6:	1c70      	adds	r0, r6, #1
 80116e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80116ec:	f001 fce2 	bl	80130b4 <rcutils_to_native_path>
 80116f0:	4606      	mov	r6, r0
 80116f2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80116f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116fa:	4631      	mov	r1, r6
 80116fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011700:	4628      	mov	r0, r5
 8011702:	f001 fcd1 	bl	80130a8 <rcutils_join_path>
 8011706:	6862      	ldr	r2, [r4, #4]
 8011708:	6921      	ldr	r1, [r4, #16]
 801170a:	4603      	mov	r3, r0
 801170c:	4630      	mov	r0, r6
 801170e:	461e      	mov	r6, r3
 8011710:	4790      	blx	r2
 8011712:	4628      	mov	r0, r5
 8011714:	6863      	ldr	r3, [r4, #4]
 8011716:	6921      	ldr	r1, [r4, #16]
 8011718:	4798      	blx	r3
 801171a:	4635      	mov	r5, r6
 801171c:	4628      	mov	r0, r5
 801171e:	b005      	add	sp, #20
 8011720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011722:	7873      	ldrb	r3, [r6, #1]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d1da      	bne.n	80116de <exact_match_lookup+0x2a>
 8011728:	4628      	mov	r0, r5
 801172a:	b005      	add	sp, #20
 801172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801172e:	bf00      	nop
 8011730:	08016e18 	.word	0x08016e18

08011734 <rcl_get_secure_root>:
 8011734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011738:	b085      	sub	sp, #20
 801173a:	b168      	cbz	r0, 8011758 <rcl_get_secure_root+0x24>
 801173c:	4607      	mov	r7, r0
 801173e:	4608      	mov	r0, r1
 8011740:	460c      	mov	r4, r1
 8011742:	f7f9 fdbb 	bl	800b2bc <rcutils_allocator_is_valid>
 8011746:	b138      	cbz	r0, 8011758 <rcl_get_secure_root+0x24>
 8011748:	2300      	movs	r3, #0
 801174a:	482d      	ldr	r0, [pc, #180]	@ (8011800 <rcl_get_secure_root+0xcc>)
 801174c:	9303      	str	r3, [sp, #12]
 801174e:	a903      	add	r1, sp, #12
 8011750:	f001 fcf2 	bl	8013138 <rcutils_get_env>
 8011754:	4605      	mov	r5, r0
 8011756:	b120      	cbz	r0, 8011762 <rcl_get_secure_root+0x2e>
 8011758:	2500      	movs	r5, #0
 801175a:	4628      	mov	r0, r5
 801175c:	b005      	add	sp, #20
 801175e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011762:	9b03      	ldr	r3, [sp, #12]
 8011764:	781a      	ldrb	r2, [r3, #0]
 8011766:	2a00      	cmp	r2, #0
 8011768:	d0f6      	beq.n	8011758 <rcl_get_secure_root+0x24>
 801176a:	f104 090c 	add.w	r9, r4, #12
 801176e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011772:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011776:	4618      	mov	r0, r3
 8011778:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801177c:	f001 fdcc 	bl	8013318 <rcutils_strdup>
 8011780:	4680      	mov	r8, r0
 8011782:	2800      	cmp	r0, #0
 8011784:	d0e8      	beq.n	8011758 <rcl_get_secure_root+0x24>
 8011786:	481f      	ldr	r0, [pc, #124]	@ (8011804 <rcl_get_secure_root+0xd0>)
 8011788:	9503      	str	r5, [sp, #12]
 801178a:	a903      	add	r1, sp, #12
 801178c:	f001 fcd4 	bl	8013138 <rcutils_get_env>
 8011790:	b160      	cbz	r0, 80117ac <rcl_get_secure_root+0x78>
 8011792:	2600      	movs	r6, #0
 8011794:	6863      	ldr	r3, [r4, #4]
 8011796:	6921      	ldr	r1, [r4, #16]
 8011798:	4630      	mov	r0, r6
 801179a:	4798      	blx	r3
 801179c:	4640      	mov	r0, r8
 801179e:	6863      	ldr	r3, [r4, #4]
 80117a0:	6921      	ldr	r1, [r4, #16]
 80117a2:	4798      	blx	r3
 80117a4:	4628      	mov	r0, r5
 80117a6:	b005      	add	sp, #20
 80117a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117ac:	9b03      	ldr	r3, [sp, #12]
 80117ae:	781e      	ldrb	r6, [r3, #0]
 80117b0:	b1f6      	cbz	r6, 80117f0 <rcl_get_secure_root+0xbc>
 80117b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80117b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80117ba:	4618      	mov	r0, r3
 80117bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80117c0:	f001 fdaa 	bl	8013318 <rcutils_strdup>
 80117c4:	4606      	mov	r6, r0
 80117c6:	2800      	cmp	r0, #0
 80117c8:	d0e3      	beq.n	8011792 <rcl_get_secure_root+0x5e>
 80117ca:	4622      	mov	r2, r4
 80117cc:	4641      	mov	r1, r8
 80117ce:	f7ff ff71 	bl	80116b4 <exact_match_lookup>
 80117d2:	4605      	mov	r5, r0
 80117d4:	2d00      	cmp	r5, #0
 80117d6:	d0dd      	beq.n	8011794 <rcl_get_secure_root+0x60>
 80117d8:	4628      	mov	r0, r5
 80117da:	f001 fc63 	bl	80130a4 <rcutils_is_directory>
 80117de:	4607      	mov	r7, r0
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d1d7      	bne.n	8011794 <rcl_get_secure_root+0x60>
 80117e4:	4628      	mov	r0, r5
 80117e6:	6863      	ldr	r3, [r4, #4]
 80117e8:	6921      	ldr	r1, [r4, #16]
 80117ea:	4798      	blx	r3
 80117ec:	463d      	mov	r5, r7
 80117ee:	e7d1      	b.n	8011794 <rcl_get_secure_root+0x60>
 80117f0:	4638      	mov	r0, r7
 80117f2:	4622      	mov	r2, r4
 80117f4:	4641      	mov	r1, r8
 80117f6:	f7ff ff5d 	bl	80116b4 <exact_match_lookup>
 80117fa:	4605      	mov	r5, r0
 80117fc:	e7ea      	b.n	80117d4 <rcl_get_secure_root+0xa0>
 80117fe:	bf00      	nop
 8011800:	08016e24 	.word	0x08016e24
 8011804:	08016e3c 	.word	0x08016e3c

08011808 <rcl_get_security_options_from_environment>:
 8011808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801180c:	b082      	sub	sp, #8
 801180e:	4607      	mov	r7, r0
 8011810:	4688      	mov	r8, r1
 8011812:	2400      	movs	r4, #0
 8011814:	481d      	ldr	r0, [pc, #116]	@ (801188c <rcl_get_security_options_from_environment+0x84>)
 8011816:	9401      	str	r4, [sp, #4]
 8011818:	a901      	add	r1, sp, #4
 801181a:	4616      	mov	r6, r2
 801181c:	f001 fc8c 	bl	8013138 <rcutils_get_env>
 8011820:	b120      	cbz	r0, 801182c <rcl_get_security_options_from_environment+0x24>
 8011822:	2501      	movs	r5, #1
 8011824:	4628      	mov	r0, r5
 8011826:	b002      	add	sp, #8
 8011828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801182c:	4918      	ldr	r1, [pc, #96]	@ (8011890 <rcl_get_security_options_from_environment+0x88>)
 801182e:	4604      	mov	r4, r0
 8011830:	9801      	ldr	r0, [sp, #4]
 8011832:	f7ee fcf5 	bl	8000220 <strcmp>
 8011836:	4605      	mov	r5, r0
 8011838:	b9c8      	cbnz	r0, 801186e <rcl_get_security_options_from_environment+0x66>
 801183a:	9001      	str	r0, [sp, #4]
 801183c:	b1ee      	cbz	r6, 801187a <rcl_get_security_options_from_environment+0x72>
 801183e:	4815      	ldr	r0, [pc, #84]	@ (8011894 <rcl_get_security_options_from_environment+0x8c>)
 8011840:	a901      	add	r1, sp, #4
 8011842:	f001 fc79 	bl	8013138 <rcutils_get_env>
 8011846:	2800      	cmp	r0, #0
 8011848:	d1eb      	bne.n	8011822 <rcl_get_security_options_from_environment+0x1a>
 801184a:	4913      	ldr	r1, [pc, #76]	@ (8011898 <rcl_get_security_options_from_environment+0x90>)
 801184c:	9801      	ldr	r0, [sp, #4]
 801184e:	f7ee fce7 	bl	8000220 <strcmp>
 8011852:	fab0 f080 	clz	r0, r0
 8011856:	0940      	lsrs	r0, r0, #5
 8011858:	7030      	strb	r0, [r6, #0]
 801185a:	4641      	mov	r1, r8
 801185c:	4638      	mov	r0, r7
 801185e:	f7ff ff69 	bl	8011734 <rcl_get_secure_root>
 8011862:	b160      	cbz	r0, 801187e <rcl_get_security_options_from_environment+0x76>
 8011864:	6070      	str	r0, [r6, #4]
 8011866:	4628      	mov	r0, r5
 8011868:	b002      	add	sp, #8
 801186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186e:	4625      	mov	r5, r4
 8011870:	4628      	mov	r0, r5
 8011872:	7034      	strb	r4, [r6, #0]
 8011874:	b002      	add	sp, #8
 8011876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187a:	250b      	movs	r5, #11
 801187c:	e7d2      	b.n	8011824 <rcl_get_security_options_from_environment+0x1c>
 801187e:	7835      	ldrb	r5, [r6, #0]
 8011880:	f1a5 0501 	sub.w	r5, r5, #1
 8011884:	fab5 f585 	clz	r5, r5
 8011888:	096d      	lsrs	r5, r5, #5
 801188a:	e7cb      	b.n	8011824 <rcl_get_security_options_from_environment+0x1c>
 801188c:	08016ddc 	.word	0x08016ddc
 8011890:	08016df0 	.word	0x08016df0
 8011894:	08016df8 	.word	0x08016df8
 8011898:	08016e10 	.word	0x08016e10

0801189c <rcl_service_get_rmw_handle>:
 801189c:	b110      	cbz	r0, 80118a4 <rcl_service_get_rmw_handle+0x8>
 801189e:	6800      	ldr	r0, [r0, #0]
 80118a0:	b100      	cbz	r0, 80118a4 <rcl_service_get_rmw_handle+0x8>
 80118a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop

080118a8 <rcl_take_request>:
 80118a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118aa:	460e      	mov	r6, r1
 80118ac:	460c      	mov	r4, r1
 80118ae:	4607      	mov	r7, r0
 80118b0:	4694      	mov	ip, r2
 80118b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80118b4:	b08d      	sub	sp, #52	@ 0x34
 80118b6:	ad06      	add	r5, sp, #24
 80118b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80118ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 80118be:	e885 0003 	stmia.w	r5, {r0, r1}
 80118c2:	b1e7      	cbz	r7, 80118fe <rcl_take_request+0x56>
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	b1d3      	cbz	r3, 80118fe <rcl_take_request+0x56>
 80118c8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80118ca:	b1c0      	cbz	r0, 80118fe <rcl_take_request+0x56>
 80118cc:	4662      	mov	r2, ip
 80118ce:	b30a      	cbz	r2, 8011914 <rcl_take_request+0x6c>
 80118d0:	2500      	movs	r5, #0
 80118d2:	f10d 0307 	add.w	r3, sp, #7
 80118d6:	a902      	add	r1, sp, #8
 80118d8:	f88d 5007 	strb.w	r5, [sp, #7]
 80118dc:	f001 fff0 	bl	80138c0 <rmw_take_request>
 80118e0:	4606      	mov	r6, r0
 80118e2:	b178      	cbz	r0, 8011904 <rcl_take_request+0x5c>
 80118e4:	280a      	cmp	r0, #10
 80118e6:	bf18      	it	ne
 80118e8:	2601      	movne	r6, #1
 80118ea:	ad06      	add	r5, sp, #24
 80118ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80118f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80118f8:	4630      	mov	r0, r6
 80118fa:	b00d      	add	sp, #52	@ 0x34
 80118fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118fe:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8011902:	e7f2      	b.n	80118ea <rcl_take_request+0x42>
 8011904:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011908:	f240 2359 	movw	r3, #601	@ 0x259
 801190c:	2a00      	cmp	r2, #0
 801190e:	bf08      	it	eq
 8011910:	461e      	moveq	r6, r3
 8011912:	e7ea      	b.n	80118ea <rcl_take_request+0x42>
 8011914:	260b      	movs	r6, #11
 8011916:	e7e8      	b.n	80118ea <rcl_take_request+0x42>

08011918 <rcl_send_response>:
 8011918:	b160      	cbz	r0, 8011934 <rcl_send_response+0x1c>
 801191a:	6800      	ldr	r0, [r0, #0]
 801191c:	b150      	cbz	r0, 8011934 <rcl_send_response+0x1c>
 801191e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011920:	b140      	cbz	r0, 8011934 <rcl_send_response+0x1c>
 8011922:	b151      	cbz	r1, 801193a <rcl_send_response+0x22>
 8011924:	b510      	push	{r4, lr}
 8011926:	b152      	cbz	r2, 801193e <rcl_send_response+0x26>
 8011928:	f002 f828 	bl	801397c <rmw_send_response>
 801192c:	3800      	subs	r0, #0
 801192e:	bf18      	it	ne
 8011930:	2001      	movne	r0, #1
 8011932:	bd10      	pop	{r4, pc}
 8011934:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011938:	4770      	bx	lr
 801193a:	200b      	movs	r0, #11
 801193c:	4770      	bx	lr
 801193e:	200b      	movs	r0, #11
 8011940:	bd10      	pop	{r4, pc}
 8011942:	bf00      	nop

08011944 <rcl_get_system_time>:
 8011944:	4608      	mov	r0, r1
 8011946:	f7f9 be25 	b.w	800b594 <rcutils_system_time_now>
 801194a:	bf00      	nop

0801194c <rcl_get_steady_time>:
 801194c:	4608      	mov	r0, r1
 801194e:	f7f9 be49 	b.w	800b5e4 <rcutils_steady_time_now>
 8011952:	bf00      	nop

08011954 <rcl_get_ros_time>:
 8011954:	7a03      	ldrb	r3, [r0, #8]
 8011956:	b510      	push	{r4, lr}
 8011958:	460c      	mov	r4, r1
 801195a:	b133      	cbz	r3, 801196a <rcl_get_ros_time+0x16>
 801195c:	2105      	movs	r1, #5
 801195e:	f001 faff 	bl	8012f60 <__atomic_load_8>
 8011962:	e9c4 0100 	strd	r0, r1, [r4]
 8011966:	2000      	movs	r0, #0
 8011968:	bd10      	pop	{r4, pc}
 801196a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801196e:	4608      	mov	r0, r1
 8011970:	f7f9 be10 	b.w	800b594 <rcutils_system_time_now>

08011974 <rcl_clock_init>:
 8011974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011978:	4606      	mov	r6, r0
 801197a:	4610      	mov	r0, r2
 801197c:	4614      	mov	r4, r2
 801197e:	460d      	mov	r5, r1
 8011980:	f7f9 fc9c 	bl	800b2bc <rcutils_allocator_is_valid>
 8011984:	b128      	cbz	r0, 8011992 <rcl_clock_init+0x1e>
 8011986:	2e03      	cmp	r6, #3
 8011988:	d803      	bhi.n	8011992 <rcl_clock_init+0x1e>
 801198a:	e8df f006 	tbb	[pc, r6]
 801198e:	2c1b      	.short	0x2c1b
 8011990:	0554      	.short	0x0554
 8011992:	200b      	movs	r0, #11
 8011994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011998:	2d00      	cmp	r5, #0
 801199a:	d0fa      	beq.n	8011992 <rcl_clock_init+0x1e>
 801199c:	2c00      	cmp	r4, #0
 801199e:	d0f8      	beq.n	8011992 <rcl_clock_init+0x1e>
 80119a0:	2600      	movs	r6, #0
 80119a2:	702e      	strb	r6, [r5, #0]
 80119a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119a6:	f105 0714 	add.w	r7, r5, #20
 80119aa:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80119ae:	612e      	str	r6, [r5, #16]
 80119b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	603b      	str	r3, [r7, #0]
 80119b6:	2303      	movs	r3, #3
 80119b8:	4a2b      	ldr	r2, [pc, #172]	@ (8011a68 <rcl_clock_init+0xf4>)
 80119ba:	702b      	strb	r3, [r5, #0]
 80119bc:	4630      	mov	r0, r6
 80119be:	60ea      	str	r2, [r5, #12]
 80119c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119c4:	2d00      	cmp	r5, #0
 80119c6:	d0e4      	beq.n	8011992 <rcl_clock_init+0x1e>
 80119c8:	2600      	movs	r6, #0
 80119ca:	702e      	strb	r6, [r5, #0]
 80119cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119ce:	f105 0714 	add.w	r7, r5, #20
 80119d2:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80119d6:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80119da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80119dc:	6823      	ldr	r3, [r4, #0]
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	4630      	mov	r0, r6
 80119e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119e6:	2d00      	cmp	r5, #0
 80119e8:	d0d3      	beq.n	8011992 <rcl_clock_init+0x1e>
 80119ea:	2c00      	cmp	r4, #0
 80119ec:	d0d1      	beq.n	8011992 <rcl_clock_init+0x1e>
 80119ee:	2600      	movs	r6, #0
 80119f0:	702e      	strb	r6, [r5, #0]
 80119f2:	46a4      	mov	ip, r4
 80119f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80119f8:	f105 0714 	add.w	r7, r5, #20
 80119fc:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011a00:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8011a04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011a06:	f8dc 3000 	ldr.w	r3, [ip]
 8011a0a:	603b      	str	r3, [r7, #0]
 8011a0c:	6921      	ldr	r1, [r4, #16]
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	2010      	movs	r0, #16
 8011a12:	4798      	blx	r3
 8011a14:	4603      	mov	r3, r0
 8011a16:	6128      	str	r0, [r5, #16]
 8011a18:	b318      	cbz	r0, 8011a62 <rcl_clock_init+0xee>
 8011a1a:	f04f 0800 	mov.w	r8, #0
 8011a1e:	f04f 0900 	mov.w	r9, #0
 8011a22:	7206      	strb	r6, [r0, #8]
 8011a24:	e9c3 8900 	strd	r8, r9, [r3]
 8011a28:	2301      	movs	r3, #1
 8011a2a:	4a10      	ldr	r2, [pc, #64]	@ (8011a6c <rcl_clock_init+0xf8>)
 8011a2c:	702b      	strb	r3, [r5, #0]
 8011a2e:	4630      	mov	r0, r6
 8011a30:	60ea      	str	r2, [r5, #12]
 8011a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a36:	2d00      	cmp	r5, #0
 8011a38:	d0ab      	beq.n	8011992 <rcl_clock_init+0x1e>
 8011a3a:	2c00      	cmp	r4, #0
 8011a3c:	d0a9      	beq.n	8011992 <rcl_clock_init+0x1e>
 8011a3e:	2600      	movs	r6, #0
 8011a40:	702e      	strb	r6, [r5, #0]
 8011a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a44:	f105 0714 	add.w	r7, r5, #20
 8011a48:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011a4c:	612e      	str	r6, [r5, #16]
 8011a4e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011a50:	6823      	ldr	r3, [r4, #0]
 8011a52:	603b      	str	r3, [r7, #0]
 8011a54:	2302      	movs	r3, #2
 8011a56:	4a06      	ldr	r2, [pc, #24]	@ (8011a70 <rcl_clock_init+0xfc>)
 8011a58:	702b      	strb	r3, [r5, #0]
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	60ea      	str	r2, [r5, #12]
 8011a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a62:	200a      	movs	r0, #10
 8011a64:	e796      	b.n	8011994 <rcl_clock_init+0x20>
 8011a66:	bf00      	nop
 8011a68:	0801194d 	.word	0x0801194d
 8011a6c:	08011955 	.word	0x08011955
 8011a70:	08011945 	.word	0x08011945

08011a74 <rcl_clock_get_now>:
 8011a74:	b140      	cbz	r0, 8011a88 <rcl_clock_get_now+0x14>
 8011a76:	b139      	cbz	r1, 8011a88 <rcl_clock_get_now+0x14>
 8011a78:	7803      	ldrb	r3, [r0, #0]
 8011a7a:	b11b      	cbz	r3, 8011a84 <rcl_clock_get_now+0x10>
 8011a7c:	68c3      	ldr	r3, [r0, #12]
 8011a7e:	b10b      	cbz	r3, 8011a84 <rcl_clock_get_now+0x10>
 8011a80:	6900      	ldr	r0, [r0, #16]
 8011a82:	4718      	bx	r3
 8011a84:	2001      	movs	r0, #1
 8011a86:	4770      	bx	lr
 8011a88:	200b      	movs	r0, #11
 8011a8a:	4770      	bx	lr

08011a8c <rcl_clock_add_jump_callback>:
 8011a8c:	b082      	sub	sp, #8
 8011a8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a92:	a908      	add	r1, sp, #32
 8011a94:	e881 000c 	stmia.w	r1, {r2, r3}
 8011a98:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	@ 0x38
 8011a9c:	b340      	cbz	r0, 8011af0 <rcl_clock_add_jump_callback+0x64>
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	3014      	adds	r0, #20
 8011aa2:	f7f9 fc0b 	bl	800b2bc <rcutils_allocator_is_valid>
 8011aa6:	b318      	cbz	r0, 8011af0 <rcl_clock_add_jump_callback+0x64>
 8011aa8:	b315      	cbz	r5, 8011af0 <rcl_clock_add_jump_callback+0x64>
 8011aaa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011aae:	2a00      	cmp	r2, #0
 8011ab0:	f173 0300 	sbcs.w	r3, r3, #0
 8011ab4:	db1c      	blt.n	8011af0 <rcl_clock_add_jump_callback+0x64>
 8011ab6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011aba:	2a01      	cmp	r2, #1
 8011abc:	f173 0300 	sbcs.w	r3, r3, #0
 8011ac0:	da16      	bge.n	8011af0 <rcl_clock_add_jump_callback+0x64>
 8011ac2:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8011ac6:	2f00      	cmp	r7, #0
 8011ac8:	d03e      	beq.n	8011b48 <rcl_clock_add_jump_callback+0xbc>
 8011aca:	2300      	movs	r3, #0
 8011acc:	f100 0220 	add.w	r2, r0, #32
 8011ad0:	e003      	b.n	8011ada <rcl_clock_add_jump_callback+0x4e>
 8011ad2:	42bb      	cmp	r3, r7
 8011ad4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8011ad8:	d00f      	beq.n	8011afa <rcl_clock_add_jump_callback+0x6e>
 8011ada:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8011ade:	42a9      	cmp	r1, r5
 8011ae0:	f103 0301 	add.w	r3, r3, #1
 8011ae4:	d1f5      	bne.n	8011ad2 <rcl_clock_add_jump_callback+0x46>
 8011ae6:	6811      	ldr	r1, [r2, #0]
 8011ae8:	42b1      	cmp	r1, r6
 8011aea:	d1f2      	bne.n	8011ad2 <rcl_clock_add_jump_callback+0x46>
 8011aec:	2001      	movs	r0, #1
 8011aee:	e000      	b.n	8011af2 <rcl_clock_add_jump_callback+0x66>
 8011af0:	200b      	movs	r0, #11
 8011af2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011af6:	b002      	add	sp, #8
 8011af8:	4770      	bx	lr
 8011afa:	3301      	adds	r3, #1
 8011afc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011b00:	00d9      	lsls	r1, r3, #3
 8011b02:	69e3      	ldr	r3, [r4, #28]
 8011b04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011b06:	4798      	blx	r3
 8011b08:	4684      	mov	ip, r0
 8011b0a:	b1d8      	cbz	r0, 8011b44 <rcl_clock_add_jump_callback+0xb8>
 8011b0c:	af08      	add	r7, sp, #32
 8011b0e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8011b12:	6060      	str	r0, [r4, #4]
 8011b14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011b16:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8011b1a:	eb0c 08c9 	add.w	r8, ip, r9, lsl #3
 8011b1e:	f84c 5039 	str.w	r5, [ip, r9, lsl #3]
 8011b22:	f108 0508 	add.w	r5, r8, #8
 8011b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b28:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011b2c:	f10e 0301 	add.w	r3, lr, #1
 8011b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8011b34:	f8c8 6020 	str.w	r6, [r8, #32]
 8011b38:	60a3      	str	r3, [r4, #8]
 8011b3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b3e:	2000      	movs	r0, #0
 8011b40:	b002      	add	sp, #8
 8011b42:	4770      	bx	lr
 8011b44:	200a      	movs	r0, #10
 8011b46:	e7d4      	b.n	8011af2 <rcl_clock_add_jump_callback+0x66>
 8011b48:	2128      	movs	r1, #40	@ 0x28
 8011b4a:	e7da      	b.n	8011b02 <rcl_clock_add_jump_callback+0x76>

08011b4c <rcl_clock_remove_jump_callback>:
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	d057      	beq.n	8011c00 <rcl_clock_remove_jump_callback+0xb4>
 8011b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b54:	4607      	mov	r7, r0
 8011b56:	3014      	adds	r0, #20
 8011b58:	460c      	mov	r4, r1
 8011b5a:	4615      	mov	r5, r2
 8011b5c:	f7f9 fbae 	bl	800b2bc <rcutils_allocator_is_valid>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d03a      	beq.n	8011bda <rcl_clock_remove_jump_callback+0x8e>
 8011b64:	2c00      	cmp	r4, #0
 8011b66:	d038      	beq.n	8011bda <rcl_clock_remove_jump_callback+0x8e>
 8011b68:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8011b6c:	f1b8 0f00 	cmp.w	r8, #0
 8011b70:	d00c      	beq.n	8011b8c <rcl_clock_remove_jump_callback+0x40>
 8011b72:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8011b76:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8011b7a:	4676      	mov	r6, lr
 8011b7c:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8011b80:	6833      	ldr	r3, [r6, #0]
 8011b82:	42a3      	cmp	r3, r4
 8011b84:	d005      	beq.n	8011b92 <rcl_clock_remove_jump_callback+0x46>
 8011b86:	3628      	adds	r6, #40	@ 0x28
 8011b88:	45b4      	cmp	ip, r6
 8011b8a:	d1f9      	bne.n	8011b80 <rcl_clock_remove_jump_callback+0x34>
 8011b8c:	2001      	movs	r0, #1
 8011b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b92:	6a33      	ldr	r3, [r6, #32]
 8011b94:	3628      	adds	r6, #40	@ 0x28
 8011b96:	4566      	cmp	r6, ip
 8011b98:	d02a      	beq.n	8011bf0 <rcl_clock_remove_jump_callback+0xa4>
 8011b9a:	42ab      	cmp	r3, r5
 8011b9c:	d1f0      	bne.n	8011b80 <rcl_clock_remove_jump_callback+0x34>
 8011b9e:	4635      	mov	r5, r6
 8011ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ba2:	f1a6 0428 	sub.w	r4, r6, #40	@ 0x28
 8011ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011bb0:	3628      	adds	r6, #40	@ 0x28
 8011bb2:	4566      	cmp	r6, ip
 8011bb4:	e884 0003 	stmia.w	r4, {r0, r1}
 8011bb8:	d1f1      	bne.n	8011b9e <rcl_clock_remove_jump_callback+0x52>
 8011bba:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8011bbe:	60bc      	str	r4, [r7, #8]
 8011bc0:	b174      	cbz	r4, 8011be0 <rcl_clock_remove_jump_callback+0x94>
 8011bc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bca:	00e1      	lsls	r1, r4, #3
 8011bcc:	4670      	mov	r0, lr
 8011bce:	4798      	blx	r3
 8011bd0:	b1c0      	cbz	r0, 8011c04 <rcl_clock_remove_jump_callback+0xb8>
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bda:	200b      	movs	r0, #11
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be0:	4670      	mov	r0, lr
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011be6:	4798      	blx	r3
 8011be8:	607c      	str	r4, [r7, #4]
 8011bea:	4620      	mov	r0, r4
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf0:	42ab      	cmp	r3, r5
 8011bf2:	d1cb      	bne.n	8011b8c <rcl_clock_remove_jump_callback+0x40>
 8011bf4:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8011bf8:	60bc      	str	r4, [r7, #8]
 8011bfa:	2c00      	cmp	r4, #0
 8011bfc:	d1e1      	bne.n	8011bc2 <rcl_clock_remove_jump_callback+0x76>
 8011bfe:	e7ef      	b.n	8011be0 <rcl_clock_remove_jump_callback+0x94>
 8011c00:	200b      	movs	r0, #11
 8011c02:	4770      	bx	lr
 8011c04:	200a      	movs	r0, #10
 8011c06:	e7e9      	b.n	8011bdc <rcl_clock_remove_jump_callback+0x90>

08011c08 <_rcl_timer_time_jump>:
 8011c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c0c:	4682      	mov	sl, r0
 8011c0e:	b087      	sub	sp, #28
 8011c10:	4614      	mov	r4, r2
 8011c12:	b131      	cbz	r1, 8011c22 <_rcl_timer_time_jump+0x1a>
 8011c14:	7803      	ldrb	r3, [r0, #0]
 8011c16:	3b02      	subs	r3, #2
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d944      	bls.n	8011ca6 <_rcl_timer_time_jump+0x9e>
 8011c1c:	b007      	add	sp, #28
 8011c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c22:	6813      	ldr	r3, [r2, #0]
 8011c24:	a904      	add	r1, sp, #16
 8011c26:	6818      	ldr	r0, [r3, #0]
 8011c28:	f7ff ff24 	bl	8011a74 <rcl_clock_get_now>
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d1f5      	bne.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011c30:	6820      	ldr	r0, [r4, #0]
 8011c32:	2105      	movs	r1, #5
 8011c34:	3020      	adds	r0, #32
 8011c36:	f001 f993 	bl	8012f60 <__atomic_load_8>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	6820      	ldr	r0, [r4, #0]
 8011c3e:	460b      	mov	r3, r1
 8011c40:	3028      	adds	r0, #40	@ 0x28
 8011c42:	2105      	movs	r1, #5
 8011c44:	4690      	mov	r8, r2
 8011c46:	4699      	mov	r9, r3
 8011c48:	f001 f98a 	bl	8012f60 <__atomic_load_8>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	6820      	ldr	r0, [r4, #0]
 8011c50:	460b      	mov	r3, r1
 8011c52:	3018      	adds	r0, #24
 8011c54:	2105      	movs	r1, #5
 8011c56:	461f      	mov	r7, r3
 8011c58:	4616      	mov	r6, r2
 8011c5a:	f001 f981 	bl	8012f60 <__atomic_load_8>
 8011c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c62:	9103      	str	r1, [sp, #12]
 8011c64:	3b02      	subs	r3, #2
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	4605      	mov	r5, r0
 8011c6a:	d93a      	bls.n	8011ce2 <_rcl_timer_time_jump+0xda>
 8011c6c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011c70:	45b2      	cmp	sl, r6
 8011c72:	eb7b 0307 	sbcs.w	r3, fp, r7
 8011c76:	da64      	bge.n	8011d42 <_rcl_timer_time_jump+0x13a>
 8011c78:	45c2      	cmp	sl, r8
 8011c7a:	eb7b 0309 	sbcs.w	r3, fp, r9
 8011c7e:	dacd      	bge.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011c80:	6820      	ldr	r0, [r4, #0]
 8011c82:	eb15 020a 	adds.w	r2, r5, sl
 8011c86:	f04f 0505 	mov.w	r5, #5
 8011c8a:	eb41 030b 	adc.w	r3, r1, fp
 8011c8e:	3028      	adds	r0, #40	@ 0x28
 8011c90:	9500      	str	r5, [sp, #0]
 8011c92:	f001 f999 	bl	8012fc8 <__atomic_store_8>
 8011c96:	6820      	ldr	r0, [r4, #0]
 8011c98:	9500      	str	r5, [sp, #0]
 8011c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c9e:	3020      	adds	r0, #32
 8011ca0:	f001 f992 	bl	8012fc8 <__atomic_store_8>
 8011ca4:	e7ba      	b.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011ca6:	6813      	ldr	r3, [r2, #0]
 8011ca8:	a904      	add	r1, sp, #16
 8011caa:	6818      	ldr	r0, [r3, #0]
 8011cac:	f7ff fee2 	bl	8011a74 <rcl_clock_get_now>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d1b3      	bne.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011cb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	d0af      	beq.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011cbc:	6820      	ldr	r0, [r4, #0]
 8011cbe:	2105      	movs	r1, #5
 8011cc0:	3028      	adds	r0, #40	@ 0x28
 8011cc2:	f001 f94d 	bl	8012f60 <__atomic_load_8>
 8011cc6:	9a04      	ldr	r2, [sp, #16]
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	9e05      	ldr	r6, [sp, #20]
 8011ccc:	1a82      	subs	r2, r0, r2
 8011cce:	f04f 0405 	mov.w	r4, #5
 8011cd2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011cd6:	9400      	str	r4, [sp, #0]
 8011cd8:	eb61 0306 	sbc.w	r3, r1, r6
 8011cdc:	f001 f974 	bl	8012fc8 <__atomic_store_8>
 8011ce0:	e79c      	b.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ce6:	4313      	orrs	r3, r2
 8011ce8:	d098      	beq.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011cea:	6820      	ldr	r0, [r4, #0]
 8011cec:	f04f 0805 	mov.w	r8, #5
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	3030      	adds	r0, #48	@ 0x30
 8011cf4:	f8cd 8000 	str.w	r8, [sp]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f001 f999 	bl	8013030 <__atomic_exchange_8>
 8011cfe:	4606      	mov	r6, r0
 8011d00:	460f      	mov	r7, r1
 8011d02:	ea56 0307 	orrs.w	r3, r6, r7
 8011d06:	d089      	beq.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d0c:	1b92      	subs	r2, r2, r6
 8011d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8011d12:	9903      	ldr	r1, [sp, #12]
 8011d14:	6820      	ldr	r0, [r4, #0]
 8011d16:	f8cd 8000 	str.w	r8, [sp]
 8011d1a:	1952      	adds	r2, r2, r5
 8011d1c:	eb43 0101 	adc.w	r1, r3, r1
 8011d20:	460b      	mov	r3, r1
 8011d22:	3028      	adds	r0, #40	@ 0x28
 8011d24:	f001 f950 	bl	8012fc8 <__atomic_store_8>
 8011d28:	9a04      	ldr	r2, [sp, #16]
 8011d2a:	6820      	ldr	r0, [r4, #0]
 8011d2c:	9b05      	ldr	r3, [sp, #20]
 8011d2e:	f8cd 8000 	str.w	r8, [sp]
 8011d32:	1b92      	subs	r2, r2, r6
 8011d34:	f100 0020 	add.w	r0, r0, #32
 8011d38:	eb63 0307 	sbc.w	r3, r3, r7
 8011d3c:	f001 f944 	bl	8012fc8 <__atomic_store_8>
 8011d40:	e76c      	b.n	8011c1c <_rcl_timer_time_jump+0x14>
 8011d42:	6820      	ldr	r0, [r4, #0]
 8011d44:	3008      	adds	r0, #8
 8011d46:	f003 f8d3 	bl	8014ef0 <rcl_trigger_guard_condition>
 8011d4a:	e767      	b.n	8011c1c <_rcl_timer_time_jump+0x14>

08011d4c <rcl_get_zero_initialized_timer>:
 8011d4c:	4b01      	ldr	r3, [pc, #4]	@ (8011d54 <rcl_get_zero_initialized_timer+0x8>)
 8011d4e:	6818      	ldr	r0, [r3, #0]
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop
 8011d54:	08016e5c 	.word	0x08016e5c

08011d58 <rcl_timer_init>:
 8011d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d5c:	b0ad      	sub	sp, #180	@ 0xb4
 8011d5e:	4604      	mov	r4, r0
 8011d60:	a839      	add	r0, sp, #228	@ 0xe4
 8011d62:	460d      	mov	r5, r1
 8011d64:	4690      	mov	r8, r2
 8011d66:	f7f9 faa9 	bl	800b2bc <rcutils_allocator_is_valid>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d072      	beq.n	8011e54 <rcl_timer_init+0xfc>
 8011d6e:	2c00      	cmp	r4, #0
 8011d70:	d070      	beq.n	8011e54 <rcl_timer_init+0xfc>
 8011d72:	2d00      	cmp	r5, #0
 8011d74:	d06e      	beq.n	8011e54 <rcl_timer_init+0xfc>
 8011d76:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8011d7a:	2a00      	cmp	r2, #0
 8011d7c:	f173 0300 	sbcs.w	r3, r3, #0
 8011d80:	db68      	blt.n	8011e54 <rcl_timer_init+0xfc>
 8011d82:	6823      	ldr	r3, [r4, #0]
 8011d84:	b12b      	cbz	r3, 8011d92 <rcl_timer_init+0x3a>
 8011d86:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8011d8a:	4650      	mov	r0, sl
 8011d8c:	b02d      	add	sp, #180	@ 0xb4
 8011d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d92:	a90a      	add	r1, sp, #40	@ 0x28
 8011d94:	4628      	mov	r0, r5
 8011d96:	f7ff fe6d 	bl	8011a74 <rcl_clock_get_now>
 8011d9a:	4682      	mov	sl, r0
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d1f4      	bne.n	8011d8a <rcl_timer_init+0x32>
 8011da0:	f10d 0920 	add.w	r9, sp, #32
 8011da4:	4648      	mov	r0, r9
 8011da6:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 8011daa:	f002 ffa5 	bl	8014cf8 <rcl_get_zero_initialized_guard_condition>
 8011dae:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011db2:	f10d 0b68 	add.w	fp, sp, #104	@ 0x68
 8011db6:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 8011dba:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011dbe:	4648      	mov	r0, r9
 8011dc0:	f003 f87c 	bl	8014ebc <rcl_guard_condition_get_default_options>
 8011dc4:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011dc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011dca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011dce:	4641      	mov	r1, r8
 8011dd0:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011dd4:	4658      	mov	r0, fp
 8011dd6:	f002 ff99 	bl	8014d0c <rcl_guard_condition_init>
 8011dda:	4682      	mov	sl, r0
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d1d4      	bne.n	8011d8a <rcl_timer_init+0x32>
 8011de0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011de2:	f893 c000 	ldrb.w	ip, [r3]
 8011de6:	f1bc 0f01 	cmp.w	ip, #1
 8011dea:	d039      	beq.n	8011e60 <rcl_timer_init+0x108>
 8011dec:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8011df0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011df4:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	@ 0x28
 8011df8:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
 8011dfa:	f10d 0e9c 	add.w	lr, sp, #156	@ 0x9c
 8011dfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011e02:	eb18 0606 	adds.w	r6, r8, r6
 8011e06:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8011e08:	9606      	str	r6, [sp, #24]
 8011e0a:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	@ 0xd8
 8011e0e:	eb49 0303 	adc.w	r3, r9, r3
 8011e12:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8011e14:	9307      	str	r3, [sp, #28]
 8011e16:	921c      	str	r2, [sp, #112]	@ 0x70
 8011e18:	e9cd 671e 	strd	r6, r7, [sp, #120]	@ 0x78
 8011e1c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8011e20:	f8dc 3000 	ldr.w	r3, [ip]
 8011e24:	f8ce 3000 	str.w	r3, [lr]
 8011e28:	2000      	movs	r0, #0
 8011e2a:	2100      	movs	r1, #0
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	e9cd 0124 	strd	r0, r1, [sp, #144]	@ 0x90
 8011e32:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011e34:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8011e36:	e9cd 8920 	strd	r8, r9, [sp, #128]	@ 0x80
 8011e3a:	2050      	movs	r0, #80	@ 0x50
 8011e3c:	e9cd 6722 	strd	r6, r7, [sp, #136]	@ 0x88
 8011e40:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
 8011e44:	4798      	blx	r3
 8011e46:	6020      	str	r0, [r4, #0]
 8011e48:	b360      	cbz	r0, 8011ea4 <rcl_timer_init+0x14c>
 8011e4a:	2250      	movs	r2, #80	@ 0x50
 8011e4c:	a918      	add	r1, sp, #96	@ 0x60
 8011e4e:	f003 fd96 	bl	801597e <memcpy>
 8011e52:	e79a      	b.n	8011d8a <rcl_timer_init+0x32>
 8011e54:	f04f 0a0b 	mov.w	sl, #11
 8011e58:	4650      	mov	r0, sl
 8011e5a:	b02d      	add	sp, #180	@ 0xb4
 8011e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e60:	2201      	movs	r2, #1
 8011e62:	2300      	movs	r3, #0
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011e6c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8011e70:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8011e74:	ab14      	add	r3, sp, #80	@ 0x50
 8011e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e78:	f88d c048 	strb.w	ip, [sp, #72]	@ 0x48
 8011e7c:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8011ebc <rcl_timer_init+0x164>
 8011e80:	9405      	str	r4, [sp, #20]
 8011e82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011e86:	f8cd c010 	str.w	ip, [sp, #16]
 8011e8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	@ 0x48
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f7ff fdfc 	bl	8011a8c <rcl_clock_add_jump_callback>
 8011e94:	4680      	mov	r8, r0
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d0a8      	beq.n	8011dec <rcl_timer_init+0x94>
 8011e9a:	4658      	mov	r0, fp
 8011e9c:	f002 ffe8 	bl	8014e70 <rcl_guard_condition_fini>
 8011ea0:	46c2      	mov	sl, r8
 8011ea2:	e772      	b.n	8011d8a <rcl_timer_init+0x32>
 8011ea4:	4658      	mov	r0, fp
 8011ea6:	f002 ffe3 	bl	8014e70 <rcl_guard_condition_fini>
 8011eaa:	4904      	ldr	r1, [pc, #16]	@ (8011ebc <rcl_timer_init+0x164>)
 8011eac:	4622      	mov	r2, r4
 8011eae:	4628      	mov	r0, r5
 8011eb0:	f7ff fe4c 	bl	8011b4c <rcl_clock_remove_jump_callback>
 8011eb4:	f04f 0a0a 	mov.w	sl, #10
 8011eb8:	e767      	b.n	8011d8a <rcl_timer_init+0x32>
 8011eba:	bf00      	nop
 8011ebc:	08011c09 	.word	0x08011c09

08011ec0 <rcl_timer_call>:
 8011ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	b08b      	sub	sp, #44	@ 0x2c
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d06e      	beq.n	8011fa8 <rcl_timer_call+0xe8>
 8011eca:	6803      	ldr	r3, [r0, #0]
 8011ecc:	f3bf 8f5b 	dmb	ish
 8011ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011ed4:	f3bf 8f5b 	dmb	ish
 8011ed8:	4604      	mov	r4, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d159      	bne.n	8011f92 <rcl_timer_call+0xd2>
 8011ede:	6803      	ldr	r3, [r0, #0]
 8011ee0:	a908      	add	r1, sp, #32
 8011ee2:	6818      	ldr	r0, [r3, #0]
 8011ee4:	f7ff fdc6 	bl	8011a74 <rcl_clock_get_now>
 8011ee8:	4605      	mov	r5, r0
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d14d      	bne.n	8011f8a <rcl_timer_call+0xca>
 8011eee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011ef2:	2a00      	cmp	r2, #0
 8011ef4:	f173 0100 	sbcs.w	r1, r3, #0
 8011ef8:	db51      	blt.n	8011f9e <rcl_timer_call+0xde>
 8011efa:	6820      	ldr	r0, [r4, #0]
 8011efc:	2605      	movs	r6, #5
 8011efe:	9600      	str	r6, [sp, #0]
 8011f00:	3020      	adds	r0, #32
 8011f02:	f001 f895 	bl	8013030 <__atomic_exchange_8>
 8011f06:	6822      	ldr	r2, [r4, #0]
 8011f08:	f3bf 8f5b 	dmb	ish
 8011f0c:	4682      	mov	sl, r0
 8011f0e:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8011f12:	f3bf 8f5b 	dmb	ish
 8011f16:	6820      	ldr	r0, [r4, #0]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	3028      	adds	r0, #40	@ 0x28
 8011f1c:	4631      	mov	r1, r6
 8011f1e:	9305      	str	r3, [sp, #20]
 8011f20:	f001 f81e 	bl	8012f60 <__atomic_load_8>
 8011f24:	4603      	mov	r3, r0
 8011f26:	6820      	ldr	r0, [r4, #0]
 8011f28:	460a      	mov	r2, r1
 8011f2a:	3018      	adds	r0, #24
 8011f2c:	4631      	mov	r1, r6
 8011f2e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8011f32:	f001 f815 	bl	8012f60 <__atomic_load_8>
 8011f36:	9b04      	ldr	r3, [sp, #16]
 8011f38:	9a03      	ldr	r2, [sp, #12]
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	460f      	mov	r7, r1
 8011f3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011f42:	eb13 0806 	adds.w	r8, r3, r6
 8011f46:	eb42 0907 	adc.w	r9, r2, r7
 8011f4a:	4580      	cmp	r8, r0
 8011f4c:	eb79 0301 	sbcs.w	r3, r9, r1
 8011f50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011f54:	460a      	mov	r2, r1
 8011f56:	da04      	bge.n	8011f62 <rcl_timer_call+0xa2>
 8011f58:	ea56 0307 	orrs.w	r3, r6, r7
 8011f5c:	d129      	bne.n	8011fb2 <rcl_timer_call+0xf2>
 8011f5e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	2105      	movs	r1, #5
 8011f66:	4642      	mov	r2, r8
 8011f68:	464b      	mov	r3, r9
 8011f6a:	3028      	adds	r0, #40	@ 0x28
 8011f6c:	9100      	str	r1, [sp, #0]
 8011f6e:	f001 f82b 	bl	8012fc8 <__atomic_store_8>
 8011f72:	f1bb 0f00 	cmp.w	fp, #0
 8011f76:	d008      	beq.n	8011f8a <rcl_timer_call+0xca>
 8011f78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011f7c:	9905      	ldr	r1, [sp, #20]
 8011f7e:	ebb2 020a 	subs.w	r2, r2, sl
 8011f82:	4620      	mov	r0, r4
 8011f84:	eb63 0301 	sbc.w	r3, r3, r1
 8011f88:	47d8      	blx	fp
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	b00b      	add	sp, #44	@ 0x2c
 8011f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f92:	f240 3521 	movw	r5, #801	@ 0x321
 8011f96:	4628      	mov	r0, r5
 8011f98:	b00b      	add	sp, #44	@ 0x2c
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	2501      	movs	r5, #1
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	b00b      	add	sp, #44	@ 0x2c
 8011fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa8:	250b      	movs	r5, #11
 8011faa:	4628      	mov	r0, r5
 8011fac:	b00b      	add	sp, #44	@ 0x2c
 8011fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb2:	ebb0 0008 	subs.w	r0, r0, r8
 8011fb6:	eb62 0109 	sbc.w	r1, r2, r9
 8011fba:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 8011fbe:	463b      	mov	r3, r7
 8011fc0:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8011fc4:	4632      	mov	r2, r6
 8011fc6:	f7ee f993 	bl	80002f0 <__aeabi_ldivmod>
 8011fca:	1c43      	adds	r3, r0, #1
 8011fcc:	f141 0100 	adc.w	r1, r1, #0
 8011fd0:	fb00 7007 	mla	r0, r0, r7, r7
 8011fd4:	fb06 0001 	mla	r0, r6, r1, r0
 8011fd8:	fba3 6706 	umull	r6, r7, r3, r6
 8011fdc:	4407      	add	r7, r0
 8011fde:	eb18 0806 	adds.w	r8, r8, r6
 8011fe2:	eb49 0907 	adc.w	r9, r9, r7
 8011fe6:	e7bc      	b.n	8011f62 <rcl_timer_call+0xa2>

08011fe8 <rcl_timer_is_ready>:
 8011fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fec:	b082      	sub	sp, #8
 8011fee:	b310      	cbz	r0, 8012036 <rcl_timer_is_ready+0x4e>
 8011ff0:	4688      	mov	r8, r1
 8011ff2:	b301      	cbz	r1, 8012036 <rcl_timer_is_ready+0x4e>
 8011ff4:	6803      	ldr	r3, [r0, #0]
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	4669      	mov	r1, sp
 8011ffa:	6818      	ldr	r0, [r3, #0]
 8011ffc:	f7ff fd3a 	bl	8011a74 <rcl_clock_get_now>
 8012000:	4605      	mov	r5, r0
 8012002:	b118      	cbz	r0, 801200c <rcl_timer_is_ready+0x24>
 8012004:	4628      	mov	r0, r5
 8012006:	b002      	add	sp, #8
 8012008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801200c:	6820      	ldr	r0, [r4, #0]
 801200e:	2105      	movs	r1, #5
 8012010:	3028      	adds	r0, #40	@ 0x28
 8012012:	f000 ffa5 	bl	8012f60 <__atomic_load_8>
 8012016:	e9dd 3200 	ldrd	r3, r2, [sp]
 801201a:	1ac6      	subs	r6, r0, r3
 801201c:	eb61 0702 	sbc.w	r7, r1, r2
 8012020:	2e01      	cmp	r6, #1
 8012022:	f177 0300 	sbcs.w	r3, r7, #0
 8012026:	db0b      	blt.n	8012040 <rcl_timer_is_ready+0x58>
 8012028:	462b      	mov	r3, r5
 801202a:	4628      	mov	r0, r5
 801202c:	f888 3000 	strb.w	r3, [r8]
 8012030:	b002      	add	sp, #8
 8012032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012036:	250b      	movs	r5, #11
 8012038:	4628      	mov	r0, r5
 801203a:	b002      	add	sp, #8
 801203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	f3bf 8f5b 	dmb	ish
 8012046:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801204a:	f3bf 8f5b 	dmb	ish
 801204e:	fab3 f383 	clz	r3, r3
 8012052:	095b      	lsrs	r3, r3, #5
 8012054:	e7e9      	b.n	801202a <rcl_timer_is_ready+0x42>
 8012056:	bf00      	nop

08012058 <rcl_timer_get_time_until_next_call>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	b1d8      	cbz	r0, 8012096 <rcl_timer_get_time_until_next_call+0x3e>
 801205e:	460d      	mov	r5, r1
 8012060:	b1c9      	cbz	r1, 8012096 <rcl_timer_get_time_until_next_call+0x3e>
 8012062:	6803      	ldr	r3, [r0, #0]
 8012064:	4604      	mov	r4, r0
 8012066:	4669      	mov	r1, sp
 8012068:	6818      	ldr	r0, [r3, #0]
 801206a:	f7ff fd03 	bl	8011a74 <rcl_clock_get_now>
 801206e:	4606      	mov	r6, r0
 8012070:	b110      	cbz	r0, 8012078 <rcl_timer_get_time_until_next_call+0x20>
 8012072:	4630      	mov	r0, r6
 8012074:	b002      	add	sp, #8
 8012076:	bd70      	pop	{r4, r5, r6, pc}
 8012078:	6820      	ldr	r0, [r4, #0]
 801207a:	2105      	movs	r1, #5
 801207c:	3028      	adds	r0, #40	@ 0x28
 801207e:	f000 ff6f 	bl	8012f60 <__atomic_load_8>
 8012082:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012086:	1ac0      	subs	r0, r0, r3
 8012088:	eb61 0102 	sbc.w	r1, r1, r2
 801208c:	e9c5 0100 	strd	r0, r1, [r5]
 8012090:	4630      	mov	r0, r6
 8012092:	b002      	add	sp, #8
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	260b      	movs	r6, #11
 8012098:	4630      	mov	r0, r6
 801209a:	b002      	add	sp, #8
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	bf00      	nop

080120a0 <rcl_timer_is_canceled>:
 80120a0:	b168      	cbz	r0, 80120be <rcl_timer_is_canceled+0x1e>
 80120a2:	b161      	cbz	r1, 80120be <rcl_timer_is_canceled+0x1e>
 80120a4:	6803      	ldr	r3, [r0, #0]
 80120a6:	f3bf 8f5b 	dmb	ish
 80120aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80120ae:	f3bf 8f5b 	dmb	ish
 80120b2:	3b00      	subs	r3, #0
 80120b4:	bf18      	it	ne
 80120b6:	2301      	movne	r3, #1
 80120b8:	700b      	strb	r3, [r1, #0]
 80120ba:	2000      	movs	r0, #0
 80120bc:	4770      	bx	lr
 80120be:	200b      	movs	r0, #11
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop

080120c4 <rcl_timer_get_guard_condition>:
 80120c4:	b130      	cbz	r0, 80120d4 <rcl_timer_get_guard_condition+0x10>
 80120c6:	6800      	ldr	r0, [r0, #0]
 80120c8:	b120      	cbz	r0, 80120d4 <rcl_timer_get_guard_condition+0x10>
 80120ca:	68c3      	ldr	r3, [r0, #12]
 80120cc:	b10b      	cbz	r3, 80120d2 <rcl_timer_get_guard_condition+0xe>
 80120ce:	3008      	adds	r0, #8
 80120d0:	4770      	bx	lr
 80120d2:	4618      	mov	r0, r3
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop

080120d8 <rcl_validate_enclave_name_with_size>:
 80120d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120da:	b0c3      	sub	sp, #268	@ 0x10c
 80120dc:	b1d0      	cbz	r0, 8012114 <rcl_validate_enclave_name_with_size+0x3c>
 80120de:	4615      	mov	r5, r2
 80120e0:	b1c2      	cbz	r2, 8012114 <rcl_validate_enclave_name_with_size+0x3c>
 80120e2:	461f      	mov	r7, r3
 80120e4:	466a      	mov	r2, sp
 80120e6:	ab01      	add	r3, sp, #4
 80120e8:	460e      	mov	r6, r1
 80120ea:	f001 f95b 	bl	80133a4 <rmw_validate_namespace_with_size>
 80120ee:	4604      	mov	r4, r0
 80120f0:	b9e0      	cbnz	r0, 801212c <rcl_validate_enclave_name_with_size+0x54>
 80120f2:	9b00      	ldr	r3, [sp, #0]
 80120f4:	b923      	cbnz	r3, 8012100 <rcl_validate_enclave_name_with_size+0x28>
 80120f6:	2300      	movs	r3, #0
 80120f8:	602b      	str	r3, [r5, #0]
 80120fa:	4620      	mov	r0, r4
 80120fc:	b043      	add	sp, #268	@ 0x10c
 80120fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012100:	2b07      	cmp	r3, #7
 8012102:	d00b      	beq.n	801211c <rcl_validate_enclave_name_with_size+0x44>
 8012104:	1e5a      	subs	r2, r3, #1
 8012106:	2a05      	cmp	r2, #5
 8012108:	d82e      	bhi.n	8012168 <rcl_validate_enclave_name_with_size+0x90>
 801210a:	e8df f002 	tbb	[pc, r2]
 801210e:	211e      	.short	0x211e
 8012110:	152a2724 	.word	0x152a2724
 8012114:	240b      	movs	r4, #11
 8012116:	4620      	mov	r0, r4
 8012118:	b043      	add	sp, #268	@ 0x10c
 801211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801211c:	2eff      	cmp	r6, #255	@ 0xff
 801211e:	d9ea      	bls.n	80120f6 <rcl_validate_enclave_name_with_size+0x1e>
 8012120:	602b      	str	r3, [r5, #0]
 8012122:	2f00      	cmp	r7, #0
 8012124:	d0e9      	beq.n	80120fa <rcl_validate_enclave_name_with_size+0x22>
 8012126:	23fe      	movs	r3, #254	@ 0xfe
 8012128:	603b      	str	r3, [r7, #0]
 801212a:	e7e6      	b.n	80120fa <rcl_validate_enclave_name_with_size+0x22>
 801212c:	f7fe fe00 	bl	8010d30 <rcl_convert_rmw_ret_to_rcl_ret>
 8012130:	4604      	mov	r4, r0
 8012132:	4620      	mov	r0, r4
 8012134:	b043      	add	sp, #268	@ 0x10c
 8012136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012138:	2306      	movs	r3, #6
 801213a:	602b      	str	r3, [r5, #0]
 801213c:	2f00      	cmp	r7, #0
 801213e:	d0dc      	beq.n	80120fa <rcl_validate_enclave_name_with_size+0x22>
 8012140:	9b01      	ldr	r3, [sp, #4]
 8012142:	603b      	str	r3, [r7, #0]
 8012144:	4620      	mov	r0, r4
 8012146:	b043      	add	sp, #268	@ 0x10c
 8012148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801214a:	2301      	movs	r3, #1
 801214c:	602b      	str	r3, [r5, #0]
 801214e:	e7f5      	b.n	801213c <rcl_validate_enclave_name_with_size+0x64>
 8012150:	2302      	movs	r3, #2
 8012152:	602b      	str	r3, [r5, #0]
 8012154:	e7f2      	b.n	801213c <rcl_validate_enclave_name_with_size+0x64>
 8012156:	2303      	movs	r3, #3
 8012158:	602b      	str	r3, [r5, #0]
 801215a:	e7ef      	b.n	801213c <rcl_validate_enclave_name_with_size+0x64>
 801215c:	2304      	movs	r3, #4
 801215e:	602b      	str	r3, [r5, #0]
 8012160:	e7ec      	b.n	801213c <rcl_validate_enclave_name_with_size+0x64>
 8012162:	2305      	movs	r3, #5
 8012164:	602b      	str	r3, [r5, #0]
 8012166:	e7e9      	b.n	801213c <rcl_validate_enclave_name_with_size+0x64>
 8012168:	4a03      	ldr	r2, [pc, #12]	@ (8012178 <rcl_validate_enclave_name_with_size+0xa0>)
 801216a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801216e:	a802      	add	r0, sp, #8
 8012170:	f001 f8a6 	bl	80132c0 <rcutils_snprintf>
 8012174:	2401      	movs	r4, #1
 8012176:	e7c0      	b.n	80120fa <rcl_validate_enclave_name_with_size+0x22>
 8012178:	08016e60 	.word	0x08016e60

0801217c <rcl_validate_enclave_name>:
 801217c:	b168      	cbz	r0, 801219a <rcl_validate_enclave_name+0x1e>
 801217e:	b570      	push	{r4, r5, r6, lr}
 8012180:	460d      	mov	r5, r1
 8012182:	4616      	mov	r6, r2
 8012184:	4604      	mov	r4, r0
 8012186:	f7ee f855 	bl	8000234 <strlen>
 801218a:	4633      	mov	r3, r6
 801218c:	4601      	mov	r1, r0
 801218e:	462a      	mov	r2, r5
 8012190:	4620      	mov	r0, r4
 8012192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012196:	f7ff bf9f 	b.w	80120d8 <rcl_validate_enclave_name_with_size>
 801219a:	200b      	movs	r0, #11
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop

080121a0 <rcl_validate_topic_name>:
 80121a0:	2800      	cmp	r0, #0
 80121a2:	f000 808b 	beq.w	80122bc <rcl_validate_topic_name+0x11c>
 80121a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121aa:	460e      	mov	r6, r1
 80121ac:	2900      	cmp	r1, #0
 80121ae:	f000 808c 	beq.w	80122ca <rcl_validate_topic_name+0x12a>
 80121b2:	4617      	mov	r7, r2
 80121b4:	4605      	mov	r5, r0
 80121b6:	f7ee f83d 	bl	8000234 <strlen>
 80121ba:	b1b0      	cbz	r0, 80121ea <rcl_validate_topic_name+0x4a>
 80121bc:	f895 9000 	ldrb.w	r9, [r5]
 80121c0:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 8012370 <rcl_validate_topic_name+0x1d0>
 80121c4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80121c8:	f013 0304 	ands.w	r3, r3, #4
 80121cc:	d178      	bne.n	80122c0 <rcl_validate_topic_name+0x120>
 80121ce:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80121d2:	f815 2008 	ldrb.w	r2, [r5, r8]
 80121d6:	2a2f      	cmp	r2, #47	@ 0x2f
 80121d8:	d10e      	bne.n	80121f8 <rcl_validate_topic_name+0x58>
 80121da:	2202      	movs	r2, #2
 80121dc:	6032      	str	r2, [r6, #0]
 80121de:	b36f      	cbz	r7, 801223c <rcl_validate_topic_name+0x9c>
 80121e0:	f8c7 8000 	str.w	r8, [r7]
 80121e4:	4618      	mov	r0, r3
 80121e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121ea:	2301      	movs	r3, #1
 80121ec:	6033      	str	r3, [r6, #0]
 80121ee:	b32f      	cbz	r7, 801223c <rcl_validate_topic_name+0x9c>
 80121f0:	2000      	movs	r0, #0
 80121f2:	6038      	str	r0, [r7, #0]
 80121f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f8:	461c      	mov	r4, r3
 80121fa:	4619      	mov	r1, r3
 80121fc:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8012200:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8012204:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012208:	f1be 0f09 	cmp.w	lr, #9
 801220c:	d946      	bls.n	801229c <rcl_validate_topic_name+0xfc>
 801220e:	f022 0e20 	bic.w	lr, r2, #32
 8012212:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8012216:	f1be 0f19 	cmp.w	lr, #25
 801221a:	d93f      	bls.n	801229c <rcl_validate_topic_name+0xfc>
 801221c:	2a5f      	cmp	r2, #95	@ 0x5f
 801221e:	d014      	beq.n	801224a <rcl_validate_topic_name+0xaa>
 8012220:	2a2f      	cmp	r2, #47	@ 0x2f
 8012222:	d05b      	beq.n	80122dc <rcl_validate_topic_name+0x13c>
 8012224:	2a7e      	cmp	r2, #126	@ 0x7e
 8012226:	d052      	beq.n	80122ce <rcl_validate_topic_name+0x12e>
 8012228:	2a7b      	cmp	r2, #123	@ 0x7b
 801222a:	d00a      	beq.n	8012242 <rcl_validate_topic_name+0xa2>
 801222c:	2a7d      	cmp	r2, #125	@ 0x7d
 801222e:	d16f      	bne.n	8012310 <rcl_validate_topic_name+0x170>
 8012230:	2c00      	cmp	r4, #0
 8012232:	d15e      	bne.n	80122f2 <rcl_validate_topic_name+0x152>
 8012234:	2305      	movs	r3, #5
 8012236:	6033      	str	r3, [r6, #0]
 8012238:	b107      	cbz	r7, 801223c <rcl_validate_topic_name+0x9c>
 801223a:	6039      	str	r1, [r7, #0]
 801223c:	2000      	movs	r0, #0
 801223e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012242:	2c00      	cmp	r4, #0
 8012244:	d14c      	bne.n	80122e0 <rcl_validate_topic_name+0x140>
 8012246:	460b      	mov	r3, r1
 8012248:	2401      	movs	r4, #1
 801224a:	3101      	adds	r1, #1
 801224c:	4288      	cmp	r0, r1
 801224e:	d1d7      	bne.n	8012200 <rcl_validate_topic_name+0x60>
 8012250:	2c00      	cmp	r4, #0
 8012252:	d156      	bne.n	8012302 <rcl_validate_topic_name+0x162>
 8012254:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8012258:	4620      	mov	r0, r4
 801225a:	d061      	beq.n	8012320 <rcl_validate_topic_name+0x180>
 801225c:	f108 0e01 	add.w	lr, r8, #1
 8012260:	e007      	b.n	8012272 <rcl_validate_topic_name+0xd2>
 8012262:	2801      	cmp	r0, #1
 8012264:	d047      	beq.n	80122f6 <rcl_validate_topic_name+0x156>
 8012266:	461a      	mov	r2, r3
 8012268:	4291      	cmp	r1, r2
 801226a:	4618      	mov	r0, r3
 801226c:	f105 0501 	add.w	r5, r5, #1
 8012270:	d944      	bls.n	80122fc <rcl_validate_topic_name+0x15c>
 8012272:	4580      	cmp	r8, r0
 8012274:	f100 0301 	add.w	r3, r0, #1
 8012278:	d037      	beq.n	80122ea <rcl_validate_topic_name+0x14a>
 801227a:	782a      	ldrb	r2, [r5, #0]
 801227c:	2a2f      	cmp	r2, #47	@ 0x2f
 801227e:	d1f0      	bne.n	8012262 <rcl_validate_topic_name+0xc2>
 8012280:	786b      	ldrb	r3, [r5, #1]
 8012282:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8012286:	1c43      	adds	r3, r0, #1
 8012288:	0760      	lsls	r0, r4, #29
 801228a:	461a      	mov	r2, r3
 801228c:	d5ec      	bpl.n	8012268 <rcl_validate_topic_name+0xc8>
 801228e:	2304      	movs	r3, #4
 8012290:	6033      	str	r3, [r6, #0]
 8012292:	2f00      	cmp	r7, #0
 8012294:	d0d2      	beq.n	801223c <rcl_validate_topic_name+0x9c>
 8012296:	603a      	str	r2, [r7, #0]
 8012298:	2000      	movs	r0, #0
 801229a:	e7ab      	b.n	80121f4 <rcl_validate_topic_name+0x54>
 801229c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80122a0:	0752      	lsls	r2, r2, #29
 80122a2:	d5d2      	bpl.n	801224a <rcl_validate_topic_name+0xaa>
 80122a4:	2c00      	cmp	r4, #0
 80122a6:	d0d0      	beq.n	801224a <rcl_validate_topic_name+0xaa>
 80122a8:	2900      	cmp	r1, #0
 80122aa:	d0ce      	beq.n	801224a <rcl_validate_topic_name+0xaa>
 80122ac:	1e4a      	subs	r2, r1, #1
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d1cb      	bne.n	801224a <rcl_validate_topic_name+0xaa>
 80122b2:	2309      	movs	r3, #9
 80122b4:	6033      	str	r3, [r6, #0]
 80122b6:	2f00      	cmp	r7, #0
 80122b8:	d1bf      	bne.n	801223a <rcl_validate_topic_name+0x9a>
 80122ba:	e7bf      	b.n	801223c <rcl_validate_topic_name+0x9c>
 80122bc:	200b      	movs	r0, #11
 80122be:	4770      	bx	lr
 80122c0:	2304      	movs	r3, #4
 80122c2:	6033      	str	r3, [r6, #0]
 80122c4:	2f00      	cmp	r7, #0
 80122c6:	d193      	bne.n	80121f0 <rcl_validate_topic_name+0x50>
 80122c8:	e7b8      	b.n	801223c <rcl_validate_topic_name+0x9c>
 80122ca:	200b      	movs	r0, #11
 80122cc:	e792      	b.n	80121f4 <rcl_validate_topic_name+0x54>
 80122ce:	2900      	cmp	r1, #0
 80122d0:	d0bb      	beq.n	801224a <rcl_validate_topic_name+0xaa>
 80122d2:	2306      	movs	r3, #6
 80122d4:	6033      	str	r3, [r6, #0]
 80122d6:	2f00      	cmp	r7, #0
 80122d8:	d1af      	bne.n	801223a <rcl_validate_topic_name+0x9a>
 80122da:	e7af      	b.n	801223c <rcl_validate_topic_name+0x9c>
 80122dc:	2c00      	cmp	r4, #0
 80122de:	d0b4      	beq.n	801224a <rcl_validate_topic_name+0xaa>
 80122e0:	2308      	movs	r3, #8
 80122e2:	6033      	str	r3, [r6, #0]
 80122e4:	2f00      	cmp	r7, #0
 80122e6:	d1a8      	bne.n	801223a <rcl_validate_topic_name+0x9a>
 80122e8:	e7a8      	b.n	801223c <rcl_validate_topic_name+0x9c>
 80122ea:	4672      	mov	r2, lr
 80122ec:	f108 0301 	add.w	r3, r8, #1
 80122f0:	e7ba      	b.n	8012268 <rcl_validate_topic_name+0xc8>
 80122f2:	2400      	movs	r4, #0
 80122f4:	e7a9      	b.n	801224a <rcl_validate_topic_name+0xaa>
 80122f6:	2202      	movs	r2, #2
 80122f8:	4613      	mov	r3, r2
 80122fa:	e7b5      	b.n	8012268 <rcl_validate_topic_name+0xc8>
 80122fc:	2000      	movs	r0, #0
 80122fe:	6030      	str	r0, [r6, #0]
 8012300:	e778      	b.n	80121f4 <rcl_validate_topic_name+0x54>
 8012302:	2205      	movs	r2, #5
 8012304:	6032      	str	r2, [r6, #0]
 8012306:	2f00      	cmp	r7, #0
 8012308:	d098      	beq.n	801223c <rcl_validate_topic_name+0x9c>
 801230a:	603b      	str	r3, [r7, #0]
 801230c:	2000      	movs	r0, #0
 801230e:	e771      	b.n	80121f4 <rcl_validate_topic_name+0x54>
 8012310:	2c00      	cmp	r4, #0
 8012312:	bf14      	ite	ne
 8012314:	2308      	movne	r3, #8
 8012316:	2303      	moveq	r3, #3
 8012318:	6033      	str	r3, [r6, #0]
 801231a:	2f00      	cmp	r7, #0
 801231c:	d18d      	bne.n	801223a <rcl_validate_topic_name+0x9a>
 801231e:	e78d      	b.n	801223c <rcl_validate_topic_name+0x9c>
 8012320:	f108 0401 	add.w	r4, r8, #1
 8012324:	e007      	b.n	8012336 <rcl_validate_topic_name+0x196>
 8012326:	2801      	cmp	r0, #1
 8012328:	d019      	beq.n	801235e <rcl_validate_topic_name+0x1be>
 801232a:	461a      	mov	r2, r3
 801232c:	4291      	cmp	r1, r2
 801232e:	4618      	mov	r0, r3
 8012330:	f105 0501 	add.w	r5, r5, #1
 8012334:	d9e2      	bls.n	80122fc <rcl_validate_topic_name+0x15c>
 8012336:	4580      	cmp	r8, r0
 8012338:	f100 0301 	add.w	r3, r0, #1
 801233c:	d00b      	beq.n	8012356 <rcl_validate_topic_name+0x1b6>
 801233e:	782a      	ldrb	r2, [r5, #0]
 8012340:	2a2f      	cmp	r2, #47	@ 0x2f
 8012342:	d1f0      	bne.n	8012326 <rcl_validate_topic_name+0x186>
 8012344:	786b      	ldrb	r3, [r5, #1]
 8012346:	f81c e003 	ldrb.w	lr, [ip, r3]
 801234a:	1c43      	adds	r3, r0, #1
 801234c:	f01e 0f04 	tst.w	lr, #4
 8012350:	461a      	mov	r2, r3
 8012352:	d0eb      	beq.n	801232c <rcl_validate_topic_name+0x18c>
 8012354:	e79b      	b.n	801228e <rcl_validate_topic_name+0xee>
 8012356:	4622      	mov	r2, r4
 8012358:	f108 0301 	add.w	r3, r8, #1
 801235c:	e7e6      	b.n	801232c <rcl_validate_topic_name+0x18c>
 801235e:	2307      	movs	r3, #7
 8012360:	6033      	str	r3, [r6, #0]
 8012362:	2f00      	cmp	r7, #0
 8012364:	f43f af6a 	beq.w	801223c <rcl_validate_topic_name+0x9c>
 8012368:	6038      	str	r0, [r7, #0]
 801236a:	2000      	movs	r0, #0
 801236c:	e742      	b.n	80121f4 <rcl_validate_topic_name+0x54>
 801236e:	bf00      	nop
 8012370:	080172e8 	.word	0x080172e8

08012374 <rcl_get_zero_initialized_wait_set>:
 8012374:	b470      	push	{r4, r5, r6}
 8012376:	4d07      	ldr	r5, [pc, #28]	@ (8012394 <rcl_get_zero_initialized_wait_set+0x20>)
 8012378:	4606      	mov	r6, r0
 801237a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801237c:	4634      	mov	r4, r6
 801237e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012388:	682b      	ldr	r3, [r5, #0]
 801238a:	6023      	str	r3, [r4, #0]
 801238c:	4630      	mov	r0, r6
 801238e:	bc70      	pop	{r4, r5, r6}
 8012390:	4770      	bx	lr
 8012392:	bf00      	nop
 8012394:	08016ec0 	.word	0x08016ec0

08012398 <rcl_wait_set_is_valid>:
 8012398:	b118      	cbz	r0, 80123a2 <rcl_wait_set_is_valid+0xa>
 801239a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801239c:	3800      	subs	r0, #0
 801239e:	bf18      	it	ne
 80123a0:	2001      	movne	r0, #1
 80123a2:	4770      	bx	lr

080123a4 <rcl_wait_set_fini>:
 80123a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a8:	b082      	sub	sp, #8
 80123aa:	2800      	cmp	r0, #0
 80123ac:	f000 8095 	beq.w	80124da <rcl_wait_set_fini+0x136>
 80123b0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80123b2:	4604      	mov	r4, r0
 80123b4:	2e00      	cmp	r6, #0
 80123b6:	f000 808c 	beq.w	80124d2 <rcl_wait_set_fini+0x12e>
 80123ba:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80123bc:	f001 fd12 	bl	8013de4 <rmw_destroy_wait_set>
 80123c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80123c2:	1e06      	subs	r6, r0, #0
 80123c4:	bf18      	it	ne
 80123c6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80123ca:	2d00      	cmp	r5, #0
 80123cc:	f000 8081 	beq.w	80124d2 <rcl_wait_set_fini+0x12e>
 80123d0:	6820      	ldr	r0, [r4, #0]
 80123d2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80123d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80123d8:	2700      	movs	r7, #0
 80123da:	6067      	str	r7, [r4, #4]
 80123dc:	602f      	str	r7, [r5, #0]
 80123de:	b120      	cbz	r0, 80123ea <rcl_wait_set_fini+0x46>
 80123e0:	9101      	str	r1, [sp, #4]
 80123e2:	47c0      	blx	r8
 80123e4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80123e6:	9901      	ldr	r1, [sp, #4]
 80123e8:	6027      	str	r7, [r4, #0]
 80123ea:	68a8      	ldr	r0, [r5, #8]
 80123ec:	b120      	cbz	r0, 80123f8 <rcl_wait_set_fini+0x54>
 80123ee:	47c0      	blx	r8
 80123f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80123f2:	2300      	movs	r3, #0
 80123f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80123f8:	68a0      	ldr	r0, [r4, #8]
 80123fa:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80123fc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80123fe:	f04f 0800 	mov.w	r8, #0
 8012402:	f8c4 800c 	str.w	r8, [r4, #12]
 8012406:	f8c5 800c 	str.w	r8, [r5, #12]
 801240a:	b128      	cbz	r0, 8012418 <rcl_wait_set_fini+0x74>
 801240c:	47b8      	blx	r7
 801240e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012410:	f8c4 8008 	str.w	r8, [r4, #8]
 8012414:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012416:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012418:	6968      	ldr	r0, [r5, #20]
 801241a:	f04f 0800 	mov.w	r8, #0
 801241e:	f8c5 8010 	str.w	r8, [r5, #16]
 8012422:	b128      	cbz	r0, 8012430 <rcl_wait_set_fini+0x8c>
 8012424:	47b8      	blx	r7
 8012426:	f8c5 8014 	str.w	r8, [r5, #20]
 801242a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801242c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801242e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012430:	6920      	ldr	r0, [r4, #16]
 8012432:	f04f 0800 	mov.w	r8, #0
 8012436:	f8c4 8014 	str.w	r8, [r4, #20]
 801243a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801243e:	b128      	cbz	r0, 801244c <rcl_wait_set_fini+0xa8>
 8012440:	47b8      	blx	r7
 8012442:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012444:	f8c4 8010 	str.w	r8, [r4, #16]
 8012448:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801244a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801244c:	69a0      	ldr	r0, [r4, #24]
 801244e:	f04f 0800 	mov.w	r8, #0
 8012452:	f8c4 801c 	str.w	r8, [r4, #28]
 8012456:	f8c5 8018 	str.w	r8, [r5, #24]
 801245a:	b128      	cbz	r0, 8012468 <rcl_wait_set_fini+0xc4>
 801245c:	9101      	str	r1, [sp, #4]
 801245e:	47b8      	blx	r7
 8012460:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012462:	9901      	ldr	r1, [sp, #4]
 8012464:	f8c4 8018 	str.w	r8, [r4, #24]
 8012468:	6a28      	ldr	r0, [r5, #32]
 801246a:	b120      	cbz	r0, 8012476 <rcl_wait_set_fini+0xd2>
 801246c:	47b8      	blx	r7
 801246e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012470:	2300      	movs	r3, #0
 8012472:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8012476:	6a20      	ldr	r0, [r4, #32]
 8012478:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801247c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801247e:	2700      	movs	r7, #0
 8012480:	6267      	str	r7, [r4, #36]	@ 0x24
 8012482:	626f      	str	r7, [r5, #36]	@ 0x24
 8012484:	b120      	cbz	r0, 8012490 <rcl_wait_set_fini+0xec>
 8012486:	9101      	str	r1, [sp, #4]
 8012488:	47c0      	blx	r8
 801248a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801248c:	9901      	ldr	r1, [sp, #4]
 801248e:	6227      	str	r7, [r4, #32]
 8012490:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012492:	b120      	cbz	r0, 801249e <rcl_wait_set_fini+0xfa>
 8012494:	47c0      	blx	r8
 8012496:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012498:	2300      	movs	r3, #0
 801249a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801249e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80124a0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80124a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80124a6:	2700      	movs	r7, #0
 80124a8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80124aa:	632f      	str	r7, [r5, #48]	@ 0x30
 80124ac:	b120      	cbz	r0, 80124b8 <rcl_wait_set_fini+0x114>
 80124ae:	9101      	str	r1, [sp, #4]
 80124b0:	47c0      	blx	r8
 80124b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124b4:	9901      	ldr	r1, [sp, #4]
 80124b6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80124b8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80124ba:	b120      	cbz	r0, 80124c6 <rcl_wait_set_fini+0x122>
 80124bc:	47c0      	blx	r8
 80124be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80124c0:	2300      	movs	r3, #0
 80124c2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80124c6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80124c8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80124ca:	4628      	mov	r0, r5
 80124cc:	4798      	blx	r3
 80124ce:	2300      	movs	r3, #0
 80124d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80124d2:	4630      	mov	r0, r6
 80124d4:	b002      	add	sp, #8
 80124d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124da:	260b      	movs	r6, #11
 80124dc:	4630      	mov	r0, r6
 80124de:	b002      	add	sp, #8
 80124e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124e4 <rcl_wait_set_add_subscription>:
 80124e4:	b320      	cbz	r0, 8012530 <rcl_wait_set_add_subscription+0x4c>
 80124e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80124e8:	b570      	push	{r4, r5, r6, lr}
 80124ea:	4604      	mov	r4, r0
 80124ec:	b1d3      	cbz	r3, 8012524 <rcl_wait_set_add_subscription+0x40>
 80124ee:	b319      	cbz	r1, 8012538 <rcl_wait_set_add_subscription+0x54>
 80124f0:	681d      	ldr	r5, [r3, #0]
 80124f2:	6860      	ldr	r0, [r4, #4]
 80124f4:	4285      	cmp	r5, r0
 80124f6:	d218      	bcs.n	801252a <rcl_wait_set_add_subscription+0x46>
 80124f8:	6820      	ldr	r0, [r4, #0]
 80124fa:	1c6e      	adds	r6, r5, #1
 80124fc:	601e      	str	r6, [r3, #0]
 80124fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012502:	b102      	cbz	r2, 8012506 <rcl_wait_set_add_subscription+0x22>
 8012504:	6015      	str	r5, [r2, #0]
 8012506:	4608      	mov	r0, r1
 8012508:	f7f8 fa0c 	bl	800a924 <rcl_subscription_get_rmw_handle>
 801250c:	b190      	cbz	r0, 8012534 <rcl_wait_set_add_subscription+0x50>
 801250e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012510:	6842      	ldr	r2, [r0, #4]
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012518:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801251a:	6853      	ldr	r3, [r2, #4]
 801251c:	3301      	adds	r3, #1
 801251e:	6053      	str	r3, [r2, #4]
 8012520:	2000      	movs	r0, #0
 8012522:	bd70      	pop	{r4, r5, r6, pc}
 8012524:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012528:	bd70      	pop	{r4, r5, r6, pc}
 801252a:	f240 3086 	movw	r0, #902	@ 0x386
 801252e:	bd70      	pop	{r4, r5, r6, pc}
 8012530:	200b      	movs	r0, #11
 8012532:	4770      	bx	lr
 8012534:	2001      	movs	r0, #1
 8012536:	bd70      	pop	{r4, r5, r6, pc}
 8012538:	200b      	movs	r0, #11
 801253a:	bd70      	pop	{r4, r5, r6, pc}

0801253c <rcl_wait_set_clear>:
 801253c:	2800      	cmp	r0, #0
 801253e:	d073      	beq.n	8012628 <rcl_wait_set_clear+0xec>
 8012540:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012542:	b510      	push	{r4, lr}
 8012544:	4604      	mov	r4, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d070      	beq.n	801262c <rcl_wait_set_clear+0xf0>
 801254a:	6800      	ldr	r0, [r0, #0]
 801254c:	b138      	cbz	r0, 801255e <rcl_wait_set_clear+0x22>
 801254e:	6862      	ldr	r2, [r4, #4]
 8012550:	2100      	movs	r1, #0
 8012552:	0092      	lsls	r2, r2, #2
 8012554:	f003 f8f4 	bl	8015740 <memset>
 8012558:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801255a:	2200      	movs	r2, #0
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	68a0      	ldr	r0, [r4, #8]
 8012560:	b138      	cbz	r0, 8012572 <rcl_wait_set_clear+0x36>
 8012562:	68e2      	ldr	r2, [r4, #12]
 8012564:	2100      	movs	r1, #0
 8012566:	0092      	lsls	r2, r2, #2
 8012568:	f003 f8ea 	bl	8015740 <memset>
 801256c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801256e:	2200      	movs	r2, #0
 8012570:	60da      	str	r2, [r3, #12]
 8012572:	69a0      	ldr	r0, [r4, #24]
 8012574:	b138      	cbz	r0, 8012586 <rcl_wait_set_clear+0x4a>
 8012576:	69e2      	ldr	r2, [r4, #28]
 8012578:	2100      	movs	r1, #0
 801257a:	0092      	lsls	r2, r2, #2
 801257c:	f003 f8e0 	bl	8015740 <memset>
 8012580:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012582:	2200      	movs	r2, #0
 8012584:	619a      	str	r2, [r3, #24]
 8012586:	6a20      	ldr	r0, [r4, #32]
 8012588:	b138      	cbz	r0, 801259a <rcl_wait_set_clear+0x5e>
 801258a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801258c:	2100      	movs	r1, #0
 801258e:	0092      	lsls	r2, r2, #2
 8012590:	f003 f8d6 	bl	8015740 <memset>
 8012594:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012596:	2200      	movs	r2, #0
 8012598:	625a      	str	r2, [r3, #36]	@ 0x24
 801259a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801259c:	b138      	cbz	r0, 80125ae <rcl_wait_set_clear+0x72>
 801259e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80125a0:	2100      	movs	r1, #0
 80125a2:	0092      	lsls	r2, r2, #2
 80125a4:	f003 f8cc 	bl	8015740 <memset>
 80125a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125aa:	2200      	movs	r2, #0
 80125ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80125ae:	6920      	ldr	r0, [r4, #16]
 80125b0:	b138      	cbz	r0, 80125c2 <rcl_wait_set_clear+0x86>
 80125b2:	6962      	ldr	r2, [r4, #20]
 80125b4:	2100      	movs	r1, #0
 80125b6:	0092      	lsls	r2, r2, #2
 80125b8:	f003 f8c2 	bl	8015740 <memset>
 80125bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125be:	2200      	movs	r2, #0
 80125c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80125c2:	6898      	ldr	r0, [r3, #8]
 80125c4:	b138      	cbz	r0, 80125d6 <rcl_wait_set_clear+0x9a>
 80125c6:	685a      	ldr	r2, [r3, #4]
 80125c8:	2100      	movs	r1, #0
 80125ca:	0092      	lsls	r2, r2, #2
 80125cc:	f003 f8b8 	bl	8015740 <memset>
 80125d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125d2:	2200      	movs	r2, #0
 80125d4:	605a      	str	r2, [r3, #4]
 80125d6:	6958      	ldr	r0, [r3, #20]
 80125d8:	b138      	cbz	r0, 80125ea <rcl_wait_set_clear+0xae>
 80125da:	691a      	ldr	r2, [r3, #16]
 80125dc:	2100      	movs	r1, #0
 80125de:	0092      	lsls	r2, r2, #2
 80125e0:	f003 f8ae 	bl	8015740 <memset>
 80125e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125e6:	2200      	movs	r2, #0
 80125e8:	611a      	str	r2, [r3, #16]
 80125ea:	6a18      	ldr	r0, [r3, #32]
 80125ec:	b138      	cbz	r0, 80125fe <rcl_wait_set_clear+0xc2>
 80125ee:	69da      	ldr	r2, [r3, #28]
 80125f0:	2100      	movs	r1, #0
 80125f2:	0092      	lsls	r2, r2, #2
 80125f4:	f003 f8a4 	bl	8015740 <memset>
 80125f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125fa:	2200      	movs	r2, #0
 80125fc:	61da      	str	r2, [r3, #28]
 80125fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012600:	b138      	cbz	r0, 8012612 <rcl_wait_set_clear+0xd6>
 8012602:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012604:	2100      	movs	r1, #0
 8012606:	0092      	lsls	r2, r2, #2
 8012608:	f003 f89a 	bl	8015740 <memset>
 801260c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801260e:	2200      	movs	r2, #0
 8012610:	629a      	str	r2, [r3, #40]	@ 0x28
 8012612:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012614:	b138      	cbz	r0, 8012626 <rcl_wait_set_clear+0xea>
 8012616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012618:	2100      	movs	r1, #0
 801261a:	0092      	lsls	r2, r2, #2
 801261c:	f003 f890 	bl	8015740 <memset>
 8012620:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012622:	2000      	movs	r0, #0
 8012624:	6358      	str	r0, [r3, #52]	@ 0x34
 8012626:	bd10      	pop	{r4, pc}
 8012628:	200b      	movs	r0, #11
 801262a:	4770      	bx	lr
 801262c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012630:	bd10      	pop	{r4, pc}
 8012632:	bf00      	nop

08012634 <rcl_wait_set_resize>:
 8012634:	2800      	cmp	r0, #0
 8012636:	f000 81a6 	beq.w	8012986 <rcl_wait_set_resize+0x352>
 801263a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801263e:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8012642:	b083      	sub	sp, #12
 8012644:	4604      	mov	r4, r0
 8012646:	f1ba 0f00 	cmp.w	sl, #0
 801264a:	f000 819e 	beq.w	801298a <rcl_wait_set_resize+0x356>
 801264e:	461e      	mov	r6, r3
 8012650:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8012654:	f04f 0800 	mov.w	r8, #0
 8012658:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	f8c0 8004 	str.w	r8, [r0, #4]
 8012662:	460f      	mov	r7, r1
 8012664:	4615      	mov	r5, r2
 8012666:	f8ca 8000 	str.w	r8, [sl]
 801266a:	2900      	cmp	r1, #0
 801266c:	f000 80c9 	beq.w	8012802 <rcl_wait_set_resize+0x1ce>
 8012670:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8012674:	6800      	ldr	r0, [r0, #0]
 8012676:	4651      	mov	r1, sl
 8012678:	464a      	mov	r2, r9
 801267a:	4798      	blx	r3
 801267c:	6020      	str	r0, [r4, #0]
 801267e:	2800      	cmp	r0, #0
 8012680:	f000 80d8 	beq.w	8012834 <rcl_wait_set_resize+0x200>
 8012684:	4652      	mov	r2, sl
 8012686:	4641      	mov	r1, r8
 8012688:	f003 f85a 	bl	8015740 <memset>
 801268c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801268e:	6067      	str	r7, [r4, #4]
 8012690:	6898      	ldr	r0, [r3, #8]
 8012692:	f8c3 8004 	str.w	r8, [r3, #4]
 8012696:	9301      	str	r3, [sp, #4]
 8012698:	464a      	mov	r2, r9
 801269a:	9b00      	ldr	r3, [sp, #0]
 801269c:	4651      	mov	r1, sl
 801269e:	4798      	blx	r3
 80126a0:	9b01      	ldr	r3, [sp, #4]
 80126a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80126a4:	6098      	str	r0, [r3, #8]
 80126a6:	6897      	ldr	r7, [r2, #8]
 80126a8:	2f00      	cmp	r7, #0
 80126aa:	f000 80be 	beq.w	801282a <rcl_wait_set_resize+0x1f6>
 80126ae:	4652      	mov	r2, sl
 80126b0:	4641      	mov	r1, r8
 80126b2:	4638      	mov	r0, r7
 80126b4:	f003 f844 	bl	8015740 <memset>
 80126b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80126bc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80126c0:	2700      	movs	r7, #0
 80126c2:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 80126c6:	60e7      	str	r7, [r4, #12]
 80126c8:	f8ca 700c 	str.w	r7, [sl, #12]
 80126cc:	2d00      	cmp	r5, #0
 80126ce:	f040 80b5 	bne.w	801283c <rcl_wait_set_resize+0x208>
 80126d2:	68a0      	ldr	r0, [r4, #8]
 80126d4:	b130      	cbz	r0, 80126e4 <rcl_wait_set_resize+0xb0>
 80126d6:	4641      	mov	r1, r8
 80126d8:	4790      	blx	r2
 80126da:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80126de:	60a5      	str	r5, [r4, #8]
 80126e0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80126e4:	2700      	movs	r7, #0
 80126e6:	19ad      	adds	r5, r5, r6
 80126e8:	f8ca 7010 	str.w	r7, [sl, #16]
 80126ec:	f040 80be 	bne.w	801286c <rcl_wait_set_resize+0x238>
 80126f0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80126f4:	b148      	cbz	r0, 801270a <rcl_wait_set_resize+0xd6>
 80126f6:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80126fa:	4641      	mov	r1, r8
 80126fc:	4798      	blx	r3
 80126fe:	f8ca 5014 	str.w	r5, [sl, #20]
 8012702:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012706:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801270a:	2500      	movs	r5, #0
 801270c:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8012710:	6165      	str	r5, [r4, #20]
 8012712:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8012716:	2e00      	cmp	r6, #0
 8012718:	f040 80bf 	bne.w	801289a <rcl_wait_set_resize+0x266>
 801271c:	6920      	ldr	r0, [r4, #16]
 801271e:	b140      	cbz	r0, 8012732 <rcl_wait_set_resize+0xfe>
 8012720:	4641      	mov	r1, r8
 8012722:	47c8      	blx	r9
 8012724:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012728:	6126      	str	r6, [r4, #16]
 801272a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801272e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012732:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012734:	2500      	movs	r5, #0
 8012736:	61e5      	str	r5, [r4, #28]
 8012738:	f8ca 5018 	str.w	r5, [sl, #24]
 801273c:	2b00      	cmp	r3, #0
 801273e:	f040 80c1 	bne.w	80128c4 <rcl_wait_set_resize+0x290>
 8012742:	69a0      	ldr	r0, [r4, #24]
 8012744:	b128      	cbz	r0, 8012752 <rcl_wait_set_resize+0x11e>
 8012746:	4641      	mov	r1, r8
 8012748:	47c8      	blx	r9
 801274a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801274c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012750:	61a3      	str	r3, [r4, #24]
 8012752:	f8da 0020 	ldr.w	r0, [sl, #32]
 8012756:	b130      	cbz	r0, 8012766 <rcl_wait_set_resize+0x132>
 8012758:	4641      	mov	r1, r8
 801275a:	47c8      	blx	r9
 801275c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012760:	2300      	movs	r3, #0
 8012762:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8012766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012768:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 801276c:	2600      	movs	r6, #0
 801276e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 8012772:	6266      	str	r6, [r4, #36]	@ 0x24
 8012774:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 80c8 	beq.w	801290e <rcl_wait_set_resize+0x2da>
 801277e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012782:	6a20      	ldr	r0, [r4, #32]
 8012784:	4651      	mov	r1, sl
 8012786:	463a      	mov	r2, r7
 8012788:	47c8      	blx	r9
 801278a:	6220      	str	r0, [r4, #32]
 801278c:	2800      	cmp	r0, #0
 801278e:	d051      	beq.n	8012834 <rcl_wait_set_resize+0x200>
 8012790:	4652      	mov	r2, sl
 8012792:	4631      	mov	r1, r6
 8012794:	f002 ffd4 	bl	8015740 <memset>
 8012798:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801279a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801279c:	6263      	str	r3, [r4, #36]	@ 0x24
 801279e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80127a0:	62ae      	str	r6, [r5, #40]	@ 0x28
 80127a2:	463a      	mov	r2, r7
 80127a4:	4651      	mov	r1, sl
 80127a6:	47c8      	blx	r9
 80127a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127aa:	62e8      	str	r0, [r5, #44]	@ 0x2c
 80127ac:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80127ae:	2d00      	cmp	r5, #0
 80127b0:	f000 8105 	beq.w	80129be <rcl_wait_set_resize+0x38a>
 80127b4:	4652      	mov	r2, sl
 80127b6:	4631      	mov	r1, r6
 80127b8:	4628      	mov	r0, r5
 80127ba:	f002 ffc1 	bl	8015740 <memset>
 80127be:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80127c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127c4:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80127c8:	2500      	movs	r5, #0
 80127ca:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 80127ce:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80127d0:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f040 80af 	bne.w	8012938 <rcl_wait_set_resize+0x304>
 80127da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80127dc:	b128      	cbz	r0, 80127ea <rcl_wait_set_resize+0x1b6>
 80127de:	4631      	mov	r1, r6
 80127e0:	47b8      	blx	r7
 80127e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80127e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80127ea:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80127ee:	b310      	cbz	r0, 8012836 <rcl_wait_set_resize+0x202>
 80127f0:	4631      	mov	r1, r6
 80127f2:	47b8      	blx	r7
 80127f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127f6:	2000      	movs	r0, #0
 80127f8:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80127fc:	b003      	add	sp, #12
 80127fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012802:	6800      	ldr	r0, [r0, #0]
 8012804:	b120      	cbz	r0, 8012810 <rcl_wait_set_resize+0x1dc>
 8012806:	4649      	mov	r1, r9
 8012808:	47d8      	blx	fp
 801280a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801280e:	6027      	str	r7, [r4, #0]
 8012810:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012814:	2800      	cmp	r0, #0
 8012816:	f43f af51 	beq.w	80126bc <rcl_wait_set_resize+0x88>
 801281a:	4649      	mov	r1, r9
 801281c:	47d8      	blx	fp
 801281e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012822:	2300      	movs	r3, #0
 8012824:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8012828:	e748      	b.n	80126bc <rcl_wait_set_resize+0x88>
 801282a:	6820      	ldr	r0, [r4, #0]
 801282c:	4649      	mov	r1, r9
 801282e:	47d8      	blx	fp
 8012830:	e9c4 7700 	strd	r7, r7, [r4]
 8012834:	200a      	movs	r0, #10
 8012836:	b003      	add	sp, #12
 8012838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012840:	68a0      	ldr	r0, [r4, #8]
 8012842:	4642      	mov	r2, r8
 8012844:	4649      	mov	r1, r9
 8012846:	4798      	blx	r3
 8012848:	60a0      	str	r0, [r4, #8]
 801284a:	2800      	cmp	r0, #0
 801284c:	d0f2      	beq.n	8012834 <rcl_wait_set_resize+0x200>
 801284e:	4639      	mov	r1, r7
 8012850:	464a      	mov	r2, r9
 8012852:	f002 ff75 	bl	8015740 <memset>
 8012856:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801285a:	60e5      	str	r5, [r4, #12]
 801285c:	2700      	movs	r7, #0
 801285e:	19ad      	adds	r5, r5, r6
 8012860:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012864:	f8ca 7010 	str.w	r7, [sl, #16]
 8012868:	f43f af42 	beq.w	80126f0 <rcl_wait_set_resize+0xbc>
 801286c:	00ad      	lsls	r5, r5, #2
 801286e:	4642      	mov	r2, r8
 8012870:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8012874:	f8da 0014 	ldr.w	r0, [sl, #20]
 8012878:	4629      	mov	r1, r5
 801287a:	4798      	blx	r3
 801287c:	4680      	mov	r8, r0
 801287e:	f8ca 0014 	str.w	r0, [sl, #20]
 8012882:	2800      	cmp	r0, #0
 8012884:	f000 8084 	beq.w	8012990 <rcl_wait_set_resize+0x35c>
 8012888:	462a      	mov	r2, r5
 801288a:	4639      	mov	r1, r7
 801288c:	f002 ff58 	bl	8015740 <memset>
 8012890:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012894:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012898:	e737      	b.n	801270a <rcl_wait_set_resize+0xd6>
 801289a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801289e:	6920      	ldr	r0, [r4, #16]
 80128a0:	4642      	mov	r2, r8
 80128a2:	4649      	mov	r1, r9
 80128a4:	47b8      	blx	r7
 80128a6:	6120      	str	r0, [r4, #16]
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d0c3      	beq.n	8012834 <rcl_wait_set_resize+0x200>
 80128ac:	464a      	mov	r2, r9
 80128ae:	4629      	mov	r1, r5
 80128b0:	f002 ff46 	bl	8015740 <memset>
 80128b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80128b8:	6166      	str	r6, [r4, #20]
 80128ba:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80128be:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80128c2:	e736      	b.n	8012732 <rcl_wait_set_resize+0xfe>
 80128c4:	009e      	lsls	r6, r3, #2
 80128c6:	69a0      	ldr	r0, [r4, #24]
 80128c8:	4631      	mov	r1, r6
 80128ca:	4642      	mov	r2, r8
 80128cc:	47b8      	blx	r7
 80128ce:	61a0      	str	r0, [r4, #24]
 80128d0:	2800      	cmp	r0, #0
 80128d2:	d0af      	beq.n	8012834 <rcl_wait_set_resize+0x200>
 80128d4:	4632      	mov	r2, r6
 80128d6:	4629      	mov	r1, r5
 80128d8:	f002 ff32 	bl	8015740 <memset>
 80128dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80128e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128e2:	61e3      	str	r3, [r4, #28]
 80128e4:	f8da 0020 	ldr.w	r0, [sl, #32]
 80128e8:	f8ca 501c 	str.w	r5, [sl, #28]
 80128ec:	4642      	mov	r2, r8
 80128ee:	4631      	mov	r1, r6
 80128f0:	47b8      	blx	r7
 80128f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128f4:	f8ca 0020 	str.w	r0, [sl, #32]
 80128f8:	6a1f      	ldr	r7, [r3, #32]
 80128fa:	2f00      	cmp	r7, #0
 80128fc:	d058      	beq.n	80129b0 <rcl_wait_set_resize+0x37c>
 80128fe:	4632      	mov	r2, r6
 8012900:	4629      	mov	r1, r5
 8012902:	4638      	mov	r0, r7
 8012904:	f002 ff1c 	bl	8015740 <memset>
 8012908:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801290c:	e72b      	b.n	8012766 <rcl_wait_set_resize+0x132>
 801290e:	6a20      	ldr	r0, [r4, #32]
 8012910:	b128      	cbz	r0, 801291e <rcl_wait_set_resize+0x2ea>
 8012912:	4639      	mov	r1, r7
 8012914:	47c0      	blx	r8
 8012916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012918:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801291c:	6223      	str	r3, [r4, #32]
 801291e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8012922:	2800      	cmp	r0, #0
 8012924:	f43f af4d 	beq.w	80127c2 <rcl_wait_set_resize+0x18e>
 8012928:	4639      	mov	r1, r7
 801292a:	47c0      	blx	r8
 801292c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012930:	2300      	movs	r3, #0
 8012932:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8012936:	e744      	b.n	80127c2 <rcl_wait_set_resize+0x18e>
 8012938:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801293c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801293e:	4641      	mov	r1, r8
 8012940:	4632      	mov	r2, r6
 8012942:	47c8      	blx	r9
 8012944:	62a0      	str	r0, [r4, #40]	@ 0x28
 8012946:	2800      	cmp	r0, #0
 8012948:	f43f af74 	beq.w	8012834 <rcl_wait_set_resize+0x200>
 801294c:	4642      	mov	r2, r8
 801294e:	4629      	mov	r1, r5
 8012950:	f002 fef6 	bl	8015740 <memset>
 8012954:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801295a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801295c:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012960:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8012964:	4632      	mov	r2, r6
 8012966:	4641      	mov	r1, r8
 8012968:	47c8      	blx	r9
 801296a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801296c:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012972:	b35b      	cbz	r3, 80129cc <rcl_wait_set_resize+0x398>
 8012974:	4642      	mov	r2, r8
 8012976:	4618      	mov	r0, r3
 8012978:	4629      	mov	r1, r5
 801297a:	f002 fee1 	bl	8015740 <memset>
 801297e:	4628      	mov	r0, r5
 8012980:	b003      	add	sp, #12
 8012982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012986:	200b      	movs	r0, #11
 8012988:	4770      	bx	lr
 801298a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801298e:	e752      	b.n	8012836 <rcl_wait_set_resize+0x202>
 8012990:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012992:	68a0      	ldr	r0, [r4, #8]
 8012994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012996:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012998:	4790      	blx	r2
 801299a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801299c:	6920      	ldr	r0, [r4, #16]
 801299e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80129a0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80129a2:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80129a6:	4790      	blx	r2
 80129a8:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80129ac:	200a      	movs	r0, #10
 80129ae:	e742      	b.n	8012836 <rcl_wait_set_resize+0x202>
 80129b0:	69a0      	ldr	r0, [r4, #24]
 80129b2:	4641      	mov	r1, r8
 80129b4:	47c8      	blx	r9
 80129b6:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80129ba:	200a      	movs	r0, #10
 80129bc:	e73b      	b.n	8012836 <rcl_wait_set_resize+0x202>
 80129be:	6a20      	ldr	r0, [r4, #32]
 80129c0:	4639      	mov	r1, r7
 80129c2:	47c0      	blx	r8
 80129c4:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80129c8:	200a      	movs	r0, #10
 80129ca:	e734      	b.n	8012836 <rcl_wait_set_resize+0x202>
 80129cc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80129ce:	9300      	str	r3, [sp, #0]
 80129d0:	4631      	mov	r1, r6
 80129d2:	47b8      	blx	r7
 80129d4:	9b00      	ldr	r3, [sp, #0]
 80129d6:	200a      	movs	r0, #10
 80129d8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80129dc:	e72b      	b.n	8012836 <rcl_wait_set_resize+0x202>
 80129de:	bf00      	nop

080129e0 <rcl_wait_set_init>:
 80129e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129e4:	b084      	sub	sp, #16
 80129e6:	4604      	mov	r4, r0
 80129e8:	a810      	add	r0, sp, #64	@ 0x40
 80129ea:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80129ee:	460f      	mov	r7, r1
 80129f0:	4690      	mov	r8, r2
 80129f2:	4699      	mov	r9, r3
 80129f4:	f7f8 fc62 	bl	800b2bc <rcutils_allocator_is_valid>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d06b      	beq.n	8012ad4 <rcl_wait_set_init+0xf4>
 80129fc:	2c00      	cmp	r4, #0
 80129fe:	d069      	beq.n	8012ad4 <rcl_wait_set_init+0xf4>
 8012a00:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012a02:	b125      	cbz	r5, 8012a0e <rcl_wait_set_init+0x2e>
 8012a04:	2564      	movs	r5, #100	@ 0x64
 8012a06:	4628      	mov	r0, r5
 8012a08:	b004      	add	sp, #16
 8012a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0e:	f1ba 0f00 	cmp.w	sl, #0
 8012a12:	d05f      	beq.n	8012ad4 <rcl_wait_set_init+0xf4>
 8012a14:	4650      	mov	r0, sl
 8012a16:	f7fe f9a9 	bl	8010d6c <rcl_context_is_valid>
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	d067      	beq.n	8012aee <rcl_wait_set_init+0x10e>
 8012a1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a20:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012a22:	205c      	movs	r0, #92	@ 0x5c
 8012a24:	4798      	blx	r3
 8012a26:	6320      	str	r0, [r4, #48]	@ 0x30
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d062      	beq.n	8012af2 <rcl_wait_set_init+0x112>
 8012a2c:	225c      	movs	r2, #92	@ 0x5c
 8012a2e:	4629      	mov	r1, r5
 8012a30:	f002 fe86 	bl	8015740 <memset>
 8012a34:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012a38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a3c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012a3e:	f8dc e000 	ldr.w	lr, [ip]
 8012a42:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012a46:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 8012a4a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012a4e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012a52:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012a56:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012a5a:	60b5      	str	r5, [r6, #8]
 8012a5c:	6075      	str	r5, [r6, #4]
 8012a5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012a66:	1899      	adds	r1, r3, r2
 8012a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a6a:	f8da 0000 	ldr.w	r0, [sl]
 8012a6e:	f8cc e000 	str.w	lr, [ip]
 8012a72:	4419      	add	r1, r3
 8012a74:	4441      	add	r1, r8
 8012a76:	3028      	adds	r0, #40	@ 0x28
 8012a78:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8012a7c:	f001 f9a8 	bl	8013dd0 <rmw_create_wait_set>
 8012a80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a82:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8012a84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012a86:	b350      	cbz	r0, 8012ade <rcl_wait_set_init+0xfe>
 8012a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a8a:	9302      	str	r3, [sp, #8]
 8012a8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a8e:	9301      	str	r3, [sp, #4]
 8012a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a92:	9300      	str	r3, [sp, #0]
 8012a94:	4642      	mov	r2, r8
 8012a96:	464b      	mov	r3, r9
 8012a98:	4639      	mov	r1, r7
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f7ff fdca 	bl	8012634 <rcl_wait_set_resize>
 8012aa0:	4605      	mov	r5, r0
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d0af      	beq.n	8012a06 <rcl_wait_set_init+0x26>
 8012aa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012aa8:	bb2b      	cbnz	r3, 8012af6 <rcl_wait_set_init+0x116>
 8012aaa:	2600      	movs	r6, #0
 8012aac:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012ab0:	9600      	str	r6, [sp, #0]
 8012ab2:	4633      	mov	r3, r6
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f7ff fdbb 	bl	8012634 <rcl_wait_set_resize>
 8012abe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d0a0      	beq.n	8012a06 <rcl_wait_set_init+0x26>
 8012ac4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012ac6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012ac8:	4798      	blx	r3
 8012aca:	4628      	mov	r0, r5
 8012acc:	6326      	str	r6, [r4, #48]	@ 0x30
 8012ace:	b004      	add	sp, #16
 8012ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ad4:	250b      	movs	r5, #11
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	b004      	add	sp, #16
 8012ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ade:	2501      	movs	r5, #1
 8012ae0:	f001 f980 	bl	8013de4 <rmw_destroy_wait_set>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	bf18      	it	ne
 8012ae8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012aec:	e7dd      	b.n	8012aaa <rcl_wait_set_init+0xca>
 8012aee:	2565      	movs	r5, #101	@ 0x65
 8012af0:	e789      	b.n	8012a06 <rcl_wait_set_init+0x26>
 8012af2:	250a      	movs	r5, #10
 8012af4:	e787      	b.n	8012a06 <rcl_wait_set_init+0x26>
 8012af6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012af8:	e7f2      	b.n	8012ae0 <rcl_wait_set_init+0x100>
 8012afa:	bf00      	nop

08012afc <rcl_wait_set_add_guard_condition>:
 8012afc:	b320      	cbz	r0, 8012b48 <rcl_wait_set_add_guard_condition+0x4c>
 8012afe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	4604      	mov	r4, r0
 8012b04:	b1d3      	cbz	r3, 8012b3c <rcl_wait_set_add_guard_condition+0x40>
 8012b06:	b319      	cbz	r1, 8012b50 <rcl_wait_set_add_guard_condition+0x54>
 8012b08:	68dd      	ldr	r5, [r3, #12]
 8012b0a:	68e0      	ldr	r0, [r4, #12]
 8012b0c:	4285      	cmp	r5, r0
 8012b0e:	d218      	bcs.n	8012b42 <rcl_wait_set_add_guard_condition+0x46>
 8012b10:	68a0      	ldr	r0, [r4, #8]
 8012b12:	1c6e      	adds	r6, r5, #1
 8012b14:	60de      	str	r6, [r3, #12]
 8012b16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012b1a:	b102      	cbz	r2, 8012b1e <rcl_wait_set_add_guard_condition+0x22>
 8012b1c:	6015      	str	r5, [r2, #0]
 8012b1e:	4608      	mov	r0, r1
 8012b20:	f002 f9f6 	bl	8014f10 <rcl_guard_condition_get_rmw_handle>
 8012b24:	b190      	cbz	r0, 8012b4c <rcl_wait_set_add_guard_condition+0x50>
 8012b26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b28:	6842      	ldr	r2, [r0, #4]
 8012b2a:	695b      	ldr	r3, [r3, #20]
 8012b2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012b32:	6913      	ldr	r3, [r2, #16]
 8012b34:	3301      	adds	r3, #1
 8012b36:	6113      	str	r3, [r2, #16]
 8012b38:	2000      	movs	r0, #0
 8012b3a:	bd70      	pop	{r4, r5, r6, pc}
 8012b3c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b40:	bd70      	pop	{r4, r5, r6, pc}
 8012b42:	f240 3086 	movw	r0, #902	@ 0x386
 8012b46:	bd70      	pop	{r4, r5, r6, pc}
 8012b48:	200b      	movs	r0, #11
 8012b4a:	4770      	bx	lr
 8012b4c:	2001      	movs	r0, #1
 8012b4e:	bd70      	pop	{r4, r5, r6, pc}
 8012b50:	200b      	movs	r0, #11
 8012b52:	bd70      	pop	{r4, r5, r6, pc}

08012b54 <rcl_wait_set_add_timer>:
 8012b54:	b340      	cbz	r0, 8012ba8 <rcl_wait_set_add_timer+0x54>
 8012b56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	b1f3      	cbz	r3, 8012b9c <rcl_wait_set_add_timer+0x48>
 8012b5e:	b329      	cbz	r1, 8012bac <rcl_wait_set_add_timer+0x58>
 8012b60:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012b62:	6965      	ldr	r5, [r4, #20]
 8012b64:	42a8      	cmp	r0, r5
 8012b66:	d21c      	bcs.n	8012ba2 <rcl_wait_set_add_timer+0x4e>
 8012b68:	6925      	ldr	r5, [r4, #16]
 8012b6a:	1c46      	adds	r6, r0, #1
 8012b6c:	641e      	str	r6, [r3, #64]	@ 0x40
 8012b6e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012b72:	b102      	cbz	r2, 8012b76 <rcl_wait_set_add_timer+0x22>
 8012b74:	6010      	str	r0, [r2, #0]
 8012b76:	4608      	mov	r0, r1
 8012b78:	f7ff faa4 	bl	80120c4 <rcl_timer_get_guard_condition>
 8012b7c:	b168      	cbz	r0, 8012b9a <rcl_wait_set_add_timer+0x46>
 8012b7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012b80:	68e3      	ldr	r3, [r4, #12]
 8012b82:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012b84:	3b01      	subs	r3, #1
 8012b86:	441d      	add	r5, r3
 8012b88:	f002 f9c2 	bl	8014f10 <rcl_guard_condition_get_rmw_handle>
 8012b8c:	b180      	cbz	r0, 8012bb0 <rcl_wait_set_add_timer+0x5c>
 8012b8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b90:	6842      	ldr	r2, [r0, #4]
 8012b92:	695b      	ldr	r3, [r3, #20]
 8012b94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b98:	2000      	movs	r0, #0
 8012b9a:	bd70      	pop	{r4, r5, r6, pc}
 8012b9c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012ba0:	bd70      	pop	{r4, r5, r6, pc}
 8012ba2:	f240 3086 	movw	r0, #902	@ 0x386
 8012ba6:	bd70      	pop	{r4, r5, r6, pc}
 8012ba8:	200b      	movs	r0, #11
 8012baa:	4770      	bx	lr
 8012bac:	200b      	movs	r0, #11
 8012bae:	bd70      	pop	{r4, r5, r6, pc}
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	bd70      	pop	{r4, r5, r6, pc}

08012bb4 <rcl_wait_set_add_client>:
 8012bb4:	b320      	cbz	r0, 8012c00 <rcl_wait_set_add_client+0x4c>
 8012bb6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012bb8:	b570      	push	{r4, r5, r6, lr}
 8012bba:	4604      	mov	r4, r0
 8012bbc:	b1d3      	cbz	r3, 8012bf4 <rcl_wait_set_add_client+0x40>
 8012bbe:	b319      	cbz	r1, 8012c08 <rcl_wait_set_add_client+0x54>
 8012bc0:	699d      	ldr	r5, [r3, #24]
 8012bc2:	69e0      	ldr	r0, [r4, #28]
 8012bc4:	4285      	cmp	r5, r0
 8012bc6:	d218      	bcs.n	8012bfa <rcl_wait_set_add_client+0x46>
 8012bc8:	69a0      	ldr	r0, [r4, #24]
 8012bca:	1c6e      	adds	r6, r5, #1
 8012bcc:	619e      	str	r6, [r3, #24]
 8012bce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012bd2:	b102      	cbz	r2, 8012bd6 <rcl_wait_set_add_client+0x22>
 8012bd4:	6015      	str	r5, [r2, #0]
 8012bd6:	4608      	mov	r0, r1
 8012bd8:	f7fe f868 	bl	8010cac <rcl_client_get_rmw_handle>
 8012bdc:	b190      	cbz	r0, 8012c04 <rcl_wait_set_add_client+0x50>
 8012bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012be0:	6842      	ldr	r2, [r0, #4]
 8012be2:	6a1b      	ldr	r3, [r3, #32]
 8012be4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012be8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012bea:	69d3      	ldr	r3, [r2, #28]
 8012bec:	3301      	adds	r3, #1
 8012bee:	61d3      	str	r3, [r2, #28]
 8012bf0:	2000      	movs	r0, #0
 8012bf2:	bd70      	pop	{r4, r5, r6, pc}
 8012bf4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012bf8:	bd70      	pop	{r4, r5, r6, pc}
 8012bfa:	f240 3086 	movw	r0, #902	@ 0x386
 8012bfe:	bd70      	pop	{r4, r5, r6, pc}
 8012c00:	200b      	movs	r0, #11
 8012c02:	4770      	bx	lr
 8012c04:	2001      	movs	r0, #1
 8012c06:	bd70      	pop	{r4, r5, r6, pc}
 8012c08:	200b      	movs	r0, #11
 8012c0a:	bd70      	pop	{r4, r5, r6, pc}

08012c0c <rcl_wait_set_add_service>:
 8012c0c:	b320      	cbz	r0, 8012c58 <rcl_wait_set_add_service+0x4c>
 8012c0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	4604      	mov	r4, r0
 8012c14:	b1d3      	cbz	r3, 8012c4c <rcl_wait_set_add_service+0x40>
 8012c16:	b319      	cbz	r1, 8012c60 <rcl_wait_set_add_service+0x54>
 8012c18:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012c1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8012c1c:	4285      	cmp	r5, r0
 8012c1e:	d218      	bcs.n	8012c52 <rcl_wait_set_add_service+0x46>
 8012c20:	6a20      	ldr	r0, [r4, #32]
 8012c22:	1c6e      	adds	r6, r5, #1
 8012c24:	625e      	str	r6, [r3, #36]	@ 0x24
 8012c26:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012c2a:	b102      	cbz	r2, 8012c2e <rcl_wait_set_add_service+0x22>
 8012c2c:	6015      	str	r5, [r2, #0]
 8012c2e:	4608      	mov	r0, r1
 8012c30:	f7fe fe34 	bl	801189c <rcl_service_get_rmw_handle>
 8012c34:	b190      	cbz	r0, 8012c5c <rcl_wait_set_add_service+0x50>
 8012c36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c38:	6842      	ldr	r2, [r0, #4]
 8012c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c3c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c40:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012c42:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012c44:	3301      	adds	r3, #1
 8012c46:	6293      	str	r3, [r2, #40]	@ 0x28
 8012c48:	2000      	movs	r0, #0
 8012c4a:	bd70      	pop	{r4, r5, r6, pc}
 8012c4c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c50:	bd70      	pop	{r4, r5, r6, pc}
 8012c52:	f240 3086 	movw	r0, #902	@ 0x386
 8012c56:	bd70      	pop	{r4, r5, r6, pc}
 8012c58:	200b      	movs	r0, #11
 8012c5a:	4770      	bx	lr
 8012c5c:	2001      	movs	r0, #1
 8012c5e:	bd70      	pop	{r4, r5, r6, pc}
 8012c60:	200b      	movs	r0, #11
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
 8012c64:	0000      	movs	r0, r0
	...

08012c68 <rcl_wait>:
 8012c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c6c:	b08f      	sub	sp, #60	@ 0x3c
 8012c6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012c72:	2800      	cmp	r0, #0
 8012c74:	f000 814c 	beq.w	8012f10 <rcl_wait+0x2a8>
 8012c78:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	2d00      	cmp	r5, #0
 8012c7e:	f000 80bc 	beq.w	8012dfa <rcl_wait+0x192>
 8012c82:	6843      	ldr	r3, [r0, #4]
 8012c84:	b973      	cbnz	r3, 8012ca4 <rcl_wait+0x3c>
 8012c86:	68e3      	ldr	r3, [r4, #12]
 8012c88:	b963      	cbnz	r3, 8012ca4 <rcl_wait+0x3c>
 8012c8a:	6963      	ldr	r3, [r4, #20]
 8012c8c:	b953      	cbnz	r3, 8012ca4 <rcl_wait+0x3c>
 8012c8e:	69e3      	ldr	r3, [r4, #28]
 8012c90:	b943      	cbnz	r3, 8012ca4 <rcl_wait+0x3c>
 8012c92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012c94:	b933      	cbnz	r3, 8012ca4 <rcl_wait+0x3c>
 8012c96:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012c98:	b923      	cbnz	r3, 8012ca4 <rcl_wait+0x3c>
 8012c9a:	f240 3085 	movw	r0, #901	@ 0x385
 8012c9e:	b00f      	add	sp, #60	@ 0x3c
 8012ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ca8:	2a01      	cmp	r2, #1
 8012caa:	f173 0300 	sbcs.w	r3, r3, #0
 8012cae:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8012cb0:	db56      	blt.n	8012d60 <rcl_wait+0xf8>
 8012cb2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8012cb6:	2900      	cmp	r1, #0
 8012cb8:	f000 8149 	beq.w	8012f4e <rcl_wait+0x2e6>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	9307      	str	r3, [sp, #28]
 8012cc0:	469b      	mov	fp, r3
 8012cc2:	f04f 0800 	mov.w	r8, #0
 8012cc6:	f04f 0900 	mov.w	r9, #0
 8012cca:	e00d      	b.n	8012ce8 <rcl_wait+0x80>
 8012ccc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012cce:	6922      	ldr	r2, [r4, #16]
 8012cd0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8012cd2:	f842 000a 	str.w	r0, [r2, sl]
 8012cd6:	f118 0801 	adds.w	r8, r8, #1
 8012cda:	f149 0900 	adc.w	r9, r9, #0
 8012cde:	2300      	movs	r3, #0
 8012ce0:	4599      	cmp	r9, r3
 8012ce2:	bf08      	it	eq
 8012ce4:	4588      	cmpeq	r8, r1
 8012ce6:	d243      	bcs.n	8012d70 <rcl_wait+0x108>
 8012ce8:	6922      	ldr	r2, [r4, #16]
 8012cea:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8012cee:	f852 000a 	ldr.w	r0, [r2, sl]
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	d0ef      	beq.n	8012cd6 <rcl_wait+0x6e>
 8012cf6:	68e2      	ldr	r2, [r4, #12]
 8012cf8:	6969      	ldr	r1, [r5, #20]
 8012cfa:	4442      	add	r2, r8
 8012cfc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8012d00:	b13b      	cbz	r3, 8012d12 <rcl_wait+0xaa>
 8012d02:	692a      	ldr	r2, [r5, #16]
 8012d04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012d08:	6921      	ldr	r1, [r4, #16]
 8012d0a:	3201      	adds	r2, #1
 8012d0c:	f851 000a 	ldr.w	r0, [r1, sl]
 8012d10:	612a      	str	r2, [r5, #16]
 8012d12:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 8012d16:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 8012d1a:	f7ff f9c1 	bl	80120a0 <rcl_timer_is_canceled>
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	d1bd      	bne.n	8012c9e <rcl_wait+0x36>
 8012d22:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 8012d26:	2a00      	cmp	r2, #0
 8012d28:	d1d0      	bne.n	8012ccc <rcl_wait+0x64>
 8012d2a:	6922      	ldr	r2, [r4, #16]
 8012d2c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012d30:	f852 000a 	ldr.w	r0, [r2, sl]
 8012d34:	a90a      	add	r1, sp, #40	@ 0x28
 8012d36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012d3e:	f7ff f98b 	bl	8012058 <rcl_timer_get_time_until_next_call>
 8012d42:	2800      	cmp	r0, #0
 8012d44:	d1ab      	bne.n	8012c9e <rcl_wait+0x36>
 8012d46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012d4a:	42b2      	cmp	r2, r6
 8012d4c:	eb73 0107 	sbcs.w	r1, r3, r7
 8012d50:	da03      	bge.n	8012d5a <rcl_wait+0xf2>
 8012d52:	461f      	mov	r7, r3
 8012d54:	2301      	movs	r3, #1
 8012d56:	4616      	mov	r6, r2
 8012d58:	9307      	str	r3, [sp, #28]
 8012d5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012d5c:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8012d5e:	e7ba      	b.n	8012cd6 <rcl_wait+0x6e>
 8012d60:	2900      	cmp	r1, #0
 8012d62:	f000 80de 	beq.w	8012f22 <rcl_wait+0x2ba>
 8012d66:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012d6a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012d6e:	e7a5      	b.n	8012cbc <rcl_wait+0x54>
 8012d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d74:	4313      	orrs	r3, r2
 8012d76:	d145      	bne.n	8012e04 <rcl_wait+0x19c>
 8012d78:	2300      	movs	r3, #0
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012d80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012d84:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d86:	9302      	str	r3, [sp, #8]
 8012d88:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8012d8a:	9301      	str	r3, [sp, #4]
 8012d8c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012d90:	9300      	str	r3, [sp, #0]
 8012d92:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8012d96:	f105 031c 	add.w	r3, r5, #28
 8012d9a:	f105 0110 	add.w	r1, r5, #16
 8012d9e:	1d28      	adds	r0, r5, #4
 8012da0:	f000 fe96 	bl	8013ad0 <rmw_wait>
 8012da4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012da6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012da8:	4680      	mov	r8, r0
 8012daa:	b30a      	cbz	r2, 8012df0 <rcl_wait+0x188>
 8012dac:	2500      	movs	r5, #0
 8012dae:	462f      	mov	r7, r5
 8012db0:	e004      	b.n	8012dbc <rcl_wait+0x154>
 8012db2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012db6:	3501      	adds	r5, #1
 8012db8:	42aa      	cmp	r2, r5
 8012dba:	d919      	bls.n	8012df0 <rcl_wait+0x188>
 8012dbc:	6922      	ldr	r2, [r4, #16]
 8012dbe:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012dc2:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 8012dc6:	00ae      	lsls	r6, r5, #2
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d0f3      	beq.n	8012db4 <rcl_wait+0x14c>
 8012dcc:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8012dd0:	f7ff f90a 	bl	8011fe8 <rcl_timer_is_ready>
 8012dd4:	2800      	cmp	r0, #0
 8012dd6:	f47f af62 	bne.w	8012c9e <rcl_wait+0x36>
 8012dda:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 8012dde:	2a00      	cmp	r2, #0
 8012de0:	d1e7      	bne.n	8012db2 <rcl_wait+0x14a>
 8012de2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012de4:	6921      	ldr	r1, [r4, #16]
 8012de6:	518a      	str	r2, [r1, r6]
 8012de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012dea:	3501      	adds	r5, #1
 8012dec:	42aa      	cmp	r2, r5
 8012dee:	d8e5      	bhi.n	8012dbc <rcl_wait+0x154>
 8012df0:	f038 0002 	bics.w	r0, r8, #2
 8012df4:	d029      	beq.n	8012e4a <rcl_wait+0x1e2>
 8012df6:	2001      	movs	r0, #1
 8012df8:	e751      	b.n	8012c9e <rcl_wait+0x36>
 8012dfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012dfe:	b00f      	add	sp, #60	@ 0x3c
 8012e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e08:	2a01      	cmp	r2, #1
 8012e0a:	f173 0300 	sbcs.w	r3, r3, #0
 8012e0e:	f2c0 8083 	blt.w	8012f18 <rcl_wait+0x2b0>
 8012e12:	2e00      	cmp	r6, #0
 8012e14:	f177 0300 	sbcs.w	r3, r7, #0
 8012e18:	bfbc      	itt	lt
 8012e1a:	2600      	movlt	r6, #0
 8012e1c:	2700      	movlt	r7, #0
 8012e1e:	a34e      	add	r3, pc, #312	@ (adr r3, 8012f58 <rcl_wait+0x2f0>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	4630      	mov	r0, r6
 8012e26:	4639      	mov	r1, r7
 8012e28:	f7ed fa62 	bl	80002f0 <__aeabi_ldivmod>
 8012e2c:	a34a      	add	r3, pc, #296	@ (adr r3, 8012f58 <rcl_wait+0x2f0>)
 8012e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e32:	4680      	mov	r8, r0
 8012e34:	4689      	mov	r9, r1
 8012e36:	4630      	mov	r0, r6
 8012e38:	4639      	mov	r1, r7
 8012e3a:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8012e3e:	f7ed fa57 	bl	80002f0 <__aeabi_ldivmod>
 8012e42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012e46:	ab0a      	add	r3, sp, #40	@ 0x28
 8012e48:	e79d      	b.n	8012d86 <rcl_wait+0x11e>
 8012e4a:	6866      	ldr	r6, [r4, #4]
 8012e4c:	4602      	mov	r2, r0
 8012e4e:	b91e      	cbnz	r6, 8012e58 <rcl_wait+0x1f0>
 8012e50:	e00d      	b.n	8012e6e <rcl_wait+0x206>
 8012e52:	3201      	adds	r2, #1
 8012e54:	42b2      	cmp	r2, r6
 8012e56:	d00a      	beq.n	8012e6e <rcl_wait+0x206>
 8012e58:	6899      	ldr	r1, [r3, #8]
 8012e5a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012e5e:	2900      	cmp	r1, #0
 8012e60:	d1f7      	bne.n	8012e52 <rcl_wait+0x1ea>
 8012e62:	6825      	ldr	r5, [r4, #0]
 8012e64:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012e68:	3201      	adds	r2, #1
 8012e6a:	42b2      	cmp	r2, r6
 8012e6c:	d1f4      	bne.n	8012e58 <rcl_wait+0x1f0>
 8012e6e:	68e6      	ldr	r6, [r4, #12]
 8012e70:	2200      	movs	r2, #0
 8012e72:	b91e      	cbnz	r6, 8012e7c <rcl_wait+0x214>
 8012e74:	e00d      	b.n	8012e92 <rcl_wait+0x22a>
 8012e76:	3201      	adds	r2, #1
 8012e78:	42b2      	cmp	r2, r6
 8012e7a:	d00a      	beq.n	8012e92 <rcl_wait+0x22a>
 8012e7c:	6959      	ldr	r1, [r3, #20]
 8012e7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012e82:	2900      	cmp	r1, #0
 8012e84:	d1f7      	bne.n	8012e76 <rcl_wait+0x20e>
 8012e86:	68a5      	ldr	r5, [r4, #8]
 8012e88:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012e8c:	3201      	adds	r2, #1
 8012e8e:	42b2      	cmp	r2, r6
 8012e90:	d1f4      	bne.n	8012e7c <rcl_wait+0x214>
 8012e92:	69e6      	ldr	r6, [r4, #28]
 8012e94:	2200      	movs	r2, #0
 8012e96:	b91e      	cbnz	r6, 8012ea0 <rcl_wait+0x238>
 8012e98:	e00d      	b.n	8012eb6 <rcl_wait+0x24e>
 8012e9a:	3201      	adds	r2, #1
 8012e9c:	42b2      	cmp	r2, r6
 8012e9e:	d00a      	beq.n	8012eb6 <rcl_wait+0x24e>
 8012ea0:	6a19      	ldr	r1, [r3, #32]
 8012ea2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ea6:	2900      	cmp	r1, #0
 8012ea8:	d1f7      	bne.n	8012e9a <rcl_wait+0x232>
 8012eaa:	69a5      	ldr	r5, [r4, #24]
 8012eac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012eb0:	3201      	adds	r2, #1
 8012eb2:	42b2      	cmp	r2, r6
 8012eb4:	d1f4      	bne.n	8012ea0 <rcl_wait+0x238>
 8012eb6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012eb8:	2200      	movs	r2, #0
 8012eba:	b91e      	cbnz	r6, 8012ec4 <rcl_wait+0x25c>
 8012ebc:	e00d      	b.n	8012eda <rcl_wait+0x272>
 8012ebe:	3201      	adds	r2, #1
 8012ec0:	4296      	cmp	r6, r2
 8012ec2:	d00a      	beq.n	8012eda <rcl_wait+0x272>
 8012ec4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012ec6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012eca:	2900      	cmp	r1, #0
 8012ecc:	d1f7      	bne.n	8012ebe <rcl_wait+0x256>
 8012ece:	6a25      	ldr	r5, [r4, #32]
 8012ed0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012ed4:	3201      	adds	r2, #1
 8012ed6:	4296      	cmp	r6, r2
 8012ed8:	d1f4      	bne.n	8012ec4 <rcl_wait+0x25c>
 8012eda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012edc:	2200      	movs	r2, #0
 8012ede:	b91e      	cbnz	r6, 8012ee8 <rcl_wait+0x280>
 8012ee0:	e00d      	b.n	8012efe <rcl_wait+0x296>
 8012ee2:	3201      	adds	r2, #1
 8012ee4:	42b2      	cmp	r2, r6
 8012ee6:	d00a      	beq.n	8012efe <rcl_wait+0x296>
 8012ee8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012eea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012eee:	2900      	cmp	r1, #0
 8012ef0:	d1f7      	bne.n	8012ee2 <rcl_wait+0x27a>
 8012ef2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8012ef4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012ef8:	3201      	adds	r2, #1
 8012efa:	42b2      	cmp	r2, r6
 8012efc:	d1f4      	bne.n	8012ee8 <rcl_wait+0x280>
 8012efe:	f1b8 0f02 	cmp.w	r8, #2
 8012f02:	f47f aecc 	bne.w	8012c9e <rcl_wait+0x36>
 8012f06:	9b07      	ldr	r3, [sp, #28]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	bf08      	it	eq
 8012f0c:	2002      	moveq	r0, #2
 8012f0e:	e6c6      	b.n	8012c9e <rcl_wait+0x36>
 8012f10:	200b      	movs	r0, #11
 8012f12:	b00f      	add	sp, #60	@ 0x3c
 8012f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f18:	9b07      	ldr	r3, [sp, #28]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	f47f af79 	bne.w	8012e12 <rcl_wait+0x1aa>
 8012f20:	e731      	b.n	8012d86 <rcl_wait+0x11e>
 8012f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f26:	4313      	orrs	r3, r2
 8012f28:	bf08      	it	eq
 8012f2a:	9107      	streq	r1, [sp, #28]
 8012f2c:	f43f af24 	beq.w	8012d78 <rcl_wait+0x110>
 8012f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f34:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012f38:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012f3c:	2a01      	cmp	r2, #1
 8012f3e:	f173 0300 	sbcs.w	r3, r3, #0
 8012f42:	f04f 0300 	mov.w	r3, #0
 8012f46:	9307      	str	r3, [sp, #28]
 8012f48:	f6bf af63 	bge.w	8012e12 <rcl_wait+0x1aa>
 8012f4c:	e71b      	b.n	8012d86 <rcl_wait+0x11e>
 8012f4e:	4632      	mov	r2, r6
 8012f50:	463b      	mov	r3, r7
 8012f52:	e7f3      	b.n	8012f3c <rcl_wait+0x2d4>
 8012f54:	f3af 8000 	nop.w
 8012f58:	3b9aca00 	.word	0x3b9aca00
 8012f5c:	00000000 	.word	0x00000000

08012f60 <__atomic_load_8>:
 8012f60:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012f64:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012f68:	4b14      	ldr	r3, [pc, #80]	@ (8012fbc <__atomic_load_8+0x5c>)
 8012f6a:	4a15      	ldr	r2, [pc, #84]	@ (8012fc0 <__atomic_load_8+0x60>)
 8012f6c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012f70:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012f74:	fb03 f301 	mul.w	r3, r3, r1
 8012f78:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8012f7c:	fba2 1203 	umull	r1, r2, r2, r3
 8012f80:	0912      	lsrs	r2, r2, #4
 8012f82:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8012f86:	b430      	push	{r4, r5}
 8012f88:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8012f8c:	4c0d      	ldr	r4, [pc, #52]	@ (8012fc4 <__atomic_load_8+0x64>)
 8012f8e:	1a9b      	subs	r3, r3, r2
 8012f90:	18e1      	adds	r1, r4, r3
 8012f92:	f04f 0501 	mov.w	r5, #1
 8012f96:	e8d1 2f4f 	ldrexb	r2, [r1]
 8012f9a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8012f9e:	f1bc 0f00 	cmp.w	ip, #0
 8012fa2:	d1f8      	bne.n	8012f96 <__atomic_load_8+0x36>
 8012fa4:	f3bf 8f5b 	dmb	ish
 8012fa8:	b2d2      	uxtb	r2, r2
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	d1f3      	bne.n	8012f96 <__atomic_load_8+0x36>
 8012fae:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012fb2:	f3bf 8f5b 	dmb	ish
 8012fb6:	54e2      	strb	r2, [r4, r3]
 8012fb8:	bc30      	pop	{r4, r5}
 8012fba:	4770      	bx	lr
 8012fbc:	27d4eb2d 	.word	0x27d4eb2d
 8012fc0:	b21642c9 	.word	0xb21642c9
 8012fc4:	2000daec 	.word	0x2000daec

08012fc8 <__atomic_store_8>:
 8012fc8:	b4f0      	push	{r4, r5, r6, r7}
 8012fca:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8012fce:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8012fd2:	4914      	ldr	r1, [pc, #80]	@ (8013024 <__atomic_store_8+0x5c>)
 8012fd4:	4c14      	ldr	r4, [pc, #80]	@ (8013028 <__atomic_store_8+0x60>)
 8012fd6:	4e15      	ldr	r6, [pc, #84]	@ (801302c <__atomic_store_8+0x64>)
 8012fd8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8012fdc:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8012fe0:	fb01 f105 	mul.w	r1, r1, r5
 8012fe4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012fe8:	fba4 5401 	umull	r5, r4, r4, r1
 8012fec:	0924      	lsrs	r4, r4, #4
 8012fee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012ff2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8012ff6:	1b09      	subs	r1, r1, r4
 8012ff8:	1875      	adds	r5, r6, r1
 8012ffa:	f04f 0701 	mov.w	r7, #1
 8012ffe:	e8d5 4f4f 	ldrexb	r4, [r5]
 8013002:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8013006:	f1bc 0f00 	cmp.w	ip, #0
 801300a:	d1f8      	bne.n	8012ffe <__atomic_store_8+0x36>
 801300c:	f3bf 8f5b 	dmb	ish
 8013010:	b2e4      	uxtb	r4, r4
 8013012:	2c00      	cmp	r4, #0
 8013014:	d1f3      	bne.n	8012ffe <__atomic_store_8+0x36>
 8013016:	e9c0 2300 	strd	r2, r3, [r0]
 801301a:	f3bf 8f5b 	dmb	ish
 801301e:	5474      	strb	r4, [r6, r1]
 8013020:	bcf0      	pop	{r4, r5, r6, r7}
 8013022:	4770      	bx	lr
 8013024:	27d4eb2d 	.word	0x27d4eb2d
 8013028:	b21642c9 	.word	0xb21642c9
 801302c:	2000daec 	.word	0x2000daec

08013030 <__atomic_exchange_8>:
 8013030:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8013034:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8013038:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 801303c:	4c16      	ldr	r4, [pc, #88]	@ (8013098 <__atomic_exchange_8+0x68>)
 801303e:	4917      	ldr	r1, [pc, #92]	@ (801309c <__atomic_exchange_8+0x6c>)
 8013040:	4e17      	ldr	r6, [pc, #92]	@ (80130a0 <__atomic_exchange_8+0x70>)
 8013042:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8013046:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 801304a:	fb04 f505 	mul.w	r5, r4, r5
 801304e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8013052:	fba1 4105 	umull	r4, r1, r1, r5
 8013056:	0909      	lsrs	r1, r1, #4
 8013058:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801305c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8013060:	1a6c      	subs	r4, r5, r1
 8013062:	1931      	adds	r1, r6, r4
 8013064:	f04f 0701 	mov.w	r7, #1
 8013068:	e8d1 5f4f 	ldrexb	r5, [r1]
 801306c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8013070:	f1bc 0f00 	cmp.w	ip, #0
 8013074:	d1f8      	bne.n	8013068 <__atomic_exchange_8+0x38>
 8013076:	f3bf 8f5b 	dmb	ish
 801307a:	b2ed      	uxtb	r5, r5
 801307c:	2d00      	cmp	r5, #0
 801307e:	d1f3      	bne.n	8013068 <__atomic_exchange_8+0x38>
 8013080:	e9d0 8900 	ldrd	r8, r9, [r0]
 8013084:	e9c0 2300 	strd	r2, r3, [r0]
 8013088:	f3bf 8f5b 	dmb	ish
 801308c:	5535      	strb	r5, [r6, r4]
 801308e:	4640      	mov	r0, r8
 8013090:	4649      	mov	r1, r9
 8013092:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8013096:	4770      	bx	lr
 8013098:	27d4eb2d 	.word	0x27d4eb2d
 801309c:	b21642c9 	.word	0xb21642c9
 80130a0:	2000daec 	.word	0x2000daec

080130a4 <rcutils_is_directory>:
 80130a4:	2000      	movs	r0, #0
 80130a6:	4770      	bx	lr

080130a8 <rcutils_join_path>:
 80130a8:	b082      	sub	sp, #8
 80130aa:	e88d 000c 	stmia.w	sp, {r2, r3}
 80130ae:	2000      	movs	r0, #0
 80130b0:	b002      	add	sp, #8
 80130b2:	4770      	bx	lr

080130b4 <rcutils_to_native_path>:
 80130b4:	b084      	sub	sp, #16
 80130b6:	a801      	add	r0, sp, #4
 80130b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80130bc:	b004      	add	sp, #16
 80130be:	2000      	movs	r0, #0
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop

080130c4 <rcutils_format_string_limit>:
 80130c4:	b40f      	push	{r0, r1, r2, r3}
 80130c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130c8:	b083      	sub	sp, #12
 80130ca:	ac08      	add	r4, sp, #32
 80130cc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80130ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80130d2:	b34e      	cbz	r6, 8013128 <rcutils_format_string_limit+0x64>
 80130d4:	a808      	add	r0, sp, #32
 80130d6:	f7f8 f8f1 	bl	800b2bc <rcutils_allocator_is_valid>
 80130da:	b328      	cbz	r0, 8013128 <rcutils_format_string_limit+0x64>
 80130dc:	2100      	movs	r1, #0
 80130de:	ab0f      	add	r3, sp, #60	@ 0x3c
 80130e0:	4608      	mov	r0, r1
 80130e2:	4632      	mov	r2, r6
 80130e4:	e9cd 3300 	strd	r3, r3, [sp]
 80130e8:	f000 f904 	bl	80132f4 <rcutils_vsnprintf>
 80130ec:	1c43      	adds	r3, r0, #1
 80130ee:	4605      	mov	r5, r0
 80130f0:	d01a      	beq.n	8013128 <rcutils_format_string_limit+0x64>
 80130f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80130f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130f6:	1c47      	adds	r7, r0, #1
 80130f8:	429f      	cmp	r7, r3
 80130fa:	bf84      	itt	hi
 80130fc:	461f      	movhi	r7, r3
 80130fe:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8013102:	4638      	mov	r0, r7
 8013104:	9b08      	ldr	r3, [sp, #32]
 8013106:	4798      	blx	r3
 8013108:	4604      	mov	r4, r0
 801310a:	b168      	cbz	r0, 8013128 <rcutils_format_string_limit+0x64>
 801310c:	9b01      	ldr	r3, [sp, #4]
 801310e:	4632      	mov	r2, r6
 8013110:	4639      	mov	r1, r7
 8013112:	f000 f8ef 	bl	80132f4 <rcutils_vsnprintf>
 8013116:	2800      	cmp	r0, #0
 8013118:	db02      	blt.n	8013120 <rcutils_format_string_limit+0x5c>
 801311a:	2300      	movs	r3, #0
 801311c:	5563      	strb	r3, [r4, r5]
 801311e:	e004      	b.n	801312a <rcutils_format_string_limit+0x66>
 8013120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013122:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013124:	4620      	mov	r0, r4
 8013126:	4798      	blx	r3
 8013128:	2400      	movs	r4, #0
 801312a:	4620      	mov	r0, r4
 801312c:	b003      	add	sp, #12
 801312e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013132:	b004      	add	sp, #16
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop

08013138 <rcutils_get_env>:
 8013138:	b168      	cbz	r0, 8013156 <rcutils_get_env+0x1e>
 801313a:	b510      	push	{r4, lr}
 801313c:	460c      	mov	r4, r1
 801313e:	b129      	cbz	r1, 801314c <rcutils_get_env+0x14>
 8013140:	f001 ff40 	bl	8014fc4 <getenv>
 8013144:	b120      	cbz	r0, 8013150 <rcutils_get_env+0x18>
 8013146:	6020      	str	r0, [r4, #0]
 8013148:	2000      	movs	r0, #0
 801314a:	bd10      	pop	{r4, pc}
 801314c:	4803      	ldr	r0, [pc, #12]	@ (801315c <rcutils_get_env+0x24>)
 801314e:	bd10      	pop	{r4, pc}
 8013150:	4b03      	ldr	r3, [pc, #12]	@ (8013160 <rcutils_get_env+0x28>)
 8013152:	6023      	str	r3, [r4, #0]
 8013154:	bd10      	pop	{r4, pc}
 8013156:	4803      	ldr	r0, [pc, #12]	@ (8013164 <rcutils_get_env+0x2c>)
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	08016f10 	.word	0x08016f10
 8013160:	08017034 	.word	0x08017034
 8013164:	08016ef4 	.word	0x08016ef4

08013168 <rcutils_repl_str>:
 8013168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316c:	ed2d 8b02 	vpush	{d8}
 8013170:	b087      	sub	sp, #28
 8013172:	4680      	mov	r8, r0
 8013174:	4608      	mov	r0, r1
 8013176:	f8cd 8000 	str.w	r8, [sp]
 801317a:	ee08 2a10 	vmov	s16, r2
 801317e:	468a      	mov	sl, r1
 8013180:	4699      	mov	r9, r3
 8013182:	f7ed f857 	bl	8000234 <strlen>
 8013186:	2600      	movs	r6, #0
 8013188:	4647      	mov	r7, r8
 801318a:	9001      	str	r0, [sp, #4]
 801318c:	46b3      	mov	fp, r6
 801318e:	2510      	movs	r5, #16
 8013190:	46b0      	mov	r8, r6
 8013192:	e01d      	b.n	80131d0 <rcutils_repl_str+0x68>
 8013194:	f10b 0b01 	add.w	fp, fp, #1
 8013198:	455e      	cmp	r6, fp
 801319a:	d211      	bcs.n	80131c0 <rcutils_repl_str+0x58>
 801319c:	442e      	add	r6, r5
 801319e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80131a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80131a6:	00b1      	lsls	r1, r6, #2
 80131a8:	4798      	blx	r3
 80131aa:	2800      	cmp	r0, #0
 80131ac:	f000 8084 	beq.w	80132b8 <rcutils_repl_str+0x150>
 80131b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131b4:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80131b8:	bf28      	it	cs
 80131ba:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80131be:	4680      	mov	r8, r0
 80131c0:	9a00      	ldr	r2, [sp, #0]
 80131c2:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80131c6:	1aa2      	subs	r2, r4, r2
 80131c8:	f843 2c04 	str.w	r2, [r3, #-4]
 80131cc:	9b01      	ldr	r3, [sp, #4]
 80131ce:	18e7      	adds	r7, r4, r3
 80131d0:	4651      	mov	r1, sl
 80131d2:	4638      	mov	r0, r7
 80131d4:	f002 fadb 	bl	801578e <strstr>
 80131d8:	4604      	mov	r4, r0
 80131da:	4640      	mov	r0, r8
 80131dc:	2c00      	cmp	r4, #0
 80131de:	d1d9      	bne.n	8013194 <rcutils_repl_str+0x2c>
 80131e0:	46b8      	mov	r8, r7
 80131e2:	4607      	mov	r7, r0
 80131e4:	4640      	mov	r0, r8
 80131e6:	f7ed f825 	bl	8000234 <strlen>
 80131ea:	9b00      	ldr	r3, [sp, #0]
 80131ec:	eba8 0303 	sub.w	r3, r8, r3
 80131f0:	181d      	adds	r5, r3, r0
 80131f2:	9504      	str	r5, [sp, #16]
 80131f4:	f1bb 0f00 	cmp.w	fp, #0
 80131f8:	d03d      	beq.n	8013276 <rcutils_repl_str+0x10e>
 80131fa:	ee18 0a10 	vmov	r0, s16
 80131fe:	f7ed f819 	bl	8000234 <strlen>
 8013202:	9b01      	ldr	r3, [sp, #4]
 8013204:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013208:	1ac3      	subs	r3, r0, r3
 801320a:	fb0b 5303 	mla	r3, fp, r3, r5
 801320e:	9305      	str	r3, [sp, #20]
 8013210:	4606      	mov	r6, r0
 8013212:	1c58      	adds	r0, r3, #1
 8013214:	f8d9 3000 	ldr.w	r3, [r9]
 8013218:	4798      	blx	r3
 801321a:	9003      	str	r0, [sp, #12]
 801321c:	2800      	cmp	r0, #0
 801321e:	d04c      	beq.n	80132ba <rcutils_repl_str+0x152>
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	9900      	ldr	r1, [sp, #0]
 8013224:	f002 fbab 	bl	801597e <memcpy>
 8013228:	9b03      	ldr	r3, [sp, #12]
 801322a:	683d      	ldr	r5, [r7, #0]
 801322c:	ee18 8a10 	vmov	r8, s16
 8013230:	441d      	add	r5, r3
 8013232:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8013236:	9302      	str	r3, [sp, #8]
 8013238:	46ba      	mov	sl, r7
 801323a:	4632      	mov	r2, r6
 801323c:	4641      	mov	r1, r8
 801323e:	4628      	mov	r0, r5
 8013240:	f002 fb9d 	bl	801597e <memcpy>
 8013244:	9b01      	ldr	r3, [sp, #4]
 8013246:	f85a 2b04 	ldr.w	r2, [sl], #4
 801324a:	441a      	add	r2, r3
 801324c:	9b00      	ldr	r3, [sp, #0]
 801324e:	1899      	adds	r1, r3, r2
 8013250:	9b02      	ldr	r3, [sp, #8]
 8013252:	4435      	add	r5, r6
 8013254:	429c      	cmp	r4, r3
 8013256:	4628      	mov	r0, r5
 8013258:	d025      	beq.n	80132a6 <rcutils_repl_str+0x13e>
 801325a:	f8da 3000 	ldr.w	r3, [sl]
 801325e:	3401      	adds	r4, #1
 8013260:	1a9a      	subs	r2, r3, r2
 8013262:	4415      	add	r5, r2
 8013264:	f002 fb8b 	bl	801597e <memcpy>
 8013268:	455c      	cmp	r4, fp
 801326a:	d3e6      	bcc.n	801323a <rcutils_repl_str+0xd2>
 801326c:	9a03      	ldr	r2, [sp, #12]
 801326e:	9905      	ldr	r1, [sp, #20]
 8013270:	2300      	movs	r3, #0
 8013272:	5453      	strb	r3, [r2, r1]
 8013274:	e00b      	b.n	801328e <rcutils_repl_str+0x126>
 8013276:	4628      	mov	r0, r5
 8013278:	f8d9 3000 	ldr.w	r3, [r9]
 801327c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013280:	3001      	adds	r0, #1
 8013282:	4798      	blx	r3
 8013284:	9003      	str	r0, [sp, #12]
 8013286:	b110      	cbz	r0, 801328e <rcutils_repl_str+0x126>
 8013288:	9900      	ldr	r1, [sp, #0]
 801328a:	f002 fb70 	bl	801596e <strcpy>
 801328e:	4638      	mov	r0, r7
 8013290:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013294:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013298:	4798      	blx	r3
 801329a:	9803      	ldr	r0, [sp, #12]
 801329c:	b007      	add	sp, #28
 801329e:	ecbd 8b02 	vpop	{d8}
 80132a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a6:	9b04      	ldr	r3, [sp, #16]
 80132a8:	3401      	adds	r4, #1
 80132aa:	1a9a      	subs	r2, r3, r2
 80132ac:	4415      	add	r5, r2
 80132ae:	f002 fb66 	bl	801597e <memcpy>
 80132b2:	455c      	cmp	r4, fp
 80132b4:	d3c1      	bcc.n	801323a <rcutils_repl_str+0xd2>
 80132b6:	e7d9      	b.n	801326c <rcutils_repl_str+0x104>
 80132b8:	4647      	mov	r7, r8
 80132ba:	2300      	movs	r3, #0
 80132bc:	9303      	str	r3, [sp, #12]
 80132be:	e7e6      	b.n	801328e <rcutils_repl_str+0x126>

080132c0 <rcutils_snprintf>:
 80132c0:	b40c      	push	{r2, r3}
 80132c2:	b530      	push	{r4, r5, lr}
 80132c4:	b083      	sub	sp, #12
 80132c6:	ab06      	add	r3, sp, #24
 80132c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80132cc:	9301      	str	r3, [sp, #4]
 80132ce:	b152      	cbz	r2, 80132e6 <rcutils_snprintf+0x26>
 80132d0:	b138      	cbz	r0, 80132e2 <rcutils_snprintf+0x22>
 80132d2:	b141      	cbz	r1, 80132e6 <rcutils_snprintf+0x26>
 80132d4:	f002 fa0c 	bl	80156f0 <vsniprintf>
 80132d8:	b003      	add	sp, #12
 80132da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132de:	b002      	add	sp, #8
 80132e0:	4770      	bx	lr
 80132e2:	2900      	cmp	r1, #0
 80132e4:	d0f6      	beq.n	80132d4 <rcutils_snprintf+0x14>
 80132e6:	f002 fb15 	bl	8015914 <__errno>
 80132ea:	2316      	movs	r3, #22
 80132ec:	6003      	str	r3, [r0, #0]
 80132ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132f2:	e7f1      	b.n	80132d8 <rcutils_snprintf+0x18>

080132f4 <rcutils_vsnprintf>:
 80132f4:	b570      	push	{r4, r5, r6, lr}
 80132f6:	b13a      	cbz	r2, 8013308 <rcutils_vsnprintf+0x14>
 80132f8:	b120      	cbz	r0, 8013304 <rcutils_vsnprintf+0x10>
 80132fa:	b129      	cbz	r1, 8013308 <rcutils_vsnprintf+0x14>
 80132fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013300:	f002 b9f6 	b.w	80156f0 <vsniprintf>
 8013304:	2900      	cmp	r1, #0
 8013306:	d0f9      	beq.n	80132fc <rcutils_vsnprintf+0x8>
 8013308:	f002 fb04 	bl	8015914 <__errno>
 801330c:	2316      	movs	r3, #22
 801330e:	6003      	str	r3, [r0, #0]
 8013310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013314:	bd70      	pop	{r4, r5, r6, pc}
 8013316:	bf00      	nop

08013318 <rcutils_strdup>:
 8013318:	b084      	sub	sp, #16
 801331a:	b570      	push	{r4, r5, r6, lr}
 801331c:	b082      	sub	sp, #8
 801331e:	ac07      	add	r4, sp, #28
 8013320:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013324:	4605      	mov	r5, r0
 8013326:	b1b0      	cbz	r0, 8013356 <rcutils_strdup+0x3e>
 8013328:	f7ec ff84 	bl	8000234 <strlen>
 801332c:	1c42      	adds	r2, r0, #1
 801332e:	9b07      	ldr	r3, [sp, #28]
 8013330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013332:	9201      	str	r2, [sp, #4]
 8013334:	4606      	mov	r6, r0
 8013336:	4610      	mov	r0, r2
 8013338:	4798      	blx	r3
 801333a:	4604      	mov	r4, r0
 801333c:	b128      	cbz	r0, 801334a <rcutils_strdup+0x32>
 801333e:	9a01      	ldr	r2, [sp, #4]
 8013340:	4629      	mov	r1, r5
 8013342:	f002 fb1c 	bl	801597e <memcpy>
 8013346:	2300      	movs	r3, #0
 8013348:	55a3      	strb	r3, [r4, r6]
 801334a:	4620      	mov	r0, r4
 801334c:	b002      	add	sp, #8
 801334e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013352:	b004      	add	sp, #16
 8013354:	4770      	bx	lr
 8013356:	4604      	mov	r4, r0
 8013358:	e7f7      	b.n	801334a <rcutils_strdup+0x32>
 801335a:	bf00      	nop

0801335c <rcutils_strndup>:
 801335c:	b082      	sub	sp, #8
 801335e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013360:	460e      	mov	r6, r1
 8013362:	a906      	add	r1, sp, #24
 8013364:	e881 000c 	stmia.w	r1, {r2, r3}
 8013368:	4605      	mov	r5, r0
 801336a:	b180      	cbz	r0, 801338e <rcutils_strndup+0x32>
 801336c:	1c77      	adds	r7, r6, #1
 801336e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013370:	4638      	mov	r0, r7
 8013372:	4790      	blx	r2
 8013374:	4604      	mov	r4, r0
 8013376:	b128      	cbz	r0, 8013384 <rcutils_strndup+0x28>
 8013378:	463a      	mov	r2, r7
 801337a:	4629      	mov	r1, r5
 801337c:	f002 faff 	bl	801597e <memcpy>
 8013380:	2300      	movs	r3, #0
 8013382:	55a3      	strb	r3, [r4, r6]
 8013384:	4620      	mov	r0, r4
 8013386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801338a:	b002      	add	sp, #8
 801338c:	4770      	bx	lr
 801338e:	4604      	mov	r4, r0
 8013390:	e7f8      	b.n	8013384 <rcutils_strndup+0x28>
 8013392:	bf00      	nop

08013394 <rmw_get_zero_initialized_context>:
 8013394:	b510      	push	{r4, lr}
 8013396:	2250      	movs	r2, #80	@ 0x50
 8013398:	4604      	mov	r4, r0
 801339a:	2100      	movs	r1, #0
 801339c:	f002 f9d0 	bl	8015740 <memset>
 80133a0:	4620      	mov	r0, r4
 80133a2:	bd10      	pop	{r4, pc}

080133a4 <rmw_validate_namespace_with_size>:
 80133a4:	b340      	cbz	r0, 80133f8 <rmw_validate_namespace_with_size+0x54>
 80133a6:	b5d0      	push	{r4, r6, r7, lr}
 80133a8:	4614      	mov	r4, r2
 80133aa:	b0c2      	sub	sp, #264	@ 0x108
 80133ac:	b332      	cbz	r2, 80133fc <rmw_validate_namespace_with_size+0x58>
 80133ae:	2901      	cmp	r1, #1
 80133b0:	460f      	mov	r7, r1
 80133b2:	461e      	mov	r6, r3
 80133b4:	d102      	bne.n	80133bc <rmw_validate_namespace_with_size+0x18>
 80133b6:	7803      	ldrb	r3, [r0, #0]
 80133b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80133ba:	d019      	beq.n	80133f0 <rmw_validate_namespace_with_size+0x4c>
 80133bc:	aa01      	add	r2, sp, #4
 80133be:	4669      	mov	r1, sp
 80133c0:	f7f8 f964 	bl	800b68c <rmw_validate_full_topic_name>
 80133c4:	b990      	cbnz	r0, 80133ec <rmw_validate_namespace_with_size+0x48>
 80133c6:	9b00      	ldr	r3, [sp, #0]
 80133c8:	b14b      	cbz	r3, 80133de <rmw_validate_namespace_with_size+0x3a>
 80133ca:	2b07      	cmp	r3, #7
 80133cc:	d007      	beq.n	80133de <rmw_validate_namespace_with_size+0x3a>
 80133ce:	1e5a      	subs	r2, r3, #1
 80133d0:	2a05      	cmp	r2, #5
 80133d2:	d82b      	bhi.n	801342c <rmw_validate_namespace_with_size+0x88>
 80133d4:	e8df f002 	tbb	[pc, r2]
 80133d8:	24211e1b 	.word	0x24211e1b
 80133dc:	1427      	.short	0x1427
 80133de:	2ff5      	cmp	r7, #245	@ 0xf5
 80133e0:	d906      	bls.n	80133f0 <rmw_validate_namespace_with_size+0x4c>
 80133e2:	2307      	movs	r3, #7
 80133e4:	6023      	str	r3, [r4, #0]
 80133e6:	b10e      	cbz	r6, 80133ec <rmw_validate_namespace_with_size+0x48>
 80133e8:	23f4      	movs	r3, #244	@ 0xf4
 80133ea:	6033      	str	r3, [r6, #0]
 80133ec:	b042      	add	sp, #264	@ 0x108
 80133ee:	bdd0      	pop	{r4, r6, r7, pc}
 80133f0:	2000      	movs	r0, #0
 80133f2:	6020      	str	r0, [r4, #0]
 80133f4:	b042      	add	sp, #264	@ 0x108
 80133f6:	bdd0      	pop	{r4, r6, r7, pc}
 80133f8:	200b      	movs	r0, #11
 80133fa:	4770      	bx	lr
 80133fc:	200b      	movs	r0, #11
 80133fe:	e7f5      	b.n	80133ec <rmw_validate_namespace_with_size+0x48>
 8013400:	2306      	movs	r3, #6
 8013402:	6023      	str	r3, [r4, #0]
 8013404:	2e00      	cmp	r6, #0
 8013406:	d0f1      	beq.n	80133ec <rmw_validate_namespace_with_size+0x48>
 8013408:	9b01      	ldr	r3, [sp, #4]
 801340a:	6033      	str	r3, [r6, #0]
 801340c:	e7ee      	b.n	80133ec <rmw_validate_namespace_with_size+0x48>
 801340e:	2301      	movs	r3, #1
 8013410:	6023      	str	r3, [r4, #0]
 8013412:	e7f7      	b.n	8013404 <rmw_validate_namespace_with_size+0x60>
 8013414:	2302      	movs	r3, #2
 8013416:	6023      	str	r3, [r4, #0]
 8013418:	e7f4      	b.n	8013404 <rmw_validate_namespace_with_size+0x60>
 801341a:	2303      	movs	r3, #3
 801341c:	6023      	str	r3, [r4, #0]
 801341e:	e7f1      	b.n	8013404 <rmw_validate_namespace_with_size+0x60>
 8013420:	2304      	movs	r3, #4
 8013422:	6023      	str	r3, [r4, #0]
 8013424:	e7ee      	b.n	8013404 <rmw_validate_namespace_with_size+0x60>
 8013426:	2305      	movs	r3, #5
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	e7eb      	b.n	8013404 <rmw_validate_namespace_with_size+0x60>
 801342c:	4a03      	ldr	r2, [pc, #12]	@ (801343c <rmw_validate_namespace_with_size+0x98>)
 801342e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013432:	a802      	add	r0, sp, #8
 8013434:	f7ff ff44 	bl	80132c0 <rcutils_snprintf>
 8013438:	2001      	movs	r0, #1
 801343a:	e7d7      	b.n	80133ec <rmw_validate_namespace_with_size+0x48>
 801343c:	08016f2c 	.word	0x08016f2c

08013440 <rmw_validate_namespace>:
 8013440:	b168      	cbz	r0, 801345e <rmw_validate_namespace+0x1e>
 8013442:	b570      	push	{r4, r5, r6, lr}
 8013444:	460d      	mov	r5, r1
 8013446:	4616      	mov	r6, r2
 8013448:	4604      	mov	r4, r0
 801344a:	f7ec fef3 	bl	8000234 <strlen>
 801344e:	4633      	mov	r3, r6
 8013450:	4601      	mov	r1, r0
 8013452:	462a      	mov	r2, r5
 8013454:	4620      	mov	r0, r4
 8013456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801345a:	f7ff bfa3 	b.w	80133a4 <rmw_validate_namespace_with_size>
 801345e:	200b      	movs	r0, #11
 8013460:	4770      	bx	lr
 8013462:	bf00      	nop

08013464 <rmw_namespace_validation_result_string>:
 8013464:	2807      	cmp	r0, #7
 8013466:	bf9a      	itte	ls
 8013468:	4b02      	ldrls	r3, [pc, #8]	@ (8013474 <rmw_namespace_validation_result_string+0x10>)
 801346a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801346e:	4802      	ldrhi	r0, [pc, #8]	@ (8013478 <rmw_namespace_validation_result_string+0x14>)
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	08017124 	.word	0x08017124
 8013478:	08016f7c 	.word	0x08016f7c

0801347c <rmw_validate_node_name>:
 801347c:	2800      	cmp	r0, #0
 801347e:	d03b      	beq.n	80134f8 <rmw_validate_node_name+0x7c>
 8013480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013484:	460f      	mov	r7, r1
 8013486:	2900      	cmp	r1, #0
 8013488:	d038      	beq.n	80134fc <rmw_validate_node_name+0x80>
 801348a:	4615      	mov	r5, r2
 801348c:	4604      	mov	r4, r0
 801348e:	f7ec fed1 	bl	8000234 <strlen>
 8013492:	b1e0      	cbz	r0, 80134ce <rmw_validate_node_name+0x52>
 8013494:	1e63      	subs	r3, r4, #1
 8013496:	eb03 0e00 	add.w	lr, r3, r0
 801349a:	f1c4 0c01 	rsb	ip, r4, #1
 801349e:	eb0c 0803 	add.w	r8, ip, r3
 80134a2:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80134a6:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 80134aa:	f026 0220 	bic.w	r2, r6, #32
 80134ae:	2909      	cmp	r1, #9
 80134b0:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 80134b4:	d913      	bls.n	80134de <rmw_validate_node_name+0x62>
 80134b6:	2a19      	cmp	r2, #25
 80134b8:	d911      	bls.n	80134de <rmw_validate_node_name+0x62>
 80134ba:	2e5f      	cmp	r6, #95	@ 0x5f
 80134bc:	d00f      	beq.n	80134de <rmw_validate_node_name+0x62>
 80134be:	2302      	movs	r3, #2
 80134c0:	603b      	str	r3, [r7, #0]
 80134c2:	b10d      	cbz	r5, 80134c8 <rmw_validate_node_name+0x4c>
 80134c4:	f8c5 8000 	str.w	r8, [r5]
 80134c8:	2000      	movs	r0, #0
 80134ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ce:	2301      	movs	r3, #1
 80134d0:	603b      	str	r3, [r7, #0]
 80134d2:	2d00      	cmp	r5, #0
 80134d4:	d0f8      	beq.n	80134c8 <rmw_validate_node_name+0x4c>
 80134d6:	2000      	movs	r0, #0
 80134d8:	6028      	str	r0, [r5, #0]
 80134da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134de:	4573      	cmp	r3, lr
 80134e0:	d1dd      	bne.n	801349e <rmw_validate_node_name+0x22>
 80134e2:	7822      	ldrb	r2, [r4, #0]
 80134e4:	4b0d      	ldr	r3, [pc, #52]	@ (801351c <rmw_validate_node_name+0xa0>)
 80134e6:	5cd3      	ldrb	r3, [r2, r3]
 80134e8:	f013 0304 	ands.w	r3, r3, #4
 80134ec:	d110      	bne.n	8013510 <rmw_validate_node_name+0x94>
 80134ee:	28ff      	cmp	r0, #255	@ 0xff
 80134f0:	d806      	bhi.n	8013500 <rmw_validate_node_name+0x84>
 80134f2:	603b      	str	r3, [r7, #0]
 80134f4:	4618      	mov	r0, r3
 80134f6:	e7e8      	b.n	80134ca <rmw_validate_node_name+0x4e>
 80134f8:	200b      	movs	r0, #11
 80134fa:	4770      	bx	lr
 80134fc:	200b      	movs	r0, #11
 80134fe:	e7e4      	b.n	80134ca <rmw_validate_node_name+0x4e>
 8013500:	2204      	movs	r2, #4
 8013502:	603a      	str	r2, [r7, #0]
 8013504:	2d00      	cmp	r5, #0
 8013506:	d0df      	beq.n	80134c8 <rmw_validate_node_name+0x4c>
 8013508:	22fe      	movs	r2, #254	@ 0xfe
 801350a:	4618      	mov	r0, r3
 801350c:	602a      	str	r2, [r5, #0]
 801350e:	e7dc      	b.n	80134ca <rmw_validate_node_name+0x4e>
 8013510:	2303      	movs	r3, #3
 8013512:	603b      	str	r3, [r7, #0]
 8013514:	2d00      	cmp	r5, #0
 8013516:	d1de      	bne.n	80134d6 <rmw_validate_node_name+0x5a>
 8013518:	e7d6      	b.n	80134c8 <rmw_validate_node_name+0x4c>
 801351a:	bf00      	nop
 801351c:	080172e8 	.word	0x080172e8

08013520 <rmw_node_name_validation_result_string>:
 8013520:	2804      	cmp	r0, #4
 8013522:	bf9a      	itte	ls
 8013524:	4b02      	ldrls	r3, [pc, #8]	@ (8013530 <rmw_node_name_validation_result_string+0x10>)
 8013526:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801352a:	4802      	ldrhi	r0, [pc, #8]	@ (8013534 <rmw_node_name_validation_result_string+0x14>)
 801352c:	4770      	bx	lr
 801352e:	bf00      	nop
 8013530:	08017230 	.word	0x08017230
 8013534:	08017144 	.word	0x08017144

08013538 <on_status>:
 8013538:	b082      	sub	sp, #8
 801353a:	b002      	add	sp, #8
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop

08013540 <on_topic>:
 8013540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013544:	4a21      	ldr	r2, [pc, #132]	@ (80135cc <on_topic+0x8c>)
 8013546:	b094      	sub	sp, #80	@ 0x50
 8013548:	6812      	ldr	r2, [r2, #0]
 801354a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801354c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8013550:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013552:	9312      	str	r3, [sp, #72]	@ 0x48
 8013554:	b3ba      	cbz	r2, 80135c6 <on_topic+0x86>
 8013556:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801355a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801355e:	e001      	b.n	8013564 <on_topic+0x24>
 8013560:	6892      	ldr	r2, [r2, #8]
 8013562:	b382      	cbz	r2, 80135c6 <on_topic+0x86>
 8013564:	68d4      	ldr	r4, [r2, #12]
 8013566:	8aa3      	ldrh	r3, [r4, #20]
 8013568:	428b      	cmp	r3, r1
 801356a:	d1f9      	bne.n	8013560 <on_topic+0x20>
 801356c:	7da3      	ldrb	r3, [r4, #22]
 801356e:	4283      	cmp	r3, r0
 8013570:	d1f6      	bne.n	8013560 <on_topic+0x20>
 8013572:	2248      	movs	r2, #72	@ 0x48
 8013574:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013578:	4668      	mov	r0, sp
 801357a:	f002 fa00 	bl	801597e <memcpy>
 801357e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8013582:	4620      	mov	r0, r4
 8013584:	f7f9 f9d6 	bl	800c934 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013588:	4607      	mov	r7, r0
 801358a:	b1e0      	cbz	r0, 80135c6 <on_topic+0x86>
 801358c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8013590:	462a      	mov	r2, r5
 8013592:	4630      	mov	r0, r6
 8013594:	f108 0110 	add.w	r1, r8, #16
 8013598:	f000 fd00 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 801359c:	b930      	cbnz	r0, 80135ac <on_topic+0x6c>
 801359e:	480c      	ldr	r0, [pc, #48]	@ (80135d0 <on_topic+0x90>)
 80135a0:	4639      	mov	r1, r7
 80135a2:	b014      	add	sp, #80	@ 0x50
 80135a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135a8:	f000 b8ba 	b.w	8013720 <put_memory>
 80135ac:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80135b0:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80135b4:	f7f8 fff2 	bl	800c59c <rmw_uros_epoch_nanos>
 80135b8:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 80135bc:	2305      	movs	r3, #5
 80135be:	e9c2 0100 	strd	r0, r1, [r2]
 80135c2:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80135c6:	b014      	add	sp, #80	@ 0x50
 80135c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135cc:	20010fac 	.word	0x20010fac
 80135d0:	2000dd40 	.word	0x2000dd40

080135d4 <on_request>:
 80135d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135d8:	4822      	ldr	r0, [pc, #136]	@ (8013664 <on_request+0x90>)
 80135da:	b095      	sub	sp, #84	@ 0x54
 80135dc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80135de:	6801      	ldr	r1, [r0, #0]
 80135e0:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80135e2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80135e6:	2900      	cmp	r1, #0
 80135e8:	d039      	beq.n	801365e <on_request+0x8a>
 80135ea:	461d      	mov	r5, r3
 80135ec:	e001      	b.n	80135f2 <on_request+0x1e>
 80135ee:	6889      	ldr	r1, [r1, #8]
 80135f0:	b3a9      	cbz	r1, 801365e <on_request+0x8a>
 80135f2:	68cc      	ldr	r4, [r1, #12]
 80135f4:	8b20      	ldrh	r0, [r4, #24]
 80135f6:	4290      	cmp	r0, r2
 80135f8:	d1f9      	bne.n	80135ee <on_request+0x1a>
 80135fa:	2248      	movs	r2, #72	@ 0x48
 80135fc:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013600:	4668      	mov	r0, sp
 8013602:	f002 f9bc 	bl	801597e <memcpy>
 8013606:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801360a:	4620      	mov	r0, r4
 801360c:	f7f9 f992 	bl	800c934 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013610:	4680      	mov	r8, r0
 8013612:	b320      	cbz	r0, 801365e <on_request+0x8a>
 8013614:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8013618:	4632      	mov	r2, r6
 801361a:	4638      	mov	r0, r7
 801361c:	f109 0110 	add.w	r1, r9, #16
 8013620:	f000 fcbc 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 8013624:	b930      	cbnz	r0, 8013634 <on_request+0x60>
 8013626:	4810      	ldr	r0, [pc, #64]	@ (8013668 <on_request+0x94>)
 8013628:	4641      	mov	r1, r8
 801362a:	b015      	add	sp, #84	@ 0x54
 801362c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013630:	f000 b876 	b.w	8013720 <put_memory>
 8013634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013636:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 801363a:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 801363e:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8013642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013644:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013648:	e884 0003 	stmia.w	r4, {r0, r1}
 801364c:	f7f8 ffa6 	bl	800c59c <rmw_uros_epoch_nanos>
 8013650:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8013654:	2303      	movs	r3, #3
 8013656:	e9c2 0100 	strd	r0, r1, [r2]
 801365a:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 801365e:	b015      	add	sp, #84	@ 0x54
 8013660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013664:	20010f9c 	.word	0x20010f9c
 8013668:	2000dd40 	.word	0x2000dd40

0801366c <on_reply>:
 801366c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013670:	4821      	ldr	r0, [pc, #132]	@ (80136f8 <on_reply+0x8c>)
 8013672:	b095      	sub	sp, #84	@ 0x54
 8013674:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013676:	6801      	ldr	r1, [r0, #0]
 8013678:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 801367a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 801367e:	b3b9      	cbz	r1, 80136f0 <on_reply+0x84>
 8013680:	461d      	mov	r5, r3
 8013682:	e001      	b.n	8013688 <on_reply+0x1c>
 8013684:	6889      	ldr	r1, [r1, #8]
 8013686:	b399      	cbz	r1, 80136f0 <on_reply+0x84>
 8013688:	68cc      	ldr	r4, [r1, #12]
 801368a:	8b20      	ldrh	r0, [r4, #24]
 801368c:	4290      	cmp	r0, r2
 801368e:	d1f9      	bne.n	8013684 <on_reply+0x18>
 8013690:	2248      	movs	r2, #72	@ 0x48
 8013692:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013696:	4668      	mov	r0, sp
 8013698:	f002 f971 	bl	801597e <memcpy>
 801369c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80136a0:	4620      	mov	r0, r4
 80136a2:	f7f9 f947 	bl	800c934 <rmw_uxrce_get_static_input_buffer_for_entity>
 80136a6:	4680      	mov	r8, r0
 80136a8:	b310      	cbz	r0, 80136f0 <on_reply+0x84>
 80136aa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80136ae:	4632      	mov	r2, r6
 80136b0:	4638      	mov	r0, r7
 80136b2:	f109 0110 	add.w	r1, r9, #16
 80136b6:	f000 fc71 	bl	8013f9c <ucdr_deserialize_array_uint8_t>
 80136ba:	b930      	cbnz	r0, 80136ca <on_reply+0x5e>
 80136bc:	480f      	ldr	r0, [pc, #60]	@ (80136fc <on_reply+0x90>)
 80136be:	4641      	mov	r1, r8
 80136c0:	b015      	add	sp, #84	@ 0x54
 80136c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136c6:	f000 b82b 	b.w	8013720 <put_memory>
 80136ca:	b2aa      	uxth	r2, r5
 80136cc:	2300      	movs	r3, #0
 80136ce:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 80136d2:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 80136d6:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 80136da:	e9c1 2300 	strd	r2, r3, [r1]
 80136de:	f7f8 ff5d 	bl	800c59c <rmw_uros_epoch_nanos>
 80136e2:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 80136e6:	2304      	movs	r3, #4
 80136e8:	e9c2 0100 	strd	r0, r1, [r2]
 80136ec:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 80136f0:	b015      	add	sp, #84	@ 0x54
 80136f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136f6:	bf00      	nop
 80136f8:	2000e5d0 	.word	0x2000e5d0
 80136fc:	2000dd40 	.word	0x2000dd40

08013700 <get_memory>:
 8013700:	4603      	mov	r3, r0
 8013702:	6840      	ldr	r0, [r0, #4]
 8013704:	b158      	cbz	r0, 801371e <get_memory+0x1e>
 8013706:	6882      	ldr	r2, [r0, #8]
 8013708:	605a      	str	r2, [r3, #4]
 801370a:	b10a      	cbz	r2, 8013710 <get_memory+0x10>
 801370c:	2100      	movs	r1, #0
 801370e:	6051      	str	r1, [r2, #4]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	6082      	str	r2, [r0, #8]
 8013714:	b102      	cbz	r2, 8013718 <get_memory+0x18>
 8013716:	6050      	str	r0, [r2, #4]
 8013718:	2200      	movs	r2, #0
 801371a:	6042      	str	r2, [r0, #4]
 801371c:	6018      	str	r0, [r3, #0]
 801371e:	4770      	bx	lr

08013720 <put_memory>:
 8013720:	684b      	ldr	r3, [r1, #4]
 8013722:	b10b      	cbz	r3, 8013728 <put_memory+0x8>
 8013724:	688a      	ldr	r2, [r1, #8]
 8013726:	609a      	str	r2, [r3, #8]
 8013728:	688a      	ldr	r2, [r1, #8]
 801372a:	b102      	cbz	r2, 801372e <put_memory+0xe>
 801372c:	6053      	str	r3, [r2, #4]
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	428b      	cmp	r3, r1
 8013732:	6843      	ldr	r3, [r0, #4]
 8013734:	bf08      	it	eq
 8013736:	6002      	streq	r2, [r0, #0]
 8013738:	608b      	str	r3, [r1, #8]
 801373a:	b103      	cbz	r3, 801373e <put_memory+0x1e>
 801373c:	6059      	str	r1, [r3, #4]
 801373e:	2300      	movs	r3, #0
 8013740:	604b      	str	r3, [r1, #4]
 8013742:	6041      	str	r1, [r0, #4]
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop

08013748 <rmw_destroy_client>:
 8013748:	b570      	push	{r4, r5, r6, lr}
 801374a:	b128      	cbz	r0, 8013758 <rmw_destroy_client+0x10>
 801374c:	4604      	mov	r4, r0
 801374e:	6800      	ldr	r0, [r0, #0]
 8013750:	460d      	mov	r5, r1
 8013752:	f7f9 fa5d 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 8013756:	b910      	cbnz	r0, 801375e <rmw_destroy_client+0x16>
 8013758:	2401      	movs	r4, #1
 801375a:	4620      	mov	r0, r4
 801375c:	bd70      	pop	{r4, r5, r6, pc}
 801375e:	6863      	ldr	r3, [r4, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d0f9      	beq.n	8013758 <rmw_destroy_client+0x10>
 8013764:	2d00      	cmp	r5, #0
 8013766:	d0f7      	beq.n	8013758 <rmw_destroy_client+0x10>
 8013768:	6828      	ldr	r0, [r5, #0]
 801376a:	f7f9 fa51 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 801376e:	2800      	cmp	r0, #0
 8013770:	d0f2      	beq.n	8013758 <rmw_destroy_client+0x10>
 8013772:	686e      	ldr	r6, [r5, #4]
 8013774:	2e00      	cmp	r6, #0
 8013776:	d0ef      	beq.n	8013758 <rmw_destroy_client+0x10>
 8013778:	6864      	ldr	r4, [r4, #4]
 801377a:	6932      	ldr	r2, [r6, #16]
 801377c:	6920      	ldr	r0, [r4, #16]
 801377e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013782:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013786:	6819      	ldr	r1, [r3, #0]
 8013788:	f7fa f874 	bl	800d874 <uxr_buffer_cancel_data>
 801378c:	4602      	mov	r2, r0
 801378e:	6920      	ldr	r0, [r4, #16]
 8013790:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013794:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013798:	f7f9 f9ba 	bl	800cb10 <run_xrce_session>
 801379c:	6920      	ldr	r0, [r4, #16]
 801379e:	6932      	ldr	r2, [r6, #16]
 80137a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80137a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80137a8:	6819      	ldr	r1, [r3, #0]
 80137aa:	f7f9 fd39 	bl	800d220 <uxr_buffer_delete_entity>
 80137ae:	4602      	mov	r2, r0
 80137b0:	6920      	ldr	r0, [r4, #16]
 80137b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80137b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80137ba:	f7f9 f9a9 	bl	800cb10 <run_xrce_session>
 80137be:	2800      	cmp	r0, #0
 80137c0:	4628      	mov	r0, r5
 80137c2:	bf14      	ite	ne
 80137c4:	2400      	movne	r4, #0
 80137c6:	2402      	moveq	r4, #2
 80137c8:	f7f9 f892 	bl	800c8f0 <rmw_uxrce_fini_client_memory>
 80137cc:	e7c5      	b.n	801375a <rmw_destroy_client+0x12>
 80137ce:	bf00      	nop

080137d0 <rmw_get_implementation_identifier>:
 80137d0:	4b01      	ldr	r3, [pc, #4]	@ (80137d8 <rmw_get_implementation_identifier+0x8>)
 80137d2:	6818      	ldr	r0, [r3, #0]
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	0801725c 	.word	0x0801725c

080137dc <create_topic>:
 80137dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e0:	4607      	mov	r7, r0
 80137e2:	b084      	sub	sp, #16
 80137e4:	4822      	ldr	r0, [pc, #136]	@ (8013870 <create_topic+0x94>)
 80137e6:	4689      	mov	r9, r1
 80137e8:	4690      	mov	r8, r2
 80137ea:	f7ff ff89 	bl	8013700 <get_memory>
 80137ee:	4604      	mov	r4, r0
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d038      	beq.n	8013866 <create_topic+0x8a>
 80137f4:	693e      	ldr	r6, [r7, #16]
 80137f6:	68c4      	ldr	r4, [r0, #12]
 80137f8:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8013878 <create_topic+0x9c>
 80137fc:	61a7      	str	r7, [r4, #24]
 80137fe:	f241 5596 	movw	r5, #5526	@ 0x1596
 8013802:	f8c4 8014 	str.w	r8, [r4, #20]
 8013806:	5b70      	ldrh	r0, [r6, r5]
 8013808:	1c42      	adds	r2, r0, #1
 801380a:	5372      	strh	r2, [r6, r5]
 801380c:	2102      	movs	r1, #2
 801380e:	f7f9 ffc9 	bl	800d7a4 <uxr_object_id>
 8013812:	4651      	mov	r1, sl
 8013814:	6120      	str	r0, [r4, #16]
 8013816:	223c      	movs	r2, #60	@ 0x3c
 8013818:	4648      	mov	r0, r9
 801381a:	f7f9 f9df 	bl	800cbdc <generate_topic_name>
 801381e:	b1f0      	cbz	r0, 801385e <create_topic+0x82>
 8013820:	4d14      	ldr	r5, [pc, #80]	@ (8013874 <create_topic+0x98>)
 8013822:	4640      	mov	r0, r8
 8013824:	4629      	mov	r1, r5
 8013826:	2264      	movs	r2, #100	@ 0x64
 8013828:	f7f9 f9a8 	bl	800cb7c <generate_type_name>
 801382c:	b1b8      	cbz	r0, 801385e <create_topic+0x82>
 801382e:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 8013832:	2106      	movs	r1, #6
 8013834:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013838:	9501      	str	r5, [sp, #4]
 801383a:	f8cd a000 	str.w	sl, [sp]
 801383e:	9102      	str	r1, [sp, #8]
 8013840:	6811      	ldr	r1, [r2, #0]
 8013842:	6922      	ldr	r2, [r4, #16]
 8013844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013848:	f7f9 fd68 	bl	800d31c <uxr_buffer_create_topic_bin>
 801384c:	4602      	mov	r2, r0
 801384e:	6938      	ldr	r0, [r7, #16]
 8013850:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8013854:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013858:	f7f9 f95a 	bl	800cb10 <run_xrce_session>
 801385c:	b918      	cbnz	r0, 8013866 <create_topic+0x8a>
 801385e:	4620      	mov	r0, r4
 8013860:	f7f9 f85c 	bl	800c91c <rmw_uxrce_fini_topic_memory>
 8013864:	2400      	movs	r4, #0
 8013866:	4620      	mov	r0, r4
 8013868:	b004      	add	sp, #16
 801386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801386e:	bf00      	nop
 8013870:	20010ed8 	.word	0x20010ed8
 8013874:	2000db40 	.word	0x2000db40
 8013878:	2000db04 	.word	0x2000db04

0801387c <destroy_topic>:
 801387c:	b538      	push	{r3, r4, r5, lr}
 801387e:	6985      	ldr	r5, [r0, #24]
 8013880:	b1d5      	cbz	r5, 80138b8 <destroy_topic+0x3c>
 8013882:	4604      	mov	r4, r0
 8013884:	6928      	ldr	r0, [r5, #16]
 8013886:	6922      	ldr	r2, [r4, #16]
 8013888:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801388c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013890:	6819      	ldr	r1, [r3, #0]
 8013892:	f7f9 fcc5 	bl	800d220 <uxr_buffer_delete_entity>
 8013896:	4602      	mov	r2, r0
 8013898:	6928      	ldr	r0, [r5, #16]
 801389a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801389e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80138a2:	f7f9 f935 	bl	800cb10 <run_xrce_session>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	4620      	mov	r0, r4
 80138aa:	bf14      	ite	ne
 80138ac:	2400      	movne	r4, #0
 80138ae:	2402      	moveq	r4, #2
 80138b0:	f7f9 f834 	bl	800c91c <rmw_uxrce_fini_topic_memory>
 80138b4:	4620      	mov	r0, r4
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	2401      	movs	r4, #1
 80138ba:	4620      	mov	r0, r4
 80138bc:	bd38      	pop	{r3, r4, r5, pc}
 80138be:	bf00      	nop

080138c0 <rmw_take_request>:
 80138c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138c4:	4605      	mov	r5, r0
 80138c6:	6800      	ldr	r0, [r0, #0]
 80138c8:	b089      	sub	sp, #36	@ 0x24
 80138ca:	460c      	mov	r4, r1
 80138cc:	4690      	mov	r8, r2
 80138ce:	461e      	mov	r6, r3
 80138d0:	b128      	cbz	r0, 80138de <rmw_take_request+0x1e>
 80138d2:	4b28      	ldr	r3, [pc, #160]	@ (8013974 <rmw_take_request+0xb4>)
 80138d4:	6819      	ldr	r1, [r3, #0]
 80138d6:	f7ec fca3 	bl	8000220 <strcmp>
 80138da:	2800      	cmp	r0, #0
 80138dc:	d146      	bne.n	801396c <rmw_take_request+0xac>
 80138de:	b10e      	cbz	r6, 80138e4 <rmw_take_request+0x24>
 80138e0:	2300      	movs	r3, #0
 80138e2:	7033      	strb	r3, [r6, #0]
 80138e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80138e8:	f7f9 f89a 	bl	800ca20 <rmw_uxrce_clean_expired_static_input_buffer>
 80138ec:	4648      	mov	r0, r9
 80138ee:	f7f9 f86d 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 80138f2:	4607      	mov	r7, r0
 80138f4:	b3b0      	cbz	r0, 8013964 <rmw_take_request+0xa4>
 80138f6:	68c5      	ldr	r5, [r0, #12]
 80138f8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 80138fc:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 8013900:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8013904:	7423      	strb	r3, [r4, #16]
 8013906:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801390a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801390e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013912:	74e2      	strb	r2, [r4, #19]
 8013914:	f8a4 3011 	strh.w	r3, [r4, #17]
 8013918:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801391c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013920:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013924:	61e1      	str	r1, [r4, #28]
 8013926:	6162      	str	r2, [r4, #20]
 8013928:	61a3      	str	r3, [r4, #24]
 801392a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	4798      	blx	r3
 8013932:	6844      	ldr	r4, [r0, #4]
 8013934:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8013938:	f105 0110 	add.w	r1, r5, #16
 801393c:	4668      	mov	r0, sp
 801393e:	f7f6 fb73 	bl	800a028 <ucdr_init_buffer>
 8013942:	68e3      	ldr	r3, [r4, #12]
 8013944:	4641      	mov	r1, r8
 8013946:	4668      	mov	r0, sp
 8013948:	4798      	blx	r3
 801394a:	4639      	mov	r1, r7
 801394c:	4604      	mov	r4, r0
 801394e:	480a      	ldr	r0, [pc, #40]	@ (8013978 <rmw_take_request+0xb8>)
 8013950:	f7ff fee6 	bl	8013720 <put_memory>
 8013954:	b106      	cbz	r6, 8013958 <rmw_take_request+0x98>
 8013956:	7034      	strb	r4, [r6, #0]
 8013958:	f084 0001 	eor.w	r0, r4, #1
 801395c:	b2c0      	uxtb	r0, r0
 801395e:	b009      	add	sp, #36	@ 0x24
 8013960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013964:	2001      	movs	r0, #1
 8013966:	b009      	add	sp, #36	@ 0x24
 8013968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801396c:	200c      	movs	r0, #12
 801396e:	b009      	add	sp, #36	@ 0x24
 8013970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013974:	0801725c 	.word	0x0801725c
 8013978:	2000dd40 	.word	0x2000dd40

0801397c <rmw_send_response>:
 801397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801397e:	4605      	mov	r5, r0
 8013980:	6800      	ldr	r0, [r0, #0]
 8013982:	b091      	sub	sp, #68	@ 0x44
 8013984:	460c      	mov	r4, r1
 8013986:	4617      	mov	r7, r2
 8013988:	b128      	cbz	r0, 8013996 <rmw_send_response+0x1a>
 801398a:	4b2a      	ldr	r3, [pc, #168]	@ (8013a34 <rmw_send_response+0xb8>)
 801398c:	6819      	ldr	r1, [r3, #0]
 801398e:	f7ec fc47 	bl	8000220 <strcmp>
 8013992:	2800      	cmp	r0, #0
 8013994:	d143      	bne.n	8013a1e <rmw_send_response+0xa2>
 8013996:	4623      	mov	r3, r4
 8013998:	4626      	mov	r6, r4
 801399a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 801399e:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 80139a2:	6859      	ldr	r1, [r3, #4]
 80139a4:	686d      	ldr	r5, [r5, #4]
 80139a6:	689a      	ldr	r2, [r3, #8]
 80139a8:	78b3      	ldrb	r3, [r6, #2]
 80139aa:	f894 c000 	ldrb.w	ip, [r4]
 80139ae:	6966      	ldr	r6, [r4, #20]
 80139b0:	f88d 3016 	strb.w	r3, [sp, #22]
 80139b4:	ab02      	add	r3, sp, #8
 80139b6:	f8ad e014 	strh.w	lr, [sp, #20]
 80139ba:	f88d c017 	strb.w	ip, [sp, #23]
 80139be:	9606      	str	r6, [sp, #24]
 80139c0:	c307      	stmia	r3!, {r0, r1, r2}
 80139c2:	696b      	ldr	r3, [r5, #20]
 80139c4:	6922      	ldr	r2, [r4, #16]
 80139c6:	9207      	str	r2, [sp, #28]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 80139cc:	4798      	blx	r3
 80139ce:	4603      	mov	r3, r0
 80139d0:	4638      	mov	r0, r7
 80139d2:	685c      	ldr	r4, [r3, #4]
 80139d4:	6923      	ldr	r3, [r4, #16]
 80139d6:	4798      	blx	r3
 80139d8:	6933      	ldr	r3, [r6, #16]
 80139da:	3018      	adds	r0, #24
 80139dc:	9000      	str	r0, [sp, #0]
 80139de:	692a      	ldr	r2, [r5, #16]
 80139e0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80139e2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80139e6:	ab08      	add	r3, sp, #32
 80139e8:	f7fb ffe4 	bl	800f9b4 <uxr_prepare_output_stream>
 80139ec:	b910      	cbnz	r0, 80139f4 <rmw_send_response+0x78>
 80139ee:	2001      	movs	r0, #1
 80139f0:	b011      	add	sp, #68	@ 0x44
 80139f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139f4:	a902      	add	r1, sp, #8
 80139f6:	a808      	add	r0, sp, #32
 80139f8:	f7fd f908 	bl	8010c0c <uxr_serialize_SampleIdentity>
 80139fc:	68a3      	ldr	r3, [r4, #8]
 80139fe:	a908      	add	r1, sp, #32
 8013a00:	4638      	mov	r0, r7
 8013a02:	4798      	blx	r3
 8013a04:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013a08:	6930      	ldr	r0, [r6, #16]
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d00a      	beq.n	8013a24 <rmw_send_response+0xa8>
 8013a0e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013a10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a14:	f7fa fcf4 	bl	800e400 <uxr_run_session_until_confirm_delivery>
 8013a18:	2000      	movs	r0, #0
 8013a1a:	b011      	add	sp, #68	@ 0x44
 8013a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a1e:	200c      	movs	r0, #12
 8013a20:	b011      	add	sp, #68	@ 0x44
 8013a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013a28:	f7fa f92e 	bl	800dc88 <uxr_flash_output_streams>
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	b011      	add	sp, #68	@ 0x44
 8013a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a32:	bf00      	nop
 8013a34:	0801725c 	.word	0x0801725c

08013a38 <rmw_take_response>:
 8013a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	6800      	ldr	r0, [r0, #0]
 8013a40:	b089      	sub	sp, #36	@ 0x24
 8013a42:	4688      	mov	r8, r1
 8013a44:	4617      	mov	r7, r2
 8013a46:	461d      	mov	r5, r3
 8013a48:	b120      	cbz	r0, 8013a54 <rmw_take_response+0x1c>
 8013a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8013ac8 <rmw_take_response+0x90>)
 8013a4c:	6819      	ldr	r1, [r3, #0]
 8013a4e:	f7ec fbe7 	bl	8000220 <strcmp>
 8013a52:	bb88      	cbnz	r0, 8013ab8 <rmw_take_response+0x80>
 8013a54:	b10d      	cbz	r5, 8013a5a <rmw_take_response+0x22>
 8013a56:	2300      	movs	r3, #0
 8013a58:	702b      	strb	r3, [r5, #0]
 8013a5a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013a5e:	f7f8 ffdf 	bl	800ca20 <rmw_uxrce_clean_expired_static_input_buffer>
 8013a62:	4648      	mov	r0, r9
 8013a64:	f7f8 ffb2 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8013a68:	4606      	mov	r6, r0
 8013a6a:	b348      	cbz	r0, 8013ac0 <rmw_take_response+0x88>
 8013a6c:	68c4      	ldr	r4, [r0, #12]
 8013a6e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013a72:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8013a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7a:	68c9      	ldr	r1, [r1, #12]
 8013a7c:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8013a80:	4788      	blx	r1
 8013a82:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013a86:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013a8a:	f104 0110 	add.w	r1, r4, #16
 8013a8e:	4668      	mov	r0, sp
 8013a90:	f7f6 faca 	bl	800a028 <ucdr_init_buffer>
 8013a94:	4639      	mov	r1, r7
 8013a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a9a:	4668      	mov	r0, sp
 8013a9c:	4798      	blx	r3
 8013a9e:	4631      	mov	r1, r6
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	480a      	ldr	r0, [pc, #40]	@ (8013acc <rmw_take_response+0x94>)
 8013aa4:	f7ff fe3c 	bl	8013720 <put_memory>
 8013aa8:	b105      	cbz	r5, 8013aac <rmw_take_response+0x74>
 8013aaa:	702c      	strb	r4, [r5, #0]
 8013aac:	f084 0001 	eor.w	r0, r4, #1
 8013ab0:	b2c0      	uxtb	r0, r0
 8013ab2:	b009      	add	sp, #36	@ 0x24
 8013ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ab8:	200c      	movs	r0, #12
 8013aba:	b009      	add	sp, #36	@ 0x24
 8013abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ac0:	2001      	movs	r0, #1
 8013ac2:	b009      	add	sp, #36	@ 0x24
 8013ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ac8:	0801725c 	.word	0x0801725c
 8013acc:	2000dd40 	.word	0x2000dd40

08013ad0 <rmw_wait>:
 8013ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad4:	460f      	mov	r7, r1
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ada:	469a      	mov	sl, r3
 8013adc:	4615      	mov	r5, r2
 8013ade:	2a00      	cmp	r2, #0
 8013ae0:	f000 8122 	beq.w	8013d28 <rmw_wait+0x258>
 8013ae4:	2900      	cmp	r1, #0
 8013ae6:	f000 812a 	beq.w	8013d3e <rmw_wait+0x26e>
 8013aea:	e9d1 2300 	ldrd	r2, r3, [r1]
 8013aee:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8013af2:	015c      	lsls	r4, r3, #5
 8013af4:	ebbb 0b02 	subs.w	fp, fp, r2
 8013af8:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8013afc:	eb64 0403 	sbc.w	r4, r4, r3
 8013b00:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8013b04:	00a4      	lsls	r4, r4, #2
 8013b06:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8013b0a:	eb10 0b02 	adds.w	fp, r0, r2
 8013b0e:	eb43 0404 	adc.w	r4, r3, r4
 8013b12:	4aad      	ldr	r2, [pc, #692]	@ (8013dc8 <rmw_wait+0x2f8>)
 8013b14:	2300      	movs	r3, #0
 8013b16:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8013b1a:	f7ec fc39 	bl	8000390 <__aeabi_uldivmod>
 8013b1e:	00e4      	lsls	r4, r4, #3
 8013b20:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8013b24:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013b28:	eb1b 0800 	adds.w	r8, fp, r0
 8013b2c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8013b30:	eb44 0901 	adc.w	r9, r4, r1
 8013b34:	2300      	movs	r3, #0
 8013b36:	4542      	cmp	r2, r8
 8013b38:	eb73 0109 	sbcs.w	r1, r3, r9
 8013b3c:	f2c0 80f2 	blt.w	8013d24 <rmw_wait+0x254>
 8013b40:	f7f8 ff6e 	bl	800ca20 <rmw_uxrce_clean_expired_static_input_buffer>
 8013b44:	4ba1      	ldr	r3, [pc, #644]	@ (8013dcc <rmw_wait+0x2fc>)
 8013b46:	681c      	ldr	r4, [r3, #0]
 8013b48:	b144      	cbz	r4, 8013b5c <rmw_wait+0x8c>
 8013b4a:	4623      	mov	r3, r4
 8013b4c:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8013b50:	2100      	movs	r1, #0
 8013b52:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8013b56:	5411      	strb	r1, [r2, r0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1fa      	bne.n	8013b52 <rmw_wait+0x82>
 8013b5c:	b185      	cbz	r5, 8013b80 <rmw_wait+0xb0>
 8013b5e:	6829      	ldr	r1, [r5, #0]
 8013b60:	b171      	cbz	r1, 8013b80 <rmw_wait+0xb0>
 8013b62:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8013b66:	2300      	movs	r3, #0
 8013b68:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8013b6c:	2001      	movs	r0, #1
 8013b6e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8013b72:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013b74:	3301      	adds	r3, #1
 8013b76:	6912      	ldr	r2, [r2, #16]
 8013b78:	4299      	cmp	r1, r3
 8013b7a:	f802 000c 	strb.w	r0, [r2, ip]
 8013b7e:	d1f6      	bne.n	8013b6e <rmw_wait+0x9e>
 8013b80:	f1ba 0f00 	cmp.w	sl, #0
 8013b84:	d011      	beq.n	8013baa <rmw_wait+0xda>
 8013b86:	f8da 1000 	ldr.w	r1, [sl]
 8013b8a:	b171      	cbz	r1, 8013baa <rmw_wait+0xda>
 8013b8c:	f8da e004 	ldr.w	lr, [sl, #4]
 8013b90:	2300      	movs	r3, #0
 8013b92:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8013b96:	2001      	movs	r0, #1
 8013b98:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8013b9c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	6912      	ldr	r2, [r2, #16]
 8013ba2:	4299      	cmp	r1, r3
 8013ba4:	f802 000c 	strb.w	r0, [r2, ip]
 8013ba8:	d1f6      	bne.n	8013b98 <rmw_wait+0xc8>
 8013baa:	b186      	cbz	r6, 8013bce <rmw_wait+0xfe>
 8013bac:	6831      	ldr	r1, [r6, #0]
 8013bae:	b171      	cbz	r1, 8013bce <rmw_wait+0xfe>
 8013bb0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8013bba:	2001      	movs	r0, #1
 8013bbc:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8013bc0:	6a12      	ldr	r2, [r2, #32]
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	6912      	ldr	r2, [r2, #16]
 8013bc6:	4299      	cmp	r1, r3
 8013bc8:	f802 000c 	strb.w	r0, [r2, ip]
 8013bcc:	d1f6      	bne.n	8013bbc <rmw_wait+0xec>
 8013bce:	b34c      	cbz	r4, 8013c24 <rmw_wait+0x154>
 8013bd0:	4622      	mov	r2, r4
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8013bd8:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8013bdc:	5c09      	ldrb	r1, [r1, r0]
 8013bde:	440b      	add	r3, r1
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	2a00      	cmp	r2, #0
 8013be4:	d1f8      	bne.n	8013bd8 <rmw_wait+0x108>
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f000 8082 	beq.w	8013cf0 <rmw_wait+0x220>
 8013bec:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8013bf0:	d00d      	beq.n	8013c0e <rmw_wait+0x13e>
 8013bf2:	ee07 8a90 	vmov	s15, r8
 8013bf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013bfa:	ee07 3a90 	vmov	s15, r3
 8013bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c06:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013c0a:	ee17 8a90 	vmov	r8, s15
 8013c0e:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 8013c12:	68e0      	ldr	r0, [r4, #12]
 8013c14:	f810 3009 	ldrb.w	r3, [r0, r9]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f040 8093 	bne.w	8013d44 <rmw_wait+0x274>
 8013c1e:	68a4      	ldr	r4, [r4, #8]
 8013c20:	2c00      	cmp	r4, #0
 8013c22:	d1f6      	bne.n	8013c12 <rmw_wait+0x142>
 8013c24:	2d00      	cmp	r5, #0
 8013c26:	f000 80ac 	beq.w	8013d82 <rmw_wait+0x2b2>
 8013c2a:	682b      	ldr	r3, [r5, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	f000 8093 	beq.w	8013d58 <rmw_wait+0x288>
 8013c32:	2400      	movs	r4, #0
 8013c34:	46a0      	mov	r8, r4
 8013c36:	686b      	ldr	r3, [r5, #4]
 8013c38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c3c:	f7f8 fec6 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d05f      	beq.n	8013d04 <rmw_wait+0x234>
 8013c44:	682b      	ldr	r3, [r5, #0]
 8013c46:	3401      	adds	r4, #1
 8013c48:	42a3      	cmp	r3, r4
 8013c4a:	f04f 0801 	mov.w	r8, #1
 8013c4e:	d8f2      	bhi.n	8013c36 <rmw_wait+0x166>
 8013c50:	f1ba 0f00 	cmp.w	sl, #0
 8013c54:	d012      	beq.n	8013c7c <rmw_wait+0x1ac>
 8013c56:	f8da 3000 	ldr.w	r3, [sl]
 8013c5a:	b17b      	cbz	r3, 8013c7c <rmw_wait+0x1ac>
 8013c5c:	2400      	movs	r4, #0
 8013c5e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013c62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c66:	f7f8 feb1 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	d052      	beq.n	8013d14 <rmw_wait+0x244>
 8013c6e:	f8da 3000 	ldr.w	r3, [sl]
 8013c72:	3401      	adds	r4, #1
 8013c74:	42a3      	cmp	r3, r4
 8013c76:	f04f 0801 	mov.w	r8, #1
 8013c7a:	d8f0      	bhi.n	8013c5e <rmw_wait+0x18e>
 8013c7c:	b1e6      	cbz	r6, 8013cb8 <rmw_wait+0x1e8>
 8013c7e:	6833      	ldr	r3, [r6, #0]
 8013c80:	b1d3      	cbz	r3, 8013cb8 <rmw_wait+0x1e8>
 8013c82:	2400      	movs	r4, #0
 8013c84:	6873      	ldr	r3, [r6, #4]
 8013c86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c8a:	f7f8 fe9f 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8013c8e:	b160      	cbz	r0, 8013caa <rmw_wait+0x1da>
 8013c90:	6833      	ldr	r3, [r6, #0]
 8013c92:	3401      	adds	r4, #1
 8013c94:	42a3      	cmp	r3, r4
 8013c96:	d96c      	bls.n	8013d72 <rmw_wait+0x2a2>
 8013c98:	6873      	ldr	r3, [r6, #4]
 8013c9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c9e:	f04f 0801 	mov.w	r8, #1
 8013ca2:	f7f8 fe93 	bl	800c9cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	d1f2      	bne.n	8013c90 <rmw_wait+0x1c0>
 8013caa:	e9d6 3200 	ldrd	r3, r2, [r6]
 8013cae:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013cb2:	3401      	adds	r4, #1
 8013cb4:	42a3      	cmp	r3, r4
 8013cb6:	d8e5      	bhi.n	8013c84 <rmw_wait+0x1b4>
 8013cb8:	b1a7      	cbz	r7, 8013ce4 <rmw_wait+0x214>
 8013cba:	683c      	ldr	r4, [r7, #0]
 8013cbc:	b194      	cbz	r4, 8013ce4 <rmw_wait+0x214>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	461d      	mov	r5, r3
 8013cc2:	e004      	b.n	8013cce <rmw_wait+0x1fe>
 8013cc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	42a3      	cmp	r3, r4
 8013ccc:	d00a      	beq.n	8013ce4 <rmw_wait+0x214>
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013cd4:	7c0a      	ldrb	r2, [r1, #16]
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	d0f4      	beq.n	8013cc4 <rmw_wait+0x1f4>
 8013cda:	3301      	adds	r3, #1
 8013cdc:	42a3      	cmp	r3, r4
 8013cde:	740d      	strb	r5, [r1, #16]
 8013ce0:	4690      	mov	r8, r2
 8013ce2:	d1f4      	bne.n	8013cce <rmw_wait+0x1fe>
 8013ce4:	f1b8 0f00 	cmp.w	r8, #0
 8013ce8:	d040      	beq.n	8013d6c <rmw_wait+0x29c>
 8013cea:	2000      	movs	r0, #0
 8013cec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf0:	68e0      	ldr	r0, [r4, #12]
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013cf8:	f7fa fb48 	bl	800e38c <uxr_run_session_timeout>
 8013cfc:	68a4      	ldr	r4, [r4, #8]
 8013cfe:	2c00      	cmp	r4, #0
 8013d00:	d1f6      	bne.n	8013cf0 <rmw_wait+0x220>
 8013d02:	e78f      	b.n	8013c24 <rmw_wait+0x154>
 8013d04:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013d08:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013d0c:	3401      	adds	r4, #1
 8013d0e:	42a3      	cmp	r3, r4
 8013d10:	d891      	bhi.n	8013c36 <rmw_wait+0x166>
 8013d12:	e79d      	b.n	8013c50 <rmw_wait+0x180>
 8013d14:	e9da 3200 	ldrd	r3, r2, [sl]
 8013d18:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013d1c:	3401      	adds	r4, #1
 8013d1e:	429c      	cmp	r4, r3
 8013d20:	d39d      	bcc.n	8013c5e <rmw_wait+0x18e>
 8013d22:	e7ab      	b.n	8013c7c <rmw_wait+0x1ac>
 8013d24:	4690      	mov	r8, r2
 8013d26:	e70b      	b.n	8013b40 <rmw_wait+0x70>
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f47f aedb 	bne.w	8013ae4 <rmw_wait+0x14>
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	f47f aed8 	bne.w	8013ae4 <rmw_wait+0x14>
 8013d34:	2f00      	cmp	r7, #0
 8013d36:	d0d8      	beq.n	8013cea <rmw_wait+0x21a>
 8013d38:	2900      	cmp	r1, #0
 8013d3a:	f47f aed6 	bne.w	8013aea <rmw_wait+0x1a>
 8013d3e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013d42:	e6fd      	b.n	8013b40 <rmw_wait+0x70>
 8013d44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013d48:	4641      	mov	r1, r8
 8013d4a:	f7fa fb39 	bl	800e3c0 <uxr_run_session_until_data>
 8013d4e:	68a4      	ldr	r4, [r4, #8]
 8013d50:	2c00      	cmp	r4, #0
 8013d52:	f47f af5e 	bne.w	8013c12 <rmw_wait+0x142>
 8013d56:	e765      	b.n	8013c24 <rmw_wait+0x154>
 8013d58:	f1ba 0f00 	cmp.w	sl, #0
 8013d5c:	d11e      	bne.n	8013d9c <rmw_wait+0x2cc>
 8013d5e:	b35e      	cbz	r6, 8013db8 <rmw_wait+0x2e8>
 8013d60:	6833      	ldr	r3, [r6, #0]
 8013d62:	46d0      	mov	r8, sl
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d18c      	bne.n	8013c82 <rmw_wait+0x1b2>
 8013d68:	2f00      	cmp	r7, #0
 8013d6a:	d1a6      	bne.n	8013cba <rmw_wait+0x1ea>
 8013d6c:	2002      	movs	r0, #2
 8013d6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d72:	2f00      	cmp	r7, #0
 8013d74:	d0b9      	beq.n	8013cea <rmw_wait+0x21a>
 8013d76:	683c      	ldr	r4, [r7, #0]
 8013d78:	f04f 0801 	mov.w	r8, #1
 8013d7c:	2c00      	cmp	r4, #0
 8013d7e:	d19e      	bne.n	8013cbe <rmw_wait+0x1ee>
 8013d80:	e7b3      	b.n	8013cea <rmw_wait+0x21a>
 8013d82:	f1ba 0f00 	cmp.w	sl, #0
 8013d86:	d0ea      	beq.n	8013d5e <rmw_wait+0x28e>
 8013d88:	f8da 3000 	ldr.w	r3, [sl]
 8013d8c:	46a8      	mov	r8, r5
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f47f af64 	bne.w	8013c5c <rmw_wait+0x18c>
 8013d94:	2e00      	cmp	r6, #0
 8013d96:	f47f af72 	bne.w	8013c7e <rmw_wait+0x1ae>
 8013d9a:	e009      	b.n	8013db0 <rmw_wait+0x2e0>
 8013d9c:	f8da 2000 	ldr.w	r2, [sl]
 8013da0:	4698      	mov	r8, r3
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	f47f af5a 	bne.w	8013c5c <rmw_wait+0x18c>
 8013da8:	4690      	mov	r8, r2
 8013daa:	2e00      	cmp	r6, #0
 8013dac:	f47f af67 	bne.w	8013c7e <rmw_wait+0x1ae>
 8013db0:	46b0      	mov	r8, r6
 8013db2:	2f00      	cmp	r7, #0
 8013db4:	d181      	bne.n	8013cba <rmw_wait+0x1ea>
 8013db6:	e7d9      	b.n	8013d6c <rmw_wait+0x29c>
 8013db8:	2f00      	cmp	r7, #0
 8013dba:	d0d7      	beq.n	8013d6c <rmw_wait+0x29c>
 8013dbc:	683c      	ldr	r4, [r7, #0]
 8013dbe:	46b0      	mov	r8, r6
 8013dc0:	2c00      	cmp	r4, #0
 8013dc2:	f47f af7c 	bne.w	8013cbe <rmw_wait+0x1ee>
 8013dc6:	e7d1      	b.n	8013d6c <rmw_wait+0x29c>
 8013dc8:	000f4240 	.word	0x000f4240
 8013dcc:	20010ee8 	.word	0x20010ee8

08013dd0 <rmw_create_wait_set>:
 8013dd0:	b508      	push	{r3, lr}
 8013dd2:	4803      	ldr	r0, [pc, #12]	@ (8013de0 <rmw_create_wait_set+0x10>)
 8013dd4:	f7ff fc94 	bl	8013700 <get_memory>
 8013dd8:	b108      	cbz	r0, 8013dde <rmw_create_wait_set+0xe>
 8013dda:	68c0      	ldr	r0, [r0, #12]
 8013ddc:	3010      	adds	r0, #16
 8013dde:	bd08      	pop	{r3, pc}
 8013de0:	200126c0 	.word	0x200126c0

08013de4 <rmw_destroy_wait_set>:
 8013de4:	b508      	push	{r3, lr}
 8013de6:	4b08      	ldr	r3, [pc, #32]	@ (8013e08 <rmw_destroy_wait_set+0x24>)
 8013de8:	6819      	ldr	r1, [r3, #0]
 8013dea:	b911      	cbnz	r1, 8013df2 <rmw_destroy_wait_set+0xe>
 8013dec:	e00a      	b.n	8013e04 <rmw_destroy_wait_set+0x20>
 8013dee:	6889      	ldr	r1, [r1, #8]
 8013df0:	b141      	cbz	r1, 8013e04 <rmw_destroy_wait_set+0x20>
 8013df2:	68cb      	ldr	r3, [r1, #12]
 8013df4:	3310      	adds	r3, #16
 8013df6:	4298      	cmp	r0, r3
 8013df8:	d1f9      	bne.n	8013dee <rmw_destroy_wait_set+0xa>
 8013dfa:	4803      	ldr	r0, [pc, #12]	@ (8013e08 <rmw_destroy_wait_set+0x24>)
 8013dfc:	f7ff fc90 	bl	8013720 <put_memory>
 8013e00:	2000      	movs	r0, #0
 8013e02:	bd08      	pop	{r3, pc}
 8013e04:	2001      	movs	r0, #1
 8013e06:	bd08      	pop	{r3, pc}
 8013e08:	200126c0 	.word	0x200126c0

08013e0c <ucdr_serialize_endian_array_char>:
 8013e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e10:	4619      	mov	r1, r3
 8013e12:	461e      	mov	r6, r3
 8013e14:	4690      	mov	r8, r2
 8013e16:	4604      	mov	r4, r0
 8013e18:	f7f6 f8b4 	bl	8009f84 <ucdr_check_buffer_available_for>
 8013e1c:	b9e0      	cbnz	r0, 8013e58 <ucdr_serialize_endian_array_char+0x4c>
 8013e1e:	4637      	mov	r7, r6
 8013e20:	e009      	b.n	8013e36 <ucdr_serialize_endian_array_char+0x2a>
 8013e22:	68a0      	ldr	r0, [r4, #8]
 8013e24:	f001 fdab 	bl	801597e <memcpy>
 8013e28:	68a2      	ldr	r2, [r4, #8]
 8013e2a:	6923      	ldr	r3, [r4, #16]
 8013e2c:	442a      	add	r2, r5
 8013e2e:	442b      	add	r3, r5
 8013e30:	1b7f      	subs	r7, r7, r5
 8013e32:	60a2      	str	r2, [r4, #8]
 8013e34:	6123      	str	r3, [r4, #16]
 8013e36:	2201      	movs	r2, #1
 8013e38:	4639      	mov	r1, r7
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f7f6 f928 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8013e40:	1bf1      	subs	r1, r6, r7
 8013e42:	4441      	add	r1, r8
 8013e44:	4605      	mov	r5, r0
 8013e46:	4602      	mov	r2, r0
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	d1ea      	bne.n	8013e22 <ucdr_serialize_endian_array_char+0x16>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	7da0      	ldrb	r0, [r4, #22]
 8013e50:	7563      	strb	r3, [r4, #21]
 8013e52:	4058      	eors	r0, r3
 8013e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e58:	4632      	mov	r2, r6
 8013e5a:	68a0      	ldr	r0, [r4, #8]
 8013e5c:	4641      	mov	r1, r8
 8013e5e:	f001 fd8e 	bl	801597e <memcpy>
 8013e62:	68a2      	ldr	r2, [r4, #8]
 8013e64:	6923      	ldr	r3, [r4, #16]
 8013e66:	4432      	add	r2, r6
 8013e68:	4433      	add	r3, r6
 8013e6a:	60a2      	str	r2, [r4, #8]
 8013e6c:	6123      	str	r3, [r4, #16]
 8013e6e:	e7ed      	b.n	8013e4c <ucdr_serialize_endian_array_char+0x40>

08013e70 <ucdr_deserialize_endian_array_char>:
 8013e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e74:	4619      	mov	r1, r3
 8013e76:	461e      	mov	r6, r3
 8013e78:	4690      	mov	r8, r2
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	f7f6 f882 	bl	8009f84 <ucdr_check_buffer_available_for>
 8013e80:	b9e0      	cbnz	r0, 8013ebc <ucdr_deserialize_endian_array_char+0x4c>
 8013e82:	4637      	mov	r7, r6
 8013e84:	e009      	b.n	8013e9a <ucdr_deserialize_endian_array_char+0x2a>
 8013e86:	68a1      	ldr	r1, [r4, #8]
 8013e88:	f001 fd79 	bl	801597e <memcpy>
 8013e8c:	68a2      	ldr	r2, [r4, #8]
 8013e8e:	6923      	ldr	r3, [r4, #16]
 8013e90:	442a      	add	r2, r5
 8013e92:	442b      	add	r3, r5
 8013e94:	1b7f      	subs	r7, r7, r5
 8013e96:	60a2      	str	r2, [r4, #8]
 8013e98:	6123      	str	r3, [r4, #16]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	4639      	mov	r1, r7
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	f7f6 f8f6 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8013ea4:	4605      	mov	r5, r0
 8013ea6:	1bf0      	subs	r0, r6, r7
 8013ea8:	4440      	add	r0, r8
 8013eaa:	462a      	mov	r2, r5
 8013eac:	2d00      	cmp	r5, #0
 8013eae:	d1ea      	bne.n	8013e86 <ucdr_deserialize_endian_array_char+0x16>
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	7da0      	ldrb	r0, [r4, #22]
 8013eb4:	7563      	strb	r3, [r4, #21]
 8013eb6:	4058      	eors	r0, r3
 8013eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebc:	4632      	mov	r2, r6
 8013ebe:	68a1      	ldr	r1, [r4, #8]
 8013ec0:	4640      	mov	r0, r8
 8013ec2:	f001 fd5c 	bl	801597e <memcpy>
 8013ec6:	68a2      	ldr	r2, [r4, #8]
 8013ec8:	6923      	ldr	r3, [r4, #16]
 8013eca:	4432      	add	r2, r6
 8013ecc:	4433      	add	r3, r6
 8013ece:	60a2      	str	r2, [r4, #8]
 8013ed0:	6123      	str	r3, [r4, #16]
 8013ed2:	e7ed      	b.n	8013eb0 <ucdr_deserialize_endian_array_char+0x40>

08013ed4 <ucdr_serialize_array_uint8_t>:
 8013ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed8:	4688      	mov	r8, r1
 8013eda:	4611      	mov	r1, r2
 8013edc:	4616      	mov	r6, r2
 8013ede:	4604      	mov	r4, r0
 8013ee0:	f7f6 f850 	bl	8009f84 <ucdr_check_buffer_available_for>
 8013ee4:	b9e0      	cbnz	r0, 8013f20 <ucdr_serialize_array_uint8_t+0x4c>
 8013ee6:	4637      	mov	r7, r6
 8013ee8:	e009      	b.n	8013efe <ucdr_serialize_array_uint8_t+0x2a>
 8013eea:	68a0      	ldr	r0, [r4, #8]
 8013eec:	f001 fd47 	bl	801597e <memcpy>
 8013ef0:	68a2      	ldr	r2, [r4, #8]
 8013ef2:	6923      	ldr	r3, [r4, #16]
 8013ef4:	442a      	add	r2, r5
 8013ef6:	442b      	add	r3, r5
 8013ef8:	1b7f      	subs	r7, r7, r5
 8013efa:	60a2      	str	r2, [r4, #8]
 8013efc:	6123      	str	r3, [r4, #16]
 8013efe:	2201      	movs	r2, #1
 8013f00:	4639      	mov	r1, r7
 8013f02:	4620      	mov	r0, r4
 8013f04:	f7f6 f8c4 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8013f08:	1bf1      	subs	r1, r6, r7
 8013f0a:	4441      	add	r1, r8
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	4602      	mov	r2, r0
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d1ea      	bne.n	8013eea <ucdr_serialize_array_uint8_t+0x16>
 8013f14:	2301      	movs	r3, #1
 8013f16:	7da0      	ldrb	r0, [r4, #22]
 8013f18:	7563      	strb	r3, [r4, #21]
 8013f1a:	4058      	eors	r0, r3
 8013f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f20:	4632      	mov	r2, r6
 8013f22:	68a0      	ldr	r0, [r4, #8]
 8013f24:	4641      	mov	r1, r8
 8013f26:	f001 fd2a 	bl	801597e <memcpy>
 8013f2a:	68a3      	ldr	r3, [r4, #8]
 8013f2c:	6922      	ldr	r2, [r4, #16]
 8013f2e:	4433      	add	r3, r6
 8013f30:	4432      	add	r2, r6
 8013f32:	60a3      	str	r3, [r4, #8]
 8013f34:	6122      	str	r2, [r4, #16]
 8013f36:	e7ed      	b.n	8013f14 <ucdr_serialize_array_uint8_t+0x40>

08013f38 <ucdr_serialize_endian_array_uint8_t>:
 8013f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	461e      	mov	r6, r3
 8013f40:	4690      	mov	r8, r2
 8013f42:	4604      	mov	r4, r0
 8013f44:	f7f6 f81e 	bl	8009f84 <ucdr_check_buffer_available_for>
 8013f48:	b9e0      	cbnz	r0, 8013f84 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013f4a:	4637      	mov	r7, r6
 8013f4c:	e009      	b.n	8013f62 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013f4e:	68a0      	ldr	r0, [r4, #8]
 8013f50:	f001 fd15 	bl	801597e <memcpy>
 8013f54:	68a2      	ldr	r2, [r4, #8]
 8013f56:	6923      	ldr	r3, [r4, #16]
 8013f58:	442a      	add	r2, r5
 8013f5a:	442b      	add	r3, r5
 8013f5c:	1b7f      	subs	r7, r7, r5
 8013f5e:	60a2      	str	r2, [r4, #8]
 8013f60:	6123      	str	r3, [r4, #16]
 8013f62:	2201      	movs	r2, #1
 8013f64:	4639      	mov	r1, r7
 8013f66:	4620      	mov	r0, r4
 8013f68:	f7f6 f892 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8013f6c:	1bf1      	subs	r1, r6, r7
 8013f6e:	4441      	add	r1, r8
 8013f70:	4605      	mov	r5, r0
 8013f72:	4602      	mov	r2, r0
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d1ea      	bne.n	8013f4e <ucdr_serialize_endian_array_uint8_t+0x16>
 8013f78:	2301      	movs	r3, #1
 8013f7a:	7da0      	ldrb	r0, [r4, #22]
 8013f7c:	7563      	strb	r3, [r4, #21]
 8013f7e:	4058      	eors	r0, r3
 8013f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f84:	4632      	mov	r2, r6
 8013f86:	68a0      	ldr	r0, [r4, #8]
 8013f88:	4641      	mov	r1, r8
 8013f8a:	f001 fcf8 	bl	801597e <memcpy>
 8013f8e:	68a2      	ldr	r2, [r4, #8]
 8013f90:	6923      	ldr	r3, [r4, #16]
 8013f92:	4432      	add	r2, r6
 8013f94:	4433      	add	r3, r6
 8013f96:	60a2      	str	r2, [r4, #8]
 8013f98:	6123      	str	r3, [r4, #16]
 8013f9a:	e7ed      	b.n	8013f78 <ucdr_serialize_endian_array_uint8_t+0x40>

08013f9c <ucdr_deserialize_array_uint8_t>:
 8013f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa0:	4688      	mov	r8, r1
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4616      	mov	r6, r2
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	f7f5 ffec 	bl	8009f84 <ucdr_check_buffer_available_for>
 8013fac:	b9e0      	cbnz	r0, 8013fe8 <ucdr_deserialize_array_uint8_t+0x4c>
 8013fae:	4637      	mov	r7, r6
 8013fb0:	e009      	b.n	8013fc6 <ucdr_deserialize_array_uint8_t+0x2a>
 8013fb2:	68a1      	ldr	r1, [r4, #8]
 8013fb4:	f001 fce3 	bl	801597e <memcpy>
 8013fb8:	68a2      	ldr	r2, [r4, #8]
 8013fba:	6923      	ldr	r3, [r4, #16]
 8013fbc:	442a      	add	r2, r5
 8013fbe:	442b      	add	r3, r5
 8013fc0:	1b7f      	subs	r7, r7, r5
 8013fc2:	60a2      	str	r2, [r4, #8]
 8013fc4:	6123      	str	r3, [r4, #16]
 8013fc6:	2201      	movs	r2, #1
 8013fc8:	4639      	mov	r1, r7
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f7f6 f860 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8013fd0:	4605      	mov	r5, r0
 8013fd2:	1bf0      	subs	r0, r6, r7
 8013fd4:	4440      	add	r0, r8
 8013fd6:	462a      	mov	r2, r5
 8013fd8:	2d00      	cmp	r5, #0
 8013fda:	d1ea      	bne.n	8013fb2 <ucdr_deserialize_array_uint8_t+0x16>
 8013fdc:	2301      	movs	r3, #1
 8013fde:	7da0      	ldrb	r0, [r4, #22]
 8013fe0:	7563      	strb	r3, [r4, #21]
 8013fe2:	4058      	eors	r0, r3
 8013fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe8:	4632      	mov	r2, r6
 8013fea:	68a1      	ldr	r1, [r4, #8]
 8013fec:	4640      	mov	r0, r8
 8013fee:	f001 fcc6 	bl	801597e <memcpy>
 8013ff2:	68a3      	ldr	r3, [r4, #8]
 8013ff4:	6922      	ldr	r2, [r4, #16]
 8013ff6:	4433      	add	r3, r6
 8013ff8:	4432      	add	r2, r6
 8013ffa:	60a3      	str	r3, [r4, #8]
 8013ffc:	6122      	str	r2, [r4, #16]
 8013ffe:	e7ed      	b.n	8013fdc <ucdr_deserialize_array_uint8_t+0x40>

08014000 <ucdr_deserialize_endian_array_uint8_t>:
 8014000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014004:	4619      	mov	r1, r3
 8014006:	461e      	mov	r6, r3
 8014008:	4690      	mov	r8, r2
 801400a:	4604      	mov	r4, r0
 801400c:	f7f5 ffba 	bl	8009f84 <ucdr_check_buffer_available_for>
 8014010:	b9e0      	cbnz	r0, 801404c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014012:	4637      	mov	r7, r6
 8014014:	e009      	b.n	801402a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014016:	68a1      	ldr	r1, [r4, #8]
 8014018:	f001 fcb1 	bl	801597e <memcpy>
 801401c:	68a2      	ldr	r2, [r4, #8]
 801401e:	6923      	ldr	r3, [r4, #16]
 8014020:	442a      	add	r2, r5
 8014022:	442b      	add	r3, r5
 8014024:	1b7f      	subs	r7, r7, r5
 8014026:	60a2      	str	r2, [r4, #8]
 8014028:	6123      	str	r3, [r4, #16]
 801402a:	2201      	movs	r2, #1
 801402c:	4639      	mov	r1, r7
 801402e:	4620      	mov	r0, r4
 8014030:	f7f6 f82e 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8014034:	4605      	mov	r5, r0
 8014036:	1bf0      	subs	r0, r6, r7
 8014038:	4440      	add	r0, r8
 801403a:	462a      	mov	r2, r5
 801403c:	2d00      	cmp	r5, #0
 801403e:	d1ea      	bne.n	8014016 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014040:	2301      	movs	r3, #1
 8014042:	7da0      	ldrb	r0, [r4, #22]
 8014044:	7563      	strb	r3, [r4, #21]
 8014046:	4058      	eors	r0, r3
 8014048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801404c:	4632      	mov	r2, r6
 801404e:	68a1      	ldr	r1, [r4, #8]
 8014050:	4640      	mov	r0, r8
 8014052:	f001 fc94 	bl	801597e <memcpy>
 8014056:	68a2      	ldr	r2, [r4, #8]
 8014058:	6923      	ldr	r3, [r4, #16]
 801405a:	4432      	add	r2, r6
 801405c:	4433      	add	r3, r6
 801405e:	60a2      	str	r2, [r4, #8]
 8014060:	6123      	str	r3, [r4, #16]
 8014062:	e7ed      	b.n	8014040 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014064 <ucdr_serialize_endian_array_double>:
 8014064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014068:	460f      	mov	r7, r1
 801406a:	2108      	movs	r1, #8
 801406c:	4605      	mov	r5, r0
 801406e:	4614      	mov	r4, r2
 8014070:	461e      	mov	r6, r3
 8014072:	f7f5 ffe5 	bl	800a040 <ucdr_buffer_alignment>
 8014076:	4601      	mov	r1, r0
 8014078:	4628      	mov	r0, r5
 801407a:	f895 8015 	ldrb.w	r8, [r5, #21]
 801407e:	f7f6 f823 	bl	800a0c8 <ucdr_advance_buffer>
 8014082:	2f01      	cmp	r7, #1
 8014084:	f885 8015 	strb.w	r8, [r5, #21]
 8014088:	d00f      	beq.n	80140aa <ucdr_serialize_endian_array_double+0x46>
 801408a:	b14e      	cbz	r6, 80140a0 <ucdr_serialize_endian_array_double+0x3c>
 801408c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8014090:	ecb4 0b02 	vldmia	r4!, {d0}
 8014094:	4639      	mov	r1, r7
 8014096:	4628      	mov	r0, r5
 8014098:	f7f5 fd0e 	bl	8009ab8 <ucdr_serialize_endian_double>
 801409c:	42a6      	cmp	r6, r4
 801409e:	d1f7      	bne.n	8014090 <ucdr_serialize_endian_array_double+0x2c>
 80140a0:	7da8      	ldrb	r0, [r5, #22]
 80140a2:	f080 0001 	eor.w	r0, r0, #1
 80140a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140aa:	00f6      	lsls	r6, r6, #3
 80140ac:	4631      	mov	r1, r6
 80140ae:	4628      	mov	r0, r5
 80140b0:	f7f5 ff68 	bl	8009f84 <ucdr_check_buffer_available_for>
 80140b4:	b9f8      	cbnz	r0, 80140f6 <ucdr_serialize_endian_array_double+0x92>
 80140b6:	46b0      	mov	r8, r6
 80140b8:	e00a      	b.n	80140d0 <ucdr_serialize_endian_array_double+0x6c>
 80140ba:	68a8      	ldr	r0, [r5, #8]
 80140bc:	f001 fc5f 	bl	801597e <memcpy>
 80140c0:	68aa      	ldr	r2, [r5, #8]
 80140c2:	692b      	ldr	r3, [r5, #16]
 80140c4:	443a      	add	r2, r7
 80140c6:	443b      	add	r3, r7
 80140c8:	eba8 0807 	sub.w	r8, r8, r7
 80140cc:	60aa      	str	r2, [r5, #8]
 80140ce:	612b      	str	r3, [r5, #16]
 80140d0:	2208      	movs	r2, #8
 80140d2:	4641      	mov	r1, r8
 80140d4:	4628      	mov	r0, r5
 80140d6:	f7f5 ffdb 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 80140da:	eba6 0108 	sub.w	r1, r6, r8
 80140de:	4421      	add	r1, r4
 80140e0:	4607      	mov	r7, r0
 80140e2:	4602      	mov	r2, r0
 80140e4:	2800      	cmp	r0, #0
 80140e6:	d1e8      	bne.n	80140ba <ucdr_serialize_endian_array_double+0x56>
 80140e8:	7da8      	ldrb	r0, [r5, #22]
 80140ea:	2308      	movs	r3, #8
 80140ec:	756b      	strb	r3, [r5, #21]
 80140ee:	f080 0001 	eor.w	r0, r0, #1
 80140f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140f6:	4632      	mov	r2, r6
 80140f8:	68a8      	ldr	r0, [r5, #8]
 80140fa:	4621      	mov	r1, r4
 80140fc:	f001 fc3f 	bl	801597e <memcpy>
 8014100:	68aa      	ldr	r2, [r5, #8]
 8014102:	692b      	ldr	r3, [r5, #16]
 8014104:	4432      	add	r2, r6
 8014106:	441e      	add	r6, r3
 8014108:	60aa      	str	r2, [r5, #8]
 801410a:	612e      	str	r6, [r5, #16]
 801410c:	e7ec      	b.n	80140e8 <ucdr_serialize_endian_array_double+0x84>
 801410e:	bf00      	nop

08014110 <ucdr_deserialize_endian_array_double>:
 8014110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014114:	460f      	mov	r7, r1
 8014116:	2108      	movs	r1, #8
 8014118:	4605      	mov	r5, r0
 801411a:	4614      	mov	r4, r2
 801411c:	461e      	mov	r6, r3
 801411e:	f7f5 ff8f 	bl	800a040 <ucdr_buffer_alignment>
 8014122:	4601      	mov	r1, r0
 8014124:	4628      	mov	r0, r5
 8014126:	f895 8015 	ldrb.w	r8, [r5, #21]
 801412a:	f7f5 ffcd 	bl	800a0c8 <ucdr_advance_buffer>
 801412e:	2f01      	cmp	r7, #1
 8014130:	f885 8015 	strb.w	r8, [r5, #21]
 8014134:	d00f      	beq.n	8014156 <ucdr_deserialize_endian_array_double+0x46>
 8014136:	b14e      	cbz	r6, 801414c <ucdr_deserialize_endian_array_double+0x3c>
 8014138:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 801413c:	4622      	mov	r2, r4
 801413e:	4639      	mov	r1, r7
 8014140:	3408      	adds	r4, #8
 8014142:	4628      	mov	r0, r5
 8014144:	f7f5 fe50 	bl	8009de8 <ucdr_deserialize_endian_double>
 8014148:	42a6      	cmp	r6, r4
 801414a:	d1f7      	bne.n	801413c <ucdr_deserialize_endian_array_double+0x2c>
 801414c:	7da8      	ldrb	r0, [r5, #22]
 801414e:	f080 0001 	eor.w	r0, r0, #1
 8014152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014156:	00f6      	lsls	r6, r6, #3
 8014158:	4631      	mov	r1, r6
 801415a:	4628      	mov	r0, r5
 801415c:	f7f5 ff12 	bl	8009f84 <ucdr_check_buffer_available_for>
 8014160:	b9f8      	cbnz	r0, 80141a2 <ucdr_deserialize_endian_array_double+0x92>
 8014162:	46b0      	mov	r8, r6
 8014164:	e00a      	b.n	801417c <ucdr_deserialize_endian_array_double+0x6c>
 8014166:	68a9      	ldr	r1, [r5, #8]
 8014168:	f001 fc09 	bl	801597e <memcpy>
 801416c:	68aa      	ldr	r2, [r5, #8]
 801416e:	692b      	ldr	r3, [r5, #16]
 8014170:	443a      	add	r2, r7
 8014172:	443b      	add	r3, r7
 8014174:	eba8 0807 	sub.w	r8, r8, r7
 8014178:	60aa      	str	r2, [r5, #8]
 801417a:	612b      	str	r3, [r5, #16]
 801417c:	2208      	movs	r2, #8
 801417e:	4641      	mov	r1, r8
 8014180:	4628      	mov	r0, r5
 8014182:	f7f5 ff85 	bl	800a090 <ucdr_check_final_buffer_behavior_array>
 8014186:	4607      	mov	r7, r0
 8014188:	eba6 0008 	sub.w	r0, r6, r8
 801418c:	4420      	add	r0, r4
 801418e:	463a      	mov	r2, r7
 8014190:	2f00      	cmp	r7, #0
 8014192:	d1e8      	bne.n	8014166 <ucdr_deserialize_endian_array_double+0x56>
 8014194:	7da8      	ldrb	r0, [r5, #22]
 8014196:	2308      	movs	r3, #8
 8014198:	756b      	strb	r3, [r5, #21]
 801419a:	f080 0001 	eor.w	r0, r0, #1
 801419e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a2:	4632      	mov	r2, r6
 80141a4:	68a9      	ldr	r1, [r5, #8]
 80141a6:	4620      	mov	r0, r4
 80141a8:	f001 fbe9 	bl	801597e <memcpy>
 80141ac:	68aa      	ldr	r2, [r5, #8]
 80141ae:	692b      	ldr	r3, [r5, #16]
 80141b0:	4432      	add	r2, r6
 80141b2:	441e      	add	r6, r3
 80141b4:	60aa      	str	r2, [r5, #8]
 80141b6:	612e      	str	r6, [r5, #16]
 80141b8:	e7ec      	b.n	8014194 <ucdr_deserialize_endian_array_double+0x84>
 80141ba:	bf00      	nop

080141bc <ucdr_serialize_string>:
 80141bc:	b510      	push	{r4, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	4604      	mov	r4, r0
 80141c2:	4608      	mov	r0, r1
 80141c4:	9101      	str	r1, [sp, #4]
 80141c6:	f7ec f835 	bl	8000234 <strlen>
 80141ca:	9901      	ldr	r1, [sp, #4]
 80141cc:	4602      	mov	r2, r0
 80141ce:	3201      	adds	r2, #1
 80141d0:	4620      	mov	r0, r4
 80141d2:	b002      	add	sp, #8
 80141d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141d8:	f7f8 bf9e 	b.w	800d118 <ucdr_serialize_sequence_char>

080141dc <ucdr_deserialize_string>:
 80141dc:	b500      	push	{lr}
 80141de:	b083      	sub	sp, #12
 80141e0:	ab01      	add	r3, sp, #4
 80141e2:	f7f8 ffab 	bl	800d13c <ucdr_deserialize_sequence_char>
 80141e6:	b003      	add	sp, #12
 80141e8:	f85d fb04 	ldr.w	pc, [sp], #4

080141ec <uxr_init_input_best_effort_stream>:
 80141ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80141f0:	8003      	strh	r3, [r0, #0]
 80141f2:	4770      	bx	lr

080141f4 <uxr_reset_input_best_effort_stream>:
 80141f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80141f8:	8003      	strh	r3, [r0, #0]
 80141fa:	4770      	bx	lr

080141fc <uxr_receive_best_effort_message>:
 80141fc:	b538      	push	{r3, r4, r5, lr}
 80141fe:	4604      	mov	r4, r0
 8014200:	8800      	ldrh	r0, [r0, #0]
 8014202:	460d      	mov	r5, r1
 8014204:	f000 fd2c 	bl	8014c60 <uxr_seq_num_cmp>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014210:	bfb8      	it	lt
 8014212:	8025      	strhlt	r5, [r4, #0]
 8014214:	bd38      	pop	{r3, r4, r5, pc}
 8014216:	bf00      	nop

08014218 <on_full_input_buffer>:
 8014218:	b570      	push	{r4, r5, r6, lr}
 801421a:	6802      	ldr	r2, [r0, #0]
 801421c:	460d      	mov	r5, r1
 801421e:	6809      	ldr	r1, [r1, #0]
 8014220:	686c      	ldr	r4, [r5, #4]
 8014222:	1a53      	subs	r3, r2, r1
 8014224:	4606      	mov	r6, r0
 8014226:	8928      	ldrh	r0, [r5, #8]
 8014228:	fbb4 f4f0 	udiv	r4, r4, r0
 801422c:	fbb3 f3f4 	udiv	r3, r3, r4
 8014230:	3301      	adds	r3, #1
 8014232:	b29b      	uxth	r3, r3
 8014234:	fbb3 f2f0 	udiv	r2, r3, r0
 8014238:	fb00 3312 	mls	r3, r0, r2, r3
 801423c:	b29b      	uxth	r3, r3
 801423e:	fb04 f403 	mul.w	r4, r4, r3
 8014242:	1d23      	adds	r3, r4, #4
 8014244:	440b      	add	r3, r1
 8014246:	7d28      	ldrb	r0, [r5, #20]
 8014248:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801424c:	b110      	cbz	r0, 8014254 <on_full_input_buffer+0x3c>
 801424e:	2000      	movs	r0, #0
 8014250:	f843 0c04 	str.w	r0, [r3, #-4]
 8014254:	2a03      	cmp	r2, #3
 8014256:	d801      	bhi.n	801425c <on_full_input_buffer+0x44>
 8014258:	2001      	movs	r0, #1
 801425a:	bd70      	pop	{r4, r5, r6, pc}
 801425c:	3408      	adds	r4, #8
 801425e:	6933      	ldr	r3, [r6, #16]
 8014260:	4421      	add	r1, r4
 8014262:	4630      	mov	r0, r6
 8014264:	3a04      	subs	r2, #4
 8014266:	f7f5 fed7 	bl	800a018 <ucdr_init_buffer_origin>
 801426a:	4630      	mov	r0, r6
 801426c:	4902      	ldr	r1, [pc, #8]	@ (8014278 <on_full_input_buffer+0x60>)
 801426e:	462a      	mov	r2, r5
 8014270:	f7f5 feb0 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 8014274:	2000      	movs	r0, #0
 8014276:	bd70      	pop	{r4, r5, r6, pc}
 8014278:	08014219 	.word	0x08014219

0801427c <uxr_init_input_reliable_stream>:
 801427c:	b470      	push	{r4, r5, r6}
 801427e:	9c03      	ldr	r4, [sp, #12]
 8014280:	6001      	str	r1, [r0, #0]
 8014282:	2600      	movs	r6, #0
 8014284:	8103      	strh	r3, [r0, #8]
 8014286:	6042      	str	r2, [r0, #4]
 8014288:	6104      	str	r4, [r0, #16]
 801428a:	7506      	strb	r6, [r0, #20]
 801428c:	b1ab      	cbz	r3, 80142ba <uxr_init_input_reliable_stream+0x3e>
 801428e:	600e      	str	r6, [r1, #0]
 8014290:	8901      	ldrh	r1, [r0, #8]
 8014292:	2901      	cmp	r1, #1
 8014294:	d911      	bls.n	80142ba <uxr_init_input_reliable_stream+0x3e>
 8014296:	2201      	movs	r2, #1
 8014298:	e9d0 5400 	ldrd	r5, r4, [r0]
 801429c:	fbb2 f3f1 	udiv	r3, r2, r1
 80142a0:	fb01 2313 	mls	r3, r1, r3, r2
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	fbb4 f1f1 	udiv	r1, r4, r1
 80142aa:	fb03 f301 	mul.w	r3, r3, r1
 80142ae:	3201      	adds	r2, #1
 80142b0:	50ee      	str	r6, [r5, r3]
 80142b2:	8901      	ldrh	r1, [r0, #8]
 80142b4:	b292      	uxth	r2, r2
 80142b6:	4291      	cmp	r1, r2
 80142b8:	d8ee      	bhi.n	8014298 <uxr_init_input_reliable_stream+0x1c>
 80142ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142be:	bc70      	pop	{r4, r5, r6}
 80142c0:	60c3      	str	r3, [r0, #12]
 80142c2:	4770      	bx	lr

080142c4 <uxr_reset_input_reliable_stream>:
 80142c4:	8902      	ldrh	r2, [r0, #8]
 80142c6:	b1ca      	cbz	r2, 80142fc <uxr_reset_input_reliable_stream+0x38>
 80142c8:	b470      	push	{r4, r5, r6}
 80142ca:	2400      	movs	r4, #0
 80142cc:	4621      	mov	r1, r4
 80142ce:	4626      	mov	r6, r4
 80142d0:	fbb1 f3f2 	udiv	r3, r1, r2
 80142d4:	fb02 1313 	mls	r3, r2, r3, r1
 80142d8:	e9d0 5100 	ldrd	r5, r1, [r0]
 80142dc:	b29b      	uxth	r3, r3
 80142de:	fbb1 f2f2 	udiv	r2, r1, r2
 80142e2:	fb03 f302 	mul.w	r3, r3, r2
 80142e6:	3401      	adds	r4, #1
 80142e8:	50ee      	str	r6, [r5, r3]
 80142ea:	8902      	ldrh	r2, [r0, #8]
 80142ec:	b2a1      	uxth	r1, r4
 80142ee:	428a      	cmp	r2, r1
 80142f0:	d8ee      	bhi.n	80142d0 <uxr_reset_input_reliable_stream+0xc>
 80142f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142f6:	bc70      	pop	{r4, r5, r6}
 80142f8:	60c3      	str	r3, [r0, #12]
 80142fa:	4770      	bx	lr
 80142fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014300:	60c3      	str	r3, [r0, #12]
 8014302:	4770      	bx	lr

08014304 <uxr_receive_reliable_message>:
 8014304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014308:	4604      	mov	r4, r0
 801430a:	460d      	mov	r5, r1
 801430c:	8901      	ldrh	r1, [r0, #8]
 801430e:	8980      	ldrh	r0, [r0, #12]
 8014310:	4690      	mov	r8, r2
 8014312:	461f      	mov	r7, r3
 8014314:	f000 fc9c 	bl	8014c50 <uxr_seq_num_add>
 8014318:	4629      	mov	r1, r5
 801431a:	4606      	mov	r6, r0
 801431c:	89a0      	ldrh	r0, [r4, #12]
 801431e:	f000 fc9f 	bl	8014c60 <uxr_seq_num_cmp>
 8014322:	2800      	cmp	r0, #0
 8014324:	db0a      	blt.n	801433c <uxr_receive_reliable_message+0x38>
 8014326:	2600      	movs	r6, #0
 8014328:	89e0      	ldrh	r0, [r4, #14]
 801432a:	4629      	mov	r1, r5
 801432c:	f000 fc98 	bl	8014c60 <uxr_seq_num_cmp>
 8014330:	2800      	cmp	r0, #0
 8014332:	bfb8      	it	lt
 8014334:	81e5      	strhlt	r5, [r4, #14]
 8014336:	4630      	mov	r0, r6
 8014338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801433c:	4630      	mov	r0, r6
 801433e:	4629      	mov	r1, r5
 8014340:	f000 fc8e 	bl	8014c60 <uxr_seq_num_cmp>
 8014344:	2800      	cmp	r0, #0
 8014346:	dbee      	blt.n	8014326 <uxr_receive_reliable_message+0x22>
 8014348:	6923      	ldr	r3, [r4, #16]
 801434a:	4640      	mov	r0, r8
 801434c:	4798      	blx	r3
 801434e:	2101      	movs	r1, #1
 8014350:	4681      	mov	r9, r0
 8014352:	89a0      	ldrh	r0, [r4, #12]
 8014354:	f000 fc7c 	bl	8014c50 <uxr_seq_num_add>
 8014358:	f1b9 0f00 	cmp.w	r9, #0
 801435c:	d101      	bne.n	8014362 <uxr_receive_reliable_message+0x5e>
 801435e:	4285      	cmp	r5, r0
 8014360:	d049      	beq.n	80143f6 <uxr_receive_reliable_message+0xf2>
 8014362:	8921      	ldrh	r1, [r4, #8]
 8014364:	fbb5 f3f1 	udiv	r3, r5, r1
 8014368:	fb01 5313 	mls	r3, r1, r3, r5
 801436c:	b29b      	uxth	r3, r3
 801436e:	6862      	ldr	r2, [r4, #4]
 8014370:	6820      	ldr	r0, [r4, #0]
 8014372:	fbb2 f2f1 	udiv	r2, r2, r1
 8014376:	fb03 f302 	mul.w	r3, r3, r2
 801437a:	3304      	adds	r3, #4
 801437c:	4418      	add	r0, r3
 801437e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1cf      	bne.n	8014326 <uxr_receive_reliable_message+0x22>
 8014386:	4641      	mov	r1, r8
 8014388:	463a      	mov	r2, r7
 801438a:	f001 faf8 	bl	801597e <memcpy>
 801438e:	8921      	ldrh	r1, [r4, #8]
 8014390:	fbb5 f3f1 	udiv	r3, r5, r1
 8014394:	fb01 5313 	mls	r3, r1, r3, r5
 8014398:	b29b      	uxth	r3, r3
 801439a:	6862      	ldr	r2, [r4, #4]
 801439c:	fbb2 f2f1 	udiv	r2, r2, r1
 80143a0:	6821      	ldr	r1, [r4, #0]
 80143a2:	fb03 f302 	mul.w	r3, r3, r2
 80143a6:	2201      	movs	r2, #1
 80143a8:	50cf      	str	r7, [r1, r3]
 80143aa:	9b08      	ldr	r3, [sp, #32]
 80143ac:	701a      	strb	r2, [r3, #0]
 80143ae:	f1b9 0f00 	cmp.w	r9, #0
 80143b2:	d0b8      	beq.n	8014326 <uxr_receive_reliable_message+0x22>
 80143b4:	89a6      	ldrh	r6, [r4, #12]
 80143b6:	e001      	b.n	80143bc <uxr_receive_reliable_message+0xb8>
 80143b8:	2801      	cmp	r0, #1
 80143ba:	d1b4      	bne.n	8014326 <uxr_receive_reliable_message+0x22>
 80143bc:	4630      	mov	r0, r6
 80143be:	2101      	movs	r1, #1
 80143c0:	f000 fc46 	bl	8014c50 <uxr_seq_num_add>
 80143c4:	8921      	ldrh	r1, [r4, #8]
 80143c6:	fbb0 f3f1 	udiv	r3, r0, r1
 80143ca:	fb01 0313 	mls	r3, r1, r3, r0
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	6862      	ldr	r2, [r4, #4]
 80143d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80143d6:	4606      	mov	r6, r0
 80143d8:	fb03 f302 	mul.w	r3, r3, r2
 80143dc:	6820      	ldr	r0, [r4, #0]
 80143de:	3304      	adds	r3, #4
 80143e0:	4418      	add	r0, r3
 80143e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d09d      	beq.n	8014326 <uxr_receive_reliable_message+0x22>
 80143ea:	6923      	ldr	r3, [r4, #16]
 80143ec:	4798      	blx	r3
 80143ee:	2802      	cmp	r0, #2
 80143f0:	d1e2      	bne.n	80143b8 <uxr_receive_reliable_message+0xb4>
 80143f2:	2601      	movs	r6, #1
 80143f4:	e798      	b.n	8014328 <uxr_receive_reliable_message+0x24>
 80143f6:	9b08      	ldr	r3, [sp, #32]
 80143f8:	81a5      	strh	r5, [r4, #12]
 80143fa:	2601      	movs	r6, #1
 80143fc:	f883 9000 	strb.w	r9, [r3]
 8014400:	e792      	b.n	8014328 <uxr_receive_reliable_message+0x24>
 8014402:	bf00      	nop

08014404 <uxr_next_input_reliable_buffer_available>:
 8014404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014408:	4604      	mov	r4, r0
 801440a:	460e      	mov	r6, r1
 801440c:	8980      	ldrh	r0, [r0, #12]
 801440e:	2101      	movs	r1, #1
 8014410:	4617      	mov	r7, r2
 8014412:	f000 fc1d 	bl	8014c50 <uxr_seq_num_add>
 8014416:	8921      	ldrh	r1, [r4, #8]
 8014418:	fbb0 f3f1 	udiv	r3, r0, r1
 801441c:	fb01 0313 	mls	r3, r1, r3, r0
 8014420:	b29b      	uxth	r3, r3
 8014422:	6862      	ldr	r2, [r4, #4]
 8014424:	fbb2 f2f1 	udiv	r2, r2, r1
 8014428:	fb03 f302 	mul.w	r3, r3, r2
 801442c:	6822      	ldr	r2, [r4, #0]
 801442e:	3304      	adds	r3, #4
 8014430:	eb02 0803 	add.w	r8, r2, r3
 8014434:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8014438:	f1b9 0f00 	cmp.w	r9, #0
 801443c:	d025      	beq.n	801448a <uxr_next_input_reliable_buffer_available+0x86>
 801443e:	6923      	ldr	r3, [r4, #16]
 8014440:	4605      	mov	r5, r0
 8014442:	4640      	mov	r0, r8
 8014444:	4798      	blx	r3
 8014446:	4682      	mov	sl, r0
 8014448:	b310      	cbz	r0, 8014490 <uxr_next_input_reliable_buffer_available+0x8c>
 801444a:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801444e:	e005      	b.n	801445c <uxr_next_input_reliable_buffer_available+0x58>
 8014450:	6923      	ldr	r3, [r4, #16]
 8014452:	4798      	blx	r3
 8014454:	2802      	cmp	r0, #2
 8014456:	d032      	beq.n	80144be <uxr_next_input_reliable_buffer_available+0xba>
 8014458:	2801      	cmp	r0, #1
 801445a:	d116      	bne.n	801448a <uxr_next_input_reliable_buffer_available+0x86>
 801445c:	4650      	mov	r0, sl
 801445e:	2101      	movs	r1, #1
 8014460:	f000 fbf6 	bl	8014c50 <uxr_seq_num_add>
 8014464:	8921      	ldrh	r1, [r4, #8]
 8014466:	fbb0 f3f1 	udiv	r3, r0, r1
 801446a:	fb01 0313 	mls	r3, r1, r3, r0
 801446e:	b29b      	uxth	r3, r3
 8014470:	6862      	ldr	r2, [r4, #4]
 8014472:	fbb2 f2f1 	udiv	r2, r2, r1
 8014476:	4682      	mov	sl, r0
 8014478:	fb03 f302 	mul.w	r3, r3, r2
 801447c:	6820      	ldr	r0, [r4, #0]
 801447e:	3304      	adds	r3, #4
 8014480:	4418      	add	r0, r3
 8014482:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d1e2      	bne.n	8014450 <uxr_next_input_reliable_buffer_available+0x4c>
 801448a:	2000      	movs	r0, #0
 801448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014490:	464a      	mov	r2, r9
 8014492:	4641      	mov	r1, r8
 8014494:	4630      	mov	r0, r6
 8014496:	f7f5 fdc7 	bl	800a028 <ucdr_init_buffer>
 801449a:	8921      	ldrh	r1, [r4, #8]
 801449c:	fbb5 f3f1 	udiv	r3, r5, r1
 80144a0:	fb01 5313 	mls	r3, r1, r3, r5
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	6862      	ldr	r2, [r4, #4]
 80144a8:	fbb2 f2f1 	udiv	r2, r2, r1
 80144ac:	6821      	ldr	r1, [r4, #0]
 80144ae:	fb03 f302 	mul.w	r3, r3, r2
 80144b2:	2001      	movs	r0, #1
 80144b4:	f841 a003 	str.w	sl, [r1, r3]
 80144b8:	81a5      	strh	r5, [r4, #12]
 80144ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144be:	8922      	ldrh	r2, [r4, #8]
 80144c0:	fbb5 f0f2 	udiv	r0, r5, r2
 80144c4:	fb02 5510 	mls	r5, r2, r0, r5
 80144c8:	b2ad      	uxth	r5, r5
 80144ca:	6863      	ldr	r3, [r4, #4]
 80144cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80144d0:	fb05 f503 	mul.w	r5, r5, r3
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	2000      	movs	r0, #0
 80144d8:	5158      	str	r0, [r3, r5]
 80144da:	eba9 0207 	sub.w	r2, r9, r7
 80144de:	eb08 0107 	add.w	r1, r8, r7
 80144e2:	4630      	mov	r0, r6
 80144e4:	f7f5 fda0 	bl	800a028 <ucdr_init_buffer>
 80144e8:	4630      	mov	r0, r6
 80144ea:	4904      	ldr	r1, [pc, #16]	@ (80144fc <uxr_next_input_reliable_buffer_available+0xf8>)
 80144ec:	4622      	mov	r2, r4
 80144ee:	f7f5 fd71 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 80144f2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80144f6:	2001      	movs	r0, #1
 80144f8:	e7c8      	b.n	801448c <uxr_next_input_reliable_buffer_available+0x88>
 80144fa:	bf00      	nop
 80144fc:	08014219 	.word	0x08014219

08014500 <uxr_process_heartbeat>:
 8014500:	b538      	push	{r3, r4, r5, lr}
 8014502:	4611      	mov	r1, r2
 8014504:	4604      	mov	r4, r0
 8014506:	89c0      	ldrh	r0, [r0, #14]
 8014508:	4615      	mov	r5, r2
 801450a:	f000 fba9 	bl	8014c60 <uxr_seq_num_cmp>
 801450e:	2800      	cmp	r0, #0
 8014510:	bfb8      	it	lt
 8014512:	81e5      	strhlt	r5, [r4, #14]
 8014514:	bd38      	pop	{r3, r4, r5, pc}
 8014516:	bf00      	nop

08014518 <uxr_compute_acknack>:
 8014518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801451c:	8903      	ldrh	r3, [r0, #8]
 801451e:	8986      	ldrh	r6, [r0, #12]
 8014520:	4604      	mov	r4, r0
 8014522:	460d      	mov	r5, r1
 8014524:	b1d3      	cbz	r3, 801455c <uxr_compute_acknack+0x44>
 8014526:	4630      	mov	r0, r6
 8014528:	2701      	movs	r7, #1
 801452a:	e003      	b.n	8014534 <uxr_compute_acknack+0x1c>
 801452c:	4567      	cmp	r7, ip
 801452e:	d215      	bcs.n	801455c <uxr_compute_acknack+0x44>
 8014530:	89a0      	ldrh	r0, [r4, #12]
 8014532:	3701      	adds	r7, #1
 8014534:	b2b9      	uxth	r1, r7
 8014536:	f000 fb8b 	bl	8014c50 <uxr_seq_num_add>
 801453a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801453e:	fbb0 f2fc 	udiv	r2, r0, ip
 8014542:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014546:	fb0c 0212 	mls	r2, ip, r2, r0
 801454a:	b292      	uxth	r2, r2
 801454c:	fbb3 f3fc 	udiv	r3, r3, ip
 8014550:	fb02 1303 	mla	r3, r2, r3, r1
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d1e8      	bne.n	801452c <uxr_compute_acknack+0x14>
 801455a:	4606      	mov	r6, r0
 801455c:	802e      	strh	r6, [r5, #0]
 801455e:	4630      	mov	r0, r6
 8014560:	2101      	movs	r1, #1
 8014562:	89e6      	ldrh	r6, [r4, #14]
 8014564:	f000 fb78 	bl	8014c58 <uxr_seq_num_sub>
 8014568:	4601      	mov	r1, r0
 801456a:	4630      	mov	r0, r6
 801456c:	f000 fb74 	bl	8014c58 <uxr_seq_num_sub>
 8014570:	4606      	mov	r6, r0
 8014572:	b318      	cbz	r0, 80145bc <uxr_compute_acknack+0xa4>
 8014574:	f04f 0900 	mov.w	r9, #0
 8014578:	464f      	mov	r7, r9
 801457a:	f04f 0801 	mov.w	r8, #1
 801457e:	fa1f f189 	uxth.w	r1, r9
 8014582:	8828      	ldrh	r0, [r5, #0]
 8014584:	f000 fb64 	bl	8014c50 <uxr_seq_num_add>
 8014588:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801458c:	6822      	ldr	r2, [r4, #0]
 801458e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014592:	fb01 011c 	mls	r1, r1, ip, r0
 8014596:	b289      	uxth	r1, r1
 8014598:	6863      	ldr	r3, [r4, #4]
 801459a:	fbb3 f3fc 	udiv	r3, r3, ip
 801459e:	fb01 2303 	mla	r3, r1, r3, r2
 80145a2:	fa08 f209 	lsl.w	r2, r8, r9
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	f109 0901 	add.w	r9, r9, #1
 80145ac:	b90b      	cbnz	r3, 80145b2 <uxr_compute_acknack+0x9a>
 80145ae:	4317      	orrs	r7, r2
 80145b0:	b2bf      	uxth	r7, r7
 80145b2:	454e      	cmp	r6, r9
 80145b4:	d1e3      	bne.n	801457e <uxr_compute_acknack+0x66>
 80145b6:	4638      	mov	r0, r7
 80145b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145bc:	4607      	mov	r7, r0
 80145be:	4638      	mov	r0, r7
 80145c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080145c4 <uxr_init_output_best_effort_stream>:
 80145c4:	b410      	push	{r4}
 80145c6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80145ca:	81c4      	strh	r4, [r0, #14]
 80145cc:	e9c0 1300 	strd	r1, r3, [r0]
 80145d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145d4:	7303      	strb	r3, [r0, #12]
 80145d6:	6082      	str	r2, [r0, #8]
 80145d8:	4770      	bx	lr
 80145da:	bf00      	nop

080145dc <uxr_reset_output_best_effort_stream>:
 80145dc:	7b02      	ldrb	r2, [r0, #12]
 80145de:	6042      	str	r2, [r0, #4]
 80145e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80145e4:	81c3      	strh	r3, [r0, #14]
 80145e6:	4770      	bx	lr

080145e8 <uxr_prepare_best_effort_buffer_to_write>:
 80145e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ea:	4604      	mov	r4, r0
 80145ec:	b083      	sub	sp, #12
 80145ee:	6840      	ldr	r0, [r0, #4]
 80145f0:	460d      	mov	r5, r1
 80145f2:	4616      	mov	r6, r2
 80145f4:	f7fb f91c 	bl	800f830 <uxr_submessage_padding>
 80145f8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80145fc:	4410      	add	r0, r2
 80145fe:	1942      	adds	r2, r0, r5
 8014600:	4293      	cmp	r3, r2
 8014602:	bf2c      	ite	cs
 8014604:	2701      	movcs	r7, #1
 8014606:	2700      	movcc	r7, #0
 8014608:	d202      	bcs.n	8014610 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801460a:	4638      	mov	r0, r7
 801460c:	b003      	add	sp, #12
 801460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014610:	9000      	str	r0, [sp, #0]
 8014612:	6821      	ldr	r1, [r4, #0]
 8014614:	4630      	mov	r0, r6
 8014616:	2300      	movs	r3, #0
 8014618:	f7f5 fcf4 	bl	800a004 <ucdr_init_buffer_origin_offset>
 801461c:	6861      	ldr	r1, [r4, #4]
 801461e:	4638      	mov	r0, r7
 8014620:	4429      	add	r1, r5
 8014622:	6061      	str	r1, [r4, #4]
 8014624:	b003      	add	sp, #12
 8014626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014628 <uxr_prepare_best_effort_buffer_to_send>:
 8014628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801462c:	6845      	ldr	r5, [r0, #4]
 801462e:	4604      	mov	r4, r0
 8014630:	7b00      	ldrb	r0, [r0, #12]
 8014632:	4285      	cmp	r5, r0
 8014634:	bf8c      	ite	hi
 8014636:	2701      	movhi	r7, #1
 8014638:	2700      	movls	r7, #0
 801463a:	d802      	bhi.n	8014642 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 801463c:	4638      	mov	r0, r7
 801463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014642:	4688      	mov	r8, r1
 8014644:	89e0      	ldrh	r0, [r4, #14]
 8014646:	2101      	movs	r1, #1
 8014648:	4615      	mov	r5, r2
 801464a:	461e      	mov	r6, r3
 801464c:	f000 fb00 	bl	8014c50 <uxr_seq_num_add>
 8014650:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014654:	81e0      	strh	r0, [r4, #14]
 8014656:	8030      	strh	r0, [r6, #0]
 8014658:	f8c8 2000 	str.w	r2, [r8]
 801465c:	602b      	str	r3, [r5, #0]
 801465e:	7b23      	ldrb	r3, [r4, #12]
 8014660:	6063      	str	r3, [r4, #4]
 8014662:	4638      	mov	r0, r7
 8014664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014668 <on_full_output_buffer>:
 8014668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801466a:	6802      	ldr	r2, [r0, #0]
 801466c:	460d      	mov	r5, r1
 801466e:	6809      	ldr	r1, [r1, #0]
 8014670:	892f      	ldrh	r7, [r5, #8]
 8014672:	686c      	ldr	r4, [r5, #4]
 8014674:	fbb4 f4f7 	udiv	r4, r4, r7
 8014678:	1a53      	subs	r3, r2, r1
 801467a:	fbb3 f3f4 	udiv	r3, r3, r4
 801467e:	3301      	adds	r3, #1
 8014680:	b29b      	uxth	r3, r3
 8014682:	fbb3 f2f7 	udiv	r2, r3, r7
 8014686:	fb07 3312 	mls	r3, r7, r2, r3
 801468a:	b29b      	uxth	r3, r3
 801468c:	fb04 f403 	mul.w	r4, r4, r3
 8014690:	7b2f      	ldrb	r7, [r5, #12]
 8014692:	590a      	ldr	r2, [r1, r4]
 8014694:	6903      	ldr	r3, [r0, #16]
 8014696:	443c      	add	r4, r7
 8014698:	3408      	adds	r4, #8
 801469a:	1bd2      	subs	r2, r2, r7
 801469c:	4606      	mov	r6, r0
 801469e:	4421      	add	r1, r4
 80146a0:	3a04      	subs	r2, #4
 80146a2:	f7f5 fcb9 	bl	800a018 <ucdr_init_buffer_origin>
 80146a6:	4630      	mov	r0, r6
 80146a8:	4902      	ldr	r1, [pc, #8]	@ (80146b4 <on_full_output_buffer+0x4c>)
 80146aa:	462a      	mov	r2, r5
 80146ac:	f7f5 fc92 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 80146b0:	2000      	movs	r0, #0
 80146b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146b4:	08014669 	.word	0x08014669

080146b8 <uxr_init_output_reliable_stream>:
 80146b8:	b430      	push	{r4, r5}
 80146ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80146be:	6001      	str	r1, [r0, #0]
 80146c0:	8103      	strh	r3, [r0, #8]
 80146c2:	6042      	str	r2, [r0, #4]
 80146c4:	7304      	strb	r4, [r0, #12]
 80146c6:	b1b3      	cbz	r3, 80146f6 <uxr_init_output_reliable_stream+0x3e>
 80146c8:	600c      	str	r4, [r1, #0]
 80146ca:	8901      	ldrh	r1, [r0, #8]
 80146cc:	2901      	cmp	r1, #1
 80146ce:	d912      	bls.n	80146f6 <uxr_init_output_reliable_stream+0x3e>
 80146d0:	2201      	movs	r2, #1
 80146d2:	e9d0 5400 	ldrd	r5, r4, [r0]
 80146d6:	fbb2 f3f1 	udiv	r3, r2, r1
 80146da:	fb01 2313 	mls	r3, r1, r3, r2
 80146de:	b29b      	uxth	r3, r3
 80146e0:	fbb4 f1f1 	udiv	r1, r4, r1
 80146e4:	fb03 f301 	mul.w	r3, r3, r1
 80146e8:	7b01      	ldrb	r1, [r0, #12]
 80146ea:	50e9      	str	r1, [r5, r3]
 80146ec:	3201      	adds	r2, #1
 80146ee:	8901      	ldrh	r1, [r0, #8]
 80146f0:	b292      	uxth	r2, r2
 80146f2:	4291      	cmp	r1, r2
 80146f4:	d8ed      	bhi.n	80146d2 <uxr_init_output_reliable_stream+0x1a>
 80146f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80146fe:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014702:	4b05      	ldr	r3, [pc, #20]	@ (8014718 <uxr_init_output_reliable_stream+0x60>)
 8014704:	f8c0 300e 	str.w	r3, [r0, #14]
 8014708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801470c:	2300      	movs	r3, #0
 801470e:	bc30      	pop	{r4, r5}
 8014710:	8242      	strh	r2, [r0, #18]
 8014712:	8403      	strh	r3, [r0, #32]
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop
 8014718:	ffff0000 	.word	0xffff0000

0801471c <uxr_reset_output_reliable_stream>:
 801471c:	8902      	ldrh	r2, [r0, #8]
 801471e:	b430      	push	{r4, r5}
 8014720:	b19a      	cbz	r2, 801474a <uxr_reset_output_reliable_stream+0x2e>
 8014722:	2400      	movs	r4, #0
 8014724:	4621      	mov	r1, r4
 8014726:	fbb1 f3f2 	udiv	r3, r1, r2
 801472a:	fb02 1313 	mls	r3, r2, r3, r1
 801472e:	e9d0 5100 	ldrd	r5, r1, [r0]
 8014732:	b29b      	uxth	r3, r3
 8014734:	fbb1 f2f2 	udiv	r2, r1, r2
 8014738:	fb03 f302 	mul.w	r3, r3, r2
 801473c:	7b02      	ldrb	r2, [r0, #12]
 801473e:	50ea      	str	r2, [r5, r3]
 8014740:	3401      	adds	r4, #1
 8014742:	8902      	ldrh	r2, [r0, #8]
 8014744:	b2a1      	uxth	r1, r4
 8014746:	428a      	cmp	r2, r1
 8014748:	d8ed      	bhi.n	8014726 <uxr_reset_output_reliable_stream+0xa>
 801474a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801474e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014752:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014756:	4b05      	ldr	r3, [pc, #20]	@ (801476c <uxr_reset_output_reliable_stream+0x50>)
 8014758:	f8c0 300e 	str.w	r3, [r0, #14]
 801475c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014760:	2300      	movs	r3, #0
 8014762:	bc30      	pop	{r4, r5}
 8014764:	8242      	strh	r2, [r0, #18]
 8014766:	8403      	strh	r3, [r0, #32]
 8014768:	4770      	bx	lr
 801476a:	bf00      	nop
 801476c:	ffff0000 	.word	0xffff0000

08014770 <uxr_prepare_reliable_buffer_to_write>:
 8014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014774:	4604      	mov	r4, r0
 8014776:	89c6      	ldrh	r6, [r0, #14]
 8014778:	8900      	ldrh	r0, [r0, #8]
 801477a:	f8d4 c000 	ldr.w	ip, [r4]
 801477e:	fbb6 f3f0 	udiv	r3, r6, r0
 8014782:	fb00 6313 	mls	r3, r0, r3, r6
 8014786:	b091      	sub	sp, #68	@ 0x44
 8014788:	b29b      	uxth	r3, r3
 801478a:	6865      	ldr	r5, [r4, #4]
 801478c:	fbb5 f5f0 	udiv	r5, r5, r0
 8014790:	fb05 c303 	mla	r3, r5, r3, ip
 8014794:	9204      	str	r2, [sp, #16]
 8014796:	1d1a      	adds	r2, r3, #4
 8014798:	f8d3 8000 	ldr.w	r8, [r3]
 801479c:	f894 900c 	ldrb.w	r9, [r4, #12]
 80147a0:	9203      	str	r2, [sp, #12]
 80147a2:	468b      	mov	fp, r1
 80147a4:	1f2f      	subs	r7, r5, #4
 80147a6:	2800      	cmp	r0, #0
 80147a8:	f000 814e 	beq.w	8014a48 <uxr_prepare_reliable_buffer_to_write+0x2d8>
 80147ac:	f04f 0e00 	mov.w	lr, #0
 80147b0:	46f2      	mov	sl, lr
 80147b2:	4672      	mov	r2, lr
 80147b4:	fbb2 f3f0 	udiv	r3, r2, r0
 80147b8:	fb00 2313 	mls	r3, r0, r3, r2
 80147bc:	b29b      	uxth	r3, r3
 80147be:	fb05 c303 	mla	r3, r5, r3, ip
 80147c2:	f10e 0e01 	add.w	lr, lr, #1
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	454b      	cmp	r3, r9
 80147ca:	bf08      	it	eq
 80147cc:	f10a 0a01 	addeq.w	sl, sl, #1
 80147d0:	fa1f f28e 	uxth.w	r2, lr
 80147d4:	bf08      	it	eq
 80147d6:	fa1f fa8a 	uxtheq.w	sl, sl
 80147da:	4282      	cmp	r2, r0
 80147dc:	d3ea      	bcc.n	80147b4 <uxr_prepare_reliable_buffer_to_write+0x44>
 80147de:	4640      	mov	r0, r8
 80147e0:	2104      	movs	r1, #4
 80147e2:	f8cd a014 	str.w	sl, [sp, #20]
 80147e6:	f7f5 fc23 	bl	800a030 <ucdr_alignment>
 80147ea:	4480      	add	r8, r0
 80147ec:	eb08 020b 	add.w	r2, r8, fp
 80147f0:	42ba      	cmp	r2, r7
 80147f2:	f240 80cf 	bls.w	8014994 <uxr_prepare_reliable_buffer_to_write+0x224>
 80147f6:	7b22      	ldrb	r2, [r4, #12]
 80147f8:	445a      	add	r2, fp
 80147fa:	42ba      	cmp	r2, r7
 80147fc:	f240 80b7 	bls.w	801496e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8014800:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014804:	33fc      	adds	r3, #252	@ 0xfc
 8014806:	b2ba      	uxth	r2, r7
 8014808:	4413      	add	r3, r2
 801480a:	b29b      	uxth	r3, r3
 801480c:	fb0a f903 	mul.w	r9, sl, r3
 8014810:	45d9      	cmp	r9, fp
 8014812:	9305      	str	r3, [sp, #20]
 8014814:	9306      	str	r3, [sp, #24]
 8014816:	f0c0 80b9 	bcc.w	801498c <uxr_prepare_reliable_buffer_to_write+0x21c>
 801481a:	f108 0304 	add.w	r3, r8, #4
 801481e:	42bb      	cmp	r3, r7
 8014820:	f080 80dd 	bcs.w	80149de <uxr_prepare_reliable_buffer_to_write+0x26e>
 8014824:	f1a2 0904 	sub.w	r9, r2, #4
 8014828:	eba9 0908 	sub.w	r9, r9, r8
 801482c:	9b05      	ldr	r3, [sp, #20]
 801482e:	fa1f f989 	uxth.w	r9, r9
 8014832:	ebab 0b09 	sub.w	fp, fp, r9
 8014836:	fbbb f2f3 	udiv	r2, fp, r3
 801483a:	fb03 b312 	mls	r3, r3, r2, fp
 801483e:	2b00      	cmp	r3, #0
 8014840:	f000 80ca 	beq.w	80149d8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014844:	3201      	adds	r2, #1
 8014846:	b292      	uxth	r2, r2
 8014848:	4611      	mov	r1, r2
 801484a:	9306      	str	r3, [sp, #24]
 801484c:	4551      	cmp	r1, sl
 801484e:	f200 809d 	bhi.w	801498c <uxr_prepare_reliable_buffer_to_write+0x21c>
 8014852:	f10d 0b20 	add.w	fp, sp, #32
 8014856:	2900      	cmp	r1, #0
 8014858:	d042      	beq.n	80148e0 <uxr_prepare_reliable_buffer_to_write+0x170>
 801485a:	f8cd 801c 	str.w	r8, [sp, #28]
 801485e:	f04f 0a00 	mov.w	sl, #0
 8014862:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014866:	9505      	str	r5, [sp, #20]
 8014868:	f10d 0b20 	add.w	fp, sp, #32
 801486c:	460d      	mov	r5, r1
 801486e:	e000      	b.n	8014872 <uxr_prepare_reliable_buffer_to_write+0x102>
 8014870:	46c1      	mov	r9, r8
 8014872:	8920      	ldrh	r0, [r4, #8]
 8014874:	fbb6 f1f0 	udiv	r1, r6, r0
 8014878:	e9d4 3200 	ldrd	r3, r2, [r4]
 801487c:	fb00 6111 	mls	r1, r0, r1, r6
 8014880:	b289      	uxth	r1, r1
 8014882:	fbb2 f2f0 	udiv	r2, r2, r0
 8014886:	fb01 f102 	mul.w	r1, r1, r2
 801488a:	3104      	adds	r1, #4
 801488c:	4419      	add	r1, r3
 801488e:	463a      	mov	r2, r7
 8014890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014894:	9300      	str	r3, [sp, #0]
 8014896:	4658      	mov	r0, fp
 8014898:	2300      	movs	r3, #0
 801489a:	f7f5 fbb3 	bl	800a004 <ucdr_init_buffer_origin_offset>
 801489e:	464a      	mov	r2, r9
 80148a0:	2300      	movs	r3, #0
 80148a2:	210d      	movs	r1, #13
 80148a4:	4658      	mov	r0, fp
 80148a6:	f7fa ff83 	bl	800f7b0 <uxr_buffer_submessage_header>
 80148aa:	8920      	ldrh	r0, [r4, #8]
 80148ac:	fbb6 f3f0 	udiv	r3, r6, r0
 80148b0:	e9d4 2100 	ldrd	r2, r1, [r4]
 80148b4:	fb00 6313 	mls	r3, r0, r3, r6
 80148b8:	b29b      	uxth	r3, r3
 80148ba:	fbb1 f1f0 	udiv	r1, r1, r0
 80148be:	fb03 f301 	mul.w	r3, r3, r1
 80148c2:	4630      	mov	r0, r6
 80148c4:	50d7      	str	r7, [r2, r3]
 80148c6:	2101      	movs	r1, #1
 80148c8:	f000 f9c2 	bl	8014c50 <uxr_seq_num_add>
 80148cc:	f10a 0a01 	add.w	sl, sl, #1
 80148d0:	fa1f f38a 	uxth.w	r3, sl
 80148d4:	429d      	cmp	r5, r3
 80148d6:	4606      	mov	r6, r0
 80148d8:	d8ca      	bhi.n	8014870 <uxr_prepare_reliable_buffer_to_write+0x100>
 80148da:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80148de:	9d05      	ldr	r5, [sp, #20]
 80148e0:	8921      	ldrh	r1, [r4, #8]
 80148e2:	fbb6 f3f1 	udiv	r3, r6, r1
 80148e6:	fb01 6313 	mls	r3, r1, r3, r6
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	6862      	ldr	r2, [r4, #4]
 80148ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80148f2:	6821      	ldr	r1, [r4, #0]
 80148f4:	fb03 f302 	mul.w	r3, r3, r2
 80148f8:	3304      	adds	r3, #4
 80148fa:	4419      	add	r1, r3
 80148fc:	463a      	mov	r2, r7
 80148fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014902:	9300      	str	r3, [sp, #0]
 8014904:	4658      	mov	r0, fp
 8014906:	2300      	movs	r3, #0
 8014908:	f7f5 fb7c 	bl	800a004 <ucdr_init_buffer_origin_offset>
 801490c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014910:	4658      	mov	r0, fp
 8014912:	fa1f f289 	uxth.w	r2, r9
 8014916:	2302      	movs	r3, #2
 8014918:	210d      	movs	r1, #13
 801491a:	f7fa ff49 	bl	800f7b0 <uxr_buffer_submessage_header>
 801491e:	8921      	ldrh	r1, [r4, #8]
 8014920:	7b27      	ldrb	r7, [r4, #12]
 8014922:	fbb6 f0f1 	udiv	r0, r6, r1
 8014926:	e9d4 3200 	ldrd	r3, r2, [r4]
 801492a:	fb01 6010 	mls	r0, r1, r0, r6
 801492e:	b280      	uxth	r0, r0
 8014930:	fbb2 f2f1 	udiv	r2, r2, r1
 8014934:	3704      	adds	r7, #4
 8014936:	fb00 f002 	mul.w	r0, r0, r2
 801493a:	f1a5 0208 	sub.w	r2, r5, #8
 801493e:	464d      	mov	r5, r9
 8014940:	443d      	add	r5, r7
 8014942:	9f03      	ldr	r7, [sp, #12]
 8014944:	501d      	str	r5, [r3, r0]
 8014946:	f108 0104 	add.w	r1, r8, #4
 801494a:	9d04      	ldr	r5, [sp, #16]
 801494c:	440f      	add	r7, r1
 801494e:	eba2 0208 	sub.w	r2, r2, r8
 8014952:	4639      	mov	r1, r7
 8014954:	4628      	mov	r0, r5
 8014956:	f7f5 fb67 	bl	800a028 <ucdr_init_buffer>
 801495a:	4628      	mov	r0, r5
 801495c:	493b      	ldr	r1, [pc, #236]	@ (8014a4c <uxr_prepare_reliable_buffer_to_write+0x2dc>)
 801495e:	4622      	mov	r2, r4
 8014960:	f7f5 fb38 	bl	8009fd4 <ucdr_set_on_full_buffer_callback>
 8014964:	2001      	movs	r0, #1
 8014966:	81e6      	strh	r6, [r4, #14]
 8014968:	b011      	add	sp, #68	@ 0x44
 801496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496e:	2101      	movs	r1, #1
 8014970:	89e0      	ldrh	r0, [r4, #14]
 8014972:	f000 f96d 	bl	8014c50 <uxr_seq_num_add>
 8014976:	8921      	ldrh	r1, [r4, #8]
 8014978:	4605      	mov	r5, r0
 801497a:	8a60      	ldrh	r0, [r4, #18]
 801497c:	f000 f968 	bl	8014c50 <uxr_seq_num_add>
 8014980:	4601      	mov	r1, r0
 8014982:	4628      	mov	r0, r5
 8014984:	f000 f96c 	bl	8014c60 <uxr_seq_num_cmp>
 8014988:	2800      	cmp	r0, #0
 801498a:	dd42      	ble.n	8014a12 <uxr_prepare_reliable_buffer_to_write+0x2a2>
 801498c:	2000      	movs	r0, #0
 801498e:	b011      	add	sp, #68	@ 0x44
 8014990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014994:	8921      	ldrh	r1, [r4, #8]
 8014996:	8a60      	ldrh	r0, [r4, #18]
 8014998:	9205      	str	r2, [sp, #20]
 801499a:	f000 f959 	bl	8014c50 <uxr_seq_num_add>
 801499e:	4601      	mov	r1, r0
 80149a0:	4630      	mov	r0, r6
 80149a2:	f000 f95d 	bl	8014c60 <uxr_seq_num_cmp>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	9a05      	ldr	r2, [sp, #20]
 80149aa:	dcef      	bgt.n	801498c <uxr_prepare_reliable_buffer_to_write+0x21c>
 80149ac:	8920      	ldrh	r0, [r4, #8]
 80149ae:	fbb6 f3f0 	udiv	r3, r6, r0
 80149b2:	e9d4 4100 	ldrd	r4, r1, [r4]
 80149b6:	fb00 6313 	mls	r3, r0, r3, r6
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	fbb1 f1f0 	udiv	r1, r1, r0
 80149c0:	fb03 f301 	mul.w	r3, r3, r1
 80149c4:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80149c8:	50e2      	str	r2, [r4, r3]
 80149ca:	f8cd 8000 	str.w	r8, [sp]
 80149ce:	2300      	movs	r3, #0
 80149d0:	f7f5 fb18 	bl	800a004 <ucdr_init_buffer_origin_offset>
 80149d4:	2001      	movs	r0, #1
 80149d6:	e7da      	b.n	801498e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80149d8:	b293      	uxth	r3, r2
 80149da:	4619      	mov	r1, r3
 80149dc:	e736      	b.n	801484c <uxr_prepare_reliable_buffer_to_write+0xdc>
 80149de:	4630      	mov	r0, r6
 80149e0:	2101      	movs	r1, #1
 80149e2:	9207      	str	r2, [sp, #28]
 80149e4:	f000 f934 	bl	8014c50 <uxr_seq_num_add>
 80149e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80149ec:	fbb0 f1fc 	udiv	r1, r0, ip
 80149f0:	fb0c 0111 	mls	r1, ip, r1, r0
 80149f4:	b289      	uxth	r1, r1
 80149f6:	6863      	ldr	r3, [r4, #4]
 80149f8:	fbb3 f3fc 	udiv	r3, r3, ip
 80149fc:	fb01 f103 	mul.w	r1, r1, r3
 8014a00:	6823      	ldr	r3, [r4, #0]
 8014a02:	9a07      	ldr	r2, [sp, #28]
 8014a04:	3104      	adds	r1, #4
 8014a06:	440b      	add	r3, r1
 8014a08:	4606      	mov	r6, r0
 8014a0a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014a0e:	9303      	str	r3, [sp, #12]
 8014a10:	e708      	b.n	8014824 <uxr_prepare_reliable_buffer_to_write+0xb4>
 8014a12:	8920      	ldrh	r0, [r4, #8]
 8014a14:	fbb5 f3f0 	udiv	r3, r5, r0
 8014a18:	fb00 5313 	mls	r3, r0, r3, r5
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	6862      	ldr	r2, [r4, #4]
 8014a20:	6821      	ldr	r1, [r4, #0]
 8014a22:	fbb2 f0f0 	udiv	r0, r2, r0
 8014a26:	fb03 f300 	mul.w	r3, r3, r0
 8014a2a:	7b22      	ldrb	r2, [r4, #12]
 8014a2c:	9804      	ldr	r0, [sp, #16]
 8014a2e:	3304      	adds	r3, #4
 8014a30:	4419      	add	r1, r3
 8014a32:	445a      	add	r2, fp
 8014a34:	f841 2c04 	str.w	r2, [r1, #-4]
 8014a38:	7b23      	ldrb	r3, [r4, #12]
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	f7f5 fae1 	bl	800a004 <ucdr_init_buffer_origin_offset>
 8014a42:	81e5      	strh	r5, [r4, #14]
 8014a44:	2001      	movs	r0, #1
 8014a46:	e7a2      	b.n	801498e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014a48:	4682      	mov	sl, r0
 8014a4a:	e6c8      	b.n	80147de <uxr_prepare_reliable_buffer_to_write+0x6e>
 8014a4c:	08014669 	.word	0x08014669

08014a50 <uxr_prepare_next_reliable_buffer_to_send>:
 8014a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a54:	4605      	mov	r5, r0
 8014a56:	4688      	mov	r8, r1
 8014a58:	8a00      	ldrh	r0, [r0, #16]
 8014a5a:	2101      	movs	r1, #1
 8014a5c:	4617      	mov	r7, r2
 8014a5e:	461e      	mov	r6, r3
 8014a60:	f000 f8f6 	bl	8014c50 <uxr_seq_num_add>
 8014a64:	8030      	strh	r0, [r6, #0]
 8014a66:	892a      	ldrh	r2, [r5, #8]
 8014a68:	fbb0 f3f2 	udiv	r3, r0, r2
 8014a6c:	fb02 0413 	mls	r4, r2, r3, r0
 8014a70:	b2a4      	uxth	r4, r4
 8014a72:	686b      	ldr	r3, [r5, #4]
 8014a74:	fbb3 f2f2 	udiv	r2, r3, r2
 8014a78:	682b      	ldr	r3, [r5, #0]
 8014a7a:	89e9      	ldrh	r1, [r5, #14]
 8014a7c:	fb04 f402 	mul.w	r4, r4, r2
 8014a80:	3404      	adds	r4, #4
 8014a82:	4423      	add	r3, r4
 8014a84:	f8c8 3000 	str.w	r3, [r8]
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	441c      	add	r4, r3
 8014a8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014a90:	603b      	str	r3, [r7, #0]
 8014a92:	f000 f8e5 	bl	8014c60 <uxr_seq_num_cmp>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	dd02      	ble.n	8014aa0 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8014a9a:	2000      	movs	r0, #0
 8014a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aa0:	683a      	ldr	r2, [r7, #0]
 8014aa2:	7b2b      	ldrb	r3, [r5, #12]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d9f8      	bls.n	8014a9a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014aa8:	8a69      	ldrh	r1, [r5, #18]
 8014aaa:	8a28      	ldrh	r0, [r5, #16]
 8014aac:	f000 f8d4 	bl	8014c58 <uxr_seq_num_sub>
 8014ab0:	892b      	ldrh	r3, [r5, #8]
 8014ab2:	4283      	cmp	r3, r0
 8014ab4:	d0f1      	beq.n	8014a9a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014ab6:	8830      	ldrh	r0, [r6, #0]
 8014ab8:	89eb      	ldrh	r3, [r5, #14]
 8014aba:	8228      	strh	r0, [r5, #16]
 8014abc:	4298      	cmp	r0, r3
 8014abe:	d002      	beq.n	8014ac6 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8014ac0:	2001      	movs	r0, #1
 8014ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac6:	2101      	movs	r1, #1
 8014ac8:	f000 f8c2 	bl	8014c50 <uxr_seq_num_add>
 8014acc:	81e8      	strh	r0, [r5, #14]
 8014ace:	2001      	movs	r0, #1
 8014ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ad4 <uxr_update_output_stream_heartbeat_timestamp>:
 8014ad4:	b5d0      	push	{r4, r6, r7, lr}
 8014ad6:	8a01      	ldrh	r1, [r0, #16]
 8014ad8:	4604      	mov	r4, r0
 8014ada:	8a40      	ldrh	r0, [r0, #18]
 8014adc:	4616      	mov	r6, r2
 8014ade:	461f      	mov	r7, r3
 8014ae0:	f000 f8be 	bl	8014c60 <uxr_seq_num_cmp>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	db07      	blt.n	8014af8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014ae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014aec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014af0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014af4:	2000      	movs	r0, #0
 8014af6:	bdd0      	pop	{r4, r6, r7, pc}
 8014af8:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014afc:	b948      	cbnz	r0, 8014b12 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8014afe:	2301      	movs	r3, #1
 8014b00:	f884 3020 	strb.w	r3, [r4, #32]
 8014b04:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 8014b08:	f147 0200 	adc.w	r2, r7, #0
 8014b0c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8014b10:	bdd0      	pop	{r4, r6, r7, pc}
 8014b12:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014b16:	4296      	cmp	r6, r2
 8014b18:	eb77 0303 	sbcs.w	r3, r7, r3
 8014b1c:	bfa5      	ittet	ge
 8014b1e:	3001      	addge	r0, #1
 8014b20:	f884 0020 	strbge.w	r0, [r4, #32]
 8014b24:	2000      	movlt	r0, #0
 8014b26:	2001      	movge	r0, #1
 8014b28:	e7ec      	b.n	8014b04 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014b2a:	bf00      	nop

08014b2c <uxr_begin_output_nack_buffer_it>:
 8014b2c:	8a40      	ldrh	r0, [r0, #18]
 8014b2e:	4770      	bx	lr

08014b30 <uxr_next_reliable_nack_buffer_to_send>:
 8014b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b34:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 8014b38:	f1b9 0f00 	cmp.w	r9, #0
 8014b3c:	d011      	beq.n	8014b62 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8014b3e:	4605      	mov	r5, r0
 8014b40:	8818      	ldrh	r0, [r3, #0]
 8014b42:	460f      	mov	r7, r1
 8014b44:	4690      	mov	r8, r2
 8014b46:	461e      	mov	r6, r3
 8014b48:	2101      	movs	r1, #1
 8014b4a:	f000 f881 	bl	8014c50 <uxr_seq_num_add>
 8014b4e:	8030      	strh	r0, [r6, #0]
 8014b50:	8a29      	ldrh	r1, [r5, #16]
 8014b52:	f000 f885 	bl	8014c60 <uxr_seq_num_cmp>
 8014b56:	2800      	cmp	r0, #0
 8014b58:	dd06      	ble.n	8014b68 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8014b5a:	f04f 0900 	mov.w	r9, #0
 8014b5e:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 8014b62:	4648      	mov	r0, r9
 8014b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b68:	892a      	ldrh	r2, [r5, #8]
 8014b6a:	8830      	ldrh	r0, [r6, #0]
 8014b6c:	fbb0 f4f2 	udiv	r4, r0, r2
 8014b70:	fb02 0414 	mls	r4, r2, r4, r0
 8014b74:	b2a4      	uxth	r4, r4
 8014b76:	686b      	ldr	r3, [r5, #4]
 8014b78:	fbb3 f2f2 	udiv	r2, r3, r2
 8014b7c:	682b      	ldr	r3, [r5, #0]
 8014b7e:	fb04 f402 	mul.w	r4, r4, r2
 8014b82:	3404      	adds	r4, #4
 8014b84:	4423      	add	r3, r4
 8014b86:	603b      	str	r3, [r7, #0]
 8014b88:	682b      	ldr	r3, [r5, #0]
 8014b8a:	441c      	add	r4, r3
 8014b8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014b90:	f8c8 3000 	str.w	r3, [r8]
 8014b94:	7b2a      	ldrb	r2, [r5, #12]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d0d6      	beq.n	8014b48 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8014b9a:	4648      	mov	r0, r9
 8014b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014ba0 <uxr_process_acknack>:
 8014ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	460e      	mov	r6, r1
 8014ba6:	4610      	mov	r0, r2
 8014ba8:	2101      	movs	r1, #1
 8014baa:	f000 f855 	bl	8014c58 <uxr_seq_num_sub>
 8014bae:	8a61      	ldrh	r1, [r4, #18]
 8014bb0:	f000 f852 	bl	8014c58 <uxr_seq_num_sub>
 8014bb4:	b1c0      	cbz	r0, 8014be8 <uxr_process_acknack+0x48>
 8014bb6:	4605      	mov	r5, r0
 8014bb8:	2700      	movs	r7, #0
 8014bba:	2101      	movs	r1, #1
 8014bbc:	8a60      	ldrh	r0, [r4, #18]
 8014bbe:	f000 f847 	bl	8014c50 <uxr_seq_num_add>
 8014bc2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014bc6:	fbb0 f3fc 	udiv	r3, r0, ip
 8014bca:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014bce:	fb0c 0313 	mls	r3, ip, r3, r0
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	fbb1 f1fc 	udiv	r1, r1, ip
 8014bd8:	3701      	adds	r7, #1
 8014bda:	fb03 f301 	mul.w	r3, r3, r1
 8014bde:	42bd      	cmp	r5, r7
 8014be0:	7b21      	ldrb	r1, [r4, #12]
 8014be2:	8260      	strh	r0, [r4, #18]
 8014be4:	50d1      	str	r1, [r2, r3]
 8014be6:	d1e8      	bne.n	8014bba <uxr_process_acknack+0x1a>
 8014be8:	3e00      	subs	r6, #0
 8014bea:	f04f 0300 	mov.w	r3, #0
 8014bee:	bf18      	it	ne
 8014bf0:	2601      	movne	r6, #1
 8014bf2:	f884 3020 	strb.w	r3, [r4, #32]
 8014bf6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8014bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014bfc <uxr_is_output_up_to_date>:
 8014bfc:	8a01      	ldrh	r1, [r0, #16]
 8014bfe:	8a40      	ldrh	r0, [r0, #18]
 8014c00:	b508      	push	{r3, lr}
 8014c02:	f000 f82d 	bl	8014c60 <uxr_seq_num_cmp>
 8014c06:	fab0 f080 	clz	r0, r0
 8014c0a:	0940      	lsrs	r0, r0, #5
 8014c0c:	bd08      	pop	{r3, pc}
 8014c0e:	bf00      	nop

08014c10 <get_available_free_slots>:
 8014c10:	8901      	ldrh	r1, [r0, #8]
 8014c12:	b1d9      	cbz	r1, 8014c4c <get_available_free_slots+0x3c>
 8014c14:	b4f0      	push	{r4, r5, r6, r7}
 8014c16:	2400      	movs	r4, #0
 8014c18:	6845      	ldr	r5, [r0, #4]
 8014c1a:	6807      	ldr	r7, [r0, #0]
 8014c1c:	7b06      	ldrb	r6, [r0, #12]
 8014c1e:	fbb5 f5f1 	udiv	r5, r5, r1
 8014c22:	4620      	mov	r0, r4
 8014c24:	4622      	mov	r2, r4
 8014c26:	fbb2 f3f1 	udiv	r3, r2, r1
 8014c2a:	fb01 2313 	mls	r3, r1, r3, r2
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	fb05 7303 	mla	r3, r5, r3, r7
 8014c34:	3401      	adds	r4, #1
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	429e      	cmp	r6, r3
 8014c3a:	bf08      	it	eq
 8014c3c:	3001      	addeq	r0, #1
 8014c3e:	b2a2      	uxth	r2, r4
 8014c40:	bf08      	it	eq
 8014c42:	b280      	uxtheq	r0, r0
 8014c44:	428a      	cmp	r2, r1
 8014c46:	d3ee      	bcc.n	8014c26 <get_available_free_slots+0x16>
 8014c48:	bcf0      	pop	{r4, r5, r6, r7}
 8014c4a:	4770      	bx	lr
 8014c4c:	4608      	mov	r0, r1
 8014c4e:	4770      	bx	lr

08014c50 <uxr_seq_num_add>:
 8014c50:	4408      	add	r0, r1
 8014c52:	b280      	uxth	r0, r0
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop

08014c58 <uxr_seq_num_sub>:
 8014c58:	1a40      	subs	r0, r0, r1
 8014c5a:	b280      	uxth	r0, r0
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop

08014c60 <uxr_seq_num_cmp>:
 8014c60:	4288      	cmp	r0, r1
 8014c62:	d011      	beq.n	8014c88 <uxr_seq_num_cmp+0x28>
 8014c64:	d309      	bcc.n	8014c7a <uxr_seq_num_cmp+0x1a>
 8014c66:	4288      	cmp	r0, r1
 8014c68:	d910      	bls.n	8014c8c <uxr_seq_num_cmp+0x2c>
 8014c6a:	1a40      	subs	r0, r0, r1
 8014c6c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014c70:	bfd4      	ite	le
 8014c72:	2001      	movle	r0, #1
 8014c74:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014c78:	4770      	bx	lr
 8014c7a:	1a0b      	subs	r3, r1, r0
 8014c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014c80:	daf1      	bge.n	8014c66 <uxr_seq_num_cmp+0x6>
 8014c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c86:	4770      	bx	lr
 8014c88:	2000      	movs	r0, #0
 8014c8a:	4770      	bx	lr
 8014c8c:	2001      	movs	r0, #1
 8014c8e:	4770      	bx	lr

08014c90 <rcl_get_default_domain_id>:
 8014c90:	b530      	push	{r4, r5, lr}
 8014c92:	b083      	sub	sp, #12
 8014c94:	2300      	movs	r3, #0
 8014c96:	9300      	str	r3, [sp, #0]
 8014c98:	b1d0      	cbz	r0, 8014cd0 <rcl_get_default_domain_id+0x40>
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	4669      	mov	r1, sp
 8014c9e:	4815      	ldr	r0, [pc, #84]	@ (8014cf4 <rcl_get_default_domain_id+0x64>)
 8014ca0:	f7fe fa4a 	bl	8013138 <rcutils_get_env>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	b110      	cbz	r0, 8014cae <rcl_get_default_domain_id+0x1e>
 8014ca8:	2001      	movs	r0, #1
 8014caa:	b003      	add	sp, #12
 8014cac:	bd30      	pop	{r4, r5, pc}
 8014cae:	9b00      	ldr	r3, [sp, #0]
 8014cb0:	b18b      	cbz	r3, 8014cd6 <rcl_get_default_domain_id+0x46>
 8014cb2:	7818      	ldrb	r0, [r3, #0]
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	d0f8      	beq.n	8014caa <rcl_get_default_domain_id+0x1a>
 8014cb8:	4618      	mov	r0, r3
 8014cba:	a901      	add	r1, sp, #4
 8014cbc:	9201      	str	r2, [sp, #4]
 8014cbe:	f000 fb97 	bl	80153f0 <strtoul>
 8014cc2:	4605      	mov	r5, r0
 8014cc4:	b150      	cbz	r0, 8014cdc <rcl_get_default_domain_id+0x4c>
 8014cc6:	1c43      	adds	r3, r0, #1
 8014cc8:	d00d      	beq.n	8014ce6 <rcl_get_default_domain_id+0x56>
 8014cca:	6025      	str	r5, [r4, #0]
 8014ccc:	2000      	movs	r0, #0
 8014cce:	e7ec      	b.n	8014caa <rcl_get_default_domain_id+0x1a>
 8014cd0:	200b      	movs	r0, #11
 8014cd2:	b003      	add	sp, #12
 8014cd4:	bd30      	pop	{r4, r5, pc}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	b003      	add	sp, #12
 8014cda:	bd30      	pop	{r4, r5, pc}
 8014cdc:	9b01      	ldr	r3, [sp, #4]
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d0f2      	beq.n	8014cca <rcl_get_default_domain_id+0x3a>
 8014ce4:	e7e0      	b.n	8014ca8 <rcl_get_default_domain_id+0x18>
 8014ce6:	f000 fe15 	bl	8015914 <__errno>
 8014cea:	6803      	ldr	r3, [r0, #0]
 8014cec:	2b22      	cmp	r3, #34	@ 0x22
 8014cee:	d1ec      	bne.n	8014cca <rcl_get_default_domain_id+0x3a>
 8014cf0:	e7da      	b.n	8014ca8 <rcl_get_default_domain_id+0x18>
 8014cf2:	bf00      	nop
 8014cf4:	08017260 	.word	0x08017260

08014cf8 <rcl_get_zero_initialized_guard_condition>:
 8014cf8:	4a03      	ldr	r2, [pc, #12]	@ (8014d08 <rcl_get_zero_initialized_guard_condition+0x10>)
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d00:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d04:	4618      	mov	r0, r3
 8014d06:	4770      	bx	lr
 8014d08:	08017270 	.word	0x08017270

08014d0c <rcl_guard_condition_init>:
 8014d0c:	b082      	sub	sp, #8
 8014d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d10:	b087      	sub	sp, #28
 8014d12:	ac0c      	add	r4, sp, #48	@ 0x30
 8014d14:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d18:	4625      	mov	r5, r4
 8014d1a:	4607      	mov	r7, r0
 8014d1c:	460e      	mov	r6, r1
 8014d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d20:	ac01      	add	r4, sp, #4
 8014d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d24:	682b      	ldr	r3, [r5, #0]
 8014d26:	6023      	str	r3, [r4, #0]
 8014d28:	a801      	add	r0, sp, #4
 8014d2a:	f7f6 fac7 	bl	800b2bc <rcutils_allocator_is_valid>
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d034      	beq.n	8014d9c <rcl_guard_condition_init+0x90>
 8014d32:	463c      	mov	r4, r7
 8014d34:	2f00      	cmp	r7, #0
 8014d36:	d031      	beq.n	8014d9c <rcl_guard_condition_init+0x90>
 8014d38:	4635      	mov	r5, r6
 8014d3a:	687e      	ldr	r6, [r7, #4]
 8014d3c:	bb46      	cbnz	r6, 8014d90 <rcl_guard_condition_init+0x84>
 8014d3e:	2d00      	cmp	r5, #0
 8014d40:	d02c      	beq.n	8014d9c <rcl_guard_condition_init+0x90>
 8014d42:	4628      	mov	r0, r5
 8014d44:	f7fc f812 	bl	8010d6c <rcl_context_is_valid>
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d02d      	beq.n	8014da8 <rcl_guard_condition_init+0x9c>
 8014d4c:	9b01      	ldr	r3, [sp, #4]
 8014d4e:	9905      	ldr	r1, [sp, #20]
 8014d50:	201c      	movs	r0, #28
 8014d52:	4798      	blx	r3
 8014d54:	4607      	mov	r7, r0
 8014d56:	6060      	str	r0, [r4, #4]
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	d02e      	beq.n	8014dba <rcl_guard_condition_init+0xae>
 8014d5c:	6828      	ldr	r0, [r5, #0]
 8014d5e:	3028      	adds	r0, #40	@ 0x28
 8014d60:	f000 f8dc 	bl	8014f1c <rmw_create_guard_condition>
 8014d64:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8014d68:	6038      	str	r0, [r7, #0]
 8014d6a:	f8dc 5000 	ldr.w	r5, [ip]
 8014d6e:	b1ed      	cbz	r5, 8014dac <rcl_guard_condition_init+0xa0>
 8014d70:	ac01      	add	r4, sp, #4
 8014d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d74:	2701      	movs	r7, #1
 8014d76:	f10c 0508 	add.w	r5, ip, #8
 8014d7a:	f88c 7004 	strb.w	r7, [ip, #4]
 8014d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d80:	6823      	ldr	r3, [r4, #0]
 8014d82:	602b      	str	r3, [r5, #0]
 8014d84:	4630      	mov	r0, r6
 8014d86:	b007      	add	sp, #28
 8014d88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d8c:	b002      	add	sp, #8
 8014d8e:	4770      	bx	lr
 8014d90:	2064      	movs	r0, #100	@ 0x64
 8014d92:	b007      	add	sp, #28
 8014d94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d98:	b002      	add	sp, #8
 8014d9a:	4770      	bx	lr
 8014d9c:	200b      	movs	r0, #11
 8014d9e:	b007      	add	sp, #28
 8014da0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014da4:	b002      	add	sp, #8
 8014da6:	4770      	bx	lr
 8014da8:	2065      	movs	r0, #101	@ 0x65
 8014daa:	e7f2      	b.n	8014d92 <rcl_guard_condition_init+0x86>
 8014dac:	4660      	mov	r0, ip
 8014dae:	9b02      	ldr	r3, [sp, #8]
 8014db0:	9905      	ldr	r1, [sp, #20]
 8014db2:	4798      	blx	r3
 8014db4:	6065      	str	r5, [r4, #4]
 8014db6:	2001      	movs	r0, #1
 8014db8:	e7eb      	b.n	8014d92 <rcl_guard_condition_init+0x86>
 8014dba:	200a      	movs	r0, #10
 8014dbc:	e7e9      	b.n	8014d92 <rcl_guard_condition_init+0x86>
 8014dbe:	bf00      	nop

08014dc0 <rcl_guard_condition_init_from_rmw>:
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc6:	b086      	sub	sp, #24
 8014dc8:	ac0c      	add	r4, sp, #48	@ 0x30
 8014dca:	4684      	mov	ip, r0
 8014dcc:	f844 3f04 	str.w	r3, [r4, #4]!
 8014dd0:	460f      	mov	r7, r1
 8014dd2:	4690      	mov	r8, r2
 8014dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dd6:	ad01      	add	r5, sp, #4
 8014dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	602b      	str	r3, [r5, #0]
 8014dde:	a801      	add	r0, sp, #4
 8014de0:	4664      	mov	r4, ip
 8014de2:	f7f6 fa6b 	bl	800b2bc <rcutils_allocator_is_valid>
 8014de6:	b328      	cbz	r0, 8014e34 <rcl_guard_condition_init_from_rmw+0x74>
 8014de8:	b324      	cbz	r4, 8014e34 <rcl_guard_condition_init_from_rmw+0x74>
 8014dea:	6866      	ldr	r6, [r4, #4]
 8014dec:	b9e6      	cbnz	r6, 8014e28 <rcl_guard_condition_init_from_rmw+0x68>
 8014dee:	f1b8 0f00 	cmp.w	r8, #0
 8014df2:	d01f      	beq.n	8014e34 <rcl_guard_condition_init_from_rmw+0x74>
 8014df4:	4640      	mov	r0, r8
 8014df6:	f7fb ffb9 	bl	8010d6c <rcl_context_is_valid>
 8014dfa:	b308      	cbz	r0, 8014e40 <rcl_guard_condition_init_from_rmw+0x80>
 8014dfc:	9b01      	ldr	r3, [sp, #4]
 8014dfe:	9905      	ldr	r1, [sp, #20]
 8014e00:	201c      	movs	r0, #28
 8014e02:	4798      	blx	r3
 8014e04:	4605      	mov	r5, r0
 8014e06:	6060      	str	r0, [r4, #4]
 8014e08:	b340      	cbz	r0, 8014e5c <rcl_guard_condition_init_from_rmw+0x9c>
 8014e0a:	b1df      	cbz	r7, 8014e44 <rcl_guard_condition_init_from_rmw+0x84>
 8014e0c:	6007      	str	r7, [r0, #0]
 8014e0e:	7106      	strb	r6, [r0, #4]
 8014e10:	ac01      	add	r4, sp, #4
 8014e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e14:	3508      	adds	r5, #8
 8014e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014e18:	6823      	ldr	r3, [r4, #0]
 8014e1a:	602b      	str	r3, [r5, #0]
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	b006      	add	sp, #24
 8014e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e24:	b002      	add	sp, #8
 8014e26:	4770      	bx	lr
 8014e28:	2064      	movs	r0, #100	@ 0x64
 8014e2a:	b006      	add	sp, #24
 8014e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e30:	b002      	add	sp, #8
 8014e32:	4770      	bx	lr
 8014e34:	200b      	movs	r0, #11
 8014e36:	b006      	add	sp, #24
 8014e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e3c:	b002      	add	sp, #8
 8014e3e:	4770      	bx	lr
 8014e40:	2065      	movs	r0, #101	@ 0x65
 8014e42:	e7f2      	b.n	8014e2a <rcl_guard_condition_init_from_rmw+0x6a>
 8014e44:	f8d8 0000 	ldr.w	r0, [r8]
 8014e48:	3028      	adds	r0, #40	@ 0x28
 8014e4a:	f000 f867 	bl	8014f1c <rmw_create_guard_condition>
 8014e4e:	6028      	str	r0, [r5, #0]
 8014e50:	6865      	ldr	r5, [r4, #4]
 8014e52:	682e      	ldr	r6, [r5, #0]
 8014e54:	b126      	cbz	r6, 8014e60 <rcl_guard_condition_init_from_rmw+0xa0>
 8014e56:	2301      	movs	r3, #1
 8014e58:	712b      	strb	r3, [r5, #4]
 8014e5a:	e7d9      	b.n	8014e10 <rcl_guard_condition_init_from_rmw+0x50>
 8014e5c:	200a      	movs	r0, #10
 8014e5e:	e7e4      	b.n	8014e2a <rcl_guard_condition_init_from_rmw+0x6a>
 8014e60:	4628      	mov	r0, r5
 8014e62:	9b02      	ldr	r3, [sp, #8]
 8014e64:	9905      	ldr	r1, [sp, #20]
 8014e66:	4798      	blx	r3
 8014e68:	6066      	str	r6, [r4, #4]
 8014e6a:	2001      	movs	r0, #1
 8014e6c:	e7dd      	b.n	8014e2a <rcl_guard_condition_init_from_rmw+0x6a>
 8014e6e:	bf00      	nop

08014e70 <rcl_guard_condition_fini>:
 8014e70:	b570      	push	{r4, r5, r6, lr}
 8014e72:	b082      	sub	sp, #8
 8014e74:	b1f0      	cbz	r0, 8014eb4 <rcl_guard_condition_fini+0x44>
 8014e76:	4604      	mov	r4, r0
 8014e78:	6840      	ldr	r0, [r0, #4]
 8014e7a:	b158      	cbz	r0, 8014e94 <rcl_guard_condition_fini+0x24>
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	68c6      	ldr	r6, [r0, #12]
 8014e80:	6981      	ldr	r1, [r0, #24]
 8014e82:	b15b      	cbz	r3, 8014e9c <rcl_guard_condition_fini+0x2c>
 8014e84:	7905      	ldrb	r5, [r0, #4]
 8014e86:	b95d      	cbnz	r5, 8014ea0 <rcl_guard_condition_fini+0x30>
 8014e88:	47b0      	blx	r6
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	4628      	mov	r0, r5
 8014e8e:	6063      	str	r3, [r4, #4]
 8014e90:	b002      	add	sp, #8
 8014e92:	bd70      	pop	{r4, r5, r6, pc}
 8014e94:	4605      	mov	r5, r0
 8014e96:	4628      	mov	r0, r5
 8014e98:	b002      	add	sp, #8
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}
 8014e9c:	461d      	mov	r5, r3
 8014e9e:	e7f3      	b.n	8014e88 <rcl_guard_condition_fini+0x18>
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	9101      	str	r1, [sp, #4]
 8014ea4:	f000 f84e 	bl	8014f44 <rmw_destroy_guard_condition>
 8014ea8:	1e05      	subs	r5, r0, #0
 8014eaa:	9901      	ldr	r1, [sp, #4]
 8014eac:	6860      	ldr	r0, [r4, #4]
 8014eae:	bf18      	it	ne
 8014eb0:	2501      	movne	r5, #1
 8014eb2:	e7e9      	b.n	8014e88 <rcl_guard_condition_fini+0x18>
 8014eb4:	250b      	movs	r5, #11
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	b002      	add	sp, #8
 8014eba:	bd70      	pop	{r4, r5, r6, pc}

08014ebc <rcl_guard_condition_get_default_options>:
 8014ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ebe:	b087      	sub	sp, #28
 8014ec0:	4607      	mov	r7, r0
 8014ec2:	466c      	mov	r4, sp
 8014ec4:	4668      	mov	r0, sp
 8014ec6:	f7f6 f9eb 	bl	800b2a0 <rcutils_get_default_allocator>
 8014eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ecc:	4d07      	ldr	r5, [pc, #28]	@ (8014eec <rcl_guard_condition_get_default_options+0x30>)
 8014ece:	f8d4 c000 	ldr.w	ip, [r4]
 8014ed2:	462e      	mov	r6, r5
 8014ed4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014ed6:	462c      	mov	r4, r5
 8014ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014eda:	463c      	mov	r4, r7
 8014edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ede:	4638      	mov	r0, r7
 8014ee0:	f8c6 c000 	str.w	ip, [r6]
 8014ee4:	f8c4 c000 	str.w	ip, [r4]
 8014ee8:	b007      	add	sp, #28
 8014eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eec:	2000dba4 	.word	0x2000dba4

08014ef0 <rcl_trigger_guard_condition>:
 8014ef0:	b148      	cbz	r0, 8014f06 <rcl_trigger_guard_condition+0x16>
 8014ef2:	b508      	push	{r3, lr}
 8014ef4:	6843      	ldr	r3, [r0, #4]
 8014ef6:	b143      	cbz	r3, 8014f0a <rcl_trigger_guard_condition+0x1a>
 8014ef8:	6818      	ldr	r0, [r3, #0]
 8014efa:	f000 f837 	bl	8014f6c <rmw_trigger_guard_condition>
 8014efe:	3800      	subs	r0, #0
 8014f00:	bf18      	it	ne
 8014f02:	2001      	movne	r0, #1
 8014f04:	bd08      	pop	{r3, pc}
 8014f06:	200b      	movs	r0, #11
 8014f08:	4770      	bx	lr
 8014f0a:	200b      	movs	r0, #11
 8014f0c:	bd08      	pop	{r3, pc}
 8014f0e:	bf00      	nop

08014f10 <rcl_guard_condition_get_rmw_handle>:
 8014f10:	b110      	cbz	r0, 8014f18 <rcl_guard_condition_get_rmw_handle+0x8>
 8014f12:	6840      	ldr	r0, [r0, #4]
 8014f14:	b100      	cbz	r0, 8014f18 <rcl_guard_condition_get_rmw_handle+0x8>
 8014f16:	6800      	ldr	r0, [r0, #0]
 8014f18:	4770      	bx	lr
 8014f1a:	bf00      	nop

08014f1c <rmw_create_guard_condition>:
 8014f1c:	b538      	push	{r3, r4, r5, lr}
 8014f1e:	4605      	mov	r5, r0
 8014f20:	4807      	ldr	r0, [pc, #28]	@ (8014f40 <rmw_create_guard_condition+0x24>)
 8014f22:	f7fe fbed 	bl	8013700 <get_memory>
 8014f26:	b148      	cbz	r0, 8014f3c <rmw_create_guard_condition+0x20>
 8014f28:	68c4      	ldr	r4, [r0, #12]
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	61e5      	str	r5, [r4, #28]
 8014f2e:	7423      	strb	r3, [r4, #16]
 8014f30:	f7fe fc4e 	bl	80137d0 <rmw_get_implementation_identifier>
 8014f34:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8014f38:	f104 0014 	add.w	r0, r4, #20
 8014f3c:	bd38      	pop	{r3, r4, r5, pc}
 8014f3e:	bf00      	nop
 8014f40:	20010ec8 	.word	0x20010ec8

08014f44 <rmw_destroy_guard_condition>:
 8014f44:	b508      	push	{r3, lr}
 8014f46:	4b08      	ldr	r3, [pc, #32]	@ (8014f68 <rmw_destroy_guard_condition+0x24>)
 8014f48:	6819      	ldr	r1, [r3, #0]
 8014f4a:	b911      	cbnz	r1, 8014f52 <rmw_destroy_guard_condition+0xe>
 8014f4c:	e00a      	b.n	8014f64 <rmw_destroy_guard_condition+0x20>
 8014f4e:	6889      	ldr	r1, [r1, #8]
 8014f50:	b141      	cbz	r1, 8014f64 <rmw_destroy_guard_condition+0x20>
 8014f52:	68cb      	ldr	r3, [r1, #12]
 8014f54:	3314      	adds	r3, #20
 8014f56:	4298      	cmp	r0, r3
 8014f58:	d1f9      	bne.n	8014f4e <rmw_destroy_guard_condition+0xa>
 8014f5a:	4803      	ldr	r0, [pc, #12]	@ (8014f68 <rmw_destroy_guard_condition+0x24>)
 8014f5c:	f7fe fbe0 	bl	8013720 <put_memory>
 8014f60:	2000      	movs	r0, #0
 8014f62:	bd08      	pop	{r3, pc}
 8014f64:	2001      	movs	r0, #1
 8014f66:	bd08      	pop	{r3, pc}
 8014f68:	20010ec8 	.word	0x20010ec8

08014f6c <rmw_trigger_guard_condition>:
 8014f6c:	b160      	cbz	r0, 8014f88 <rmw_trigger_guard_condition+0x1c>
 8014f6e:	b510      	push	{r4, lr}
 8014f70:	4604      	mov	r4, r0
 8014f72:	6800      	ldr	r0, [r0, #0]
 8014f74:	f7f7 fe4c 	bl	800cc10 <is_uxrce_rmw_identifier_valid>
 8014f78:	b908      	cbnz	r0, 8014f7e <rmw_trigger_guard_condition+0x12>
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	bd10      	pop	{r4, pc}
 8014f7e:	6863      	ldr	r3, [r4, #4]
 8014f80:	2201      	movs	r2, #1
 8014f82:	741a      	strb	r2, [r3, #16]
 8014f84:	2000      	movs	r0, #0
 8014f86:	bd10      	pop	{r4, pc}
 8014f88:	2001      	movs	r0, #1
 8014f8a:	4770      	bx	lr

08014f8c <calloc>:
 8014f8c:	4b02      	ldr	r3, [pc, #8]	@ (8014f98 <calloc+0xc>)
 8014f8e:	460a      	mov	r2, r1
 8014f90:	4601      	mov	r1, r0
 8014f92:	6818      	ldr	r0, [r3, #0]
 8014f94:	f000 b802 	b.w	8014f9c <_calloc_r>
 8014f98:	20000118 	.word	0x20000118

08014f9c <_calloc_r>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	fba1 5402 	umull	r5, r4, r1, r2
 8014fa2:	b93c      	cbnz	r4, 8014fb4 <_calloc_r+0x18>
 8014fa4:	4629      	mov	r1, r5
 8014fa6:	f000 f887 	bl	80150b8 <_malloc_r>
 8014faa:	4606      	mov	r6, r0
 8014fac:	b928      	cbnz	r0, 8014fba <_calloc_r+0x1e>
 8014fae:	2600      	movs	r6, #0
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	bd70      	pop	{r4, r5, r6, pc}
 8014fb4:	220c      	movs	r2, #12
 8014fb6:	6002      	str	r2, [r0, #0]
 8014fb8:	e7f9      	b.n	8014fae <_calloc_r+0x12>
 8014fba:	462a      	mov	r2, r5
 8014fbc:	4621      	mov	r1, r4
 8014fbe:	f000 fbbf 	bl	8015740 <memset>
 8014fc2:	e7f5      	b.n	8014fb0 <_calloc_r+0x14>

08014fc4 <getenv>:
 8014fc4:	b507      	push	{r0, r1, r2, lr}
 8014fc6:	4b04      	ldr	r3, [pc, #16]	@ (8014fd8 <getenv+0x14>)
 8014fc8:	4601      	mov	r1, r0
 8014fca:	aa01      	add	r2, sp, #4
 8014fcc:	6818      	ldr	r0, [r3, #0]
 8014fce:	f000 f805 	bl	8014fdc <_findenv_r>
 8014fd2:	b003      	add	sp, #12
 8014fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fd8:	20000118 	.word	0x20000118

08014fdc <_findenv_r>:
 8014fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015050 <_findenv_r+0x74>
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	4689      	mov	r9, r1
 8014fe8:	4617      	mov	r7, r2
 8014fea:	f000 fcf5 	bl	80159d8 <__env_lock>
 8014fee:	f8da 4000 	ldr.w	r4, [sl]
 8014ff2:	b134      	cbz	r4, 8015002 <_findenv_r+0x26>
 8014ff4:	464b      	mov	r3, r9
 8014ff6:	4698      	mov	r8, r3
 8014ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ffc:	b13a      	cbz	r2, 801500e <_findenv_r+0x32>
 8014ffe:	2a3d      	cmp	r2, #61	@ 0x3d
 8015000:	d1f9      	bne.n	8014ff6 <_findenv_r+0x1a>
 8015002:	4630      	mov	r0, r6
 8015004:	f000 fcee 	bl	80159e4 <__env_unlock>
 8015008:	2000      	movs	r0, #0
 801500a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801500e:	eba8 0809 	sub.w	r8, r8, r9
 8015012:	46a3      	mov	fp, r4
 8015014:	f854 0b04 	ldr.w	r0, [r4], #4
 8015018:	2800      	cmp	r0, #0
 801501a:	d0f2      	beq.n	8015002 <_findenv_r+0x26>
 801501c:	4642      	mov	r2, r8
 801501e:	4649      	mov	r1, r9
 8015020:	f000 fba3 	bl	801576a <strncmp>
 8015024:	2800      	cmp	r0, #0
 8015026:	d1f4      	bne.n	8015012 <_findenv_r+0x36>
 8015028:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801502c:	eb03 0508 	add.w	r5, r3, r8
 8015030:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015034:	2b3d      	cmp	r3, #61	@ 0x3d
 8015036:	d1ec      	bne.n	8015012 <_findenv_r+0x36>
 8015038:	f8da 3000 	ldr.w	r3, [sl]
 801503c:	ebab 0303 	sub.w	r3, fp, r3
 8015040:	109b      	asrs	r3, r3, #2
 8015042:	4630      	mov	r0, r6
 8015044:	603b      	str	r3, [r7, #0]
 8015046:	f000 fccd 	bl	80159e4 <__env_unlock>
 801504a:	1c68      	adds	r0, r5, #1
 801504c:	e7dd      	b.n	801500a <_findenv_r+0x2e>
 801504e:	bf00      	nop
 8015050:	20000000 	.word	0x20000000

08015054 <malloc>:
 8015054:	4b02      	ldr	r3, [pc, #8]	@ (8015060 <malloc+0xc>)
 8015056:	4601      	mov	r1, r0
 8015058:	6818      	ldr	r0, [r3, #0]
 801505a:	f000 b82d 	b.w	80150b8 <_malloc_r>
 801505e:	bf00      	nop
 8015060:	20000118 	.word	0x20000118

08015064 <free>:
 8015064:	4b02      	ldr	r3, [pc, #8]	@ (8015070 <free+0xc>)
 8015066:	4601      	mov	r1, r0
 8015068:	6818      	ldr	r0, [r3, #0]
 801506a:	f000 bcc1 	b.w	80159f0 <_free_r>
 801506e:	bf00      	nop
 8015070:	20000118 	.word	0x20000118

08015074 <sbrk_aligned>:
 8015074:	b570      	push	{r4, r5, r6, lr}
 8015076:	4e0f      	ldr	r6, [pc, #60]	@ (80150b4 <sbrk_aligned+0x40>)
 8015078:	460c      	mov	r4, r1
 801507a:	6831      	ldr	r1, [r6, #0]
 801507c:	4605      	mov	r5, r0
 801507e:	b911      	cbnz	r1, 8015086 <sbrk_aligned+0x12>
 8015080:	f000 fc26 	bl	80158d0 <_sbrk_r>
 8015084:	6030      	str	r0, [r6, #0]
 8015086:	4621      	mov	r1, r4
 8015088:	4628      	mov	r0, r5
 801508a:	f000 fc21 	bl	80158d0 <_sbrk_r>
 801508e:	1c43      	adds	r3, r0, #1
 8015090:	d103      	bne.n	801509a <sbrk_aligned+0x26>
 8015092:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015096:	4620      	mov	r0, r4
 8015098:	bd70      	pop	{r4, r5, r6, pc}
 801509a:	1cc4      	adds	r4, r0, #3
 801509c:	f024 0403 	bic.w	r4, r4, #3
 80150a0:	42a0      	cmp	r0, r4
 80150a2:	d0f8      	beq.n	8015096 <sbrk_aligned+0x22>
 80150a4:	1a21      	subs	r1, r4, r0
 80150a6:	4628      	mov	r0, r5
 80150a8:	f000 fc12 	bl	80158d0 <_sbrk_r>
 80150ac:	3001      	adds	r0, #1
 80150ae:	d1f2      	bne.n	8015096 <sbrk_aligned+0x22>
 80150b0:	e7ef      	b.n	8015092 <sbrk_aligned+0x1e>
 80150b2:	bf00      	nop
 80150b4:	2000dbb8 	.word	0x2000dbb8

080150b8 <_malloc_r>:
 80150b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150bc:	1ccd      	adds	r5, r1, #3
 80150be:	f025 0503 	bic.w	r5, r5, #3
 80150c2:	3508      	adds	r5, #8
 80150c4:	2d0c      	cmp	r5, #12
 80150c6:	bf38      	it	cc
 80150c8:	250c      	movcc	r5, #12
 80150ca:	2d00      	cmp	r5, #0
 80150cc:	4606      	mov	r6, r0
 80150ce:	db01      	blt.n	80150d4 <_malloc_r+0x1c>
 80150d0:	42a9      	cmp	r1, r5
 80150d2:	d904      	bls.n	80150de <_malloc_r+0x26>
 80150d4:	230c      	movs	r3, #12
 80150d6:	6033      	str	r3, [r6, #0]
 80150d8:	2000      	movs	r0, #0
 80150da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80151b4 <_malloc_r+0xfc>
 80150e2:	f000 f869 	bl	80151b8 <__malloc_lock>
 80150e6:	f8d8 3000 	ldr.w	r3, [r8]
 80150ea:	461c      	mov	r4, r3
 80150ec:	bb44      	cbnz	r4, 8015140 <_malloc_r+0x88>
 80150ee:	4629      	mov	r1, r5
 80150f0:	4630      	mov	r0, r6
 80150f2:	f7ff ffbf 	bl	8015074 <sbrk_aligned>
 80150f6:	1c43      	adds	r3, r0, #1
 80150f8:	4604      	mov	r4, r0
 80150fa:	d158      	bne.n	80151ae <_malloc_r+0xf6>
 80150fc:	f8d8 4000 	ldr.w	r4, [r8]
 8015100:	4627      	mov	r7, r4
 8015102:	2f00      	cmp	r7, #0
 8015104:	d143      	bne.n	801518e <_malloc_r+0xd6>
 8015106:	2c00      	cmp	r4, #0
 8015108:	d04b      	beq.n	80151a2 <_malloc_r+0xea>
 801510a:	6823      	ldr	r3, [r4, #0]
 801510c:	4639      	mov	r1, r7
 801510e:	4630      	mov	r0, r6
 8015110:	eb04 0903 	add.w	r9, r4, r3
 8015114:	f000 fbdc 	bl	80158d0 <_sbrk_r>
 8015118:	4581      	cmp	r9, r0
 801511a:	d142      	bne.n	80151a2 <_malloc_r+0xea>
 801511c:	6821      	ldr	r1, [r4, #0]
 801511e:	1a6d      	subs	r5, r5, r1
 8015120:	4629      	mov	r1, r5
 8015122:	4630      	mov	r0, r6
 8015124:	f7ff ffa6 	bl	8015074 <sbrk_aligned>
 8015128:	3001      	adds	r0, #1
 801512a:	d03a      	beq.n	80151a2 <_malloc_r+0xea>
 801512c:	6823      	ldr	r3, [r4, #0]
 801512e:	442b      	add	r3, r5
 8015130:	6023      	str	r3, [r4, #0]
 8015132:	f8d8 3000 	ldr.w	r3, [r8]
 8015136:	685a      	ldr	r2, [r3, #4]
 8015138:	bb62      	cbnz	r2, 8015194 <_malloc_r+0xdc>
 801513a:	f8c8 7000 	str.w	r7, [r8]
 801513e:	e00f      	b.n	8015160 <_malloc_r+0xa8>
 8015140:	6822      	ldr	r2, [r4, #0]
 8015142:	1b52      	subs	r2, r2, r5
 8015144:	d420      	bmi.n	8015188 <_malloc_r+0xd0>
 8015146:	2a0b      	cmp	r2, #11
 8015148:	d917      	bls.n	801517a <_malloc_r+0xc2>
 801514a:	1961      	adds	r1, r4, r5
 801514c:	42a3      	cmp	r3, r4
 801514e:	6025      	str	r5, [r4, #0]
 8015150:	bf18      	it	ne
 8015152:	6059      	strne	r1, [r3, #4]
 8015154:	6863      	ldr	r3, [r4, #4]
 8015156:	bf08      	it	eq
 8015158:	f8c8 1000 	streq.w	r1, [r8]
 801515c:	5162      	str	r2, [r4, r5]
 801515e:	604b      	str	r3, [r1, #4]
 8015160:	4630      	mov	r0, r6
 8015162:	f000 f82f 	bl	80151c4 <__malloc_unlock>
 8015166:	f104 000b 	add.w	r0, r4, #11
 801516a:	1d23      	adds	r3, r4, #4
 801516c:	f020 0007 	bic.w	r0, r0, #7
 8015170:	1ac2      	subs	r2, r0, r3
 8015172:	bf1c      	itt	ne
 8015174:	1a1b      	subne	r3, r3, r0
 8015176:	50a3      	strne	r3, [r4, r2]
 8015178:	e7af      	b.n	80150da <_malloc_r+0x22>
 801517a:	6862      	ldr	r2, [r4, #4]
 801517c:	42a3      	cmp	r3, r4
 801517e:	bf0c      	ite	eq
 8015180:	f8c8 2000 	streq.w	r2, [r8]
 8015184:	605a      	strne	r2, [r3, #4]
 8015186:	e7eb      	b.n	8015160 <_malloc_r+0xa8>
 8015188:	4623      	mov	r3, r4
 801518a:	6864      	ldr	r4, [r4, #4]
 801518c:	e7ae      	b.n	80150ec <_malloc_r+0x34>
 801518e:	463c      	mov	r4, r7
 8015190:	687f      	ldr	r7, [r7, #4]
 8015192:	e7b6      	b.n	8015102 <_malloc_r+0x4a>
 8015194:	461a      	mov	r2, r3
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	42a3      	cmp	r3, r4
 801519a:	d1fb      	bne.n	8015194 <_malloc_r+0xdc>
 801519c:	2300      	movs	r3, #0
 801519e:	6053      	str	r3, [r2, #4]
 80151a0:	e7de      	b.n	8015160 <_malloc_r+0xa8>
 80151a2:	230c      	movs	r3, #12
 80151a4:	6033      	str	r3, [r6, #0]
 80151a6:	4630      	mov	r0, r6
 80151a8:	f000 f80c 	bl	80151c4 <__malloc_unlock>
 80151ac:	e794      	b.n	80150d8 <_malloc_r+0x20>
 80151ae:	6005      	str	r5, [r0, #0]
 80151b0:	e7d6      	b.n	8015160 <_malloc_r+0xa8>
 80151b2:	bf00      	nop
 80151b4:	2000dbbc 	.word	0x2000dbbc

080151b8 <__malloc_lock>:
 80151b8:	4801      	ldr	r0, [pc, #4]	@ (80151c0 <__malloc_lock+0x8>)
 80151ba:	f000 bbd6 	b.w	801596a <__retarget_lock_acquire_recursive>
 80151be:	bf00      	nop
 80151c0:	2000dd01 	.word	0x2000dd01

080151c4 <__malloc_unlock>:
 80151c4:	4801      	ldr	r0, [pc, #4]	@ (80151cc <__malloc_unlock+0x8>)
 80151c6:	f000 bbd1 	b.w	801596c <__retarget_lock_release_recursive>
 80151ca:	bf00      	nop
 80151cc:	2000dd01 	.word	0x2000dd01

080151d0 <srand>:
 80151d0:	b538      	push	{r3, r4, r5, lr}
 80151d2:	4b10      	ldr	r3, [pc, #64]	@ (8015214 <srand+0x44>)
 80151d4:	681d      	ldr	r5, [r3, #0]
 80151d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80151d8:	4604      	mov	r4, r0
 80151da:	b9b3      	cbnz	r3, 801520a <srand+0x3a>
 80151dc:	2018      	movs	r0, #24
 80151de:	f7ff ff39 	bl	8015054 <malloc>
 80151e2:	4602      	mov	r2, r0
 80151e4:	6328      	str	r0, [r5, #48]	@ 0x30
 80151e6:	b920      	cbnz	r0, 80151f2 <srand+0x22>
 80151e8:	4b0b      	ldr	r3, [pc, #44]	@ (8015218 <srand+0x48>)
 80151ea:	480c      	ldr	r0, [pc, #48]	@ (801521c <srand+0x4c>)
 80151ec:	2146      	movs	r1, #70	@ 0x46
 80151ee:	f000 fbd5 	bl	801599c <__assert_func>
 80151f2:	490b      	ldr	r1, [pc, #44]	@ (8015220 <srand+0x50>)
 80151f4:	4b0b      	ldr	r3, [pc, #44]	@ (8015224 <srand+0x54>)
 80151f6:	e9c0 1300 	strd	r1, r3, [r0]
 80151fa:	4b0b      	ldr	r3, [pc, #44]	@ (8015228 <srand+0x58>)
 80151fc:	6083      	str	r3, [r0, #8]
 80151fe:	230b      	movs	r3, #11
 8015200:	8183      	strh	r3, [r0, #12]
 8015202:	2100      	movs	r1, #0
 8015204:	2001      	movs	r0, #1
 8015206:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801520a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801520c:	2200      	movs	r2, #0
 801520e:	611c      	str	r4, [r3, #16]
 8015210:	615a      	str	r2, [r3, #20]
 8015212:	bd38      	pop	{r3, r4, r5, pc}
 8015214:	20000118 	.word	0x20000118
 8015218:	08017278 	.word	0x08017278
 801521c:	0801728f 	.word	0x0801728f
 8015220:	abcd330e 	.word	0xabcd330e
 8015224:	e66d1234 	.word	0xe66d1234
 8015228:	0005deec 	.word	0x0005deec

0801522c <rand>:
 801522c:	4b16      	ldr	r3, [pc, #88]	@ (8015288 <rand+0x5c>)
 801522e:	b510      	push	{r4, lr}
 8015230:	681c      	ldr	r4, [r3, #0]
 8015232:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015234:	b9b3      	cbnz	r3, 8015264 <rand+0x38>
 8015236:	2018      	movs	r0, #24
 8015238:	f7ff ff0c 	bl	8015054 <malloc>
 801523c:	4602      	mov	r2, r0
 801523e:	6320      	str	r0, [r4, #48]	@ 0x30
 8015240:	b920      	cbnz	r0, 801524c <rand+0x20>
 8015242:	4b12      	ldr	r3, [pc, #72]	@ (801528c <rand+0x60>)
 8015244:	4812      	ldr	r0, [pc, #72]	@ (8015290 <rand+0x64>)
 8015246:	2152      	movs	r1, #82	@ 0x52
 8015248:	f000 fba8 	bl	801599c <__assert_func>
 801524c:	4911      	ldr	r1, [pc, #68]	@ (8015294 <rand+0x68>)
 801524e:	4b12      	ldr	r3, [pc, #72]	@ (8015298 <rand+0x6c>)
 8015250:	e9c0 1300 	strd	r1, r3, [r0]
 8015254:	4b11      	ldr	r3, [pc, #68]	@ (801529c <rand+0x70>)
 8015256:	6083      	str	r3, [r0, #8]
 8015258:	230b      	movs	r3, #11
 801525a:	8183      	strh	r3, [r0, #12]
 801525c:	2100      	movs	r1, #0
 801525e:	2001      	movs	r0, #1
 8015260:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015264:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015266:	480e      	ldr	r0, [pc, #56]	@ (80152a0 <rand+0x74>)
 8015268:	690b      	ldr	r3, [r1, #16]
 801526a:	694c      	ldr	r4, [r1, #20]
 801526c:	4a0d      	ldr	r2, [pc, #52]	@ (80152a4 <rand+0x78>)
 801526e:	4358      	muls	r0, r3
 8015270:	fb02 0004 	mla	r0, r2, r4, r0
 8015274:	fba3 3202 	umull	r3, r2, r3, r2
 8015278:	3301      	adds	r3, #1
 801527a:	eb40 0002 	adc.w	r0, r0, r2
 801527e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015282:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015286:	bd10      	pop	{r4, pc}
 8015288:	20000118 	.word	0x20000118
 801528c:	08017278 	.word	0x08017278
 8015290:	0801728f 	.word	0x0801728f
 8015294:	abcd330e 	.word	0xabcd330e
 8015298:	e66d1234 	.word	0xe66d1234
 801529c:	0005deec 	.word	0x0005deec
 80152a0:	5851f42d 	.word	0x5851f42d
 80152a4:	4c957f2d 	.word	0x4c957f2d

080152a8 <realloc>:
 80152a8:	4b02      	ldr	r3, [pc, #8]	@ (80152b4 <realloc+0xc>)
 80152aa:	460a      	mov	r2, r1
 80152ac:	4601      	mov	r1, r0
 80152ae:	6818      	ldr	r0, [r3, #0]
 80152b0:	f000 b802 	b.w	80152b8 <_realloc_r>
 80152b4:	20000118 	.word	0x20000118

080152b8 <_realloc_r>:
 80152b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152bc:	4680      	mov	r8, r0
 80152be:	4615      	mov	r5, r2
 80152c0:	460c      	mov	r4, r1
 80152c2:	b921      	cbnz	r1, 80152ce <_realloc_r+0x16>
 80152c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152c8:	4611      	mov	r1, r2
 80152ca:	f7ff bef5 	b.w	80150b8 <_malloc_r>
 80152ce:	b92a      	cbnz	r2, 80152dc <_realloc_r+0x24>
 80152d0:	f000 fb8e 	bl	80159f0 <_free_r>
 80152d4:	2400      	movs	r4, #0
 80152d6:	4620      	mov	r0, r4
 80152d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152dc:	f000 fbd2 	bl	8015a84 <_malloc_usable_size_r>
 80152e0:	4285      	cmp	r5, r0
 80152e2:	4606      	mov	r6, r0
 80152e4:	d802      	bhi.n	80152ec <_realloc_r+0x34>
 80152e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80152ea:	d8f4      	bhi.n	80152d6 <_realloc_r+0x1e>
 80152ec:	4629      	mov	r1, r5
 80152ee:	4640      	mov	r0, r8
 80152f0:	f7ff fee2 	bl	80150b8 <_malloc_r>
 80152f4:	4607      	mov	r7, r0
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d0ec      	beq.n	80152d4 <_realloc_r+0x1c>
 80152fa:	42b5      	cmp	r5, r6
 80152fc:	462a      	mov	r2, r5
 80152fe:	4621      	mov	r1, r4
 8015300:	bf28      	it	cs
 8015302:	4632      	movcs	r2, r6
 8015304:	f000 fb3b 	bl	801597e <memcpy>
 8015308:	4621      	mov	r1, r4
 801530a:	4640      	mov	r0, r8
 801530c:	f000 fb70 	bl	80159f0 <_free_r>
 8015310:	463c      	mov	r4, r7
 8015312:	e7e0      	b.n	80152d6 <_realloc_r+0x1e>

08015314 <_strtoul_l.constprop.0>:
 8015314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015318:	4e34      	ldr	r6, [pc, #208]	@ (80153ec <_strtoul_l.constprop.0+0xd8>)
 801531a:	4686      	mov	lr, r0
 801531c:	460d      	mov	r5, r1
 801531e:	4628      	mov	r0, r5
 8015320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015324:	5d37      	ldrb	r7, [r6, r4]
 8015326:	f017 0708 	ands.w	r7, r7, #8
 801532a:	d1f8      	bne.n	801531e <_strtoul_l.constprop.0+0xa>
 801532c:	2c2d      	cmp	r4, #45	@ 0x2d
 801532e:	d12f      	bne.n	8015390 <_strtoul_l.constprop.0+0x7c>
 8015330:	782c      	ldrb	r4, [r5, #0]
 8015332:	2701      	movs	r7, #1
 8015334:	1c85      	adds	r5, r0, #2
 8015336:	f033 0010 	bics.w	r0, r3, #16
 801533a:	d109      	bne.n	8015350 <_strtoul_l.constprop.0+0x3c>
 801533c:	2c30      	cmp	r4, #48	@ 0x30
 801533e:	d12c      	bne.n	801539a <_strtoul_l.constprop.0+0x86>
 8015340:	7828      	ldrb	r0, [r5, #0]
 8015342:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015346:	2858      	cmp	r0, #88	@ 0x58
 8015348:	d127      	bne.n	801539a <_strtoul_l.constprop.0+0x86>
 801534a:	786c      	ldrb	r4, [r5, #1]
 801534c:	2310      	movs	r3, #16
 801534e:	3502      	adds	r5, #2
 8015350:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015354:	2600      	movs	r6, #0
 8015356:	fbb8 f8f3 	udiv	r8, r8, r3
 801535a:	fb03 f908 	mul.w	r9, r3, r8
 801535e:	ea6f 0909 	mvn.w	r9, r9
 8015362:	4630      	mov	r0, r6
 8015364:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015368:	f1bc 0f09 	cmp.w	ip, #9
 801536c:	d81c      	bhi.n	80153a8 <_strtoul_l.constprop.0+0x94>
 801536e:	4664      	mov	r4, ip
 8015370:	42a3      	cmp	r3, r4
 8015372:	dd2a      	ble.n	80153ca <_strtoul_l.constprop.0+0xb6>
 8015374:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015378:	d007      	beq.n	801538a <_strtoul_l.constprop.0+0x76>
 801537a:	4580      	cmp	r8, r0
 801537c:	d322      	bcc.n	80153c4 <_strtoul_l.constprop.0+0xb0>
 801537e:	d101      	bne.n	8015384 <_strtoul_l.constprop.0+0x70>
 8015380:	45a1      	cmp	r9, r4
 8015382:	db1f      	blt.n	80153c4 <_strtoul_l.constprop.0+0xb0>
 8015384:	fb00 4003 	mla	r0, r0, r3, r4
 8015388:	2601      	movs	r6, #1
 801538a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801538e:	e7e9      	b.n	8015364 <_strtoul_l.constprop.0+0x50>
 8015390:	2c2b      	cmp	r4, #43	@ 0x2b
 8015392:	bf04      	itt	eq
 8015394:	782c      	ldrbeq	r4, [r5, #0]
 8015396:	1c85      	addeq	r5, r0, #2
 8015398:	e7cd      	b.n	8015336 <_strtoul_l.constprop.0+0x22>
 801539a:	2b00      	cmp	r3, #0
 801539c:	d1d8      	bne.n	8015350 <_strtoul_l.constprop.0+0x3c>
 801539e:	2c30      	cmp	r4, #48	@ 0x30
 80153a0:	bf0c      	ite	eq
 80153a2:	2308      	moveq	r3, #8
 80153a4:	230a      	movne	r3, #10
 80153a6:	e7d3      	b.n	8015350 <_strtoul_l.constprop.0+0x3c>
 80153a8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80153ac:	f1bc 0f19 	cmp.w	ip, #25
 80153b0:	d801      	bhi.n	80153b6 <_strtoul_l.constprop.0+0xa2>
 80153b2:	3c37      	subs	r4, #55	@ 0x37
 80153b4:	e7dc      	b.n	8015370 <_strtoul_l.constprop.0+0x5c>
 80153b6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80153ba:	f1bc 0f19 	cmp.w	ip, #25
 80153be:	d804      	bhi.n	80153ca <_strtoul_l.constprop.0+0xb6>
 80153c0:	3c57      	subs	r4, #87	@ 0x57
 80153c2:	e7d5      	b.n	8015370 <_strtoul_l.constprop.0+0x5c>
 80153c4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80153c8:	e7df      	b.n	801538a <_strtoul_l.constprop.0+0x76>
 80153ca:	1c73      	adds	r3, r6, #1
 80153cc:	d106      	bne.n	80153dc <_strtoul_l.constprop.0+0xc8>
 80153ce:	2322      	movs	r3, #34	@ 0x22
 80153d0:	f8ce 3000 	str.w	r3, [lr]
 80153d4:	4630      	mov	r0, r6
 80153d6:	b932      	cbnz	r2, 80153e6 <_strtoul_l.constprop.0+0xd2>
 80153d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153dc:	b107      	cbz	r7, 80153e0 <_strtoul_l.constprop.0+0xcc>
 80153de:	4240      	negs	r0, r0
 80153e0:	2a00      	cmp	r2, #0
 80153e2:	d0f9      	beq.n	80153d8 <_strtoul_l.constprop.0+0xc4>
 80153e4:	b106      	cbz	r6, 80153e8 <_strtoul_l.constprop.0+0xd4>
 80153e6:	1e69      	subs	r1, r5, #1
 80153e8:	6011      	str	r1, [r2, #0]
 80153ea:	e7f5      	b.n	80153d8 <_strtoul_l.constprop.0+0xc4>
 80153ec:	080172e8 	.word	0x080172e8

080153f0 <strtoul>:
 80153f0:	4613      	mov	r3, r2
 80153f2:	460a      	mov	r2, r1
 80153f4:	4601      	mov	r1, r0
 80153f6:	4802      	ldr	r0, [pc, #8]	@ (8015400 <strtoul+0x10>)
 80153f8:	6800      	ldr	r0, [r0, #0]
 80153fa:	f7ff bf8b 	b.w	8015314 <_strtoul_l.constprop.0>
 80153fe:	bf00      	nop
 8015400:	20000118 	.word	0x20000118

08015404 <std>:
 8015404:	2300      	movs	r3, #0
 8015406:	b510      	push	{r4, lr}
 8015408:	4604      	mov	r4, r0
 801540a:	e9c0 3300 	strd	r3, r3, [r0]
 801540e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015412:	6083      	str	r3, [r0, #8]
 8015414:	8181      	strh	r1, [r0, #12]
 8015416:	6643      	str	r3, [r0, #100]	@ 0x64
 8015418:	81c2      	strh	r2, [r0, #14]
 801541a:	6183      	str	r3, [r0, #24]
 801541c:	4619      	mov	r1, r3
 801541e:	2208      	movs	r2, #8
 8015420:	305c      	adds	r0, #92	@ 0x5c
 8015422:	f000 f98d 	bl	8015740 <memset>
 8015426:	4b0d      	ldr	r3, [pc, #52]	@ (801545c <std+0x58>)
 8015428:	6263      	str	r3, [r4, #36]	@ 0x24
 801542a:	4b0d      	ldr	r3, [pc, #52]	@ (8015460 <std+0x5c>)
 801542c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801542e:	4b0d      	ldr	r3, [pc, #52]	@ (8015464 <std+0x60>)
 8015430:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015432:	4b0d      	ldr	r3, [pc, #52]	@ (8015468 <std+0x64>)
 8015434:	6323      	str	r3, [r4, #48]	@ 0x30
 8015436:	4b0d      	ldr	r3, [pc, #52]	@ (801546c <std+0x68>)
 8015438:	6224      	str	r4, [r4, #32]
 801543a:	429c      	cmp	r4, r3
 801543c:	d006      	beq.n	801544c <std+0x48>
 801543e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015442:	4294      	cmp	r4, r2
 8015444:	d002      	beq.n	801544c <std+0x48>
 8015446:	33d0      	adds	r3, #208	@ 0xd0
 8015448:	429c      	cmp	r4, r3
 801544a:	d105      	bne.n	8015458 <std+0x54>
 801544c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015454:	f000 ba88 	b.w	8015968 <__retarget_lock_init_recursive>
 8015458:	bd10      	pop	{r4, pc}
 801545a:	bf00      	nop
 801545c:	08015615 	.word	0x08015615
 8015460:	08015637 	.word	0x08015637
 8015464:	0801566f 	.word	0x0801566f
 8015468:	08015693 	.word	0x08015693
 801546c:	2000dbc0 	.word	0x2000dbc0

08015470 <stdio_exit_handler>:
 8015470:	4a02      	ldr	r2, [pc, #8]	@ (801547c <stdio_exit_handler+0xc>)
 8015472:	4903      	ldr	r1, [pc, #12]	@ (8015480 <stdio_exit_handler+0x10>)
 8015474:	4803      	ldr	r0, [pc, #12]	@ (8015484 <stdio_exit_handler+0x14>)
 8015476:	f000 b869 	b.w	801554c <_fwalk_sglue>
 801547a:	bf00      	nop
 801547c:	2000010c 	.word	0x2000010c
 8015480:	080163ed 	.word	0x080163ed
 8015484:	2000011c 	.word	0x2000011c

08015488 <cleanup_stdio>:
 8015488:	6841      	ldr	r1, [r0, #4]
 801548a:	4b0c      	ldr	r3, [pc, #48]	@ (80154bc <cleanup_stdio+0x34>)
 801548c:	4299      	cmp	r1, r3
 801548e:	b510      	push	{r4, lr}
 8015490:	4604      	mov	r4, r0
 8015492:	d001      	beq.n	8015498 <cleanup_stdio+0x10>
 8015494:	f000 ffaa 	bl	80163ec <_fflush_r>
 8015498:	68a1      	ldr	r1, [r4, #8]
 801549a:	4b09      	ldr	r3, [pc, #36]	@ (80154c0 <cleanup_stdio+0x38>)
 801549c:	4299      	cmp	r1, r3
 801549e:	d002      	beq.n	80154a6 <cleanup_stdio+0x1e>
 80154a0:	4620      	mov	r0, r4
 80154a2:	f000 ffa3 	bl	80163ec <_fflush_r>
 80154a6:	68e1      	ldr	r1, [r4, #12]
 80154a8:	4b06      	ldr	r3, [pc, #24]	@ (80154c4 <cleanup_stdio+0x3c>)
 80154aa:	4299      	cmp	r1, r3
 80154ac:	d004      	beq.n	80154b8 <cleanup_stdio+0x30>
 80154ae:	4620      	mov	r0, r4
 80154b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154b4:	f000 bf9a 	b.w	80163ec <_fflush_r>
 80154b8:	bd10      	pop	{r4, pc}
 80154ba:	bf00      	nop
 80154bc:	2000dbc0 	.word	0x2000dbc0
 80154c0:	2000dc28 	.word	0x2000dc28
 80154c4:	2000dc90 	.word	0x2000dc90

080154c8 <global_stdio_init.part.0>:
 80154c8:	b510      	push	{r4, lr}
 80154ca:	4b0b      	ldr	r3, [pc, #44]	@ (80154f8 <global_stdio_init.part.0+0x30>)
 80154cc:	4c0b      	ldr	r4, [pc, #44]	@ (80154fc <global_stdio_init.part.0+0x34>)
 80154ce:	4a0c      	ldr	r2, [pc, #48]	@ (8015500 <global_stdio_init.part.0+0x38>)
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	4620      	mov	r0, r4
 80154d4:	2200      	movs	r2, #0
 80154d6:	2104      	movs	r1, #4
 80154d8:	f7ff ff94 	bl	8015404 <std>
 80154dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80154e0:	2201      	movs	r2, #1
 80154e2:	2109      	movs	r1, #9
 80154e4:	f7ff ff8e 	bl	8015404 <std>
 80154e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80154ec:	2202      	movs	r2, #2
 80154ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154f2:	2112      	movs	r1, #18
 80154f4:	f7ff bf86 	b.w	8015404 <std>
 80154f8:	2000dcf8 	.word	0x2000dcf8
 80154fc:	2000dbc0 	.word	0x2000dbc0
 8015500:	08015471 	.word	0x08015471

08015504 <__sfp_lock_acquire>:
 8015504:	4801      	ldr	r0, [pc, #4]	@ (801550c <__sfp_lock_acquire+0x8>)
 8015506:	f000 ba30 	b.w	801596a <__retarget_lock_acquire_recursive>
 801550a:	bf00      	nop
 801550c:	2000dd02 	.word	0x2000dd02

08015510 <__sfp_lock_release>:
 8015510:	4801      	ldr	r0, [pc, #4]	@ (8015518 <__sfp_lock_release+0x8>)
 8015512:	f000 ba2b 	b.w	801596c <__retarget_lock_release_recursive>
 8015516:	bf00      	nop
 8015518:	2000dd02 	.word	0x2000dd02

0801551c <__sinit>:
 801551c:	b510      	push	{r4, lr}
 801551e:	4604      	mov	r4, r0
 8015520:	f7ff fff0 	bl	8015504 <__sfp_lock_acquire>
 8015524:	6a23      	ldr	r3, [r4, #32]
 8015526:	b11b      	cbz	r3, 8015530 <__sinit+0x14>
 8015528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801552c:	f7ff bff0 	b.w	8015510 <__sfp_lock_release>
 8015530:	4b04      	ldr	r3, [pc, #16]	@ (8015544 <__sinit+0x28>)
 8015532:	6223      	str	r3, [r4, #32]
 8015534:	4b04      	ldr	r3, [pc, #16]	@ (8015548 <__sinit+0x2c>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d1f5      	bne.n	8015528 <__sinit+0xc>
 801553c:	f7ff ffc4 	bl	80154c8 <global_stdio_init.part.0>
 8015540:	e7f2      	b.n	8015528 <__sinit+0xc>
 8015542:	bf00      	nop
 8015544:	08015489 	.word	0x08015489
 8015548:	2000dcf8 	.word	0x2000dcf8

0801554c <_fwalk_sglue>:
 801554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015550:	4607      	mov	r7, r0
 8015552:	4688      	mov	r8, r1
 8015554:	4614      	mov	r4, r2
 8015556:	2600      	movs	r6, #0
 8015558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801555c:	f1b9 0901 	subs.w	r9, r9, #1
 8015560:	d505      	bpl.n	801556e <_fwalk_sglue+0x22>
 8015562:	6824      	ldr	r4, [r4, #0]
 8015564:	2c00      	cmp	r4, #0
 8015566:	d1f7      	bne.n	8015558 <_fwalk_sglue+0xc>
 8015568:	4630      	mov	r0, r6
 801556a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801556e:	89ab      	ldrh	r3, [r5, #12]
 8015570:	2b01      	cmp	r3, #1
 8015572:	d907      	bls.n	8015584 <_fwalk_sglue+0x38>
 8015574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015578:	3301      	adds	r3, #1
 801557a:	d003      	beq.n	8015584 <_fwalk_sglue+0x38>
 801557c:	4629      	mov	r1, r5
 801557e:	4638      	mov	r0, r7
 8015580:	47c0      	blx	r8
 8015582:	4306      	orrs	r6, r0
 8015584:	3568      	adds	r5, #104	@ 0x68
 8015586:	e7e9      	b.n	801555c <_fwalk_sglue+0x10>

08015588 <iprintf>:
 8015588:	b40f      	push	{r0, r1, r2, r3}
 801558a:	b507      	push	{r0, r1, r2, lr}
 801558c:	4906      	ldr	r1, [pc, #24]	@ (80155a8 <iprintf+0x20>)
 801558e:	ab04      	add	r3, sp, #16
 8015590:	6808      	ldr	r0, [r1, #0]
 8015592:	f853 2b04 	ldr.w	r2, [r3], #4
 8015596:	6881      	ldr	r1, [r0, #8]
 8015598:	9301      	str	r3, [sp, #4]
 801559a:	f000 fbfd 	bl	8015d98 <_vfiprintf_r>
 801559e:	b003      	add	sp, #12
 80155a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80155a4:	b004      	add	sp, #16
 80155a6:	4770      	bx	lr
 80155a8:	20000118 	.word	0x20000118

080155ac <sniprintf>:
 80155ac:	b40c      	push	{r2, r3}
 80155ae:	b530      	push	{r4, r5, lr}
 80155b0:	4b17      	ldr	r3, [pc, #92]	@ (8015610 <sniprintf+0x64>)
 80155b2:	1e0c      	subs	r4, r1, #0
 80155b4:	681d      	ldr	r5, [r3, #0]
 80155b6:	b09d      	sub	sp, #116	@ 0x74
 80155b8:	da08      	bge.n	80155cc <sniprintf+0x20>
 80155ba:	238b      	movs	r3, #139	@ 0x8b
 80155bc:	602b      	str	r3, [r5, #0]
 80155be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155c2:	b01d      	add	sp, #116	@ 0x74
 80155c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155c8:	b002      	add	sp, #8
 80155ca:	4770      	bx	lr
 80155cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80155d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80155d4:	bf14      	ite	ne
 80155d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80155da:	4623      	moveq	r3, r4
 80155dc:	9304      	str	r3, [sp, #16]
 80155de:	9307      	str	r3, [sp, #28]
 80155e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80155e4:	9002      	str	r0, [sp, #8]
 80155e6:	9006      	str	r0, [sp, #24]
 80155e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80155ee:	ab21      	add	r3, sp, #132	@ 0x84
 80155f0:	a902      	add	r1, sp, #8
 80155f2:	4628      	mov	r0, r5
 80155f4:	9301      	str	r3, [sp, #4]
 80155f6:	f000 faa9 	bl	8015b4c <_svfiprintf_r>
 80155fa:	1c43      	adds	r3, r0, #1
 80155fc:	bfbc      	itt	lt
 80155fe:	238b      	movlt	r3, #139	@ 0x8b
 8015600:	602b      	strlt	r3, [r5, #0]
 8015602:	2c00      	cmp	r4, #0
 8015604:	d0dd      	beq.n	80155c2 <sniprintf+0x16>
 8015606:	9b02      	ldr	r3, [sp, #8]
 8015608:	2200      	movs	r2, #0
 801560a:	701a      	strb	r2, [r3, #0]
 801560c:	e7d9      	b.n	80155c2 <sniprintf+0x16>
 801560e:	bf00      	nop
 8015610:	20000118 	.word	0x20000118

08015614 <__sread>:
 8015614:	b510      	push	{r4, lr}
 8015616:	460c      	mov	r4, r1
 8015618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801561c:	f000 f946 	bl	80158ac <_read_r>
 8015620:	2800      	cmp	r0, #0
 8015622:	bfab      	itete	ge
 8015624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015626:	89a3      	ldrhlt	r3, [r4, #12]
 8015628:	181b      	addge	r3, r3, r0
 801562a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801562e:	bfac      	ite	ge
 8015630:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015632:	81a3      	strhlt	r3, [r4, #12]
 8015634:	bd10      	pop	{r4, pc}

08015636 <__swrite>:
 8015636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801563a:	461f      	mov	r7, r3
 801563c:	898b      	ldrh	r3, [r1, #12]
 801563e:	05db      	lsls	r3, r3, #23
 8015640:	4605      	mov	r5, r0
 8015642:	460c      	mov	r4, r1
 8015644:	4616      	mov	r6, r2
 8015646:	d505      	bpl.n	8015654 <__swrite+0x1e>
 8015648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801564c:	2302      	movs	r3, #2
 801564e:	2200      	movs	r2, #0
 8015650:	f000 f91a 	bl	8015888 <_lseek_r>
 8015654:	89a3      	ldrh	r3, [r4, #12]
 8015656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801565a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801565e:	81a3      	strh	r3, [r4, #12]
 8015660:	4632      	mov	r2, r6
 8015662:	463b      	mov	r3, r7
 8015664:	4628      	mov	r0, r5
 8015666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801566a:	f000 b941 	b.w	80158f0 <_write_r>

0801566e <__sseek>:
 801566e:	b510      	push	{r4, lr}
 8015670:	460c      	mov	r4, r1
 8015672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015676:	f000 f907 	bl	8015888 <_lseek_r>
 801567a:	1c43      	adds	r3, r0, #1
 801567c:	89a3      	ldrh	r3, [r4, #12]
 801567e:	bf15      	itete	ne
 8015680:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015682:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015686:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801568a:	81a3      	strheq	r3, [r4, #12]
 801568c:	bf18      	it	ne
 801568e:	81a3      	strhne	r3, [r4, #12]
 8015690:	bd10      	pop	{r4, pc}

08015692 <__sclose>:
 8015692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015696:	f000 b891 	b.w	80157bc <_close_r>

0801569a <_vsniprintf_r>:
 801569a:	b530      	push	{r4, r5, lr}
 801569c:	4614      	mov	r4, r2
 801569e:	2c00      	cmp	r4, #0
 80156a0:	b09b      	sub	sp, #108	@ 0x6c
 80156a2:	4605      	mov	r5, r0
 80156a4:	461a      	mov	r2, r3
 80156a6:	da05      	bge.n	80156b4 <_vsniprintf_r+0x1a>
 80156a8:	238b      	movs	r3, #139	@ 0x8b
 80156aa:	6003      	str	r3, [r0, #0]
 80156ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80156b0:	b01b      	add	sp, #108	@ 0x6c
 80156b2:	bd30      	pop	{r4, r5, pc}
 80156b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80156b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80156bc:	bf14      	ite	ne
 80156be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80156c2:	4623      	moveq	r3, r4
 80156c4:	9302      	str	r3, [sp, #8]
 80156c6:	9305      	str	r3, [sp, #20]
 80156c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80156cc:	9100      	str	r1, [sp, #0]
 80156ce:	9104      	str	r1, [sp, #16]
 80156d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80156d4:	4669      	mov	r1, sp
 80156d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80156d8:	f000 fa38 	bl	8015b4c <_svfiprintf_r>
 80156dc:	1c43      	adds	r3, r0, #1
 80156de:	bfbc      	itt	lt
 80156e0:	238b      	movlt	r3, #139	@ 0x8b
 80156e2:	602b      	strlt	r3, [r5, #0]
 80156e4:	2c00      	cmp	r4, #0
 80156e6:	d0e3      	beq.n	80156b0 <_vsniprintf_r+0x16>
 80156e8:	9b00      	ldr	r3, [sp, #0]
 80156ea:	2200      	movs	r2, #0
 80156ec:	701a      	strb	r2, [r3, #0]
 80156ee:	e7df      	b.n	80156b0 <_vsniprintf_r+0x16>

080156f0 <vsniprintf>:
 80156f0:	b507      	push	{r0, r1, r2, lr}
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	4613      	mov	r3, r2
 80156f6:	460a      	mov	r2, r1
 80156f8:	4601      	mov	r1, r0
 80156fa:	4803      	ldr	r0, [pc, #12]	@ (8015708 <vsniprintf+0x18>)
 80156fc:	6800      	ldr	r0, [r0, #0]
 80156fe:	f7ff ffcc 	bl	801569a <_vsniprintf_r>
 8015702:	b003      	add	sp, #12
 8015704:	f85d fb04 	ldr.w	pc, [sp], #4
 8015708:	20000118 	.word	0x20000118

0801570c <memmove>:
 801570c:	4288      	cmp	r0, r1
 801570e:	b510      	push	{r4, lr}
 8015710:	eb01 0402 	add.w	r4, r1, r2
 8015714:	d902      	bls.n	801571c <memmove+0x10>
 8015716:	4284      	cmp	r4, r0
 8015718:	4623      	mov	r3, r4
 801571a:	d807      	bhi.n	801572c <memmove+0x20>
 801571c:	1e43      	subs	r3, r0, #1
 801571e:	42a1      	cmp	r1, r4
 8015720:	d008      	beq.n	8015734 <memmove+0x28>
 8015722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015726:	f803 2f01 	strb.w	r2, [r3, #1]!
 801572a:	e7f8      	b.n	801571e <memmove+0x12>
 801572c:	4402      	add	r2, r0
 801572e:	4601      	mov	r1, r0
 8015730:	428a      	cmp	r2, r1
 8015732:	d100      	bne.n	8015736 <memmove+0x2a>
 8015734:	bd10      	pop	{r4, pc}
 8015736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801573a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801573e:	e7f7      	b.n	8015730 <memmove+0x24>

08015740 <memset>:
 8015740:	4402      	add	r2, r0
 8015742:	4603      	mov	r3, r0
 8015744:	4293      	cmp	r3, r2
 8015746:	d100      	bne.n	801574a <memset+0xa>
 8015748:	4770      	bx	lr
 801574a:	f803 1b01 	strb.w	r1, [r3], #1
 801574e:	e7f9      	b.n	8015744 <memset+0x4>

08015750 <strchr>:
 8015750:	b2c9      	uxtb	r1, r1
 8015752:	4603      	mov	r3, r0
 8015754:	4618      	mov	r0, r3
 8015756:	f813 2b01 	ldrb.w	r2, [r3], #1
 801575a:	b112      	cbz	r2, 8015762 <strchr+0x12>
 801575c:	428a      	cmp	r2, r1
 801575e:	d1f9      	bne.n	8015754 <strchr+0x4>
 8015760:	4770      	bx	lr
 8015762:	2900      	cmp	r1, #0
 8015764:	bf18      	it	ne
 8015766:	2000      	movne	r0, #0
 8015768:	4770      	bx	lr

0801576a <strncmp>:
 801576a:	b510      	push	{r4, lr}
 801576c:	b16a      	cbz	r2, 801578a <strncmp+0x20>
 801576e:	3901      	subs	r1, #1
 8015770:	1884      	adds	r4, r0, r2
 8015772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015776:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801577a:	429a      	cmp	r2, r3
 801577c:	d103      	bne.n	8015786 <strncmp+0x1c>
 801577e:	42a0      	cmp	r0, r4
 8015780:	d001      	beq.n	8015786 <strncmp+0x1c>
 8015782:	2a00      	cmp	r2, #0
 8015784:	d1f5      	bne.n	8015772 <strncmp+0x8>
 8015786:	1ad0      	subs	r0, r2, r3
 8015788:	bd10      	pop	{r4, pc}
 801578a:	4610      	mov	r0, r2
 801578c:	e7fc      	b.n	8015788 <strncmp+0x1e>

0801578e <strstr>:
 801578e:	780a      	ldrb	r2, [r1, #0]
 8015790:	b570      	push	{r4, r5, r6, lr}
 8015792:	b96a      	cbnz	r2, 80157b0 <strstr+0x22>
 8015794:	bd70      	pop	{r4, r5, r6, pc}
 8015796:	429a      	cmp	r2, r3
 8015798:	d109      	bne.n	80157ae <strstr+0x20>
 801579a:	460c      	mov	r4, r1
 801579c:	4605      	mov	r5, r0
 801579e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d0f6      	beq.n	8015794 <strstr+0x6>
 80157a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80157aa:	429e      	cmp	r6, r3
 80157ac:	d0f7      	beq.n	801579e <strstr+0x10>
 80157ae:	3001      	adds	r0, #1
 80157b0:	7803      	ldrb	r3, [r0, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d1ef      	bne.n	8015796 <strstr+0x8>
 80157b6:	4618      	mov	r0, r3
 80157b8:	e7ec      	b.n	8015794 <strstr+0x6>
	...

080157bc <_close_r>:
 80157bc:	b538      	push	{r3, r4, r5, lr}
 80157be:	4d06      	ldr	r5, [pc, #24]	@ (80157d8 <_close_r+0x1c>)
 80157c0:	2300      	movs	r3, #0
 80157c2:	4604      	mov	r4, r0
 80157c4:	4608      	mov	r0, r1
 80157c6:	602b      	str	r3, [r5, #0]
 80157c8:	f7ec f89c 	bl	8001904 <_close>
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	d102      	bne.n	80157d6 <_close_r+0x1a>
 80157d0:	682b      	ldr	r3, [r5, #0]
 80157d2:	b103      	cbz	r3, 80157d6 <_close_r+0x1a>
 80157d4:	6023      	str	r3, [r4, #0]
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
 80157d8:	2000dcfc 	.word	0x2000dcfc

080157dc <_reclaim_reent>:
 80157dc:	4b29      	ldr	r3, [pc, #164]	@ (8015884 <_reclaim_reent+0xa8>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	4283      	cmp	r3, r0
 80157e2:	b570      	push	{r4, r5, r6, lr}
 80157e4:	4604      	mov	r4, r0
 80157e6:	d04b      	beq.n	8015880 <_reclaim_reent+0xa4>
 80157e8:	69c3      	ldr	r3, [r0, #28]
 80157ea:	b1ab      	cbz	r3, 8015818 <_reclaim_reent+0x3c>
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	b16b      	cbz	r3, 801580c <_reclaim_reent+0x30>
 80157f0:	2500      	movs	r5, #0
 80157f2:	69e3      	ldr	r3, [r4, #28]
 80157f4:	68db      	ldr	r3, [r3, #12]
 80157f6:	5959      	ldr	r1, [r3, r5]
 80157f8:	2900      	cmp	r1, #0
 80157fa:	d13b      	bne.n	8015874 <_reclaim_reent+0x98>
 80157fc:	3504      	adds	r5, #4
 80157fe:	2d80      	cmp	r5, #128	@ 0x80
 8015800:	d1f7      	bne.n	80157f2 <_reclaim_reent+0x16>
 8015802:	69e3      	ldr	r3, [r4, #28]
 8015804:	4620      	mov	r0, r4
 8015806:	68d9      	ldr	r1, [r3, #12]
 8015808:	f000 f8f2 	bl	80159f0 <_free_r>
 801580c:	69e3      	ldr	r3, [r4, #28]
 801580e:	6819      	ldr	r1, [r3, #0]
 8015810:	b111      	cbz	r1, 8015818 <_reclaim_reent+0x3c>
 8015812:	4620      	mov	r0, r4
 8015814:	f000 f8ec 	bl	80159f0 <_free_r>
 8015818:	6961      	ldr	r1, [r4, #20]
 801581a:	b111      	cbz	r1, 8015822 <_reclaim_reent+0x46>
 801581c:	4620      	mov	r0, r4
 801581e:	f000 f8e7 	bl	80159f0 <_free_r>
 8015822:	69e1      	ldr	r1, [r4, #28]
 8015824:	b111      	cbz	r1, 801582c <_reclaim_reent+0x50>
 8015826:	4620      	mov	r0, r4
 8015828:	f000 f8e2 	bl	80159f0 <_free_r>
 801582c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801582e:	b111      	cbz	r1, 8015836 <_reclaim_reent+0x5a>
 8015830:	4620      	mov	r0, r4
 8015832:	f000 f8dd 	bl	80159f0 <_free_r>
 8015836:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015838:	b111      	cbz	r1, 8015840 <_reclaim_reent+0x64>
 801583a:	4620      	mov	r0, r4
 801583c:	f000 f8d8 	bl	80159f0 <_free_r>
 8015840:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015842:	b111      	cbz	r1, 801584a <_reclaim_reent+0x6e>
 8015844:	4620      	mov	r0, r4
 8015846:	f000 f8d3 	bl	80159f0 <_free_r>
 801584a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801584c:	b111      	cbz	r1, 8015854 <_reclaim_reent+0x78>
 801584e:	4620      	mov	r0, r4
 8015850:	f000 f8ce 	bl	80159f0 <_free_r>
 8015854:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015856:	b111      	cbz	r1, 801585e <_reclaim_reent+0x82>
 8015858:	4620      	mov	r0, r4
 801585a:	f000 f8c9 	bl	80159f0 <_free_r>
 801585e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015860:	b111      	cbz	r1, 8015868 <_reclaim_reent+0x8c>
 8015862:	4620      	mov	r0, r4
 8015864:	f000 f8c4 	bl	80159f0 <_free_r>
 8015868:	6a23      	ldr	r3, [r4, #32]
 801586a:	b14b      	cbz	r3, 8015880 <_reclaim_reent+0xa4>
 801586c:	4620      	mov	r0, r4
 801586e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015872:	4718      	bx	r3
 8015874:	680e      	ldr	r6, [r1, #0]
 8015876:	4620      	mov	r0, r4
 8015878:	f000 f8ba 	bl	80159f0 <_free_r>
 801587c:	4631      	mov	r1, r6
 801587e:	e7bb      	b.n	80157f8 <_reclaim_reent+0x1c>
 8015880:	bd70      	pop	{r4, r5, r6, pc}
 8015882:	bf00      	nop
 8015884:	20000118 	.word	0x20000118

08015888 <_lseek_r>:
 8015888:	b538      	push	{r3, r4, r5, lr}
 801588a:	4d07      	ldr	r5, [pc, #28]	@ (80158a8 <_lseek_r+0x20>)
 801588c:	4604      	mov	r4, r0
 801588e:	4608      	mov	r0, r1
 8015890:	4611      	mov	r1, r2
 8015892:	2200      	movs	r2, #0
 8015894:	602a      	str	r2, [r5, #0]
 8015896:	461a      	mov	r2, r3
 8015898:	f7ec f85b 	bl	8001952 <_lseek>
 801589c:	1c43      	adds	r3, r0, #1
 801589e:	d102      	bne.n	80158a6 <_lseek_r+0x1e>
 80158a0:	682b      	ldr	r3, [r5, #0]
 80158a2:	b103      	cbz	r3, 80158a6 <_lseek_r+0x1e>
 80158a4:	6023      	str	r3, [r4, #0]
 80158a6:	bd38      	pop	{r3, r4, r5, pc}
 80158a8:	2000dcfc 	.word	0x2000dcfc

080158ac <_read_r>:
 80158ac:	b538      	push	{r3, r4, r5, lr}
 80158ae:	4d07      	ldr	r5, [pc, #28]	@ (80158cc <_read_r+0x20>)
 80158b0:	4604      	mov	r4, r0
 80158b2:	4608      	mov	r0, r1
 80158b4:	4611      	mov	r1, r2
 80158b6:	2200      	movs	r2, #0
 80158b8:	602a      	str	r2, [r5, #0]
 80158ba:	461a      	mov	r2, r3
 80158bc:	f7eb ffe9 	bl	8001892 <_read>
 80158c0:	1c43      	adds	r3, r0, #1
 80158c2:	d102      	bne.n	80158ca <_read_r+0x1e>
 80158c4:	682b      	ldr	r3, [r5, #0]
 80158c6:	b103      	cbz	r3, 80158ca <_read_r+0x1e>
 80158c8:	6023      	str	r3, [r4, #0]
 80158ca:	bd38      	pop	{r3, r4, r5, pc}
 80158cc:	2000dcfc 	.word	0x2000dcfc

080158d0 <_sbrk_r>:
 80158d0:	b538      	push	{r3, r4, r5, lr}
 80158d2:	4d06      	ldr	r5, [pc, #24]	@ (80158ec <_sbrk_r+0x1c>)
 80158d4:	2300      	movs	r3, #0
 80158d6:	4604      	mov	r4, r0
 80158d8:	4608      	mov	r0, r1
 80158da:	602b      	str	r3, [r5, #0]
 80158dc:	f7ec f846 	bl	800196c <_sbrk>
 80158e0:	1c43      	adds	r3, r0, #1
 80158e2:	d102      	bne.n	80158ea <_sbrk_r+0x1a>
 80158e4:	682b      	ldr	r3, [r5, #0]
 80158e6:	b103      	cbz	r3, 80158ea <_sbrk_r+0x1a>
 80158e8:	6023      	str	r3, [r4, #0]
 80158ea:	bd38      	pop	{r3, r4, r5, pc}
 80158ec:	2000dcfc 	.word	0x2000dcfc

080158f0 <_write_r>:
 80158f0:	b538      	push	{r3, r4, r5, lr}
 80158f2:	4d07      	ldr	r5, [pc, #28]	@ (8015910 <_write_r+0x20>)
 80158f4:	4604      	mov	r4, r0
 80158f6:	4608      	mov	r0, r1
 80158f8:	4611      	mov	r1, r2
 80158fa:	2200      	movs	r2, #0
 80158fc:	602a      	str	r2, [r5, #0]
 80158fe:	461a      	mov	r2, r3
 8015900:	f7eb ffe4 	bl	80018cc <_write>
 8015904:	1c43      	adds	r3, r0, #1
 8015906:	d102      	bne.n	801590e <_write_r+0x1e>
 8015908:	682b      	ldr	r3, [r5, #0]
 801590a:	b103      	cbz	r3, 801590e <_write_r+0x1e>
 801590c:	6023      	str	r3, [r4, #0]
 801590e:	bd38      	pop	{r3, r4, r5, pc}
 8015910:	2000dcfc 	.word	0x2000dcfc

08015914 <__errno>:
 8015914:	4b01      	ldr	r3, [pc, #4]	@ (801591c <__errno+0x8>)
 8015916:	6818      	ldr	r0, [r3, #0]
 8015918:	4770      	bx	lr
 801591a:	bf00      	nop
 801591c:	20000118 	.word	0x20000118

08015920 <__libc_init_array>:
 8015920:	b570      	push	{r4, r5, r6, lr}
 8015922:	4d0d      	ldr	r5, [pc, #52]	@ (8015958 <__libc_init_array+0x38>)
 8015924:	4c0d      	ldr	r4, [pc, #52]	@ (801595c <__libc_init_array+0x3c>)
 8015926:	1b64      	subs	r4, r4, r5
 8015928:	10a4      	asrs	r4, r4, #2
 801592a:	2600      	movs	r6, #0
 801592c:	42a6      	cmp	r6, r4
 801592e:	d109      	bne.n	8015944 <__libc_init_array+0x24>
 8015930:	4d0b      	ldr	r5, [pc, #44]	@ (8015960 <__libc_init_array+0x40>)
 8015932:	4c0c      	ldr	r4, [pc, #48]	@ (8015964 <__libc_init_array+0x44>)
 8015934:	f000 fef8 	bl	8016728 <_init>
 8015938:	1b64      	subs	r4, r4, r5
 801593a:	10a4      	asrs	r4, r4, #2
 801593c:	2600      	movs	r6, #0
 801593e:	42a6      	cmp	r6, r4
 8015940:	d105      	bne.n	801594e <__libc_init_array+0x2e>
 8015942:	bd70      	pop	{r4, r5, r6, pc}
 8015944:	f855 3b04 	ldr.w	r3, [r5], #4
 8015948:	4798      	blx	r3
 801594a:	3601      	adds	r6, #1
 801594c:	e7ee      	b.n	801592c <__libc_init_array+0xc>
 801594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015952:	4798      	blx	r3
 8015954:	3601      	adds	r6, #1
 8015956:	e7f2      	b.n	801593e <__libc_init_array+0x1e>
 8015958:	08017460 	.word	0x08017460
 801595c:	08017460 	.word	0x08017460
 8015960:	08017460 	.word	0x08017460
 8015964:	08017464 	.word	0x08017464

08015968 <__retarget_lock_init_recursive>:
 8015968:	4770      	bx	lr

0801596a <__retarget_lock_acquire_recursive>:
 801596a:	4770      	bx	lr

0801596c <__retarget_lock_release_recursive>:
 801596c:	4770      	bx	lr

0801596e <strcpy>:
 801596e:	4603      	mov	r3, r0
 8015970:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015974:	f803 2b01 	strb.w	r2, [r3], #1
 8015978:	2a00      	cmp	r2, #0
 801597a:	d1f9      	bne.n	8015970 <strcpy+0x2>
 801597c:	4770      	bx	lr

0801597e <memcpy>:
 801597e:	440a      	add	r2, r1
 8015980:	4291      	cmp	r1, r2
 8015982:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015986:	d100      	bne.n	801598a <memcpy+0xc>
 8015988:	4770      	bx	lr
 801598a:	b510      	push	{r4, lr}
 801598c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015994:	4291      	cmp	r1, r2
 8015996:	d1f9      	bne.n	801598c <memcpy+0xe>
 8015998:	bd10      	pop	{r4, pc}
	...

0801599c <__assert_func>:
 801599c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801599e:	4614      	mov	r4, r2
 80159a0:	461a      	mov	r2, r3
 80159a2:	4b09      	ldr	r3, [pc, #36]	@ (80159c8 <__assert_func+0x2c>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	4605      	mov	r5, r0
 80159a8:	68d8      	ldr	r0, [r3, #12]
 80159aa:	b954      	cbnz	r4, 80159c2 <__assert_func+0x26>
 80159ac:	4b07      	ldr	r3, [pc, #28]	@ (80159cc <__assert_func+0x30>)
 80159ae:	461c      	mov	r4, r3
 80159b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159b4:	9100      	str	r1, [sp, #0]
 80159b6:	462b      	mov	r3, r5
 80159b8:	4905      	ldr	r1, [pc, #20]	@ (80159d0 <__assert_func+0x34>)
 80159ba:	f000 fd3f 	bl	801643c <fiprintf>
 80159be:	f000 fde3 	bl	8016588 <abort>
 80159c2:	4b04      	ldr	r3, [pc, #16]	@ (80159d4 <__assert_func+0x38>)
 80159c4:	e7f4      	b.n	80159b0 <__assert_func+0x14>
 80159c6:	bf00      	nop
 80159c8:	20000118 	.word	0x20000118
 80159cc:	08017423 	.word	0x08017423
 80159d0:	080173f5 	.word	0x080173f5
 80159d4:	080173e8 	.word	0x080173e8

080159d8 <__env_lock>:
 80159d8:	4801      	ldr	r0, [pc, #4]	@ (80159e0 <__env_lock+0x8>)
 80159da:	f7ff bfc6 	b.w	801596a <__retarget_lock_acquire_recursive>
 80159de:	bf00      	nop
 80159e0:	2000dd00 	.word	0x2000dd00

080159e4 <__env_unlock>:
 80159e4:	4801      	ldr	r0, [pc, #4]	@ (80159ec <__env_unlock+0x8>)
 80159e6:	f7ff bfc1 	b.w	801596c <__retarget_lock_release_recursive>
 80159ea:	bf00      	nop
 80159ec:	2000dd00 	.word	0x2000dd00

080159f0 <_free_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	4605      	mov	r5, r0
 80159f4:	2900      	cmp	r1, #0
 80159f6:	d041      	beq.n	8015a7c <_free_r+0x8c>
 80159f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159fc:	1f0c      	subs	r4, r1, #4
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	bfb8      	it	lt
 8015a02:	18e4      	addlt	r4, r4, r3
 8015a04:	f7ff fbd8 	bl	80151b8 <__malloc_lock>
 8015a08:	4a1d      	ldr	r2, [pc, #116]	@ (8015a80 <_free_r+0x90>)
 8015a0a:	6813      	ldr	r3, [r2, #0]
 8015a0c:	b933      	cbnz	r3, 8015a1c <_free_r+0x2c>
 8015a0e:	6063      	str	r3, [r4, #4]
 8015a10:	6014      	str	r4, [r2, #0]
 8015a12:	4628      	mov	r0, r5
 8015a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a18:	f7ff bbd4 	b.w	80151c4 <__malloc_unlock>
 8015a1c:	42a3      	cmp	r3, r4
 8015a1e:	d908      	bls.n	8015a32 <_free_r+0x42>
 8015a20:	6820      	ldr	r0, [r4, #0]
 8015a22:	1821      	adds	r1, r4, r0
 8015a24:	428b      	cmp	r3, r1
 8015a26:	bf01      	itttt	eq
 8015a28:	6819      	ldreq	r1, [r3, #0]
 8015a2a:	685b      	ldreq	r3, [r3, #4]
 8015a2c:	1809      	addeq	r1, r1, r0
 8015a2e:	6021      	streq	r1, [r4, #0]
 8015a30:	e7ed      	b.n	8015a0e <_free_r+0x1e>
 8015a32:	461a      	mov	r2, r3
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	b10b      	cbz	r3, 8015a3c <_free_r+0x4c>
 8015a38:	42a3      	cmp	r3, r4
 8015a3a:	d9fa      	bls.n	8015a32 <_free_r+0x42>
 8015a3c:	6811      	ldr	r1, [r2, #0]
 8015a3e:	1850      	adds	r0, r2, r1
 8015a40:	42a0      	cmp	r0, r4
 8015a42:	d10b      	bne.n	8015a5c <_free_r+0x6c>
 8015a44:	6820      	ldr	r0, [r4, #0]
 8015a46:	4401      	add	r1, r0
 8015a48:	1850      	adds	r0, r2, r1
 8015a4a:	4283      	cmp	r3, r0
 8015a4c:	6011      	str	r1, [r2, #0]
 8015a4e:	d1e0      	bne.n	8015a12 <_free_r+0x22>
 8015a50:	6818      	ldr	r0, [r3, #0]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	6053      	str	r3, [r2, #4]
 8015a56:	4408      	add	r0, r1
 8015a58:	6010      	str	r0, [r2, #0]
 8015a5a:	e7da      	b.n	8015a12 <_free_r+0x22>
 8015a5c:	d902      	bls.n	8015a64 <_free_r+0x74>
 8015a5e:	230c      	movs	r3, #12
 8015a60:	602b      	str	r3, [r5, #0]
 8015a62:	e7d6      	b.n	8015a12 <_free_r+0x22>
 8015a64:	6820      	ldr	r0, [r4, #0]
 8015a66:	1821      	adds	r1, r4, r0
 8015a68:	428b      	cmp	r3, r1
 8015a6a:	bf04      	itt	eq
 8015a6c:	6819      	ldreq	r1, [r3, #0]
 8015a6e:	685b      	ldreq	r3, [r3, #4]
 8015a70:	6063      	str	r3, [r4, #4]
 8015a72:	bf04      	itt	eq
 8015a74:	1809      	addeq	r1, r1, r0
 8015a76:	6021      	streq	r1, [r4, #0]
 8015a78:	6054      	str	r4, [r2, #4]
 8015a7a:	e7ca      	b.n	8015a12 <_free_r+0x22>
 8015a7c:	bd38      	pop	{r3, r4, r5, pc}
 8015a7e:	bf00      	nop
 8015a80:	2000dbbc 	.word	0x2000dbbc

08015a84 <_malloc_usable_size_r>:
 8015a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a88:	1f18      	subs	r0, r3, #4
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	bfbc      	itt	lt
 8015a8e:	580b      	ldrlt	r3, [r1, r0]
 8015a90:	18c0      	addlt	r0, r0, r3
 8015a92:	4770      	bx	lr

08015a94 <__ssputs_r>:
 8015a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a98:	688e      	ldr	r6, [r1, #8]
 8015a9a:	461f      	mov	r7, r3
 8015a9c:	42be      	cmp	r6, r7
 8015a9e:	680b      	ldr	r3, [r1, #0]
 8015aa0:	4682      	mov	sl, r0
 8015aa2:	460c      	mov	r4, r1
 8015aa4:	4690      	mov	r8, r2
 8015aa6:	d82d      	bhi.n	8015b04 <__ssputs_r+0x70>
 8015aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015aac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ab0:	d026      	beq.n	8015b00 <__ssputs_r+0x6c>
 8015ab2:	6965      	ldr	r5, [r4, #20]
 8015ab4:	6909      	ldr	r1, [r1, #16]
 8015ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015aba:	eba3 0901 	sub.w	r9, r3, r1
 8015abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ac2:	1c7b      	adds	r3, r7, #1
 8015ac4:	444b      	add	r3, r9
 8015ac6:	106d      	asrs	r5, r5, #1
 8015ac8:	429d      	cmp	r5, r3
 8015aca:	bf38      	it	cc
 8015acc:	461d      	movcc	r5, r3
 8015ace:	0553      	lsls	r3, r2, #21
 8015ad0:	d527      	bpl.n	8015b22 <__ssputs_r+0x8e>
 8015ad2:	4629      	mov	r1, r5
 8015ad4:	f7ff faf0 	bl	80150b8 <_malloc_r>
 8015ad8:	4606      	mov	r6, r0
 8015ada:	b360      	cbz	r0, 8015b36 <__ssputs_r+0xa2>
 8015adc:	6921      	ldr	r1, [r4, #16]
 8015ade:	464a      	mov	r2, r9
 8015ae0:	f7ff ff4d 	bl	801597e <memcpy>
 8015ae4:	89a3      	ldrh	r3, [r4, #12]
 8015ae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015aee:	81a3      	strh	r3, [r4, #12]
 8015af0:	6126      	str	r6, [r4, #16]
 8015af2:	6165      	str	r5, [r4, #20]
 8015af4:	444e      	add	r6, r9
 8015af6:	eba5 0509 	sub.w	r5, r5, r9
 8015afa:	6026      	str	r6, [r4, #0]
 8015afc:	60a5      	str	r5, [r4, #8]
 8015afe:	463e      	mov	r6, r7
 8015b00:	42be      	cmp	r6, r7
 8015b02:	d900      	bls.n	8015b06 <__ssputs_r+0x72>
 8015b04:	463e      	mov	r6, r7
 8015b06:	6820      	ldr	r0, [r4, #0]
 8015b08:	4632      	mov	r2, r6
 8015b0a:	4641      	mov	r1, r8
 8015b0c:	f7ff fdfe 	bl	801570c <memmove>
 8015b10:	68a3      	ldr	r3, [r4, #8]
 8015b12:	1b9b      	subs	r3, r3, r6
 8015b14:	60a3      	str	r3, [r4, #8]
 8015b16:	6823      	ldr	r3, [r4, #0]
 8015b18:	4433      	add	r3, r6
 8015b1a:	6023      	str	r3, [r4, #0]
 8015b1c:	2000      	movs	r0, #0
 8015b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b22:	462a      	mov	r2, r5
 8015b24:	f7ff fbc8 	bl	80152b8 <_realloc_r>
 8015b28:	4606      	mov	r6, r0
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	d1e0      	bne.n	8015af0 <__ssputs_r+0x5c>
 8015b2e:	6921      	ldr	r1, [r4, #16]
 8015b30:	4650      	mov	r0, sl
 8015b32:	f7ff ff5d 	bl	80159f0 <_free_r>
 8015b36:	230c      	movs	r3, #12
 8015b38:	f8ca 3000 	str.w	r3, [sl]
 8015b3c:	89a3      	ldrh	r3, [r4, #12]
 8015b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b42:	81a3      	strh	r3, [r4, #12]
 8015b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b48:	e7e9      	b.n	8015b1e <__ssputs_r+0x8a>
	...

08015b4c <_svfiprintf_r>:
 8015b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b50:	4698      	mov	r8, r3
 8015b52:	898b      	ldrh	r3, [r1, #12]
 8015b54:	061b      	lsls	r3, r3, #24
 8015b56:	b09d      	sub	sp, #116	@ 0x74
 8015b58:	4607      	mov	r7, r0
 8015b5a:	460d      	mov	r5, r1
 8015b5c:	4614      	mov	r4, r2
 8015b5e:	d510      	bpl.n	8015b82 <_svfiprintf_r+0x36>
 8015b60:	690b      	ldr	r3, [r1, #16]
 8015b62:	b973      	cbnz	r3, 8015b82 <_svfiprintf_r+0x36>
 8015b64:	2140      	movs	r1, #64	@ 0x40
 8015b66:	f7ff faa7 	bl	80150b8 <_malloc_r>
 8015b6a:	6028      	str	r0, [r5, #0]
 8015b6c:	6128      	str	r0, [r5, #16]
 8015b6e:	b930      	cbnz	r0, 8015b7e <_svfiprintf_r+0x32>
 8015b70:	230c      	movs	r3, #12
 8015b72:	603b      	str	r3, [r7, #0]
 8015b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b78:	b01d      	add	sp, #116	@ 0x74
 8015b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b7e:	2340      	movs	r3, #64	@ 0x40
 8015b80:	616b      	str	r3, [r5, #20]
 8015b82:	2300      	movs	r3, #0
 8015b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b86:	2320      	movs	r3, #32
 8015b88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b90:	2330      	movs	r3, #48	@ 0x30
 8015b92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015d30 <_svfiprintf_r+0x1e4>
 8015b96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015b9a:	f04f 0901 	mov.w	r9, #1
 8015b9e:	4623      	mov	r3, r4
 8015ba0:	469a      	mov	sl, r3
 8015ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ba6:	b10a      	cbz	r2, 8015bac <_svfiprintf_r+0x60>
 8015ba8:	2a25      	cmp	r2, #37	@ 0x25
 8015baa:	d1f9      	bne.n	8015ba0 <_svfiprintf_r+0x54>
 8015bac:	ebba 0b04 	subs.w	fp, sl, r4
 8015bb0:	d00b      	beq.n	8015bca <_svfiprintf_r+0x7e>
 8015bb2:	465b      	mov	r3, fp
 8015bb4:	4622      	mov	r2, r4
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	4638      	mov	r0, r7
 8015bba:	f7ff ff6b 	bl	8015a94 <__ssputs_r>
 8015bbe:	3001      	adds	r0, #1
 8015bc0:	f000 80a7 	beq.w	8015d12 <_svfiprintf_r+0x1c6>
 8015bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bc6:	445a      	add	r2, fp
 8015bc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8015bca:	f89a 3000 	ldrb.w	r3, [sl]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	f000 809f 	beq.w	8015d12 <_svfiprintf_r+0x1c6>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015bde:	f10a 0a01 	add.w	sl, sl, #1
 8015be2:	9304      	str	r3, [sp, #16]
 8015be4:	9307      	str	r3, [sp, #28]
 8015be6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015bea:	931a      	str	r3, [sp, #104]	@ 0x68
 8015bec:	4654      	mov	r4, sl
 8015bee:	2205      	movs	r2, #5
 8015bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bf4:	484e      	ldr	r0, [pc, #312]	@ (8015d30 <_svfiprintf_r+0x1e4>)
 8015bf6:	f7ea fb2b 	bl	8000250 <memchr>
 8015bfa:	9a04      	ldr	r2, [sp, #16]
 8015bfc:	b9d8      	cbnz	r0, 8015c36 <_svfiprintf_r+0xea>
 8015bfe:	06d0      	lsls	r0, r2, #27
 8015c00:	bf44      	itt	mi
 8015c02:	2320      	movmi	r3, #32
 8015c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c08:	0711      	lsls	r1, r2, #28
 8015c0a:	bf44      	itt	mi
 8015c0c:	232b      	movmi	r3, #43	@ 0x2b
 8015c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c12:	f89a 3000 	ldrb.w	r3, [sl]
 8015c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c18:	d015      	beq.n	8015c46 <_svfiprintf_r+0xfa>
 8015c1a:	9a07      	ldr	r2, [sp, #28]
 8015c1c:	4654      	mov	r4, sl
 8015c1e:	2000      	movs	r0, #0
 8015c20:	f04f 0c0a 	mov.w	ip, #10
 8015c24:	4621      	mov	r1, r4
 8015c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c2a:	3b30      	subs	r3, #48	@ 0x30
 8015c2c:	2b09      	cmp	r3, #9
 8015c2e:	d94b      	bls.n	8015cc8 <_svfiprintf_r+0x17c>
 8015c30:	b1b0      	cbz	r0, 8015c60 <_svfiprintf_r+0x114>
 8015c32:	9207      	str	r2, [sp, #28]
 8015c34:	e014      	b.n	8015c60 <_svfiprintf_r+0x114>
 8015c36:	eba0 0308 	sub.w	r3, r0, r8
 8015c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	9304      	str	r3, [sp, #16]
 8015c42:	46a2      	mov	sl, r4
 8015c44:	e7d2      	b.n	8015bec <_svfiprintf_r+0xa0>
 8015c46:	9b03      	ldr	r3, [sp, #12]
 8015c48:	1d19      	adds	r1, r3, #4
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	9103      	str	r1, [sp, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	bfbb      	ittet	lt
 8015c52:	425b      	neglt	r3, r3
 8015c54:	f042 0202 	orrlt.w	r2, r2, #2
 8015c58:	9307      	strge	r3, [sp, #28]
 8015c5a:	9307      	strlt	r3, [sp, #28]
 8015c5c:	bfb8      	it	lt
 8015c5e:	9204      	strlt	r2, [sp, #16]
 8015c60:	7823      	ldrb	r3, [r4, #0]
 8015c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c64:	d10a      	bne.n	8015c7c <_svfiprintf_r+0x130>
 8015c66:	7863      	ldrb	r3, [r4, #1]
 8015c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c6a:	d132      	bne.n	8015cd2 <_svfiprintf_r+0x186>
 8015c6c:	9b03      	ldr	r3, [sp, #12]
 8015c6e:	1d1a      	adds	r2, r3, #4
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	9203      	str	r2, [sp, #12]
 8015c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015c78:	3402      	adds	r4, #2
 8015c7a:	9305      	str	r3, [sp, #20]
 8015c7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015d40 <_svfiprintf_r+0x1f4>
 8015c80:	7821      	ldrb	r1, [r4, #0]
 8015c82:	2203      	movs	r2, #3
 8015c84:	4650      	mov	r0, sl
 8015c86:	f7ea fae3 	bl	8000250 <memchr>
 8015c8a:	b138      	cbz	r0, 8015c9c <_svfiprintf_r+0x150>
 8015c8c:	9b04      	ldr	r3, [sp, #16]
 8015c8e:	eba0 000a 	sub.w	r0, r0, sl
 8015c92:	2240      	movs	r2, #64	@ 0x40
 8015c94:	4082      	lsls	r2, r0
 8015c96:	4313      	orrs	r3, r2
 8015c98:	3401      	adds	r4, #1
 8015c9a:	9304      	str	r3, [sp, #16]
 8015c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ca0:	4824      	ldr	r0, [pc, #144]	@ (8015d34 <_svfiprintf_r+0x1e8>)
 8015ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015ca6:	2206      	movs	r2, #6
 8015ca8:	f7ea fad2 	bl	8000250 <memchr>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d036      	beq.n	8015d1e <_svfiprintf_r+0x1d2>
 8015cb0:	4b21      	ldr	r3, [pc, #132]	@ (8015d38 <_svfiprintf_r+0x1ec>)
 8015cb2:	bb1b      	cbnz	r3, 8015cfc <_svfiprintf_r+0x1b0>
 8015cb4:	9b03      	ldr	r3, [sp, #12]
 8015cb6:	3307      	adds	r3, #7
 8015cb8:	f023 0307 	bic.w	r3, r3, #7
 8015cbc:	3308      	adds	r3, #8
 8015cbe:	9303      	str	r3, [sp, #12]
 8015cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cc2:	4433      	add	r3, r6
 8015cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cc6:	e76a      	b.n	8015b9e <_svfiprintf_r+0x52>
 8015cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ccc:	460c      	mov	r4, r1
 8015cce:	2001      	movs	r0, #1
 8015cd0:	e7a8      	b.n	8015c24 <_svfiprintf_r+0xd8>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	3401      	adds	r4, #1
 8015cd6:	9305      	str	r3, [sp, #20]
 8015cd8:	4619      	mov	r1, r3
 8015cda:	f04f 0c0a 	mov.w	ip, #10
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ce4:	3a30      	subs	r2, #48	@ 0x30
 8015ce6:	2a09      	cmp	r2, #9
 8015ce8:	d903      	bls.n	8015cf2 <_svfiprintf_r+0x1a6>
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d0c6      	beq.n	8015c7c <_svfiprintf_r+0x130>
 8015cee:	9105      	str	r1, [sp, #20]
 8015cf0:	e7c4      	b.n	8015c7c <_svfiprintf_r+0x130>
 8015cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	e7f0      	b.n	8015cde <_svfiprintf_r+0x192>
 8015cfc:	ab03      	add	r3, sp, #12
 8015cfe:	9300      	str	r3, [sp, #0]
 8015d00:	462a      	mov	r2, r5
 8015d02:	4b0e      	ldr	r3, [pc, #56]	@ (8015d3c <_svfiprintf_r+0x1f0>)
 8015d04:	a904      	add	r1, sp, #16
 8015d06:	4638      	mov	r0, r7
 8015d08:	f3af 8000 	nop.w
 8015d0c:	1c42      	adds	r2, r0, #1
 8015d0e:	4606      	mov	r6, r0
 8015d10:	d1d6      	bne.n	8015cc0 <_svfiprintf_r+0x174>
 8015d12:	89ab      	ldrh	r3, [r5, #12]
 8015d14:	065b      	lsls	r3, r3, #25
 8015d16:	f53f af2d 	bmi.w	8015b74 <_svfiprintf_r+0x28>
 8015d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d1c:	e72c      	b.n	8015b78 <_svfiprintf_r+0x2c>
 8015d1e:	ab03      	add	r3, sp, #12
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	462a      	mov	r2, r5
 8015d24:	4b05      	ldr	r3, [pc, #20]	@ (8015d3c <_svfiprintf_r+0x1f0>)
 8015d26:	a904      	add	r1, sp, #16
 8015d28:	4638      	mov	r0, r7
 8015d2a:	f000 f9bb 	bl	80160a4 <_printf_i>
 8015d2e:	e7ed      	b.n	8015d0c <_svfiprintf_r+0x1c0>
 8015d30:	08017424 	.word	0x08017424
 8015d34:	0801742e 	.word	0x0801742e
 8015d38:	00000000 	.word	0x00000000
 8015d3c:	08015a95 	.word	0x08015a95
 8015d40:	0801742a 	.word	0x0801742a

08015d44 <__sfputc_r>:
 8015d44:	6893      	ldr	r3, [r2, #8]
 8015d46:	3b01      	subs	r3, #1
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	b410      	push	{r4}
 8015d4c:	6093      	str	r3, [r2, #8]
 8015d4e:	da08      	bge.n	8015d62 <__sfputc_r+0x1e>
 8015d50:	6994      	ldr	r4, [r2, #24]
 8015d52:	42a3      	cmp	r3, r4
 8015d54:	db01      	blt.n	8015d5a <__sfputc_r+0x16>
 8015d56:	290a      	cmp	r1, #10
 8015d58:	d103      	bne.n	8015d62 <__sfputc_r+0x1e>
 8015d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d5e:	f000 bb7f 	b.w	8016460 <__swbuf_r>
 8015d62:	6813      	ldr	r3, [r2, #0]
 8015d64:	1c58      	adds	r0, r3, #1
 8015d66:	6010      	str	r0, [r2, #0]
 8015d68:	7019      	strb	r1, [r3, #0]
 8015d6a:	4608      	mov	r0, r1
 8015d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d70:	4770      	bx	lr

08015d72 <__sfputs_r>:
 8015d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d74:	4606      	mov	r6, r0
 8015d76:	460f      	mov	r7, r1
 8015d78:	4614      	mov	r4, r2
 8015d7a:	18d5      	adds	r5, r2, r3
 8015d7c:	42ac      	cmp	r4, r5
 8015d7e:	d101      	bne.n	8015d84 <__sfputs_r+0x12>
 8015d80:	2000      	movs	r0, #0
 8015d82:	e007      	b.n	8015d94 <__sfputs_r+0x22>
 8015d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d88:	463a      	mov	r2, r7
 8015d8a:	4630      	mov	r0, r6
 8015d8c:	f7ff ffda 	bl	8015d44 <__sfputc_r>
 8015d90:	1c43      	adds	r3, r0, #1
 8015d92:	d1f3      	bne.n	8015d7c <__sfputs_r+0xa>
 8015d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d98 <_vfiprintf_r>:
 8015d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d9c:	460d      	mov	r5, r1
 8015d9e:	b09d      	sub	sp, #116	@ 0x74
 8015da0:	4614      	mov	r4, r2
 8015da2:	4698      	mov	r8, r3
 8015da4:	4606      	mov	r6, r0
 8015da6:	b118      	cbz	r0, 8015db0 <_vfiprintf_r+0x18>
 8015da8:	6a03      	ldr	r3, [r0, #32]
 8015daa:	b90b      	cbnz	r3, 8015db0 <_vfiprintf_r+0x18>
 8015dac:	f7ff fbb6 	bl	801551c <__sinit>
 8015db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015db2:	07d9      	lsls	r1, r3, #31
 8015db4:	d405      	bmi.n	8015dc2 <_vfiprintf_r+0x2a>
 8015db6:	89ab      	ldrh	r3, [r5, #12]
 8015db8:	059a      	lsls	r2, r3, #22
 8015dba:	d402      	bmi.n	8015dc2 <_vfiprintf_r+0x2a>
 8015dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015dbe:	f7ff fdd4 	bl	801596a <__retarget_lock_acquire_recursive>
 8015dc2:	89ab      	ldrh	r3, [r5, #12]
 8015dc4:	071b      	lsls	r3, r3, #28
 8015dc6:	d501      	bpl.n	8015dcc <_vfiprintf_r+0x34>
 8015dc8:	692b      	ldr	r3, [r5, #16]
 8015dca:	b99b      	cbnz	r3, 8015df4 <_vfiprintf_r+0x5c>
 8015dcc:	4629      	mov	r1, r5
 8015dce:	4630      	mov	r0, r6
 8015dd0:	f000 fb84 	bl	80164dc <__swsetup_r>
 8015dd4:	b170      	cbz	r0, 8015df4 <_vfiprintf_r+0x5c>
 8015dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015dd8:	07dc      	lsls	r4, r3, #31
 8015dda:	d504      	bpl.n	8015de6 <_vfiprintf_r+0x4e>
 8015ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015de0:	b01d      	add	sp, #116	@ 0x74
 8015de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015de6:	89ab      	ldrh	r3, [r5, #12]
 8015de8:	0598      	lsls	r0, r3, #22
 8015dea:	d4f7      	bmi.n	8015ddc <_vfiprintf_r+0x44>
 8015dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015dee:	f7ff fdbd 	bl	801596c <__retarget_lock_release_recursive>
 8015df2:	e7f3      	b.n	8015ddc <_vfiprintf_r+0x44>
 8015df4:	2300      	movs	r3, #0
 8015df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015df8:	2320      	movs	r3, #32
 8015dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e02:	2330      	movs	r3, #48	@ 0x30
 8015e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015fb4 <_vfiprintf_r+0x21c>
 8015e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e0c:	f04f 0901 	mov.w	r9, #1
 8015e10:	4623      	mov	r3, r4
 8015e12:	469a      	mov	sl, r3
 8015e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e18:	b10a      	cbz	r2, 8015e1e <_vfiprintf_r+0x86>
 8015e1a:	2a25      	cmp	r2, #37	@ 0x25
 8015e1c:	d1f9      	bne.n	8015e12 <_vfiprintf_r+0x7a>
 8015e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8015e22:	d00b      	beq.n	8015e3c <_vfiprintf_r+0xa4>
 8015e24:	465b      	mov	r3, fp
 8015e26:	4622      	mov	r2, r4
 8015e28:	4629      	mov	r1, r5
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	f7ff ffa1 	bl	8015d72 <__sfputs_r>
 8015e30:	3001      	adds	r0, #1
 8015e32:	f000 80a7 	beq.w	8015f84 <_vfiprintf_r+0x1ec>
 8015e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e38:	445a      	add	r2, fp
 8015e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f000 809f 	beq.w	8015f84 <_vfiprintf_r+0x1ec>
 8015e46:	2300      	movs	r3, #0
 8015e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e50:	f10a 0a01 	add.w	sl, sl, #1
 8015e54:	9304      	str	r3, [sp, #16]
 8015e56:	9307      	str	r3, [sp, #28]
 8015e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8015e5e:	4654      	mov	r4, sl
 8015e60:	2205      	movs	r2, #5
 8015e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e66:	4853      	ldr	r0, [pc, #332]	@ (8015fb4 <_vfiprintf_r+0x21c>)
 8015e68:	f7ea f9f2 	bl	8000250 <memchr>
 8015e6c:	9a04      	ldr	r2, [sp, #16]
 8015e6e:	b9d8      	cbnz	r0, 8015ea8 <_vfiprintf_r+0x110>
 8015e70:	06d1      	lsls	r1, r2, #27
 8015e72:	bf44      	itt	mi
 8015e74:	2320      	movmi	r3, #32
 8015e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e7a:	0713      	lsls	r3, r2, #28
 8015e7c:	bf44      	itt	mi
 8015e7e:	232b      	movmi	r3, #43	@ 0x2b
 8015e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e84:	f89a 3000 	ldrb.w	r3, [sl]
 8015e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e8a:	d015      	beq.n	8015eb8 <_vfiprintf_r+0x120>
 8015e8c:	9a07      	ldr	r2, [sp, #28]
 8015e8e:	4654      	mov	r4, sl
 8015e90:	2000      	movs	r0, #0
 8015e92:	f04f 0c0a 	mov.w	ip, #10
 8015e96:	4621      	mov	r1, r4
 8015e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e9c:	3b30      	subs	r3, #48	@ 0x30
 8015e9e:	2b09      	cmp	r3, #9
 8015ea0:	d94b      	bls.n	8015f3a <_vfiprintf_r+0x1a2>
 8015ea2:	b1b0      	cbz	r0, 8015ed2 <_vfiprintf_r+0x13a>
 8015ea4:	9207      	str	r2, [sp, #28]
 8015ea6:	e014      	b.n	8015ed2 <_vfiprintf_r+0x13a>
 8015ea8:	eba0 0308 	sub.w	r3, r0, r8
 8015eac:	fa09 f303 	lsl.w	r3, r9, r3
 8015eb0:	4313      	orrs	r3, r2
 8015eb2:	9304      	str	r3, [sp, #16]
 8015eb4:	46a2      	mov	sl, r4
 8015eb6:	e7d2      	b.n	8015e5e <_vfiprintf_r+0xc6>
 8015eb8:	9b03      	ldr	r3, [sp, #12]
 8015eba:	1d19      	adds	r1, r3, #4
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	9103      	str	r1, [sp, #12]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	bfbb      	ittet	lt
 8015ec4:	425b      	neglt	r3, r3
 8015ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8015eca:	9307      	strge	r3, [sp, #28]
 8015ecc:	9307      	strlt	r3, [sp, #28]
 8015ece:	bfb8      	it	lt
 8015ed0:	9204      	strlt	r2, [sp, #16]
 8015ed2:	7823      	ldrb	r3, [r4, #0]
 8015ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ed6:	d10a      	bne.n	8015eee <_vfiprintf_r+0x156>
 8015ed8:	7863      	ldrb	r3, [r4, #1]
 8015eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8015edc:	d132      	bne.n	8015f44 <_vfiprintf_r+0x1ac>
 8015ede:	9b03      	ldr	r3, [sp, #12]
 8015ee0:	1d1a      	adds	r2, r3, #4
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	9203      	str	r2, [sp, #12]
 8015ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015eea:	3402      	adds	r4, #2
 8015eec:	9305      	str	r3, [sp, #20]
 8015eee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015fc4 <_vfiprintf_r+0x22c>
 8015ef2:	7821      	ldrb	r1, [r4, #0]
 8015ef4:	2203      	movs	r2, #3
 8015ef6:	4650      	mov	r0, sl
 8015ef8:	f7ea f9aa 	bl	8000250 <memchr>
 8015efc:	b138      	cbz	r0, 8015f0e <_vfiprintf_r+0x176>
 8015efe:	9b04      	ldr	r3, [sp, #16]
 8015f00:	eba0 000a 	sub.w	r0, r0, sl
 8015f04:	2240      	movs	r2, #64	@ 0x40
 8015f06:	4082      	lsls	r2, r0
 8015f08:	4313      	orrs	r3, r2
 8015f0a:	3401      	adds	r4, #1
 8015f0c:	9304      	str	r3, [sp, #16]
 8015f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f12:	4829      	ldr	r0, [pc, #164]	@ (8015fb8 <_vfiprintf_r+0x220>)
 8015f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f18:	2206      	movs	r2, #6
 8015f1a:	f7ea f999 	bl	8000250 <memchr>
 8015f1e:	2800      	cmp	r0, #0
 8015f20:	d03f      	beq.n	8015fa2 <_vfiprintf_r+0x20a>
 8015f22:	4b26      	ldr	r3, [pc, #152]	@ (8015fbc <_vfiprintf_r+0x224>)
 8015f24:	bb1b      	cbnz	r3, 8015f6e <_vfiprintf_r+0x1d6>
 8015f26:	9b03      	ldr	r3, [sp, #12]
 8015f28:	3307      	adds	r3, #7
 8015f2a:	f023 0307 	bic.w	r3, r3, #7
 8015f2e:	3308      	adds	r3, #8
 8015f30:	9303      	str	r3, [sp, #12]
 8015f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f34:	443b      	add	r3, r7
 8015f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f38:	e76a      	b.n	8015e10 <_vfiprintf_r+0x78>
 8015f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f3e:	460c      	mov	r4, r1
 8015f40:	2001      	movs	r0, #1
 8015f42:	e7a8      	b.n	8015e96 <_vfiprintf_r+0xfe>
 8015f44:	2300      	movs	r3, #0
 8015f46:	3401      	adds	r4, #1
 8015f48:	9305      	str	r3, [sp, #20]
 8015f4a:	4619      	mov	r1, r3
 8015f4c:	f04f 0c0a 	mov.w	ip, #10
 8015f50:	4620      	mov	r0, r4
 8015f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f56:	3a30      	subs	r2, #48	@ 0x30
 8015f58:	2a09      	cmp	r2, #9
 8015f5a:	d903      	bls.n	8015f64 <_vfiprintf_r+0x1cc>
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d0c6      	beq.n	8015eee <_vfiprintf_r+0x156>
 8015f60:	9105      	str	r1, [sp, #20]
 8015f62:	e7c4      	b.n	8015eee <_vfiprintf_r+0x156>
 8015f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f68:	4604      	mov	r4, r0
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	e7f0      	b.n	8015f50 <_vfiprintf_r+0x1b8>
 8015f6e:	ab03      	add	r3, sp, #12
 8015f70:	9300      	str	r3, [sp, #0]
 8015f72:	462a      	mov	r2, r5
 8015f74:	4b12      	ldr	r3, [pc, #72]	@ (8015fc0 <_vfiprintf_r+0x228>)
 8015f76:	a904      	add	r1, sp, #16
 8015f78:	4630      	mov	r0, r6
 8015f7a:	f3af 8000 	nop.w
 8015f7e:	4607      	mov	r7, r0
 8015f80:	1c78      	adds	r0, r7, #1
 8015f82:	d1d6      	bne.n	8015f32 <_vfiprintf_r+0x19a>
 8015f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f86:	07d9      	lsls	r1, r3, #31
 8015f88:	d405      	bmi.n	8015f96 <_vfiprintf_r+0x1fe>
 8015f8a:	89ab      	ldrh	r3, [r5, #12]
 8015f8c:	059a      	lsls	r2, r3, #22
 8015f8e:	d402      	bmi.n	8015f96 <_vfiprintf_r+0x1fe>
 8015f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f92:	f7ff fceb 	bl	801596c <__retarget_lock_release_recursive>
 8015f96:	89ab      	ldrh	r3, [r5, #12]
 8015f98:	065b      	lsls	r3, r3, #25
 8015f9a:	f53f af1f 	bmi.w	8015ddc <_vfiprintf_r+0x44>
 8015f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fa0:	e71e      	b.n	8015de0 <_vfiprintf_r+0x48>
 8015fa2:	ab03      	add	r3, sp, #12
 8015fa4:	9300      	str	r3, [sp, #0]
 8015fa6:	462a      	mov	r2, r5
 8015fa8:	4b05      	ldr	r3, [pc, #20]	@ (8015fc0 <_vfiprintf_r+0x228>)
 8015faa:	a904      	add	r1, sp, #16
 8015fac:	4630      	mov	r0, r6
 8015fae:	f000 f879 	bl	80160a4 <_printf_i>
 8015fb2:	e7e4      	b.n	8015f7e <_vfiprintf_r+0x1e6>
 8015fb4:	08017424 	.word	0x08017424
 8015fb8:	0801742e 	.word	0x0801742e
 8015fbc:	00000000 	.word	0x00000000
 8015fc0:	08015d73 	.word	0x08015d73
 8015fc4:	0801742a 	.word	0x0801742a

08015fc8 <_printf_common>:
 8015fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fcc:	4616      	mov	r6, r2
 8015fce:	4698      	mov	r8, r3
 8015fd0:	688a      	ldr	r2, [r1, #8]
 8015fd2:	690b      	ldr	r3, [r1, #16]
 8015fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	bfb8      	it	lt
 8015fdc:	4613      	movlt	r3, r2
 8015fde:	6033      	str	r3, [r6, #0]
 8015fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015fe4:	4607      	mov	r7, r0
 8015fe6:	460c      	mov	r4, r1
 8015fe8:	b10a      	cbz	r2, 8015fee <_printf_common+0x26>
 8015fea:	3301      	adds	r3, #1
 8015fec:	6033      	str	r3, [r6, #0]
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	0699      	lsls	r1, r3, #26
 8015ff2:	bf42      	ittt	mi
 8015ff4:	6833      	ldrmi	r3, [r6, #0]
 8015ff6:	3302      	addmi	r3, #2
 8015ff8:	6033      	strmi	r3, [r6, #0]
 8015ffa:	6825      	ldr	r5, [r4, #0]
 8015ffc:	f015 0506 	ands.w	r5, r5, #6
 8016000:	d106      	bne.n	8016010 <_printf_common+0x48>
 8016002:	f104 0a19 	add.w	sl, r4, #25
 8016006:	68e3      	ldr	r3, [r4, #12]
 8016008:	6832      	ldr	r2, [r6, #0]
 801600a:	1a9b      	subs	r3, r3, r2
 801600c:	42ab      	cmp	r3, r5
 801600e:	dc26      	bgt.n	801605e <_printf_common+0x96>
 8016010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016014:	6822      	ldr	r2, [r4, #0]
 8016016:	3b00      	subs	r3, #0
 8016018:	bf18      	it	ne
 801601a:	2301      	movne	r3, #1
 801601c:	0692      	lsls	r2, r2, #26
 801601e:	d42b      	bmi.n	8016078 <_printf_common+0xb0>
 8016020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016024:	4641      	mov	r1, r8
 8016026:	4638      	mov	r0, r7
 8016028:	47c8      	blx	r9
 801602a:	3001      	adds	r0, #1
 801602c:	d01e      	beq.n	801606c <_printf_common+0xa4>
 801602e:	6823      	ldr	r3, [r4, #0]
 8016030:	6922      	ldr	r2, [r4, #16]
 8016032:	f003 0306 	and.w	r3, r3, #6
 8016036:	2b04      	cmp	r3, #4
 8016038:	bf02      	ittt	eq
 801603a:	68e5      	ldreq	r5, [r4, #12]
 801603c:	6833      	ldreq	r3, [r6, #0]
 801603e:	1aed      	subeq	r5, r5, r3
 8016040:	68a3      	ldr	r3, [r4, #8]
 8016042:	bf0c      	ite	eq
 8016044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016048:	2500      	movne	r5, #0
 801604a:	4293      	cmp	r3, r2
 801604c:	bfc4      	itt	gt
 801604e:	1a9b      	subgt	r3, r3, r2
 8016050:	18ed      	addgt	r5, r5, r3
 8016052:	2600      	movs	r6, #0
 8016054:	341a      	adds	r4, #26
 8016056:	42b5      	cmp	r5, r6
 8016058:	d11a      	bne.n	8016090 <_printf_common+0xc8>
 801605a:	2000      	movs	r0, #0
 801605c:	e008      	b.n	8016070 <_printf_common+0xa8>
 801605e:	2301      	movs	r3, #1
 8016060:	4652      	mov	r2, sl
 8016062:	4641      	mov	r1, r8
 8016064:	4638      	mov	r0, r7
 8016066:	47c8      	blx	r9
 8016068:	3001      	adds	r0, #1
 801606a:	d103      	bne.n	8016074 <_printf_common+0xac>
 801606c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016074:	3501      	adds	r5, #1
 8016076:	e7c6      	b.n	8016006 <_printf_common+0x3e>
 8016078:	18e1      	adds	r1, r4, r3
 801607a:	1c5a      	adds	r2, r3, #1
 801607c:	2030      	movs	r0, #48	@ 0x30
 801607e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016082:	4422      	add	r2, r4
 8016084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801608c:	3302      	adds	r3, #2
 801608e:	e7c7      	b.n	8016020 <_printf_common+0x58>
 8016090:	2301      	movs	r3, #1
 8016092:	4622      	mov	r2, r4
 8016094:	4641      	mov	r1, r8
 8016096:	4638      	mov	r0, r7
 8016098:	47c8      	blx	r9
 801609a:	3001      	adds	r0, #1
 801609c:	d0e6      	beq.n	801606c <_printf_common+0xa4>
 801609e:	3601      	adds	r6, #1
 80160a0:	e7d9      	b.n	8016056 <_printf_common+0x8e>
	...

080160a4 <_printf_i>:
 80160a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160a8:	7e0f      	ldrb	r7, [r1, #24]
 80160aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80160ac:	2f78      	cmp	r7, #120	@ 0x78
 80160ae:	4691      	mov	r9, r2
 80160b0:	4680      	mov	r8, r0
 80160b2:	460c      	mov	r4, r1
 80160b4:	469a      	mov	sl, r3
 80160b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80160ba:	d807      	bhi.n	80160cc <_printf_i+0x28>
 80160bc:	2f62      	cmp	r7, #98	@ 0x62
 80160be:	d80a      	bhi.n	80160d6 <_printf_i+0x32>
 80160c0:	2f00      	cmp	r7, #0
 80160c2:	f000 80d2 	beq.w	801626a <_printf_i+0x1c6>
 80160c6:	2f58      	cmp	r7, #88	@ 0x58
 80160c8:	f000 80b9 	beq.w	801623e <_printf_i+0x19a>
 80160cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80160d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80160d4:	e03a      	b.n	801614c <_printf_i+0xa8>
 80160d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80160da:	2b15      	cmp	r3, #21
 80160dc:	d8f6      	bhi.n	80160cc <_printf_i+0x28>
 80160de:	a101      	add	r1, pc, #4	@ (adr r1, 80160e4 <_printf_i+0x40>)
 80160e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80160e4:	0801613d 	.word	0x0801613d
 80160e8:	08016151 	.word	0x08016151
 80160ec:	080160cd 	.word	0x080160cd
 80160f0:	080160cd 	.word	0x080160cd
 80160f4:	080160cd 	.word	0x080160cd
 80160f8:	080160cd 	.word	0x080160cd
 80160fc:	08016151 	.word	0x08016151
 8016100:	080160cd 	.word	0x080160cd
 8016104:	080160cd 	.word	0x080160cd
 8016108:	080160cd 	.word	0x080160cd
 801610c:	080160cd 	.word	0x080160cd
 8016110:	08016251 	.word	0x08016251
 8016114:	0801617b 	.word	0x0801617b
 8016118:	0801620b 	.word	0x0801620b
 801611c:	080160cd 	.word	0x080160cd
 8016120:	080160cd 	.word	0x080160cd
 8016124:	08016273 	.word	0x08016273
 8016128:	080160cd 	.word	0x080160cd
 801612c:	0801617b 	.word	0x0801617b
 8016130:	080160cd 	.word	0x080160cd
 8016134:	080160cd 	.word	0x080160cd
 8016138:	08016213 	.word	0x08016213
 801613c:	6833      	ldr	r3, [r6, #0]
 801613e:	1d1a      	adds	r2, r3, #4
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	6032      	str	r2, [r6, #0]
 8016144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801614c:	2301      	movs	r3, #1
 801614e:	e09d      	b.n	801628c <_printf_i+0x1e8>
 8016150:	6833      	ldr	r3, [r6, #0]
 8016152:	6820      	ldr	r0, [r4, #0]
 8016154:	1d19      	adds	r1, r3, #4
 8016156:	6031      	str	r1, [r6, #0]
 8016158:	0606      	lsls	r6, r0, #24
 801615a:	d501      	bpl.n	8016160 <_printf_i+0xbc>
 801615c:	681d      	ldr	r5, [r3, #0]
 801615e:	e003      	b.n	8016168 <_printf_i+0xc4>
 8016160:	0645      	lsls	r5, r0, #25
 8016162:	d5fb      	bpl.n	801615c <_printf_i+0xb8>
 8016164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016168:	2d00      	cmp	r5, #0
 801616a:	da03      	bge.n	8016174 <_printf_i+0xd0>
 801616c:	232d      	movs	r3, #45	@ 0x2d
 801616e:	426d      	negs	r5, r5
 8016170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016174:	4859      	ldr	r0, [pc, #356]	@ (80162dc <_printf_i+0x238>)
 8016176:	230a      	movs	r3, #10
 8016178:	e011      	b.n	801619e <_printf_i+0xfa>
 801617a:	6821      	ldr	r1, [r4, #0]
 801617c:	6833      	ldr	r3, [r6, #0]
 801617e:	0608      	lsls	r0, r1, #24
 8016180:	f853 5b04 	ldr.w	r5, [r3], #4
 8016184:	d402      	bmi.n	801618c <_printf_i+0xe8>
 8016186:	0649      	lsls	r1, r1, #25
 8016188:	bf48      	it	mi
 801618a:	b2ad      	uxthmi	r5, r5
 801618c:	2f6f      	cmp	r7, #111	@ 0x6f
 801618e:	4853      	ldr	r0, [pc, #332]	@ (80162dc <_printf_i+0x238>)
 8016190:	6033      	str	r3, [r6, #0]
 8016192:	bf14      	ite	ne
 8016194:	230a      	movne	r3, #10
 8016196:	2308      	moveq	r3, #8
 8016198:	2100      	movs	r1, #0
 801619a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801619e:	6866      	ldr	r6, [r4, #4]
 80161a0:	60a6      	str	r6, [r4, #8]
 80161a2:	2e00      	cmp	r6, #0
 80161a4:	bfa2      	ittt	ge
 80161a6:	6821      	ldrge	r1, [r4, #0]
 80161a8:	f021 0104 	bicge.w	r1, r1, #4
 80161ac:	6021      	strge	r1, [r4, #0]
 80161ae:	b90d      	cbnz	r5, 80161b4 <_printf_i+0x110>
 80161b0:	2e00      	cmp	r6, #0
 80161b2:	d04b      	beq.n	801624c <_printf_i+0x1a8>
 80161b4:	4616      	mov	r6, r2
 80161b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80161ba:	fb03 5711 	mls	r7, r3, r1, r5
 80161be:	5dc7      	ldrb	r7, [r0, r7]
 80161c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80161c4:	462f      	mov	r7, r5
 80161c6:	42bb      	cmp	r3, r7
 80161c8:	460d      	mov	r5, r1
 80161ca:	d9f4      	bls.n	80161b6 <_printf_i+0x112>
 80161cc:	2b08      	cmp	r3, #8
 80161ce:	d10b      	bne.n	80161e8 <_printf_i+0x144>
 80161d0:	6823      	ldr	r3, [r4, #0]
 80161d2:	07df      	lsls	r7, r3, #31
 80161d4:	d508      	bpl.n	80161e8 <_printf_i+0x144>
 80161d6:	6923      	ldr	r3, [r4, #16]
 80161d8:	6861      	ldr	r1, [r4, #4]
 80161da:	4299      	cmp	r1, r3
 80161dc:	bfde      	ittt	le
 80161de:	2330      	movle	r3, #48	@ 0x30
 80161e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80161e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80161e8:	1b92      	subs	r2, r2, r6
 80161ea:	6122      	str	r2, [r4, #16]
 80161ec:	f8cd a000 	str.w	sl, [sp]
 80161f0:	464b      	mov	r3, r9
 80161f2:	aa03      	add	r2, sp, #12
 80161f4:	4621      	mov	r1, r4
 80161f6:	4640      	mov	r0, r8
 80161f8:	f7ff fee6 	bl	8015fc8 <_printf_common>
 80161fc:	3001      	adds	r0, #1
 80161fe:	d14a      	bne.n	8016296 <_printf_i+0x1f2>
 8016200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016204:	b004      	add	sp, #16
 8016206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801620a:	6823      	ldr	r3, [r4, #0]
 801620c:	f043 0320 	orr.w	r3, r3, #32
 8016210:	6023      	str	r3, [r4, #0]
 8016212:	4833      	ldr	r0, [pc, #204]	@ (80162e0 <_printf_i+0x23c>)
 8016214:	2778      	movs	r7, #120	@ 0x78
 8016216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801621a:	6823      	ldr	r3, [r4, #0]
 801621c:	6831      	ldr	r1, [r6, #0]
 801621e:	061f      	lsls	r7, r3, #24
 8016220:	f851 5b04 	ldr.w	r5, [r1], #4
 8016224:	d402      	bmi.n	801622c <_printf_i+0x188>
 8016226:	065f      	lsls	r7, r3, #25
 8016228:	bf48      	it	mi
 801622a:	b2ad      	uxthmi	r5, r5
 801622c:	6031      	str	r1, [r6, #0]
 801622e:	07d9      	lsls	r1, r3, #31
 8016230:	bf44      	itt	mi
 8016232:	f043 0320 	orrmi.w	r3, r3, #32
 8016236:	6023      	strmi	r3, [r4, #0]
 8016238:	b11d      	cbz	r5, 8016242 <_printf_i+0x19e>
 801623a:	2310      	movs	r3, #16
 801623c:	e7ac      	b.n	8016198 <_printf_i+0xf4>
 801623e:	4827      	ldr	r0, [pc, #156]	@ (80162dc <_printf_i+0x238>)
 8016240:	e7e9      	b.n	8016216 <_printf_i+0x172>
 8016242:	6823      	ldr	r3, [r4, #0]
 8016244:	f023 0320 	bic.w	r3, r3, #32
 8016248:	6023      	str	r3, [r4, #0]
 801624a:	e7f6      	b.n	801623a <_printf_i+0x196>
 801624c:	4616      	mov	r6, r2
 801624e:	e7bd      	b.n	80161cc <_printf_i+0x128>
 8016250:	6833      	ldr	r3, [r6, #0]
 8016252:	6825      	ldr	r5, [r4, #0]
 8016254:	6961      	ldr	r1, [r4, #20]
 8016256:	1d18      	adds	r0, r3, #4
 8016258:	6030      	str	r0, [r6, #0]
 801625a:	062e      	lsls	r6, r5, #24
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	d501      	bpl.n	8016264 <_printf_i+0x1c0>
 8016260:	6019      	str	r1, [r3, #0]
 8016262:	e002      	b.n	801626a <_printf_i+0x1c6>
 8016264:	0668      	lsls	r0, r5, #25
 8016266:	d5fb      	bpl.n	8016260 <_printf_i+0x1bc>
 8016268:	8019      	strh	r1, [r3, #0]
 801626a:	2300      	movs	r3, #0
 801626c:	6123      	str	r3, [r4, #16]
 801626e:	4616      	mov	r6, r2
 8016270:	e7bc      	b.n	80161ec <_printf_i+0x148>
 8016272:	6833      	ldr	r3, [r6, #0]
 8016274:	1d1a      	adds	r2, r3, #4
 8016276:	6032      	str	r2, [r6, #0]
 8016278:	681e      	ldr	r6, [r3, #0]
 801627a:	6862      	ldr	r2, [r4, #4]
 801627c:	2100      	movs	r1, #0
 801627e:	4630      	mov	r0, r6
 8016280:	f7e9 ffe6 	bl	8000250 <memchr>
 8016284:	b108      	cbz	r0, 801628a <_printf_i+0x1e6>
 8016286:	1b80      	subs	r0, r0, r6
 8016288:	6060      	str	r0, [r4, #4]
 801628a:	6863      	ldr	r3, [r4, #4]
 801628c:	6123      	str	r3, [r4, #16]
 801628e:	2300      	movs	r3, #0
 8016290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016294:	e7aa      	b.n	80161ec <_printf_i+0x148>
 8016296:	6923      	ldr	r3, [r4, #16]
 8016298:	4632      	mov	r2, r6
 801629a:	4649      	mov	r1, r9
 801629c:	4640      	mov	r0, r8
 801629e:	47d0      	blx	sl
 80162a0:	3001      	adds	r0, #1
 80162a2:	d0ad      	beq.n	8016200 <_printf_i+0x15c>
 80162a4:	6823      	ldr	r3, [r4, #0]
 80162a6:	079b      	lsls	r3, r3, #30
 80162a8:	d413      	bmi.n	80162d2 <_printf_i+0x22e>
 80162aa:	68e0      	ldr	r0, [r4, #12]
 80162ac:	9b03      	ldr	r3, [sp, #12]
 80162ae:	4298      	cmp	r0, r3
 80162b0:	bfb8      	it	lt
 80162b2:	4618      	movlt	r0, r3
 80162b4:	e7a6      	b.n	8016204 <_printf_i+0x160>
 80162b6:	2301      	movs	r3, #1
 80162b8:	4632      	mov	r2, r6
 80162ba:	4649      	mov	r1, r9
 80162bc:	4640      	mov	r0, r8
 80162be:	47d0      	blx	sl
 80162c0:	3001      	adds	r0, #1
 80162c2:	d09d      	beq.n	8016200 <_printf_i+0x15c>
 80162c4:	3501      	adds	r5, #1
 80162c6:	68e3      	ldr	r3, [r4, #12]
 80162c8:	9903      	ldr	r1, [sp, #12]
 80162ca:	1a5b      	subs	r3, r3, r1
 80162cc:	42ab      	cmp	r3, r5
 80162ce:	dcf2      	bgt.n	80162b6 <_printf_i+0x212>
 80162d0:	e7eb      	b.n	80162aa <_printf_i+0x206>
 80162d2:	2500      	movs	r5, #0
 80162d4:	f104 0619 	add.w	r6, r4, #25
 80162d8:	e7f5      	b.n	80162c6 <_printf_i+0x222>
 80162da:	bf00      	nop
 80162dc:	08017435 	.word	0x08017435
 80162e0:	08017446 	.word	0x08017446

080162e4 <__sflush_r>:
 80162e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80162e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162ec:	0716      	lsls	r6, r2, #28
 80162ee:	4605      	mov	r5, r0
 80162f0:	460c      	mov	r4, r1
 80162f2:	d454      	bmi.n	801639e <__sflush_r+0xba>
 80162f4:	684b      	ldr	r3, [r1, #4]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	dc02      	bgt.n	8016300 <__sflush_r+0x1c>
 80162fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	dd48      	ble.n	8016392 <__sflush_r+0xae>
 8016300:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016302:	2e00      	cmp	r6, #0
 8016304:	d045      	beq.n	8016392 <__sflush_r+0xae>
 8016306:	2300      	movs	r3, #0
 8016308:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801630c:	682f      	ldr	r7, [r5, #0]
 801630e:	6a21      	ldr	r1, [r4, #32]
 8016310:	602b      	str	r3, [r5, #0]
 8016312:	d030      	beq.n	8016376 <__sflush_r+0x92>
 8016314:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016316:	89a3      	ldrh	r3, [r4, #12]
 8016318:	0759      	lsls	r1, r3, #29
 801631a:	d505      	bpl.n	8016328 <__sflush_r+0x44>
 801631c:	6863      	ldr	r3, [r4, #4]
 801631e:	1ad2      	subs	r2, r2, r3
 8016320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016322:	b10b      	cbz	r3, 8016328 <__sflush_r+0x44>
 8016324:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016326:	1ad2      	subs	r2, r2, r3
 8016328:	2300      	movs	r3, #0
 801632a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801632c:	6a21      	ldr	r1, [r4, #32]
 801632e:	4628      	mov	r0, r5
 8016330:	47b0      	blx	r6
 8016332:	1c43      	adds	r3, r0, #1
 8016334:	89a3      	ldrh	r3, [r4, #12]
 8016336:	d106      	bne.n	8016346 <__sflush_r+0x62>
 8016338:	6829      	ldr	r1, [r5, #0]
 801633a:	291d      	cmp	r1, #29
 801633c:	d82b      	bhi.n	8016396 <__sflush_r+0xb2>
 801633e:	4a2a      	ldr	r2, [pc, #168]	@ (80163e8 <__sflush_r+0x104>)
 8016340:	410a      	asrs	r2, r1
 8016342:	07d6      	lsls	r6, r2, #31
 8016344:	d427      	bmi.n	8016396 <__sflush_r+0xb2>
 8016346:	2200      	movs	r2, #0
 8016348:	6062      	str	r2, [r4, #4]
 801634a:	04d9      	lsls	r1, r3, #19
 801634c:	6922      	ldr	r2, [r4, #16]
 801634e:	6022      	str	r2, [r4, #0]
 8016350:	d504      	bpl.n	801635c <__sflush_r+0x78>
 8016352:	1c42      	adds	r2, r0, #1
 8016354:	d101      	bne.n	801635a <__sflush_r+0x76>
 8016356:	682b      	ldr	r3, [r5, #0]
 8016358:	b903      	cbnz	r3, 801635c <__sflush_r+0x78>
 801635a:	6560      	str	r0, [r4, #84]	@ 0x54
 801635c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801635e:	602f      	str	r7, [r5, #0]
 8016360:	b1b9      	cbz	r1, 8016392 <__sflush_r+0xae>
 8016362:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016366:	4299      	cmp	r1, r3
 8016368:	d002      	beq.n	8016370 <__sflush_r+0x8c>
 801636a:	4628      	mov	r0, r5
 801636c:	f7ff fb40 	bl	80159f0 <_free_r>
 8016370:	2300      	movs	r3, #0
 8016372:	6363      	str	r3, [r4, #52]	@ 0x34
 8016374:	e00d      	b.n	8016392 <__sflush_r+0xae>
 8016376:	2301      	movs	r3, #1
 8016378:	4628      	mov	r0, r5
 801637a:	47b0      	blx	r6
 801637c:	4602      	mov	r2, r0
 801637e:	1c50      	adds	r0, r2, #1
 8016380:	d1c9      	bne.n	8016316 <__sflush_r+0x32>
 8016382:	682b      	ldr	r3, [r5, #0]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d0c6      	beq.n	8016316 <__sflush_r+0x32>
 8016388:	2b1d      	cmp	r3, #29
 801638a:	d001      	beq.n	8016390 <__sflush_r+0xac>
 801638c:	2b16      	cmp	r3, #22
 801638e:	d11e      	bne.n	80163ce <__sflush_r+0xea>
 8016390:	602f      	str	r7, [r5, #0]
 8016392:	2000      	movs	r0, #0
 8016394:	e022      	b.n	80163dc <__sflush_r+0xf8>
 8016396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801639a:	b21b      	sxth	r3, r3
 801639c:	e01b      	b.n	80163d6 <__sflush_r+0xf2>
 801639e:	690f      	ldr	r7, [r1, #16]
 80163a0:	2f00      	cmp	r7, #0
 80163a2:	d0f6      	beq.n	8016392 <__sflush_r+0xae>
 80163a4:	0793      	lsls	r3, r2, #30
 80163a6:	680e      	ldr	r6, [r1, #0]
 80163a8:	bf08      	it	eq
 80163aa:	694b      	ldreq	r3, [r1, #20]
 80163ac:	600f      	str	r7, [r1, #0]
 80163ae:	bf18      	it	ne
 80163b0:	2300      	movne	r3, #0
 80163b2:	eba6 0807 	sub.w	r8, r6, r7
 80163b6:	608b      	str	r3, [r1, #8]
 80163b8:	f1b8 0f00 	cmp.w	r8, #0
 80163bc:	dde9      	ble.n	8016392 <__sflush_r+0xae>
 80163be:	6a21      	ldr	r1, [r4, #32]
 80163c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80163c2:	4643      	mov	r3, r8
 80163c4:	463a      	mov	r2, r7
 80163c6:	4628      	mov	r0, r5
 80163c8:	47b0      	blx	r6
 80163ca:	2800      	cmp	r0, #0
 80163cc:	dc08      	bgt.n	80163e0 <__sflush_r+0xfc>
 80163ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163d6:	81a3      	strh	r3, [r4, #12]
 80163d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80163dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163e0:	4407      	add	r7, r0
 80163e2:	eba8 0800 	sub.w	r8, r8, r0
 80163e6:	e7e7      	b.n	80163b8 <__sflush_r+0xd4>
 80163e8:	dfbffffe 	.word	0xdfbffffe

080163ec <_fflush_r>:
 80163ec:	b538      	push	{r3, r4, r5, lr}
 80163ee:	690b      	ldr	r3, [r1, #16]
 80163f0:	4605      	mov	r5, r0
 80163f2:	460c      	mov	r4, r1
 80163f4:	b913      	cbnz	r3, 80163fc <_fflush_r+0x10>
 80163f6:	2500      	movs	r5, #0
 80163f8:	4628      	mov	r0, r5
 80163fa:	bd38      	pop	{r3, r4, r5, pc}
 80163fc:	b118      	cbz	r0, 8016406 <_fflush_r+0x1a>
 80163fe:	6a03      	ldr	r3, [r0, #32]
 8016400:	b90b      	cbnz	r3, 8016406 <_fflush_r+0x1a>
 8016402:	f7ff f88b 	bl	801551c <__sinit>
 8016406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d0f3      	beq.n	80163f6 <_fflush_r+0xa>
 801640e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016410:	07d0      	lsls	r0, r2, #31
 8016412:	d404      	bmi.n	801641e <_fflush_r+0x32>
 8016414:	0599      	lsls	r1, r3, #22
 8016416:	d402      	bmi.n	801641e <_fflush_r+0x32>
 8016418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801641a:	f7ff faa6 	bl	801596a <__retarget_lock_acquire_recursive>
 801641e:	4628      	mov	r0, r5
 8016420:	4621      	mov	r1, r4
 8016422:	f7ff ff5f 	bl	80162e4 <__sflush_r>
 8016426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016428:	07da      	lsls	r2, r3, #31
 801642a:	4605      	mov	r5, r0
 801642c:	d4e4      	bmi.n	80163f8 <_fflush_r+0xc>
 801642e:	89a3      	ldrh	r3, [r4, #12]
 8016430:	059b      	lsls	r3, r3, #22
 8016432:	d4e1      	bmi.n	80163f8 <_fflush_r+0xc>
 8016434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016436:	f7ff fa99 	bl	801596c <__retarget_lock_release_recursive>
 801643a:	e7dd      	b.n	80163f8 <_fflush_r+0xc>

0801643c <fiprintf>:
 801643c:	b40e      	push	{r1, r2, r3}
 801643e:	b503      	push	{r0, r1, lr}
 8016440:	4601      	mov	r1, r0
 8016442:	ab03      	add	r3, sp, #12
 8016444:	4805      	ldr	r0, [pc, #20]	@ (801645c <fiprintf+0x20>)
 8016446:	f853 2b04 	ldr.w	r2, [r3], #4
 801644a:	6800      	ldr	r0, [r0, #0]
 801644c:	9301      	str	r3, [sp, #4]
 801644e:	f7ff fca3 	bl	8015d98 <_vfiprintf_r>
 8016452:	b002      	add	sp, #8
 8016454:	f85d eb04 	ldr.w	lr, [sp], #4
 8016458:	b003      	add	sp, #12
 801645a:	4770      	bx	lr
 801645c:	20000118 	.word	0x20000118

08016460 <__swbuf_r>:
 8016460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016462:	460e      	mov	r6, r1
 8016464:	4614      	mov	r4, r2
 8016466:	4605      	mov	r5, r0
 8016468:	b118      	cbz	r0, 8016472 <__swbuf_r+0x12>
 801646a:	6a03      	ldr	r3, [r0, #32]
 801646c:	b90b      	cbnz	r3, 8016472 <__swbuf_r+0x12>
 801646e:	f7ff f855 	bl	801551c <__sinit>
 8016472:	69a3      	ldr	r3, [r4, #24]
 8016474:	60a3      	str	r3, [r4, #8]
 8016476:	89a3      	ldrh	r3, [r4, #12]
 8016478:	071a      	lsls	r2, r3, #28
 801647a:	d501      	bpl.n	8016480 <__swbuf_r+0x20>
 801647c:	6923      	ldr	r3, [r4, #16]
 801647e:	b943      	cbnz	r3, 8016492 <__swbuf_r+0x32>
 8016480:	4621      	mov	r1, r4
 8016482:	4628      	mov	r0, r5
 8016484:	f000 f82a 	bl	80164dc <__swsetup_r>
 8016488:	b118      	cbz	r0, 8016492 <__swbuf_r+0x32>
 801648a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801648e:	4638      	mov	r0, r7
 8016490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016492:	6823      	ldr	r3, [r4, #0]
 8016494:	6922      	ldr	r2, [r4, #16]
 8016496:	1a98      	subs	r0, r3, r2
 8016498:	6963      	ldr	r3, [r4, #20]
 801649a:	b2f6      	uxtb	r6, r6
 801649c:	4283      	cmp	r3, r0
 801649e:	4637      	mov	r7, r6
 80164a0:	dc05      	bgt.n	80164ae <__swbuf_r+0x4e>
 80164a2:	4621      	mov	r1, r4
 80164a4:	4628      	mov	r0, r5
 80164a6:	f7ff ffa1 	bl	80163ec <_fflush_r>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	d1ed      	bne.n	801648a <__swbuf_r+0x2a>
 80164ae:	68a3      	ldr	r3, [r4, #8]
 80164b0:	3b01      	subs	r3, #1
 80164b2:	60a3      	str	r3, [r4, #8]
 80164b4:	6823      	ldr	r3, [r4, #0]
 80164b6:	1c5a      	adds	r2, r3, #1
 80164b8:	6022      	str	r2, [r4, #0]
 80164ba:	701e      	strb	r6, [r3, #0]
 80164bc:	6962      	ldr	r2, [r4, #20]
 80164be:	1c43      	adds	r3, r0, #1
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d004      	beq.n	80164ce <__swbuf_r+0x6e>
 80164c4:	89a3      	ldrh	r3, [r4, #12]
 80164c6:	07db      	lsls	r3, r3, #31
 80164c8:	d5e1      	bpl.n	801648e <__swbuf_r+0x2e>
 80164ca:	2e0a      	cmp	r6, #10
 80164cc:	d1df      	bne.n	801648e <__swbuf_r+0x2e>
 80164ce:	4621      	mov	r1, r4
 80164d0:	4628      	mov	r0, r5
 80164d2:	f7ff ff8b 	bl	80163ec <_fflush_r>
 80164d6:	2800      	cmp	r0, #0
 80164d8:	d0d9      	beq.n	801648e <__swbuf_r+0x2e>
 80164da:	e7d6      	b.n	801648a <__swbuf_r+0x2a>

080164dc <__swsetup_r>:
 80164dc:	b538      	push	{r3, r4, r5, lr}
 80164de:	4b29      	ldr	r3, [pc, #164]	@ (8016584 <__swsetup_r+0xa8>)
 80164e0:	4605      	mov	r5, r0
 80164e2:	6818      	ldr	r0, [r3, #0]
 80164e4:	460c      	mov	r4, r1
 80164e6:	b118      	cbz	r0, 80164f0 <__swsetup_r+0x14>
 80164e8:	6a03      	ldr	r3, [r0, #32]
 80164ea:	b90b      	cbnz	r3, 80164f0 <__swsetup_r+0x14>
 80164ec:	f7ff f816 	bl	801551c <__sinit>
 80164f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164f4:	0719      	lsls	r1, r3, #28
 80164f6:	d422      	bmi.n	801653e <__swsetup_r+0x62>
 80164f8:	06da      	lsls	r2, r3, #27
 80164fa:	d407      	bmi.n	801650c <__swsetup_r+0x30>
 80164fc:	2209      	movs	r2, #9
 80164fe:	602a      	str	r2, [r5, #0]
 8016500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016504:	81a3      	strh	r3, [r4, #12]
 8016506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801650a:	e033      	b.n	8016574 <__swsetup_r+0x98>
 801650c:	0758      	lsls	r0, r3, #29
 801650e:	d512      	bpl.n	8016536 <__swsetup_r+0x5a>
 8016510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016512:	b141      	cbz	r1, 8016526 <__swsetup_r+0x4a>
 8016514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016518:	4299      	cmp	r1, r3
 801651a:	d002      	beq.n	8016522 <__swsetup_r+0x46>
 801651c:	4628      	mov	r0, r5
 801651e:	f7ff fa67 	bl	80159f0 <_free_r>
 8016522:	2300      	movs	r3, #0
 8016524:	6363      	str	r3, [r4, #52]	@ 0x34
 8016526:	89a3      	ldrh	r3, [r4, #12]
 8016528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801652c:	81a3      	strh	r3, [r4, #12]
 801652e:	2300      	movs	r3, #0
 8016530:	6063      	str	r3, [r4, #4]
 8016532:	6923      	ldr	r3, [r4, #16]
 8016534:	6023      	str	r3, [r4, #0]
 8016536:	89a3      	ldrh	r3, [r4, #12]
 8016538:	f043 0308 	orr.w	r3, r3, #8
 801653c:	81a3      	strh	r3, [r4, #12]
 801653e:	6923      	ldr	r3, [r4, #16]
 8016540:	b94b      	cbnz	r3, 8016556 <__swsetup_r+0x7a>
 8016542:	89a3      	ldrh	r3, [r4, #12]
 8016544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801654c:	d003      	beq.n	8016556 <__swsetup_r+0x7a>
 801654e:	4621      	mov	r1, r4
 8016550:	4628      	mov	r0, r5
 8016552:	f000 f846 	bl	80165e2 <__smakebuf_r>
 8016556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801655a:	f013 0201 	ands.w	r2, r3, #1
 801655e:	d00a      	beq.n	8016576 <__swsetup_r+0x9a>
 8016560:	2200      	movs	r2, #0
 8016562:	60a2      	str	r2, [r4, #8]
 8016564:	6962      	ldr	r2, [r4, #20]
 8016566:	4252      	negs	r2, r2
 8016568:	61a2      	str	r2, [r4, #24]
 801656a:	6922      	ldr	r2, [r4, #16]
 801656c:	b942      	cbnz	r2, 8016580 <__swsetup_r+0xa4>
 801656e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016572:	d1c5      	bne.n	8016500 <__swsetup_r+0x24>
 8016574:	bd38      	pop	{r3, r4, r5, pc}
 8016576:	0799      	lsls	r1, r3, #30
 8016578:	bf58      	it	pl
 801657a:	6962      	ldrpl	r2, [r4, #20]
 801657c:	60a2      	str	r2, [r4, #8]
 801657e:	e7f4      	b.n	801656a <__swsetup_r+0x8e>
 8016580:	2000      	movs	r0, #0
 8016582:	e7f7      	b.n	8016574 <__swsetup_r+0x98>
 8016584:	20000118 	.word	0x20000118

08016588 <abort>:
 8016588:	b508      	push	{r3, lr}
 801658a:	2006      	movs	r0, #6
 801658c:	f000 f88e 	bl	80166ac <raise>
 8016590:	2001      	movs	r0, #1
 8016592:	f7eb f973 	bl	800187c <_exit>

08016596 <__swhatbuf_r>:
 8016596:	b570      	push	{r4, r5, r6, lr}
 8016598:	460c      	mov	r4, r1
 801659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801659e:	2900      	cmp	r1, #0
 80165a0:	b096      	sub	sp, #88	@ 0x58
 80165a2:	4615      	mov	r5, r2
 80165a4:	461e      	mov	r6, r3
 80165a6:	da0d      	bge.n	80165c4 <__swhatbuf_r+0x2e>
 80165a8:	89a3      	ldrh	r3, [r4, #12]
 80165aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80165ae:	f04f 0100 	mov.w	r1, #0
 80165b2:	bf14      	ite	ne
 80165b4:	2340      	movne	r3, #64	@ 0x40
 80165b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80165ba:	2000      	movs	r0, #0
 80165bc:	6031      	str	r1, [r6, #0]
 80165be:	602b      	str	r3, [r5, #0]
 80165c0:	b016      	add	sp, #88	@ 0x58
 80165c2:	bd70      	pop	{r4, r5, r6, pc}
 80165c4:	466a      	mov	r2, sp
 80165c6:	f000 f879 	bl	80166bc <_fstat_r>
 80165ca:	2800      	cmp	r0, #0
 80165cc:	dbec      	blt.n	80165a8 <__swhatbuf_r+0x12>
 80165ce:	9901      	ldr	r1, [sp, #4]
 80165d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80165d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80165d8:	4259      	negs	r1, r3
 80165da:	4159      	adcs	r1, r3
 80165dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80165e0:	e7eb      	b.n	80165ba <__swhatbuf_r+0x24>

080165e2 <__smakebuf_r>:
 80165e2:	898b      	ldrh	r3, [r1, #12]
 80165e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80165e6:	079d      	lsls	r5, r3, #30
 80165e8:	4606      	mov	r6, r0
 80165ea:	460c      	mov	r4, r1
 80165ec:	d507      	bpl.n	80165fe <__smakebuf_r+0x1c>
 80165ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80165f2:	6023      	str	r3, [r4, #0]
 80165f4:	6123      	str	r3, [r4, #16]
 80165f6:	2301      	movs	r3, #1
 80165f8:	6163      	str	r3, [r4, #20]
 80165fa:	b003      	add	sp, #12
 80165fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165fe:	ab01      	add	r3, sp, #4
 8016600:	466a      	mov	r2, sp
 8016602:	f7ff ffc8 	bl	8016596 <__swhatbuf_r>
 8016606:	9f00      	ldr	r7, [sp, #0]
 8016608:	4605      	mov	r5, r0
 801660a:	4639      	mov	r1, r7
 801660c:	4630      	mov	r0, r6
 801660e:	f7fe fd53 	bl	80150b8 <_malloc_r>
 8016612:	b948      	cbnz	r0, 8016628 <__smakebuf_r+0x46>
 8016614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016618:	059a      	lsls	r2, r3, #22
 801661a:	d4ee      	bmi.n	80165fa <__smakebuf_r+0x18>
 801661c:	f023 0303 	bic.w	r3, r3, #3
 8016620:	f043 0302 	orr.w	r3, r3, #2
 8016624:	81a3      	strh	r3, [r4, #12]
 8016626:	e7e2      	b.n	80165ee <__smakebuf_r+0xc>
 8016628:	89a3      	ldrh	r3, [r4, #12]
 801662a:	6020      	str	r0, [r4, #0]
 801662c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016630:	81a3      	strh	r3, [r4, #12]
 8016632:	9b01      	ldr	r3, [sp, #4]
 8016634:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016638:	b15b      	cbz	r3, 8016652 <__smakebuf_r+0x70>
 801663a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801663e:	4630      	mov	r0, r6
 8016640:	f000 f84e 	bl	80166e0 <_isatty_r>
 8016644:	b128      	cbz	r0, 8016652 <__smakebuf_r+0x70>
 8016646:	89a3      	ldrh	r3, [r4, #12]
 8016648:	f023 0303 	bic.w	r3, r3, #3
 801664c:	f043 0301 	orr.w	r3, r3, #1
 8016650:	81a3      	strh	r3, [r4, #12]
 8016652:	89a3      	ldrh	r3, [r4, #12]
 8016654:	431d      	orrs	r5, r3
 8016656:	81a5      	strh	r5, [r4, #12]
 8016658:	e7cf      	b.n	80165fa <__smakebuf_r+0x18>

0801665a <_raise_r>:
 801665a:	291f      	cmp	r1, #31
 801665c:	b538      	push	{r3, r4, r5, lr}
 801665e:	4605      	mov	r5, r0
 8016660:	460c      	mov	r4, r1
 8016662:	d904      	bls.n	801666e <_raise_r+0x14>
 8016664:	2316      	movs	r3, #22
 8016666:	6003      	str	r3, [r0, #0]
 8016668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801666c:	bd38      	pop	{r3, r4, r5, pc}
 801666e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016670:	b112      	cbz	r2, 8016678 <_raise_r+0x1e>
 8016672:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016676:	b94b      	cbnz	r3, 801668c <_raise_r+0x32>
 8016678:	4628      	mov	r0, r5
 801667a:	f000 f853 	bl	8016724 <_getpid_r>
 801667e:	4622      	mov	r2, r4
 8016680:	4601      	mov	r1, r0
 8016682:	4628      	mov	r0, r5
 8016684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016688:	f000 b83a 	b.w	8016700 <_kill_r>
 801668c:	2b01      	cmp	r3, #1
 801668e:	d00a      	beq.n	80166a6 <_raise_r+0x4c>
 8016690:	1c59      	adds	r1, r3, #1
 8016692:	d103      	bne.n	801669c <_raise_r+0x42>
 8016694:	2316      	movs	r3, #22
 8016696:	6003      	str	r3, [r0, #0]
 8016698:	2001      	movs	r0, #1
 801669a:	e7e7      	b.n	801666c <_raise_r+0x12>
 801669c:	2100      	movs	r1, #0
 801669e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80166a2:	4620      	mov	r0, r4
 80166a4:	4798      	blx	r3
 80166a6:	2000      	movs	r0, #0
 80166a8:	e7e0      	b.n	801666c <_raise_r+0x12>
	...

080166ac <raise>:
 80166ac:	4b02      	ldr	r3, [pc, #8]	@ (80166b8 <raise+0xc>)
 80166ae:	4601      	mov	r1, r0
 80166b0:	6818      	ldr	r0, [r3, #0]
 80166b2:	f7ff bfd2 	b.w	801665a <_raise_r>
 80166b6:	bf00      	nop
 80166b8:	20000118 	.word	0x20000118

080166bc <_fstat_r>:
 80166bc:	b538      	push	{r3, r4, r5, lr}
 80166be:	4d07      	ldr	r5, [pc, #28]	@ (80166dc <_fstat_r+0x20>)
 80166c0:	2300      	movs	r3, #0
 80166c2:	4604      	mov	r4, r0
 80166c4:	4608      	mov	r0, r1
 80166c6:	4611      	mov	r1, r2
 80166c8:	602b      	str	r3, [r5, #0]
 80166ca:	f7eb f927 	bl	800191c <_fstat>
 80166ce:	1c43      	adds	r3, r0, #1
 80166d0:	d102      	bne.n	80166d8 <_fstat_r+0x1c>
 80166d2:	682b      	ldr	r3, [r5, #0]
 80166d4:	b103      	cbz	r3, 80166d8 <_fstat_r+0x1c>
 80166d6:	6023      	str	r3, [r4, #0]
 80166d8:	bd38      	pop	{r3, r4, r5, pc}
 80166da:	bf00      	nop
 80166dc:	2000dcfc 	.word	0x2000dcfc

080166e0 <_isatty_r>:
 80166e0:	b538      	push	{r3, r4, r5, lr}
 80166e2:	4d06      	ldr	r5, [pc, #24]	@ (80166fc <_isatty_r+0x1c>)
 80166e4:	2300      	movs	r3, #0
 80166e6:	4604      	mov	r4, r0
 80166e8:	4608      	mov	r0, r1
 80166ea:	602b      	str	r3, [r5, #0]
 80166ec:	f7eb f926 	bl	800193c <_isatty>
 80166f0:	1c43      	adds	r3, r0, #1
 80166f2:	d102      	bne.n	80166fa <_isatty_r+0x1a>
 80166f4:	682b      	ldr	r3, [r5, #0]
 80166f6:	b103      	cbz	r3, 80166fa <_isatty_r+0x1a>
 80166f8:	6023      	str	r3, [r4, #0]
 80166fa:	bd38      	pop	{r3, r4, r5, pc}
 80166fc:	2000dcfc 	.word	0x2000dcfc

08016700 <_kill_r>:
 8016700:	b538      	push	{r3, r4, r5, lr}
 8016702:	4d07      	ldr	r5, [pc, #28]	@ (8016720 <_kill_r+0x20>)
 8016704:	2300      	movs	r3, #0
 8016706:	4604      	mov	r4, r0
 8016708:	4608      	mov	r0, r1
 801670a:	4611      	mov	r1, r2
 801670c:	602b      	str	r3, [r5, #0]
 801670e:	f7eb f8a5 	bl	800185c <_kill>
 8016712:	1c43      	adds	r3, r0, #1
 8016714:	d102      	bne.n	801671c <_kill_r+0x1c>
 8016716:	682b      	ldr	r3, [r5, #0]
 8016718:	b103      	cbz	r3, 801671c <_kill_r+0x1c>
 801671a:	6023      	str	r3, [r4, #0]
 801671c:	bd38      	pop	{r3, r4, r5, pc}
 801671e:	bf00      	nop
 8016720:	2000dcfc 	.word	0x2000dcfc

08016724 <_getpid_r>:
 8016724:	f7eb b892 	b.w	800184c <_getpid>

08016728 <_init>:
 8016728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801672a:	bf00      	nop
 801672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801672e:	bc08      	pop	{r3}
 8016730:	469e      	mov	lr, r3
 8016732:	4770      	bx	lr

08016734 <_fini>:
 8016734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016736:	bf00      	nop
 8016738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801673a:	bc08      	pop	{r3}
 801673c:	469e      	mov	lr, r3
 801673e:	4770      	bx	lr
