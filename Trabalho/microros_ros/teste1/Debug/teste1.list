
teste1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d40  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  08013f20  08013f20  00014f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fac  08014fac  00016b68  2**0
                  CONTENTS
  4 .ARM          00000008  08014fac  08014fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fb4  08014fb4  00016b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014fb4  08014fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014fbc  08014fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b68  20000000  08014fc0  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101b0  20000b68  08015b28  00016b68  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010d18  08015b28  00016d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016b68  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002275d  00000000  00000000  00016b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ac4  00000000  00000000  000392f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  0003ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  0003f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d09b  00000000  00000000  00040d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e14  00000000  00000000  0006ddb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001166a3  00000000  00000000  00090bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001a726c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e3c  00000000  00000000  001a72d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001af114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000b68 	.word	0x20000b68
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013f08 	.word	0x08013f08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000b6c 	.word	0x20000b6c
 800021c:	08013f08 	.word	0x08013f08

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROSTask */
  microROSTaskHandle = osThreadNew(microROSTaskFunction, NULL, &microROSTask_attributes);
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <MX_FREERTOS_Init+0x18>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_FREERTOS_Init+0x1c>)
 8000a02:	f005 fa05 	bl	8005e10 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a03      	ldr	r2, [pc, #12]	@ (8000a18 <MX_FREERTOS_Init+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	08013ff0 	.word	0x08013ff0
 8000a14:	08000a1d 	.word	0x08000a1d
 8000a18:	20000bc0 	.word	0x20000bc0

08000a1c <microROSTaskFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_microROSTaskFunction */
void microROSTaskFunction(void *argument)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b0a9      	sub	sp, #164	@ 0xa4
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN microROSTaskFunction */

  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 8000a24:	4b53      	ldr	r3, [pc, #332]	@ (8000b74 <microROSTaskFunction+0x158>)
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	4b53      	ldr	r3, [pc, #332]	@ (8000b78 <microROSTaskFunction+0x15c>)
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4b53      	ldr	r3, [pc, #332]	@ (8000b7c <microROSTaskFunction+0x160>)
 8000a2e:	4a54      	ldr	r2, [pc, #336]	@ (8000b80 <microROSTaskFunction+0x164>)
 8000a30:	4954      	ldr	r1, [pc, #336]	@ (8000b84 <microROSTaskFunction+0x168>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f008 fdb8 	bl	80095a8 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000a38:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f008 fd07 	bl	8009450 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000a42:	4b51      	ldr	r3, [pc, #324]	@ (8000b88 <microROSTaskFunction+0x16c>)
 8000a44:	673b      	str	r3, [r7, #112]	@ 0x70
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000a46:	4b51      	ldr	r3, [pc, #324]	@ (8000b8c <microROSTaskFunction+0x170>)
 8000a48:	677b      	str	r3, [r7, #116]	@ 0x74
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000a4a:	4b51      	ldr	r3, [pc, #324]	@ (8000b90 <microROSTaskFunction+0x174>)
 8000a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000a4e:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <microROSTaskFunction+0x178>)
 8000a50:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000a52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 fd16 	bl	8009488 <rcutils_set_default_allocator>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f083 0301 	eor.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <microROSTaskFunction+0x54>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8000a68:	21b3      	movs	r1, #179	@ 0xb3
 8000a6a:	484b      	ldr	r0, [pc, #300]	@ (8000b98 <microROSTaskFunction+0x17c>)
 8000a6c:	f012 f96a 	bl	8012d44 <iprintf>
  }

	rcl_allocator_t allocator = rcl_get_default_allocator();
 8000a70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 fcf9 	bl	800946c <rcutils_get_default_allocator>
	// Initialize and modify options (Set DOMAIN ID to 10)
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8000a7a:	f008 fa55 	bl	8008f28 <rcl_get_zero_initialized_init_options>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	65bb      	str	r3, [r7, #88]	@ 0x58
	rcl_init_options_init(&init_options, allocator);
 8000a82:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000a86:	466a      	mov	r2, sp
 8000a88:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a90:	e882 0003 	stmia.w	r2, {r0, r1}
 8000a94:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f008 fa46 	bl	8008f2c <rcl_init_options_init>
	rcl_init_options_set_domain_id(&init_options, 25);
 8000aa0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aa4:	2119      	movs	r1, #25
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 fb22 	bl	80090f0 <rcl_init_options_set_domain_id>
	// Initialize rclc support object with custom options
	rclc_support_t support;
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8000aac:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000ab0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000ab4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4613      	mov	r3, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f008 fc1a 	bl	80092f8 <rclc_support_init_with_options>
	// Create node object
	rcl_node_t node;
	const char * node_name = "test_node";
 8000ac4:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <microROSTaskFunction+0x180>)
 8000ac6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	// Node namespace (Can remain empty "")
	const char * namespace = "test_namespace";
 8000aca:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <microROSTaskFunction+0x184>)
 8000acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	// Init node with configured support object
	rcl_ret_t rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad4:	f107 001c 	add.w	r0, r7, #28
 8000ad8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000adc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000ae0:	f008 fc3e 	bl	8009360 <rclc_node_init_default>
 8000ae4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	while (rc2 != RCL_RET_OK) {
 8000ae8:	e021      	b.n	8000b2e <microROSTaskFunction+0x112>
		for(int i=0;i<10;i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000af0:	e00d      	b.n	8000b0e <microROSTaskFunction+0xf2>
			HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8000af2:	2120      	movs	r1, #32
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f001 ff2c 	bl	8002954 <HAL_GPIO_TogglePin>
			osDelay(500);
 8000afc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b00:	f005 fa18 	bl	8005f34 <osDelay>
		for(int i=0;i<10;i++){
 8000b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	dded      	ble.n	8000af2 <microROSTaskFunction+0xd6>
		}
		rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	f107 001c 	add.w	r0, r7, #28
 8000b1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000b22:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000b26:	f008 fc1b 	bl	8009360 <rclc_node_init_default>
 8000b2a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	while (rc2 != RCL_RET_OK) {
 8000b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1d9      	bne.n	8000aea <microROSTaskFunction+0xce>

//  //time sync
//  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
//	  printf("Error on time sync (line %d)\n", __LINE__);

  rclc_publisher_init_default(
 8000b36:	f007 fef7 	bl	8008928 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	f107 011c 	add.w	r1, r7, #28
 8000b40:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <microROSTaskFunction+0x188>)
 8000b42:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <microROSTaskFunction+0x18c>)
 8000b44:	f008 fc48 	bl	80093d8 <rclc_publisher_init_default>
//  	&joint_state_pub,
//  	&node,
//	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
//  	"/int_message");
//
    int i=132;
 8000b48:	2384      	movs	r3, #132	@ 0x84
 8000b4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
//  joint_state_msg.data = i;
    float a_velocity[] = {500,500,100,100};
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <microROSTaskFunction+0x190>)
 8000b50:	f107 040c 	add.w	r4, r7, #12
 8000b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    setActuatorMsg(a_velocity);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f826 	bl	8000bb0 <setActuatorMsg>
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f005 f9e4 	bl	8005f34 <osDelay>
	  sendActuatorMsg();
 8000b6c:	f000 f882 	bl	8000c74 <sendActuatorMsg>
	  osDelay(1000);
 8000b70:	bf00      	nop
 8000b72:	e7f7      	b.n	8000b64 <microROSTaskFunction+0x148>
 8000b74:	08001261 	.word	0x08001261
 8000b78:	080011fd 	.word	0x080011fd
 8000b7c:	080011dd 	.word	0x080011dd
 8000b80:	080011b1 	.word	0x080011b1
 8000b84:	20006260 	.word	0x20006260
 8000b88:	080014d5 	.word	0x080014d5
 8000b8c:	08001519 	.word	0x08001519
 8000b90:	08001551 	.word	0x08001551
 8000b94:	080015bd 	.word	0x080015bd
 8000b98:	08013f30 	.word	0x08013f30
 8000b9c:	08013f58 	.word	0x08013f58
 8000ba0:	08013f64 	.word	0x08013f64
 8000ba4:	08013f74 	.word	0x08013f74
 8000ba8:	20000b84 	.word	0x20000b84
 8000bac:	08013f94 	.word	0x08013f94

08000bb0 <setActuatorMsg>:
	 * position: []
	 * velocity: []
	 * normalized: []
 * Só nos interessa a velocidade. Então o argumento da função é um ponteiro de float com 4 posições
 */
void setActuatorMsg(float *fp_velocity){
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	joint_state_msg.header.frame_id.capacity = 20;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bba:	2214      	movs	r2, #20
 8000bbc:	611a      	str	r2, [r3, #16]
	joint_state_msg.header.frame_id.data = (char*) pvPortMalloc(joint_state_msg.header.frame_id.capacity  * sizeof(char));
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f007 fcc2 	bl	800854c <pvPortMalloc>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a29      	ldr	r2, [pc, #164]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bcc:	6093      	str	r3, [r2, #8]
	joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);
 8000bce:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fb84 	bl	80002e0 <strlen>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bdc:	60d3      	str	r3, [r2, #12]
//	joint_state_msg.position.data = (double*) pvPortMalloc(joint_state_msg.position.capacity * sizeof(double));
//	joint_state_msg.position.data[0] = 0;
//	joint_state_msg.position.data[1] = 0;
//	joint_state_msg.position.size = 2;

	joint_state_msg.velocity.capacity = 4;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000be0:	2204      	movs	r2, #4
 8000be2:	629a      	str	r2, [r3, #40]	@ 0x28
	joint_state_msg.velocity.data = (double*) pvPortMalloc(joint_state_msg.velocity.capacity * sizeof(double));
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 fcae 	bl	800854c <pvPortMalloc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bf4:	6213      	str	r3, [r2, #32]
	joint_state_msg.velocity.data[0] = fp_velocity[0];
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000bfc:	6a14      	ldr	r4, [r2, #32]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fcda 	bl	80005b8 <__aeabi_f2d>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.data[1] = fp_velocity[1];
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	f103 0408 	add.w	r4, r3, #8
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	f7ff fccc 	bl	80005b8 <__aeabi_f2d>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.data[2] = fp_velocity[2];
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	f103 0410 	add.w	r4, r3, #16
 8000c36:	4610      	mov	r0, r2
 8000c38:	f7ff fcbe 	bl	80005b8 <__aeabi_f2d>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.data[3] = fp_velocity[3];
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	330c      	adds	r3, #12
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	f103 0418 	add.w	r4, r3, #24
 8000c52:	4610      	mov	r0, r2
 8000c54:	f7ff fcb0 	bl	80005b8 <__aeabi_f2d>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.size = 4;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <setActuatorMsg+0xc0>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000b88 	.word	0x20000b88

08000c74 <sendActuatorMsg>:

void sendActuatorMsg(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	rcl_ret_t ret = rcl_publish(&joint_state_pub, &joint_state_msg, NULL);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <sendActuatorMsg+0x2c>)
 8000c7e:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <sendActuatorMsg+0x30>)
 8000c80:	f008 fb16 	bl	80092b0 <rcl_publish>
 8000c84:	6078      	str	r0, [r7, #4]
	if (ret != RCL_RET_OK)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d004      	beq.n	8000c96 <sendActuatorMsg+0x22>
	{
			  printf("Error publishing joint_state (line %d)\n", __LINE__);
 8000c8c:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <sendActuatorMsg+0x34>)
 8000c92:	f012 f857 	bl	8012d44 <iprintf>
	}

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000b88 	.word	0x20000b88
 8000ca4:	20000b84 	.word	0x20000b84
 8000ca8:	08013fa4 	.word	0x08013fa4

08000cac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cb8:	f006 f99e 	bl	8006ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e28 <pvPortMallocMicroROS+0x17c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cc4:	f000 f986 	bl	8000fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cc8:	4b58      	ldr	r3, [pc, #352]	@ (8000e2c <pvPortMallocMicroROS+0x180>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 8090 	bne.w	8000df6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01e      	beq.n	8000d1a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000cdc:	2208      	movs	r2, #8
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d015      	beq.n	8000d1a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f023 0307 	bic.w	r3, r3, #7
 8000cf4:	3308      	adds	r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	e7fd      	b.n	8000d16 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d06a      	beq.n	8000df6 <pvPortMallocMicroROS+0x14a>
 8000d20:	4b43      	ldr	r3, [pc, #268]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d865      	bhi.n	8000df6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <pvPortMallocMicroROS+0x188>)
 8000d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	@ (8000e34 <pvPortMallocMicroROS+0x188>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d34:	e004      	b.n	8000d40 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d903      	bls.n	8000d52 <pvPortMallocMicroROS+0xa6>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f1      	bne.n	8000d36 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <pvPortMallocMicroROS+0x17c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d04c      	beq.n	8000df6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2208      	movs	r2, #8
 8000d62:	4413      	add	r3, r2
 8000d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	1ad2      	subs	r2, r2, r3
 8000d76:	2308      	movs	r3, #8
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d920      	bls.n	8000dc0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00b      	beq.n	8000da8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d94:	f383 8811 	msr	BASEPRI, r3
 8000d98:	f3bf 8f6f 	isb	sy
 8000d9c:	f3bf 8f4f 	dsb	sy
 8000da0:	613b      	str	r3, [r7, #16]
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1ad2      	subs	r2, r2, r3
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dba:	69b8      	ldr	r0, [r7, #24]
 8000dbc:	f000 f96c 	bl	8001098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000dcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <pvPortMallocMicroROS+0x18c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d203      	bcs.n	8000de2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <pvPortMallocMicroROS+0x184>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <pvPortMallocMicroROS+0x18c>)
 8000de0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <pvPortMallocMicroROS+0x180>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000df6:	f006 f90d 	bl	8007014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00b      	beq.n	8000e1c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	60fb      	str	r3, [r7, #12]
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e1c:	69fb      	ldr	r3, [r7, #28]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200059ec 	.word	0x200059ec
 8000e2c:	200059f8 	.word	0x200059f8
 8000e30:	200059f0 	.word	0x200059f0
 8000e34:	200059e4 	.word	0x200059e4
 8000e38:	200059f4 	.word	0x200059f4

08000e3c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d04a      	beq.n	8000ee4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	425b      	negs	r3, r3
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4413      	add	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <vPortFreeMicroROS+0xb0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10b      	bne.n	8000e82 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e6e:	f383 8811 	msr	BASEPRI, r3
 8000e72:	f3bf 8f6f 	isb	sy
 8000e76:	f3bf 8f4f 	dsb	sy
 8000e7a:	60fb      	str	r3, [r7, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	60bb      	str	r3, [r7, #8]
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	e7fd      	b.n	8000e9e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <vPortFreeMicroROS+0xb0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d019      	beq.n	8000ee4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d115      	bne.n	8000ee4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <vPortFreeMicroROS+0xb0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ec8:	f006 f896 	bl	8006ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <vPortFreeMicroROS+0xb4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <vPortFreeMicroROS+0xb4>)
 8000ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000eda:	6938      	ldr	r0, [r7, #16]
 8000edc:	f000 f8dc 	bl	8001098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000ee0:	f006 f898 	bl	8007014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200059f8 	.word	0x200059f8
 8000ef0:	200059f0 	.word	0x200059f0

08000ef4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f00:	2308      	movs	r3, #8
 8000f02:	425b      	negs	r3, r3
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	4413      	add	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <getBlockSize+0x38>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

	return count;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200059f8 	.word	0x200059f8

08000f30 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f3a:	f006 f85d 	bl	8006ff8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f3e:	6838      	ldr	r0, [r7, #0]
 8000f40:	f7ff feb4 	bl	8000cac <pvPortMallocMicroROS>
 8000f44:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d017      	beq.n	8000f7c <pvPortReallocMicroROS+0x4c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d014      	beq.n	8000f7c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffce 	bl	8000ef4 <getBlockSize>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d201      	bcs.n	8000f6c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	68b8      	ldr	r0, [r7, #8]
 8000f72:	f012 f96e 	bl	8013252 <memcpy>

		vPortFreeMicroROS(pv);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff60 	bl	8000e3c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f7c:	f006 f84a 	bl	8007014 <xTaskResumeAll>

	return newmem;
 8000f80:	68bb      	ldr	r3, [r7, #8]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f94:	f006 f830 	bl	8006ff8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff fe82 	bl	8000cac <pvPortMallocMicroROS>
 8000fa8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fae:	e004      	b.n	8000fba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	613a      	str	r2, [r7, #16]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	617a      	str	r2, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f5      	bne.n	8000fb0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000fc4:	f006 f826 	bl	8007014 <xTaskResumeAll>
  	return mem;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000fda:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <prvHeapInit+0xac>)
 8000fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f023 0307 	bic.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <prvHeapInit+0xac>)
 8001004:	4413      	add	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800100c:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <prvHeapInit+0xb0>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <prvHeapInit+0xb0>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4413      	add	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001020:	2208      	movs	r2, #8
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 0307 	bic.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4a15      	ldr	r2, [pc, #84]	@ (8001088 <prvHeapInit+0xb4>)
 8001034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <prvHeapInit+0xb4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <prvHeapInit+0xb4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	1ad2      	subs	r2, r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <prvHeapInit+0xb4>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <prvHeapInit+0xb8>)
 8001062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <prvHeapInit+0xbc>)
 800106a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <prvHeapInit+0xc0>)
 800106e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000bc4 	.word	0x20000bc4
 8001084:	200059e4 	.word	0x200059e4
 8001088:	200059ec 	.word	0x200059ec
 800108c:	200059f4 	.word	0x200059f4
 8001090:	200059f0 	.word	0x200059f0
 8001094:	200059f8 	.word	0x200059f8

08001098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <prvInsertBlockIntoFreeList+0xac>)
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e002      	b.n	80010ac <prvInsertBlockIntoFreeList+0x14>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d8f7      	bhi.n	80010a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d108      	bne.n	80010da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	441a      	add	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	441a      	add	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d118      	bne.n	8001120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <prvInsertBlockIntoFreeList+0xb0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d00d      	beq.n	8001116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	441a      	add	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e008      	b.n	8001128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <prvInsertBlockIntoFreeList+0xb0>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e003      	b.n	8001128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d002      	beq.n	8001136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200059e4 	.word	0x200059e4
 8001148:	200059ec 	.word	0x200059ec

0800114c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_DMA_Init+0x60>)
 8001154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <MX_DMA_Init+0x60>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6493      	str	r3, [r2, #72]	@ 0x48
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_DMA_Init+0x60>)
 8001160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_DMA_Init+0x60>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <MX_DMA_Init+0x60>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6493      	str	r3, [r2, #72]	@ 0x48
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_DMA_Init+0x60>)
 8001178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2105      	movs	r1, #5
 8001186:	200b      	movs	r0, #11
 8001188:	f000 fee4 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800118c:	200b      	movs	r0, #11
 800118e:	f000 fefb 	bl	8001f88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2105      	movs	r1, #5
 8001196:	200c      	movs	r0, #12
 8001198:	f000 fedc 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800119c:	200c      	movs	r0, #12
 800119e:	f000 fef3 	bl	8001f88 <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011be:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80011c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011c4:	4904      	ldr	r1, [pc, #16]	@ (80011d8 <cubemx_transport_open+0x28>)
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f003 f880 	bl	80042cc <HAL_UART_Receive_DMA>
    return true;
 80011cc:	2301      	movs	r3, #1
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200059fc 	.word	0x200059fc

080011dc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011ea:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f003 f8b9 	bl	8004364 <HAL_UART_DMAStop>
    return true;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001210:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001218:	2b20      	cmp	r3, #32
 800121a:	d11b      	bne.n	8001254 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f002 ffd1 	bl	80041cc <HAL_UART_Transmit_DMA>
 800122a:	4603      	mov	r3, r0
 800122c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800122e:	e002      	b.n	8001236 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f004 fe7f 	bl	8005f34 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <cubemx_transport_write+0x4a>
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001242:	2b20      	cmp	r3, #32
 8001244:	d1f4      	bne.n	8001230 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001246:	7cfb      	ldrb	r3, [r7, #19]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <cubemx_transport_write+0x54>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	e002      	b.n	8001256 <cubemx_transport_write+0x5a>
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001254:	2300      	movs	r3, #0
    }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001274:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127a:	b672      	cpsid	i
}
 800127c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <cubemx_transport_read+0x9c>)
 800128e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001290:	b662      	cpsie	i
}
 8001292:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800129a:	2001      	movs	r0, #1
 800129c:	f004 fe4a 	bl	8005f34 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <cubemx_transport_read+0xa0>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <cubemx_transport_read+0x9c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <cubemx_transport_read+0x54>
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbe2      	blt.n	800127a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012b8:	e011      	b.n	80012de <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <cubemx_transport_read+0xa0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	440b      	add	r3, r1
 80012c4:	490f      	ldr	r1, [pc, #60]	@ (8001304 <cubemx_transport_read+0xa4>)
 80012c6:	5c8a      	ldrb	r2, [r1, r2]
 80012c8:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <cubemx_transport_read+0xa0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <cubemx_transport_read+0xa0>)
 80012d6:	6013      	str	r3, [r2, #0]
        wrote++;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	3301      	adds	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <cubemx_transport_read+0xa0>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <cubemx_transport_read+0x9c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d003      	beq.n	80012f2 <cubemx_transport_read+0x92>
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3e3      	bcc.n	80012ba <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80012f2:	69bb      	ldr	r3, [r7, #24]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20006200 	.word	0x20006200
 8001300:	200061fc 	.word	0x200061fc
 8001304:	200059fc 	.word	0x200059fc

08001308 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a2e      	ldr	r2, [pc, #184]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b2c      	ldr	r3, [pc, #176]	@ (80013dc <MX_GPIO_Init+0xd4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001336:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <MX_GPIO_Init+0xd4>)
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a22      	ldr	r2, [pc, #136]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <MX_GPIO_Init+0xd4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_GPIO_Init+0xd4>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_GPIO_Init+0xd4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f001 facd 	bl	8002924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <MX_GPIO_Init+0xd8>)
 80013a2:	f001 f93d 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a6:	2320      	movs	r3, #32
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c0:	f001 f92e 	bl	8002620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2105      	movs	r1, #5
 80013c8:	2028      	movs	r0, #40	@ 0x28
 80013ca:	f000 fdc3 	bl	8001f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ce:	2028      	movs	r0, #40	@ 0x28
 80013d0:	f000 fdda 	bl	8001f88 <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f000 fcc5 	bl	8001d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f80e 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f7ff ff8a 	bl	8001308 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f4:	f7ff feaa 	bl	800114c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80013f8:	f000 fb8c 	bl	8001b14 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013fc:	f004 fcbe 	bl	8005d7c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001400:	f7ff fafa 	bl	80009f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001404:	f004 fcde 	bl	8005dc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <main+0x24>

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	2238      	movs	r2, #56	@ 0x38
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f011 fde8 	bl	8012ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800142e:	2000      	movs	r0, #0
 8001430:	f001 face 	bl	80029d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143e:	2340      	movs	r3, #64	@ 0x40
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001446:	2302      	movs	r3, #2
 8001448:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800144a:	2304      	movs	r3, #4
 800144c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800144e:	2355      	movs	r3, #85	@ 0x55
 8001450:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	4618      	mov	r0, r3
 8001464:	f001 fb68 	bl	8002b38 <HAL_RCC_OscConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800146e:	f000 f82b 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2303      	movs	r3, #3
 8001478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2104      	movs	r1, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fe66 	bl	800315c <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001496:	f000 f817 	bl	80014c8 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	@ 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b6:	f000 fc77 	bl	8001da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40001000 	.word	0x40001000

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <Error_Handler+0x8>

080014d4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <microros_allocate+0x3c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <microros_allocate+0x3c>)
 80014ec:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <microros_allocate+0x40>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <microros_allocate+0x40>)
 80014fc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fbd4 	bl	8000cac <pvPortMallocMicroROS>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20006204 	.word	0x20006204
 8001514:	20006208 	.word	0x20006208

08001518 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fce3 	bl	8000ef4 <getBlockSize>
 800152e:	4603      	mov	r3, r0
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <microros_deallocate+0x34>)
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	461a      	mov	r2, r3
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <microros_deallocate+0x34>)
 800153a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fc7d 	bl	8000e3c <vPortFreeMicroROS>
  }
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20006208 	.word	0x20006208

08001550 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <microros_reallocate+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4413      	add	r3, r2
 8001566:	461a      	mov	r2, r3
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <microros_reallocate+0x64>)
 800156a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <microros_reallocate+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4413      	add	r3, r2
 8001576:	461a      	mov	r2, r3
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <microros_reallocate+0x68>)
 800157a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d104      	bne.n	800158c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001582:	68b8      	ldr	r0, [r7, #8]
 8001584:	f7ff fb92 	bl	8000cac <pvPortMallocMicroROS>
 8001588:	4603      	mov	r3, r0
 800158a:	e00e      	b.n	80015aa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fcb1 	bl	8000ef4 <getBlockSize>
 8001592:	4603      	mov	r3, r0
 8001594:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <microros_reallocate+0x68>)
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	461a      	mov	r2, r3
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <microros_reallocate+0x68>)
 800159e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff fcc4 	bl	8000f30 <pvPortReallocMicroROS>
 80015a8:	4603      	mov	r3, r0
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20006204 	.word	0x20006204
 80015b8:	20006208 	.word	0x20006208

080015bc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <microros_zero_allocate+0x48>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <microros_zero_allocate+0x48>)
 80015da:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <microros_zero_allocate+0x4c>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <microros_zero_allocate+0x4c>)
 80015ee:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fcc9 	bl	8000f8a <pvPortCallocMicroROS>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20006204 	.word	0x20006204
 8001608:	20006208 	.word	0x20006208
 800160c:	00000000 	.word	0x00000000

08001610 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001626:	a320      	add	r3, pc, #128	@ (adr r3, 80016a8 <UTILS_NanosecondsToTimespec+0x98>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f81c 	bl	8000668 <__aeabi_ldivmod>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800163a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800163e:	a31a      	add	r3, pc, #104	@ (adr r3, 80016a8 <UTILS_NanosecondsToTimespec+0x98>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f810 	bl	8000668 <__aeabi_ldivmod>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da20      	bge.n	8001696 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <UTILS_NanosecondsToTimespec+0x90>)
 800165a:	fb82 1203 	smull	r1, r2, r2, r3
 800165e:	1712      	asrs	r2, r2, #28
 8001660:	17db      	asrs	r3, r3, #31
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	6979      	ldr	r1, [r7, #20]
 8001670:	17c8      	asrs	r0, r1, #31
 8001672:	460c      	mov	r4, r1
 8001674:	4605      	mov	r5, r0
 8001676:	ebb2 0804 	subs.w	r8, r2, r4
 800167a:	eb63 0905 	sbc.w	r9, r3, r5
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4906      	ldr	r1, [pc, #24]	@ (80016a4 <UTILS_NanosecondsToTimespec+0x94>)
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	441a      	add	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]
    }
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016a0:	44b82fa1 	.word	0x44b82fa1
 80016a4:	3b9aca00 	.word	0x3b9aca00
 80016a8:	3b9aca00 	.word	0x3b9aca00
 80016ac:	00000000 	.word	0x00000000

080016b0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80016b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b4:	b08e      	sub	sp, #56	@ 0x38
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80016ba:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80016bc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80016c0:	2300      	movs	r3, #0
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80016d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 ff20 	bl	800751c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	61fa      	str	r2, [r7, #28]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	69b9      	ldr	r1, [r7, #24]
 80016ee:	000b      	movs	r3, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80016f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f8:	2200      	movs	r2, #0
 80016fa:	461c      	mov	r4, r3
 80016fc:	4615      	mov	r5, r2
 80016fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001702:	1911      	adds	r1, r2, r4
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	416b      	adcs	r3, r5
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800170e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001712:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	f04f 0400 	mov.w	r4, #0
 800171e:	f04f 0500 	mov.w	r5, #0
 8001722:	015d      	lsls	r5, r3, #5
 8001724:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001728:	0154      	lsls	r4, r2, #5
 800172a:	4622      	mov	r2, r4
 800172c:	462b      	mov	r3, r5
 800172e:	ebb2 0800 	subs.w	r8, r2, r0
 8001732:	eb63 0901 	sbc.w	r9, r3, r1
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001742:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001746:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800174a:	4690      	mov	r8, r2
 800174c:	4699      	mov	r9, r3
 800174e:	eb18 0a00 	adds.w	sl, r8, r0
 8001752:	eb49 0b01 	adc.w	fp, r9, r1
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001762:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001766:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800176a:	ebb2 040a 	subs.w	r4, r2, sl
 800176e:	603c      	str	r4, [r7, #0]
 8001770:	eb63 030b 	sbc.w	r3, r3, fp
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800177a:	4623      	mov	r3, r4
 800177c:	181b      	adds	r3, r3, r0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	462b      	mov	r3, r5
 8001782:	eb41 0303 	adc.w	r3, r1, r3
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	6a3a      	ldr	r2, [r7, #32]
 800178a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178e:	f7ff ff3f 	bl	8001610 <UTILS_NanosecondsToTimespec>

    return 0;
 8001792:	2300      	movs	r3, #0
 8001794:	4618      	mov	r0, r3
 8001796:	3738      	adds	r7, #56	@ 0x38
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_MspInit+0x50>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <HAL_MspInit+0x50>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_MspInit+0x50>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_MspInit+0x50>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_MspInit+0x50>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_MspInit+0x50>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	210f      	movs	r1, #15
 80017da:	f06f 0001 	mvn.w	r0, #1
 80017de:	f000 fbb9 	bl	8001f54 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017e2:	f001 f999 	bl	8002b18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	@ 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001804:	4b2c      	ldr	r3, [pc, #176]	@ (80018b8 <HAL_InitTick+0xc4>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	4a2b      	ldr	r2, [pc, #172]	@ (80018b8 <HAL_InitTick+0xc4>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <HAL_InitTick+0xc4>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800181c:	f107 020c 	add.w	r2, r7, #12
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fe6e 	bl	8003508 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800182c:	f001 fe40 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8001830:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001834:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <HAL_InitTick+0xc8>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0c9b      	lsrs	r3, r3, #18
 800183c:	3b01      	subs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_InitTick+0xcc>)
 8001842:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <HAL_InitTick+0xd0>)
 8001844:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <HAL_InitTick+0xcc>)
 8001848:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800184c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800184e:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <HAL_InitTick+0xcc>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001854:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_InitTick+0xcc>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_InitTick+0xcc>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001860:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <HAL_InitTick+0xcc>)
 8001862:	f002 f917 	bl	8003a94 <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800186c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11b      	bne.n	80018ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001874:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <HAL_InitTick+0xcc>)
 8001876:	f002 f96f 	bl	8003b58 <HAL_TIM_Base_Start_IT>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001880:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001888:	2036      	movs	r0, #54	@ 0x36
 800188a:	f000 fb7d 	bl	8001f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d808      	bhi.n	80018a6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	2036      	movs	r0, #54	@ 0x36
 800189a:	f000 fb5b 	bl	8001f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_InitTick+0xd4>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e002      	b.n	80018ac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3730      	adds	r7, #48	@ 0x30
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	2000620c 	.word	0x2000620c
 80018c4:	40001000 	.word	0x40001000
 80018c8:	20000008 	.word	0x20000008

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <MemManage_Handler+0x4>

080018e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <DMA1_Channel1_IRQHandler+0x10>)
 800190a:	f000 fd2e 	bl	800236a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200062f4 	.word	0x200062f4

08001918 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <DMA1_Channel2_IRQHandler+0x10>)
 800191e:	f000 fd24 	bl	800236a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20006354 	.word	0x20006354

0800192c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001930:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001934:	f001 f828 	bl	8002988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <TIM6_DAC_IRQHandler+0x10>)
 8001942:	f002 f981 	bl	8003c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000620c 	.word	0x2000620c

08001950 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <LPUART1_IRQHandler+0x10>)
 8001956:	f002 fd9b 	bl	8004490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20006260 	.word	0x20006260

08001964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_kill>:

int _kill(int pid, int sig)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800197e:	f011 fc33 	bl	80131e8 <__errno>
 8001982:	4603      	mov	r3, r0
 8001984:	2216      	movs	r2, #22
 8001986:	601a      	str	r2, [r3, #0]
  return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_exit>:

void _exit (int status)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffe7 	bl	8001974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019a6:	bf00      	nop
 80019a8:	e7fd      	b.n	80019a6 <_exit+0x12>

080019aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e00a      	b.n	80019d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019bc:	f3af 8000 	nop.w
 80019c0:	4601      	mov	r1, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbf0      	blt.n	80019bc <_read+0x12>
  }

  return len;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e009      	b.n	8001a0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	60ba      	str	r2, [r7, #8]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	3301      	adds	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbf1      	blt.n	80019f6 <_write+0x12>
  }
  return len;
 8001a12:	687b      	ldr	r3, [r7, #4]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_close>:

int _close(int file)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a44:	605a      	str	r2, [r3, #4]
  return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_isatty>:

int _isatty(int file)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a5c:	2301      	movs	r3, #1
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <_sbrk+0x5c>)
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <_sbrk+0x60>)
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <_sbrk+0x64>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <_sbrk+0x68>)
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d207      	bcs.n	8001ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab4:	f011 fb98 	bl	80131e8 <__errno>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	220c      	movs	r2, #12
 8001abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac2:	e009      	b.n	8001ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <_sbrk+0x64>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <_sbrk+0x64>)
 8001ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20020000 	.word	0x20020000
 8001ae4:	00000400 	.word	0x00000400
 8001ae8:	2000625c 	.word	0x2000625c
 8001aec:	20010d18 	.word	0x20010d18

08001af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <SystemInit+0x20>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <SystemInit+0x20>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b18:	4b21      	ldr	r3, [pc, #132]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ba4 <MX_LPUART1_UART_Init+0x90>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b56:	4812      	ldr	r0, [pc, #72]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b58:	f002 fae8 	bl	800412c <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b62:	f7ff fcb1 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	480d      	ldr	r0, [pc, #52]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b6a:	f003 fff8 	bl	8005b5e <HAL_UARTEx_SetTxFifoThreshold>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b74:	f7ff fca8 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4809      	ldr	r0, [pc, #36]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b7c:	f004 f82d 	bl	8005bda <HAL_UARTEx_SetRxFifoThreshold>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b86:	f7ff fc9f 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_LPUART1_UART_Init+0x8c>)
 8001b8c:	f003 ffae 	bl	8005aec <HAL_UARTEx_DisableFifoMode>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b96:	f7ff fc97 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20006260 	.word	0x20006260
 8001ba4:	40008000 	.word	0x40008000

08001ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09e      	sub	sp, #120	@ 0x78
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0310 	add.w	r3, r7, #16
 8001bc4:	2254      	movs	r2, #84	@ 0x54
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f011 fa11 	bl	8012ff0 <memset>
  if(uartHandle->Instance==LPUART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8001d0c <HAL_UART_MspInit+0x164>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f040 8094 	bne.w	8001d02 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 fd06 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bf2:	f7ff fc69 	bl	80014c8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bf6:	4b46      	ldr	r3, [pc, #280]	@ (8001d10 <HAL_UART_MspInit+0x168>)
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfa:	4a45      	ldr	r2, [pc, #276]	@ (8001d10 <HAL_UART_MspInit+0x168>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c02:	4b43      	ldr	r3, [pc, #268]	@ (8001d10 <HAL_UART_MspInit+0x168>)
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <HAL_UART_MspInit+0x168>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	4a3f      	ldr	r2, [pc, #252]	@ (8001d10 <HAL_UART_MspInit+0x168>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <HAL_UART_MspInit+0x168>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c26:	230c      	movs	r3, #12
 8001c28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c36:	230c      	movs	r3, #12
 8001c38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c44:	f000 fcec 	bl	8002620 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c4a:	4a33      	ldr	r2, [pc, #204]	@ (8001d18 <HAL_UART_MspInit+0x170>)
 8001c4c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c50:	2222      	movs	r2, #34	@ 0x22
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c62:	2280      	movs	r2, #128	@ 0x80
 8001c64:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c66:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c72:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c74:	2220      	movs	r2, #32
 8001c76:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c78:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c7a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001c7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001c80:	4824      	ldr	r0, [pc, #144]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c82:	f000 f98f 	bl	8001fa4 <HAL_DMA_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001c8c:	f7ff fc1c 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a20      	ldr	r2, [pc, #128]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c98:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <HAL_UART_MspInit+0x16c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <HAL_UART_MspInit+0x178>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001ca6:	2223      	movs	r2, #35	@ 0x23
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cb8:	2280      	movs	r2, #128	@ 0x80
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbc:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc2:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cd0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001cd6:	4811      	ldr	r0, [pc, #68]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cd8:	f000 f964 	bl	8001fa4 <HAL_DMA_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001ce2:	f7ff fbf1 	bl	80014c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cea:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cec:	4a0b      	ldr	r2, [pc, #44]	@ (8001d1c <HAL_UART_MspInit+0x174>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	205b      	movs	r0, #91	@ 0x5b
 8001cf8:	f000 f92c 	bl	8001f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001cfc:	205b      	movs	r0, #91	@ 0x5b
 8001cfe:	f000 f943 	bl	8001f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001d02:	bf00      	nop
 8001d04:	3778      	adds	r7, #120	@ 0x78
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40008000 	.word	0x40008000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	200062f4 	.word	0x200062f4
 8001d18:	40020008 	.word	0x40020008
 8001d1c:	20006354 	.word	0x20006354
 8001d20:	4002001c 	.word	0x4002001c

08001d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d28:	f7ff fee2 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2e:	490d      	ldr	r1, [pc, #52]	@ (8001d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <LoopForever+0xe>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d44:	4c0a      	ldr	r4, [pc, #40]	@ (8001d70 <LoopForever+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d52:	f011 fa4f 	bl	80131f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d56:	f7ff fb45 	bl	80013e4 <main>

08001d5a <LoopForever>:

LoopForever:
    b LoopForever
 8001d5a:	e7fe      	b.n	8001d5a <LoopForever>
  ldr   r0, =_estack
 8001d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000b68 	.word	0x20000b68
  ldr r2, =_sidata
 8001d68:	08014fc0 	.word	0x08014fc0
  ldr r2, =_sbss
 8001d6c:	20000b68 	.word	0x20000b68
  ldr r4, =_ebss
 8001d70:	20010d18 	.word	0x20010d18

08001d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC1_2_IRQHandler>

08001d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 f8dc 	bl	8001f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d86:	200f      	movs	r0, #15
 8001d88:	f7ff fd34 	bl	80017f4 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	e001      	b.n	8001d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d98:	f7ff fd02 	bl	80017a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a03      	ldr	r2, [pc, #12]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	200063b4 	.word	0x200063b4
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200063b4 	.word	0x200063b4

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	@ (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	@ 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff4c 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f62:	f7ff ff63 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001f66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	6978      	ldr	r0, [r7, #20]
 8001f6e:	f7ff ffb3 	bl	8001ed8 <NVIC_EncodePriority>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff82 	bl	8001e84 <__NVIC_SetPriority>
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff56 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e08d      	b.n	80020d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_DMA_Init+0x138>)
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d80f      	bhi.n	8001fe2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <HAL_DMA_Init+0x13c>)
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a45      	ldr	r2, [pc, #276]	@ (80020e4 <HAL_DMA_Init+0x140>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	009a      	lsls	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a42      	ldr	r2, [pc, #264]	@ (80020e8 <HAL_DMA_Init+0x144>)
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe0:	e00e      	b.n	8002000 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <HAL_DMA_Init+0x148>)
 8001fea:	4413      	add	r3, r2
 8001fec:	4a3d      	ldr	r2, [pc, #244]	@ (80020e4 <HAL_DMA_Init+0x140>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	009a      	lsls	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80020f0 <HAL_DMA_Init+0x14c>)
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800201a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa82 	bl	800255c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002060:	d102      	bne.n	8002068 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800207c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d010      	beq.n	80020a8 <HAL_DMA_Init+0x104>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b04      	cmp	r3, #4
 800208c:	d80c      	bhi.n	80020a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 faa2 	bl	80025d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e008      	b.n	80020ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40020407 	.word	0x40020407
 80020e0:	bffdfff8 	.word	0xbffdfff8
 80020e4:	cccccccd 	.word	0xcccccccd
 80020e8:	40020000 	.word	0x40020000
 80020ec:	bffdfbf8 	.word	0xbffdfbf8
 80020f0:	40020400 	.word	0x40020400

080020f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Start_IT+0x20>
 8002110:	2302      	movs	r3, #2
 8002112:	e066      	b.n	80021e2 <HAL_DMA_Start_IT+0xee>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d155      	bne.n	80021d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f9c7 	bl	80024e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 020e 	orr.w	r2, r2, #14
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e00f      	b.n	800218c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0204 	bic.w	r2, r2, #4
 800217a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 020a 	orr.w	r2, r2, #10
 800218a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e005      	b.n	80021e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d005      	beq.n	800220e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2204      	movs	r2, #4
 8002206:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e037      	b.n	800227e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 020e 	bic.w	r2, r2, #14
 800221c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002228:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800222c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f003 021f 	and.w	r2, r3, #31
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f202 	lsl.w	r2, r1, r2
 8002250:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800225a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00c      	beq.n	800227e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002272:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800227c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d00d      	beq.n	80022d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2204      	movs	r2, #4
 80022b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e047      	b.n	8002360 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020e 	bic.w	r2, r2, #14
 80022de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800231c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800233e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
    }
  }
  return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2204      	movs	r2, #4
 800238c:	409a      	lsls	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d026      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x7a>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d021      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0204 	bic.w	r2, r2, #4
 80023bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f003 021f 	and.w	r2, r3, #31
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	2104      	movs	r1, #4
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d071      	beq.n	80024be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023e2:	e06c      	b.n	80024be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2202      	movs	r2, #2
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02e      	beq.n	8002456 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d029      	beq.n	8002456 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 020a 	bic.w	r2, r2, #10
 800241e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	2102      	movs	r1, #2
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d038      	beq.n	80024be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002454:	e033      	b.n	80024be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2208      	movs	r2, #8
 8002460:	409a      	lsls	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d02a      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d025      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 020e 	bic.w	r2, r2, #14
 8002482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
}
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002508:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f003 021f 	and.w	r2, r3, #31
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b10      	cmp	r3, #16
 800252c:	d108      	bne.n	8002540 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800253e:	e007      	b.n	8002550 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	60da      	str	r2, [r3, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800256c:	429a      	cmp	r2, r3
 800256e:	d802      	bhi.n	8002576 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002570:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e001      	b.n	800257a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002578:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3b08      	subs	r3, #8
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	009a      	lsls	r2, r3, #2
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	461a      	mov	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80025a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2201      	movs	r2, #1
 80025b0:	409a      	lsls	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40020407 	.word	0x40020407
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020820 	.word	0x40020820
 80025d0:	cccccccd 	.word	0xcccccccd
 80025d4:	40020880 	.word	0x40020880

080025d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a08      	ldr	r2, [pc, #32]	@ (800261c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2201      	movs	r2, #1
 8002606:	409a      	lsls	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	1000823f 	.word	0x1000823f
 800261c:	40020940 	.word	0x40020940

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800262e:	e15a      	b.n	80028e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 814c 	beq.w	80028e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b01      	cmp	r3, #1
 8002652:	d005      	beq.n	8002660 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800265c:	2b02      	cmp	r3, #2
 800265e:	d130      	bne.n	80026c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002696:	2201      	movs	r2, #1
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4013      	ands	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 0201 	and.w	r2, r3, #1
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d017      	beq.n	80026fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d123      	bne.n	8002752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	220f      	movs	r2, #15
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	08da      	lsrs	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3208      	adds	r2, #8
 800274c:	6939      	ldr	r1, [r7, #16]
 800274e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0203 	and.w	r2, r3, #3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80a6 	beq.w	80028e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002794:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_GPIO_Init+0x2e4>)
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	4a5a      	ldr	r2, [pc, #360]	@ (8002904 <HAL_GPIO_Init+0x2e4>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6613      	str	r3, [r2, #96]	@ 0x60
 80027a0:	4b58      	ldr	r3, [pc, #352]	@ (8002904 <HAL_GPIO_Init+0x2e4>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ac:	4a56      	ldr	r2, [pc, #344]	@ (8002908 <HAL_GPIO_Init+0x2e8>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027d6:	d01f      	beq.n	8002818 <HAL_GPIO_Init+0x1f8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a4c      	ldr	r2, [pc, #304]	@ (800290c <HAL_GPIO_Init+0x2ec>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d019      	beq.n	8002814 <HAL_GPIO_Init+0x1f4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002910 <HAL_GPIO_Init+0x2f0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_GPIO_Init+0x1f0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002914 <HAL_GPIO_Init+0x2f4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00d      	beq.n	800280c <HAL_GPIO_Init+0x1ec>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a49      	ldr	r2, [pc, #292]	@ (8002918 <HAL_GPIO_Init+0x2f8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_Init+0x1e8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a48      	ldr	r2, [pc, #288]	@ (800291c <HAL_GPIO_Init+0x2fc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_Init+0x1e4>
 8002800:	2305      	movs	r3, #5
 8002802:	e00a      	b.n	800281a <HAL_GPIO_Init+0x1fa>
 8002804:	2306      	movs	r3, #6
 8002806:	e008      	b.n	800281a <HAL_GPIO_Init+0x1fa>
 8002808:	2304      	movs	r3, #4
 800280a:	e006      	b.n	800281a <HAL_GPIO_Init+0x1fa>
 800280c:	2303      	movs	r3, #3
 800280e:	e004      	b.n	800281a <HAL_GPIO_Init+0x1fa>
 8002810:	2302      	movs	r3, #2
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x1fa>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_GPIO_Init+0x1fa>
 8002818:	2300      	movs	r3, #0
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282a:	4937      	ldr	r1, [pc, #220]	@ (8002908 <HAL_GPIO_Init+0x2e8>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002838:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <HAL_GPIO_Init+0x300>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800285c:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <HAL_GPIO_Init+0x300>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002862:	4b2f      	ldr	r3, [pc, #188]	@ (8002920 <HAL_GPIO_Init+0x300>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002886:	4a26      	ldr	r2, [pc, #152]	@ (8002920 <HAL_GPIO_Init+0x300>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800288c:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <HAL_GPIO_Init+0x300>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002920 <HAL_GPIO_Init+0x300>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <HAL_GPIO_Init+0x300>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028da:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_GPIO_Init+0x300>)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f ae9d 	bne.w	8002630 <HAL_GPIO_Init+0x10>
  }
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	48000400 	.word	0x48000400
 8002910:	48000800 	.word	0x48000800
 8002914:	48000c00 	.word	0x48000c00
 8002918:	48001000 	.word	0x48001000
 800291c:	48001400 	.word	0x48001400
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
 8002930:	4613      	mov	r3, r2
 8002932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002940:	e002      	b.n	8002948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43d9      	mvns	r1, r3
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	400b      	ands	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002992:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800299e:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f806 	bl	80029b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d141      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029de:	4b4b      	ldr	r3, [pc, #300]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ea:	d131      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029ec:	4b47      	ldr	r3, [pc, #284]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029f2:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fc:	4b43      	ldr	r3, [pc, #268]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a04:	4a41      	ldr	r2, [pc, #260]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a0c:	4b40      	ldr	r3, [pc, #256]	@ (8002b10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2232      	movs	r2, #50	@ 0x32
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	4a3f      	ldr	r2, [pc, #252]	@ (8002b14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a22:	e002      	b.n	8002a2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2a:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a36:	d102      	bne.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f2      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a3e:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a4a:	d158      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e057      	b.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a50:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a56:	4a2d      	ldr	r2, [pc, #180]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a60:	e04d      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a68:	d141      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d131      	bne.n	8002adc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a90:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2232      	movs	r2, #50	@ 0x32
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aae:	e002      	b.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac2:	d102      	bne.n	8002aca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f2      	bne.n	8002ab0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d112      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e011      	b.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002aec:	e007      	b.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002af6:	4a05      	ldr	r2, [pc, #20]	@ (8002b0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002afc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	20000004 	.word	0x20000004
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b26:	6093      	str	r3, [r2, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40007000 	.word	0x40007000

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e2fe      	b.n	8003148 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b56:	4b97      	ldr	r3, [pc, #604]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b60:	4b94      	ldr	r3, [pc, #592]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3e>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_OscConfig+0x44>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e2d9      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b85      	ldr	r3, [pc, #532]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a84      	ldr	r2, [pc, #528]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7e      	ldr	r2, [pc, #504]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bd0:	4b78      	ldr	r3, [pc, #480]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a77      	ldr	r2, [pc, #476]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b75      	ldr	r3, [pc, #468]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a74      	ldr	r2, [pc, #464]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f8ec 	bl	8001dcc <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f8e8 	bl	8001dcc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e29e      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f8d8 	bl	8001dcc <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f8d4 	bl	8001dcc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e28a      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c32:	4b60      	ldr	r3, [pc, #384]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe8>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d075      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4e:	4b59      	ldr	r3, [pc, #356]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c58:	4b56      	ldr	r3, [pc, #344]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_OscConfig+0x136>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_OscConfig+0x13c>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11f      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c74:	4b4f      	ldr	r3, [pc, #316]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x154>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e25d      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b49      	ldr	r3, [pc, #292]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4946      	ldr	r1, [pc, #280]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ca0:	4b45      	ldr	r3, [pc, #276]	@ (8002db8 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fda5 	bl	80017f4 <HAL_InitTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d043      	beq.n	8002d38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e249      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d023      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f880 	bl	8001dcc <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7ff f87c 	bl	8001dcc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e232      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce2:	4b34      	ldr	r3, [pc, #208]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b31      	ldr	r3, [pc, #196]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	492d      	ldr	r1, [pc, #180]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
 8002d02:	e01a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d04:	4b2b      	ldr	r3, [pc, #172]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2a      	ldr	r2, [pc, #168]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff f85c 	bl	8001dcc <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d18:	f7ff f858 	bl	8001dcc <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e20e      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d2a:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1e0>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d041      	beq.n	8002dca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d54:	4a17      	ldr	r2, [pc, #92]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7ff f835 	bl	8001dcc <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7ff f831 	bl	8001dcc <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1e7      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ef      	beq.n	8002d66 <HAL_RCC_OscConfig+0x22e>
 8002d86:	e020      	b.n	8002dca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7ff f818 	bl	8001dcc <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d9e:	e00d      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da0:	f7ff f814 	bl	8001dcc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d906      	bls.n	8002dbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e1ca      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dbc:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ea      	bne.n	8002da0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80a6 	beq.w	8002f24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ddc:	4b84      	ldr	r3, [pc, #528]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x2b4>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x2b6>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0e:	4b79      	ldr	r3, [pc, #484]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d118      	bne.n	8002e4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1a:	4b76      	ldr	r3, [pc, #472]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a75      	ldr	r2, [pc, #468]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe ffd1 	bl	8001dcc <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7fe ffcd 	bl	8001dcc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e183      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e40:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff4 <HAL_RCC_OscConfig+0x4bc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d108      	bne.n	8002e66 <HAL_RCC_OscConfig+0x32e>
 8002e54:	4b66      	ldr	r3, [pc, #408]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5a:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e64:	e024      	b.n	8002eb0 <HAL_RCC_OscConfig+0x378>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d110      	bne.n	8002e90 <HAL_RCC_OscConfig+0x358>
 8002e6e:	4b60      	ldr	r3, [pc, #384]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	4a5e      	ldr	r2, [pc, #376]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x378>
 8002e90:	4b57      	ldr	r3, [pc, #348]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4a56      	ldr	r2, [pc, #344]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ea0:	4b53      	ldr	r3, [pc, #332]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea6:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe ff88 	bl	8001dcc <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec0:	f7fe ff84 	bl	8001dcc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e138      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	4b46      	ldr	r3, [pc, #280]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ed      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x388>
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe ff71 	bl	8001dcc <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe ff6d 	bl	8001dcc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e121      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ed      	bne.n	8002eee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d03c      	beq.n	8002faa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe ff40 	bl	8001dcc <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f50:	f7fe ff3c 	bl	8001dcc <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0f2      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f62:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ef      	beq.n	8002f50 <HAL_RCC_OscConfig+0x418>
 8002f70:	e01b      	b.n	8002faa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f72:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe ff23 	bl	8001dcc <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f8a:	f7fe ff1f 	bl	8001dcc <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e0d5      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ef      	bne.n	8002f8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80c9 	beq.w	8003146 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	f000 8083 	beq.w	80030c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d15e      	bne.n	8003088 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b8>)
 8002fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fef9 	bl	8001dcc <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	e00c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fef5 	bl	8001dcc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d905      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0ab      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff8:	4b55      	ldr	r3, [pc, #340]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ec      	bne.n	8002fde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003004:	4b52      	ldr	r3, [pc, #328]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4b52      	ldr	r3, [pc, #328]	@ (8003154 <HAL_RCC_OscConfig+0x61c>)
 800300a:	4013      	ands	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6a11      	ldr	r1, [r2, #32]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003014:	3a01      	subs	r2, #1
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800301e:	0212      	lsls	r2, r2, #8
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0552      	lsls	r2, r2, #21
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003032:	0852      	lsrs	r2, r2, #1
 8003034:	3a01      	subs	r2, #1
 8003036:	0652      	lsls	r2, r2, #25
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800303e:	06d2      	lsls	r2, r2, #27
 8003040:	430a      	orrs	r2, r1
 8003042:	4943      	ldr	r1, [pc, #268]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8003044:	4313      	orrs	r3, r2
 8003046:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a40      	ldr	r2, [pc, #256]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003054:	4b3e      	ldr	r3, [pc, #248]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a3d      	ldr	r2, [pc, #244]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800305e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe feb4 	bl	8001dcc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe feb0 	bl	8001dcc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e066      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b35      	ldr	r3, [pc, #212]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x530>
 8003086:	e05e      	b.n	8003146 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b31      	ldr	r3, [pc, #196]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a30      	ldr	r2, [pc, #192]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fe9a 	bl	8001dcc <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fe96 	bl	8001dcc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04c      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ae:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030ba:	4b25      	ldr	r3, [pc, #148]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4924      	ldr	r1, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030c0:	4b25      	ldr	r3, [pc, #148]	@ (8003158 <HAL_RCC_OscConfig+0x620>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60cb      	str	r3, [r1, #12]
 80030c6:	e03e      	b.n	8003146 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e039      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <HAL_RCC_OscConfig+0x618>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d12c      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	3b01      	subs	r3, #1
 80030f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d123      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d11b      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d113      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d109      	bne.n	8003142 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	019f800c 	.word	0x019f800c
 8003158:	feeefffc 	.word	0xfeeefffc

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e11e      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003174:	4b91      	ldr	r3, [pc, #580]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d910      	bls.n	80031a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b8e      	ldr	r3, [pc, #568]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 020f 	bic.w	r2, r3, #15
 800318a:	498c      	ldr	r1, [pc, #560]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b8a      	ldr	r3, [pc, #552]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e106      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d073      	beq.n	8003298 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d129      	bne.n	800320c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b8:	4b81      	ldr	r3, [pc, #516]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0f4      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031c8:	f000 f9d0 	bl	800356c <RCC_GetSysClockFreqFromPLLSource>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4a7c      	ldr	r2, [pc, #496]	@ (80033c4 <HAL_RCC_ClockConfig+0x268>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d93f      	bls.n	8003256 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031d6:	4b7a      	ldr	r3, [pc, #488]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d033      	beq.n	8003256 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d12f      	bne.n	8003256 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031f6:	4b72      	ldr	r3, [pc, #456]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031fe:	4a70      	ldr	r2, [pc, #448]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003204:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e024      	b.n	8003256 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003214:	4b6a      	ldr	r3, [pc, #424]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0c6      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	4b66      	ldr	r3, [pc, #408]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0be      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003234:	f000 f8ce 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003238:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4a61      	ldr	r2, [pc, #388]	@ (80033c4 <HAL_RCC_ClockConfig+0x268>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d909      	bls.n	8003256 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003242:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800324a:	4a5d      	ldr	r2, [pc, #372]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 800324c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003250:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b5a      	ldr	r3, [pc, #360]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4957      	ldr	r1, [pc, #348]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003268:	f7fe fdb0 	bl	8001dcc <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe fdac 	bl	8001dcc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e095      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b4e      	ldr	r3, [pc, #312]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d023      	beq.n	80032ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b43      	ldr	r3, [pc, #268]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a42      	ldr	r2, [pc, #264]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032c8:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032d0:	4a3b      	ldr	r2, [pc, #236]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b39      	ldr	r3, [pc, #228]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4936      	ldr	r1, [pc, #216]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
 80032ea:	e008      	b.n	80032fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d105      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032f2:	4b33      	ldr	r3, [pc, #204]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4a32      	ldr	r2, [pc, #200]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 80032f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d21d      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 020f 	bic.w	r2, r3, #15
 8003314:	4929      	ldr	r1, [pc, #164]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800331c:	f7fe fd56 	bl	8001dcc <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	e00a      	b.n	800333a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003324:	f7fe fd52 	bl	8001dcc <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e03b      	b.n	80033b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <HAL_RCC_ClockConfig+0x260>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d1ed      	bne.n	8003324 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b1a      	ldr	r3, [pc, #104]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4917      	ldr	r1, [pc, #92]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490f      	ldr	r1, [pc, #60]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003386:	f000 f825 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RCC_ClockConfig+0x264>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490c      	ldr	r1, [pc, #48]	@ (80033c8 <HAL_RCC_ClockConfig+0x26c>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <HAL_RCC_ClockConfig+0x270>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_RCC_ClockConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fa22 	bl	80017f4 <HAL_InitTick>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40021000 	.word	0x40021000
 80033c4:	04c4b400 	.word	0x04c4b400
 80033c8:	08014014 	.word	0x08014014
 80033cc:	20000004 	.word	0x20000004
 80033d0:	20000008 	.word	0x20000008

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033da:	4b2c      	ldr	r3, [pc, #176]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e047      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033ec:	4b27      	ldr	r3, [pc, #156]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033f8:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e03e      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033fe:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d136      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003428:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_RCC_GetSysClockFreq+0xc0>)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	4a16      	ldr	r2, [pc, #88]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003432:	68d2      	ldr	r2, [r2, #12]
 8003434:	0a12      	lsrs	r2, r2, #8
 8003436:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	617b      	str	r3, [r7, #20]
      break;
 8003440:	e00c      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4a10      	ldr	r2, [pc, #64]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 800344c:	68d2      	ldr	r2, [r2, #12]
 800344e:	0a12      	lsrs	r2, r2, #8
 8003450:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
      break;
 800345a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	0e5b      	lsrs	r3, r3, #25
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	e001      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800347c:	693b      	ldr	r3, [r7, #16]
}
 800347e:	4618      	mov	r0, r3
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	00f42400 	.word	0x00f42400
 8003494:	016e3600 	.word	0x016e3600

08003498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800349c:	4b03      	ldr	r3, [pc, #12]	@ (80034ac <HAL_RCC_GetHCLKFreq+0x14>)
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034b4:	f7ff fff0 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4904      	ldr	r1, [pc, #16]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08014024 	.word	0x08014024

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034e0:	f7ff ffda 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0adb      	lsrs	r3, r3, #11
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4904      	ldr	r1, [pc, #16]	@ (8003504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08014024 	.word	0x08014024

08003508 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	220f      	movs	r2, #15
 8003516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0203 	and.w	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800353c:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <HAL_RCC_GetClockConfig+0x5c>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	08db      	lsrs	r3, r3, #3
 8003542:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800354a:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <HAL_RCC_GetClockConfig+0x60>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	40022000 	.word	0x40022000

0800356c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003572:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800357c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d10c      	bne.n	80035aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003590:	4a17      	ldr	r2, [pc, #92]	@ (80035f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359a:	68d2      	ldr	r2, [r2, #12]
 800359c:	0a12      	lsrs	r2, r2, #8
 800359e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
    break;
 80035a8:	e00c      	b.n	80035c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035aa:	4a12      	ldr	r2, [pc, #72]	@ (80035f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4a0e      	ldr	r2, [pc, #56]	@ (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b4:	68d2      	ldr	r2, [r2, #12]
 80035b6:	0a12      	lsrs	r2, r2, #8
 80035b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    break;
 80035c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0e5b      	lsrs	r3, r3, #25
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40021000 	.word	0x40021000
 80035f0:	016e3600 	.word	0x016e3600
 80035f4:	00f42400 	.word	0x00f42400

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003600:	2300      	movs	r3, #0
 8003602:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003604:	2300      	movs	r3, #0
 8003606:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 8098 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361a:	4b43      	ldr	r3, [pc, #268]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	4b40      	ldr	r3, [pc, #256]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	4a3f      	ldr	r2, [pc, #252]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	@ 0x58
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003642:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a39      	ldr	r2, [pc, #228]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800364e:	f7fe fbbd 	bl	8001dcc <HAL_GetTick>
 8003652:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003654:	e009      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe fbb9 	bl	8001dcc <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d902      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	74fb      	strb	r3, [r7, #19]
        break;
 8003668:	e005      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366a:	4b30      	ldr	r3, [pc, #192]	@ (800372c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d159      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800367c:	4b2a      	ldr	r3, [pc, #168]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003686:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01e      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d019      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003698:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c4:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fb79 	bl	8001dcc <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036dc:	e00b      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe fb75 	bl	8001dcc <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d902      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	74fb      	strb	r3, [r7, #19]
            break;
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ec      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370a:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003710:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	4903      	ldr	r1, [pc, #12]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003720:	e008      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
 8003726:	e005      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003734:	7c7b      	ldrb	r3, [r7, #17]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373a:	4ba7      	ldr	r3, [pc, #668]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	4aa6      	ldr	r2, [pc, #664]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003752:	4ba1      	ldr	r3, [pc, #644]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f023 0203 	bic.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	499d      	ldr	r1, [pc, #628]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003774:	4b98      	ldr	r3, [pc, #608]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f023 020c 	bic.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4995      	ldr	r1, [pc, #596]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003796:	4b90      	ldr	r3, [pc, #576]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	498c      	ldr	r1, [pc, #560]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b8:	4b87      	ldr	r3, [pc, #540]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	4984      	ldr	r1, [pc, #528]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037da:	4b7f      	ldr	r3, [pc, #508]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	497b      	ldr	r1, [pc, #492]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037fc:	4b76      	ldr	r3, [pc, #472]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003802:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	4973      	ldr	r1, [pc, #460]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800381e:	4b6e      	ldr	r3, [pc, #440]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003824:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	496a      	ldr	r1, [pc, #424]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003840:	4b65      	ldr	r3, [pc, #404]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4962      	ldr	r1, [pc, #392]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003862:	4b5d      	ldr	r3, [pc, #372]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003868:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	4959      	ldr	r1, [pc, #356]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003884:	4b54      	ldr	r3, [pc, #336]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	4951      	ldr	r1, [pc, #324]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038a6:	4b4c      	ldr	r3, [pc, #304]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	4948      	ldr	r1, [pc, #288]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c8:	4b43      	ldr	r3, [pc, #268]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	4940      	ldr	r1, [pc, #256]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038e6:	d105      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e8:	4b3b      	ldr	r3, [pc, #236]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a3a      	ldr	r2, [pc, #232]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003900:	4b35      	ldr	r3, [pc, #212]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390e:	4932      	ldr	r1, [pc, #200]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003920:	4b2d      	ldr	r3, [pc, #180]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a2c      	ldr	r2, [pc, #176]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800392a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003938:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003946:	4924      	ldr	r1, [pc, #144]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003956:	d105      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003958:	4b1f      	ldr	r3, [pc, #124]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a1e      	ldr	r2, [pc, #120]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003962:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003970:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003976:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	4916      	ldr	r1, [pc, #88]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800398e:	d105      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003990:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800399a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d019      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	4908      	ldr	r1, [pc, #32]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039c6:	d109      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c8:	4b03      	ldr	r3, [pc, #12]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a02      	ldr	r2, [pc, #8]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039d2:	60d3      	str	r3, [r2, #12]
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039e8:	4b29      	ldr	r3, [pc, #164]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4926      	ldr	r1, [pc, #152]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a06:	d105      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a08:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d015      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a20:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2e:	4918      	ldr	r1, [pc, #96]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a40:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a58:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a66:	490a      	ldr	r1, [pc, #40]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e049      	b.n	8003b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f841 	bl	8003b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fa30 	bl	8003f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d001      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e054      	b.n	8003c1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a26      	ldr	r2, [pc, #152]	@ (8003c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9a:	d01d      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	@ (8003c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d018      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	@ (8003c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c3c <HAL_TIM_Base_Start_IT+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x80>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xe8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d115      	bne.n	8003c04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xec>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b06      	cmp	r3, #6
 8003be8:	d015      	beq.n	8003c16 <HAL_TIM_Base_Start_IT+0xbe>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d011      	beq.n	8003c16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	e008      	b.n	8003c16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e000      	b.n	8003c18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40015000 	.word	0x40015000
 8003c44:	00010007 	.word	0x00010007

08003c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0202 	mvn.w	r2, #2
 8003c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f931 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f923 	bl	8003ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f934 	bl	8003f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0204 	mvn.w	r2, #4
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f90b 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8fd 	bl	8003ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f90e 	bl	8003f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0208 	mvn.w	r2, #8
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8e5 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8d7 	bl	8003ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8e8 	bl	8003f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d020      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01b      	beq.n	8003d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8bf 	bl	8003efa <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8b1 	bl	8003ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8c2 	bl	8003f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00c      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0201 	mvn.w	r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fb78 	bl	80014a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f969 	bl	80040b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f961 	bl	80040c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00c      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f87c 	bl	8003f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00c      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f06f 0220 	mvn.w	r2, #32
 8003e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f929 	bl	80040a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f935 	bl	80040dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f92d 	bl	80040f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f925 	bl	8004104 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f91d 	bl	8004118 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800407c <TIM_Base_SetConfig+0x144>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d017      	beq.n	8003f80 <TIM_Base_SetConfig+0x48>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d013      	beq.n	8003f80 <TIM_Base_SetConfig+0x48>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a49      	ldr	r2, [pc, #292]	@ (8004080 <TIM_Base_SetConfig+0x148>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_Base_SetConfig+0x48>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a48      	ldr	r2, [pc, #288]	@ (8004084 <TIM_Base_SetConfig+0x14c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x48>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a47      	ldr	r2, [pc, #284]	@ (8004088 <TIM_Base_SetConfig+0x150>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x48>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a46      	ldr	r2, [pc, #280]	@ (800408c <TIM_Base_SetConfig+0x154>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x48>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a45      	ldr	r2, [pc, #276]	@ (8004090 <TIM_Base_SetConfig+0x158>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a39      	ldr	r2, [pc, #228]	@ (800407c <TIM_Base_SetConfig+0x144>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d023      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa0:	d01f      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a36      	ldr	r2, [pc, #216]	@ (8004080 <TIM_Base_SetConfig+0x148>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01b      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a35      	ldr	r2, [pc, #212]	@ (8004084 <TIM_Base_SetConfig+0x14c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d017      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a34      	ldr	r2, [pc, #208]	@ (8004088 <TIM_Base_SetConfig+0x150>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a33      	ldr	r2, [pc, #204]	@ (800408c <TIM_Base_SetConfig+0x154>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a33      	ldr	r2, [pc, #204]	@ (8004094 <TIM_Base_SetConfig+0x15c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a32      	ldr	r2, [pc, #200]	@ (8004098 <TIM_Base_SetConfig+0x160>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	@ (800409c <TIM_Base_SetConfig+0x164>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0xaa>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8004090 <TIM_Base_SetConfig+0x158>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a18      	ldr	r2, [pc, #96]	@ (800407c <TIM_Base_SetConfig+0x144>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <TIM_Base_SetConfig+0x110>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1a      	ldr	r2, [pc, #104]	@ (800408c <TIM_Base_SetConfig+0x154>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00f      	beq.n	8004048 <TIM_Base_SetConfig+0x110>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <TIM_Base_SetConfig+0x15c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00b      	beq.n	8004048 <TIM_Base_SetConfig+0x110>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <TIM_Base_SetConfig+0x160>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d007      	beq.n	8004048 <TIM_Base_SetConfig+0x110>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a18      	ldr	r2, [pc, #96]	@ (800409c <TIM_Base_SetConfig+0x164>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0x110>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a13      	ldr	r2, [pc, #76]	@ (8004090 <TIM_Base_SetConfig+0x158>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d105      	bne.n	800406e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]
  }
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40015000 	.word	0x40015000
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e042      	b.n	80041c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fd fd29 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2224      	movs	r2, #36	@ 0x24
 800415a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f001 f806 	bl	8005188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fd07 	bl	8004b90 <UART_SetConfig>
 8004182:	4603      	mov	r3, r0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e01b      	b.n	80041c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800419a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f001 f885 	bl	80052cc <UART_CheckIdleState>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	@ 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d167      	bne.n	80042b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_UART_Transmit_DMA+0x24>
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e060      	b.n	80042b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	@ 0x21
 8004216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004226:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <HAL_UART_Transmit_DMA+0xf4>)
 8004228:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800422e:	4a25      	ldr	r2, [pc, #148]	@ (80042c4 <HAL_UART_Transmit_DMA+0xf8>)
 8004230:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004236:	4a24      	ldr	r2, [pc, #144]	@ (80042c8 <HAL_UART_Transmit_DMA+0xfc>)
 8004238:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800423e:	2200      	movs	r2, #0
 8004240:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424a:	4619      	mov	r1, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3328      	adds	r3, #40	@ 0x28
 8004252:	461a      	mov	r2, r3
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	f7fd ff4d 	bl	80020f4 <HAL_DMA_Start_IT>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2210      	movs	r2, #16
 8004264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e020      	b.n	80042b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2240      	movs	r2, #64	@ 0x40
 800427a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	613b      	str	r3, [r7, #16]
   return(result);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429c:	623a      	str	r2, [r7, #32]
 800429e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	6a3a      	ldr	r2, [r7, #32]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3728      	adds	r7, #40	@ 0x28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08005797 	.word	0x08005797
 80042c4:	08005831 	.word	0x08005831
 80042c8:	080059b7 	.word	0x080059b7

080042cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	@ 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d137      	bne.n	8004354 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Receive_DMA+0x24>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e030      	b.n	8004356 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_UART_Receive_DMA+0x94>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d01f      	beq.n	8004344 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	613b      	str	r3, [r7, #16]
   return(result);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	623b      	str	r3, [r7, #32]
 8004332:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69f9      	ldr	r1, [r7, #28]
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	61bb      	str	r3, [r7, #24]
   return(result);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	461a      	mov	r2, r3
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 f8d6 	bl	80054fc <UART_Start_Receive_DMA>
 8004350:	4603      	mov	r3, r0
 8004352:	e000      	b.n	8004356 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3728      	adds	r7, #40	@ 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40008000 	.word	0x40008000

08004364 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b090      	sub	sp, #64	@ 0x40
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800437a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b80      	cmp	r3, #128	@ 0x80
 8004388:	d139      	bne.n	80043fe <HAL_UART_DMAStop+0x9a>
 800438a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438c:	2b21      	cmp	r3, #33	@ 0x21
 800438e:	d136      	bne.n	80043fe <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd ff0a 	bl	80021ea <HAL_DMA_Abort>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe f871 	bl	80024c8 <HAL_DMA_GetError>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d105      	bne.n	80043f8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2210      	movs	r2, #16
 80043f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e047      	b.n	8004488 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 f925 	bl	8005648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d13c      	bne.n	8004486 <HAL_UART_DMAStop+0x122>
 800440c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440e:	2b22      	cmp	r3, #34	@ 0x22
 8004410:	d139      	bne.n	8004486 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3308      	adds	r3, #8
 8004418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	60bb      	str	r3, [r7, #8]
   return(result);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004432:	61ba      	str	r2, [r7, #24]
 8004434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6979      	ldr	r1, [r7, #20]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	613b      	str	r3, [r7, #16]
   return(result);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e5      	bne.n	8004412 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d017      	beq.n	8004480 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fec7 	bl	80021ea <HAL_DMA_Abort>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe f82d 	bl	80024c8 <HAL_DMA_GetError>
 800446e:	4603      	mov	r3, r0
 8004470:	2b20      	cmp	r3, #32
 8004472:	d105      	bne.n	8004480 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2210      	movs	r2, #16
 8004478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e003      	b.n	8004488 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 f922 	bl	80056ca <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3740      	adds	r7, #64	@ 0x40
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0ba      	sub	sp, #232	@ 0xe8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044be:	4013      	ands	r3, r2
 80044c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11b      	bne.n	8004504 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8300 	beq.w	8004afa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
      }
      return;
 8004502:	e2fa      	b.n	8004afa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8123 	beq.w	8004754 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800450e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004512:	4b8d      	ldr	r3, [pc, #564]	@ (8004748 <HAL_UART_IRQHandler+0x2b8>)
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800451a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800451e:	4b8b      	ldr	r3, [pc, #556]	@ (800474c <HAL_UART_IRQHandler+0x2bc>)
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8116 	beq.w	8004754 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d011      	beq.n	8004558 <HAL_UART_IRQHandler+0xc8>
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d011      	beq.n	8004588 <HAL_UART_IRQHandler+0xf8>
 8004564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2202      	movs	r2, #2
 8004576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <HAL_UART_IRQHandler+0x128>
 8004594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2204      	movs	r2, #4
 80045a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d017      	beq.n	80045f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004748 <HAL_UART_IRQHandler+0x2b8>)
 80045d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2208      	movs	r2, #8
 80045e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	f043 0208 	orr.w	r2, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d012      	beq.n	8004626 <HAL_UART_IRQHandler+0x196>
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004604:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8266 	beq.w	8004afe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800463e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467a:	2b40      	cmp	r3, #64	@ 0x40
 800467c:	d005      	beq.n	800468a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800467e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004686:	2b00      	cmp	r3, #0
 8004688:	d054      	beq.n	8004734 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 f81d 	bl	80056ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d146      	bne.n	800472c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3308      	adds	r3, #8
 80046c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1d9      	bne.n	800469e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d017      	beq.n	8004724 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046fa:	4a15      	ldr	r2, [pc, #84]	@ (8004750 <HAL_UART_IRQHandler+0x2c0>)
 80046fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004704:	4618      	mov	r0, r3
 8004706:	f7fd fdc9 	bl	800229c <HAL_DMA_Abort_IT>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d019      	beq.n	8004744 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800471e:	4610      	mov	r0, r2
 8004720:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004722:	e00f      	b.n	8004744 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa1d 	bl	8004b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472a:	e00b      	b.n	8004744 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fa19 	bl	8004b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004732:	e007      	b.n	8004744 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fa15 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004742:	e1dc      	b.n	8004afe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	bf00      	nop
    return;
 8004746:	e1da      	b.n	8004afe <HAL_UART_IRQHandler+0x66e>
 8004748:	10000001 	.word	0x10000001
 800474c:	04000120 	.word	0x04000120
 8004750:	08005a37 	.word	0x08005a37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 8170 	bne.w	8004a3e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8169 	beq.w	8004a3e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8162 	beq.w	8004a3e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2210      	movs	r2, #16
 8004780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b40      	cmp	r3, #64	@ 0x40
 800478e:	f040 80d8 	bne.w	8004942 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80af 	beq.w	8004908 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f080 80a7 	bcs.w	8004908 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8087 	bne.w	80048e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004806:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800480e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800481a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1da      	bne.n	80047d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004846:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800484a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800484e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e1      	bne.n	8004822 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800486e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e3      	bne.n	800485e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e4      	bne.n	80048a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fd fc82 	bl	80021ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f939 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004906:	e0fc      	b.n	8004b02 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004912:	429a      	cmp	r2, r3
 8004914:	f040 80f5 	bne.w	8004b02 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b20      	cmp	r3, #32
 8004928:	f040 80eb 	bne.w	8004b02 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f91c 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
      return;
 8004940:	e0df      	b.n	8004b02 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800494e:	b29b      	uxth	r3, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80d1 	beq.w	8004b06 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80cc 	beq.w	8004b06 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800497c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
 8004992:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800499e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e4      	bne.n	800496e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	623b      	str	r3, [r7, #32]
   return(result);
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e1      	bne.n	80049a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0310 	bic.w	r3, r3, #16
 8004a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	69b9      	ldr	r1, [r7, #24]
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	617b      	str	r3, [r7, #20]
   return(result);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e4      	bne.n	80049f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f89e 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a3c:	e063      	b.n	8004b06 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00e      	beq.n	8004a68 <HAL_UART_IRQHandler+0x5d8>
 8004a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 f825 	bl	8005ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a66:	e051      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d014      	beq.n	8004a9e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d03a      	beq.n	8004b0a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
    }
    return;
 8004a9c:	e035      	b.n	8004b0a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_UART_IRQHandler+0x62e>
 8004aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 ffcf 	bl	8005a5a <UART_EndTransmit_IT>
    return;
 8004abc:	e026      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_UART_IRQHandler+0x64e>
 8004aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ace:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fffe 	bl	8005ad8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004adc:	e016      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d010      	beq.n	8004b0c <HAL_UART_IRQHandler+0x67c>
 8004aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da0c      	bge.n	8004b0c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 ffe6 	bl	8005ac4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004af8:	e008      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
      return;
 8004afa:	bf00      	nop
 8004afc:	e006      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
    return;
 8004afe:	bf00      	nop
 8004b00:	e004      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
      return;
 8004b02:	bf00      	nop
 8004b04:	e002      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
      return;
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <HAL_UART_IRQHandler+0x67c>
    return;
 8004b0a:	bf00      	nop
  }
}
 8004b0c:	37e8      	adds	r7, #232	@ 0xe8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop

08004b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b08c      	sub	sp, #48	@ 0x30
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4baa      	ldr	r3, [pc, #680]	@ (8004e68 <UART_SetConfig+0x2d8>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a9f      	ldr	r2, [pc, #636]	@ (8004e6c <UART_SetConfig+0x2dc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004c06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	f023 010f 	bic.w	r1, r3, #15
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a90      	ldr	r2, [pc, #576]	@ (8004e70 <UART_SetConfig+0x2e0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d125      	bne.n	8004c80 <UART_SetConfig+0xf0>
 8004c34:	4b8f      	ldr	r3, [pc, #572]	@ (8004e74 <UART_SetConfig+0x2e4>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d81a      	bhi.n	8004c78 <UART_SetConfig+0xe8>
 8004c42:	a201      	add	r2, pc, #4	@ (adr r2, 8004c48 <UART_SetConfig+0xb8>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004c59 	.word	0x08004c59
 8004c4c:	08004c69 	.word	0x08004c69
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	e116      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004c60:	2302      	movs	r3, #2
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c66:	e112      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e10e      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004c70:	2308      	movs	r3, #8
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c76:	e10a      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7e:	e106      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a7c      	ldr	r2, [pc, #496]	@ (8004e78 <UART_SetConfig+0x2e8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d138      	bne.n	8004cfc <UART_SetConfig+0x16c>
 8004c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e74 <UART_SetConfig+0x2e4>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d82d      	bhi.n	8004cf4 <UART_SetConfig+0x164>
 8004c98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x110>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cd5 	.word	0x08004cd5
 8004ca4:	08004cf5 	.word	0x08004cf5
 8004ca8:	08004cf5 	.word	0x08004cf5
 8004cac:	08004cf5 	.word	0x08004cf5
 8004cb0:	08004ce5 	.word	0x08004ce5
 8004cb4:	08004cf5 	.word	0x08004cf5
 8004cb8:	08004cf5 	.word	0x08004cf5
 8004cbc:	08004cf5 	.word	0x08004cf5
 8004cc0:	08004cdd 	.word	0x08004cdd
 8004cc4:	08004cf5 	.word	0x08004cf5
 8004cc8:	08004cf5 	.word	0x08004cf5
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e0d8      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce2:	e0d4      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cea:	e0d0      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004cec:	2308      	movs	r3, #8
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf2:	e0cc      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cfa:	e0c8      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a5e      	ldr	r2, [pc, #376]	@ (8004e7c <UART_SetConfig+0x2ec>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d125      	bne.n	8004d52 <UART_SetConfig+0x1c2>
 8004d06:	4b5b      	ldr	r3, [pc, #364]	@ (8004e74 <UART_SetConfig+0x2e4>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d10:	2b30      	cmp	r3, #48	@ 0x30
 8004d12:	d016      	beq.n	8004d42 <UART_SetConfig+0x1b2>
 8004d14:	2b30      	cmp	r3, #48	@ 0x30
 8004d16:	d818      	bhi.n	8004d4a <UART_SetConfig+0x1ba>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d00a      	beq.n	8004d32 <UART_SetConfig+0x1a2>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d814      	bhi.n	8004d4a <UART_SetConfig+0x1ba>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <UART_SetConfig+0x19a>
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d008      	beq.n	8004d3a <UART_SetConfig+0x1aa>
 8004d28:	e00f      	b.n	8004d4a <UART_SetConfig+0x1ba>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d30:	e0ad      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d32:	2302      	movs	r3, #2
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d38:	e0a9      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d40:	e0a5      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d42:	2308      	movs	r3, #8
 8004d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d48:	e0a1      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d4a:	2310      	movs	r3, #16
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d50:	e09d      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4a      	ldr	r2, [pc, #296]	@ (8004e80 <UART_SetConfig+0x2f0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d125      	bne.n	8004da8 <UART_SetConfig+0x218>
 8004d5c:	4b45      	ldr	r3, [pc, #276]	@ (8004e74 <UART_SetConfig+0x2e4>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d68:	d016      	beq.n	8004d98 <UART_SetConfig+0x208>
 8004d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d6c:	d818      	bhi.n	8004da0 <UART_SetConfig+0x210>
 8004d6e:	2b80      	cmp	r3, #128	@ 0x80
 8004d70:	d00a      	beq.n	8004d88 <UART_SetConfig+0x1f8>
 8004d72:	2b80      	cmp	r3, #128	@ 0x80
 8004d74:	d814      	bhi.n	8004da0 <UART_SetConfig+0x210>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <UART_SetConfig+0x1f0>
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d008      	beq.n	8004d90 <UART_SetConfig+0x200>
 8004d7e:	e00f      	b.n	8004da0 <UART_SetConfig+0x210>
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e082      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e07e      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d96:	e07a      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	e076      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da6:	e072      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <UART_SetConfig+0x2f4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d12a      	bne.n	8004e08 <UART_SetConfig+0x278>
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <UART_SetConfig+0x2e4>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc0:	d01a      	beq.n	8004df8 <UART_SetConfig+0x268>
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc6:	d81b      	bhi.n	8004e00 <UART_SetConfig+0x270>
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dcc:	d00c      	beq.n	8004de8 <UART_SetConfig+0x258>
 8004dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd2:	d815      	bhi.n	8004e00 <UART_SetConfig+0x270>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <UART_SetConfig+0x250>
 8004dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ddc:	d008      	beq.n	8004df0 <UART_SetConfig+0x260>
 8004dde:	e00f      	b.n	8004e00 <UART_SetConfig+0x270>
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de6:	e052      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004de8:	2302      	movs	r3, #2
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dee:	e04e      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004df0:	2304      	movs	r3, #4
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df6:	e04a      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfe:	e046      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e00:	2310      	movs	r3, #16
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e06:	e042      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a17      	ldr	r2, [pc, #92]	@ (8004e6c <UART_SetConfig+0x2dc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d13a      	bne.n	8004e88 <UART_SetConfig+0x2f8>
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <UART_SetConfig+0x2e4>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e20:	d01a      	beq.n	8004e58 <UART_SetConfig+0x2c8>
 8004e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e26:	d81b      	bhi.n	8004e60 <UART_SetConfig+0x2d0>
 8004e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e2c:	d00c      	beq.n	8004e48 <UART_SetConfig+0x2b8>
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e32:	d815      	bhi.n	8004e60 <UART_SetConfig+0x2d0>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <UART_SetConfig+0x2b0>
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3c:	d008      	beq.n	8004e50 <UART_SetConfig+0x2c0>
 8004e3e:	e00f      	b.n	8004e60 <UART_SetConfig+0x2d0>
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e46:	e022      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4e:	e01e      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e50:	2304      	movs	r3, #4
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e56:	e01a      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5e:	e016      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e60:	2310      	movs	r3, #16
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e66:	e012      	b.n	8004e8e <UART_SetConfig+0x2fe>
 8004e68:	cfff69f3 	.word	0xcfff69f3
 8004e6c:	40008000 	.word	0x40008000
 8004e70:	40013800 	.word	0x40013800
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40004400 	.word	0x40004400
 8004e7c:	40004800 	.word	0x40004800
 8004e80:	40004c00 	.word	0x40004c00
 8004e84:	40005000 	.word	0x40005000
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4aae      	ldr	r2, [pc, #696]	@ (800514c <UART_SetConfig+0x5bc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	f040 8097 	bne.w	8004fc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d823      	bhi.n	8004eea <UART_SetConfig+0x35a>
 8004ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <UART_SetConfig+0x318>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004eeb 	.word	0x08004eeb
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004eeb 	.word	0x08004eeb
 8004eb8:	08004edb 	.word	0x08004edb
 8004ebc:	08004eeb 	.word	0x08004eeb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004eeb 	.word	0x08004eeb
 8004ec8:	08004ee3 	.word	0x08004ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7fe faf0 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ed2:	e010      	b.n	8004ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed4:	4b9e      	ldr	r3, [pc, #632]	@ (8005150 <UART_SetConfig+0x5c0>)
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ed8:	e00d      	b.n	8004ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eda:	f7fe fa7b 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8004ede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ee0:	e009      	b.n	8004ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ee8:	e005      	b.n	8004ef6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ef4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8130 	beq.w	800515e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	4a94      	ldr	r2, [pc, #592]	@ (8005154 <UART_SetConfig+0x5c4>)
 8004f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d305      	bcc.n	8004f2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d903      	bls.n	8004f36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f34:	e113      	b.n	800515e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	2200      	movs	r2, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	60fa      	str	r2, [r7, #12]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	4a84      	ldr	r2, [pc, #528]	@ (8005154 <UART_SetConfig+0x5c4>)
 8004f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f58:	f7fb fbd6 	bl	8000708 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4610      	mov	r0, r2
 8004f62:	4619      	mov	r1, r3
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	020b      	lsls	r3, r1, #8
 8004f6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f72:	0202      	lsls	r2, r0, #8
 8004f74:	6979      	ldr	r1, [r7, #20]
 8004f76:	6849      	ldr	r1, [r1, #4]
 8004f78:	0849      	lsrs	r1, r1, #1
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	4605      	mov	r5, r0
 8004f80:	eb12 0804 	adds.w	r8, r2, r4
 8004f84:	eb43 0905 	adc.w	r9, r3, r5
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	469a      	mov	sl, r3
 8004f90:	4693      	mov	fp, r2
 8004f92:	4652      	mov	r2, sl
 8004f94:	465b      	mov	r3, fp
 8004f96:	4640      	mov	r0, r8
 8004f98:	4649      	mov	r1, r9
 8004f9a:	f7fb fbb5 	bl	8000708 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fac:	d308      	bcc.n	8004fc0 <UART_SetConfig+0x430>
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb4:	d204      	bcs.n	8004fc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6a3a      	ldr	r2, [r7, #32]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e0ce      	b.n	800515e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fc6:	e0ca      	b.n	800515e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fd0:	d166      	bne.n	80050a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d827      	bhi.n	800502a <UART_SetConfig+0x49a>
 8004fda:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0x450>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe fa54 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8005008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800500a:	e014      	b.n	8005036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fe fa66 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8005010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005012:	e010      	b.n	8005036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b4e      	ldr	r3, [pc, #312]	@ (8005150 <UART_SetConfig+0x5c0>)
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005018:	e00d      	b.n	8005036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fe f9db 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800501e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005020:	e009      	b.n	8005036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005028:	e005      	b.n	8005036 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8090 	beq.w	800515e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	4a44      	ldr	r2, [pc, #272]	@ (8005154 <UART_SetConfig+0x5c4>)
 8005044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005048:	461a      	mov	r2, r3
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005050:	005a      	lsls	r2, r3, #1
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	441a      	add	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d916      	bls.n	8005098 <UART_SetConfig+0x508>
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d212      	bcs.n	8005098 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f023 030f 	bic.w	r3, r3, #15
 800507a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	b29a      	uxth	r2, r3
 8005088:	8bfb      	ldrh	r3, [r7, #30]
 800508a:	4313      	orrs	r3, r2
 800508c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	8bfa      	ldrh	r2, [r7, #30]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e062      	b.n	800515e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800509e:	e05e      	b.n	800515e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d828      	bhi.n	80050fa <UART_SetConfig+0x56a>
 80050a8:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <UART_SetConfig+0x520>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050fb 	.word	0x080050fb
 80050c0:	080050eb 	.word	0x080050eb
 80050c4:	080050fb 	.word	0x080050fb
 80050c8:	080050fb 	.word	0x080050fb
 80050cc:	080050fb 	.word	0x080050fb
 80050d0:	080050f3 	.word	0x080050f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d4:	f7fe f9ec 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80050d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050da:	e014      	b.n	8005106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050dc:	f7fe f9fe 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 80050e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050e2:	e010      	b.n	8005106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <UART_SetConfig+0x5c0>)
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050e8:	e00d      	b.n	8005106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ea:	f7fe f973 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80050ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050f0:	e009      	b.n	8005106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050f8:	e005      	b.n	8005106 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005104:	bf00      	nop
    }

    if (pclk != 0U)
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d028      	beq.n	800515e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	4a10      	ldr	r2, [pc, #64]	@ (8005154 <UART_SetConfig+0x5c4>)
 8005112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005116:	461a      	mov	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	fbb3 f2f2 	udiv	r2, r3, r2
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	441a      	add	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	fbb2 f3f3 	udiv	r3, r2, r3
 800512e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	2b0f      	cmp	r3, #15
 8005134:	d910      	bls.n	8005158 <UART_SetConfig+0x5c8>
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800513c:	d20c      	bcs.n	8005158 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	b29a      	uxth	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e009      	b.n	800515e <UART_SetConfig+0x5ce>
 800514a:	bf00      	nop
 800514c:	40008000 	.word	0x40008000
 8005150:	00f42400 	.word	0x00f42400
 8005154:	0801402c 	.word	0x0801402c
      }
      else
      {
        ret = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2201      	movs	r2, #1
 8005162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2201      	movs	r2, #1
 800516a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2200      	movs	r2, #0
 8005178:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800517a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800517e:	4618      	mov	r0, r3
 8005180:	3730      	adds	r7, #48	@ 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005286:	d10a      	bne.n	800529e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b098      	sub	sp, #96	@ 0x60
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052dc:	f7fc fd76 	bl	8001dcc <HAL_GetTick>
 80052e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d12f      	bne.n	8005350 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f8:	2200      	movs	r2, #0
 80052fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f88e 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d022      	beq.n	8005350 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005328:	647b      	str	r3, [r7, #68]	@ 0x44
 800532a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800532e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e6      	bne.n	800530a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e063      	b.n	8005418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d149      	bne.n	80053f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005366:	2200      	movs	r2, #0
 8005368:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f857 	bl	8005420 <UART_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d03c      	beq.n	80053f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	623b      	str	r3, [r7, #32]
   return(result);
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30
 8005398:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800539c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e6      	bne.n	8005378 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ca:	61fa      	str	r2, [r7, #28]
 80053cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	69b9      	ldr	r1, [r7, #24]
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	617b      	str	r3, [r7, #20]
   return(result);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e012      	b.n	8005418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3758      	adds	r7, #88	@ 0x58
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005430:	e04f      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005438:	d04b      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fc fcc7 	bl	8001dcc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <UART_WaitOnFlagUntilTimeout+0x30>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e04e      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d037      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b80      	cmp	r3, #128	@ 0x80
 8005466:	d034      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d031      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b08      	cmp	r3, #8
 800547a:	d110      	bne.n	800549e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f920 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2208      	movs	r2, #8
 800548e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e029      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ac:	d111      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f906 	bl	80056ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e00f      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d0a0      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b096      	sub	sp, #88	@ 0x58
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2222      	movs	r2, #34	@ 0x22
 8005524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552e:	2b00      	cmp	r3, #0
 8005530:	d02d      	beq.n	800558e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	4a40      	ldr	r2, [pc, #256]	@ (800563c <UART_Start_Receive_DMA+0x140>)
 800553a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005542:	4a3f      	ldr	r2, [pc, #252]	@ (8005640 <UART_Start_Receive_DMA+0x144>)
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800554c:	4a3d      	ldr	r2, [pc, #244]	@ (8005644 <UART_Start_Receive_DMA+0x148>)
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005556:	2200      	movs	r2, #0
 8005558:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3324      	adds	r3, #36	@ 0x24
 8005566:	4619      	mov	r1, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	461a      	mov	r2, r3
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	f7fc fdc0 	bl	80020f4 <HAL_DMA_Start_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2210      	movs	r2, #16
 800557e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e051      	b.n	8005632 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d018      	beq.n	80055c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80055c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	653b      	str	r3, [r7, #80]	@ 0x50
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80055ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80055f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	613b      	str	r3, [r7, #16]
   return(result);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800561c:	623a      	str	r2, [r7, #32]
 800561e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	69f9      	ldr	r1, [r7, #28]
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	61bb      	str	r3, [r7, #24]
   return(result);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3758      	adds	r7, #88	@ 0x58
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	0800584d 	.word	0x0800584d
 8005640:	08005979 	.word	0x08005979
 8005644:	080059b7 	.word	0x080059b7

08005648 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b08f      	sub	sp, #60	@ 0x3c
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	61fb      	str	r3, [r7, #28]
   return(result);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005664:	637b      	str	r3, [r7, #52]	@ 0x34
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005670:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	60bb      	str	r3, [r7, #8]
   return(result);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005698:	633b      	str	r3, [r7, #48]	@ 0x30
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a2:	61ba      	str	r2, [r7, #24]
 80056a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	613b      	str	r3, [r7, #16]
   return(result);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80056be:	bf00      	nop
 80056c0:	373c      	adds	r7, #60	@ 0x3c
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b095      	sub	sp, #84	@ 0x54
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	61fb      	str	r3, [r7, #28]
   return(result);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800572e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d118      	bne.n	8005776 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	60bb      	str	r3, [r7, #8]
   return(result);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 0310 	bic.w	r3, r3, #16
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6979      	ldr	r1, [r7, #20]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	613b      	str	r3, [r7, #16]
   return(result);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e6      	bne.n	8005744 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800578a:	bf00      	nop
 800578c:	3754      	adds	r7, #84	@ 0x54
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b090      	sub	sp, #64	@ 0x40
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d137      	bne.n	8005822 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	623b      	str	r3, [r7, #32]
   return(result);
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057da:	633a      	str	r2, [r7, #48]	@ 0x30
 80057dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
 8005804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	617b      	str	r3, [r7, #20]
   return(result);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005820:	e002      	b.n	8005828 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005822:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005824:	f7ff f976 	bl	8004b14 <HAL_UART_TxCpltCallback>
}
 8005828:	bf00      	nop
 800582a:	3740      	adds	r7, #64	@ 0x40
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff f972 	bl	8004b28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b09c      	sub	sp, #112	@ 0x70
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d171      	bne.n	800594c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800586a:	2200      	movs	r2, #0
 800586c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800587e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800588e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005890:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800589c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80058ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3308      	adds	r3, #8
 80058c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80058c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e5      	bne.n	80058a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	623b      	str	r3, [r7, #32]
   return(result);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800590a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005916:	2b01      	cmp	r3, #1
 8005918:	d118      	bne.n	800594c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60fb      	str	r3, [r7, #12]
   return(result);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	69b9      	ldr	r1, [r7, #24]
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	617b      	str	r3, [r7, #20]
   return(result);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800594e:	2200      	movs	r2, #0
 8005950:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800595c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005960:	4619      	mov	r1, r3
 8005962:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005964:	f7ff f908 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005968:	e002      	b.n	8005970 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800596a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800596c:	f7ff f8e6 	bl	8004b3c <HAL_UART_RxCpltCallback>
}
 8005970:	bf00      	nop
 8005972:	3770      	adds	r7, #112	@ 0x70
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d109      	bne.n	80059a8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	4619      	mov	r1, r3
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff f8e9 	bl	8004b78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059a6:	e002      	b.n	80059ae <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff f8d1 	bl	8004b50 <HAL_UART_RxHalfCpltCallback>
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b086      	sub	sp, #24
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b80      	cmp	r3, #128	@ 0x80
 80059e0:	d109      	bne.n	80059f6 <UART_DMAError+0x40>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b21      	cmp	r3, #33	@ 0x21
 80059e6:	d106      	bne.n	80059f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80059f0:	6978      	ldr	r0, [r7, #20]
 80059f2:	f7ff fe29 	bl	8005648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d109      	bne.n	8005a18 <UART_DMAError+0x62>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b22      	cmp	r3, #34	@ 0x22
 8005a08:	d106      	bne.n	8005a18 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7ff fe59 	bl	80056ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1e:	f043 0210 	orr.w	r2, r3, #16
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a28:	6978      	ldr	r0, [r7, #20]
 8005a2a:	f7ff f89b 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff f889 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b088      	sub	sp, #32
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e6      	bne.n	8005a62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff f836 	bl	8004b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa8:	bf00      	nop
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e027      	b.n	8005b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2224      	movs	r2, #36	@ 0x24
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e02d      	b.n	8005bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2224      	movs	r2, #36	@ 0x24
 8005b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f850 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e02d      	b.n	8005c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2224      	movs	r2, #36	@ 0x24
 8005bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f812 	bl	8005c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c78:	e031      	b.n	8005cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	0e5b      	lsrs	r3, r3, #25
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	0f5b      	lsrs	r3, r3, #29
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	7b3a      	ldrb	r2, [r7, #12]
 8005ca6:	4911      	ldr	r1, [pc, #68]	@ (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005ca8:	5c8a      	ldrb	r2, [r1, r2]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cae:	7b3a      	ldrb	r2, [r7, #12]
 8005cb0:	490f      	ldr	r1, [pc, #60]	@ (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	7b7a      	ldrb	r2, [r7, #13]
 8005cc4:	4909      	ldr	r1, [pc, #36]	@ (8005cec <UARTEx_SetNbDataToProcess+0x94>)
 8005cc6:	5c8a      	ldrb	r2, [r1, r2]
 8005cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ccc:	7b7a      	ldrb	r2, [r7, #13]
 8005cce:	4908      	ldr	r1, [pc, #32]	@ (8005cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	08014044 	.word	0x08014044
 8005cf0:	0801404c 	.word	0x0801404c

08005cf4 <__NVIC_SetPriority>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	6039      	str	r1, [r7, #0]
 8005cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	db0a      	blt.n	8005d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	490c      	ldr	r1, [pc, #48]	@ (8005d40 <__NVIC_SetPriority+0x4c>)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	0112      	lsls	r2, r2, #4
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d1c:	e00a      	b.n	8005d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	4908      	ldr	r1, [pc, #32]	@ (8005d44 <__NVIC_SetPriority+0x50>)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	440b      	add	r3, r1
 8005d32:	761a      	strb	r2, [r3, #24]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000e100 	.word	0xe000e100
 8005d44:	e000ed00 	.word	0xe000ed00

08005d48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <SysTick_Handler+0x1c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d50:	f001 fd6e 	bl	8007830 <xTaskGetSchedulerState>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d001      	beq.n	8005d5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d5a:	f002 fb65 	bl	8008428 <xPortSysTickHandler>
  }
}
 8005d5e:	bf00      	nop
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	e000e010 	.word	0xe000e010

08005d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f06f 0004 	mvn.w	r0, #4
 8005d72:	f7ff ffbf 	bl	8005cf4 <__NVIC_SetPriority>
#endif
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d82:	f3ef 8305 	mrs	r3, IPSR
 8005d86:	603b      	str	r3, [r7, #0]
  return(result);
 8005d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d8e:	f06f 0305 	mvn.w	r3, #5
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	e00c      	b.n	8005db0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d96:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <osKernelInitialize+0x44>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d9e:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <osKernelInitialize+0x44>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e002      	b.n	8005db0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	200063b8 	.word	0x200063b8

08005dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	603b      	str	r3, [r7, #0]
  return(result);
 8005dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dd6:	f06f 0305 	mvn.w	r3, #5
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e010      	b.n	8005e00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <osKernelStart+0x48>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d109      	bne.n	8005dfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005de6:	f7ff ffbf 	bl	8005d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dea:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <osKernelStart+0x48>)
 8005dec:	2202      	movs	r2, #2
 8005dee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005df0:	f001 f892 	bl	8006f18 <vTaskStartScheduler>
      stat = osOK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e002      	b.n	8005e00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200063b8 	.word	0x200063b8

08005e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	@ 0x38
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e20:	f3ef 8305 	mrs	r3, IPSR
 8005e24:	617b      	str	r3, [r7, #20]
  return(result);
 8005e26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d17e      	bne.n	8005f2a <osThreadNew+0x11a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07b      	beq.n	8005f2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e36:	2318      	movs	r3, #24
 8005e38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d045      	beq.n	8005ed6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <osThreadNew+0x48>
        name = attr->name;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <osThreadNew+0x6e>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b38      	cmp	r3, #56	@ 0x38
 8005e70:	d805      	bhi.n	8005e7e <osThreadNew+0x6e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <osThreadNew+0x72>
        return (NULL);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e054      	b.n	8005f2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <osThreadNew+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005ea0:	d90a      	bls.n	8005eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <osThreadNew+0xa8>
        mem = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e010      	b.n	8005eda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <osThreadNew+0xca>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <osThreadNew+0xca>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <osThreadNew+0xca>
          mem = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e001      	b.n	8005eda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d110      	bne.n	8005f02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fe1a 	bl	8006b30 <xTaskCreateStatic>
 8005efc:	4603      	mov	r3, r0
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e013      	b.n	8005f2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fe68 	bl	8006bf0 <xTaskCreate>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <osThreadNew+0x11a>
            hTask = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f2a:	693b      	ldr	r3, [r7, #16]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3728      	adds	r7, #40	@ 0x28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f3c:	f3ef 8305 	mrs	r3, IPSR
 8005f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <osDelay+0x1c>
    stat = osErrorISR;
 8005f48:	f06f 0305 	mvn.w	r3, #5
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e007      	b.n	8005f60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 ffa6 	bl	8006eac <vTaskDelay>
    }
  }

  return (stat);
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a07      	ldr	r2, [pc, #28]	@ (8005f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4a06      	ldr	r2, [pc, #24]	@ (8005f9c <vApplicationGetIdleTaskMemory+0x30>)
 8005f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2280      	movs	r2, #128	@ 0x80
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	200063bc 	.word	0x200063bc
 8005f9c:	20006464 	.word	0x20006464

08005fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a07      	ldr	r2, [pc, #28]	@ (8005fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a06      	ldr	r2, [pc, #24]	@ (8005fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8005fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20006664 	.word	0x20006664
 8005fd0:	2000670c 	.word	0x2000670c

08005fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 0208 	add.w	r2, r3, #8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f103 0208 	add.w	r2, r3, #8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0208 	add.w	r2, r3, #8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800608c:	d103      	bne.n	8006096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e00c      	b.n	80060b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3308      	adds	r3, #8
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e002      	b.n	80060a4 <vListInsert+0x2e>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d2f6      	bcs.n	800609e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6892      	ldr	r2, [r2, #8]
 80060fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6852      	ldr	r2, [r2, #4]
 8006108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d103      	bne.n	800611c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	1e5a      	subs	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueGenericReset+0x2c>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60bb      	str	r3, [r7, #8]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006168:	f002 f8ce 	bl	8008308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	68f9      	ldr	r1, [r7, #12]
 8006176:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006198:	3b01      	subs	r3, #1
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	441a      	add	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	22ff      	movs	r2, #255	@ 0xff
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	22ff      	movs	r2, #255	@ 0xff
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d114      	bne.n	80061e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01a      	beq.n	80061fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3310      	adds	r3, #16
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f942 	bl	8007454 <xTaskRemoveFromEventList>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d012      	beq.n	80061fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061d6:	4b0d      	ldr	r3, [pc, #52]	@ (800620c <xQueueGenericReset+0xd0>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	e009      	b.n	80061fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3310      	adds	r3, #16
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fef1 	bl	8005fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3324      	adds	r3, #36	@ 0x24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff feec 	bl	8005fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061fc:	f002 f8b6 	bl	800836c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006200:	2301      	movs	r3, #1
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	@ 0x38
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006236:	bf00      	nop
 8006238:	bf00      	nop
 800623a:	e7fd      	b.n	8006238 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <xQueueGenericCreateStatic+0x56>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <xQueueGenericCreateStatic+0x5a>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <xQueueGenericCreateStatic+0x5c>
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	623b      	str	r3, [r7, #32]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <xQueueGenericCreateStatic+0x84>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xQueueGenericCreateStatic+0x88>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xQueueGenericCreateStatic+0x8a>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	61fb      	str	r3, [r7, #28]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062b6:	2350      	movs	r3, #80	@ 0x50
 80062b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b50      	cmp	r3, #80	@ 0x50
 80062be:	d00b      	beq.n	80062d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	61bb      	str	r3, [r7, #24]
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80062de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00d      	beq.n	8006300 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f805 	bl	800630a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006302:	4618      	mov	r0, r3
 8006304:	3730      	adds	r7, #48	@ 0x30
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e002      	b.n	800632c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006338:	2101      	movs	r1, #1
 800633a:	69b8      	ldr	r0, [r7, #24]
 800633c:	f7ff fefe 	bl	800613c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	78fa      	ldrb	r2, [r7, #3]
 8006344:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006348:	bf00      	nop
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08e      	sub	sp, #56	@ 0x38
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800635e:	2300      	movs	r3, #0
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <xQueueGenericSend+0x34>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <xQueueGenericSend+0x42>
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <xQueueGenericSend+0x46>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <xQueueGenericSend+0x48>
 8006396:	2300      	movs	r3, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <xQueueGenericSend+0x64>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSend+0x72>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <xQueueGenericSend+0x76>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueGenericSend+0x78>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <xQueueGenericSend+0x94>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	623b      	str	r3, [r7, #32]
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e4:	f001 fa24 	bl	8007830 <xTaskGetSchedulerState>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <xQueueGenericSend+0xa4>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <xQueueGenericSend+0xa8>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <xQueueGenericSend+0xaa>
 80063f8:	2300      	movs	r3, #0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <xQueueGenericSend+0xc6>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61fb      	str	r3, [r7, #28]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006416:	f001 ff77 	bl	8008308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006422:	429a      	cmp	r2, r3
 8006424:	d302      	bcc.n	800642c <xQueueGenericSend+0xdc>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d129      	bne.n	8006480 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006432:	f000 fa0f 	bl	8006854 <prvCopyDataToQueue>
 8006436:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	3324      	adds	r3, #36	@ 0x24
 8006444:	4618      	mov	r0, r3
 8006446:	f001 f805 	bl	8007454 <xTaskRemoveFromEventList>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006450:	4b3f      	ldr	r3, [pc, #252]	@ (8006550 <xQueueGenericSend+0x200>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	e00a      	b.n	8006478 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006468:	4b39      	ldr	r3, [pc, #228]	@ (8006550 <xQueueGenericSend+0x200>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006478:	f001 ff78 	bl	800836c <vPortExitCritical>
				return pdPASS;
 800647c:	2301      	movs	r3, #1
 800647e:	e063      	b.n	8006548 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006486:	f001 ff71 	bl	800836c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800648a:	2300      	movs	r3, #0
 800648c:	e05c      	b.n	8006548 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800648e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f867 	bl	800756c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064a2:	f001 ff63 	bl	800836c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064a6:	f000 fda7 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064aa:	f001 ff2d 	bl	8008308 <vPortEnterCritical>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ba:	d103      	bne.n	80064c4 <xQueueGenericSend+0x174>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d0:	d103      	bne.n	80064da <xQueueGenericSend+0x18a>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064da:	f001 ff47 	bl	800836c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064de:	1d3a      	adds	r2, r7, #4
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f856 	bl	8007598 <xTaskCheckForTimeOut>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d124      	bne.n	800653c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064f4:	f000 faa6 	bl	8006a44 <prvIsQueueFull>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d018      	beq.n	8006530 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	3310      	adds	r3, #16
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ff52 	bl	80073b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800650c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800650e:	f000 fa31 	bl	8006974 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006512:	f000 fd7f 	bl	8007014 <xTaskResumeAll>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	f47f af7c 	bne.w	8006416 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800651e:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <xQueueGenericSend+0x200>)
 8006520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	e772      	b.n	8006416 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006532:	f000 fa1f 	bl	8006974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006536:	f000 fd6d 	bl	8007014 <xTaskResumeAll>
 800653a:	e76c      	b.n	8006416 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800653c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800653e:	f000 fa19 	bl	8006974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006542:	f000 fd67 	bl	8007014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006548:	4618      	mov	r0, r3
 800654a:	3738      	adds	r7, #56	@ 0x38
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b090      	sub	sp, #64	@ 0x40
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10b      	bne.n	8006584 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	e7fd      	b.n	8006580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <xQueueGenericSendFromISR+0x3e>
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <xQueueGenericSendFromISR+0x42>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <xQueueGenericSendFromISR+0x44>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSendFromISR+0x6e>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSendFromISR+0x72>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSendFromISR+0x74>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	e7fd      	b.n	80065e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065e4:	f001 ff70 	bl	80084c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065e8:	f3ef 8211 	mrs	r2, BASEPRI
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	61fa      	str	r2, [r7, #28]
 80065fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006600:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660c:	429a      	cmp	r2, r3
 800660e:	d302      	bcc.n	8006616 <xQueueGenericSendFromISR+0xc2>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d12f      	bne.n	8006676 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800661c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800662c:	f000 f912 	bl	8006854 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006630:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006638:	d112      	bne.n	8006660 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	3324      	adds	r3, #36	@ 0x24
 8006646:	4618      	mov	r0, r3
 8006648:	f000 ff04 	bl	8007454 <xTaskRemoveFromEventList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e007      	b.n	8006670 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006660:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006664:	3301      	adds	r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	b25a      	sxtb	r2, r3
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006674:	e001      	b.n	800667a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006688:	4618      	mov	r0, r3
 800668a:	3740      	adds	r7, #64	@ 0x40
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	@ 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <xQueueReceive+0x32>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	623b      	str	r3, [r7, #32]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <xQueueReceive+0x40>
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <xQueueReceive+0x44>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <xQueueReceive+0x46>
 80066d4:	2300      	movs	r3, #0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <xQueueReceive+0x62>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	61fb      	str	r3, [r7, #28]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f2:	f001 f89d 	bl	8007830 <xTaskGetSchedulerState>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <xQueueReceive+0x72>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <xQueueReceive+0x76>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueReceive+0x78>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueReceive+0x94>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61bb      	str	r3, [r7, #24]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006724:	f001 fdf0 	bl	8008308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01f      	beq.n	8006774 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006738:	f000 f8f6 	bl	8006928 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	1e5a      	subs	r2, r3, #1
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00f      	beq.n	800676c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674e:	3310      	adds	r3, #16
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fe7f 	bl	8007454 <xTaskRemoveFromEventList>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800675c:	4b3c      	ldr	r3, [pc, #240]	@ (8006850 <xQueueReceive+0x1c0>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800676c:	f001 fdfe 	bl	800836c <vPortExitCritical>
				return pdPASS;
 8006770:	2301      	movs	r3, #1
 8006772:	e069      	b.n	8006848 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800677a:	f001 fdf7 	bl	800836c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800677e:	2300      	movs	r3, #0
 8006780:	e062      	b.n	8006848 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006788:	f107 0310 	add.w	r3, r7, #16
 800678c:	4618      	mov	r0, r3
 800678e:	f000 feed 	bl	800756c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006792:	2301      	movs	r3, #1
 8006794:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006796:	f001 fde9 	bl	800836c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800679a:	f000 fc2d 	bl	8006ff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800679e:	f001 fdb3 	bl	8008308 <vPortEnterCritical>
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067a8:	b25b      	sxtb	r3, r3
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ae:	d103      	bne.n	80067b8 <xQueueReceive+0x128>
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067c4:	d103      	bne.n	80067ce <xQueueReceive+0x13e>
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067ce:	f001 fdcd 	bl	800836c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067d2:	1d3a      	adds	r2, r7, #4
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fedc 	bl	8007598 <xTaskCheckForTimeOut>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d123      	bne.n	800682e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067e8:	f000 f916 	bl	8006a18 <prvIsQueueEmpty>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d017      	beq.n	8006822 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f4:	3324      	adds	r3, #36	@ 0x24
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4611      	mov	r1, r2
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fdd8 	bl	80073b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006802:	f000 f8b7 	bl	8006974 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006806:	f000 fc05 	bl	8007014 <xTaskResumeAll>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d189      	bne.n	8006724 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006810:	4b0f      	ldr	r3, [pc, #60]	@ (8006850 <xQueueReceive+0x1c0>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	e780      	b.n	8006724 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006824:	f000 f8a6 	bl	8006974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006828:	f000 fbf4 	bl	8007014 <xTaskResumeAll>
 800682c:	e77a      	b.n	8006724 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800682e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006830:	f000 f8a0 	bl	8006974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006834:	f000 fbee 	bl	8007014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800683a:	f000 f8ed 	bl	8006a18 <prvIsQueueEmpty>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	f43f af6f 	beq.w	8006724 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006846:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006848:	4618      	mov	r0, r3
 800684a:	3730      	adds	r7, #48	@ 0x30
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d14d      	bne.n	8006916 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fff4 	bl	800786c <xTaskPriorityDisinherit>
 8006884:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	e043      	b.n	8006916 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d119      	bne.n	80068c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6858      	ldr	r0, [r3, #4]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	461a      	mov	r2, r3
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	f00c fcd7 	bl	8013252 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	441a      	add	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d32b      	bcc.n	8006916 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	605a      	str	r2, [r3, #4]
 80068c6:	e026      	b.n	8006916 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68d8      	ldr	r0, [r3, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	461a      	mov	r2, r3
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	f00c fcbd 	bl	8013252 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	425b      	negs	r3, r3
 80068e2:	441a      	add	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d207      	bcs.n	8006904 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	425b      	negs	r3, r3
 80068fe:	441a      	add	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d105      	bne.n	8006916 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	3b01      	subs	r3, #1
 8006914:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800691e:	697b      	ldr	r3, [r7, #20]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d018      	beq.n	800696c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	429a      	cmp	r2, r3
 8006952:	d303      	bcc.n	800695c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68d9      	ldr	r1, [r3, #12]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006964:	461a      	mov	r2, r3
 8006966:	6838      	ldr	r0, [r7, #0]
 8006968:	f00c fc73 	bl	8013252 <memcpy>
	}
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800697c:	f001 fcc4 	bl	8008308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006986:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006988:	e011      	b.n	80069ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d012      	beq.n	80069b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3324      	adds	r3, #36	@ 0x24
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fd5c 	bl	8007454 <xTaskRemoveFromEventList>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069a2:	f000 fe5d 	bl	8007660 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dce9      	bgt.n	800698a <prvUnlockQueue+0x16>
 80069b6:	e000      	b.n	80069ba <prvUnlockQueue+0x46>
					break;
 80069b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	22ff      	movs	r2, #255	@ 0xff
 80069be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069c2:	f001 fcd3 	bl	800836c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069c6:	f001 fc9f 	bl	8008308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069d2:	e011      	b.n	80069f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3310      	adds	r3, #16
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fd37 	bl	8007454 <xTaskRemoveFromEventList>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069ec:	f000 fe38 	bl	8007660 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dce9      	bgt.n	80069d4 <prvUnlockQueue+0x60>
 8006a00:	e000      	b.n	8006a04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	22ff      	movs	r2, #255	@ 0xff
 8006a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a0c:	f001 fcae 	bl	800836c <vPortExitCritical>
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a20:	f001 fc72 	bl	8008308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e001      	b.n	8006a36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a36:	f001 fc99 	bl	800836c <vPortExitCritical>

	return xReturn;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a4c:	f001 fc5c 	bl	8008308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d102      	bne.n	8006a62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e001      	b.n	8006a66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 fc81 	bl	800836c <vPortExitCritical>

	return xReturn;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e014      	b.n	8006aae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a84:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac4 <vQueueAddToRegistry+0x50>)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10b      	bne.n	8006aa8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a90:	490c      	ldr	r1, [pc, #48]	@ (8006ac4 <vQueueAddToRegistry+0x50>)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac4 <vQueueAddToRegistry+0x50>)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006aa6:	e006      	b.n	8006ab6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b07      	cmp	r3, #7
 8006ab2:	d9e7      	bls.n	8006a84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20006b0c 	.word	0x20006b0c

08006ac8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ad8:	f001 fc16 	bl	8008308 <vPortEnterCritical>
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ae8:	d103      	bne.n	8006af2 <vQueueWaitForMessageRestricted+0x2a>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006af8:	b25b      	sxtb	r3, r3
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006afe:	d103      	bne.n	8006b08 <vQueueWaitForMessageRestricted+0x40>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b08:	f001 fc30 	bl	800836c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3324      	adds	r3, #36	@ 0x24
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fc6d 	bl	80073fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b22:	6978      	ldr	r0, [r7, #20]
 8006b24:	f7ff ff26 	bl	8006974 <prvUnlockQueue>
	}
 8006b28:	bf00      	nop
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08e      	sub	sp, #56	@ 0x38
 8006b34:	af04      	add	r7, sp, #16
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	623b      	str	r3, [r7, #32]
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	61fb      	str	r3, [r7, #28]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b7a:	23a8      	movs	r3, #168	@ 0xa8
 8006b7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2ba8      	cmp	r3, #168	@ 0xa8
 8006b82:	d00b      	beq.n	8006b9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	61bb      	str	r3, [r7, #24]
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	e7fd      	b.n	8006b98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01e      	beq.n	8006be2 <xTaskCreateStatic+0xb2>
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01b      	beq.n	8006be2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9303      	str	r3, [sp, #12]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	9302      	str	r3, [sp, #8]
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f851 	bl	8006c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bdc:	f000 f8f6 	bl	8006dcc <prvAddNewTaskToReadyList>
 8006be0:	e001      	b.n	8006be6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006be6:	697b      	ldr	r3, [r7, #20]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3728      	adds	r7, #40	@ 0x28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08c      	sub	sp, #48	@ 0x30
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	603b      	str	r3, [r7, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fca1 	bl	800854c <pvPortMalloc>
 8006c0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c12:	20a8      	movs	r0, #168	@ 0xa8
 8006c14:	f001 fc9a 	bl	800854c <pvPortMalloc>
 8006c18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c26:	e005      	b.n	8006c34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c28:	6978      	ldr	r0, [r7, #20]
 8006c2a:	f001 fd5d 	bl	80086e8 <vPortFree>
 8006c2e:	e001      	b.n	8006c34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d017      	beq.n	8006c6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	2300      	movs	r3, #0
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f80f 	bl	8006c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c5e:	69f8      	ldr	r0, [r7, #28]
 8006c60:	f000 f8b4 	bl	8006dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c64:	2301      	movs	r3, #1
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e002      	b.n	8006c70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c70:	69bb      	ldr	r3, [r7, #24]
	}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	461a      	mov	r2, r3
 8006c94:	21a5      	movs	r1, #165	@ 0xa5
 8006c96:	f00c f9ab 	bl	8012ff0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f023 0307 	bic.w	r3, r3, #7
 8006cb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	617b      	str	r3, [r7, #20]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01f      	beq.n	8006d1c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	e012      	b.n	8006d08 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	7819      	ldrb	r1, [r3, #0]
 8006cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	3334      	adds	r3, #52	@ 0x34
 8006cf2:	460a      	mov	r2, r1
 8006cf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d006      	beq.n	8006d10 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	3301      	adds	r3, #1
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d9e9      	bls.n	8006ce2 <prvInitialiseNewTask+0x66>
 8006d0e:	e000      	b.n	8006d12 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d1a:	e003      	b.n	8006d24 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	2b37      	cmp	r3, #55	@ 0x37
 8006d28:	d901      	bls.n	8006d2e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d2a:	2337      	movs	r3, #55	@ 0x37
 8006d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	3304      	adds	r3, #4
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff f965 	bl	8006014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	3318      	adds	r3, #24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff f960 	bl	8006014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	3354      	adds	r3, #84	@ 0x54
 8006d7e:	224c      	movs	r2, #76	@ 0x4c
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f00c f934 	bl	8012ff0 <memset>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc0 <prvInitialiseNewTask+0x144>)
 8006d8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc4 <prvInitialiseNewTask+0x148>)
 8006d92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc8 <prvInitialiseNewTask+0x14c>)
 8006d98:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	68f9      	ldr	r1, [r7, #12]
 8006d9e:	69b8      	ldr	r0, [r7, #24]
 8006da0:	f001 f982 	bl	80080a8 <pxPortInitialiseStack>
 8006da4:	4602      	mov	r2, r0
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db6:	bf00      	nop
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20010bd4 	.word	0x20010bd4
 8006dc4:	20010c3c 	.word	0x20010c3c
 8006dc8:	20010ca4 	.word	0x20010ca4

08006dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006dd4:	f001 fa98 	bl	8008308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8006e90 <prvAddNewTaskToReadyList+0xc4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	4a2c      	ldr	r2, [pc, #176]	@ (8006e90 <prvAddNewTaskToReadyList+0xc4>)
 8006de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006de2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dea:	4a2a      	ldr	r2, [pc, #168]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006df0:	4b27      	ldr	r3, [pc, #156]	@ (8006e90 <prvAddNewTaskToReadyList+0xc4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d110      	bne.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006df8:	f000 fc56 	bl	80076a8 <prvInitialiseTaskLists>
 8006dfc:	e00d      	b.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dfe:	4b26      	ldr	r3, [pc, #152]	@ (8006e98 <prvAddNewTaskToReadyList+0xcc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e06:	4b23      	ldr	r3, [pc, #140]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d802      	bhi.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e14:	4a1f      	ldr	r2, [pc, #124]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e1a:	4b20      	ldr	r3, [pc, #128]	@ (8006e9c <prvAddNewTaskToReadyList+0xd0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	4a1e      	ldr	r2, [pc, #120]	@ (8006e9c <prvAddNewTaskToReadyList+0xd0>)
 8006e22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e24:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <prvAddNewTaskToReadyList+0xd0>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e30:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <prvAddNewTaskToReadyList+0xd4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <prvAddNewTaskToReadyList+0x74>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <prvAddNewTaskToReadyList+0xd4>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ea4 <prvAddNewTaskToReadyList+0xd8>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7ff f8e9 	bl	800602e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e5c:	f001 fa86 	bl	800836c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e60:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <prvAddNewTaskToReadyList+0xcc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e68:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d207      	bcs.n	8006e86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <prvAddNewTaskToReadyList+0xdc>)
 8006e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20007020 	.word	0x20007020
 8006e94:	20006b4c 	.word	0x20006b4c
 8006e98:	2000702c 	.word	0x2000702c
 8006e9c:	2000703c 	.word	0x2000703c
 8006ea0:	20007028 	.word	0x20007028
 8006ea4:	20006b50 	.word	0x20006b50
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d018      	beq.n	8006ef0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ebe:	4b14      	ldr	r3, [pc, #80]	@ (8006f10 <vTaskDelay+0x64>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <vTaskDelay+0x32>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60bb      	str	r3, [r7, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	e7fd      	b.n	8006eda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ede:	f000 f88b 	bl	8006ff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fd31 	bl	800794c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eea:	f000 f893 	bl	8007014 <xTaskResumeAll>
 8006eee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d107      	bne.n	8006f06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ef6:	4b07      	ldr	r3, [pc, #28]	@ (8006f14 <vTaskDelay+0x68>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20007048 	.word	0x20007048
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	@ 0x28
 8006f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f26:	463a      	mov	r2, r7
 8006f28:	1d39      	adds	r1, r7, #4
 8006f2a:	f107 0308 	add.w	r3, r7, #8
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff f81c 	bl	8005f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	460a      	mov	r2, r1
 8006f46:	4924      	ldr	r1, [pc, #144]	@ (8006fd8 <vTaskStartScheduler+0xc0>)
 8006f48:	4824      	ldr	r0, [pc, #144]	@ (8006fdc <vTaskStartScheduler+0xc4>)
 8006f4a:	f7ff fdf1 	bl	8006b30 <xTaskCreateStatic>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4a23      	ldr	r2, [pc, #140]	@ (8006fe0 <vTaskStartScheduler+0xc8>)
 8006f52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f54:	4b22      	ldr	r3, [pc, #136]	@ (8006fe0 <vTaskStartScheduler+0xc8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e001      	b.n	8006f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d102      	bne.n	8006f72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f6c:	f000 fd42 	bl	80079f4 <xTimerCreateTimerTask>
 8006f70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d11b      	bne.n	8006fb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	613b      	str	r3, [r7, #16]
}
 8006f8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f8c:	4b15      	ldr	r3, [pc, #84]	@ (8006fe4 <vTaskStartScheduler+0xcc>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3354      	adds	r3, #84	@ 0x54
 8006f92:	4a15      	ldr	r2, [pc, #84]	@ (8006fe8 <vTaskStartScheduler+0xd0>)
 8006f94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f96:	4b15      	ldr	r3, [pc, #84]	@ (8006fec <vTaskStartScheduler+0xd4>)
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f9e:	4b14      	ldr	r3, [pc, #80]	@ (8006ff0 <vTaskStartScheduler+0xd8>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fa4:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <vTaskStartScheduler+0xdc>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006faa:	f001 f909 	bl	80081c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fae:	e00f      	b.n	8006fd0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fb6:	d10b      	bne.n	8006fd0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <vTaskStartScheduler+0xb4>
}
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	08013fcc 	.word	0x08013fcc
 8006fdc:	08007679 	.word	0x08007679
 8006fe0:	20007044 	.word	0x20007044
 8006fe4:	20006b4c 	.word	0x20006b4c
 8006fe8:	20000b18 	.word	0x20000b18
 8006fec:	20007040 	.word	0x20007040
 8006ff0:	2000702c 	.word	0x2000702c
 8006ff4:	20007024 	.word	0x20007024

08006ff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <vTaskSuspendAll+0x18>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	4a03      	ldr	r2, [pc, #12]	@ (8007010 <vTaskSuspendAll+0x18>)
 8007004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20007048 	.word	0x20007048

08007014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007022:	4b42      	ldr	r3, [pc, #264]	@ (800712c <xTaskResumeAll+0x118>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <xTaskResumeAll+0x2e>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	603b      	str	r3, [r7, #0]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007042:	f001 f961 	bl	8008308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007046:	4b39      	ldr	r3, [pc, #228]	@ (800712c <xTaskResumeAll+0x118>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a37      	ldr	r2, [pc, #220]	@ (800712c <xTaskResumeAll+0x118>)
 800704e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007050:	4b36      	ldr	r3, [pc, #216]	@ (800712c <xTaskResumeAll+0x118>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d162      	bne.n	800711e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007058:	4b35      	ldr	r3, [pc, #212]	@ (8007130 <xTaskResumeAll+0x11c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d05e      	beq.n	800711e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007060:	e02f      	b.n	80070c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007062:	4b34      	ldr	r3, [pc, #208]	@ (8007134 <xTaskResumeAll+0x120>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3318      	adds	r3, #24
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff f83a 	bl	80060e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff f835 	bl	80060e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007082:	4b2d      	ldr	r3, [pc, #180]	@ (8007138 <xTaskResumeAll+0x124>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d903      	bls.n	8007092 <xTaskResumeAll+0x7e>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	4a2a      	ldr	r2, [pc, #168]	@ (8007138 <xTaskResumeAll+0x124>)
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a27      	ldr	r2, [pc, #156]	@ (800713c <xTaskResumeAll+0x128>)
 80070a0:	441a      	add	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe ffc0 	bl	800602e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b2:	4b23      	ldr	r3, [pc, #140]	@ (8007140 <xTaskResumeAll+0x12c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80070bc:	4b21      	ldr	r3, [pc, #132]	@ (8007144 <xTaskResumeAll+0x130>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007134 <xTaskResumeAll+0x120>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1cb      	bne.n	8007062 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070d0:	f000 fb8e 	bl	80077f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007148 <xTaskResumeAll+0x134>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d010      	beq.n	8007102 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070e0:	f000 f846 	bl	8007170 <xTaskIncrementTick>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070ea:	4b16      	ldr	r3, [pc, #88]	@ (8007144 <xTaskResumeAll+0x130>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1f1      	bne.n	80070e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <xTaskResumeAll+0x134>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007102:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <xTaskResumeAll+0x130>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800710a:	2301      	movs	r3, #1
 800710c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800710e:	4b0f      	ldr	r3, [pc, #60]	@ (800714c <xTaskResumeAll+0x138>)
 8007110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800711e:	f001 f925 	bl	800836c <vPortExitCritical>

	return xAlreadyYielded;
 8007122:	68bb      	ldr	r3, [r7, #8]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20007048 	.word	0x20007048
 8007130:	20007020 	.word	0x20007020
 8007134:	20006fe0 	.word	0x20006fe0
 8007138:	20007028 	.word	0x20007028
 800713c:	20006b50 	.word	0x20006b50
 8007140:	20006b4c 	.word	0x20006b4c
 8007144:	20007034 	.word	0x20007034
 8007148:	20007030 	.word	0x20007030
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007156:	4b05      	ldr	r3, [pc, #20]	@ (800716c <xTaskGetTickCount+0x1c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800715c:	687b      	ldr	r3, [r7, #4]
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20007024 	.word	0x20007024

08007170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800717a:	4b4f      	ldr	r3, [pc, #316]	@ (80072b8 <xTaskIncrementTick+0x148>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 8090 	bne.w	80072a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007184:	4b4d      	ldr	r3, [pc, #308]	@ (80072bc <xTaskIncrementTick+0x14c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800718c:	4a4b      	ldr	r2, [pc, #300]	@ (80072bc <xTaskIncrementTick+0x14c>)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d121      	bne.n	80071dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007198:	4b49      	ldr	r3, [pc, #292]	@ (80072c0 <xTaskIncrementTick+0x150>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	603b      	str	r3, [r7, #0]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <xTaskIncrementTick+0x46>
 80071ba:	4b41      	ldr	r3, [pc, #260]	@ (80072c0 <xTaskIncrementTick+0x150>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	4b40      	ldr	r3, [pc, #256]	@ (80072c4 <xTaskIncrementTick+0x154>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a3e      	ldr	r2, [pc, #248]	@ (80072c0 <xTaskIncrementTick+0x150>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	4a3e      	ldr	r2, [pc, #248]	@ (80072c4 <xTaskIncrementTick+0x154>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	4b3e      	ldr	r3, [pc, #248]	@ (80072c8 <xTaskIncrementTick+0x158>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	4a3c      	ldr	r2, [pc, #240]	@ (80072c8 <xTaskIncrementTick+0x158>)
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	f000 fb0a 	bl	80077f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071dc:	4b3b      	ldr	r3, [pc, #236]	@ (80072cc <xTaskIncrementTick+0x15c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d349      	bcc.n	800727a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071e6:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <xTaskIncrementTick+0x150>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f0:	4b36      	ldr	r3, [pc, #216]	@ (80072cc <xTaskIncrementTick+0x15c>)
 80071f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071f6:	601a      	str	r2, [r3, #0]
					break;
 80071f8:	e03f      	b.n	800727a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071fa:	4b31      	ldr	r3, [pc, #196]	@ (80072c0 <xTaskIncrementTick+0x150>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	429a      	cmp	r2, r3
 8007210:	d203      	bcs.n	800721a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007212:	4a2e      	ldr	r2, [pc, #184]	@ (80072cc <xTaskIncrementTick+0x15c>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007218:	e02f      	b.n	800727a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	3304      	adds	r3, #4
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe ff62 	bl	80060e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	3318      	adds	r3, #24
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe ff59 	bl	80060e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723a:	4b25      	ldr	r3, [pc, #148]	@ (80072d0 <xTaskIncrementTick+0x160>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d903      	bls.n	800724a <xTaskIncrementTick+0xda>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	4a22      	ldr	r2, [pc, #136]	@ (80072d0 <xTaskIncrementTick+0x160>)
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4a1f      	ldr	r2, [pc, #124]	@ (80072d4 <xTaskIncrementTick+0x164>)
 8007258:	441a      	add	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3304      	adds	r3, #4
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7fe fee4 	bl	800602e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726a:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <xTaskIncrementTick+0x168>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007270:	429a      	cmp	r2, r3
 8007272:	d3b8      	bcc.n	80071e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007274:	2301      	movs	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007278:	e7b5      	b.n	80071e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800727a:	4b17      	ldr	r3, [pc, #92]	@ (80072d8 <xTaskIncrementTick+0x168>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007280:	4914      	ldr	r1, [pc, #80]	@ (80072d4 <xTaskIncrementTick+0x164>)
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d901      	bls.n	8007296 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007292:	2301      	movs	r3, #1
 8007294:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007296:	4b11      	ldr	r3, [pc, #68]	@ (80072dc <xTaskIncrementTick+0x16c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800729e:	2301      	movs	r3, #1
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	e004      	b.n	80072ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072a4:	4b0e      	ldr	r3, [pc, #56]	@ (80072e0 <xTaskIncrementTick+0x170>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3301      	adds	r3, #1
 80072aa:	4a0d      	ldr	r2, [pc, #52]	@ (80072e0 <xTaskIncrementTick+0x170>)
 80072ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072ae:	697b      	ldr	r3, [r7, #20]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20007048 	.word	0x20007048
 80072bc:	20007024 	.word	0x20007024
 80072c0:	20006fd8 	.word	0x20006fd8
 80072c4:	20006fdc 	.word	0x20006fdc
 80072c8:	20007038 	.word	0x20007038
 80072cc:	20007040 	.word	0x20007040
 80072d0:	20007028 	.word	0x20007028
 80072d4:	20006b50 	.word	0x20006b50
 80072d8:	20006b4c 	.word	0x20006b4c
 80072dc:	20007034 	.word	0x20007034
 80072e0:	20007030 	.word	0x20007030

080072e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007398 <vTaskSwitchContext+0xb4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072f2:	4b2a      	ldr	r3, [pc, #168]	@ (800739c <vTaskSwitchContext+0xb8>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072f8:	e047      	b.n	800738a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80072fa:	4b28      	ldr	r3, [pc, #160]	@ (800739c <vTaskSwitchContext+0xb8>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007300:	4b27      	ldr	r3, [pc, #156]	@ (80073a0 <vTaskSwitchContext+0xbc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	e011      	b.n	800732c <vTaskSwitchContext+0x48>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <vTaskSwitchContext+0x42>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <vTaskSwitchContext+0x3e>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b01      	subs	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	491d      	ldr	r1, [pc, #116]	@ (80073a4 <vTaskSwitchContext+0xc0>)
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0e3      	beq.n	8007308 <vTaskSwitchContext+0x24>
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4a16      	ldr	r2, [pc, #88]	@ (80073a4 <vTaskSwitchContext+0xc0>)
 800734c:	4413      	add	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3308      	adds	r3, #8
 8007362:	429a      	cmp	r2, r3
 8007364:	d104      	bne.n	8007370 <vTaskSwitchContext+0x8c>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	4a0c      	ldr	r2, [pc, #48]	@ (80073a8 <vTaskSwitchContext+0xc4>)
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	4a09      	ldr	r2, [pc, #36]	@ (80073a0 <vTaskSwitchContext+0xbc>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007380:	4b09      	ldr	r3, [pc, #36]	@ (80073a8 <vTaskSwitchContext+0xc4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3354      	adds	r3, #84	@ 0x54
 8007386:	4a09      	ldr	r2, [pc, #36]	@ (80073ac <vTaskSwitchContext+0xc8>)
 8007388:	6013      	str	r3, [r2, #0]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20007048 	.word	0x20007048
 800739c:	20007034 	.word	0x20007034
 80073a0:	20007028 	.word	0x20007028
 80073a4:	20006b50 	.word	0x20006b50
 80073a8:	20006b4c 	.word	0x20006b4c
 80073ac:	20000b18 	.word	0x20000b18

080073b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073d8:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <vTaskPlaceOnEventList+0x48>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3318      	adds	r3, #24
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fe fe48 	bl	8006076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073e6:	2101      	movs	r1, #1
 80073e8:	6838      	ldr	r0, [r7, #0]
 80073ea:	f000 faaf 	bl	800794c <prvAddCurrentTaskToDelayedList>
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20006b4c 	.word	0x20006b4c

080073fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	617b      	str	r3, [r7, #20]
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	e7fd      	b.n	8007422 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007426:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <vTaskPlaceOnEventListRestricted+0x54>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3318      	adds	r3, #24
 800742c:	4619      	mov	r1, r3
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7fe fdfd 	bl	800602e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800743a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800743e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	68b8      	ldr	r0, [r7, #8]
 8007444:	f000 fa82 	bl	800794c <prvAddCurrentTaskToDelayedList>
	}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20006b4c 	.word	0x20006b4c

08007454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	60fb      	str	r3, [r7, #12]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	3318      	adds	r3, #24
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fe2e 	bl	80060e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800748c:	4b1d      	ldr	r3, [pc, #116]	@ (8007504 <xTaskRemoveFromEventList+0xb0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11d      	bne.n	80074d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe fe25 	bl	80060e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a2:	4b19      	ldr	r3, [pc, #100]	@ (8007508 <xTaskRemoveFromEventList+0xb4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <xTaskRemoveFromEventList+0x5e>
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ae:	4a16      	ldr	r2, [pc, #88]	@ (8007508 <xTaskRemoveFromEventList+0xb4>)
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4a13      	ldr	r2, [pc, #76]	@ (800750c <xTaskRemoveFromEventList+0xb8>)
 80074c0:	441a      	add	r2, r3
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	3304      	adds	r3, #4
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f7fe fdb0 	bl	800602e <vListInsertEnd>
 80074ce:	e005      	b.n	80074dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	3318      	adds	r3, #24
 80074d4:	4619      	mov	r1, r3
 80074d6:	480e      	ldr	r0, [pc, #56]	@ (8007510 <xTaskRemoveFromEventList+0xbc>)
 80074d8:	f7fe fda9 	bl	800602e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <xTaskRemoveFromEventList+0xc0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d905      	bls.n	80074f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <xTaskRemoveFromEventList+0xc4>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e001      	b.n	80074fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074fa:	697b      	ldr	r3, [r7, #20]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20007048 	.word	0x20007048
 8007508:	20007028 	.word	0x20007028
 800750c:	20006b50 	.word	0x20006b50
 8007510:	20006fe0 	.word	0x20006fe0
 8007514:	20006b4c 	.word	0x20006b4c
 8007518:	20007034 	.word	0x20007034

0800751c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60fb      	str	r3, [r7, #12]
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007542:	f000 fee1 	bl	8008308 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007546:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <vTaskSetTimeOutState+0x48>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800754e:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <vTaskSetTimeOutState+0x4c>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007556:	f000 ff09 	bl	800836c <vPortExitCritical>
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20007038 	.word	0x20007038
 8007568:	20007024 	.word	0x20007024

0800756c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007574:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <vTaskInternalSetTimeOutState+0x24>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800757c:	4b05      	ldr	r3, [pc, #20]	@ (8007594 <vTaskInternalSetTimeOutState+0x28>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	605a      	str	r2, [r3, #4]
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	20007038 	.word	0x20007038
 8007594:	20007024 	.word	0x20007024

08007598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	613b      	str	r3, [r7, #16]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60fb      	str	r3, [r7, #12]
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80075de:	f000 fe93 	bl	8008308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007658 <xTaskCheckForTimeOut+0xc0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075fa:	d102      	bne.n	8007602 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e023      	b.n	800764a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b15      	ldr	r3, [pc, #84]	@ (800765c <xTaskCheckForTimeOut+0xc4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d007      	beq.n	800761e <xTaskCheckForTimeOut+0x86>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	e015      	b.n	800764a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	d20b      	bcs.n	8007640 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff ff99 	bl	800756c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	e004      	b.n	800764a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007646:	2301      	movs	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800764a:	f000 fe8f 	bl	800836c <vPortExitCritical>

	return xReturn;
 800764e:	69fb      	ldr	r3, [r7, #28]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20007024 	.word	0x20007024
 800765c:	20007038 	.word	0x20007038

08007660 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007664:	4b03      	ldr	r3, [pc, #12]	@ (8007674 <vTaskMissedYield+0x14>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	20007034 	.word	0x20007034

08007678 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007680:	f000 f852 	bl	8007728 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007684:	4b06      	ldr	r3, [pc, #24]	@ (80076a0 <prvIdleTask+0x28>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d9f9      	bls.n	8007680 <prvIdleTask+0x8>
			{
				taskYIELD();
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <prvIdleTask+0x2c>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800769c:	e7f0      	b.n	8007680 <prvIdleTask+0x8>
 800769e:	bf00      	nop
 80076a0:	20006b50 	.word	0x20006b50
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
 80076b2:	e00c      	b.n	80076ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4a12      	ldr	r2, [pc, #72]	@ (8007708 <prvInitialiseTaskLists+0x60>)
 80076c0:	4413      	add	r3, r2
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fc86 	bl	8005fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3301      	adds	r3, #1
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b37      	cmp	r3, #55	@ 0x37
 80076d2:	d9ef      	bls.n	80076b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076d4:	480d      	ldr	r0, [pc, #52]	@ (800770c <prvInitialiseTaskLists+0x64>)
 80076d6:	f7fe fc7d 	bl	8005fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076da:	480d      	ldr	r0, [pc, #52]	@ (8007710 <prvInitialiseTaskLists+0x68>)
 80076dc:	f7fe fc7a 	bl	8005fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076e0:	480c      	ldr	r0, [pc, #48]	@ (8007714 <prvInitialiseTaskLists+0x6c>)
 80076e2:	f7fe fc77 	bl	8005fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076e6:	480c      	ldr	r0, [pc, #48]	@ (8007718 <prvInitialiseTaskLists+0x70>)
 80076e8:	f7fe fc74 	bl	8005fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076ec:	480b      	ldr	r0, [pc, #44]	@ (800771c <prvInitialiseTaskLists+0x74>)
 80076ee:	f7fe fc71 	bl	8005fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007720 <prvInitialiseTaskLists+0x78>)
 80076f4:	4a05      	ldr	r2, [pc, #20]	@ (800770c <prvInitialiseTaskLists+0x64>)
 80076f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <prvInitialiseTaskLists+0x7c>)
 80076fa:	4a05      	ldr	r2, [pc, #20]	@ (8007710 <prvInitialiseTaskLists+0x68>)
 80076fc:	601a      	str	r2, [r3, #0]
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20006b50 	.word	0x20006b50
 800770c:	20006fb0 	.word	0x20006fb0
 8007710:	20006fc4 	.word	0x20006fc4
 8007714:	20006fe0 	.word	0x20006fe0
 8007718:	20006ff4 	.word	0x20006ff4
 800771c:	2000700c 	.word	0x2000700c
 8007720:	20006fd8 	.word	0x20006fd8
 8007724:	20006fdc 	.word	0x20006fdc

08007728 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800772e:	e019      	b.n	8007764 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007730:	f000 fdea 	bl	8008308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007734:	4b10      	ldr	r3, [pc, #64]	@ (8007778 <prvCheckTasksWaitingTermination+0x50>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe fcd1 	bl	80060e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <prvCheckTasksWaitingTermination+0x54>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3b01      	subs	r3, #1
 800774c:	4a0b      	ldr	r2, [pc, #44]	@ (800777c <prvCheckTasksWaitingTermination+0x54>)
 800774e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <prvCheckTasksWaitingTermination+0x58>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3b01      	subs	r3, #1
 8007756:	4a0a      	ldr	r2, [pc, #40]	@ (8007780 <prvCheckTasksWaitingTermination+0x58>)
 8007758:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800775a:	f000 fe07 	bl	800836c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f810 	bl	8007784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007764:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <prvCheckTasksWaitingTermination+0x58>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e1      	bne.n	8007730 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20006ff4 	.word	0x20006ff4
 800777c:	20007020 	.word	0x20007020
 8007780:	20007008 	.word	0x20007008

08007784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3354      	adds	r3, #84	@ 0x54
 8007790:	4618      	mov	r0, r3
 8007792:	f00b fc8d 	bl	80130b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800779c:	2b00      	cmp	r3, #0
 800779e:	d108      	bne.n	80077b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 ff9f 	bl	80086e8 <vPortFree>
				vPortFree( pxTCB );
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 ff9c 	bl	80086e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077b0:	e019      	b.n	80077e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d103      	bne.n	80077c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ff93 	bl	80086e8 <vPortFree>
	}
 80077c2:	e010      	b.n	80077e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d00b      	beq.n	80077e6 <prvDeleteTCB+0x62>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <prvDeleteTCB+0x5e>
	}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007828 <prvResetNextTaskUnblockTime+0x38>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007800:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <prvResetNextTaskUnblockTime+0x3c>)
 8007802:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007808:	e008      	b.n	800781c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800780a:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <prvResetNextTaskUnblockTime+0x38>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	4a04      	ldr	r2, [pc, #16]	@ (800782c <prvResetNextTaskUnblockTime+0x3c>)
 800781a:	6013      	str	r3, [r2, #0]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	20006fd8 	.word	0x20006fd8
 800782c:	20007040 	.word	0x20007040

08007830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007836:	4b0b      	ldr	r3, [pc, #44]	@ (8007864 <xTaskGetSchedulerState+0x34>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800783e:	2301      	movs	r3, #1
 8007840:	607b      	str	r3, [r7, #4]
 8007842:	e008      	b.n	8007856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007844:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <xTaskGetSchedulerState+0x38>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800784c:	2302      	movs	r3, #2
 800784e:	607b      	str	r3, [r7, #4]
 8007850:	e001      	b.n	8007856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007856:	687b      	ldr	r3, [r7, #4]
	}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	2000702c 	.word	0x2000702c
 8007868:	20007048 	.word	0x20007048

0800786c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d058      	beq.n	8007934 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007882:	4b2f      	ldr	r3, [pc, #188]	@ (8007940 <xTaskPriorityDisinherit+0xd4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d00b      	beq.n	80078a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	60fb      	str	r3, [r7, #12]
}
 800789e:	bf00      	nop
 80078a0:	bf00      	nop
 80078a2:	e7fd      	b.n	80078a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60bb      	str	r3, [r7, #8]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c8:	1e5a      	subs	r2, r3, #1
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d02c      	beq.n	8007934 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d128      	bne.n	8007934 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fbfe 	bl	80060e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007904:	4b0f      	ldr	r3, [pc, #60]	@ (8007944 <xTaskPriorityDisinherit+0xd8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d903      	bls.n	8007914 <xTaskPriorityDisinherit+0xa8>
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	4a0c      	ldr	r2, [pc, #48]	@ (8007944 <xTaskPriorityDisinherit+0xd8>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4a09      	ldr	r2, [pc, #36]	@ (8007948 <xTaskPriorityDisinherit+0xdc>)
 8007922:	441a      	add	r2, r3
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7fe fb7f 	bl	800602e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007934:	697b      	ldr	r3, [r7, #20]
	}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20006b4c 	.word	0x20006b4c
 8007944:	20007028 	.word	0x20007028
 8007948:	20006b50 	.word	0x20006b50

0800794c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007956:	4b21      	ldr	r3, [pc, #132]	@ (80079dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795c:	4b20      	ldr	r3, [pc, #128]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3304      	adds	r3, #4
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fbc0 	bl	80060e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800796e:	d10a      	bne.n	8007986 <prvAddCurrentTaskToDelayedList+0x3a>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007976:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4819      	ldr	r0, [pc, #100]	@ (80079e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007980:	f7fe fb55 	bl	800602e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007984:	e026      	b.n	80079d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4413      	add	r3, r2
 800798c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800798e:	4b14      	ldr	r3, [pc, #80]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	429a      	cmp	r2, r3
 800799c:	d209      	bcs.n	80079b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800799e:	4b12      	ldr	r3, [pc, #72]	@ (80079e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3304      	adds	r3, #4
 80079a8:	4619      	mov	r1, r3
 80079aa:	4610      	mov	r0, r2
 80079ac:	f7fe fb63 	bl	8006076 <vListInsert>
}
 80079b0:	e010      	b.n	80079d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079b2:	4b0e      	ldr	r3, [pc, #56]	@ (80079ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b0a      	ldr	r3, [pc, #40]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7fe fb59 	bl	8006076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079c4:	4b0a      	ldr	r3, [pc, #40]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d202      	bcs.n	80079d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079ce:	4a08      	ldr	r2, [pc, #32]	@ (80079f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6013      	str	r3, [r2, #0]
}
 80079d4:	bf00      	nop
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20007024 	.word	0x20007024
 80079e0:	20006b4c 	.word	0x20006b4c
 80079e4:	2000700c 	.word	0x2000700c
 80079e8:	20006fdc 	.word	0x20006fdc
 80079ec:	20006fd8 	.word	0x20006fd8
 80079f0:	20007040 	.word	0x20007040

080079f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	@ 0x28
 80079f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079fe:	f000 fb13 	bl	8008028 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a02:	4b1d      	ldr	r3, [pc, #116]	@ (8007a78 <xTimerCreateTimerTask+0x84>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d021      	beq.n	8007a4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a12:	1d3a      	adds	r2, r7, #4
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	f107 030c 	add.w	r3, r7, #12
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe fabf 	bl	8005fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	9202      	str	r2, [sp, #8]
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	460a      	mov	r2, r1
 8007a34:	4911      	ldr	r1, [pc, #68]	@ (8007a7c <xTimerCreateTimerTask+0x88>)
 8007a36:	4812      	ldr	r0, [pc, #72]	@ (8007a80 <xTimerCreateTimerTask+0x8c>)
 8007a38:	f7ff f87a 	bl	8006b30 <xTaskCreateStatic>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4a11      	ldr	r2, [pc, #68]	@ (8007a84 <xTimerCreateTimerTask+0x90>)
 8007a40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <xTimerCreateTimerTask+0x90>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	613b      	str	r3, [r7, #16]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a6c:	697b      	ldr	r3, [r7, #20]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	2000707c 	.word	0x2000707c
 8007a7c:	08013fd4 	.word	0x08013fd4
 8007a80:	08007bc1 	.word	0x08007bc1
 8007a84:	20007080 	.word	0x20007080

08007a88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	@ 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	623b      	str	r3, [r7, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ab8:	4b19      	ldr	r3, [pc, #100]	@ (8007b20 <xTimerGenericCommand+0x98>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d02a      	beq.n	8007b16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	dc18      	bgt.n	8007b04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ad2:	f7ff fead 	bl	8007830 <xTaskGetSchedulerState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d109      	bne.n	8007af0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007adc:	4b10      	ldr	r3, [pc, #64]	@ (8007b20 <xTimerGenericCommand+0x98>)
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	f107 0110 	add.w	r1, r7, #16
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae8:	f7fe fc32 	bl	8006350 <xQueueGenericSend>
 8007aec:	6278      	str	r0, [r7, #36]	@ 0x24
 8007aee:	e012      	b.n	8007b16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007af0:	4b0b      	ldr	r3, [pc, #44]	@ (8007b20 <xTimerGenericCommand+0x98>)
 8007af2:	6818      	ldr	r0, [r3, #0]
 8007af4:	f107 0110 	add.w	r1, r7, #16
 8007af8:	2300      	movs	r3, #0
 8007afa:	2200      	movs	r2, #0
 8007afc:	f7fe fc28 	bl	8006350 <xQueueGenericSend>
 8007b00:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b02:	e008      	b.n	8007b16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b04:	4b06      	ldr	r3, [pc, #24]	@ (8007b20 <xTimerGenericCommand+0x98>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	f107 0110 	add.w	r1, r7, #16
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	f7fe fd20 	bl	8006554 <xQueueGenericSendFromISR>
 8007b14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3728      	adds	r7, #40	@ 0x28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	2000707c 	.word	0x2000707c

08007b24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2e:	4b23      	ldr	r3, [pc, #140]	@ (8007bbc <prvProcessExpiredTimer+0x98>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fad3 	bl	80060e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d023      	beq.n	8007b98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	18d1      	adds	r1, r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	6978      	ldr	r0, [r7, #20]
 8007b5e:	f000 f8d5 	bl	8007d0c <prvInsertTimerInActiveList>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d020      	beq.n	8007baa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	2100      	movs	r1, #0
 8007b72:	6978      	ldr	r0, [r7, #20]
 8007b74:	f7ff ff88 	bl	8007a88 <xTimerGenericCommand>
 8007b78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d114      	bne.n	8007baa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	bf00      	nop
 8007b96:	e7fd      	b.n	8007b94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b9e:	f023 0301 	bic.w	r3, r3, #1
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	6978      	ldr	r0, [r7, #20]
 8007bb0:	4798      	blx	r3
}
 8007bb2:	bf00      	nop
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20007074 	.word	0x20007074

08007bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bc8:	f107 0308 	add.w	r3, r7, #8
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f859 	bl	8007c84 <prvGetNextExpireTime>
 8007bd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f805 	bl	8007be8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bde:	f000 f8d7 	bl	8007d90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007be2:	bf00      	nop
 8007be4:	e7f0      	b.n	8007bc8 <prvTimerTask+0x8>
	...

08007be8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bf2:	f7ff fa01 	bl	8006ff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf6:	f107 0308 	add.w	r3, r7, #8
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f866 	bl	8007ccc <prvSampleTimeNow>
 8007c00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d130      	bne.n	8007c6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <prvProcessTimerOrBlockTask+0x3c>
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d806      	bhi.n	8007c24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c16:	f7ff f9fd 	bl	8007014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff81 	bl	8007b24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c22:	e024      	b.n	8007c6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c2a:	4b13      	ldr	r3, [pc, #76]	@ (8007c78 <prvProcessTimerOrBlockTask+0x90>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <prvProcessTimerOrBlockTask+0x50>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <prvProcessTimerOrBlockTask+0x52>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c7c <prvProcessTimerOrBlockTask+0x94>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f7fe ff3d 	bl	8006ac8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c4e:	f7ff f9e1 	bl	8007014 <xTaskResumeAll>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c58:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <prvProcessTimerOrBlockTask+0x98>)
 8007c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	f3bf 8f6f 	isb	sy
}
 8007c68:	e001      	b.n	8007c6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c6a:	f7ff f9d3 	bl	8007014 <xTaskResumeAll>
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20007078 	.word	0x20007078
 8007c7c:	2000707c 	.word	0x2000707c
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc8 <prvGetNextExpireTime+0x44>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <prvGetNextExpireTime+0x16>
 8007c96:	2201      	movs	r2, #1
 8007c98:	e000      	b.n	8007c9c <prvGetNextExpireTime+0x18>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d105      	bne.n	8007cb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ca8:	4b07      	ldr	r3, [pc, #28]	@ (8007cc8 <prvGetNextExpireTime+0x44>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	e001      	b.n	8007cb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20007074 	.word	0x20007074

08007ccc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cd4:	f7ff fa3c 	bl	8007150 <xTaskGetTickCount>
 8007cd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cda:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <prvSampleTimeNow+0x3c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d205      	bcs.n	8007cf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ce4:	f000 f93a 	bl	8007f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	e002      	b.n	8007cf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cf6:	4a04      	ldr	r2, [pc, #16]	@ (8007d08 <prvSampleTimeNow+0x3c>)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20007084 	.word	0x20007084

08007d0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d812      	bhi.n	8007d58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d302      	bcc.n	8007d46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e01b      	b.n	8007d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d46:	4b10      	ldr	r3, [pc, #64]	@ (8007d88 <prvInsertTimerInActiveList+0x7c>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f7fe f990 	bl	8006076 <vListInsert>
 8007d56:	e012      	b.n	8007d7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d206      	bcs.n	8007d6e <prvInsertTimerInActiveList+0x62>
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e007      	b.n	8007d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d6e:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <prvInsertTimerInActiveList+0x80>)
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4619      	mov	r1, r3
 8007d78:	4610      	mov	r0, r2
 8007d7a:	f7fe f97c 	bl	8006076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d7e:	697b      	ldr	r3, [r7, #20]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20007078 	.word	0x20007078
 8007d8c:	20007074 	.word	0x20007074

08007d90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08e      	sub	sp, #56	@ 0x38
 8007d94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d96:	e0ce      	b.n	8007f36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da19      	bge.n	8007dd2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d9e:	1d3b      	adds	r3, r7, #4
 8007da0:	3304      	adds	r3, #4
 8007da2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10b      	bne.n	8007dc2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	61fb      	str	r3, [r7, #28]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc8:	6850      	ldr	r0, [r2, #4]
 8007dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dcc:	6892      	ldr	r2, [r2, #8]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f2c0 80ae 	blt.w	8007f36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	3304      	adds	r3, #4
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe f97c 	bl	80060e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007df0:	463b      	mov	r3, r7
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff ff6a 	bl	8007ccc <prvSampleTimeNow>
 8007df8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b09      	cmp	r3, #9
 8007dfe:	f200 8097 	bhi.w	8007f30 <prvProcessReceivedCommands+0x1a0>
 8007e02:	a201      	add	r2, pc, #4	@ (adr r2, 8007e08 <prvProcessReceivedCommands+0x78>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e31 	.word	0x08007e31
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007ea7 	.word	0x08007ea7
 8007e18:	08007ebb 	.word	0x08007ebb
 8007e1c:	08007f07 	.word	0x08007f07
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e31 	.word	0x08007e31
 8007e28:	08007ea7 	.word	0x08007ea7
 8007e2c:	08007ebb 	.word	0x08007ebb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	18d1      	adds	r1, r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e50:	f7ff ff5c 	bl	8007d0c <prvInsertTimerInActiveList>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d06c      	beq.n	8007f34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d061      	beq.n	8007f34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	441a      	add	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e82:	f7ff fe01 	bl	8007a88 <xTimerGenericCommand>
 8007e86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d152      	bne.n	8007f34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	61bb      	str	r3, [r7, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eac:	f023 0301 	bic.w	r3, r3, #1
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007eb8:	e03d      	b.n	8007f36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10b      	bne.n	8007ef2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	617b      	str	r3, [r7, #20]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	18d1      	adds	r1, r2, r3
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f00:	f7ff ff04 	bl	8007d0c <prvInsertTimerInActiveList>
					break;
 8007f04:	e017      	b.n	8007f36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f16:	f000 fbe7 	bl	80086e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f1a:	e00c      	b.n	8007f36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f2e:	e002      	b.n	8007f36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f30:	bf00      	nop
 8007f32:	e000      	b.n	8007f36 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f36:	4b08      	ldr	r3, [pc, #32]	@ (8007f58 <prvProcessReceivedCommands+0x1c8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	1d39      	adds	r1, r7, #4
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fba6 	bl	8006690 <xQueueReceive>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f47f af26 	bne.w	8007d98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	3730      	adds	r7, #48	@ 0x30
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	2000707c 	.word	0x2000707c

08007f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f62:	e049      	b.n	8007ff8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f64:	4b2e      	ldr	r3, [pc, #184]	@ (8008020 <prvSwitchTimerLists+0xc4>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8008020 <prvSwitchTimerLists+0xc4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe f8b3 	bl	80060e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d02f      	beq.n	8007ff8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d90e      	bls.n	8007fc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008020 <prvSwitchTimerLists+0xc4>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7fe f858 	bl	8006076 <vListInsert>
 8007fc6:	e017      	b.n	8007ff8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff fd58 	bl	8007a88 <xTimerGenericCommand>
 8007fd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10b      	bne.n	8007ff8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	603b      	str	r3, [r7, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ff8:	4b09      	ldr	r3, [pc, #36]	@ (8008020 <prvSwitchTimerLists+0xc4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1b0      	bne.n	8007f64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008002:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <prvSwitchTimerLists+0xc4>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008008:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <prvSwitchTimerLists+0xc8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a04      	ldr	r2, [pc, #16]	@ (8008020 <prvSwitchTimerLists+0xc4>)
 800800e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008010:	4a04      	ldr	r2, [pc, #16]	@ (8008024 <prvSwitchTimerLists+0xc8>)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6013      	str	r3, [r2, #0]
}
 8008016:	bf00      	nop
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20007074 	.word	0x20007074
 8008024:	20007078 	.word	0x20007078

08008028 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800802e:	f000 f96b 	bl	8008308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008032:	4b15      	ldr	r3, [pc, #84]	@ (8008088 <prvCheckForValidListAndQueue+0x60>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d120      	bne.n	800807c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800803a:	4814      	ldr	r0, [pc, #80]	@ (800808c <prvCheckForValidListAndQueue+0x64>)
 800803c:	f7fd ffca 	bl	8005fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008040:	4813      	ldr	r0, [pc, #76]	@ (8008090 <prvCheckForValidListAndQueue+0x68>)
 8008042:	f7fd ffc7 	bl	8005fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008046:	4b13      	ldr	r3, [pc, #76]	@ (8008094 <prvCheckForValidListAndQueue+0x6c>)
 8008048:	4a10      	ldr	r2, [pc, #64]	@ (800808c <prvCheckForValidListAndQueue+0x64>)
 800804a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800804c:	4b12      	ldr	r3, [pc, #72]	@ (8008098 <prvCheckForValidListAndQueue+0x70>)
 800804e:	4a10      	ldr	r2, [pc, #64]	@ (8008090 <prvCheckForValidListAndQueue+0x68>)
 8008050:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008052:	2300      	movs	r3, #0
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	4b11      	ldr	r3, [pc, #68]	@ (800809c <prvCheckForValidListAndQueue+0x74>)
 8008058:	4a11      	ldr	r2, [pc, #68]	@ (80080a0 <prvCheckForValidListAndQueue+0x78>)
 800805a:	2110      	movs	r1, #16
 800805c:	200a      	movs	r0, #10
 800805e:	f7fe f8d7 	bl	8006210 <xQueueGenericCreateStatic>
 8008062:	4603      	mov	r3, r0
 8008064:	4a08      	ldr	r2, [pc, #32]	@ (8008088 <prvCheckForValidListAndQueue+0x60>)
 8008066:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008068:	4b07      	ldr	r3, [pc, #28]	@ (8008088 <prvCheckForValidListAndQueue+0x60>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008070:	4b05      	ldr	r3, [pc, #20]	@ (8008088 <prvCheckForValidListAndQueue+0x60>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	490b      	ldr	r1, [pc, #44]	@ (80080a4 <prvCheckForValidListAndQueue+0x7c>)
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fcfc 	bl	8006a74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800807c:	f000 f976 	bl	800836c <vPortExitCritical>
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000707c 	.word	0x2000707c
 800808c:	2000704c 	.word	0x2000704c
 8008090:	20007060 	.word	0x20007060
 8008094:	20007074 	.word	0x20007074
 8008098:	20007078 	.word	0x20007078
 800809c:	20007128 	.word	0x20007128
 80080a0:	20007088 	.word	0x20007088
 80080a4:	08013fdc 	.word	0x08013fdc

080080a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3b04      	subs	r3, #4
 80080b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3b04      	subs	r3, #4
 80080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f023 0201 	bic.w	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3b04      	subs	r3, #4
 80080d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080d8:	4a0c      	ldr	r2, [pc, #48]	@ (800810c <pxPortInitialiseStack+0x64>)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3b14      	subs	r3, #20
 80080e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3b04      	subs	r3, #4
 80080ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f06f 0202 	mvn.w	r2, #2
 80080f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3b20      	subs	r3, #32
 80080fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	08008111 	.word	0x08008111

08008110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800811a:	4b13      	ldr	r3, [pc, #76]	@ (8008168 <prvTaskExitError+0x58>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008122:	d00b      	beq.n	800813c <prvTaskExitError+0x2c>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	60fb      	str	r3, [r7, #12]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <prvTaskExitError+0x28>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60bb      	str	r3, [r7, #8]
}
 800814e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008150:	bf00      	nop
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d0fc      	beq.n	8008152 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20000010 	.word	0x20000010
 800816c:	00000000 	.word	0x00000000

08008170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008170:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <pxCurrentTCBConst2>)
 8008172:	6819      	ldr	r1, [r3, #0]
 8008174:	6808      	ldr	r0, [r1, #0]
 8008176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	f380 8809 	msr	PSP, r0
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	4770      	bx	lr
 800818c:	f3af 8000 	nop.w

08008190 <pxCurrentTCBConst2>:
 8008190:	20006b4c 	.word	0x20006b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008198:	4808      	ldr	r0, [pc, #32]	@ (80081bc <prvPortStartFirstTask+0x24>)
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	6800      	ldr	r0, [r0, #0]
 800819e:	f380 8808 	msr	MSP, r0
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8814 	msr	CONTROL, r0
 80081aa:	b662      	cpsie	i
 80081ac:	b661      	cpsie	f
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	df00      	svc	0
 80081b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ba:	bf00      	nop
 80081bc:	e000ed08 	.word	0xe000ed08

080081c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081c6:	4b47      	ldr	r3, [pc, #284]	@ (80082e4 <xPortStartScheduler+0x124>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a47      	ldr	r2, [pc, #284]	@ (80082e8 <xPortStartScheduler+0x128>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10b      	bne.n	80081e8 <xPortStartScheduler+0x28>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081e8:	4b3e      	ldr	r3, [pc, #248]	@ (80082e4 <xPortStartScheduler+0x124>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3f      	ldr	r2, [pc, #252]	@ (80082ec <xPortStartScheduler+0x12c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d10b      	bne.n	800820a <xPortStartScheduler+0x4a>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	60fb      	str	r3, [r7, #12]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800820a:	4b39      	ldr	r3, [pc, #228]	@ (80082f0 <xPortStartScheduler+0x130>)
 800820c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	22ff      	movs	r2, #255	@ 0xff
 800821a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800822c:	b2da      	uxtb	r2, r3
 800822e:	4b31      	ldr	r3, [pc, #196]	@ (80082f4 <xPortStartScheduler+0x134>)
 8008230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008232:	4b31      	ldr	r3, [pc, #196]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008234:	2207      	movs	r2, #7
 8008236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008238:	e009      	b.n	800824e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800823a:	4b2f      	ldr	r3, [pc, #188]	@ (80082f8 <xPortStartScheduler+0x138>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3b01      	subs	r3, #1
 8008240:	4a2d      	ldr	r2, [pc, #180]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	005b      	lsls	r3, r3, #1
 800824a:	b2db      	uxtb	r3, r3
 800824c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008256:	2b80      	cmp	r3, #128	@ 0x80
 8008258:	d0ef      	beq.n	800823a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800825a:	4b27      	ldr	r3, [pc, #156]	@ (80082f8 <xPortStartScheduler+0x138>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f1c3 0307 	rsb	r3, r3, #7
 8008262:	2b04      	cmp	r3, #4
 8008264:	d00b      	beq.n	800827e <xPortStartScheduler+0xbe>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60bb      	str	r3, [r7, #8]
}
 8008278:	bf00      	nop
 800827a:	bf00      	nop
 800827c:	e7fd      	b.n	800827a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800827e:	4b1e      	ldr	r3, [pc, #120]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	4a1c      	ldr	r2, [pc, #112]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008288:	4b1b      	ldr	r3, [pc, #108]	@ (80082f8 <xPortStartScheduler+0x138>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008290:	4a19      	ldr	r2, [pc, #100]	@ (80082f8 <xPortStartScheduler+0x138>)
 8008292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	b2da      	uxtb	r2, r3
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <xPortStartScheduler+0x13c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a16      	ldr	r2, [pc, #88]	@ (80082fc <xPortStartScheduler+0x13c>)
 80082a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082a8:	4b14      	ldr	r3, [pc, #80]	@ (80082fc <xPortStartScheduler+0x13c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a13      	ldr	r2, [pc, #76]	@ (80082fc <xPortStartScheduler+0x13c>)
 80082ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082b4:	f000 f8da 	bl	800846c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082b8:	4b11      	ldr	r3, [pc, #68]	@ (8008300 <xPortStartScheduler+0x140>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082be:	f000 f8f9 	bl	80084b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082c2:	4b10      	ldr	r3, [pc, #64]	@ (8008304 <xPortStartScheduler+0x144>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008304 <xPortStartScheduler+0x144>)
 80082c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ce:	f7ff ff63 	bl	8008198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082d2:	f7ff f807 	bl	80072e4 <vTaskSwitchContext>
	prvTaskExitError();
 80082d6:	f7ff ff1b 	bl	8008110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	e000ed00 	.word	0xe000ed00
 80082e8:	410fc271 	.word	0x410fc271
 80082ec:	410fc270 	.word	0x410fc270
 80082f0:	e000e400 	.word	0xe000e400
 80082f4:	20007178 	.word	0x20007178
 80082f8:	2000717c 	.word	0x2000717c
 80082fc:	e000ed20 	.word	0xe000ed20
 8008300:	20000010 	.word	0x20000010
 8008304:	e000ef34 	.word	0xe000ef34

08008308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	607b      	str	r3, [r7, #4]
}
 8008320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008322:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <vPortEnterCritical+0x5c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	4a0e      	ldr	r2, [pc, #56]	@ (8008364 <vPortEnterCritical+0x5c>)
 800832a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800832c:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <vPortEnterCritical+0x5c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d110      	bne.n	8008356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008334:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <vPortEnterCritical+0x60>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <vPortEnterCritical+0x4e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	603b      	str	r3, [r7, #0]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <vPortEnterCritical+0x4a>
	}
}
 8008356:	bf00      	nop
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000010 	.word	0x20000010
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008372:	4b12      	ldr	r3, [pc, #72]	@ (80083bc <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <vPortExitCritical+0x26>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	607b      	str	r3, [r7, #4]
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008392:	4b0a      	ldr	r3, [pc, #40]	@ (80083bc <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3b01      	subs	r3, #1
 8008398:	4a08      	ldr	r2, [pc, #32]	@ (80083bc <vPortExitCritical+0x50>)
 800839a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800839c:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <vPortExitCritical+0x50>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d105      	bne.n	80083b0 <vPortExitCritical+0x44>
 80083a4:	2300      	movs	r3, #0
 80083a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f383 8811 	msr	BASEPRI, r3
}
 80083ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	20000010 	.word	0x20000010

080083c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083c0:	f3ef 8009 	mrs	r0, PSP
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <pxCurrentTCBConst>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f01e 0f10 	tst.w	lr, #16
 80083d0:	bf08      	it	eq
 80083d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083e4:	f380 8811 	msr	BASEPRI, r0
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f7fe ff78 	bl	80072e4 <vTaskSwitchContext>
 80083f4:	f04f 0000 	mov.w	r0, #0
 80083f8:	f380 8811 	msr	BASEPRI, r0
 80083fc:	bc09      	pop	{r0, r3}
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	6808      	ldr	r0, [r1, #0]
 8008402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008406:	f01e 0f10 	tst.w	lr, #16
 800840a:	bf08      	it	eq
 800840c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008410:	f380 8809 	msr	PSP, r0
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst>:
 8008420:	20006b4c 	.word	0x20006b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008442:	f7fe fe95 	bl	8007170 <xTaskIncrementTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <xPortSysTickHandler+0x40>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008470:	4b0b      	ldr	r3, [pc, #44]	@ (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008476:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <vPortSetupTimerInterrupt+0x38>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800847c:	4b0a      	ldr	r3, [pc, #40]	@ (80084a8 <vPortSetupTimerInterrupt+0x3c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0a      	ldr	r2, [pc, #40]	@ (80084ac <vPortSetupTimerInterrupt+0x40>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	4a09      	ldr	r2, [pc, #36]	@ (80084b0 <vPortSetupTimerInterrupt+0x44>)
 800848a:	3b01      	subs	r3, #1
 800848c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800848e:	4b04      	ldr	r3, [pc, #16]	@ (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	e000e010 	.word	0xe000e010
 80084a4:	e000e018 	.word	0xe000e018
 80084a8:	20000004 	.word	0x20000004
 80084ac:	10624dd3 	.word	0x10624dd3
 80084b0:	e000e014 	.word	0xe000e014

080084b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084c4 <vPortEnableVFP+0x10>
 80084b8:	6801      	ldr	r1, [r0, #0]
 80084ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084be:	6001      	str	r1, [r0, #0]
 80084c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084c2:	bf00      	nop
 80084c4:	e000ed88 	.word	0xe000ed88

080084c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ce:	f3ef 8305 	mrs	r3, IPSR
 80084d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b0f      	cmp	r3, #15
 80084d8:	d915      	bls.n	8008506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084da:	4a18      	ldr	r2, [pc, #96]	@ (800853c <vPortValidateInterruptPriority+0x74>)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084e4:	4b16      	ldr	r3, [pc, #88]	@ (8008540 <vPortValidateInterruptPriority+0x78>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	7afa      	ldrb	r2, [r7, #11]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d20b      	bcs.n	8008506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	607b      	str	r3, [r7, #4]
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	e7fd      	b.n	8008502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008506:	4b0f      	ldr	r3, [pc, #60]	@ (8008544 <vPortValidateInterruptPriority+0x7c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800850e:	4b0e      	ldr	r3, [pc, #56]	@ (8008548 <vPortValidateInterruptPriority+0x80>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d90b      	bls.n	800852e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	603b      	str	r3, [r7, #0]
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	e7fd      	b.n	800852a <vPortValidateInterruptPriority+0x62>
	}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	e000e3f0 	.word	0xe000e3f0
 8008540:	20007178 	.word	0x20007178
 8008544:	e000ed0c 	.word	0xe000ed0c
 8008548:	2000717c 	.word	0x2000717c

0800854c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	@ 0x28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008554:	2300      	movs	r3, #0
 8008556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008558:	f7fe fd4e 	bl	8006ff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800855c:	4b5c      	ldr	r3, [pc, #368]	@ (80086d0 <pvPortMalloc+0x184>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008564:	f000 f924 	bl	80087b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008568:	4b5a      	ldr	r3, [pc, #360]	@ (80086d4 <pvPortMalloc+0x188>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4013      	ands	r3, r2
 8008570:	2b00      	cmp	r3, #0
 8008572:	f040 8095 	bne.w	80086a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01e      	beq.n	80085ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800857c:	2208      	movs	r2, #8
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b00      	cmp	r3, #0
 800858c:	d015      	beq.n	80085ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f023 0307 	bic.w	r3, r3, #7
 8008594:	3308      	adds	r3, #8
 8008596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00b      	beq.n	80085ba <pvPortMalloc+0x6e>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	617b      	str	r3, [r7, #20]
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	e7fd      	b.n	80085b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d06f      	beq.n	80086a0 <pvPortMalloc+0x154>
 80085c0:	4b45      	ldr	r3, [pc, #276]	@ (80086d8 <pvPortMalloc+0x18c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d86a      	bhi.n	80086a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ca:	4b44      	ldr	r3, [pc, #272]	@ (80086dc <pvPortMalloc+0x190>)
 80085cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ce:	4b43      	ldr	r3, [pc, #268]	@ (80086dc <pvPortMalloc+0x190>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085d4:	e004      	b.n	80085e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d903      	bls.n	80085f2 <pvPortMalloc+0xa6>
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1f1      	bne.n	80085d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085f2:	4b37      	ldr	r3, [pc, #220]	@ (80086d0 <pvPortMalloc+0x184>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d051      	beq.n	80086a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2208      	movs	r2, #8
 8008602:	4413      	add	r3, r2
 8008604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	2308      	movs	r3, #8
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	429a      	cmp	r2, r3
 800861c:	d920      	bls.n	8008660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800861e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4413      	add	r3, r2
 8008624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <pvPortMalloc+0xfc>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	613b      	str	r3, [r7, #16]
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	e7fd      	b.n	8008644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800865a:	69b8      	ldr	r0, [r7, #24]
 800865c:	f000 f90a 	bl	8008874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008660:	4b1d      	ldr	r3, [pc, #116]	@ (80086d8 <pvPortMalloc+0x18c>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	4a1b      	ldr	r2, [pc, #108]	@ (80086d8 <pvPortMalloc+0x18c>)
 800866c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800866e:	4b1a      	ldr	r3, [pc, #104]	@ (80086d8 <pvPortMalloc+0x18c>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4b1b      	ldr	r3, [pc, #108]	@ (80086e0 <pvPortMalloc+0x194>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d203      	bcs.n	8008682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800867a:	4b17      	ldr	r3, [pc, #92]	@ (80086d8 <pvPortMalloc+0x18c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a18      	ldr	r2, [pc, #96]	@ (80086e0 <pvPortMalloc+0x194>)
 8008680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	4b13      	ldr	r3, [pc, #76]	@ (80086d4 <pvPortMalloc+0x188>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	431a      	orrs	r2, r3
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008696:	4b13      	ldr	r3, [pc, #76]	@ (80086e4 <pvPortMalloc+0x198>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3301      	adds	r3, #1
 800869c:	4a11      	ldr	r2, [pc, #68]	@ (80086e4 <pvPortMalloc+0x198>)
 800869e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086a0:	f7fe fcb8 	bl	8007014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <pvPortMalloc+0x17a>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60fb      	str	r3, [r7, #12]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <pvPortMalloc+0x176>
	return pvReturn;
 80086c6:	69fb      	ldr	r3, [r7, #28]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3728      	adds	r7, #40	@ 0x28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	2000bfa8 	.word	0x2000bfa8
 80086d4:	2000bfbc 	.word	0x2000bfbc
 80086d8:	2000bfac 	.word	0x2000bfac
 80086dc:	2000bfa0 	.word	0x2000bfa0
 80086e0:	2000bfb0 	.word	0x2000bfb0
 80086e4:	2000bfb4 	.word	0x2000bfb4

080086e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d04f      	beq.n	800879a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086fa:	2308      	movs	r3, #8
 80086fc:	425b      	negs	r3, r3
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4413      	add	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	4b25      	ldr	r3, [pc, #148]	@ (80087a4 <vPortFree+0xbc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4013      	ands	r3, r2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10b      	bne.n	800872e <vPortFree+0x46>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60fb      	str	r3, [r7, #12]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <vPortFree+0x66>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60bb      	str	r3, [r7, #8]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	4b14      	ldr	r3, [pc, #80]	@ (80087a4 <vPortFree+0xbc>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4013      	ands	r3, r2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01e      	beq.n	800879a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d11a      	bne.n	800879a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	4b0e      	ldr	r3, [pc, #56]	@ (80087a4 <vPortFree+0xbc>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	43db      	mvns	r3, r3
 800876e:	401a      	ands	r2, r3
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008774:	f7fe fc40 	bl	8006ff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	4b0a      	ldr	r3, [pc, #40]	@ (80087a8 <vPortFree+0xc0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4413      	add	r3, r2
 8008782:	4a09      	ldr	r2, [pc, #36]	@ (80087a8 <vPortFree+0xc0>)
 8008784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008786:	6938      	ldr	r0, [r7, #16]
 8008788:	f000 f874 	bl	8008874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800878c:	4b07      	ldr	r3, [pc, #28]	@ (80087ac <vPortFree+0xc4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3301      	adds	r3, #1
 8008792:	4a06      	ldr	r2, [pc, #24]	@ (80087ac <vPortFree+0xc4>)
 8008794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008796:	f7fe fc3d 	bl	8007014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800879a:	bf00      	nop
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	2000bfbc 	.word	0x2000bfbc
 80087a8:	2000bfac 	.word	0x2000bfac
 80087ac:	2000bfb8 	.word	0x2000bfb8

080087b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087b6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80087ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087bc:	4b27      	ldr	r3, [pc, #156]	@ (800885c <prvHeapInit+0xac>)
 80087be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3307      	adds	r3, #7
 80087ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	4a1f      	ldr	r2, [pc, #124]	@ (800885c <prvHeapInit+0xac>)
 80087e0:	4413      	add	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008860 <prvHeapInit+0xb0>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008860 <prvHeapInit+0xb0>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4413      	add	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087fc:	2208      	movs	r2, #8
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1a9b      	subs	r3, r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a15      	ldr	r2, [pc, #84]	@ (8008864 <prvHeapInit+0xb4>)
 8008810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008812:	4b14      	ldr	r3, [pc, #80]	@ (8008864 <prvHeapInit+0xb4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800881a:	4b12      	ldr	r3, [pc, #72]	@ (8008864 <prvHeapInit+0xb4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	1ad2      	subs	r2, r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008830:	4b0c      	ldr	r3, [pc, #48]	@ (8008864 <prvHeapInit+0xb4>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4a0a      	ldr	r2, [pc, #40]	@ (8008868 <prvHeapInit+0xb8>)
 800883e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4a09      	ldr	r2, [pc, #36]	@ (800886c <prvHeapInit+0xbc>)
 8008846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008848:	4b09      	ldr	r3, [pc, #36]	@ (8008870 <prvHeapInit+0xc0>)
 800884a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800884e:	601a      	str	r2, [r3, #0]
}
 8008850:	bf00      	nop
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	20007180 	.word	0x20007180
 8008860:	2000bfa0 	.word	0x2000bfa0
 8008864:	2000bfa8 	.word	0x2000bfa8
 8008868:	2000bfb0 	.word	0x2000bfb0
 800886c:	2000bfac 	.word	0x2000bfac
 8008870:	2000bfbc 	.word	0x2000bfbc

08008874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800887c:	4b28      	ldr	r3, [pc, #160]	@ (8008920 <prvInsertBlockIntoFreeList+0xac>)
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e002      	b.n	8008888 <prvInsertBlockIntoFreeList+0x14>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d8f7      	bhi.n	8008882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	4413      	add	r3, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d108      	bne.n	80088b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	441a      	add	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d118      	bne.n	80088fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <prvInsertBlockIntoFreeList+0xb0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d00d      	beq.n	80088f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	441a      	add	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	e008      	b.n	8008904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008924 <prvInsertBlockIntoFreeList+0xb0>)
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	e003      	b.n	8008904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d002      	beq.n	8008912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	2000bfa0 	.word	0x2000bfa0
 8008924:	2000bfa8 	.word	0x2000bfa8

08008928 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008928:	4b04      	ldr	r3, [pc, #16]	@ (800893c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	b10a      	cbz	r2, 8008932 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xa>
 800892e:	4803      	ldr	r0, [pc, #12]	@ (800893c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 8008930:	4770      	bx	lr
 8008932:	4a03      	ldr	r2, [pc, #12]	@ (8008940 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x18>)
 8008934:	4801      	ldr	r0, [pc, #4]	@ (800893c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	4770      	bx	lr
 800893c:	20000014 	.word	0x20000014
 8008940:	20000184 	.word	0x20000184

08008944 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008944:	4a02      	ldr	r2, [pc, #8]	@ (8008950 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xc>)
 8008946:	4b03      	ldr	r3, [pc, #12]	@ (8008954 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x10>)
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20000184 	.word	0x20000184
 8008954:	20000014 	.word	0x20000014

08008958 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__position>:
 8008958:	6840      	ldr	r0, [r0, #4]
 800895a:	4770      	bx	lr

0800895c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__position>:
 800895c:	6800      	ldr	r0, [r0, #0]
 800895e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8008962:	4770      	bx	lr

08008964 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__position>:
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800896a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800896e:	e9c2 0100 	strd	r0, r1, [r2]
 8008972:	4770      	bx	lr

08008974 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__position>:
 8008974:	6803      	ldr	r3, [r0, #0]
 8008976:	ed92 7b00 	vldr	d7, [r2]
 800897a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800897e:	ed83 7b00 	vstr	d7, [r3]
 8008982:	4770      	bx	lr

08008984 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_init_function>:
 8008984:	f002 b810 	b.w	800a9a8 <actuator_msgs__msg__Actuators__init>

08008988 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_fini_function>:
 8008988:	f002 b85e 	b.w	800aa48 <actuator_msgs__msg__Actuators__fini>

0800898c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__position>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4604      	mov	r4, r0
 8008990:	460d      	mov	r5, r1
 8008992:	f001 febb 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 8008996:	4629      	mov	r1, r5
 8008998:	4620      	mov	r0, r4
 800899a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899e:	f001 be9b 	b.w	800a6d8 <rosidl_runtime_c__double__Sequence__init>
 80089a2:	bf00      	nop

080089a4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__normalized>:
 80089a4:	6840      	ldr	r0, [r0, #4]
 80089a6:	4770      	bx	lr

080089a8 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__velocity>:
 80089a8:	6840      	ldr	r0, [r0, #4]
 80089aa:	4770      	bx	lr

080089ac <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__velocity>:
 80089ac:	6800      	ldr	r0, [r0, #0]
 80089ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089b2:	4770      	bx	lr

080089b4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__position>:
 80089b4:	6800      	ldr	r0, [r0, #0]
 80089b6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089ba:	4770      	bx	lr

080089bc <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__normalized>:
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089c2:	4770      	bx	lr

080089c4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__normalized>:
 80089c4:	6800      	ldr	r0, [r0, #0]
 80089c6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089ca:	4770      	bx	lr

080089cc <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__velocity>:
 80089cc:	6800      	ldr	r0, [r0, #0]
 80089ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089d2:	4770      	bx	lr

080089d4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__normalized>:
 80089d4:	6803      	ldr	r3, [r0, #0]
 80089d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089de:	e9c2 0100 	strd	r0, r1, [r2]
 80089e2:	4770      	bx	lr

080089e4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__normalized>:
 80089e4:	6803      	ldr	r3, [r0, #0]
 80089e6:	ed92 7b00 	vldr	d7, [r2]
 80089ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089ee:	ed83 7b00 	vstr	d7, [r3]
 80089f2:	4770      	bx	lr

080089f4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__velocity>:
 80089f4:	6803      	ldr	r3, [r0, #0]
 80089f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089fe:	e9c2 0100 	strd	r0, r1, [r2]
 8008a02:	4770      	bx	lr

08008a04 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__velocity>:
 8008a04:	6803      	ldr	r3, [r0, #0]
 8008a06:	ed92 7b00 	vldr	d7, [r2]
 8008a0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008a0e:	ed83 7b00 	vstr	d7, [r3]
 8008a12:	4770      	bx	lr

08008a14 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__normalized>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	460d      	mov	r5, r1
 8008a1a:	f001 fe77 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4620      	mov	r0, r4
 8008a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a26:	f001 be57 	b.w	800a6d8 <rosidl_runtime_c__double__Sequence__init>
 8008a2a:	bf00      	nop

08008a2c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__velocity>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4604      	mov	r4, r0
 8008a30:	460d      	mov	r5, r1
 8008a32:	f001 fe6b 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 8008a36:	4629      	mov	r1, r5
 8008a38:	4620      	mov	r0, r4
 8008a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a3e:	f001 be4b 	b.w	800a6d8 <rosidl_runtime_c__double__Sequence__init>
 8008a42:	bf00      	nop

08008a44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008a44:	b508      	push	{r3, lr}
 8008a46:	f001 fea9 	bl	800a79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008a4a:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 8008a4c:	4906      	ldr	r1, [pc, #24]	@ (8008a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x24>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	60c8      	str	r0, [r1, #12]
 8008a52:	b10a      	cbz	r2, 8008a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>
 8008a54:	4803      	ldr	r0, [pc, #12]	@ (8008a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 8008a56:	bd08      	pop	{r3, pc}
 8008a58:	4a04      	ldr	r2, [pc, #16]	@ (8008a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x28>)
 8008a5a:	4802      	ldr	r0, [pc, #8]	@ (8008a64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 8008a5c:	6812      	ldr	r2, [r2, #0]
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	bd08      	pop	{r3, pc}
 8008a62:	bf00      	nop
 8008a64:	20000034 	.word	0x20000034
 8008a68:	2000004c 	.word	0x2000004c
 8008a6c:	20000188 	.word	0x20000188

08008a70 <_Actuators__max_serialized_size>:
 8008a70:	b500      	push	{lr}
 8008a72:	b083      	sub	sp, #12
 8008a74:	2301      	movs	r3, #1
 8008a76:	2100      	movs	r1, #0
 8008a78:	f10d 0007 	add.w	r0, sp, #7
 8008a7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008a80:	f001 ff28 	bl	800a8d4 <max_serialized_size_std_msgs__msg__Header>
 8008a84:	b003      	add	sp, #12
 8008a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a8a:	bf00      	nop

08008a8c <get_serialized_size_actuator_msgs__msg__Actuators>:
 8008a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a90:	4606      	mov	r6, r0
 8008a92:	b1f8      	cbz	r0, 8008ad4 <get_serialized_size_actuator_msgs__msg__Actuators+0x48>
 8008a94:	460d      	mov	r5, r1
 8008a96:	f001 fea5 	bl	800a7e4 <get_serialized_size_std_msgs__msg__Header>
 8008a9a:	182f      	adds	r7, r5, r0
 8008a9c:	2104      	movs	r1, #4
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8008aa4:	f000 f94a 	bl	8008d3c <ucdr_alignment>
 8008aa8:	1d04      	adds	r4, r0, #4
 8008aaa:	443c      	add	r4, r7
 8008aac:	f1b8 0f00 	cmp.w	r8, #0
 8008ab0:	d122      	bne.n	8008af8 <get_serialized_size_actuator_msgs__msg__Actuators+0x6c>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	2104      	movs	r1, #4
 8008ab6:	6a77      	ldr	r7, [r6, #36]	@ 0x24
 8008ab8:	f000 f940 	bl	8008d3c <ucdr_alignment>
 8008abc:	4404      	add	r4, r0
 8008abe:	3404      	adds	r4, #4
 8008ac0:	b997      	cbnz	r7, 8008ae8 <get_serialized_size_actuator_msgs__msg__Actuators+0x5c>
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	2104      	movs	r1, #4
 8008ac6:	6b36      	ldr	r6, [r6, #48]	@ 0x30
 8008ac8:	f000 f938 	bl	8008d3c <ucdr_alignment>
 8008acc:	4404      	add	r4, r0
 8008ace:	3404      	adds	r4, #4
 8008ad0:	b916      	cbnz	r6, 8008ad8 <get_serialized_size_actuator_msgs__msg__Actuators+0x4c>
 8008ad2:	1b60      	subs	r0, r4, r5
 8008ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad8:	4620      	mov	r0, r4
 8008ada:	2108      	movs	r1, #8
 8008adc:	f000 f92e 	bl	8008d3c <ucdr_alignment>
 8008ae0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8008ae4:	1984      	adds	r4, r0, r6
 8008ae6:	e7f4      	b.n	8008ad2 <get_serialized_size_actuator_msgs__msg__Actuators+0x46>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	2108      	movs	r1, #8
 8008aec:	f000 f926 	bl	8008d3c <ucdr_alignment>
 8008af0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 8008af4:	4404      	add	r4, r0
 8008af6:	e7e4      	b.n	8008ac2 <get_serialized_size_actuator_msgs__msg__Actuators+0x36>
 8008af8:	4620      	mov	r0, r4
 8008afa:	2108      	movs	r1, #8
 8008afc:	f000 f91e 	bl	8008d3c <ucdr_alignment>
 8008b00:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8008b04:	4404      	add	r4, r0
 8008b06:	e7d4      	b.n	8008ab2 <get_serialized_size_actuator_msgs__msg__Actuators+0x26>

08008b08 <_Actuators__cdr_deserialize>:
 8008b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d04e      	beq.n	8008bb0 <_Actuators__cdr_deserialize+0xa8>
 8008b12:	4605      	mov	r5, r0
 8008b14:	f001 fee8 	bl	800a8e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008b18:	6843      	ldr	r3, [r0, #4]
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	4628      	mov	r0, r5
 8008b20:	4798      	blx	r3
 8008b22:	69e6      	ldr	r6, [r4, #28]
 8008b24:	6961      	ldr	r1, [r4, #20]
 8008b26:	ab01      	add	r3, sp, #4
 8008b28:	4632      	mov	r2, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f9e0 	bl	8008ef0 <ucdr_deserialize_sequence_double>
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	b9c8      	cbnz	r0, 8008b68 <_Actuators__cdr_deserialize+0x60>
 8008b34:	429e      	cmp	r6, r3
 8008b36:	d33f      	bcc.n	8008bb8 <_Actuators__cdr_deserialize+0xb0>
 8008b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b3a:	6a21      	ldr	r1, [r4, #32]
 8008b3c:	ab01      	add	r3, sp, #4
 8008b3e:	4632      	mov	r2, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 f9d5 	bl	8008ef0 <ucdr_deserialize_sequence_double>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	b310      	cbz	r0, 8008b90 <_Actuators__cdr_deserialize+0x88>
 8008b4a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b4c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8008b4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b50:	ab01      	add	r3, sp, #4
 8008b52:	463a      	mov	r2, r7
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 f9cb 	bl	8008ef0 <ucdr_deserialize_sequence_double>
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	b128      	cbz	r0, 8008b6c <_Actuators__cdr_deserialize+0x64>
 8008b60:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b62:	4630      	mov	r0, r6
 8008b64:	b003      	add	sp, #12
 8008b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b68:	61a3      	str	r3, [r4, #24]
 8008b6a:	e7e5      	b.n	8008b38 <_Actuators__cdr_deserialize+0x30>
 8008b6c:	429f      	cmp	r7, r3
 8008b6e:	d2f8      	bcs.n	8008b62 <_Actuators__cdr_deserialize+0x5a>
 8008b70:	2301      	movs	r3, #1
 8008b72:	75a8      	strb	r0, [r5, #22]
 8008b74:	756b      	strb	r3, [r5, #21]
 8008b76:	2108      	movs	r1, #8
 8008b78:	6320      	str	r0, [r4, #48]	@ 0x30
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f8f4 	bl	8008d68 <ucdr_align_to>
 8008b80:	9901      	ldr	r1, [sp, #4]
 8008b82:	4628      	mov	r0, r5
 8008b84:	00c9      	lsls	r1, r1, #3
 8008b86:	f000 f925 	bl	8008dd4 <ucdr_advance_buffer>
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	b003      	add	sp, #12
 8008b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b90:	429e      	cmp	r6, r3
 8008b92:	d2db      	bcs.n	8008b4c <_Actuators__cdr_deserialize+0x44>
 8008b94:	2301      	movs	r3, #1
 8008b96:	75a8      	strb	r0, [r5, #22]
 8008b98:	756b      	strb	r3, [r5, #21]
 8008b9a:	2108      	movs	r1, #8
 8008b9c:	6260      	str	r0, [r4, #36]	@ 0x24
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f8e2 	bl	8008d68 <ucdr_align_to>
 8008ba4:	9901      	ldr	r1, [sp, #4]
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	00c9      	lsls	r1, r1, #3
 8008baa:	f000 f913 	bl	8008dd4 <ucdr_advance_buffer>
 8008bae:	e7cd      	b.n	8008b4c <_Actuators__cdr_deserialize+0x44>
 8008bb0:	460e      	mov	r6, r1
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	b003      	add	sp, #12
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	2301      	movs	r3, #1
 8008bba:	75a8      	strb	r0, [r5, #22]
 8008bbc:	756b      	strb	r3, [r5, #21]
 8008bbe:	2108      	movs	r1, #8
 8008bc0:	61a0      	str	r0, [r4, #24]
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f000 f8d0 	bl	8008d68 <ucdr_align_to>
 8008bc8:	9901      	ldr	r1, [sp, #4]
 8008bca:	4628      	mov	r0, r5
 8008bcc:	00c9      	lsls	r1, r1, #3
 8008bce:	f000 f901 	bl	8008dd4 <ucdr_advance_buffer>
 8008bd2:	e7b1      	b.n	8008b38 <_Actuators__cdr_deserialize+0x30>

08008bd4 <_Actuators__cdr_serialize>:
 8008bd4:	b1d0      	cbz	r0, 8008c0c <_Actuators__cdr_serialize+0x38>
 8008bd6:	b538      	push	{r3, r4, r5, lr}
 8008bd8:	460d      	mov	r5, r1
 8008bda:	4604      	mov	r4, r0
 8008bdc:	f001 fe84 	bl	800a8e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008be0:	6843      	ldr	r3, [r0, #4]
 8008be2:	4629      	mov	r1, r5
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	4620      	mov	r0, r4
 8008be8:	4798      	blx	r3
 8008bea:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 f96c 	bl	8008ecc <ucdr_serialize_sequence_double>
 8008bf4:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f000 f967 	bl	8008ecc <ucdr_serialize_sequence_double>
 8008bfe:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8008c02:	4628      	mov	r0, r5
 8008c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c08:	f000 b960 	b.w	8008ecc <ucdr_serialize_sequence_double>
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop

08008c10 <_Actuators__get_serialized_size>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	4605      	mov	r5, r0
 8008c14:	b1d0      	cbz	r0, 8008c4c <_Actuators__get_serialized_size+0x3c>
 8008c16:	2100      	movs	r1, #0
 8008c18:	f001 fde4 	bl	800a7e4 <get_serialized_size_std_msgs__msg__Header>
 8008c1c:	2104      	movs	r1, #4
 8008c1e:	4604      	mov	r4, r0
 8008c20:	69ae      	ldr	r6, [r5, #24]
 8008c22:	f000 f88b 	bl	8008d3c <ucdr_alignment>
 8008c26:	4404      	add	r4, r0
 8008c28:	3404      	adds	r4, #4
 8008c2a:	bb16      	cbnz	r6, 8008c72 <_Actuators__get_serialized_size+0x62>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	2104      	movs	r1, #4
 8008c30:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8008c32:	f000 f883 	bl	8008d3c <ucdr_alignment>
 8008c36:	4404      	add	r4, r0
 8008c38:	3404      	adds	r4, #4
 8008c3a:	b996      	cbnz	r6, 8008c62 <_Actuators__get_serialized_size+0x52>
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	2104      	movs	r1, #4
 8008c40:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8008c42:	f000 f87b 	bl	8008d3c <ucdr_alignment>
 8008c46:	4404      	add	r4, r0
 8008c48:	1d25      	adds	r5, r4, #4
 8008c4a:	b90e      	cbnz	r6, 8008c50 <_Actuators__get_serialized_size+0x40>
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	2108      	movs	r1, #8
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f872 	bl	8008d3c <ucdr_alignment>
 8008c58:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8008c5c:	4405      	add	r5, r0
 8008c5e:	4628      	mov	r0, r5
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	4620      	mov	r0, r4
 8008c64:	2108      	movs	r1, #8
 8008c66:	f000 f869 	bl	8008d3c <ucdr_alignment>
 8008c6a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008c6e:	4404      	add	r4, r0
 8008c70:	e7e4      	b.n	8008c3c <_Actuators__get_serialized_size+0x2c>
 8008c72:	4620      	mov	r0, r4
 8008c74:	2108      	movs	r1, #8
 8008c76:	f000 f861 	bl	8008d3c <ucdr_alignment>
 8008c7a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008c7e:	4404      	add	r4, r0
 8008c80:	e7d4      	b.n	8008c2c <_Actuators__get_serialized_size+0x1c>
 8008c82:	bf00      	nop

08008c84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008c84:	4800      	ldr	r0, [pc, #0]	@ (8008c88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x4>)
 8008c86:	4770      	bx	lr
 8008c88:	2000013c 	.word	0x2000013c

08008c8c <ucdr_check_buffer_available_for>:
 8008c8c:	7d83      	ldrb	r3, [r0, #22]
 8008c8e:	b93b      	cbnz	r3, 8008ca0 <ucdr_check_buffer_available_for+0x14>
 8008c90:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008c94:	440b      	add	r3, r1
 8008c96:	4298      	cmp	r0, r3
 8008c98:	bf34      	ite	cc
 8008c9a:	2000      	movcc	r0, #0
 8008c9c:	2001      	movcs	r0, #1
 8008c9e:	4770      	bx	lr
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	4770      	bx	lr

08008ca4 <ucdr_check_final_buffer_behavior>:
 8008ca4:	7d83      	ldrb	r3, [r0, #22]
 8008ca6:	b943      	cbnz	r3, 8008cba <ucdr_check_final_buffer_behavior+0x16>
 8008ca8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008cac:	4291      	cmp	r1, r2
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	d205      	bcs.n	8008cc0 <ucdr_check_final_buffer_behavior+0x1c>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	4770      	bx	lr
 8008cc0:	6982      	ldr	r2, [r0, #24]
 8008cc2:	b13a      	cbz	r2, 8008cd4 <ucdr_check_final_buffer_behavior+0x30>
 8008cc4:	69c1      	ldr	r1, [r0, #28]
 8008cc6:	4790      	blx	r2
 8008cc8:	f080 0301 	eor.w	r3, r0, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	75a0      	strb	r0, [r4, #22]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	bd10      	pop	{r4, pc}
 8008cd4:	2001      	movs	r0, #1
 8008cd6:	75a0      	strb	r0, [r4, #22]
 8008cd8:	e7fa      	b.n	8008cd0 <ucdr_check_final_buffer_behavior+0x2c>
 8008cda:	bf00      	nop

08008cdc <ucdr_set_on_full_buffer_callback>:
 8008cdc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop

08008ce4 <ucdr_init_buffer_origin_offset_endian>:
 8008ce4:	b410      	push	{r4}
 8008ce6:	9c01      	ldr	r4, [sp, #4]
 8008ce8:	6001      	str	r1, [r0, #0]
 8008cea:	440a      	add	r2, r1
 8008cec:	6042      	str	r2, [r0, #4]
 8008cee:	190a      	adds	r2, r1, r4
 8008cf0:	441c      	add	r4, r3
 8008cf2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008cf6:	6082      	str	r2, [r0, #8]
 8008cf8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008cfc:	7503      	strb	r3, [r0, #20]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d08:	7542      	strb	r2, [r0, #21]
 8008d0a:	7582      	strb	r2, [r0, #22]
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop

08008d10 <ucdr_init_buffer_origin_offset>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	9c04      	ldr	r4, [sp, #16]
 8008d16:	9400      	str	r4, [sp, #0]
 8008d18:	2401      	movs	r4, #1
 8008d1a:	9401      	str	r4, [sp, #4]
 8008d1c:	f7ff ffe2 	bl	8008ce4 <ucdr_init_buffer_origin_offset_endian>
 8008d20:	b002      	add	sp, #8
 8008d22:	bd10      	pop	{r4, pc}

08008d24 <ucdr_init_buffer_origin>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	2400      	movs	r4, #0
 8008d2a:	9400      	str	r4, [sp, #0]
 8008d2c:	f7ff fff0 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 8008d30:	b002      	add	sp, #8
 8008d32:	bd10      	pop	{r4, pc}

08008d34 <ucdr_init_buffer>:
 8008d34:	2300      	movs	r3, #0
 8008d36:	f7ff bff5 	b.w	8008d24 <ucdr_init_buffer_origin>
 8008d3a:	bf00      	nop

08008d3c <ucdr_alignment>:
 8008d3c:	fbb0 f3f1 	udiv	r3, r0, r1
 8008d40:	fb03 0011 	mls	r0, r3, r1, r0
 8008d44:	1a08      	subs	r0, r1, r0
 8008d46:	3901      	subs	r1, #1
 8008d48:	4008      	ands	r0, r1
 8008d4a:	4770      	bx	lr

08008d4c <ucdr_buffer_alignment>:
 8008d4c:	7d43      	ldrb	r3, [r0, #21]
 8008d4e:	428b      	cmp	r3, r1
 8008d50:	d208      	bcs.n	8008d64 <ucdr_buffer_alignment+0x18>
 8008d52:	6900      	ldr	r0, [r0, #16]
 8008d54:	fbb0 f3f1 	udiv	r3, r0, r1
 8008d58:	fb01 0013 	mls	r0, r1, r3, r0
 8008d5c:	1a08      	subs	r0, r1, r0
 8008d5e:	3901      	subs	r1, #1
 8008d60:	4008      	ands	r0, r1
 8008d62:	4770      	bx	lr
 8008d64:	2000      	movs	r0, #0
 8008d66:	4770      	bx	lr

08008d68 <ucdr_align_to>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	f7ff ffed 	bl	8008d4c <ucdr_buffer_alignment>
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	6861      	ldr	r1, [r4, #4]
 8008d76:	6922      	ldr	r2, [r4, #16]
 8008d78:	7565      	strb	r5, [r4, #21]
 8008d7a:	4403      	add	r3, r0
 8008d7c:	428b      	cmp	r3, r1
 8008d7e:	bf28      	it	cs
 8008d80:	460b      	movcs	r3, r1
 8008d82:	4402      	add	r2, r0
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	6122      	str	r2, [r4, #16]
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop

08008d8c <ucdr_buffer_length>:
 8008d8c:	6882      	ldr	r2, [r0, #8]
 8008d8e:	6800      	ldr	r0, [r0, #0]
 8008d90:	1a10      	subs	r0, r2, r0
 8008d92:	4770      	bx	lr

08008d94 <ucdr_buffer_remaining>:
 8008d94:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008d98:	1a10      	subs	r0, r2, r0
 8008d9a:	4770      	bx	lr

08008d9c <ucdr_check_final_buffer_behavior_array>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	7d83      	ldrb	r3, [r0, #22]
 8008da0:	b963      	cbnz	r3, 8008dbc <ucdr_check_final_buffer_behavior_array+0x20>
 8008da2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	d308      	bcc.n	8008dc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008dae:	b139      	cbz	r1, 8008dc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008db0:	6983      	ldr	r3, [r0, #24]
 8008db2:	b163      	cbz	r3, 8008dce <ucdr_check_final_buffer_behavior_array+0x32>
 8008db4:	69c1      	ldr	r1, [r0, #28]
 8008db6:	4798      	blx	r3
 8008db8:	75a0      	strb	r0, [r4, #22]
 8008dba:	b108      	cbz	r0, 8008dc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7ff ffe7 	bl	8008d94 <ucdr_buffer_remaining>
 8008dc6:	42a8      	cmp	r0, r5
 8008dc8:	bf28      	it	cs
 8008dca:	4628      	movcs	r0, r5
 8008dcc:	bd38      	pop	{r3, r4, r5, pc}
 8008dce:	2301      	movs	r3, #1
 8008dd0:	7583      	strb	r3, [r0, #22]
 8008dd2:	e7f3      	b.n	8008dbc <ucdr_check_final_buffer_behavior_array+0x20>

08008dd4 <ucdr_advance_buffer>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	460d      	mov	r5, r1
 8008dda:	f7ff ff57 	bl	8008c8c <ucdr_check_buffer_available_for>
 8008dde:	b178      	cbz	r0, 8008e00 <ucdr_advance_buffer+0x2c>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	68a2      	ldr	r2, [r4, #8]
 8008de4:	442b      	add	r3, r5
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	2301      	movs	r3, #1
 8008dea:	442a      	add	r2, r5
 8008dec:	7563      	strb	r3, [r4, #21]
 8008dee:	60a2      	str	r2, [r4, #8]
 8008df0:	bd38      	pop	{r3, r4, r5, pc}
 8008df2:	68a2      	ldr	r2, [r4, #8]
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	4402      	add	r2, r0
 8008df8:	4403      	add	r3, r0
 8008dfa:	1a2d      	subs	r5, r5, r0
 8008dfc:	60a2      	str	r2, [r4, #8]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2201      	movs	r2, #1
 8008e02:	4629      	mov	r1, r5
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7ff ffc9 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1f1      	bne.n	8008df2 <ucdr_advance_buffer+0x1e>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	7563      	strb	r3, [r4, #21]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}

08008e14 <ucdr_serialize_sequence_char>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	460e      	mov	r6, r1
 8008e18:	4615      	mov	r5, r2
 8008e1a:	7d01      	ldrb	r1, [r0, #20]
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	f002 fb8b 	bl	800b538 <ucdr_serialize_endian_uint32_t>
 8008e22:	b90d      	cbnz	r5, 8008e28 <ucdr_serialize_sequence_char+0x14>
 8008e24:	2001      	movs	r0, #1
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	7d21      	ldrb	r1, [r4, #20]
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	4620      	mov	r0, r4
 8008e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e34:	f001 bec6 	b.w	800abc4 <ucdr_serialize_endian_array_char>

08008e38 <ucdr_deserialize_sequence_char>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	461d      	mov	r5, r3
 8008e3e:	4616      	mov	r6, r2
 8008e40:	460f      	mov	r7, r1
 8008e42:	461a      	mov	r2, r3
 8008e44:	7d01      	ldrb	r1, [r0, #20]
 8008e46:	4604      	mov	r4, r0
 8008e48:	f002 fc94 	bl	800b774 <ucdr_deserialize_endian_uint32_t>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	d208      	bcs.n	8008e64 <ucdr_deserialize_sequence_char+0x2c>
 8008e52:	2201      	movs	r2, #1
 8008e54:	75a2      	strb	r2, [r4, #22]
 8008e56:	7d21      	ldrb	r1, [r4, #20]
 8008e58:	463a      	mov	r2, r7
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e60:	f001 bee2 	b.w	800ac28 <ucdr_deserialize_endian_array_char>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1f6      	bne.n	8008e56 <ucdr_deserialize_sequence_char+0x1e>
 8008e68:	2001      	movs	r0, #1
 8008e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6e:	bf00      	nop

08008e70 <ucdr_serialize_sequence_uint8_t>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	460e      	mov	r6, r1
 8008e74:	4615      	mov	r5, r2
 8008e76:	7d01      	ldrb	r1, [r0, #20]
 8008e78:	4604      	mov	r4, r0
 8008e7a:	f002 fb5d 	bl	800b538 <ucdr_serialize_endian_uint32_t>
 8008e7e:	b90d      	cbnz	r5, 8008e84 <ucdr_serialize_sequence_uint8_t+0x14>
 8008e80:	2001      	movs	r0, #1
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	7d21      	ldrb	r1, [r4, #20]
 8008e86:	462b      	mov	r3, r5
 8008e88:	4632      	mov	r2, r6
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e90:	f001 bf2e 	b.w	800acf0 <ucdr_serialize_endian_array_uint8_t>

08008e94 <ucdr_deserialize_sequence_uint8_t>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	461d      	mov	r5, r3
 8008e9a:	4616      	mov	r6, r2
 8008e9c:	460f      	mov	r7, r1
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	7d01      	ldrb	r1, [r0, #20]
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	f002 fc66 	bl	800b774 <ucdr_deserialize_endian_uint32_t>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	429e      	cmp	r6, r3
 8008eac:	d208      	bcs.n	8008ec0 <ucdr_deserialize_sequence_uint8_t+0x2c>
 8008eae:	2201      	movs	r2, #1
 8008eb0:	75a2      	strb	r2, [r4, #22]
 8008eb2:	7d21      	ldrb	r1, [r4, #20]
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	f001 bf7c 	b.w	800adb8 <ucdr_deserialize_endian_array_uint8_t>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1f6      	bne.n	8008eb2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eca:	bf00      	nop

08008ecc <ucdr_serialize_sequence_double>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	460e      	mov	r6, r1
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	7d01      	ldrb	r1, [r0, #20]
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	f002 fb2f 	bl	800b538 <ucdr_serialize_endian_uint32_t>
 8008eda:	b90d      	cbnz	r5, 8008ee0 <ucdr_serialize_sequence_double+0x14>
 8008edc:	2001      	movs	r0, #1
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	7d21      	ldrb	r1, [r4, #20]
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008eec:	f001 bf96 	b.w	800ae1c <ucdr_serialize_endian_array_double>

08008ef0 <ucdr_deserialize_sequence_double>:
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	461d      	mov	r5, r3
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	460f      	mov	r7, r1
 8008efa:	461a      	mov	r2, r3
 8008efc:	7d01      	ldrb	r1, [r0, #20]
 8008efe:	4604      	mov	r4, r0
 8008f00:	f002 fc38 	bl	800b774 <ucdr_deserialize_endian_uint32_t>
 8008f04:	682b      	ldr	r3, [r5, #0]
 8008f06:	429e      	cmp	r6, r3
 8008f08:	d208      	bcs.n	8008f1c <ucdr_deserialize_sequence_double+0x2c>
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	75a2      	strb	r2, [r4, #22]
 8008f0e:	7d21      	ldrb	r1, [r4, #20]
 8008f10:	463a      	mov	r2, r7
 8008f12:	4620      	mov	r0, r4
 8008f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f18:	f001 bfd4 	b.w	800aec4 <ucdr_deserialize_endian_array_double>
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1f6      	bne.n	8008f0e <ucdr_deserialize_sequence_double+0x1e>
 8008f20:	2001      	movs	r0, #1
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f26:	bf00      	nop

08008f28 <rcl_get_zero_initialized_init_options>:
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4770      	bx	lr

08008f2c <rcl_init_options_init>:
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	b570      	push	{r4, r5, r6, lr}
 8008f30:	b09e      	sub	sp, #120	@ 0x78
 8008f32:	ad23      	add	r5, sp, #140	@ 0x8c
 8008f34:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d046      	beq.n	8008fca <rcl_init_options_init+0x9e>
 8008f3c:	6803      	ldr	r3, [r0, #0]
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b133      	cbz	r3, 8008f50 <rcl_init_options_init+0x24>
 8008f42:	2564      	movs	r5, #100	@ 0x64
 8008f44:	4628      	mov	r0, r5
 8008f46:	b01e      	add	sp, #120	@ 0x78
 8008f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f4c:	b004      	add	sp, #16
 8008f4e:	4770      	bx	lr
 8008f50:	4628      	mov	r0, r5
 8008f52:	f000 fab7 	bl	80094c4 <rcutils_allocator_is_valid>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d037      	beq.n	8008fca <rcl_init_options_init+0x9e>
 8008f5a:	46ae      	mov	lr, r5
 8008f5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008f60:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8008f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f68:	f8de 3000 	ldr.w	r3, [lr]
 8008f6c:	f8cc 3000 	str.w	r3, [ip]
 8008f70:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8008f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f74:	2070      	movs	r0, #112	@ 0x70
 8008f76:	4798      	blx	r3
 8008f78:	4606      	mov	r6, r0
 8008f7a:	6020      	str	r0, [r4, #0]
 8008f7c:	b338      	cbz	r0, 8008fce <rcl_init_options_init+0xa2>
 8008f7e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8008f82:	4686      	mov	lr, r0
 8008f84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008f88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008f8c:	f8dc 3000 	ldr.w	r3, [ip]
 8008f90:	f8ce 3000 	str.w	r3, [lr]
 8008f94:	a802      	add	r0, sp, #8
 8008f96:	f000 fad7 	bl	8009548 <rmw_get_zero_initialized_init_options>
 8008f9a:	2258      	movs	r2, #88	@ 0x58
 8008f9c:	a902      	add	r1, sp, #8
 8008f9e:	f106 0018 	add.w	r0, r6, #24
 8008fa2:	f00a f956 	bl	8013252 <memcpy>
 8008fa6:	ab26      	add	r3, sp, #152	@ 0x98
 8008fa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008fac:	6826      	ldr	r6, [r4, #0]
 8008fae:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008fb2:	f106 0018 	add.w	r0, r6, #24
 8008fb6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008fba:	f000 fb0b 	bl	80095d4 <rmw_init_options_init>
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	b938      	cbnz	r0, 8008fd2 <rcl_init_options_init+0xa6>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 8008fc8:	e7bc      	b.n	8008f44 <rcl_init_options_init+0x18>
 8008fca:	250b      	movs	r5, #11
 8008fcc:	e7ba      	b.n	8008f44 <rcl_init_options_init+0x18>
 8008fce:	250a      	movs	r5, #10
 8008fd0:	e7b8      	b.n	8008f44 <rcl_init_options_init+0x18>
 8008fd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008fd4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8008fd6:	6820      	ldr	r0, [r4, #0]
 8008fd8:	4798      	blx	r3
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f006 fafe 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	e7af      	b.n	8008f44 <rcl_init_options_init+0x18>

08008fe4 <rcl_init_options_fini>:
 8008fe4:	b530      	push	{r4, r5, lr}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	b1f0      	cbz	r0, 8009028 <rcl_init_options_fini+0x44>
 8008fea:	6803      	ldr	r3, [r0, #0]
 8008fec:	4604      	mov	r4, r0
 8008fee:	b1db      	cbz	r3, 8009028 <rcl_init_options_fini+0x44>
 8008ff0:	469c      	mov	ip, r3
 8008ff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ff6:	f10d 0e04 	add.w	lr, sp, #4
 8008ffa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8009002:	f8ce 3000 	str.w	r3, [lr]
 8009006:	a801      	add	r0, sp, #4
 8009008:	f000 fa5c 	bl	80094c4 <rcutils_allocator_is_valid>
 800900c:	b160      	cbz	r0, 8009028 <rcl_init_options_fini+0x44>
 800900e:	6820      	ldr	r0, [r4, #0]
 8009010:	3018      	adds	r0, #24
 8009012:	f000 fb7b 	bl	800970c <rmw_init_options_fini>
 8009016:	4605      	mov	r5, r0
 8009018:	b950      	cbnz	r0, 8009030 <rcl_init_options_fini+0x4c>
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	9905      	ldr	r1, [sp, #20]
 8009020:	4798      	blx	r3
 8009022:	4628      	mov	r0, r5
 8009024:	b007      	add	sp, #28
 8009026:	bd30      	pop	{r4, r5, pc}
 8009028:	250b      	movs	r5, #11
 800902a:	4628      	mov	r0, r5
 800902c:	b007      	add	sp, #28
 800902e:	bd30      	pop	{r4, r5, pc}
 8009030:	f006 fad4 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 8009034:	4605      	mov	r5, r0
 8009036:	e7f8      	b.n	800902a <rcl_init_options_fini+0x46>

08009038 <rcl_init_options_copy>:
 8009038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903a:	b09d      	sub	sp, #116	@ 0x74
 800903c:	2800      	cmp	r0, #0
 800903e:	d04a      	beq.n	80090d6 <rcl_init_options_copy+0x9e>
 8009040:	4604      	mov	r4, r0
 8009042:	6800      	ldr	r0, [r0, #0]
 8009044:	2800      	cmp	r0, #0
 8009046:	d046      	beq.n	80090d6 <rcl_init_options_copy+0x9e>
 8009048:	460d      	mov	r5, r1
 800904a:	f000 fa3b 	bl	80094c4 <rcutils_allocator_is_valid>
 800904e:	2800      	cmp	r0, #0
 8009050:	d041      	beq.n	80090d6 <rcl_init_options_copy+0x9e>
 8009052:	2d00      	cmp	r5, #0
 8009054:	d03f      	beq.n	80090d6 <rcl_init_options_copy+0x9e>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	b11b      	cbz	r3, 8009062 <rcl_init_options_copy+0x2a>
 800905a:	2464      	movs	r4, #100	@ 0x64
 800905c:	4620      	mov	r0, r4
 800905e:	b01d      	add	sp, #116	@ 0x74
 8009060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009062:	6826      	ldr	r6, [r4, #0]
 8009064:	46b6      	mov	lr, r6
 8009066:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800906a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800906e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009072:	f8de 3000 	ldr.w	r3, [lr]
 8009076:	6837      	ldr	r7, [r6, #0]
 8009078:	f8cc 3000 	str.w	r3, [ip]
 800907c:	4619      	mov	r1, r3
 800907e:	2070      	movs	r0, #112	@ 0x70
 8009080:	47b8      	blx	r7
 8009082:	4606      	mov	r6, r0
 8009084:	6028      	str	r0, [r5, #0]
 8009086:	b350      	cbz	r0, 80090de <rcl_init_options_copy+0xa6>
 8009088:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800908c:	4686      	mov	lr, r0
 800908e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009092:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009096:	f8dc 3000 	ldr.w	r3, [ip]
 800909a:	f8ce 3000 	str.w	r3, [lr]
 800909e:	4668      	mov	r0, sp
 80090a0:	f000 fa52 	bl	8009548 <rmw_get_zero_initialized_init_options>
 80090a4:	2258      	movs	r2, #88	@ 0x58
 80090a6:	4669      	mov	r1, sp
 80090a8:	f106 0018 	add.w	r0, r6, #24
 80090ac:	f00a f8d1 	bl	8013252 <memcpy>
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	6829      	ldr	r1, [r5, #0]
 80090b4:	3018      	adds	r0, #24
 80090b6:	3118      	adds	r1, #24
 80090b8:	f000 faf4 	bl	80096a4 <rmw_init_options_copy>
 80090bc:	4604      	mov	r4, r0
 80090be:	2800      	cmp	r0, #0
 80090c0:	d0cc      	beq.n	800905c <rcl_init_options_copy+0x24>
 80090c2:	f000 fa0d 	bl	80094e0 <rcutils_get_error_string>
 80090c6:	f000 fa23 	bl	8009510 <rcutils_reset_error>
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7ff ff8a 	bl	8008fe4 <rcl_init_options_fini>
 80090d0:	b138      	cbz	r0, 80090e2 <rcl_init_options_copy+0xaa>
 80090d2:	4604      	mov	r4, r0
 80090d4:	e7c2      	b.n	800905c <rcl_init_options_copy+0x24>
 80090d6:	240b      	movs	r4, #11
 80090d8:	4620      	mov	r0, r4
 80090da:	b01d      	add	sp, #116	@ 0x74
 80090dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090de:	240a      	movs	r4, #10
 80090e0:	e7bc      	b.n	800905c <rcl_init_options_copy+0x24>
 80090e2:	4620      	mov	r0, r4
 80090e4:	b01d      	add	sp, #116	@ 0x74
 80090e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80090ea:	f006 ba77 	b.w	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 80090ee:	bf00      	nop

080090f0 <rcl_init_options_set_domain_id>:
 80090f0:	b120      	cbz	r0, 80090fc <rcl_init_options_set_domain_id+0xc>
 80090f2:	6803      	ldr	r3, [r0, #0]
 80090f4:	b113      	cbz	r3, 80090fc <rcl_init_options_set_domain_id+0xc>
 80090f6:	6259      	str	r1, [r3, #36]	@ 0x24
 80090f8:	2000      	movs	r0, #0
 80090fa:	4770      	bx	lr
 80090fc:	200b      	movs	r0, #11
 80090fe:	4770      	bx	lr

08009100 <rcl_get_zero_initialized_publisher>:
 8009100:	4b01      	ldr	r3, [pc, #4]	@ (8009108 <rcl_get_zero_initialized_publisher+0x8>)
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	0801420c 	.word	0x0801420c

0800910c <rcl_publisher_init>:
 800910c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009110:	b088      	sub	sp, #32
 8009112:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009114:	2d00      	cmp	r5, #0
 8009116:	d06a      	beq.n	80091ee <rcl_publisher_init+0xe2>
 8009118:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800911c:	4604      	mov	r4, r0
 800911e:	4648      	mov	r0, r9
 8009120:	460e      	mov	r6, r1
 8009122:	4690      	mov	r8, r2
 8009124:	461f      	mov	r7, r3
 8009126:	f000 f9cd 	bl	80094c4 <rcutils_allocator_is_valid>
 800912a:	2800      	cmp	r0, #0
 800912c:	d05f      	beq.n	80091ee <rcl_publisher_init+0xe2>
 800912e:	2c00      	cmp	r4, #0
 8009130:	d05d      	beq.n	80091ee <rcl_publisher_init+0xe2>
 8009132:	f8d4 a000 	ldr.w	sl, [r4]
 8009136:	f1ba 0f00 	cmp.w	sl, #0
 800913a:	d004      	beq.n	8009146 <rcl_publisher_init+0x3a>
 800913c:	2764      	movs	r7, #100	@ 0x64
 800913e:	4638      	mov	r0, r7
 8009140:	b008      	add	sp, #32
 8009142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009146:	4630      	mov	r0, r6
 8009148:	f006 fd8a 	bl	800fc60 <rcl_node_is_valid>
 800914c:	2800      	cmp	r0, #0
 800914e:	d053      	beq.n	80091f8 <rcl_publisher_init+0xec>
 8009150:	f1b8 0f00 	cmp.w	r8, #0
 8009154:	d04b      	beq.n	80091ee <rcl_publisher_init+0xe2>
 8009156:	2f00      	cmp	r7, #0
 8009158:	d049      	beq.n	80091ee <rcl_publisher_init+0xe2>
 800915a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800915e:	aa07      	add	r2, sp, #28
 8009160:	9205      	str	r2, [sp, #20]
 8009162:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8009166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800916a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800916e:	f8cd a01c 	str.w	sl, [sp, #28]
 8009172:	4639      	mov	r1, r7
 8009174:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009178:	4630      	mov	r0, r6
 800917a:	f006 fe01 	bl	800fd80 <rcl_node_resolve_name>
 800917e:	4607      	mov	r7, r0
 8009180:	2800      	cmp	r0, #0
 8009182:	d150      	bne.n	8009226 <rcl_publisher_init+0x11a>
 8009184:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8009188:	21c8      	movs	r1, #200	@ 0xc8
 800918a:	2001      	movs	r0, #1
 800918c:	4798      	blx	r3
 800918e:	6020      	str	r0, [r4, #0]
 8009190:	2800      	cmp	r0, #0
 8009192:	d04e      	beq.n	8009232 <rcl_publisher_init+0x126>
 8009194:	4630      	mov	r0, r6
 8009196:	f006 fd85 	bl	800fca4 <rcl_node_get_rmw_handle>
 800919a:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	9a07      	ldr	r2, [sp, #28]
 80091a2:	6827      	ldr	r7, [r4, #0]
 80091a4:	462b      	mov	r3, r5
 80091a6:	4641      	mov	r1, r8
 80091a8:	f000 fdc4 	bl	8009d34 <rmw_create_publisher>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80091b2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80091b6:	b370      	cbz	r0, 8009216 <rcl_publisher_init+0x10a>
 80091b8:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80091bc:	f000 fe96 	bl	8009eec <rmw_publisher_get_actual_qos>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	4607      	mov	r7, r0
 80091c4:	b9d0      	cbnz	r0, 80091fc <rcl_publisher_init+0xf0>
 80091c6:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80091ca:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80091ce:	4629      	mov	r1, r5
 80091d0:	2270      	movs	r2, #112	@ 0x70
 80091d2:	4618      	mov	r0, r3
 80091d4:	f00a f83d 	bl	8013252 <memcpy>
 80091d8:	6832      	ldr	r2, [r6, #0]
 80091da:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80091de:	9807      	ldr	r0, [sp, #28]
 80091e0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80091e2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80091e4:	4798      	blx	r3
 80091e6:	4638      	mov	r0, r7
 80091e8:	b008      	add	sp, #32
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	270b      	movs	r7, #11
 80091f0:	4638      	mov	r0, r7
 80091f2:	b008      	add	sp, #32
 80091f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f8:	27c8      	movs	r7, #200	@ 0xc8
 80091fa:	e7a0      	b.n	800913e <rcl_publisher_init+0x32>
 80091fc:	b18b      	cbz	r3, 8009222 <rcl_publisher_init+0x116>
 80091fe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009202:	b142      	cbz	r2, 8009216 <rcl_publisher_init+0x10a>
 8009204:	4630      	mov	r0, r6
 8009206:	f006 fd4d 	bl	800fca4 <rcl_node_get_rmw_handle>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009210:	f000 fe7a 	bl	8009f08 <rmw_destroy_publisher>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8009218:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800921a:	4618      	mov	r0, r3
 800921c:	4790      	blx	r2
 800921e:	2300      	movs	r3, #0
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	2701      	movs	r7, #1
 8009224:	e7db      	b.n	80091de <rcl_publisher_init+0xd2>
 8009226:	2867      	cmp	r0, #103	@ 0x67
 8009228:	d0d9      	beq.n	80091de <rcl_publisher_init+0xd2>
 800922a:	2869      	cmp	r0, #105	@ 0x69
 800922c:	d003      	beq.n	8009236 <rcl_publisher_init+0x12a>
 800922e:	280a      	cmp	r0, #10
 8009230:	d1f7      	bne.n	8009222 <rcl_publisher_init+0x116>
 8009232:	270a      	movs	r7, #10
 8009234:	e7d3      	b.n	80091de <rcl_publisher_init+0xd2>
 8009236:	2767      	movs	r7, #103	@ 0x67
 8009238:	e7d1      	b.n	80091de <rcl_publisher_init+0xd2>
 800923a:	bf00      	nop

0800923c <rcl_publisher_get_default_options>:
 800923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923e:	4919      	ldr	r1, [pc, #100]	@ (80092a4 <rcl_publisher_get_default_options+0x68>)
 8009240:	4c19      	ldr	r4, [pc, #100]	@ (80092a8 <rcl_publisher_get_default_options+0x6c>)
 8009242:	b08b      	sub	sp, #44	@ 0x2c
 8009244:	2250      	movs	r2, #80	@ 0x50
 8009246:	4605      	mov	r5, r0
 8009248:	4818      	ldr	r0, [pc, #96]	@ (80092ac <rcl_publisher_get_default_options+0x70>)
 800924a:	f00a f802 	bl	8013252 <memcpy>
 800924e:	a802      	add	r0, sp, #8
 8009250:	f000 f90c 	bl	800946c <rcutils_get_default_allocator>
 8009254:	f10d 0c08 	add.w	ip, sp, #8
 8009258:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800925c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800925e:	466f      	mov	r7, sp
 8009260:	f8dc 3000 	ldr.w	r3, [ip]
 8009264:	f844 3b04 	str.w	r3, [r4], #4
 8009268:	4638      	mov	r0, r7
 800926a:	f000 f995 	bl	8009598 <rmw_get_default_publisher_options>
 800926e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009272:	2600      	movs	r6, #0
 8009274:	e884 0003 	stmia.w	r4, {r0, r1}
 8009278:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800927c:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 8009280:	f006 fd16 	bl	800fcb0 <rcl_get_disable_loaned_message>
 8009284:	b958      	cbnz	r0, 800929e <rcl_publisher_get_default_options+0x62>
 8009286:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800928a:	4908      	ldr	r1, [pc, #32]	@ (80092ac <rcl_publisher_get_default_options+0x70>)
 800928c:	2270      	movs	r2, #112	@ 0x70
 800928e:	4628      	mov	r0, r5
 8009290:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 8009294:	f009 ffdd 	bl	8013252 <memcpy>
 8009298:	4628      	mov	r0, r5
 800929a:	b00b      	add	sp, #44	@ 0x2c
 800929c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800929e:	f000 f937 	bl	8009510 <rcutils_reset_error>
 80092a2:	e7f2      	b.n	800928a <rcl_publisher_get_default_options+0x4e>
 80092a4:	08014210 	.word	0x08014210
 80092a8:	2000c010 	.word	0x2000c010
 80092ac:	2000bfc0 	.word	0x2000bfc0

080092b0 <rcl_publish>:
 80092b0:	b1f8      	cbz	r0, 80092f2 <rcl_publish+0x42>
 80092b2:	6803      	ldr	r3, [r0, #0]
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	b1b3      	cbz	r3, 80092e8 <rcl_publish+0x38>
 80092ba:	4616      	mov	r6, r2
 80092bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80092c0:	b192      	cbz	r2, 80092e8 <rcl_publish+0x38>
 80092c2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80092c6:	460d      	mov	r5, r1
 80092c8:	f006 f9a8 	bl	800f61c <rcl_context_is_valid>
 80092cc:	b160      	cbz	r0, 80092e8 <rcl_publish+0x38>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80092d4:	b140      	cbz	r0, 80092e8 <rcl_publish+0x38>
 80092d6:	b155      	cbz	r5, 80092ee <rcl_publish+0x3e>
 80092d8:	4632      	mov	r2, r6
 80092da:	4629      	mov	r1, r5
 80092dc:	f000 fcca 	bl	8009c74 <rmw_publish>
 80092e0:	3800      	subs	r0, #0
 80092e2:	bf18      	it	ne
 80092e4:	2001      	movne	r0, #1
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80092ec:	bd70      	pop	{r4, r5, r6, pc}
 80092ee:	200b      	movs	r0, #11
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80092f6:	4770      	bx	lr

080092f8 <rclc_support_init_with_options>:
 80092f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092fc:	b083      	sub	sp, #12
 80092fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009300:	b340      	cbz	r0, 8009354 <rclc_support_init_with_options+0x5c>
 8009302:	461d      	mov	r5, r3
 8009304:	b333      	cbz	r3, 8009354 <rclc_support_init_with_options+0x5c>
 8009306:	b32e      	cbz	r6, 8009354 <rclc_support_init_with_options+0x5c>
 8009308:	46e9      	mov	r9, sp
 800930a:	4604      	mov	r4, r0
 800930c:	4648      	mov	r0, r9
 800930e:	460f      	mov	r7, r1
 8009310:	4690      	mov	r8, r2
 8009312:	f006 f979 	bl	800f608 <rcl_get_zero_initialized_context>
 8009316:	e899 0003 	ldmia.w	r9, {r0, r1}
 800931a:	462a      	mov	r2, r5
 800931c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009320:	4623      	mov	r3, r4
 8009322:	4641      	mov	r1, r8
 8009324:	4638      	mov	r0, r7
 8009326:	f006 f9df 	bl	800f6e8 <rcl_init>
 800932a:	4605      	mov	r5, r0
 800932c:	b960      	cbnz	r0, 8009348 <rclc_support_init_with_options+0x50>
 800932e:	60a6      	str	r6, [r4, #8]
 8009330:	4632      	mov	r2, r6
 8009332:	f104 010c 	add.w	r1, r4, #12
 8009336:	2003      	movs	r0, #3
 8009338:	f006 fed0 	bl	80100dc <rcl_clock_init>
 800933c:	4605      	mov	r5, r0
 800933e:	b918      	cbnz	r0, 8009348 <rclc_support_init_with_options+0x50>
 8009340:	4628      	mov	r0, r5
 8009342:	b003      	add	sp, #12
 8009344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009348:	f000 f8e2 	bl	8009510 <rcutils_reset_error>
 800934c:	4628      	mov	r0, r5
 800934e:	b003      	add	sp, #12
 8009350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009354:	250b      	movs	r5, #11
 8009356:	4628      	mov	r0, r5
 8009358:	b003      	add	sp, #12
 800935a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800935e:	bf00      	nop

08009360 <rclc_node_init_default>:
 8009360:	b3b8      	cbz	r0, 80093d2 <rclc_node_init_default+0x72>
 8009362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009366:	460d      	mov	r5, r1
 8009368:	b0a1      	sub	sp, #132	@ 0x84
 800936a:	b329      	cbz	r1, 80093b8 <rclc_node_init_default+0x58>
 800936c:	4616      	mov	r6, r2
 800936e:	b31a      	cbz	r2, 80093b8 <rclc_node_init_default+0x58>
 8009370:	461f      	mov	r7, r3
 8009372:	b30b      	cbz	r3, 80093b8 <rclc_node_init_default+0x58>
 8009374:	f10d 0810 	add.w	r8, sp, #16
 8009378:	4604      	mov	r4, r0
 800937a:	4640      	mov	r0, r8
 800937c:	f006 fb10 	bl	800f9a0 <rcl_get_zero_initialized_node>
 8009380:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009384:	f10d 0918 	add.w	r9, sp, #24
 8009388:	e884 0003 	stmia.w	r4, {r0, r1}
 800938c:	4648      	mov	r0, r9
 800938e:	f006 fcaf 	bl	800fcf0 <rcl_node_get_default_options>
 8009392:	4640      	mov	r0, r8
 8009394:	f006 fb04 	bl	800f9a0 <rcl_get_zero_initialized_node>
 8009398:	f8cd 9000 	str.w	r9, [sp]
 800939c:	e898 0003 	ldmia.w	r8, {r0, r1}
 80093a0:	463b      	mov	r3, r7
 80093a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80093a6:	4632      	mov	r2, r6
 80093a8:	4629      	mov	r1, r5
 80093aa:	4620      	mov	r0, r4
 80093ac:	f006 fb02 	bl	800f9b4 <rcl_node_init>
 80093b0:	b930      	cbnz	r0, 80093c0 <rclc_node_init_default+0x60>
 80093b2:	b021      	add	sp, #132	@ 0x84
 80093b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b8:	200b      	movs	r0, #11
 80093ba:	b021      	add	sp, #132	@ 0x84
 80093bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c0:	9003      	str	r0, [sp, #12]
 80093c2:	f000 f8a5 	bl	8009510 <rcutils_reset_error>
 80093c6:	f000 f8a3 	bl	8009510 <rcutils_reset_error>
 80093ca:	9803      	ldr	r0, [sp, #12]
 80093cc:	b021      	add	sp, #132	@ 0x84
 80093ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093d2:	200b      	movs	r0, #11
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop

080093d8 <rclc_publisher_init_default>:
 80093d8:	b368      	cbz	r0, 8009436 <rclc_publisher_init_default+0x5e>
 80093da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093de:	460d      	mov	r5, r1
 80093e0:	b0a0      	sub	sp, #128	@ 0x80
 80093e2:	b321      	cbz	r1, 800942e <rclc_publisher_init_default+0x56>
 80093e4:	4616      	mov	r6, r2
 80093e6:	b312      	cbz	r2, 800942e <rclc_publisher_init_default+0x56>
 80093e8:	461f      	mov	r7, r3
 80093ea:	b303      	cbz	r3, 800942e <rclc_publisher_init_default+0x56>
 80093ec:	4604      	mov	r4, r0
 80093ee:	f7ff fe87 	bl	8009100 <rcl_get_zero_initialized_publisher>
 80093f2:	f10d 0810 	add.w	r8, sp, #16
 80093f6:	6020      	str	r0, [r4, #0]
 80093f8:	4640      	mov	r0, r8
 80093fa:	f7ff ff1f 	bl	800923c <rcl_publisher_get_default_options>
 80093fe:	490f      	ldr	r1, [pc, #60]	@ (800943c <rclc_publisher_init_default+0x64>)
 8009400:	2250      	movs	r2, #80	@ 0x50
 8009402:	4640      	mov	r0, r8
 8009404:	f009 ff25 	bl	8013252 <memcpy>
 8009408:	f8cd 8000 	str.w	r8, [sp]
 800940c:	463b      	mov	r3, r7
 800940e:	4632      	mov	r2, r6
 8009410:	4629      	mov	r1, r5
 8009412:	4620      	mov	r0, r4
 8009414:	f7ff fe7a 	bl	800910c <rcl_publisher_init>
 8009418:	b910      	cbnz	r0, 8009420 <rclc_publisher_init_default+0x48>
 800941a:	b020      	add	sp, #128	@ 0x80
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	9003      	str	r0, [sp, #12]
 8009422:	f000 f875 	bl	8009510 <rcutils_reset_error>
 8009426:	9803      	ldr	r0, [sp, #12]
 8009428:	b020      	add	sp, #128	@ 0x80
 800942a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942e:	200b      	movs	r0, #11
 8009430:	b020      	add	sp, #128	@ 0x80
 8009432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009436:	200b      	movs	r0, #11
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	08014260 	.word	0x08014260

08009440 <__default_zero_allocate>:
 8009440:	f009 b916 	b.w	8012670 <calloc>

08009444 <__default_reallocate>:
 8009444:	f009 bab4 	b.w	80129b0 <realloc>

08009448 <__default_deallocate>:
 8009448:	f009 b990 	b.w	801276c <free>

0800944c <__default_allocate>:
 800944c:	f009 b986 	b.w	801275c <malloc>

08009450 <rcutils_get_zero_initialized_allocator>:
 8009450:	b510      	push	{r4, lr}
 8009452:	4c05      	ldr	r4, [pc, #20]	@ (8009468 <rcutils_get_zero_initialized_allocator+0x18>)
 8009454:	4686      	mov	lr, r0
 8009456:	4684      	mov	ip, r0
 8009458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800945a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f8cc 3000 	str.w	r3, [ip]
 8009464:	4670      	mov	r0, lr
 8009466:	bd10      	pop	{r4, pc}
 8009468:	080142b0 	.word	0x080142b0

0800946c <rcutils_get_default_allocator>:
 800946c:	b510      	push	{r4, lr}
 800946e:	4c05      	ldr	r4, [pc, #20]	@ (8009484 <rcutils_get_default_allocator+0x18>)
 8009470:	4686      	mov	lr, r0
 8009472:	4684      	mov	ip, r0
 8009474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009476:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	f8cc 3000 	str.w	r3, [ip]
 8009480:	4670      	mov	r0, lr
 8009482:	bd10      	pop	{r4, pc}
 8009484:	20000170 	.word	0x20000170

08009488 <rcutils_set_default_allocator>:
 8009488:	b1a8      	cbz	r0, 80094b6 <rcutils_set_default_allocator+0x2e>
 800948a:	6802      	ldr	r2, [r0, #0]
 800948c:	b1a2      	cbz	r2, 80094b8 <rcutils_set_default_allocator+0x30>
 800948e:	6841      	ldr	r1, [r0, #4]
 8009490:	b1a1      	cbz	r1, 80094bc <rcutils_set_default_allocator+0x34>
 8009492:	b410      	push	{r4}
 8009494:	68c4      	ldr	r4, [r0, #12]
 8009496:	b164      	cbz	r4, 80094b2 <rcutils_set_default_allocator+0x2a>
 8009498:	6880      	ldr	r0, [r0, #8]
 800949a:	b138      	cbz	r0, 80094ac <rcutils_set_default_allocator+0x24>
 800949c:	4b08      	ldr	r3, [pc, #32]	@ (80094c0 <rcutils_set_default_allocator+0x38>)
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	2200      	movs	r2, #0
 80094a2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80094a6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80094aa:	2001      	movs	r0, #1
 80094ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	4620      	mov	r0, r4
 80094b4:	e7fa      	b.n	80094ac <rcutils_set_default_allocator+0x24>
 80094b6:	4770      	bx	lr
 80094b8:	4610      	mov	r0, r2
 80094ba:	4770      	bx	lr
 80094bc:	4608      	mov	r0, r1
 80094be:	4770      	bx	lr
 80094c0:	20000170 	.word	0x20000170

080094c4 <rcutils_allocator_is_valid>:
 80094c4:	b158      	cbz	r0, 80094de <rcutils_allocator_is_valid+0x1a>
 80094c6:	6803      	ldr	r3, [r0, #0]
 80094c8:	b143      	cbz	r3, 80094dc <rcutils_allocator_is_valid+0x18>
 80094ca:	6843      	ldr	r3, [r0, #4]
 80094cc:	b133      	cbz	r3, 80094dc <rcutils_allocator_is_valid+0x18>
 80094ce:	68c3      	ldr	r3, [r0, #12]
 80094d0:	b123      	cbz	r3, 80094dc <rcutils_allocator_is_valid+0x18>
 80094d2:	6880      	ldr	r0, [r0, #8]
 80094d4:	3800      	subs	r0, #0
 80094d6:	bf18      	it	ne
 80094d8:	2001      	movne	r0, #1
 80094da:	4770      	bx	lr
 80094dc:	4618      	mov	r0, r3
 80094de:	4770      	bx	lr

080094e0 <rcutils_get_error_string>:
 80094e0:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <rcutils_get_error_string+0x1c>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b13b      	cbz	r3, 80094f6 <rcutils_get_error_string+0x16>
 80094e6:	4b06      	ldr	r3, [pc, #24]	@ (8009500 <rcutils_get_error_string+0x20>)
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	b90a      	cbnz	r2, 80094f0 <rcutils_get_error_string+0x10>
 80094ec:	2201      	movs	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	4b04      	ldr	r3, [pc, #16]	@ (8009504 <rcutils_get_error_string+0x24>)
 80094f2:	7818      	ldrb	r0, [r3, #0]
 80094f4:	4770      	bx	lr
 80094f6:	4b04      	ldr	r3, [pc, #16]	@ (8009508 <rcutils_get_error_string+0x28>)
 80094f8:	7818      	ldrb	r0, [r3, #0]
 80094fa:	4770      	bx	lr
 80094fc:	2000c030 	.word	0x2000c030
 8009500:	2000c035 	.word	0x2000c035
 8009504:	2000c034 	.word	0x2000c034
 8009508:	080142c4 	.word	0x080142c4
 800950c:	00000000 	.word	0x00000000

08009510 <rcutils_reset_error>:
 8009510:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009530 <rcutils_reset_error+0x20>
 8009514:	4a08      	ldr	r2, [pc, #32]	@ (8009538 <rcutils_reset_error+0x28>)
 8009516:	4809      	ldr	r0, [pc, #36]	@ (800953c <rcutils_reset_error+0x2c>)
 8009518:	4909      	ldr	r1, [pc, #36]	@ (8009540 <rcutils_reset_error+0x30>)
 800951a:	2300      	movs	r3, #0
 800951c:	8013      	strh	r3, [r2, #0]
 800951e:	ed82 7b02 	vstr	d7, [r2, #8]
 8009522:	4a08      	ldr	r2, [pc, #32]	@ (8009544 <rcutils_reset_error+0x34>)
 8009524:	7003      	strb	r3, [r0, #0]
 8009526:	700b      	strb	r3, [r1, #0]
 8009528:	7013      	strb	r3, [r2, #0]
 800952a:	4770      	bx	lr
 800952c:	f3af 8000 	nop.w
	...
 8009538:	2000c038 	.word	0x2000c038
 800953c:	2000c035 	.word	0x2000c035
 8009540:	2000c034 	.word	0x2000c034
 8009544:	2000c030 	.word	0x2000c030

08009548 <rmw_get_zero_initialized_init_options>:
 8009548:	b530      	push	{r4, r5, lr}
 800954a:	b08b      	sub	sp, #44	@ 0x2c
 800954c:	466d      	mov	r5, sp
 800954e:	4604      	mov	r4, r0
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f825 	bl	80095a0 <rmw_get_default_security_options>
 8009556:	a802      	add	r0, sp, #8
 8009558:	f007 f9d6 	bl	8010908 <rmw_get_zero_initialized_discovery_options>
 800955c:	2258      	movs	r2, #88	@ 0x58
 800955e:	2100      	movs	r1, #0
 8009560:	4620      	mov	r0, r4
 8009562:	f009 fd45 	bl	8012ff0 <memset>
 8009566:	e895 0003 	ldmia.w	r5, {r0, r1}
 800956a:	f104 0310 	add.w	r3, r4, #16
 800956e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009572:	f10d 0c08 	add.w	ip, sp, #8
 8009576:	e883 0003 	stmia.w	r3, {r0, r1}
 800957a:	60e2      	str	r2, [r4, #12]
 800957c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009580:	f104 0e1c 	add.w	lr, r4, #28
 8009584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009588:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800958c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8009590:	4620      	mov	r0, r4
 8009592:	b00b      	add	sp, #44	@ 0x2c
 8009594:	bd30      	pop	{r4, r5, pc}
 8009596:	bf00      	nop

08009598 <rmw_get_default_publisher_options>:
 8009598:	2200      	movs	r2, #0
 800959a:	6002      	str	r2, [r0, #0]
 800959c:	7102      	strb	r2, [r0, #4]
 800959e:	4770      	bx	lr

080095a0 <rmw_get_default_security_options>:
 80095a0:	2200      	movs	r2, #0
 80095a2:	7002      	strb	r2, [r0, #0]
 80095a4:	6042      	str	r2, [r0, #4]
 80095a6:	4770      	bx	lr

080095a8 <rmw_uros_set_custom_transport>:
 80095a8:	b470      	push	{r4, r5, r6}
 80095aa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 80095ae:	b162      	cbz	r2, 80095ca <rmw_uros_set_custom_transport+0x22>
 80095b0:	b15b      	cbz	r3, 80095ca <rmw_uros_set_custom_transport+0x22>
 80095b2:	b155      	cbz	r5, 80095ca <rmw_uros_set_custom_transport+0x22>
 80095b4:	b14e      	cbz	r6, 80095ca <rmw_uros_set_custom_transport+0x22>
 80095b6:	4c06      	ldr	r4, [pc, #24]	@ (80095d0 <rmw_uros_set_custom_transport+0x28>)
 80095b8:	7020      	strb	r0, [r4, #0]
 80095ba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80095be:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80095c2:	6166      	str	r6, [r4, #20]
 80095c4:	2000      	movs	r0, #0
 80095c6:	bc70      	pop	{r4, r5, r6}
 80095c8:	4770      	bx	lr
 80095ca:	200b      	movs	r0, #11
 80095cc:	bc70      	pop	{r4, r5, r6}
 80095ce:	4770      	bx	lr
 80095d0:	2000c048 	.word	0x2000c048

080095d4 <rmw_init_options_init>:
 80095d4:	b084      	sub	sp, #16
 80095d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d8:	b083      	sub	sp, #12
 80095da:	ad09      	add	r5, sp, #36	@ 0x24
 80095dc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80095e0:	b130      	cbz	r0, 80095f0 <rmw_init_options_init+0x1c>
 80095e2:	4604      	mov	r4, r0
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7ff ff6d 	bl	80094c4 <rcutils_allocator_is_valid>
 80095ea:	b108      	cbz	r0, 80095f0 <rmw_init_options_init+0x1c>
 80095ec:	68a6      	ldr	r6, [r4, #8]
 80095ee:	b12e      	cbz	r6, 80095fc <rmw_init_options_init+0x28>
 80095f0:	200b      	movs	r0, #11
 80095f2:	b003      	add	sp, #12
 80095f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80095f8:	b004      	add	sp, #16
 80095fa:	4770      	bx	lr
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	e9c4 2300 	strd	r2, r3, [r4]
 8009604:	4b22      	ldr	r3, [pc, #136]	@ (8009690 <rmw_init_options_init+0xbc>)
 8009606:	f8df e098 	ldr.w	lr, [pc, #152]	@ 80096a0 <rmw_init_options_init+0xcc>
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60a3      	str	r3, [r4, #8]
 800960e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009610:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8009614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009618:	466f      	mov	r7, sp
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	f8cc 3000 	str.w	r3, [ip]
 8009620:	4638      	mov	r0, r7
 8009622:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8009626:	60e6      	str	r6, [r4, #12]
 8009628:	f7ff ffba 	bl	80095a0 <rmw_get_default_security_options>
 800962c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009630:	f104 0310 	add.w	r3, r4, #16
 8009634:	e883 0003 	stmia.w	r3, {r0, r1}
 8009638:	2203      	movs	r2, #3
 800963a:	4816      	ldr	r0, [pc, #88]	@ (8009694 <rmw_init_options_init+0xc0>)
 800963c:	4916      	ldr	r1, [pc, #88]	@ (8009698 <rmw_init_options_init+0xc4>)
 800963e:	7626      	strb	r6, [r4, #24]
 8009640:	f000 fe70 	bl	800a324 <rmw_uxrce_init_init_options_impl_memory>
 8009644:	4813      	ldr	r0, [pc, #76]	@ (8009694 <rmw_init_options_init+0xc0>)
 8009646:	f007 fbc1 	bl	8010dcc <get_memory>
 800964a:	b1f0      	cbz	r0, 800968a <rmw_init_options_init+0xb6>
 800964c:	4a13      	ldr	r2, [pc, #76]	@ (800969c <rmw_init_options_init+0xc8>)
 800964e:	6883      	ldr	r3, [r0, #8]
 8009650:	6851      	ldr	r1, [r2, #4]
 8009652:	7810      	ldrb	r0, [r2, #0]
 8009654:	6563      	str	r3, [r4, #84]	@ 0x54
 8009656:	7418      	strb	r0, [r3, #16]
 8009658:	6159      	str	r1, [r3, #20]
 800965a:	68d1      	ldr	r1, [r2, #12]
 800965c:	61d9      	str	r1, [r3, #28]
 800965e:	6911      	ldr	r1, [r2, #16]
 8009660:	6219      	str	r1, [r3, #32]
 8009662:	6951      	ldr	r1, [r2, #20]
 8009664:	6892      	ldr	r2, [r2, #8]
 8009666:	619a      	str	r2, [r3, #24]
 8009668:	6259      	str	r1, [r3, #36]	@ 0x24
 800966a:	f004 fec9 	bl	800e400 <uxr_nanos>
 800966e:	f009 f933 	bl	80128d8 <srand>
 8009672:	f009 f95f 	bl	8012934 <rand>
 8009676:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009678:	6298      	str	r0, [r3, #40]	@ 0x28
 800967a:	2800      	cmp	r0, #0
 800967c:	d0f9      	beq.n	8009672 <rmw_init_options_init+0x9e>
 800967e:	2000      	movs	r0, #0
 8009680:	b003      	add	sp, #12
 8009682:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009686:	b004      	add	sp, #16
 8009688:	4770      	bx	lr
 800968a:	2001      	movs	r0, #1
 800968c:	e7b1      	b.n	80095f2 <rmw_init_options_init+0x1e>
 800968e:	bf00      	nop
 8009690:	08014b08 	.word	0x08014b08
 8009694:	2000c234 	.word	0x2000c234
 8009698:	2000c1b0 	.word	0x2000c1b0
 800969c:	2000c048 	.word	0x2000c048
 80096a0:	080142c8 	.word	0x080142c8

080096a4 <rmw_init_options_copy>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	b158      	cbz	r0, 80096c0 <rmw_init_options_copy+0x1c>
 80096a8:	460d      	mov	r5, r1
 80096aa:	b149      	cbz	r1, 80096c0 <rmw_init_options_copy+0x1c>
 80096ac:	4604      	mov	r4, r0
 80096ae:	6880      	ldr	r0, [r0, #8]
 80096b0:	b120      	cbz	r0, 80096bc <rmw_init_options_copy+0x18>
 80096b2:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <rmw_init_options_copy+0x60>)
 80096b4:	6819      	ldr	r1, [r3, #0]
 80096b6:	f7f6 fdb3 	bl	8000220 <strcmp>
 80096ba:	b9e8      	cbnz	r0, 80096f8 <rmw_init_options_copy+0x54>
 80096bc:	68ae      	ldr	r6, [r5, #8]
 80096be:	b116      	cbz	r6, 80096c6 <rmw_init_options_copy+0x22>
 80096c0:	260b      	movs	r6, #11
 80096c2:	4630      	mov	r0, r6
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	2258      	movs	r2, #88	@ 0x58
 80096c8:	4621      	mov	r1, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	f009 fdc1 	bl	8013252 <memcpy>
 80096d0:	480d      	ldr	r0, [pc, #52]	@ (8009708 <rmw_init_options_copy+0x64>)
 80096d2:	f007 fb7b 	bl	8010dcc <get_memory>
 80096d6:	b190      	cbz	r0, 80096fe <rmw_init_options_copy+0x5a>
 80096d8:	6883      	ldr	r3, [r0, #8]
 80096da:	656b      	str	r3, [r5, #84]	@ 0x54
 80096dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096de:	f102 0c10 	add.w	ip, r2, #16
 80096e2:	f103 0510 	add.w	r5, r3, #16
 80096e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096ec:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80096f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80096f4:	4630      	mov	r0, r6
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	260c      	movs	r6, #12
 80096fa:	4630      	mov	r0, r6
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	2601      	movs	r6, #1
 8009700:	e7df      	b.n	80096c2 <rmw_init_options_copy+0x1e>
 8009702:	bf00      	nop
 8009704:	08014b08 	.word	0x08014b08
 8009708:	2000c234 	.word	0x2000c234

0800970c <rmw_init_options_fini>:
 800970c:	b368      	cbz	r0, 800976a <rmw_init_options_fini+0x5e>
 800970e:	b510      	push	{r4, lr}
 8009710:	4604      	mov	r4, r0
 8009712:	b096      	sub	sp, #88	@ 0x58
 8009714:	3040      	adds	r0, #64	@ 0x40
 8009716:	f7ff fed5 	bl	80094c4 <rcutils_allocator_is_valid>
 800971a:	b1f0      	cbz	r0, 800975a <rmw_init_options_fini+0x4e>
 800971c:	68a0      	ldr	r0, [r4, #8]
 800971e:	b120      	cbz	r0, 800972a <rmw_init_options_fini+0x1e>
 8009720:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <rmw_init_options_fini+0x64>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	f7f6 fd7c 	bl	8000220 <strcmp>
 8009728:	b9e8      	cbnz	r0, 8009766 <rmw_init_options_fini+0x5a>
 800972a:	4b12      	ldr	r3, [pc, #72]	@ (8009774 <rmw_init_options_fini+0x68>)
 800972c:	6819      	ldr	r1, [r3, #0]
 800972e:	b1b9      	cbz	r1, 8009760 <rmw_init_options_fini+0x54>
 8009730:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009732:	e001      	b.n	8009738 <rmw_init_options_fini+0x2c>
 8009734:	6849      	ldr	r1, [r1, #4]
 8009736:	b199      	cbz	r1, 8009760 <rmw_init_options_fini+0x54>
 8009738:	688b      	ldr	r3, [r1, #8]
 800973a:	429a      	cmp	r2, r3
 800973c:	d1fa      	bne.n	8009734 <rmw_init_options_fini+0x28>
 800973e:	480d      	ldr	r0, [pc, #52]	@ (8009774 <rmw_init_options_fini+0x68>)
 8009740:	f007 fb54 	bl	8010dec <put_memory>
 8009744:	4668      	mov	r0, sp
 8009746:	f7ff feff 	bl	8009548 <rmw_get_zero_initialized_init_options>
 800974a:	2258      	movs	r2, #88	@ 0x58
 800974c:	4669      	mov	r1, sp
 800974e:	4620      	mov	r0, r4
 8009750:	f009 fd7f 	bl	8013252 <memcpy>
 8009754:	2000      	movs	r0, #0
 8009756:	b016      	add	sp, #88	@ 0x58
 8009758:	bd10      	pop	{r4, pc}
 800975a:	200b      	movs	r0, #11
 800975c:	b016      	add	sp, #88	@ 0x58
 800975e:	bd10      	pop	{r4, pc}
 8009760:	2001      	movs	r0, #1
 8009762:	b016      	add	sp, #88	@ 0x58
 8009764:	bd10      	pop	{r4, pc}
 8009766:	200c      	movs	r0, #12
 8009768:	e7f5      	b.n	8009756 <rmw_init_options_fini+0x4a>
 800976a:	200b      	movs	r0, #11
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	08014b08 	.word	0x08014b08
 8009774:	2000c234 	.word	0x2000c234

08009778 <rmw_init>:
 8009778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800977c:	b083      	sub	sp, #12
 800977e:	2800      	cmp	r0, #0
 8009780:	f000 80d4 	beq.w	800992c <rmw_init+0x1b4>
 8009784:	460e      	mov	r6, r1
 8009786:	2900      	cmp	r1, #0
 8009788:	f000 80d0 	beq.w	800992c <rmw_init+0x1b4>
 800978c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800978e:	4605      	mov	r5, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 80cb 	beq.w	800992c <rmw_init+0x1b4>
 8009796:	4b77      	ldr	r3, [pc, #476]	@ (8009974 <rmw_init+0x1fc>)
 8009798:	6880      	ldr	r0, [r0, #8]
 800979a:	681f      	ldr	r7, [r3, #0]
 800979c:	b128      	cbz	r0, 80097aa <rmw_init+0x32>
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f6 fd3e 	bl	8000220 <strcmp>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f040 80d3 	bne.w	8009950 <rmw_init+0x1d8>
 80097aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097ae:	4c72      	ldr	r4, [pc, #456]	@ (8009978 <rmw_init+0x200>)
 80097b0:	4972      	ldr	r1, [pc, #456]	@ (800997c <rmw_init+0x204>)
 80097b2:	4873      	ldr	r0, [pc, #460]	@ (8009980 <rmw_init+0x208>)
 80097b4:	60b7      	str	r7, [r6, #8]
 80097b6:	e9c6 2300 	strd	r2, r3, [r6]
 80097ba:	68eb      	ldr	r3, [r5, #12]
 80097bc:	66b3      	str	r3, [r6, #104]	@ 0x68
 80097be:	2201      	movs	r2, #1
 80097c0:	f000 fd50 	bl	800a264 <rmw_uxrce_init_session_memory>
 80097c4:	4620      	mov	r0, r4
 80097c6:	496f      	ldr	r1, [pc, #444]	@ (8009984 <rmw_init+0x20c>)
 80097c8:	2204      	movs	r2, #4
 80097ca:	f000 fd8b 	bl	800a2e4 <rmw_uxrce_init_static_input_buffer_memory>
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	486b      	ldr	r0, [pc, #428]	@ (8009980 <rmw_init+0x208>)
 80097d4:	f884 800d 	strb.w	r8, [r4, #13]
 80097d8:	f007 faf8 	bl	8010dcc <get_memory>
 80097dc:	2800      	cmp	r0, #0
 80097de:	f000 80b2 	beq.w	8009946 <rmw_init+0x1ce>
 80097e2:	6884      	ldr	r4, [r0, #8]
 80097e4:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80097e6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80097e8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80097ec:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80097f0:	9101      	str	r1, [sp, #4]
 80097f2:	6a00      	ldr	r0, [r0, #32]
 80097f4:	9000      	str	r0, [sp, #0]
 80097f6:	f104 0910 	add.w	r9, r4, #16
 80097fa:	4661      	mov	r1, ip
 80097fc:	4648      	mov	r0, r9
 80097fe:	f002 fe89 	bl	800c514 <uxr_set_custom_transport_callbacks>
 8009802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009806:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 800980a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800980e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8009812:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8009816:	495c      	ldr	r1, [pc, #368]	@ (8009988 <rmw_init+0x210>)
 8009818:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800981c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8009820:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8009824:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8009828:	4858      	ldr	r0, [pc, #352]	@ (800998c <rmw_init+0x214>)
 800982a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800982e:	2201      	movs	r2, #1
 8009830:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8009832:	f000 fcf7 	bl	800a224 <rmw_uxrce_init_node_memory>
 8009836:	4956      	ldr	r1, [pc, #344]	@ (8009990 <rmw_init+0x218>)
 8009838:	4856      	ldr	r0, [pc, #344]	@ (8009994 <rmw_init+0x21c>)
 800983a:	2205      	movs	r2, #5
 800983c:	f000 fcd2 	bl	800a1e4 <rmw_uxrce_init_subscription_memory>
 8009840:	4955      	ldr	r1, [pc, #340]	@ (8009998 <rmw_init+0x220>)
 8009842:	4856      	ldr	r0, [pc, #344]	@ (800999c <rmw_init+0x224>)
 8009844:	220a      	movs	r2, #10
 8009846:	f000 fcad 	bl	800a1a4 <rmw_uxrce_init_publisher_memory>
 800984a:	4955      	ldr	r1, [pc, #340]	@ (80099a0 <rmw_init+0x228>)
 800984c:	4855      	ldr	r0, [pc, #340]	@ (80099a4 <rmw_init+0x22c>)
 800984e:	2201      	movs	r2, #1
 8009850:	f000 fc68 	bl	800a124 <rmw_uxrce_init_service_memory>
 8009854:	4954      	ldr	r1, [pc, #336]	@ (80099a8 <rmw_init+0x230>)
 8009856:	4855      	ldr	r0, [pc, #340]	@ (80099ac <rmw_init+0x234>)
 8009858:	2201      	movs	r2, #1
 800985a:	f000 fc83 	bl	800a164 <rmw_uxrce_init_client_memory>
 800985e:	4954      	ldr	r1, [pc, #336]	@ (80099b0 <rmw_init+0x238>)
 8009860:	4854      	ldr	r0, [pc, #336]	@ (80099b4 <rmw_init+0x23c>)
 8009862:	220f      	movs	r2, #15
 8009864:	f000 fd1e 	bl	800a2a4 <rmw_uxrce_init_topic_memory>
 8009868:	4953      	ldr	r1, [pc, #332]	@ (80099b8 <rmw_init+0x240>)
 800986a:	4854      	ldr	r0, [pc, #336]	@ (80099bc <rmw_init+0x244>)
 800986c:	2203      	movs	r2, #3
 800986e:	f000 fd59 	bl	800a324 <rmw_uxrce_init_init_options_impl_memory>
 8009872:	4953      	ldr	r1, [pc, #332]	@ (80099c0 <rmw_init+0x248>)
 8009874:	4853      	ldr	r0, [pc, #332]	@ (80099c4 <rmw_init+0x24c>)
 8009876:	2204      	movs	r2, #4
 8009878:	f000 fd74 	bl	800a364 <rmw_uxrce_init_wait_set_memory>
 800987c:	4952      	ldr	r1, [pc, #328]	@ (80099c8 <rmw_init+0x250>)
 800987e:	4853      	ldr	r0, [pc, #332]	@ (80099cc <rmw_init+0x254>)
 8009880:	2204      	movs	r2, #4
 8009882:	f000 fd8f 	bl	800a3a4 <rmw_uxrce_init_guard_condition_memory>
 8009886:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8009888:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800988a:	4642      	mov	r2, r8
 800988c:	f000 fc32 	bl	800a0f4 <rmw_uxrce_transport_init>
 8009890:	4607      	mov	r7, r0
 8009892:	2800      	cmp	r0, #0
 8009894:	d161      	bne.n	800995a <rmw_init+0x1e2>
 8009896:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009898:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800989c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800989e:	4628      	mov	r0, r5
 80098a0:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80098a4:	f003 f838 	bl	800c918 <uxr_init_session>
 80098a8:	4628      	mov	r0, r5
 80098aa:	4949      	ldr	r1, [pc, #292]	@ (80099d0 <rmw_init+0x258>)
 80098ac:	4622      	mov	r2, r4
 80098ae:	f003 f857 	bl	800c960 <uxr_set_topic_callback>
 80098b2:	4628      	mov	r0, r5
 80098b4:	4947      	ldr	r1, [pc, #284]	@ (80099d4 <rmw_init+0x25c>)
 80098b6:	463a      	mov	r2, r7
 80098b8:	f003 f84e 	bl	800c958 <uxr_set_status_callback>
 80098bc:	4628      	mov	r0, r5
 80098be:	4946      	ldr	r1, [pc, #280]	@ (80099d8 <rmw_init+0x260>)
 80098c0:	463a      	mov	r2, r7
 80098c2:	f003 f851 	bl	800c968 <uxr_set_request_callback>
 80098c6:	4628      	mov	r0, r5
 80098c8:	4944      	ldr	r1, [pc, #272]	@ (80099dc <rmw_init+0x264>)
 80098ca:	463a      	mov	r2, r7
 80098cc:	f003 f850 	bl	800c970 <uxr_set_reply_callback>
 80098d0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80098d4:	2304      	movs	r3, #4
 80098d6:	0092      	lsls	r2, r2, #2
 80098d8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80098dc:	4628      	mov	r0, r5
 80098de:	f003 f875 	bl	800c9cc <uxr_create_input_reliable_stream>
 80098e2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80098e6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80098ea:	2304      	movs	r3, #4
 80098ec:	0092      	lsls	r2, r2, #2
 80098ee:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80098f2:	4628      	mov	r0, r5
 80098f4:	f003 f852 	bl	800c99c <uxr_create_output_reliable_stream>
 80098f8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80098fc:	4628      	mov	r0, r5
 80098fe:	f003 f85f 	bl	800c9c0 <uxr_create_input_best_effort_stream>
 8009902:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8009906:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800990a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800990e:	3114      	adds	r1, #20
 8009910:	4628      	mov	r0, r5
 8009912:	f003 f831 	bl	800c978 <uxr_create_output_best_effort_stream>
 8009916:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800991a:	4628      	mov	r0, r5
 800991c:	f003 fd40 	bl	800d3a0 <uxr_create_session>
 8009920:	4605      	mov	r5, r0
 8009922:	b140      	cbz	r0, 8009936 <rmw_init+0x1be>
 8009924:	4638      	mov	r0, r7
 8009926:	b003      	add	sp, #12
 8009928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800992c:	270b      	movs	r7, #11
 800992e:	4638      	mov	r0, r7
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009936:	4648      	mov	r0, r9
 8009938:	f002 fe2e 	bl	800c598 <uxr_close_custom_transport>
 800993c:	4810      	ldr	r0, [pc, #64]	@ (8009980 <rmw_init+0x208>)
 800993e:	4621      	mov	r1, r4
 8009940:	f007 fa54 	bl	8010dec <put_memory>
 8009944:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8009946:	2701      	movs	r7, #1
 8009948:	4638      	mov	r0, r7
 800994a:	b003      	add	sp, #12
 800994c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009950:	270c      	movs	r7, #12
 8009952:	4638      	mov	r0, r7
 8009954:	b003      	add	sp, #12
 8009956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800995a:	4648      	mov	r0, r9
 800995c:	f002 fe1c 	bl	800c598 <uxr_close_custom_transport>
 8009960:	4807      	ldr	r0, [pc, #28]	@ (8009980 <rmw_init+0x208>)
 8009962:	4621      	mov	r1, r4
 8009964:	f007 fa42 	bl	8010dec <put_memory>
 8009968:	4638      	mov	r0, r7
 800996a:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009974:	08014b08 	.word	0x08014b08
 8009978:	2000e348 	.word	0x2000e348
 800997c:	2000f440 	.word	0x2000f440
 8009980:	200109e8 	.word	0x200109e8
 8009984:	2000c248 	.word	0x2000c248
 8009988:	2000f388 	.word	0x2000f388
 800998c:	2000f42c 	.word	0x2000f42c
 8009990:	2000e6c0 	.word	0x2000e6c0
 8009994:	2000eaf8 	.word	0x2000eaf8
 8009998:	2000eb08 	.word	0x2000eb08
 800999c:	2000f378 	.word	0x2000f378
 80099a0:	2000e5e8 	.word	0x2000e5e8
 80099a4:	2000e6b0 	.word	0x2000e6b0
 80099a8:	2000e510 	.word	0x2000e510
 80099ac:	2000e5d8 	.word	0x2000e5d8
 80099b0:	2000e358 	.word	0x2000e358
 80099b4:	2000e4fc 	.word	0x2000e4fc
 80099b8:	2000c1b0 	.word	0x2000c1b0
 80099bc:	2000c234 	.word	0x2000c234
 80099c0:	2000c130 	.word	0x2000c130
 80099c4:	2000c1a0 	.word	0x2000c1a0
 80099c8:	2000c0a0 	.word	0x2000c0a0
 80099cc:	2000c120 	.word	0x2000c120
 80099d0:	08010c05 	.word	0x08010c05
 80099d4:	08010bfd 	.word	0x08010bfd
 80099d8:	08010c9d 	.word	0x08010c9d
 80099dc:	08010d39 	.word	0x08010d39

080099e0 <rmw_context_fini>:
 80099e0:	4b17      	ldr	r3, [pc, #92]	@ (8009a40 <rmw_context_fini+0x60>)
 80099e2:	b570      	push	{r4, r5, r6, lr}
 80099e4:	681c      	ldr	r4, [r3, #0]
 80099e6:	4605      	mov	r5, r0
 80099e8:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80099ea:	b33c      	cbz	r4, 8009a3c <rmw_context_fini+0x5c>
 80099ec:	2600      	movs	r6, #0
 80099ee:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	4282      	cmp	r2, r0
 80099f6:	d018      	beq.n	8009a2a <rmw_context_fini+0x4a>
 80099f8:	2c00      	cmp	r4, #0
 80099fa:	d1f8      	bne.n	80099ee <rmw_context_fini+0xe>
 80099fc:	b188      	cbz	r0, 8009a22 <rmw_context_fini+0x42>
 80099fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009a02:	789b      	ldrb	r3, [r3, #2]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	bf14      	ite	ne
 8009a08:	210a      	movne	r1, #10
 8009a0a:	2100      	moveq	r1, #0
 8009a0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009a10:	f003 fc9e 	bl	800d350 <uxr_delete_session_retries>
 8009a14:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8009a16:	f000 fce5 	bl	800a3e4 <rmw_uxrce_fini_session_memory>
 8009a1a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8009a1c:	3010      	adds	r0, #16
 8009a1e:	f002 fdbb 	bl	800c598 <uxr_close_custom_transport>
 8009a22:	2300      	movs	r3, #0
 8009a24:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8009a26:	4630      	mov	r0, r6
 8009a28:	bd70      	pop	{r4, r5, r6, pc}
 8009a2a:	f103 0018 	add.w	r0, r3, #24
 8009a2e:	f000 f89b 	bl	8009b68 <rmw_destroy_node>
 8009a32:	4606      	mov	r6, r0
 8009a34:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	d1d9      	bne.n	80099ee <rmw_context_fini+0xe>
 8009a3a:	e7df      	b.n	80099fc <rmw_context_fini+0x1c>
 8009a3c:	4626      	mov	r6, r4
 8009a3e:	e7dd      	b.n	80099fc <rmw_context_fini+0x1c>
 8009a40:	2000f42c 	.word	0x2000f42c

08009a44 <create_node>:
 8009a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d063      	beq.n	8009b16 <create_node+0xd2>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	4836      	ldr	r0, [pc, #216]	@ (8009b2c <create_node+0xe8>)
 8009a52:	460f      	mov	r7, r1
 8009a54:	4690      	mov	r8, r2
 8009a56:	461d      	mov	r5, r3
 8009a58:	f007 f9b8 	bl	8010dcc <get_memory>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d05a      	beq.n	8009b16 <create_node+0xd2>
 8009a60:	6884      	ldr	r4, [r0, #8]
 8009a62:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8009a64:	6123      	str	r3, [r4, #16]
 8009a66:	f007 fa19 	bl	8010e9c <rmw_get_implementation_identifier>
 8009a6a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8009a6e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8009a72:	f8c4 9020 	str.w	r9, [r4, #32]
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7f6 fc32 	bl	80002e0 <strlen>
 8009a7c:	1c42      	adds	r2, r0, #1
 8009a7e:	2a3c      	cmp	r2, #60	@ 0x3c
 8009a80:	f104 0518 	add.w	r5, r4, #24
 8009a84:	d844      	bhi.n	8009b10 <create_node+0xcc>
 8009a86:	4648      	mov	r0, r9
 8009a88:	4631      	mov	r1, r6
 8009a8a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8009a8e:	f009 fbe0 	bl	8013252 <memcpy>
 8009a92:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8009a96:	4638      	mov	r0, r7
 8009a98:	f7f6 fc22 	bl	80002e0 <strlen>
 8009a9c:	1c42      	adds	r2, r0, #1
 8009a9e:	2a3c      	cmp	r2, #60	@ 0x3c
 8009aa0:	d836      	bhi.n	8009b10 <create_node+0xcc>
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	4648      	mov	r0, r9
 8009aa6:	f009 fbd4 	bl	8013252 <memcpy>
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8009ab6:	1842      	adds	r2, r0, r1
 8009ab8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8009abc:	f002 fd70 	bl	800c5a0 <uxr_object_id>
 8009ac0:	6160      	str	r0, [r4, #20]
 8009ac2:	783b      	ldrb	r3, [r7, #0]
 8009ac4:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ac6:	d128      	bne.n	8009b1a <create_node+0xd6>
 8009ac8:	787b      	ldrb	r3, [r7, #1]
 8009aca:	bb33      	cbnz	r3, 8009b1a <create_node+0xd6>
 8009acc:	4a18      	ldr	r2, [pc, #96]	@ (8009b30 <create_node+0xec>)
 8009ace:	4819      	ldr	r0, [pc, #100]	@ (8009b34 <create_node+0xf0>)
 8009ad0:	4633      	mov	r3, r6
 8009ad2:	213c      	movs	r1, #60	@ 0x3c
 8009ad4:	f009 f948 	bl	8012d68 <sniprintf>
 8009ad8:	6920      	ldr	r0, [r4, #16]
 8009ada:	4916      	ldr	r1, [pc, #88]	@ (8009b34 <create_node+0xf0>)
 8009adc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8009ae0:	9100      	str	r1, [sp, #0]
 8009ae2:	2106      	movs	r1, #6
 8009ae4:	9101      	str	r1, [sp, #4]
 8009ae6:	6811      	ldr	r1, [r2, #0]
 8009ae8:	6962      	ldr	r2, [r4, #20]
 8009aea:	fa1f f388 	uxth.w	r3, r8
 8009aee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009af2:	f002 fb9b 	bl	800c22c <uxr_buffer_create_participant_bin>
 8009af6:	4602      	mov	r2, r0
 8009af8:	6920      	ldr	r0, [r4, #16]
 8009afa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009afe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009b02:	f000 fd49 	bl	800a598 <run_xrce_session>
 8009b06:	b118      	cbz	r0, 8009b10 <create_node+0xcc>
 8009b08:	4628      	mov	r0, r5
 8009b0a:	b003      	add	sp, #12
 8009b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b10:	4628      	mov	r0, r5
 8009b12:	f000 fc6d 	bl	800a3f0 <rmw_uxrce_fini_node_memory>
 8009b16:	2500      	movs	r5, #0
 8009b18:	e7f6      	b.n	8009b08 <create_node+0xc4>
 8009b1a:	4a07      	ldr	r2, [pc, #28]	@ (8009b38 <create_node+0xf4>)
 8009b1c:	9600      	str	r6, [sp, #0]
 8009b1e:	463b      	mov	r3, r7
 8009b20:	213c      	movs	r1, #60	@ 0x3c
 8009b22:	4804      	ldr	r0, [pc, #16]	@ (8009b34 <create_node+0xf0>)
 8009b24:	f009 f920 	bl	8012d68 <sniprintf>
 8009b28:	e7d6      	b.n	8009ad8 <create_node+0x94>
 8009b2a:	bf00      	nop
 8009b2c:	2000f42c 	.word	0x2000f42c
 8009b30:	080142e4 	.word	0x080142e4
 8009b34:	2000c064 	.word	0x2000c064
 8009b38:	080142cc 	.word	0x080142cc

08009b3c <rmw_create_node>:
 8009b3c:	b191      	cbz	r1, 8009b64 <rmw_create_node+0x28>
 8009b3e:	b410      	push	{r4}
 8009b40:	4614      	mov	r4, r2
 8009b42:	780a      	ldrb	r2, [r1, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	b142      	cbz	r2, 8009b5c <rmw_create_node+0x20>
 8009b4a:	b13c      	cbz	r4, 8009b5c <rmw_create_node+0x20>
 8009b4c:	7822      	ldrb	r2, [r4, #0]
 8009b4e:	b12a      	cbz	r2, 8009b5c <rmw_create_node+0x20>
 8009b50:	4621      	mov	r1, r4
 8009b52:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b58:	f7ff bf74 	b.w	8009a44 <create_node>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	2000      	movs	r0, #0
 8009b66:	4770      	bx	lr

08009b68 <rmw_destroy_node>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	b328      	cbz	r0, 8009bb8 <rmw_destroy_node+0x50>
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	b120      	cbz	r0, 8009b7c <rmw_destroy_node+0x14>
 8009b72:	4b36      	ldr	r3, [pc, #216]	@ (8009c4c <rmw_destroy_node+0xe4>)
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	f7f6 fb53 	bl	8000220 <strcmp>
 8009b7a:	b9e8      	cbnz	r0, 8009bb8 <rmw_destroy_node+0x50>
 8009b7c:	687d      	ldr	r5, [r7, #4]
 8009b7e:	b1dd      	cbz	r5, 8009bb8 <rmw_destroy_node+0x50>
 8009b80:	4b33      	ldr	r3, [pc, #204]	@ (8009c50 <rmw_destroy_node+0xe8>)
 8009b82:	681c      	ldr	r4, [r3, #0]
 8009b84:	2c00      	cmp	r4, #0
 8009b86:	d05f      	beq.n	8009c48 <rmw_destroy_node+0xe0>
 8009b88:	2600      	movs	r6, #0
 8009b8a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009b8e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8009b92:	429d      	cmp	r5, r3
 8009b94:	d013      	beq.n	8009bbe <rmw_destroy_node+0x56>
 8009b96:	2c00      	cmp	r4, #0
 8009b98:	d1f7      	bne.n	8009b8a <rmw_destroy_node+0x22>
 8009b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8009c54 <rmw_destroy_node+0xec>)
 8009b9c:	681c      	ldr	r4, [r3, #0]
 8009b9e:	b1c4      	cbz	r4, 8009bd2 <rmw_destroy_node+0x6a>
 8009ba0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009ba4:	6a0b      	ldr	r3, [r1, #32]
 8009ba6:	429d      	cmp	r5, r3
 8009ba8:	d1f9      	bne.n	8009b9e <rmw_destroy_node+0x36>
 8009baa:	317c      	adds	r1, #124	@ 0x7c
 8009bac:	4638      	mov	r0, r7
 8009bae:	f000 fa41 	bl	800a034 <rmw_destroy_subscription>
 8009bb2:	2801      	cmp	r0, #1
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	d1f2      	bne.n	8009b9e <rmw_destroy_node+0x36>
 8009bb8:	2601      	movs	r6, #1
 8009bba:	4630      	mov	r0, r6
 8009bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbe:	3184      	adds	r1, #132	@ 0x84
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f000 f9a1 	bl	8009f08 <rmw_destroy_publisher>
 8009bc6:	2801      	cmp	r0, #1
 8009bc8:	4606      	mov	r6, r0
 8009bca:	d0f5      	beq.n	8009bb8 <rmw_destroy_node+0x50>
 8009bcc:	2c00      	cmp	r4, #0
 8009bce:	d1dc      	bne.n	8009b8a <rmw_destroy_node+0x22>
 8009bd0:	e7e3      	b.n	8009b9a <rmw_destroy_node+0x32>
 8009bd2:	4b21      	ldr	r3, [pc, #132]	@ (8009c58 <rmw_destroy_node+0xf0>)
 8009bd4:	681c      	ldr	r4, [r3, #0]
 8009bd6:	b16c      	cbz	r4, 8009bf4 <rmw_destroy_node+0x8c>
 8009bd8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009bdc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8009bde:	429d      	cmp	r5, r3
 8009be0:	d1f9      	bne.n	8009bd6 <rmw_destroy_node+0x6e>
 8009be2:	317c      	adds	r1, #124	@ 0x7c
 8009be4:	4638      	mov	r0, r7
 8009be6:	f000 f9e1 	bl	8009fac <rmw_destroy_service>
 8009bea:	2801      	cmp	r0, #1
 8009bec:	4606      	mov	r6, r0
 8009bee:	d0e3      	beq.n	8009bb8 <rmw_destroy_node+0x50>
 8009bf0:	2c00      	cmp	r4, #0
 8009bf2:	d1f1      	bne.n	8009bd8 <rmw_destroy_node+0x70>
 8009bf4:	4b19      	ldr	r3, [pc, #100]	@ (8009c5c <rmw_destroy_node+0xf4>)
 8009bf6:	681c      	ldr	r4, [r3, #0]
 8009bf8:	b16c      	cbz	r4, 8009c16 <rmw_destroy_node+0xae>
 8009bfa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009bfe:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8009c00:	429d      	cmp	r5, r3
 8009c02:	d1f9      	bne.n	8009bf8 <rmw_destroy_node+0x90>
 8009c04:	317c      	adds	r1, #124	@ 0x7c
 8009c06:	4638      	mov	r0, r7
 8009c08:	f007 f904 	bl	8010e14 <rmw_destroy_client>
 8009c0c:	2801      	cmp	r0, #1
 8009c0e:	4606      	mov	r6, r0
 8009c10:	d0d2      	beq.n	8009bb8 <rmw_destroy_node+0x50>
 8009c12:	2c00      	cmp	r4, #0
 8009c14:	d1f1      	bne.n	8009bfa <rmw_destroy_node+0x92>
 8009c16:	6928      	ldr	r0, [r5, #16]
 8009c18:	696a      	ldr	r2, [r5, #20]
 8009c1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009c1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009c22:	6819      	ldr	r1, [r3, #0]
 8009c24:	f002 fab8 	bl	800c198 <uxr_buffer_delete_entity>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	6928      	ldr	r0, [r5, #16]
 8009c2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009c30:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009c34:	f000 fcb0 	bl	800a598 <run_xrce_session>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	bf08      	it	eq
 8009c3c:	2602      	moveq	r6, #2
 8009c3e:	4638      	mov	r0, r7
 8009c40:	f000 fbd6 	bl	800a3f0 <rmw_uxrce_fini_node_memory>
 8009c44:	4630      	mov	r0, r6
 8009c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c48:	4626      	mov	r6, r4
 8009c4a:	e7a6      	b.n	8009b9a <rmw_destroy_node+0x32>
 8009c4c:	08014b08 	.word	0x08014b08
 8009c50:	2000f378 	.word	0x2000f378
 8009c54:	2000eaf8 	.word	0x2000eaf8
 8009c58:	2000e6b0 	.word	0x2000e6b0
 8009c5c:	2000e5d8 	.word	0x2000e5d8

08009c60 <rmw_node_get_graph_guard_condition>:
 8009c60:	6843      	ldr	r3, [r0, #4]
 8009c62:	6918      	ldr	r0, [r3, #16]
 8009c64:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop

08009c6c <flush_session>:
 8009c6c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8009c6e:	f003 ba21 	b.w	800d0b4 <uxr_run_session_until_confirm_delivery>
 8009c72:	bf00      	nop

08009c74 <rmw_publish>:
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d053      	beq.n	8009d20 <rmw_publish+0xac>
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	b08e      	sub	sp, #56	@ 0x38
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	d04b      	beq.n	8009d1a <rmw_publish+0xa6>
 8009c82:	4604      	mov	r4, r0
 8009c84:	6800      	ldr	r0, [r0, #0]
 8009c86:	f000 fd0d 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d045      	beq.n	8009d1a <rmw_publish+0xa6>
 8009c8e:	6866      	ldr	r6, [r4, #4]
 8009c90:	2e00      	cmp	r6, #0
 8009c92:	d042      	beq.n	8009d1a <rmw_publish+0xa6>
 8009c94:	69b4      	ldr	r4, [r6, #24]
 8009c96:	4628      	mov	r0, r5
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	4798      	blx	r3
 8009c9c:	69f3      	ldr	r3, [r6, #28]
 8009c9e:	9005      	str	r0, [sp, #20]
 8009ca0:	b113      	cbz	r3, 8009ca8 <rmw_publish+0x34>
 8009ca2:	a805      	add	r0, sp, #20
 8009ca4:	4798      	blx	r3
 8009ca6:	9805      	ldr	r0, [sp, #20]
 8009ca8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	9000      	str	r0, [sp, #0]
 8009cb0:	6972      	ldr	r2, [r6, #20]
 8009cb2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8009cb4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8009cb8:	ab06      	add	r3, sp, #24
 8009cba:	f004 fc43 	bl	800e544 <uxr_prepare_output_stream>
 8009cbe:	b1d8      	cbz	r0, 8009cf8 <rmw_publish+0x84>
 8009cc0:	68a3      	ldr	r3, [r4, #8]
 8009cc2:	a906      	add	r1, sp, #24
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	4798      	blx	r3
 8009cc8:	6a33      	ldr	r3, [r6, #32]
 8009cca:	4604      	mov	r4, r0
 8009ccc:	b10b      	cbz	r3, 8009cd2 <rmw_publish+0x5e>
 8009cce:	a806      	add	r0, sp, #24
 8009cd0:	4798      	blx	r3
 8009cd2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8009cd6:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	6910      	ldr	r0, [r2, #16]
 8009cde:	d021      	beq.n	8009d24 <rmw_publish+0xb0>
 8009ce0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8009ce2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009ce6:	f003 f9e5 	bl	800d0b4 <uxr_run_session_until_confirm_delivery>
 8009cea:	4004      	ands	r4, r0
 8009cec:	b2e4      	uxtb	r4, r4
 8009cee:	f084 0001 	eor.w	r0, r4, #1
 8009cf2:	b2c0      	uxtb	r0, r0
 8009cf4:	b00e      	add	sp, #56	@ 0x38
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009cfc:	6918      	ldr	r0, [r3, #16]
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <rmw_publish+0xbc>)
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	9b05      	ldr	r3, [sp, #20]
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	9602      	str	r6, [sp, #8]
 8009d08:	6972      	ldr	r2, [r6, #20]
 8009d0a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8009d0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009d10:	ab06      	add	r3, sp, #24
 8009d12:	f004 fc47 	bl	800e5a4 <uxr_prepare_output_stream_fragmented>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d1d2      	bne.n	8009cc0 <rmw_publish+0x4c>
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	b00e      	add	sp, #56	@ 0x38
 8009d1e:	bd70      	pop	{r4, r5, r6, pc}
 8009d20:	2001      	movs	r0, #1
 8009d22:	4770      	bx	lr
 8009d24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009d28:	f002 fe66 	bl	800c9f8 <uxr_flash_output_streams>
 8009d2c:	e7df      	b.n	8009cee <rmw_publish+0x7a>
 8009d2e:	bf00      	nop
 8009d30:	08009c6d 	.word	0x08009c6d

08009d34 <rmw_create_publisher>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	b087      	sub	sp, #28
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	f000 80c9 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d40:	460f      	mov	r7, r1
 8009d42:	2900      	cmp	r1, #0
 8009d44:	f000 80c5 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	6800      	ldr	r0, [r0, #0]
 8009d4c:	4615      	mov	r5, r2
 8009d4e:	461e      	mov	r6, r3
 8009d50:	f000 fca8 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f000 80bc 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d5a:	2d00      	cmp	r5, #0
 8009d5c:	f000 80b9 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d60:	782b      	ldrb	r3, [r5, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80b5 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d68:	2e00      	cmp	r6, #0
 8009d6a:	f000 80b2 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d6e:	485c      	ldr	r0, [pc, #368]	@ (8009ee0 <rmw_create_publisher+0x1ac>)
 8009d70:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009d74:	f007 f82a 	bl	8010dcc <get_memory>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f000 80aa 	beq.w	8009ed2 <rmw_create_publisher+0x19e>
 8009d7e:	6884      	ldr	r4, [r0, #8]
 8009d80:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8009d84:	f007 f88a 	bl	8010e9c <rmw_get_implementation_identifier>
 8009d88:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8009d8c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8009d90:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8009d94:	4628      	mov	r0, r5
 8009d96:	f7f6 faa3 	bl	80002e0 <strlen>
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	283c      	cmp	r0, #60	@ 0x3c
 8009d9e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8009da2:	f200 808f 	bhi.w	8009ec4 <rmw_create_publisher+0x190>
 8009da6:	4a4f      	ldr	r2, [pc, #316]	@ (8009ee4 <rmw_create_publisher+0x1b0>)
 8009da8:	462b      	mov	r3, r5
 8009daa:	213c      	movs	r1, #60	@ 0x3c
 8009dac:	4650      	mov	r0, sl
 8009dae:	f008 ffdb 	bl	8012d68 <sniprintf>
 8009db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009db6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8009db8:	4631      	mov	r1, r6
 8009dba:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8009dbe:	2250      	movs	r2, #80	@ 0x50
 8009dc0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009dc4:	f009 fa45 	bl	8013252 <memcpy>
 8009dc8:	7a33      	ldrb	r3, [r6, #8]
 8009dca:	4947      	ldr	r1, [pc, #284]	@ (8009ee8 <rmw_create_publisher+0x1b4>)
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dd2:	bf0c      	ite	eq
 8009dd4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8009dd8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8009ddc:	67a3      	str	r3, [r4, #120]	@ 0x78
 8009dde:	2300      	movs	r3, #0
 8009de0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009de4:	4638      	mov	r0, r7
 8009de6:	f000 fc6b 	bl	800a6c0 <get_message_typesupport_handle>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d06a      	beq.n	8009ec4 <rmw_create_publisher+0x190>
 8009dee:	6842      	ldr	r2, [r0, #4]
 8009df0:	61a2      	str	r2, [r4, #24]
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	d066      	beq.n	8009ec4 <rmw_create_publisher+0x190>
 8009df6:	4629      	mov	r1, r5
 8009df8:	4633      	mov	r3, r6
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	f007 f854 	bl	8010ea8 <create_topic>
 8009e00:	6260      	str	r0, [r4, #36]	@ 0x24
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d062      	beq.n	8009ecc <rmw_create_publisher+0x198>
 8009e06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e0e:	2103      	movs	r1, #3
 8009e10:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8009e14:	1c42      	adds	r2, r0, #1
 8009e16:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8009e1a:	f002 fbc1 	bl	800c5a0 <uxr_object_id>
 8009e1e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009e22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e26:	6120      	str	r0, [r4, #16]
 8009e28:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8009e2c:	6910      	ldr	r0, [r2, #16]
 8009e2e:	2506      	movs	r5, #6
 8009e30:	9500      	str	r5, [sp, #0]
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009e3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009e3e:	f002 fa5b 	bl	800c2f8 <uxr_buffer_create_publisher_bin>
 8009e42:	4602      	mov	r2, r0
 8009e44:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009e48:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009e4c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009e50:	f000 fba2 	bl	800a598 <run_xrce_session>
 8009e54:	b3b0      	cbz	r0, 8009ec4 <rmw_create_publisher+0x190>
 8009e56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e5e:	2105      	movs	r1, #5
 8009e60:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8009e64:	1c42      	adds	r2, r0, #1
 8009e66:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8009e6a:	f002 fb99 	bl	800c5a0 <uxr_object_id>
 8009e6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009e72:	6160      	str	r0, [r4, #20]
 8009e74:	4631      	mov	r1, r6
 8009e76:	af04      	add	r7, sp, #16
 8009e78:	691e      	ldr	r6, [r3, #16]
 8009e7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e7e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8009e82:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 8009e86:	4638      	mov	r0, r7
 8009e88:	f000 fba6 	bl	800a5d8 <convert_qos_profile>
 8009e8c:	9503      	str	r5, [sp, #12]
 8009e8e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009e92:	9001      	str	r0, [sp, #4]
 8009e94:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009e98:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8009ea2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009ea6:	f8da 1000 	ldr.w	r1, [sl]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f002 fa52 	bl	800c354 <uxr_buffer_create_datawriter_bin>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009eb6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009eba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009ebe:	f000 fb6b 	bl	800a598 <run_xrce_session>
 8009ec2:	b940      	cbnz	r0, 8009ed6 <rmw_create_publisher+0x1a2>
 8009ec4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009ec6:	b108      	cbz	r0, 8009ecc <rmw_create_publisher+0x198>
 8009ec8:	f000 fb02 	bl	800a4d0 <rmw_uxrce_fini_topic_memory>
 8009ecc:	4640      	mov	r0, r8
 8009ece:	f000 faa7 	bl	800a420 <rmw_uxrce_fini_publisher_memory>
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	b007      	add	sp, #28
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	bf00      	nop
 8009ee0:	2000f378 	.word	0x2000f378
 8009ee4:	080142e4 	.word	0x080142e4
 8009ee8:	08014150 	.word	0x08014150

08009eec <rmw_publisher_get_actual_qos>:
 8009eec:	b508      	push	{r3, lr}
 8009eee:	4603      	mov	r3, r0
 8009ef0:	b140      	cbz	r0, 8009f04 <rmw_publisher_get_actual_qos+0x18>
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	b131      	cbz	r1, 8009f04 <rmw_publisher_get_actual_qos+0x18>
 8009ef6:	6859      	ldr	r1, [r3, #4]
 8009ef8:	2250      	movs	r2, #80	@ 0x50
 8009efa:	3128      	adds	r1, #40	@ 0x28
 8009efc:	f009 f9a9 	bl	8013252 <memcpy>
 8009f00:	2000      	movs	r0, #0
 8009f02:	bd08      	pop	{r3, pc}
 8009f04:	200b      	movs	r0, #11
 8009f06:	bd08      	pop	{r3, pc}

08009f08 <rmw_destroy_publisher>:
 8009f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0c:	b128      	cbz	r0, 8009f1a <rmw_destroy_publisher+0x12>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	6800      	ldr	r0, [r0, #0]
 8009f12:	460d      	mov	r5, r1
 8009f14:	f000 fbc6 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8009f18:	b918      	cbnz	r0, 8009f22 <rmw_destroy_publisher+0x1a>
 8009f1a:	2401      	movs	r4, #1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f22:	6863      	ldr	r3, [r4, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0f8      	beq.n	8009f1a <rmw_destroy_publisher+0x12>
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	d0f6      	beq.n	8009f1a <rmw_destroy_publisher+0x12>
 8009f2c:	6828      	ldr	r0, [r5, #0]
 8009f2e:	f000 fbb9 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d0f1      	beq.n	8009f1a <rmw_destroy_publisher+0x12>
 8009f36:	686c      	ldr	r4, [r5, #4]
 8009f38:	2c00      	cmp	r4, #0
 8009f3a:	d0ee      	beq.n	8009f1a <rmw_destroy_publisher+0x12>
 8009f3c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009f3e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8009f42:	f007 f805 	bl	8010f50 <destroy_topic>
 8009f46:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009f4a:	6962      	ldr	r2, [r4, #20]
 8009f4c:	6918      	ldr	r0, [r3, #16]
 8009f4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009f52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009f56:	6819      	ldr	r1, [r3, #0]
 8009f58:	f002 f91e 	bl	800c198 <uxr_buffer_delete_entity>
 8009f5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009f60:	6922      	ldr	r2, [r4, #16]
 8009f62:	4680      	mov	r8, r0
 8009f64:	6918      	ldr	r0, [r3, #16]
 8009f66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009f6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009f6e:	6819      	ldr	r1, [r3, #0]
 8009f70:	f002 f912 	bl	800c198 <uxr_buffer_delete_entity>
 8009f74:	4606      	mov	r6, r0
 8009f76:	6938      	ldr	r0, [r7, #16]
 8009f78:	4642      	mov	r2, r8
 8009f7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009f7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009f82:	f000 fb09 	bl	800a598 <run_xrce_session>
 8009f86:	4604      	mov	r4, r0
 8009f88:	6938      	ldr	r0, [r7, #16]
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009f90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009f94:	f000 fb00 	bl	800a598 <run_xrce_session>
 8009f98:	4004      	ands	r4, r0
 8009f9a:	f084 0401 	eor.w	r4, r4, #1
 8009f9e:	b2e4      	uxtb	r4, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	0064      	lsls	r4, r4, #1
 8009fa4:	f000 fa3c 	bl	800a420 <rmw_uxrce_fini_publisher_memory>
 8009fa8:	e7b8      	b.n	8009f1c <rmw_destroy_publisher+0x14>
 8009faa:	bf00      	nop

08009fac <rmw_destroy_service>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	b128      	cbz	r0, 8009fbc <rmw_destroy_service+0x10>
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	6800      	ldr	r0, [r0, #0]
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	f000 fb75 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8009fba:	b910      	cbnz	r0, 8009fc2 <rmw_destroy_service+0x16>
 8009fbc:	2401      	movs	r4, #1
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0f9      	beq.n	8009fbc <rmw_destroy_service+0x10>
 8009fc8:	2d00      	cmp	r5, #0
 8009fca:	d0f7      	beq.n	8009fbc <rmw_destroy_service+0x10>
 8009fcc:	6828      	ldr	r0, [r5, #0]
 8009fce:	f000 fb69 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d0f2      	beq.n	8009fbc <rmw_destroy_service+0x10>
 8009fd6:	686e      	ldr	r6, [r5, #4]
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	d0ef      	beq.n	8009fbc <rmw_destroy_service+0x10>
 8009fdc:	6864      	ldr	r4, [r4, #4]
 8009fde:	6932      	ldr	r2, [r6, #16]
 8009fe0:	6920      	ldr	r0, [r4, #16]
 8009fe2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009fe6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009fea:	6819      	ldr	r1, [r3, #0]
 8009fec:	f002 fb06 	bl	800c5fc <uxr_buffer_cancel_data>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	6920      	ldr	r0, [r4, #16]
 8009ff4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009ff8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009ffc:	f000 facc 	bl	800a598 <run_xrce_session>
 800a000:	6920      	ldr	r0, [r4, #16]
 800a002:	6932      	ldr	r2, [r6, #16]
 800a004:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a008:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a00c:	6819      	ldr	r1, [r3, #0]
 800a00e:	f002 f8c3 	bl	800c198 <uxr_buffer_delete_entity>
 800a012:	4602      	mov	r2, r0
 800a014:	6920      	ldr	r0, [r4, #16]
 800a016:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a01a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a01e:	f000 fabb 	bl	800a598 <run_xrce_session>
 800a022:	f080 0401 	eor.w	r4, r0, #1
 800a026:	b2e4      	uxtb	r4, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	0064      	lsls	r4, r4, #1
 800a02c:	f000 fa24 	bl	800a478 <rmw_uxrce_fini_service_memory>
 800a030:	e7c5      	b.n	8009fbe <rmw_destroy_service+0x12>
 800a032:	bf00      	nop

0800a034 <rmw_destroy_subscription>:
 800a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a038:	b128      	cbz	r0, 800a046 <rmw_destroy_subscription+0x12>
 800a03a:	4604      	mov	r4, r0
 800a03c:	6800      	ldr	r0, [r0, #0]
 800a03e:	460d      	mov	r5, r1
 800a040:	f000 fb30 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 800a044:	b918      	cbnz	r0, 800a04e <rmw_destroy_subscription+0x1a>
 800a046:	2401      	movs	r4, #1
 800a048:	4620      	mov	r0, r4
 800a04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04e:	6863      	ldr	r3, [r4, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0f8      	beq.n	800a046 <rmw_destroy_subscription+0x12>
 800a054:	2d00      	cmp	r5, #0
 800a056:	d0f6      	beq.n	800a046 <rmw_destroy_subscription+0x12>
 800a058:	6828      	ldr	r0, [r5, #0]
 800a05a:	f000 fb23 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d0f1      	beq.n	800a046 <rmw_destroy_subscription+0x12>
 800a062:	686c      	ldr	r4, [r5, #4]
 800a064:	2c00      	cmp	r4, #0
 800a066:	d0ee      	beq.n	800a046 <rmw_destroy_subscription+0x12>
 800a068:	6a26      	ldr	r6, [r4, #32]
 800a06a:	6962      	ldr	r2, [r4, #20]
 800a06c:	6930      	ldr	r0, [r6, #16]
 800a06e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a072:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a076:	6819      	ldr	r1, [r3, #0]
 800a078:	f002 fac0 	bl	800c5fc <uxr_buffer_cancel_data>
 800a07c:	4602      	mov	r2, r0
 800a07e:	6930      	ldr	r0, [r6, #16]
 800a080:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a084:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a088:	f000 fa86 	bl	800a598 <run_xrce_session>
 800a08c:	69e0      	ldr	r0, [r4, #28]
 800a08e:	f006 ff5f 	bl	8010f50 <destroy_topic>
 800a092:	6a23      	ldr	r3, [r4, #32]
 800a094:	6962      	ldr	r2, [r4, #20]
 800a096:	6918      	ldr	r0, [r3, #16]
 800a098:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a09c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	f002 f879 	bl	800c198 <uxr_buffer_delete_entity>
 800a0a6:	6a23      	ldr	r3, [r4, #32]
 800a0a8:	6922      	ldr	r2, [r4, #16]
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	6918      	ldr	r0, [r3, #16]
 800a0ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a0b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a0b6:	6819      	ldr	r1, [r3, #0]
 800a0b8:	f002 f86e 	bl	800c198 <uxr_buffer_delete_entity>
 800a0bc:	4607      	mov	r7, r0
 800a0be:	6930      	ldr	r0, [r6, #16]
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a0c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a0ca:	f000 fa65 	bl	800a598 <run_xrce_session>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	6930      	ldr	r0, [r6, #16]
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a0d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a0dc:	f000 fa5c 	bl	800a598 <run_xrce_session>
 800a0e0:	4004      	ands	r4, r0
 800a0e2:	f084 0401 	eor.w	r4, r4, #1
 800a0e6:	b2e4      	uxtb	r4, r4
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	0064      	lsls	r4, r4, #1
 800a0ec:	f000 f9ae 	bl	800a44c <rmw_uxrce_fini_subscription_memory>
 800a0f0:	e7aa      	b.n	800a048 <rmw_destroy_subscription+0x14>
 800a0f2:	bf00      	nop

0800a0f4 <rmw_uxrce_transport_init>:
 800a0f4:	b508      	push	{r3, lr}
 800a0f6:	b108      	cbz	r0, 800a0fc <rmw_uxrce_transport_init+0x8>
 800a0f8:	f100 0210 	add.w	r2, r0, #16
 800a0fc:	b139      	cbz	r1, 800a10e <rmw_uxrce_transport_init+0x1a>
 800a0fe:	6949      	ldr	r1, [r1, #20]
 800a100:	4610      	mov	r0, r2
 800a102:	f002 fa15 	bl	800c530 <uxr_init_custom_transport>
 800a106:	f080 0001 	eor.w	r0, r0, #1
 800a10a:	b2c0      	uxtb	r0, r0
 800a10c:	bd08      	pop	{r3, pc}
 800a10e:	4b04      	ldr	r3, [pc, #16]	@ (800a120 <rmw_uxrce_transport_init+0x2c>)
 800a110:	4610      	mov	r0, r2
 800a112:	6859      	ldr	r1, [r3, #4]
 800a114:	f002 fa0c 	bl	800c530 <uxr_init_custom_transport>
 800a118:	f080 0001 	eor.w	r0, r0, #1
 800a11c:	b2c0      	uxtb	r0, r0
 800a11e:	bd08      	pop	{r3, pc}
 800a120:	2000c048 	.word	0x2000c048

0800a124 <rmw_uxrce_init_service_memory>:
 800a124:	b1e2      	cbz	r2, 800a160 <rmw_uxrce_init_service_memory+0x3c>
 800a126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12a:	7b05      	ldrb	r5, [r0, #12]
 800a12c:	4606      	mov	r6, r0
 800a12e:	b9ad      	cbnz	r5, 800a15c <rmw_uxrce_init_service_memory+0x38>
 800a130:	23c8      	movs	r3, #200	@ 0xc8
 800a132:	e9c0 5500 	strd	r5, r5, [r0]
 800a136:	6083      	str	r3, [r0, #8]
 800a138:	f240 1301 	movw	r3, #257	@ 0x101
 800a13c:	4617      	mov	r7, r2
 800a13e:	8183      	strh	r3, [r0, #12]
 800a140:	460c      	mov	r4, r1
 800a142:	46a8      	mov	r8, r5
 800a144:	4621      	mov	r1, r4
 800a146:	4630      	mov	r0, r6
 800a148:	3501      	adds	r5, #1
 800a14a:	f006 fe4f 	bl	8010dec <put_memory>
 800a14e:	42af      	cmp	r7, r5
 800a150:	60a4      	str	r4, [r4, #8]
 800a152:	f884 800c 	strb.w	r8, [r4, #12]
 800a156:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a15a:	d1f3      	bne.n	800a144 <rmw_uxrce_init_service_memory+0x20>
 800a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop

0800a164 <rmw_uxrce_init_client_memory>:
 800a164:	b1e2      	cbz	r2, 800a1a0 <rmw_uxrce_init_client_memory+0x3c>
 800a166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16a:	7b05      	ldrb	r5, [r0, #12]
 800a16c:	4606      	mov	r6, r0
 800a16e:	b9ad      	cbnz	r5, 800a19c <rmw_uxrce_init_client_memory+0x38>
 800a170:	23c8      	movs	r3, #200	@ 0xc8
 800a172:	e9c0 5500 	strd	r5, r5, [r0]
 800a176:	6083      	str	r3, [r0, #8]
 800a178:	f240 1301 	movw	r3, #257	@ 0x101
 800a17c:	4617      	mov	r7, r2
 800a17e:	8183      	strh	r3, [r0, #12]
 800a180:	460c      	mov	r4, r1
 800a182:	46a8      	mov	r8, r5
 800a184:	4621      	mov	r1, r4
 800a186:	4630      	mov	r0, r6
 800a188:	3501      	adds	r5, #1
 800a18a:	f006 fe2f 	bl	8010dec <put_memory>
 800a18e:	42af      	cmp	r7, r5
 800a190:	60a4      	str	r4, [r4, #8]
 800a192:	f884 800c 	strb.w	r8, [r4, #12]
 800a196:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a19a:	d1f3      	bne.n	800a184 <rmw_uxrce_init_client_memory+0x20>
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop

0800a1a4 <rmw_uxrce_init_publisher_memory>:
 800a1a4:	b1e2      	cbz	r2, 800a1e0 <rmw_uxrce_init_publisher_memory+0x3c>
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	7b05      	ldrb	r5, [r0, #12]
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	b9ad      	cbnz	r5, 800a1dc <rmw_uxrce_init_publisher_memory+0x38>
 800a1b0:	23d8      	movs	r3, #216	@ 0xd8
 800a1b2:	e9c0 5500 	strd	r5, r5, [r0]
 800a1b6:	6083      	str	r3, [r0, #8]
 800a1b8:	f240 1301 	movw	r3, #257	@ 0x101
 800a1bc:	4617      	mov	r7, r2
 800a1be:	8183      	strh	r3, [r0, #12]
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	46a8      	mov	r8, r5
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	3501      	adds	r5, #1
 800a1ca:	f006 fe0f 	bl	8010dec <put_memory>
 800a1ce:	42af      	cmp	r7, r5
 800a1d0:	60a4      	str	r4, [r4, #8]
 800a1d2:	f884 800c 	strb.w	r8, [r4, #12]
 800a1d6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a1da:	d1f3      	bne.n	800a1c4 <rmw_uxrce_init_publisher_memory+0x20>
 800a1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop

0800a1e4 <rmw_uxrce_init_subscription_memory>:
 800a1e4:	b1e2      	cbz	r2, 800a220 <rmw_uxrce_init_subscription_memory+0x3c>
 800a1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ea:	7b05      	ldrb	r5, [r0, #12]
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	b9ad      	cbnz	r5, 800a21c <rmw_uxrce_init_subscription_memory+0x38>
 800a1f0:	23d8      	movs	r3, #216	@ 0xd8
 800a1f2:	e9c0 5500 	strd	r5, r5, [r0]
 800a1f6:	6083      	str	r3, [r0, #8]
 800a1f8:	f240 1301 	movw	r3, #257	@ 0x101
 800a1fc:	4617      	mov	r7, r2
 800a1fe:	8183      	strh	r3, [r0, #12]
 800a200:	460c      	mov	r4, r1
 800a202:	46a8      	mov	r8, r5
 800a204:	4621      	mov	r1, r4
 800a206:	4630      	mov	r0, r6
 800a208:	3501      	adds	r5, #1
 800a20a:	f006 fdef 	bl	8010dec <put_memory>
 800a20e:	42af      	cmp	r7, r5
 800a210:	60a4      	str	r4, [r4, #8]
 800a212:	f884 800c 	strb.w	r8, [r4, #12]
 800a216:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a21a:	d1f3      	bne.n	800a204 <rmw_uxrce_init_subscription_memory+0x20>
 800a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop

0800a224 <rmw_uxrce_init_node_memory>:
 800a224:	b1e2      	cbz	r2, 800a260 <rmw_uxrce_init_node_memory+0x3c>
 800a226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	7b05      	ldrb	r5, [r0, #12]
 800a22c:	4606      	mov	r6, r0
 800a22e:	b9ad      	cbnz	r5, 800a25c <rmw_uxrce_init_node_memory+0x38>
 800a230:	23a4      	movs	r3, #164	@ 0xa4
 800a232:	e9c0 5500 	strd	r5, r5, [r0]
 800a236:	6083      	str	r3, [r0, #8]
 800a238:	f240 1301 	movw	r3, #257	@ 0x101
 800a23c:	4617      	mov	r7, r2
 800a23e:	8183      	strh	r3, [r0, #12]
 800a240:	460c      	mov	r4, r1
 800a242:	46a8      	mov	r8, r5
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	3501      	adds	r5, #1
 800a24a:	f006 fdcf 	bl	8010dec <put_memory>
 800a24e:	42af      	cmp	r7, r5
 800a250:	60a4      	str	r4, [r4, #8]
 800a252:	f884 800c 	strb.w	r8, [r4, #12]
 800a256:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a25a:	d1f3      	bne.n	800a244 <rmw_uxrce_init_node_memory+0x20>
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop

0800a264 <rmw_uxrce_init_session_memory>:
 800a264:	b1ea      	cbz	r2, 800a2a2 <rmw_uxrce_init_session_memory+0x3e>
 800a266:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26a:	7b05      	ldrb	r5, [r0, #12]
 800a26c:	4606      	mov	r6, r0
 800a26e:	b9b5      	cbnz	r5, 800a29e <rmw_uxrce_init_session_memory+0x3a>
 800a270:	e9c0 5500 	strd	r5, r5, [r0]
 800a274:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a278:	f240 1301 	movw	r3, #257	@ 0x101
 800a27c:	4617      	mov	r7, r2
 800a27e:	f8c0 8008 	str.w	r8, [r0, #8]
 800a282:	460c      	mov	r4, r1
 800a284:	8183      	strh	r3, [r0, #12]
 800a286:	46a9      	mov	r9, r5
 800a288:	4621      	mov	r1, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	3501      	adds	r5, #1
 800a28e:	f006 fdad 	bl	8010dec <put_memory>
 800a292:	42af      	cmp	r7, r5
 800a294:	60a4      	str	r4, [r4, #8]
 800a296:	f884 900c 	strb.w	r9, [r4, #12]
 800a29a:	4444      	add	r4, r8
 800a29c:	d1f4      	bne.n	800a288 <rmw_uxrce_init_session_memory+0x24>
 800a29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a2:	4770      	bx	lr

0800a2a4 <rmw_uxrce_init_topic_memory>:
 800a2a4:	b1e2      	cbz	r2, 800a2e0 <rmw_uxrce_init_topic_memory+0x3c>
 800a2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2aa:	7b05      	ldrb	r5, [r0, #12]
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	b9ad      	cbnz	r5, 800a2dc <rmw_uxrce_init_topic_memory+0x38>
 800a2b0:	231c      	movs	r3, #28
 800a2b2:	e9c0 5500 	strd	r5, r5, [r0]
 800a2b6:	6083      	str	r3, [r0, #8]
 800a2b8:	f240 1301 	movw	r3, #257	@ 0x101
 800a2bc:	4617      	mov	r7, r2
 800a2be:	8183      	strh	r3, [r0, #12]
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	46a8      	mov	r8, r5
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	f006 fd8f 	bl	8010dec <put_memory>
 800a2ce:	42af      	cmp	r7, r5
 800a2d0:	60a4      	str	r4, [r4, #8]
 800a2d2:	f884 800c 	strb.w	r8, [r4, #12]
 800a2d6:	f104 041c 	add.w	r4, r4, #28
 800a2da:	d1f3      	bne.n	800a2c4 <rmw_uxrce_init_topic_memory+0x20>
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop

0800a2e4 <rmw_uxrce_init_static_input_buffer_memory>:
 800a2e4:	b1ea      	cbz	r2, 800a322 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ea:	7b05      	ldrb	r5, [r0, #12]
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	b9b5      	cbnz	r5, 800a31e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a2f0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800a2f4:	e9c0 5500 	strd	r5, r5, [r0]
 800a2f8:	6083      	str	r3, [r0, #8]
 800a2fa:	f240 1301 	movw	r3, #257	@ 0x101
 800a2fe:	4617      	mov	r7, r2
 800a300:	8183      	strh	r3, [r0, #12]
 800a302:	460c      	mov	r4, r1
 800a304:	46a8      	mov	r8, r5
 800a306:	4621      	mov	r1, r4
 800a308:	4630      	mov	r0, r6
 800a30a:	3501      	adds	r5, #1
 800a30c:	f006 fd6e 	bl	8010dec <put_memory>
 800a310:	42af      	cmp	r7, r5
 800a312:	60a4      	str	r4, [r4, #8]
 800a314:	f884 800c 	strb.w	r8, [r4, #12]
 800a318:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800a31c:	d1f3      	bne.n	800a306 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a322:	4770      	bx	lr

0800a324 <rmw_uxrce_init_init_options_impl_memory>:
 800a324:	b1e2      	cbz	r2, 800a360 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800a326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32a:	7b05      	ldrb	r5, [r0, #12]
 800a32c:	4606      	mov	r6, r0
 800a32e:	b9ad      	cbnz	r5, 800a35c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800a330:	232c      	movs	r3, #44	@ 0x2c
 800a332:	e9c0 5500 	strd	r5, r5, [r0]
 800a336:	6083      	str	r3, [r0, #8]
 800a338:	f240 1301 	movw	r3, #257	@ 0x101
 800a33c:	4617      	mov	r7, r2
 800a33e:	8183      	strh	r3, [r0, #12]
 800a340:	460c      	mov	r4, r1
 800a342:	46a8      	mov	r8, r5
 800a344:	4621      	mov	r1, r4
 800a346:	4630      	mov	r0, r6
 800a348:	3501      	adds	r5, #1
 800a34a:	f006 fd4f 	bl	8010dec <put_memory>
 800a34e:	42af      	cmp	r7, r5
 800a350:	60a4      	str	r4, [r4, #8]
 800a352:	f884 800c 	strb.w	r8, [r4, #12]
 800a356:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800a35a:	d1f3      	bne.n	800a344 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800a35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop

0800a364 <rmw_uxrce_init_wait_set_memory>:
 800a364:	b1e2      	cbz	r2, 800a3a0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800a366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36a:	7b05      	ldrb	r5, [r0, #12]
 800a36c:	4606      	mov	r6, r0
 800a36e:	b9ad      	cbnz	r5, 800a39c <rmw_uxrce_init_wait_set_memory+0x38>
 800a370:	231c      	movs	r3, #28
 800a372:	e9c0 5500 	strd	r5, r5, [r0]
 800a376:	6083      	str	r3, [r0, #8]
 800a378:	f240 1301 	movw	r3, #257	@ 0x101
 800a37c:	4617      	mov	r7, r2
 800a37e:	8183      	strh	r3, [r0, #12]
 800a380:	460c      	mov	r4, r1
 800a382:	46a8      	mov	r8, r5
 800a384:	4621      	mov	r1, r4
 800a386:	4630      	mov	r0, r6
 800a388:	3501      	adds	r5, #1
 800a38a:	f006 fd2f 	bl	8010dec <put_memory>
 800a38e:	42af      	cmp	r7, r5
 800a390:	60a4      	str	r4, [r4, #8]
 800a392:	f884 800c 	strb.w	r8, [r4, #12]
 800a396:	f104 041c 	add.w	r4, r4, #28
 800a39a:	d1f3      	bne.n	800a384 <rmw_uxrce_init_wait_set_memory+0x20>
 800a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop

0800a3a4 <rmw_uxrce_init_guard_condition_memory>:
 800a3a4:	b1e2      	cbz	r2, 800a3e0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	7b05      	ldrb	r5, [r0, #12]
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	b9ad      	cbnz	r5, 800a3dc <rmw_uxrce_init_guard_condition_memory+0x38>
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	e9c0 5500 	strd	r5, r5, [r0]
 800a3b6:	6083      	str	r3, [r0, #8]
 800a3b8:	f240 1301 	movw	r3, #257	@ 0x101
 800a3bc:	4617      	mov	r7, r2
 800a3be:	8183      	strh	r3, [r0, #12]
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	46a8      	mov	r8, r5
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	3501      	adds	r5, #1
 800a3ca:	f006 fd0f 	bl	8010dec <put_memory>
 800a3ce:	42af      	cmp	r7, r5
 800a3d0:	60a4      	str	r4, [r4, #8]
 800a3d2:	f884 800c 	strb.w	r8, [r4, #12]
 800a3d6:	f104 0420 	add.w	r4, r4, #32
 800a3da:	d1f3      	bne.n	800a3c4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop

0800a3e4 <rmw_uxrce_fini_session_memory>:
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	4801      	ldr	r0, [pc, #4]	@ (800a3ec <rmw_uxrce_fini_session_memory+0x8>)
 800a3e8:	f006 bd00 	b.w	8010dec <put_memory>
 800a3ec:	200109e8 	.word	0x200109e8

0800a3f0 <rmw_uxrce_fini_node_memory>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	6800      	ldr	r0, [r0, #0]
 800a3f6:	b128      	cbz	r0, 800a404 <rmw_uxrce_fini_node_memory+0x14>
 800a3f8:	4b07      	ldr	r3, [pc, #28]	@ (800a418 <rmw_uxrce_fini_node_memory+0x28>)
 800a3fa:	6819      	ldr	r1, [r3, #0]
 800a3fc:	f7f5 ff10 	bl	8000220 <strcmp>
 800a400:	b940      	cbnz	r0, 800a414 <rmw_uxrce_fini_node_memory+0x24>
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	6861      	ldr	r1, [r4, #4]
 800a406:	b129      	cbz	r1, 800a414 <rmw_uxrce_fini_node_memory+0x24>
 800a408:	2500      	movs	r5, #0
 800a40a:	4804      	ldr	r0, [pc, #16]	@ (800a41c <rmw_uxrce_fini_node_memory+0x2c>)
 800a40c:	610d      	str	r5, [r1, #16]
 800a40e:	f006 fced 	bl	8010dec <put_memory>
 800a412:	6065      	str	r5, [r4, #4]
 800a414:	bd38      	pop	{r3, r4, r5, pc}
 800a416:	bf00      	nop
 800a418:	08014b08 	.word	0x08014b08
 800a41c:	2000f42c 	.word	0x2000f42c

0800a420 <rmw_uxrce_fini_publisher_memory>:
 800a420:	b510      	push	{r4, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	6800      	ldr	r0, [r0, #0]
 800a426:	b128      	cbz	r0, 800a434 <rmw_uxrce_fini_publisher_memory+0x14>
 800a428:	4b06      	ldr	r3, [pc, #24]	@ (800a444 <rmw_uxrce_fini_publisher_memory+0x24>)
 800a42a:	6819      	ldr	r1, [r3, #0]
 800a42c:	f7f5 fef8 	bl	8000220 <strcmp>
 800a430:	b938      	cbnz	r0, 800a442 <rmw_uxrce_fini_publisher_memory+0x22>
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	6861      	ldr	r1, [r4, #4]
 800a436:	b121      	cbz	r1, 800a442 <rmw_uxrce_fini_publisher_memory+0x22>
 800a438:	4803      	ldr	r0, [pc, #12]	@ (800a448 <rmw_uxrce_fini_publisher_memory+0x28>)
 800a43a:	f006 fcd7 	bl	8010dec <put_memory>
 800a43e:	2300      	movs	r3, #0
 800a440:	6063      	str	r3, [r4, #4]
 800a442:	bd10      	pop	{r4, pc}
 800a444:	08014b08 	.word	0x08014b08
 800a448:	2000f378 	.word	0x2000f378

0800a44c <rmw_uxrce_fini_subscription_memory>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	6800      	ldr	r0, [r0, #0]
 800a452:	b128      	cbz	r0, 800a460 <rmw_uxrce_fini_subscription_memory+0x14>
 800a454:	4b06      	ldr	r3, [pc, #24]	@ (800a470 <rmw_uxrce_fini_subscription_memory+0x24>)
 800a456:	6819      	ldr	r1, [r3, #0]
 800a458:	f7f5 fee2 	bl	8000220 <strcmp>
 800a45c:	b938      	cbnz	r0, 800a46e <rmw_uxrce_fini_subscription_memory+0x22>
 800a45e:	6020      	str	r0, [r4, #0]
 800a460:	6861      	ldr	r1, [r4, #4]
 800a462:	b121      	cbz	r1, 800a46e <rmw_uxrce_fini_subscription_memory+0x22>
 800a464:	4803      	ldr	r0, [pc, #12]	@ (800a474 <rmw_uxrce_fini_subscription_memory+0x28>)
 800a466:	f006 fcc1 	bl	8010dec <put_memory>
 800a46a:	2300      	movs	r3, #0
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	bd10      	pop	{r4, pc}
 800a470:	08014b08 	.word	0x08014b08
 800a474:	2000eaf8 	.word	0x2000eaf8

0800a478 <rmw_uxrce_fini_service_memory>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	4604      	mov	r4, r0
 800a47c:	6800      	ldr	r0, [r0, #0]
 800a47e:	b128      	cbz	r0, 800a48c <rmw_uxrce_fini_service_memory+0x14>
 800a480:	4b06      	ldr	r3, [pc, #24]	@ (800a49c <rmw_uxrce_fini_service_memory+0x24>)
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	f7f5 fecc 	bl	8000220 <strcmp>
 800a488:	b938      	cbnz	r0, 800a49a <rmw_uxrce_fini_service_memory+0x22>
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	6861      	ldr	r1, [r4, #4]
 800a48e:	b121      	cbz	r1, 800a49a <rmw_uxrce_fini_service_memory+0x22>
 800a490:	4803      	ldr	r0, [pc, #12]	@ (800a4a0 <rmw_uxrce_fini_service_memory+0x28>)
 800a492:	f006 fcab 	bl	8010dec <put_memory>
 800a496:	2300      	movs	r3, #0
 800a498:	6063      	str	r3, [r4, #4]
 800a49a:	bd10      	pop	{r4, pc}
 800a49c:	08014b08 	.word	0x08014b08
 800a4a0:	2000e6b0 	.word	0x2000e6b0

0800a4a4 <rmw_uxrce_fini_client_memory>:
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	6800      	ldr	r0, [r0, #0]
 800a4aa:	b128      	cbz	r0, 800a4b8 <rmw_uxrce_fini_client_memory+0x14>
 800a4ac:	4b06      	ldr	r3, [pc, #24]	@ (800a4c8 <rmw_uxrce_fini_client_memory+0x24>)
 800a4ae:	6819      	ldr	r1, [r3, #0]
 800a4b0:	f7f5 feb6 	bl	8000220 <strcmp>
 800a4b4:	b938      	cbnz	r0, 800a4c6 <rmw_uxrce_fini_client_memory+0x22>
 800a4b6:	6020      	str	r0, [r4, #0]
 800a4b8:	6861      	ldr	r1, [r4, #4]
 800a4ba:	b121      	cbz	r1, 800a4c6 <rmw_uxrce_fini_client_memory+0x22>
 800a4bc:	4803      	ldr	r0, [pc, #12]	@ (800a4cc <rmw_uxrce_fini_client_memory+0x28>)
 800a4be:	f006 fc95 	bl	8010dec <put_memory>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6063      	str	r3, [r4, #4]
 800a4c6:	bd10      	pop	{r4, pc}
 800a4c8:	08014b08 	.word	0x08014b08
 800a4cc:	2000e5d8 	.word	0x2000e5d8

0800a4d0 <rmw_uxrce_fini_topic_memory>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	4803      	ldr	r0, [pc, #12]	@ (800a4e4 <rmw_uxrce_fini_topic_memory+0x14>)
 800a4d8:	f006 fc88 	bl	8010dec <put_memory>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	61a3      	str	r3, [r4, #24]
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2000e4fc 	.word	0x2000e4fc

0800a4e8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	b530      	push	{r4, r5, lr}
 800a4ec:	4929      	ldr	r1, [pc, #164]	@ (800a594 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800a4ee:	ac03      	add	r4, sp, #12
 800a4f0:	e884 000c 	stmia.w	r4, {r2, r3}
 800a4f4:	680c      	ldr	r4, [r1, #0]
 800a4f6:	461d      	mov	r5, r3
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	d043      	beq.n	800a586 <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800a4fe:	4620      	mov	r0, r4
 800a500:	2100      	movs	r1, #0
 800a502:	6883      	ldr	r3, [r0, #8]
 800a504:	6840      	ldr	r0, [r0, #4]
 800a506:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800a50a:	429a      	cmp	r2, r3
 800a50c:	bf08      	it	eq
 800a50e:	3101      	addeq	r1, #1
 800a510:	2800      	cmp	r0, #0
 800a512:	d1f6      	bne.n	800a502 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800a514:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d027      	beq.n	800a56c <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800a51c:	d906      	bls.n	800a52c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d004      	beq.n	800a52c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a526:	2000      	movs	r0, #0
 800a528:	b002      	add	sp, #8
 800a52a:	4770      	bx	lr
 800a52c:	b1fd      	cbz	r5, 800a56e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a52e:	428d      	cmp	r5, r1
 800a530:	d81d      	bhi.n	800a56e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a532:	2c00      	cmp	r4, #0
 800a534:	d0f5      	beq.n	800a522 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800a536:	2000      	movs	r0, #0
 800a538:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800a53c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800a540:	e001      	b.n	800a546 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800a542:	6864      	ldr	r4, [r4, #4]
 800a544:	b1dc      	cbz	r4, 800a57e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800a546:	68a3      	ldr	r3, [r4, #8]
 800a548:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800a54c:	428a      	cmp	r2, r1
 800a54e:	d1f8      	bne.n	800a542 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a550:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800a554:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800a558:	4561      	cmp	r1, ip
 800a55a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a55e:	eb73 0e05 	sbcs.w	lr, r3, r5
 800a562:	daee      	bge.n	800a542 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a564:	468c      	mov	ip, r1
 800a566:	461d      	mov	r5, r3
 800a568:	4620      	mov	r0, r4
 800a56a:	e7ea      	b.n	800a542 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a56c:	b92d      	cbnz	r5, 800a57a <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800a56e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a572:	4808      	ldr	r0, [pc, #32]	@ (800a594 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800a574:	b002      	add	sp, #8
 800a576:	f006 bc29 	b.w	8010dcc <get_memory>
 800a57a:	428d      	cmp	r5, r1
 800a57c:	d8f7      	bhi.n	800a56e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a57e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a582:	b002      	add	sp, #8
 800a584:	4770      	bx	lr
 800a586:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d0ef      	beq.n	800a56e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a58e:	d9ee      	bls.n	800a56e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a590:	4621      	mov	r1, r4
 800a592:	e7c4      	b.n	800a51e <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800a594:	2000e348 	.word	0x2000e348

0800a598 <run_xrce_session>:
 800a598:	b500      	push	{lr}
 800a59a:	f891 c002 	ldrb.w	ip, [r1, #2]
 800a59e:	b087      	sub	sp, #28
 800a5a0:	f1bc 0f01 	cmp.w	ip, #1
 800a5a4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800a5a8:	d00f      	beq.n	800a5ca <run_xrce_session+0x32>
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	f10d 020e 	add.w	r2, sp, #14
 800a5b4:	f10d 0317 	add.w	r3, sp, #23
 800a5b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5bc:	f002 fda0 	bl	800d100 <uxr_run_session_until_all_status>
 800a5c0:	b100      	cbz	r0, 800a5c4 <run_xrce_session+0x2c>
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	b007      	add	sp, #28
 800a5c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5ce:	f002 fa13 	bl	800c9f8 <uxr_flash_output_streams>
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	e7f6      	b.n	800a5c4 <run_xrce_session+0x2c>
 800a5d6:	bf00      	nop

0800a5d8 <convert_qos_profile>:
 800a5d8:	780a      	ldrb	r2, [r1, #0]
 800a5da:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a5de:	f1a2 0202 	sub.w	r2, r2, #2
 800a5e2:	fab2 f282 	clz	r2, r2
 800a5e6:	0952      	lsrs	r2, r2, #5
 800a5e8:	7082      	strb	r2, [r0, #2]
 800a5ea:	7a4a      	ldrb	r2, [r1, #9]
 800a5ec:	8889      	ldrh	r1, [r1, #4]
 800a5ee:	8081      	strh	r1, [r0, #4]
 800a5f0:	f1a2 0202 	sub.w	r2, r2, #2
 800a5f4:	f1ac 0c02 	sub.w	ip, ip, #2
 800a5f8:	fab2 f282 	clz	r2, r2
 800a5fc:	fabc fc8c 	clz	ip, ip
 800a600:	0952      	lsrs	r2, r2, #5
 800a602:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a606:	0052      	lsls	r2, r2, #1
 800a608:	f880 c001 	strb.w	ip, [r0, #1]
 800a60c:	7002      	strb	r2, [r0, #0]
 800a60e:	4770      	bx	lr

0800a610 <generate_type_name>:
 800a610:	b530      	push	{r4, r5, lr}
 800a612:	2300      	movs	r3, #0
 800a614:	700b      	strb	r3, [r1, #0]
 800a616:	6803      	ldr	r3, [r0, #0]
 800a618:	b087      	sub	sp, #28
 800a61a:	4614      	mov	r4, r2
 800a61c:	b1d3      	cbz	r3, 800a654 <generate_type_name+0x44>
 800a61e:	4a0f      	ldr	r2, [pc, #60]	@ (800a65c <generate_type_name+0x4c>)
 800a620:	4615      	mov	r5, r2
 800a622:	9203      	str	r2, [sp, #12]
 800a624:	9500      	str	r5, [sp, #0]
 800a626:	6842      	ldr	r2, [r0, #4]
 800a628:	480d      	ldr	r0, [pc, #52]	@ (800a660 <generate_type_name+0x50>)
 800a62a:	9001      	str	r0, [sp, #4]
 800a62c:	4608      	mov	r0, r1
 800a62e:	490d      	ldr	r1, [pc, #52]	@ (800a664 <generate_type_name+0x54>)
 800a630:	9204      	str	r2, [sp, #16]
 800a632:	9105      	str	r1, [sp, #20]
 800a634:	9102      	str	r1, [sp, #8]
 800a636:	4a0c      	ldr	r2, [pc, #48]	@ (800a668 <generate_type_name+0x58>)
 800a638:	4621      	mov	r1, r4
 800a63a:	f008 fb95 	bl	8012d68 <sniprintf>
 800a63e:	2800      	cmp	r0, #0
 800a640:	db05      	blt.n	800a64e <generate_type_name+0x3e>
 800a642:	4284      	cmp	r4, r0
 800a644:	bfd4      	ite	le
 800a646:	2000      	movle	r0, #0
 800a648:	2001      	movgt	r0, #1
 800a64a:	b007      	add	sp, #28
 800a64c:	bd30      	pop	{r4, r5, pc}
 800a64e:	2000      	movs	r0, #0
 800a650:	b007      	add	sp, #28
 800a652:	bd30      	pop	{r4, r5, pc}
 800a654:	4b05      	ldr	r3, [pc, #20]	@ (800a66c <generate_type_name+0x5c>)
 800a656:	4a01      	ldr	r2, [pc, #4]	@ (800a65c <generate_type_name+0x4c>)
 800a658:	461d      	mov	r5, r3
 800a65a:	e7e2      	b.n	800a622 <generate_type_name+0x12>
 800a65c:	080142d4 	.word	0x080142d4
 800a660:	080142ec 	.word	0x080142ec
 800a664:	080142e8 	.word	0x080142e8
 800a668:	080142d8 	.word	0x080142d8
 800a66c:	08014d24 	.word	0x08014d24

0800a670 <generate_topic_name>:
 800a670:	b510      	push	{r4, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	4614      	mov	r4, r2
 800a676:	9000      	str	r0, [sp, #0]
 800a678:	4b08      	ldr	r3, [pc, #32]	@ (800a69c <generate_topic_name+0x2c>)
 800a67a:	4a09      	ldr	r2, [pc, #36]	@ (800a6a0 <generate_topic_name+0x30>)
 800a67c:	4608      	mov	r0, r1
 800a67e:	4621      	mov	r1, r4
 800a680:	f008 fb72 	bl	8012d68 <sniprintf>
 800a684:	2800      	cmp	r0, #0
 800a686:	db05      	blt.n	800a694 <generate_topic_name+0x24>
 800a688:	4284      	cmp	r4, r0
 800a68a:	bfd4      	ite	le
 800a68c:	2000      	movle	r0, #0
 800a68e:	2001      	movgt	r0, #1
 800a690:	b002      	add	sp, #8
 800a692:	bd10      	pop	{r4, pc}
 800a694:	2000      	movs	r0, #0
 800a696:	b002      	add	sp, #8
 800a698:	bd10      	pop	{r4, pc}
 800a69a:	bf00      	nop
 800a69c:	080142f8 	.word	0x080142f8
 800a6a0:	080142f0 	.word	0x080142f0

0800a6a4 <is_uxrce_rmw_identifier_valid>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	b140      	cbz	r0, 800a6bc <is_uxrce_rmw_identifier_valid+0x18>
 800a6aa:	f006 fbf7 	bl	8010e9c <rmw_get_implementation_identifier>
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f7f5 fdb5 	bl	8000220 <strcmp>
 800a6b6:	fab0 f080 	clz	r0, r0
 800a6ba:	0940      	lsrs	r0, r0, #5
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	bf00      	nop

0800a6c0 <get_message_typesupport_handle>:
 800a6c0:	6883      	ldr	r3, [r0, #8]
 800a6c2:	4718      	bx	r3

0800a6c4 <get_message_typesupport_handle_function>:
 800a6c4:	b510      	push	{r4, lr}
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	6800      	ldr	r0, [r0, #0]
 800a6ca:	f7f5 fda9 	bl	8000220 <strcmp>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	bf0c      	ite	eq
 800a6d2:	4620      	moveq	r0, r4
 800a6d4:	2000      	movne	r0, #0
 800a6d6:	bd10      	pop	{r4, pc}

0800a6d8 <rosidl_runtime_c__double__Sequence__init>:
 800a6d8:	b1b0      	cbz	r0, 800a708 <rosidl_runtime_c__double__Sequence__init+0x30>
 800a6da:	b530      	push	{r4, r5, lr}
 800a6dc:	460d      	mov	r5, r1
 800a6de:	b087      	sub	sp, #28
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	b931      	cbnz	r1, 800a6f2 <rosidl_runtime_c__double__Sequence__init+0x1a>
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	e9c4 0500 	strd	r0, r5, [r4]
 800a6ea:	60a5      	str	r5, [r4, #8]
 800a6ec:	2001      	movs	r0, #1
 800a6ee:	b007      	add	sp, #28
 800a6f0:	bd30      	pop	{r4, r5, pc}
 800a6f2:	a801      	add	r0, sp, #4
 800a6f4:	f7fe feba 	bl	800946c <rcutils_get_default_allocator>
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	9905      	ldr	r1, [sp, #20]
 800a6fc:	00e8      	lsls	r0, r5, #3
 800a6fe:	4798      	blx	r3
 800a700:	2800      	cmp	r0, #0
 800a702:	d1f0      	bne.n	800a6e6 <rosidl_runtime_c__double__Sequence__init+0xe>
 800a704:	2000      	movs	r0, #0
 800a706:	e7f2      	b.n	800a6ee <rosidl_runtime_c__double__Sequence__init+0x16>
 800a708:	2000      	movs	r0, #0
 800a70a:	4770      	bx	lr

0800a70c <rosidl_runtime_c__double__Sequence__fini>:
 800a70c:	b188      	cbz	r0, 800a732 <rosidl_runtime_c__double__Sequence__fini+0x26>
 800a70e:	b510      	push	{r4, lr}
 800a710:	6803      	ldr	r3, [r0, #0]
 800a712:	b086      	sub	sp, #24
 800a714:	4604      	mov	r4, r0
 800a716:	b153      	cbz	r3, 800a72e <rosidl_runtime_c__double__Sequence__fini+0x22>
 800a718:	a801      	add	r0, sp, #4
 800a71a:	f7fe fea7 	bl	800946c <rcutils_get_default_allocator>
 800a71e:	9b02      	ldr	r3, [sp, #8]
 800a720:	9905      	ldr	r1, [sp, #20]
 800a722:	6820      	ldr	r0, [r4, #0]
 800a724:	4798      	blx	r3
 800a726:	2300      	movs	r3, #0
 800a728:	e9c4 3300 	strd	r3, r3, [r4]
 800a72c:	60a3      	str	r3, [r4, #8]
 800a72e:	b006      	add	sp, #24
 800a730:	bd10      	pop	{r4, pc}
 800a732:	4770      	bx	lr

0800a734 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	6805      	ldr	r5, [r0, #0]
 800a73a:	4604      	mov	r4, r0
 800a73c:	4628      	mov	r0, r5
 800a73e:	460e      	mov	r6, r1
 800a740:	f7f5 fd6e 	bl	8000220 <strcmp>
 800a744:	b308      	cbz	r0, 800a78a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800a746:	4b12      	ldr	r3, [pc, #72]	@ (800a790 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800a748:	4628      	mov	r0, r5
 800a74a:	6819      	ldr	r1, [r3, #0]
 800a74c:	f7f5 fd68 	bl	8000220 <strcmp>
 800a750:	4605      	mov	r5, r0
 800a752:	b980      	cbnz	r0, 800a776 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800a754:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a758:	f8d8 4000 	ldr.w	r4, [r8]
 800a75c:	b1ac      	cbz	r4, 800a78a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800a75e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800a762:	3f04      	subs	r7, #4
 800a764:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800a768:	4631      	mov	r1, r6
 800a76a:	f7f5 fd59 	bl	8000220 <strcmp>
 800a76e:	b128      	cbz	r0, 800a77c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800a770:	3501      	adds	r5, #1
 800a772:	42a5      	cmp	r5, r4
 800a774:	d1f6      	bne.n	800a764 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800a776:	2000      	movs	r0, #0
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a780:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	4718      	bx	r3
 800a78a:	4620      	mov	r0, r4
 800a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a790:	20000184 	.word	0x20000184

0800a794 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800a794:	f006 bc54 	b.w	8011040 <std_msgs__msg__Header__init>

0800a798 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800a798:	f006 bc72 	b.w	8011080 <std_msgs__msg__Header__fini>

0800a79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800a79c:	b508      	push	{r3, lr}
 800a79e:	f000 f99b 	bl	800aad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800a7a2:	4b06      	ldr	r3, [pc, #24]	@ (800a7bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800a7a4:	4906      	ldr	r1, [pc, #24]	@ (800a7c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	60c8      	str	r0, [r1, #12]
 800a7aa:	b10a      	cbz	r2, 800a7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800a7ac:	4803      	ldr	r0, [pc, #12]	@ (800a7bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800a7ae:	bd08      	pop	{r3, pc}
 800a7b0:	4a04      	ldr	r2, [pc, #16]	@ (800a7c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800a7b2:	4802      	ldr	r0, [pc, #8]	@ (800a7bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	bd08      	pop	{r3, pc}
 800a7ba:	bf00      	nop
 800a7bc:	2000018c 	.word	0x2000018c
 800a7c0:	200001a4 	.word	0x200001a4
 800a7c4:	20000188 	.word	0x20000188

0800a7c8 <_Header__max_serialized_size>:
 800a7c8:	b500      	push	{lr}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	f10d 0007 	add.w	r0, sp, #7
 800a7d4:	f88d 3007 	strb.w	r3, [sp, #7]
 800a7d8:	f000 f9dc 	bl	800ab94 <max_serialized_size_builtin_interfaces__msg__Time>
 800a7dc:	b003      	add	sp, #12
 800a7de:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7e2:	bf00      	nop

0800a7e4 <get_serialized_size_std_msgs__msg__Header>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	b168      	cbz	r0, 800a806 <get_serialized_size_std_msgs__msg__Header+0x22>
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	f000 f982 	bl	800aaf4 <get_serialized_size_builtin_interfaces__msg__Time>
 800a7f0:	1826      	adds	r6, r4, r0
 800a7f2:	2104      	movs	r1, #4
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7fe faa1 	bl	8008d3c <ucdr_alignment>
 800a7fa:	68eb      	ldr	r3, [r5, #12]
 800a7fc:	f1c4 0405 	rsb	r4, r4, #5
 800a800:	441c      	add	r4, r3
 800a802:	4404      	add	r4, r0
 800a804:	19a0      	adds	r0, r4, r6
 800a806:	bd70      	pop	{r4, r5, r6, pc}

0800a808 <_Header__cdr_deserialize>:
 800a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80a:	460c      	mov	r4, r1
 800a80c:	b083      	sub	sp, #12
 800a80e:	b1e1      	cbz	r1, 800a84a <_Header__cdr_deserialize+0x42>
 800a810:	4606      	mov	r6, r0
 800a812:	f000 f9d3 	bl	800abbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800a816:	6843      	ldr	r3, [r0, #4]
 800a818:	4621      	mov	r1, r4
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4630      	mov	r0, r6
 800a81e:	4798      	blx	r3
 800a820:	6927      	ldr	r7, [r4, #16]
 800a822:	68a1      	ldr	r1, [r4, #8]
 800a824:	ab01      	add	r3, sp, #4
 800a826:	463a      	mov	r2, r7
 800a828:	4630      	mov	r0, r6
 800a82a:	f7fe fb05 	bl	8008e38 <ucdr_deserialize_sequence_char>
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	4605      	mov	r5, r0
 800a832:	b920      	cbnz	r0, 800a83e <_Header__cdr_deserialize+0x36>
 800a834:	429f      	cmp	r7, r3
 800a836:	d30c      	bcc.n	800a852 <_Header__cdr_deserialize+0x4a>
 800a838:	4628      	mov	r0, r5
 800a83a:	b003      	add	sp, #12
 800a83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a83e:	b103      	cbz	r3, 800a842 <_Header__cdr_deserialize+0x3a>
 800a840:	3b01      	subs	r3, #1
 800a842:	4628      	mov	r0, r5
 800a844:	60e3      	str	r3, [r4, #12]
 800a846:	b003      	add	sp, #12
 800a848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84a:	460d      	mov	r5, r1
 800a84c:	4628      	mov	r0, r5
 800a84e:	b003      	add	sp, #12
 800a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a852:	2101      	movs	r1, #1
 800a854:	75b0      	strb	r0, [r6, #22]
 800a856:	7571      	strb	r1, [r6, #21]
 800a858:	60e0      	str	r0, [r4, #12]
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7fe fa84 	bl	8008d68 <ucdr_align_to>
 800a860:	4630      	mov	r0, r6
 800a862:	9901      	ldr	r1, [sp, #4]
 800a864:	f7fe fab6 	bl	8008dd4 <ucdr_advance_buffer>
 800a868:	4628      	mov	r0, r5
 800a86a:	b003      	add	sp, #12
 800a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86e:	bf00      	nop

0800a870 <_Header__cdr_serialize>:
 800a870:	b1f8      	cbz	r0, 800a8b2 <_Header__cdr_serialize+0x42>
 800a872:	b570      	push	{r4, r5, r6, lr}
 800a874:	4604      	mov	r4, r0
 800a876:	460d      	mov	r5, r1
 800a878:	f000 f9a0 	bl	800abbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800a87c:	6843      	ldr	r3, [r0, #4]
 800a87e:	4629      	mov	r1, r5
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	4620      	mov	r0, r4
 800a884:	4798      	blx	r3
 800a886:	68a6      	ldr	r6, [r4, #8]
 800a888:	b156      	cbz	r6, 800a8a0 <_Header__cdr_serialize+0x30>
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7f5 fd28 	bl	80002e0 <strlen>
 800a890:	4631      	mov	r1, r6
 800a892:	60e0      	str	r0, [r4, #12]
 800a894:	1c42      	adds	r2, r0, #1
 800a896:	4628      	mov	r0, r5
 800a898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a89c:	f7fe baba 	b.w	8008e14 <ucdr_serialize_sequence_char>
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	60e0      	str	r0, [r4, #12]
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8ae:	f7fe bab1 	b.w	8008e14 <ucdr_serialize_sequence_char>
 800a8b2:	4770      	bx	lr

0800a8b4 <_Header__get_serialized_size>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	b150      	cbz	r0, 800a8d0 <_Header__get_serialized_size+0x1c>
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	f000 f91a 	bl	800aaf4 <get_serialized_size_builtin_interfaces__msg__Time>
 800a8c0:	2104      	movs	r1, #4
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	f7fe fa3a 	bl	8008d3c <ucdr_alignment>
 800a8c8:	68e4      	ldr	r4, [r4, #12]
 800a8ca:	3405      	adds	r4, #5
 800a8cc:	442c      	add	r4, r5
 800a8ce:	4420      	add	r0, r4
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop

0800a8d4 <max_serialized_size_std_msgs__msg__Header>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4604      	mov	r4, r0
 800a8da:	7003      	strb	r3, [r0, #0]
 800a8dc:	f000 f95a 	bl	800ab94 <max_serialized_size_builtin_interfaces__msg__Time>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	7023      	strb	r3, [r4, #0]
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	bf00      	nop

0800a8e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800a8e8:	4800      	ldr	r0, [pc, #0]	@ (800a8ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800a8ea:	4770      	bx	lr
 800a8ec:	2000021c 	.word	0x2000021c

0800a8f0 <actuator_msgs__msg__Actuators__get_type_hash>:
 800a8f0:	4800      	ldr	r0, [pc, #0]	@ (800a8f4 <actuator_msgs__msg__Actuators__get_type_hash+0x4>)
 800a8f2:	4770      	bx	lr
 800a8f4:	20000250 	.word	0x20000250

0800a8f8 <actuator_msgs__msg__Actuators__get_type_description>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	4e0c      	ldr	r6, [pc, #48]	@ (800a92c <actuator_msgs__msg__Actuators__get_type_description+0x34>)
 800a8fc:	7835      	ldrb	r5, [r6, #0]
 800a8fe:	b10d      	cbz	r5, 800a904 <actuator_msgs__msg__Actuators__get_type_description+0xc>
 800a900:	480b      	ldr	r0, [pc, #44]	@ (800a930 <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f8b7 	bl	800aa78 <builtin_interfaces__msg__Time__get_type_description>
 800a90a:	300c      	adds	r0, #12
 800a90c:	c807      	ldmia	r0, {r0, r1, r2}
 800a90e:	4c09      	ldr	r4, [pc, #36]	@ (800a934 <actuator_msgs__msg__Actuators__get_type_description+0x3c>)
 800a910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a914:	4628      	mov	r0, r5
 800a916:	f006 fb4f 	bl	8010fb8 <std_msgs__msg__Header__get_type_description>
 800a91a:	300c      	adds	r0, #12
 800a91c:	c807      	ldmia	r0, {r0, r1, r2}
 800a91e:	3418      	adds	r4, #24
 800a920:	2301      	movs	r3, #1
 800a922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a926:	7033      	strb	r3, [r6, #0]
 800a928:	4801      	ldr	r0, [pc, #4]	@ (800a930 <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	20010a65 	.word	0x20010a65
 800a930:	080143a0 	.word	0x080143a0
 800a934:	20000458 	.word	0x20000458

0800a938 <actuator_msgs__msg__Actuators__get_type_description_sources>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	4e17      	ldr	r6, [pc, #92]	@ (800a998 <actuator_msgs__msg__Actuators__get_type_description_sources+0x60>)
 800a93c:	7837      	ldrb	r7, [r6, #0]
 800a93e:	b10f      	cbz	r7, 800a944 <actuator_msgs__msg__Actuators__get_type_description_sources+0xc>
 800a940:	4816      	ldr	r0, [pc, #88]	@ (800a99c <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 800a942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a944:	4d16      	ldr	r5, [pc, #88]	@ (800a9a0 <actuator_msgs__msg__Actuators__get_type_description_sources+0x68>)
 800a946:	4c17      	ldr	r4, [pc, #92]	@ (800a9a4 <actuator_msgs__msg__Actuators__get_type_description_sources+0x6c>)
 800a948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a94a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a94c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a94e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	4625      	mov	r5, r4
 800a954:	4638      	mov	r0, r7
 800a956:	f845 3b04 	str.w	r3, [r5], #4
 800a95a:	f000 f899 	bl	800aa90 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800a95e:	4684      	mov	ip, r0
 800a960:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a96a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a96c:	4638      	mov	r0, r7
 800a96e:	f8dc 3000 	ldr.w	r3, [ip]
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f006 fb38 	bl	8010fe8 <std_msgs__msg__Header__get_individual_type_description_source>
 800a978:	2301      	movs	r3, #1
 800a97a:	4684      	mov	ip, r0
 800a97c:	7033      	strb	r3, [r6, #0]
 800a97e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a982:	3428      	adds	r4, #40	@ 0x28
 800a984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a986:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a98a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98c:	f8dc 3000 	ldr.w	r3, [ip]
 800a990:	4802      	ldr	r0, [pc, #8]	@ (800a99c <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a996:	bf00      	nop
 800a998:	20010a64 	.word	0x20010a64
 800a99c:	08014370 	.word	0x08014370
 800a9a0:	0801437c 	.word	0x0801437c
 800a9a4:	200109f8 	.word	0x200109f8

0800a9a8 <actuator_msgs__msg__Actuators__init>:
 800a9a8:	b3f0      	cbz	r0, 800aa28 <actuator_msgs__msg__Actuators__init+0x80>
 800a9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	f006 fb47 	bl	8011040 <std_msgs__msg__Header__init>
 800a9b2:	b1a8      	cbz	r0, 800a9e0 <actuator_msgs__msg__Actuators__init+0x38>
 800a9b4:	f104 0514 	add.w	r5, r4, #20
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f7ff fe8c 	bl	800a6d8 <rosidl_runtime_c__double__Sequence__init>
 800a9c0:	b368      	cbz	r0, 800aa1e <actuator_msgs__msg__Actuators__init+0x76>
 800a9c2:	f104 0620 	add.w	r6, r4, #32
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7ff fe85 	bl	800a6d8 <rosidl_runtime_c__double__Sequence__init>
 800a9ce:	b1c0      	cbz	r0, 800aa02 <actuator_msgs__msg__Actuators__init+0x5a>
 800a9d0:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff fe7e 	bl	800a6d8 <rosidl_runtime_c__double__Sequence__init>
 800a9dc:	b330      	cbz	r0, 800aa2c <actuator_msgs__msg__Actuators__init+0x84>
 800a9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f006 fb4d 	bl	8011080 <std_msgs__msg__Header__fini>
 800a9e6:	f104 0014 	add.w	r0, r4, #20
 800a9ea:	f7ff fe8f 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800a9ee:	f104 0020 	add.w	r0, r4, #32
 800a9f2:	f7ff fe8b 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800a9f6:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800a9fa:	f7ff fe87 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa02:	4620      	mov	r0, r4
 800aa04:	f006 fb3c 	bl	8011080 <std_msgs__msg__Header__fini>
 800aa08:	4628      	mov	r0, r5
 800aa0a:	f7ff fe7f 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff fe7c 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa14:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800aa18:	f7ff fe78 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa1c:	e7ef      	b.n	800a9fe <actuator_msgs__msg__Actuators__init+0x56>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f006 fb2e 	bl	8011080 <std_msgs__msg__Header__fini>
 800aa24:	4628      	mov	r0, r5
 800aa26:	e7e0      	b.n	800a9ea <actuator_msgs__msg__Actuators__init+0x42>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	4770      	bx	lr
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f006 fb27 	bl	8011080 <std_msgs__msg__Header__fini>
 800aa32:	4628      	mov	r0, r5
 800aa34:	f7ff fe6a 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff fe67 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff fe64 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa44:	e7db      	b.n	800a9fe <actuator_msgs__msg__Actuators__init+0x56>
 800aa46:	bf00      	nop

0800aa48 <actuator_msgs__msg__Actuators__fini>:
 800aa48:	b188      	cbz	r0, 800aa6e <actuator_msgs__msg__Actuators__fini+0x26>
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	f006 fb17 	bl	8011080 <std_msgs__msg__Header__fini>
 800aa52:	f104 0014 	add.w	r0, r4, #20
 800aa56:	f7ff fe59 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa5a:	f104 0020 	add.w	r0, r4, #32
 800aa5e:	f7ff fe55 	bl	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa62:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800aa66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa6a:	f7ff be4f 	b.w	800a70c <rosidl_runtime_c__double__Sequence__fini>
 800aa6e:	4770      	bx	lr

0800aa70 <builtin_interfaces__msg__Time__get_type_hash>:
 800aa70:	4800      	ldr	r0, [pc, #0]	@ (800aa74 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 800aa72:	4770      	bx	lr
 800aa74:	20000618 	.word	0x20000618

0800aa78 <builtin_interfaces__msg__Time__get_type_description>:
 800aa78:	4b03      	ldr	r3, [pc, #12]	@ (800aa88 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 800aa7a:	781a      	ldrb	r2, [r3, #0]
 800aa7c:	b90a      	cbnz	r2, 800aa82 <builtin_interfaces__msg__Time__get_type_description+0xa>
 800aa7e:	2201      	movs	r2, #1
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	4802      	ldr	r0, [pc, #8]	@ (800aa8c <builtin_interfaces__msg__Time__get_type_description+0x14>)
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20010a8d 	.word	0x20010a8d
 800aa8c:	080143f4 	.word	0x080143f4

0800aa90 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 800aa90:	4800      	ldr	r0, [pc, #0]	@ (800aa94 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 800aa92:	4770      	bx	lr
 800aa94:	080143d0 	.word	0x080143d0

0800aa98 <builtin_interfaces__msg__Time__get_type_description_sources>:
 800aa98:	4b09      	ldr	r3, [pc, #36]	@ (800aac0 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	b96a      	cbnz	r2, 800aaba <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 800aa9e:	b430      	push	{r4, r5}
 800aaa0:	4d08      	ldr	r5, [pc, #32]	@ (800aac4 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 800aaa2:	4c09      	ldr	r4, [pc, #36]	@ (800aac8 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	701a      	strb	r2, [r3, #0]
 800aaa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aaac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	4806      	ldr	r0, [pc, #24]	@ (800aacc <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	bc30      	pop	{r4, r5}
 800aab8:	4770      	bx	lr
 800aaba:	4804      	ldr	r0, [pc, #16]	@ (800aacc <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	20010a8c 	.word	0x20010a8c
 800aac4:	080143d0 	.word	0x080143d0
 800aac8:	20010a68 	.word	0x20010a68
 800aacc:	080143c4 	.word	0x080143c4

0800aad0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800aad0:	f006 bae2 	b.w	8011098 <builtin_interfaces__msg__Time__init>

0800aad4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800aad4:	f006 bae4 	b.w	80110a0 <builtin_interfaces__msg__Time__fini>

0800aad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800aad8:	4b04      	ldr	r3, [pc, #16]	@ (800aaec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	b10a      	cbz	r2, 800aae2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800aade:	4803      	ldr	r0, [pc, #12]	@ (800aaec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800aae0:	4770      	bx	lr
 800aae2:	4a03      	ldr	r2, [pc, #12]	@ (800aaf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800aae4:	4801      	ldr	r0, [pc, #4]	@ (800aaec <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800aae6:	6812      	ldr	r2, [r2, #0]
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	4770      	bx	lr
 800aaec:	200007f0 	.word	0x200007f0
 800aaf0:	20000188 	.word	0x20000188

0800aaf4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800aaf4:	b180      	cbz	r0, 800ab18 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800aaf6:	b538      	push	{r3, r4, r5, lr}
 800aaf8:	460d      	mov	r5, r1
 800aafa:	4628      	mov	r0, r5
 800aafc:	2104      	movs	r1, #4
 800aafe:	f7fe f91d 	bl	8008d3c <ucdr_alignment>
 800ab02:	2104      	movs	r1, #4
 800ab04:	186c      	adds	r4, r5, r1
 800ab06:	4404      	add	r4, r0
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f7fe f917 	bl	8008d3c <ucdr_alignment>
 800ab0e:	f1c5 0504 	rsb	r5, r5, #4
 800ab12:	4405      	add	r5, r0
 800ab14:	1928      	adds	r0, r5, r4
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop

0800ab1c <_Time__cdr_deserialize>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	460c      	mov	r4, r1
 800ab20:	b141      	cbz	r1, 800ab34 <_Time__cdr_deserialize+0x18>
 800ab22:	4605      	mov	r5, r0
 800ab24:	f001 f91a 	bl	800bd5c <ucdr_deserialize_int32_t>
 800ab28:	1d21      	adds	r1, r4, #4
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab30:	f000 bd92 	b.w	800b658 <ucdr_deserialize_uint32_t>
 800ab34:	4608      	mov	r0, r1
 800ab36:	bd38      	pop	{r3, r4, r5, pc}

0800ab38 <_Time__cdr_serialize>:
 800ab38:	b160      	cbz	r0, 800ab54 <_Time__cdr_serialize+0x1c>
 800ab3a:	b538      	push	{r3, r4, r5, lr}
 800ab3c:	460d      	mov	r5, r1
 800ab3e:	4604      	mov	r4, r0
 800ab40:	6801      	ldr	r1, [r0, #0]
 800ab42:	4628      	mov	r0, r5
 800ab44:	f001 f870 	bl	800bc28 <ucdr_serialize_int32_t>
 800ab48:	6861      	ldr	r1, [r4, #4]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab50:	f000 bc58 	b.w	800b404 <ucdr_serialize_uint32_t>
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop

0800ab58 <_Time__get_serialized_size>:
 800ab58:	b160      	cbz	r0, 800ab74 <_Time__get_serialized_size+0x1c>
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	2104      	movs	r1, #4
 800ab5e:	2000      	movs	r0, #0
 800ab60:	f7fe f8ec 	bl	8008d3c <ucdr_alignment>
 800ab64:	1d04      	adds	r4, r0, #4
 800ab66:	2104      	movs	r1, #4
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7fe f8e7 	bl	8008d3c <ucdr_alignment>
 800ab6e:	3004      	adds	r0, #4
 800ab70:	4420      	add	r0, r4
 800ab72:	bd10      	pop	{r4, pc}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop

0800ab78 <_Time__max_serialized_size>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	2104      	movs	r1, #4
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	f7fe f8dd 	bl	8008d3c <ucdr_alignment>
 800ab82:	1d04      	adds	r4, r0, #4
 800ab84:	2104      	movs	r1, #4
 800ab86:	4620      	mov	r0, r4
 800ab88:	f7fe f8d8 	bl	8008d3c <ucdr_alignment>
 800ab8c:	3004      	adds	r0, #4
 800ab8e:	4420      	add	r0, r4
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop

0800ab94 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	460c      	mov	r4, r1
 800ab98:	2301      	movs	r3, #1
 800ab9a:	7003      	strb	r3, [r0, #0]
 800ab9c:	2104      	movs	r1, #4
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f7fe f8cc 	bl	8008d3c <ucdr_alignment>
 800aba4:	2104      	movs	r1, #4
 800aba6:	1863      	adds	r3, r4, r1
 800aba8:	18c5      	adds	r5, r0, r3
 800abaa:	4628      	mov	r0, r5
 800abac:	f7fe f8c6 	bl	8008d3c <ucdr_alignment>
 800abb0:	f1c4 0404 	rsb	r4, r4, #4
 800abb4:	4420      	add	r0, r4
 800abb6:	4428      	add	r0, r5
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	bf00      	nop

0800abbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800abbc:	4800      	ldr	r0, [pc, #0]	@ (800abc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800abbe:	4770      	bx	lr
 800abc0:	20000880 	.word	0x20000880

0800abc4 <ucdr_serialize_endian_array_char>:
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	4619      	mov	r1, r3
 800abca:	461f      	mov	r7, r3
 800abcc:	4605      	mov	r5, r0
 800abce:	4690      	mov	r8, r2
 800abd0:	f7fe f85c 	bl	8008c8c <ucdr_check_buffer_available_for>
 800abd4:	b9e0      	cbnz	r0, 800ac10 <ucdr_serialize_endian_array_char+0x4c>
 800abd6:	463e      	mov	r6, r7
 800abd8:	e009      	b.n	800abee <ucdr_serialize_endian_array_char+0x2a>
 800abda:	68a8      	ldr	r0, [r5, #8]
 800abdc:	f008 fb39 	bl	8013252 <memcpy>
 800abe0:	68ab      	ldr	r3, [r5, #8]
 800abe2:	6928      	ldr	r0, [r5, #16]
 800abe4:	4423      	add	r3, r4
 800abe6:	4420      	add	r0, r4
 800abe8:	1b36      	subs	r6, r6, r4
 800abea:	60ab      	str	r3, [r5, #8]
 800abec:	6128      	str	r0, [r5, #16]
 800abee:	2201      	movs	r2, #1
 800abf0:	4631      	mov	r1, r6
 800abf2:	4628      	mov	r0, r5
 800abf4:	f7fe f8d2 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800abf8:	1bb9      	subs	r1, r7, r6
 800abfa:	4604      	mov	r4, r0
 800abfc:	4602      	mov	r2, r0
 800abfe:	4441      	add	r1, r8
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d1ea      	bne.n	800abda <ucdr_serialize_endian_array_char+0x16>
 800ac04:	2301      	movs	r3, #1
 800ac06:	7da8      	ldrb	r0, [r5, #22]
 800ac08:	756b      	strb	r3, [r5, #21]
 800ac0a:	4058      	eors	r0, r3
 800ac0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac10:	463a      	mov	r2, r7
 800ac12:	68a8      	ldr	r0, [r5, #8]
 800ac14:	4641      	mov	r1, r8
 800ac16:	f008 fb1c 	bl	8013252 <memcpy>
 800ac1a:	68aa      	ldr	r2, [r5, #8]
 800ac1c:	692b      	ldr	r3, [r5, #16]
 800ac1e:	443a      	add	r2, r7
 800ac20:	443b      	add	r3, r7
 800ac22:	60aa      	str	r2, [r5, #8]
 800ac24:	612b      	str	r3, [r5, #16]
 800ac26:	e7ed      	b.n	800ac04 <ucdr_serialize_endian_array_char+0x40>

0800ac28 <ucdr_deserialize_endian_array_char>:
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	461f      	mov	r7, r3
 800ac30:	4605      	mov	r5, r0
 800ac32:	4690      	mov	r8, r2
 800ac34:	f7fe f82a 	bl	8008c8c <ucdr_check_buffer_available_for>
 800ac38:	b9e0      	cbnz	r0, 800ac74 <ucdr_deserialize_endian_array_char+0x4c>
 800ac3a:	463e      	mov	r6, r7
 800ac3c:	e009      	b.n	800ac52 <ucdr_deserialize_endian_array_char+0x2a>
 800ac3e:	68a9      	ldr	r1, [r5, #8]
 800ac40:	f008 fb07 	bl	8013252 <memcpy>
 800ac44:	68aa      	ldr	r2, [r5, #8]
 800ac46:	692b      	ldr	r3, [r5, #16]
 800ac48:	4422      	add	r2, r4
 800ac4a:	4423      	add	r3, r4
 800ac4c:	1b36      	subs	r6, r6, r4
 800ac4e:	60aa      	str	r2, [r5, #8]
 800ac50:	612b      	str	r3, [r5, #16]
 800ac52:	2201      	movs	r2, #1
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7fe f8a0 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	1bb8      	subs	r0, r7, r6
 800ac60:	4622      	mov	r2, r4
 800ac62:	4440      	add	r0, r8
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	d1ea      	bne.n	800ac3e <ucdr_deserialize_endian_array_char+0x16>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	7da8      	ldrb	r0, [r5, #22]
 800ac6c:	756b      	strb	r3, [r5, #21]
 800ac6e:	4058      	eors	r0, r3
 800ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac74:	463a      	mov	r2, r7
 800ac76:	68a9      	ldr	r1, [r5, #8]
 800ac78:	4640      	mov	r0, r8
 800ac7a:	f008 faea 	bl	8013252 <memcpy>
 800ac7e:	68aa      	ldr	r2, [r5, #8]
 800ac80:	692b      	ldr	r3, [r5, #16]
 800ac82:	443a      	add	r2, r7
 800ac84:	443b      	add	r3, r7
 800ac86:	60aa      	str	r2, [r5, #8]
 800ac88:	612b      	str	r3, [r5, #16]
 800ac8a:	e7ed      	b.n	800ac68 <ucdr_deserialize_endian_array_char+0x40>

0800ac8c <ucdr_serialize_array_uint8_t>:
 800ac8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac90:	4688      	mov	r8, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	4617      	mov	r7, r2
 800ac96:	4605      	mov	r5, r0
 800ac98:	f7fd fff8 	bl	8008c8c <ucdr_check_buffer_available_for>
 800ac9c:	b9e0      	cbnz	r0, 800acd8 <ucdr_serialize_array_uint8_t+0x4c>
 800ac9e:	463e      	mov	r6, r7
 800aca0:	e009      	b.n	800acb6 <ucdr_serialize_array_uint8_t+0x2a>
 800aca2:	68a8      	ldr	r0, [r5, #8]
 800aca4:	f008 fad5 	bl	8013252 <memcpy>
 800aca8:	68aa      	ldr	r2, [r5, #8]
 800acaa:	692b      	ldr	r3, [r5, #16]
 800acac:	4422      	add	r2, r4
 800acae:	4423      	add	r3, r4
 800acb0:	1b36      	subs	r6, r6, r4
 800acb2:	60aa      	str	r2, [r5, #8]
 800acb4:	612b      	str	r3, [r5, #16]
 800acb6:	2201      	movs	r2, #1
 800acb8:	4631      	mov	r1, r6
 800acba:	4628      	mov	r0, r5
 800acbc:	f7fe f86e 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800acc0:	1bb9      	subs	r1, r7, r6
 800acc2:	4604      	mov	r4, r0
 800acc4:	4602      	mov	r2, r0
 800acc6:	4441      	add	r1, r8
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1ea      	bne.n	800aca2 <ucdr_serialize_array_uint8_t+0x16>
 800accc:	2301      	movs	r3, #1
 800acce:	7da8      	ldrb	r0, [r5, #22]
 800acd0:	756b      	strb	r3, [r5, #21]
 800acd2:	4058      	eors	r0, r3
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd8:	463a      	mov	r2, r7
 800acda:	68a8      	ldr	r0, [r5, #8]
 800acdc:	4641      	mov	r1, r8
 800acde:	f008 fab8 	bl	8013252 <memcpy>
 800ace2:	68aa      	ldr	r2, [r5, #8]
 800ace4:	692b      	ldr	r3, [r5, #16]
 800ace6:	443a      	add	r2, r7
 800ace8:	443b      	add	r3, r7
 800acea:	60aa      	str	r2, [r5, #8]
 800acec:	612b      	str	r3, [r5, #16]
 800acee:	e7ed      	b.n	800accc <ucdr_serialize_array_uint8_t+0x40>

0800acf0 <ucdr_serialize_endian_array_uint8_t>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	4619      	mov	r1, r3
 800acf6:	461f      	mov	r7, r3
 800acf8:	4605      	mov	r5, r0
 800acfa:	4690      	mov	r8, r2
 800acfc:	f7fd ffc6 	bl	8008c8c <ucdr_check_buffer_available_for>
 800ad00:	b9e0      	cbnz	r0, 800ad3c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800ad02:	463e      	mov	r6, r7
 800ad04:	e009      	b.n	800ad1a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800ad06:	68a8      	ldr	r0, [r5, #8]
 800ad08:	f008 faa3 	bl	8013252 <memcpy>
 800ad0c:	68ab      	ldr	r3, [r5, #8]
 800ad0e:	6928      	ldr	r0, [r5, #16]
 800ad10:	4423      	add	r3, r4
 800ad12:	4420      	add	r0, r4
 800ad14:	1b36      	subs	r6, r6, r4
 800ad16:	60ab      	str	r3, [r5, #8]
 800ad18:	6128      	str	r0, [r5, #16]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f7fe f83c 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800ad24:	1bb9      	subs	r1, r7, r6
 800ad26:	4604      	mov	r4, r0
 800ad28:	4602      	mov	r2, r0
 800ad2a:	4441      	add	r1, r8
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1ea      	bne.n	800ad06 <ucdr_serialize_endian_array_uint8_t+0x16>
 800ad30:	2301      	movs	r3, #1
 800ad32:	7da8      	ldrb	r0, [r5, #22]
 800ad34:	756b      	strb	r3, [r5, #21]
 800ad36:	4058      	eors	r0, r3
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	68a8      	ldr	r0, [r5, #8]
 800ad40:	4641      	mov	r1, r8
 800ad42:	f008 fa86 	bl	8013252 <memcpy>
 800ad46:	68aa      	ldr	r2, [r5, #8]
 800ad48:	692b      	ldr	r3, [r5, #16]
 800ad4a:	443a      	add	r2, r7
 800ad4c:	443b      	add	r3, r7
 800ad4e:	60aa      	str	r2, [r5, #8]
 800ad50:	612b      	str	r3, [r5, #16]
 800ad52:	e7ed      	b.n	800ad30 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ad54 <ucdr_deserialize_array_uint8_t>:
 800ad54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	4688      	mov	r8, r1
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4617      	mov	r7, r2
 800ad5e:	4605      	mov	r5, r0
 800ad60:	f7fd ff94 	bl	8008c8c <ucdr_check_buffer_available_for>
 800ad64:	b9e0      	cbnz	r0, 800ada0 <ucdr_deserialize_array_uint8_t+0x4c>
 800ad66:	463e      	mov	r6, r7
 800ad68:	e009      	b.n	800ad7e <ucdr_deserialize_array_uint8_t+0x2a>
 800ad6a:	68a9      	ldr	r1, [r5, #8]
 800ad6c:	f008 fa71 	bl	8013252 <memcpy>
 800ad70:	68aa      	ldr	r2, [r5, #8]
 800ad72:	692b      	ldr	r3, [r5, #16]
 800ad74:	4422      	add	r2, r4
 800ad76:	4423      	add	r3, r4
 800ad78:	1b36      	subs	r6, r6, r4
 800ad7a:	60aa      	str	r2, [r5, #8]
 800ad7c:	612b      	str	r3, [r5, #16]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	f7fe f80a 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800ad88:	4604      	mov	r4, r0
 800ad8a:	1bb8      	subs	r0, r7, r6
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	4440      	add	r0, r8
 800ad90:	2c00      	cmp	r4, #0
 800ad92:	d1ea      	bne.n	800ad6a <ucdr_deserialize_array_uint8_t+0x16>
 800ad94:	2301      	movs	r3, #1
 800ad96:	7da8      	ldrb	r0, [r5, #22]
 800ad98:	756b      	strb	r3, [r5, #21]
 800ad9a:	4058      	eors	r0, r3
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	463a      	mov	r2, r7
 800ada2:	68a9      	ldr	r1, [r5, #8]
 800ada4:	4640      	mov	r0, r8
 800ada6:	f008 fa54 	bl	8013252 <memcpy>
 800adaa:	68aa      	ldr	r2, [r5, #8]
 800adac:	692b      	ldr	r3, [r5, #16]
 800adae:	443a      	add	r2, r7
 800adb0:	443b      	add	r3, r7
 800adb2:	60aa      	str	r2, [r5, #8]
 800adb4:	612b      	str	r3, [r5, #16]
 800adb6:	e7ed      	b.n	800ad94 <ucdr_deserialize_array_uint8_t+0x40>

0800adb8 <ucdr_deserialize_endian_array_uint8_t>:
 800adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adbc:	4619      	mov	r1, r3
 800adbe:	461f      	mov	r7, r3
 800adc0:	4605      	mov	r5, r0
 800adc2:	4690      	mov	r8, r2
 800adc4:	f7fd ff62 	bl	8008c8c <ucdr_check_buffer_available_for>
 800adc8:	b9e0      	cbnz	r0, 800ae04 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800adca:	463e      	mov	r6, r7
 800adcc:	e009      	b.n	800ade2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800adce:	68a9      	ldr	r1, [r5, #8]
 800add0:	f008 fa3f 	bl	8013252 <memcpy>
 800add4:	68aa      	ldr	r2, [r5, #8]
 800add6:	692b      	ldr	r3, [r5, #16]
 800add8:	4422      	add	r2, r4
 800adda:	4423      	add	r3, r4
 800addc:	1b36      	subs	r6, r6, r4
 800adde:	60aa      	str	r2, [r5, #8]
 800ade0:	612b      	str	r3, [r5, #16]
 800ade2:	2201      	movs	r2, #1
 800ade4:	4631      	mov	r1, r6
 800ade6:	4628      	mov	r0, r5
 800ade8:	f7fd ffd8 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800adec:	4604      	mov	r4, r0
 800adee:	1bb8      	subs	r0, r7, r6
 800adf0:	4622      	mov	r2, r4
 800adf2:	4440      	add	r0, r8
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	d1ea      	bne.n	800adce <ucdr_deserialize_endian_array_uint8_t+0x16>
 800adf8:	2301      	movs	r3, #1
 800adfa:	7da8      	ldrb	r0, [r5, #22]
 800adfc:	756b      	strb	r3, [r5, #21]
 800adfe:	4058      	eors	r0, r3
 800ae00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae04:	463a      	mov	r2, r7
 800ae06:	68a9      	ldr	r1, [r5, #8]
 800ae08:	4640      	mov	r0, r8
 800ae0a:	f008 fa22 	bl	8013252 <memcpy>
 800ae0e:	68aa      	ldr	r2, [r5, #8]
 800ae10:	692b      	ldr	r3, [r5, #16]
 800ae12:	443a      	add	r2, r7
 800ae14:	443b      	add	r3, r7
 800ae16:	60aa      	str	r2, [r5, #8]
 800ae18:	612b      	str	r3, [r5, #16]
 800ae1a:	e7ed      	b.n	800adf8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800ae1c <ucdr_serialize_endian_array_double>:
 800ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae20:	4688      	mov	r8, r1
 800ae22:	2108      	movs	r1, #8
 800ae24:	4604      	mov	r4, r0
 800ae26:	4616      	mov	r6, r2
 800ae28:	461f      	mov	r7, r3
 800ae2a:	f7fd ff8f 	bl	8008d4c <ucdr_buffer_alignment>
 800ae2e:	4601      	mov	r1, r0
 800ae30:	4620      	mov	r0, r4
 800ae32:	7d65      	ldrb	r5, [r4, #21]
 800ae34:	f7fd ffce 	bl	8008dd4 <ucdr_advance_buffer>
 800ae38:	f1b8 0f01 	cmp.w	r8, #1
 800ae3c:	7565      	strb	r5, [r4, #21]
 800ae3e:	d00f      	beq.n	800ae60 <ucdr_serialize_endian_array_double+0x44>
 800ae40:	2500      	movs	r5, #0
 800ae42:	b147      	cbz	r7, 800ae56 <ucdr_serialize_endian_array_double+0x3a>
 800ae44:	ecb6 0b02 	vldmia	r6!, {d0}
 800ae48:	4641      	mov	r1, r8
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	f001 f813 	bl	800be78 <ucdr_serialize_endian_double>
 800ae52:	42af      	cmp	r7, r5
 800ae54:	d1f6      	bne.n	800ae44 <ucdr_serialize_endian_array_double+0x28>
 800ae56:	7da0      	ldrb	r0, [r4, #22]
 800ae58:	f080 0001 	eor.w	r0, r0, #1
 800ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae60:	00ff      	lsls	r7, r7, #3
 800ae62:	4639      	mov	r1, r7
 800ae64:	4620      	mov	r0, r4
 800ae66:	f7fd ff11 	bl	8008c8c <ucdr_check_buffer_available_for>
 800ae6a:	b9f8      	cbnz	r0, 800aeac <ucdr_serialize_endian_array_double+0x90>
 800ae6c:	46b8      	mov	r8, r7
 800ae6e:	e00a      	b.n	800ae86 <ucdr_serialize_endian_array_double+0x6a>
 800ae70:	68a0      	ldr	r0, [r4, #8]
 800ae72:	f008 f9ee 	bl	8013252 <memcpy>
 800ae76:	68a2      	ldr	r2, [r4, #8]
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	442a      	add	r2, r5
 800ae7c:	442b      	add	r3, r5
 800ae7e:	eba8 0805 	sub.w	r8, r8, r5
 800ae82:	60a2      	str	r2, [r4, #8]
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	2208      	movs	r2, #8
 800ae88:	4641      	mov	r1, r8
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f7fd ff86 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800ae90:	eba7 0108 	sub.w	r1, r7, r8
 800ae94:	4605      	mov	r5, r0
 800ae96:	4602      	mov	r2, r0
 800ae98:	4431      	add	r1, r6
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d1e8      	bne.n	800ae70 <ucdr_serialize_endian_array_double+0x54>
 800ae9e:	7da0      	ldrb	r0, [r4, #22]
 800aea0:	2308      	movs	r3, #8
 800aea2:	7563      	strb	r3, [r4, #21]
 800aea4:	f080 0001 	eor.w	r0, r0, #1
 800aea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeac:	463a      	mov	r2, r7
 800aeae:	68a0      	ldr	r0, [r4, #8]
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	f008 f9ce 	bl	8013252 <memcpy>
 800aeb6:	68a2      	ldr	r2, [r4, #8]
 800aeb8:	6923      	ldr	r3, [r4, #16]
 800aeba:	443a      	add	r2, r7
 800aebc:	443b      	add	r3, r7
 800aebe:	60a2      	str	r2, [r4, #8]
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	e7ec      	b.n	800ae9e <ucdr_serialize_endian_array_double+0x82>

0800aec4 <ucdr_deserialize_endian_array_double>:
 800aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec8:	4688      	mov	r8, r1
 800aeca:	2108      	movs	r1, #8
 800aecc:	4605      	mov	r5, r0
 800aece:	4614      	mov	r4, r2
 800aed0:	461f      	mov	r7, r3
 800aed2:	f7fd ff3b 	bl	8008d4c <ucdr_buffer_alignment>
 800aed6:	4601      	mov	r1, r0
 800aed8:	4628      	mov	r0, r5
 800aeda:	7d6e      	ldrb	r6, [r5, #21]
 800aedc:	f7fd ff7a 	bl	8008dd4 <ucdr_advance_buffer>
 800aee0:	f1b8 0f01 	cmp.w	r8, #1
 800aee4:	756e      	strb	r6, [r5, #21]
 800aee6:	d010      	beq.n	800af0a <ucdr_deserialize_endian_array_double+0x46>
 800aee8:	2600      	movs	r6, #0
 800aeea:	b14f      	cbz	r7, 800af00 <ucdr_deserialize_endian_array_double+0x3c>
 800aeec:	4622      	mov	r2, r4
 800aeee:	4641      	mov	r1, r8
 800aef0:	4628      	mov	r0, r5
 800aef2:	3601      	adds	r6, #1
 800aef4:	f001 f888 	bl	800c008 <ucdr_deserialize_endian_double>
 800aef8:	42b7      	cmp	r7, r6
 800aefa:	f104 0408 	add.w	r4, r4, #8
 800aefe:	d1f5      	bne.n	800aeec <ucdr_deserialize_endian_array_double+0x28>
 800af00:	7da8      	ldrb	r0, [r5, #22]
 800af02:	f080 0001 	eor.w	r0, r0, #1
 800af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0a:	00ff      	lsls	r7, r7, #3
 800af0c:	4639      	mov	r1, r7
 800af0e:	4628      	mov	r0, r5
 800af10:	f7fd febc 	bl	8008c8c <ucdr_check_buffer_available_for>
 800af14:	b9f8      	cbnz	r0, 800af56 <ucdr_deserialize_endian_array_double+0x92>
 800af16:	46b8      	mov	r8, r7
 800af18:	e00a      	b.n	800af30 <ucdr_deserialize_endian_array_double+0x6c>
 800af1a:	68a9      	ldr	r1, [r5, #8]
 800af1c:	f008 f999 	bl	8013252 <memcpy>
 800af20:	68aa      	ldr	r2, [r5, #8]
 800af22:	692b      	ldr	r3, [r5, #16]
 800af24:	4432      	add	r2, r6
 800af26:	4433      	add	r3, r6
 800af28:	eba8 0806 	sub.w	r8, r8, r6
 800af2c:	60aa      	str	r2, [r5, #8]
 800af2e:	612b      	str	r3, [r5, #16]
 800af30:	2208      	movs	r2, #8
 800af32:	4641      	mov	r1, r8
 800af34:	4628      	mov	r0, r5
 800af36:	f7fd ff31 	bl	8008d9c <ucdr_check_final_buffer_behavior_array>
 800af3a:	4606      	mov	r6, r0
 800af3c:	eba7 0008 	sub.w	r0, r7, r8
 800af40:	4632      	mov	r2, r6
 800af42:	4420      	add	r0, r4
 800af44:	2e00      	cmp	r6, #0
 800af46:	d1e8      	bne.n	800af1a <ucdr_deserialize_endian_array_double+0x56>
 800af48:	7da8      	ldrb	r0, [r5, #22]
 800af4a:	2308      	movs	r3, #8
 800af4c:	756b      	strb	r3, [r5, #21]
 800af4e:	f080 0001 	eor.w	r0, r0, #1
 800af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af56:	463a      	mov	r2, r7
 800af58:	68a9      	ldr	r1, [r5, #8]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f008 f979 	bl	8013252 <memcpy>
 800af60:	68aa      	ldr	r2, [r5, #8]
 800af62:	692b      	ldr	r3, [r5, #16]
 800af64:	443a      	add	r2, r7
 800af66:	443b      	add	r3, r7
 800af68:	60aa      	str	r2, [r5, #8]
 800af6a:	612b      	str	r3, [r5, #16]
 800af6c:	e7ec      	b.n	800af48 <ucdr_deserialize_endian_array_double+0x84>
 800af6e:	bf00      	nop

0800af70 <ucdr_serialize_bool>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	460d      	mov	r5, r1
 800af74:	2101      	movs	r1, #1
 800af76:	4604      	mov	r4, r0
 800af78:	f7fd fe94 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800af7c:	b148      	cbz	r0, 800af92 <ucdr_serialize_bool+0x22>
 800af7e:	68a3      	ldr	r3, [r4, #8]
 800af80:	701d      	strb	r5, [r3, #0]
 800af82:	68a2      	ldr	r2, [r4, #8]
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	2101      	movs	r1, #1
 800af88:	440a      	add	r2, r1
 800af8a:	440b      	add	r3, r1
 800af8c:	60a2      	str	r2, [r4, #8]
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	7561      	strb	r1, [r4, #21]
 800af92:	7da0      	ldrb	r0, [r4, #22]
 800af94:	f080 0001 	eor.w	r0, r0, #1
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	bf00      	nop

0800af9c <ucdr_deserialize_bool>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	460d      	mov	r5, r1
 800afa0:	2101      	movs	r1, #1
 800afa2:	4604      	mov	r4, r0
 800afa4:	f7fd fe7e 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800afa8:	b160      	cbz	r0, 800afc4 <ucdr_deserialize_bool+0x28>
 800afaa:	68a2      	ldr	r2, [r4, #8]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	f812 1b01 	ldrb.w	r1, [r2], #1
 800afb2:	3900      	subs	r1, #0
 800afb4:	bf18      	it	ne
 800afb6:	2101      	movne	r1, #1
 800afb8:	7029      	strb	r1, [r5, #0]
 800afba:	3301      	adds	r3, #1
 800afbc:	2101      	movs	r1, #1
 800afbe:	60a2      	str	r2, [r4, #8]
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	7561      	strb	r1, [r4, #21]
 800afc4:	7da0      	ldrb	r0, [r4, #22]
 800afc6:	f080 0001 	eor.w	r0, r0, #1
 800afca:	bd38      	pop	{r3, r4, r5, pc}

0800afcc <ucdr_serialize_uint8_t>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	460d      	mov	r5, r1
 800afd0:	2101      	movs	r1, #1
 800afd2:	4604      	mov	r4, r0
 800afd4:	f7fd fe66 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800afd8:	b148      	cbz	r0, 800afee <ucdr_serialize_uint8_t+0x22>
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	701d      	strb	r5, [r3, #0]
 800afde:	68a2      	ldr	r2, [r4, #8]
 800afe0:	6923      	ldr	r3, [r4, #16]
 800afe2:	2101      	movs	r1, #1
 800afe4:	440a      	add	r2, r1
 800afe6:	440b      	add	r3, r1
 800afe8:	60a2      	str	r2, [r4, #8]
 800afea:	6123      	str	r3, [r4, #16]
 800afec:	7561      	strb	r1, [r4, #21]
 800afee:	7da0      	ldrb	r0, [r4, #22]
 800aff0:	f080 0001 	eor.w	r0, r0, #1
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop

0800aff8 <ucdr_deserialize_uint8_t>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	460d      	mov	r5, r1
 800affc:	2101      	movs	r1, #1
 800affe:	4604      	mov	r4, r0
 800b000:	f7fd fe50 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b004:	b150      	cbz	r0, 800b01c <ucdr_deserialize_uint8_t+0x24>
 800b006:	68a3      	ldr	r3, [r4, #8]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	702b      	strb	r3, [r5, #0]
 800b00c:	68a2      	ldr	r2, [r4, #8]
 800b00e:	6923      	ldr	r3, [r4, #16]
 800b010:	2101      	movs	r1, #1
 800b012:	440a      	add	r2, r1
 800b014:	440b      	add	r3, r1
 800b016:	60a2      	str	r2, [r4, #8]
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	7561      	strb	r1, [r4, #21]
 800b01c:	7da0      	ldrb	r0, [r4, #22]
 800b01e:	f080 0001 	eor.w	r0, r0, #1
 800b022:	bd38      	pop	{r3, r4, r5, pc}

0800b024 <ucdr_serialize_uint16_t>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	460b      	mov	r3, r1
 800b02c:	2102      	movs	r1, #2
 800b02e:	4604      	mov	r4, r0
 800b030:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b034:	f7fd fe8a 	bl	8008d4c <ucdr_buffer_alignment>
 800b038:	4601      	mov	r1, r0
 800b03a:	4620      	mov	r0, r4
 800b03c:	7d67      	ldrb	r7, [r4, #21]
 800b03e:	f7fd fec9 	bl	8008dd4 <ucdr_advance_buffer>
 800b042:	2102      	movs	r1, #2
 800b044:	4620      	mov	r0, r4
 800b046:	f7fd fe21 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b04a:	b1c0      	cbz	r0, 800b07e <ucdr_serialize_uint16_t+0x5a>
 800b04c:	7d22      	ldrb	r2, [r4, #20]
 800b04e:	68a3      	ldr	r3, [r4, #8]
 800b050:	2a01      	cmp	r2, #1
 800b052:	d04e      	beq.n	800b0f2 <ucdr_serialize_uint16_t+0xce>
 800b054:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b058:	701a      	strb	r2, [r3, #0]
 800b05a:	68a3      	ldr	r3, [r4, #8]
 800b05c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b060:	705a      	strb	r2, [r3, #1]
 800b062:	68a2      	ldr	r2, [r4, #8]
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	3202      	adds	r2, #2
 800b068:	3302      	adds	r3, #2
 800b06a:	2102      	movs	r1, #2
 800b06c:	60a2      	str	r2, [r4, #8]
 800b06e:	6123      	str	r3, [r4, #16]
 800b070:	7561      	strb	r1, [r4, #21]
 800b072:	7da0      	ldrb	r0, [r4, #22]
 800b074:	f080 0001 	eor.w	r0, r0, #1
 800b078:	b002      	add	sp, #8
 800b07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b07e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b082:	42ab      	cmp	r3, r5
 800b084:	d923      	bls.n	800b0ce <ucdr_serialize_uint16_t+0xaa>
 800b086:	1b5e      	subs	r6, r3, r5
 800b088:	60a3      	str	r3, [r4, #8]
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	f1c6 0802 	rsb	r8, r6, #2
 800b090:	4433      	add	r3, r6
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	4641      	mov	r1, r8
 800b096:	4620      	mov	r0, r4
 800b098:	f7fd fe04 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b09c:	b368      	cbz	r0, 800b0fa <ucdr_serialize_uint16_t+0xd6>
 800b09e:	7d23      	ldrb	r3, [r4, #20]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d03b      	beq.n	800b11c <ucdr_serialize_uint16_t+0xf8>
 800b0a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0a8:	702b      	strb	r3, [r5, #0]
 800b0aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0ae:	706b      	strb	r3, [r5, #1]
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	68a2      	ldr	r2, [r4, #8]
 800b0b4:	7da0      	ldrb	r0, [r4, #22]
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	4442      	add	r2, r8
 800b0ba:	1b9b      	subs	r3, r3, r6
 800b0bc:	2102      	movs	r1, #2
 800b0be:	f080 0001 	eor.w	r0, r0, #1
 800b0c2:	60a2      	str	r2, [r4, #8]
 800b0c4:	6123      	str	r3, [r4, #16]
 800b0c6:	7561      	strb	r1, [r4, #21]
 800b0c8:	b002      	add	sp, #8
 800b0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ce:	2102      	movs	r1, #2
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7fd fde7 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d0cb      	beq.n	800b072 <ucdr_serialize_uint16_t+0x4e>
 800b0da:	7d23      	ldrb	r3, [r4, #20]
 800b0dc:	68a2      	ldr	r2, [r4, #8]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d018      	beq.n	800b114 <ucdr_serialize_uint16_t+0xf0>
 800b0e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0e6:	7013      	strb	r3, [r2, #0]
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0ee:	705a      	strb	r2, [r3, #1]
 800b0f0:	e7b7      	b.n	800b062 <ucdr_serialize_uint16_t+0x3e>
 800b0f2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b0f6:	801a      	strh	r2, [r3, #0]
 800b0f8:	e7b3      	b.n	800b062 <ucdr_serialize_uint16_t+0x3e>
 800b0fa:	68a2      	ldr	r2, [r4, #8]
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	7da0      	ldrb	r0, [r4, #22]
 800b100:	7567      	strb	r7, [r4, #21]
 800b102:	1b92      	subs	r2, r2, r6
 800b104:	1b9b      	subs	r3, r3, r6
 800b106:	f080 0001 	eor.w	r0, r0, #1
 800b10a:	60a2      	str	r2, [r4, #8]
 800b10c:	6123      	str	r3, [r4, #16]
 800b10e:	b002      	add	sp, #8
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b114:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b118:	8013      	strh	r3, [r2, #0]
 800b11a:	e7a2      	b.n	800b062 <ucdr_serialize_uint16_t+0x3e>
 800b11c:	4628      	mov	r0, r5
 800b11e:	f10d 0506 	add.w	r5, sp, #6
 800b122:	4632      	mov	r2, r6
 800b124:	4629      	mov	r1, r5
 800b126:	f008 f894 	bl	8013252 <memcpy>
 800b12a:	68a0      	ldr	r0, [r4, #8]
 800b12c:	4642      	mov	r2, r8
 800b12e:	19a9      	adds	r1, r5, r6
 800b130:	f008 f88f 	bl	8013252 <memcpy>
 800b134:	e7bc      	b.n	800b0b0 <ucdr_serialize_uint16_t+0x8c>
 800b136:	bf00      	nop

0800b138 <ucdr_serialize_endian_uint16_t>:
 800b138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b13c:	b083      	sub	sp, #12
 800b13e:	460d      	mov	r5, r1
 800b140:	2102      	movs	r1, #2
 800b142:	4604      	mov	r4, r0
 800b144:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b148:	f7fd fe00 	bl	8008d4c <ucdr_buffer_alignment>
 800b14c:	4601      	mov	r1, r0
 800b14e:	4620      	mov	r0, r4
 800b150:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b154:	f7fd fe3e 	bl	8008dd4 <ucdr_advance_buffer>
 800b158:	2102      	movs	r1, #2
 800b15a:	4620      	mov	r0, r4
 800b15c:	f7fd fd96 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b160:	bb60      	cbnz	r0, 800b1bc <ucdr_serialize_endian_uint16_t+0x84>
 800b162:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b166:	42be      	cmp	r6, r7
 800b168:	d923      	bls.n	800b1b2 <ucdr_serialize_endian_uint16_t+0x7a>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	60a6      	str	r6, [r4, #8]
 800b16e:	1bf6      	subs	r6, r6, r7
 800b170:	4433      	add	r3, r6
 800b172:	f1c6 0902 	rsb	r9, r6, #2
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	4649      	mov	r1, r9
 800b17a:	4620      	mov	r0, r4
 800b17c:	f7fd fd92 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b180:	2800      	cmp	r0, #0
 800b182:	d037      	beq.n	800b1f4 <ucdr_serialize_endian_uint16_t+0xbc>
 800b184:	2d01      	cmp	r5, #1
 800b186:	d043      	beq.n	800b210 <ucdr_serialize_endian_uint16_t+0xd8>
 800b188:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b18c:	703b      	strb	r3, [r7, #0]
 800b18e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b192:	707b      	strb	r3, [r7, #1]
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	68a2      	ldr	r2, [r4, #8]
 800b198:	7da0      	ldrb	r0, [r4, #22]
 800b19a:	3302      	adds	r3, #2
 800b19c:	444a      	add	r2, r9
 800b19e:	1b9b      	subs	r3, r3, r6
 800b1a0:	2102      	movs	r1, #2
 800b1a2:	f080 0001 	eor.w	r0, r0, #1
 800b1a6:	60a2      	str	r2, [r4, #8]
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	7561      	strb	r1, [r4, #21]
 800b1ac:	b003      	add	sp, #12
 800b1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1b2:	2102      	movs	r1, #2
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f7fd fd75 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b1ba:	b188      	cbz	r0, 800b1e0 <ucdr_serialize_endian_uint16_t+0xa8>
 800b1bc:	2d01      	cmp	r5, #1
 800b1be:	68a3      	ldr	r3, [r4, #8]
 800b1c0:	d014      	beq.n	800b1ec <ucdr_serialize_endian_uint16_t+0xb4>
 800b1c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	68a3      	ldr	r3, [r4, #8]
 800b1ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1ce:	705a      	strb	r2, [r3, #1]
 800b1d0:	68a2      	ldr	r2, [r4, #8]
 800b1d2:	6923      	ldr	r3, [r4, #16]
 800b1d4:	3202      	adds	r2, #2
 800b1d6:	3302      	adds	r3, #2
 800b1d8:	2102      	movs	r1, #2
 800b1da:	60a2      	str	r2, [r4, #8]
 800b1dc:	6123      	str	r3, [r4, #16]
 800b1de:	7561      	strb	r1, [r4, #21]
 800b1e0:	7da0      	ldrb	r0, [r4, #22]
 800b1e2:	f080 0001 	eor.w	r0, r0, #1
 800b1e6:	b003      	add	sp, #12
 800b1e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	e7ed      	b.n	800b1d0 <ucdr_serialize_endian_uint16_t+0x98>
 800b1f4:	68a2      	ldr	r2, [r4, #8]
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	7da0      	ldrb	r0, [r4, #22]
 800b1fa:	f884 8015 	strb.w	r8, [r4, #21]
 800b1fe:	1b92      	subs	r2, r2, r6
 800b200:	1b9b      	subs	r3, r3, r6
 800b202:	f080 0001 	eor.w	r0, r0, #1
 800b206:	60a2      	str	r2, [r4, #8]
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	b003      	add	sp, #12
 800b20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b210:	f10d 0506 	add.w	r5, sp, #6
 800b214:	4632      	mov	r2, r6
 800b216:	4629      	mov	r1, r5
 800b218:	4638      	mov	r0, r7
 800b21a:	f008 f81a 	bl	8013252 <memcpy>
 800b21e:	68a0      	ldr	r0, [r4, #8]
 800b220:	464a      	mov	r2, r9
 800b222:	19a9      	adds	r1, r5, r6
 800b224:	f008 f815 	bl	8013252 <memcpy>
 800b228:	e7b4      	b.n	800b194 <ucdr_serialize_endian_uint16_t+0x5c>
 800b22a:	bf00      	nop

0800b22c <ucdr_deserialize_uint16_t>:
 800b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b230:	460d      	mov	r5, r1
 800b232:	2102      	movs	r1, #2
 800b234:	4604      	mov	r4, r0
 800b236:	f7fd fd89 	bl	8008d4c <ucdr_buffer_alignment>
 800b23a:	4601      	mov	r1, r0
 800b23c:	4620      	mov	r0, r4
 800b23e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b242:	f7fd fdc7 	bl	8008dd4 <ucdr_advance_buffer>
 800b246:	2102      	movs	r1, #2
 800b248:	4620      	mov	r0, r4
 800b24a:	f7fd fd1f 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b24e:	b1a8      	cbz	r0, 800b27c <ucdr_deserialize_uint16_t+0x50>
 800b250:	7d22      	ldrb	r2, [r4, #20]
 800b252:	68a3      	ldr	r3, [r4, #8]
 800b254:	2a01      	cmp	r2, #1
 800b256:	d046      	beq.n	800b2e6 <ucdr_deserialize_uint16_t+0xba>
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	702b      	strb	r3, [r5, #0]
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	706b      	strb	r3, [r5, #1]
 800b262:	68a2      	ldr	r2, [r4, #8]
 800b264:	6923      	ldr	r3, [r4, #16]
 800b266:	3202      	adds	r2, #2
 800b268:	3302      	adds	r3, #2
 800b26a:	2102      	movs	r1, #2
 800b26c:	60a2      	str	r2, [r4, #8]
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	7561      	strb	r1, [r4, #21]
 800b272:	7da0      	ldrb	r0, [r4, #22]
 800b274:	f080 0001 	eor.w	r0, r0, #1
 800b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b280:	42be      	cmp	r6, r7
 800b282:	d920      	bls.n	800b2c6 <ucdr_deserialize_uint16_t+0x9a>
 800b284:	6923      	ldr	r3, [r4, #16]
 800b286:	60a6      	str	r6, [r4, #8]
 800b288:	1bf6      	subs	r6, r6, r7
 800b28a:	4433      	add	r3, r6
 800b28c:	f1c6 0902 	rsb	r9, r6, #2
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	4649      	mov	r1, r9
 800b294:	4620      	mov	r0, r4
 800b296:	f7fd fd05 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b29a:	b338      	cbz	r0, 800b2ec <ucdr_deserialize_uint16_t+0xc0>
 800b29c:	7d23      	ldrb	r3, [r4, #20]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d034      	beq.n	800b30c <ucdr_deserialize_uint16_t+0xe0>
 800b2a2:	787b      	ldrb	r3, [r7, #1]
 800b2a4:	702b      	strb	r3, [r5, #0]
 800b2a6:	783b      	ldrb	r3, [r7, #0]
 800b2a8:	706b      	strb	r3, [r5, #1]
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	68a2      	ldr	r2, [r4, #8]
 800b2ae:	7da0      	ldrb	r0, [r4, #22]
 800b2b0:	2102      	movs	r1, #2
 800b2b2:	3302      	adds	r3, #2
 800b2b4:	444a      	add	r2, r9
 800b2b6:	1b9b      	subs	r3, r3, r6
 800b2b8:	7561      	strb	r1, [r4, #21]
 800b2ba:	60a2      	str	r2, [r4, #8]
 800b2bc:	6123      	str	r3, [r4, #16]
 800b2be:	f080 0001 	eor.w	r0, r0, #1
 800b2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f7fd fceb 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d0cf      	beq.n	800b272 <ucdr_deserialize_uint16_t+0x46>
 800b2d2:	7d23      	ldrb	r3, [r4, #20]
 800b2d4:	68a2      	ldr	r2, [r4, #8]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d015      	beq.n	800b306 <ucdr_deserialize_uint16_t+0xda>
 800b2da:	7853      	ldrb	r3, [r2, #1]
 800b2dc:	702b      	strb	r3, [r5, #0]
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	706b      	strb	r3, [r5, #1]
 800b2e4:	e7bd      	b.n	800b262 <ucdr_deserialize_uint16_t+0x36>
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	802b      	strh	r3, [r5, #0]
 800b2ea:	e7ba      	b.n	800b262 <ucdr_deserialize_uint16_t+0x36>
 800b2ec:	68a2      	ldr	r2, [r4, #8]
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	7da0      	ldrb	r0, [r4, #22]
 800b2f2:	f884 8015 	strb.w	r8, [r4, #21]
 800b2f6:	1b92      	subs	r2, r2, r6
 800b2f8:	1b9b      	subs	r3, r3, r6
 800b2fa:	60a2      	str	r2, [r4, #8]
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	f080 0001 	eor.w	r0, r0, #1
 800b302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b306:	8813      	ldrh	r3, [r2, #0]
 800b308:	802b      	strh	r3, [r5, #0]
 800b30a:	e7aa      	b.n	800b262 <ucdr_deserialize_uint16_t+0x36>
 800b30c:	4639      	mov	r1, r7
 800b30e:	4632      	mov	r2, r6
 800b310:	4628      	mov	r0, r5
 800b312:	f007 ff9e 	bl	8013252 <memcpy>
 800b316:	68a1      	ldr	r1, [r4, #8]
 800b318:	464a      	mov	r2, r9
 800b31a:	19a8      	adds	r0, r5, r6
 800b31c:	f007 ff99 	bl	8013252 <memcpy>
 800b320:	e7c3      	b.n	800b2aa <ucdr_deserialize_uint16_t+0x7e>
 800b322:	bf00      	nop

0800b324 <ucdr_deserialize_endian_uint16_t>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	460e      	mov	r6, r1
 800b32a:	2102      	movs	r1, #2
 800b32c:	4604      	mov	r4, r0
 800b32e:	4615      	mov	r5, r2
 800b330:	f7fd fd0c 	bl	8008d4c <ucdr_buffer_alignment>
 800b334:	4601      	mov	r1, r0
 800b336:	4620      	mov	r0, r4
 800b338:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b33c:	f7fd fd4a 	bl	8008dd4 <ucdr_advance_buffer>
 800b340:	2102      	movs	r1, #2
 800b342:	4620      	mov	r0, r4
 800b344:	f7fd fca2 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b348:	bb60      	cbnz	r0, 800b3a4 <ucdr_deserialize_endian_uint16_t+0x80>
 800b34a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b34e:	4547      	cmp	r7, r8
 800b350:	d923      	bls.n	800b39a <ucdr_deserialize_endian_uint16_t+0x76>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	60a7      	str	r7, [r4, #8]
 800b356:	eba7 0708 	sub.w	r7, r7, r8
 800b35a:	443b      	add	r3, r7
 800b35c:	f1c7 0a02 	rsb	sl, r7, #2
 800b360:	6123      	str	r3, [r4, #16]
 800b362:	4651      	mov	r1, sl
 800b364:	4620      	mov	r0, r4
 800b366:	f7fd fc9d 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d032      	beq.n	800b3d4 <ucdr_deserialize_endian_uint16_t+0xb0>
 800b36e:	2e01      	cmp	r6, #1
 800b370:	d03d      	beq.n	800b3ee <ucdr_deserialize_endian_uint16_t+0xca>
 800b372:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b376:	702b      	strb	r3, [r5, #0]
 800b378:	f898 3000 	ldrb.w	r3, [r8]
 800b37c:	706b      	strb	r3, [r5, #1]
 800b37e:	6923      	ldr	r3, [r4, #16]
 800b380:	68a2      	ldr	r2, [r4, #8]
 800b382:	7da0      	ldrb	r0, [r4, #22]
 800b384:	2102      	movs	r1, #2
 800b386:	3302      	adds	r3, #2
 800b388:	4452      	add	r2, sl
 800b38a:	1bdb      	subs	r3, r3, r7
 800b38c:	7561      	strb	r1, [r4, #21]
 800b38e:	60a2      	str	r2, [r4, #8]
 800b390:	6123      	str	r3, [r4, #16]
 800b392:	f080 0001 	eor.w	r0, r0, #1
 800b396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39a:	2102      	movs	r1, #2
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7fd fc81 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b3a2:	b178      	cbz	r0, 800b3c4 <ucdr_deserialize_endian_uint16_t+0xa0>
 800b3a4:	2e01      	cmp	r6, #1
 800b3a6:	68a3      	ldr	r3, [r4, #8]
 800b3a8:	d011      	beq.n	800b3ce <ucdr_deserialize_endian_uint16_t+0xaa>
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	702b      	strb	r3, [r5, #0]
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	706b      	strb	r3, [r5, #1]
 800b3b4:	68a2      	ldr	r2, [r4, #8]
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	3202      	adds	r2, #2
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	2102      	movs	r1, #2
 800b3be:	60a2      	str	r2, [r4, #8]
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	7561      	strb	r1, [r4, #21]
 800b3c4:	7da0      	ldrb	r0, [r4, #22]
 800b3c6:	f080 0001 	eor.w	r0, r0, #1
 800b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ce:	881b      	ldrh	r3, [r3, #0]
 800b3d0:	802b      	strh	r3, [r5, #0]
 800b3d2:	e7ef      	b.n	800b3b4 <ucdr_deserialize_endian_uint16_t+0x90>
 800b3d4:	68a2      	ldr	r2, [r4, #8]
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	7da0      	ldrb	r0, [r4, #22]
 800b3da:	f884 9015 	strb.w	r9, [r4, #21]
 800b3de:	1bd2      	subs	r2, r2, r7
 800b3e0:	1bdb      	subs	r3, r3, r7
 800b3e2:	60a2      	str	r2, [r4, #8]
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	f080 0001 	eor.w	r0, r0, #1
 800b3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ee:	4641      	mov	r1, r8
 800b3f0:	463a      	mov	r2, r7
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f007 ff2d 	bl	8013252 <memcpy>
 800b3f8:	68a1      	ldr	r1, [r4, #8]
 800b3fa:	4652      	mov	r2, sl
 800b3fc:	19e8      	adds	r0, r5, r7
 800b3fe:	f007 ff28 	bl	8013252 <memcpy>
 800b402:	e7bc      	b.n	800b37e <ucdr_deserialize_endian_uint16_t+0x5a>

0800b404 <ucdr_serialize_uint32_t>:
 800b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	4604      	mov	r4, r0
 800b40c:	9101      	str	r1, [sp, #4]
 800b40e:	2104      	movs	r1, #4
 800b410:	f7fd fc9c 	bl	8008d4c <ucdr_buffer_alignment>
 800b414:	4601      	mov	r1, r0
 800b416:	4620      	mov	r0, r4
 800b418:	7d67      	ldrb	r7, [r4, #21]
 800b41a:	f7fd fcdb 	bl	8008dd4 <ucdr_advance_buffer>
 800b41e:	2104      	movs	r1, #4
 800b420:	4620      	mov	r0, r4
 800b422:	f7fd fc33 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b426:	b300      	cbz	r0, 800b46a <ucdr_serialize_uint32_t+0x66>
 800b428:	7d22      	ldrb	r2, [r4, #20]
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	2a01      	cmp	r2, #1
 800b42e:	d05d      	beq.n	800b4ec <ucdr_serialize_uint32_t+0xe8>
 800b430:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b43c:	705a      	strb	r2, [r3, #1]
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b444:	709a      	strb	r2, [r3, #2]
 800b446:	68a3      	ldr	r3, [r4, #8]
 800b448:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b44c:	70da      	strb	r2, [r3, #3]
 800b44e:	68a2      	ldr	r2, [r4, #8]
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	3204      	adds	r2, #4
 800b454:	3304      	adds	r3, #4
 800b456:	2104      	movs	r1, #4
 800b458:	60a2      	str	r2, [r4, #8]
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	7561      	strb	r1, [r4, #21]
 800b45e:	7da0      	ldrb	r0, [r4, #22]
 800b460:	f080 0001 	eor.w	r0, r0, #1
 800b464:	b002      	add	sp, #8
 800b466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b46e:	42ab      	cmp	r3, r5
 800b470:	d92e      	bls.n	800b4d0 <ucdr_serialize_uint32_t+0xcc>
 800b472:	1b5e      	subs	r6, r3, r5
 800b474:	60a3      	str	r3, [r4, #8]
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	f1c6 0804 	rsb	r8, r6, #4
 800b47c:	4433      	add	r3, r6
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	4641      	mov	r1, r8
 800b482:	4620      	mov	r0, r4
 800b484:	f7fd fc0e 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b488:	b398      	cbz	r0, 800b4f2 <ucdr_serialize_uint32_t+0xee>
 800b48a:	7d23      	ldrb	r3, [r4, #20]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d046      	beq.n	800b51e <ucdr_serialize_uint32_t+0x11a>
 800b490:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b494:	702b      	strb	r3, [r5, #0]
 800b496:	2e01      	cmp	r6, #1
 800b498:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b49c:	706b      	strb	r3, [r5, #1]
 800b49e:	d035      	beq.n	800b50c <ucdr_serialize_uint32_t+0x108>
 800b4a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4a4:	70ab      	strb	r3, [r5, #2]
 800b4a6:	2e02      	cmp	r6, #2
 800b4a8:	d034      	beq.n	800b514 <ucdr_serialize_uint32_t+0x110>
 800b4aa:	3503      	adds	r5, #3
 800b4ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4b0:	702b      	strb	r3, [r5, #0]
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	68a2      	ldr	r2, [r4, #8]
 800b4b6:	7da0      	ldrb	r0, [r4, #22]
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	4442      	add	r2, r8
 800b4bc:	1b9b      	subs	r3, r3, r6
 800b4be:	2104      	movs	r1, #4
 800b4c0:	f080 0001 	eor.w	r0, r0, #1
 800b4c4:	60a2      	str	r2, [r4, #8]
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	7561      	strb	r1, [r4, #21]
 800b4ca:	b002      	add	sp, #8
 800b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d0:	2104      	movs	r1, #4
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7fd fbe6 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d0c0      	beq.n	800b45e <ucdr_serialize_uint32_t+0x5a>
 800b4dc:	7d23      	ldrb	r3, [r4, #20]
 800b4de:	68a2      	ldr	r2, [r4, #8]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d019      	beq.n	800b518 <ucdr_serialize_uint32_t+0x114>
 800b4e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4e8:	7013      	strb	r3, [r2, #0]
 800b4ea:	e7a4      	b.n	800b436 <ucdr_serialize_uint32_t+0x32>
 800b4ec:	9a01      	ldr	r2, [sp, #4]
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	e7ad      	b.n	800b44e <ucdr_serialize_uint32_t+0x4a>
 800b4f2:	68a2      	ldr	r2, [r4, #8]
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	7da0      	ldrb	r0, [r4, #22]
 800b4f8:	7567      	strb	r7, [r4, #21]
 800b4fa:	1b92      	subs	r2, r2, r6
 800b4fc:	1b9b      	subs	r3, r3, r6
 800b4fe:	f080 0001 	eor.w	r0, r0, #1
 800b502:	60a2      	str	r2, [r4, #8]
 800b504:	6123      	str	r3, [r4, #16]
 800b506:	b002      	add	sp, #8
 800b508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	68a5      	ldr	r5, [r4, #8]
 800b516:	e7c9      	b.n	800b4ac <ucdr_serialize_uint32_t+0xa8>
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	e797      	b.n	800b44e <ucdr_serialize_uint32_t+0x4a>
 800b51e:	4628      	mov	r0, r5
 800b520:	ad01      	add	r5, sp, #4
 800b522:	4632      	mov	r2, r6
 800b524:	4629      	mov	r1, r5
 800b526:	f007 fe94 	bl	8013252 <memcpy>
 800b52a:	68a0      	ldr	r0, [r4, #8]
 800b52c:	4642      	mov	r2, r8
 800b52e:	19a9      	adds	r1, r5, r6
 800b530:	f007 fe8f 	bl	8013252 <memcpy>
 800b534:	e7bd      	b.n	800b4b2 <ucdr_serialize_uint32_t+0xae>
 800b536:	bf00      	nop

0800b538 <ucdr_serialize_endian_uint32_t>:
 800b538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b53c:	b083      	sub	sp, #12
 800b53e:	460d      	mov	r5, r1
 800b540:	2104      	movs	r1, #4
 800b542:	4604      	mov	r4, r0
 800b544:	9201      	str	r2, [sp, #4]
 800b546:	f7fd fc01 	bl	8008d4c <ucdr_buffer_alignment>
 800b54a:	4601      	mov	r1, r0
 800b54c:	4620      	mov	r0, r4
 800b54e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b552:	f7fd fc3f 	bl	8008dd4 <ucdr_advance_buffer>
 800b556:	2104      	movs	r1, #4
 800b558:	4620      	mov	r0, r4
 800b55a:	f7fd fb97 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d137      	bne.n	800b5d2 <ucdr_serialize_endian_uint32_t+0x9a>
 800b562:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b566:	42b7      	cmp	r7, r6
 800b568:	d92e      	bls.n	800b5c8 <ucdr_serialize_endian_uint32_t+0x90>
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	60a7      	str	r7, [r4, #8]
 800b56e:	1bbf      	subs	r7, r7, r6
 800b570:	443b      	add	r3, r7
 800b572:	f1c7 0904 	rsb	r9, r7, #4
 800b576:	6123      	str	r3, [r4, #16]
 800b578:	4649      	mov	r1, r9
 800b57a:	4620      	mov	r0, r4
 800b57c:	f7fd fb92 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b580:	2800      	cmp	r0, #0
 800b582:	d049      	beq.n	800b618 <ucdr_serialize_endian_uint32_t+0xe0>
 800b584:	2d01      	cmp	r5, #1
 800b586:	d05b      	beq.n	800b640 <ucdr_serialize_endian_uint32_t+0x108>
 800b588:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b58c:	7033      	strb	r3, [r6, #0]
 800b58e:	2f01      	cmp	r7, #1
 800b590:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b594:	7073      	strb	r3, [r6, #1]
 800b596:	d04d      	beq.n	800b634 <ucdr_serialize_endian_uint32_t+0xfc>
 800b598:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b59c:	70b3      	strb	r3, [r6, #2]
 800b59e:	2f02      	cmp	r7, #2
 800b5a0:	d04c      	beq.n	800b63c <ucdr_serialize_endian_uint32_t+0x104>
 800b5a2:	3603      	adds	r6, #3
 800b5a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5a8:	7033      	strb	r3, [r6, #0]
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	68a2      	ldr	r2, [r4, #8]
 800b5ae:	7da0      	ldrb	r0, [r4, #22]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	444a      	add	r2, r9
 800b5b4:	1bdb      	subs	r3, r3, r7
 800b5b6:	2104      	movs	r1, #4
 800b5b8:	f080 0001 	eor.w	r0, r0, #1
 800b5bc:	60a2      	str	r2, [r4, #8]
 800b5be:	6123      	str	r3, [r4, #16]
 800b5c0:	7561      	strb	r1, [r4, #21]
 800b5c2:	b003      	add	sp, #12
 800b5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c8:	2104      	movs	r1, #4
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7fd fb6a 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b5d0:	b1c8      	cbz	r0, 800b606 <ucdr_serialize_endian_uint32_t+0xce>
 800b5d2:	2d01      	cmp	r5, #1
 800b5d4:	68a3      	ldr	r3, [r4, #8]
 800b5d6:	d01c      	beq.n	800b612 <ucdr_serialize_endian_uint32_t+0xda>
 800b5d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5dc:	701a      	strb	r2, [r3, #0]
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5e4:	705a      	strb	r2, [r3, #1]
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5ec:	709a      	strb	r2, [r3, #2]
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b5f4:	70da      	strb	r2, [r3, #3]
 800b5f6:	68a2      	ldr	r2, [r4, #8]
 800b5f8:	6923      	ldr	r3, [r4, #16]
 800b5fa:	3204      	adds	r2, #4
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	2104      	movs	r1, #4
 800b600:	60a2      	str	r2, [r4, #8]
 800b602:	6123      	str	r3, [r4, #16]
 800b604:	7561      	strb	r1, [r4, #21]
 800b606:	7da0      	ldrb	r0, [r4, #22]
 800b608:	f080 0001 	eor.w	r0, r0, #1
 800b60c:	b003      	add	sp, #12
 800b60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b612:	9a01      	ldr	r2, [sp, #4]
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	e7ee      	b.n	800b5f6 <ucdr_serialize_endian_uint32_t+0xbe>
 800b618:	68a2      	ldr	r2, [r4, #8]
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	7da0      	ldrb	r0, [r4, #22]
 800b61e:	f884 8015 	strb.w	r8, [r4, #21]
 800b622:	1bd2      	subs	r2, r2, r7
 800b624:	1bdb      	subs	r3, r3, r7
 800b626:	f080 0001 	eor.w	r0, r0, #1
 800b62a:	60a2      	str	r2, [r4, #8]
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	b003      	add	sp, #12
 800b630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b634:	68a3      	ldr	r3, [r4, #8]
 800b636:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b63a:	701a      	strb	r2, [r3, #0]
 800b63c:	68a6      	ldr	r6, [r4, #8]
 800b63e:	e7b1      	b.n	800b5a4 <ucdr_serialize_endian_uint32_t+0x6c>
 800b640:	ad01      	add	r5, sp, #4
 800b642:	463a      	mov	r2, r7
 800b644:	4629      	mov	r1, r5
 800b646:	4630      	mov	r0, r6
 800b648:	f007 fe03 	bl	8013252 <memcpy>
 800b64c:	68a0      	ldr	r0, [r4, #8]
 800b64e:	464a      	mov	r2, r9
 800b650:	19e9      	adds	r1, r5, r7
 800b652:	f007 fdfe 	bl	8013252 <memcpy>
 800b656:	e7a8      	b.n	800b5aa <ucdr_serialize_endian_uint32_t+0x72>

0800b658 <ucdr_deserialize_uint32_t>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	460d      	mov	r5, r1
 800b65e:	2104      	movs	r1, #4
 800b660:	4604      	mov	r4, r0
 800b662:	f7fd fb73 	bl	8008d4c <ucdr_buffer_alignment>
 800b666:	4601      	mov	r1, r0
 800b668:	4620      	mov	r0, r4
 800b66a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b66e:	f7fd fbb1 	bl	8008dd4 <ucdr_advance_buffer>
 800b672:	2104      	movs	r1, #4
 800b674:	4620      	mov	r0, r4
 800b676:	f7fd fb09 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b67a:	b1d8      	cbz	r0, 800b6b4 <ucdr_deserialize_uint32_t+0x5c>
 800b67c:	7d22      	ldrb	r2, [r4, #20]
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	2a01      	cmp	r2, #1
 800b682:	d052      	beq.n	800b72a <ucdr_deserialize_uint32_t+0xd2>
 800b684:	78db      	ldrb	r3, [r3, #3]
 800b686:	702b      	strb	r3, [r5, #0]
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	789b      	ldrb	r3, [r3, #2]
 800b68c:	706b      	strb	r3, [r5, #1]
 800b68e:	68a3      	ldr	r3, [r4, #8]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	70ab      	strb	r3, [r5, #2]
 800b694:	68a3      	ldr	r3, [r4, #8]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	70eb      	strb	r3, [r5, #3]
 800b69a:	68a2      	ldr	r2, [r4, #8]
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	3204      	adds	r2, #4
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	2104      	movs	r1, #4
 800b6a4:	60a2      	str	r2, [r4, #8]
 800b6a6:	6123      	str	r3, [r4, #16]
 800b6a8:	7561      	strb	r1, [r4, #21]
 800b6aa:	7da0      	ldrb	r0, [r4, #22]
 800b6ac:	f080 0001 	eor.w	r0, r0, #1
 800b6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b6b8:	42b7      	cmp	r7, r6
 800b6ba:	d92a      	bls.n	800b712 <ucdr_deserialize_uint32_t+0xba>
 800b6bc:	6923      	ldr	r3, [r4, #16]
 800b6be:	60a7      	str	r7, [r4, #8]
 800b6c0:	1bbf      	subs	r7, r7, r6
 800b6c2:	443b      	add	r3, r7
 800b6c4:	f1c7 0904 	rsb	r9, r7, #4
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7fd fae9 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b6d2:	b368      	cbz	r0, 800b730 <ucdr_deserialize_uint32_t+0xd8>
 800b6d4:	7d23      	ldrb	r3, [r4, #20]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d040      	beq.n	800b75c <ucdr_deserialize_uint32_t+0x104>
 800b6da:	78f3      	ldrb	r3, [r6, #3]
 800b6dc:	702b      	strb	r3, [r5, #0]
 800b6de:	78b3      	ldrb	r3, [r6, #2]
 800b6e0:	706b      	strb	r3, [r5, #1]
 800b6e2:	2f01      	cmp	r7, #1
 800b6e4:	d031      	beq.n	800b74a <ucdr_deserialize_uint32_t+0xf2>
 800b6e6:	7873      	ldrb	r3, [r6, #1]
 800b6e8:	70ab      	strb	r3, [r5, #2]
 800b6ea:	2f02      	cmp	r7, #2
 800b6ec:	f105 0503 	add.w	r5, r5, #3
 800b6f0:	d02f      	beq.n	800b752 <ucdr_deserialize_uint32_t+0xfa>
 800b6f2:	7833      	ldrb	r3, [r6, #0]
 800b6f4:	702b      	strb	r3, [r5, #0]
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	68a2      	ldr	r2, [r4, #8]
 800b6fa:	7da0      	ldrb	r0, [r4, #22]
 800b6fc:	2104      	movs	r1, #4
 800b6fe:	3304      	adds	r3, #4
 800b700:	444a      	add	r2, r9
 800b702:	1bdb      	subs	r3, r3, r7
 800b704:	7561      	strb	r1, [r4, #21]
 800b706:	60a2      	str	r2, [r4, #8]
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	f080 0001 	eor.w	r0, r0, #1
 800b70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b712:	2104      	movs	r1, #4
 800b714:	4620      	mov	r0, r4
 800b716:	f7fd fac5 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d0c5      	beq.n	800b6aa <ucdr_deserialize_uint32_t+0x52>
 800b71e:	7d23      	ldrb	r3, [r4, #20]
 800b720:	68a2      	ldr	r2, [r4, #8]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d017      	beq.n	800b756 <ucdr_deserialize_uint32_t+0xfe>
 800b726:	78d3      	ldrb	r3, [r2, #3]
 800b728:	e7ad      	b.n	800b686 <ucdr_deserialize_uint32_t+0x2e>
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	602b      	str	r3, [r5, #0]
 800b72e:	e7b4      	b.n	800b69a <ucdr_deserialize_uint32_t+0x42>
 800b730:	68a2      	ldr	r2, [r4, #8]
 800b732:	6923      	ldr	r3, [r4, #16]
 800b734:	7da0      	ldrb	r0, [r4, #22]
 800b736:	f884 8015 	strb.w	r8, [r4, #21]
 800b73a:	1bd2      	subs	r2, r2, r7
 800b73c:	1bdb      	subs	r3, r3, r7
 800b73e:	60a2      	str	r2, [r4, #8]
 800b740:	6123      	str	r3, [r4, #16]
 800b742:	f080 0001 	eor.w	r0, r0, #1
 800b746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	785b      	ldrb	r3, [r3, #1]
 800b74e:	70ab      	strb	r3, [r5, #2]
 800b750:	3503      	adds	r5, #3
 800b752:	68a6      	ldr	r6, [r4, #8]
 800b754:	e7cd      	b.n	800b6f2 <ucdr_deserialize_uint32_t+0x9a>
 800b756:	6813      	ldr	r3, [r2, #0]
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	e79e      	b.n	800b69a <ucdr_deserialize_uint32_t+0x42>
 800b75c:	4631      	mov	r1, r6
 800b75e:	463a      	mov	r2, r7
 800b760:	4628      	mov	r0, r5
 800b762:	f007 fd76 	bl	8013252 <memcpy>
 800b766:	68a1      	ldr	r1, [r4, #8]
 800b768:	464a      	mov	r2, r9
 800b76a:	19e8      	adds	r0, r5, r7
 800b76c:	f007 fd71 	bl	8013252 <memcpy>
 800b770:	e7c1      	b.n	800b6f6 <ucdr_deserialize_uint32_t+0x9e>
 800b772:	bf00      	nop

0800b774 <ucdr_deserialize_endian_uint32_t>:
 800b774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b778:	460e      	mov	r6, r1
 800b77a:	2104      	movs	r1, #4
 800b77c:	4604      	mov	r4, r0
 800b77e:	4615      	mov	r5, r2
 800b780:	f7fd fae4 	bl	8008d4c <ucdr_buffer_alignment>
 800b784:	4601      	mov	r1, r0
 800b786:	4620      	mov	r0, r4
 800b788:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b78c:	f7fd fb22 	bl	8008dd4 <ucdr_advance_buffer>
 800b790:	2104      	movs	r1, #4
 800b792:	4620      	mov	r0, r4
 800b794:	f7fd fa7a 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d137      	bne.n	800b80c <ucdr_deserialize_endian_uint32_t+0x98>
 800b79c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b7a0:	42bb      	cmp	r3, r7
 800b7a2:	d92e      	bls.n	800b802 <ucdr_deserialize_endian_uint32_t+0x8e>
 800b7a4:	eba3 0807 	sub.w	r8, r3, r7
 800b7a8:	60a3      	str	r3, [r4, #8]
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	f1c8 0a04 	rsb	sl, r8, #4
 800b7b0:	4443      	add	r3, r8
 800b7b2:	6123      	str	r3, [r4, #16]
 800b7b4:	4651      	mov	r1, sl
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7fd fa74 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d043      	beq.n	800b848 <ucdr_deserialize_endian_uint32_t+0xd4>
 800b7c0:	2e01      	cmp	r6, #1
 800b7c2:	d056      	beq.n	800b872 <ucdr_deserialize_endian_uint32_t+0xfe>
 800b7c4:	78fb      	ldrb	r3, [r7, #3]
 800b7c6:	702b      	strb	r3, [r5, #0]
 800b7c8:	78bb      	ldrb	r3, [r7, #2]
 800b7ca:	706b      	strb	r3, [r5, #1]
 800b7cc:	f1b8 0f01 	cmp.w	r8, #1
 800b7d0:	d049      	beq.n	800b866 <ucdr_deserialize_endian_uint32_t+0xf2>
 800b7d2:	787b      	ldrb	r3, [r7, #1]
 800b7d4:	70ab      	strb	r3, [r5, #2]
 800b7d6:	f1b8 0f02 	cmp.w	r8, #2
 800b7da:	f105 0503 	add.w	r5, r5, #3
 800b7de:	d046      	beq.n	800b86e <ucdr_deserialize_endian_uint32_t+0xfa>
 800b7e0:	783b      	ldrb	r3, [r7, #0]
 800b7e2:	702b      	strb	r3, [r5, #0]
 800b7e4:	6923      	ldr	r3, [r4, #16]
 800b7e6:	68a2      	ldr	r2, [r4, #8]
 800b7e8:	7da0      	ldrb	r0, [r4, #22]
 800b7ea:	2104      	movs	r1, #4
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4452      	add	r2, sl
 800b7f0:	eba3 0308 	sub.w	r3, r3, r8
 800b7f4:	7561      	strb	r1, [r4, #21]
 800b7f6:	60a2      	str	r2, [r4, #8]
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	f080 0001 	eor.w	r0, r0, #1
 800b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b802:	2104      	movs	r1, #4
 800b804:	4620      	mov	r0, r4
 800b806:	f7fd fa4d 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b80a:	b1a8      	cbz	r0, 800b838 <ucdr_deserialize_endian_uint32_t+0xc4>
 800b80c:	2e01      	cmp	r6, #1
 800b80e:	68a3      	ldr	r3, [r4, #8]
 800b810:	d017      	beq.n	800b842 <ucdr_deserialize_endian_uint32_t+0xce>
 800b812:	78db      	ldrb	r3, [r3, #3]
 800b814:	702b      	strb	r3, [r5, #0]
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	789b      	ldrb	r3, [r3, #2]
 800b81a:	706b      	strb	r3, [r5, #1]
 800b81c:	68a3      	ldr	r3, [r4, #8]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	70ab      	strb	r3, [r5, #2]
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	70eb      	strb	r3, [r5, #3]
 800b828:	68a2      	ldr	r2, [r4, #8]
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	3204      	adds	r2, #4
 800b82e:	3304      	adds	r3, #4
 800b830:	2104      	movs	r1, #4
 800b832:	60a2      	str	r2, [r4, #8]
 800b834:	6123      	str	r3, [r4, #16]
 800b836:	7561      	strb	r1, [r4, #21]
 800b838:	7da0      	ldrb	r0, [r4, #22]
 800b83a:	f080 0001 	eor.w	r0, r0, #1
 800b83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	e7ef      	b.n	800b828 <ucdr_deserialize_endian_uint32_t+0xb4>
 800b848:	68a2      	ldr	r2, [r4, #8]
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	7da0      	ldrb	r0, [r4, #22]
 800b84e:	f884 9015 	strb.w	r9, [r4, #21]
 800b852:	eba2 0208 	sub.w	r2, r2, r8
 800b856:	eba3 0308 	sub.w	r3, r3, r8
 800b85a:	60a2      	str	r2, [r4, #8]
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	f080 0001 	eor.w	r0, r0, #1
 800b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b866:	68a3      	ldr	r3, [r4, #8]
 800b868:	785b      	ldrb	r3, [r3, #1]
 800b86a:	70ab      	strb	r3, [r5, #2]
 800b86c:	3503      	adds	r5, #3
 800b86e:	68a7      	ldr	r7, [r4, #8]
 800b870:	e7b6      	b.n	800b7e0 <ucdr_deserialize_endian_uint32_t+0x6c>
 800b872:	4639      	mov	r1, r7
 800b874:	4642      	mov	r2, r8
 800b876:	4628      	mov	r0, r5
 800b878:	f007 fceb 	bl	8013252 <memcpy>
 800b87c:	68a1      	ldr	r1, [r4, #8]
 800b87e:	4652      	mov	r2, sl
 800b880:	eb05 0008 	add.w	r0, r5, r8
 800b884:	f007 fce5 	bl	8013252 <memcpy>
 800b888:	e7ac      	b.n	800b7e4 <ucdr_deserialize_endian_uint32_t+0x70>
 800b88a:	bf00      	nop

0800b88c <ucdr_serialize_uint64_t>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	2108      	movs	r1, #8
 800b892:	b082      	sub	sp, #8
 800b894:	4604      	mov	r4, r0
 800b896:	e9cd 2300 	strd	r2, r3, [sp]
 800b89a:	f7fd fa57 	bl	8008d4c <ucdr_buffer_alignment>
 800b89e:	4601      	mov	r1, r0
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	7d67      	ldrb	r7, [r4, #21]
 800b8a4:	f7fd fa96 	bl	8008dd4 <ucdr_advance_buffer>
 800b8a8:	2108      	movs	r1, #8
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7fd f9ee 	bl	8008c8c <ucdr_check_buffer_available_for>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d14d      	bne.n	800b950 <ucdr_serialize_uint64_t+0xc4>
 800b8b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b8b8:	42ab      	cmp	r3, r5
 800b8ba:	d944      	bls.n	800b946 <ucdr_serialize_uint64_t+0xba>
 800b8bc:	1b5e      	subs	r6, r3, r5
 800b8be:	60a3      	str	r3, [r4, #8]
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	f1c6 0808 	rsb	r8, r6, #8
 800b8c6:	4433      	add	r3, r6
 800b8c8:	6123      	str	r3, [r4, #16]
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7fd f9e9 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d072      	beq.n	800b9bc <ucdr_serialize_uint64_t+0x130>
 800b8d6:	7d23      	ldrb	r3, [r4, #20]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	f000 8092 	beq.w	800ba02 <ucdr_serialize_uint64_t+0x176>
 800b8de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b8e2:	702b      	strb	r3, [r5, #0]
 800b8e4:	2e01      	cmp	r6, #1
 800b8e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b8ea:	706b      	strb	r3, [r5, #1]
 800b8ec:	d073      	beq.n	800b9d6 <ucdr_serialize_uint64_t+0x14a>
 800b8ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b8f2:	70ab      	strb	r3, [r5, #2]
 800b8f4:	2e02      	cmp	r6, #2
 800b8f6:	d072      	beq.n	800b9de <ucdr_serialize_uint64_t+0x152>
 800b8f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b8fc:	70eb      	strb	r3, [r5, #3]
 800b8fe:	2e03      	cmp	r6, #3
 800b900:	d071      	beq.n	800b9e6 <ucdr_serialize_uint64_t+0x15a>
 800b902:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b906:	712b      	strb	r3, [r5, #4]
 800b908:	2e04      	cmp	r6, #4
 800b90a:	d070      	beq.n	800b9ee <ucdr_serialize_uint64_t+0x162>
 800b90c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b910:	716b      	strb	r3, [r5, #5]
 800b912:	2e05      	cmp	r6, #5
 800b914:	d06f      	beq.n	800b9f6 <ucdr_serialize_uint64_t+0x16a>
 800b916:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b91a:	71ab      	strb	r3, [r5, #6]
 800b91c:	2e06      	cmp	r6, #6
 800b91e:	d06e      	beq.n	800b9fe <ucdr_serialize_uint64_t+0x172>
 800b920:	3507      	adds	r5, #7
 800b922:	f89d 3000 	ldrb.w	r3, [sp]
 800b926:	702b      	strb	r3, [r5, #0]
 800b928:	6923      	ldr	r3, [r4, #16]
 800b92a:	68a2      	ldr	r2, [r4, #8]
 800b92c:	7da0      	ldrb	r0, [r4, #22]
 800b92e:	3308      	adds	r3, #8
 800b930:	4442      	add	r2, r8
 800b932:	1b9b      	subs	r3, r3, r6
 800b934:	2108      	movs	r1, #8
 800b936:	f080 0001 	eor.w	r0, r0, #1
 800b93a:	60a2      	str	r2, [r4, #8]
 800b93c:	6123      	str	r3, [r4, #16]
 800b93e:	7561      	strb	r1, [r4, #21]
 800b940:	b002      	add	sp, #8
 800b942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b946:	2108      	movs	r1, #8
 800b948:	4620      	mov	r0, r4
 800b94a:	f7fd f9ab 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800b94e:	b350      	cbz	r0, 800b9a6 <ucdr_serialize_uint64_t+0x11a>
 800b950:	7d22      	ldrb	r2, [r4, #20]
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	2a01      	cmp	r2, #1
 800b956:	d02c      	beq.n	800b9b2 <ucdr_serialize_uint64_t+0x126>
 800b958:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b964:	705a      	strb	r2, [r3, #1]
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b96c:	709a      	strb	r2, [r3, #2]
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b974:	70da      	strb	r2, [r3, #3]
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b97c:	711a      	strb	r2, [r3, #4]
 800b97e:	68a3      	ldr	r3, [r4, #8]
 800b980:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b984:	715a      	strb	r2, [r3, #5]
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b98c:	719a      	strb	r2, [r3, #6]
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	f89d 2000 	ldrb.w	r2, [sp]
 800b994:	71da      	strb	r2, [r3, #7]
 800b996:	68a2      	ldr	r2, [r4, #8]
 800b998:	6923      	ldr	r3, [r4, #16]
 800b99a:	3208      	adds	r2, #8
 800b99c:	3308      	adds	r3, #8
 800b99e:	2108      	movs	r1, #8
 800b9a0:	60a2      	str	r2, [r4, #8]
 800b9a2:	6123      	str	r3, [r4, #16]
 800b9a4:	7561      	strb	r1, [r4, #21]
 800b9a6:	7da0      	ldrb	r0, [r4, #22]
 800b9a8:	f080 0001 	eor.w	r0, r0, #1
 800b9ac:	b002      	add	sp, #8
 800b9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9b6:	6019      	str	r1, [r3, #0]
 800b9b8:	605a      	str	r2, [r3, #4]
 800b9ba:	e7ec      	b.n	800b996 <ucdr_serialize_uint64_t+0x10a>
 800b9bc:	68a2      	ldr	r2, [r4, #8]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	7da0      	ldrb	r0, [r4, #22]
 800b9c2:	7567      	strb	r7, [r4, #21]
 800b9c4:	1b92      	subs	r2, r2, r6
 800b9c6:	1b9b      	subs	r3, r3, r6
 800b9c8:	f080 0001 	eor.w	r0, r0, #1
 800b9cc:	60a2      	str	r2, [r4, #8]
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	b002      	add	sp, #8
 800b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	68a3      	ldr	r3, [r4, #8]
 800b9e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	68a3      	ldr	r3, [r4, #8]
 800b9f0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b9f4:	701a      	strb	r2, [r3, #0]
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	68a5      	ldr	r5, [r4, #8]
 800ba00:	e78f      	b.n	800b922 <ucdr_serialize_uint64_t+0x96>
 800ba02:	4628      	mov	r0, r5
 800ba04:	466d      	mov	r5, sp
 800ba06:	4632      	mov	r2, r6
 800ba08:	4629      	mov	r1, r5
 800ba0a:	f007 fc22 	bl	8013252 <memcpy>
 800ba0e:	68a0      	ldr	r0, [r4, #8]
 800ba10:	4642      	mov	r2, r8
 800ba12:	19a9      	adds	r1, r5, r6
 800ba14:	f007 fc1d 	bl	8013252 <memcpy>
 800ba18:	e786      	b.n	800b928 <ucdr_serialize_uint64_t+0x9c>
 800ba1a:	bf00      	nop

0800ba1c <ucdr_serialize_int16_t>:
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	460b      	mov	r3, r1
 800ba24:	2102      	movs	r1, #2
 800ba26:	4604      	mov	r4, r0
 800ba28:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ba2c:	f7fd f98e 	bl	8008d4c <ucdr_buffer_alignment>
 800ba30:	4601      	mov	r1, r0
 800ba32:	4620      	mov	r0, r4
 800ba34:	7d67      	ldrb	r7, [r4, #21]
 800ba36:	f7fd f9cd 	bl	8008dd4 <ucdr_advance_buffer>
 800ba3a:	2102      	movs	r1, #2
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7fd f925 	bl	8008c8c <ucdr_check_buffer_available_for>
 800ba42:	b1c0      	cbz	r0, 800ba76 <ucdr_serialize_int16_t+0x5a>
 800ba44:	7d22      	ldrb	r2, [r4, #20]
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	2a01      	cmp	r2, #1
 800ba4a:	d04e      	beq.n	800baea <ucdr_serialize_int16_t+0xce>
 800ba4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	68a3      	ldr	r3, [r4, #8]
 800ba54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba58:	705a      	strb	r2, [r3, #1]
 800ba5a:	68a2      	ldr	r2, [r4, #8]
 800ba5c:	6923      	ldr	r3, [r4, #16]
 800ba5e:	3202      	adds	r2, #2
 800ba60:	3302      	adds	r3, #2
 800ba62:	2102      	movs	r1, #2
 800ba64:	60a2      	str	r2, [r4, #8]
 800ba66:	6123      	str	r3, [r4, #16]
 800ba68:	7561      	strb	r1, [r4, #21]
 800ba6a:	7da0      	ldrb	r0, [r4, #22]
 800ba6c:	f080 0001 	eor.w	r0, r0, #1
 800ba70:	b002      	add	sp, #8
 800ba72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba76:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ba7a:	42ab      	cmp	r3, r5
 800ba7c:	d923      	bls.n	800bac6 <ucdr_serialize_int16_t+0xaa>
 800ba7e:	1b5e      	subs	r6, r3, r5
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	f1c6 0802 	rsb	r8, r6, #2
 800ba88:	4433      	add	r3, r6
 800ba8a:	6123      	str	r3, [r4, #16]
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f7fd f908 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800ba94:	b368      	cbz	r0, 800baf2 <ucdr_serialize_int16_t+0xd6>
 800ba96:	7d23      	ldrb	r3, [r4, #20]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d03b      	beq.n	800bb14 <ucdr_serialize_int16_t+0xf8>
 800ba9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800baa0:	702b      	strb	r3, [r5, #0]
 800baa2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800baa6:	706b      	strb	r3, [r5, #1]
 800baa8:	6923      	ldr	r3, [r4, #16]
 800baaa:	68a2      	ldr	r2, [r4, #8]
 800baac:	7da0      	ldrb	r0, [r4, #22]
 800baae:	3302      	adds	r3, #2
 800bab0:	4442      	add	r2, r8
 800bab2:	1b9b      	subs	r3, r3, r6
 800bab4:	2102      	movs	r1, #2
 800bab6:	f080 0001 	eor.w	r0, r0, #1
 800baba:	60a2      	str	r2, [r4, #8]
 800babc:	6123      	str	r3, [r4, #16]
 800babe:	7561      	strb	r1, [r4, #21]
 800bac0:	b002      	add	sp, #8
 800bac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac6:	2102      	movs	r1, #2
 800bac8:	4620      	mov	r0, r4
 800baca:	f7fd f8eb 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d0cb      	beq.n	800ba6a <ucdr_serialize_int16_t+0x4e>
 800bad2:	7d23      	ldrb	r3, [r4, #20]
 800bad4:	68a2      	ldr	r2, [r4, #8]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d018      	beq.n	800bb0c <ucdr_serialize_int16_t+0xf0>
 800bada:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bade:	7013      	strb	r3, [r2, #0]
 800bae0:	68a3      	ldr	r3, [r4, #8]
 800bae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bae6:	705a      	strb	r2, [r3, #1]
 800bae8:	e7b7      	b.n	800ba5a <ucdr_serialize_int16_t+0x3e>
 800baea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800baee:	801a      	strh	r2, [r3, #0]
 800baf0:	e7b3      	b.n	800ba5a <ucdr_serialize_int16_t+0x3e>
 800baf2:	68a2      	ldr	r2, [r4, #8]
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	7da0      	ldrb	r0, [r4, #22]
 800baf8:	7567      	strb	r7, [r4, #21]
 800bafa:	1b92      	subs	r2, r2, r6
 800bafc:	1b9b      	subs	r3, r3, r6
 800bafe:	f080 0001 	eor.w	r0, r0, #1
 800bb02:	60a2      	str	r2, [r4, #8]
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	b002      	add	sp, #8
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bb10:	8013      	strh	r3, [r2, #0]
 800bb12:	e7a2      	b.n	800ba5a <ucdr_serialize_int16_t+0x3e>
 800bb14:	4628      	mov	r0, r5
 800bb16:	f10d 0506 	add.w	r5, sp, #6
 800bb1a:	4632      	mov	r2, r6
 800bb1c:	4629      	mov	r1, r5
 800bb1e:	f007 fb98 	bl	8013252 <memcpy>
 800bb22:	68a0      	ldr	r0, [r4, #8]
 800bb24:	4642      	mov	r2, r8
 800bb26:	19a9      	adds	r1, r5, r6
 800bb28:	f007 fb93 	bl	8013252 <memcpy>
 800bb2c:	e7bc      	b.n	800baa8 <ucdr_serialize_int16_t+0x8c>
 800bb2e:	bf00      	nop

0800bb30 <ucdr_deserialize_int16_t>:
 800bb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb34:	460d      	mov	r5, r1
 800bb36:	2102      	movs	r1, #2
 800bb38:	4604      	mov	r4, r0
 800bb3a:	f7fd f907 	bl	8008d4c <ucdr_buffer_alignment>
 800bb3e:	4601      	mov	r1, r0
 800bb40:	4620      	mov	r0, r4
 800bb42:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb46:	f7fd f945 	bl	8008dd4 <ucdr_advance_buffer>
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7fd f89d 	bl	8008c8c <ucdr_check_buffer_available_for>
 800bb52:	b1a8      	cbz	r0, 800bb80 <ucdr_deserialize_int16_t+0x50>
 800bb54:	7d22      	ldrb	r2, [r4, #20]
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	2a01      	cmp	r2, #1
 800bb5a:	d046      	beq.n	800bbea <ucdr_deserialize_int16_t+0xba>
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	702b      	strb	r3, [r5, #0]
 800bb60:	68a3      	ldr	r3, [r4, #8]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	706b      	strb	r3, [r5, #1]
 800bb66:	68a2      	ldr	r2, [r4, #8]
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	3202      	adds	r2, #2
 800bb6c:	3302      	adds	r3, #2
 800bb6e:	2102      	movs	r1, #2
 800bb70:	60a2      	str	r2, [r4, #8]
 800bb72:	6123      	str	r3, [r4, #16]
 800bb74:	7561      	strb	r1, [r4, #21]
 800bb76:	7da0      	ldrb	r0, [r4, #22]
 800bb78:	f080 0001 	eor.w	r0, r0, #1
 800bb7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb80:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bb84:	42be      	cmp	r6, r7
 800bb86:	d920      	bls.n	800bbca <ucdr_deserialize_int16_t+0x9a>
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	60a6      	str	r6, [r4, #8]
 800bb8c:	1bf6      	subs	r6, r6, r7
 800bb8e:	4433      	add	r3, r6
 800bb90:	f1c6 0902 	rsb	r9, r6, #2
 800bb94:	6123      	str	r3, [r4, #16]
 800bb96:	4649      	mov	r1, r9
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f7fd f883 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bb9e:	b338      	cbz	r0, 800bbf0 <ucdr_deserialize_int16_t+0xc0>
 800bba0:	7d23      	ldrb	r3, [r4, #20]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d034      	beq.n	800bc10 <ucdr_deserialize_int16_t+0xe0>
 800bba6:	787b      	ldrb	r3, [r7, #1]
 800bba8:	702b      	strb	r3, [r5, #0]
 800bbaa:	783b      	ldrb	r3, [r7, #0]
 800bbac:	706b      	strb	r3, [r5, #1]
 800bbae:	6923      	ldr	r3, [r4, #16]
 800bbb0:	68a2      	ldr	r2, [r4, #8]
 800bbb2:	7da0      	ldrb	r0, [r4, #22]
 800bbb4:	2102      	movs	r1, #2
 800bbb6:	3302      	adds	r3, #2
 800bbb8:	444a      	add	r2, r9
 800bbba:	1b9b      	subs	r3, r3, r6
 800bbbc:	7561      	strb	r1, [r4, #21]
 800bbbe:	60a2      	str	r2, [r4, #8]
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	f080 0001 	eor.w	r0, r0, #1
 800bbc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbca:	2102      	movs	r1, #2
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f7fd f869 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0cf      	beq.n	800bb76 <ucdr_deserialize_int16_t+0x46>
 800bbd6:	7d23      	ldrb	r3, [r4, #20]
 800bbd8:	68a2      	ldr	r2, [r4, #8]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d015      	beq.n	800bc0a <ucdr_deserialize_int16_t+0xda>
 800bbde:	7853      	ldrb	r3, [r2, #1]
 800bbe0:	702b      	strb	r3, [r5, #0]
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	706b      	strb	r3, [r5, #1]
 800bbe8:	e7bd      	b.n	800bb66 <ucdr_deserialize_int16_t+0x36>
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	802b      	strh	r3, [r5, #0]
 800bbee:	e7ba      	b.n	800bb66 <ucdr_deserialize_int16_t+0x36>
 800bbf0:	68a2      	ldr	r2, [r4, #8]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	7da0      	ldrb	r0, [r4, #22]
 800bbf6:	f884 8015 	strb.w	r8, [r4, #21]
 800bbfa:	1b92      	subs	r2, r2, r6
 800bbfc:	1b9b      	subs	r3, r3, r6
 800bbfe:	60a2      	str	r2, [r4, #8]
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	f080 0001 	eor.w	r0, r0, #1
 800bc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	8813      	ldrh	r3, [r2, #0]
 800bc0c:	802b      	strh	r3, [r5, #0]
 800bc0e:	e7aa      	b.n	800bb66 <ucdr_deserialize_int16_t+0x36>
 800bc10:	4639      	mov	r1, r7
 800bc12:	4632      	mov	r2, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	f007 fb1c 	bl	8013252 <memcpy>
 800bc1a:	68a1      	ldr	r1, [r4, #8]
 800bc1c:	464a      	mov	r2, r9
 800bc1e:	19a8      	adds	r0, r5, r6
 800bc20:	f007 fb17 	bl	8013252 <memcpy>
 800bc24:	e7c3      	b.n	800bbae <ucdr_deserialize_int16_t+0x7e>
 800bc26:	bf00      	nop

0800bc28 <ucdr_serialize_int32_t>:
 800bc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	4604      	mov	r4, r0
 800bc30:	9101      	str	r1, [sp, #4]
 800bc32:	2104      	movs	r1, #4
 800bc34:	f7fd f88a 	bl	8008d4c <ucdr_buffer_alignment>
 800bc38:	4601      	mov	r1, r0
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	7d67      	ldrb	r7, [r4, #21]
 800bc3e:	f7fd f8c9 	bl	8008dd4 <ucdr_advance_buffer>
 800bc42:	2104      	movs	r1, #4
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7fd f821 	bl	8008c8c <ucdr_check_buffer_available_for>
 800bc4a:	b300      	cbz	r0, 800bc8e <ucdr_serialize_int32_t+0x66>
 800bc4c:	7d22      	ldrb	r2, [r4, #20]
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	2a01      	cmp	r2, #1
 800bc52:	d05d      	beq.n	800bd10 <ucdr_serialize_int32_t+0xe8>
 800bc54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc58:	701a      	strb	r2, [r3, #0]
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc60:	705a      	strb	r2, [r3, #1]
 800bc62:	68a3      	ldr	r3, [r4, #8]
 800bc64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc68:	709a      	strb	r2, [r3, #2]
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc70:	70da      	strb	r2, [r3, #3]
 800bc72:	68a2      	ldr	r2, [r4, #8]
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	3204      	adds	r2, #4
 800bc78:	3304      	adds	r3, #4
 800bc7a:	2104      	movs	r1, #4
 800bc7c:	60a2      	str	r2, [r4, #8]
 800bc7e:	6123      	str	r3, [r4, #16]
 800bc80:	7561      	strb	r1, [r4, #21]
 800bc82:	7da0      	ldrb	r0, [r4, #22]
 800bc84:	f080 0001 	eor.w	r0, r0, #1
 800bc88:	b002      	add	sp, #8
 800bc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc8e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc92:	42ab      	cmp	r3, r5
 800bc94:	d92e      	bls.n	800bcf4 <ucdr_serialize_int32_t+0xcc>
 800bc96:	1b5e      	subs	r6, r3, r5
 800bc98:	60a3      	str	r3, [r4, #8]
 800bc9a:	6923      	ldr	r3, [r4, #16]
 800bc9c:	f1c6 0804 	rsb	r8, r6, #4
 800bca0:	4433      	add	r3, r6
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	4641      	mov	r1, r8
 800bca6:	4620      	mov	r0, r4
 800bca8:	f7fc fffc 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bcac:	b398      	cbz	r0, 800bd16 <ucdr_serialize_int32_t+0xee>
 800bcae:	7d23      	ldrb	r3, [r4, #20]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d046      	beq.n	800bd42 <ucdr_serialize_int32_t+0x11a>
 800bcb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bcb8:	702b      	strb	r3, [r5, #0]
 800bcba:	2e01      	cmp	r6, #1
 800bcbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcc0:	706b      	strb	r3, [r5, #1]
 800bcc2:	d035      	beq.n	800bd30 <ucdr_serialize_int32_t+0x108>
 800bcc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bcc8:	70ab      	strb	r3, [r5, #2]
 800bcca:	2e02      	cmp	r6, #2
 800bccc:	d034      	beq.n	800bd38 <ucdr_serialize_int32_t+0x110>
 800bcce:	3503      	adds	r5, #3
 800bcd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bcd4:	702b      	strb	r3, [r5, #0]
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	68a2      	ldr	r2, [r4, #8]
 800bcda:	7da0      	ldrb	r0, [r4, #22]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	4442      	add	r2, r8
 800bce0:	1b9b      	subs	r3, r3, r6
 800bce2:	2104      	movs	r1, #4
 800bce4:	f080 0001 	eor.w	r0, r0, #1
 800bce8:	60a2      	str	r2, [r4, #8]
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	7561      	strb	r1, [r4, #21]
 800bcee:	b002      	add	sp, #8
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf4:	2104      	movs	r1, #4
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f7fc ffd4 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d0c0      	beq.n	800bc82 <ucdr_serialize_int32_t+0x5a>
 800bd00:	7d23      	ldrb	r3, [r4, #20]
 800bd02:	68a2      	ldr	r2, [r4, #8]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d019      	beq.n	800bd3c <ucdr_serialize_int32_t+0x114>
 800bd08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd0c:	7013      	strb	r3, [r2, #0]
 800bd0e:	e7a4      	b.n	800bc5a <ucdr_serialize_int32_t+0x32>
 800bd10:	9a01      	ldr	r2, [sp, #4]
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	e7ad      	b.n	800bc72 <ucdr_serialize_int32_t+0x4a>
 800bd16:	68a2      	ldr	r2, [r4, #8]
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	7da0      	ldrb	r0, [r4, #22]
 800bd1c:	7567      	strb	r7, [r4, #21]
 800bd1e:	1b92      	subs	r2, r2, r6
 800bd20:	1b9b      	subs	r3, r3, r6
 800bd22:	f080 0001 	eor.w	r0, r0, #1
 800bd26:	60a2      	str	r2, [r4, #8]
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	b002      	add	sp, #8
 800bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd30:	68a3      	ldr	r3, [r4, #8]
 800bd32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	68a5      	ldr	r5, [r4, #8]
 800bd3a:	e7c9      	b.n	800bcd0 <ucdr_serialize_int32_t+0xa8>
 800bd3c:	9b01      	ldr	r3, [sp, #4]
 800bd3e:	6013      	str	r3, [r2, #0]
 800bd40:	e797      	b.n	800bc72 <ucdr_serialize_int32_t+0x4a>
 800bd42:	4628      	mov	r0, r5
 800bd44:	ad01      	add	r5, sp, #4
 800bd46:	4632      	mov	r2, r6
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f007 fa82 	bl	8013252 <memcpy>
 800bd4e:	68a0      	ldr	r0, [r4, #8]
 800bd50:	4642      	mov	r2, r8
 800bd52:	19a9      	adds	r1, r5, r6
 800bd54:	f007 fa7d 	bl	8013252 <memcpy>
 800bd58:	e7bd      	b.n	800bcd6 <ucdr_serialize_int32_t+0xae>
 800bd5a:	bf00      	nop

0800bd5c <ucdr_deserialize_int32_t>:
 800bd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd60:	460d      	mov	r5, r1
 800bd62:	2104      	movs	r1, #4
 800bd64:	4604      	mov	r4, r0
 800bd66:	f7fc fff1 	bl	8008d4c <ucdr_buffer_alignment>
 800bd6a:	4601      	mov	r1, r0
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd72:	f7fd f82f 	bl	8008dd4 <ucdr_advance_buffer>
 800bd76:	2104      	movs	r1, #4
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f7fc ff87 	bl	8008c8c <ucdr_check_buffer_available_for>
 800bd7e:	b1d8      	cbz	r0, 800bdb8 <ucdr_deserialize_int32_t+0x5c>
 800bd80:	7d22      	ldrb	r2, [r4, #20]
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	2a01      	cmp	r2, #1
 800bd86:	d052      	beq.n	800be2e <ucdr_deserialize_int32_t+0xd2>
 800bd88:	78db      	ldrb	r3, [r3, #3]
 800bd8a:	702b      	strb	r3, [r5, #0]
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	789b      	ldrb	r3, [r3, #2]
 800bd90:	706b      	strb	r3, [r5, #1]
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	785b      	ldrb	r3, [r3, #1]
 800bd96:	70ab      	strb	r3, [r5, #2]
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	70eb      	strb	r3, [r5, #3]
 800bd9e:	68a2      	ldr	r2, [r4, #8]
 800bda0:	6923      	ldr	r3, [r4, #16]
 800bda2:	3204      	adds	r2, #4
 800bda4:	3304      	adds	r3, #4
 800bda6:	2104      	movs	r1, #4
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	7561      	strb	r1, [r4, #21]
 800bdae:	7da0      	ldrb	r0, [r4, #22]
 800bdb0:	f080 0001 	eor.w	r0, r0, #1
 800bdb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bdbc:	42b7      	cmp	r7, r6
 800bdbe:	d92a      	bls.n	800be16 <ucdr_deserialize_int32_t+0xba>
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	60a7      	str	r7, [r4, #8]
 800bdc4:	1bbf      	subs	r7, r7, r6
 800bdc6:	443b      	add	r3, r7
 800bdc8:	f1c7 0904 	rsb	r9, r7, #4
 800bdcc:	6123      	str	r3, [r4, #16]
 800bdce:	4649      	mov	r1, r9
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f7fc ff67 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bdd6:	b368      	cbz	r0, 800be34 <ucdr_deserialize_int32_t+0xd8>
 800bdd8:	7d23      	ldrb	r3, [r4, #20]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d040      	beq.n	800be60 <ucdr_deserialize_int32_t+0x104>
 800bdde:	78f3      	ldrb	r3, [r6, #3]
 800bde0:	702b      	strb	r3, [r5, #0]
 800bde2:	78b3      	ldrb	r3, [r6, #2]
 800bde4:	706b      	strb	r3, [r5, #1]
 800bde6:	2f01      	cmp	r7, #1
 800bde8:	d031      	beq.n	800be4e <ucdr_deserialize_int32_t+0xf2>
 800bdea:	7873      	ldrb	r3, [r6, #1]
 800bdec:	70ab      	strb	r3, [r5, #2]
 800bdee:	2f02      	cmp	r7, #2
 800bdf0:	f105 0503 	add.w	r5, r5, #3
 800bdf4:	d02f      	beq.n	800be56 <ucdr_deserialize_int32_t+0xfa>
 800bdf6:	7833      	ldrb	r3, [r6, #0]
 800bdf8:	702b      	strb	r3, [r5, #0]
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	68a2      	ldr	r2, [r4, #8]
 800bdfe:	7da0      	ldrb	r0, [r4, #22]
 800be00:	2104      	movs	r1, #4
 800be02:	3304      	adds	r3, #4
 800be04:	444a      	add	r2, r9
 800be06:	1bdb      	subs	r3, r3, r7
 800be08:	7561      	strb	r1, [r4, #21]
 800be0a:	60a2      	str	r2, [r4, #8]
 800be0c:	6123      	str	r3, [r4, #16]
 800be0e:	f080 0001 	eor.w	r0, r0, #1
 800be12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be16:	2104      	movs	r1, #4
 800be18:	4620      	mov	r0, r4
 800be1a:	f7fc ff43 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d0c5      	beq.n	800bdae <ucdr_deserialize_int32_t+0x52>
 800be22:	7d23      	ldrb	r3, [r4, #20]
 800be24:	68a2      	ldr	r2, [r4, #8]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d017      	beq.n	800be5a <ucdr_deserialize_int32_t+0xfe>
 800be2a:	78d3      	ldrb	r3, [r2, #3]
 800be2c:	e7ad      	b.n	800bd8a <ucdr_deserialize_int32_t+0x2e>
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	e7b4      	b.n	800bd9e <ucdr_deserialize_int32_t+0x42>
 800be34:	68a2      	ldr	r2, [r4, #8]
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	7da0      	ldrb	r0, [r4, #22]
 800be3a:	f884 8015 	strb.w	r8, [r4, #21]
 800be3e:	1bd2      	subs	r2, r2, r7
 800be40:	1bdb      	subs	r3, r3, r7
 800be42:	60a2      	str	r2, [r4, #8]
 800be44:	6123      	str	r3, [r4, #16]
 800be46:	f080 0001 	eor.w	r0, r0, #1
 800be4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4e:	68a3      	ldr	r3, [r4, #8]
 800be50:	785b      	ldrb	r3, [r3, #1]
 800be52:	70ab      	strb	r3, [r5, #2]
 800be54:	3503      	adds	r5, #3
 800be56:	68a6      	ldr	r6, [r4, #8]
 800be58:	e7cd      	b.n	800bdf6 <ucdr_deserialize_int32_t+0x9a>
 800be5a:	6813      	ldr	r3, [r2, #0]
 800be5c:	602b      	str	r3, [r5, #0]
 800be5e:	e79e      	b.n	800bd9e <ucdr_deserialize_int32_t+0x42>
 800be60:	4631      	mov	r1, r6
 800be62:	463a      	mov	r2, r7
 800be64:	4628      	mov	r0, r5
 800be66:	f007 f9f4 	bl	8013252 <memcpy>
 800be6a:	68a1      	ldr	r1, [r4, #8]
 800be6c:	464a      	mov	r2, r9
 800be6e:	19e8      	adds	r0, r5, r7
 800be70:	f007 f9ef 	bl	8013252 <memcpy>
 800be74:	e7c1      	b.n	800bdfa <ucdr_deserialize_int32_t+0x9e>
 800be76:	bf00      	nop

0800be78 <ucdr_serialize_endian_double>:
 800be78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be7c:	460e      	mov	r6, r1
 800be7e:	b083      	sub	sp, #12
 800be80:	2108      	movs	r1, #8
 800be82:	4604      	mov	r4, r0
 800be84:	ed8d 0b00 	vstr	d0, [sp]
 800be88:	f7fc ff60 	bl	8008d4c <ucdr_buffer_alignment>
 800be8c:	4601      	mov	r1, r0
 800be8e:	4620      	mov	r0, r4
 800be90:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be94:	f7fc ff9e 	bl	8008dd4 <ucdr_advance_buffer>
 800be98:	2108      	movs	r1, #8
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7fc fef6 	bl	8008c8c <ucdr_check_buffer_available_for>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d14c      	bne.n	800bf3e <ucdr_serialize_endian_double+0xc6>
 800bea4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800bea8:	42bd      	cmp	r5, r7
 800beaa:	d943      	bls.n	800bf34 <ucdr_serialize_endian_double+0xbc>
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	60a5      	str	r5, [r4, #8]
 800beb0:	1bed      	subs	r5, r5, r7
 800beb2:	442b      	add	r3, r5
 800beb4:	f1c5 0908 	rsb	r9, r5, #8
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	4649      	mov	r1, r9
 800bebc:	4620      	mov	r0, r4
 800bebe:	f7fc fef1 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d070      	beq.n	800bfa8 <ucdr_serialize_endian_double+0x130>
 800bec6:	2e01      	cmp	r6, #1
 800bec8:	f000 8092 	beq.w	800bff0 <ucdr_serialize_endian_double+0x178>
 800becc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bed0:	703b      	strb	r3, [r7, #0]
 800bed2:	2d01      	cmp	r5, #1
 800bed4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bed8:	707b      	strb	r3, [r7, #1]
 800beda:	d073      	beq.n	800bfc4 <ucdr_serialize_endian_double+0x14c>
 800bedc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bee0:	70bb      	strb	r3, [r7, #2]
 800bee2:	2d02      	cmp	r5, #2
 800bee4:	d072      	beq.n	800bfcc <ucdr_serialize_endian_double+0x154>
 800bee6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800beea:	70fb      	strb	r3, [r7, #3]
 800beec:	2d03      	cmp	r5, #3
 800beee:	d071      	beq.n	800bfd4 <ucdr_serialize_endian_double+0x15c>
 800bef0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bef4:	713b      	strb	r3, [r7, #4]
 800bef6:	2d04      	cmp	r5, #4
 800bef8:	d070      	beq.n	800bfdc <ucdr_serialize_endian_double+0x164>
 800befa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800befe:	717b      	strb	r3, [r7, #5]
 800bf00:	2d05      	cmp	r5, #5
 800bf02:	d06f      	beq.n	800bfe4 <ucdr_serialize_endian_double+0x16c>
 800bf04:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bf08:	71bb      	strb	r3, [r7, #6]
 800bf0a:	2d06      	cmp	r5, #6
 800bf0c:	d06e      	beq.n	800bfec <ucdr_serialize_endian_double+0x174>
 800bf0e:	3707      	adds	r7, #7
 800bf10:	f89d 3000 	ldrb.w	r3, [sp]
 800bf14:	703b      	strb	r3, [r7, #0]
 800bf16:	6923      	ldr	r3, [r4, #16]
 800bf18:	68a2      	ldr	r2, [r4, #8]
 800bf1a:	7da0      	ldrb	r0, [r4, #22]
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	444a      	add	r2, r9
 800bf20:	1b5b      	subs	r3, r3, r5
 800bf22:	2108      	movs	r1, #8
 800bf24:	f080 0001 	eor.w	r0, r0, #1
 800bf28:	60a2      	str	r2, [r4, #8]
 800bf2a:	6123      	str	r3, [r4, #16]
 800bf2c:	7561      	strb	r1, [r4, #21]
 800bf2e:	b003      	add	sp, #12
 800bf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf34:	2108      	movs	r1, #8
 800bf36:	4620      	mov	r0, r4
 800bf38:	f7fc feb4 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800bf3c:	b348      	cbz	r0, 800bf92 <ucdr_serialize_endian_double+0x11a>
 800bf3e:	2e01      	cmp	r6, #1
 800bf40:	68a3      	ldr	r3, [r4, #8]
 800bf42:	d02c      	beq.n	800bf9e <ucdr_serialize_endian_double+0x126>
 800bf44:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf50:	705a      	strb	r2, [r3, #1]
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf58:	709a      	strb	r2, [r3, #2]
 800bf5a:	68a3      	ldr	r3, [r4, #8]
 800bf5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf60:	70da      	strb	r2, [r3, #3]
 800bf62:	68a3      	ldr	r3, [r4, #8]
 800bf64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf68:	711a      	strb	r2, [r3, #4]
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf70:	715a      	strb	r2, [r3, #5]
 800bf72:	68a3      	ldr	r3, [r4, #8]
 800bf74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf78:	719a      	strb	r2, [r3, #6]
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	f89d 2000 	ldrb.w	r2, [sp]
 800bf80:	71da      	strb	r2, [r3, #7]
 800bf82:	68a2      	ldr	r2, [r4, #8]
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	3208      	adds	r2, #8
 800bf88:	3308      	adds	r3, #8
 800bf8a:	2108      	movs	r1, #8
 800bf8c:	60a2      	str	r2, [r4, #8]
 800bf8e:	6123      	str	r3, [r4, #16]
 800bf90:	7561      	strb	r1, [r4, #21]
 800bf92:	7da0      	ldrb	r0, [r4, #22]
 800bf94:	f080 0001 	eor.w	r0, r0, #1
 800bf98:	b003      	add	sp, #12
 800bf9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfa2:	6019      	str	r1, [r3, #0]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	e7ec      	b.n	800bf82 <ucdr_serialize_endian_double+0x10a>
 800bfa8:	68a2      	ldr	r2, [r4, #8]
 800bfaa:	6923      	ldr	r3, [r4, #16]
 800bfac:	7da0      	ldrb	r0, [r4, #22]
 800bfae:	f884 8015 	strb.w	r8, [r4, #21]
 800bfb2:	1b52      	subs	r2, r2, r5
 800bfb4:	1b5b      	subs	r3, r3, r5
 800bfb6:	f080 0001 	eor.w	r0, r0, #1
 800bfba:	60a2      	str	r2, [r4, #8]
 800bfbc:	6123      	str	r3, [r4, #16]
 800bfbe:	b003      	add	sp, #12
 800bfc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	68a3      	ldr	r3, [r4, #8]
 800bfce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bfd2:	701a      	strb	r2, [r3, #0]
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bfda:	701a      	strb	r2, [r3, #0]
 800bfdc:	68a3      	ldr	r3, [r4, #8]
 800bfde:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bfe2:	701a      	strb	r2, [r3, #0]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bfea:	701a      	strb	r2, [r3, #0]
 800bfec:	68a7      	ldr	r7, [r4, #8]
 800bfee:	e78f      	b.n	800bf10 <ucdr_serialize_endian_double+0x98>
 800bff0:	466e      	mov	r6, sp
 800bff2:	462a      	mov	r2, r5
 800bff4:	4631      	mov	r1, r6
 800bff6:	4638      	mov	r0, r7
 800bff8:	f007 f92b 	bl	8013252 <memcpy>
 800bffc:	68a0      	ldr	r0, [r4, #8]
 800bffe:	464a      	mov	r2, r9
 800c000:	1971      	adds	r1, r6, r5
 800c002:	f007 f926 	bl	8013252 <memcpy>
 800c006:	e786      	b.n	800bf16 <ucdr_serialize_endian_double+0x9e>

0800c008 <ucdr_deserialize_endian_double>:
 800c008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c00c:	460f      	mov	r7, r1
 800c00e:	2108      	movs	r1, #8
 800c010:	4604      	mov	r4, r0
 800c012:	4615      	mov	r5, r2
 800c014:	f7fc fe9a 	bl	8008d4c <ucdr_buffer_alignment>
 800c018:	4601      	mov	r1, r0
 800c01a:	4620      	mov	r0, r4
 800c01c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c020:	f7fc fed8 	bl	8008dd4 <ucdr_advance_buffer>
 800c024:	2108      	movs	r1, #8
 800c026:	4620      	mov	r0, r4
 800c028:	f7fc fe30 	bl	8008c8c <ucdr_check_buffer_available_for>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d14f      	bne.n	800c0d0 <ucdr_deserialize_endian_double+0xc8>
 800c030:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c034:	4546      	cmp	r6, r8
 800c036:	d946      	bls.n	800c0c6 <ucdr_deserialize_endian_double+0xbe>
 800c038:	6923      	ldr	r3, [r4, #16]
 800c03a:	60a6      	str	r6, [r4, #8]
 800c03c:	eba6 0608 	sub.w	r6, r6, r8
 800c040:	4433      	add	r3, r6
 800c042:	f1c6 0a08 	rsb	sl, r6, #8
 800c046:	6123      	str	r3, [r4, #16]
 800c048:	4651      	mov	r1, sl
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7fc fe2a 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800c050:	2800      	cmp	r0, #0
 800c052:	d069      	beq.n	800c128 <ucdr_deserialize_endian_double+0x120>
 800c054:	2f01      	cmp	r7, #1
 800c056:	f000 808b 	beq.w	800c170 <ucdr_deserialize_endian_double+0x168>
 800c05a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c05e:	702b      	strb	r3, [r5, #0]
 800c060:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c064:	706b      	strb	r3, [r5, #1]
 800c066:	2e01      	cmp	r6, #1
 800c068:	d06b      	beq.n	800c142 <ucdr_deserialize_endian_double+0x13a>
 800c06a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c06e:	70ab      	strb	r3, [r5, #2]
 800c070:	2e02      	cmp	r6, #2
 800c072:	f000 808e 	beq.w	800c192 <ucdr_deserialize_endian_double+0x18a>
 800c076:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c07a:	70eb      	strb	r3, [r5, #3]
 800c07c:	2e03      	cmp	r6, #3
 800c07e:	f000 8086 	beq.w	800c18e <ucdr_deserialize_endian_double+0x186>
 800c082:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c086:	712b      	strb	r3, [r5, #4]
 800c088:	2e04      	cmp	r6, #4
 800c08a:	d07e      	beq.n	800c18a <ucdr_deserialize_endian_double+0x182>
 800c08c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c090:	716b      	strb	r3, [r5, #5]
 800c092:	2e05      	cmp	r6, #5
 800c094:	d077      	beq.n	800c186 <ucdr_deserialize_endian_double+0x17e>
 800c096:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c09a:	71ab      	strb	r3, [r5, #6]
 800c09c:	2e06      	cmp	r6, #6
 800c09e:	f105 0507 	add.w	r5, r5, #7
 800c0a2:	d062      	beq.n	800c16a <ucdr_deserialize_endian_double+0x162>
 800c0a4:	f898 3000 	ldrb.w	r3, [r8]
 800c0a8:	702b      	strb	r3, [r5, #0]
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	68a2      	ldr	r2, [r4, #8]
 800c0ae:	7da0      	ldrb	r0, [r4, #22]
 800c0b0:	2108      	movs	r1, #8
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	4452      	add	r2, sl
 800c0b6:	1b9b      	subs	r3, r3, r6
 800c0b8:	7561      	strb	r1, [r4, #21]
 800c0ba:	60a2      	str	r2, [r4, #8]
 800c0bc:	6123      	str	r3, [r4, #16]
 800c0be:	f080 0001 	eor.w	r0, r0, #1
 800c0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c6:	2108      	movs	r1, #8
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f7fc fdeb 	bl	8008ca4 <ucdr_check_final_buffer_behavior>
 800c0ce:	b308      	cbz	r0, 800c114 <ucdr_deserialize_endian_double+0x10c>
 800c0d0:	2f01      	cmp	r7, #1
 800c0d2:	68a3      	ldr	r3, [r4, #8]
 800c0d4:	d023      	beq.n	800c11e <ucdr_deserialize_endian_double+0x116>
 800c0d6:	79db      	ldrb	r3, [r3, #7]
 800c0d8:	702b      	strb	r3, [r5, #0]
 800c0da:	68a3      	ldr	r3, [r4, #8]
 800c0dc:	799b      	ldrb	r3, [r3, #6]
 800c0de:	706b      	strb	r3, [r5, #1]
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	795b      	ldrb	r3, [r3, #5]
 800c0e4:	70ab      	strb	r3, [r5, #2]
 800c0e6:	68a3      	ldr	r3, [r4, #8]
 800c0e8:	791b      	ldrb	r3, [r3, #4]
 800c0ea:	70eb      	strb	r3, [r5, #3]
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	78db      	ldrb	r3, [r3, #3]
 800c0f0:	712b      	strb	r3, [r5, #4]
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	789b      	ldrb	r3, [r3, #2]
 800c0f6:	716b      	strb	r3, [r5, #5]
 800c0f8:	68a3      	ldr	r3, [r4, #8]
 800c0fa:	785b      	ldrb	r3, [r3, #1]
 800c0fc:	71ab      	strb	r3, [r5, #6]
 800c0fe:	68a3      	ldr	r3, [r4, #8]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	71eb      	strb	r3, [r5, #7]
 800c104:	68a2      	ldr	r2, [r4, #8]
 800c106:	6923      	ldr	r3, [r4, #16]
 800c108:	3208      	adds	r2, #8
 800c10a:	3308      	adds	r3, #8
 800c10c:	2108      	movs	r1, #8
 800c10e:	60a2      	str	r2, [r4, #8]
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	7561      	strb	r1, [r4, #21]
 800c114:	7da0      	ldrb	r0, [r4, #22]
 800c116:	f080 0001 	eor.w	r0, r0, #1
 800c11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	606b      	str	r3, [r5, #4]
 800c124:	602a      	str	r2, [r5, #0]
 800c126:	e7ed      	b.n	800c104 <ucdr_deserialize_endian_double+0xfc>
 800c128:	68a2      	ldr	r2, [r4, #8]
 800c12a:	6923      	ldr	r3, [r4, #16]
 800c12c:	7da0      	ldrb	r0, [r4, #22]
 800c12e:	f884 9015 	strb.w	r9, [r4, #21]
 800c132:	1b92      	subs	r2, r2, r6
 800c134:	1b9b      	subs	r3, r3, r6
 800c136:	60a2      	str	r2, [r4, #8]
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	f080 0001 	eor.w	r0, r0, #1
 800c13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c142:	68a3      	ldr	r3, [r4, #8]
 800c144:	795b      	ldrb	r3, [r3, #5]
 800c146:	70ab      	strb	r3, [r5, #2]
 800c148:	3503      	adds	r5, #3
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	791b      	ldrb	r3, [r3, #4]
 800c14e:	f805 3b01 	strb.w	r3, [r5], #1
 800c152:	68a3      	ldr	r3, [r4, #8]
 800c154:	78db      	ldrb	r3, [r3, #3]
 800c156:	f805 3b01 	strb.w	r3, [r5], #1
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	789b      	ldrb	r3, [r3, #2]
 800c15e:	f805 3b01 	strb.w	r3, [r5], #1
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	785b      	ldrb	r3, [r3, #1]
 800c166:	f805 3b01 	strb.w	r3, [r5], #1
 800c16a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c16e:	e799      	b.n	800c0a4 <ucdr_deserialize_endian_double+0x9c>
 800c170:	4641      	mov	r1, r8
 800c172:	4632      	mov	r2, r6
 800c174:	4628      	mov	r0, r5
 800c176:	f007 f86c 	bl	8013252 <memcpy>
 800c17a:	68a1      	ldr	r1, [r4, #8]
 800c17c:	4652      	mov	r2, sl
 800c17e:	19a8      	adds	r0, r5, r6
 800c180:	f007 f867 	bl	8013252 <memcpy>
 800c184:	e791      	b.n	800c0aa <ucdr_deserialize_endian_double+0xa2>
 800c186:	3506      	adds	r5, #6
 800c188:	e7eb      	b.n	800c162 <ucdr_deserialize_endian_double+0x15a>
 800c18a:	3505      	adds	r5, #5
 800c18c:	e7e5      	b.n	800c15a <ucdr_deserialize_endian_double+0x152>
 800c18e:	3504      	adds	r5, #4
 800c190:	e7df      	b.n	800c152 <ucdr_deserialize_endian_double+0x14a>
 800c192:	3503      	adds	r5, #3
 800c194:	e7d9      	b.n	800c14a <ucdr_deserialize_endian_double+0x142>
 800c196:	bf00      	nop

0800c198 <uxr_buffer_delete_entity>:
 800c198:	b510      	push	{r4, lr}
 800c19a:	2300      	movs	r3, #0
 800c19c:	b08e      	sub	sp, #56	@ 0x38
 800c19e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	2204      	movs	r2, #4
 800c1a8:	ab06      	add	r3, sp, #24
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	f001 f9de 	bl	800d56c <uxr_prepare_stream_to_write_submessage>
 800c1b0:	b918      	cbnz	r0, 800c1ba <uxr_buffer_delete_entity+0x22>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	b00e      	add	sp, #56	@ 0x38
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	9902      	ldr	r1, [sp, #8]
 800c1bc:	aa05      	add	r2, sp, #20
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f001 fb0e 	bl	800d7e0 <uxr_init_base_object_request>
 800c1c4:	a905      	add	r1, sp, #20
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	a806      	add	r0, sp, #24
 800c1ca:	f003 f893 	bl	800f2f4 <uxr_serialize_DELETE_Payload>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	b00e      	add	sp, #56	@ 0x38
 800c1d2:	bd10      	pop	{r4, pc}

0800c1d4 <uxr_common_create_entity>:
 800c1d4:	b510      	push	{r4, lr}
 800c1d6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c1da:	b08c      	sub	sp, #48	@ 0x30
 800c1dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c1e0:	f1bc 0f01 	cmp.w	ip, #1
 800c1e4:	bf08      	it	eq
 800c1e6:	f003 0201 	andeq.w	r2, r3, #1
 800c1ea:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c1ee:	bf18      	it	ne
 800c1f0:	2200      	movne	r2, #0
 800c1f2:	330e      	adds	r3, #14
 800c1f4:	441a      	add	r2, r3
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e9cd 3100 	strd	r3, r1, [sp]
 800c1fc:	b292      	uxth	r2, r2
 800c1fe:	9903      	ldr	r1, [sp, #12]
 800c200:	ab04      	add	r3, sp, #16
 800c202:	4604      	mov	r4, r0
 800c204:	f001 f9b2 	bl	800d56c <uxr_prepare_stream_to_write_submessage>
 800c208:	b918      	cbnz	r0, 800c212 <uxr_common_create_entity+0x3e>
 800c20a:	4604      	mov	r4, r0
 800c20c:	4620      	mov	r0, r4
 800c20e:	b00c      	add	sp, #48	@ 0x30
 800c210:	bd10      	pop	{r4, pc}
 800c212:	9902      	ldr	r1, [sp, #8]
 800c214:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c216:	4620      	mov	r0, r4
 800c218:	f001 fae2 	bl	800d7e0 <uxr_init_base_object_request>
 800c21c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c21e:	4604      	mov	r4, r0
 800c220:	a804      	add	r0, sp, #16
 800c222:	f002 ffc5 	bl	800f1b0 <uxr_serialize_CREATE_Payload>
 800c226:	4620      	mov	r0, r4
 800c228:	b00c      	add	sp, #48	@ 0x30
 800c22a:	bd10      	pop	{r4, pc}

0800c22c <uxr_buffer_create_participant_bin>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c232:	ac11      	add	r4, sp, #68	@ 0x44
 800c234:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c238:	2303      	movs	r3, #3
 800c23a:	7223      	strb	r3, [r4, #8]
 800c23c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c23e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c242:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c246:	2201      	movs	r2, #1
 800c248:	2100      	movs	r1, #0
 800c24a:	4605      	mov	r5, r0
 800c24c:	7122      	strb	r2, [r4, #4]
 800c24e:	f88d 1014 	strb.w	r1, [sp, #20]
 800c252:	b1cb      	cbz	r3, 800c288 <uxr_buffer_create_participant_bin+0x5c>
 800c254:	f88d 201c 	strb.w	r2, [sp, #28]
 800c258:	9308      	str	r3, [sp, #32]
 800c25a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c25e:	a915      	add	r1, sp, #84	@ 0x54
 800c260:	a809      	add	r0, sp, #36	@ 0x24
 800c262:	f7fc fd67 	bl	8008d34 <ucdr_init_buffer>
 800c266:	a905      	add	r1, sp, #20
 800c268:	a809      	add	r0, sp, #36	@ 0x24
 800c26a:	f002 fc97 	bl	800eb9c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c26e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c270:	9600      	str	r6, [sp, #0]
 800c272:	9401      	str	r4, [sp, #4]
 800c274:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c278:	60e3      	str	r3, [r4, #12]
 800c27a:	4628      	mov	r0, r5
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	f7ff ffa9 	bl	800c1d4 <uxr_common_create_entity>
 800c282:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c286:	bd70      	pop	{r4, r5, r6, pc}
 800c288:	f88d 301c 	strb.w	r3, [sp, #28]
 800c28c:	e7e5      	b.n	800c25a <uxr_buffer_create_participant_bin+0x2e>
 800c28e:	bf00      	nop

0800c290 <uxr_buffer_create_topic_bin>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c296:	4605      	mov	r5, r0
 800c298:	9105      	str	r1, [sp, #20]
 800c29a:	4618      	mov	r0, r3
 800c29c:	a997      	add	r1, sp, #604	@ 0x25c
 800c29e:	2302      	movs	r3, #2
 800c2a0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c2a4:	9204      	str	r2, [sp, #16]
 800c2a6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c2aa:	f000 f99b 	bl	800c5e4 <uxr_object_id_to_raw>
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c2b4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c2b6:	9306      	str	r3, [sp, #24]
 800c2b8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c2c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	a917      	add	r1, sp, #92	@ 0x5c
 800c2ca:	a80b      	add	r0, sp, #44	@ 0x2c
 800c2cc:	f88d 301c 	strb.w	r3, [sp, #28]
 800c2d0:	f7fc fd30 	bl	8008d34 <ucdr_init_buffer>
 800c2d4:	a906      	add	r1, sp, #24
 800c2d6:	a80b      	add	r0, sp, #44	@ 0x2c
 800c2d8:	f002 fc82 	bl	800ebe0 <uxr_serialize_OBJK_Topic_Binary>
 800c2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2de:	9316      	str	r3, [sp, #88]	@ 0x58
 800c2e0:	ac13      	add	r4, sp, #76	@ 0x4c
 800c2e2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c2e6:	9600      	str	r6, [sp, #0]
 800c2e8:	9401      	str	r4, [sp, #4]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f7ff ff71 	bl	800c1d4 <uxr_common_create_entity>
 800c2f2:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}

0800c2f8 <uxr_buffer_create_publisher_bin>:
 800c2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c2fe:	4605      	mov	r5, r0
 800c300:	9105      	str	r1, [sp, #20]
 800c302:	4618      	mov	r0, r3
 800c304:	2603      	movs	r6, #3
 800c306:	a992      	add	r1, sp, #584	@ 0x248
 800c308:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c30c:	9204      	str	r2, [sp, #16]
 800c30e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c312:	f000 f967 	bl	800c5e4 <uxr_object_id_to_raw>
 800c316:	2300      	movs	r3, #0
 800c318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c31c:	a912      	add	r1, sp, #72	@ 0x48
 800c31e:	a806      	add	r0, sp, #24
 800c320:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c324:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c328:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c32c:	f7fc fd02 	bl	8008d34 <ucdr_init_buffer>
 800c330:	a993      	add	r1, sp, #588	@ 0x24c
 800c332:	a806      	add	r0, sp, #24
 800c334:	f002 fd0a 	bl	800ed4c <uxr_serialize_OBJK_Publisher_Binary>
 800c338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c33a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c33c:	ac0e      	add	r4, sp, #56	@ 0x38
 800c33e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c342:	9700      	str	r7, [sp, #0]
 800c344:	9401      	str	r4, [sp, #4]
 800c346:	b29b      	uxth	r3, r3
 800c348:	4628      	mov	r0, r5
 800c34a:	f7ff ff43 	bl	800c1d4 <uxr_common_create_entity>
 800c34e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c354 <uxr_buffer_create_datawriter_bin>:
 800c354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c356:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c35a:	ac1d      	add	r4, sp, #116	@ 0x74
 800c35c:	9105      	str	r1, [sp, #20]
 800c35e:	4605      	mov	r5, r0
 800c360:	a9a1      	add	r1, sp, #644	@ 0x284
 800c362:	4618      	mov	r0, r3
 800c364:	2305      	movs	r3, #5
 800c366:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800c36a:	9204      	str	r2, [sp, #16]
 800c36c:	7123      	strb	r3, [r4, #4]
 800c36e:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800c372:	f000 f937 	bl	800c5e4 <uxr_object_id_to_raw>
 800c376:	2303      	movs	r3, #3
 800c378:	a90e      	add	r1, sp, #56	@ 0x38
 800c37a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c37c:	7223      	strb	r3, [r4, #8]
 800c37e:	f000 f931 	bl	800c5e4 <uxr_object_id_to_raw>
 800c382:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800c386:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c38a:	2200      	movs	r2, #0
 800c38c:	3f00      	subs	r7, #0
 800c38e:	fab3 f383 	clz	r3, r3
 800c392:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800c396:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c39a:	bf18      	it	ne
 800c39c:	2701      	movne	r7, #1
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c3a4:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c3a8:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c3b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c3b6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c3ba:	b919      	cbnz	r1, 800c3c4 <uxr_buffer_create_datawriter_bin+0x70>
 800c3bc:	f043 0302 	orr.w	r3, r3, #2
 800c3c0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c3c4:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800c3c8:	2a01      	cmp	r2, #1
 800c3ca:	d022      	beq.n	800c412 <uxr_buffer_create_datawriter_bin+0xbe>
 800c3cc:	2a03      	cmp	r2, #3
 800c3ce:	d01b      	beq.n	800c408 <uxr_buffer_create_datawriter_bin+0xb4>
 800c3d0:	b91a      	cbnz	r2, 800c3da <uxr_buffer_create_datawriter_bin+0x86>
 800c3d2:	f043 0308 	orr.w	r3, r3, #8
 800c3d6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c3da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3de:	a921      	add	r1, sp, #132	@ 0x84
 800c3e0:	a806      	add	r0, sp, #24
 800c3e2:	f7fc fca7 	bl	8008d34 <ucdr_init_buffer>
 800c3e6:	a90e      	add	r1, sp, #56	@ 0x38
 800c3e8:	a806      	add	r0, sp, #24
 800c3ea:	f002 fd15 	bl	800ee18 <uxr_serialize_OBJK_DataWriter_Binary>
 800c3ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3f0:	9600      	str	r6, [sp, #0]
 800c3f2:	9401      	str	r4, [sp, #4]
 800c3f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c3f8:	60e3      	str	r3, [r4, #12]
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	f7ff fee9 	bl	800c1d4 <uxr_common_create_entity>
 800c402:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c408:	f043 0320 	orr.w	r3, r3, #32
 800c40c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c410:	e7e3      	b.n	800c3da <uxr_buffer_create_datawriter_bin+0x86>
 800c412:	f043 0310 	orr.w	r3, r3, #16
 800c416:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c41a:	e7de      	b.n	800c3da <uxr_buffer_create_datawriter_bin+0x86>

0800c41c <get_custom_error>:
 800c41c:	4b01      	ldr	r3, [pc, #4]	@ (800c424 <get_custom_error+0x8>)
 800c41e:	7818      	ldrb	r0, [r3, #0]
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20010a8e 	.word	0x20010a8e

0800c428 <recv_custom_msg>:
 800c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42c:	b089      	sub	sp, #36	@ 0x24
 800c42e:	4693      	mov	fp, r2
 800c430:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800c434:	9104      	str	r1, [sp, #16]
 800c436:	2100      	movs	r1, #0
 800c438:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800c43c:	9305      	str	r3, [sp, #20]
 800c43e:	4604      	mov	r4, r0
 800c440:	f88d 101e 	strb.w	r1, [sp, #30]
 800c444:	b332      	cbz	r2, 800c494 <recv_custom_msg+0x6c>
 800c446:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800c44a:	f10d 091f 	add.w	r9, sp, #31
 800c44e:	f10d 0814 	add.w	r8, sp, #20
 800c452:	f10d 071e 	add.w	r7, sp, #30
 800c456:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800c45a:	e004      	b.n	800c466 <recv_custom_msg+0x3e>
 800c45c:	9b05      	ldr	r3, [sp, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	dd10      	ble.n	800c484 <recv_custom_msg+0x5c>
 800c462:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800c466:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c46a:	e9cd 6700 	strd	r6, r7, [sp]
 800c46e:	4623      	mov	r3, r4
 800c470:	4622      	mov	r2, r4
 800c472:	4629      	mov	r1, r5
 800c474:	4650      	mov	r0, sl
 800c476:	f001 fbc5 	bl	800dc04 <uxr_read_framed_msg>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d0ee      	beq.n	800c45c <recv_custom_msg+0x34>
 800c47e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c482:	b1a3      	cbz	r3, 800c4ae <recv_custom_msg+0x86>
 800c484:	4b0e      	ldr	r3, [pc, #56]	@ (800c4c0 <recv_custom_msg+0x98>)
 800c486:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c48a:	701a      	strb	r2, [r3, #0]
 800c48c:	2000      	movs	r0, #0
 800c48e:	b009      	add	sp, #36	@ 0x24
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c494:	f10d 021f 	add.w	r2, sp, #31
 800c498:	9200      	str	r2, [sp, #0]
 800c49a:	4601      	mov	r1, r0
 800c49c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4a0:	47a8      	blx	r5
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d0ee      	beq.n	800c484 <recv_custom_msg+0x5c>
 800c4a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1ea      	bne.n	800c484 <recv_custom_msg+0x5c>
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	f8cb 0000 	str.w	r0, [fp]
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	601c      	str	r4, [r3, #0]
 800c4b8:	b009      	add	sp, #36	@ 0x24
 800c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	bf00      	nop
 800c4c0:	20010a8e 	.word	0x20010a8e

0800c4c4 <send_custom_msg>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800c4ca:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	4616      	mov	r6, r2
 800c4d2:	b965      	cbnz	r5, 800c4ee <send_custom_msg+0x2a>
 800c4d4:	f10d 0317 	add.w	r3, sp, #23
 800c4d8:	47a0      	blx	r4
 800c4da:	b108      	cbz	r0, 800c4e0 <send_custom_msg+0x1c>
 800c4dc:	42b0      	cmp	r0, r6
 800c4de:	d014      	beq.n	800c50a <send_custom_msg+0x46>
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c510 <send_custom_msg+0x4c>)
 800c4e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800c4e6:	701a      	strb	r2, [r3, #0]
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	b006      	add	sp, #24
 800c4ec:	bd70      	pop	{r4, r5, r6, pc}
 800c4ee:	f10d 0217 	add.w	r2, sp, #23
 800c4f2:	9202      	str	r2, [sp, #8]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	e9cd 6200 	strd	r6, r2, [sp]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	4621      	mov	r1, r4
 800c500:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800c504:	f001 f9a0 	bl	800d848 <uxr_write_framed_msg>
 800c508:	e7e7      	b.n	800c4da <send_custom_msg+0x16>
 800c50a:	2001      	movs	r0, #1
 800c50c:	b006      	add	sp, #24
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	20010a8e 	.word	0x20010a8e

0800c514 <uxr_set_custom_transport_callbacks>:
 800c514:	b410      	push	{r4}
 800c516:	9c01      	ldr	r4, [sp, #4]
 800c518:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800c51c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800c526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c52a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800c52e:	4770      	bx	lr

0800c530 <uxr_init_custom_transport>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800c536:	b303      	cbz	r3, 800c57a <uxr_init_custom_transport+0x4a>
 800c538:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800c53c:	4604      	mov	r4, r0
 800c53e:	b1e2      	cbz	r2, 800c57a <uxr_init_custom_transport+0x4a>
 800c540:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800c544:	b1ca      	cbz	r2, 800c57a <uxr_init_custom_transport+0x4a>
 800c546:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800c54a:	b1b2      	cbz	r2, 800c57a <uxr_init_custom_transport+0x4a>
 800c54c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800c550:	4798      	blx	r3
 800c552:	4605      	mov	r5, r0
 800c554:	b188      	cbz	r0, 800c57a <uxr_init_custom_transport+0x4a>
 800c556:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800c55a:	b98b      	cbnz	r3, 800c580 <uxr_init_custom_transport+0x50>
 800c55c:	490b      	ldr	r1, [pc, #44]	@ (800c58c <uxr_init_custom_transport+0x5c>)
 800c55e:	4b0c      	ldr	r3, [pc, #48]	@ (800c590 <uxr_init_custom_transport+0x60>)
 800c560:	4a0c      	ldr	r2, [pc, #48]	@ (800c594 <uxr_init_custom_transport+0x64>)
 800c562:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800c566:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c56a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800c56e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800c572:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800c576:	4628      	mov	r0, r5
 800c578:	bd38      	pop	{r3, r4, r5, pc}
 800c57a:	2500      	movs	r5, #0
 800c57c:	4628      	mov	r0, r5
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	2100      	movs	r1, #0
 800c582:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800c586:	f001 f959 	bl	800d83c <uxr_init_framing_io>
 800c58a:	e7e7      	b.n	800c55c <uxr_init_custom_transport+0x2c>
 800c58c:	0800c4c5 	.word	0x0800c4c5
 800c590:	0800c429 	.word	0x0800c429
 800c594:	0800c41d 	.word	0x0800c41d

0800c598 <uxr_close_custom_transport>:
 800c598:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800c59c:	4718      	bx	r3
 800c59e:	bf00      	nop

0800c5a0 <uxr_object_id>:
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f88d 1006 	strb.w	r1, [sp, #6]
 800c5a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c5ac:	f360 030f 	bfi	r3, r0, #0, #16
 800c5b0:	f362 431f 	bfi	r3, r2, #16, #16
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	b002      	add	sp, #8
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop

0800c5bc <uxr_object_id_from_raw>:
 800c5bc:	7843      	ldrb	r3, [r0, #1]
 800c5be:	7801      	ldrb	r1, [r0, #0]
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	f003 020f 	and.w	r2, r3, #15
 800c5c6:	f88d 2006 	strb.w	r2, [sp, #6]
 800c5ca:	091b      	lsrs	r3, r3, #4
 800c5cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c5d0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f363 000f 	bfi	r0, r3, #0, #16
 800c5da:	f362 401f 	bfi	r0, r2, #16, #16
 800c5de:	b002      	add	sp, #8
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop

0800c5e4 <uxr_object_id_to_raw>:
 800c5e4:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800c5ee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c5f2:	700a      	strb	r2, [r1, #0]
 800c5f4:	704b      	strb	r3, [r1, #1]
 800c5f6:	b002      	add	sp, #8
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop

0800c5fc <uxr_buffer_cancel_data>:
 800c5fc:	b510      	push	{r4, lr}
 800c5fe:	b094      	sub	sp, #80	@ 0x50
 800c600:	2300      	movs	r3, #0
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	9205      	str	r2, [sp, #20]
 800c606:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f88d 301e 	strb.w	r3, [sp, #30]
 800c610:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800c614:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800c618:	2308      	movs	r3, #8
 800c61a:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	2210      	movs	r2, #16
 800c622:	ab0c      	add	r3, sp, #48	@ 0x30
 800c624:	4604      	mov	r4, r0
 800c626:	f000 ffa1 	bl	800d56c <uxr_prepare_stream_to_write_submessage>
 800c62a:	b918      	cbnz	r0, 800c634 <uxr_buffer_cancel_data+0x38>
 800c62c:	4604      	mov	r4, r0
 800c62e:	4620      	mov	r0, r4
 800c630:	b014      	add	sp, #80	@ 0x50
 800c632:	bd10      	pop	{r4, pc}
 800c634:	9905      	ldr	r1, [sp, #20]
 800c636:	aa06      	add	r2, sp, #24
 800c638:	4620      	mov	r0, r4
 800c63a:	f001 f8d1 	bl	800d7e0 <uxr_init_base_object_request>
 800c63e:	a906      	add	r1, sp, #24
 800c640:	4604      	mov	r4, r0
 800c642:	a80c      	add	r0, sp, #48	@ 0x30
 800c644:	f002 ff00 	bl	800f448 <uxr_serialize_READ_DATA_Payload>
 800c648:	4620      	mov	r0, r4
 800c64a:	b014      	add	sp, #80	@ 0x50
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop

0800c650 <read_submessage_format>:
 800c650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c654:	b095      	sub	sp, #84	@ 0x54
 800c656:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 800c65a:	b113      	cbz	r3, 800c662 <read_submessage_format+0x12>
 800c65c:	b015      	add	sp, #84	@ 0x54
 800c65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c662:	460c      	mov	r4, r1
 800c664:	4616      	mov	r6, r2
 800c666:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c66a:	461d      	mov	r5, r3
 800c66c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	1a52      	subs	r2, r2, r1
 800c672:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	4680      	mov	r8, r0
 800c678:	a80c      	add	r0, sp, #48	@ 0x30
 800c67a:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 800c67e:	f7fc fb59 	bl	8008d34 <ucdr_init_buffer>
 800c682:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c686:	a80c      	add	r0, sp, #48	@ 0x30
 800c688:	f7fc fb28 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 800c68c:	69e3      	ldr	r3, [r4, #28]
 800c68e:	b35b      	cbz	r3, 800c6e8 <read_submessage_format+0x98>
 800c690:	f1b9 0f07 	cmp.w	r9, #7
 800c694:	751d      	strb	r5, [r3, #20]
 800c696:	d043      	beq.n	800c720 <read_submessage_format+0xd0>
 800c698:	f1b9 0f08 	cmp.w	r9, #8
 800c69c:	d032      	beq.n	800c704 <read_submessage_format+0xb4>
 800c69e:	f1b9 0f06 	cmp.w	r9, #6
 800c6a2:	d008      	beq.n	800c6b6 <read_submessage_format+0x66>
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	751a      	strb	r2, [r3, #20]
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f7fc fb92 	bl	8008dd4 <ucdr_advance_buffer>
 800c6b0:	b015      	add	sp, #84	@ 0x54
 800c6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6b6:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800c6ba:	2d00      	cmp	r5, #0
 800c6bc:	d0f2      	beq.n	800c6a4 <read_submessage_format+0x54>
 800c6be:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6c0:	e9cd 3600 	strd	r3, r6, [sp]
 800c6c4:	2306      	movs	r3, #6
 800c6c6:	f88d 3016 	strb.w	r3, [sp, #22]
 800c6ca:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 800c6ce:	9302      	str	r3, [sp, #8]
 800c6d0:	463a      	mov	r2, r7
 800c6d2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	47a8      	blx	r5
 800c6da:	69e3      	ldr	r3, [r4, #28]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1de      	bne.n	800c6a4 <read_submessage_format+0x54>
 800c6e6:	e7df      	b.n	800c6a8 <read_submessage_format+0x58>
 800c6e8:	f1b9 0f07 	cmp.w	r9, #7
 800c6ec:	d032      	beq.n	800c754 <read_submessage_format+0x104>
 800c6ee:	f1b9 0f08 	cmp.w	r9, #8
 800c6f2:	d02a      	beq.n	800c74a <read_submessage_format+0xfa>
 800c6f4:	f1b9 0f06 	cmp.w	r9, #6
 800c6f8:	d1d6      	bne.n	800c6a8 <read_submessage_format+0x58>
 800c6fa:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	d1dd      	bne.n	800c6be <read_submessage_format+0x6e>
 800c702:	e7d1      	b.n	800c6a8 <read_submessage_format+0x58>
 800c704:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 800c708:	2a00      	cmp	r2, #0
 800c70a:	d0cb      	beq.n	800c6a4 <read_submessage_format+0x54>
 800c70c:	a906      	add	r1, sp, #24
 800c70e:	a80c      	add	r0, sp, #48	@ 0x30
 800c710:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c712:	f002 ff39 	bl	800f588 <uxr_deserialize_SampleIdentity>
 800c716:	bb28      	cbnz	r0, 800c764 <read_submessage_format+0x114>
 800c718:	69e3      	ldr	r3, [r4, #28]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1c2      	bne.n	800c6a4 <read_submessage_format+0x54>
 800c71e:	e7c3      	b.n	800c6a8 <read_submessage_format+0x58>
 800c720:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 800c724:	b16a      	cbz	r2, 800c742 <read_submessage_format+0xf2>
 800c726:	a906      	add	r1, sp, #24
 800c728:	a80c      	add	r0, sp, #48	@ 0x30
 800c72a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c72c:	f002 fc40 	bl	800efb0 <uxr_deserialize_BaseObjectRequest>
 800c730:	2800      	cmp	r0, #0
 800c732:	d13a      	bne.n	800c7aa <read_submessage_format+0x15a>
 800c734:	68a2      	ldr	r2, [r4, #8]
 800c736:	69e3      	ldr	r3, [r4, #28]
 800c738:	4432      	add	r2, r6
 800c73a:	60a2      	str	r2, [r4, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1b1      	bne.n	800c6a4 <read_submessage_format+0x54>
 800c740:	e7b2      	b.n	800c6a8 <read_submessage_format+0x58>
 800c742:	68a2      	ldr	r2, [r4, #8]
 800c744:	4432      	add	r2, r6
 800c746:	60a2      	str	r2, [r4, #8]
 800c748:	e7ac      	b.n	800c6a4 <read_submessage_format+0x54>
 800c74a:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1dc      	bne.n	800c70c <read_submessage_format+0xbc>
 800c752:	e7a9      	b.n	800c6a8 <read_submessage_format+0x58>
 800c754:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1e4      	bne.n	800c726 <read_submessage_format+0xd6>
 800c75c:	68a3      	ldr	r3, [r4, #8]
 800c75e:	4433      	add	r3, r6
 800c760:	60a3      	str	r3, [r4, #8]
 800c762:	e7a1      	b.n	800c6a8 <read_submessage_format+0x58>
 800c764:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800c768:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c76a:	1a52      	subs	r2, r2, r1
 800c76c:	1aed      	subs	r5, r5, r3
 800c76e:	a80c      	add	r0, sp, #48	@ 0x30
 800c770:	f7fc fae0 	bl	8008d34 <ucdr_init_buffer>
 800c774:	4435      	add	r5, r6
 800c776:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c77a:	a80c      	add	r0, sp, #48	@ 0x30
 800c77c:	f7fc faae 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 800c780:	b2ad      	uxth	r5, r5
 800c782:	ab0c      	add	r3, sp, #48	@ 0x30
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	9501      	str	r5, [sp, #4]
 800c788:	2108      	movs	r1, #8
 800c78a:	f88d 1016 	strb.w	r1, [sp, #22]
 800c78e:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 800c792:	9102      	str	r1, [sp, #8]
 800c794:	ab06      	add	r3, sp, #24
 800c796:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 800c79a:	9905      	ldr	r1, [sp, #20]
 800c79c:	463a      	mov	r2, r7
 800c79e:	4640      	mov	r0, r8
 800c7a0:	47a8      	blx	r5
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800c7a8:	e7b6      	b.n	800c718 <read_submessage_format+0xc8>
 800c7aa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800c7ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7b0:	1a52      	subs	r2, r2, r1
 800c7b2:	1aed      	subs	r5, r5, r3
 800c7b4:	a80c      	add	r0, sp, #48	@ 0x30
 800c7b6:	f7fc fabd 	bl	8008d34 <ucdr_init_buffer>
 800c7ba:	4435      	add	r5, r6
 800c7bc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c7c0:	a80c      	add	r0, sp, #48	@ 0x30
 800c7c2:	f7fc fa8b 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 800c7c6:	b2ad      	uxth	r5, r5
 800c7c8:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	9501      	str	r5, [sp, #4]
 800c7ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c7d2:	2107      	movs	r1, #7
 800c7d4:	f88d 1016 	strb.w	r1, [sp, #22]
 800c7d8:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 800c7dc:	9102      	str	r1, [sp, #8]
 800c7de:	ba5b      	rev16	r3, r3
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 800c7e6:	9905      	ldr	r1, [sp, #20]
 800c7e8:	463a      	mov	r2, r7
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	47a8      	blx	r5
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800c7f4:	e79e      	b.n	800c734 <read_submessage_format+0xe4>
 800c7f6:	bf00      	nop

0800c7f8 <on_get_fragmentation_info>:
 800c7f8:	b500      	push	{lr}
 800c7fa:	b08b      	sub	sp, #44	@ 0x2c
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	2204      	movs	r2, #4
 800c800:	a802      	add	r0, sp, #8
 800c802:	f7fc fa97 	bl	8008d34 <ucdr_init_buffer>
 800c806:	f10d 0305 	add.w	r3, sp, #5
 800c80a:	f10d 0206 	add.w	r2, sp, #6
 800c80e:	a901      	add	r1, sp, #4
 800c810:	a802      	add	r0, sp, #8
 800c812:	f001 fdaf 	bl	800e374 <uxr_read_submessage_header>
 800c816:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c81a:	2b0d      	cmp	r3, #13
 800c81c:	d003      	beq.n	800c826 <on_get_fragmentation_info+0x2e>
 800c81e:	2000      	movs	r0, #0
 800c820:	b00b      	add	sp, #44	@ 0x2c
 800c822:	f85d fb04 	ldr.w	pc, [sp], #4
 800c826:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c82a:	f013 0f02 	tst.w	r3, #2
 800c82e:	bf0c      	ite	eq
 800c830:	2001      	moveq	r0, #1
 800c832:	2002      	movne	r0, #2
 800c834:	b00b      	add	sp, #44	@ 0x2c
 800c836:	f85d fb04 	ldr.w	pc, [sp], #4
 800c83a:	bf00      	nop

0800c83c <read_submessage_get_info>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	2500      	movs	r5, #0
 800c840:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800c844:	4604      	mov	r4, r0
 800c846:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800c84a:	460e      	mov	r6, r1
 800c84c:	a810      	add	r0, sp, #64	@ 0x40
 800c84e:	4629      	mov	r1, r5
 800c850:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c854:	f006 fbcc 	bl	8012ff0 <memset>
 800c858:	a903      	add	r1, sp, #12
 800c85a:	4630      	mov	r0, r6
 800c85c:	f002 fd36 	bl	800f2cc <uxr_deserialize_GET_INFO_Payload>
 800c860:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c864:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 ffb1 	bl	800d7d0 <uxr_session_header_offset>
 800c86e:	462b      	mov	r3, r5
 800c870:	9000      	str	r0, [sp, #0]
 800c872:	220c      	movs	r2, #12
 800c874:	a905      	add	r1, sp, #20
 800c876:	a808      	add	r0, sp, #32
 800c878:	f7fc fa4a 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800c87c:	a910      	add	r1, sp, #64	@ 0x40
 800c87e:	a808      	add	r0, sp, #32
 800c880:	f002 fd96 	bl	800f3b0 <uxr_serialize_INFO_Payload>
 800c884:	9b08      	ldr	r3, [sp, #32]
 800c886:	462a      	mov	r2, r5
 800c888:	4629      	mov	r1, r5
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 ff4c 	bl	800d728 <uxr_stamp_session_header>
 800c890:	a808      	add	r0, sp, #32
 800c892:	f7fc fa7b 	bl	8008d8c <ucdr_buffer_length>
 800c896:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c898:	4602      	mov	r2, r0
 800c89a:	a905      	add	r1, sp, #20
 800c89c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c8a0:	47a0      	blx	r4
 800c8a2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}

0800c8a8 <write_submessage_acknack.isra.0>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	b092      	sub	sp, #72	@ 0x48
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	460e      	mov	r6, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	f000 ff8d 	bl	800d7d0 <uxr_session_header_offset>
 800c8b6:	a905      	add	r1, sp, #20
 800c8b8:	9000      	str	r0, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	a80a      	add	r0, sp, #40	@ 0x28
 800c8be:	2211      	movs	r2, #17
 800c8c0:	f7fc fa26 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800c8c4:	2318      	movs	r3, #24
 800c8c6:	fb03 5404 	mla	r4, r3, r4, r5
 800c8ca:	2205      	movs	r2, #5
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	3450      	adds	r4, #80	@ 0x50
 800c8d0:	210a      	movs	r1, #10
 800c8d2:	a80a      	add	r0, sp, #40	@ 0x28
 800c8d4:	f001 fd34 	bl	800e340 <uxr_buffer_submessage_header>
 800c8d8:	a903      	add	r1, sp, #12
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f004 fd8e 	bl	80113fc <uxr_compute_acknack>
 800c8e0:	ba40      	rev16	r0, r0
 800c8e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 800c8e6:	a903      	add	r1, sp, #12
 800c8e8:	a80a      	add	r0, sp, #40	@ 0x28
 800c8ea:	f88d 6010 	strb.w	r6, [sp, #16]
 800c8ee:	f002 fdcf 	bl	800f490 <uxr_serialize_ACKNACK_Payload>
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f000 ff15 	bl	800d728 <uxr_stamp_session_header>
 800c8fe:	a80a      	add	r0, sp, #40	@ 0x28
 800c900:	f7fc fa44 	bl	8008d8c <ucdr_buffer_length>
 800c904:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c906:	4602      	mov	r2, r0
 800c908:	a905      	add	r1, sp, #20
 800c90a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c90e:	47a0      	blx	r4
 800c910:	b012      	add	sp, #72	@ 0x48
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	0000      	movs	r0, r0
	...

0800c918 <uxr_init_session>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c950 <uxr_init_session+0x38>
 800c91e:	2300      	movs	r3, #0
 800c920:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800c924:	4604      	mov	r4, r0
 800c926:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800c92a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800c92e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800c932:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800c936:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800c93a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800c93e:	2181      	movs	r1, #129	@ 0x81
 800c940:	f000 fe56 	bl	800d5f0 <uxr_init_session_info>
 800c944:	f104 0008 	add.w	r0, r4, #8
 800c948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c94c:	f001 bc14 	b.w	800e178 <uxr_init_stream_storage>
	...

0800c958 <uxr_set_status_callback>:
 800c958:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop

0800c960 <uxr_set_topic_callback>:
 800c960:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop

0800c968 <uxr_set_request_callback>:
 800c968:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop

0800c970 <uxr_set_reply_callback>:
 800c970:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop

0800c978 <uxr_create_output_best_effort_stream>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	4604      	mov	r4, r0
 800c97e:	460d      	mov	r5, r1
 800c980:	4616      	mov	r6, r2
 800c982:	f000 ff25 	bl	800d7d0 <uxr_session_header_offset>
 800c986:	4632      	mov	r2, r6
 800c988:	4603      	mov	r3, r0
 800c98a:	4629      	mov	r1, r5
 800c98c:	f104 0008 	add.w	r0, r4, #8
 800c990:	b002      	add	sp, #8
 800c992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c996:	f001 bc39 	b.w	800e20c <uxr_add_output_best_effort_buffer>
 800c99a:	bf00      	nop

0800c99c <uxr_create_output_reliable_stream>:
 800c99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	461f      	mov	r7, r3
 800c9a8:	f000 ff12 	bl	800d7d0 <uxr_session_header_offset>
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	9000      	str	r0, [sp, #0]
 800c9b0:	4632      	mov	r2, r6
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	f104 0008 	add.w	r0, r4, #8
 800c9b8:	f001 fc3c 	bl	800e234 <uxr_add_output_reliable_buffer>
 800c9bc:	b005      	add	sp, #20
 800c9be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9c0 <uxr_create_input_best_effort_stream>:
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	3008      	adds	r0, #8
 800c9c4:	b002      	add	sp, #8
 800c9c6:	f001 bc4f 	b.w	800e268 <uxr_add_input_best_effort_buffer>
 800c9ca:	bf00      	nop

0800c9cc <uxr_create_input_reliable_stream>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	4c03      	ldr	r4, [pc, #12]	@ (800c9e0 <uxr_create_input_reliable_stream+0x14>)
 800c9d2:	9400      	str	r4, [sp, #0]
 800c9d4:	3008      	adds	r0, #8
 800c9d6:	f001 fc5d 	bl	800e294 <uxr_add_input_reliable_buffer>
 800c9da:	b004      	add	sp, #16
 800c9dc:	bd10      	pop	{r4, pc}
 800c9de:	bf00      	nop
 800c9e0:	0800c7f9 	.word	0x0800c7f9

0800c9e4 <uxr_epoch_nanos>:
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	f001 fd0a 	bl	800e400 <uxr_nanos>
 800c9ec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800c9f0:	1ac0      	subs	r0, r0, r3
 800c9f2:	eb61 0102 	sbc.w	r1, r1, r2
 800c9f6:	bd10      	pop	{r4, pc}

0800c9f8 <uxr_flash_output_streams>:
 800c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	7e03      	ldrb	r3, [r0, #24]
 800c9fe:	b084      	sub	sp, #16
 800ca00:	4604      	mov	r4, r0
 800ca02:	b373      	cbz	r3, 800ca62 <uxr_flash_output_streams+0x6a>
 800ca04:	2500      	movs	r5, #0
 800ca06:	f100 0908 	add.w	r9, r0, #8
 800ca0a:	f10d 0802 	add.w	r8, sp, #2
 800ca0e:	4628      	mov	r0, r5
 800ca10:	af03      	add	r7, sp, #12
 800ca12:	ae02      	add	r6, sp, #8
 800ca14:	e006      	b.n	800ca24 <uxr_flash_output_streams+0x2c>
 800ca16:	7e23      	ldrb	r3, [r4, #24]
 800ca18:	3501      	adds	r5, #1
 800ca1a:	b2e8      	uxtb	r0, r5
 800ca1c:	4283      	cmp	r3, r0
 800ca1e:	f109 0910 	add.w	r9, r9, #16
 800ca22:	d91e      	bls.n	800ca62 <uxr_flash_output_streams+0x6a>
 800ca24:	2201      	movs	r2, #1
 800ca26:	4611      	mov	r1, r2
 800ca28:	f001 fb6e 	bl	800e108 <uxr_stream_id>
 800ca2c:	4643      	mov	r3, r8
 800ca2e:	4684      	mov	ip, r0
 800ca30:	463a      	mov	r2, r7
 800ca32:	4631      	mov	r1, r6
 800ca34:	4648      	mov	r0, r9
 800ca36:	f8cd c004 	str.w	ip, [sp, #4]
 800ca3a:	f004 fd63 	bl	8011504 <uxr_prepare_best_effort_buffer_to_send>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d0e9      	beq.n	800ca16 <uxr_flash_output_streams+0x1e>
 800ca42:	9b02      	ldr	r3, [sp, #8]
 800ca44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ca48:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fe6b 	bl	800d728 <uxr_stamp_session_header>
 800ca52:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ca54:	9a03      	ldr	r2, [sp, #12]
 800ca56:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ca5a:	9902      	ldr	r1, [sp, #8]
 800ca5c:	6818      	ldr	r0, [r3, #0]
 800ca5e:	47d0      	blx	sl
 800ca60:	e7d9      	b.n	800ca16 <uxr_flash_output_streams+0x1e>
 800ca62:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ca66:	b37b      	cbz	r3, 800cac8 <uxr_flash_output_streams+0xd0>
 800ca68:	f04f 0900 	mov.w	r9, #0
 800ca6c:	f104 0520 	add.w	r5, r4, #32
 800ca70:	f10d 0802 	add.w	r8, sp, #2
 800ca74:	af03      	add	r7, sp, #12
 800ca76:	ae02      	add	r6, sp, #8
 800ca78:	4648      	mov	r0, r9
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	2102      	movs	r1, #2
 800ca7e:	f001 fb43 	bl	800e108 <uxr_stream_id>
 800ca82:	9001      	str	r0, [sp, #4]
 800ca84:	e00e      	b.n	800caa4 <uxr_flash_output_streams+0xac>
 800ca86:	9b02      	ldr	r3, [sp, #8]
 800ca88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ca8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ca90:	4620      	mov	r0, r4
 800ca92:	f000 fe49 	bl	800d728 <uxr_stamp_session_header>
 800ca96:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ca98:	9a03      	ldr	r2, [sp, #12]
 800ca9a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ca9e:	9902      	ldr	r1, [sp, #8]
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	47d0      	blx	sl
 800caa4:	4643      	mov	r3, r8
 800caa6:	463a      	mov	r2, r7
 800caa8:	4631      	mov	r1, r6
 800caaa:	4628      	mov	r0, r5
 800caac:	f004 ff3e 	bl	801192c <uxr_prepare_next_reliable_buffer_to_send>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1e8      	bne.n	800ca86 <uxr_flash_output_streams+0x8e>
 800cab4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cab8:	f109 0901 	add.w	r9, r9, #1
 800cabc:	fa5f f089 	uxtb.w	r0, r9
 800cac0:	4283      	cmp	r3, r0
 800cac2:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800cac6:	d8d8      	bhi.n	800ca7a <uxr_flash_output_streams+0x82>
 800cac8:	b004      	add	sp, #16
 800caca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cace:	bf00      	nop

0800cad0 <read_submessage_info>:
 800cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad4:	460d      	mov	r5, r1
 800cad6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cada:	4669      	mov	r1, sp
 800cadc:	4607      	mov	r7, r0
 800cade:	4628      	mov	r0, r5
 800cae0:	f002 fb04 	bl	800f0ec <uxr_deserialize_BaseObjectReply>
 800cae4:	a902      	add	r1, sp, #8
 800cae6:	4604      	mov	r4, r0
 800cae8:	4628      	mov	r0, r5
 800caea:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800caee:	f7fe fa55 	bl	800af9c <ucdr_deserialize_bool>
 800caf2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800caf6:	4004      	ands	r4, r0
 800caf8:	b2e4      	uxtb	r4, r4
 800cafa:	b95b      	cbnz	r3, 800cb14 <read_submessage_info+0x44>
 800cafc:	a987      	add	r1, sp, #540	@ 0x21c
 800cafe:	4628      	mov	r0, r5
 800cb00:	f7fe fa4c 	bl	800af9c <ucdr_deserialize_bool>
 800cb04:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cb08:	4606      	mov	r6, r0
 800cb0a:	b94b      	cbnz	r3, 800cb20 <read_submessage_info+0x50>
 800cb0c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb14:	a903      	add	r1, sp, #12
 800cb16:	4628      	mov	r0, r5
 800cb18:	f002 f9aa 	bl	800ee70 <uxr_deserialize_ObjectVariant>
 800cb1c:	4004      	ands	r4, r0
 800cb1e:	e7ed      	b.n	800cafc <read_submessage_info+0x2c>
 800cb20:	a988      	add	r1, sp, #544	@ 0x220
 800cb22:	4628      	mov	r0, r5
 800cb24:	f7fe fa68 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800cb28:	4234      	tst	r4, r6
 800cb2a:	d0ef      	beq.n	800cb0c <read_submessage_info+0x3c>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0ed      	beq.n	800cb0c <read_submessage_info+0x3c>
 800cb30:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cb34:	2b0d      	cmp	r3, #13
 800cb36:	d1e9      	bne.n	800cb0c <read_submessage_info+0x3c>
 800cb38:	a98a      	add	r1, sp, #552	@ 0x228
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f7fe fff8 	bl	800bb30 <ucdr_deserialize_int16_t>
 800cb40:	b140      	cbz	r0, 800cb54 <read_submessage_info+0x84>
 800cb42:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dd07      	ble.n	800cb5a <read_submessage_info+0x8a>
 800cb4a:	f1b8 0f00 	cmp.w	r8, #0
 800cb4e:	bf0c      	ite	eq
 800cb50:	2002      	moveq	r0, #2
 800cb52:	2001      	movne	r0, #1
 800cb54:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cb58:	e7d8      	b.n	800cb0c <read_submessage_info+0x3c>
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	e7fa      	b.n	800cb54 <read_submessage_info+0x84>
 800cb5e:	bf00      	nop

0800cb60 <read_submessage_list>:
 800cb60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb64:	b097      	sub	sp, #92	@ 0x5c
 800cb66:	4604      	mov	r4, r0
 800cb68:	460d      	mov	r5, r1
 800cb6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb6c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cb70:	aa0c      	add	r2, sp, #48	@ 0x30
 800cb72:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cb76:	4628      	mov	r0, r5
 800cb78:	f001 fbfc 	bl	800e374 <uxr_read_submessage_header>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f000 812c 	beq.w	800cdda <read_submessage_list+0x27a>
 800cb82:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800cb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb88:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800cb8c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800cb90:	3902      	subs	r1, #2
 800cb92:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cb96:	290d      	cmp	r1, #13
 800cb98:	d8e8      	bhi.n	800cb6c <read_submessage_list+0xc>
 800cb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cba0 <read_submessage_list+0x40>)
 800cb9c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800cba0:	0800cdd1 	.word	0x0800cdd1
 800cba4:	0800cb6d 	.word	0x0800cb6d
 800cba8:	0800cdc1 	.word	0x0800cdc1
 800cbac:	0800cd63 	.word	0x0800cd63
 800cbb0:	0800cd59 	.word	0x0800cd59
 800cbb4:	0800cb6d 	.word	0x0800cb6d
 800cbb8:	0800cb6d 	.word	0x0800cb6d
 800cbbc:	0800ccdd 	.word	0x0800ccdd
 800cbc0:	0800cc75 	.word	0x0800cc75
 800cbc4:	0800cc35 	.word	0x0800cc35
 800cbc8:	0800cb6d 	.word	0x0800cb6d
 800cbcc:	0800cb6d 	.word	0x0800cb6d
 800cbd0:	0800cb6d 	.word	0x0800cb6d
 800cbd4:	0800cbd9 	.word	0x0800cbd9
 800cbd8:	a910      	add	r1, sp, #64	@ 0x40
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f002 fca8 	bl	800f530 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cbe0:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800cbe4:	2e00      	cmp	r6, #0
 800cbe6:	f000 8100 	beq.w	800cdea <read_submessage_list+0x28a>
 800cbea:	f001 fc09 	bl	800e400 <uxr_nanos>
 800cbee:	f04f 0800 	mov.w	r8, #0
 800cbf2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800cbfa:	4990      	ldr	r1, [pc, #576]	@ (800ce3c <read_submessage_list+0x2dc>)
 800cbfc:	46c4      	mov	ip, r8
 800cbfe:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800cc02:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cc06:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cc08:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800cc0a:	46c6      	mov	lr, r8
 800cc0c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800cc10:	46bc      	mov	ip, r7
 800cc12:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800cc16:	fbc0 7801 	smlal	r7, r8, r0, r1
 800cc1a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800cc1e:	e9cd 7800 	strd	r7, r8, [sp]
 800cc22:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800cc26:	9106      	str	r1, [sp, #24]
 800cc28:	4620      	mov	r0, r4
 800cc2a:	47b0      	blx	r6
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800cc32:	e79b      	b.n	800cb6c <read_submessage_list+0xc>
 800cc34:	a910      	add	r1, sp, #64	@ 0x40
 800cc36:	4628      	mov	r0, r5
 800cc38:	f002 fc68 	bl	800f50c <uxr_deserialize_HEARTBEAT_Payload>
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cc42:	f001 fa7d 	bl	800e140 <uxr_stream_id_from_raw>
 800cc46:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800cc4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	f104 0008 	add.w	r0, r4, #8
 800cc52:	f001 fb55 	bl	800e300 <uxr_get_input_reliable_stream>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d088      	beq.n	800cb6c <read_submessage_list+0xc>
 800cc5a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800cc5e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800cc62:	f004 fbbf 	bl	80113e4 <uxr_process_heartbeat>
 800cc66:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f7ff fe1b 	bl	800c8a8 <write_submessage_acknack.isra.0>
 800cc72:	e77b      	b.n	800cb6c <read_submessage_list+0xc>
 800cc74:	a910      	add	r1, sp, #64	@ 0x40
 800cc76:	4628      	mov	r0, r5
 800cc78:	f002 fc20 	bl	800f4bc <uxr_deserialize_ACKNACK_Payload>
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cc82:	f001 fa5d 	bl	800e140 <uxr_stream_id_from_raw>
 800cc86:	900d      	str	r0, [sp, #52]	@ 0x34
 800cc88:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800cc8c:	f104 0008 	add.w	r0, r4, #8
 800cc90:	f001 fb22 	bl	800e2d8 <uxr_get_output_reliable_stream>
 800cc94:	4606      	mov	r6, r0
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f43f af68 	beq.w	800cb6c <read_submessage_list+0xc>
 800cc9c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800cca0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800cca4:	ba49      	rev16	r1, r1
 800cca6:	b289      	uxth	r1, r1
 800cca8:	f004 feea 	bl	8011a80 <uxr_process_acknack>
 800ccac:	4630      	mov	r0, r6
 800ccae:	f004 feab 	bl	8011a08 <uxr_begin_output_nack_buffer_it>
 800ccb2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800ccb6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ccba:	e005      	b.n	800ccc8 <read_submessage_list+0x168>
 800ccbc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ccbe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ccc0:	685f      	ldr	r7, [r3, #4]
 800ccc2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	47b8      	blx	r7
 800ccc8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800cccc:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ccce:	4641      	mov	r1, r8
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f004 fe9b 	bl	8011a0c <uxr_next_reliable_nack_buffer_to_send>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d1f0      	bne.n	800ccbc <read_submessage_list+0x15c>
 800ccda:	e747      	b.n	800cb6c <read_submessage_list+0xc>
 800ccdc:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cce0:	4641      	mov	r1, r8
 800cce2:	900d      	str	r0, [sp, #52]	@ 0x34
 800cce4:	4628      	mov	r0, r5
 800cce6:	f002 f963 	bl	800efb0 <uxr_deserialize_BaseObjectRequest>
 800ccea:	3e04      	subs	r6, #4
 800ccec:	4640      	mov	r0, r8
 800ccee:	a90f      	add	r1, sp, #60	@ 0x3c
 800ccf0:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ccf4:	f000 fd92 	bl	800d81c <uxr_parse_base_object_request>
 800ccf8:	fa1f f886 	uxth.w	r8, r6
 800ccfc:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cd00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd02:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800cd06:	9110      	str	r1, [sp, #64]	@ 0x40
 800cd08:	f007 070e 	and.w	r7, r7, #14
 800cd0c:	b136      	cbz	r6, 800cd1c <read_submessage_list+0x1bc>
 800cd0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	464a      	mov	r2, r9
 800cd16:	2300      	movs	r3, #0
 800cd18:	4620      	mov	r0, r4
 800cd1a:	47b0      	blx	r6
 800cd1c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800cd1e:	b16b      	cbz	r3, 800cd3c <read_submessage_list+0x1dc>
 800cd20:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cd22:	2100      	movs	r1, #0
 800cd24:	3802      	subs	r0, #2
 800cd26:	e002      	b.n	800cd2e <read_submessage_list+0x1ce>
 800cd28:	3101      	adds	r1, #1
 800cd2a:	428b      	cmp	r3, r1
 800cd2c:	d006      	beq.n	800cd3c <read_submessage_list+0x1dc>
 800cd2e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cd32:	454e      	cmp	r6, r9
 800cd34:	d1f8      	bne.n	800cd28 <read_submessage_list+0x1c8>
 800cd36:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cd38:	2200      	movs	r2, #0
 800cd3a:	545a      	strb	r2, [r3, r1]
 800cd3c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800cd40:	9102      	str	r1, [sp, #8]
 800cd42:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd44:	9101      	str	r1, [sp, #4]
 800cd46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cd48:	9100      	str	r1, [sp, #0]
 800cd4a:	463b      	mov	r3, r7
 800cd4c:	4642      	mov	r2, r8
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4620      	mov	r0, r4
 800cd52:	f7ff fc7d 	bl	800c650 <read_submessage_format>
 800cd56:	e709      	b.n	800cb6c <read_submessage_list+0xc>
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7ff feb8 	bl	800cad0 <read_submessage_info>
 800cd60:	e704      	b.n	800cb6c <read_submessage_list+0xc>
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d03c      	beq.n	800cde0 <read_submessage_list+0x280>
 800cd66:	a910      	add	r1, sp, #64	@ 0x40
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f002 fb03 	bl	800f374 <uxr_deserialize_STATUS_Payload>
 800cd6e:	a90e      	add	r1, sp, #56	@ 0x38
 800cd70:	a810      	add	r0, sp, #64	@ 0x40
 800cd72:	aa0d      	add	r2, sp, #52	@ 0x34
 800cd74:	f000 fd52 	bl	800d81c <uxr_parse_base_object_request>
 800cd78:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cd7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd7e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800cd82:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800cd86:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cd88:	b136      	cbz	r6, 800cd98 <read_submessage_list+0x238>
 800cd8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	463a      	mov	r2, r7
 800cd92:	4643      	mov	r3, r8
 800cd94:	4620      	mov	r0, r4
 800cd96:	47b0      	blx	r6
 800cd98:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	f43f aee6 	beq.w	800cb6c <read_submessage_list+0xc>
 800cda0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cda2:	2100      	movs	r1, #0
 800cda4:	3802      	subs	r0, #2
 800cda6:	e003      	b.n	800cdb0 <read_submessage_list+0x250>
 800cda8:	3101      	adds	r1, #1
 800cdaa:	4291      	cmp	r1, r2
 800cdac:	f43f aede 	beq.w	800cb6c <read_submessage_list+0xc>
 800cdb0:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cdb4:	42be      	cmp	r6, r7
 800cdb6:	d1f7      	bne.n	800cda8 <read_submessage_list+0x248>
 800cdb8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cdba:	f803 8001 	strb.w	r8, [r3, r1]
 800cdbe:	e6d5      	b.n	800cb6c <read_submessage_list+0xc>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f47f aed3 	bne.w	800cb6c <read_submessage_list+0xc>
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 fc6f 	bl	800d6ac <uxr_read_create_session_status>
 800cdce:	e6cd      	b.n	800cb6c <read_submessage_list+0xc>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7ff fd32 	bl	800c83c <read_submessage_get_info>
 800cdd8:	e6c8      	b.n	800cb6c <read_submessage_list+0xc>
 800cdda:	b017      	add	sp, #92	@ 0x5c
 800cddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cde0:	4629      	mov	r1, r5
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 fc70 	bl	800d6c8 <uxr_read_delete_session_status>
 800cde8:	e6c0      	b.n	800cb6c <read_submessage_list+0xc>
 800cdea:	f001 fb09 	bl	800e400 <uxr_nanos>
 800cdee:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800cdf2:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800ce3c <read_submessage_list+0x2dc>
 800cdf6:	4633      	mov	r3, r6
 800cdf8:	fbc7 230c 	smlal	r2, r3, r7, ip
 800cdfc:	1810      	adds	r0, r2, r0
 800cdfe:	eb43 0301 	adc.w	r3, r3, r1
 800ce02:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800ce06:	46b6      	mov	lr, r6
 800ce08:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800ce0c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800ce10:	fbc1 760c 	smlal	r7, r6, r1, ip
 800ce14:	19d2      	adds	r2, r2, r7
 800ce16:	eb4e 0106 	adc.w	r1, lr, r6
 800ce1a:	1a80      	subs	r0, r0, r2
 800ce1c:	eb63 0301 	sbc.w	r3, r3, r1
 800ce20:	0fda      	lsrs	r2, r3, #31
 800ce22:	1812      	adds	r2, r2, r0
 800ce24:	f143 0300 	adc.w	r3, r3, #0
 800ce28:	0852      	lsrs	r2, r2, #1
 800ce2a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ce2e:	105b      	asrs	r3, r3, #1
 800ce30:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ce34:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ce38:	e6f8      	b.n	800cc2c <read_submessage_list+0xcc>
 800ce3a:	bf00      	nop
 800ce3c:	3b9aca00 	.word	0x3b9aca00

0800ce40 <listen_message_reliably>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	f1b1 0b00 	subs.w	fp, r1, #0
 800ce48:	b09f      	sub	sp, #124	@ 0x7c
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	bfb8      	it	lt
 800ce4e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800ce52:	f001 fabb 	bl	800e3cc <uxr_millis>
 800ce56:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ce5a:	9003      	str	r0, [sp, #12]
 800ce5c:	9104      	str	r1, [sp, #16]
 800ce5e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800ce62:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 80a4 	beq.w	800cfb4 <listen_message_reliably+0x174>
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	e9cd b806 	strd	fp, r8, [sp, #24]
 800ce72:	f106 0420 	add.w	r4, r6, #32
 800ce76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ce7a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800ce7e:	4628      	mov	r0, r5
 800ce80:	e011      	b.n	800cea6 <listen_message_reliably+0x66>
 800ce82:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ce86:	42ba      	cmp	r2, r7
 800ce88:	eb73 0109 	sbcs.w	r1, r3, r9
 800ce8c:	bfb8      	it	lt
 800ce8e:	4699      	movlt	r9, r3
 800ce90:	f105 0501 	add.w	r5, r5, #1
 800ce94:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ce98:	b2e8      	uxtb	r0, r5
 800ce9a:	bfb8      	it	lt
 800ce9c:	4617      	movlt	r7, r2
 800ce9e:	4283      	cmp	r3, r0
 800cea0:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800cea4:	d94a      	bls.n	800cf3c <listen_message_reliably+0xfc>
 800cea6:	2201      	movs	r2, #1
 800cea8:	2102      	movs	r1, #2
 800ceaa:	f001 f92d 	bl	800e108 <uxr_stream_id>
 800ceae:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ceb8:	f004 fd76 	bl	80119a8 <uxr_update_output_stream_heartbeat_timestamp>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d0e0      	beq.n	800ce82 <listen_message_reliably+0x42>
 800cec0:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800cec4:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800cec8:	9305      	str	r3, [sp, #20]
 800ceca:	4630      	mov	r0, r6
 800cecc:	f000 fc80 	bl	800d7d0 <uxr_session_header_offset>
 800ced0:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800ced4:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800ced8:	9000      	str	r0, [sp, #0]
 800ceda:	a90e      	add	r1, sp, #56	@ 0x38
 800cedc:	4640      	mov	r0, r8
 800cede:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800cee2:	2300      	movs	r3, #0
 800cee4:	2211      	movs	r2, #17
 800cee6:	f7fb ff13 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800ceea:	2300      	movs	r3, #0
 800ceec:	2205      	movs	r2, #5
 800ceee:	210b      	movs	r1, #11
 800cef0:	4640      	mov	r0, r8
 800cef2:	f001 fa25 	bl	800e340 <uxr_buffer_submessage_header>
 800cef6:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800cefa:	2101      	movs	r1, #1
 800cefc:	f004 fe16 	bl	8011b2c <uxr_seq_num_add>
 800cf00:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800cf04:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800cf08:	4602      	mov	r2, r0
 800cf0a:	9b05      	ldr	r3, [sp, #20]
 800cf0c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800cf10:	a90c      	add	r1, sp, #48	@ 0x30
 800cf12:	4640      	mov	r0, r8
 800cf14:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800cf18:	f002 fae4 	bl	800f4e4 <uxr_serialize_HEARTBEAT_Payload>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf20:	4611      	mov	r1, r2
 800cf22:	4630      	mov	r0, r6
 800cf24:	f000 fc00 	bl	800d728 <uxr_stamp_session_header>
 800cf28:	4640      	mov	r0, r8
 800cf2a:	f7fb ff2f 	bl	8008d8c <ucdr_buffer_length>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800cf32:	a90e      	add	r1, sp, #56	@ 0x38
 800cf34:	e9d0 0300 	ldrd	r0, r3, [r0]
 800cf38:	4798      	blx	r3
 800cf3a:	e7a2      	b.n	800ce82 <listen_message_reliably+0x42>
 800cf3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cf40:	4599      	cmp	r9, r3
 800cf42:	bf08      	it	eq
 800cf44:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 800cf48:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800cf4c:	d032      	beq.n	800cfb4 <listen_message_reliably+0x174>
 800cf4e:	9b03      	ldr	r3, [sp, #12]
 800cf50:	1aff      	subs	r7, r7, r3
 800cf52:	2f00      	cmp	r7, #0
 800cf54:	bf08      	it	eq
 800cf56:	2701      	moveq	r7, #1
 800cf58:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800cf5a:	455f      	cmp	r7, fp
 800cf5c:	bfa8      	it	ge
 800cf5e:	465f      	movge	r7, fp
 800cf60:	689c      	ldr	r4, [r3, #8]
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	4642      	mov	r2, r8
 800cf66:	463b      	mov	r3, r7
 800cf68:	4651      	mov	r1, sl
 800cf6a:	47a0      	blx	r4
 800cf6c:	ebab 0b07 	sub.w	fp, fp, r7
 800cf70:	b958      	cbnz	r0, 800cf8a <listen_message_reliably+0x14a>
 800cf72:	f1bb 0f00 	cmp.w	fp, #0
 800cf76:	dd44      	ble.n	800d002 <listen_message_reliably+0x1c2>
 800cf78:	f001 fa28 	bl	800e3cc <uxr_millis>
 800cf7c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d03c      	beq.n	800cffe <listen_message_reliably+0x1be>
 800cf84:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800cf88:	e770      	b.n	800ce6c <listen_message_reliably+0x2c>
 800cf8a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800cf8e:	4604      	mov	r4, r0
 800cf90:	a80e      	add	r0, sp, #56	@ 0x38
 800cf92:	f7fb fecf 	bl	8008d34 <ucdr_init_buffer>
 800cf96:	2500      	movs	r5, #0
 800cf98:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800cf9c:	aa08      	add	r2, sp, #32
 800cf9e:	a90e      	add	r1, sp, #56	@ 0x38
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f88d 5020 	strb.w	r5, [sp, #32]
 800cfa6:	f000 fbd5 	bl	800d754 <uxr_read_session_header>
 800cfaa:	b928      	cbnz	r0, 800cfb8 <listen_message_reliably+0x178>
 800cfac:	4620      	mov	r0, r4
 800cfae:	b01f      	add	sp, #124	@ 0x7c
 800cfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb4:	465f      	mov	r7, fp
 800cfb6:	e7cc      	b.n	800cf52 <listen_message_reliably+0x112>
 800cfb8:	4629      	mov	r1, r5
 800cfba:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800cfbe:	f001 f8bf 	bl	800e140 <uxr_stream_id_from_raw>
 800cfc2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800cfc6:	2f01      	cmp	r7, #1
 800cfc8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800cfcc:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800cfd0:	fa5f f880 	uxtb.w	r8, r0
 800cfd4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800cfd8:	d050      	beq.n	800d07c <listen_message_reliably+0x23c>
 800cfda:	2f02      	cmp	r7, #2
 800cfdc:	d016      	beq.n	800d00c <listen_message_reliably+0x1cc>
 800cfde:	2f00      	cmp	r7, #0
 800cfe0:	d1e4      	bne.n	800cfac <listen_message_reliably+0x16c>
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	f001 f8ab 	bl	800e140 <uxr_stream_id_from_raw>
 800cfea:	a90e      	add	r1, sp, #56	@ 0x38
 800cfec:	4602      	mov	r2, r0
 800cfee:	4630      	mov	r0, r6
 800cff0:	920c      	str	r2, [sp, #48]	@ 0x30
 800cff2:	f7ff fdb5 	bl	800cb60 <read_submessage_list>
 800cff6:	4620      	mov	r0, r4
 800cff8:	b01f      	add	sp, #124	@ 0x7c
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	465f      	mov	r7, fp
 800d000:	e7aa      	b.n	800cf58 <listen_message_reliably+0x118>
 800d002:	4604      	mov	r4, r0
 800d004:	4620      	mov	r0, r4
 800d006:	b01f      	add	sp, #124	@ 0x7c
 800d008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00c:	4629      	mov	r1, r5
 800d00e:	f106 0008 	add.w	r0, r6, #8
 800d012:	f001 f975 	bl	800e300 <uxr_get_input_reliable_stream>
 800d016:	4681      	mov	r9, r0
 800d018:	b338      	cbz	r0, 800d06a <listen_message_reliably+0x22a>
 800d01a:	a80e      	add	r0, sp, #56	@ 0x38
 800d01c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800d020:	f7fb feb8 	bl	8008d94 <ucdr_buffer_remaining>
 800d024:	4603      	mov	r3, r0
 800d026:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800d02a:	9000      	str	r0, [sp, #0]
 800d02c:	465a      	mov	r2, fp
 800d02e:	4651      	mov	r1, sl
 800d030:	4648      	mov	r0, r9
 800d032:	f004 f8e5 	bl	8011200 <uxr_receive_reliable_message>
 800d036:	b1c0      	cbz	r0, 800d06a <listen_message_reliably+0x22a>
 800d038:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800d03c:	b393      	cbz	r3, 800d0a4 <listen_message_reliably+0x264>
 800d03e:	af16      	add	r7, sp, #88	@ 0x58
 800d040:	f04f 0a02 	mov.w	sl, #2
 800d044:	e00a      	b.n	800d05c <listen_message_reliably+0x21c>
 800d046:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800d04a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800d04e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800d052:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d054:	4639      	mov	r1, r7
 800d056:	4630      	mov	r0, r6
 800d058:	f7ff fd82 	bl	800cb60 <read_submessage_list>
 800d05c:	2204      	movs	r2, #4
 800d05e:	4639      	mov	r1, r7
 800d060:	4648      	mov	r0, r9
 800d062:	f004 f947 	bl	80112f4 <uxr_next_input_reliable_buffer_available>
 800d066:	2800      	cmp	r0, #0
 800d068:	d1ed      	bne.n	800d046 <listen_message_reliably+0x206>
 800d06a:	4630      	mov	r0, r6
 800d06c:	462a      	mov	r2, r5
 800d06e:	4641      	mov	r1, r8
 800d070:	f7ff fc1a 	bl	800c8a8 <write_submessage_acknack.isra.0>
 800d074:	4620      	mov	r0, r4
 800d076:	b01f      	add	sp, #124	@ 0x7c
 800d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07c:	4629      	mov	r1, r5
 800d07e:	f106 0008 	add.w	r0, r6, #8
 800d082:	f001 f933 	bl	800e2ec <uxr_get_input_best_effort_stream>
 800d086:	2800      	cmp	r0, #0
 800d088:	d090      	beq.n	800cfac <listen_message_reliably+0x16c>
 800d08a:	4651      	mov	r1, sl
 800d08c:	f004 f828 	bl	80110e0 <uxr_receive_best_effort_message>
 800d090:	2800      	cmp	r0, #0
 800d092:	d08b      	beq.n	800cfac <listen_message_reliably+0x16c>
 800d094:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d098:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d09a:	a90e      	add	r1, sp, #56	@ 0x38
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7ff fd5f 	bl	800cb60 <read_submessage_list>
 800d0a2:	e783      	b.n	800cfac <listen_message_reliably+0x16c>
 800d0a4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d0a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0aa:	a90e      	add	r1, sp, #56	@ 0x38
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f7ff fd57 	bl	800cb60 <read_submessage_list>
 800d0b2:	e7c4      	b.n	800d03e <listen_message_reliably+0x1fe>

0800d0b4 <uxr_run_session_until_confirm_delivery>:
 800d0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	460d      	mov	r5, r1
 800d0bc:	f001 f986 	bl	800e3cc <uxr_millis>
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7ff fc98 	bl	800c9f8 <uxr_flash_output_streams>
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	db16      	blt.n	800d0fa <uxr_run_session_until_confirm_delivery+0x46>
 800d0cc:	462c      	mov	r4, r5
 800d0ce:	f106 0808 	add.w	r8, r6, #8
 800d0d2:	e008      	b.n	800d0e6 <uxr_run_session_until_confirm_delivery+0x32>
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f7ff feb2 	bl	800ce40 <listen_message_reliably>
 800d0dc:	f001 f976 	bl	800e3cc <uxr_millis>
 800d0e0:	1bc1      	subs	r1, r0, r7
 800d0e2:	1a6c      	subs	r4, r5, r1
 800d0e4:	d404      	bmi.n	800d0f0 <uxr_run_session_until_confirm_delivery+0x3c>
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f001 f914 	bl	800e314 <uxr_output_streams_confirmed>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d0f1      	beq.n	800d0d4 <uxr_run_session_until_confirm_delivery+0x20>
 800d0f0:	4640      	mov	r0, r8
 800d0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f6:	f001 b90d 	b.w	800e314 <uxr_output_streams_confirmed>
 800d0fa:	f106 0808 	add.w	r8, r6, #8
 800d0fe:	e7f7      	b.n	800d0f0 <uxr_run_session_until_confirm_delivery+0x3c>

0800d100 <uxr_run_session_until_all_status>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	9c08      	ldr	r4, [sp, #32]
 800d106:	4605      	mov	r5, r0
 800d108:	460f      	mov	r7, r1
 800d10a:	4690      	mov	r8, r2
 800d10c:	461e      	mov	r6, r3
 800d10e:	f7ff fc73 	bl	800c9f8 <uxr_flash_output_streams>
 800d112:	b124      	cbz	r4, 800d11e <uxr_run_session_until_all_status+0x1e>
 800d114:	4622      	mov	r2, r4
 800d116:	21ff      	movs	r1, #255	@ 0xff
 800d118:	4630      	mov	r0, r6
 800d11a:	f005 ff69 	bl	8012ff0 <memset>
 800d11e:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800d122:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d124:	f001 f952 	bl	800e3cc <uxr_millis>
 800d128:	4639      	mov	r1, r7
 800d12a:	4681      	mov	r9, r0
 800d12c:	4628      	mov	r0, r5
 800d12e:	f7ff fe87 	bl	800ce40 <listen_message_reliably>
 800d132:	f001 f94b 	bl	800e3cc <uxr_millis>
 800d136:	eba0 0109 	sub.w	r1, r0, r9
 800d13a:	1a79      	subs	r1, r7, r1
 800d13c:	b36c      	cbz	r4, 800d19a <uxr_run_session_until_all_status+0x9a>
 800d13e:	1e70      	subs	r0, r6, #1
 800d140:	46c6      	mov	lr, r8
 800d142:	1902      	adds	r2, r0, r4
 800d144:	4684      	mov	ip, r0
 800d146:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d14a:	2bff      	cmp	r3, #255	@ 0xff
 800d14c:	d007      	beq.n	800d15e <uxr_run_session_until_all_status+0x5e>
 800d14e:	4594      	cmp	ip, r2
 800d150:	d00f      	beq.n	800d172 <uxr_run_session_until_all_status+0x72>
 800d152:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d156:	2bff      	cmp	r3, #255	@ 0xff
 800d158:	f10e 0e02 	add.w	lr, lr, #2
 800d15c:	d1f7      	bne.n	800d14e <uxr_run_session_until_all_status+0x4e>
 800d15e:	4594      	cmp	ip, r2
 800d160:	f8be 3000 	ldrh.w	r3, [lr]
 800d164:	d014      	beq.n	800d190 <uxr_run_session_until_all_status+0x90>
 800d166:	f10e 0e02 	add.w	lr, lr, #2
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0eb      	beq.n	800d146 <uxr_run_session_until_all_status+0x46>
 800d16e:	2900      	cmp	r1, #0
 800d170:	dcdc      	bgt.n	800d12c <uxr_run_session_until_all_status+0x2c>
 800d172:	2300      	movs	r3, #0
 800d174:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800d176:	e001      	b.n	800d17c <uxr_run_session_until_all_status+0x7c>
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d812      	bhi.n	800d1a2 <uxr_run_session_until_all_status+0xa2>
 800d17c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d180:	4290      	cmp	r0, r2
 800d182:	d1f9      	bne.n	800d178 <uxr_run_session_until_all_status+0x78>
 800d184:	2b01      	cmp	r3, #1
 800d186:	bf8c      	ite	hi
 800d188:	2000      	movhi	r0, #0
 800d18a:	2001      	movls	r0, #1
 800d18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d190:	2900      	cmp	r1, #0
 800d192:	ddee      	ble.n	800d172 <uxr_run_session_until_all_status+0x72>
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1c9      	bne.n	800d12c <uxr_run_session_until_all_status+0x2c>
 800d198:	e7eb      	b.n	800d172 <uxr_run_session_until_all_status+0x72>
 800d19a:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d19c:	2001      	movs	r0, #1
 800d19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d1a8 <wait_session_status>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	20ff      	movs	r0, #255	@ 0xff
 800d1b0:	b09f      	sub	sp, #124	@ 0x7c
 800d1b2:	7160      	strb	r0, [r4, #5]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 80bb 	beq.w	800d330 <wait_session_status+0x188>
 800d1ba:	4692      	mov	sl, r2
 800d1bc:	469b      	mov	fp, r3
 800d1be:	f04f 0800 	mov.w	r8, #0
 800d1c2:	9105      	str	r1, [sp, #20]
 800d1c4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d1c6:	9905      	ldr	r1, [sp, #20]
 800d1c8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	47a8      	blx	r5
 800d1d0:	f001 f8fc 	bl	800e3cc <uxr_millis>
 800d1d4:	2700      	movs	r7, #0
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d1dc:	e009      	b.n	800d1f2 <wait_session_status+0x4a>
 800d1de:	f001 f8f5 	bl	800e3cc <uxr_millis>
 800d1e2:	1b43      	subs	r3, r0, r5
 800d1e4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	7962      	ldrb	r2, [r4, #5]
 800d1ec:	dd3d      	ble.n	800d26a <wait_session_status+0xc2>
 800d1ee:	2aff      	cmp	r2, #255	@ 0xff
 800d1f0:	d13b      	bne.n	800d26a <wait_session_status+0xc2>
 800d1f2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d1f4:	a90a      	add	r1, sp, #40	@ 0x28
 800d1f6:	6896      	ldr	r6, [r2, #8]
 800d1f8:	6810      	ldr	r0, [r2, #0]
 800d1fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d1fc:	47b0      	blx	r6
 800d1fe:	2800      	cmp	r0, #0
 800d200:	d0ed      	beq.n	800d1de <wait_session_status+0x36>
 800d202:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800d206:	a80e      	add	r0, sp, #56	@ 0x38
 800d208:	f7fb fd94 	bl	8008d34 <ucdr_init_buffer>
 800d20c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800d210:	aa09      	add	r2, sp, #36	@ 0x24
 800d212:	a90e      	add	r1, sp, #56	@ 0x38
 800d214:	4620      	mov	r0, r4
 800d216:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800d21a:	f000 fa9b 	bl	800d754 <uxr_read_session_header>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d0dd      	beq.n	800d1de <wait_session_status+0x36>
 800d222:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800d226:	2100      	movs	r1, #0
 800d228:	f000 ff8a 	bl	800e140 <uxr_stream_id_from_raw>
 800d22c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d236:	b2c3      	uxtb	r3, r0
 800d238:	f1b9 0f01 	cmp.w	r9, #1
 800d23c:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d246:	d05d      	beq.n	800d304 <wait_session_status+0x15c>
 800d248:	f1b9 0f02 	cmp.w	r9, #2
 800d24c:	d01a      	beq.n	800d284 <wait_session_status+0xdc>
 800d24e:	f1b9 0f00 	cmp.w	r9, #0
 800d252:	d1c4      	bne.n	800d1de <wait_session_status+0x36>
 800d254:	4649      	mov	r1, r9
 800d256:	4648      	mov	r0, r9
 800d258:	f000 ff72 	bl	800e140 <uxr_stream_id_from_raw>
 800d25c:	a90e      	add	r1, sp, #56	@ 0x38
 800d25e:	4602      	mov	r2, r0
 800d260:	900d      	str	r0, [sp, #52]	@ 0x34
 800d262:	4620      	mov	r0, r4
 800d264:	f7ff fc7c 	bl	800cb60 <read_submessage_list>
 800d268:	e7b9      	b.n	800d1de <wait_session_status+0x36>
 800d26a:	f108 0801 	add.w	r8, r8, #1
 800d26e:	45c3      	cmp	fp, r8
 800d270:	d001      	beq.n	800d276 <wait_session_status+0xce>
 800d272:	2aff      	cmp	r2, #255	@ 0xff
 800d274:	d0a6      	beq.n	800d1c4 <wait_session_status+0x1c>
 800d276:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800d27a:	bf18      	it	ne
 800d27c:	2001      	movne	r0, #1
 800d27e:	b01f      	add	sp, #124	@ 0x7c
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	4631      	mov	r1, r6
 800d286:	f104 0008 	add.w	r0, r4, #8
 800d28a:	f001 f839 	bl	800e300 <uxr_get_input_reliable_stream>
 800d28e:	9006      	str	r0, [sp, #24]
 800d290:	2800      	cmp	r0, #0
 800d292:	d031      	beq.n	800d2f8 <wait_session_status+0x150>
 800d294:	aa0e      	add	r2, sp, #56	@ 0x38
 800d296:	4610      	mov	r0, r2
 800d298:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d29a:	9207      	str	r2, [sp, #28]
 800d29c:	f7fb fd7a 	bl	8008d94 <ucdr_buffer_remaining>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800d2a6:	9000      	str	r0, [sp, #0]
 800d2a8:	9a07      	ldr	r2, [sp, #28]
 800d2aa:	9904      	ldr	r1, [sp, #16]
 800d2ac:	9806      	ldr	r0, [sp, #24]
 800d2ae:	f003 ffa7 	bl	8011200 <uxr_receive_reliable_message>
 800d2b2:	b308      	cbz	r0, 800d2f8 <wait_session_status+0x150>
 800d2b4:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d041      	beq.n	800d340 <wait_session_status+0x198>
 800d2bc:	f8cd 8010 	str.w	r8, [sp, #16]
 800d2c0:	9507      	str	r5, [sp, #28]
 800d2c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d2c6:	9d06      	ldr	r5, [sp, #24]
 800d2c8:	f04f 0902 	mov.w	r9, #2
 800d2cc:	e00a      	b.n	800d2e4 <wait_session_status+0x13c>
 800d2ce:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800d2d2:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800d2d6:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d2da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2dc:	a916      	add	r1, sp, #88	@ 0x58
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f7ff fc3e 	bl	800cb60 <read_submessage_list>
 800d2e4:	2204      	movs	r2, #4
 800d2e6:	a916      	add	r1, sp, #88	@ 0x58
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f004 f803 	bl	80112f4 <uxr_next_input_reliable_buffer_available>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d1ed      	bne.n	800d2ce <wait_session_status+0x126>
 800d2f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d2f6:	9d07      	ldr	r5, [sp, #28]
 800d2f8:	9903      	ldr	r1, [sp, #12]
 800d2fa:	4632      	mov	r2, r6
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f7ff fad3 	bl	800c8a8 <write_submessage_acknack.isra.0>
 800d302:	e76c      	b.n	800d1de <wait_session_status+0x36>
 800d304:	4631      	mov	r1, r6
 800d306:	f104 0008 	add.w	r0, r4, #8
 800d30a:	f000 ffef 	bl	800e2ec <uxr_get_input_best_effort_stream>
 800d30e:	2800      	cmp	r0, #0
 800d310:	f43f af65 	beq.w	800d1de <wait_session_status+0x36>
 800d314:	9904      	ldr	r1, [sp, #16]
 800d316:	f003 fee3 	bl	80110e0 <uxr_receive_best_effort_message>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f43f af5f 	beq.w	800d1de <wait_session_status+0x36>
 800d320:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d326:	a90e      	add	r1, sp, #56	@ 0x38
 800d328:	4620      	mov	r0, r4
 800d32a:	f7ff fc19 	bl	800cb60 <read_submessage_list>
 800d32e:	e756      	b.n	800d1de <wait_session_status+0x36>
 800d330:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d332:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d336:	47a0      	blx	r4
 800d338:	2001      	movs	r0, #1
 800d33a:	b01f      	add	sp, #124	@ 0x7c
 800d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d340:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d346:	a90e      	add	r1, sp, #56	@ 0x38
 800d348:	4620      	mov	r0, r4
 800d34a:	f7ff fc09 	bl	800cb60 <read_submessage_list>
 800d34e:	e7b5      	b.n	800d2bc <wait_session_status+0x114>

0800d350 <uxr_delete_session_retries>:
 800d350:	b530      	push	{r4, r5, lr}
 800d352:	b08f      	sub	sp, #60	@ 0x3c
 800d354:	4604      	mov	r4, r0
 800d356:	460d      	mov	r5, r1
 800d358:	f000 fa3a 	bl	800d7d0 <uxr_session_header_offset>
 800d35c:	2300      	movs	r3, #0
 800d35e:	2210      	movs	r2, #16
 800d360:	9000      	str	r0, [sp, #0]
 800d362:	a902      	add	r1, sp, #8
 800d364:	a806      	add	r0, sp, #24
 800d366:	f7fb fcd3 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800d36a:	a906      	add	r1, sp, #24
 800d36c:	4620      	mov	r0, r4
 800d36e:	f000 f981 	bl	800d674 <uxr_buffer_delete_session>
 800d372:	2200      	movs	r2, #0
 800d374:	4611      	mov	r1, r2
 800d376:	9b06      	ldr	r3, [sp, #24]
 800d378:	4620      	mov	r0, r4
 800d37a:	f000 f9d5 	bl	800d728 <uxr_stamp_session_header>
 800d37e:	a806      	add	r0, sp, #24
 800d380:	f7fb fd04 	bl	8008d8c <ucdr_buffer_length>
 800d384:	462b      	mov	r3, r5
 800d386:	4602      	mov	r2, r0
 800d388:	a902      	add	r1, sp, #8
 800d38a:	4620      	mov	r0, r4
 800d38c:	f7ff ff0c 	bl	800d1a8 <wait_session_status>
 800d390:	b118      	cbz	r0, 800d39a <uxr_delete_session_retries+0x4a>
 800d392:	7960      	ldrb	r0, [r4, #5]
 800d394:	fab0 f080 	clz	r0, r0
 800d398:	0940      	lsrs	r0, r0, #5
 800d39a:	b00f      	add	sp, #60	@ 0x3c
 800d39c:	bd30      	pop	{r4, r5, pc}
 800d39e:	bf00      	nop

0800d3a0 <uxr_create_session>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	f100 0308 	add.w	r3, r0, #8
 800d3a8:	b0ab      	sub	sp, #172	@ 0xac
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	9303      	str	r3, [sp, #12]
 800d3b0:	f000 feec 	bl	800e18c <uxr_reset_stream_storage>
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f000 fa0b 	bl	800d7d0 <uxr_session_header_offset>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9000      	str	r0, [sp, #0]
 800d3be:	221c      	movs	r2, #28
 800d3c0:	a90b      	add	r1, sp, #44	@ 0x2c
 800d3c2:	a812      	add	r0, sp, #72	@ 0x48
 800d3c4:	f7fb fca4 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800d3c8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3ca:	8a1a      	ldrh	r2, [r3, #16]
 800d3cc:	3a04      	subs	r2, #4
 800d3ce:	b292      	uxth	r2, r2
 800d3d0:	a912      	add	r1, sp, #72	@ 0x48
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 f924 	bl	800d620 <uxr_buffer_create_session>
 800d3d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f000 f990 	bl	800d700 <uxr_stamp_create_session_header>
 800d3e0:	a812      	add	r0, sp, #72	@ 0x48
 800d3e2:	f7fb fcd3 	bl	8008d8c <ucdr_buffer_length>
 800d3e6:	23ff      	movs	r3, #255	@ 0xff
 800d3e8:	4683      	mov	fp, r0
 800d3ea:	7163      	strb	r3, [r4, #5]
 800d3ec:	f04f 080a 	mov.w	r8, #10
 800d3f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3f2:	465a      	mov	r2, fp
 800d3f4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d3f8:	a90b      	add	r1, sp, #44	@ 0x2c
 800d3fa:	47a8      	blx	r5
 800d3fc:	f000 ffe6 	bl	800e3cc <uxr_millis>
 800d400:	2700      	movs	r7, #0
 800d402:	4605      	mov	r5, r0
 800d404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d408:	e009      	b.n	800d41e <uxr_create_session+0x7e>
 800d40a:	f000 ffdf 	bl	800e3cc <uxr_millis>
 800d40e:	1b43      	subs	r3, r0, r5
 800d410:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d414:	2b00      	cmp	r3, #0
 800d416:	7962      	ldrb	r2, [r4, #5]
 800d418:	dd3d      	ble.n	800d496 <uxr_create_session+0xf6>
 800d41a:	2aff      	cmp	r2, #255	@ 0xff
 800d41c:	d13b      	bne.n	800d496 <uxr_create_session+0xf6>
 800d41e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d420:	a907      	add	r1, sp, #28
 800d422:	6896      	ldr	r6, [r2, #8]
 800d424:	6810      	ldr	r0, [r2, #0]
 800d426:	aa08      	add	r2, sp, #32
 800d428:	47b0      	blx	r6
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d0ed      	beq.n	800d40a <uxr_create_session+0x6a>
 800d42e:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d432:	a81a      	add	r0, sp, #104	@ 0x68
 800d434:	f7fb fc7e 	bl	8008d34 <ucdr_init_buffer>
 800d438:	f10d 031a 	add.w	r3, sp, #26
 800d43c:	aa06      	add	r2, sp, #24
 800d43e:	a91a      	add	r1, sp, #104	@ 0x68
 800d440:	4620      	mov	r0, r4
 800d442:	f88d 7018 	strb.w	r7, [sp, #24]
 800d446:	f000 f985 	bl	800d754 <uxr_read_session_header>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d0dd      	beq.n	800d40a <uxr_create_session+0x6a>
 800d44e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d452:	2100      	movs	r1, #0
 800d454:	f000 fe74 	bl	800e140 <uxr_stream_id_from_raw>
 800d458:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d45c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d460:	9302      	str	r3, [sp, #8]
 800d462:	f1b9 0f01 	cmp.w	r9, #1
 800d466:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d46a:	fa5f fa80 	uxtb.w	sl, r0
 800d46e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d472:	d056      	beq.n	800d522 <uxr_create_session+0x182>
 800d474:	f1b9 0f02 	cmp.w	r9, #2
 800d478:	d018      	beq.n	800d4ac <uxr_create_session+0x10c>
 800d47a:	f1b9 0f00 	cmp.w	r9, #0
 800d47e:	d1c4      	bne.n	800d40a <uxr_create_session+0x6a>
 800d480:	4649      	mov	r1, r9
 800d482:	4648      	mov	r0, r9
 800d484:	f000 fe5c 	bl	800e140 <uxr_stream_id_from_raw>
 800d488:	a91a      	add	r1, sp, #104	@ 0x68
 800d48a:	4602      	mov	r2, r0
 800d48c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d48e:	4620      	mov	r0, r4
 800d490:	f7ff fb66 	bl	800cb60 <read_submessage_list>
 800d494:	e7b9      	b.n	800d40a <uxr_create_session+0x6a>
 800d496:	f1b8 0801 	subs.w	r8, r8, #1
 800d49a:	d001      	beq.n	800d4a0 <uxr_create_session+0x100>
 800d49c:	2aff      	cmp	r2, #255	@ 0xff
 800d49e:	d0a7      	beq.n	800d3f0 <uxr_create_session+0x50>
 800d4a0:	2a00      	cmp	r2, #0
 800d4a2:	d05b      	beq.n	800d55c <uxr_create_session+0x1bc>
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	b02b      	add	sp, #172	@ 0xac
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	9803      	ldr	r0, [sp, #12]
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	f000 ff26 	bl	800e300 <uxr_get_input_reliable_stream>
 800d4b4:	9004      	str	r0, [sp, #16]
 800d4b6:	b370      	cbz	r0, 800d516 <uxr_create_session+0x176>
 800d4b8:	aa1a      	add	r2, sp, #104	@ 0x68
 800d4ba:	4610      	mov	r0, r2
 800d4bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d4be:	9205      	str	r2, [sp, #20]
 800d4c0:	f7fb fc68 	bl	8008d94 <ucdr_buffer_remaining>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	f10d 0019 	add.w	r0, sp, #25
 800d4ca:	9000      	str	r0, [sp, #0]
 800d4cc:	9a05      	ldr	r2, [sp, #20]
 800d4ce:	9902      	ldr	r1, [sp, #8]
 800d4d0:	9804      	ldr	r0, [sp, #16]
 800d4d2:	f003 fe95 	bl	8011200 <uxr_receive_reliable_message>
 800d4d6:	b1f0      	cbz	r0, 800d516 <uxr_create_session+0x176>
 800d4d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d035      	beq.n	800d54c <uxr_create_session+0x1ac>
 800d4e0:	f8cd b008 	str.w	fp, [sp, #8]
 800d4e4:	f04f 0902 	mov.w	r9, #2
 800d4e8:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d4ec:	e00a      	b.n	800d504 <uxr_create_session+0x164>
 800d4ee:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800d4f2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d4f6:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d4fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4fc:	a922      	add	r1, sp, #136	@ 0x88
 800d4fe:	4620      	mov	r0, r4
 800d500:	f7ff fb2e 	bl	800cb60 <read_submessage_list>
 800d504:	2204      	movs	r2, #4
 800d506:	a922      	add	r1, sp, #136	@ 0x88
 800d508:	4658      	mov	r0, fp
 800d50a:	f003 fef3 	bl	80112f4 <uxr_next_input_reliable_buffer_available>
 800d50e:	2800      	cmp	r0, #0
 800d510:	d1ed      	bne.n	800d4ee <uxr_create_session+0x14e>
 800d512:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d516:	4632      	mov	r2, r6
 800d518:	4651      	mov	r1, sl
 800d51a:	4620      	mov	r0, r4
 800d51c:	f7ff f9c4 	bl	800c8a8 <write_submessage_acknack.isra.0>
 800d520:	e773      	b.n	800d40a <uxr_create_session+0x6a>
 800d522:	9803      	ldr	r0, [sp, #12]
 800d524:	4631      	mov	r1, r6
 800d526:	f000 fee1 	bl	800e2ec <uxr_get_input_best_effort_stream>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f43f af6d 	beq.w	800d40a <uxr_create_session+0x6a>
 800d530:	9902      	ldr	r1, [sp, #8]
 800d532:	f003 fdd5 	bl	80110e0 <uxr_receive_best_effort_message>
 800d536:	2800      	cmp	r0, #0
 800d538:	f43f af67 	beq.w	800d40a <uxr_create_session+0x6a>
 800d53c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d540:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d542:	a91a      	add	r1, sp, #104	@ 0x68
 800d544:	4620      	mov	r0, r4
 800d546:	f7ff fb0b 	bl	800cb60 <read_submessage_list>
 800d54a:	e75e      	b.n	800d40a <uxr_create_session+0x6a>
 800d54c:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d550:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d552:	a91a      	add	r1, sp, #104	@ 0x68
 800d554:	4620      	mov	r0, r4
 800d556:	f7ff fb03 	bl	800cb60 <read_submessage_list>
 800d55a:	e7c1      	b.n	800d4e0 <uxr_create_session+0x140>
 800d55c:	9803      	ldr	r0, [sp, #12]
 800d55e:	f000 fe15 	bl	800e18c <uxr_reset_stream_storage>
 800d562:	2001      	movs	r0, #1
 800d564:	b02b      	add	sp, #172	@ 0xac
 800d566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56a:	bf00      	nop

0800d56c <uxr_prepare_stream_to_write_submessage>:
 800d56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d570:	b082      	sub	sp, #8
 800d572:	4606      	mov	r6, r0
 800d574:	4610      	mov	r0, r2
 800d576:	4614      	mov	r4, r2
 800d578:	9101      	str	r1, [sp, #4]
 800d57a:	461f      	mov	r7, r3
 800d57c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d580:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800d584:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800d588:	f000 ff1a 	bl	800e3c0 <uxr_submessage_padding>
 800d58c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d590:	1d21      	adds	r1, r4, #4
 800d592:	2b01      	cmp	r3, #1
 800d594:	eb01 0a00 	add.w	sl, r1, r0
 800d598:	d012      	beq.n	800d5c0 <uxr_prepare_stream_to_write_submessage+0x54>
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d003      	beq.n	800d5a6 <uxr_prepare_stream_to_write_submessage+0x3a>
 800d59e:	2000      	movs	r0, #0
 800d5a0:	b002      	add	sp, #8
 800d5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f106 0008 	add.w	r0, r6, #8
 800d5ac:	f000 fe94 	bl	800e2d8 <uxr_get_output_reliable_stream>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d0f4      	beq.n	800d59e <uxr_prepare_stream_to_write_submessage+0x32>
 800d5b4:	4651      	mov	r1, sl
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	f004 f852 	bl	8011660 <uxr_prepare_reliable_buffer_to_write>
 800d5bc:	b968      	cbnz	r0, 800d5da <uxr_prepare_stream_to_write_submessage+0x6e>
 800d5be:	e7ee      	b.n	800d59e <uxr_prepare_stream_to_write_submessage+0x32>
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	f106 0008 	add.w	r0, r6, #8
 800d5c6:	f000 fe7f 	bl	800e2c8 <uxr_get_output_best_effort_stream>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d0e7      	beq.n	800d59e <uxr_prepare_stream_to_write_submessage+0x32>
 800d5ce:	4651      	mov	r1, sl
 800d5d0:	463a      	mov	r2, r7
 800d5d2:	f003 ff77 	bl	80114c4 <uxr_prepare_best_effort_buffer_to_write>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0e1      	beq.n	800d59e <uxr_prepare_stream_to_write_submessage+0x32>
 800d5da:	464b      	mov	r3, r9
 800d5dc:	b2a2      	uxth	r2, r4
 800d5de:	4641      	mov	r1, r8
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	f000 fead 	bl	800e340 <uxr_buffer_submessage_header>
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	b002      	add	sp, #8
 800d5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ee:	bf00      	nop

0800d5f0 <uxr_init_session_info>:
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f361 0307 	bfi	r3, r1, #0, #8
 800d5f6:	0e11      	lsrs	r1, r2, #24
 800d5f8:	f361 230f 	bfi	r3, r1, #8, #8
 800d5fc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800d600:	f361 4317 	bfi	r3, r1, #16, #8
 800d604:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d608:	f361 631f 	bfi	r3, r1, #24, #8
 800d60c:	f04f 0c09 	mov.w	ip, #9
 800d610:	21ff      	movs	r1, #255	@ 0xff
 800d612:	6003      	str	r3, [r0, #0]
 800d614:	7102      	strb	r2, [r0, #4]
 800d616:	f8a0 c006 	strh.w	ip, [r0, #6]
 800d61a:	7141      	strb	r1, [r0, #5]
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <uxr_buffer_create_session>:
 800d620:	b530      	push	{r4, r5, lr}
 800d622:	4d13      	ldr	r5, [pc, #76]	@ (800d670 <uxr_buffer_create_session+0x50>)
 800d624:	b089      	sub	sp, #36	@ 0x24
 800d626:	2300      	movs	r3, #0
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d62e:	682a      	ldr	r2, [r5, #0]
 800d630:	9200      	str	r2, [sp, #0]
 800d632:	460c      	mov	r4, r1
 800d634:	2201      	movs	r2, #1
 800d636:	88a9      	ldrh	r1, [r5, #4]
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	80c2      	strh	r2, [r0, #6]
 800d63c:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d640:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800d644:	7800      	ldrb	r0, [r0, #0]
 800d646:	9303      	str	r3, [sp, #12]
 800d648:	f88d 2004 	strb.w	r2, [sp, #4]
 800d64c:	9102      	str	r1, [sp, #8]
 800d64e:	2210      	movs	r2, #16
 800d650:	4619      	mov	r1, r3
 800d652:	f88d 000c 	strb.w	r0, [sp, #12]
 800d656:	4620      	mov	r0, r4
 800d658:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d65c:	9306      	str	r3, [sp, #24]
 800d65e:	f000 fe6f 	bl	800e340 <uxr_buffer_submessage_header>
 800d662:	4669      	mov	r1, sp
 800d664:	4620      	mov	r0, r4
 800d666:	f001 fda1 	bl	800f1ac <uxr_serialize_CREATE_CLIENT_Payload>
 800d66a:	b009      	add	sp, #36	@ 0x24
 800d66c:	bd30      	pop	{r4, r5, pc}
 800d66e:	bf00      	nop
 800d670:	08013fe4 	.word	0x08013fe4

0800d674 <uxr_buffer_delete_session>:
 800d674:	b510      	push	{r4, lr}
 800d676:	4a0c      	ldr	r2, [pc, #48]	@ (800d6a8 <uxr_buffer_delete_session+0x34>)
 800d678:	b082      	sub	sp, #8
 800d67a:	460c      	mov	r4, r1
 800d67c:	2302      	movs	r3, #2
 800d67e:	8911      	ldrh	r1, [r2, #8]
 800d680:	80c3      	strh	r3, [r0, #6]
 800d682:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800d686:	2300      	movs	r3, #0
 800d688:	2204      	movs	r2, #4
 800d68a:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d68e:	4620      	mov	r0, r4
 800d690:	2103      	movs	r1, #3
 800d692:	f8ad c004 	strh.w	ip, [sp, #4]
 800d696:	f000 fe53 	bl	800e340 <uxr_buffer_submessage_header>
 800d69a:	a901      	add	r1, sp, #4
 800d69c:	4620      	mov	r0, r4
 800d69e:	f001 fe29 	bl	800f2f4 <uxr_serialize_DELETE_Payload>
 800d6a2:	b002      	add	sp, #8
 800d6a4:	bd10      	pop	{r4, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08013fe4 	.word	0x08013fe4

0800d6ac <uxr_read_create_session_status>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	b088      	sub	sp, #32
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	a901      	add	r1, sp, #4
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f001 fe2c 	bl	800f314 <uxr_deserialize_STATUS_AGENT_Payload>
 800d6bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6c0:	7163      	strb	r3, [r4, #5]
 800d6c2:	b008      	add	sp, #32
 800d6c4:	bd10      	pop	{r4, pc}
 800d6c6:	bf00      	nop

0800d6c8 <uxr_read_delete_session_status>:
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	b082      	sub	sp, #8
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4669      	mov	r1, sp
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f001 fe4e 	bl	800f374 <uxr_deserialize_STATUS_Payload>
 800d6d8:	88e3      	ldrh	r3, [r4, #6]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d001      	beq.n	800d6e2 <uxr_read_delete_session_status+0x1a>
 800d6de:	b002      	add	sp, #8
 800d6e0:	bd10      	pop	{r4, pc}
 800d6e2:	f10d 0002 	add.w	r0, sp, #2
 800d6e6:	f7fe ff69 	bl	800c5bc <uxr_object_id_from_raw>
 800d6ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800d6ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6f6:	bf08      	it	eq
 800d6f8:	7162      	strbeq	r2, [r4, #5]
 800d6fa:	b002      	add	sp, #8
 800d6fc:	bd10      	pop	{r4, pc}
 800d6fe:	bf00      	nop

0800d700 <uxr_stamp_create_session_header>:
 800d700:	b510      	push	{r4, lr}
 800d702:	2208      	movs	r2, #8
 800d704:	b08a      	sub	sp, #40	@ 0x28
 800d706:	4604      	mov	r4, r0
 800d708:	eb0d 0002 	add.w	r0, sp, r2
 800d70c:	f7fb fb12 	bl	8008d34 <ucdr_init_buffer>
 800d710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d714:	9400      	str	r4, [sp, #0]
 800d716:	2300      	movs	r3, #0
 800d718:	461a      	mov	r2, r3
 800d71a:	a802      	add	r0, sp, #8
 800d71c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800d720:	f001 f80c 	bl	800e73c <uxr_serialize_message_header>
 800d724:	b00a      	add	sp, #40	@ 0x28
 800d726:	bd10      	pop	{r4, pc}

0800d728 <uxr_stamp_session_header>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	4604      	mov	r4, r0
 800d72c:	b08a      	sub	sp, #40	@ 0x28
 800d72e:	4616      	mov	r6, r2
 800d730:	2208      	movs	r2, #8
 800d732:	eb0d 0002 	add.w	r0, sp, r2
 800d736:	460d      	mov	r5, r1
 800d738:	4619      	mov	r1, r3
 800d73a:	f7fb fafb 	bl	8008d34 <ucdr_init_buffer>
 800d73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d742:	9400      	str	r4, [sp, #0]
 800d744:	4633      	mov	r3, r6
 800d746:	462a      	mov	r2, r5
 800d748:	a802      	add	r0, sp, #8
 800d74a:	f000 fff7 	bl	800e73c <uxr_serialize_message_header>
 800d74e:	b00a      	add	sp, #40	@ 0x28
 800d750:	bd70      	pop	{r4, r5, r6, pc}
 800d752:	bf00      	nop

0800d754 <uxr_read_session_header>:
 800d754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d756:	4607      	mov	r7, r0
 800d758:	b085      	sub	sp, #20
 800d75a:	4608      	mov	r0, r1
 800d75c:	460c      	mov	r4, r1
 800d75e:	4615      	mov	r5, r2
 800d760:	461e      	mov	r6, r3
 800d762:	f7fb fb17 	bl	8008d94 <ucdr_buffer_remaining>
 800d766:	2808      	cmp	r0, #8
 800d768:	d802      	bhi.n	800d770 <uxr_read_session_header+0x1c>
 800d76a:	2000      	movs	r0, #0
 800d76c:	b005      	add	sp, #20
 800d76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d770:	ab03      	add	r3, sp, #12
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	462a      	mov	r2, r5
 800d776:	4633      	mov	r3, r6
 800d778:	f10d 010b 	add.w	r1, sp, #11
 800d77c:	4620      	mov	r0, r4
 800d77e:	f000 fffb 	bl	800e778 <uxr_deserialize_message_header>
 800d782:	783a      	ldrb	r2, [r7, #0]
 800d784:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d788:	4293      	cmp	r3, r2
 800d78a:	d1ee      	bne.n	800d76a <uxr_read_session_header+0x16>
 800d78c:	061b      	lsls	r3, r3, #24
 800d78e:	d41c      	bmi.n	800d7ca <uxr_read_session_header+0x76>
 800d790:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d794:	787b      	ldrb	r3, [r7, #1]
 800d796:	429a      	cmp	r2, r3
 800d798:	d003      	beq.n	800d7a2 <uxr_read_session_header+0x4e>
 800d79a:	2001      	movs	r0, #1
 800d79c:	f080 0001 	eor.w	r0, r0, #1
 800d7a0:	e7e4      	b.n	800d76c <uxr_read_session_header+0x18>
 800d7a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d7a6:	78bb      	ldrb	r3, [r7, #2]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	f107 0102 	add.w	r1, r7, #2
 800d7ae:	d1f4      	bne.n	800d79a <uxr_read_session_header+0x46>
 800d7b0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d7b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d1ee      	bne.n	800d79a <uxr_read_session_header+0x46>
 800d7bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d7c0:	784b      	ldrb	r3, [r1, #1]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d1e9      	bne.n	800d79a <uxr_read_session_header+0x46>
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	e7e8      	b.n	800d79c <uxr_read_session_header+0x48>
 800d7ca:	2001      	movs	r0, #1
 800d7cc:	e7ce      	b.n	800d76c <uxr_read_session_header+0x18>
 800d7ce:	bf00      	nop

0800d7d0 <uxr_session_header_offset>:
 800d7d0:	f990 3000 	ldrsb.w	r3, [r0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bfb4      	ite	lt
 800d7d8:	2004      	movlt	r0, #4
 800d7da:	2008      	movge	r0, #8
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop

0800d7e0 <uxr_init_base_object_request>:
 800d7e0:	b510      	push	{r4, lr}
 800d7e2:	88c3      	ldrh	r3, [r0, #6]
 800d7e4:	b082      	sub	sp, #8
 800d7e6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800d7ea:	9101      	str	r1, [sp, #4]
 800d7ec:	f1a3 010a 	sub.w	r1, r3, #10
 800d7f0:	b289      	uxth	r1, r1
 800d7f2:	42a1      	cmp	r1, r4
 800d7f4:	d80e      	bhi.n	800d814 <uxr_init_base_object_request+0x34>
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	b29c      	uxth	r4, r3
 800d7fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	80c4      	strh	r4, [r0, #6]
 800d802:	9801      	ldr	r0, [sp, #4]
 800d804:	7011      	strb	r1, [r2, #0]
 800d806:	7053      	strb	r3, [r2, #1]
 800d808:	1c91      	adds	r1, r2, #2
 800d80a:	f7fe feeb 	bl	800c5e4 <uxr_object_id_to_raw>
 800d80e:	4620      	mov	r0, r4
 800d810:	b002      	add	sp, #8
 800d812:	bd10      	pop	{r4, pc}
 800d814:	230a      	movs	r3, #10
 800d816:	2100      	movs	r1, #0
 800d818:	461c      	mov	r4, r3
 800d81a:	e7f1      	b.n	800d800 <uxr_init_base_object_request+0x20>

0800d81c <uxr_parse_base_object_request>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4604      	mov	r4, r0
 800d820:	3002      	adds	r0, #2
 800d822:	460d      	mov	r5, r1
 800d824:	4616      	mov	r6, r2
 800d826:	f7fe fec9 	bl	800c5bc <uxr_object_id_from_raw>
 800d82a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800d82e:	8028      	strh	r0, [r5, #0]
 800d830:	806b      	strh	r3, [r5, #2]
 800d832:	8823      	ldrh	r3, [r4, #0]
 800d834:	ba5b      	rev16	r3, r3
 800d836:	8033      	strh	r3, [r6, #0]
 800d838:	bd70      	pop	{r4, r5, r6, pc}
 800d83a:	bf00      	nop

0800d83c <uxr_init_framing_io>:
 800d83c:	2300      	movs	r3, #0
 800d83e:	7041      	strb	r1, [r0, #1]
 800d840:	7003      	strb	r3, [r0, #0]
 800d842:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop

0800d848 <uxr_write_framed_msg>:
 800d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	f890 c001 	ldrb.w	ip, [r0, #1]
 800d850:	4617      	mov	r7, r2
 800d852:	227e      	movs	r2, #126	@ 0x7e
 800d854:	b085      	sub	sp, #20
 800d856:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800d85a:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800d85e:	2a01      	cmp	r2, #1
 800d860:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800d864:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800d868:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d86c:	4604      	mov	r4, r0
 800d86e:	460e      	mov	r6, r1
 800d870:	469a      	mov	sl, r3
 800d872:	f240 812e 	bls.w	800dad2 <uxr_write_framed_msg+0x28a>
 800d876:	2003      	movs	r0, #3
 800d878:	2102      	movs	r1, #2
 800d87a:	f04f 0905 	mov.w	r9, #5
 800d87e:	2204      	movs	r2, #4
 800d880:	4686      	mov	lr, r0
 800d882:	460b      	mov	r3, r1
 800d884:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800d888:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800d88c:	f1bc 0f01 	cmp.w	ip, #1
 800d890:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800d894:	4421      	add	r1, r4
 800d896:	f240 8110 	bls.w	800daba <uxr_write_framed_msg+0x272>
 800d89a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800d89e:	fa5f fc8b 	uxtb.w	ip, fp
 800d8a2:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800d8a6:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800d8aa:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800d8ae:	f1be 0f01 	cmp.w	lr, #1
 800d8b2:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800d8b6:	b2ed      	uxtb	r5, r5
 800d8b8:	d94c      	bls.n	800d954 <uxr_write_framed_msg+0x10c>
 800d8ba:	4420      	add	r0, r4
 800d8bc:	2d01      	cmp	r5, #1
 800d8be:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800d8c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d8c6:	d95d      	bls.n	800d984 <uxr_write_framed_msg+0x13c>
 800d8c8:	18a0      	adds	r0, r4, r2
 800d8ca:	3201      	adds	r2, #1
 800d8cc:	b2d2      	uxtb	r2, r2
 800d8ce:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800d8d2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d8d6:	f1bb 0f00 	cmp.w	fp, #0
 800d8da:	f000 8108 	beq.w	800daee <uxr_write_framed_msg+0x2a6>
 800d8de:	f04f 0c00 	mov.w	ip, #0
 800d8e2:	4661      	mov	r1, ip
 800d8e4:	46de      	mov	lr, fp
 800d8e6:	46e3      	mov	fp, ip
 800d8e8:	46d4      	mov	ip, sl
 800d8ea:	468a      	mov	sl, r1
 800d8ec:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800daf8 <uxr_write_framed_msg+0x2b0>
 800d8f0:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800d8f4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800d8f8:	2901      	cmp	r1, #1
 800d8fa:	d91b      	bls.n	800d934 <uxr_write_framed_msg+0xec>
 800d8fc:	2a29      	cmp	r2, #41	@ 0x29
 800d8fe:	d84e      	bhi.n	800d99e <uxr_write_framed_msg+0x156>
 800d900:	18a1      	adds	r1, r4, r2
 800d902:	3201      	adds	r2, #1
 800d904:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800d908:	b2d2      	uxtb	r2, r2
 800d90a:	ea8b 0303 	eor.w	r3, fp, r3
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d914:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800d918:	f10a 0a01 	add.w	sl, sl, #1
 800d91c:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800d920:	45d6      	cmp	lr, sl
 800d922:	d95a      	bls.n	800d9da <uxr_write_framed_msg+0x192>
 800d924:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800d928:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d92c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800d930:	2901      	cmp	r1, #1
 800d932:	d8e3      	bhi.n	800d8fc <uxr_write_framed_msg+0xb4>
 800d934:	1c51      	adds	r1, r2, #1
 800d936:	b2c9      	uxtb	r1, r1
 800d938:	2929      	cmp	r1, #41	@ 0x29
 800d93a:	d830      	bhi.n	800d99e <uxr_write_framed_msg+0x156>
 800d93c:	18a1      	adds	r1, r4, r2
 800d93e:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800d942:	3202      	adds	r2, #2
 800d944:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800d948:	f083 0020 	eor.w	r0, r3, #32
 800d94c:	b2d2      	uxtb	r2, r2
 800d94e:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800d952:	e7da      	b.n	800d90a <uxr_write_framed_msg+0xc2>
 800d954:	eb04 0e00 	add.w	lr, r4, r0
 800d958:	f08c 0c20 	eor.w	ip, ip, #32
 800d95c:	1c82      	adds	r2, r0, #2
 800d95e:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800d962:	b2d2      	uxtb	r2, r2
 800d964:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800d968:	2d01      	cmp	r5, #1
 800d96a:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800d96e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d972:	d907      	bls.n	800d984 <uxr_write_framed_msg+0x13c>
 800d974:	4422      	add	r2, r4
 800d976:	3003      	adds	r0, #3
 800d978:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800d97c:	b2c2      	uxtb	r2, r0
 800d97e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d982:	e7ac      	b.n	800d8de <uxr_write_framed_msg+0x96>
 800d984:	18a0      	adds	r0, r4, r2
 800d986:	f081 0120 	eor.w	r1, r1, #32
 800d98a:	3202      	adds	r2, #2
 800d98c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800d990:	b2d2      	uxtb	r2, r2
 800d992:	217d      	movs	r1, #125	@ 0x7d
 800d994:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800d998:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d99c:	e79f      	b.n	800d8de <uxr_write_framed_msg+0x96>
 800d99e:	e9cd ba00 	strd	fp, sl, [sp]
 800d9a2:	2500      	movs	r5, #0
 800d9a4:	46e2      	mov	sl, ip
 800d9a6:	46f3      	mov	fp, lr
 800d9a8:	e000      	b.n	800d9ac <uxr_write_framed_msg+0x164>
 800d9aa:	b190      	cbz	r0, 800d9d2 <uxr_write_framed_msg+0x18a>
 800d9ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800d9b0:	1b52      	subs	r2, r2, r5
 800d9b2:	4643      	mov	r3, r8
 800d9b4:	4421      	add	r1, r4
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	47b0      	blx	r6
 800d9ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d9be:	4405      	add	r5, r0
 800d9c0:	4295      	cmp	r5, r2
 800d9c2:	d3f2      	bcc.n	800d9aa <uxr_write_framed_msg+0x162>
 800d9c4:	46d4      	mov	ip, sl
 800d9c6:	46de      	mov	lr, fp
 800d9c8:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d9cc:	f8dd b000 	ldr.w	fp, [sp]
 800d9d0:	d06f      	beq.n	800dab2 <uxr_write_framed_msg+0x26a>
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	b005      	add	sp, #20
 800d9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9da:	46dc      	mov	ip, fp
 800d9dc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d9e0:	f8ad c00c 	strh.w	ip, [sp, #12]
 800d9e4:	46f3      	mov	fp, lr
 800d9e6:	fa5f fc8c 	uxtb.w	ip, ip
 800d9ea:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	f04f 0900 	mov.w	r9, #0
 800d9f4:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800d9f8:	d930      	bls.n	800da5c <uxr_write_framed_msg+0x214>
 800d9fa:	2a29      	cmp	r2, #41	@ 0x29
 800d9fc:	d91c      	bls.n	800da38 <uxr_write_framed_msg+0x1f0>
 800d9fe:	2500      	movs	r5, #0
 800da00:	e001      	b.n	800da06 <uxr_write_framed_msg+0x1be>
 800da02:	2800      	cmp	r0, #0
 800da04:	d0e5      	beq.n	800d9d2 <uxr_write_framed_msg+0x18a>
 800da06:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800da0a:	1b52      	subs	r2, r2, r5
 800da0c:	4643      	mov	r3, r8
 800da0e:	4421      	add	r1, r4
 800da10:	4638      	mov	r0, r7
 800da12:	47b0      	blx	r6
 800da14:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800da18:	4405      	add	r5, r0
 800da1a:	4295      	cmp	r5, r2
 800da1c:	d3f1      	bcc.n	800da02 <uxr_write_framed_msg+0x1ba>
 800da1e:	d1d8      	bne.n	800d9d2 <uxr_write_framed_msg+0x18a>
 800da20:	f109 0310 	add.w	r3, r9, #16
 800da24:	446b      	add	r3, sp
 800da26:	2200      	movs	r2, #0
 800da28:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800da2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da30:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800da34:	2b01      	cmp	r3, #1
 800da36:	d911      	bls.n	800da5c <uxr_write_framed_msg+0x214>
 800da38:	18a3      	adds	r3, r4, r2
 800da3a:	3201      	adds	r2, #1
 800da3c:	b2d2      	uxtb	r2, r2
 800da3e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800da42:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da46:	f1b9 0f00 	cmp.w	r9, #0
 800da4a:	d119      	bne.n	800da80 <uxr_write_framed_msg+0x238>
 800da4c:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800da50:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800da54:	2b01      	cmp	r3, #1
 800da56:	f04f 0901 	mov.w	r9, #1
 800da5a:	d8ce      	bhi.n	800d9fa <uxr_write_framed_msg+0x1b2>
 800da5c:	1c53      	adds	r3, r2, #1
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b29      	cmp	r3, #41	@ 0x29
 800da62:	d8cc      	bhi.n	800d9fe <uxr_write_framed_msg+0x1b6>
 800da64:	18a3      	adds	r3, r4, r2
 800da66:	3202      	adds	r2, #2
 800da68:	f08c 0c20 	eor.w	ip, ip, #32
 800da6c:	b2d2      	uxtb	r2, r2
 800da6e:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800da72:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800da76:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da7a:	f1b9 0f00 	cmp.w	r9, #0
 800da7e:	d0e5      	beq.n	800da4c <uxr_write_framed_msg+0x204>
 800da80:	2500      	movs	r5, #0
 800da82:	e001      	b.n	800da88 <uxr_write_framed_msg+0x240>
 800da84:	2800      	cmp	r0, #0
 800da86:	d0a4      	beq.n	800d9d2 <uxr_write_framed_msg+0x18a>
 800da88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800da8c:	1b52      	subs	r2, r2, r5
 800da8e:	4643      	mov	r3, r8
 800da90:	4421      	add	r1, r4
 800da92:	4638      	mov	r0, r7
 800da94:	47b0      	blx	r6
 800da96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800da9a:	4405      	add	r5, r0
 800da9c:	4295      	cmp	r5, r2
 800da9e:	d3f1      	bcc.n	800da84 <uxr_write_framed_msg+0x23c>
 800daa0:	d197      	bne.n	800d9d2 <uxr_write_framed_msg+0x18a>
 800daa2:	2300      	movs	r3, #0
 800daa4:	fa1f f08b 	uxth.w	r0, fp
 800daa8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800daac:	b005      	add	sp, #20
 800daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab2:	2300      	movs	r3, #0
 800dab4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dab8:	e732      	b.n	800d920 <uxr_write_framed_msg+0xd8>
 800daba:	44a6      	add	lr, r4
 800dabc:	f085 0520 	eor.w	r5, r5, #32
 800dac0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800dac4:	4610      	mov	r0, r2
 800dac6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800daca:	464a      	mov	r2, r9
 800dacc:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800dad0:	e6e5      	b.n	800d89e <uxr_write_framed_msg+0x56>
 800dad2:	f08c 0c20 	eor.w	ip, ip, #32
 800dad6:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800dada:	2103      	movs	r1, #3
 800dadc:	2004      	movs	r0, #4
 800dade:	f04f 0906 	mov.w	r9, #6
 800dae2:	2205      	movs	r2, #5
 800dae4:	4686      	mov	lr, r0
 800dae6:	460b      	mov	r3, r1
 800dae8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800daec:	e6ca      	b.n	800d884 <uxr_write_framed_msg+0x3c>
 800daee:	f8ad b00c 	strh.w	fp, [sp, #12]
 800daf2:	46dc      	mov	ip, fp
 800daf4:	e779      	b.n	800d9ea <uxr_write_framed_msg+0x1a2>
 800daf6:	bf00      	nop
 800daf8:	08014478 	.word	0x08014478

0800dafc <uxr_framing_read_transport>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	4604      	mov	r4, r0
 800db02:	b083      	sub	sp, #12
 800db04:	461f      	mov	r7, r3
 800db06:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800db0a:	4689      	mov	r9, r1
 800db0c:	4692      	mov	sl, r2
 800db0e:	f000 fc5d 	bl	800e3cc <uxr_millis>
 800db12:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800db16:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800db1a:	42b3      	cmp	r3, r6
 800db1c:	4680      	mov	r8, r0
 800db1e:	d062      	beq.n	800dbe6 <uxr_framing_read_transport+0xea>
 800db20:	d81c      	bhi.n	800db5c <uxr_framing_read_transport+0x60>
 800db22:	1e75      	subs	r5, r6, #1
 800db24:	1aed      	subs	r5, r5, r3
 800db26:	b2ed      	uxtb	r5, r5
 800db28:	2600      	movs	r6, #0
 800db2a:	455d      	cmp	r5, fp
 800db2c:	d81f      	bhi.n	800db6e <uxr_framing_read_transport+0x72>
 800db2e:	19ab      	adds	r3, r5, r6
 800db30:	455b      	cmp	r3, fp
 800db32:	bf84      	itt	hi
 800db34:	ebab 0b05 	subhi.w	fp, fp, r5
 800db38:	fa5f f68b 	uxtbhi.w	r6, fp
 800db3c:	b9e5      	cbnz	r5, 800db78 <uxr_framing_read_transport+0x7c>
 800db3e:	f04f 0b00 	mov.w	fp, #0
 800db42:	f000 fc43 	bl	800e3cc <uxr_millis>
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	eba0 0108 	sub.w	r1, r0, r8
 800db4c:	1a5b      	subs	r3, r3, r1
 800db4e:	4658      	mov	r0, fp
 800db50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800db54:	603b      	str	r3, [r7, #0]
 800db56:	b003      	add	sp, #12
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	2e00      	cmp	r6, #0
 800db5e:	d04a      	beq.n	800dbf6 <uxr_framing_read_transport+0xfa>
 800db60:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800db64:	b2dd      	uxtb	r5, r3
 800db66:	3e01      	subs	r6, #1
 800db68:	455d      	cmp	r5, fp
 800db6a:	b2f6      	uxtb	r6, r6
 800db6c:	d9df      	bls.n	800db2e <uxr_framing_read_transport+0x32>
 800db6e:	fa5f f58b 	uxtb.w	r5, fp
 800db72:	2600      	movs	r6, #0
 800db74:	2d00      	cmp	r5, #0
 800db76:	d0e2      	beq.n	800db3e <uxr_framing_read_transport+0x42>
 800db78:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800db7c:	3102      	adds	r1, #2
 800db7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	4421      	add	r1, r4
 800db86:	462a      	mov	r2, r5
 800db88:	4650      	mov	r0, sl
 800db8a:	47c8      	blx	r9
 800db8c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800db90:	4a1b      	ldr	r2, [pc, #108]	@ (800dc00 <uxr_framing_read_transport+0x104>)
 800db92:	4403      	add	r3, r0
 800db94:	0859      	lsrs	r1, r3, #1
 800db96:	4683      	mov	fp, r0
 800db98:	fba2 0101 	umull	r0, r1, r2, r1
 800db9c:	0889      	lsrs	r1, r1, #2
 800db9e:	222a      	movs	r2, #42	@ 0x2a
 800dba0:	fb02 3111 	mls	r1, r2, r1, r3
 800dba4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800dba8:	f1bb 0f00 	cmp.w	fp, #0
 800dbac:	d0c7      	beq.n	800db3e <uxr_framing_read_transport+0x42>
 800dbae:	45ab      	cmp	fp, r5
 800dbb0:	d1c7      	bne.n	800db42 <uxr_framing_read_transport+0x46>
 800dbb2:	2e00      	cmp	r6, #0
 800dbb4:	d0c5      	beq.n	800db42 <uxr_framing_read_transport+0x46>
 800dbb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	3102      	adds	r1, #2
 800dbbc:	4632      	mov	r2, r6
 800dbbe:	4421      	add	r1, r4
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	47c8      	blx	r9
 800dbc6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dbca:	4a0d      	ldr	r2, [pc, #52]	@ (800dc00 <uxr_framing_read_transport+0x104>)
 800dbcc:	4403      	add	r3, r0
 800dbce:	0859      	lsrs	r1, r3, #1
 800dbd0:	fba2 2101 	umull	r2, r1, r2, r1
 800dbd4:	0889      	lsrs	r1, r1, #2
 800dbd6:	222a      	movs	r2, #42	@ 0x2a
 800dbd8:	fb02 3311 	mls	r3, r2, r1, r3
 800dbdc:	eb00 0b05 	add.w	fp, r0, r5
 800dbe0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800dbe4:	e7ad      	b.n	800db42 <uxr_framing_read_transport+0x46>
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800dbec:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800dbee:	d9be      	bls.n	800db6e <uxr_framing_read_transport+0x72>
 800dbf0:	2529      	movs	r5, #41	@ 0x29
 800dbf2:	2102      	movs	r1, #2
 800dbf4:	e7c3      	b.n	800db7e <uxr_framing_read_transport+0x82>
 800dbf6:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800dbfa:	b2dd      	uxtb	r5, r3
 800dbfc:	e795      	b.n	800db2a <uxr_framing_read_transport+0x2e>
 800dbfe:	bf00      	nop
 800dc00:	30c30c31 	.word	0x30c30c31

0800dc04 <uxr_read_framed_msg>:
 800dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc08:	461d      	mov	r5, r3
 800dc0a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800dc0e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800dc12:	b085      	sub	sp, #20
 800dc14:	459c      	cmp	ip, r3
 800dc16:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	460f      	mov	r7, r1
 800dc1e:	4616      	mov	r6, r2
 800dc20:	f000 81ae 	beq.w	800df80 <uxr_read_framed_msg+0x37c>
 800dc24:	2000      	movs	r0, #0
 800dc26:	4639      	mov	r1, r7
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d138      	bne.n	800dc9e <uxr_read_framed_msg+0x9a>
 800dc2c:	468a      	mov	sl, r1
 800dc2e:	7823      	ldrb	r3, [r4, #0]
 800dc30:	2b07      	cmp	r3, #7
 800dc32:	d8fd      	bhi.n	800dc30 <uxr_read_framed_msg+0x2c>
 800dc34:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dc38:	0116013b 	.word	0x0116013b
 800dc3c:	00cd00f0 	.word	0x00cd00f0
 800dc40:	005a00a0 	.word	0x005a00a0
 800dc44:	00080037 	.word	0x00080037
 800dc48:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800dc4c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dc50:	4290      	cmp	r0, r2
 800dc52:	f000 8167 	beq.w	800df24 <uxr_read_framed_msg+0x320>
 800dc56:	18a3      	adds	r3, r4, r2
 800dc58:	1c57      	adds	r7, r2, #1
 800dc5a:	49c7      	ldr	r1, [pc, #796]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800dc5c:	f893 c002 	ldrb.w	ip, [r3, #2]
 800dc60:	087b      	lsrs	r3, r7, #1
 800dc62:	fba1 8303 	umull	r8, r3, r1, r3
 800dc66:	089b      	lsrs	r3, r3, #2
 800dc68:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dc6c:	fb08 7313 	mls	r3, r8, r3, r7
 800dc70:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800dc74:	b2df      	uxtb	r7, r3
 800dc76:	f000 81b2 	beq.w	800dfde <uxr_read_framed_msg+0x3da>
 800dc7a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800dc7e:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800dc82:	f000 8220 	beq.w	800e0c6 <uxr_read_framed_msg+0x4c2>
 800dc86:	4661      	mov	r1, ip
 800dc88:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800dc8a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800dc8c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	2100      	movs	r1, #0
 800dc94:	429a      	cmp	r2, r3
 800dc96:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800dc98:	7021      	strb	r1, [r4, #0]
 800dc9a:	f000 8198 	beq.w	800dfce <uxr_read_framed_msg+0x3ca>
 800dc9e:	2000      	movs	r0, #0
 800dca0:	b005      	add	sp, #20
 800dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800dcaa:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dcae:	4297      	cmp	r7, r2
 800dcb0:	f000 8148 	beq.w	800df44 <uxr_read_framed_msg+0x340>
 800dcb4:	18a3      	adds	r3, r4, r2
 800dcb6:	f102 0c01 	add.w	ip, r2, #1
 800dcba:	49af      	ldr	r1, [pc, #700]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800dcbc:	7898      	ldrb	r0, [r3, #2]
 800dcbe:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800dcc2:	fba1 8303 	umull	r8, r3, r1, r3
 800dcc6:	089b      	lsrs	r3, r3, #2
 800dcc8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dccc:	fb08 c313 	mls	r3, r8, r3, ip
 800dcd0:	287d      	cmp	r0, #125	@ 0x7d
 800dcd2:	fa5f fc83 	uxtb.w	ip, r3
 800dcd6:	f000 8194 	beq.w	800e002 <uxr_read_framed_msg+0x3fe>
 800dcda:	287e      	cmp	r0, #126	@ 0x7e
 800dcdc:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800dce0:	f000 8200 	beq.w	800e0e4 <uxr_read_framed_msg+0x4e0>
 800dce4:	2307      	movs	r3, #7
 800dce6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800dce8:	7023      	strb	r3, [r4, #0]
 800dcea:	e7a0      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800dcec:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800dcee:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800dcf0:	429f      	cmp	r7, r3
 800dcf2:	f240 8164 	bls.w	800dfbe <uxr_read_framed_msg+0x3ba>
 800dcf6:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800df78 <uxr_read_framed_msg+0x374>
 800dcfa:	f8cd a00c 	str.w	sl, [sp, #12]
 800dcfe:	212a      	movs	r1, #42	@ 0x2a
 800dd00:	e01f      	b.n	800dd42 <uxr_read_framed_msg+0x13e>
 800dd02:	f89a e002 	ldrb.w	lr, [sl, #2]
 800dd06:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800dd0a:	f000 80ea 	beq.w	800dee2 <uxr_read_framed_msg+0x2de>
 800dd0e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800dd12:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800dd16:	f000 8142 	beq.w	800df9e <uxr_read_framed_msg+0x39a>
 800dd1a:	f805 e003 	strb.w	lr, [r5, r3]
 800dd1e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800dd20:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800dd22:	4f96      	ldr	r7, [pc, #600]	@ (800df7c <uxr_read_framed_msg+0x378>)
 800dd24:	ea80 020e 	eor.w	r2, r0, lr
 800dd28:	b2d2      	uxtb	r2, r2
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800dd30:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800dd38:	42bb      	cmp	r3, r7
 800dd3a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800dd3c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800dd3e:	f080 80e7 	bcs.w	800df10 <uxr_read_framed_msg+0x30c>
 800dd42:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800dd46:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800dd4a:	f100 0c01 	add.w	ip, r0, #1
 800dd4e:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800dd52:	fba9 e20e 	umull	lr, r2, r9, lr
 800dd56:	0892      	lsrs	r2, r2, #2
 800dd58:	fb01 c212 	mls	r2, r1, r2, ip
 800dd5c:	4580      	cmp	r8, r0
 800dd5e:	eb04 0a00 	add.w	sl, r4, r0
 800dd62:	fa5f fc82 	uxtb.w	ip, r2
 800dd66:	d1cc      	bne.n	800dd02 <uxr_read_framed_msg+0xfe>
 800dd68:	42bb      	cmp	r3, r7
 800dd6a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800dd6e:	f040 8128 	bne.w	800dfc2 <uxr_read_framed_msg+0x3be>
 800dd72:	2306      	movs	r3, #6
 800dd74:	7023      	strb	r3, [r4, #0]
 800dd76:	e75a      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800dd78:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800dd7c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dd80:	4297      	cmp	r7, r2
 800dd82:	f000 80cf 	beq.w	800df24 <uxr_read_framed_msg+0x320>
 800dd86:	18a3      	adds	r3, r4, r2
 800dd88:	f102 0c01 	add.w	ip, r2, #1
 800dd8c:	497a      	ldr	r1, [pc, #488]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800dd8e:	7898      	ldrb	r0, [r3, #2]
 800dd90:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800dd94:	fba1 8303 	umull	r8, r3, r1, r3
 800dd98:	089b      	lsrs	r3, r3, #2
 800dd9a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dd9e:	fb08 c313 	mls	r3, r8, r3, ip
 800dda2:	287d      	cmp	r0, #125	@ 0x7d
 800dda4:	fa5f fc83 	uxtb.w	ip, r3
 800dda8:	f000 813d 	beq.w	800e026 <uxr_read_framed_msg+0x422>
 800ddac:	287e      	cmp	r0, #126	@ 0x7e
 800ddae:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ddb2:	f000 8188 	beq.w	800e0c6 <uxr_read_framed_msg+0x4c2>
 800ddb6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800ddb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ddba:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	428b      	cmp	r3, r1
 800ddc4:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ddc6:	8662      	strh	r2, [r4, #50]	@ 0x32
 800ddc8:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800ddca:	f240 80f5 	bls.w	800dfb8 <uxr_read_framed_msg+0x3b4>
 800ddce:	7022      	strb	r2, [r4, #0]
 800ddd0:	e765      	b.n	800dc9e <uxr_read_framed_msg+0x9a>
 800ddd2:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ddd6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ddda:	4297      	cmp	r7, r2
 800dddc:	f000 80b2 	beq.w	800df44 <uxr_read_framed_msg+0x340>
 800dde0:	18a3      	adds	r3, r4, r2
 800dde2:	f102 0c01 	add.w	ip, r2, #1
 800dde6:	4964      	ldr	r1, [pc, #400]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800dde8:	7898      	ldrb	r0, [r3, #2]
 800ddea:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ddee:	fba1 8303 	umull	r8, r3, r1, r3
 800ddf2:	089b      	lsrs	r3, r3, #2
 800ddf4:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ddf8:	fb08 c313 	mls	r3, r8, r3, ip
 800ddfc:	287d      	cmp	r0, #125	@ 0x7d
 800ddfe:	fa5f fc83 	uxtb.w	ip, r3
 800de02:	f000 813b 	beq.w	800e07c <uxr_read_framed_msg+0x478>
 800de06:	287e      	cmp	r0, #126	@ 0x7e
 800de08:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800de0c:	f000 816a 	beq.w	800e0e4 <uxr_read_framed_msg+0x4e0>
 800de10:	2304      	movs	r3, #4
 800de12:	8620      	strh	r0, [r4, #48]	@ 0x30
 800de14:	7023      	strb	r3, [r4, #0]
 800de16:	e70a      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800de18:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800de1c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800de20:	4297      	cmp	r7, r2
 800de22:	f000 80c4 	beq.w	800dfae <uxr_read_framed_msg+0x3aa>
 800de26:	18a3      	adds	r3, r4, r2
 800de28:	f102 0c01 	add.w	ip, r2, #1
 800de2c:	4952      	ldr	r1, [pc, #328]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800de2e:	7898      	ldrb	r0, [r3, #2]
 800de30:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800de34:	fba1 8303 	umull	r8, r3, r1, r3
 800de38:	089b      	lsrs	r3, r3, #2
 800de3a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800de3e:	fb08 c313 	mls	r3, r8, r3, ip
 800de42:	287d      	cmp	r0, #125	@ 0x7d
 800de44:	fa5f fc83 	uxtb.w	ip, r3
 800de48:	f000 812b 	beq.w	800e0a2 <uxr_read_framed_msg+0x49e>
 800de4c:	287e      	cmp	r0, #126	@ 0x7e
 800de4e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800de52:	f000 8155 	beq.w	800e100 <uxr_read_framed_msg+0x4fc>
 800de56:	7863      	ldrb	r3, [r4, #1]
 800de58:	4283      	cmp	r3, r0
 800de5a:	bf0c      	ite	eq
 800de5c:	2303      	moveq	r3, #3
 800de5e:	2300      	movne	r3, #0
 800de60:	7023      	strb	r3, [r4, #0]
 800de62:	e6e4      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800de64:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800de68:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800de6c:	2300      	movs	r3, #0
 800de6e:	4290      	cmp	r0, r2
 800de70:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800de74:	d06b      	beq.n	800df4e <uxr_read_framed_msg+0x34a>
 800de76:	18a3      	adds	r3, r4, r2
 800de78:	f102 0c01 	add.w	ip, r2, #1
 800de7c:	493e      	ldr	r1, [pc, #248]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800de7e:	789f      	ldrb	r7, [r3, #2]
 800de80:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800de84:	fba1 8303 	umull	r8, r3, r1, r3
 800de88:	089b      	lsrs	r3, r3, #2
 800de8a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800de8e:	fb08 c313 	mls	r3, r8, r3, ip
 800de92:	2f7d      	cmp	r7, #125	@ 0x7d
 800de94:	fa5f fc83 	uxtb.w	ip, r3
 800de98:	f000 80d8 	beq.w	800e04c <uxr_read_framed_msg+0x448>
 800de9c:	2f7e      	cmp	r7, #126	@ 0x7e
 800de9e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800dea2:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800dea6:	d052      	beq.n	800df4e <uxr_read_framed_msg+0x34a>
 800dea8:	2302      	movs	r3, #2
 800deaa:	7023      	strb	r3, [r4, #0]
 800deac:	e6bf      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800deae:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800deb2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800deb6:	4930      	ldr	r1, [pc, #192]	@ (800df78 <uxr_read_framed_msg+0x374>)
 800deb8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800debc:	e004      	b.n	800dec8 <uxr_read_framed_msg+0x2c4>
 800debe:	78bb      	ldrb	r3, [r7, #2]
 800dec0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800dec4:	2b7e      	cmp	r3, #126	@ 0x7e
 800dec6:	d02a      	beq.n	800df1e <uxr_read_framed_msg+0x31a>
 800dec8:	1c50      	adds	r0, r2, #1
 800deca:	0843      	lsrs	r3, r0, #1
 800decc:	fba1 e303 	umull	lr, r3, r1, r3
 800ded0:	089b      	lsrs	r3, r3, #2
 800ded2:	fb0c 0013 	mls	r0, ip, r3, r0
 800ded6:	4590      	cmp	r8, r2
 800ded8:	eb04 0702 	add.w	r7, r4, r2
 800dedc:	b2c2      	uxtb	r2, r0
 800dede:	d1ee      	bne.n	800debe <uxr_read_framed_msg+0x2ba>
 800dee0:	e6dd      	b.n	800dc9e <uxr_read_framed_msg+0x9a>
 800dee2:	3002      	adds	r0, #2
 800dee4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800dee8:	eb04 0a02 	add.w	sl, r4, r2
 800deec:	fba9 e20e 	umull	lr, r2, r9, lr
 800def0:	0892      	lsrs	r2, r2, #2
 800def2:	45e0      	cmp	r8, ip
 800def4:	fb01 0012 	mls	r0, r1, r2, r0
 800def8:	f43f af36 	beq.w	800dd68 <uxr_read_framed_msg+0x164>
 800defc:	f89a e002 	ldrb.w	lr, [sl, #2]
 800df00:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800df04:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800df08:	d049      	beq.n	800df9e <uxr_read_framed_msg+0x39a>
 800df0a:	f08e 0e20 	eor.w	lr, lr, #32
 800df0e:	e704      	b.n	800dd1a <uxr_read_framed_msg+0x116>
 800df10:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800df14:	f43f af2d 	beq.w	800dd72 <uxr_read_framed_msg+0x16e>
 800df18:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800df1c:	d151      	bne.n	800dfc2 <uxr_read_framed_msg+0x3be>
 800df1e:	2301      	movs	r3, #1
 800df20:	7023      	strb	r3, [r4, #0]
 800df22:	e684      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800df24:	4651      	mov	r1, sl
 800df26:	f8cd b000 	str.w	fp, [sp]
 800df2a:	2301      	movs	r3, #1
 800df2c:	9301      	str	r3, [sp, #4]
 800df2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df30:	9103      	str	r1, [sp, #12]
 800df32:	4632      	mov	r2, r6
 800df34:	4620      	mov	r0, r4
 800df36:	f7ff fde1 	bl	800dafc <uxr_framing_read_transport>
 800df3a:	fab0 f080 	clz	r0, r0
 800df3e:	9903      	ldr	r1, [sp, #12]
 800df40:	0940      	lsrs	r0, r0, #5
 800df42:	e671      	b.n	800dc28 <uxr_read_framed_msg+0x24>
 800df44:	4651      	mov	r1, sl
 800df46:	f8cd b000 	str.w	fp, [sp]
 800df4a:	2302      	movs	r3, #2
 800df4c:	e7ee      	b.n	800df2c <uxr_read_framed_msg+0x328>
 800df4e:	2304      	movs	r3, #4
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	f8cd b000 	str.w	fp, [sp]
 800df56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df58:	4632      	mov	r2, r6
 800df5a:	4651      	mov	r1, sl
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7ff fdcd 	bl	800dafc <uxr_framing_read_transport>
 800df62:	2800      	cmp	r0, #0
 800df64:	f47f ae63 	bne.w	800dc2e <uxr_read_framed_msg+0x2a>
 800df68:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800df6c:	387e      	subs	r0, #126	@ 0x7e
 800df6e:	4651      	mov	r1, sl
 800df70:	bf18      	it	ne
 800df72:	2001      	movne	r0, #1
 800df74:	e658      	b.n	800dc28 <uxr_read_framed_msg+0x24>
 800df76:	bf00      	nop
 800df78:	30c30c31 	.word	0x30c30c31
 800df7c:	08014478 	.word	0x08014478
 800df80:	2305      	movs	r3, #5
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	f8cd b000 	str.w	fp, [sp]
 800df88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df8a:	f7ff fdb7 	bl	800dafc <uxr_framing_read_transport>
 800df8e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800df92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800df96:	429a      	cmp	r2, r3
 800df98:	f43f ae81 	beq.w	800dc9e <uxr_read_framed_msg+0x9a>
 800df9c:	e642      	b.n	800dc24 <uxr_read_framed_msg+0x20>
 800df9e:	42bb      	cmp	r3, r7
 800dfa0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800dfa4:	f43f aee5 	beq.w	800dd72 <uxr_read_framed_msg+0x16e>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	7023      	strb	r3, [r4, #0]
 800dfac:	e63f      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800dfae:	4651      	mov	r1, sl
 800dfb0:	f8cd b000 	str.w	fp, [sp]
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	e7b9      	b.n	800df2c <uxr_read_framed_msg+0x328>
 800dfb8:	2305      	movs	r3, #5
 800dfba:	7023      	strb	r3, [r4, #0]
 800dfbc:	e637      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800dfbe:	f43f aed8 	beq.w	800dd72 <uxr_read_framed_msg+0x16e>
 800dfc2:	1afb      	subs	r3, r7, r3
 800dfc4:	3302      	adds	r3, #2
 800dfc6:	e9cd b300 	strd	fp, r3, [sp]
 800dfca:	4651      	mov	r1, sl
 800dfcc:	e7af      	b.n	800df2e <uxr_read_framed_msg+0x32a>
 800dfce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dfd0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800dfd4:	7013      	strb	r3, [r2, #0]
 800dfd6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800dfd8:	b005      	add	sp, #20
 800dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfde:	4287      	cmp	r7, r0
 800dfe0:	d0a0      	beq.n	800df24 <uxr_read_framed_msg+0x320>
 800dfe2:	4423      	add	r3, r4
 800dfe4:	3202      	adds	r2, #2
 800dfe6:	7898      	ldrb	r0, [r3, #2]
 800dfe8:	0853      	lsrs	r3, r2, #1
 800dfea:	fba1 e303 	umull	lr, r3, r1, r3
 800dfee:	089b      	lsrs	r3, r3, #2
 800dff0:	fb08 2213 	mls	r2, r8, r3, r2
 800dff4:	287e      	cmp	r0, #126	@ 0x7e
 800dff6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800dffa:	d064      	beq.n	800e0c6 <uxr_read_framed_msg+0x4c2>
 800dffc:	f080 0120 	eor.w	r1, r0, #32
 800e000:	e642      	b.n	800dc88 <uxr_read_framed_msg+0x84>
 800e002:	45bc      	cmp	ip, r7
 800e004:	d09e      	beq.n	800df44 <uxr_read_framed_msg+0x340>
 800e006:	4423      	add	r3, r4
 800e008:	3202      	adds	r2, #2
 800e00a:	7898      	ldrb	r0, [r3, #2]
 800e00c:	0853      	lsrs	r3, r2, #1
 800e00e:	fba1 e303 	umull	lr, r3, r1, r3
 800e012:	089b      	lsrs	r3, r3, #2
 800e014:	fb08 2213 	mls	r2, r8, r3, r2
 800e018:	287e      	cmp	r0, #126	@ 0x7e
 800e01a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e01e:	d061      	beq.n	800e0e4 <uxr_read_framed_msg+0x4e0>
 800e020:	f080 0020 	eor.w	r0, r0, #32
 800e024:	e65e      	b.n	800dce4 <uxr_read_framed_msg+0xe0>
 800e026:	4567      	cmp	r7, ip
 800e028:	f43f af7c 	beq.w	800df24 <uxr_read_framed_msg+0x320>
 800e02c:	4423      	add	r3, r4
 800e02e:	3202      	adds	r2, #2
 800e030:	7898      	ldrb	r0, [r3, #2]
 800e032:	0853      	lsrs	r3, r2, #1
 800e034:	fba1 e303 	umull	lr, r3, r1, r3
 800e038:	089b      	lsrs	r3, r3, #2
 800e03a:	fb08 2213 	mls	r2, r8, r3, r2
 800e03e:	287e      	cmp	r0, #126	@ 0x7e
 800e040:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e044:	d03f      	beq.n	800e0c6 <uxr_read_framed_msg+0x4c2>
 800e046:	f080 0020 	eor.w	r0, r0, #32
 800e04a:	e6b4      	b.n	800ddb6 <uxr_read_framed_msg+0x1b2>
 800e04c:	4560      	cmp	r0, ip
 800e04e:	f43f af7e 	beq.w	800df4e <uxr_read_framed_msg+0x34a>
 800e052:	4423      	add	r3, r4
 800e054:	3202      	adds	r2, #2
 800e056:	7898      	ldrb	r0, [r3, #2]
 800e058:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e05c:	0853      	lsrs	r3, r2, #1
 800e05e:	fba1 e303 	umull	lr, r3, r1, r3
 800e062:	089b      	lsrs	r3, r3, #2
 800e064:	fb08 2213 	mls	r2, r8, r3, r2
 800e068:	287e      	cmp	r0, #126	@ 0x7e
 800e06a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e06e:	f43f af6e 	beq.w	800df4e <uxr_read_framed_msg+0x34a>
 800e072:	f080 0020 	eor.w	r0, r0, #32
 800e076:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e07a:	e715      	b.n	800dea8 <uxr_read_framed_msg+0x2a4>
 800e07c:	4567      	cmp	r7, ip
 800e07e:	f43f af61 	beq.w	800df44 <uxr_read_framed_msg+0x340>
 800e082:	4423      	add	r3, r4
 800e084:	3202      	adds	r2, #2
 800e086:	7898      	ldrb	r0, [r3, #2]
 800e088:	0853      	lsrs	r3, r2, #1
 800e08a:	fba1 e303 	umull	lr, r3, r1, r3
 800e08e:	089b      	lsrs	r3, r3, #2
 800e090:	fb08 2213 	mls	r2, r8, r3, r2
 800e094:	287e      	cmp	r0, #126	@ 0x7e
 800e096:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e09a:	d023      	beq.n	800e0e4 <uxr_read_framed_msg+0x4e0>
 800e09c:	f080 0020 	eor.w	r0, r0, #32
 800e0a0:	e6b6      	b.n	800de10 <uxr_read_framed_msg+0x20c>
 800e0a2:	45bc      	cmp	ip, r7
 800e0a4:	d083      	beq.n	800dfae <uxr_read_framed_msg+0x3aa>
 800e0a6:	4423      	add	r3, r4
 800e0a8:	3202      	adds	r2, #2
 800e0aa:	7898      	ldrb	r0, [r3, #2]
 800e0ac:	0853      	lsrs	r3, r2, #1
 800e0ae:	fba1 e303 	umull	lr, r3, r1, r3
 800e0b2:	089b      	lsrs	r3, r3, #2
 800e0b4:	fb08 2213 	mls	r2, r8, r3, r2
 800e0b8:	287e      	cmp	r0, #126	@ 0x7e
 800e0ba:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e0be:	d01f      	beq.n	800e100 <uxr_read_framed_msg+0x4fc>
 800e0c0:	f080 0020 	eor.w	r0, r0, #32
 800e0c4:	e6c7      	b.n	800de56 <uxr_read_framed_msg+0x252>
 800e0c6:	2701      	movs	r7, #1
 800e0c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0ca:	f8cd b000 	str.w	fp, [sp]
 800e0ce:	9701      	str	r7, [sp, #4]
 800e0d0:	4632      	mov	r2, r6
 800e0d2:	4651      	mov	r1, sl
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f7ff fd11 	bl	800dafc <uxr_framing_read_transport>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	f47f ada7 	bne.w	800dc2e <uxr_read_framed_msg+0x2a>
 800e0e0:	7027      	strb	r7, [r4, #0]
 800e0e2:	e5a4      	b.n	800dc2e <uxr_read_framed_msg+0x2a>
 800e0e4:	f8cd b000 	str.w	fp, [sp]
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0f0:	4651      	mov	r1, sl
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f7ff fd02 	bl	800dafc <uxr_framing_read_transport>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	f47f ad98 	bne.w	800dc2e <uxr_read_framed_msg+0x2a>
 800e0fe:	e70e      	b.n	800df1e <uxr_read_framed_msg+0x31a>
 800e100:	f8cd b000 	str.w	fp, [sp]
 800e104:	2303      	movs	r3, #3
 800e106:	e7f0      	b.n	800e0ea <uxr_read_framed_msg+0x4e6>

0800e108 <uxr_stream_id>:
 800e108:	2901      	cmp	r1, #1
 800e10a:	b082      	sub	sp, #8
 800e10c:	4603      	mov	r3, r0
 800e10e:	d011      	beq.n	800e134 <uxr_stream_id+0x2c>
 800e110:	2902      	cmp	r1, #2
 800e112:	f04f 0c00 	mov.w	ip, #0
 800e116:	d00a      	beq.n	800e12e <uxr_stream_id+0x26>
 800e118:	2000      	movs	r0, #0
 800e11a:	f36c 0007 	bfi	r0, ip, #0, #8
 800e11e:	f363 200f 	bfi	r0, r3, #8, #8
 800e122:	f361 4017 	bfi	r0, r1, #16, #8
 800e126:	f362 601f 	bfi	r0, r2, #24, #8
 800e12a:	b002      	add	sp, #8
 800e12c:	4770      	bx	lr
 800e12e:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e132:	e7f1      	b.n	800e118 <uxr_stream_id+0x10>
 800e134:	f100 0c01 	add.w	ip, r0, #1
 800e138:	fa5f fc8c 	uxtb.w	ip, ip
 800e13c:	e7ec      	b.n	800e118 <uxr_stream_id+0x10>
 800e13e:	bf00      	nop

0800e140 <uxr_stream_id_from_raw>:
 800e140:	b082      	sub	sp, #8
 800e142:	4603      	mov	r3, r0
 800e144:	b130      	cbz	r0, 800e154 <uxr_stream_id_from_raw+0x14>
 800e146:	0602      	lsls	r2, r0, #24
 800e148:	d411      	bmi.n	800e16e <uxr_stream_id_from_raw+0x2e>
 800e14a:	1e42      	subs	r2, r0, #1
 800e14c:	b2d2      	uxtb	r2, r2
 800e14e:	f04f 0c01 	mov.w	ip, #1
 800e152:	e001      	b.n	800e158 <uxr_stream_id_from_raw+0x18>
 800e154:	4684      	mov	ip, r0
 800e156:	4602      	mov	r2, r0
 800e158:	2000      	movs	r0, #0
 800e15a:	f363 0007 	bfi	r0, r3, #0, #8
 800e15e:	f362 200f 	bfi	r0, r2, #8, #8
 800e162:	f36c 4017 	bfi	r0, ip, #16, #8
 800e166:	f361 601f 	bfi	r0, r1, #24, #8
 800e16a:	b002      	add	sp, #8
 800e16c:	4770      	bx	lr
 800e16e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e172:	f04f 0c02 	mov.w	ip, #2
 800e176:	e7ef      	b.n	800e158 <uxr_stream_id_from_raw+0x18>

0800e178 <uxr_init_stream_storage>:
 800e178:	2300      	movs	r3, #0
 800e17a:	7403      	strb	r3, [r0, #16]
 800e17c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e180:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e184:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop

0800e18c <uxr_reset_stream_storage>:
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	7c03      	ldrb	r3, [r0, #16]
 800e190:	4604      	mov	r4, r0
 800e192:	b153      	cbz	r3, 800e1aa <uxr_reset_stream_storage+0x1e>
 800e194:	4606      	mov	r6, r0
 800e196:	2500      	movs	r5, #0
 800e198:	4630      	mov	r0, r6
 800e19a:	f003 f98d 	bl	80114b8 <uxr_reset_output_best_effort_stream>
 800e19e:	7c23      	ldrb	r3, [r4, #16]
 800e1a0:	3501      	adds	r5, #1
 800e1a2:	42ab      	cmp	r3, r5
 800e1a4:	f106 0610 	add.w	r6, r6, #16
 800e1a8:	d8f6      	bhi.n	800e198 <uxr_reset_stream_storage+0xc>
 800e1aa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e1ae:	b163      	cbz	r3, 800e1ca <uxr_reset_stream_storage+0x3e>
 800e1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1b4:	2500      	movs	r5, #0
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f002 ff8e 	bl	80110d8 <uxr_reset_input_best_effort_stream>
 800e1bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e1c0:	3501      	adds	r5, #1
 800e1c2:	42ab      	cmp	r3, r5
 800e1c4:	f106 0602 	add.w	r6, r6, #2
 800e1c8:	d8f5      	bhi.n	800e1b6 <uxr_reset_stream_storage+0x2a>
 800e1ca:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e1ce:	b163      	cbz	r3, 800e1ea <uxr_reset_stream_storage+0x5e>
 800e1d0:	f104 0618 	add.w	r6, r4, #24
 800e1d4:	2500      	movs	r5, #0
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f003 fa18 	bl	801160c <uxr_reset_output_reliable_stream>
 800e1dc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	42ab      	cmp	r3, r5
 800e1e4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e1e8:	d8f5      	bhi.n	800e1d6 <uxr_reset_stream_storage+0x4a>
 800e1ea:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e1ee:	b163      	cbz	r3, 800e20a <uxr_reset_stream_storage+0x7e>
 800e1f0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e1f4:	2500      	movs	r5, #0
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f002 ffde 	bl	80111b8 <uxr_reset_input_reliable_stream>
 800e1fc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e200:	3501      	adds	r5, #1
 800e202:	42ab      	cmp	r3, r5
 800e204:	f106 0618 	add.w	r6, r6, #24
 800e208:	d8f5      	bhi.n	800e1f6 <uxr_reset_stream_storage+0x6a>
 800e20a:	bd70      	pop	{r4, r5, r6, pc}

0800e20c <uxr_add_output_best_effort_buffer>:
 800e20c:	b510      	push	{r4, lr}
 800e20e:	7c04      	ldrb	r4, [r0, #16]
 800e210:	f104 0c01 	add.w	ip, r4, #1
 800e214:	b082      	sub	sp, #8
 800e216:	f880 c010 	strb.w	ip, [r0, #16]
 800e21a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e21e:	f003 f941 	bl	80114a4 <uxr_init_output_best_effort_stream>
 800e222:	2201      	movs	r2, #1
 800e224:	4611      	mov	r1, r2
 800e226:	4620      	mov	r0, r4
 800e228:	b002      	add	sp, #8
 800e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e22e:	f7ff bf6b 	b.w	800e108 <uxr_stream_id>
 800e232:	bf00      	nop

0800e234 <uxr_add_output_reliable_buffer>:
 800e234:	b510      	push	{r4, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	4684      	mov	ip, r0
 800e23a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e23e:	9000      	str	r0, [sp, #0]
 800e240:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e244:	2028      	movs	r0, #40	@ 0x28
 800e246:	fb00 c004 	mla	r0, r0, r4, ip
 800e24a:	f104 0e01 	add.w	lr, r4, #1
 800e24e:	3018      	adds	r0, #24
 800e250:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e254:	f003 f9a2 	bl	801159c <uxr_init_output_reliable_stream>
 800e258:	2201      	movs	r2, #1
 800e25a:	2102      	movs	r1, #2
 800e25c:	4620      	mov	r0, r4
 800e25e:	b004      	add	sp, #16
 800e260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e264:	f7ff bf50 	b.w	800e108 <uxr_stream_id>

0800e268 <uxr_add_input_best_effort_buffer>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e26e:	1c62      	adds	r2, r4, #1
 800e270:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e274:	b082      	sub	sp, #8
 800e276:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800e27a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e27e:	f002 ff27 	bl	80110d0 <uxr_init_input_best_effort_stream>
 800e282:	2200      	movs	r2, #0
 800e284:	2101      	movs	r1, #1
 800e286:	4620      	mov	r0, r4
 800e288:	b002      	add	sp, #8
 800e28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e28e:	f7ff bf3b 	b.w	800e108 <uxr_stream_id>
 800e292:	bf00      	nop

0800e294 <uxr_add_input_reliable_buffer>:
 800e294:	b510      	push	{r4, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	4684      	mov	ip, r0
 800e29a:	9806      	ldr	r0, [sp, #24]
 800e29c:	9000      	str	r0, [sp, #0]
 800e29e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e2a2:	2018      	movs	r0, #24
 800e2a4:	fb00 c004 	mla	r0, r0, r4, ip
 800e2a8:	f104 0e01 	add.w	lr, r4, #1
 800e2ac:	3048      	adds	r0, #72	@ 0x48
 800e2ae:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e2b2:	f002 ff55 	bl	8011160 <uxr_init_input_reliable_stream>
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	2102      	movs	r1, #2
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	b004      	add	sp, #16
 800e2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c2:	f7ff bf21 	b.w	800e108 <uxr_stream_id>
 800e2c6:	bf00      	nop

0800e2c8 <uxr_get_output_best_effort_stream>:
 800e2c8:	7c03      	ldrb	r3, [r0, #16]
 800e2ca:	428b      	cmp	r3, r1
 800e2cc:	bf8c      	ite	hi
 800e2ce:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e2d2:	2000      	movls	r0, #0
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop

0800e2d8 <uxr_get_output_reliable_stream>:
 800e2d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e2dc:	428b      	cmp	r3, r1
 800e2de:	bf83      	ittte	hi
 800e2e0:	2328      	movhi	r3, #40	@ 0x28
 800e2e2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e2e6:	3018      	addhi	r0, #24
 800e2e8:	2000      	movls	r0, #0
 800e2ea:	4770      	bx	lr

0800e2ec <uxr_get_input_best_effort_stream>:
 800e2ec:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e2f0:	428b      	cmp	r3, r1
 800e2f2:	bf86      	itte	hi
 800e2f4:	3121      	addhi	r1, #33	@ 0x21
 800e2f6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e2fa:	2000      	movls	r0, #0
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop

0800e300 <uxr_get_input_reliable_stream>:
 800e300:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e304:	428b      	cmp	r3, r1
 800e306:	bf83      	ittte	hi
 800e308:	2318      	movhi	r3, #24
 800e30a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e30e:	3048      	addhi	r0, #72	@ 0x48
 800e310:	2000      	movls	r0, #0
 800e312:	4770      	bx	lr

0800e314 <uxr_output_streams_confirmed>:
 800e314:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e318:	b183      	cbz	r3, 800e33c <uxr_output_streams_confirmed+0x28>
 800e31a:	b570      	push	{r4, r5, r6, lr}
 800e31c:	4606      	mov	r6, r0
 800e31e:	f100 0518 	add.w	r5, r0, #24
 800e322:	2400      	movs	r4, #0
 800e324:	e001      	b.n	800e32a <uxr_output_streams_confirmed+0x16>
 800e326:	3528      	adds	r5, #40	@ 0x28
 800e328:	b138      	cbz	r0, 800e33a <uxr_output_streams_confirmed+0x26>
 800e32a:	4628      	mov	r0, r5
 800e32c:	f003 fbd6 	bl	8011adc <uxr_is_output_up_to_date>
 800e330:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e334:	3401      	adds	r4, #1
 800e336:	42a3      	cmp	r3, r4
 800e338:	d8f5      	bhi.n	800e326 <uxr_output_streams_confirmed+0x12>
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	2001      	movs	r0, #1
 800e33e:	4770      	bx	lr

0800e340 <uxr_buffer_submessage_header>:
 800e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e342:	4604      	mov	r4, r0
 800e344:	460e      	mov	r6, r1
 800e346:	2104      	movs	r1, #4
 800e348:	4615      	mov	r5, r2
 800e34a:	461f      	mov	r7, r3
 800e34c:	f7fa fd0c 	bl	8008d68 <ucdr_align_to>
 800e350:	2301      	movs	r3, #1
 800e352:	7523      	strb	r3, [r4, #20]
 800e354:	f047 0201 	orr.w	r2, r7, #1
 800e358:	462b      	mov	r3, r5
 800e35a:	4631      	mov	r1, r6
 800e35c:	4620      	mov	r0, r4
 800e35e:	f000 fa2b 	bl	800e7b8 <uxr_serialize_submessage_header>
 800e362:	4620      	mov	r0, r4
 800e364:	f7fa fd16 	bl	8008d94 <ucdr_buffer_remaining>
 800e368:	42a8      	cmp	r0, r5
 800e36a:	bf34      	ite	cc
 800e36c:	2000      	movcc	r0, #0
 800e36e:	2001      	movcs	r0, #1
 800e370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e372:	bf00      	nop

0800e374 <uxr_read_submessage_header>:
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	4604      	mov	r4, r0
 800e37a:	460d      	mov	r5, r1
 800e37c:	2104      	movs	r1, #4
 800e37e:	4616      	mov	r6, r2
 800e380:	4698      	mov	r8, r3
 800e382:	f7fa fcf1 	bl	8008d68 <ucdr_align_to>
 800e386:	4620      	mov	r0, r4
 800e388:	f7fa fd04 	bl	8008d94 <ucdr_buffer_remaining>
 800e38c:	2803      	cmp	r0, #3
 800e38e:	bf8c      	ite	hi
 800e390:	2701      	movhi	r7, #1
 800e392:	2700      	movls	r7, #0
 800e394:	d802      	bhi.n	800e39c <uxr_read_submessage_header+0x28>
 800e396:	4638      	mov	r0, r7
 800e398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39c:	4633      	mov	r3, r6
 800e39e:	4642      	mov	r2, r8
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	f000 fa1a 	bl	800e7dc <uxr_deserialize_submessage_header>
 800e3a8:	f898 3000 	ldrb.w	r3, [r8]
 800e3ac:	f003 0201 	and.w	r2, r3, #1
 800e3b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e3b4:	f888 3000 	strb.w	r3, [r8]
 800e3b8:	7522      	strb	r2, [r4, #20]
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3c0 <uxr_submessage_padding>:
 800e3c0:	f010 0003 	ands.w	r0, r0, #3
 800e3c4:	bf18      	it	ne
 800e3c6:	f1c0 0004 	rsbne	r0, r0, #4
 800e3ca:	4770      	bx	lr

0800e3cc <uxr_millis>:
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	4669      	mov	r1, sp
 800e3d2:	2001      	movs	r0, #1
 800e3d4:	f7f3 f96c 	bl	80016b0 <clock_gettime>
 800e3d8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e3dc:	4b06      	ldr	r3, [pc, #24]	@ (800e3f8 <uxr_millis+0x2c>)
 800e3de:	fba0 0103 	umull	r0, r1, r0, r3
 800e3e2:	1900      	adds	r0, r0, r4
 800e3e4:	fb03 1102 	mla	r1, r3, r2, r1
 800e3e8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e3ec:	4a03      	ldr	r2, [pc, #12]	@ (800e3fc <uxr_millis+0x30>)
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	f7f2 f93a 	bl	8000668 <__aeabi_ldivmod>
 800e3f4:	b004      	add	sp, #16
 800e3f6:	bd10      	pop	{r4, pc}
 800e3f8:	3b9aca00 	.word	0x3b9aca00
 800e3fc:	000f4240 	.word	0x000f4240

0800e400 <uxr_nanos>:
 800e400:	b510      	push	{r4, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	4669      	mov	r1, sp
 800e406:	2001      	movs	r0, #1
 800e408:	f7f3 f952 	bl	80016b0 <clock_gettime>
 800e40c:	4a06      	ldr	r2, [pc, #24]	@ (800e428 <uxr_nanos+0x28>)
 800e40e:	9800      	ldr	r0, [sp, #0]
 800e410:	9902      	ldr	r1, [sp, #8]
 800e412:	9c01      	ldr	r4, [sp, #4]
 800e414:	fba0 0302 	umull	r0, r3, r0, r2
 800e418:	1840      	adds	r0, r0, r1
 800e41a:	fb02 3304 	mla	r3, r2, r4, r3
 800e41e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e422:	b004      	add	sp, #16
 800e424:	bd10      	pop	{r4, pc}
 800e426:	bf00      	nop
 800e428:	3b9aca00 	.word	0x3b9aca00

0800e42c <on_full_output_buffer_fragmented>:
 800e42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e430:	460c      	mov	r4, r1
 800e432:	b08a      	sub	sp, #40	@ 0x28
 800e434:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e438:	4606      	mov	r6, r0
 800e43a:	f104 0008 	add.w	r0, r4, #8
 800e43e:	f7ff ff4b 	bl	800e2d8 <uxr_get_output_reliable_stream>
 800e442:	4605      	mov	r5, r0
 800e444:	f003 fb54 	bl	8011af0 <get_available_free_slots>
 800e448:	b968      	cbnz	r0, 800e466 <on_full_output_buffer_fragmented+0x3a>
 800e44a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e44e:	4620      	mov	r0, r4
 800e450:	4798      	blx	r3
 800e452:	b918      	cbnz	r0, 800e45c <on_full_output_buffer_fragmented+0x30>
 800e454:	2001      	movs	r0, #1
 800e456:	b00a      	add	sp, #40	@ 0x28
 800e458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e45c:	4628      	mov	r0, r5
 800e45e:	f003 fb47 	bl	8011af0 <get_available_free_slots>
 800e462:	2800      	cmp	r0, #0
 800e464:	d0f6      	beq.n	800e454 <on_full_output_buffer_fragmented+0x28>
 800e466:	892a      	ldrh	r2, [r5, #8]
 800e468:	686b      	ldr	r3, [r5, #4]
 800e46a:	fbb3 f8f2 	udiv	r8, r3, r2
 800e46e:	89eb      	ldrh	r3, [r5, #14]
 800e470:	7b29      	ldrb	r1, [r5, #12]
 800e472:	fbb3 f0f2 	udiv	r0, r3, r2
 800e476:	fb02 3310 	mls	r3, r2, r0, r3
 800e47a:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800e47e:	b29b      	uxth	r3, r3
 800e480:	fb08 f303 	mul.w	r3, r8, r3
 800e484:	31fc      	adds	r1, #252	@ 0xfc
 800e486:	f1a8 0804 	sub.w	r8, r8, #4
 800e48a:	4441      	add	r1, r8
 800e48c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e490:	b28f      	uxth	r7, r1
 800e492:	6829      	ldr	r1, [r5, #0]
 800e494:	3304      	adds	r3, #4
 800e496:	1bd2      	subs	r2, r2, r7
 800e498:	4419      	add	r1, r3
 800e49a:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800e49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	4642      	mov	r2, r8
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	a802      	add	r0, sp, #8
 800e4aa:	f7fa fc31 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800e4ae:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e4b2:	f102 0308 	add.w	r3, r2, #8
 800e4b6:	4543      	cmp	r3, r8
 800e4b8:	d928      	bls.n	800e50c <on_full_output_buffer_fragmented+0xe0>
 800e4ba:	463a      	mov	r2, r7
 800e4bc:	2300      	movs	r3, #0
 800e4be:	210d      	movs	r1, #13
 800e4c0:	a802      	add	r0, sp, #8
 800e4c2:	f7ff ff3d 	bl	800e340 <uxr_buffer_submessage_header>
 800e4c6:	8929      	ldrh	r1, [r5, #8]
 800e4c8:	89eb      	ldrh	r3, [r5, #14]
 800e4ca:	fbb3 f2f1 	udiv	r2, r3, r1
 800e4ce:	fb01 3312 	mls	r3, r1, r2, r3
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	686a      	ldr	r2, [r5, #4]
 800e4d6:	fbb2 f2f1 	udiv	r2, r2, r1
 800e4da:	fb02 f303 	mul.w	r3, r2, r3
 800e4de:	682a      	ldr	r2, [r5, #0]
 800e4e0:	f842 8003 	str.w	r8, [r2, r3]
 800e4e4:	89e8      	ldrh	r0, [r5, #14]
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	f003 fb20 	bl	8011b2c <uxr_seq_num_add>
 800e4ec:	9904      	ldr	r1, [sp, #16]
 800e4ee:	9a03      	ldr	r2, [sp, #12]
 800e4f0:	81e8      	strh	r0, [r5, #14]
 800e4f2:	1a52      	subs	r2, r2, r1
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f7fa fc1d 	bl	8008d34 <ucdr_init_buffer>
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	4910      	ldr	r1, [pc, #64]	@ (800e540 <on_full_output_buffer_fragmented+0x114>)
 800e4fe:	4622      	mov	r2, r4
 800e500:	f7fa fbec 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 800e504:	2000      	movs	r0, #0
 800e506:	b00a      	add	sp, #40	@ 0x28
 800e508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50c:	b292      	uxth	r2, r2
 800e50e:	2302      	movs	r3, #2
 800e510:	210d      	movs	r1, #13
 800e512:	a802      	add	r0, sp, #8
 800e514:	f7ff ff14 	bl	800e340 <uxr_buffer_submessage_header>
 800e518:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e51c:	8928      	ldrh	r0, [r5, #8]
 800e51e:	f103 0208 	add.w	r2, r3, #8
 800e522:	89eb      	ldrh	r3, [r5, #14]
 800e524:	fbb3 f1f0 	udiv	r1, r3, r0
 800e528:	fb00 3311 	mls	r3, r0, r1, r3
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	6869      	ldr	r1, [r5, #4]
 800e530:	fbb1 f1f0 	udiv	r1, r1, r0
 800e534:	fb01 f303 	mul.w	r3, r1, r3
 800e538:	6829      	ldr	r1, [r5, #0]
 800e53a:	50ca      	str	r2, [r1, r3]
 800e53c:	e7d2      	b.n	800e4e4 <on_full_output_buffer_fragmented+0xb8>
 800e53e:	bf00      	nop
 800e540:	0800e42d 	.word	0x0800e42d

0800e544 <uxr_prepare_output_stream>:
 800e544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e546:	b087      	sub	sp, #28
 800e548:	2707      	movs	r7, #7
 800e54a:	9202      	str	r2, [sp, #8]
 800e54c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e54e:	2500      	movs	r5, #0
 800e550:	3204      	adds	r2, #4
 800e552:	e9cd 7500 	strd	r7, r5, [sp]
 800e556:	461c      	mov	r4, r3
 800e558:	4606      	mov	r6, r0
 800e55a:	f7ff f807 	bl	800d56c <uxr_prepare_stream_to_write_submessage>
 800e55e:	f080 0201 	eor.w	r2, r0, #1
 800e562:	b2d2      	uxtb	r2, r2
 800e564:	75a2      	strb	r2, [r4, #22]
 800e566:	b112      	cbz	r2, 800e56e <uxr_prepare_output_stream+0x2a>
 800e568:	4628      	mov	r0, r5
 800e56a:	b007      	add	sp, #28
 800e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e56e:	aa05      	add	r2, sp, #20
 800e570:	9902      	ldr	r1, [sp, #8]
 800e572:	4630      	mov	r0, r6
 800e574:	f7ff f934 	bl	800d7e0 <uxr_init_base_object_request>
 800e578:	a905      	add	r1, sp, #20
 800e57a:	4605      	mov	r5, r0
 800e57c:	4620      	mov	r0, r4
 800e57e:	f000 ff77 	bl	800f470 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e582:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e586:	69a6      	ldr	r6, [r4, #24]
 800e588:	69e7      	ldr	r7, [r4, #28]
 800e58a:	1a52      	subs	r2, r2, r1
 800e58c:	4620      	mov	r0, r4
 800e58e:	f7fa fbd1 	bl	8008d34 <ucdr_init_buffer>
 800e592:	4620      	mov	r0, r4
 800e594:	463a      	mov	r2, r7
 800e596:	4631      	mov	r1, r6
 800e598:	f7fa fba0 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 800e59c:	4628      	mov	r0, r5
 800e59e:	b007      	add	sp, #28
 800e5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5a2:	bf00      	nop

0800e5a4 <uxr_prepare_output_stream_fragmented>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	b093      	sub	sp, #76	@ 0x4c
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	9107      	str	r1, [sp, #28]
 800e5ae:	3008      	adds	r0, #8
 800e5b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e5b4:	9303      	str	r3, [sp, #12]
 800e5b6:	9206      	str	r2, [sp, #24]
 800e5b8:	f7ff fe8e 	bl	800e2d8 <uxr_get_output_reliable_stream>
 800e5bc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	f000 8095 	beq.w	800e6f0 <uxr_prepare_output_stream_fragmented+0x14c>
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	f000 8091 	beq.w	800e6f0 <uxr_prepare_output_stream_fragmented+0x14c>
 800e5ce:	f003 fa8f 	bl	8011af0 <get_available_free_slots>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f000 8087 	beq.w	800e6e6 <uxr_prepare_output_stream_fragmented+0x142>
 800e5d8:	8922      	ldrh	r2, [r4, #8]
 800e5da:	89e7      	ldrh	r7, [r4, #14]
 800e5dc:	fbb7 f3f2 	udiv	r3, r7, r2
 800e5e0:	fb02 7313 	mls	r3, r2, r3, r7
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	6861      	ldr	r1, [r4, #4]
 800e5e8:	fbb1 f1f2 	udiv	r1, r1, r2
 800e5ec:	6822      	ldr	r2, [r4, #0]
 800e5ee:	9105      	str	r1, [sp, #20]
 800e5f0:	fb01 f303 	mul.w	r3, r1, r3
 800e5f4:	3304      	adds	r3, #4
 800e5f6:	eb02 0903 	add.w	r9, r2, r3
 800e5fa:	7b23      	ldrb	r3, [r4, #12]
 800e5fc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e600:	4543      	cmp	r3, r8
 800e602:	f1a1 0b04 	sub.w	fp, r1, #4
 800e606:	d37f      	bcc.n	800e708 <uxr_prepare_output_stream_fragmented+0x164>
 800e608:	f1ab 0a04 	sub.w	sl, fp, #4
 800e60c:	ebaa 0a03 	sub.w	sl, sl, r3
 800e610:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e612:	f8cd 8000 	str.w	r8, [sp]
 800e616:	fa1f f38a 	uxth.w	r3, sl
 800e61a:	9304      	str	r3, [sp, #16]
 800e61c:	465a      	mov	r2, fp
 800e61e:	2300      	movs	r3, #0
 800e620:	4649      	mov	r1, r9
 800e622:	a80a      	add	r0, sp, #40	@ 0x28
 800e624:	f7fa fb74 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 800e628:	f106 0a08 	add.w	sl, r6, #8
 800e62c:	45da      	cmp	sl, fp
 800e62e:	bf2c      	ite	cs
 800e630:	2300      	movcs	r3, #0
 800e632:	2301      	movcc	r3, #1
 800e634:	9a04      	ldr	r2, [sp, #16]
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	210d      	movs	r1, #13
 800e63a:	a80a      	add	r0, sp, #40	@ 0x28
 800e63c:	f7ff fe80 	bl	800e340 <uxr_buffer_submessage_header>
 800e640:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e644:	fbb7 f2fc 	udiv	r2, r7, ip
 800e648:	fb0c 7212 	mls	r2, ip, r2, r7
 800e64c:	b292      	uxth	r2, r2
 800e64e:	6863      	ldr	r3, [r4, #4]
 800e650:	fbb3 f3fc 	udiv	r3, r3, ip
 800e654:	fb02 f303 	mul.w	r3, r2, r3
 800e658:	6822      	ldr	r2, [r4, #0]
 800e65a:	2101      	movs	r1, #1
 800e65c:	f842 b003 	str.w	fp, [r2, r3]
 800e660:	4638      	mov	r0, r7
 800e662:	f003 fa63 	bl	8011b2c <uxr_seq_num_add>
 800e666:	9b05      	ldr	r3, [sp, #20]
 800e668:	9e03      	ldr	r6, [sp, #12]
 800e66a:	f1a3 0208 	sub.w	r2, r3, #8
 800e66e:	f108 0104 	add.w	r1, r8, #4
 800e672:	4607      	mov	r7, r0
 800e674:	eba2 0208 	sub.w	r2, r2, r8
 800e678:	4449      	add	r1, r9
 800e67a:	4630      	mov	r0, r6
 800e67c:	f7fa fb5a 	bl	8008d34 <ucdr_init_buffer>
 800e680:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e682:	81e7      	strh	r7, [r4, #14]
 800e684:	1d1a      	adds	r2, r3, #4
 800e686:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e68a:	bf28      	it	cs
 800e68c:	2200      	movcs	r2, #0
 800e68e:	2300      	movs	r3, #0
 800e690:	b292      	uxth	r2, r2
 800e692:	2107      	movs	r1, #7
 800e694:	4630      	mov	r0, r6
 800e696:	f7ff fe53 	bl	800e340 <uxr_buffer_submessage_header>
 800e69a:	9906      	ldr	r1, [sp, #24]
 800e69c:	aa09      	add	r2, sp, #36	@ 0x24
 800e69e:	4628      	mov	r0, r5
 800e6a0:	f7ff f89e 	bl	800d7e0 <uxr_init_base_object_request>
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	b320      	cbz	r0, 800e6f2 <uxr_prepare_output_stream_fragmented+0x14e>
 800e6a8:	9e03      	ldr	r6, [sp, #12]
 800e6aa:	a909      	add	r1, sp, #36	@ 0x24
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f000 fedf 	bl	800f470 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e6b2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	1a52      	subs	r2, r2, r1
 800e6ba:	f7fa fb3b 	bl	8008d34 <ucdr_init_buffer>
 800e6be:	9b07      	ldr	r3, [sp, #28]
 800e6c0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e6c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e6c6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e6ca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e6cc:	491a      	ldr	r1, [pc, #104]	@ (800e738 <uxr_prepare_output_stream_fragmented+0x194>)
 800e6ce:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e6d8:	462a      	mov	r2, r5
 800e6da:	f7fa faff 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 800e6de:	4620      	mov	r0, r4
 800e6e0:	b013      	add	sp, #76	@ 0x4c
 800e6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e6e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	4798      	blx	r3
 800e6ee:	b920      	cbnz	r0, 800e6fa <uxr_prepare_output_stream_fragmented+0x156>
 800e6f0:	2400      	movs	r4, #0
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	b013      	add	sp, #76	@ 0x4c
 800e6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f003 f9f8 	bl	8011af0 <get_available_free_slots>
 800e700:	2800      	cmp	r0, #0
 800e702:	f47f af69 	bne.w	800e5d8 <uxr_prepare_output_stream_fragmented+0x34>
 800e706:	e7f3      	b.n	800e6f0 <uxr_prepare_output_stream_fragmented+0x14c>
 800e708:	4638      	mov	r0, r7
 800e70a:	2101      	movs	r1, #1
 800e70c:	f003 fa0e 	bl	8011b2c <uxr_seq_num_add>
 800e710:	8921      	ldrh	r1, [r4, #8]
 800e712:	fbb0 f2f1 	udiv	r2, r0, r1
 800e716:	fb01 0212 	mls	r2, r1, r2, r0
 800e71a:	b292      	uxth	r2, r2
 800e71c:	6863      	ldr	r3, [r4, #4]
 800e71e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e722:	fb02 f303 	mul.w	r3, r2, r3
 800e726:	6822      	ldr	r2, [r4, #0]
 800e728:	3304      	adds	r3, #4
 800e72a:	eb02 0903 	add.w	r9, r2, r3
 800e72e:	4607      	mov	r7, r0
 800e730:	7b23      	ldrb	r3, [r4, #12]
 800e732:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e736:	e767      	b.n	800e608 <uxr_prepare_output_stream_fragmented+0x64>
 800e738:	0800e42d 	.word	0x0800e42d

0800e73c <uxr_serialize_message_header>:
 800e73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e740:	4617      	mov	r7, r2
 800e742:	4604      	mov	r4, r0
 800e744:	461e      	mov	r6, r3
 800e746:	460d      	mov	r5, r1
 800e748:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e74c:	f7fc fc3e 	bl	800afcc <ucdr_serialize_uint8_t>
 800e750:	4639      	mov	r1, r7
 800e752:	4620      	mov	r0, r4
 800e754:	f7fc fc3a 	bl	800afcc <ucdr_serialize_uint8_t>
 800e758:	4632      	mov	r2, r6
 800e75a:	2101      	movs	r1, #1
 800e75c:	4620      	mov	r0, r4
 800e75e:	f7fc fceb 	bl	800b138 <ucdr_serialize_endian_uint16_t>
 800e762:	062b      	lsls	r3, r5, #24
 800e764:	d501      	bpl.n	800e76a <uxr_serialize_message_header+0x2e>
 800e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76a:	4641      	mov	r1, r8
 800e76c:	4620      	mov	r0, r4
 800e76e:	2204      	movs	r2, #4
 800e770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	f7fc ba8a 	b.w	800ac8c <ucdr_serialize_array_uint8_t>

0800e778 <uxr_deserialize_message_header>:
 800e778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e77c:	4617      	mov	r7, r2
 800e77e:	4604      	mov	r4, r0
 800e780:	461e      	mov	r6, r3
 800e782:	460d      	mov	r5, r1
 800e784:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e788:	f7fc fc36 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800e78c:	4639      	mov	r1, r7
 800e78e:	4620      	mov	r0, r4
 800e790:	f7fc fc32 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800e794:	4632      	mov	r2, r6
 800e796:	2101      	movs	r1, #1
 800e798:	4620      	mov	r0, r4
 800e79a:	f7fc fdc3 	bl	800b324 <ucdr_deserialize_endian_uint16_t>
 800e79e:	f995 3000 	ldrsb.w	r3, [r5]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	da01      	bge.n	800e7aa <uxr_deserialize_message_header+0x32>
 800e7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	2204      	movs	r2, #4
 800e7b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b4:	f7fc bace 	b.w	800ad54 <ucdr_deserialize_array_uint8_t>

0800e7b8 <uxr_serialize_submessage_header>:
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	4616      	mov	r6, r2
 800e7bc:	4604      	mov	r4, r0
 800e7be:	461d      	mov	r5, r3
 800e7c0:	f7fc fc04 	bl	800afcc <ucdr_serialize_uint8_t>
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	f7fc fc00 	bl	800afcc <ucdr_serialize_uint8_t>
 800e7cc:	462a      	mov	r2, r5
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	2101      	movs	r1, #1
 800e7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7d6:	f7fc bcaf 	b.w	800b138 <ucdr_serialize_endian_uint16_t>
 800e7da:	bf00      	nop

0800e7dc <uxr_deserialize_submessage_header>:
 800e7dc:	b570      	push	{r4, r5, r6, lr}
 800e7de:	4616      	mov	r6, r2
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	461d      	mov	r5, r3
 800e7e4:	f7fc fc08 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f7fc fc04 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800e7f0:	462a      	mov	r2, r5
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	2101      	movs	r1, #1
 800e7f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7fa:	f7fc bd93 	b.w	800b324 <ucdr_deserialize_endian_uint16_t>
 800e7fe:	bf00      	nop

0800e800 <uxr_serialize_CLIENT_Representation>:
 800e800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e804:	2204      	movs	r2, #4
 800e806:	460e      	mov	r6, r1
 800e808:	4605      	mov	r5, r0
 800e80a:	f7fc fa3f 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e80e:	2202      	movs	r2, #2
 800e810:	1d31      	adds	r1, r6, #4
 800e812:	4604      	mov	r4, r0
 800e814:	4628      	mov	r0, r5
 800e816:	f7fc fa39 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e81a:	2202      	movs	r2, #2
 800e81c:	4004      	ands	r4, r0
 800e81e:	1db1      	adds	r1, r6, #6
 800e820:	4628      	mov	r0, r5
 800e822:	f7fc fa33 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e826:	b2e4      	uxtb	r4, r4
 800e828:	2204      	movs	r2, #4
 800e82a:	4004      	ands	r4, r0
 800e82c:	f106 0108 	add.w	r1, r6, #8
 800e830:	4628      	mov	r0, r5
 800e832:	f7fc fa2b 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e836:	7b31      	ldrb	r1, [r6, #12]
 800e838:	ea00 0804 	and.w	r8, r0, r4
 800e83c:	4628      	mov	r0, r5
 800e83e:	f7fc fbc5 	bl	800afcc <ucdr_serialize_uint8_t>
 800e842:	7b71      	ldrb	r1, [r6, #13]
 800e844:	ea08 0800 	and.w	r8, r8, r0
 800e848:	4628      	mov	r0, r5
 800e84a:	f7fc fb91 	bl	800af70 <ucdr_serialize_bool>
 800e84e:	7b73      	ldrb	r3, [r6, #13]
 800e850:	ea08 0800 	and.w	r8, r8, r0
 800e854:	b93b      	cbnz	r3, 800e866 <uxr_serialize_CLIENT_Representation+0x66>
 800e856:	8bb1      	ldrh	r1, [r6, #28]
 800e858:	4628      	mov	r0, r5
 800e85a:	f7fc fbe3 	bl	800b024 <ucdr_serialize_uint16_t>
 800e85e:	ea08 0000 	and.w	r0, r8, r0
 800e862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e866:	6931      	ldr	r1, [r6, #16]
 800e868:	4628      	mov	r0, r5
 800e86a:	f7fc fdcb 	bl	800b404 <ucdr_serialize_uint32_t>
 800e86e:	6933      	ldr	r3, [r6, #16]
 800e870:	b1e3      	cbz	r3, 800e8ac <uxr_serialize_CLIENT_Representation+0xac>
 800e872:	b1c0      	cbz	r0, 800e8a6 <uxr_serialize_CLIENT_Representation+0xa6>
 800e874:	4637      	mov	r7, r6
 800e876:	f04f 0900 	mov.w	r9, #0
 800e87a:	e001      	b.n	800e880 <uxr_serialize_CLIENT_Representation+0x80>
 800e87c:	3708      	adds	r7, #8
 800e87e:	b194      	cbz	r4, 800e8a6 <uxr_serialize_CLIENT_Representation+0xa6>
 800e880:	6979      	ldr	r1, [r7, #20]
 800e882:	4628      	mov	r0, r5
 800e884:	f002 fc0e 	bl	80110a4 <ucdr_serialize_string>
 800e888:	69b9      	ldr	r1, [r7, #24]
 800e88a:	4604      	mov	r4, r0
 800e88c:	4628      	mov	r0, r5
 800e88e:	f002 fc09 	bl	80110a4 <ucdr_serialize_string>
 800e892:	6933      	ldr	r3, [r6, #16]
 800e894:	f109 0901 	add.w	r9, r9, #1
 800e898:	4004      	ands	r4, r0
 800e89a:	4599      	cmp	r9, r3
 800e89c:	b2e4      	uxtb	r4, r4
 800e89e:	d3ed      	bcc.n	800e87c <uxr_serialize_CLIENT_Representation+0x7c>
 800e8a0:	ea08 0804 	and.w	r8, r8, r4
 800e8a4:	e7d7      	b.n	800e856 <uxr_serialize_CLIENT_Representation+0x56>
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	e7d4      	b.n	800e856 <uxr_serialize_CLIENT_Representation+0x56>
 800e8ac:	ea08 0800 	and.w	r8, r8, r0
 800e8b0:	e7d1      	b.n	800e856 <uxr_serialize_CLIENT_Representation+0x56>
 800e8b2:	bf00      	nop

0800e8b4 <uxr_deserialize_CLIENT_Representation>:
 800e8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8b8:	2204      	movs	r2, #4
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	4605      	mov	r5, r0
 800e8be:	f7fc fa49 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800e8c2:	2202      	movs	r2, #2
 800e8c4:	1d21      	adds	r1, r4, #4
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f7fc fa43 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	4006      	ands	r6, r0
 800e8d2:	1da1      	adds	r1, r4, #6
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	f7fc fa3d 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800e8da:	b2f6      	uxtb	r6, r6
 800e8dc:	2204      	movs	r2, #4
 800e8de:	4006      	ands	r6, r0
 800e8e0:	f104 0108 	add.w	r1, r4, #8
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	f7fc fa35 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800e8ea:	f104 010c 	add.w	r1, r4, #12
 800e8ee:	ea00 0706 	and.w	r7, r0, r6
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	f7fc fb80 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800e8f8:	f104 010d 	add.w	r1, r4, #13
 800e8fc:	4007      	ands	r7, r0
 800e8fe:	4628      	mov	r0, r5
 800e900:	f7fc fb4c 	bl	800af9c <ucdr_deserialize_bool>
 800e904:	7b63      	ldrb	r3, [r4, #13]
 800e906:	4007      	ands	r7, r0
 800e908:	b93b      	cbnz	r3, 800e91a <uxr_deserialize_CLIENT_Representation+0x66>
 800e90a:	f104 011c 	add.w	r1, r4, #28
 800e90e:	4628      	mov	r0, r5
 800e910:	f7fc fc8c 	bl	800b22c <ucdr_deserialize_uint16_t>
 800e914:	4038      	ands	r0, r7
 800e916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e91a:	f104 0110 	add.w	r1, r4, #16
 800e91e:	4628      	mov	r0, r5
 800e920:	f7fc fe9a 	bl	800b658 <ucdr_deserialize_uint32_t>
 800e924:	6923      	ldr	r3, [r4, #16]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d903      	bls.n	800e932 <uxr_deserialize_CLIENT_Representation+0x7e>
 800e92a:	2301      	movs	r3, #1
 800e92c:	75ab      	strb	r3, [r5, #22]
 800e92e:	2700      	movs	r7, #0
 800e930:	e7eb      	b.n	800e90a <uxr_deserialize_CLIENT_Representation+0x56>
 800e932:	b30b      	cbz	r3, 800e978 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e934:	2800      	cmp	r0, #0
 800e936:	d0fa      	beq.n	800e92e <uxr_deserialize_CLIENT_Representation+0x7a>
 800e938:	46a0      	mov	r8, r4
 800e93a:	f04f 0900 	mov.w	r9, #0
 800e93e:	e003      	b.n	800e948 <uxr_deserialize_CLIENT_Representation+0x94>
 800e940:	f108 0808 	add.w	r8, r8, #8
 800e944:	2e00      	cmp	r6, #0
 800e946:	d0f2      	beq.n	800e92e <uxr_deserialize_CLIENT_Representation+0x7a>
 800e948:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e94c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e950:	4628      	mov	r0, r5
 800e952:	f002 fbb5 	bl	80110c0 <ucdr_deserialize_string>
 800e956:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e95a:	4606      	mov	r6, r0
 800e95c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e960:	4628      	mov	r0, r5
 800e962:	f002 fbad 	bl	80110c0 <ucdr_deserialize_string>
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	f109 0901 	add.w	r9, r9, #1
 800e96c:	4006      	ands	r6, r0
 800e96e:	4599      	cmp	r9, r3
 800e970:	b2f6      	uxtb	r6, r6
 800e972:	d3e5      	bcc.n	800e940 <uxr_deserialize_CLIENT_Representation+0x8c>
 800e974:	4037      	ands	r7, r6
 800e976:	e7c8      	b.n	800e90a <uxr_deserialize_CLIENT_Representation+0x56>
 800e978:	4007      	ands	r7, r0
 800e97a:	e7c6      	b.n	800e90a <uxr_deserialize_CLIENT_Representation+0x56>

0800e97c <uxr_serialize_AGENT_Representation>:
 800e97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e980:	2204      	movs	r2, #4
 800e982:	460f      	mov	r7, r1
 800e984:	4605      	mov	r5, r0
 800e986:	f7fc f981 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e98a:	2202      	movs	r2, #2
 800e98c:	4604      	mov	r4, r0
 800e98e:	1d39      	adds	r1, r7, #4
 800e990:	4628      	mov	r0, r5
 800e992:	f7fc f97b 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e996:	4020      	ands	r0, r4
 800e998:	2202      	movs	r2, #2
 800e99a:	b2c4      	uxtb	r4, r0
 800e99c:	1db9      	adds	r1, r7, #6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f7fc f974 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800e9a4:	7a39      	ldrb	r1, [r7, #8]
 800e9a6:	4004      	ands	r4, r0
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f7fc fae1 	bl	800af70 <ucdr_serialize_bool>
 800e9ae:	7a3b      	ldrb	r3, [r7, #8]
 800e9b0:	ea00 0804 	and.w	r8, r0, r4
 800e9b4:	b913      	cbnz	r3, 800e9bc <uxr_serialize_AGENT_Representation+0x40>
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9bc:	68f9      	ldr	r1, [r7, #12]
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f7fc fd20 	bl	800b404 <ucdr_serialize_uint32_t>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	b303      	cbz	r3, 800ea0a <uxr_serialize_AGENT_Representation+0x8e>
 800e9c8:	b1d0      	cbz	r0, 800ea00 <uxr_serialize_AGENT_Representation+0x84>
 800e9ca:	463e      	mov	r6, r7
 800e9cc:	f04f 0900 	mov.w	r9, #0
 800e9d0:	e001      	b.n	800e9d6 <uxr_serialize_AGENT_Representation+0x5a>
 800e9d2:	3608      	adds	r6, #8
 800e9d4:	b1a4      	cbz	r4, 800ea00 <uxr_serialize_AGENT_Representation+0x84>
 800e9d6:	6931      	ldr	r1, [r6, #16]
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f002 fb63 	bl	80110a4 <ucdr_serialize_string>
 800e9de:	6971      	ldr	r1, [r6, #20]
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	f002 fb5e 	bl	80110a4 <ucdr_serialize_string>
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f109 0901 	add.w	r9, r9, #1
 800e9ee:	4004      	ands	r4, r0
 800e9f0:	4599      	cmp	r9, r3
 800e9f2:	b2e4      	uxtb	r4, r4
 800e9f4:	d3ed      	bcc.n	800e9d2 <uxr_serialize_AGENT_Representation+0x56>
 800e9f6:	ea08 0804 	and.w	r8, r8, r4
 800e9fa:	4640      	mov	r0, r8
 800e9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea00:	f04f 0800 	mov.w	r8, #0
 800ea04:	4640      	mov	r0, r8
 800ea06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea0a:	ea08 0800 	and.w	r8, r8, r0
 800ea0e:	e7d2      	b.n	800e9b6 <uxr_serialize_AGENT_Representation+0x3a>

0800ea10 <uxr_serialize_DATAWRITER_Representation>:
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	460d      	mov	r5, r1
 800ea14:	7809      	ldrb	r1, [r1, #0]
 800ea16:	4606      	mov	r6, r0
 800ea18:	f7fc fad8 	bl	800afcc <ucdr_serialize_uint8_t>
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	b130      	cbz	r0, 800ea2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ea20:	782b      	ldrb	r3, [r5, #0]
 800ea22:	2b02      	cmp	r3, #2
 800ea24:	d00c      	beq.n	800ea40 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ea26:	2b03      	cmp	r3, #3
 800ea28:	d010      	beq.n	800ea4c <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d008      	beq.n	800ea40 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ea2e:	2202      	movs	r2, #2
 800ea30:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ea34:	4630      	mov	r0, r6
 800ea36:	f7fc f929 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800ea3a:	4020      	ands	r0, r4
 800ea3c:	b2c0      	uxtb	r0, r0
 800ea3e:	bd70      	pop	{r4, r5, r6, pc}
 800ea40:	6869      	ldr	r1, [r5, #4]
 800ea42:	4630      	mov	r0, r6
 800ea44:	f002 fb2e 	bl	80110a4 <ucdr_serialize_string>
 800ea48:	4604      	mov	r4, r0
 800ea4a:	e7f0      	b.n	800ea2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	4630      	mov	r0, r6
 800ea50:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ea54:	3104      	adds	r1, #4
 800ea56:	f7fa fa0b 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	e7e7      	b.n	800ea2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ea5e:	bf00      	nop

0800ea60 <uxr_serialize_ObjectVariant.part.0>:
 800ea60:	b570      	push	{r4, r5, r6, lr}
 800ea62:	780b      	ldrb	r3, [r1, #0]
 800ea64:	3b01      	subs	r3, #1
 800ea66:	460c      	mov	r4, r1
 800ea68:	4605      	mov	r5, r0
 800ea6a:	2b0d      	cmp	r3, #13
 800ea6c:	d816      	bhi.n	800ea9c <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ea6e:	e8df f003 	tbb	[pc, r3]
 800ea72:	0733      	.short	0x0733
 800ea74:	07071717 	.word	0x07071717
 800ea78:	0c150707 	.word	0x0c150707
 800ea7c:	4c510c0c 	.word	0x4c510c0c
 800ea80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea84:	3104      	adds	r1, #4
 800ea86:	f7ff bfc3 	b.w	800ea10 <uxr_serialize_DATAWRITER_Representation>
 800ea8a:	7909      	ldrb	r1, [r1, #4]
 800ea8c:	f7fc fa9e 	bl	800afcc <ucdr_serialize_uint8_t>
 800ea90:	b300      	cbz	r0, 800ead4 <uxr_serialize_ObjectVariant.part.0+0x74>
 800ea92:	7923      	ldrb	r3, [r4, #4]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d042      	beq.n	800eb1e <uxr_serialize_ObjectVariant.part.0+0xbe>
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d040      	beq.n	800eb1e <uxr_serialize_ObjectVariant.part.0+0xbe>
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	7909      	ldrb	r1, [r1, #4]
 800eaa2:	f7fc fa93 	bl	800afcc <ucdr_serialize_uint8_t>
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	b158      	cbz	r0, 800eac2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800eaaa:	7923      	ldrb	r3, [r4, #4]
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d03c      	beq.n	800eb2a <uxr_serialize_ObjectVariant.part.0+0xca>
 800eab0:	2b03      	cmp	r3, #3
 800eab2:	d106      	bne.n	800eac2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800eab4:	68a2      	ldr	r2, [r4, #8]
 800eab6:	f104 010c 	add.w	r1, r4, #12
 800eaba:	4628      	mov	r0, r5
 800eabc:	f7fa f9d8 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800eac0:	4606      	mov	r6, r0
 800eac2:	2202      	movs	r2, #2
 800eac4:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800eac8:	4628      	mov	r0, r5
 800eaca:	f7fc f8df 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800eace:	4030      	ands	r0, r6
 800ead0:	b2c0      	uxtb	r0, r0
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	2000      	movs	r0, #0
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	7909      	ldrb	r1, [r1, #4]
 800eada:	f7fc fa77 	bl	800afcc <ucdr_serialize_uint8_t>
 800eade:	4606      	mov	r6, r0
 800eae0:	b158      	cbz	r0, 800eafa <uxr_serialize_ObjectVariant.part.0+0x9a>
 800eae2:	7923      	ldrb	r3, [r4, #4]
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	d003      	beq.n	800eaf0 <uxr_serialize_ObjectVariant.part.0+0x90>
 800eae8:	2b03      	cmp	r3, #3
 800eaea:	d024      	beq.n	800eb36 <uxr_serialize_ObjectVariant.part.0+0xd6>
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d104      	bne.n	800eafa <uxr_serialize_ObjectVariant.part.0+0x9a>
 800eaf0:	68a1      	ldr	r1, [r4, #8]
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f002 fad6 	bl	80110a4 <ucdr_serialize_string>
 800eaf8:	4606      	mov	r6, r0
 800eafa:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800eafe:	4628      	mov	r0, r5
 800eb00:	f7fc ff8c 	bl	800ba1c <ucdr_serialize_int16_t>
 800eb04:	4030      	ands	r0, r6
 800eb06:	b2c0      	uxtb	r0, r0
 800eb08:	bd70      	pop	{r4, r5, r6, pc}
 800eb0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb0e:	3104      	adds	r1, #4
 800eb10:	f7ff be76 	b.w	800e800 <uxr_serialize_CLIENT_Representation>
 800eb14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb18:	3104      	adds	r1, #4
 800eb1a:	f7ff bf2f 	b.w	800e97c <uxr_serialize_AGENT_Representation>
 800eb1e:	68a1      	ldr	r1, [r4, #8]
 800eb20:	4628      	mov	r0, r5
 800eb22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb26:	f002 babd 	b.w	80110a4 <ucdr_serialize_string>
 800eb2a:	68a1      	ldr	r1, [r4, #8]
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f002 fab9 	bl	80110a4 <ucdr_serialize_string>
 800eb32:	4606      	mov	r6, r0
 800eb34:	e7c5      	b.n	800eac2 <uxr_serialize_ObjectVariant.part.0+0x62>
 800eb36:	68a2      	ldr	r2, [r4, #8]
 800eb38:	f104 010c 	add.w	r1, r4, #12
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f7fa f997 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800eb42:	4606      	mov	r6, r0
 800eb44:	e7d9      	b.n	800eafa <uxr_serialize_ObjectVariant.part.0+0x9a>
 800eb46:	bf00      	nop

0800eb48 <uxr_deserialize_DATAWRITER_Representation>:
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	f7fc fa53 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800eb52:	4604      	mov	r4, r0
 800eb54:	b130      	cbz	r0, 800eb64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800eb56:	782b      	ldrb	r3, [r5, #0]
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d00c      	beq.n	800eb76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d012      	beq.n	800eb86 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d008      	beq.n	800eb76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800eb64:	2202      	movs	r2, #2
 800eb66:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f7fc f8f2 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800eb70:	4020      	ands	r0, r4
 800eb72:	b2c0      	uxtb	r0, r0
 800eb74:	bd70      	pop	{r4, r5, r6, pc}
 800eb76:	6869      	ldr	r1, [r5, #4]
 800eb78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f002 fa9f 	bl	80110c0 <ucdr_deserialize_string>
 800eb82:	4604      	mov	r4, r0
 800eb84:	e7ee      	b.n	800eb64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800eb86:	1d2b      	adds	r3, r5, #4
 800eb88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb8c:	f105 0108 	add.w	r1, r5, #8
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7fa f97f 	bl	8008e94 <ucdr_deserialize_sequence_uint8_t>
 800eb96:	4604      	mov	r4, r0
 800eb98:	e7e4      	b.n	800eb64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800eb9a:	bf00      	nop

0800eb9c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800eb9c:	b570      	push	{r4, r5, r6, lr}
 800eb9e:	460d      	mov	r5, r1
 800eba0:	7809      	ldrb	r1, [r1, #0]
 800eba2:	4606      	mov	r6, r0
 800eba4:	f7fc f9e4 	bl	800af70 <ucdr_serialize_bool>
 800eba8:	782b      	ldrb	r3, [r5, #0]
 800ebaa:	4604      	mov	r4, r0
 800ebac:	b94b      	cbnz	r3, 800ebc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ebae:	7a29      	ldrb	r1, [r5, #8]
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7fc f9dd 	bl	800af70 <ucdr_serialize_bool>
 800ebb6:	7a2b      	ldrb	r3, [r5, #8]
 800ebb8:	4004      	ands	r4, r0
 800ebba:	b2e4      	uxtb	r4, r4
 800ebbc:	b943      	cbnz	r3, 800ebd0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	bd70      	pop	{r4, r5, r6, pc}
 800ebc2:	6869      	ldr	r1, [r5, #4]
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f002 fa6d 	bl	80110a4 <ucdr_serialize_string>
 800ebca:	4004      	ands	r4, r0
 800ebcc:	b2e4      	uxtb	r4, r4
 800ebce:	e7ee      	b.n	800ebae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ebd0:	68e9      	ldr	r1, [r5, #12]
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f002 fa66 	bl	80110a4 <ucdr_serialize_string>
 800ebd8:	4004      	ands	r4, r0
 800ebda:	4620      	mov	r0, r4
 800ebdc:	bd70      	pop	{r4, r5, r6, pc}
 800ebde:	bf00      	nop

0800ebe0 <uxr_serialize_OBJK_Topic_Binary>:
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	6809      	ldr	r1, [r1, #0]
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	f002 fa5c 	bl	80110a4 <ucdr_serialize_string>
 800ebec:	7929      	ldrb	r1, [r5, #4]
 800ebee:	4604      	mov	r4, r0
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	f7fc f9bd 	bl	800af70 <ucdr_serialize_bool>
 800ebf6:	792b      	ldrb	r3, [r5, #4]
 800ebf8:	4004      	ands	r4, r0
 800ebfa:	b2e4      	uxtb	r4, r4
 800ebfc:	b943      	cbnz	r3, 800ec10 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ebfe:	7b29      	ldrb	r1, [r5, #12]
 800ec00:	4630      	mov	r0, r6
 800ec02:	f7fc f9b5 	bl	800af70 <ucdr_serialize_bool>
 800ec06:	7b2b      	ldrb	r3, [r5, #12]
 800ec08:	4004      	ands	r4, r0
 800ec0a:	b93b      	cbnz	r3, 800ec1c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
 800ec10:	68a9      	ldr	r1, [r5, #8]
 800ec12:	4630      	mov	r0, r6
 800ec14:	f002 fa46 	bl	80110a4 <ucdr_serialize_string>
 800ec18:	4004      	ands	r4, r0
 800ec1a:	e7f0      	b.n	800ebfe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ec1c:	6929      	ldr	r1, [r5, #16]
 800ec1e:	4630      	mov	r0, r6
 800ec20:	f002 fa40 	bl	80110a4 <ucdr_serialize_string>
 800ec24:	4004      	ands	r4, r0
 800ec26:	b2e4      	uxtb	r4, r4
 800ec28:	4620      	mov	r0, r4
 800ec2a:	bd70      	pop	{r4, r5, r6, pc}

0800ec2c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ec2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec30:	460c      	mov	r4, r1
 800ec32:	7809      	ldrb	r1, [r1, #0]
 800ec34:	4606      	mov	r6, r0
 800ec36:	f7fc f99b 	bl	800af70 <ucdr_serialize_bool>
 800ec3a:	7823      	ldrb	r3, [r4, #0]
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	b96b      	cbnz	r3, 800ec5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ec40:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ec44:	4630      	mov	r0, r6
 800ec46:	f7fc f993 	bl	800af70 <ucdr_serialize_bool>
 800ec4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ec4e:	4005      	ands	r5, r0
 800ec50:	b2ed      	uxtb	r5, r5
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d16a      	bne.n	800ed2c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800ec56:	4628      	mov	r0, r5
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	6861      	ldr	r1, [r4, #4]
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7fc fbd0 	bl	800b404 <ucdr_serialize_uint32_t>
 800ec64:	6863      	ldr	r3, [r4, #4]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d06c      	beq.n	800ed44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d068      	beq.n	800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ec6e:	68a1      	ldr	r1, [r4, #8]
 800ec70:	4630      	mov	r0, r6
 800ec72:	f002 fa17 	bl	80110a4 <ucdr_serialize_string>
 800ec76:	6862      	ldr	r2, [r4, #4]
 800ec78:	2a01      	cmp	r2, #1
 800ec7a:	d953      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d05f      	beq.n	800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ec80:	68e1      	ldr	r1, [r4, #12]
 800ec82:	4630      	mov	r0, r6
 800ec84:	f002 fa0e 	bl	80110a4 <ucdr_serialize_string>
 800ec88:	6862      	ldr	r2, [r4, #4]
 800ec8a:	2a02      	cmp	r2, #2
 800ec8c:	d94a      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d056      	beq.n	800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ec92:	6921      	ldr	r1, [r4, #16]
 800ec94:	4630      	mov	r0, r6
 800ec96:	f002 fa05 	bl	80110a4 <ucdr_serialize_string>
 800ec9a:	6862      	ldr	r2, [r4, #4]
 800ec9c:	2a03      	cmp	r2, #3
 800ec9e:	d941      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d04d      	beq.n	800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800eca4:	6961      	ldr	r1, [r4, #20]
 800eca6:	4630      	mov	r0, r6
 800eca8:	f002 f9fc 	bl	80110a4 <ucdr_serialize_string>
 800ecac:	6862      	ldr	r2, [r4, #4]
 800ecae:	2a04      	cmp	r2, #4
 800ecb0:	d938      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d044      	beq.n	800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ecb6:	69a1      	ldr	r1, [r4, #24]
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f002 f9f3 	bl	80110a4 <ucdr_serialize_string>
 800ecbe:	6862      	ldr	r2, [r4, #4]
 800ecc0:	2a05      	cmp	r2, #5
 800ecc2:	d92f      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d03b      	beq.n	800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ecc8:	69e1      	ldr	r1, [r4, #28]
 800ecca:	4630      	mov	r0, r6
 800eccc:	f002 f9ea 	bl	80110a4 <ucdr_serialize_string>
 800ecd0:	6862      	ldr	r2, [r4, #4]
 800ecd2:	2a06      	cmp	r2, #6
 800ecd4:	d926      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ecd6:	b398      	cbz	r0, 800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ecd8:	6a21      	ldr	r1, [r4, #32]
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f002 f9e2 	bl	80110a4 <ucdr_serialize_string>
 800ece0:	6862      	ldr	r2, [r4, #4]
 800ece2:	2a07      	cmp	r2, #7
 800ece4:	d91e      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ece6:	b358      	cbz	r0, 800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ece8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ecea:	4630      	mov	r0, r6
 800ecec:	f002 f9da 	bl	80110a4 <ucdr_serialize_string>
 800ecf0:	6862      	ldr	r2, [r4, #4]
 800ecf2:	2a08      	cmp	r2, #8
 800ecf4:	d916      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ecf6:	b318      	cbz	r0, 800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ecf8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	f002 f9d2 	bl	80110a4 <ucdr_serialize_string>
 800ed00:	6862      	ldr	r2, [r4, #4]
 800ed02:	2a09      	cmp	r2, #9
 800ed04:	d90e      	bls.n	800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed06:	b1d8      	cbz	r0, 800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed08:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800ed0c:	2709      	movs	r7, #9
 800ed0e:	e000      	b.n	800ed12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800ed10:	b1b0      	cbz	r0, 800ed40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed12:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800ed16:	4630      	mov	r0, r6
 800ed18:	f002 f9c4 	bl	80110a4 <ucdr_serialize_string>
 800ed1c:	6862      	ldr	r2, [r4, #4]
 800ed1e:	3701      	adds	r7, #1
 800ed20:	4297      	cmp	r7, r2
 800ed22:	d3f5      	bcc.n	800ed10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ed24:	ea05 0300 	and.w	r3, r5, r0
 800ed28:	b2dd      	uxtb	r5, r3
 800ed2a:	e789      	b.n	800ec40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ed2c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ed2e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7fa f89c 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800ed38:	4005      	ands	r5, r0
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed40:	2500      	movs	r5, #0
 800ed42:	e77d      	b.n	800ec40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ed44:	4028      	ands	r0, r5
 800ed46:	b2c5      	uxtb	r5, r0
 800ed48:	e77a      	b.n	800ec40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ed4a:	bf00      	nop

0800ed4c <uxr_serialize_OBJK_Publisher_Binary>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	460d      	mov	r5, r1
 800ed50:	7809      	ldrb	r1, [r1, #0]
 800ed52:	4606      	mov	r6, r0
 800ed54:	f7fc f90c 	bl	800af70 <ucdr_serialize_bool>
 800ed58:	782b      	ldrb	r3, [r5, #0]
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	b94b      	cbnz	r3, 800ed72 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ed5e:	7a29      	ldrb	r1, [r5, #8]
 800ed60:	4630      	mov	r0, r6
 800ed62:	f7fc f905 	bl	800af70 <ucdr_serialize_bool>
 800ed66:	7a2b      	ldrb	r3, [r5, #8]
 800ed68:	4004      	ands	r4, r0
 800ed6a:	b2e4      	uxtb	r4, r4
 800ed6c:	b943      	cbnz	r3, 800ed80 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ed6e:	4620      	mov	r0, r4
 800ed70:	bd70      	pop	{r4, r5, r6, pc}
 800ed72:	6869      	ldr	r1, [r5, #4]
 800ed74:	4630      	mov	r0, r6
 800ed76:	f002 f995 	bl	80110a4 <ucdr_serialize_string>
 800ed7a:	4004      	ands	r4, r0
 800ed7c:	b2e4      	uxtb	r4, r4
 800ed7e:	e7ee      	b.n	800ed5e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ed80:	f105 010c 	add.w	r1, r5, #12
 800ed84:	4630      	mov	r0, r6
 800ed86:	f7ff ff51 	bl	800ec2c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ed8a:	4004      	ands	r4, r0
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}

0800ed90 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800ed90:	b570      	push	{r4, r5, r6, lr}
 800ed92:	460d      	mov	r5, r1
 800ed94:	8809      	ldrh	r1, [r1, #0]
 800ed96:	4606      	mov	r6, r0
 800ed98:	f7fc f944 	bl	800b024 <ucdr_serialize_uint16_t>
 800ed9c:	78a9      	ldrb	r1, [r5, #2]
 800ed9e:	4604      	mov	r4, r0
 800eda0:	4630      	mov	r0, r6
 800eda2:	f7fc f8e5 	bl	800af70 <ucdr_serialize_bool>
 800eda6:	78ab      	ldrb	r3, [r5, #2]
 800eda8:	4004      	ands	r4, r0
 800edaa:	b2e4      	uxtb	r4, r4
 800edac:	b9b3      	cbnz	r3, 800eddc <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800edae:	79a9      	ldrb	r1, [r5, #6]
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7fc f8dd 	bl	800af70 <ucdr_serialize_bool>
 800edb6:	79ab      	ldrb	r3, [r5, #6]
 800edb8:	4004      	ands	r4, r0
 800edba:	bb33      	cbnz	r3, 800ee0a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800edbc:	7b29      	ldrb	r1, [r5, #12]
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7fc f8d6 	bl	800af70 <ucdr_serialize_bool>
 800edc4:	7b2b      	ldrb	r3, [r5, #12]
 800edc6:	4004      	ands	r4, r0
 800edc8:	b9c3      	cbnz	r3, 800edfc <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800edca:	7d29      	ldrb	r1, [r5, #20]
 800edcc:	4630      	mov	r0, r6
 800edce:	f7fc f8cf 	bl	800af70 <ucdr_serialize_bool>
 800edd2:	7d2b      	ldrb	r3, [r5, #20]
 800edd4:	4004      	ands	r4, r0
 800edd6:	b93b      	cbnz	r3, 800ede8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800edd8:	4620      	mov	r0, r4
 800edda:	bd70      	pop	{r4, r5, r6, pc}
 800eddc:	88a9      	ldrh	r1, [r5, #4]
 800edde:	4630      	mov	r0, r6
 800ede0:	f7fc f920 	bl	800b024 <ucdr_serialize_uint16_t>
 800ede4:	4004      	ands	r4, r0
 800ede6:	e7e2      	b.n	800edae <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800ede8:	69aa      	ldr	r2, [r5, #24]
 800edea:	f105 011c 	add.w	r1, r5, #28
 800edee:	4630      	mov	r0, r6
 800edf0:	f7fa f83e 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800edf4:	4004      	ands	r4, r0
 800edf6:	b2e4      	uxtb	r4, r4
 800edf8:	4620      	mov	r0, r4
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	6929      	ldr	r1, [r5, #16]
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7fc fb00 	bl	800b404 <ucdr_serialize_uint32_t>
 800ee04:	4004      	ands	r4, r0
 800ee06:	b2e4      	uxtb	r4, r4
 800ee08:	e7df      	b.n	800edca <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800ee0a:	68a9      	ldr	r1, [r5, #8]
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f7fc faf9 	bl	800b404 <ucdr_serialize_uint32_t>
 800ee12:	4004      	ands	r4, r0
 800ee14:	b2e4      	uxtb	r4, r4
 800ee16:	e7d1      	b.n	800edbc <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800ee18 <uxr_serialize_OBJK_DataWriter_Binary>:
 800ee18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	4606      	mov	r6, r0
 800ee20:	f7fb ff34 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800ee24:	78a9      	ldrb	r1, [r5, #2]
 800ee26:	4604      	mov	r4, r0
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7fc f8a1 	bl	800af70 <ucdr_serialize_bool>
 800ee2e:	78ab      	ldrb	r3, [r5, #2]
 800ee30:	4004      	ands	r4, r0
 800ee32:	b2e4      	uxtb	r4, r4
 800ee34:	b90b      	cbnz	r3, 800ee3a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ee36:	4620      	mov	r0, r4
 800ee38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee3a:	f105 0108 	add.w	r1, r5, #8
 800ee3e:	4630      	mov	r0, r6
 800ee40:	f7ff ffa6 	bl	800ed90 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ee44:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ee48:	4607      	mov	r7, r0
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f7fc f890 	bl	800af70 <ucdr_serialize_bool>
 800ee50:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ee54:	4007      	ands	r7, r0
 800ee56:	b2ff      	uxtb	r7, r7
 800ee58:	b913      	cbnz	r3, 800ee60 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ee5a:	403c      	ands	r4, r7
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee60:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ee64:	4630      	mov	r0, r6
 800ee66:	f7fc fd11 	bl	800b88c <ucdr_serialize_uint64_t>
 800ee6a:	4007      	ands	r7, r0
 800ee6c:	e7f5      	b.n	800ee5a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ee6e:	bf00      	nop

0800ee70 <uxr_deserialize_ObjectVariant>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	4605      	mov	r5, r0
 800ee74:	460e      	mov	r6, r1
 800ee76:	f7fc f8bf 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800ee7a:	b168      	cbz	r0, 800ee98 <uxr_deserialize_ObjectVariant+0x28>
 800ee7c:	7833      	ldrb	r3, [r6, #0]
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	4604      	mov	r4, r0
 800ee82:	2b0d      	cmp	r3, #13
 800ee84:	d809      	bhi.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ee86:	e8df f003 	tbb	[pc, r3]
 800ee8a:	0a64      	.short	0x0a64
 800ee8c:	0a0a2323 	.word	0x0a0a2323
 800ee90:	10080a0a 	.word	0x10080a0a
 800ee94:	5e411010 	.word	0x5e411010
 800ee98:	2400      	movs	r4, #0
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
 800ee9e:	1d31      	adds	r1, r6, #4
 800eea0:	4628      	mov	r0, r5
 800eea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eea6:	f7ff be4f 	b.w	800eb48 <uxr_deserialize_DATAWRITER_Representation>
 800eeaa:	1d31      	adds	r1, r6, #4
 800eeac:	4628      	mov	r0, r5
 800eeae:	f7fc f8a3 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d0f0      	beq.n	800ee98 <uxr_deserialize_ObjectVariant+0x28>
 800eeb6:	7933      	ldrb	r3, [r6, #4]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d001      	beq.n	800eec0 <uxr_deserialize_ObjectVariant+0x50>
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d1ec      	bne.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800eec0:	68b1      	ldr	r1, [r6, #8]
 800eec2:	4628      	mov	r0, r5
 800eec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eecc:	f002 b8f8 	b.w	80110c0 <ucdr_deserialize_string>
 800eed0:	1d31      	adds	r1, r6, #4
 800eed2:	4628      	mov	r0, r5
 800eed4:	f7fc f890 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800eed8:	4604      	mov	r4, r0
 800eeda:	b170      	cbz	r0, 800eefa <uxr_deserialize_ObjectVariant+0x8a>
 800eedc:	7933      	ldrb	r3, [r6, #4]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d053      	beq.n	800ef8a <uxr_deserialize_ObjectVariant+0x11a>
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d109      	bne.n	800eefa <uxr_deserialize_ObjectVariant+0x8a>
 800eee6:	f106 0308 	add.w	r3, r6, #8
 800eeea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eeee:	f106 010c 	add.w	r1, r6, #12
 800eef2:	4628      	mov	r0, r5
 800eef4:	f7f9 ffce 	bl	8008e94 <ucdr_deserialize_sequence_uint8_t>
 800eef8:	4604      	mov	r4, r0
 800eefa:	2202      	movs	r2, #2
 800eefc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ef00:	4628      	mov	r0, r5
 800ef02:	f7fb ff27 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800ef06:	4004      	ands	r4, r0
 800ef08:	b2e4      	uxtb	r4, r4
 800ef0a:	e7c6      	b.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ef0c:	2204      	movs	r2, #4
 800ef0e:	18b1      	adds	r1, r6, r2
 800ef10:	4628      	mov	r0, r5
 800ef12:	f7fb ff1f 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800ef16:	2202      	movs	r2, #2
 800ef18:	f106 0108 	add.w	r1, r6, #8
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f7fb ff18 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800ef24:	2202      	movs	r2, #2
 800ef26:	4004      	ands	r4, r0
 800ef28:	f106 010a 	add.w	r1, r6, #10
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	f7fb ff11 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800ef32:	b2e4      	uxtb	r4, r4
 800ef34:	4603      	mov	r3, r0
 800ef36:	f106 010c 	add.w	r1, r6, #12
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	401c      	ands	r4, r3
 800ef3e:	f7fc f82d 	bl	800af9c <ucdr_deserialize_bool>
 800ef42:	4004      	ands	r4, r0
 800ef44:	e7a9      	b.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ef46:	1d31      	adds	r1, r6, #4
 800ef48:	4628      	mov	r0, r5
 800ef4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef4e:	f7ff bcb1 	b.w	800e8b4 <uxr_deserialize_CLIENT_Representation>
 800ef52:	1d31      	adds	r1, r6, #4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f7fc f84f 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	b168      	cbz	r0, 800ef7a <uxr_deserialize_ObjectVariant+0x10a>
 800ef5e:	7933      	ldrb	r3, [r6, #4]
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d003      	beq.n	800ef6c <uxr_deserialize_ObjectVariant+0xfc>
 800ef64:	2b03      	cmp	r3, #3
 800ef66:	d018      	beq.n	800ef9a <uxr_deserialize_ObjectVariant+0x12a>
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d106      	bne.n	800ef7a <uxr_deserialize_ObjectVariant+0x10a>
 800ef6c:	68b1      	ldr	r1, [r6, #8]
 800ef6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef72:	4628      	mov	r0, r5
 800ef74:	f002 f8a4 	bl	80110c0 <ucdr_deserialize_string>
 800ef78:	4604      	mov	r4, r0
 800ef7a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ef7e:	4628      	mov	r0, r5
 800ef80:	f7fc fdd6 	bl	800bb30 <ucdr_deserialize_int16_t>
 800ef84:	4004      	ands	r4, r0
 800ef86:	b2e4      	uxtb	r4, r4
 800ef88:	e787      	b.n	800ee9a <uxr_deserialize_ObjectVariant+0x2a>
 800ef8a:	68b1      	ldr	r1, [r6, #8]
 800ef8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef90:	4628      	mov	r0, r5
 800ef92:	f002 f895 	bl	80110c0 <ucdr_deserialize_string>
 800ef96:	4604      	mov	r4, r0
 800ef98:	e7af      	b.n	800eefa <uxr_deserialize_ObjectVariant+0x8a>
 800ef9a:	f106 0308 	add.w	r3, r6, #8
 800ef9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efa2:	f106 010c 	add.w	r1, r6, #12
 800efa6:	4628      	mov	r0, r5
 800efa8:	f7f9 ff74 	bl	8008e94 <ucdr_deserialize_sequence_uint8_t>
 800efac:	4604      	mov	r4, r0
 800efae:	e7e4      	b.n	800ef7a <uxr_deserialize_ObjectVariant+0x10a>

0800efb0 <uxr_deserialize_BaseObjectRequest>:
 800efb0:	b570      	push	{r4, r5, r6, lr}
 800efb2:	2202      	movs	r2, #2
 800efb4:	4605      	mov	r5, r0
 800efb6:	460e      	mov	r6, r1
 800efb8:	f7fb fecc 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800efbc:	2202      	movs	r2, #2
 800efbe:	4604      	mov	r4, r0
 800efc0:	18b1      	adds	r1, r6, r2
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7fb fec6 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800efc8:	4020      	ands	r0, r4
 800efca:	b2c0      	uxtb	r0, r0
 800efcc:	bd70      	pop	{r4, r5, r6, pc}
 800efce:	bf00      	nop

0800efd0 <uxr_serialize_ActivityInfoVariant>:
 800efd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efd4:	460d      	mov	r5, r1
 800efd6:	7809      	ldrb	r1, [r1, #0]
 800efd8:	4606      	mov	r6, r0
 800efda:	f7fb fff7 	bl	800afcc <ucdr_serialize_uint8_t>
 800efde:	b130      	cbz	r0, 800efee <uxr_serialize_ActivityInfoVariant+0x1e>
 800efe0:	782b      	ldrb	r3, [r5, #0]
 800efe2:	2b06      	cmp	r3, #6
 800efe4:	d014      	beq.n	800f010 <uxr_serialize_ActivityInfoVariant+0x40>
 800efe6:	2b0d      	cmp	r3, #13
 800efe8:	d019      	beq.n	800f01e <uxr_serialize_ActivityInfoVariant+0x4e>
 800efea:	2b05      	cmp	r3, #5
 800efec:	d001      	beq.n	800eff2 <uxr_serialize_ActivityInfoVariant+0x22>
 800efee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eff2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800eff6:	4630      	mov	r0, r6
 800eff8:	f7fc fd10 	bl	800ba1c <ucdr_serialize_int16_t>
 800effc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f000:	4604      	mov	r4, r0
 800f002:	4630      	mov	r0, r6
 800f004:	f7fc fc42 	bl	800b88c <ucdr_serialize_uint64_t>
 800f008:	4020      	ands	r0, r4
 800f00a:	b2c0      	uxtb	r0, r0
 800f00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f010:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f014:	4630      	mov	r0, r6
 800f016:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f01a:	f7fc bcff 	b.w	800ba1c <ucdr_serialize_int16_t>
 800f01e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f022:	4630      	mov	r0, r6
 800f024:	f7fc fcfa 	bl	800ba1c <ucdr_serialize_int16_t>
 800f028:	68e9      	ldr	r1, [r5, #12]
 800f02a:	4681      	mov	r9, r0
 800f02c:	4630      	mov	r0, r6
 800f02e:	f7fc f9e9 	bl	800b404 <ucdr_serialize_uint32_t>
 800f032:	68eb      	ldr	r3, [r5, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d051      	beq.n	800f0dc <uxr_serialize_ActivityInfoVariant+0x10c>
 800f038:	b1e8      	cbz	r0, 800f076 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f03a:	f105 0714 	add.w	r7, r5, #20
 800f03e:	f04f 0800 	mov.w	r8, #0
 800f042:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 800f046:	4630      	mov	r0, r6
 800f048:	f7fb ffc0 	bl	800afcc <ucdr_serialize_uint8_t>
 800f04c:	b198      	cbz	r0, 800f076 <uxr_serialize_ActivityInfoVariant+0xa6>
 800f04e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 800f052:	2b03      	cmp	r3, #3
 800f054:	d839      	bhi.n	800f0ca <uxr_serialize_ActivityInfoVariant+0xfa>
 800f056:	e8df f003 	tbb	[pc, r3]
 800f05a:	1e2b      	.short	0x1e2b
 800f05c:	0211      	.short	0x0211
 800f05e:	6839      	ldr	r1, [r7, #0]
 800f060:	4630      	mov	r0, r6
 800f062:	f002 f81f 	bl	80110a4 <ucdr_serialize_string>
 800f066:	68eb      	ldr	r3, [r5, #12]
 800f068:	f108 0801 	add.w	r8, r8, #1
 800f06c:	4598      	cmp	r8, r3
 800f06e:	d231      	bcs.n	800f0d4 <uxr_serialize_ActivityInfoVariant+0x104>
 800f070:	3718      	adds	r7, #24
 800f072:	2800      	cmp	r0, #0
 800f074:	d1e5      	bne.n	800f042 <uxr_serialize_ActivityInfoVariant+0x72>
 800f076:	2000      	movs	r0, #0
 800f078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f07c:	2210      	movs	r2, #16
 800f07e:	4639      	mov	r1, r7
 800f080:	4630      	mov	r0, r6
 800f082:	f7fb fe03 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f086:	6939      	ldr	r1, [r7, #16]
 800f088:	4604      	mov	r4, r0
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7fc f9ba 	bl	800b404 <ucdr_serialize_uint32_t>
 800f090:	4020      	ands	r0, r4
 800f092:	b2c0      	uxtb	r0, r0
 800f094:	e7e7      	b.n	800f066 <uxr_serialize_ActivityInfoVariant+0x96>
 800f096:	2204      	movs	r2, #4
 800f098:	4639      	mov	r1, r7
 800f09a:	4630      	mov	r0, r6
 800f09c:	f7fb fdf6 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f0a0:	88b9      	ldrh	r1, [r7, #4]
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	f7fb ffbd 	bl	800b024 <ucdr_serialize_uint16_t>
 800f0aa:	4020      	ands	r0, r4
 800f0ac:	b2c0      	uxtb	r0, r0
 800f0ae:	e7da      	b.n	800f066 <uxr_serialize_ActivityInfoVariant+0x96>
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f7fb fde9 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f0ba:	78b9      	ldrb	r1, [r7, #2]
 800f0bc:	4604      	mov	r4, r0
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f7fb ff84 	bl	800afcc <ucdr_serialize_uint8_t>
 800f0c4:	4020      	ands	r0, r4
 800f0c6:	b2c0      	uxtb	r0, r0
 800f0c8:	e7cd      	b.n	800f066 <uxr_serialize_ActivityInfoVariant+0x96>
 800f0ca:	68eb      	ldr	r3, [r5, #12]
 800f0cc:	f108 0801 	add.w	r8, r8, #1
 800f0d0:	4598      	cmp	r8, r3
 800f0d2:	d308      	bcc.n	800f0e6 <uxr_serialize_ActivityInfoVariant+0x116>
 800f0d4:	ea09 0000 	and.w	r0, r9, r0
 800f0d8:	b2c0      	uxtb	r0, r0
 800f0da:	e788      	b.n	800efee <uxr_serialize_ActivityInfoVariant+0x1e>
 800f0dc:	ea09 0900 	and.w	r9, r9, r0
 800f0e0:	fa5f f089 	uxtb.w	r0, r9
 800f0e4:	e783      	b.n	800efee <uxr_serialize_ActivityInfoVariant+0x1e>
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	e7ab      	b.n	800f042 <uxr_serialize_ActivityInfoVariant+0x72>
 800f0ea:	bf00      	nop

0800f0ec <uxr_deserialize_BaseObjectReply>:
 800f0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f0:	2202      	movs	r2, #2
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	460f      	mov	r7, r1
 800f0f6:	f7fb fe2d 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f0fa:	2202      	movs	r2, #2
 800f0fc:	18b9      	adds	r1, r7, r2
 800f0fe:	4605      	mov	r5, r0
 800f100:	4630      	mov	r0, r6
 800f102:	f7fb fe27 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f106:	1d39      	adds	r1, r7, #4
 800f108:	4680      	mov	r8, r0
 800f10a:	4630      	mov	r0, r6
 800f10c:	f7fb ff74 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f110:	1d79      	adds	r1, r7, #5
 800f112:	4604      	mov	r4, r0
 800f114:	4630      	mov	r0, r6
 800f116:	f7fb ff6f 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f11a:	ea05 0508 	and.w	r5, r5, r8
 800f11e:	402c      	ands	r4, r5
 800f120:	4020      	ands	r0, r4
 800f122:	b2c0      	uxtb	r0, r0
 800f124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f128 <uxr_serialize_ReadSpecification>:
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	460d      	mov	r5, r1
 800f12e:	7809      	ldrb	r1, [r1, #0]
 800f130:	4606      	mov	r6, r0
 800f132:	f7fb ff4b 	bl	800afcc <ucdr_serialize_uint8_t>
 800f136:	7869      	ldrb	r1, [r5, #1]
 800f138:	4604      	mov	r4, r0
 800f13a:	4630      	mov	r0, r6
 800f13c:	f7fb ff46 	bl	800afcc <ucdr_serialize_uint8_t>
 800f140:	78a9      	ldrb	r1, [r5, #2]
 800f142:	4004      	ands	r4, r0
 800f144:	4630      	mov	r0, r6
 800f146:	f7fb ff13 	bl	800af70 <ucdr_serialize_bool>
 800f14a:	78ab      	ldrb	r3, [r5, #2]
 800f14c:	b2e4      	uxtb	r4, r4
 800f14e:	4004      	ands	r4, r0
 800f150:	b94b      	cbnz	r3, 800f166 <uxr_serialize_ReadSpecification+0x3e>
 800f152:	7a29      	ldrb	r1, [r5, #8]
 800f154:	4630      	mov	r0, r6
 800f156:	f7fb ff0b 	bl	800af70 <ucdr_serialize_bool>
 800f15a:	7a2b      	ldrb	r3, [r5, #8]
 800f15c:	4004      	ands	r4, r0
 800f15e:	b943      	cbnz	r3, 800f172 <uxr_serialize_ReadSpecification+0x4a>
 800f160:	4620      	mov	r0, r4
 800f162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f166:	6869      	ldr	r1, [r5, #4]
 800f168:	4630      	mov	r0, r6
 800f16a:	f001 ff9b 	bl	80110a4 <ucdr_serialize_string>
 800f16e:	4004      	ands	r4, r0
 800f170:	e7ef      	b.n	800f152 <uxr_serialize_ReadSpecification+0x2a>
 800f172:	8969      	ldrh	r1, [r5, #10]
 800f174:	4630      	mov	r0, r6
 800f176:	f7fb ff55 	bl	800b024 <ucdr_serialize_uint16_t>
 800f17a:	89a9      	ldrh	r1, [r5, #12]
 800f17c:	4607      	mov	r7, r0
 800f17e:	4630      	mov	r0, r6
 800f180:	f7fb ff50 	bl	800b024 <ucdr_serialize_uint16_t>
 800f184:	89e9      	ldrh	r1, [r5, #14]
 800f186:	4007      	ands	r7, r0
 800f188:	4630      	mov	r0, r6
 800f18a:	f7fb ff4b 	bl	800b024 <ucdr_serialize_uint16_t>
 800f18e:	8a29      	ldrh	r1, [r5, #16]
 800f190:	4680      	mov	r8, r0
 800f192:	4630      	mov	r0, r6
 800f194:	f7fb ff46 	bl	800b024 <ucdr_serialize_uint16_t>
 800f198:	b2ff      	uxtb	r7, r7
 800f19a:	ea04 0507 	and.w	r5, r4, r7
 800f19e:	ea05 0508 	and.w	r5, r5, r8
 800f1a2:	ea00 0405 	and.w	r4, r0, r5
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1ac <uxr_serialize_CREATE_CLIENT_Payload>:
 800f1ac:	f7ff bb28 	b.w	800e800 <uxr_serialize_CLIENT_Representation>

0800f1b0 <uxr_serialize_CREATE_Payload>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	2202      	movs	r2, #2
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	460d      	mov	r5, r1
 800f1b8:	f7fb fd68 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f1bc:	2202      	movs	r2, #2
 800f1be:	18a9      	adds	r1, r5, r2
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f7fb fd62 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f1c8:	7929      	ldrb	r1, [r5, #4]
 800f1ca:	4607      	mov	r7, r0
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	f7fb fefd 	bl	800afcc <ucdr_serialize_uint8_t>
 800f1d2:	b170      	cbz	r0, 800f1f2 <uxr_serialize_CREATE_Payload+0x42>
 800f1d4:	792b      	ldrb	r3, [r5, #4]
 800f1d6:	403c      	ands	r4, r7
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	b2e4      	uxtb	r4, r4
 800f1dc:	2b0d      	cmp	r3, #13
 800f1de:	d809      	bhi.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f1e0:	e8df f003 	tbb	[pc, r3]
 800f1e4:	23230a3e 	.word	0x23230a3e
 800f1e8:	0a0a0a0a 	.word	0x0a0a0a0a
 800f1ec:	12121208 	.word	0x12121208
 800f1f0:	5f58      	.short	0x5f58
 800f1f2:	2400      	movs	r4, #0
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f8:	f105 0108 	add.w	r1, r5, #8
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	f7ff fc07 	bl	800ea10 <uxr_serialize_DATAWRITER_Representation>
 800f202:	4004      	ands	r4, r0
 800f204:	4620      	mov	r0, r4
 800f206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f208:	7a29      	ldrb	r1, [r5, #8]
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7fb fede 	bl	800afcc <ucdr_serialize_uint8_t>
 800f210:	2800      	cmp	r0, #0
 800f212:	d0ee      	beq.n	800f1f2 <uxr_serialize_CREATE_Payload+0x42>
 800f214:	7a2b      	ldrb	r3, [r5, #8]
 800f216:	2b01      	cmp	r3, #1
 800f218:	d001      	beq.n	800f21e <uxr_serialize_CREATE_Payload+0x6e>
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	d1ea      	bne.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f21e:	68e9      	ldr	r1, [r5, #12]
 800f220:	4630      	mov	r0, r6
 800f222:	f001 ff3f 	bl	80110a4 <ucdr_serialize_string>
 800f226:	4004      	ands	r4, r0
 800f228:	e7e4      	b.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f22a:	7a29      	ldrb	r1, [r5, #8]
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7fb fecd 	bl	800afcc <ucdr_serialize_uint8_t>
 800f232:	4607      	mov	r7, r0
 800f234:	b158      	cbz	r0, 800f24e <uxr_serialize_CREATE_Payload+0x9e>
 800f236:	7a2b      	ldrb	r3, [r5, #8]
 800f238:	2b02      	cmp	r3, #2
 800f23a:	d039      	beq.n	800f2b0 <uxr_serialize_CREATE_Payload+0x100>
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d106      	bne.n	800f24e <uxr_serialize_CREATE_Payload+0x9e>
 800f240:	68ea      	ldr	r2, [r5, #12]
 800f242:	f105 0110 	add.w	r1, r5, #16
 800f246:	4630      	mov	r0, r6
 800f248:	f7f9 fe12 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800f24c:	4607      	mov	r7, r0
 800f24e:	2202      	movs	r2, #2
 800f250:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800f254:	4630      	mov	r0, r6
 800f256:	f7fb fd19 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f25a:	4038      	ands	r0, r7
 800f25c:	4004      	ands	r4, r0
 800f25e:	e7c9      	b.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f260:	7a29      	ldrb	r1, [r5, #8]
 800f262:	4630      	mov	r0, r6
 800f264:	f7fb feb2 	bl	800afcc <ucdr_serialize_uint8_t>
 800f268:	4607      	mov	r7, r0
 800f26a:	b158      	cbz	r0, 800f284 <uxr_serialize_CREATE_Payload+0xd4>
 800f26c:	7a2b      	ldrb	r3, [r5, #8]
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d003      	beq.n	800f27a <uxr_serialize_CREATE_Payload+0xca>
 800f272:	2b03      	cmp	r3, #3
 800f274:	d022      	beq.n	800f2bc <uxr_serialize_CREATE_Payload+0x10c>
 800f276:	2b01      	cmp	r3, #1
 800f278:	d104      	bne.n	800f284 <uxr_serialize_CREATE_Payload+0xd4>
 800f27a:	68e9      	ldr	r1, [r5, #12]
 800f27c:	4630      	mov	r0, r6
 800f27e:	f001 ff11 	bl	80110a4 <ucdr_serialize_string>
 800f282:	4607      	mov	r7, r0
 800f284:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800f288:	4630      	mov	r0, r6
 800f28a:	f7fc fbc7 	bl	800ba1c <ucdr_serialize_int16_t>
 800f28e:	4038      	ands	r0, r7
 800f290:	4004      	ands	r4, r0
 800f292:	e7af      	b.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f294:	f105 0108 	add.w	r1, r5, #8
 800f298:	4630      	mov	r0, r6
 800f29a:	f7ff fb6f 	bl	800e97c <uxr_serialize_AGENT_Representation>
 800f29e:	4004      	ands	r4, r0
 800f2a0:	e7a8      	b.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f2a2:	f105 0108 	add.w	r1, r5, #8
 800f2a6:	4630      	mov	r0, r6
 800f2a8:	f7ff faaa 	bl	800e800 <uxr_serialize_CLIENT_Representation>
 800f2ac:	4004      	ands	r4, r0
 800f2ae:	e7a1      	b.n	800f1f4 <uxr_serialize_CREATE_Payload+0x44>
 800f2b0:	68e9      	ldr	r1, [r5, #12]
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f001 fef6 	bl	80110a4 <ucdr_serialize_string>
 800f2b8:	4607      	mov	r7, r0
 800f2ba:	e7c8      	b.n	800f24e <uxr_serialize_CREATE_Payload+0x9e>
 800f2bc:	68ea      	ldr	r2, [r5, #12]
 800f2be:	f105 0110 	add.w	r1, r5, #16
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7f9 fdd4 	bl	8008e70 <ucdr_serialize_sequence_uint8_t>
 800f2c8:	4607      	mov	r7, r0
 800f2ca:	e7db      	b.n	800f284 <uxr_serialize_CREATE_Payload+0xd4>

0800f2cc <uxr_deserialize_GET_INFO_Payload>:
 800f2cc:	b570      	push	{r4, r5, r6, lr}
 800f2ce:	2202      	movs	r2, #2
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	460e      	mov	r6, r1
 800f2d4:	f7fb fd3e 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f2d8:	2202      	movs	r2, #2
 800f2da:	18b1      	adds	r1, r6, r2
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f7fb fd38 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f2e4:	1d31      	adds	r1, r6, #4
 800f2e6:	4004      	ands	r4, r0
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f7fc f9b5 	bl	800b658 <ucdr_deserialize_uint32_t>
 800f2ee:	b2e4      	uxtb	r4, r4
 800f2f0:	4020      	ands	r0, r4
 800f2f2:	bd70      	pop	{r4, r5, r6, pc}

0800f2f4 <uxr_serialize_DELETE_Payload>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	2202      	movs	r2, #2
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	460e      	mov	r6, r1
 800f2fc:	f7fb fcc6 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f300:	2202      	movs	r2, #2
 800f302:	4604      	mov	r4, r0
 800f304:	18b1      	adds	r1, r6, r2
 800f306:	4628      	mov	r0, r5
 800f308:	f7fb fcc0 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f30c:	4020      	ands	r0, r4
 800f30e:	b2c0      	uxtb	r0, r0
 800f310:	bd70      	pop	{r4, r5, r6, pc}
 800f312:	bf00      	nop

0800f314 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f318:	4605      	mov	r5, r0
 800f31a:	460e      	mov	r6, r1
 800f31c:	f7fb fe6c 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f320:	1c71      	adds	r1, r6, #1
 800f322:	4604      	mov	r4, r0
 800f324:	4628      	mov	r0, r5
 800f326:	f7fb fe67 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f32a:	2204      	movs	r2, #4
 800f32c:	18b1      	adds	r1, r6, r2
 800f32e:	4681      	mov	r9, r0
 800f330:	4628      	mov	r0, r5
 800f332:	f7fb fd0f 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f336:	f106 0108 	add.w	r1, r6, #8
 800f33a:	4680      	mov	r8, r0
 800f33c:	2202      	movs	r2, #2
 800f33e:	4628      	mov	r0, r5
 800f340:	f7fb fd08 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f344:	2202      	movs	r2, #2
 800f346:	f106 010a 	add.w	r1, r6, #10
 800f34a:	4607      	mov	r7, r0
 800f34c:	4628      	mov	r0, r5
 800f34e:	f7fb fd01 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f352:	ea04 0409 	and.w	r4, r4, r9
 800f356:	4603      	mov	r3, r0
 800f358:	f106 010c 	add.w	r1, r6, #12
 800f35c:	4628      	mov	r0, r5
 800f35e:	b2e4      	uxtb	r4, r4
 800f360:	461d      	mov	r5, r3
 800f362:	ea04 0408 	and.w	r4, r4, r8
 800f366:	f7fb fe19 	bl	800af9c <ucdr_deserialize_bool>
 800f36a:	4027      	ands	r7, r4
 800f36c:	403d      	ands	r5, r7
 800f36e:	4028      	ands	r0, r5
 800f370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f374 <uxr_deserialize_STATUS_Payload>:
 800f374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f378:	2202      	movs	r2, #2
 800f37a:	4606      	mov	r6, r0
 800f37c:	460f      	mov	r7, r1
 800f37e:	f7fb fce9 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f382:	2202      	movs	r2, #2
 800f384:	18b9      	adds	r1, r7, r2
 800f386:	4605      	mov	r5, r0
 800f388:	4630      	mov	r0, r6
 800f38a:	f7fb fce3 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f38e:	1d39      	adds	r1, r7, #4
 800f390:	4680      	mov	r8, r0
 800f392:	4630      	mov	r0, r6
 800f394:	f7fb fe30 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f398:	1d79      	adds	r1, r7, #5
 800f39a:	4604      	mov	r4, r0
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7fb fe2b 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f3a2:	ea05 0508 	and.w	r5, r5, r8
 800f3a6:	402c      	ands	r4, r5
 800f3a8:	4020      	ands	r0, r4
 800f3aa:	b2c0      	uxtb	r0, r0
 800f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3b0 <uxr_serialize_INFO_Payload>:
 800f3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b4:	2202      	movs	r2, #2
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	4605      	mov	r5, r0
 800f3ba:	f7fb fc67 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f3be:	2202      	movs	r2, #2
 800f3c0:	18a1      	adds	r1, r4, r2
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f7fb fc61 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f3ca:	7921      	ldrb	r1, [r4, #4]
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7fb fdfc 	bl	800afcc <ucdr_serialize_uint8_t>
 800f3d4:	7961      	ldrb	r1, [r4, #5]
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f7fb fdf7 	bl	800afcc <ucdr_serialize_uint8_t>
 800f3de:	ea08 0807 	and.w	r8, r8, r7
 800f3e2:	ea06 0608 	and.w	r6, r6, r8
 800f3e6:	ea00 0706 	and.w	r7, r0, r6
 800f3ea:	7a21      	ldrb	r1, [r4, #8]
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f7fb fdbf 	bl	800af70 <ucdr_serialize_bool>
 800f3f2:	7a23      	ldrb	r3, [r4, #8]
 800f3f4:	b2ff      	uxtb	r7, r7
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	b96b      	cbnz	r3, 800f416 <uxr_serialize_INFO_Payload+0x66>
 800f3fa:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f3fe:	4628      	mov	r0, r5
 800f400:	f7fb fdb6 	bl	800af70 <ucdr_serialize_bool>
 800f404:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f408:	4030      	ands	r0, r6
 800f40a:	b2c6      	uxtb	r6, r0
 800f40c:	b983      	cbnz	r3, 800f430 <uxr_serialize_INFO_Payload+0x80>
 800f40e:	ea06 0007 	and.w	r0, r6, r7
 800f412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f416:	7b21      	ldrb	r1, [r4, #12]
 800f418:	4628      	mov	r0, r5
 800f41a:	f7fb fdd7 	bl	800afcc <ucdr_serialize_uint8_t>
 800f41e:	b188      	cbz	r0, 800f444 <uxr_serialize_INFO_Payload+0x94>
 800f420:	f104 010c 	add.w	r1, r4, #12
 800f424:	4628      	mov	r0, r5
 800f426:	f7ff fb1b 	bl	800ea60 <uxr_serialize_ObjectVariant.part.0>
 800f42a:	4030      	ands	r0, r6
 800f42c:	b2c6      	uxtb	r6, r0
 800f42e:	e7e4      	b.n	800f3fa <uxr_serialize_INFO_Payload+0x4a>
 800f430:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f434:	4628      	mov	r0, r5
 800f436:	f7ff fdcb 	bl	800efd0 <uxr_serialize_ActivityInfoVariant>
 800f43a:	4006      	ands	r6, r0
 800f43c:	ea06 0007 	and.w	r0, r6, r7
 800f440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f444:	4606      	mov	r6, r0
 800f446:	e7d8      	b.n	800f3fa <uxr_serialize_INFO_Payload+0x4a>

0800f448 <uxr_serialize_READ_DATA_Payload>:
 800f448:	b570      	push	{r4, r5, r6, lr}
 800f44a:	2202      	movs	r2, #2
 800f44c:	4605      	mov	r5, r0
 800f44e:	460e      	mov	r6, r1
 800f450:	f7fb fc1c 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f454:	2202      	movs	r2, #2
 800f456:	18b1      	adds	r1, r6, r2
 800f458:	4604      	mov	r4, r0
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7fb fc16 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f460:	1d31      	adds	r1, r6, #4
 800f462:	4004      	ands	r4, r0
 800f464:	4628      	mov	r0, r5
 800f466:	f7ff fe5f 	bl	800f128 <uxr_serialize_ReadSpecification>
 800f46a:	b2e4      	uxtb	r4, r4
 800f46c:	4020      	ands	r0, r4
 800f46e:	bd70      	pop	{r4, r5, r6, pc}

0800f470 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	2202      	movs	r2, #2
 800f474:	4605      	mov	r5, r0
 800f476:	460e      	mov	r6, r1
 800f478:	f7fb fc08 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f47c:	2202      	movs	r2, #2
 800f47e:	4604      	mov	r4, r0
 800f480:	18b1      	adds	r1, r6, r2
 800f482:	4628      	mov	r0, r5
 800f484:	f7fb fc02 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f488:	4020      	ands	r0, r4
 800f48a:	b2c0      	uxtb	r0, r0
 800f48c:	bd70      	pop	{r4, r5, r6, pc}
 800f48e:	bf00      	nop

0800f490 <uxr_serialize_ACKNACK_Payload>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	460c      	mov	r4, r1
 800f494:	460e      	mov	r6, r1
 800f496:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f49a:	4605      	mov	r5, r0
 800f49c:	f7fb fdc2 	bl	800b024 <ucdr_serialize_uint16_t>
 800f4a0:	2202      	movs	r2, #2
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f7fb fbf0 	bl	800ac8c <ucdr_serialize_array_uint8_t>
 800f4ac:	7931      	ldrb	r1, [r6, #4]
 800f4ae:	4004      	ands	r4, r0
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f7fb fd8b 	bl	800afcc <ucdr_serialize_uint8_t>
 800f4b6:	b2e4      	uxtb	r4, r4
 800f4b8:	4020      	ands	r0, r4
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}

0800f4bc <uxr_deserialize_ACKNACK_Payload>:
 800f4bc:	b570      	push	{r4, r5, r6, lr}
 800f4be:	4605      	mov	r5, r0
 800f4c0:	460e      	mov	r6, r1
 800f4c2:	f7fb feb3 	bl	800b22c <ucdr_deserialize_uint16_t>
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	18b1      	adds	r1, r6, r2
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f7fb fc41 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f4d2:	1d31      	adds	r1, r6, #4
 800f4d4:	4004      	ands	r4, r0
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f7fb fd8e 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f4dc:	b2e4      	uxtb	r4, r4
 800f4de:	4020      	ands	r0, r4
 800f4e0:	bd70      	pop	{r4, r5, r6, pc}
 800f4e2:	bf00      	nop

0800f4e4 <uxr_serialize_HEARTBEAT_Payload>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	460d      	mov	r5, r1
 800f4e8:	8809      	ldrh	r1, [r1, #0]
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	f7fb fd9a 	bl	800b024 <ucdr_serialize_uint16_t>
 800f4f0:	8869      	ldrh	r1, [r5, #2]
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7fb fd95 	bl	800b024 <ucdr_serialize_uint16_t>
 800f4fa:	7929      	ldrb	r1, [r5, #4]
 800f4fc:	4004      	ands	r4, r0
 800f4fe:	4630      	mov	r0, r6
 800f500:	f7fb fd64 	bl	800afcc <ucdr_serialize_uint8_t>
 800f504:	b2e4      	uxtb	r4, r4
 800f506:	4020      	ands	r0, r4
 800f508:	bd70      	pop	{r4, r5, r6, pc}
 800f50a:	bf00      	nop

0800f50c <uxr_deserialize_HEARTBEAT_Payload>:
 800f50c:	b570      	push	{r4, r5, r6, lr}
 800f50e:	4605      	mov	r5, r0
 800f510:	460e      	mov	r6, r1
 800f512:	f7fb fe8b 	bl	800b22c <ucdr_deserialize_uint16_t>
 800f516:	1cb1      	adds	r1, r6, #2
 800f518:	4604      	mov	r4, r0
 800f51a:	4628      	mov	r0, r5
 800f51c:	f7fb fe86 	bl	800b22c <ucdr_deserialize_uint16_t>
 800f520:	1d31      	adds	r1, r6, #4
 800f522:	4004      	ands	r4, r0
 800f524:	4628      	mov	r0, r5
 800f526:	f7fb fd67 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f52a:	b2e4      	uxtb	r4, r4
 800f52c:	4020      	ands	r0, r4
 800f52e:	bd70      	pop	{r4, r5, r6, pc}

0800f530 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f534:	4605      	mov	r5, r0
 800f536:	460e      	mov	r6, r1
 800f538:	f7fc fc10 	bl	800bd5c <ucdr_deserialize_int32_t>
 800f53c:	1d31      	adds	r1, r6, #4
 800f53e:	4607      	mov	r7, r0
 800f540:	4628      	mov	r0, r5
 800f542:	f7fc f889 	bl	800b658 <ucdr_deserialize_uint32_t>
 800f546:	f106 0108 	add.w	r1, r6, #8
 800f54a:	4680      	mov	r8, r0
 800f54c:	4628      	mov	r0, r5
 800f54e:	f7fc fc05 	bl	800bd5c <ucdr_deserialize_int32_t>
 800f552:	f106 010c 	add.w	r1, r6, #12
 800f556:	4604      	mov	r4, r0
 800f558:	4628      	mov	r0, r5
 800f55a:	f7fc f87d 	bl	800b658 <ucdr_deserialize_uint32_t>
 800f55e:	ea07 0708 	and.w	r7, r7, r8
 800f562:	403c      	ands	r4, r7
 800f564:	f106 0110 	add.w	r1, r6, #16
 800f568:	4004      	ands	r4, r0
 800f56a:	4628      	mov	r0, r5
 800f56c:	f7fc fbf6 	bl	800bd5c <ucdr_deserialize_int32_t>
 800f570:	f106 0114 	add.w	r1, r6, #20
 800f574:	4607      	mov	r7, r0
 800f576:	4628      	mov	r0, r5
 800f578:	f7fc f86e 	bl	800b658 <ucdr_deserialize_uint32_t>
 800f57c:	b2e4      	uxtb	r4, r4
 800f57e:	403c      	ands	r4, r7
 800f580:	4020      	ands	r0, r4
 800f582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f586:	bf00      	nop

0800f588 <uxr_deserialize_SampleIdentity>:
 800f588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f58c:	220c      	movs	r2, #12
 800f58e:	4604      	mov	r4, r0
 800f590:	460d      	mov	r5, r1
 800f592:	f7fb fbdf 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f596:	2203      	movs	r2, #3
 800f598:	f105 010c 	add.w	r1, r5, #12
 800f59c:	4680      	mov	r8, r0
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f7fb fbd8 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 800f5a4:	f105 010f 	add.w	r1, r5, #15
 800f5a8:	4681      	mov	r9, r0
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f7fb fd24 	bl	800aff8 <ucdr_deserialize_uint8_t>
 800f5b0:	f105 0110 	add.w	r1, r5, #16
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f7fc fbd0 	bl	800bd5c <ucdr_deserialize_int32_t>
 800f5bc:	f105 0114 	add.w	r1, r5, #20
 800f5c0:	4606      	mov	r6, r0
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f7fc f848 	bl	800b658 <ucdr_deserialize_uint32_t>
 800f5c8:	ea08 0809 	and.w	r8, r8, r9
 800f5cc:	ea07 0708 	and.w	r7, r7, r8
 800f5d0:	403e      	ands	r6, r7
 800f5d2:	4030      	ands	r0, r6
 800f5d4:	b2c0      	uxtb	r0, r0
 800f5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5da:	bf00      	nop

0800f5dc <rcl_convert_rmw_ret_to_rcl_ret>:
 800f5dc:	280b      	cmp	r0, #11
 800f5de:	dc0d      	bgt.n	800f5fc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	db09      	blt.n	800f5f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f5e4:	280b      	cmp	r0, #11
 800f5e6:	d807      	bhi.n	800f5f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f5e8:	e8df f000 	tbb	[pc, r0]
 800f5ec:	07060607 	.word	0x07060607
 800f5f0:	06060606 	.word	0x06060606
 800f5f4:	07070606 	.word	0x07070606
 800f5f8:	2001      	movs	r0, #1
 800f5fa:	4770      	bx	lr
 800f5fc:	28cb      	cmp	r0, #203	@ 0xcb
 800f5fe:	bf14      	ite	ne
 800f600:	2001      	movne	r0, #1
 800f602:	20cb      	moveq	r0, #203	@ 0xcb
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop

0800f608 <rcl_get_zero_initialized_context>:
 800f608:	4a03      	ldr	r2, [pc, #12]	@ (800f618 <rcl_get_zero_initialized_context+0x10>)
 800f60a:	4603      	mov	r3, r0
 800f60c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f610:	e883 0003 	stmia.w	r3, {r0, r1}
 800f614:	4618      	mov	r0, r3
 800f616:	4770      	bx	lr
 800f618:	08014678 	.word	0x08014678

0800f61c <rcl_context_is_valid>:
 800f61c:	b118      	cbz	r0, 800f626 <rcl_context_is_valid+0xa>
 800f61e:	6840      	ldr	r0, [r0, #4]
 800f620:	3800      	subs	r0, #0
 800f622:	bf18      	it	ne
 800f624:	2001      	movne	r0, #1
 800f626:	4770      	bx	lr

0800f628 <__cleanup_context>:
 800f628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f62c:	4606      	mov	r6, r0
 800f62e:	6800      	ldr	r0, [r0, #0]
 800f630:	2300      	movs	r3, #0
 800f632:	6073      	str	r3, [r6, #4]
 800f634:	2800      	cmp	r0, #0
 800f636:	d042      	beq.n	800f6be <__cleanup_context+0x96>
 800f638:	6943      	ldr	r3, [r0, #20]
 800f63a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f63e:	6907      	ldr	r7, [r0, #16]
 800f640:	b39b      	cbz	r3, 800f6aa <__cleanup_context+0x82>
 800f642:	3014      	adds	r0, #20
 800f644:	f7f9 fcce 	bl	8008fe4 <rcl_init_options_fini>
 800f648:	4680      	mov	r8, r0
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d144      	bne.n	800f6d8 <__cleanup_context+0xb0>
 800f64e:	6830      	ldr	r0, [r6, #0]
 800f650:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f652:	b123      	cbz	r3, 800f65e <__cleanup_context+0x36>
 800f654:	3028      	adds	r0, #40	@ 0x28
 800f656:	f7fa f9c3 	bl	80099e0 <rmw_context_fini>
 800f65a:	bbb8      	cbnz	r0, 800f6cc <__cleanup_context+0xa4>
 800f65c:	6830      	ldr	r0, [r6, #0]
 800f65e:	6a03      	ldr	r3, [r0, #32]
 800f660:	b1db      	cbz	r3, 800f69a <__cleanup_context+0x72>
 800f662:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f666:	2a01      	cmp	r2, #1
 800f668:	f17c 0100 	sbcs.w	r1, ip, #0
 800f66c:	db11      	blt.n	800f692 <__cleanup_context+0x6a>
 800f66e:	2400      	movs	r4, #0
 800f670:	4625      	mov	r5, r4
 800f672:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f676:	4639      	mov	r1, r7
 800f678:	b1c8      	cbz	r0, 800f6ae <__cleanup_context+0x86>
 800f67a:	47c8      	blx	r9
 800f67c:	6833      	ldr	r3, [r6, #0]
 800f67e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f682:	3401      	adds	r4, #1
 800f684:	f145 0500 	adc.w	r5, r5, #0
 800f688:	4294      	cmp	r4, r2
 800f68a:	eb75 010c 	sbcs.w	r1, r5, ip
 800f68e:	6a1b      	ldr	r3, [r3, #32]
 800f690:	dbef      	blt.n	800f672 <__cleanup_context+0x4a>
 800f692:	4618      	mov	r0, r3
 800f694:	4639      	mov	r1, r7
 800f696:	47c8      	blx	r9
 800f698:	6830      	ldr	r0, [r6, #0]
 800f69a:	4639      	mov	r1, r7
 800f69c:	47c8      	blx	r9
 800f69e:	2300      	movs	r3, #0
 800f6a0:	e9c6 3300 	strd	r3, r3, [r6]
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6aa:	4698      	mov	r8, r3
 800f6ac:	e7d0      	b.n	800f650 <__cleanup_context+0x28>
 800f6ae:	3401      	adds	r4, #1
 800f6b0:	f145 0500 	adc.w	r5, r5, #0
 800f6b4:	4294      	cmp	r4, r2
 800f6b6:	eb75 010c 	sbcs.w	r1, r5, ip
 800f6ba:	dbda      	blt.n	800f672 <__cleanup_context+0x4a>
 800f6bc:	e7e9      	b.n	800f692 <__cleanup_context+0x6a>
 800f6be:	4680      	mov	r8, r0
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	e9c6 3300 	strd	r3, r3, [r6]
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6cc:	f1b8 0f00 	cmp.w	r8, #0
 800f6d0:	d005      	beq.n	800f6de <__cleanup_context+0xb6>
 800f6d2:	f7f9 ff1d 	bl	8009510 <rcutils_reset_error>
 800f6d6:	e7c1      	b.n	800f65c <__cleanup_context+0x34>
 800f6d8:	f7f9 ff1a 	bl	8009510 <rcutils_reset_error>
 800f6dc:	e7b7      	b.n	800f64e <__cleanup_context+0x26>
 800f6de:	f7ff ff7d 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 800f6e2:	4680      	mov	r8, r0
 800f6e4:	e7f5      	b.n	800f6d2 <__cleanup_context+0xaa>
 800f6e6:	bf00      	nop

0800f6e8 <rcl_init>:
 800f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	1e04      	subs	r4, r0, #0
 800f6ee:	b0a7      	sub	sp, #156	@ 0x9c
 800f6f0:	460d      	mov	r5, r1
 800f6f2:	4617      	mov	r7, r2
 800f6f4:	461e      	mov	r6, r3
 800f6f6:	dd13      	ble.n	800f720 <rcl_init+0x38>
 800f6f8:	b161      	cbz	r1, 800f714 <rcl_init+0x2c>
 800f6fa:	f1a1 0e04 	sub.w	lr, r1, #4
 800f6fe:	f04f 0c00 	mov.w	ip, #0
 800f702:	e001      	b.n	800f708 <rcl_init+0x20>
 800f704:	4564      	cmp	r4, ip
 800f706:	d00d      	beq.n	800f724 <rcl_init+0x3c>
 800f708:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800f70c:	f10c 0c01 	add.w	ip, ip, #1
 800f710:	2800      	cmp	r0, #0
 800f712:	d1f7      	bne.n	800f704 <rcl_init+0x1c>
 800f714:	f04f 080b 	mov.w	r8, #11
 800f718:	4640      	mov	r0, r8
 800f71a:	b027      	add	sp, #156	@ 0x9c
 800f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f720:	2900      	cmp	r1, #0
 800f722:	d1f7      	bne.n	800f714 <rcl_init+0x2c>
 800f724:	2f00      	cmp	r7, #0
 800f726:	d0f5      	beq.n	800f714 <rcl_init+0x2c>
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0f2      	beq.n	800f714 <rcl_init+0x2c>
 800f72e:	469c      	mov	ip, r3
 800f730:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f734:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 800f738:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f73c:	f8dc 3000 	ldr.w	r3, [ip]
 800f740:	f8ce 3000 	str.w	r3, [lr]
 800f744:	a821      	add	r0, sp, #132	@ 0x84
 800f746:	f7f9 febd 	bl	80094c4 <rcutils_allocator_is_valid>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	d0e2      	beq.n	800f714 <rcl_init+0x2c>
 800f74e:	2e00      	cmp	r6, #0
 800f750:	d0e0      	beq.n	800f714 <rcl_init+0x2c>
 800f752:	6833      	ldr	r3, [r6, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d176      	bne.n	800f846 <rcl_init+0x15e>
 800f758:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800f75c:	2198      	movs	r1, #152	@ 0x98
 800f75e:	2001      	movs	r0, #1
 800f760:	4798      	blx	r3
 800f762:	4680      	mov	r8, r0
 800f764:	6030      	str	r0, [r6, #0]
 800f766:	2800      	cmp	r0, #0
 800f768:	f000 80cc 	beq.w	800f904 <rcl_init+0x21c>
 800f76c:	a802      	add	r0, sp, #8
 800f76e:	f001 f8ff 	bl	8010970 <rmw_get_zero_initialized_context>
 800f772:	a902      	add	r1, sp, #8
 800f774:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800f778:	2270      	movs	r2, #112	@ 0x70
 800f77a:	f003 fd6a 	bl	8013252 <memcpy>
 800f77e:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 800f782:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f786:	f8d6 8000 	ldr.w	r8, [r6]
 800f78a:	46c4      	mov	ip, r8
 800f78c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f790:	f8de 3000 	ldr.w	r3, [lr]
 800f794:	f8cc 3000 	str.w	r3, [ip]
 800f798:	f108 0114 	add.w	r1, r8, #20
 800f79c:	4638      	mov	r0, r7
 800f79e:	f7f9 fc4b 	bl	8009038 <rcl_init_options_copy>
 800f7a2:	4680      	mov	r8, r0
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d147      	bne.n	800f838 <rcl_init+0x150>
 800f7a8:	f8d6 9000 	ldr.w	r9, [r6]
 800f7ac:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800f7b0:	f8c9 0020 	str.w	r0, [r9, #32]
 800f7b4:	f8c9 4018 	str.w	r4, [r9, #24]
 800f7b8:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f7bc:	2c00      	cmp	r4, #0
 800f7be:	d04a      	beq.n	800f856 <rcl_init+0x16e>
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	d048      	beq.n	800f856 <rcl_init+0x16e>
 800f7c4:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800f7c8:	2104      	movs	r1, #4
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	4798      	blx	r3
 800f7ce:	f8c9 0020 	str.w	r0, [r9, #32]
 800f7d2:	f8d6 9000 	ldr.w	r9, [r6]
 800f7d6:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800f7da:	f1bb 0f00 	cmp.w	fp, #0
 800f7de:	d029      	beq.n	800f834 <rcl_init+0x14c>
 800f7e0:	2c01      	cmp	r4, #1
 800f7e2:	f17a 0300 	sbcs.w	r3, sl, #0
 800f7e6:	db36      	blt.n	800f856 <rcl_init+0x16e>
 800f7e8:	f04f 0800 	mov.w	r8, #0
 800f7ec:	3d04      	subs	r5, #4
 800f7ee:	46c1      	mov	r9, r8
 800f7f0:	e00d      	b.n	800f80e <rcl_init+0x126>
 800f7f2:	6829      	ldr	r1, [r5, #0]
 800f7f4:	f003 fd2d 	bl	8013252 <memcpy>
 800f7f8:	f118 0801 	adds.w	r8, r8, #1
 800f7fc:	f149 0900 	adc.w	r9, r9, #0
 800f800:	45ca      	cmp	sl, r9
 800f802:	bf08      	it	eq
 800f804:	4544      	cmpeq	r4, r8
 800f806:	d024      	beq.n	800f852 <rcl_init+0x16a>
 800f808:	6833      	ldr	r3, [r6, #0]
 800f80a:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800f80e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f812:	f7f0 fd65 	bl	80002e0 <strlen>
 800f816:	1c42      	adds	r2, r0, #1
 800f818:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f81a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800f81c:	9201      	str	r2, [sp, #4]
 800f81e:	4610      	mov	r0, r2
 800f820:	4798      	blx	r3
 800f822:	6833      	ldr	r3, [r6, #0]
 800f824:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	9a01      	ldr	r2, [sp, #4]
 800f82c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f830:	2800      	cmp	r0, #0
 800f832:	d1de      	bne.n	800f7f2 <rcl_init+0x10a>
 800f834:	f04f 080a 	mov.w	r8, #10
 800f838:	4630      	mov	r0, r6
 800f83a:	f7ff fef5 	bl	800f628 <__cleanup_context>
 800f83e:	4640      	mov	r0, r8
 800f840:	b027      	add	sp, #156	@ 0x9c
 800f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f846:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800f84a:	4640      	mov	r0, r8
 800f84c:	b027      	add	sp, #156	@ 0x9c
 800f84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f852:	f8d6 9000 	ldr.w	r9, [r6]
 800f856:	4a40      	ldr	r2, [pc, #256]	@ (800f958 <rcl_init+0x270>)
 800f858:	6813      	ldr	r3, [r2, #0]
 800f85a:	3301      	adds	r3, #1
 800f85c:	d04d      	beq.n	800f8fa <rcl_init+0x212>
 800f85e:	461d      	mov	r5, r3
 800f860:	2000      	movs	r0, #0
 800f862:	4619      	mov	r1, r3
 800f864:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800f868:	6073      	str	r3, [r6, #4]
 800f86a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f86c:	6011      	str	r1, [r2, #0]
 800f86e:	3301      	adds	r3, #1
 800f870:	e9c4 5006 	strd	r5, r0, [r4, #24]
 800f874:	d05e      	beq.n	800f934 <rcl_init+0x24c>
 800f876:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d045      	beq.n	800f90a <rcl_init+0x222>
 800f87e:	683a      	ldr	r2, [r7, #0]
 800f880:	2b01      	cmp	r3, #1
 800f882:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800f886:	d04c      	beq.n	800f922 <rcl_init+0x23a>
 800f888:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800f88c:	2a00      	cmp	r2, #0
 800f88e:	d05c      	beq.n	800f94a <rcl_init+0x262>
 800f890:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f892:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800f896:	b953      	cbnz	r3, 800f8ae <rcl_init+0x1c6>
 800f898:	2801      	cmp	r0, #1
 800f89a:	d008      	beq.n	800f8ae <rcl_init+0x1c6>
 800f89c:	a921      	add	r1, sp, #132	@ 0x84
 800f89e:	4628      	mov	r0, r5
 800f8a0:	f002 f9ae 	bl	8011c00 <rcl_get_discovery_static_peers>
 800f8a4:	4680      	mov	r8, r0
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d1c6      	bne.n	800f838 <rcl_init+0x150>
 800f8aa:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800f8ae:	f002 f99d 	bl	8011bec <rcl_automatic_discovery_range_to_string>
 800f8b2:	6833      	ldr	r3, [r6, #0]
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	aa20      	add	r2, sp, #128	@ 0x80
 800f8b8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f8ba:	a91f      	add	r1, sp, #124	@ 0x7c
 800f8bc:	f000 fcc6 	bl	801024c <rcl_validate_enclave_name>
 800f8c0:	4680      	mov	r8, r0
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d1b8      	bne.n	800f838 <rcl_init+0x150>
 800f8c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f8c8:	bb8b      	cbnz	r3, 800f92e <rcl_init+0x246>
 800f8ca:	6831      	ldr	r1, [r6, #0]
 800f8cc:	694b      	ldr	r3, [r1, #20]
 800f8ce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f8d0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f8d4:	f000 fba6 	bl	8010024 <rcl_get_security_options_from_environment>
 800f8d8:	4680      	mov	r8, r0
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d1ac      	bne.n	800f838 <rcl_init+0x150>
 800f8de:	6831      	ldr	r1, [r6, #0]
 800f8e0:	6948      	ldr	r0, [r1, #20]
 800f8e2:	3128      	adds	r1, #40	@ 0x28
 800f8e4:	3018      	adds	r0, #24
 800f8e6:	f7f9 ff47 	bl	8009778 <rmw_init>
 800f8ea:	4680      	mov	r8, r0
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	f43f af13 	beq.w	800f718 <rcl_init+0x30>
 800f8f2:	f7ff fe73 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	e79e      	b.n	800f838 <rcl_init+0x150>
 800f8fa:	2101      	movs	r1, #1
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	460d      	mov	r5, r1
 800f900:	460b      	mov	r3, r1
 800f902:	e7af      	b.n	800f864 <rcl_init+0x17c>
 800f904:	f04f 080a 	mov.w	r8, #10
 800f908:	e706      	b.n	800f718 <rcl_init+0x30>
 800f90a:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800f90e:	f000 f825 	bl	800f95c <rcl_get_localhost_only>
 800f912:	4680      	mov	r8, r0
 800f914:	2800      	cmp	r0, #0
 800f916:	d18f      	bne.n	800f838 <rcl_init+0x150>
 800f918:	6832      	ldr	r2, [r6, #0]
 800f91a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f91e:	6954      	ldr	r4, [r2, #20]
 800f920:	e7ad      	b.n	800f87e <rcl_init+0x196>
 800f922:	2002      	movs	r0, #2
 800f924:	2300      	movs	r3, #0
 800f926:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 800f92a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f92c:	e7bf      	b.n	800f8ae <rcl_init+0x1c6>
 800f92e:	f04f 0801 	mov.w	r8, #1
 800f932:	e781      	b.n	800f838 <rcl_init+0x150>
 800f934:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f938:	f002 f9cc 	bl	8011cd4 <rcl_get_default_domain_id>
 800f93c:	4680      	mov	r8, r0
 800f93e:	2800      	cmp	r0, #0
 800f940:	f47f af7a 	bne.w	800f838 <rcl_init+0x150>
 800f944:	6833      	ldr	r3, [r6, #0]
 800f946:	695c      	ldr	r4, [r3, #20]
 800f948:	e795      	b.n	800f876 <rcl_init+0x18e>
 800f94a:	4628      	mov	r0, r5
 800f94c:	f002 f90c 	bl	8011b68 <rcl_get_automatic_discovery_range>
 800f950:	4680      	mov	r8, r0
 800f952:	2800      	cmp	r0, #0
 800f954:	d09c      	beq.n	800f890 <rcl_init+0x1a8>
 800f956:	e76f      	b.n	800f838 <rcl_init+0x150>
 800f958:	20010a90 	.word	0x20010a90

0800f95c <rcl_get_localhost_only>:
 800f95c:	b510      	push	{r4, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	2300      	movs	r3, #0
 800f962:	9301      	str	r3, [sp, #4]
 800f964:	b1b8      	cbz	r0, 800f996 <rcl_get_localhost_only+0x3a>
 800f966:	4604      	mov	r4, r0
 800f968:	a901      	add	r1, sp, #4
 800f96a:	480c      	ldr	r0, [pc, #48]	@ (800f99c <rcl_get_localhost_only+0x40>)
 800f96c:	f000 fcb6 	bl	80102dc <rcutils_get_env>
 800f970:	b110      	cbz	r0, 800f978 <rcl_get_localhost_only+0x1c>
 800f972:	2001      	movs	r0, #1
 800f974:	b002      	add	sp, #8
 800f976:	bd10      	pop	{r4, pc}
 800f978:	9b01      	ldr	r3, [sp, #4]
 800f97a:	b10b      	cbz	r3, 800f980 <rcl_get_localhost_only+0x24>
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	b923      	cbnz	r3, 800f98a <rcl_get_localhost_only+0x2e>
 800f980:	2300      	movs	r3, #0
 800f982:	7023      	strb	r3, [r4, #0]
 800f984:	2000      	movs	r0, #0
 800f986:	b002      	add	sp, #8
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	2b31      	cmp	r3, #49	@ 0x31
 800f98c:	bf14      	ite	ne
 800f98e:	2302      	movne	r3, #2
 800f990:	2301      	moveq	r3, #1
 800f992:	7023      	strb	r3, [r4, #0]
 800f994:	e7f6      	b.n	800f984 <rcl_get_localhost_only+0x28>
 800f996:	200b      	movs	r0, #11
 800f998:	b002      	add	sp, #8
 800f99a:	bd10      	pop	{r4, pc}
 800f99c:	08014680 	.word	0x08014680

0800f9a0 <rcl_get_zero_initialized_node>:
 800f9a0:	4a03      	ldr	r2, [pc, #12]	@ (800f9b0 <rcl_get_zero_initialized_node+0x10>)
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9a8:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	4770      	bx	lr
 800f9b0:	080146b8 	.word	0x080146b8

0800f9b4 <rcl_node_init>:
 800f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	b0ab      	sub	sp, #172	@ 0xac
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800f9be:	a825      	add	r0, sp, #148	@ 0x94
 800f9c0:	4689      	mov	r9, r1
 800f9c2:	4690      	mov	r8, r2
 800f9c4:	461f      	mov	r7, r3
 800f9c6:	f002 fba3 	bl	8012110 <rcl_guard_condition_get_default_options>
 800f9ca:	2d00      	cmp	r5, #0
 800f9cc:	f000 80d8 	beq.w	800fb80 <rcl_node_init+0x1cc>
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f7f9 fd77 	bl	80094c4 <rcutils_allocator_is_valid>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	f000 80d2 	beq.w	800fb80 <rcl_node_init+0x1cc>
 800f9dc:	f1b9 0f00 	cmp.w	r9, #0
 800f9e0:	f000 80ce 	beq.w	800fb80 <rcl_node_init+0x1cc>
 800f9e4:	f1b8 0f00 	cmp.w	r8, #0
 800f9e8:	f000 80ca 	beq.w	800fb80 <rcl_node_init+0x1cc>
 800f9ec:	2c00      	cmp	r4, #0
 800f9ee:	f000 80c7 	beq.w	800fb80 <rcl_node_init+0x1cc>
 800f9f2:	6866      	ldr	r6, [r4, #4]
 800f9f4:	2e00      	cmp	r6, #0
 800f9f6:	f040 80ca 	bne.w	800fb8e <rcl_node_init+0x1da>
 800f9fa:	2f00      	cmp	r7, #0
 800f9fc:	f000 80c0 	beq.w	800fb80 <rcl_node_init+0x1cc>
 800fa00:	4638      	mov	r0, r7
 800fa02:	f7ff fe0b 	bl	800f61c <rcl_context_is_valid>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f000 80bf 	beq.w	800fb8a <rcl_node_init+0x1d6>
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	a924      	add	r1, sp, #144	@ 0x90
 800fa10:	4648      	mov	r0, r9
 800fa12:	9624      	str	r6, [sp, #144]	@ 0x90
 800fa14:	f001 f89a 	bl	8010b4c <rmw_validate_node_name>
 800fa18:	4606      	mov	r6, r0
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	f040 80b1 	bne.w	800fb82 <rcl_node_init+0x1ce>
 800fa20:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800fa22:	2800      	cmp	r0, #0
 800fa24:	f040 8104 	bne.w	800fc30 <rcl_node_init+0x27c>
 800fa28:	f898 3000 	ldrb.w	r3, [r8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f000 80f0 	beq.w	800fc12 <rcl_node_init+0x25e>
 800fa32:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa34:	f000 80b0 	beq.w	800fb98 <rcl_node_init+0x1e4>
 800fa38:	4b85      	ldr	r3, [pc, #532]	@ (800fc50 <rcl_node_init+0x29c>)
 800fa3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa3e:	9302      	str	r3, [sp, #8]
 800fa40:	692b      	ldr	r3, [r5, #16]
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fa48:	9301      	str	r3, [sp, #4]
 800fa4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa4e:	f000 fc6d 	bl	801032c <rcutils_format_string_limit>
 800fa52:	4680      	mov	r8, r0
 800fa54:	f1b8 0f00 	cmp.w	r8, #0
 800fa58:	f000 80e8 	beq.w	800fc2c <rcl_node_init+0x278>
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	a924      	add	r1, sp, #144	@ 0x90
 800fa60:	4640      	mov	r0, r8
 800fa62:	9224      	str	r2, [sp, #144]	@ 0x90
 800fa64:	f001 f854 	bl	8010b10 <rmw_validate_namespace>
 800fa68:	4606      	mov	r6, r0
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f040 80a4 	bne.w	800fbb8 <rcl_node_init+0x204>
 800fa70:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800fa72:	2800      	cmp	r0, #0
 800fa74:	f040 809d 	bne.w	800fbb2 <rcl_node_init+0x1fe>
 800fa78:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800fa7c:	2178      	movs	r1, #120	@ 0x78
 800fa7e:	2001      	movs	r0, #1
 800fa80:	4798      	blx	r3
 800fa82:	4606      	mov	r6, r0
 800fa84:	6060      	str	r0, [r4, #4]
 800fa86:	2800      	cmp	r0, #0
 800fa88:	f000 80d6 	beq.w	800fc38 <rcl_node_init+0x284>
 800fa8c:	a80a      	add	r0, sp, #40	@ 0x28
 800fa8e:	f000 f92f 	bl	800fcf0 <rcl_node_get_default_options>
 800fa92:	a90a      	add	r1, sp, #40	@ 0x28
 800fa94:	4630      	mov	r0, r6
 800fa96:	2268      	movs	r2, #104	@ 0x68
 800fa98:	f003 fbdb 	bl	8013252 <memcpy>
 800fa9c:	6861      	ldr	r1, [r4, #4]
 800fa9e:	6027      	str	r7, [r4, #0]
 800faa0:	4628      	mov	r0, r5
 800faa2:	f000 f933 	bl	800fd0c <rcl_node_options_copy>
 800faa6:	4606      	mov	r6, r0
 800faa8:	2800      	cmp	r0, #0
 800faaa:	f040 8085 	bne.w	800fbb8 <rcl_node_init+0x204>
 800faae:	4640      	mov	r0, r8
 800fab0:	f7f0 fc16 	bl	80002e0 <strlen>
 800fab4:	eb08 0300 	add.w	r3, r8, r0
 800fab8:	6866      	ldr	r6, [r4, #4]
 800faba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fabe:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800fac2:	2b2f      	cmp	r3, #47	@ 0x2f
 800fac4:	bf0c      	ite	eq
 800fac6:	4b63      	ldreq	r3, [pc, #396]	@ (800fc54 <rcl_node_init+0x2a0>)
 800fac8:	4b63      	ldrne	r3, [pc, #396]	@ (800fc58 <rcl_node_init+0x2a4>)
 800faca:	9302      	str	r3, [sp, #8]
 800facc:	692b      	ldr	r3, [r5, #16]
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fad4:	9301      	str	r3, [sp, #4]
 800fad6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fada:	f000 fc27 	bl	801032c <rcutils_format_string_limit>
 800fade:	6863      	ldr	r3, [r4, #4]
 800fae0:	6770      	str	r0, [r6, #116]	@ 0x74
 800fae2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800fae4:	2a00      	cmp	r2, #0
 800fae6:	f000 80a9 	beq.w	800fc3c <rcl_node_init+0x288>
 800faea:	6822      	ldr	r2, [r4, #0]
 800faec:	9307      	str	r3, [sp, #28]
 800faee:	6810      	ldr	r0, [r2, #0]
 800faf0:	4649      	mov	r1, r9
 800faf2:	3028      	adds	r0, #40	@ 0x28
 800faf4:	4642      	mov	r2, r8
 800faf6:	f7fa f821 	bl	8009b3c <rmw_create_node>
 800fafa:	9b07      	ldr	r3, [sp, #28]
 800fafc:	6698      	str	r0, [r3, #104]	@ 0x68
 800fafe:	6863      	ldr	r3, [r4, #4]
 800fb00:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f000 809d 	beq.w	800fc42 <rcl_node_init+0x28e>
 800fb08:	f7fa f8aa 	bl	8009c60 <rmw_node_get_graph_guard_condition>
 800fb0c:	4681      	mov	r9, r0
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	f000 809c 	beq.w	800fc4c <rcl_node_init+0x298>
 800fb14:	682b      	ldr	r3, [r5, #0]
 800fb16:	6929      	ldr	r1, [r5, #16]
 800fb18:	6866      	ldr	r6, [r4, #4]
 800fb1a:	2008      	movs	r0, #8
 800fb1c:	4798      	blx	r3
 800fb1e:	6863      	ldr	r3, [r4, #4]
 800fb20:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fb22:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800fb26:	f1ba 0f00 	cmp.w	sl, #0
 800fb2a:	f000 808d 	beq.w	800fc48 <rcl_node_init+0x294>
 800fb2e:	f10d 0b20 	add.w	fp, sp, #32
 800fb32:	4658      	mov	r0, fp
 800fb34:	f002 fa60 	bl	8011ff8 <rcl_get_zero_initialized_guard_condition>
 800fb38:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800fb3c:	6863      	ldr	r3, [r4, #4]
 800fb3e:	46ac      	mov	ip, r5
 800fb40:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fb44:	e88a 0003 	stmia.w	sl, {r0, r1}
 800fb48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb4c:	ae25      	add	r6, sp, #148	@ 0x94
 800fb4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fb50:	f8dc 3000 	ldr.w	r3, [ip]
 800fb54:	6033      	str	r3, [r6, #0]
 800fb56:	ab2a      	add	r3, sp, #168	@ 0xa8
 800fb58:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fb5c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb60:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800fb62:	463a      	mov	r2, r7
 800fb64:	4649      	mov	r1, r9
 800fb66:	4670      	mov	r0, lr
 800fb68:	f002 fa50 	bl	801200c <rcl_guard_condition_init_from_rmw>
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	bb18      	cbnz	r0, 800fbb8 <rcl_node_init+0x204>
 800fb70:	686b      	ldr	r3, [r5, #4]
 800fb72:	6929      	ldr	r1, [r5, #16]
 800fb74:	4798      	blx	r3
 800fb76:	686b      	ldr	r3, [r5, #4]
 800fb78:	6929      	ldr	r1, [r5, #16]
 800fb7a:	4640      	mov	r0, r8
 800fb7c:	4798      	blx	r3
 800fb7e:	e000      	b.n	800fb82 <rcl_node_init+0x1ce>
 800fb80:	260b      	movs	r6, #11
 800fb82:	4630      	mov	r0, r6
 800fb84:	b02b      	add	sp, #172	@ 0xac
 800fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8a:	2665      	movs	r6, #101	@ 0x65
 800fb8c:	e7f9      	b.n	800fb82 <rcl_node_init+0x1ce>
 800fb8e:	2664      	movs	r6, #100	@ 0x64
 800fb90:	4630      	mov	r0, r6
 800fb92:	b02b      	add	sp, #172	@ 0xac
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb98:	f105 030c 	add.w	r3, r5, #12
 800fb9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fba0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fba4:	4640      	mov	r0, r8
 800fba6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fbaa:	f000 fcdd 	bl	8010568 <rcutils_strdup>
 800fbae:	4680      	mov	r8, r0
 800fbb0:	e750      	b.n	800fa54 <rcl_node_init+0xa0>
 800fbb2:	f000 ffbf 	bl	8010b34 <rmw_namespace_validation_result_string>
 800fbb6:	26ca      	movs	r6, #202	@ 0xca
 800fbb8:	6863      	ldr	r3, [r4, #4]
 800fbba:	b1f3      	cbz	r3, 800fbfa <rcl_node_init+0x246>
 800fbbc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fbbe:	b138      	cbz	r0, 800fbd0 <rcl_node_init+0x21c>
 800fbc0:	f002 fa84 	bl	80120cc <rcl_guard_condition_fini>
 800fbc4:	6863      	ldr	r3, [r4, #4]
 800fbc6:	6929      	ldr	r1, [r5, #16]
 800fbc8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fbca:	686b      	ldr	r3, [r5, #4]
 800fbcc:	4798      	blx	r3
 800fbce:	6863      	ldr	r3, [r4, #4]
 800fbd0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fbd2:	b110      	cbz	r0, 800fbda <rcl_node_init+0x226>
 800fbd4:	f7f9 ffc8 	bl	8009b68 <rmw_destroy_node>
 800fbd8:	6863      	ldr	r3, [r4, #4]
 800fbda:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800fbdc:	6929      	ldr	r1, [r5, #16]
 800fbde:	686b      	ldr	r3, [r5, #4]
 800fbe0:	4798      	blx	r3
 800fbe2:	6863      	ldr	r3, [r4, #4]
 800fbe4:	6929      	ldr	r1, [r5, #16]
 800fbe6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fbe8:	686b      	ldr	r3, [r5, #4]
 800fbea:	4798      	blx	r3
 800fbec:	6860      	ldr	r0, [r4, #4]
 800fbee:	f000 f8ab 	bl	800fd48 <rcl_node_options_fini>
 800fbf2:	686b      	ldr	r3, [r5, #4]
 800fbf4:	6929      	ldr	r1, [r5, #16]
 800fbf6:	6860      	ldr	r0, [r4, #4]
 800fbf8:	4798      	blx	r3
 800fbfa:	686b      	ldr	r3, [r5, #4]
 800fbfc:	6929      	ldr	r1, [r5, #16]
 800fbfe:	2000      	movs	r0, #0
 800fc00:	4798      	blx	r3
 800fc02:	686b      	ldr	r3, [r5, #4]
 800fc04:	6929      	ldr	r1, [r5, #16]
 800fc06:	4640      	mov	r0, r8
 800fc08:	4798      	blx	r3
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	e9c4 3300 	strd	r3, r3, [r4]
 800fc10:	e7b7      	b.n	800fb82 <rcl_node_init+0x1ce>
 800fc12:	f105 030c 	add.w	r3, r5, #12
 800fc16:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fc1e:	480f      	ldr	r0, [pc, #60]	@ (800fc5c <rcl_node_init+0x2a8>)
 800fc20:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fc24:	f000 fca0 	bl	8010568 <rcutils_strdup>
 800fc28:	4680      	mov	r8, r0
 800fc2a:	e713      	b.n	800fa54 <rcl_node_init+0xa0>
 800fc2c:	260a      	movs	r6, #10
 800fc2e:	e7a8      	b.n	800fb82 <rcl_node_init+0x1ce>
 800fc30:	f000 ffd8 	bl	8010be4 <rmw_node_name_validation_result_string>
 800fc34:	26c9      	movs	r6, #201	@ 0xc9
 800fc36:	e7a4      	b.n	800fb82 <rcl_node_init+0x1ce>
 800fc38:	260a      	movs	r6, #10
 800fc3a:	e7de      	b.n	800fbfa <rcl_node_init+0x246>
 800fc3c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fc3e:	260a      	movs	r6, #10
 800fc40:	e7bd      	b.n	800fbbe <rcl_node_init+0x20a>
 800fc42:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fc44:	2601      	movs	r6, #1
 800fc46:	e7ba      	b.n	800fbbe <rcl_node_init+0x20a>
 800fc48:	260a      	movs	r6, #10
 800fc4a:	e7c1      	b.n	800fbd0 <rcl_node_init+0x21c>
 800fc4c:	2601      	movs	r6, #1
 800fc4e:	e7b3      	b.n	800fbb8 <rcl_node_init+0x204>
 800fc50:	08014698 	.word	0x08014698
 800fc54:	080142f0 	.word	0x080142f0
 800fc58:	080142cc 	.word	0x080142cc
 800fc5c:	080142c8 	.word	0x080142c8

0800fc60 <rcl_node_is_valid>:
 800fc60:	b130      	cbz	r0, 800fc70 <rcl_node_is_valid+0x10>
 800fc62:	6843      	ldr	r3, [r0, #4]
 800fc64:	b123      	cbz	r3, 800fc70 <rcl_node_is_valid+0x10>
 800fc66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fc68:	b113      	cbz	r3, 800fc70 <rcl_node_is_valid+0x10>
 800fc6a:	6800      	ldr	r0, [r0, #0]
 800fc6c:	f7ff bcd6 	b.w	800f61c <rcl_context_is_valid>
 800fc70:	2000      	movs	r0, #0
 800fc72:	4770      	bx	lr

0800fc74 <rcl_node_get_name>:
 800fc74:	b120      	cbz	r0, 800fc80 <rcl_node_get_name+0xc>
 800fc76:	6840      	ldr	r0, [r0, #4]
 800fc78:	b110      	cbz	r0, 800fc80 <rcl_node_get_name+0xc>
 800fc7a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fc7c:	b100      	cbz	r0, 800fc80 <rcl_node_get_name+0xc>
 800fc7e:	6880      	ldr	r0, [r0, #8]
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop

0800fc84 <rcl_node_get_namespace>:
 800fc84:	b120      	cbz	r0, 800fc90 <rcl_node_get_namespace+0xc>
 800fc86:	6840      	ldr	r0, [r0, #4]
 800fc88:	b110      	cbz	r0, 800fc90 <rcl_node_get_namespace+0xc>
 800fc8a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fc8c:	b100      	cbz	r0, 800fc90 <rcl_node_get_namespace+0xc>
 800fc8e:	68c0      	ldr	r0, [r0, #12]
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop

0800fc94 <rcl_node_get_options>:
 800fc94:	b128      	cbz	r0, 800fca2 <rcl_node_get_options+0xe>
 800fc96:	6840      	ldr	r0, [r0, #4]
 800fc98:	b118      	cbz	r0, 800fca2 <rcl_node_get_options+0xe>
 800fc9a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	bf08      	it	eq
 800fca0:	2000      	moveq	r0, #0
 800fca2:	4770      	bx	lr

0800fca4 <rcl_node_get_rmw_handle>:
 800fca4:	b110      	cbz	r0, 800fcac <rcl_node_get_rmw_handle+0x8>
 800fca6:	6840      	ldr	r0, [r0, #4]
 800fca8:	b100      	cbz	r0, 800fcac <rcl_node_get_rmw_handle+0x8>
 800fcaa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop

0800fcb0 <rcl_get_disable_loaned_message>:
 800fcb0:	b510      	push	{r4, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	9301      	str	r3, [sp, #4]
 800fcb8:	b1a0      	cbz	r0, 800fce4 <rcl_get_disable_loaned_message+0x34>
 800fcba:	4604      	mov	r4, r0
 800fcbc:	a901      	add	r1, sp, #4
 800fcbe:	480b      	ldr	r0, [pc, #44]	@ (800fcec <rcl_get_disable_loaned_message+0x3c>)
 800fcc0:	f000 fb0c 	bl	80102dc <rcutils_get_env>
 800fcc4:	b110      	cbz	r0, 800fccc <rcl_get_disable_loaned_message+0x1c>
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	b002      	add	sp, #8
 800fcca:	bd10      	pop	{r4, pc}
 800fccc:	9a01      	ldr	r2, [sp, #4]
 800fcce:	7813      	ldrb	r3, [r2, #0]
 800fcd0:	3b31      	subs	r3, #49	@ 0x31
 800fcd2:	bf08      	it	eq
 800fcd4:	7853      	ldrbeq	r3, [r2, #1]
 800fcd6:	fab3 f383 	clz	r3, r3
 800fcda:	095b      	lsrs	r3, r3, #5
 800fcdc:	2000      	movs	r0, #0
 800fcde:	7023      	strb	r3, [r4, #0]
 800fce0:	b002      	add	sp, #8
 800fce2:	bd10      	pop	{r4, pc}
 800fce4:	200b      	movs	r0, #11
 800fce6:	b002      	add	sp, #8
 800fce8:	bd10      	pop	{r4, pc}
 800fcea:	bf00      	nop
 800fcec:	0801469c 	.word	0x0801469c

0800fcf0 <rcl_node_get_default_options>:
 800fcf0:	b510      	push	{r4, lr}
 800fcf2:	2253      	movs	r2, #83	@ 0x53
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	3015      	adds	r0, #21
 800fcfa:	f003 f979 	bl	8012ff0 <memset>
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f7f9 fbb4 	bl	800946c <rcutils_get_default_allocator>
 800fd04:	2301      	movs	r3, #1
 800fd06:	7523      	strb	r3, [r4, #20]
 800fd08:	4620      	mov	r0, r4
 800fd0a:	bd10      	pop	{r4, pc}

0800fd0c <rcl_node_options_copy>:
 800fd0c:	b1d0      	cbz	r0, 800fd44 <rcl_node_options_copy+0x38>
 800fd0e:	b570      	push	{r4, r5, r6, lr}
 800fd10:	460c      	mov	r4, r1
 800fd12:	b1a9      	cbz	r1, 800fd40 <rcl_node_options_copy+0x34>
 800fd14:	4288      	cmp	r0, r1
 800fd16:	4684      	mov	ip, r0
 800fd18:	d012      	beq.n	800fd40 <rcl_node_options_copy+0x34>
 800fd1a:	4605      	mov	r5, r0
 800fd1c:	8a86      	ldrh	r6, [r0, #20]
 800fd1e:	468e      	mov	lr, r1
 800fd20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fd26:	682b      	ldr	r3, [r5, #0]
 800fd28:	f8ce 3000 	str.w	r3, [lr]
 800fd2c:	f10c 0118 	add.w	r1, ip, #24
 800fd30:	2250      	movs	r2, #80	@ 0x50
 800fd32:	82a6      	strh	r6, [r4, #20]
 800fd34:	f104 0018 	add.w	r0, r4, #24
 800fd38:	f003 fa8b 	bl	8013252 <memcpy>
 800fd3c:	2000      	movs	r0, #0
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	200b      	movs	r0, #11
 800fd42:	bd70      	pop	{r4, r5, r6, pc}
 800fd44:	200b      	movs	r0, #11
 800fd46:	4770      	bx	lr

0800fd48 <rcl_node_options_fini>:
 800fd48:	b1c0      	cbz	r0, 800fd7c <rcl_node_options_fini+0x34>
 800fd4a:	b500      	push	{lr}
 800fd4c:	4684      	mov	ip, r0
 800fd4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd52:	b087      	sub	sp, #28
 800fd54:	f10d 0e04 	add.w	lr, sp, #4
 800fd58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fd5c:	f8dc 3000 	ldr.w	r3, [ip]
 800fd60:	f8ce 3000 	str.w	r3, [lr]
 800fd64:	a801      	add	r0, sp, #4
 800fd66:	f7f9 fbad 	bl	80094c4 <rcutils_allocator_is_valid>
 800fd6a:	b118      	cbz	r0, 800fd74 <rcl_node_options_fini+0x2c>
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	b007      	add	sp, #28
 800fd70:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd74:	200b      	movs	r0, #11
 800fd76:	b007      	add	sp, #28
 800fd78:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd7c:	200b      	movs	r0, #11
 800fd7e:	4770      	bx	lr

0800fd80 <rcl_node_resolve_name>:
 800fd80:	b082      	sub	sp, #8
 800fd82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd86:	b091      	sub	sp, #68	@ 0x44
 800fd88:	ac1a      	add	r4, sp, #104	@ 0x68
 800fd8a:	e884 000c 	stmia.w	r4, {r2, r3}
 800fd8e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d03a      	beq.n	800fe0c <rcl_node_resolve_name+0x8c>
 800fd96:	460c      	mov	r4, r1
 800fd98:	4605      	mov	r5, r0
 800fd9a:	f7ff ff7b 	bl	800fc94 <rcl_node_get_options>
 800fd9e:	b370      	cbz	r0, 800fdfe <rcl_node_resolve_name+0x7e>
 800fda0:	4628      	mov	r0, r5
 800fda2:	f7ff ff67 	bl	800fc74 <rcl_node_get_name>
 800fda6:	4681      	mov	r9, r0
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f7ff ff6b 	bl	800fc84 <rcl_node_get_namespace>
 800fdae:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fdb2:	4607      	mov	r7, r0
 800fdb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdb8:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fdba:	46ac      	mov	ip, r5
 800fdbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdc0:	f8de 3000 	ldr.w	r3, [lr]
 800fdc4:	f8cc 3000 	str.w	r3, [ip]
 800fdc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fdca:	b1fb      	cbz	r3, 800fe0c <rcl_node_resolve_name+0x8c>
 800fdcc:	468a      	mov	sl, r1
 800fdce:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fdd2:	f000 fc29 	bl	8010628 <rcutils_get_zero_initialized_string_map>
 800fdd6:	ab10      	add	r3, sp, #64	@ 0x40
 800fdd8:	9008      	str	r0, [sp, #32]
 800fdda:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fdde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fde2:	2100      	movs	r1, #0
 800fde4:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fde8:	a808      	add	r0, sp, #32
 800fdea:	f000 fc77 	bl	80106dc <rcutils_string_map_init>
 800fdee:	4606      	mov	r6, r0
 800fdf0:	b170      	cbz	r0, 800fe10 <rcl_node_resolve_name+0x90>
 800fdf2:	f7f9 fb75 	bl	80094e0 <rcutils_get_error_string>
 800fdf6:	f7f9 fb8b 	bl	8009510 <rcutils_reset_error>
 800fdfa:	2e0a      	cmp	r6, #10
 800fdfc:	d000      	beq.n	800fe00 <rcl_node_resolve_name+0x80>
 800fdfe:	2601      	movs	r6, #1
 800fe00:	4630      	mov	r0, r6
 800fe02:	b011      	add	sp, #68	@ 0x44
 800fe04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe08:	b002      	add	sp, #8
 800fe0a:	4770      	bx	lr
 800fe0c:	260b      	movs	r6, #11
 800fe0e:	e7f7      	b.n	800fe00 <rcl_node_resolve_name+0x80>
 800fe10:	9009      	str	r0, [sp, #36]	@ 0x24
 800fe12:	9007      	str	r0, [sp, #28]
 800fe14:	a808      	add	r0, sp, #32
 800fe16:	f002 f8e9 	bl	8011fec <rcl_get_default_topic_name_substitutions>
 800fe1a:	4606      	mov	r6, r0
 800fe1c:	b1b0      	cbz	r0, 800fe4c <rcl_node_resolve_name+0xcc>
 800fe1e:	280a      	cmp	r0, #10
 800fe20:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fe24:	d000      	beq.n	800fe28 <rcl_node_resolve_name+0xa8>
 800fe26:	2601      	movs	r6, #1
 800fe28:	a808      	add	r0, sp, #32
 800fe2a:	f000 fc95 	bl	8010758 <rcutils_string_map_fini>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d132      	bne.n	800fe98 <rcl_node_resolve_name+0x118>
 800fe32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe34:	4659      	mov	r1, fp
 800fe36:	47d0      	blx	sl
 800fe38:	4659      	mov	r1, fp
 800fe3a:	4648      	mov	r0, r9
 800fe3c:	47d0      	blx	sl
 800fe3e:	f1b8 0f00 	cmp.w	r8, #0
 800fe42:	d0dd      	beq.n	800fe00 <rcl_node_resolve_name+0x80>
 800fe44:	2e67      	cmp	r6, #103	@ 0x67
 800fe46:	bf08      	it	eq
 800fe48:	2668      	moveq	r6, #104	@ 0x68
 800fe4a:	e7d9      	b.n	800fe00 <rcl_node_resolve_name+0x80>
 800fe4c:	ab09      	add	r3, sp, #36	@ 0x24
 800fe4e:	9305      	str	r3, [sp, #20]
 800fe50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe52:	46ec      	mov	ip, sp
 800fe54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	f8cc 3000 	str.w	r3, [ip]
 800fe5e:	463a      	mov	r2, r7
 800fe60:	4649      	mov	r1, r9
 800fe62:	4620      	mov	r0, r4
 800fe64:	ab08      	add	r3, sp, #32
 800fe66:	f001 ff63 	bl	8011d30 <rcl_expand_topic_name>
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	b9c8      	cbnz	r0, 800fea2 <rcl_node_resolve_name+0x122>
 800fe6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800fe72:	9009      	str	r0, [sp, #36]	@ 0x24
 800fe74:	4602      	mov	r2, r0
 800fe76:	a90a      	add	r1, sp, #40	@ 0x28
 800fe78:	4648      	mov	r0, r9
 800fe7a:	f000 fd91 	bl	80109a0 <rmw_validate_full_topic_name>
 800fe7e:	b998      	cbnz	r0, 800fea8 <rcl_node_resolve_name+0x128>
 800fe80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe82:	bb14      	cbnz	r4, 800feca <rcl_node_resolve_name+0x14a>
 800fe84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe86:	a808      	add	r0, sp, #32
 800fe88:	f8c3 9000 	str.w	r9, [r3]
 800fe8c:	f000 fc64 	bl	8010758 <rcutils_string_map_fini>
 800fe90:	4606      	mov	r6, r0
 800fe92:	b978      	cbnz	r0, 800feb4 <rcl_node_resolve_name+0x134>
 800fe94:	4681      	mov	r9, r0
 800fe96:	e7cc      	b.n	800fe32 <rcl_node_resolve_name+0xb2>
 800fe98:	f7f9 fb22 	bl	80094e0 <rcutils_get_error_string>
 800fe9c:	f7f9 fb38 	bl	8009510 <rcutils_reset_error>
 800fea0:	e7c7      	b.n	800fe32 <rcl_node_resolve_name+0xb2>
 800fea2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fea6:	e7bf      	b.n	800fe28 <rcl_node_resolve_name+0xa8>
 800fea8:	f7f9 fb1a 	bl	80094e0 <rcutils_get_error_string>
 800feac:	2601      	movs	r6, #1
 800feae:	f7f9 fb2f 	bl	8009510 <rcutils_reset_error>
 800feb2:	e7b9      	b.n	800fe28 <rcl_node_resolve_name+0xa8>
 800feb4:	f7f9 fb14 	bl	80094e0 <rcutils_get_error_string>
 800feb8:	f7f9 fb2a 	bl	8009510 <rcutils_reset_error>
 800febc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800febe:	4659      	mov	r1, fp
 800fec0:	47d0      	blx	sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	4620      	mov	r0, r4
 800fec6:	47d0      	blx	sl
 800fec8:	e799      	b.n	800fdfe <rcl_node_resolve_name+0x7e>
 800feca:	2667      	movs	r6, #103	@ 0x67
 800fecc:	e7ac      	b.n	800fe28 <rcl_node_resolve_name+0xa8>
 800fece:	bf00      	nop

0800fed0 <exact_match_lookup>:
 800fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fed2:	f102 0708 	add.w	r7, r2, #8
 800fed6:	460b      	mov	r3, r1
 800fed8:	4614      	mov	r4, r2
 800feda:	4606      	mov	r6, r0
 800fedc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fee0:	b085      	sub	sp, #20
 800fee2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fee6:	4618      	mov	r0, r3
 800fee8:	4918      	ldr	r1, [pc, #96]	@ (800ff4c <exact_match_lookup+0x7c>)
 800feea:	e894 000c 	ldmia.w	r4, {r2, r3}
 800feee:	f000 fa0f 	bl	8010310 <rcutils_join_path>
 800fef2:	7833      	ldrb	r3, [r6, #0]
 800fef4:	2b2f      	cmp	r3, #47	@ 0x2f
 800fef6:	4605      	mov	r5, r0
 800fef8:	d022      	beq.n	800ff40 <exact_match_lookup+0x70>
 800fefa:	f104 030c 	add.w	r3, r4, #12
 800fefe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff02:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ff06:	1c70      	adds	r0, r6, #1
 800ff08:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ff0c:	f000 fa06 	bl	801031c <rcutils_to_native_path>
 800ff10:	4606      	mov	r6, r0
 800ff12:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ff16:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ff1a:	4631      	mov	r1, r6
 800ff1c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ff20:	4628      	mov	r0, r5
 800ff22:	f000 f9f5 	bl	8010310 <rcutils_join_path>
 800ff26:	6863      	ldr	r3, [r4, #4]
 800ff28:	6921      	ldr	r1, [r4, #16]
 800ff2a:	4607      	mov	r7, r0
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	4798      	blx	r3
 800ff30:	4628      	mov	r0, r5
 800ff32:	6863      	ldr	r3, [r4, #4]
 800ff34:	6921      	ldr	r1, [r4, #16]
 800ff36:	4798      	blx	r3
 800ff38:	463d      	mov	r5, r7
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	b005      	add	sp, #20
 800ff3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff40:	7873      	ldrb	r3, [r6, #1]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1d9      	bne.n	800fefa <exact_match_lookup+0x2a>
 800ff46:	4628      	mov	r0, r5
 800ff48:	b005      	add	sp, #20
 800ff4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff4c:	080146fc 	.word	0x080146fc

0800ff50 <rcl_get_secure_root>:
 800ff50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff54:	b085      	sub	sp, #20
 800ff56:	b168      	cbz	r0, 800ff74 <rcl_get_secure_root+0x24>
 800ff58:	4607      	mov	r7, r0
 800ff5a:	4608      	mov	r0, r1
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	f7f9 fab1 	bl	80094c4 <rcutils_allocator_is_valid>
 800ff62:	b138      	cbz	r0, 800ff74 <rcl_get_secure_root+0x24>
 800ff64:	2300      	movs	r3, #0
 800ff66:	482d      	ldr	r0, [pc, #180]	@ (801001c <rcl_get_secure_root+0xcc>)
 800ff68:	9303      	str	r3, [sp, #12]
 800ff6a:	a903      	add	r1, sp, #12
 800ff6c:	f000 f9b6 	bl	80102dc <rcutils_get_env>
 800ff70:	4605      	mov	r5, r0
 800ff72:	b120      	cbz	r0, 800ff7e <rcl_get_secure_root+0x2e>
 800ff74:	2500      	movs	r5, #0
 800ff76:	4628      	mov	r0, r5
 800ff78:	b005      	add	sp, #20
 800ff7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff7e:	9b03      	ldr	r3, [sp, #12]
 800ff80:	781a      	ldrb	r2, [r3, #0]
 800ff82:	2a00      	cmp	r2, #0
 800ff84:	d0f6      	beq.n	800ff74 <rcl_get_secure_root+0x24>
 800ff86:	f104 090c 	add.w	r9, r4, #12
 800ff8a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ff8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ff92:	4618      	mov	r0, r3
 800ff94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ff98:	f000 fae6 	bl	8010568 <rcutils_strdup>
 800ff9c:	4680      	mov	r8, r0
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d0e8      	beq.n	800ff74 <rcl_get_secure_root+0x24>
 800ffa2:	481f      	ldr	r0, [pc, #124]	@ (8010020 <rcl_get_secure_root+0xd0>)
 800ffa4:	9503      	str	r5, [sp, #12]
 800ffa6:	a903      	add	r1, sp, #12
 800ffa8:	f000 f998 	bl	80102dc <rcutils_get_env>
 800ffac:	b160      	cbz	r0, 800ffc8 <rcl_get_secure_root+0x78>
 800ffae:	2600      	movs	r6, #0
 800ffb0:	6863      	ldr	r3, [r4, #4]
 800ffb2:	6921      	ldr	r1, [r4, #16]
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	4798      	blx	r3
 800ffb8:	4640      	mov	r0, r8
 800ffba:	6863      	ldr	r3, [r4, #4]
 800ffbc:	6921      	ldr	r1, [r4, #16]
 800ffbe:	4798      	blx	r3
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	b005      	add	sp, #20
 800ffc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffc8:	9b03      	ldr	r3, [sp, #12]
 800ffca:	781e      	ldrb	r6, [r3, #0]
 800ffcc:	b1f6      	cbz	r6, 801000c <rcl_get_secure_root+0xbc>
 800ffce:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ffd2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ffdc:	f000 fac4 	bl	8010568 <rcutils_strdup>
 800ffe0:	4606      	mov	r6, r0
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d0e3      	beq.n	800ffae <rcl_get_secure_root+0x5e>
 800ffe6:	4622      	mov	r2, r4
 800ffe8:	4641      	mov	r1, r8
 800ffea:	f7ff ff71 	bl	800fed0 <exact_match_lookup>
 800ffee:	4605      	mov	r5, r0
 800fff0:	2d00      	cmp	r5, #0
 800fff2:	d0dd      	beq.n	800ffb0 <rcl_get_secure_root+0x60>
 800fff4:	4628      	mov	r0, r5
 800fff6:	f000 f989 	bl	801030c <rcutils_is_directory>
 800fffa:	4607      	mov	r7, r0
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d1d7      	bne.n	800ffb0 <rcl_get_secure_root+0x60>
 8010000:	4628      	mov	r0, r5
 8010002:	6863      	ldr	r3, [r4, #4]
 8010004:	6921      	ldr	r1, [r4, #16]
 8010006:	4798      	blx	r3
 8010008:	463d      	mov	r5, r7
 801000a:	e7d1      	b.n	800ffb0 <rcl_get_secure_root+0x60>
 801000c:	4622      	mov	r2, r4
 801000e:	4638      	mov	r0, r7
 8010010:	4641      	mov	r1, r8
 8010012:	f7ff ff5d 	bl	800fed0 <exact_match_lookup>
 8010016:	4605      	mov	r5, r0
 8010018:	e7ea      	b.n	800fff0 <rcl_get_secure_root+0xa0>
 801001a:	bf00      	nop
 801001c:	08014708 	.word	0x08014708
 8010020:	08014720 	.word	0x08014720

08010024 <rcl_get_security_options_from_environment>:
 8010024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010026:	b083      	sub	sp, #12
 8010028:	2300      	movs	r3, #0
 801002a:	4605      	mov	r5, r0
 801002c:	460e      	mov	r6, r1
 801002e:	481a      	ldr	r0, [pc, #104]	@ (8010098 <rcl_get_security_options_from_environment+0x74>)
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	a901      	add	r1, sp, #4
 8010034:	4617      	mov	r7, r2
 8010036:	f000 f951 	bl	80102dc <rcutils_get_env>
 801003a:	b110      	cbz	r0, 8010042 <rcl_get_security_options_from_environment+0x1e>
 801003c:	2001      	movs	r0, #1
 801003e:	b003      	add	sp, #12
 8010040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010042:	4604      	mov	r4, r0
 8010044:	4915      	ldr	r1, [pc, #84]	@ (801009c <rcl_get_security_options_from_environment+0x78>)
 8010046:	9801      	ldr	r0, [sp, #4]
 8010048:	f7f0 f8ea 	bl	8000220 <strcmp>
 801004c:	b9b0      	cbnz	r0, 801007c <rcl_get_security_options_from_environment+0x58>
 801004e:	9001      	str	r0, [sp, #4]
 8010050:	b1c7      	cbz	r7, 8010084 <rcl_get_security_options_from_environment+0x60>
 8010052:	4813      	ldr	r0, [pc, #76]	@ (80100a0 <rcl_get_security_options_from_environment+0x7c>)
 8010054:	a901      	add	r1, sp, #4
 8010056:	f000 f941 	bl	80102dc <rcutils_get_env>
 801005a:	2800      	cmp	r0, #0
 801005c:	d1ee      	bne.n	801003c <rcl_get_security_options_from_environment+0x18>
 801005e:	4911      	ldr	r1, [pc, #68]	@ (80100a4 <rcl_get_security_options_from_environment+0x80>)
 8010060:	9801      	ldr	r0, [sp, #4]
 8010062:	f7f0 f8dd 	bl	8000220 <strcmp>
 8010066:	fab0 f080 	clz	r0, r0
 801006a:	0940      	lsrs	r0, r0, #5
 801006c:	7038      	strb	r0, [r7, #0]
 801006e:	4631      	mov	r1, r6
 8010070:	4628      	mov	r0, r5
 8010072:	f7ff ff6d 	bl	800ff50 <rcl_get_secure_root>
 8010076:	b138      	cbz	r0, 8010088 <rcl_get_security_options_from_environment+0x64>
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	e000      	b.n	801007e <rcl_get_security_options_from_environment+0x5a>
 801007c:	703c      	strb	r4, [r7, #0]
 801007e:	2000      	movs	r0, #0
 8010080:	b003      	add	sp, #12
 8010082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010084:	200b      	movs	r0, #11
 8010086:	e7da      	b.n	801003e <rcl_get_security_options_from_environment+0x1a>
 8010088:	7838      	ldrb	r0, [r7, #0]
 801008a:	f1a0 0001 	sub.w	r0, r0, #1
 801008e:	fab0 f080 	clz	r0, r0
 8010092:	0940      	lsrs	r0, r0, #5
 8010094:	e7d3      	b.n	801003e <rcl_get_security_options_from_environment+0x1a>
 8010096:	bf00      	nop
 8010098:	080146c0 	.word	0x080146c0
 801009c:	080146d4 	.word	0x080146d4
 80100a0:	080146dc 	.word	0x080146dc
 80100a4:	080146f4 	.word	0x080146f4

080100a8 <rcl_get_system_time>:
 80100a8:	4608      	mov	r0, r1
 80100aa:	f000 bbd9 	b.w	8010860 <rcutils_system_time_now>
 80100ae:	bf00      	nop

080100b0 <rcl_get_steady_time>:
 80100b0:	4608      	mov	r0, r1
 80100b2:	f000 bbff 	b.w	80108b4 <rcutils_steady_time_now>
 80100b6:	bf00      	nop

080100b8 <rcl_get_ros_time>:
 80100b8:	7a03      	ldrb	r3, [r0, #8]
 80100ba:	b510      	push	{r4, lr}
 80100bc:	460c      	mov	r4, r1
 80100be:	b143      	cbz	r3, 80100d2 <rcl_get_ros_time+0x1a>
 80100c0:	2105      	movs	r1, #5
 80100c2:	f000 f8d5 	bl	8010270 <__atomic_load_8>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	e9c4 2300 	strd	r2, r3, [r4]
 80100ce:	2000      	movs	r0, #0
 80100d0:	bd10      	pop	{r4, pc}
 80100d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100d6:	4608      	mov	r0, r1
 80100d8:	f000 bbc2 	b.w	8010860 <rcutils_system_time_now>

080100dc <rcl_clock_init>:
 80100dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100de:	4605      	mov	r5, r0
 80100e0:	4610      	mov	r0, r2
 80100e2:	4614      	mov	r4, r2
 80100e4:	460e      	mov	r6, r1
 80100e6:	f7f9 f9ed 	bl	80094c4 <rcutils_allocator_is_valid>
 80100ea:	b128      	cbz	r0, 80100f8 <rcl_clock_init+0x1c>
 80100ec:	2d03      	cmp	r5, #3
 80100ee:	d803      	bhi.n	80100f8 <rcl_clock_init+0x1c>
 80100f0:	e8df f005 	tbb	[pc, r5]
 80100f4:	044c291a 	.word	0x044c291a
 80100f8:	200b      	movs	r0, #11
 80100fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100fc:	2e00      	cmp	r6, #0
 80100fe:	d0fb      	beq.n	80100f8 <rcl_clock_init+0x1c>
 8010100:	2c00      	cmp	r4, #0
 8010102:	d0f9      	beq.n	80100f8 <rcl_clock_init+0x1c>
 8010104:	2300      	movs	r3, #0
 8010106:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801010a:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80101b0 <rcl_clock_init+0xd4>
 801010e:	6133      	str	r3, [r6, #16]
 8010110:	f106 0514 	add.w	r5, r6, #20
 8010114:	2703      	movs	r7, #3
 8010116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	602b      	str	r3, [r5, #0]
 801011e:	f8c6 c00c 	str.w	ip, [r6, #12]
 8010122:	7037      	strb	r7, [r6, #0]
 8010124:	2000      	movs	r0, #0
 8010126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010128:	2e00      	cmp	r6, #0
 801012a:	d0e5      	beq.n	80100f8 <rcl_clock_init+0x1c>
 801012c:	2300      	movs	r3, #0
 801012e:	7033      	strb	r3, [r6, #0]
 8010130:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010134:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801013a:	f106 0514 	add.w	r5, r6, #20
 801013e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010140:	6823      	ldr	r3, [r4, #0]
 8010142:	602b      	str	r3, [r5, #0]
 8010144:	e7ee      	b.n	8010124 <rcl_clock_init+0x48>
 8010146:	2e00      	cmp	r6, #0
 8010148:	d0d6      	beq.n	80100f8 <rcl_clock_init+0x1c>
 801014a:	2c00      	cmp	r4, #0
 801014c:	d0d4      	beq.n	80100f8 <rcl_clock_init+0x1c>
 801014e:	2700      	movs	r7, #0
 8010150:	7037      	strb	r7, [r6, #0]
 8010152:	46a4      	mov	ip, r4
 8010154:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010158:	f106 0514 	add.w	r5, r6, #20
 801015c:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010160:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010166:	f8dc 3000 	ldr.w	r3, [ip]
 801016a:	602b      	str	r3, [r5, #0]
 801016c:	6921      	ldr	r1, [r4, #16]
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	2010      	movs	r0, #16
 8010172:	4798      	blx	r3
 8010174:	6130      	str	r0, [r6, #16]
 8010176:	b1b8      	cbz	r0, 80101a8 <rcl_clock_init+0xcc>
 8010178:	2200      	movs	r2, #0
 801017a:	2300      	movs	r3, #0
 801017c:	e9c0 2300 	strd	r2, r3, [r0]
 8010180:	4a0a      	ldr	r2, [pc, #40]	@ (80101ac <rcl_clock_init+0xd0>)
 8010182:	7207      	strb	r7, [r0, #8]
 8010184:	2301      	movs	r3, #1
 8010186:	60f2      	str	r2, [r6, #12]
 8010188:	7033      	strb	r3, [r6, #0]
 801018a:	e7cb      	b.n	8010124 <rcl_clock_init+0x48>
 801018c:	2e00      	cmp	r6, #0
 801018e:	d0b3      	beq.n	80100f8 <rcl_clock_init+0x1c>
 8010190:	2c00      	cmp	r4, #0
 8010192:	d0b1      	beq.n	80100f8 <rcl_clock_init+0x1c>
 8010194:	2300      	movs	r3, #0
 8010196:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801019a:	f8df c018 	ldr.w	ip, [pc, #24]	@ 80101b4 <rcl_clock_init+0xd8>
 801019e:	6133      	str	r3, [r6, #16]
 80101a0:	f106 0514 	add.w	r5, r6, #20
 80101a4:	2702      	movs	r7, #2
 80101a6:	e7b6      	b.n	8010116 <rcl_clock_init+0x3a>
 80101a8:	200a      	movs	r0, #10
 80101aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ac:	080100b9 	.word	0x080100b9
 80101b0:	080100b1 	.word	0x080100b1
 80101b4:	080100a9 	.word	0x080100a9

080101b8 <rcl_validate_enclave_name_with_size>:
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d037      	beq.n	801022c <rcl_validate_enclave_name_with_size+0x74>
 80101bc:	b570      	push	{r4, r5, r6, lr}
 80101be:	4614      	mov	r4, r2
 80101c0:	b0c2      	sub	sp, #264	@ 0x108
 80101c2:	b342      	cbz	r2, 8010216 <rcl_validate_enclave_name_with_size+0x5e>
 80101c4:	461e      	mov	r6, r3
 80101c6:	466a      	mov	r2, sp
 80101c8:	ab01      	add	r3, sp, #4
 80101ca:	460d      	mov	r5, r1
 80101cc:	f000 fc60 	bl	8010a90 <rmw_validate_namespace_with_size>
 80101d0:	4684      	mov	ip, r0
 80101d2:	bb28      	cbnz	r0, 8010220 <rcl_validate_enclave_name_with_size+0x68>
 80101d4:	9b00      	ldr	r3, [sp, #0]
 80101d6:	b923      	cbnz	r3, 80101e2 <rcl_validate_enclave_name_with_size+0x2a>
 80101d8:	2300      	movs	r3, #0
 80101da:	6023      	str	r3, [r4, #0]
 80101dc:	4660      	mov	r0, ip
 80101de:	b042      	add	sp, #264	@ 0x108
 80101e0:	bd70      	pop	{r4, r5, r6, pc}
 80101e2:	2b07      	cmp	r3, #7
 80101e4:	d00f      	beq.n	8010206 <rcl_validate_enclave_name_with_size+0x4e>
 80101e6:	1e5a      	subs	r2, r3, #1
 80101e8:	2a05      	cmp	r2, #5
 80101ea:	d823      	bhi.n	8010234 <rcl_validate_enclave_name_with_size+0x7c>
 80101ec:	e8df f002 	tbb	[pc, r2]
 80101f0:	03030303 	.word	0x03030303
 80101f4:	0303      	.short	0x0303
 80101f6:	6023      	str	r3, [r4, #0]
 80101f8:	2e00      	cmp	r6, #0
 80101fa:	d0ef      	beq.n	80101dc <rcl_validate_enclave_name_with_size+0x24>
 80101fc:	9b01      	ldr	r3, [sp, #4]
 80101fe:	6033      	str	r3, [r6, #0]
 8010200:	4660      	mov	r0, ip
 8010202:	b042      	add	sp, #264	@ 0x108
 8010204:	bd70      	pop	{r4, r5, r6, pc}
 8010206:	2dff      	cmp	r5, #255	@ 0xff
 8010208:	d9e6      	bls.n	80101d8 <rcl_validate_enclave_name_with_size+0x20>
 801020a:	6023      	str	r3, [r4, #0]
 801020c:	2e00      	cmp	r6, #0
 801020e:	d0e5      	beq.n	80101dc <rcl_validate_enclave_name_with_size+0x24>
 8010210:	23fe      	movs	r3, #254	@ 0xfe
 8010212:	6033      	str	r3, [r6, #0]
 8010214:	e7e2      	b.n	80101dc <rcl_validate_enclave_name_with_size+0x24>
 8010216:	f04f 0c0b 	mov.w	ip, #11
 801021a:	4660      	mov	r0, ip
 801021c:	b042      	add	sp, #264	@ 0x108
 801021e:	bd70      	pop	{r4, r5, r6, pc}
 8010220:	f7ff f9dc 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 8010224:	4684      	mov	ip, r0
 8010226:	4660      	mov	r0, ip
 8010228:	b042      	add	sp, #264	@ 0x108
 801022a:	bd70      	pop	{r4, r5, r6, pc}
 801022c:	f04f 0c0b 	mov.w	ip, #11
 8010230:	4660      	mov	r0, ip
 8010232:	4770      	bx	lr
 8010234:	4a04      	ldr	r2, [pc, #16]	@ (8010248 <rcl_validate_enclave_name_with_size+0x90>)
 8010236:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801023a:	a802      	add	r0, sp, #8
 801023c:	f000 f968 	bl	8010510 <rcutils_snprintf>
 8010240:	f04f 0c01 	mov.w	ip, #1
 8010244:	e7ca      	b.n	80101dc <rcl_validate_enclave_name_with_size+0x24>
 8010246:	bf00      	nop
 8010248:	08014740 	.word	0x08014740

0801024c <rcl_validate_enclave_name>:
 801024c:	b168      	cbz	r0, 801026a <rcl_validate_enclave_name+0x1e>
 801024e:	b570      	push	{r4, r5, r6, lr}
 8010250:	460d      	mov	r5, r1
 8010252:	4616      	mov	r6, r2
 8010254:	4604      	mov	r4, r0
 8010256:	f7f0 f843 	bl	80002e0 <strlen>
 801025a:	4633      	mov	r3, r6
 801025c:	4601      	mov	r1, r0
 801025e:	462a      	mov	r2, r5
 8010260:	4620      	mov	r0, r4
 8010262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010266:	f7ff bfa7 	b.w	80101b8 <rcl_validate_enclave_name_with_size>
 801026a:	200b      	movs	r0, #11
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop

08010270 <__atomic_load_8>:
 8010270:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010274:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010278:	4a15      	ldr	r2, [pc, #84]	@ (80102d0 <__atomic_load_8+0x60>)
 801027a:	4b16      	ldr	r3, [pc, #88]	@ (80102d4 <__atomic_load_8+0x64>)
 801027c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010280:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010284:	fb02 f101 	mul.w	r1, r2, r1
 8010288:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801028c:	fba3 2301 	umull	r2, r3, r3, r1
 8010290:	091b      	lsrs	r3, r3, #4
 8010292:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010296:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801029a:	b4f0      	push	{r4, r5, r6, r7}
 801029c:	4d0e      	ldr	r5, [pc, #56]	@ (80102d8 <__atomic_load_8+0x68>)
 801029e:	1ac9      	subs	r1, r1, r3
 80102a0:	194a      	adds	r2, r1, r5
 80102a2:	f04f 0c01 	mov.w	ip, #1
 80102a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80102aa:	e8c2 cf44 	strexb	r4, ip, [r2]
 80102ae:	2c00      	cmp	r4, #0
 80102b0:	d1f9      	bne.n	80102a6 <__atomic_load_8+0x36>
 80102b2:	f3bf 8f5b 	dmb	ish
 80102b6:	b2dc      	uxtb	r4, r3
 80102b8:	2c00      	cmp	r4, #0
 80102ba:	d1f4      	bne.n	80102a6 <__atomic_load_8+0x36>
 80102bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80102c0:	f3bf 8f5b 	dmb	ish
 80102c4:	546b      	strb	r3, [r5, r1]
 80102c6:	4630      	mov	r0, r6
 80102c8:	4639      	mov	r1, r7
 80102ca:	bcf0      	pop	{r4, r5, r6, r7}
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	27d4eb2d 	.word	0x27d4eb2d
 80102d4:	b21642c9 	.word	0xb21642c9
 80102d8:	20010a94 	.word	0x20010a94

080102dc <rcutils_get_env>:
 80102dc:	b150      	cbz	r0, 80102f4 <rcutils_get_env+0x18>
 80102de:	b510      	push	{r4, lr}
 80102e0:	460c      	mov	r4, r1
 80102e2:	b909      	cbnz	r1, 80102e8 <rcutils_get_env+0xc>
 80102e4:	4806      	ldr	r0, [pc, #24]	@ (8010300 <rcutils_get_env+0x24>)
 80102e6:	bd10      	pop	{r4, pc}
 80102e8:	f002 f9f0 	bl	80126cc <getenv>
 80102ec:	b120      	cbz	r0, 80102f8 <rcutils_get_env+0x1c>
 80102ee:	6020      	str	r0, [r4, #0]
 80102f0:	2000      	movs	r0, #0
 80102f2:	bd10      	pop	{r4, pc}
 80102f4:	4803      	ldr	r0, [pc, #12]	@ (8010304 <rcutils_get_env+0x28>)
 80102f6:	4770      	bx	lr
 80102f8:	4b03      	ldr	r3, [pc, #12]	@ (8010308 <rcutils_get_env+0x2c>)
 80102fa:	6023      	str	r3, [r4, #0]
 80102fc:	e7f8      	b.n	80102f0 <rcutils_get_env+0x14>
 80102fe:	bf00      	nop
 8010300:	080147bc 	.word	0x080147bc
 8010304:	080147a0 	.word	0x080147a0
 8010308:	08014d24 	.word	0x08014d24

0801030c <rcutils_is_directory>:
 801030c:	2000      	movs	r0, #0
 801030e:	4770      	bx	lr

08010310 <rcutils_join_path>:
 8010310:	b082      	sub	sp, #8
 8010312:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010316:	2000      	movs	r0, #0
 8010318:	b002      	add	sp, #8
 801031a:	4770      	bx	lr

0801031c <rcutils_to_native_path>:
 801031c:	b084      	sub	sp, #16
 801031e:	a801      	add	r0, sp, #4
 8010320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010324:	b004      	add	sp, #16
 8010326:	2000      	movs	r0, #0
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop

0801032c <rcutils_format_string_limit>:
 801032c:	b40f      	push	{r0, r1, r2, r3}
 801032e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010330:	b083      	sub	sp, #12
 8010332:	ac08      	add	r4, sp, #32
 8010334:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801033a:	b376      	cbz	r6, 801039a <rcutils_format_string_limit+0x6e>
 801033c:	4620      	mov	r0, r4
 801033e:	f7f9 f8c1 	bl	80094c4 <rcutils_allocator_is_valid>
 8010342:	b350      	cbz	r0, 801039a <rcutils_format_string_limit+0x6e>
 8010344:	2100      	movs	r1, #0
 8010346:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010348:	4632      	mov	r2, r6
 801034a:	4608      	mov	r0, r1
 801034c:	e9cd 3300 	strd	r3, r3, [sp]
 8010350:	f000 f8f8 	bl	8010544 <rcutils_vsnprintf>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	4605      	mov	r5, r0
 8010358:	d01f      	beq.n	801039a <rcutils_format_string_limit+0x6e>
 801035a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801035c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801035e:	1c47      	adds	r7, r0, #1
 8010360:	429f      	cmp	r7, r3
 8010362:	bf84      	itt	hi
 8010364:	461f      	movhi	r7, r3
 8010366:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801036a:	4638      	mov	r0, r7
 801036c:	9b08      	ldr	r3, [sp, #32]
 801036e:	4798      	blx	r3
 8010370:	4604      	mov	r4, r0
 8010372:	b190      	cbz	r0, 801039a <rcutils_format_string_limit+0x6e>
 8010374:	9b01      	ldr	r3, [sp, #4]
 8010376:	4632      	mov	r2, r6
 8010378:	4639      	mov	r1, r7
 801037a:	f000 f8e3 	bl	8010544 <rcutils_vsnprintf>
 801037e:	2800      	cmp	r0, #0
 8010380:	db07      	blt.n	8010392 <rcutils_format_string_limit+0x66>
 8010382:	2300      	movs	r3, #0
 8010384:	5563      	strb	r3, [r4, r5]
 8010386:	4620      	mov	r0, r4
 8010388:	b003      	add	sp, #12
 801038a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801038e:	b004      	add	sp, #16
 8010390:	4770      	bx	lr
 8010392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010394:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010396:	4620      	mov	r0, r4
 8010398:	4798      	blx	r3
 801039a:	2400      	movs	r4, #0
 801039c:	e7f3      	b.n	8010386 <rcutils_format_string_limit+0x5a>
 801039e:	bf00      	nop

080103a0 <rcutils_repl_str>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	4699      	mov	r9, r3
 80103a6:	b089      	sub	sp, #36	@ 0x24
 80103a8:	4603      	mov	r3, r0
 80103aa:	4648      	mov	r0, r9
 80103ac:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80103b0:	4698      	mov	r8, r3
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	460c      	mov	r4, r1
 80103b6:	f7f9 f885 	bl	80094c4 <rcutils_allocator_is_valid>
 80103ba:	2800      	cmp	r0, #0
 80103bc:	f000 80a3 	beq.w	8010506 <rcutils_repl_str+0x166>
 80103c0:	4620      	mov	r0, r4
 80103c2:	f7ef ff8d 	bl	80002e0 <strlen>
 80103c6:	f04f 0a00 	mov.w	sl, #0
 80103ca:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80103ce:	9001      	str	r0, [sp, #4]
 80103d0:	4657      	mov	r7, sl
 80103d2:	4655      	mov	r5, sl
 80103d4:	2610      	movs	r6, #16
 80103d6:	e01e      	b.n	8010416 <rcutils_repl_str+0x76>
 80103d8:	3501      	adds	r5, #1
 80103da:	45aa      	cmp	sl, r5
 80103dc:	d212      	bcs.n	8010404 <rcutils_repl_str+0x64>
 80103de:	44b2      	add	sl, r6
 80103e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80103e4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80103e8:	4798      	blx	r3
 80103ea:	2800      	cmp	r0, #0
 80103ec:	f000 8088 	beq.w	8010500 <rcutils_repl_str+0x160>
 80103f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80103f4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80103f8:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80103fc:	4607      	mov	r7, r0
 80103fe:	bf28      	it	cs
 8010400:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8010404:	9a00      	ldr	r2, [sp, #0]
 8010406:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 801040a:	1aa2      	subs	r2, r4, r2
 801040c:	f843 2c04 	str.w	r2, [r3, #-4]
 8010410:	9b01      	ldr	r3, [sp, #4]
 8010412:	eb04 0803 	add.w	r8, r4, r3
 8010416:	9902      	ldr	r1, [sp, #8]
 8010418:	4640      	mov	r0, r8
 801041a:	f002 fe23 	bl	8013064 <strstr>
 801041e:	4604      	mov	r4, r0
 8010420:	465a      	mov	r2, fp
 8010422:	4638      	mov	r0, r7
 8010424:	2c00      	cmp	r4, #0
 8010426:	d1d7      	bne.n	80103d8 <rcutils_repl_str+0x38>
 8010428:	4640      	mov	r0, r8
 801042a:	f7ef ff59 	bl	80002e0 <strlen>
 801042e:	9b00      	ldr	r3, [sp, #0]
 8010430:	eba8 0803 	sub.w	r8, r8, r3
 8010434:	eb08 0300 	add.w	r3, r8, r0
 8010438:	9304      	str	r3, [sp, #16]
 801043a:	f8d9 8000 	ldr.w	r8, [r9]
 801043e:	2d00      	cmp	r5, #0
 8010440:	d03f      	beq.n	80104c2 <rcutils_repl_str+0x122>
 8010442:	9803      	ldr	r0, [sp, #12]
 8010444:	f7ef ff4c 	bl	80002e0 <strlen>
 8010448:	4606      	mov	r6, r0
 801044a:	9801      	ldr	r0, [sp, #4]
 801044c:	9a04      	ldr	r2, [sp, #16]
 801044e:	1a33      	subs	r3, r6, r0
 8010450:	fb05 2a03 	mla	sl, r5, r3, r2
 8010454:	4659      	mov	r1, fp
 8010456:	f10a 0001 	add.w	r0, sl, #1
 801045a:	47c0      	blx	r8
 801045c:	4683      	mov	fp, r0
 801045e:	2800      	cmp	r0, #0
 8010460:	d04e      	beq.n	8010500 <rcutils_repl_str+0x160>
 8010462:	683a      	ldr	r2, [r7, #0]
 8010464:	9900      	ldr	r1, [sp, #0]
 8010466:	f002 fef4 	bl	8013252 <memcpy>
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	9706      	str	r7, [sp, #24]
 801046e:	1e6a      	subs	r2, r5, #1
 8010470:	445b      	add	r3, fp
 8010472:	46a8      	mov	r8, r5
 8010474:	9202      	str	r2, [sp, #8]
 8010476:	4625      	mov	r5, r4
 8010478:	f8cd 901c 	str.w	r9, [sp, #28]
 801047c:	461c      	mov	r4, r3
 801047e:	9903      	ldr	r1, [sp, #12]
 8010480:	4632      	mov	r2, r6
 8010482:	4620      	mov	r0, r4
 8010484:	f002 fee5 	bl	8013252 <memcpy>
 8010488:	9b01      	ldr	r3, [sp, #4]
 801048a:	f857 2b04 	ldr.w	r2, [r7], #4
 801048e:	eb02 0c03 	add.w	ip, r2, r3
 8010492:	9b00      	ldr	r3, [sp, #0]
 8010494:	eb03 010c 	add.w	r1, r3, ip
 8010498:	9b02      	ldr	r3, [sp, #8]
 801049a:	4434      	add	r4, r6
 801049c:	429d      	cmp	r5, r3
 801049e:	4620      	mov	r0, r4
 80104a0:	d022      	beq.n	80104e8 <rcutils_repl_str+0x148>
 80104a2:	683a      	ldr	r2, [r7, #0]
 80104a4:	eba2 090c 	sub.w	r9, r2, ip
 80104a8:	464a      	mov	r2, r9
 80104aa:	3501      	adds	r5, #1
 80104ac:	f002 fed1 	bl	8013252 <memcpy>
 80104b0:	45a8      	cmp	r8, r5
 80104b2:	444c      	add	r4, r9
 80104b4:	d1e3      	bne.n	801047e <rcutils_repl_str+0xde>
 80104b6:	2300      	movs	r3, #0
 80104b8:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 80104bc:	f80b 300a 	strb.w	r3, [fp, sl]
 80104c0:	e008      	b.n	80104d4 <rcutils_repl_str+0x134>
 80104c2:	4618      	mov	r0, r3
 80104c4:	4659      	mov	r1, fp
 80104c6:	3001      	adds	r0, #1
 80104c8:	47c0      	blx	r8
 80104ca:	4683      	mov	fp, r0
 80104cc:	b110      	cbz	r0, 80104d4 <rcutils_repl_str+0x134>
 80104ce:	9900      	ldr	r1, [sp, #0]
 80104d0:	f002 feb7 	bl	8013242 <strcpy>
 80104d4:	4638      	mov	r0, r7
 80104d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80104da:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80104de:	4798      	blx	r3
 80104e0:	4658      	mov	r0, fp
 80104e2:	b009      	add	sp, #36	@ 0x24
 80104e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e8:	9b04      	ldr	r3, [sp, #16]
 80104ea:	eba3 020c 	sub.w	r2, r3, ip
 80104ee:	9205      	str	r2, [sp, #20]
 80104f0:	3501      	adds	r5, #1
 80104f2:	f002 feae 	bl	8013252 <memcpy>
 80104f6:	9a05      	ldr	r2, [sp, #20]
 80104f8:	45a8      	cmp	r8, r5
 80104fa:	4414      	add	r4, r2
 80104fc:	d1bf      	bne.n	801047e <rcutils_repl_str+0xde>
 80104fe:	e7da      	b.n	80104b6 <rcutils_repl_str+0x116>
 8010500:	f04f 0b00 	mov.w	fp, #0
 8010504:	e7e6      	b.n	80104d4 <rcutils_repl_str+0x134>
 8010506:	4683      	mov	fp, r0
 8010508:	4658      	mov	r0, fp
 801050a:	b009      	add	sp, #36	@ 0x24
 801050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010510 <rcutils_snprintf>:
 8010510:	b40c      	push	{r2, r3}
 8010512:	b530      	push	{r4, r5, lr}
 8010514:	b083      	sub	sp, #12
 8010516:	ab06      	add	r3, sp, #24
 8010518:	f853 2b04 	ldr.w	r2, [r3], #4
 801051c:	9301      	str	r3, [sp, #4]
 801051e:	b152      	cbz	r2, 8010536 <rcutils_snprintf+0x26>
 8010520:	b138      	cbz	r0, 8010532 <rcutils_snprintf+0x22>
 8010522:	b141      	cbz	r1, 8010536 <rcutils_snprintf+0x26>
 8010524:	f002 fcc2 	bl	8012eac <vsniprintf>
 8010528:	b003      	add	sp, #12
 801052a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801052e:	b002      	add	sp, #8
 8010530:	4770      	bx	lr
 8010532:	2900      	cmp	r1, #0
 8010534:	d0f6      	beq.n	8010524 <rcutils_snprintf+0x14>
 8010536:	f002 fe57 	bl	80131e8 <__errno>
 801053a:	2316      	movs	r3, #22
 801053c:	6003      	str	r3, [r0, #0]
 801053e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010542:	e7f1      	b.n	8010528 <rcutils_snprintf+0x18>

08010544 <rcutils_vsnprintf>:
 8010544:	b570      	push	{r4, r5, r6, lr}
 8010546:	b13a      	cbz	r2, 8010558 <rcutils_vsnprintf+0x14>
 8010548:	b120      	cbz	r0, 8010554 <rcutils_vsnprintf+0x10>
 801054a:	b129      	cbz	r1, 8010558 <rcutils_vsnprintf+0x14>
 801054c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010550:	f002 bcac 	b.w	8012eac <vsniprintf>
 8010554:	2900      	cmp	r1, #0
 8010556:	d0f9      	beq.n	801054c <rcutils_vsnprintf+0x8>
 8010558:	f002 fe46 	bl	80131e8 <__errno>
 801055c:	2316      	movs	r3, #22
 801055e:	6003      	str	r3, [r0, #0]
 8010560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	bf00      	nop

08010568 <rcutils_strdup>:
 8010568:	b084      	sub	sp, #16
 801056a:	b570      	push	{r4, r5, r6, lr}
 801056c:	b086      	sub	sp, #24
 801056e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8010572:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8010576:	4604      	mov	r4, r0
 8010578:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801057c:	f10d 0e04 	add.w	lr, sp, #4
 8010580:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010584:	f8dc 3000 	ldr.w	r3, [ip]
 8010588:	f8ce 3000 	str.w	r3, [lr]
 801058c:	b304      	cbz	r4, 80105d0 <rcutils_strdup+0x68>
 801058e:	a801      	add	r0, sp, #4
 8010590:	f7f8 ff98 	bl	80094c4 <rcutils_allocator_is_valid>
 8010594:	b1e0      	cbz	r0, 80105d0 <rcutils_strdup+0x68>
 8010596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801059a:	2100      	movs	r1, #0
 801059c:	4620      	mov	r0, r4
 801059e:	f7ef fe4f 	bl	8000240 <memchr>
 80105a2:	b190      	cbz	r0, 80105ca <rcutils_strdup+0x62>
 80105a4:	1b06      	subs	r6, r0, r4
 80105a6:	1c70      	adds	r0, r6, #1
 80105a8:	9b01      	ldr	r3, [sp, #4]
 80105aa:	9905      	ldr	r1, [sp, #20]
 80105ac:	4798      	blx	r3
 80105ae:	4605      	mov	r5, r0
 80105b0:	b128      	cbz	r0, 80105be <rcutils_strdup+0x56>
 80105b2:	4632      	mov	r2, r6
 80105b4:	4621      	mov	r1, r4
 80105b6:	f002 fe4c 	bl	8013252 <memcpy>
 80105ba:	2300      	movs	r3, #0
 80105bc:	55ab      	strb	r3, [r5, r6]
 80105be:	4628      	mov	r0, r5
 80105c0:	b006      	add	sp, #24
 80105c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105c6:	b004      	add	sp, #16
 80105c8:	4770      	bx	lr
 80105ca:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80105ce:	e7eb      	b.n	80105a8 <rcutils_strdup+0x40>
 80105d0:	2500      	movs	r5, #0
 80105d2:	e7f4      	b.n	80105be <rcutils_strdup+0x56>

080105d4 <rcutils_strndup>:
 80105d4:	b082      	sub	sp, #8
 80105d6:	b570      	push	{r4, r5, r6, lr}
 80105d8:	ac04      	add	r4, sp, #16
 80105da:	e884 000c 	stmia.w	r4, {r2, r3}
 80105de:	b1e8      	cbz	r0, 801061c <rcutils_strndup+0x48>
 80105e0:	4605      	mov	r5, r0
 80105e2:	a804      	add	r0, sp, #16
 80105e4:	460c      	mov	r4, r1
 80105e6:	f7f8 ff6d 	bl	80094c4 <rcutils_allocator_is_valid>
 80105ea:	b1b8      	cbz	r0, 801061c <rcutils_strndup+0x48>
 80105ec:	4622      	mov	r2, r4
 80105ee:	2100      	movs	r1, #0
 80105f0:	4628      	mov	r0, r5
 80105f2:	f7ef fe25 	bl	8000240 <memchr>
 80105f6:	b100      	cbz	r0, 80105fa <rcutils_strndup+0x26>
 80105f8:	1b44      	subs	r4, r0, r5
 80105fa:	9b04      	ldr	r3, [sp, #16]
 80105fc:	9908      	ldr	r1, [sp, #32]
 80105fe:	1c60      	adds	r0, r4, #1
 8010600:	4798      	blx	r3
 8010602:	4606      	mov	r6, r0
 8010604:	b128      	cbz	r0, 8010612 <rcutils_strndup+0x3e>
 8010606:	4622      	mov	r2, r4
 8010608:	4629      	mov	r1, r5
 801060a:	f002 fe22 	bl	8013252 <memcpy>
 801060e:	2300      	movs	r3, #0
 8010610:	5533      	strb	r3, [r6, r4]
 8010612:	4630      	mov	r0, r6
 8010614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010618:	b002      	add	sp, #8
 801061a:	4770      	bx	lr
 801061c:	2600      	movs	r6, #0
 801061e:	4630      	mov	r0, r6
 8010620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010624:	b002      	add	sp, #8
 8010626:	4770      	bx	lr

08010628 <rcutils_get_zero_initialized_string_map>:
 8010628:	4b01      	ldr	r3, [pc, #4]	@ (8010630 <rcutils_get_zero_initialized_string_map+0x8>)
 801062a:	2000      	movs	r0, #0
 801062c:	6018      	str	r0, [r3, #0]
 801062e:	4770      	bx	lr
 8010630:	20010aac 	.word	0x20010aac

08010634 <rcutils_string_map_reserve>:
 8010634:	2800      	cmp	r0, #0
 8010636:	d04e      	beq.n	80106d6 <rcutils_string_map_reserve+0xa2>
 8010638:	b530      	push	{r4, r5, lr}
 801063a:	6803      	ldr	r3, [r0, #0]
 801063c:	b087      	sub	sp, #28
 801063e:	4604      	mov	r4, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d043      	beq.n	80106cc <rcutils_string_map_reserve+0x98>
 8010644:	f103 0c0c 	add.w	ip, r3, #12
 8010648:	460d      	mov	r5, r1
 801064a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801064e:	f10d 0e04 	add.w	lr, sp, #4
 8010652:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010656:	f8dc 3000 	ldr.w	r3, [ip]
 801065a:	f8ce 3000 	str.w	r3, [lr]
 801065e:	a801      	add	r0, sp, #4
 8010660:	f7f8 ff30 	bl	80094c4 <rcutils_allocator_is_valid>
 8010664:	b308      	cbz	r0, 80106aa <rcutils_string_map_reserve+0x76>
 8010666:	6823      	ldr	r3, [r4, #0]
 8010668:	6899      	ldr	r1, [r3, #8]
 801066a:	42a9      	cmp	r1, r5
 801066c:	d829      	bhi.n	80106c2 <rcutils_string_map_reserve+0x8e>
 801066e:	685a      	ldr	r2, [r3, #4]
 8010670:	42aa      	cmp	r2, r5
 8010672:	d024      	beq.n	80106be <rcutils_string_map_reserve+0x8a>
 8010674:	b1e5      	cbz	r5, 80106b0 <rcutils_string_map_reserve+0x7c>
 8010676:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801067a:	d22a      	bcs.n	80106d2 <rcutils_string_map_reserve+0x9e>
 801067c:	6818      	ldr	r0, [r3, #0]
 801067e:	9a05      	ldr	r2, [sp, #20]
 8010680:	9b03      	ldr	r3, [sp, #12]
 8010682:	00e9      	lsls	r1, r5, #3
 8010684:	4798      	blx	r3
 8010686:	b320      	cbz	r0, 80106d2 <rcutils_string_map_reserve+0x9e>
 8010688:	6824      	ldr	r4, [r4, #0]
 801068a:	6861      	ldr	r1, [r4, #4]
 801068c:	6020      	str	r0, [r4, #0]
 801068e:	42a9      	cmp	r1, r5
 8010690:	d214      	bcs.n	80106bc <rcutils_string_map_reserve+0x88>
 8010692:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8010696:	1a69      	subs	r1, r5, r1
 8010698:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801069c:	2200      	movs	r2, #0
 801069e:	e9c3 2200 	strd	r2, r2, [r3]
 80106a2:	3308      	adds	r3, #8
 80106a4:	428b      	cmp	r3, r1
 80106a6:	d1fa      	bne.n	801069e <rcutils_string_map_reserve+0x6a>
 80106a8:	e008      	b.n	80106bc <rcutils_string_map_reserve+0x88>
 80106aa:	200b      	movs	r0, #11
 80106ac:	b007      	add	sp, #28
 80106ae:	bd30      	pop	{r4, r5, pc}
 80106b0:	9a02      	ldr	r2, [sp, #8]
 80106b2:	9905      	ldr	r1, [sp, #20]
 80106b4:	6818      	ldr	r0, [r3, #0]
 80106b6:	4790      	blx	r2
 80106b8:	6824      	ldr	r4, [r4, #0]
 80106ba:	6025      	str	r5, [r4, #0]
 80106bc:	6065      	str	r5, [r4, #4]
 80106be:	2000      	movs	r0, #0
 80106c0:	e7f4      	b.n	80106ac <rcutils_string_map_reserve+0x78>
 80106c2:	4620      	mov	r0, r4
 80106c4:	f7ff ffb6 	bl	8010634 <rcutils_string_map_reserve>
 80106c8:	b007      	add	sp, #28
 80106ca:	bd30      	pop	{r4, r5, pc}
 80106cc:	201f      	movs	r0, #31
 80106ce:	b007      	add	sp, #28
 80106d0:	bd30      	pop	{r4, r5, pc}
 80106d2:	200a      	movs	r0, #10
 80106d4:	e7ea      	b.n	80106ac <rcutils_string_map_reserve+0x78>
 80106d6:	200b      	movs	r0, #11
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop

080106dc <rcutils_string_map_init>:
 80106dc:	b082      	sub	sp, #8
 80106de:	b570      	push	{r4, r5, r6, lr}
 80106e0:	ac04      	add	r4, sp, #16
 80106e2:	e884 000c 	stmia.w	r4, {r2, r3}
 80106e6:	b378      	cbz	r0, 8010748 <rcutils_string_map_init+0x6c>
 80106e8:	6806      	ldr	r6, [r0, #0]
 80106ea:	4604      	mov	r4, r0
 80106ec:	b12e      	cbz	r6, 80106fa <rcutils_string_map_init+0x1e>
 80106ee:	251e      	movs	r5, #30
 80106f0:	4628      	mov	r0, r5
 80106f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106f6:	b002      	add	sp, #8
 80106f8:	4770      	bx	lr
 80106fa:	a804      	add	r0, sp, #16
 80106fc:	460d      	mov	r5, r1
 80106fe:	f7f8 fee1 	bl	80094c4 <rcutils_allocator_is_valid>
 8010702:	b308      	cbz	r0, 8010748 <rcutils_string_map_init+0x6c>
 8010704:	9b04      	ldr	r3, [sp, #16]
 8010706:	9908      	ldr	r1, [sp, #32]
 8010708:	2020      	movs	r0, #32
 801070a:	4798      	blx	r3
 801070c:	6020      	str	r0, [r4, #0]
 801070e:	b308      	cbz	r0, 8010754 <rcutils_string_map_init+0x78>
 8010710:	f10d 0e10 	add.w	lr, sp, #16
 8010714:	e9c0 6600 	strd	r6, r6, [r0]
 8010718:	6086      	str	r6, [r0, #8]
 801071a:	f100 0c0c 	add.w	ip, r0, #12
 801071e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010722:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010726:	f8de 3000 	ldr.w	r3, [lr]
 801072a:	f8cc 3000 	str.w	r3, [ip]
 801072e:	4629      	mov	r1, r5
 8010730:	4620      	mov	r0, r4
 8010732:	f7ff ff7f 	bl	8010634 <rcutils_string_map_reserve>
 8010736:	4605      	mov	r5, r0
 8010738:	2800      	cmp	r0, #0
 801073a:	d0d9      	beq.n	80106f0 <rcutils_string_map_init+0x14>
 801073c:	9b05      	ldr	r3, [sp, #20]
 801073e:	9908      	ldr	r1, [sp, #32]
 8010740:	6820      	ldr	r0, [r4, #0]
 8010742:	4798      	blx	r3
 8010744:	6026      	str	r6, [r4, #0]
 8010746:	e7d3      	b.n	80106f0 <rcutils_string_map_init+0x14>
 8010748:	250b      	movs	r5, #11
 801074a:	4628      	mov	r0, r5
 801074c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010750:	b002      	add	sp, #8
 8010752:	4770      	bx	lr
 8010754:	250a      	movs	r5, #10
 8010756:	e7cb      	b.n	80106f0 <rcutils_string_map_init+0x14>

08010758 <rcutils_string_map_fini>:
 8010758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801075c:	b086      	sub	sp, #24
 801075e:	2800      	cmp	r0, #0
 8010760:	d04f      	beq.n	8010802 <rcutils_string_map_fini+0xaa>
 8010762:	6805      	ldr	r5, [r0, #0]
 8010764:	4606      	mov	r6, r0
 8010766:	2d00      	cmp	r5, #0
 8010768:	d046      	beq.n	80107f8 <rcutils_string_map_fini+0xa0>
 801076a:	686b      	ldr	r3, [r5, #4]
 801076c:	b353      	cbz	r3, 80107c4 <rcutils_string_map_fini+0x6c>
 801076e:	2400      	movs	r4, #0
 8010770:	682a      	ldr	r2, [r5, #0]
 8010772:	4627      	mov	r7, r4
 8010774:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8010778:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801077c:	b1f8      	cbz	r0, 80107be <rcutils_string_map_fini+0x66>
 801077e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8010782:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010786:	4651      	mov	r1, sl
 8010788:	47c8      	blx	r9
 801078a:	682b      	ldr	r3, [r5, #0]
 801078c:	eb03 0208 	add.w	r2, r3, r8
 8010790:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8010794:	6850      	ldr	r0, [r2, #4]
 8010796:	4651      	mov	r1, sl
 8010798:	47c8      	blx	r9
 801079a:	682a      	ldr	r2, [r5, #0]
 801079c:	68ab      	ldr	r3, [r5, #8]
 801079e:	4442      	add	r2, r8
 80107a0:	3b01      	subs	r3, #1
 80107a2:	6057      	str	r7, [r2, #4]
 80107a4:	60ab      	str	r3, [r5, #8]
 80107a6:	6835      	ldr	r5, [r6, #0]
 80107a8:	686b      	ldr	r3, [r5, #4]
 80107aa:	3401      	adds	r4, #1
 80107ac:	429c      	cmp	r4, r3
 80107ae:	d209      	bcs.n	80107c4 <rcutils_string_map_fini+0x6c>
 80107b0:	682a      	ldr	r2, [r5, #0]
 80107b2:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80107b6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d1df      	bne.n	801077e <rcutils_string_map_fini+0x26>
 80107be:	3401      	adds	r4, #1
 80107c0:	42a3      	cmp	r3, r4
 80107c2:	d8d7      	bhi.n	8010774 <rcutils_string_map_fini+0x1c>
 80107c4:	2100      	movs	r1, #0
 80107c6:	4630      	mov	r0, r6
 80107c8:	f7ff ff34 	bl	8010634 <rcutils_string_map_reserve>
 80107cc:	4604      	mov	r4, r0
 80107ce:	b118      	cbz	r0, 80107d8 <rcutils_string_map_fini+0x80>
 80107d0:	4620      	mov	r0, r4
 80107d2:	b006      	add	sp, #24
 80107d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107d8:	6835      	ldr	r5, [r6, #0]
 80107da:	350c      	adds	r5, #12
 80107dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107de:	af01      	add	r7, sp, #4
 80107e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107e2:	682b      	ldr	r3, [r5, #0]
 80107e4:	603b      	str	r3, [r7, #0]
 80107e6:	a801      	add	r0, sp, #4
 80107e8:	f7f8 fe6c 	bl	80094c4 <rcutils_allocator_is_valid>
 80107ec:	b148      	cbz	r0, 8010802 <rcutils_string_map_fini+0xaa>
 80107ee:	9b02      	ldr	r3, [sp, #8]
 80107f0:	9905      	ldr	r1, [sp, #20]
 80107f2:	6830      	ldr	r0, [r6, #0]
 80107f4:	4798      	blx	r3
 80107f6:	6034      	str	r4, [r6, #0]
 80107f8:	2400      	movs	r4, #0
 80107fa:	4620      	mov	r0, r4
 80107fc:	b006      	add	sp, #24
 80107fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010802:	240b      	movs	r4, #11
 8010804:	4620      	mov	r0, r4
 8010806:	b006      	add	sp, #24
 8010808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801080c <rcutils_string_map_getn>:
 801080c:	b338      	cbz	r0, 801085e <rcutils_string_map_getn+0x52>
 801080e:	6800      	ldr	r0, [r0, #0]
 8010810:	b328      	cbz	r0, 801085e <rcutils_string_map_getn+0x52>
 8010812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010816:	460e      	mov	r6, r1
 8010818:	b1c1      	cbz	r1, 801084c <rcutils_string_map_getn+0x40>
 801081a:	e9d0 9800 	ldrd	r9, r8, [r0]
 801081e:	f1b8 0f00 	cmp.w	r8, #0
 8010822:	d013      	beq.n	801084c <rcutils_string_map_getn+0x40>
 8010824:	4617      	mov	r7, r2
 8010826:	2400      	movs	r4, #0
 8010828:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801082c:	4628      	mov	r0, r5
 801082e:	b155      	cbz	r5, 8010846 <rcutils_string_map_getn+0x3a>
 8010830:	f7ef fd56 	bl	80002e0 <strlen>
 8010834:	42b8      	cmp	r0, r7
 8010836:	4602      	mov	r2, r0
 8010838:	4629      	mov	r1, r5
 801083a:	bf38      	it	cc
 801083c:	463a      	movcc	r2, r7
 801083e:	4630      	mov	r0, r6
 8010840:	f002 fbeb 	bl	801301a <strncmp>
 8010844:	b128      	cbz	r0, 8010852 <rcutils_string_map_getn+0x46>
 8010846:	3401      	adds	r4, #1
 8010848:	45a0      	cmp	r8, r4
 801084a:	d1ed      	bne.n	8010828 <rcutils_string_map_getn+0x1c>
 801084c:	2000      	movs	r0, #0
 801084e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010852:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8010856:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801085a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801085e:	4770      	bx	lr

08010860 <rcutils_system_time_now>:
 8010860:	b318      	cbz	r0, 80108aa <rcutils_system_time_now+0x4a>
 8010862:	b570      	push	{r4, r5, r6, lr}
 8010864:	b084      	sub	sp, #16
 8010866:	4604      	mov	r4, r0
 8010868:	4669      	mov	r1, sp
 801086a:	2001      	movs	r0, #1
 801086c:	f7f0 ff20 	bl	80016b0 <clock_gettime>
 8010870:	2800      	cmp	r0, #0
 8010872:	db17      	blt.n	80108a4 <rcutils_system_time_now+0x44>
 8010874:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010878:	2900      	cmp	r1, #0
 801087a:	db13      	blt.n	80108a4 <rcutils_system_time_now+0x44>
 801087c:	9d02      	ldr	r5, [sp, #8]
 801087e:	2d00      	cmp	r5, #0
 8010880:	db0d      	blt.n	801089e <rcutils_system_time_now+0x3e>
 8010882:	4e0b      	ldr	r6, [pc, #44]	@ (80108b0 <rcutils_system_time_now+0x50>)
 8010884:	fba3 3206 	umull	r3, r2, r3, r6
 8010888:	195b      	adds	r3, r3, r5
 801088a:	fb06 2201 	mla	r2, r6, r1, r2
 801088e:	f04f 0000 	mov.w	r0, #0
 8010892:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010896:	e9c4 3200 	strd	r3, r2, [r4]
 801089a:	b004      	add	sp, #16
 801089c:	bd70      	pop	{r4, r5, r6, pc}
 801089e:	ea53 0201 	orrs.w	r2, r3, r1
 80108a2:	d1ee      	bne.n	8010882 <rcutils_system_time_now+0x22>
 80108a4:	2002      	movs	r0, #2
 80108a6:	b004      	add	sp, #16
 80108a8:	bd70      	pop	{r4, r5, r6, pc}
 80108aa:	200b      	movs	r0, #11
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	3b9aca00 	.word	0x3b9aca00

080108b4 <rcutils_steady_time_now>:
 80108b4:	b318      	cbz	r0, 80108fe <rcutils_steady_time_now+0x4a>
 80108b6:	b570      	push	{r4, r5, r6, lr}
 80108b8:	b084      	sub	sp, #16
 80108ba:	4604      	mov	r4, r0
 80108bc:	4669      	mov	r1, sp
 80108be:	2000      	movs	r0, #0
 80108c0:	f7f0 fef6 	bl	80016b0 <clock_gettime>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	db17      	blt.n	80108f8 <rcutils_steady_time_now+0x44>
 80108c8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80108cc:	2900      	cmp	r1, #0
 80108ce:	db13      	blt.n	80108f8 <rcutils_steady_time_now+0x44>
 80108d0:	9d02      	ldr	r5, [sp, #8]
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	db0d      	blt.n	80108f2 <rcutils_steady_time_now+0x3e>
 80108d6:	4e0b      	ldr	r6, [pc, #44]	@ (8010904 <rcutils_steady_time_now+0x50>)
 80108d8:	fba3 3206 	umull	r3, r2, r3, r6
 80108dc:	195b      	adds	r3, r3, r5
 80108de:	fb06 2201 	mla	r2, r6, r1, r2
 80108e2:	f04f 0000 	mov.w	r0, #0
 80108e6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80108ea:	e9c4 3200 	strd	r3, r2, [r4]
 80108ee:	b004      	add	sp, #16
 80108f0:	bd70      	pop	{r4, r5, r6, pc}
 80108f2:	ea53 0201 	orrs.w	r2, r3, r1
 80108f6:	d1ee      	bne.n	80108d6 <rcutils_steady_time_now+0x22>
 80108f8:	2002      	movs	r0, #2
 80108fa:	b004      	add	sp, #16
 80108fc:	bd70      	pop	{r4, r5, r6, pc}
 80108fe:	200b      	movs	r0, #11
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	3b9aca00 	.word	0x3b9aca00

08010908 <rmw_get_zero_initialized_discovery_options>:
 8010908:	b510      	push	{r4, lr}
 801090a:	2220      	movs	r2, #32
 801090c:	4604      	mov	r4, r0
 801090e:	2100      	movs	r1, #0
 8010910:	f002 fb6e 	bl	8012ff0 <memset>
 8010914:	4620      	mov	r0, r4
 8010916:	bd10      	pop	{r4, pc}

08010918 <rmw_discovery_options_init>:
 8010918:	b328      	cbz	r0, 8010966 <rmw_discovery_options_init+0x4e>
 801091a:	b570      	push	{r4, r5, r6, lr}
 801091c:	4604      	mov	r4, r0
 801091e:	4610      	mov	r0, r2
 8010920:	460e      	mov	r6, r1
 8010922:	4615      	mov	r5, r2
 8010924:	f7f8 fdce 	bl	80094c4 <rcutils_allocator_is_valid>
 8010928:	b1d8      	cbz	r0, 8010962 <rmw_discovery_options_init+0x4a>
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	b9cb      	cbnz	r3, 8010962 <rmw_discovery_options_init+0x4a>
 801092e:	6863      	ldr	r3, [r4, #4]
 8010930:	b9bb      	cbnz	r3, 8010962 <rmw_discovery_options_init+0x4a>
 8010932:	7823      	ldrb	r3, [r4, #0]
 8010934:	b90b      	cbnz	r3, 801093a <rmw_discovery_options_init+0x22>
 8010936:	2302      	movs	r3, #2
 8010938:	7023      	strb	r3, [r4, #0]
 801093a:	b186      	cbz	r6, 801095e <rmw_discovery_options_init+0x46>
 801093c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8010940:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010944:	4630      	mov	r0, r6
 8010946:	4798      	blx	r3
 8010948:	6060      	str	r0, [r4, #4]
 801094a:	b170      	cbz	r0, 801096a <rmw_discovery_options_init+0x52>
 801094c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801094e:	f104 0c0c 	add.w	ip, r4, #12
 8010952:	60a6      	str	r6, [r4, #8]
 8010954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010958:	682b      	ldr	r3, [r5, #0]
 801095a:	f8cc 3000 	str.w	r3, [ip]
 801095e:	2000      	movs	r0, #0
 8010960:	bd70      	pop	{r4, r5, r6, pc}
 8010962:	200b      	movs	r0, #11
 8010964:	bd70      	pop	{r4, r5, r6, pc}
 8010966:	200b      	movs	r0, #11
 8010968:	4770      	bx	lr
 801096a:	200a      	movs	r0, #10
 801096c:	bd70      	pop	{r4, r5, r6, pc}
 801096e:	bf00      	nop

08010970 <rmw_get_zero_initialized_context>:
 8010970:	b530      	push	{r4, r5, lr}
 8010972:	b097      	sub	sp, #92	@ 0x5c
 8010974:	4604      	mov	r4, r0
 8010976:	4668      	mov	r0, sp
 8010978:	f7f8 fde6 	bl	8009548 <rmw_get_zero_initialized_init_options>
 801097c:	2300      	movs	r3, #0
 801097e:	2200      	movs	r2, #0
 8010980:	e9c4 2300 	strd	r2, r3, [r4]
 8010984:	2500      	movs	r5, #0
 8010986:	4669      	mov	r1, sp
 8010988:	2258      	movs	r2, #88	@ 0x58
 801098a:	f104 0010 	add.w	r0, r4, #16
 801098e:	60a5      	str	r5, [r4, #8]
 8010990:	f002 fc5f 	bl	8013252 <memcpy>
 8010994:	4620      	mov	r0, r4
 8010996:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 801099a:	b017      	add	sp, #92	@ 0x5c
 801099c:	bd30      	pop	{r4, r5, pc}
 801099e:	bf00      	nop

080109a0 <rmw_validate_full_topic_name>:
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d049      	beq.n	8010a38 <rmw_validate_full_topic_name+0x98>
 80109a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a8:	460e      	mov	r6, r1
 80109aa:	2900      	cmp	r1, #0
 80109ac:	d056      	beq.n	8010a5c <rmw_validate_full_topic_name+0xbc>
 80109ae:	4615      	mov	r5, r2
 80109b0:	4604      	mov	r4, r0
 80109b2:	f7ef fc95 	bl	80002e0 <strlen>
 80109b6:	b150      	cbz	r0, 80109ce <rmw_validate_full_topic_name+0x2e>
 80109b8:	7823      	ldrb	r3, [r4, #0]
 80109ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80109bc:	d00c      	beq.n	80109d8 <rmw_validate_full_topic_name+0x38>
 80109be:	2302      	movs	r3, #2
 80109c0:	6033      	str	r3, [r6, #0]
 80109c2:	b10d      	cbz	r5, 80109c8 <rmw_validate_full_topic_name+0x28>
 80109c4:	2300      	movs	r3, #0
 80109c6:	602b      	str	r3, [r5, #0]
 80109c8:	2000      	movs	r0, #0
 80109ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ce:	2301      	movs	r3, #1
 80109d0:	6033      	str	r3, [r6, #0]
 80109d2:	2d00      	cmp	r5, #0
 80109d4:	d1f6      	bne.n	80109c4 <rmw_validate_full_topic_name+0x24>
 80109d6:	e7f7      	b.n	80109c8 <rmw_validate_full_topic_name+0x28>
 80109d8:	1e47      	subs	r7, r0, #1
 80109da:	5de3      	ldrb	r3, [r4, r7]
 80109dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80109de:	d03f      	beq.n	8010a60 <rmw_validate_full_topic_name+0xc0>
 80109e0:	1e63      	subs	r3, r4, #1
 80109e2:	4621      	mov	r1, r4
 80109e4:	eb03 0e00 	add.w	lr, r3, r0
 80109e8:	469c      	mov	ip, r3
 80109ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80109ee:	2a5f      	cmp	r2, #95	@ 0x5f
 80109f0:	d006      	beq.n	8010a00 <rmw_validate_full_topic_name+0x60>
 80109f2:	d823      	bhi.n	8010a3c <rmw_validate_full_topic_name+0x9c>
 80109f4:	2a39      	cmp	r2, #57	@ 0x39
 80109f6:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 80109fa:	d82b      	bhi.n	8010a54 <rmw_validate_full_topic_name+0xb4>
 80109fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80109fe:	d920      	bls.n	8010a42 <rmw_validate_full_topic_name+0xa2>
 8010a00:	4573      	cmp	r3, lr
 8010a02:	d1f1      	bne.n	80109e8 <rmw_validate_full_topic_name+0x48>
 8010a04:	4c21      	ldr	r4, [pc, #132]	@ (8010a8c <rmw_validate_full_topic_name+0xec>)
 8010a06:	2300      	movs	r3, #0
 8010a08:	e003      	b.n	8010a12 <rmw_validate_full_topic_name+0x72>
 8010a0a:	4298      	cmp	r0, r3
 8010a0c:	f101 0101 	add.w	r1, r1, #1
 8010a10:	d02c      	beq.n	8010a6c <rmw_validate_full_topic_name+0xcc>
 8010a12:	429f      	cmp	r7, r3
 8010a14:	f103 0301 	add.w	r3, r3, #1
 8010a18:	d0f7      	beq.n	8010a0a <rmw_validate_full_topic_name+0x6a>
 8010a1a:	780a      	ldrb	r2, [r1, #0]
 8010a1c:	2a2f      	cmp	r2, #47	@ 0x2f
 8010a1e:	d1f4      	bne.n	8010a0a <rmw_validate_full_topic_name+0x6a>
 8010a20:	784a      	ldrb	r2, [r1, #1]
 8010a22:	2a2f      	cmp	r2, #47	@ 0x2f
 8010a24:	d02d      	beq.n	8010a82 <rmw_validate_full_topic_name+0xe2>
 8010a26:	5ca2      	ldrb	r2, [r4, r2]
 8010a28:	0752      	lsls	r2, r2, #29
 8010a2a:	d5ee      	bpl.n	8010a0a <rmw_validate_full_topic_name+0x6a>
 8010a2c:	2206      	movs	r2, #6
 8010a2e:	6032      	str	r2, [r6, #0]
 8010a30:	2d00      	cmp	r5, #0
 8010a32:	d0c9      	beq.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a34:	602b      	str	r3, [r5, #0]
 8010a36:	e7c7      	b.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a38:	200b      	movs	r0, #11
 8010a3a:	4770      	bx	lr
 8010a3c:	3a61      	subs	r2, #97	@ 0x61
 8010a3e:	2a19      	cmp	r2, #25
 8010a40:	d9de      	bls.n	8010a00 <rmw_validate_full_topic_name+0x60>
 8010a42:	2304      	movs	r3, #4
 8010a44:	6033      	str	r3, [r6, #0]
 8010a46:	2d00      	cmp	r5, #0
 8010a48:	d0be      	beq.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a4a:	f1c4 0401 	rsb	r4, r4, #1
 8010a4e:	4464      	add	r4, ip
 8010a50:	602c      	str	r4, [r5, #0]
 8010a52:	e7b9      	b.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a54:	f1b8 0f19 	cmp.w	r8, #25
 8010a58:	d9d2      	bls.n	8010a00 <rmw_validate_full_topic_name+0x60>
 8010a5a:	e7f2      	b.n	8010a42 <rmw_validate_full_topic_name+0xa2>
 8010a5c:	200b      	movs	r0, #11
 8010a5e:	e7b4      	b.n	80109ca <rmw_validate_full_topic_name+0x2a>
 8010a60:	2303      	movs	r3, #3
 8010a62:	6033      	str	r3, [r6, #0]
 8010a64:	2d00      	cmp	r5, #0
 8010a66:	d0af      	beq.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a68:	602f      	str	r7, [r5, #0]
 8010a6a:	e7ad      	b.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a6c:	28f7      	cmp	r0, #247	@ 0xf7
 8010a6e:	d802      	bhi.n	8010a76 <rmw_validate_full_topic_name+0xd6>
 8010a70:	2300      	movs	r3, #0
 8010a72:	6033      	str	r3, [r6, #0]
 8010a74:	e7a8      	b.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a76:	2307      	movs	r3, #7
 8010a78:	6033      	str	r3, [r6, #0]
 8010a7a:	2d00      	cmp	r5, #0
 8010a7c:	d0a4      	beq.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a7e:	23f6      	movs	r3, #246	@ 0xf6
 8010a80:	e7d8      	b.n	8010a34 <rmw_validate_full_topic_name+0x94>
 8010a82:	2205      	movs	r2, #5
 8010a84:	6032      	str	r2, [r6, #0]
 8010a86:	2d00      	cmp	r5, #0
 8010a88:	d1d4      	bne.n	8010a34 <rmw_validate_full_topic_name+0x94>
 8010a8a:	e79d      	b.n	80109c8 <rmw_validate_full_topic_name+0x28>
 8010a8c:	08014e3a 	.word	0x08014e3a

08010a90 <rmw_validate_namespace_with_size>:
 8010a90:	2800      	cmp	r0, #0
 8010a92:	d031      	beq.n	8010af8 <rmw_validate_namespace_with_size+0x68>
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	4614      	mov	r4, r2
 8010a98:	b0c2      	sub	sp, #264	@ 0x108
 8010a9a:	b1ba      	cbz	r2, 8010acc <rmw_validate_namespace_with_size+0x3c>
 8010a9c:	2901      	cmp	r1, #1
 8010a9e:	460e      	mov	r6, r1
 8010aa0:	461d      	mov	r5, r3
 8010aa2:	d102      	bne.n	8010aaa <rmw_validate_namespace_with_size+0x1a>
 8010aa4:	7803      	ldrb	r3, [r0, #0]
 8010aa6:	2b2f      	cmp	r3, #47	@ 0x2f
 8010aa8:	d015      	beq.n	8010ad6 <rmw_validate_namespace_with_size+0x46>
 8010aaa:	aa01      	add	r2, sp, #4
 8010aac:	4669      	mov	r1, sp
 8010aae:	f7ff ff77 	bl	80109a0 <rmw_validate_full_topic_name>
 8010ab2:	b960      	cbnz	r0, 8010ace <rmw_validate_namespace_with_size+0x3e>
 8010ab4:	9b00      	ldr	r3, [sp, #0]
 8010ab6:	b163      	cbz	r3, 8010ad2 <rmw_validate_namespace_with_size+0x42>
 8010ab8:	2b07      	cmp	r3, #7
 8010aba:	d00a      	beq.n	8010ad2 <rmw_validate_namespace_with_size+0x42>
 8010abc:	1e5a      	subs	r2, r3, #1
 8010abe:	2a05      	cmp	r2, #5
 8010ac0:	d81c      	bhi.n	8010afc <rmw_validate_namespace_with_size+0x6c>
 8010ac2:	e8df f002 	tbb	[pc, r2]
 8010ac6:	0c0c      	.short	0x0c0c
 8010ac8:	0c0c0c0c 	.word	0x0c0c0c0c
 8010acc:	200b      	movs	r0, #11
 8010ace:	b042      	add	sp, #264	@ 0x108
 8010ad0:	bd70      	pop	{r4, r5, r6, pc}
 8010ad2:	2ef5      	cmp	r6, #245	@ 0xf5
 8010ad4:	d809      	bhi.n	8010aea <rmw_validate_namespace_with_size+0x5a>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	6023      	str	r3, [r4, #0]
 8010ada:	2000      	movs	r0, #0
 8010adc:	e7f7      	b.n	8010ace <rmw_validate_namespace_with_size+0x3e>
 8010ade:	6023      	str	r3, [r4, #0]
 8010ae0:	2d00      	cmp	r5, #0
 8010ae2:	d0fa      	beq.n	8010ada <rmw_validate_namespace_with_size+0x4a>
 8010ae4:	9b01      	ldr	r3, [sp, #4]
 8010ae6:	602b      	str	r3, [r5, #0]
 8010ae8:	e7f7      	b.n	8010ada <rmw_validate_namespace_with_size+0x4a>
 8010aea:	2307      	movs	r3, #7
 8010aec:	6023      	str	r3, [r4, #0]
 8010aee:	2d00      	cmp	r5, #0
 8010af0:	d0f3      	beq.n	8010ada <rmw_validate_namespace_with_size+0x4a>
 8010af2:	23f4      	movs	r3, #244	@ 0xf4
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	e7f0      	b.n	8010ada <rmw_validate_namespace_with_size+0x4a>
 8010af8:	200b      	movs	r0, #11
 8010afa:	4770      	bx	lr
 8010afc:	4a03      	ldr	r2, [pc, #12]	@ (8010b0c <rmw_validate_namespace_with_size+0x7c>)
 8010afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b02:	a802      	add	r0, sp, #8
 8010b04:	f7ff fd04 	bl	8010510 <rcutils_snprintf>
 8010b08:	2001      	movs	r0, #1
 8010b0a:	e7e0      	b.n	8010ace <rmw_validate_namespace_with_size+0x3e>
 8010b0c:	080147d8 	.word	0x080147d8

08010b10 <rmw_validate_namespace>:
 8010b10:	b168      	cbz	r0, 8010b2e <rmw_validate_namespace+0x1e>
 8010b12:	b570      	push	{r4, r5, r6, lr}
 8010b14:	460d      	mov	r5, r1
 8010b16:	4616      	mov	r6, r2
 8010b18:	4604      	mov	r4, r0
 8010b1a:	f7ef fbe1 	bl	80002e0 <strlen>
 8010b1e:	4633      	mov	r3, r6
 8010b20:	4601      	mov	r1, r0
 8010b22:	462a      	mov	r2, r5
 8010b24:	4620      	mov	r0, r4
 8010b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b2a:	f7ff bfb1 	b.w	8010a90 <rmw_validate_namespace_with_size>
 8010b2e:	200b      	movs	r0, #11
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop

08010b34 <rmw_namespace_validation_result_string>:
 8010b34:	2807      	cmp	r0, #7
 8010b36:	bf9a      	itte	ls
 8010b38:	4b02      	ldrls	r3, [pc, #8]	@ (8010b44 <rmw_namespace_validation_result_string+0x10>)
 8010b3a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010b3e:	4802      	ldrhi	r0, [pc, #8]	@ (8010b48 <rmw_namespace_validation_result_string+0x14>)
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	080149d0 	.word	0x080149d0
 8010b48:	08014828 	.word	0x08014828

08010b4c <rmw_validate_node_name>:
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d037      	beq.n	8010bc0 <rmw_validate_node_name+0x74>
 8010b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b52:	460e      	mov	r6, r1
 8010b54:	2900      	cmp	r1, #0
 8010b56:	d035      	beq.n	8010bc4 <rmw_validate_node_name+0x78>
 8010b58:	4617      	mov	r7, r2
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	f7ef fbc0 	bl	80002e0 <strlen>
 8010b60:	b1d8      	cbz	r0, 8010b9a <rmw_validate_node_name+0x4e>
 8010b62:	1e63      	subs	r3, r4, #1
 8010b64:	1819      	adds	r1, r3, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010b6c:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8010b70:	f02e 0c20 	bic.w	ip, lr, #32
 8010b74:	2d09      	cmp	r5, #9
 8010b76:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010b7a:	d915      	bls.n	8010ba8 <rmw_validate_node_name+0x5c>
 8010b7c:	f1bc 0f19 	cmp.w	ip, #25
 8010b80:	d912      	bls.n	8010ba8 <rmw_validate_node_name+0x5c>
 8010b82:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010b86:	d00f      	beq.n	8010ba8 <rmw_validate_node_name+0x5c>
 8010b88:	2302      	movs	r3, #2
 8010b8a:	6033      	str	r3, [r6, #0]
 8010b8c:	b11f      	cbz	r7, 8010b96 <rmw_validate_node_name+0x4a>
 8010b8e:	f1c4 0401 	rsb	r4, r4, #1
 8010b92:	4414      	add	r4, r2
 8010b94:	603c      	str	r4, [r7, #0]
 8010b96:	2000      	movs	r0, #0
 8010b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	6033      	str	r3, [r6, #0]
 8010b9e:	2f00      	cmp	r7, #0
 8010ba0:	d0f9      	beq.n	8010b96 <rmw_validate_node_name+0x4a>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	603b      	str	r3, [r7, #0]
 8010ba6:	e7f6      	b.n	8010b96 <rmw_validate_node_name+0x4a>
 8010ba8:	4299      	cmp	r1, r3
 8010baa:	d1dc      	bne.n	8010b66 <rmw_validate_node_name+0x1a>
 8010bac:	7823      	ldrb	r3, [r4, #0]
 8010bae:	4a0c      	ldr	r2, [pc, #48]	@ (8010be0 <rmw_validate_node_name+0x94>)
 8010bb0:	5cd3      	ldrb	r3, [r2, r3]
 8010bb2:	f013 0304 	ands.w	r3, r3, #4
 8010bb6:	d10e      	bne.n	8010bd6 <rmw_validate_node_name+0x8a>
 8010bb8:	28ff      	cmp	r0, #255	@ 0xff
 8010bba:	d805      	bhi.n	8010bc8 <rmw_validate_node_name+0x7c>
 8010bbc:	6033      	str	r3, [r6, #0]
 8010bbe:	e7ea      	b.n	8010b96 <rmw_validate_node_name+0x4a>
 8010bc0:	200b      	movs	r0, #11
 8010bc2:	4770      	bx	lr
 8010bc4:	200b      	movs	r0, #11
 8010bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc8:	2304      	movs	r3, #4
 8010bca:	6033      	str	r3, [r6, #0]
 8010bcc:	2f00      	cmp	r7, #0
 8010bce:	d0e2      	beq.n	8010b96 <rmw_validate_node_name+0x4a>
 8010bd0:	23fe      	movs	r3, #254	@ 0xfe
 8010bd2:	603b      	str	r3, [r7, #0]
 8010bd4:	e7df      	b.n	8010b96 <rmw_validate_node_name+0x4a>
 8010bd6:	2303      	movs	r3, #3
 8010bd8:	6033      	str	r3, [r6, #0]
 8010bda:	2f00      	cmp	r7, #0
 8010bdc:	d1e1      	bne.n	8010ba2 <rmw_validate_node_name+0x56>
 8010bde:	e7da      	b.n	8010b96 <rmw_validate_node_name+0x4a>
 8010be0:	08014e3a 	.word	0x08014e3a

08010be4 <rmw_node_name_validation_result_string>:
 8010be4:	2804      	cmp	r0, #4
 8010be6:	bf9a      	itte	ls
 8010be8:	4b02      	ldrls	r3, [pc, #8]	@ (8010bf4 <rmw_node_name_validation_result_string+0x10>)
 8010bea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010bee:	4802      	ldrhi	r0, [pc, #8]	@ (8010bf8 <rmw_node_name_validation_result_string+0x14>)
 8010bf0:	4770      	bx	lr
 8010bf2:	bf00      	nop
 8010bf4:	08014adc 	.word	0x08014adc
 8010bf8:	080149f0 	.word	0x080149f0

08010bfc <on_status>:
 8010bfc:	b082      	sub	sp, #8
 8010bfe:	b002      	add	sp, #8
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop

08010c04 <on_topic>:
 8010c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c08:	4a22      	ldr	r2, [pc, #136]	@ (8010c94 <on_topic+0x90>)
 8010c0a:	b094      	sub	sp, #80	@ 0x50
 8010c0c:	6812      	ldr	r2, [r2, #0]
 8010c0e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8010c10:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010c14:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8010c18:	b3c2      	cbz	r2, 8010c8c <on_topic+0x88>
 8010c1a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8010c1e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8010c22:	e001      	b.n	8010c28 <on_topic+0x24>
 8010c24:	6852      	ldr	r2, [r2, #4]
 8010c26:	b38a      	cbz	r2, 8010c8c <on_topic+0x88>
 8010c28:	6894      	ldr	r4, [r2, #8]
 8010c2a:	8aa3      	ldrh	r3, [r4, #20]
 8010c2c:	428b      	cmp	r3, r1
 8010c2e:	d1f9      	bne.n	8010c24 <on_topic+0x20>
 8010c30:	7da3      	ldrb	r3, [r4, #22]
 8010c32:	4283      	cmp	r3, r0
 8010c34:	d1f6      	bne.n	8010c24 <on_topic+0x20>
 8010c36:	2248      	movs	r2, #72	@ 0x48
 8010c38:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010c3c:	4668      	mov	r0, sp
 8010c3e:	f002 fb08 	bl	8013252 <memcpy>
 8010c42:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8010c46:	cb0c      	ldmia	r3, {r2, r3}
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f7f9 fc4d 	bl	800a4e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010c4e:	4607      	mov	r7, r0
 8010c50:	b1e0      	cbz	r0, 8010c8c <on_topic+0x88>
 8010c52:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8010c56:	4632      	mov	r2, r6
 8010c58:	4628      	mov	r0, r5
 8010c5a:	f108 0110 	add.w	r1, r8, #16
 8010c5e:	f7fa f879 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 8010c62:	b930      	cbnz	r0, 8010c72 <on_topic+0x6e>
 8010c64:	480c      	ldr	r0, [pc, #48]	@ (8010c98 <on_topic+0x94>)
 8010c66:	4639      	mov	r1, r7
 8010c68:	b014      	add	sp, #80	@ 0x50
 8010c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c6e:	f000 b8bd 	b.w	8010dec <put_memory>
 8010c72:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8010c76:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8010c7a:	f000 f98b 	bl	8010f94 <rmw_uros_epoch_nanos>
 8010c7e:	2305      	movs	r3, #5
 8010c80:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8010c84:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010c88:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8010c8c:	b014      	add	sp, #80	@ 0x50
 8010c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c92:	bf00      	nop
 8010c94:	2000eaf8 	.word	0x2000eaf8
 8010c98:	2000e348 	.word	0x2000e348

08010c9c <on_request>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	4823      	ldr	r0, [pc, #140]	@ (8010d30 <on_request+0x94>)
 8010ca2:	b094      	sub	sp, #80	@ 0x50
 8010ca4:	6800      	ldr	r0, [r0, #0]
 8010ca6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010ca8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010cac:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d03b      	beq.n	8010d2a <on_request+0x8e>
 8010cb2:	461d      	mov	r5, r3
 8010cb4:	e001      	b.n	8010cba <on_request+0x1e>
 8010cb6:	6840      	ldr	r0, [r0, #4]
 8010cb8:	b3b8      	cbz	r0, 8010d2a <on_request+0x8e>
 8010cba:	6884      	ldr	r4, [r0, #8]
 8010cbc:	8b21      	ldrh	r1, [r4, #24]
 8010cbe:	4291      	cmp	r1, r2
 8010cc0:	d1f9      	bne.n	8010cb6 <on_request+0x1a>
 8010cc2:	2248      	movs	r2, #72	@ 0x48
 8010cc4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010cc8:	4668      	mov	r0, sp
 8010cca:	f002 fac2 	bl	8013252 <memcpy>
 8010cce:	f104 0320 	add.w	r3, r4, #32
 8010cd2:	cb0c      	ldmia	r3, {r2, r3}
 8010cd4:	4620      	mov	r0, r4
 8010cd6:	f7f9 fc07 	bl	800a4e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010cda:	4680      	mov	r8, r0
 8010cdc:	b328      	cbz	r0, 8010d2a <on_request+0x8e>
 8010cde:	4638      	mov	r0, r7
 8010ce0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010ce4:	4632      	mov	r2, r6
 8010ce6:	f107 0110 	add.w	r1, r7, #16
 8010cea:	f7fa f833 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 8010cee:	b930      	cbnz	r0, 8010cfe <on_request+0x62>
 8010cf0:	4810      	ldr	r0, [pc, #64]	@ (8010d34 <on_request+0x98>)
 8010cf2:	4641      	mov	r1, r8
 8010cf4:	b014      	add	sp, #80	@ 0x50
 8010cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cfa:	f000 b877 	b.w	8010dec <put_memory>
 8010cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d00:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8010d04:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8010d08:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010d0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010d14:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d18:	f000 f93c 	bl	8010f94 <rmw_uros_epoch_nanos>
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8010d22:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010d26:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8010d2a:	b014      	add	sp, #80	@ 0x50
 8010d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d30:	2000e6b0 	.word	0x2000e6b0
 8010d34:	2000e348 	.word	0x2000e348

08010d38 <on_reply>:
 8010d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d3c:	4821      	ldr	r0, [pc, #132]	@ (8010dc4 <on_reply+0x8c>)
 8010d3e:	b094      	sub	sp, #80	@ 0x50
 8010d40:	6800      	ldr	r0, [r0, #0]
 8010d42:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010d44:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010d48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010d4a:	b3b8      	cbz	r0, 8010dbc <on_reply+0x84>
 8010d4c:	461d      	mov	r5, r3
 8010d4e:	e001      	b.n	8010d54 <on_reply+0x1c>
 8010d50:	6840      	ldr	r0, [r0, #4]
 8010d52:	b398      	cbz	r0, 8010dbc <on_reply+0x84>
 8010d54:	6884      	ldr	r4, [r0, #8]
 8010d56:	8b21      	ldrh	r1, [r4, #24]
 8010d58:	4291      	cmp	r1, r2
 8010d5a:	d1f9      	bne.n	8010d50 <on_reply+0x18>
 8010d5c:	2248      	movs	r2, #72	@ 0x48
 8010d5e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010d62:	4668      	mov	r0, sp
 8010d64:	f002 fa75 	bl	8013252 <memcpy>
 8010d68:	f104 0320 	add.w	r3, r4, #32
 8010d6c:	cb0c      	ldmia	r3, {r2, r3}
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f7f9 fbba 	bl	800a4e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010d74:	4680      	mov	r8, r0
 8010d76:	b308      	cbz	r0, 8010dbc <on_reply+0x84>
 8010d78:	4638      	mov	r0, r7
 8010d7a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010d7e:	4632      	mov	r2, r6
 8010d80:	f107 0110 	add.w	r1, r7, #16
 8010d84:	f7f9 ffe6 	bl	800ad54 <ucdr_deserialize_array_uint8_t>
 8010d88:	b930      	cbnz	r0, 8010d98 <on_reply+0x60>
 8010d8a:	480f      	ldr	r0, [pc, #60]	@ (8010dc8 <on_reply+0x90>)
 8010d8c:	4641      	mov	r1, r8
 8010d8e:	b014      	add	sp, #80	@ 0x50
 8010d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d94:	f000 b82a 	b.w	8010dec <put_memory>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8010d9e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8010da2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010da6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8010daa:	f000 f8f3 	bl	8010f94 <rmw_uros_epoch_nanos>
 8010dae:	2304      	movs	r3, #4
 8010db0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8010db4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010db8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8010dbc:	b014      	add	sp, #80	@ 0x50
 8010dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc2:	bf00      	nop
 8010dc4:	2000e5d8 	.word	0x2000e5d8
 8010dc8:	2000e348 	.word	0x2000e348

08010dcc <get_memory>:
 8010dcc:	4603      	mov	r3, r0
 8010dce:	6840      	ldr	r0, [r0, #4]
 8010dd0:	b158      	cbz	r0, 8010dea <get_memory+0x1e>
 8010dd2:	6842      	ldr	r2, [r0, #4]
 8010dd4:	605a      	str	r2, [r3, #4]
 8010dd6:	b10a      	cbz	r2, 8010ddc <get_memory+0x10>
 8010dd8:	2100      	movs	r1, #0
 8010dda:	6011      	str	r1, [r2, #0]
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	6042      	str	r2, [r0, #4]
 8010de0:	b102      	cbz	r2, 8010de4 <get_memory+0x18>
 8010de2:	6010      	str	r0, [r2, #0]
 8010de4:	2200      	movs	r2, #0
 8010de6:	6002      	str	r2, [r0, #0]
 8010de8:	6018      	str	r0, [r3, #0]
 8010dea:	4770      	bx	lr

08010dec <put_memory>:
 8010dec:	680b      	ldr	r3, [r1, #0]
 8010dee:	b10b      	cbz	r3, 8010df4 <put_memory+0x8>
 8010df0:	684a      	ldr	r2, [r1, #4]
 8010df2:	605a      	str	r2, [r3, #4]
 8010df4:	684a      	ldr	r2, [r1, #4]
 8010df6:	b102      	cbz	r2, 8010dfa <put_memory+0xe>
 8010df8:	6013      	str	r3, [r2, #0]
 8010dfa:	6803      	ldr	r3, [r0, #0]
 8010dfc:	428b      	cmp	r3, r1
 8010dfe:	6843      	ldr	r3, [r0, #4]
 8010e00:	bf08      	it	eq
 8010e02:	6002      	streq	r2, [r0, #0]
 8010e04:	604b      	str	r3, [r1, #4]
 8010e06:	b103      	cbz	r3, 8010e0a <put_memory+0x1e>
 8010e08:	6019      	str	r1, [r3, #0]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	600b      	str	r3, [r1, #0]
 8010e0e:	6041      	str	r1, [r0, #4]
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop

08010e14 <rmw_destroy_client>:
 8010e14:	b570      	push	{r4, r5, r6, lr}
 8010e16:	b128      	cbz	r0, 8010e24 <rmw_destroy_client+0x10>
 8010e18:	4604      	mov	r4, r0
 8010e1a:	6800      	ldr	r0, [r0, #0]
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	f7f9 fc41 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8010e22:	b910      	cbnz	r0, 8010e2a <rmw_destroy_client+0x16>
 8010e24:	2401      	movs	r4, #1
 8010e26:	4620      	mov	r0, r4
 8010e28:	bd70      	pop	{r4, r5, r6, pc}
 8010e2a:	6863      	ldr	r3, [r4, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d0f9      	beq.n	8010e24 <rmw_destroy_client+0x10>
 8010e30:	2d00      	cmp	r5, #0
 8010e32:	d0f7      	beq.n	8010e24 <rmw_destroy_client+0x10>
 8010e34:	6828      	ldr	r0, [r5, #0]
 8010e36:	f7f9 fc35 	bl	800a6a4 <is_uxrce_rmw_identifier_valid>
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d0f2      	beq.n	8010e24 <rmw_destroy_client+0x10>
 8010e3e:	686e      	ldr	r6, [r5, #4]
 8010e40:	2e00      	cmp	r6, #0
 8010e42:	d0ef      	beq.n	8010e24 <rmw_destroy_client+0x10>
 8010e44:	6864      	ldr	r4, [r4, #4]
 8010e46:	6932      	ldr	r2, [r6, #16]
 8010e48:	6920      	ldr	r0, [r4, #16]
 8010e4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010e4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e52:	6819      	ldr	r1, [r3, #0]
 8010e54:	f7fb fbd2 	bl	800c5fc <uxr_buffer_cancel_data>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	6920      	ldr	r0, [r4, #16]
 8010e5c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010e60:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010e64:	f7f9 fb98 	bl	800a598 <run_xrce_session>
 8010e68:	6920      	ldr	r0, [r4, #16]
 8010e6a:	6932      	ldr	r2, [r6, #16]
 8010e6c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010e70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010e74:	6819      	ldr	r1, [r3, #0]
 8010e76:	f7fb f98f 	bl	800c198 <uxr_buffer_delete_entity>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	6920      	ldr	r0, [r4, #16]
 8010e7e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010e82:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010e86:	f7f9 fb87 	bl	800a598 <run_xrce_session>
 8010e8a:	f080 0401 	eor.w	r4, r0, #1
 8010e8e:	b2e4      	uxtb	r4, r4
 8010e90:	4628      	mov	r0, r5
 8010e92:	0064      	lsls	r4, r4, #1
 8010e94:	f7f9 fb06 	bl	800a4a4 <rmw_uxrce_fini_client_memory>
 8010e98:	e7c5      	b.n	8010e26 <rmw_destroy_client+0x12>
 8010e9a:	bf00      	nop

08010e9c <rmw_get_implementation_identifier>:
 8010e9c:	4b01      	ldr	r3, [pc, #4]	@ (8010ea4 <rmw_get_implementation_identifier+0x8>)
 8010e9e:	6818      	ldr	r0, [r3, #0]
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	08014b08 	.word	0x08014b08

08010ea8 <create_topic>:
 8010ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eac:	4604      	mov	r4, r0
 8010eae:	b084      	sub	sp, #16
 8010eb0:	4824      	ldr	r0, [pc, #144]	@ (8010f44 <create_topic+0x9c>)
 8010eb2:	460f      	mov	r7, r1
 8010eb4:	4616      	mov	r6, r2
 8010eb6:	f7ff ff89 	bl	8010dcc <get_memory>
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d03c      	beq.n	8010f38 <create_topic+0x90>
 8010ebe:	6923      	ldr	r3, [r4, #16]
 8010ec0:	6885      	ldr	r5, [r0, #8]
 8010ec2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8010f4c <create_topic+0xa4>
 8010ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010eca:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8010ece:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8010ed2:	1c42      	adds	r2, r0, #1
 8010ed4:	2102      	movs	r1, #2
 8010ed6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8010eda:	f7fb fb61 	bl	800c5a0 <uxr_object_id>
 8010ede:	223c      	movs	r2, #60	@ 0x3c
 8010ee0:	6128      	str	r0, [r5, #16]
 8010ee2:	4641      	mov	r1, r8
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	f7f9 fbc3 	bl	800a670 <generate_topic_name>
 8010eea:	b310      	cbz	r0, 8010f32 <create_topic+0x8a>
 8010eec:	4f16      	ldr	r7, [pc, #88]	@ (8010f48 <create_topic+0xa0>)
 8010eee:	4630      	mov	r0, r6
 8010ef0:	2264      	movs	r2, #100	@ 0x64
 8010ef2:	4639      	mov	r1, r7
 8010ef4:	f7f9 fb8c 	bl	800a610 <generate_type_name>
 8010ef8:	b1d8      	cbz	r0, 8010f32 <create_topic+0x8a>
 8010efa:	6920      	ldr	r0, [r4, #16]
 8010efc:	2306      	movs	r3, #6
 8010efe:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010f02:	f8cd 8000 	str.w	r8, [sp]
 8010f06:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010f0a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f0e:	6811      	ldr	r1, [r2, #0]
 8010f10:	6963      	ldr	r3, [r4, #20]
 8010f12:	692a      	ldr	r2, [r5, #16]
 8010f14:	f7fb f9bc 	bl	800c290 <uxr_buffer_create_topic_bin>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	6920      	ldr	r0, [r4, #16]
 8010f1c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010f20:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010f24:	f7f9 fb38 	bl	800a598 <run_xrce_session>
 8010f28:	b118      	cbz	r0, 8010f32 <create_topic+0x8a>
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	b004      	add	sp, #16
 8010f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f32:	4628      	mov	r0, r5
 8010f34:	f7f9 facc 	bl	800a4d0 <rmw_uxrce_fini_topic_memory>
 8010f38:	2500      	movs	r5, #0
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	b004      	add	sp, #16
 8010f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f42:	bf00      	nop
 8010f44:	2000e4fc 	.word	0x2000e4fc
 8010f48:	20010ab0 	.word	0x20010ab0
 8010f4c:	20010b14 	.word	0x20010b14

08010f50 <destroy_topic>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	6984      	ldr	r4, [r0, #24]
 8010f54:	b1d4      	cbz	r4, 8010f8c <destroy_topic+0x3c>
 8010f56:	4605      	mov	r5, r0
 8010f58:	6920      	ldr	r0, [r4, #16]
 8010f5a:	692a      	ldr	r2, [r5, #16]
 8010f5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010f60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f64:	6819      	ldr	r1, [r3, #0]
 8010f66:	f7fb f917 	bl	800c198 <uxr_buffer_delete_entity>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	6920      	ldr	r0, [r4, #16]
 8010f6e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010f72:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010f76:	f7f9 fb0f 	bl	800a598 <run_xrce_session>
 8010f7a:	f080 0401 	eor.w	r4, r0, #1
 8010f7e:	b2e4      	uxtb	r4, r4
 8010f80:	4628      	mov	r0, r5
 8010f82:	0064      	lsls	r4, r4, #1
 8010f84:	f7f9 faa4 	bl	800a4d0 <rmw_uxrce_fini_topic_memory>
 8010f88:	4620      	mov	r0, r4
 8010f8a:	bd38      	pop	{r3, r4, r5, pc}
 8010f8c:	2401      	movs	r4, #1
 8010f8e:	4620      	mov	r0, r4
 8010f90:	bd38      	pop	{r3, r4, r5, pc}
 8010f92:	bf00      	nop

08010f94 <rmw_uros_epoch_nanos>:
 8010f94:	4b05      	ldr	r3, [pc, #20]	@ (8010fac <rmw_uros_epoch_nanos+0x18>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	b123      	cbz	r3, 8010fa4 <rmw_uros_epoch_nanos+0x10>
 8010f9a:	6898      	ldr	r0, [r3, #8]
 8010f9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010fa0:	f7fb bd20 	b.w	800c9e4 <uxr_epoch_nanos>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	200109e8 	.word	0x200109e8

08010fb0 <std_msgs__msg__Header__get_type_hash>:
 8010fb0:	4800      	ldr	r0, [pc, #0]	@ (8010fb4 <std_msgs__msg__Header__get_type_hash+0x4>)
 8010fb2:	4770      	bx	lr
 8010fb4:	200008b4 	.word	0x200008b4

08010fb8 <std_msgs__msg__Header__get_type_description>:
 8010fb8:	b510      	push	{r4, lr}
 8010fba:	4c08      	ldr	r4, [pc, #32]	@ (8010fdc <std_msgs__msg__Header__get_type_description+0x24>)
 8010fbc:	7820      	ldrb	r0, [r4, #0]
 8010fbe:	b108      	cbz	r0, 8010fc4 <std_msgs__msg__Header__get_type_description+0xc>
 8010fc0:	4807      	ldr	r0, [pc, #28]	@ (8010fe0 <std_msgs__msg__Header__get_type_description+0x28>)
 8010fc2:	bd10      	pop	{r4, pc}
 8010fc4:	f7f9 fd58 	bl	800aa78 <builtin_interfaces__msg__Time__get_type_description>
 8010fc8:	300c      	adds	r0, #12
 8010fca:	c807      	ldmia	r0, {r0, r1, r2}
 8010fcc:	4b05      	ldr	r3, [pc, #20]	@ (8010fe4 <std_msgs__msg__Header__get_type_description+0x2c>)
 8010fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	4802      	ldr	r0, [pc, #8]	@ (8010fe0 <std_msgs__msg__Header__get_type_description+0x28>)
 8010fd6:	7023      	strb	r3, [r4, #0]
 8010fd8:	bd10      	pop	{r4, pc}
 8010fda:	bf00      	nop
 8010fdc:	20010b99 	.word	0x20010b99
 8010fe0:	08014b3c 	.word	0x08014b3c
 8010fe4:	20000a2c 	.word	0x20000a2c

08010fe8 <std_msgs__msg__Header__get_individual_type_description_source>:
 8010fe8:	4800      	ldr	r0, [pc, #0]	@ (8010fec <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 8010fea:	4770      	bx	lr
 8010fec:	08014b18 	.word	0x08014b18

08010ff0 <std_msgs__msg__Header__get_type_description_sources>:
 8010ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8011030 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 8010ff4:	7837      	ldrb	r7, [r6, #0]
 8010ff6:	b10f      	cbz	r7, 8010ffc <std_msgs__msg__Header__get_type_description_sources+0xc>
 8010ff8:	480e      	ldr	r0, [pc, #56]	@ (8011034 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8010ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ffc:	4d0e      	ldr	r5, [pc, #56]	@ (8011038 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8010ffe:	4c0f      	ldr	r4, [pc, #60]	@ (801103c <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8011000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011008:	682b      	ldr	r3, [r5, #0]
 801100a:	f844 3b04 	str.w	r3, [r4], #4
 801100e:	4638      	mov	r0, r7
 8011010:	f7f9 fd3e 	bl	800aa90 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8011014:	2301      	movs	r3, #1
 8011016:	4684      	mov	ip, r0
 8011018:	7033      	strb	r3, [r6, #0]
 801101a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011020:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011026:	f8dc 3000 	ldr.w	r3, [ip]
 801102a:	4802      	ldr	r0, [pc, #8]	@ (8011034 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011030:	20010b98 	.word	0x20010b98
 8011034:	08014b0c 	.word	0x08014b0c
 8011038:	08014b18 	.word	0x08014b18
 801103c:	20010b50 	.word	0x20010b50

08011040 <std_msgs__msg__Header__init>:
 8011040:	b1d8      	cbz	r0, 801107a <std_msgs__msg__Header__init+0x3a>
 8011042:	b538      	push	{r3, r4, r5, lr}
 8011044:	4604      	mov	r4, r0
 8011046:	f000 f827 	bl	8011098 <builtin_interfaces__msg__Time__init>
 801104a:	b130      	cbz	r0, 801105a <std_msgs__msg__Header__init+0x1a>
 801104c:	f104 0508 	add.w	r5, r4, #8
 8011050:	4628      	mov	r0, r5
 8011052:	f001 faab 	bl	80125ac <rosidl_runtime_c__String__init>
 8011056:	b148      	cbz	r0, 801106c <std_msgs__msg__Header__init+0x2c>
 8011058:	bd38      	pop	{r3, r4, r5, pc}
 801105a:	4620      	mov	r0, r4
 801105c:	f000 f820 	bl	80110a0 <builtin_interfaces__msg__Time__fini>
 8011060:	f104 0008 	add.w	r0, r4, #8
 8011064:	f001 fabc 	bl	80125e0 <rosidl_runtime_c__String__fini>
 8011068:	2000      	movs	r0, #0
 801106a:	bd38      	pop	{r3, r4, r5, pc}
 801106c:	4620      	mov	r0, r4
 801106e:	f000 f817 	bl	80110a0 <builtin_interfaces__msg__Time__fini>
 8011072:	4628      	mov	r0, r5
 8011074:	f001 fab4 	bl	80125e0 <rosidl_runtime_c__String__fini>
 8011078:	e7f6      	b.n	8011068 <std_msgs__msg__Header__init+0x28>
 801107a:	2000      	movs	r0, #0
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop

08011080 <std_msgs__msg__Header__fini>:
 8011080:	b148      	cbz	r0, 8011096 <std_msgs__msg__Header__fini+0x16>
 8011082:	b510      	push	{r4, lr}
 8011084:	4604      	mov	r4, r0
 8011086:	f000 f80b 	bl	80110a0 <builtin_interfaces__msg__Time__fini>
 801108a:	f104 0008 	add.w	r0, r4, #8
 801108e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011092:	f001 baa5 	b.w	80125e0 <rosidl_runtime_c__String__fini>
 8011096:	4770      	bx	lr

08011098 <builtin_interfaces__msg__Time__init>:
 8011098:	3800      	subs	r0, #0
 801109a:	bf18      	it	ne
 801109c:	2001      	movne	r0, #1
 801109e:	4770      	bx	lr

080110a0 <builtin_interfaces__msg__Time__fini>:
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop

080110a4 <ucdr_serialize_string>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	4605      	mov	r5, r0
 80110a8:	4608      	mov	r0, r1
 80110aa:	460c      	mov	r4, r1
 80110ac:	f7ef f918 	bl	80002e0 <strlen>
 80110b0:	4621      	mov	r1, r4
 80110b2:	1c42      	adds	r2, r0, #1
 80110b4:	4628      	mov	r0, r5
 80110b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110ba:	f7f7 beab 	b.w	8008e14 <ucdr_serialize_sequence_char>
 80110be:	bf00      	nop

080110c0 <ucdr_deserialize_string>:
 80110c0:	b500      	push	{lr}
 80110c2:	b083      	sub	sp, #12
 80110c4:	ab01      	add	r3, sp, #4
 80110c6:	f7f7 feb7 	bl	8008e38 <ucdr_deserialize_sequence_char>
 80110ca:	b003      	add	sp, #12
 80110cc:	f85d fb04 	ldr.w	pc, [sp], #4

080110d0 <uxr_init_input_best_effort_stream>:
 80110d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80110d4:	8003      	strh	r3, [r0, #0]
 80110d6:	4770      	bx	lr

080110d8 <uxr_reset_input_best_effort_stream>:
 80110d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80110dc:	8003      	strh	r3, [r0, #0]
 80110de:	4770      	bx	lr

080110e0 <uxr_receive_best_effort_message>:
 80110e0:	b538      	push	{r3, r4, r5, lr}
 80110e2:	4604      	mov	r4, r0
 80110e4:	8800      	ldrh	r0, [r0, #0]
 80110e6:	460d      	mov	r5, r1
 80110e8:	f000 fd28 	bl	8011b3c <uxr_seq_num_cmp>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80110f4:	bfb8      	it	lt
 80110f6:	8025      	strhlt	r5, [r4, #0]
 80110f8:	bd38      	pop	{r3, r4, r5, pc}
 80110fa:	bf00      	nop

080110fc <on_full_input_buffer>:
 80110fc:	b570      	push	{r4, r5, r6, lr}
 80110fe:	4605      	mov	r5, r0
 8011100:	460c      	mov	r4, r1
 8011102:	682b      	ldr	r3, [r5, #0]
 8011104:	6809      	ldr	r1, [r1, #0]
 8011106:	8920      	ldrh	r0, [r4, #8]
 8011108:	6862      	ldr	r2, [r4, #4]
 801110a:	fbb2 f2f0 	udiv	r2, r2, r0
 801110e:	1a5b      	subs	r3, r3, r1
 8011110:	fbb3 f3f2 	udiv	r3, r3, r2
 8011114:	3301      	adds	r3, #1
 8011116:	b29b      	uxth	r3, r3
 8011118:	fbb3 f6f0 	udiv	r6, r3, r0
 801111c:	fb00 3316 	mls	r3, r0, r6, r3
 8011120:	b29b      	uxth	r3, r3
 8011122:	fb02 f303 	mul.w	r3, r2, r3
 8011126:	1d18      	adds	r0, r3, #4
 8011128:	4408      	add	r0, r1
 801112a:	7d26      	ldrb	r6, [r4, #20]
 801112c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8011130:	b116      	cbz	r6, 8011138 <on_full_input_buffer+0x3c>
 8011132:	2600      	movs	r6, #0
 8011134:	f840 6c04 	str.w	r6, [r0, #-4]
 8011138:	2a03      	cmp	r2, #3
 801113a:	d801      	bhi.n	8011140 <on_full_input_buffer+0x44>
 801113c:	2001      	movs	r0, #1
 801113e:	bd70      	pop	{r4, r5, r6, pc}
 8011140:	3308      	adds	r3, #8
 8011142:	4419      	add	r1, r3
 8011144:	4628      	mov	r0, r5
 8011146:	692b      	ldr	r3, [r5, #16]
 8011148:	3a04      	subs	r2, #4
 801114a:	f7f7 fdeb 	bl	8008d24 <ucdr_init_buffer_origin>
 801114e:	4628      	mov	r0, r5
 8011150:	4902      	ldr	r1, [pc, #8]	@ (801115c <on_full_input_buffer+0x60>)
 8011152:	4622      	mov	r2, r4
 8011154:	f7f7 fdc2 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 8011158:	2000      	movs	r0, #0
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	080110fd 	.word	0x080110fd

08011160 <uxr_init_input_reliable_stream>:
 8011160:	b500      	push	{lr}
 8011162:	e9c0 1200 	strd	r1, r2, [r0]
 8011166:	f04f 0e00 	mov.w	lr, #0
 801116a:	9a01      	ldr	r2, [sp, #4]
 801116c:	8103      	strh	r3, [r0, #8]
 801116e:	6102      	str	r2, [r0, #16]
 8011170:	f880 e014 	strb.w	lr, [r0, #20]
 8011174:	b1d3      	cbz	r3, 80111ac <uxr_init_input_reliable_stream+0x4c>
 8011176:	f8c1 e000 	str.w	lr, [r1]
 801117a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801117e:	f1bc 0f01 	cmp.w	ip, #1
 8011182:	d913      	bls.n	80111ac <uxr_init_input_reliable_stream+0x4c>
 8011184:	2301      	movs	r3, #1
 8011186:	fbb3 f1fc 	udiv	r1, r3, ip
 801118a:	fb0c 3111 	mls	r1, ip, r1, r3
 801118e:	b289      	uxth	r1, r1
 8011190:	6842      	ldr	r2, [r0, #4]
 8011192:	fbb2 f2fc 	udiv	r2, r2, ip
 8011196:	fb01 f202 	mul.w	r2, r1, r2
 801119a:	6801      	ldr	r1, [r0, #0]
 801119c:	f841 e002 	str.w	lr, [r1, r2]
 80111a0:	3301      	adds	r3, #1
 80111a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	459c      	cmp	ip, r3
 80111aa:	d8ec      	bhi.n	8011186 <uxr_init_input_reliable_stream+0x26>
 80111ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111b0:	60c3      	str	r3, [r0, #12]
 80111b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80111b6:	bf00      	nop

080111b8 <uxr_reset_input_reliable_stream>:
 80111b8:	8901      	ldrh	r1, [r0, #8]
 80111ba:	b1e9      	cbz	r1, 80111f8 <uxr_reset_input_reliable_stream+0x40>
 80111bc:	f04f 0c00 	mov.w	ip, #0
 80111c0:	b500      	push	{lr}
 80111c2:	4663      	mov	r3, ip
 80111c4:	46e6      	mov	lr, ip
 80111c6:	fbb3 f2f1 	udiv	r2, r3, r1
 80111ca:	fb01 3312 	mls	r3, r1, r2, r3
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	6842      	ldr	r2, [r0, #4]
 80111d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80111d6:	fb03 f202 	mul.w	r2, r3, r2
 80111da:	6803      	ldr	r3, [r0, #0]
 80111dc:	f843 e002 	str.w	lr, [r3, r2]
 80111e0:	f10c 0c01 	add.w	ip, ip, #1
 80111e4:	8901      	ldrh	r1, [r0, #8]
 80111e6:	fa1f f38c 	uxth.w	r3, ip
 80111ea:	4299      	cmp	r1, r3
 80111ec:	d8eb      	bhi.n	80111c6 <uxr_reset_input_reliable_stream+0xe>
 80111ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111f2:	60c3      	str	r3, [r0, #12]
 80111f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80111f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111fc:	60c3      	str	r3, [r0, #12]
 80111fe:	4770      	bx	lr

08011200 <uxr_receive_reliable_message>:
 8011200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011204:	4604      	mov	r4, r0
 8011206:	460d      	mov	r5, r1
 8011208:	8901      	ldrh	r1, [r0, #8]
 801120a:	8980      	ldrh	r0, [r0, #12]
 801120c:	4690      	mov	r8, r2
 801120e:	461f      	mov	r7, r3
 8011210:	f000 fc8c 	bl	8011b2c <uxr_seq_num_add>
 8011214:	4629      	mov	r1, r5
 8011216:	4606      	mov	r6, r0
 8011218:	89a0      	ldrh	r0, [r4, #12]
 801121a:	f000 fc8f 	bl	8011b3c <uxr_seq_num_cmp>
 801121e:	2800      	cmp	r0, #0
 8011220:	db0a      	blt.n	8011238 <uxr_receive_reliable_message+0x38>
 8011222:	2600      	movs	r6, #0
 8011224:	89e0      	ldrh	r0, [r4, #14]
 8011226:	4629      	mov	r1, r5
 8011228:	f000 fc88 	bl	8011b3c <uxr_seq_num_cmp>
 801122c:	2800      	cmp	r0, #0
 801122e:	bfb8      	it	lt
 8011230:	81e5      	strhlt	r5, [r4, #14]
 8011232:	4630      	mov	r0, r6
 8011234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011238:	4630      	mov	r0, r6
 801123a:	4629      	mov	r1, r5
 801123c:	f000 fc7e 	bl	8011b3c <uxr_seq_num_cmp>
 8011240:	2800      	cmp	r0, #0
 8011242:	dbee      	blt.n	8011222 <uxr_receive_reliable_message+0x22>
 8011244:	6923      	ldr	r3, [r4, #16]
 8011246:	4640      	mov	r0, r8
 8011248:	4798      	blx	r3
 801124a:	2101      	movs	r1, #1
 801124c:	4606      	mov	r6, r0
 801124e:	89a0      	ldrh	r0, [r4, #12]
 8011250:	f000 fc6c 	bl	8011b2c <uxr_seq_num_add>
 8011254:	b90e      	cbnz	r6, 801125a <uxr_receive_reliable_message+0x5a>
 8011256:	4285      	cmp	r5, r0
 8011258:	d046      	beq.n	80112e8 <uxr_receive_reliable_message+0xe8>
 801125a:	8921      	ldrh	r1, [r4, #8]
 801125c:	fbb5 f2f1 	udiv	r2, r5, r1
 8011260:	fb01 5212 	mls	r2, r1, r2, r5
 8011264:	b292      	uxth	r2, r2
 8011266:	6863      	ldr	r3, [r4, #4]
 8011268:	6820      	ldr	r0, [r4, #0]
 801126a:	fbb3 f3f1 	udiv	r3, r3, r1
 801126e:	fb02 f303 	mul.w	r3, r2, r3
 8011272:	3304      	adds	r3, #4
 8011274:	4418      	add	r0, r3
 8011276:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1d1      	bne.n	8011222 <uxr_receive_reliable_message+0x22>
 801127e:	4641      	mov	r1, r8
 8011280:	463a      	mov	r2, r7
 8011282:	f001 ffe6 	bl	8013252 <memcpy>
 8011286:	8921      	ldrh	r1, [r4, #8]
 8011288:	fbb5 f2f1 	udiv	r2, r5, r1
 801128c:	fb01 5212 	mls	r2, r1, r2, r5
 8011290:	b292      	uxth	r2, r2
 8011292:	6863      	ldr	r3, [r4, #4]
 8011294:	fbb3 f3f1 	udiv	r3, r3, r1
 8011298:	fb02 f303 	mul.w	r3, r2, r3
 801129c:	6822      	ldr	r2, [r4, #0]
 801129e:	50d7      	str	r7, [r2, r3]
 80112a0:	9a06      	ldr	r2, [sp, #24]
 80112a2:	2301      	movs	r3, #1
 80112a4:	7013      	strb	r3, [r2, #0]
 80112a6:	2e00      	cmp	r6, #0
 80112a8:	d0bb      	beq.n	8011222 <uxr_receive_reliable_message+0x22>
 80112aa:	89a6      	ldrh	r6, [r4, #12]
 80112ac:	2101      	movs	r1, #1
 80112ae:	4630      	mov	r0, r6
 80112b0:	f000 fc3c 	bl	8011b2c <uxr_seq_num_add>
 80112b4:	8921      	ldrh	r1, [r4, #8]
 80112b6:	fbb0 f2f1 	udiv	r2, r0, r1
 80112ba:	fb01 0212 	mls	r2, r1, r2, r0
 80112be:	b292      	uxth	r2, r2
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80112c6:	4606      	mov	r6, r0
 80112c8:	fb02 f303 	mul.w	r3, r2, r3
 80112cc:	6820      	ldr	r0, [r4, #0]
 80112ce:	3304      	adds	r3, #4
 80112d0:	4418      	add	r0, r3
 80112d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0a3      	beq.n	8011222 <uxr_receive_reliable_message+0x22>
 80112da:	6923      	ldr	r3, [r4, #16]
 80112dc:	4798      	blx	r3
 80112de:	2802      	cmp	r0, #2
 80112e0:	d005      	beq.n	80112ee <uxr_receive_reliable_message+0xee>
 80112e2:	2801      	cmp	r0, #1
 80112e4:	d0e2      	beq.n	80112ac <uxr_receive_reliable_message+0xac>
 80112e6:	e79c      	b.n	8011222 <uxr_receive_reliable_message+0x22>
 80112e8:	9b06      	ldr	r3, [sp, #24]
 80112ea:	81a5      	strh	r5, [r4, #12]
 80112ec:	701e      	strb	r6, [r3, #0]
 80112ee:	2601      	movs	r6, #1
 80112f0:	e798      	b.n	8011224 <uxr_receive_reliable_message+0x24>
 80112f2:	bf00      	nop

080112f4 <uxr_next_input_reliable_buffer_available>:
 80112f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f8:	4604      	mov	r4, r0
 80112fa:	460f      	mov	r7, r1
 80112fc:	8980      	ldrh	r0, [r0, #12]
 80112fe:	2101      	movs	r1, #1
 8011300:	4690      	mov	r8, r2
 8011302:	f000 fc13 	bl	8011b2c <uxr_seq_num_add>
 8011306:	8921      	ldrh	r1, [r4, #8]
 8011308:	fbb0 f2f1 	udiv	r2, r0, r1
 801130c:	fb01 0212 	mls	r2, r1, r2, r0
 8011310:	b292      	uxth	r2, r2
 8011312:	6863      	ldr	r3, [r4, #4]
 8011314:	6826      	ldr	r6, [r4, #0]
 8011316:	fbb3 f3f1 	udiv	r3, r3, r1
 801131a:	fb02 f303 	mul.w	r3, r2, r3
 801131e:	3304      	adds	r3, #4
 8011320:	441e      	add	r6, r3
 8011322:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8011326:	f1b9 0f00 	cmp.w	r9, #0
 801132a:	d023      	beq.n	8011374 <uxr_next_input_reliable_buffer_available+0x80>
 801132c:	6923      	ldr	r3, [r4, #16]
 801132e:	4605      	mov	r5, r0
 8011330:	4630      	mov	r0, r6
 8011332:	4798      	blx	r3
 8011334:	4682      	mov	sl, r0
 8011336:	b300      	cbz	r0, 801137a <uxr_next_input_reliable_buffer_available+0x86>
 8011338:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801133c:	2101      	movs	r1, #1
 801133e:	4650      	mov	r0, sl
 8011340:	f000 fbf4 	bl	8011b2c <uxr_seq_num_add>
 8011344:	8921      	ldrh	r1, [r4, #8]
 8011346:	fbb0 f2f1 	udiv	r2, r0, r1
 801134a:	4682      	mov	sl, r0
 801134c:	fb01 0212 	mls	r2, r1, r2, r0
 8011350:	e9d4 0300 	ldrd	r0, r3, [r4]
 8011354:	b292      	uxth	r2, r2
 8011356:	fbb3 f3f1 	udiv	r3, r3, r1
 801135a:	fb02 f303 	mul.w	r3, r2, r3
 801135e:	3304      	adds	r3, #4
 8011360:	4418      	add	r0, r3
 8011362:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011366:	b12b      	cbz	r3, 8011374 <uxr_next_input_reliable_buffer_available+0x80>
 8011368:	6923      	ldr	r3, [r4, #16]
 801136a:	4798      	blx	r3
 801136c:	2802      	cmp	r0, #2
 801136e:	d01b      	beq.n	80113a8 <uxr_next_input_reliable_buffer_available+0xb4>
 8011370:	2801      	cmp	r0, #1
 8011372:	d0e3      	beq.n	801133c <uxr_next_input_reliable_buffer_available+0x48>
 8011374:	2000      	movs	r0, #0
 8011376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137a:	464a      	mov	r2, r9
 801137c:	4631      	mov	r1, r6
 801137e:	4638      	mov	r0, r7
 8011380:	f7f7 fcd8 	bl	8008d34 <ucdr_init_buffer>
 8011384:	8921      	ldrh	r1, [r4, #8]
 8011386:	fbb5 f2f1 	udiv	r2, r5, r1
 801138a:	fb01 5212 	mls	r2, r1, r2, r5
 801138e:	b292      	uxth	r2, r2
 8011390:	6863      	ldr	r3, [r4, #4]
 8011392:	fbb3 f3f1 	udiv	r3, r3, r1
 8011396:	fb02 f303 	mul.w	r3, r2, r3
 801139a:	6822      	ldr	r2, [r4, #0]
 801139c:	f842 a003 	str.w	sl, [r2, r3]
 80113a0:	81a5      	strh	r5, [r4, #12]
 80113a2:	2001      	movs	r0, #1
 80113a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a8:	eb06 0108 	add.w	r1, r6, r8
 80113ac:	8926      	ldrh	r6, [r4, #8]
 80113ae:	fbb5 f0f6 	udiv	r0, r5, r6
 80113b2:	fb06 5010 	mls	r0, r6, r0, r5
 80113b6:	b280      	uxth	r0, r0
 80113b8:	6863      	ldr	r3, [r4, #4]
 80113ba:	fbb3 f3f6 	udiv	r3, r3, r6
 80113be:	fb00 f303 	mul.w	r3, r0, r3
 80113c2:	6820      	ldr	r0, [r4, #0]
 80113c4:	2500      	movs	r5, #0
 80113c6:	50c5      	str	r5, [r0, r3]
 80113c8:	eba9 0208 	sub.w	r2, r9, r8
 80113cc:	4638      	mov	r0, r7
 80113ce:	f7f7 fcb1 	bl	8008d34 <ucdr_init_buffer>
 80113d2:	4903      	ldr	r1, [pc, #12]	@ (80113e0 <uxr_next_input_reliable_buffer_available+0xec>)
 80113d4:	4622      	mov	r2, r4
 80113d6:	4638      	mov	r0, r7
 80113d8:	f7f7 fc80 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 80113dc:	4655      	mov	r5, sl
 80113de:	e7df      	b.n	80113a0 <uxr_next_input_reliable_buffer_available+0xac>
 80113e0:	080110fd 	.word	0x080110fd

080113e4 <uxr_process_heartbeat>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4611      	mov	r1, r2
 80113e8:	4604      	mov	r4, r0
 80113ea:	89c0      	ldrh	r0, [r0, #14]
 80113ec:	4615      	mov	r5, r2
 80113ee:	f000 fba5 	bl	8011b3c <uxr_seq_num_cmp>
 80113f2:	2800      	cmp	r0, #0
 80113f4:	bfb8      	it	lt
 80113f6:	81e5      	strhlt	r5, [r4, #14]
 80113f8:	bd38      	pop	{r3, r4, r5, pc}
 80113fa:	bf00      	nop

080113fc <uxr_compute_acknack>:
 80113fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011400:	8903      	ldrh	r3, [r0, #8]
 8011402:	8985      	ldrh	r5, [r0, #12]
 8011404:	4604      	mov	r4, r0
 8011406:	460e      	mov	r6, r1
 8011408:	2b00      	cmp	r3, #0
 801140a:	d048      	beq.n	801149e <uxr_compute_acknack+0xa2>
 801140c:	4628      	mov	r0, r5
 801140e:	2701      	movs	r7, #1
 8011410:	e003      	b.n	801141a <uxr_compute_acknack+0x1e>
 8011412:	4567      	cmp	r7, ip
 8011414:	d243      	bcs.n	801149e <uxr_compute_acknack+0xa2>
 8011416:	89a0      	ldrh	r0, [r4, #12]
 8011418:	3701      	adds	r7, #1
 801141a:	b2b9      	uxth	r1, r7
 801141c:	f000 fb86 	bl	8011b2c <uxr_seq_num_add>
 8011420:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011424:	fbb0 f2fc 	udiv	r2, r0, ip
 8011428:	e9d4 1300 	ldrd	r1, r3, [r4]
 801142c:	fb0c 0212 	mls	r2, ip, r2, r0
 8011430:	b292      	uxth	r2, r2
 8011432:	fbb3 f3fc 	udiv	r3, r3, ip
 8011436:	fb02 f303 	mul.w	r3, r2, r3
 801143a:	58cb      	ldr	r3, [r1, r3]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d1e8      	bne.n	8011412 <uxr_compute_acknack+0x16>
 8011440:	8030      	strh	r0, [r6, #0]
 8011442:	2101      	movs	r1, #1
 8011444:	89e5      	ldrh	r5, [r4, #14]
 8011446:	f000 fb75 	bl	8011b34 <uxr_seq_num_sub>
 801144a:	4601      	mov	r1, r0
 801144c:	4628      	mov	r0, r5
 801144e:	f000 fb71 	bl	8011b34 <uxr_seq_num_sub>
 8011452:	4605      	mov	r5, r0
 8011454:	4607      	mov	r7, r0
 8011456:	b1f8      	cbz	r0, 8011498 <uxr_compute_acknack+0x9c>
 8011458:	f04f 0900 	mov.w	r9, #0
 801145c:	464d      	mov	r5, r9
 801145e:	f04f 0801 	mov.w	r8, #1
 8011462:	fa1f f189 	uxth.w	r1, r9
 8011466:	8830      	ldrh	r0, [r6, #0]
 8011468:	f000 fb60 	bl	8011b2c <uxr_seq_num_add>
 801146c:	8921      	ldrh	r1, [r4, #8]
 801146e:	fbb0 f3f1 	udiv	r3, r0, r1
 8011472:	fb03 0011 	mls	r0, r3, r1, r0
 8011476:	e9d4 2300 	ldrd	r2, r3, [r4]
 801147a:	b280      	uxth	r0, r0
 801147c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011480:	fb00 f303 	mul.w	r3, r0, r3
 8011484:	fa08 f109 	lsl.w	r1, r8, r9
 8011488:	58d3      	ldr	r3, [r2, r3]
 801148a:	f109 0901 	add.w	r9, r9, #1
 801148e:	b90b      	cbnz	r3, 8011494 <uxr_compute_acknack+0x98>
 8011490:	4329      	orrs	r1, r5
 8011492:	b28d      	uxth	r5, r1
 8011494:	454f      	cmp	r7, r9
 8011496:	d1e4      	bne.n	8011462 <uxr_compute_acknack+0x66>
 8011498:	4628      	mov	r0, r5
 801149a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801149e:	4628      	mov	r0, r5
 80114a0:	e7ce      	b.n	8011440 <uxr_compute_acknack+0x44>
 80114a2:	bf00      	nop

080114a4 <uxr_init_output_best_effort_stream>:
 80114a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80114a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80114ac:	6001      	str	r1, [r0, #0]
 80114ae:	7303      	strb	r3, [r0, #12]
 80114b0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop

080114b8 <uxr_reset_output_best_effort_stream>:
 80114b8:	7b02      	ldrb	r2, [r0, #12]
 80114ba:	6042      	str	r2, [r0, #4]
 80114bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80114c0:	81c3      	strh	r3, [r0, #14]
 80114c2:	4770      	bx	lr

080114c4 <uxr_prepare_best_effort_buffer_to_write>:
 80114c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114c6:	4604      	mov	r4, r0
 80114c8:	b083      	sub	sp, #12
 80114ca:	6840      	ldr	r0, [r0, #4]
 80114cc:	460d      	mov	r5, r1
 80114ce:	4616      	mov	r6, r2
 80114d0:	f7fc ff76 	bl	800e3c0 <uxr_submessage_padding>
 80114d4:	6863      	ldr	r3, [r4, #4]
 80114d6:	4418      	add	r0, r3
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	1942      	adds	r2, r0, r5
 80114dc:	4293      	cmp	r3, r2
 80114de:	bf2c      	ite	cs
 80114e0:	2701      	movcs	r7, #1
 80114e2:	2700      	movcc	r7, #0
 80114e4:	d202      	bcs.n	80114ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80114e6:	4638      	mov	r0, r7
 80114e8:	b003      	add	sp, #12
 80114ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114ec:	9000      	str	r0, [sp, #0]
 80114ee:	6821      	ldr	r1, [r4, #0]
 80114f0:	4630      	mov	r0, r6
 80114f2:	2300      	movs	r3, #0
 80114f4:	f7f7 fc0c 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 80114f8:	6863      	ldr	r3, [r4, #4]
 80114fa:	4638      	mov	r0, r7
 80114fc:	442b      	add	r3, r5
 80114fe:	6063      	str	r3, [r4, #4]
 8011500:	b003      	add	sp, #12
 8011502:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011504 <uxr_prepare_best_effort_buffer_to_send>:
 8011504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011508:	4604      	mov	r4, r0
 801150a:	461d      	mov	r5, r3
 801150c:	6840      	ldr	r0, [r0, #4]
 801150e:	7b23      	ldrb	r3, [r4, #12]
 8011510:	4298      	cmp	r0, r3
 8011512:	bf8c      	ite	hi
 8011514:	2601      	movhi	r6, #1
 8011516:	2600      	movls	r6, #0
 8011518:	d802      	bhi.n	8011520 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801151a:	4630      	mov	r0, r6
 801151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011520:	4688      	mov	r8, r1
 8011522:	89e0      	ldrh	r0, [r4, #14]
 8011524:	2101      	movs	r1, #1
 8011526:	4617      	mov	r7, r2
 8011528:	f000 fb00 	bl	8011b2c <uxr_seq_num_add>
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	81e0      	strh	r0, [r4, #14]
 8011530:	8028      	strh	r0, [r5, #0]
 8011532:	f8c8 3000 	str.w	r3, [r8]
 8011536:	6863      	ldr	r3, [r4, #4]
 8011538:	603b      	str	r3, [r7, #0]
 801153a:	7b23      	ldrb	r3, [r4, #12]
 801153c:	6063      	str	r3, [r4, #4]
 801153e:	4630      	mov	r0, r6
 8011540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011544 <on_full_output_buffer>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	460c      	mov	r4, r1
 8011548:	6803      	ldr	r3, [r0, #0]
 801154a:	6809      	ldr	r1, [r1, #0]
 801154c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011550:	6862      	ldr	r2, [r4, #4]
 8011552:	fbb2 f2fc 	udiv	r2, r2, ip
 8011556:	1a5b      	subs	r3, r3, r1
 8011558:	fbb3 f3f2 	udiv	r3, r3, r2
 801155c:	3301      	adds	r3, #1
 801155e:	b29b      	uxth	r3, r3
 8011560:	fbb3 fefc 	udiv	lr, r3, ip
 8011564:	fb0c 331e 	mls	r3, ip, lr, r3
 8011568:	b29b      	uxth	r3, r3
 801156a:	fb02 f303 	mul.w	r3, r2, r3
 801156e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8011572:	58ca      	ldr	r2, [r1, r3]
 8011574:	4463      	add	r3, ip
 8011576:	eba2 020c 	sub.w	r2, r2, ip
 801157a:	3308      	adds	r3, #8
 801157c:	4605      	mov	r5, r0
 801157e:	4419      	add	r1, r3
 8011580:	3a04      	subs	r2, #4
 8011582:	6903      	ldr	r3, [r0, #16]
 8011584:	f7f7 fbce 	bl	8008d24 <ucdr_init_buffer_origin>
 8011588:	4628      	mov	r0, r5
 801158a:	4903      	ldr	r1, [pc, #12]	@ (8011598 <on_full_output_buffer+0x54>)
 801158c:	4622      	mov	r2, r4
 801158e:	f7f7 fba5 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 8011592:	2000      	movs	r0, #0
 8011594:	bd38      	pop	{r3, r4, r5, pc}
 8011596:	bf00      	nop
 8011598:	08011545 	.word	0x08011545

0801159c <uxr_init_output_reliable_stream>:
 801159c:	b410      	push	{r4}
 801159e:	f89d c004 	ldrb.w	ip, [sp, #4]
 80115a2:	8103      	strh	r3, [r0, #8]
 80115a4:	e9c0 1200 	strd	r1, r2, [r0]
 80115a8:	f880 c00c 	strb.w	ip, [r0, #12]
 80115ac:	b1d3      	cbz	r3, 80115e4 <uxr_init_output_reliable_stream+0x48>
 80115ae:	f8c1 c000 	str.w	ip, [r1]
 80115b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80115b6:	f1bc 0f01 	cmp.w	ip, #1
 80115ba:	d913      	bls.n	80115e4 <uxr_init_output_reliable_stream+0x48>
 80115bc:	2301      	movs	r3, #1
 80115be:	fbb3 f1fc 	udiv	r1, r3, ip
 80115c2:	fb0c 3111 	mls	r1, ip, r1, r3
 80115c6:	b289      	uxth	r1, r1
 80115c8:	6842      	ldr	r2, [r0, #4]
 80115ca:	6804      	ldr	r4, [r0, #0]
 80115cc:	fbb2 f2fc 	udiv	r2, r2, ip
 80115d0:	fb01 f202 	mul.w	r2, r1, r2
 80115d4:	7b01      	ldrb	r1, [r0, #12]
 80115d6:	50a1      	str	r1, [r4, r2]
 80115d8:	3301      	adds	r3, #1
 80115da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80115de:	b29b      	uxth	r3, r3
 80115e0:	459c      	cmp	ip, r3
 80115e2:	d8ec      	bhi.n	80115be <uxr_init_output_reliable_stream+0x22>
 80115e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115e8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80115ec:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80115f0:	4905      	ldr	r1, [pc, #20]	@ (8011608 <uxr_init_output_reliable_stream+0x6c>)
 80115f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115f6:	f8c0 100e 	str.w	r1, [r0, #14]
 80115fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115fe:	2300      	movs	r3, #0
 8011600:	8242      	strh	r2, [r0, #18]
 8011602:	8403      	strh	r3, [r0, #32]
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	ffff0000 	.word	0xffff0000

0801160c <uxr_reset_output_reliable_stream>:
 801160c:	8901      	ldrh	r1, [r0, #8]
 801160e:	b1b1      	cbz	r1, 801163e <uxr_reset_output_reliable_stream+0x32>
 8011610:	f04f 0c00 	mov.w	ip, #0
 8011614:	4663      	mov	r3, ip
 8011616:	fbb3 f2f1 	udiv	r2, r3, r1
 801161a:	fb01 3312 	mls	r3, r1, r2, r3
 801161e:	b29b      	uxth	r3, r3
 8011620:	6842      	ldr	r2, [r0, #4]
 8011622:	fbb2 f2f1 	udiv	r2, r2, r1
 8011626:	6801      	ldr	r1, [r0, #0]
 8011628:	fb03 f202 	mul.w	r2, r3, r2
 801162c:	7b03      	ldrb	r3, [r0, #12]
 801162e:	508b      	str	r3, [r1, r2]
 8011630:	f10c 0c01 	add.w	ip, ip, #1
 8011634:	8901      	ldrh	r1, [r0, #8]
 8011636:	fa1f f38c 	uxth.w	r3, ip
 801163a:	4299      	cmp	r1, r3
 801163c:	d8eb      	bhi.n	8011616 <uxr_reset_output_reliable_stream+0xa>
 801163e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011642:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011646:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801164a:	4904      	ldr	r1, [pc, #16]	@ (801165c <uxr_reset_output_reliable_stream+0x50>)
 801164c:	f8c0 100e 	str.w	r1, [r0, #14]
 8011650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011654:	2300      	movs	r3, #0
 8011656:	8242      	strh	r2, [r0, #18]
 8011658:	8403      	strh	r3, [r0, #32]
 801165a:	4770      	bx	lr
 801165c:	ffff0000 	.word	0xffff0000

08011660 <uxr_prepare_reliable_buffer_to_write>:
 8011660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	4604      	mov	r4, r0
 8011666:	b091      	sub	sp, #68	@ 0x44
 8011668:	8900      	ldrh	r0, [r0, #8]
 801166a:	89e7      	ldrh	r7, [r4, #14]
 801166c:	6823      	ldr	r3, [r4, #0]
 801166e:	9204      	str	r2, [sp, #16]
 8011670:	fbb7 f2f0 	udiv	r2, r7, r0
 8011674:	fb00 7212 	mls	r2, r0, r2, r7
 8011678:	b292      	uxth	r2, r2
 801167a:	6865      	ldr	r5, [r4, #4]
 801167c:	fbb5 f5f0 	udiv	r5, r5, r0
 8011680:	fb05 3202 	mla	r2, r5, r2, r3
 8011684:	3204      	adds	r2, #4
 8011686:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801168a:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801168e:	9203      	str	r2, [sp, #12]
 8011690:	4688      	mov	r8, r1
 8011692:	f1a5 0904 	sub.w	r9, r5, #4
 8011696:	2800      	cmp	r0, #0
 8011698:	f000 8143 	beq.w	8011922 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801169c:	2100      	movs	r1, #0
 801169e:	460e      	mov	r6, r1
 80116a0:	b28a      	uxth	r2, r1
 80116a2:	fbb2 fcf0 	udiv	ip, r2, r0
 80116a6:	fb00 221c 	mls	r2, r0, ip, r2
 80116aa:	b292      	uxth	r2, r2
 80116ac:	fb05 f202 	mul.w	r2, r5, r2
 80116b0:	3101      	adds	r1, #1
 80116b2:	589a      	ldr	r2, [r3, r2]
 80116b4:	455a      	cmp	r2, fp
 80116b6:	bf04      	itt	eq
 80116b8:	3601      	addeq	r6, #1
 80116ba:	b2b6      	uxtheq	r6, r6
 80116bc:	4281      	cmp	r1, r0
 80116be:	d1ef      	bne.n	80116a0 <uxr_prepare_reliable_buffer_to_write+0x40>
 80116c0:	4650      	mov	r0, sl
 80116c2:	2104      	movs	r1, #4
 80116c4:	9605      	str	r6, [sp, #20]
 80116c6:	f7f7 fb39 	bl	8008d3c <ucdr_alignment>
 80116ca:	4482      	add	sl, r0
 80116cc:	eb0a 0208 	add.w	r2, sl, r8
 80116d0:	454a      	cmp	r2, r9
 80116d2:	f240 80ca 	bls.w	801186a <uxr_prepare_reliable_buffer_to_write+0x20a>
 80116d6:	7b22      	ldrb	r2, [r4, #12]
 80116d8:	4442      	add	r2, r8
 80116da:	454a      	cmp	r2, r9
 80116dc:	f240 80b2 	bls.w	8011844 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 80116e0:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 80116e4:	32fc      	adds	r2, #252	@ 0xfc
 80116e6:	fa1f f389 	uxth.w	r3, r9
 80116ea:	441a      	add	r2, r3
 80116ec:	b292      	uxth	r2, r2
 80116ee:	fb06 fb02 	mul.w	fp, r6, r2
 80116f2:	45c3      	cmp	fp, r8
 80116f4:	9205      	str	r2, [sp, #20]
 80116f6:	9206      	str	r2, [sp, #24]
 80116f8:	f0c0 80b3 	bcc.w	8011862 <uxr_prepare_reliable_buffer_to_write+0x202>
 80116fc:	f10a 0204 	add.w	r2, sl, #4
 8011700:	454a      	cmp	r2, r9
 8011702:	f080 80db 	bcs.w	80118bc <uxr_prepare_reliable_buffer_to_write+0x25c>
 8011706:	f1a3 0b04 	sub.w	fp, r3, #4
 801170a:	ebab 0b0a 	sub.w	fp, fp, sl
 801170e:	9b05      	ldr	r3, [sp, #20]
 8011710:	fa1f fb8b 	uxth.w	fp, fp
 8011714:	eba8 080b 	sub.w	r8, r8, fp
 8011718:	fbb8 fcf3 	udiv	ip, r8, r3
 801171c:	fb03 831c 	mls	r3, r3, ip, r8
 8011720:	fa1f fc8c 	uxth.w	ip, ip
 8011724:	2b00      	cmp	r3, #0
 8011726:	f040 80c1 	bne.w	80118ac <uxr_prepare_reliable_buffer_to_write+0x24c>
 801172a:	45b4      	cmp	ip, r6
 801172c:	f200 8099 	bhi.w	8011862 <uxr_prepare_reliable_buffer_to_write+0x202>
 8011730:	f10d 0820 	add.w	r8, sp, #32
 8011734:	f1bc 0f00 	cmp.w	ip, #0
 8011738:	d040      	beq.n	80117bc <uxr_prepare_reliable_buffer_to_write+0x15c>
 801173a:	f8cd a01c 	str.w	sl, [sp, #28]
 801173e:	2600      	movs	r6, #0
 8011740:	f8dd a014 	ldr.w	sl, [sp, #20]
 8011744:	9505      	str	r5, [sp, #20]
 8011746:	f10d 0820 	add.w	r8, sp, #32
 801174a:	4665      	mov	r5, ip
 801174c:	e000      	b.n	8011750 <uxr_prepare_reliable_buffer_to_write+0xf0>
 801174e:	46d3      	mov	fp, sl
 8011750:	8921      	ldrh	r1, [r4, #8]
 8011752:	fbb7 f2f1 	udiv	r2, r7, r1
 8011756:	fb01 7212 	mls	r2, r1, r2, r7
 801175a:	b292      	uxth	r2, r2
 801175c:	6863      	ldr	r3, [r4, #4]
 801175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011762:	6821      	ldr	r1, [r4, #0]
 8011764:	fb02 f303 	mul.w	r3, r2, r3
 8011768:	3304      	adds	r3, #4
 801176a:	4419      	add	r1, r3
 801176c:	4640      	mov	r0, r8
 801176e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011772:	9200      	str	r2, [sp, #0]
 8011774:	2300      	movs	r3, #0
 8011776:	464a      	mov	r2, r9
 8011778:	f7f7 faca 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 801177c:	465a      	mov	r2, fp
 801177e:	2300      	movs	r3, #0
 8011780:	210d      	movs	r1, #13
 8011782:	4640      	mov	r0, r8
 8011784:	f7fc fddc 	bl	800e340 <uxr_buffer_submessage_header>
 8011788:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801178c:	fbb7 f2fc 	udiv	r2, r7, ip
 8011790:	fb0c 7212 	mls	r2, ip, r2, r7
 8011794:	b292      	uxth	r2, r2
 8011796:	6863      	ldr	r3, [r4, #4]
 8011798:	fbb3 f3fc 	udiv	r3, r3, ip
 801179c:	fb02 f303 	mul.w	r3, r2, r3
 80117a0:	6822      	ldr	r2, [r4, #0]
 80117a2:	4638      	mov	r0, r7
 80117a4:	f842 9003 	str.w	r9, [r2, r3]
 80117a8:	2101      	movs	r1, #1
 80117aa:	f000 f9bf 	bl	8011b2c <uxr_seq_num_add>
 80117ae:	3601      	adds	r6, #1
 80117b0:	42ae      	cmp	r6, r5
 80117b2:	4607      	mov	r7, r0
 80117b4:	d1cb      	bne.n	801174e <uxr_prepare_reliable_buffer_to_write+0xee>
 80117b6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80117ba:	9d05      	ldr	r5, [sp, #20]
 80117bc:	8920      	ldrh	r0, [r4, #8]
 80117be:	fbb7 f1f0 	udiv	r1, r7, r0
 80117c2:	fb00 7111 	mls	r1, r0, r1, r7
 80117c6:	b289      	uxth	r1, r1
 80117c8:	6863      	ldr	r3, [r4, #4]
 80117ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80117ce:	fb01 f303 	mul.w	r3, r1, r3
 80117d2:	6821      	ldr	r1, [r4, #0]
 80117d4:	3304      	adds	r3, #4
 80117d6:	4419      	add	r1, r3
 80117d8:	464a      	mov	r2, r9
 80117da:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80117de:	9000      	str	r0, [sp, #0]
 80117e0:	2300      	movs	r3, #0
 80117e2:	4640      	mov	r0, r8
 80117e4:	f7f7 fa94 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 80117e8:	4640      	mov	r0, r8
 80117ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80117ee:	2302      	movs	r3, #2
 80117f0:	fa1f f288 	uxth.w	r2, r8
 80117f4:	210d      	movs	r1, #13
 80117f6:	f7fc fda3 	bl	800e340 <uxr_buffer_submessage_header>
 80117fa:	8926      	ldrh	r6, [r4, #8]
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	7b20      	ldrb	r0, [r4, #12]
 8011800:	f1a5 0208 	sub.w	r2, r5, #8
 8011804:	f10a 0104 	add.w	r1, sl, #4
 8011808:	fbb7 f5f6 	udiv	r5, r7, r6
 801180c:	fb06 7515 	mls	r5, r6, r5, r7
 8011810:	440b      	add	r3, r1
 8011812:	b2ad      	uxth	r5, r5
 8011814:	4619      	mov	r1, r3
 8011816:	3004      	adds	r0, #4
 8011818:	6863      	ldr	r3, [r4, #4]
 801181a:	fbb3 f3f6 	udiv	r3, r3, r6
 801181e:	fb05 f303 	mul.w	r3, r5, r3
 8011822:	6825      	ldr	r5, [r4, #0]
 8011824:	4440      	add	r0, r8
 8011826:	50e8      	str	r0, [r5, r3]
 8011828:	9d04      	ldr	r5, [sp, #16]
 801182a:	eba2 020a 	sub.w	r2, r2, sl
 801182e:	4628      	mov	r0, r5
 8011830:	f7f7 fa80 	bl	8008d34 <ucdr_init_buffer>
 8011834:	493c      	ldr	r1, [pc, #240]	@ (8011928 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 8011836:	4622      	mov	r2, r4
 8011838:	4628      	mov	r0, r5
 801183a:	f7f7 fa4f 	bl	8008cdc <ucdr_set_on_full_buffer_callback>
 801183e:	81e7      	strh	r7, [r4, #14]
 8011840:	2001      	movs	r0, #1
 8011842:	e00f      	b.n	8011864 <uxr_prepare_reliable_buffer_to_write+0x204>
 8011844:	2101      	movs	r1, #1
 8011846:	89e0      	ldrh	r0, [r4, #14]
 8011848:	f000 f970 	bl	8011b2c <uxr_seq_num_add>
 801184c:	8921      	ldrh	r1, [r4, #8]
 801184e:	4605      	mov	r5, r0
 8011850:	8a60      	ldrh	r0, [r4, #18]
 8011852:	f000 f96b 	bl	8011b2c <uxr_seq_num_add>
 8011856:	4601      	mov	r1, r0
 8011858:	4628      	mov	r0, r5
 801185a:	f000 f96f 	bl	8011b3c <uxr_seq_num_cmp>
 801185e:	2800      	cmp	r0, #0
 8011860:	dd45      	ble.n	80118ee <uxr_prepare_reliable_buffer_to_write+0x28e>
 8011862:	2000      	movs	r0, #0
 8011864:	b011      	add	sp, #68	@ 0x44
 8011866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186a:	8921      	ldrh	r1, [r4, #8]
 801186c:	8a60      	ldrh	r0, [r4, #18]
 801186e:	9205      	str	r2, [sp, #20]
 8011870:	f000 f95c 	bl	8011b2c <uxr_seq_num_add>
 8011874:	4601      	mov	r1, r0
 8011876:	4638      	mov	r0, r7
 8011878:	f000 f960 	bl	8011b3c <uxr_seq_num_cmp>
 801187c:	2800      	cmp	r0, #0
 801187e:	9a05      	ldr	r2, [sp, #20]
 8011880:	dcef      	bgt.n	8011862 <uxr_prepare_reliable_buffer_to_write+0x202>
 8011882:	8926      	ldrh	r6, [r4, #8]
 8011884:	fbb7 f5f6 	udiv	r5, r7, r6
 8011888:	fb06 7515 	mls	r5, r6, r5, r7
 801188c:	b2ad      	uxth	r5, r5
 801188e:	6863      	ldr	r3, [r4, #4]
 8011890:	6824      	ldr	r4, [r4, #0]
 8011892:	fbb3 f3f6 	udiv	r3, r3, r6
 8011896:	fb05 f303 	mul.w	r3, r5, r3
 801189a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801189e:	50e2      	str	r2, [r4, r3]
 80118a0:	2300      	movs	r3, #0
 80118a2:	f8cd a000 	str.w	sl, [sp]
 80118a6:	f7f7 fa33 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 80118aa:	e7c9      	b.n	8011840 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80118ac:	f10c 0c01 	add.w	ip, ip, #1
 80118b0:	fa1f fc8c 	uxth.w	ip, ip
 80118b4:	45b4      	cmp	ip, r6
 80118b6:	9306      	str	r3, [sp, #24]
 80118b8:	d8d3      	bhi.n	8011862 <uxr_prepare_reliable_buffer_to_write+0x202>
 80118ba:	e739      	b.n	8011730 <uxr_prepare_reliable_buffer_to_write+0xd0>
 80118bc:	4638      	mov	r0, r7
 80118be:	2101      	movs	r1, #1
 80118c0:	9307      	str	r3, [sp, #28]
 80118c2:	f000 f933 	bl	8011b2c <uxr_seq_num_add>
 80118c6:	8921      	ldrh	r1, [r4, #8]
 80118c8:	6862      	ldr	r2, [r4, #4]
 80118ca:	4607      	mov	r7, r0
 80118cc:	fbb0 f0f1 	udiv	r0, r0, r1
 80118d0:	fb01 7010 	mls	r0, r1, r0, r7
 80118d4:	b280      	uxth	r0, r0
 80118d6:	fbb2 f1f1 	udiv	r1, r2, r1
 80118da:	6822      	ldr	r2, [r4, #0]
 80118dc:	fb00 f101 	mul.w	r1, r0, r1
 80118e0:	3104      	adds	r1, #4
 80118e2:	1853      	adds	r3, r2, r1
 80118e4:	9303      	str	r3, [sp, #12]
 80118e6:	f853 ac04 	ldr.w	sl, [r3, #-4]
 80118ea:	9b07      	ldr	r3, [sp, #28]
 80118ec:	e70b      	b.n	8011706 <uxr_prepare_reliable_buffer_to_write+0xa6>
 80118ee:	8921      	ldrh	r1, [r4, #8]
 80118f0:	fbb5 f2f1 	udiv	r2, r5, r1
 80118f4:	fb01 5212 	mls	r2, r1, r2, r5
 80118f8:	b292      	uxth	r2, r2
 80118fa:	6863      	ldr	r3, [r4, #4]
 80118fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8011900:	6821      	ldr	r1, [r4, #0]
 8011902:	9804      	ldr	r0, [sp, #16]
 8011904:	fb02 f303 	mul.w	r3, r2, r3
 8011908:	3304      	adds	r3, #4
 801190a:	7b22      	ldrb	r2, [r4, #12]
 801190c:	4419      	add	r1, r3
 801190e:	4442      	add	r2, r8
 8011910:	f841 2c04 	str.w	r2, [r1, #-4]
 8011914:	7b23      	ldrb	r3, [r4, #12]
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	2300      	movs	r3, #0
 801191a:	f7f7 f9f9 	bl	8008d10 <ucdr_init_buffer_origin_offset>
 801191e:	81e5      	strh	r5, [r4, #14]
 8011920:	e78e      	b.n	8011840 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8011922:	4606      	mov	r6, r0
 8011924:	e6cc      	b.n	80116c0 <uxr_prepare_reliable_buffer_to_write+0x60>
 8011926:	bf00      	nop
 8011928:	08011545 	.word	0x08011545

0801192c <uxr_prepare_next_reliable_buffer_to_send>:
 801192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192e:	4604      	mov	r4, r0
 8011930:	460f      	mov	r7, r1
 8011932:	8a00      	ldrh	r0, [r0, #16]
 8011934:	2101      	movs	r1, #1
 8011936:	4615      	mov	r5, r2
 8011938:	461e      	mov	r6, r3
 801193a:	f000 f8f7 	bl	8011b2c <uxr_seq_num_add>
 801193e:	8030      	strh	r0, [r6, #0]
 8011940:	8922      	ldrh	r2, [r4, #8]
 8011942:	fbb0 f3f2 	udiv	r3, r0, r2
 8011946:	fb02 0c13 	mls	ip, r2, r3, r0
 801194a:	fa1f fc8c 	uxth.w	ip, ip
 801194e:	6863      	ldr	r3, [r4, #4]
 8011950:	fbb3 f3f2 	udiv	r3, r3, r2
 8011954:	fb0c fc03 	mul.w	ip, ip, r3
 8011958:	6823      	ldr	r3, [r4, #0]
 801195a:	89e1      	ldrh	r1, [r4, #14]
 801195c:	f10c 0c04 	add.w	ip, ip, #4
 8011960:	4463      	add	r3, ip
 8011962:	603b      	str	r3, [r7, #0]
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	4463      	add	r3, ip
 8011968:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801196c:	602b      	str	r3, [r5, #0]
 801196e:	f000 f8e5 	bl	8011b3c <uxr_seq_num_cmp>
 8011972:	2800      	cmp	r0, #0
 8011974:	dd01      	ble.n	801197a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8011976:	2000      	movs	r0, #0
 8011978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801197a:	7b23      	ldrb	r3, [r4, #12]
 801197c:	682a      	ldr	r2, [r5, #0]
 801197e:	429a      	cmp	r2, r3
 8011980:	d9f9      	bls.n	8011976 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011982:	8a61      	ldrh	r1, [r4, #18]
 8011984:	8a20      	ldrh	r0, [r4, #16]
 8011986:	f000 f8d5 	bl	8011b34 <uxr_seq_num_sub>
 801198a:	8923      	ldrh	r3, [r4, #8]
 801198c:	4283      	cmp	r3, r0
 801198e:	d0f2      	beq.n	8011976 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011990:	8830      	ldrh	r0, [r6, #0]
 8011992:	89e3      	ldrh	r3, [r4, #14]
 8011994:	8220      	strh	r0, [r4, #16]
 8011996:	4298      	cmp	r0, r3
 8011998:	d001      	beq.n	801199e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801199a:	2001      	movs	r0, #1
 801199c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801199e:	2101      	movs	r1, #1
 80119a0:	f000 f8c4 	bl	8011b2c <uxr_seq_num_add>
 80119a4:	81e0      	strh	r0, [r4, #14]
 80119a6:	e7f8      	b.n	801199a <uxr_prepare_next_reliable_buffer_to_send+0x6e>

080119a8 <uxr_update_output_stream_heartbeat_timestamp>:
 80119a8:	b570      	push	{r4, r5, r6, lr}
 80119aa:	8a01      	ldrh	r1, [r0, #16]
 80119ac:	4604      	mov	r4, r0
 80119ae:	8a40      	ldrh	r0, [r0, #18]
 80119b0:	4615      	mov	r5, r2
 80119b2:	461e      	mov	r6, r3
 80119b4:	f000 f8c2 	bl	8011b3c <uxr_seq_num_cmp>
 80119b8:	2800      	cmp	r0, #0
 80119ba:	db07      	blt.n	80119cc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80119bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80119c0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80119c4:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80119c8:	2000      	movs	r0, #0
 80119ca:	bd70      	pop	{r4, r5, r6, pc}
 80119cc:	f894 3020 	ldrb.w	r3, [r4, #32]
 80119d0:	b953      	cbnz	r3, 80119e8 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 80119d2:	2301      	movs	r3, #1
 80119d4:	f884 3020 	strb.w	r3, [r4, #32]
 80119d8:	3564      	adds	r5, #100	@ 0x64
 80119da:	f04f 0000 	mov.w	r0, #0
 80119de:	f146 0600 	adc.w	r6, r6, #0
 80119e2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80119e6:	bd70      	pop	{r4, r5, r6, pc}
 80119e8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80119ec:	428d      	cmp	r5, r1
 80119ee:	eb76 0202 	sbcs.w	r2, r6, r2
 80119f2:	dbf1      	blt.n	80119d8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80119f4:	3301      	adds	r3, #1
 80119f6:	3564      	adds	r5, #100	@ 0x64
 80119f8:	f884 3020 	strb.w	r3, [r4, #32]
 80119fc:	f04f 0001 	mov.w	r0, #1
 8011a00:	f146 0600 	adc.w	r6, r6, #0
 8011a04:	e7ed      	b.n	80119e2 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8011a06:	bf00      	nop

08011a08 <uxr_begin_output_nack_buffer_it>:
 8011a08:	8a40      	ldrh	r0, [r0, #18]
 8011a0a:	4770      	bx	lr

08011a0c <uxr_next_reliable_nack_buffer_to_send>:
 8011a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a10:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8011a14:	f1b8 0f00 	cmp.w	r8, #0
 8011a18:	d104      	bne.n	8011a24 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8011a1a:	f04f 0800 	mov.w	r8, #0
 8011a1e:	4640      	mov	r0, r8
 8011a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a24:	4604      	mov	r4, r0
 8011a26:	460e      	mov	r6, r1
 8011a28:	8818      	ldrh	r0, [r3, #0]
 8011a2a:	4617      	mov	r7, r2
 8011a2c:	461d      	mov	r5, r3
 8011a2e:	e019      	b.n	8011a64 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8011a30:	8921      	ldrh	r1, [r4, #8]
 8011a32:	8828      	ldrh	r0, [r5, #0]
 8011a34:	fbb0 fcf1 	udiv	ip, r0, r1
 8011a38:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011a3c:	fb01 0c1c 	mls	ip, r1, ip, r0
 8011a40:	fa1f fc8c 	uxth.w	ip, ip
 8011a44:	fbb2 f2f1 	udiv	r2, r2, r1
 8011a48:	fb02 fc0c 	mul.w	ip, r2, ip
 8011a4c:	f10c 0c04 	add.w	ip, ip, #4
 8011a50:	4463      	add	r3, ip
 8011a52:	6033      	str	r3, [r6, #0]
 8011a54:	6823      	ldr	r3, [r4, #0]
 8011a56:	4463      	add	r3, ip
 8011a58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011a5c:	603b      	str	r3, [r7, #0]
 8011a5e:	7b22      	ldrb	r2, [r4, #12]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d1dc      	bne.n	8011a1e <uxr_next_reliable_nack_buffer_to_send+0x12>
 8011a64:	2101      	movs	r1, #1
 8011a66:	f000 f861 	bl	8011b2c <uxr_seq_num_add>
 8011a6a:	8028      	strh	r0, [r5, #0]
 8011a6c:	8a21      	ldrh	r1, [r4, #16]
 8011a6e:	f000 f865 	bl	8011b3c <uxr_seq_num_cmp>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	dddc      	ble.n	8011a30 <uxr_next_reliable_nack_buffer_to_send+0x24>
 8011a76:	2300      	movs	r3, #0
 8011a78:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8011a7c:	e7cd      	b.n	8011a1a <uxr_next_reliable_nack_buffer_to_send+0xe>
 8011a7e:	bf00      	nop

08011a80 <uxr_process_acknack>:
 8011a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a82:	4604      	mov	r4, r0
 8011a84:	460e      	mov	r6, r1
 8011a86:	4610      	mov	r0, r2
 8011a88:	2101      	movs	r1, #1
 8011a8a:	f000 f853 	bl	8011b34 <uxr_seq_num_sub>
 8011a8e:	8a61      	ldrh	r1, [r4, #18]
 8011a90:	f000 f850 	bl	8011b34 <uxr_seq_num_sub>
 8011a94:	b1c0      	cbz	r0, 8011ac8 <uxr_process_acknack+0x48>
 8011a96:	4605      	mov	r5, r0
 8011a98:	2700      	movs	r7, #0
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	8a60      	ldrh	r0, [r4, #18]
 8011a9e:	f000 f845 	bl	8011b2c <uxr_seq_num_add>
 8011aa2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011aa6:	fbb0 f1fc 	udiv	r1, r0, ip
 8011aaa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011aae:	fb0c 0111 	mls	r1, ip, r1, r0
 8011ab2:	b289      	uxth	r1, r1
 8011ab4:	3701      	adds	r7, #1
 8011ab6:	fbb3 f3fc 	udiv	r3, r3, ip
 8011aba:	fb01 f303 	mul.w	r3, r1, r3
 8011abe:	42bd      	cmp	r5, r7
 8011ac0:	7b21      	ldrb	r1, [r4, #12]
 8011ac2:	8260      	strh	r0, [r4, #18]
 8011ac4:	50d1      	str	r1, [r2, r3]
 8011ac6:	d1e8      	bne.n	8011a9a <uxr_process_acknack+0x1a>
 8011ac8:	3e00      	subs	r6, #0
 8011aca:	f04f 0300 	mov.w	r3, #0
 8011ace:	bf18      	it	ne
 8011ad0:	2601      	movne	r6, #1
 8011ad2:	f884 3020 	strb.w	r3, [r4, #32]
 8011ad6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8011ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011adc <uxr_is_output_up_to_date>:
 8011adc:	8a01      	ldrh	r1, [r0, #16]
 8011ade:	8a40      	ldrh	r0, [r0, #18]
 8011ae0:	b508      	push	{r3, lr}
 8011ae2:	f000 f82b 	bl	8011b3c <uxr_seq_num_cmp>
 8011ae6:	fab0 f080 	clz	r0, r0
 8011aea:	0940      	lsrs	r0, r0, #5
 8011aec:	bd08      	pop	{r3, pc}
 8011aee:	bf00      	nop

08011af0 <get_available_free_slots>:
 8011af0:	8901      	ldrh	r1, [r0, #8]
 8011af2:	b1c1      	cbz	r1, 8011b26 <get_available_free_slots+0x36>
 8011af4:	b530      	push	{r4, r5, lr}
 8011af6:	2200      	movs	r2, #0
 8011af8:	6843      	ldr	r3, [r0, #4]
 8011afa:	6805      	ldr	r5, [r0, #0]
 8011afc:	7b04      	ldrb	r4, [r0, #12]
 8011afe:	fbb3 fef1 	udiv	lr, r3, r1
 8011b02:	4610      	mov	r0, r2
 8011b04:	b293      	uxth	r3, r2
 8011b06:	fbb3 fcf1 	udiv	ip, r3, r1
 8011b0a:	fb01 331c 	mls	r3, r1, ip, r3
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	fb0e f303 	mul.w	r3, lr, r3
 8011b14:	3201      	adds	r2, #1
 8011b16:	58eb      	ldr	r3, [r5, r3]
 8011b18:	429c      	cmp	r4, r3
 8011b1a:	bf04      	itt	eq
 8011b1c:	3001      	addeq	r0, #1
 8011b1e:	b280      	uxtheq	r0, r0
 8011b20:	4291      	cmp	r1, r2
 8011b22:	d1ef      	bne.n	8011b04 <get_available_free_slots+0x14>
 8011b24:	bd30      	pop	{r4, r5, pc}
 8011b26:	4608      	mov	r0, r1
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop

08011b2c <uxr_seq_num_add>:
 8011b2c:	4408      	add	r0, r1
 8011b2e:	b280      	uxth	r0, r0
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <uxr_seq_num_sub>:
 8011b34:	1a40      	subs	r0, r0, r1
 8011b36:	b280      	uxth	r0, r0
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop

08011b3c <uxr_seq_num_cmp>:
 8011b3c:	4288      	cmp	r0, r1
 8011b3e:	d010      	beq.n	8011b62 <uxr_seq_num_cmp+0x26>
 8011b40:	d207      	bcs.n	8011b52 <uxr_seq_num_cmp+0x16>
 8011b42:	1a09      	subs	r1, r1, r0
 8011b44:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8011b48:	bfb4      	ite	lt
 8011b4a:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 8011b4e:	2001      	movge	r0, #1
 8011b50:	4770      	bx	lr
 8011b52:	1a41      	subs	r1, r0, r1
 8011b54:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8011b58:	bfcc      	ite	gt
 8011b5a:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8011b5e:	2001      	movle	r0, #1
 8011b60:	4770      	bx	lr
 8011b62:	2000      	movs	r0, #0
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop

08011b68 <rcl_get_automatic_discovery_range>:
 8011b68:	b530      	push	{r4, r5, lr}
 8011b6a:	b083      	sub	sp, #12
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	9301      	str	r3, [sp, #4]
 8011b70:	b1c0      	cbz	r0, 8011ba4 <rcl_get_automatic_discovery_range+0x3c>
 8011b72:	4604      	mov	r4, r0
 8011b74:	a901      	add	r1, sp, #4
 8011b76:	4818      	ldr	r0, [pc, #96]	@ (8011bd8 <rcl_get_automatic_discovery_range+0x70>)
 8011b78:	f7fe fbb0 	bl	80102dc <rcutils_get_env>
 8011b7c:	b110      	cbz	r0, 8011b84 <rcl_get_automatic_discovery_range+0x1c>
 8011b7e:	2001      	movs	r0, #1
 8011b80:	b003      	add	sp, #12
 8011b82:	bd30      	pop	{r4, r5, pc}
 8011b84:	9d01      	ldr	r5, [sp, #4]
 8011b86:	782b      	ldrb	r3, [r5, #0]
 8011b88:	b923      	cbnz	r3, 8011b94 <rcl_get_automatic_discovery_range+0x2c>
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	7023      	strb	r3, [r4, #0]
 8011b8e:	2000      	movs	r0, #0
 8011b90:	b003      	add	sp, #12
 8011b92:	bd30      	pop	{r4, r5, pc}
 8011b94:	4911      	ldr	r1, [pc, #68]	@ (8011bdc <rcl_get_automatic_discovery_range+0x74>)
 8011b96:	4628      	mov	r0, r5
 8011b98:	f7ee fb42 	bl	8000220 <strcmp>
 8011b9c:	b928      	cbnz	r0, 8011baa <rcl_get_automatic_discovery_range+0x42>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	7023      	strb	r3, [r4, #0]
 8011ba2:	e7f4      	b.n	8011b8e <rcl_get_automatic_discovery_range+0x26>
 8011ba4:	200b      	movs	r0, #11
 8011ba6:	b003      	add	sp, #12
 8011ba8:	bd30      	pop	{r4, r5, pc}
 8011baa:	490d      	ldr	r1, [pc, #52]	@ (8011be0 <rcl_get_automatic_discovery_range+0x78>)
 8011bac:	4628      	mov	r0, r5
 8011bae:	f7ee fb37 	bl	8000220 <strcmp>
 8011bb2:	b168      	cbz	r0, 8011bd0 <rcl_get_automatic_discovery_range+0x68>
 8011bb4:	490b      	ldr	r1, [pc, #44]	@ (8011be4 <rcl_get_automatic_discovery_range+0x7c>)
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f7ee fb32 	bl	8000220 <strcmp>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d0e4      	beq.n	8011b8a <rcl_get_automatic_discovery_range+0x22>
 8011bc0:	4909      	ldr	r1, [pc, #36]	@ (8011be8 <rcl_get_automatic_discovery_range+0x80>)
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f7ee fb2c 	bl	8000220 <strcmp>
 8011bc8:	b910      	cbnz	r0, 8011bd0 <rcl_get_automatic_discovery_range+0x68>
 8011bca:	2304      	movs	r3, #4
 8011bcc:	7023      	strb	r3, [r4, #0]
 8011bce:	e7de      	b.n	8011b8e <rcl_get_automatic_discovery_range+0x26>
 8011bd0:	2302      	movs	r3, #2
 8011bd2:	7023      	strb	r3, [r4, #0]
 8011bd4:	e7db      	b.n	8011b8e <rcl_get_automatic_discovery_range+0x26>
 8011bd6:	bf00      	nop
 8011bd8:	08014b60 	.word	0x08014b60
 8011bdc:	08014b80 	.word	0x08014b80
 8011be0:	08014b84 	.word	0x08014b84
 8011be4:	08014b90 	.word	0x08014b90
 8011be8:	08014b98 	.word	0x08014b98

08011bec <rcl_automatic_discovery_range_to_string>:
 8011bec:	2804      	cmp	r0, #4
 8011bee:	bf9a      	itte	ls
 8011bf0:	4b02      	ldrls	r3, [pc, #8]	@ (8011bfc <rcl_automatic_discovery_range_to_string+0x10>)
 8011bf2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011bf6:	2000      	movhi	r0, #0
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop
 8011bfc:	08014c88 	.word	0x08014c88

08011c00 <rcl_get_discovery_static_peers>:
 8011c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c04:	b08c      	sub	sp, #48	@ 0x30
 8011c06:	2300      	movs	r3, #0
 8011c08:	9304      	str	r3, [sp, #16]
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d04e      	beq.n	8011cac <rcl_get_discovery_static_peers+0xac>
 8011c0e:	460d      	mov	r5, r1
 8011c10:	2900      	cmp	r1, #0
 8011c12:	d04b      	beq.n	8011cac <rcl_get_discovery_static_peers+0xac>
 8011c14:	4604      	mov	r4, r0
 8011c16:	a904      	add	r1, sp, #16
 8011c18:	482d      	ldr	r0, [pc, #180]	@ (8011cd0 <rcl_get_discovery_static_peers+0xd0>)
 8011c1a:	f7fe fb5f 	bl	80102dc <rcutils_get_env>
 8011c1e:	b118      	cbz	r0, 8011c28 <rcl_get_discovery_static_peers+0x28>
 8011c20:	2001      	movs	r0, #1
 8011c22:	b00c      	add	sp, #48	@ 0x30
 8011c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c28:	9b04      	ldr	r3, [sp, #16]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d0f8      	beq.n	8011c20 <rcl_get_discovery_static_peers+0x20>
 8011c2e:	af05      	add	r7, sp, #20
 8011c30:	4638      	mov	r0, r7
 8011c32:	f000 fc2d 	bl	8012490 <rcutils_get_zero_initialized_string_array>
 8011c36:	f105 0308 	add.w	r3, r5, #8
 8011c3a:	9703      	str	r7, [sp, #12]
 8011c3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011c44:	9804      	ldr	r0, [sp, #16]
 8011c46:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011c4a:	213b      	movs	r1, #59	@ 0x3b
 8011c4c:	f000 fb6e 	bl	801232c <rcutils_split>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d1e5      	bne.n	8011c20 <rcl_get_discovery_static_peers+0x20>
 8011c54:	9905      	ldr	r1, [sp, #20]
 8011c56:	462a      	mov	r2, r5
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f7fe fe5d 	bl	8010918 <rmw_discovery_options_init>
 8011c5e:	4606      	mov	r6, r0
 8011c60:	bb90      	cbnz	r0, 8011cc8 <rcl_get_discovery_static_peers+0xc8>
 8011c62:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011c66:	f1b9 0f00 	cmp.w	r9, #0
 8011c6a:	d026      	beq.n	8011cba <rcl_get_discovery_static_peers+0xba>
 8011c6c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011c70:	4680      	mov	r8, r0
 8011c72:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8011c76:	4628      	mov	r0, r5
 8011c78:	f7ee fb32 	bl	80002e0 <strlen>
 8011c7c:	28ff      	cmp	r0, #255	@ 0xff
 8011c7e:	4629      	mov	r1, r5
 8011c80:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8011c84:	d816      	bhi.n	8011cb4 <rcl_get_discovery_static_peers+0xb4>
 8011c86:	6860      	ldr	r0, [r4, #4]
 8011c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011c8c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8011c90:	f001 f9d5 	bl	801303e <strncpy>
 8011c94:	6863      	ldr	r3, [r4, #4]
 8011c96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011c9a:	3601      	adds	r6, #1
 8011c9c:	442b      	add	r3, r5
 8011c9e:	454e      	cmp	r6, r9
 8011ca0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8011ca4:	d209      	bcs.n	8011cba <rcl_get_discovery_static_peers+0xba>
 8011ca6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011caa:	e7e2      	b.n	8011c72 <rcl_get_discovery_static_peers+0x72>
 8011cac:	200b      	movs	r0, #11
 8011cae:	b00c      	add	sp, #48	@ 0x30
 8011cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cb4:	3601      	adds	r6, #1
 8011cb6:	454e      	cmp	r6, r9
 8011cb8:	d3db      	bcc.n	8011c72 <rcl_get_discovery_static_peers+0x72>
 8011cba:	4638      	mov	r0, r7
 8011cbc:	f000 fc28 	bl	8012510 <rcutils_string_array_fini>
 8011cc0:	3800      	subs	r0, #0
 8011cc2:	bf18      	it	ne
 8011cc4:	2001      	movne	r0, #1
 8011cc6:	e7ac      	b.n	8011c22 <rcl_get_discovery_static_peers+0x22>
 8011cc8:	f7fd fc88 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011ccc:	e7a9      	b.n	8011c22 <rcl_get_discovery_static_peers+0x22>
 8011cce:	bf00      	nop
 8011cd0:	08014ba8 	.word	0x08014ba8

08011cd4 <rcl_get_default_domain_id>:
 8011cd4:	b530      	push	{r4, r5, lr}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	2300      	movs	r3, #0
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	b1f0      	cbz	r0, 8011d1c <rcl_get_default_domain_id+0x48>
 8011cde:	4604      	mov	r4, r0
 8011ce0:	4669      	mov	r1, sp
 8011ce2:	4812      	ldr	r0, [pc, #72]	@ (8011d2c <rcl_get_default_domain_id+0x58>)
 8011ce4:	f7fe fafa 	bl	80102dc <rcutils_get_env>
 8011ce8:	4602      	mov	r2, r0
 8011cea:	b108      	cbz	r0, 8011cf0 <rcl_get_default_domain_id+0x1c>
 8011cec:	2001      	movs	r0, #1
 8011cee:	e004      	b.n	8011cfa <rcl_get_default_domain_id+0x26>
 8011cf0:	9800      	ldr	r0, [sp, #0]
 8011cf2:	b108      	cbz	r0, 8011cf8 <rcl_get_default_domain_id+0x24>
 8011cf4:	7803      	ldrb	r3, [r0, #0]
 8011cf6:	b913      	cbnz	r3, 8011cfe <rcl_get_default_domain_id+0x2a>
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	b003      	add	sp, #12
 8011cfc:	bd30      	pop	{r4, r5, pc}
 8011cfe:	a901      	add	r1, sp, #4
 8011d00:	9201      	str	r2, [sp, #4]
 8011d02:	f000 fef9 	bl	8012af8 <strtoul>
 8011d06:	4605      	mov	r5, r0
 8011d08:	b158      	cbz	r0, 8011d22 <rcl_get_default_domain_id+0x4e>
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	d104      	bne.n	8011d18 <rcl_get_default_domain_id+0x44>
 8011d0e:	f001 fa6b 	bl	80131e8 <__errno>
 8011d12:	6803      	ldr	r3, [r0, #0]
 8011d14:	2b22      	cmp	r3, #34	@ 0x22
 8011d16:	d0e9      	beq.n	8011cec <rcl_get_default_domain_id+0x18>
 8011d18:	6025      	str	r5, [r4, #0]
 8011d1a:	e7ed      	b.n	8011cf8 <rcl_get_default_domain_id+0x24>
 8011d1c:	200b      	movs	r0, #11
 8011d1e:	b003      	add	sp, #12
 8011d20:	bd30      	pop	{r4, r5, pc}
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d0f6      	beq.n	8011d18 <rcl_get_default_domain_id+0x44>
 8011d2a:	e7df      	b.n	8011cec <rcl_get_default_domain_id+0x18>
 8011d2c:	08014c9c 	.word	0x08014c9c

08011d30 <rcl_expand_topic_name>:
 8011d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d34:	b08b      	sub	sp, #44	@ 0x2c
 8011d36:	9306      	str	r3, [sp, #24]
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	f000 80ad 	beq.w	8011e98 <rcl_expand_topic_name+0x168>
 8011d3e:	460e      	mov	r6, r1
 8011d40:	2900      	cmp	r1, #0
 8011d42:	f000 80a9 	beq.w	8011e98 <rcl_expand_topic_name+0x168>
 8011d46:	4617      	mov	r7, r2
 8011d48:	2a00      	cmp	r2, #0
 8011d4a:	f000 80a5 	beq.w	8011e98 <rcl_expand_topic_name+0x168>
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	f000 80a2 	beq.w	8011e98 <rcl_expand_topic_name+0x168>
 8011d54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f000 809e 	beq.w	8011e98 <rcl_expand_topic_name+0x168>
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	a909      	add	r1, sp, #36	@ 0x24
 8011d60:	4680      	mov	r8, r0
 8011d62:	f000 f9f1 	bl	8012148 <rcl_validate_topic_name>
 8011d66:	4605      	mov	r5, r0
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	f040 8096 	bne.w	8011e9a <rcl_expand_topic_name+0x16a>
 8011d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f040 809a 	bne.w	8011eaa <rcl_expand_topic_name+0x17a>
 8011d76:	4602      	mov	r2, r0
 8011d78:	a909      	add	r1, sp, #36	@ 0x24
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	f7fe fee6 	bl	8010b4c <rmw_validate_node_name>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	f040 808e 	bne.w	8011ea2 <rcl_expand_topic_name+0x172>
 8011d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	f040 8093 	bne.w	8011eb4 <rcl_expand_topic_name+0x184>
 8011d8e:	a909      	add	r1, sp, #36	@ 0x24
 8011d90:	4638      	mov	r0, r7
 8011d92:	f7fe febd 	bl	8010b10 <rmw_validate_namespace>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	f040 8083 	bne.w	8011ea2 <rcl_expand_topic_name+0x172>
 8011d9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011d9e:	2d00      	cmp	r5, #0
 8011da0:	f040 80f4 	bne.w	8011f8c <rcl_expand_topic_name+0x25c>
 8011da4:	217b      	movs	r1, #123	@ 0x7b
 8011da6:	4640      	mov	r0, r8
 8011da8:	f001 f92a 	bl	8013000 <strchr>
 8011dac:	f898 3000 	ldrb.w	r3, [r8]
 8011db0:	2b2f      	cmp	r3, #47	@ 0x2f
 8011db2:	4604      	mov	r4, r0
 8011db4:	f000 809f 	beq.w	8011ef6 <rcl_expand_topic_name+0x1c6>
 8011db8:	2b7e      	cmp	r3, #126	@ 0x7e
 8011dba:	f040 80e9 	bne.w	8011f90 <rcl_expand_topic_name+0x260>
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	f7ee fa8e 	bl	80002e0 <strlen>
 8011dc4:	4a82      	ldr	r2, [pc, #520]	@ (8011fd0 <rcl_expand_topic_name+0x2a0>)
 8011dc6:	4b83      	ldr	r3, [pc, #524]	@ (8011fd4 <rcl_expand_topic_name+0x2a4>)
 8011dc8:	2801      	cmp	r0, #1
 8011dca:	bf08      	it	eq
 8011dcc:	4613      	moveq	r3, r2
 8011dce:	9302      	str	r3, [sp, #8]
 8011dd0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8011dd8:	f108 0301 	add.w	r3, r8, #1
 8011ddc:	9305      	str	r3, [sp, #20]
 8011dde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011de2:	9301      	str	r3, [sp, #4]
 8011de4:	ab14      	add	r3, sp, #80	@ 0x50
 8011de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011de8:	f7fe faa0 	bl	801032c <rcutils_format_string_limit>
 8011dec:	4682      	mov	sl, r0
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f000 80d1 	beq.w	8011f96 <rcl_expand_topic_name+0x266>
 8011df4:	2c00      	cmp	r4, #0
 8011df6:	f000 8085 	beq.w	8011f04 <rcl_expand_topic_name+0x1d4>
 8011dfa:	217b      	movs	r1, #123	@ 0x7b
 8011dfc:	f001 f900 	bl	8013000 <strchr>
 8011e00:	46d1      	mov	r9, sl
 8011e02:	4604      	mov	r4, r0
 8011e04:	9507      	str	r5, [sp, #28]
 8011e06:	464d      	mov	r5, r9
 8011e08:	2c00      	cmp	r4, #0
 8011e0a:	f000 80a0 	beq.w	8011f4e <rcl_expand_topic_name+0x21e>
 8011e0e:	217d      	movs	r1, #125	@ 0x7d
 8011e10:	4628      	mov	r0, r5
 8011e12:	f001 f8f5 	bl	8013000 <strchr>
 8011e16:	eba0 0904 	sub.w	r9, r0, r4
 8011e1a:	f109 0b01 	add.w	fp, r9, #1
 8011e1e:	486e      	ldr	r0, [pc, #440]	@ (8011fd8 <rcl_expand_topic_name+0x2a8>)
 8011e20:	465a      	mov	r2, fp
 8011e22:	4621      	mov	r1, r4
 8011e24:	f001 f8f9 	bl	801301a <strncmp>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d069      	beq.n	8011f00 <rcl_expand_topic_name+0x1d0>
 8011e2c:	486b      	ldr	r0, [pc, #428]	@ (8011fdc <rcl_expand_topic_name+0x2ac>)
 8011e2e:	465a      	mov	r2, fp
 8011e30:	4621      	mov	r1, r4
 8011e32:	f001 f8f2 	bl	801301a <strncmp>
 8011e36:	b130      	cbz	r0, 8011e46 <rcl_expand_topic_name+0x116>
 8011e38:	4869      	ldr	r0, [pc, #420]	@ (8011fe0 <rcl_expand_topic_name+0x2b0>)
 8011e3a:	465a      	mov	r2, fp
 8011e3c:	4621      	mov	r1, r4
 8011e3e:	f001 f8ec 	bl	801301a <strncmp>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d138      	bne.n	8011eb8 <rcl_expand_topic_name+0x188>
 8011e46:	46b9      	mov	r9, r7
 8011e48:	ab16      	add	r3, sp, #88	@ 0x58
 8011e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011e4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011e52:	ab14      	add	r3, sp, #80	@ 0x50
 8011e54:	4620      	mov	r0, r4
 8011e56:	cb0c      	ldmia	r3, {r2, r3}
 8011e58:	4659      	mov	r1, fp
 8011e5a:	f7fe fbbb 	bl	80105d4 <rcutils_strndup>
 8011e5e:	4604      	mov	r4, r0
 8011e60:	2800      	cmp	r0, #0
 8011e62:	f000 809d 	beq.w	8011fa0 <rcl_expand_topic_name+0x270>
 8011e66:	464a      	mov	r2, r9
 8011e68:	4628      	mov	r0, r5
 8011e6a:	ab14      	add	r3, sp, #80	@ 0x50
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	f7fe fa97 	bl	80103a0 <rcutils_repl_str>
 8011e72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011e74:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011e76:	4605      	mov	r5, r0
 8011e78:	4620      	mov	r0, r4
 8011e7a:	4798      	blx	r3
 8011e7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011e7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011e80:	4650      	mov	r0, sl
 8011e82:	4798      	blx	r3
 8011e84:	2d00      	cmp	r5, #0
 8011e86:	f000 8086 	beq.w	8011f96 <rcl_expand_topic_name+0x266>
 8011e8a:	217b      	movs	r1, #123	@ 0x7b
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f001 f8b7 	bl	8013000 <strchr>
 8011e92:	46aa      	mov	sl, r5
 8011e94:	4604      	mov	r4, r0
 8011e96:	e7b7      	b.n	8011e08 <rcl_expand_topic_name+0xd8>
 8011e98:	250b      	movs	r5, #11
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	b00b      	add	sp, #44	@ 0x2c
 8011e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea2:	f7fd fb9b 	bl	800f5dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011ea6:	4605      	mov	r5, r0
 8011ea8:	e7f7      	b.n	8011e9a <rcl_expand_topic_name+0x16a>
 8011eaa:	2567      	movs	r5, #103	@ 0x67
 8011eac:	4628      	mov	r0, r5
 8011eae:	b00b      	add	sp, #44	@ 0x2c
 8011eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb4:	25c9      	movs	r5, #201	@ 0xc9
 8011eb6:	e7f0      	b.n	8011e9a <rcl_expand_topic_name+0x16a>
 8011eb8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8011ebc:	9806      	ldr	r0, [sp, #24]
 8011ebe:	1c61      	adds	r1, r4, #1
 8011ec0:	f7fe fca4 	bl	801080c <rcutils_string_map_getn>
 8011ec4:	4681      	mov	r9, r0
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d1be      	bne.n	8011e48 <rcl_expand_topic_name+0x118>
 8011eca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011ecc:	ab16      	add	r3, sp, #88	@ 0x58
 8011ece:	6010      	str	r0, [r2, #0]
 8011ed0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ed4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011ed8:	ab14      	add	r3, sp, #80	@ 0x50
 8011eda:	cb0c      	ldmia	r3, {r2, r3}
 8011edc:	4659      	mov	r1, fp
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f7fe fb78 	bl	80105d4 <rcutils_strndup>
 8011ee4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011ee6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011ee8:	4798      	blx	r3
 8011eea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011eec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011eee:	4650      	mov	r0, sl
 8011ef0:	4798      	blx	r3
 8011ef2:	2569      	movs	r5, #105	@ 0x69
 8011ef4:	e7d1      	b.n	8011e9a <rcl_expand_topic_name+0x16a>
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	d059      	beq.n	8011fae <rcl_expand_topic_name+0x27e>
 8011efa:	46c1      	mov	r9, r8
 8011efc:	46aa      	mov	sl, r5
 8011efe:	e781      	b.n	8011e04 <rcl_expand_topic_name+0xd4>
 8011f00:	46b1      	mov	r9, r6
 8011f02:	e7a1      	b.n	8011e48 <rcl_expand_topic_name+0x118>
 8011f04:	f89a 3000 	ldrb.w	r3, [sl]
 8011f08:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f0a:	d01c      	beq.n	8011f46 <rcl_expand_topic_name+0x216>
 8011f0c:	4638      	mov	r0, r7
 8011f0e:	f7ee f9e7 	bl	80002e0 <strlen>
 8011f12:	4a34      	ldr	r2, [pc, #208]	@ (8011fe4 <rcl_expand_topic_name+0x2b4>)
 8011f14:	4b34      	ldr	r3, [pc, #208]	@ (8011fe8 <rcl_expand_topic_name+0x2b8>)
 8011f16:	f8cd a010 	str.w	sl, [sp, #16]
 8011f1a:	2801      	cmp	r0, #1
 8011f1c:	bf18      	it	ne
 8011f1e:	4613      	movne	r3, r2
 8011f20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011f24:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8011f28:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011f2a:	9703      	str	r7, [sp, #12]
 8011f2c:	9200      	str	r2, [sp, #0]
 8011f2e:	ab14      	add	r3, sp, #80	@ 0x50
 8011f30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f32:	f7fe f9fb 	bl	801032c <rcutils_format_string_limit>
 8011f36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011f38:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4650      	mov	r0, sl
 8011f3e:	4798      	blx	r3
 8011f40:	46a2      	mov	sl, r4
 8011f42:	4653      	mov	r3, sl
 8011f44:	b33b      	cbz	r3, 8011f96 <rcl_expand_topic_name+0x266>
 8011f46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f48:	f8c3 a000 	str.w	sl, [r3]
 8011f4c:	e7a5      	b.n	8011e9a <rcl_expand_topic_name+0x16a>
 8011f4e:	4653      	mov	r3, sl
 8011f50:	9d07      	ldr	r5, [sp, #28]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d1d6      	bne.n	8011f04 <rcl_expand_topic_name+0x1d4>
 8011f56:	f898 3000 	ldrb.w	r3, [r8]
 8011f5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f5c:	d0f3      	beq.n	8011f46 <rcl_expand_topic_name+0x216>
 8011f5e:	4638      	mov	r0, r7
 8011f60:	f7ee f9be 	bl	80002e0 <strlen>
 8011f64:	4a1f      	ldr	r2, [pc, #124]	@ (8011fe4 <rcl_expand_topic_name+0x2b4>)
 8011f66:	4b20      	ldr	r3, [pc, #128]	@ (8011fe8 <rcl_expand_topic_name+0x2b8>)
 8011f68:	f8cd 8010 	str.w	r8, [sp, #16]
 8011f6c:	2801      	cmp	r0, #1
 8011f6e:	bf18      	it	ne
 8011f70:	4613      	movne	r3, r2
 8011f72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011f76:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8011f7a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011f7c:	9703      	str	r7, [sp, #12]
 8011f7e:	9200      	str	r2, [sp, #0]
 8011f80:	ab14      	add	r3, sp, #80	@ 0x50
 8011f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f84:	f7fe f9d2 	bl	801032c <rcutils_format_string_limit>
 8011f88:	4682      	mov	sl, r0
 8011f8a:	e7da      	b.n	8011f42 <rcl_expand_topic_name+0x212>
 8011f8c:	25ca      	movs	r5, #202	@ 0xca
 8011f8e:	e784      	b.n	8011e9a <rcl_expand_topic_name+0x16a>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d1b2      	bne.n	8011efa <rcl_expand_topic_name+0x1ca>
 8011f94:	e7e3      	b.n	8011f5e <rcl_expand_topic_name+0x22e>
 8011f96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011f98:	2300      	movs	r3, #0
 8011f9a:	6013      	str	r3, [r2, #0]
 8011f9c:	250a      	movs	r5, #10
 8011f9e:	e77c      	b.n	8011e9a <rcl_expand_topic_name+0x16a>
 8011fa0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8011fa4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011fa6:	6014      	str	r4, [r2, #0]
 8011fa8:	4650      	mov	r0, sl
 8011faa:	4798      	blx	r3
 8011fac:	e7f6      	b.n	8011f9c <rcl_expand_topic_name+0x26c>
 8011fae:	ab17      	add	r3, sp, #92	@ 0x5c
 8011fb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011fb4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011fb8:	ab14      	add	r3, sp, #80	@ 0x50
 8011fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fbc:	4640      	mov	r0, r8
 8011fbe:	f7fe fad3 	bl	8010568 <rcutils_strdup>
 8011fc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011fc4:	6018      	str	r0, [r3, #0]
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f47f af67 	bne.w	8011e9a <rcl_expand_topic_name+0x16a>
 8011fcc:	e7e6      	b.n	8011f9c <rcl_expand_topic_name+0x26c>
 8011fce:	bf00      	nop
 8011fd0:	080142e0 	.word	0x080142e0
 8011fd4:	08014cac 	.word	0x08014cac
 8011fd8:	08014cb4 	.word	0x08014cb4
 8011fdc:	08014cbc 	.word	0x08014cbc
 8011fe0:	08014cc4 	.word	0x08014cc4
 8011fe4:	080142cc 	.word	0x080142cc
 8011fe8:	080142f0 	.word	0x080142f0

08011fec <rcl_get_default_topic_name_substitutions>:
 8011fec:	2800      	cmp	r0, #0
 8011fee:	bf0c      	ite	eq
 8011ff0:	200b      	moveq	r0, #11
 8011ff2:	2000      	movne	r0, #0
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop

08011ff8 <rcl_get_zero_initialized_guard_condition>:
 8011ff8:	4a03      	ldr	r2, [pc, #12]	@ (8012008 <rcl_get_zero_initialized_guard_condition+0x10>)
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012000:	e883 0003 	stmia.w	r3, {r0, r1}
 8012004:	4618      	mov	r0, r3
 8012006:	4770      	bx	lr
 8012008:	08014cd0 	.word	0x08014cd0

0801200c <rcl_guard_condition_init_from_rmw>:
 801200c:	b082      	sub	sp, #8
 801200e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012018:	4604      	mov	r4, r0
 801201a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801201e:	460e      	mov	r6, r1
 8012020:	4617      	mov	r7, r2
 8012022:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012026:	f10d 0e04 	add.w	lr, sp, #4
 801202a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801202e:	f8dc 3000 	ldr.w	r3, [ip]
 8012032:	f8ce 3000 	str.w	r3, [lr]
 8012036:	a801      	add	r0, sp, #4
 8012038:	f7f7 fa44 	bl	80094c4 <rcutils_allocator_is_valid>
 801203c:	b350      	cbz	r0, 8012094 <rcl_guard_condition_init_from_rmw+0x88>
 801203e:	b34c      	cbz	r4, 8012094 <rcl_guard_condition_init_from_rmw+0x88>
 8012040:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012044:	f1b8 0f00 	cmp.w	r8, #0
 8012048:	d11e      	bne.n	8012088 <rcl_guard_condition_init_from_rmw+0x7c>
 801204a:	b31f      	cbz	r7, 8012094 <rcl_guard_condition_init_from_rmw+0x88>
 801204c:	4638      	mov	r0, r7
 801204e:	f7fd fae5 	bl	800f61c <rcl_context_is_valid>
 8012052:	b328      	cbz	r0, 80120a0 <rcl_guard_condition_init_from_rmw+0x94>
 8012054:	9b01      	ldr	r3, [sp, #4]
 8012056:	9905      	ldr	r1, [sp, #20]
 8012058:	201c      	movs	r0, #28
 801205a:	4798      	blx	r3
 801205c:	4605      	mov	r5, r0
 801205e:	6060      	str	r0, [r4, #4]
 8012060:	b358      	cbz	r0, 80120ba <rcl_guard_condition_init_from_rmw+0xae>
 8012062:	b1fe      	cbz	r6, 80120a4 <rcl_guard_condition_init_from_rmw+0x98>
 8012064:	6006      	str	r6, [r0, #0]
 8012066:	f880 8004 	strb.w	r8, [r0, #4]
 801206a:	ac01      	add	r4, sp, #4
 801206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801206e:	f105 0c08 	add.w	ip, r5, #8
 8012072:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012076:	6823      	ldr	r3, [r4, #0]
 8012078:	f8cc 3000 	str.w	r3, [ip]
 801207c:	2000      	movs	r0, #0
 801207e:	b006      	add	sp, #24
 8012080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012084:	b002      	add	sp, #8
 8012086:	4770      	bx	lr
 8012088:	2064      	movs	r0, #100	@ 0x64
 801208a:	b006      	add	sp, #24
 801208c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012090:	b002      	add	sp, #8
 8012092:	4770      	bx	lr
 8012094:	200b      	movs	r0, #11
 8012096:	b006      	add	sp, #24
 8012098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801209c:	b002      	add	sp, #8
 801209e:	4770      	bx	lr
 80120a0:	2065      	movs	r0, #101	@ 0x65
 80120a2:	e7f2      	b.n	801208a <rcl_guard_condition_init_from_rmw+0x7e>
 80120a4:	6838      	ldr	r0, [r7, #0]
 80120a6:	3028      	adds	r0, #40	@ 0x28
 80120a8:	f000 fa58 	bl	801255c <rmw_create_guard_condition>
 80120ac:	6028      	str	r0, [r5, #0]
 80120ae:	6865      	ldr	r5, [r4, #4]
 80120b0:	682e      	ldr	r6, [r5, #0]
 80120b2:	b126      	cbz	r6, 80120be <rcl_guard_condition_init_from_rmw+0xb2>
 80120b4:	2301      	movs	r3, #1
 80120b6:	712b      	strb	r3, [r5, #4]
 80120b8:	e7d7      	b.n	801206a <rcl_guard_condition_init_from_rmw+0x5e>
 80120ba:	200a      	movs	r0, #10
 80120bc:	e7e5      	b.n	801208a <rcl_guard_condition_init_from_rmw+0x7e>
 80120be:	4628      	mov	r0, r5
 80120c0:	9b02      	ldr	r3, [sp, #8]
 80120c2:	9905      	ldr	r1, [sp, #20]
 80120c4:	4798      	blx	r3
 80120c6:	2001      	movs	r0, #1
 80120c8:	6066      	str	r6, [r4, #4]
 80120ca:	e7de      	b.n	801208a <rcl_guard_condition_init_from_rmw+0x7e>

080120cc <rcl_guard_condition_fini>:
 80120cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ce:	b1d8      	cbz	r0, 8012108 <rcl_guard_condition_fini+0x3c>
 80120d0:	4604      	mov	r4, r0
 80120d2:	6840      	ldr	r0, [r0, #4]
 80120d4:	b158      	cbz	r0, 80120ee <rcl_guard_condition_fini+0x22>
 80120d6:	6803      	ldr	r3, [r0, #0]
 80120d8:	68c6      	ldr	r6, [r0, #12]
 80120da:	6987      	ldr	r7, [r0, #24]
 80120dc:	b153      	cbz	r3, 80120f4 <rcl_guard_condition_fini+0x28>
 80120de:	7905      	ldrb	r5, [r0, #4]
 80120e0:	b955      	cbnz	r5, 80120f8 <rcl_guard_condition_fini+0x2c>
 80120e2:	4639      	mov	r1, r7
 80120e4:	47b0      	blx	r6
 80120e6:	2300      	movs	r3, #0
 80120e8:	6063      	str	r3, [r4, #4]
 80120ea:	4628      	mov	r0, r5
 80120ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ee:	4605      	mov	r5, r0
 80120f0:	4628      	mov	r0, r5
 80120f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120f4:	461d      	mov	r5, r3
 80120f6:	e7f4      	b.n	80120e2 <rcl_guard_condition_fini+0x16>
 80120f8:	4618      	mov	r0, r3
 80120fa:	f000 fa43 	bl	8012584 <rmw_destroy_guard_condition>
 80120fe:	1e05      	subs	r5, r0, #0
 8012100:	bf18      	it	ne
 8012102:	2501      	movne	r5, #1
 8012104:	6860      	ldr	r0, [r4, #4]
 8012106:	e7ec      	b.n	80120e2 <rcl_guard_condition_fini+0x16>
 8012108:	250b      	movs	r5, #11
 801210a:	4628      	mov	r0, r5
 801210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801210e:	bf00      	nop

08012110 <rcl_guard_condition_get_default_options>:
 8012110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012112:	b087      	sub	sp, #28
 8012114:	4606      	mov	r6, r0
 8012116:	4668      	mov	r0, sp
 8012118:	f7f7 f9a8 	bl	800946c <rcutils_get_default_allocator>
 801211c:	46ee      	mov	lr, sp
 801211e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012122:	4c08      	ldr	r4, [pc, #32]	@ (8012144 <rcl_guard_condition_get_default_options+0x34>)
 8012124:	46a4      	mov	ip, r4
 8012126:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801212a:	4625      	mov	r5, r4
 801212c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801212e:	4634      	mov	r4, r6
 8012130:	f8de 7000 	ldr.w	r7, [lr]
 8012134:	f8cc 7000 	str.w	r7, [ip]
 8012138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801213a:	4630      	mov	r0, r6
 801213c:	6027      	str	r7, [r4, #0]
 801213e:	b007      	add	sp, #28
 8012140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012142:	bf00      	nop
 8012144:	20010b9c 	.word	0x20010b9c

08012148 <rcl_validate_topic_name>:
 8012148:	2800      	cmp	r0, #0
 801214a:	d06b      	beq.n	8012224 <rcl_validate_topic_name+0xdc>
 801214c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012150:	460d      	mov	r5, r1
 8012152:	2900      	cmp	r1, #0
 8012154:	d06d      	beq.n	8012232 <rcl_validate_topic_name+0xea>
 8012156:	4616      	mov	r6, r2
 8012158:	4604      	mov	r4, r0
 801215a:	f7ee f8c1 	bl	80002e0 <strlen>
 801215e:	b190      	cbz	r0, 8012186 <rcl_validate_topic_name+0x3e>
 8012160:	7821      	ldrb	r1, [r4, #0]
 8012162:	4a71      	ldr	r2, [pc, #452]	@ (8012328 <rcl_validate_topic_name+0x1e0>)
 8012164:	5c53      	ldrb	r3, [r2, r1]
 8012166:	f013 0304 	ands.w	r3, r3, #4
 801216a:	d15d      	bne.n	8012228 <rcl_validate_topic_name+0xe0>
 801216c:	1e47      	subs	r7, r0, #1
 801216e:	f814 c007 	ldrb.w	ip, [r4, r7]
 8012172:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8012176:	d10d      	bne.n	8012194 <rcl_validate_topic_name+0x4c>
 8012178:	2302      	movs	r3, #2
 801217a:	602b      	str	r3, [r5, #0]
 801217c:	b146      	cbz	r6, 8012190 <rcl_validate_topic_name+0x48>
 801217e:	6037      	str	r7, [r6, #0]
 8012180:	2000      	movs	r0, #0
 8012182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012186:	2301      	movs	r3, #1
 8012188:	602b      	str	r3, [r5, #0]
 801218a:	b10e      	cbz	r6, 8012190 <rcl_validate_topic_name+0x48>
 801218c:	2300      	movs	r3, #0
 801218e:	6033      	str	r3, [r6, #0]
 8012190:	2000      	movs	r0, #0
 8012192:	e7f6      	b.n	8012182 <rcl_validate_topic_name+0x3a>
 8012194:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8012198:	469a      	mov	sl, r3
 801219a:	469e      	mov	lr, r3
 801219c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80121a0:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 80121a4:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 80121a8:	d85b      	bhi.n	8012262 <rcl_validate_topic_name+0x11a>
 80121aa:	e8df f00c 	tbb	[pc, ip]
 80121ae:	4463      	.short	0x4463
 80121b0:	44444444 	.word	0x44444444
 80121b4:	44444444 	.word	0x44444444
 80121b8:	5a5a5a44 	.word	0x5a5a5a44
 80121bc:	5a5a5a5a 	.word	0x5a5a5a5a
 80121c0:	44444444 	.word	0x44444444
 80121c4:	44444444 	.word	0x44444444
 80121c8:	44444444 	.word	0x44444444
 80121cc:	44444444 	.word	0x44444444
 80121d0:	44444444 	.word	0x44444444
 80121d4:	44444444 	.word	0x44444444
 80121d8:	5a5a4444 	.word	0x5a5a4444
 80121dc:	5a2e5a5a 	.word	0x5a2e5a5a
 80121e0:	44444444 	.word	0x44444444
 80121e4:	44444444 	.word	0x44444444
 80121e8:	44444444 	.word	0x44444444
 80121ec:	44444444 	.word	0x44444444
 80121f0:	44444444 	.word	0x44444444
 80121f4:	44444444 	.word	0x44444444
 80121f8:	5a284444 	.word	0x5a284444
 80121fc:	6b73      	.short	0x6b73
 80121fe:	f1ba 0f00 	cmp.w	sl, #0
 8012202:	d13a      	bne.n	801227a <rcl_validate_topic_name+0x132>
 8012204:	4673      	mov	r3, lr
 8012206:	f04f 0a01 	mov.w	sl, #1
 801220a:	f10e 0e01 	add.w	lr, lr, #1
 801220e:	4570      	cmp	r0, lr
 8012210:	d1c4      	bne.n	801219c <rcl_validate_topic_name+0x54>
 8012212:	f1ba 0f00 	cmp.w	sl, #0
 8012216:	d048      	beq.n	80122aa <rcl_validate_topic_name+0x162>
 8012218:	2205      	movs	r2, #5
 801221a:	602a      	str	r2, [r5, #0]
 801221c:	2e00      	cmp	r6, #0
 801221e:	d0b7      	beq.n	8012190 <rcl_validate_topic_name+0x48>
 8012220:	6033      	str	r3, [r6, #0]
 8012222:	e7b5      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012224:	200b      	movs	r0, #11
 8012226:	4770      	bx	lr
 8012228:	2304      	movs	r3, #4
 801222a:	602b      	str	r3, [r5, #0]
 801222c:	2e00      	cmp	r6, #0
 801222e:	d1ad      	bne.n	801218c <rcl_validate_topic_name+0x44>
 8012230:	e7ae      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012232:	200b      	movs	r0, #11
 8012234:	e7a5      	b.n	8012182 <rcl_validate_topic_name+0x3a>
 8012236:	f812 c009 	ldrb.w	ip, [r2, r9]
 801223a:	f01c 0f04 	tst.w	ip, #4
 801223e:	d0e4      	beq.n	801220a <rcl_validate_topic_name+0xc2>
 8012240:	f1ba 0f00 	cmp.w	sl, #0
 8012244:	d0e1      	beq.n	801220a <rcl_validate_topic_name+0xc2>
 8012246:	f1be 0f00 	cmp.w	lr, #0
 801224a:	d0de      	beq.n	801220a <rcl_validate_topic_name+0xc2>
 801224c:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 8012250:	4563      	cmp	r3, ip
 8012252:	d1da      	bne.n	801220a <rcl_validate_topic_name+0xc2>
 8012254:	2309      	movs	r3, #9
 8012256:	602b      	str	r3, [r5, #0]
 8012258:	2e00      	cmp	r6, #0
 801225a:	d099      	beq.n	8012190 <rcl_validate_topic_name+0x48>
 801225c:	f8c6 e000 	str.w	lr, [r6]
 8012260:	e796      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012262:	f1ba 0f00 	cmp.w	sl, #0
 8012266:	bf0c      	ite	eq
 8012268:	2303      	moveq	r3, #3
 801226a:	2308      	movne	r3, #8
 801226c:	602b      	str	r3, [r5, #0]
 801226e:	2e00      	cmp	r6, #0
 8012270:	d1f4      	bne.n	801225c <rcl_validate_topic_name+0x114>
 8012272:	e78d      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012274:	f1ba 0f00 	cmp.w	sl, #0
 8012278:	d0c7      	beq.n	801220a <rcl_validate_topic_name+0xc2>
 801227a:	2308      	movs	r3, #8
 801227c:	602b      	str	r3, [r5, #0]
 801227e:	2e00      	cmp	r6, #0
 8012280:	d1ec      	bne.n	801225c <rcl_validate_topic_name+0x114>
 8012282:	e785      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012284:	f1be 0f00 	cmp.w	lr, #0
 8012288:	d0bf      	beq.n	801220a <rcl_validate_topic_name+0xc2>
 801228a:	2306      	movs	r3, #6
 801228c:	602b      	str	r3, [r5, #0]
 801228e:	2e00      	cmp	r6, #0
 8012290:	d1e4      	bne.n	801225c <rcl_validate_topic_name+0x114>
 8012292:	e77d      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012294:	f1ba 0f00 	cmp.w	sl, #0
 8012298:	d104      	bne.n	80122a4 <rcl_validate_topic_name+0x15c>
 801229a:	2305      	movs	r3, #5
 801229c:	602b      	str	r3, [r5, #0]
 801229e:	2e00      	cmp	r6, #0
 80122a0:	d1dc      	bne.n	801225c <rcl_validate_topic_name+0x114>
 80122a2:	e775      	b.n	8012190 <rcl_validate_topic_name+0x48>
 80122a4:	f04f 0a00 	mov.w	sl, #0
 80122a8:	e7af      	b.n	801220a <rcl_validate_topic_name+0xc2>
 80122aa:	297e      	cmp	r1, #126	@ 0x7e
 80122ac:	d01d      	beq.n	80122ea <rcl_validate_topic_name+0x1a2>
 80122ae:	2101      	movs	r1, #1
 80122b0:	e006      	b.n	80122c0 <rcl_validate_topic_name+0x178>
 80122b2:	458e      	cmp	lr, r1
 80122b4:	f104 0401 	add.w	r4, r4, #1
 80122b8:	f101 0301 	add.w	r3, r1, #1
 80122bc:	d912      	bls.n	80122e4 <rcl_validate_topic_name+0x19c>
 80122be:	4619      	mov	r1, r3
 80122c0:	4557      	cmp	r7, sl
 80122c2:	f10a 0a01 	add.w	sl, sl, #1
 80122c6:	d0f4      	beq.n	80122b2 <rcl_validate_topic_name+0x16a>
 80122c8:	7823      	ldrb	r3, [r4, #0]
 80122ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80122cc:	d1f1      	bne.n	80122b2 <rcl_validate_topic_name+0x16a>
 80122ce:	7863      	ldrb	r3, [r4, #1]
 80122d0:	5cd3      	ldrb	r3, [r2, r3]
 80122d2:	075b      	lsls	r3, r3, #29
 80122d4:	d5ed      	bpl.n	80122b2 <rcl_validate_topic_name+0x16a>
 80122d6:	2304      	movs	r3, #4
 80122d8:	602b      	str	r3, [r5, #0]
 80122da:	2e00      	cmp	r6, #0
 80122dc:	f43f af58 	beq.w	8012190 <rcl_validate_topic_name+0x48>
 80122e0:	6031      	str	r1, [r6, #0]
 80122e2:	e755      	b.n	8012190 <rcl_validate_topic_name+0x48>
 80122e4:	2300      	movs	r3, #0
 80122e6:	602b      	str	r3, [r5, #0]
 80122e8:	e752      	b.n	8012190 <rcl_validate_topic_name+0x48>
 80122ea:	4653      	mov	r3, sl
 80122ec:	2101      	movs	r1, #1
 80122ee:	e00a      	b.n	8012306 <rcl_validate_topic_name+0x1be>
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d012      	beq.n	801231a <rcl_validate_topic_name+0x1d2>
 80122f4:	458e      	cmp	lr, r1
 80122f6:	f103 0301 	add.w	r3, r3, #1
 80122fa:	f104 0401 	add.w	r4, r4, #1
 80122fe:	f101 0001 	add.w	r0, r1, #1
 8012302:	d9ef      	bls.n	80122e4 <rcl_validate_topic_name+0x19c>
 8012304:	4601      	mov	r1, r0
 8012306:	429f      	cmp	r7, r3
 8012308:	d0f4      	beq.n	80122f4 <rcl_validate_topic_name+0x1ac>
 801230a:	7820      	ldrb	r0, [r4, #0]
 801230c:	282f      	cmp	r0, #47	@ 0x2f
 801230e:	d1ef      	bne.n	80122f0 <rcl_validate_topic_name+0x1a8>
 8012310:	7860      	ldrb	r0, [r4, #1]
 8012312:	5c10      	ldrb	r0, [r2, r0]
 8012314:	0740      	lsls	r0, r0, #29
 8012316:	d5ed      	bpl.n	80122f4 <rcl_validate_topic_name+0x1ac>
 8012318:	e7dd      	b.n	80122d6 <rcl_validate_topic_name+0x18e>
 801231a:	2207      	movs	r2, #7
 801231c:	602a      	str	r2, [r5, #0]
 801231e:	2e00      	cmp	r6, #0
 8012320:	f47f af7e 	bne.w	8012220 <rcl_validate_topic_name+0xd8>
 8012324:	e734      	b.n	8012190 <rcl_validate_topic_name+0x48>
 8012326:	bf00      	nop
 8012328:	08014e3a 	.word	0x08014e3a

0801232c <rcutils_split>:
 801232c:	b082      	sub	sp, #8
 801232e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012332:	b08b      	sub	sp, #44	@ 0x2c
 8012334:	ac14      	add	r4, sp, #80	@ 0x50
 8012336:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8012338:	e884 000c 	stmia.w	r4, {r2, r3}
 801233c:	2f00      	cmp	r7, #0
 801233e:	f000 809f 	beq.w	8012480 <rcutils_split+0x154>
 8012342:	4606      	mov	r6, r0
 8012344:	2800      	cmp	r0, #0
 8012346:	d071      	beq.n	801242c <rcutils_split+0x100>
 8012348:	7804      	ldrb	r4, [r0, #0]
 801234a:	2c00      	cmp	r4, #0
 801234c:	d06e      	beq.n	801242c <rcutils_split+0x100>
 801234e:	460d      	mov	r5, r1
 8012350:	f7ed ffc6 	bl	80002e0 <strlen>
 8012354:	1833      	adds	r3, r6, r0
 8012356:	1b64      	subs	r4, r4, r5
 8012358:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801235c:	4680      	mov	r8, r0
 801235e:	fab4 f484 	clz	r4, r4
 8012362:	0964      	lsrs	r4, r4, #5
 8012364:	42ab      	cmp	r3, r5
 8012366:	bf08      	it	eq
 8012368:	f1a8 0801 	subeq.w	r8, r8, #1
 801236c:	4544      	cmp	r4, r8
 801236e:	d278      	bcs.n	8012462 <rcutils_split+0x136>
 8012370:	1933      	adds	r3, r6, r4
 8012372:	eb06 0008 	add.w	r0, r6, r8
 8012376:	2101      	movs	r1, #1
 8012378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801237c:	42aa      	cmp	r2, r5
 801237e:	bf08      	it	eq
 8012380:	3101      	addeq	r1, #1
 8012382:	4283      	cmp	r3, r0
 8012384:	d1f8      	bne.n	8012378 <rcutils_split+0x4c>
 8012386:	aa14      	add	r2, sp, #80	@ 0x50
 8012388:	4638      	mov	r0, r7
 801238a:	f000 f89f 	bl	80124cc <rcutils_string_array_init>
 801238e:	4681      	mov	r9, r0
 8012390:	2800      	cmp	r0, #0
 8012392:	d159      	bne.n	8012448 <rcutils_split+0x11c>
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	46a2      	mov	sl, r4
 8012398:	e002      	b.n	80123a0 <rcutils_split+0x74>
 801239a:	3401      	adds	r4, #1
 801239c:	4544      	cmp	r4, r8
 801239e:	d222      	bcs.n	80123e6 <rcutils_split+0xba>
 80123a0:	5d33      	ldrb	r3, [r6, r4]
 80123a2:	42ab      	cmp	r3, r5
 80123a4:	d1f9      	bne.n	801239a <rcutils_split+0x6e>
 80123a6:	4554      	cmp	r4, sl
 80123a8:	eba4 0b0a 	sub.w	fp, r4, sl
 80123ac:	d037      	beq.n	801241e <rcutils_split+0xf2>
 80123ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80123b0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80123b2:	9201      	str	r2, [sp, #4]
 80123b4:	f10b 0002 	add.w	r0, fp, #2
 80123b8:	4798      	blx	r3
 80123ba:	9a01      	ldr	r2, [sp, #4]
 80123bc:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80123c6:	eb06 030a 	add.w	r3, r6, sl
 80123ca:	f10b 0101 	add.w	r1, fp, #1
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d038      	beq.n	8012444 <rcutils_split+0x118>
 80123d2:	4a2e      	ldr	r2, [pc, #184]	@ (801248c <rcutils_split+0x160>)
 80123d4:	f000 fcc8 	bl	8012d68 <sniprintf>
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	f109 0901 	add.w	r9, r9, #1
 80123de:	3401      	adds	r4, #1
 80123e0:	4544      	cmp	r4, r8
 80123e2:	46a2      	mov	sl, r4
 80123e4:	d3dc      	bcc.n	80123a0 <rcutils_split+0x74>
 80123e6:	4554      	cmp	r4, sl
 80123e8:	d043      	beq.n	8012472 <rcutils_split+0x146>
 80123ea:	eba4 040a 	sub.w	r4, r4, sl
 80123ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80123f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80123f2:	9201      	str	r2, [sp, #4]
 80123f4:	1ca0      	adds	r0, r4, #2
 80123f6:	4798      	blx	r3
 80123f8:	9a01      	ldr	r2, [sp, #4]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 8012400:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8012404:	b300      	cbz	r0, 8012448 <rcutils_split+0x11c>
 8012406:	4a21      	ldr	r2, [pc, #132]	@ (801248c <rcutils_split+0x160>)
 8012408:	eb06 030a 	add.w	r3, r6, sl
 801240c:	1c61      	adds	r1, r4, #1
 801240e:	f000 fcab 	bl	8012d68 <sniprintf>
 8012412:	2000      	movs	r0, #0
 8012414:	b00b      	add	sp, #44	@ 0x2c
 8012416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241a:	b002      	add	sp, #8
 801241c:	4770      	bx	lr
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	3b01      	subs	r3, #1
 8012422:	2100      	movs	r1, #0
 8012424:	603b      	str	r3, [r7, #0]
 8012426:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801242a:	e7d8      	b.n	80123de <rcutils_split+0xb2>
 801242c:	a802      	add	r0, sp, #8
 801242e:	ac02      	add	r4, sp, #8
 8012430:	f000 f82e 	bl	8012490 <rcutils_get_zero_initialized_string_array>
 8012434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012436:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012438:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801243c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012440:	2000      	movs	r0, #0
 8012442:	e7e7      	b.n	8012414 <rcutils_split+0xe8>
 8012444:	f8c7 9000 	str.w	r9, [r7]
 8012448:	4638      	mov	r0, r7
 801244a:	f000 f861 	bl	8012510 <rcutils_string_array_fini>
 801244e:	b928      	cbnz	r0, 801245c <rcutils_split+0x130>
 8012450:	200a      	movs	r0, #10
 8012452:	b00b      	add	sp, #44	@ 0x2c
 8012454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012458:	b002      	add	sp, #8
 801245a:	4770      	bx	lr
 801245c:	f7f7 f858 	bl	8009510 <rcutils_reset_error>
 8012460:	e7f6      	b.n	8012450 <rcutils_split+0x124>
 8012462:	aa14      	add	r2, sp, #80	@ 0x50
 8012464:	2101      	movs	r1, #1
 8012466:	4638      	mov	r0, r7
 8012468:	f000 f830 	bl	80124cc <rcutils_string_array_init>
 801246c:	2800      	cmp	r0, #0
 801246e:	d1eb      	bne.n	8012448 <rcutils_split+0x11c>
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	3b01      	subs	r3, #1
 8012476:	2100      	movs	r1, #0
 8012478:	603b      	str	r3, [r7, #0]
 801247a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801247e:	e7df      	b.n	8012440 <rcutils_split+0x114>
 8012480:	200b      	movs	r0, #11
 8012482:	b00b      	add	sp, #44	@ 0x2c
 8012484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012488:	b002      	add	sp, #8
 801248a:	4770      	bx	lr
 801248c:	080142e4 	.word	0x080142e4

08012490 <rcutils_get_zero_initialized_string_array>:
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	b086      	sub	sp, #24
 8012494:	4606      	mov	r6, r0
 8012496:	4668      	mov	r0, sp
 8012498:	f7f6 ffda 	bl	8009450 <rcutils_get_zero_initialized_allocator>
 801249c:	46ee      	mov	lr, sp
 801249e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124a2:	4c09      	ldr	r4, [pc, #36]	@ (80124c8 <rcutils_get_zero_initialized_string_array+0x38>)
 80124a4:	f104 0508 	add.w	r5, r4, #8
 80124a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80124aa:	46a4      	mov	ip, r4
 80124ac:	f8de 3000 	ldr.w	r3, [lr]
 80124b0:	602b      	str	r3, [r5, #0]
 80124b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124b6:	4634      	mov	r4, r6
 80124b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124ba:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80124be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80124c2:	4630      	mov	r0, r6
 80124c4:	b006      	add	sp, #24
 80124c6:	bd70      	pop	{r4, r5, r6, pc}
 80124c8:	20010bb0 	.word	0x20010bb0

080124cc <rcutils_string_array_init>:
 80124cc:	b1da      	cbz	r2, 8012506 <rcutils_string_array_init+0x3a>
 80124ce:	b570      	push	{r4, r5, r6, lr}
 80124d0:	4605      	mov	r5, r0
 80124d2:	b1d0      	cbz	r0, 801250a <rcutils_string_array_init+0x3e>
 80124d4:	460e      	mov	r6, r1
 80124d6:	4614      	mov	r4, r2
 80124d8:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 80124dc:	6001      	str	r1, [r0, #0]
 80124de:	2104      	movs	r1, #4
 80124e0:	4630      	mov	r0, r6
 80124e2:	4798      	blx	r3
 80124e4:	6068      	str	r0, [r5, #4]
 80124e6:	b150      	cbz	r0, 80124fe <rcutils_string_array_init+0x32>
 80124e8:	46a4      	mov	ip, r4
 80124ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124ee:	f105 0408 	add.w	r4, r5, #8
 80124f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124f4:	f8dc 3000 	ldr.w	r3, [ip]
 80124f8:	6023      	str	r3, [r4, #0]
 80124fa:	2000      	movs	r0, #0
 80124fc:	bd70      	pop	{r4, r5, r6, pc}
 80124fe:	2e00      	cmp	r6, #0
 8012500:	d0f2      	beq.n	80124e8 <rcutils_string_array_init+0x1c>
 8012502:	200a      	movs	r0, #10
 8012504:	bd70      	pop	{r4, r5, r6, pc}
 8012506:	200b      	movs	r0, #11
 8012508:	4770      	bx	lr
 801250a:	200b      	movs	r0, #11
 801250c:	bd70      	pop	{r4, r5, r6, pc}
 801250e:	bf00      	nop

08012510 <rcutils_string_array_fini>:
 8012510:	b310      	cbz	r0, 8012558 <rcutils_string_array_fini+0x48>
 8012512:	6843      	ldr	r3, [r0, #4]
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	4604      	mov	r4, r0
 8012518:	b1d3      	cbz	r3, 8012550 <rcutils_string_array_fini+0x40>
 801251a:	3008      	adds	r0, #8
 801251c:	f7f6 ffd2 	bl	80094c4 <rcutils_allocator_is_valid>
 8012520:	b1c0      	cbz	r0, 8012554 <rcutils_string_array_fini+0x44>
 8012522:	e9d4 3000 	ldrd	r3, r0, [r4]
 8012526:	b16b      	cbz	r3, 8012544 <rcutils_string_array_fini+0x34>
 8012528:	2500      	movs	r5, #0
 801252a:	462e      	mov	r6, r5
 801252c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012530:	68e3      	ldr	r3, [r4, #12]
 8012532:	69a1      	ldr	r1, [r4, #24]
 8012534:	4798      	blx	r3
 8012536:	e9d4 3000 	ldrd	r3, r0, [r4]
 801253a:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801253e:	3501      	adds	r5, #1
 8012540:	42ab      	cmp	r3, r5
 8012542:	d8f3      	bhi.n	801252c <rcutils_string_array_fini+0x1c>
 8012544:	68e3      	ldr	r3, [r4, #12]
 8012546:	69a1      	ldr	r1, [r4, #24]
 8012548:	4798      	blx	r3
 801254a:	2300      	movs	r3, #0
 801254c:	e9c4 3300 	strd	r3, r3, [r4]
 8012550:	2000      	movs	r0, #0
 8012552:	bd70      	pop	{r4, r5, r6, pc}
 8012554:	200b      	movs	r0, #11
 8012556:	bd70      	pop	{r4, r5, r6, pc}
 8012558:	200b      	movs	r0, #11
 801255a:	4770      	bx	lr

0801255c <rmw_create_guard_condition>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	4605      	mov	r5, r0
 8012560:	4807      	ldr	r0, [pc, #28]	@ (8012580 <rmw_create_guard_condition+0x24>)
 8012562:	f7fe fc33 	bl	8010dcc <get_memory>
 8012566:	b148      	cbz	r0, 801257c <rmw_create_guard_condition+0x20>
 8012568:	6884      	ldr	r4, [r0, #8]
 801256a:	2300      	movs	r3, #0
 801256c:	7423      	strb	r3, [r4, #16]
 801256e:	61e5      	str	r5, [r4, #28]
 8012570:	f7fe fc94 	bl	8010e9c <rmw_get_implementation_identifier>
 8012574:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012578:	f104 0014 	add.w	r0, r4, #20
 801257c:	bd38      	pop	{r3, r4, r5, pc}
 801257e:	bf00      	nop
 8012580:	2000c120 	.word	0x2000c120

08012584 <rmw_destroy_guard_condition>:
 8012584:	b508      	push	{r3, lr}
 8012586:	4b08      	ldr	r3, [pc, #32]	@ (80125a8 <rmw_destroy_guard_condition+0x24>)
 8012588:	6819      	ldr	r1, [r3, #0]
 801258a:	b911      	cbnz	r1, 8012592 <rmw_destroy_guard_condition+0xe>
 801258c:	e00a      	b.n	80125a4 <rmw_destroy_guard_condition+0x20>
 801258e:	6849      	ldr	r1, [r1, #4]
 8012590:	b141      	cbz	r1, 80125a4 <rmw_destroy_guard_condition+0x20>
 8012592:	688b      	ldr	r3, [r1, #8]
 8012594:	3314      	adds	r3, #20
 8012596:	4298      	cmp	r0, r3
 8012598:	d1f9      	bne.n	801258e <rmw_destroy_guard_condition+0xa>
 801259a:	4803      	ldr	r0, [pc, #12]	@ (80125a8 <rmw_destroy_guard_condition+0x24>)
 801259c:	f7fe fc26 	bl	8010dec <put_memory>
 80125a0:	2000      	movs	r0, #0
 80125a2:	bd08      	pop	{r3, pc}
 80125a4:	2001      	movs	r0, #1
 80125a6:	bd08      	pop	{r3, pc}
 80125a8:	2000c120 	.word	0x2000c120

080125ac <rosidl_runtime_c__String__init>:
 80125ac:	b1b0      	cbz	r0, 80125dc <rosidl_runtime_c__String__init+0x30>
 80125ae:	b510      	push	{r4, lr}
 80125b0:	b086      	sub	sp, #24
 80125b2:	4604      	mov	r4, r0
 80125b4:	a801      	add	r0, sp, #4
 80125b6:	f7f6 ff59 	bl	800946c <rcutils_get_default_allocator>
 80125ba:	9b01      	ldr	r3, [sp, #4]
 80125bc:	9905      	ldr	r1, [sp, #20]
 80125be:	2001      	movs	r0, #1
 80125c0:	4798      	blx	r3
 80125c2:	6020      	str	r0, [r4, #0]
 80125c4:	b138      	cbz	r0, 80125d6 <rosidl_runtime_c__String__init+0x2a>
 80125c6:	2200      	movs	r2, #0
 80125c8:	2301      	movs	r3, #1
 80125ca:	7002      	strb	r2, [r0, #0]
 80125cc:	4618      	mov	r0, r3
 80125ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80125d2:	b006      	add	sp, #24
 80125d4:	bd10      	pop	{r4, pc}
 80125d6:	2000      	movs	r0, #0
 80125d8:	b006      	add	sp, #24
 80125da:	bd10      	pop	{r4, pc}
 80125dc:	2000      	movs	r0, #0
 80125de:	4770      	bx	lr

080125e0 <rosidl_runtime_c__String__fini>:
 80125e0:	b320      	cbz	r0, 801262c <rosidl_runtime_c__String__fini+0x4c>
 80125e2:	b510      	push	{r4, lr}
 80125e4:	6803      	ldr	r3, [r0, #0]
 80125e6:	b086      	sub	sp, #24
 80125e8:	4604      	mov	r4, r0
 80125ea:	b173      	cbz	r3, 801260a <rosidl_runtime_c__String__fini+0x2a>
 80125ec:	6883      	ldr	r3, [r0, #8]
 80125ee:	b1f3      	cbz	r3, 801262e <rosidl_runtime_c__String__fini+0x4e>
 80125f0:	a801      	add	r0, sp, #4
 80125f2:	f7f6 ff3b 	bl	800946c <rcutils_get_default_allocator>
 80125f6:	9b02      	ldr	r3, [sp, #8]
 80125f8:	9905      	ldr	r1, [sp, #20]
 80125fa:	6820      	ldr	r0, [r4, #0]
 80125fc:	4798      	blx	r3
 80125fe:	2300      	movs	r3, #0
 8012600:	e9c4 3300 	strd	r3, r3, [r4]
 8012604:	60a3      	str	r3, [r4, #8]
 8012606:	b006      	add	sp, #24
 8012608:	bd10      	pop	{r4, pc}
 801260a:	6843      	ldr	r3, [r0, #4]
 801260c:	b9db      	cbnz	r3, 8012646 <rosidl_runtime_c__String__fini+0x66>
 801260e:	6883      	ldr	r3, [r0, #8]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d0f8      	beq.n	8012606 <rosidl_runtime_c__String__fini+0x26>
 8012614:	4b12      	ldr	r3, [pc, #72]	@ (8012660 <rosidl_runtime_c__String__fini+0x80>)
 8012616:	4813      	ldr	r0, [pc, #76]	@ (8012664 <rosidl_runtime_c__String__fini+0x84>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2251      	movs	r2, #81	@ 0x51
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	2101      	movs	r1, #1
 8012620:	f000 fb82 	bl	8012d28 <fwrite>
 8012624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012628:	f000 f83e 	bl	80126a8 <exit>
 801262c:	4770      	bx	lr
 801262e:	4b0c      	ldr	r3, [pc, #48]	@ (8012660 <rosidl_runtime_c__String__fini+0x80>)
 8012630:	480d      	ldr	r0, [pc, #52]	@ (8012668 <rosidl_runtime_c__String__fini+0x88>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	224c      	movs	r2, #76	@ 0x4c
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	2101      	movs	r1, #1
 801263a:	f000 fb75 	bl	8012d28 <fwrite>
 801263e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012642:	f000 f831 	bl	80126a8 <exit>
 8012646:	4b06      	ldr	r3, [pc, #24]	@ (8012660 <rosidl_runtime_c__String__fini+0x80>)
 8012648:	4808      	ldr	r0, [pc, #32]	@ (801266c <rosidl_runtime_c__String__fini+0x8c>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	224e      	movs	r2, #78	@ 0x4e
 801264e:	68db      	ldr	r3, [r3, #12]
 8012650:	2101      	movs	r1, #1
 8012652:	f000 fb69 	bl	8012d28 <fwrite>
 8012656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801265a:	f000 f825 	bl	80126a8 <exit>
 801265e:	bf00      	nop
 8012660:	20000b18 	.word	0x20000b18
 8012664:	08014d78 	.word	0x08014d78
 8012668:	08014cd8 	.word	0x08014cd8
 801266c:	08014d28 	.word	0x08014d28

08012670 <calloc>:
 8012670:	4b02      	ldr	r3, [pc, #8]	@ (801267c <calloc+0xc>)
 8012672:	460a      	mov	r2, r1
 8012674:	4601      	mov	r1, r0
 8012676:	6818      	ldr	r0, [r3, #0]
 8012678:	f000 b802 	b.w	8012680 <_calloc_r>
 801267c:	20000b18 	.word	0x20000b18

08012680 <_calloc_r>:
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	fba1 5402 	umull	r5, r4, r1, r2
 8012686:	b93c      	cbnz	r4, 8012698 <_calloc_r+0x18>
 8012688:	4629      	mov	r1, r5
 801268a:	f000 f899 	bl	80127c0 <_malloc_r>
 801268e:	4606      	mov	r6, r0
 8012690:	b928      	cbnz	r0, 801269e <_calloc_r+0x1e>
 8012692:	2600      	movs	r6, #0
 8012694:	4630      	mov	r0, r6
 8012696:	bd70      	pop	{r4, r5, r6, pc}
 8012698:	220c      	movs	r2, #12
 801269a:	6002      	str	r2, [r0, #0]
 801269c:	e7f9      	b.n	8012692 <_calloc_r+0x12>
 801269e:	462a      	mov	r2, r5
 80126a0:	4621      	mov	r1, r4
 80126a2:	f000 fca5 	bl	8012ff0 <memset>
 80126a6:	e7f5      	b.n	8012694 <_calloc_r+0x14>

080126a8 <exit>:
 80126a8:	b508      	push	{r3, lr}
 80126aa:	4b06      	ldr	r3, [pc, #24]	@ (80126c4 <exit+0x1c>)
 80126ac:	4604      	mov	r4, r0
 80126ae:	b113      	cbz	r3, 80126b6 <exit+0xe>
 80126b0:	2100      	movs	r1, #0
 80126b2:	f3af 8000 	nop.w
 80126b6:	4b04      	ldr	r3, [pc, #16]	@ (80126c8 <exit+0x20>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	b103      	cbz	r3, 80126be <exit+0x16>
 80126bc:	4798      	blx	r3
 80126be:	4620      	mov	r0, r4
 80126c0:	f7ef f968 	bl	8001994 <_exit>
 80126c4:	00000000 	.word	0x00000000
 80126c8:	20010d0c 	.word	0x20010d0c

080126cc <getenv>:
 80126cc:	b507      	push	{r0, r1, r2, lr}
 80126ce:	4b04      	ldr	r3, [pc, #16]	@ (80126e0 <getenv+0x14>)
 80126d0:	4601      	mov	r1, r0
 80126d2:	aa01      	add	r2, sp, #4
 80126d4:	6818      	ldr	r0, [r3, #0]
 80126d6:	f000 f805 	bl	80126e4 <_findenv_r>
 80126da:	b003      	add	sp, #12
 80126dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80126e0:	20000b18 	.word	0x20000b18

080126e4 <_findenv_r>:
 80126e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8012758 <_findenv_r+0x74>
 80126ec:	4606      	mov	r6, r0
 80126ee:	4689      	mov	r9, r1
 80126f0:	4617      	mov	r7, r2
 80126f2:	f000 fddb 	bl	80132ac <__env_lock>
 80126f6:	f8da 4000 	ldr.w	r4, [sl]
 80126fa:	b134      	cbz	r4, 801270a <_findenv_r+0x26>
 80126fc:	464b      	mov	r3, r9
 80126fe:	4698      	mov	r8, r3
 8012700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012704:	b13a      	cbz	r2, 8012716 <_findenv_r+0x32>
 8012706:	2a3d      	cmp	r2, #61	@ 0x3d
 8012708:	d1f9      	bne.n	80126fe <_findenv_r+0x1a>
 801270a:	4630      	mov	r0, r6
 801270c:	f000 fdd4 	bl	80132b8 <__env_unlock>
 8012710:	2000      	movs	r0, #0
 8012712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012716:	eba8 0809 	sub.w	r8, r8, r9
 801271a:	46a3      	mov	fp, r4
 801271c:	f854 0b04 	ldr.w	r0, [r4], #4
 8012720:	2800      	cmp	r0, #0
 8012722:	d0f2      	beq.n	801270a <_findenv_r+0x26>
 8012724:	4642      	mov	r2, r8
 8012726:	4649      	mov	r1, r9
 8012728:	f000 fc77 	bl	801301a <strncmp>
 801272c:	2800      	cmp	r0, #0
 801272e:	d1f4      	bne.n	801271a <_findenv_r+0x36>
 8012730:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012734:	eb03 0508 	add.w	r5, r3, r8
 8012738:	f813 3008 	ldrb.w	r3, [r3, r8]
 801273c:	2b3d      	cmp	r3, #61	@ 0x3d
 801273e:	d1ec      	bne.n	801271a <_findenv_r+0x36>
 8012740:	f8da 3000 	ldr.w	r3, [sl]
 8012744:	ebab 0303 	sub.w	r3, fp, r3
 8012748:	109b      	asrs	r3, r3, #2
 801274a:	4630      	mov	r0, r6
 801274c:	603b      	str	r3, [r7, #0]
 801274e:	f000 fdb3 	bl	80132b8 <__env_unlock>
 8012752:	1c68      	adds	r0, r5, #1
 8012754:	e7dd      	b.n	8012712 <_findenv_r+0x2e>
 8012756:	bf00      	nop
 8012758:	20000000 	.word	0x20000000

0801275c <malloc>:
 801275c:	4b02      	ldr	r3, [pc, #8]	@ (8012768 <malloc+0xc>)
 801275e:	4601      	mov	r1, r0
 8012760:	6818      	ldr	r0, [r3, #0]
 8012762:	f000 b82d 	b.w	80127c0 <_malloc_r>
 8012766:	bf00      	nop
 8012768:	20000b18 	.word	0x20000b18

0801276c <free>:
 801276c:	4b02      	ldr	r3, [pc, #8]	@ (8012778 <free+0xc>)
 801276e:	4601      	mov	r1, r0
 8012770:	6818      	ldr	r0, [r3, #0]
 8012772:	f000 bda7 	b.w	80132c4 <_free_r>
 8012776:	bf00      	nop
 8012778:	20000b18 	.word	0x20000b18

0801277c <sbrk_aligned>:
 801277c:	b570      	push	{r4, r5, r6, lr}
 801277e:	4e0f      	ldr	r6, [pc, #60]	@ (80127bc <sbrk_aligned+0x40>)
 8012780:	460c      	mov	r4, r1
 8012782:	6831      	ldr	r1, [r6, #0]
 8012784:	4605      	mov	r5, r0
 8012786:	b911      	cbnz	r1, 801278e <sbrk_aligned+0x12>
 8012788:	f000 fd0c 	bl	80131a4 <_sbrk_r>
 801278c:	6030      	str	r0, [r6, #0]
 801278e:	4621      	mov	r1, r4
 8012790:	4628      	mov	r0, r5
 8012792:	f000 fd07 	bl	80131a4 <_sbrk_r>
 8012796:	1c43      	adds	r3, r0, #1
 8012798:	d103      	bne.n	80127a2 <sbrk_aligned+0x26>
 801279a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801279e:	4620      	mov	r0, r4
 80127a0:	bd70      	pop	{r4, r5, r6, pc}
 80127a2:	1cc4      	adds	r4, r0, #3
 80127a4:	f024 0403 	bic.w	r4, r4, #3
 80127a8:	42a0      	cmp	r0, r4
 80127aa:	d0f8      	beq.n	801279e <sbrk_aligned+0x22>
 80127ac:	1a21      	subs	r1, r4, r0
 80127ae:	4628      	mov	r0, r5
 80127b0:	f000 fcf8 	bl	80131a4 <_sbrk_r>
 80127b4:	3001      	adds	r0, #1
 80127b6:	d1f2      	bne.n	801279e <sbrk_aligned+0x22>
 80127b8:	e7ef      	b.n	801279a <sbrk_aligned+0x1e>
 80127ba:	bf00      	nop
 80127bc:	20010bcc 	.word	0x20010bcc

080127c0 <_malloc_r>:
 80127c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127c4:	1ccd      	adds	r5, r1, #3
 80127c6:	f025 0503 	bic.w	r5, r5, #3
 80127ca:	3508      	adds	r5, #8
 80127cc:	2d0c      	cmp	r5, #12
 80127ce:	bf38      	it	cc
 80127d0:	250c      	movcc	r5, #12
 80127d2:	2d00      	cmp	r5, #0
 80127d4:	4606      	mov	r6, r0
 80127d6:	db01      	blt.n	80127dc <_malloc_r+0x1c>
 80127d8:	42a9      	cmp	r1, r5
 80127da:	d904      	bls.n	80127e6 <_malloc_r+0x26>
 80127dc:	230c      	movs	r3, #12
 80127de:	6033      	str	r3, [r6, #0]
 80127e0:	2000      	movs	r0, #0
 80127e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80128bc <_malloc_r+0xfc>
 80127ea:	f000 f869 	bl	80128c0 <__malloc_lock>
 80127ee:	f8d8 3000 	ldr.w	r3, [r8]
 80127f2:	461c      	mov	r4, r3
 80127f4:	bb44      	cbnz	r4, 8012848 <_malloc_r+0x88>
 80127f6:	4629      	mov	r1, r5
 80127f8:	4630      	mov	r0, r6
 80127fa:	f7ff ffbf 	bl	801277c <sbrk_aligned>
 80127fe:	1c43      	adds	r3, r0, #1
 8012800:	4604      	mov	r4, r0
 8012802:	d158      	bne.n	80128b6 <_malloc_r+0xf6>
 8012804:	f8d8 4000 	ldr.w	r4, [r8]
 8012808:	4627      	mov	r7, r4
 801280a:	2f00      	cmp	r7, #0
 801280c:	d143      	bne.n	8012896 <_malloc_r+0xd6>
 801280e:	2c00      	cmp	r4, #0
 8012810:	d04b      	beq.n	80128aa <_malloc_r+0xea>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	4639      	mov	r1, r7
 8012816:	4630      	mov	r0, r6
 8012818:	eb04 0903 	add.w	r9, r4, r3
 801281c:	f000 fcc2 	bl	80131a4 <_sbrk_r>
 8012820:	4581      	cmp	r9, r0
 8012822:	d142      	bne.n	80128aa <_malloc_r+0xea>
 8012824:	6821      	ldr	r1, [r4, #0]
 8012826:	1a6d      	subs	r5, r5, r1
 8012828:	4629      	mov	r1, r5
 801282a:	4630      	mov	r0, r6
 801282c:	f7ff ffa6 	bl	801277c <sbrk_aligned>
 8012830:	3001      	adds	r0, #1
 8012832:	d03a      	beq.n	80128aa <_malloc_r+0xea>
 8012834:	6823      	ldr	r3, [r4, #0]
 8012836:	442b      	add	r3, r5
 8012838:	6023      	str	r3, [r4, #0]
 801283a:	f8d8 3000 	ldr.w	r3, [r8]
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	bb62      	cbnz	r2, 801289c <_malloc_r+0xdc>
 8012842:	f8c8 7000 	str.w	r7, [r8]
 8012846:	e00f      	b.n	8012868 <_malloc_r+0xa8>
 8012848:	6822      	ldr	r2, [r4, #0]
 801284a:	1b52      	subs	r2, r2, r5
 801284c:	d420      	bmi.n	8012890 <_malloc_r+0xd0>
 801284e:	2a0b      	cmp	r2, #11
 8012850:	d917      	bls.n	8012882 <_malloc_r+0xc2>
 8012852:	1961      	adds	r1, r4, r5
 8012854:	42a3      	cmp	r3, r4
 8012856:	6025      	str	r5, [r4, #0]
 8012858:	bf18      	it	ne
 801285a:	6059      	strne	r1, [r3, #4]
 801285c:	6863      	ldr	r3, [r4, #4]
 801285e:	bf08      	it	eq
 8012860:	f8c8 1000 	streq.w	r1, [r8]
 8012864:	5162      	str	r2, [r4, r5]
 8012866:	604b      	str	r3, [r1, #4]
 8012868:	4630      	mov	r0, r6
 801286a:	f000 f82f 	bl	80128cc <__malloc_unlock>
 801286e:	f104 000b 	add.w	r0, r4, #11
 8012872:	1d23      	adds	r3, r4, #4
 8012874:	f020 0007 	bic.w	r0, r0, #7
 8012878:	1ac2      	subs	r2, r0, r3
 801287a:	bf1c      	itt	ne
 801287c:	1a1b      	subne	r3, r3, r0
 801287e:	50a3      	strne	r3, [r4, r2]
 8012880:	e7af      	b.n	80127e2 <_malloc_r+0x22>
 8012882:	6862      	ldr	r2, [r4, #4]
 8012884:	42a3      	cmp	r3, r4
 8012886:	bf0c      	ite	eq
 8012888:	f8c8 2000 	streq.w	r2, [r8]
 801288c:	605a      	strne	r2, [r3, #4]
 801288e:	e7eb      	b.n	8012868 <_malloc_r+0xa8>
 8012890:	4623      	mov	r3, r4
 8012892:	6864      	ldr	r4, [r4, #4]
 8012894:	e7ae      	b.n	80127f4 <_malloc_r+0x34>
 8012896:	463c      	mov	r4, r7
 8012898:	687f      	ldr	r7, [r7, #4]
 801289a:	e7b6      	b.n	801280a <_malloc_r+0x4a>
 801289c:	461a      	mov	r2, r3
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	42a3      	cmp	r3, r4
 80128a2:	d1fb      	bne.n	801289c <_malloc_r+0xdc>
 80128a4:	2300      	movs	r3, #0
 80128a6:	6053      	str	r3, [r2, #4]
 80128a8:	e7de      	b.n	8012868 <_malloc_r+0xa8>
 80128aa:	230c      	movs	r3, #12
 80128ac:	6033      	str	r3, [r6, #0]
 80128ae:	4630      	mov	r0, r6
 80128b0:	f000 f80c 	bl	80128cc <__malloc_unlock>
 80128b4:	e794      	b.n	80127e0 <_malloc_r+0x20>
 80128b6:	6005      	str	r5, [r0, #0]
 80128b8:	e7d6      	b.n	8012868 <_malloc_r+0xa8>
 80128ba:	bf00      	nop
 80128bc:	20010bd0 	.word	0x20010bd0

080128c0 <__malloc_lock>:
 80128c0:	4801      	ldr	r0, [pc, #4]	@ (80128c8 <__malloc_lock+0x8>)
 80128c2:	f000 bcbc 	b.w	801323e <__retarget_lock_acquire_recursive>
 80128c6:	bf00      	nop
 80128c8:	20010d15 	.word	0x20010d15

080128cc <__malloc_unlock>:
 80128cc:	4801      	ldr	r0, [pc, #4]	@ (80128d4 <__malloc_unlock+0x8>)
 80128ce:	f000 bcb7 	b.w	8013240 <__retarget_lock_release_recursive>
 80128d2:	bf00      	nop
 80128d4:	20010d15 	.word	0x20010d15

080128d8 <srand>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	4b10      	ldr	r3, [pc, #64]	@ (801291c <srand+0x44>)
 80128dc:	681d      	ldr	r5, [r3, #0]
 80128de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80128e0:	4604      	mov	r4, r0
 80128e2:	b9b3      	cbnz	r3, 8012912 <srand+0x3a>
 80128e4:	2018      	movs	r0, #24
 80128e6:	f7ff ff39 	bl	801275c <malloc>
 80128ea:	4602      	mov	r2, r0
 80128ec:	6328      	str	r0, [r5, #48]	@ 0x30
 80128ee:	b920      	cbnz	r0, 80128fa <srand+0x22>
 80128f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012920 <srand+0x48>)
 80128f2:	480c      	ldr	r0, [pc, #48]	@ (8012924 <srand+0x4c>)
 80128f4:	2146      	movs	r1, #70	@ 0x46
 80128f6:	f000 fcbb 	bl	8013270 <__assert_func>
 80128fa:	490b      	ldr	r1, [pc, #44]	@ (8012928 <srand+0x50>)
 80128fc:	4b0b      	ldr	r3, [pc, #44]	@ (801292c <srand+0x54>)
 80128fe:	e9c0 1300 	strd	r1, r3, [r0]
 8012902:	4b0b      	ldr	r3, [pc, #44]	@ (8012930 <srand+0x58>)
 8012904:	6083      	str	r3, [r0, #8]
 8012906:	230b      	movs	r3, #11
 8012908:	8183      	strh	r3, [r0, #12]
 801290a:	2100      	movs	r1, #0
 801290c:	2001      	movs	r0, #1
 801290e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012912:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012914:	2200      	movs	r2, #0
 8012916:	611c      	str	r4, [r3, #16]
 8012918:	615a      	str	r2, [r3, #20]
 801291a:	bd38      	pop	{r3, r4, r5, pc}
 801291c:	20000b18 	.word	0x20000b18
 8012920:	08014dca 	.word	0x08014dca
 8012924:	08014de1 	.word	0x08014de1
 8012928:	abcd330e 	.word	0xabcd330e
 801292c:	e66d1234 	.word	0xe66d1234
 8012930:	0005deec 	.word	0x0005deec

08012934 <rand>:
 8012934:	4b16      	ldr	r3, [pc, #88]	@ (8012990 <rand+0x5c>)
 8012936:	b510      	push	{r4, lr}
 8012938:	681c      	ldr	r4, [r3, #0]
 801293a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801293c:	b9b3      	cbnz	r3, 801296c <rand+0x38>
 801293e:	2018      	movs	r0, #24
 8012940:	f7ff ff0c 	bl	801275c <malloc>
 8012944:	4602      	mov	r2, r0
 8012946:	6320      	str	r0, [r4, #48]	@ 0x30
 8012948:	b920      	cbnz	r0, 8012954 <rand+0x20>
 801294a:	4b12      	ldr	r3, [pc, #72]	@ (8012994 <rand+0x60>)
 801294c:	4812      	ldr	r0, [pc, #72]	@ (8012998 <rand+0x64>)
 801294e:	2152      	movs	r1, #82	@ 0x52
 8012950:	f000 fc8e 	bl	8013270 <__assert_func>
 8012954:	4911      	ldr	r1, [pc, #68]	@ (801299c <rand+0x68>)
 8012956:	4b12      	ldr	r3, [pc, #72]	@ (80129a0 <rand+0x6c>)
 8012958:	e9c0 1300 	strd	r1, r3, [r0]
 801295c:	4b11      	ldr	r3, [pc, #68]	@ (80129a4 <rand+0x70>)
 801295e:	6083      	str	r3, [r0, #8]
 8012960:	230b      	movs	r3, #11
 8012962:	8183      	strh	r3, [r0, #12]
 8012964:	2100      	movs	r1, #0
 8012966:	2001      	movs	r0, #1
 8012968:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801296c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801296e:	480e      	ldr	r0, [pc, #56]	@ (80129a8 <rand+0x74>)
 8012970:	690b      	ldr	r3, [r1, #16]
 8012972:	694c      	ldr	r4, [r1, #20]
 8012974:	4a0d      	ldr	r2, [pc, #52]	@ (80129ac <rand+0x78>)
 8012976:	4358      	muls	r0, r3
 8012978:	fb02 0004 	mla	r0, r2, r4, r0
 801297c:	fba3 3202 	umull	r3, r2, r3, r2
 8012980:	3301      	adds	r3, #1
 8012982:	eb40 0002 	adc.w	r0, r0, r2
 8012986:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801298a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801298e:	bd10      	pop	{r4, pc}
 8012990:	20000b18 	.word	0x20000b18
 8012994:	08014dca 	.word	0x08014dca
 8012998:	08014de1 	.word	0x08014de1
 801299c:	abcd330e 	.word	0xabcd330e
 80129a0:	e66d1234 	.word	0xe66d1234
 80129a4:	0005deec 	.word	0x0005deec
 80129a8:	5851f42d 	.word	0x5851f42d
 80129ac:	4c957f2d 	.word	0x4c957f2d

080129b0 <realloc>:
 80129b0:	4b02      	ldr	r3, [pc, #8]	@ (80129bc <realloc+0xc>)
 80129b2:	460a      	mov	r2, r1
 80129b4:	4601      	mov	r1, r0
 80129b6:	6818      	ldr	r0, [r3, #0]
 80129b8:	f000 b802 	b.w	80129c0 <_realloc_r>
 80129bc:	20000b18 	.word	0x20000b18

080129c0 <_realloc_r>:
 80129c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c4:	4680      	mov	r8, r0
 80129c6:	4615      	mov	r5, r2
 80129c8:	460c      	mov	r4, r1
 80129ca:	b921      	cbnz	r1, 80129d6 <_realloc_r+0x16>
 80129cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129d0:	4611      	mov	r1, r2
 80129d2:	f7ff bef5 	b.w	80127c0 <_malloc_r>
 80129d6:	b92a      	cbnz	r2, 80129e4 <_realloc_r+0x24>
 80129d8:	f000 fc74 	bl	80132c4 <_free_r>
 80129dc:	2400      	movs	r4, #0
 80129de:	4620      	mov	r0, r4
 80129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e4:	f000 fcb8 	bl	8013358 <_malloc_usable_size_r>
 80129e8:	4285      	cmp	r5, r0
 80129ea:	4606      	mov	r6, r0
 80129ec:	d802      	bhi.n	80129f4 <_realloc_r+0x34>
 80129ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80129f2:	d8f4      	bhi.n	80129de <_realloc_r+0x1e>
 80129f4:	4629      	mov	r1, r5
 80129f6:	4640      	mov	r0, r8
 80129f8:	f7ff fee2 	bl	80127c0 <_malloc_r>
 80129fc:	4607      	mov	r7, r0
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d0ec      	beq.n	80129dc <_realloc_r+0x1c>
 8012a02:	42b5      	cmp	r5, r6
 8012a04:	462a      	mov	r2, r5
 8012a06:	4621      	mov	r1, r4
 8012a08:	bf28      	it	cs
 8012a0a:	4632      	movcs	r2, r6
 8012a0c:	f000 fc21 	bl	8013252 <memcpy>
 8012a10:	4621      	mov	r1, r4
 8012a12:	4640      	mov	r0, r8
 8012a14:	f000 fc56 	bl	80132c4 <_free_r>
 8012a18:	463c      	mov	r4, r7
 8012a1a:	e7e0      	b.n	80129de <_realloc_r+0x1e>

08012a1c <_strtoul_l.constprop.0>:
 8012a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a20:	4e34      	ldr	r6, [pc, #208]	@ (8012af4 <_strtoul_l.constprop.0+0xd8>)
 8012a22:	4686      	mov	lr, r0
 8012a24:	460d      	mov	r5, r1
 8012a26:	4628      	mov	r0, r5
 8012a28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a2c:	5d37      	ldrb	r7, [r6, r4]
 8012a2e:	f017 0708 	ands.w	r7, r7, #8
 8012a32:	d1f8      	bne.n	8012a26 <_strtoul_l.constprop.0+0xa>
 8012a34:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a36:	d12f      	bne.n	8012a98 <_strtoul_l.constprop.0+0x7c>
 8012a38:	782c      	ldrb	r4, [r5, #0]
 8012a3a:	2701      	movs	r7, #1
 8012a3c:	1c85      	adds	r5, r0, #2
 8012a3e:	f033 0010 	bics.w	r0, r3, #16
 8012a42:	d109      	bne.n	8012a58 <_strtoul_l.constprop.0+0x3c>
 8012a44:	2c30      	cmp	r4, #48	@ 0x30
 8012a46:	d12c      	bne.n	8012aa2 <_strtoul_l.constprop.0+0x86>
 8012a48:	7828      	ldrb	r0, [r5, #0]
 8012a4a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012a4e:	2858      	cmp	r0, #88	@ 0x58
 8012a50:	d127      	bne.n	8012aa2 <_strtoul_l.constprop.0+0x86>
 8012a52:	786c      	ldrb	r4, [r5, #1]
 8012a54:	2310      	movs	r3, #16
 8012a56:	3502      	adds	r5, #2
 8012a58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012a5c:	2600      	movs	r6, #0
 8012a5e:	fbb8 f8f3 	udiv	r8, r8, r3
 8012a62:	fb03 f908 	mul.w	r9, r3, r8
 8012a66:	ea6f 0909 	mvn.w	r9, r9
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012a70:	f1bc 0f09 	cmp.w	ip, #9
 8012a74:	d81c      	bhi.n	8012ab0 <_strtoul_l.constprop.0+0x94>
 8012a76:	4664      	mov	r4, ip
 8012a78:	42a3      	cmp	r3, r4
 8012a7a:	dd2a      	ble.n	8012ad2 <_strtoul_l.constprop.0+0xb6>
 8012a7c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8012a80:	d007      	beq.n	8012a92 <_strtoul_l.constprop.0+0x76>
 8012a82:	4580      	cmp	r8, r0
 8012a84:	d322      	bcc.n	8012acc <_strtoul_l.constprop.0+0xb0>
 8012a86:	d101      	bne.n	8012a8c <_strtoul_l.constprop.0+0x70>
 8012a88:	45a1      	cmp	r9, r4
 8012a8a:	db1f      	blt.n	8012acc <_strtoul_l.constprop.0+0xb0>
 8012a8c:	fb00 4003 	mla	r0, r0, r3, r4
 8012a90:	2601      	movs	r6, #1
 8012a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a96:	e7e9      	b.n	8012a6c <_strtoul_l.constprop.0+0x50>
 8012a98:	2c2b      	cmp	r4, #43	@ 0x2b
 8012a9a:	bf04      	itt	eq
 8012a9c:	782c      	ldrbeq	r4, [r5, #0]
 8012a9e:	1c85      	addeq	r5, r0, #2
 8012aa0:	e7cd      	b.n	8012a3e <_strtoul_l.constprop.0+0x22>
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d1d8      	bne.n	8012a58 <_strtoul_l.constprop.0+0x3c>
 8012aa6:	2c30      	cmp	r4, #48	@ 0x30
 8012aa8:	bf0c      	ite	eq
 8012aaa:	2308      	moveq	r3, #8
 8012aac:	230a      	movne	r3, #10
 8012aae:	e7d3      	b.n	8012a58 <_strtoul_l.constprop.0+0x3c>
 8012ab0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012ab4:	f1bc 0f19 	cmp.w	ip, #25
 8012ab8:	d801      	bhi.n	8012abe <_strtoul_l.constprop.0+0xa2>
 8012aba:	3c37      	subs	r4, #55	@ 0x37
 8012abc:	e7dc      	b.n	8012a78 <_strtoul_l.constprop.0+0x5c>
 8012abe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012ac2:	f1bc 0f19 	cmp.w	ip, #25
 8012ac6:	d804      	bhi.n	8012ad2 <_strtoul_l.constprop.0+0xb6>
 8012ac8:	3c57      	subs	r4, #87	@ 0x57
 8012aca:	e7d5      	b.n	8012a78 <_strtoul_l.constprop.0+0x5c>
 8012acc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012ad0:	e7df      	b.n	8012a92 <_strtoul_l.constprop.0+0x76>
 8012ad2:	1c73      	adds	r3, r6, #1
 8012ad4:	d106      	bne.n	8012ae4 <_strtoul_l.constprop.0+0xc8>
 8012ad6:	2322      	movs	r3, #34	@ 0x22
 8012ad8:	f8ce 3000 	str.w	r3, [lr]
 8012adc:	4630      	mov	r0, r6
 8012ade:	b932      	cbnz	r2, 8012aee <_strtoul_l.constprop.0+0xd2>
 8012ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ae4:	b107      	cbz	r7, 8012ae8 <_strtoul_l.constprop.0+0xcc>
 8012ae6:	4240      	negs	r0, r0
 8012ae8:	2a00      	cmp	r2, #0
 8012aea:	d0f9      	beq.n	8012ae0 <_strtoul_l.constprop.0+0xc4>
 8012aec:	b106      	cbz	r6, 8012af0 <_strtoul_l.constprop.0+0xd4>
 8012aee:	1e69      	subs	r1, r5, #1
 8012af0:	6011      	str	r1, [r2, #0]
 8012af2:	e7f5      	b.n	8012ae0 <_strtoul_l.constprop.0+0xc4>
 8012af4:	08014e3a 	.word	0x08014e3a

08012af8 <strtoul>:
 8012af8:	4613      	mov	r3, r2
 8012afa:	460a      	mov	r2, r1
 8012afc:	4601      	mov	r1, r0
 8012afe:	4802      	ldr	r0, [pc, #8]	@ (8012b08 <strtoul+0x10>)
 8012b00:	6800      	ldr	r0, [r0, #0]
 8012b02:	f7ff bf8b 	b.w	8012a1c <_strtoul_l.constprop.0>
 8012b06:	bf00      	nop
 8012b08:	20000b18 	.word	0x20000b18

08012b0c <std>:
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	b510      	push	{r4, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	e9c0 3300 	strd	r3, r3, [r0]
 8012b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b1a:	6083      	str	r3, [r0, #8]
 8012b1c:	8181      	strh	r1, [r0, #12]
 8012b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b20:	81c2      	strh	r2, [r0, #14]
 8012b22:	6183      	str	r3, [r0, #24]
 8012b24:	4619      	mov	r1, r3
 8012b26:	2208      	movs	r2, #8
 8012b28:	305c      	adds	r0, #92	@ 0x5c
 8012b2a:	f000 fa61 	bl	8012ff0 <memset>
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b64 <std+0x58>)
 8012b30:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b32:	4b0d      	ldr	r3, [pc, #52]	@ (8012b68 <std+0x5c>)
 8012b34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b36:	4b0d      	ldr	r3, [pc, #52]	@ (8012b6c <std+0x60>)
 8012b38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b70 <std+0x64>)
 8012b3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b74 <std+0x68>)
 8012b40:	6224      	str	r4, [r4, #32]
 8012b42:	429c      	cmp	r4, r3
 8012b44:	d006      	beq.n	8012b54 <std+0x48>
 8012b46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b4a:	4294      	cmp	r4, r2
 8012b4c:	d002      	beq.n	8012b54 <std+0x48>
 8012b4e:	33d0      	adds	r3, #208	@ 0xd0
 8012b50:	429c      	cmp	r4, r3
 8012b52:	d105      	bne.n	8012b60 <std+0x54>
 8012b54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5c:	f000 bb6e 	b.w	801323c <__retarget_lock_init_recursive>
 8012b60:	bd10      	pop	{r4, pc}
 8012b62:	bf00      	nop
 8012b64:	08012dd1 	.word	0x08012dd1
 8012b68:	08012df3 	.word	0x08012df3
 8012b6c:	08012e2b 	.word	0x08012e2b
 8012b70:	08012e4f 	.word	0x08012e4f
 8012b74:	20010bd4 	.word	0x20010bd4

08012b78 <stdio_exit_handler>:
 8012b78:	4a02      	ldr	r2, [pc, #8]	@ (8012b84 <stdio_exit_handler+0xc>)
 8012b7a:	4903      	ldr	r1, [pc, #12]	@ (8012b88 <stdio_exit_handler+0x10>)
 8012b7c:	4803      	ldr	r0, [pc, #12]	@ (8012b8c <stdio_exit_handler+0x14>)
 8012b7e:	f000 b869 	b.w	8012c54 <_fwalk_sglue>
 8012b82:	bf00      	nop
 8012b84:	20000b0c 	.word	0x20000b0c
 8012b88:	08013cc1 	.word	0x08013cc1
 8012b8c:	20000b1c 	.word	0x20000b1c

08012b90 <cleanup_stdio>:
 8012b90:	6841      	ldr	r1, [r0, #4]
 8012b92:	4b0c      	ldr	r3, [pc, #48]	@ (8012bc4 <cleanup_stdio+0x34>)
 8012b94:	4299      	cmp	r1, r3
 8012b96:	b510      	push	{r4, lr}
 8012b98:	4604      	mov	r4, r0
 8012b9a:	d001      	beq.n	8012ba0 <cleanup_stdio+0x10>
 8012b9c:	f001 f890 	bl	8013cc0 <_fflush_r>
 8012ba0:	68a1      	ldr	r1, [r4, #8]
 8012ba2:	4b09      	ldr	r3, [pc, #36]	@ (8012bc8 <cleanup_stdio+0x38>)
 8012ba4:	4299      	cmp	r1, r3
 8012ba6:	d002      	beq.n	8012bae <cleanup_stdio+0x1e>
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f001 f889 	bl	8013cc0 <_fflush_r>
 8012bae:	68e1      	ldr	r1, [r4, #12]
 8012bb0:	4b06      	ldr	r3, [pc, #24]	@ (8012bcc <cleanup_stdio+0x3c>)
 8012bb2:	4299      	cmp	r1, r3
 8012bb4:	d004      	beq.n	8012bc0 <cleanup_stdio+0x30>
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bbc:	f001 b880 	b.w	8013cc0 <_fflush_r>
 8012bc0:	bd10      	pop	{r4, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20010bd4 	.word	0x20010bd4
 8012bc8:	20010c3c 	.word	0x20010c3c
 8012bcc:	20010ca4 	.word	0x20010ca4

08012bd0 <global_stdio_init.part.0>:
 8012bd0:	b510      	push	{r4, lr}
 8012bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8012c00 <global_stdio_init.part.0+0x30>)
 8012bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8012c04 <global_stdio_init.part.0+0x34>)
 8012bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8012c08 <global_stdio_init.part.0+0x38>)
 8012bd8:	601a      	str	r2, [r3, #0]
 8012bda:	4620      	mov	r0, r4
 8012bdc:	2200      	movs	r2, #0
 8012bde:	2104      	movs	r1, #4
 8012be0:	f7ff ff94 	bl	8012b0c <std>
 8012be4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012be8:	2201      	movs	r2, #1
 8012bea:	2109      	movs	r1, #9
 8012bec:	f7ff ff8e 	bl	8012b0c <std>
 8012bf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012bf4:	2202      	movs	r2, #2
 8012bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bfa:	2112      	movs	r1, #18
 8012bfc:	f7ff bf86 	b.w	8012b0c <std>
 8012c00:	20010d0c 	.word	0x20010d0c
 8012c04:	20010bd4 	.word	0x20010bd4
 8012c08:	08012b79 	.word	0x08012b79

08012c0c <__sfp_lock_acquire>:
 8012c0c:	4801      	ldr	r0, [pc, #4]	@ (8012c14 <__sfp_lock_acquire+0x8>)
 8012c0e:	f000 bb16 	b.w	801323e <__retarget_lock_acquire_recursive>
 8012c12:	bf00      	nop
 8012c14:	20010d16 	.word	0x20010d16

08012c18 <__sfp_lock_release>:
 8012c18:	4801      	ldr	r0, [pc, #4]	@ (8012c20 <__sfp_lock_release+0x8>)
 8012c1a:	f000 bb11 	b.w	8013240 <__retarget_lock_release_recursive>
 8012c1e:	bf00      	nop
 8012c20:	20010d16 	.word	0x20010d16

08012c24 <__sinit>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	4604      	mov	r4, r0
 8012c28:	f7ff fff0 	bl	8012c0c <__sfp_lock_acquire>
 8012c2c:	6a23      	ldr	r3, [r4, #32]
 8012c2e:	b11b      	cbz	r3, 8012c38 <__sinit+0x14>
 8012c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c34:	f7ff bff0 	b.w	8012c18 <__sfp_lock_release>
 8012c38:	4b04      	ldr	r3, [pc, #16]	@ (8012c4c <__sinit+0x28>)
 8012c3a:	6223      	str	r3, [r4, #32]
 8012c3c:	4b04      	ldr	r3, [pc, #16]	@ (8012c50 <__sinit+0x2c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d1f5      	bne.n	8012c30 <__sinit+0xc>
 8012c44:	f7ff ffc4 	bl	8012bd0 <global_stdio_init.part.0>
 8012c48:	e7f2      	b.n	8012c30 <__sinit+0xc>
 8012c4a:	bf00      	nop
 8012c4c:	08012b91 	.word	0x08012b91
 8012c50:	20010d0c 	.word	0x20010d0c

08012c54 <_fwalk_sglue>:
 8012c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c58:	4607      	mov	r7, r0
 8012c5a:	4688      	mov	r8, r1
 8012c5c:	4614      	mov	r4, r2
 8012c5e:	2600      	movs	r6, #0
 8012c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c64:	f1b9 0901 	subs.w	r9, r9, #1
 8012c68:	d505      	bpl.n	8012c76 <_fwalk_sglue+0x22>
 8012c6a:	6824      	ldr	r4, [r4, #0]
 8012c6c:	2c00      	cmp	r4, #0
 8012c6e:	d1f7      	bne.n	8012c60 <_fwalk_sglue+0xc>
 8012c70:	4630      	mov	r0, r6
 8012c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c76:	89ab      	ldrh	r3, [r5, #12]
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d907      	bls.n	8012c8c <_fwalk_sglue+0x38>
 8012c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c80:	3301      	adds	r3, #1
 8012c82:	d003      	beq.n	8012c8c <_fwalk_sglue+0x38>
 8012c84:	4629      	mov	r1, r5
 8012c86:	4638      	mov	r0, r7
 8012c88:	47c0      	blx	r8
 8012c8a:	4306      	orrs	r6, r0
 8012c8c:	3568      	adds	r5, #104	@ 0x68
 8012c8e:	e7e9      	b.n	8012c64 <_fwalk_sglue+0x10>

08012c90 <_fwrite_r>:
 8012c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c94:	9c08      	ldr	r4, [sp, #32]
 8012c96:	468a      	mov	sl, r1
 8012c98:	4690      	mov	r8, r2
 8012c9a:	fb02 f903 	mul.w	r9, r2, r3
 8012c9e:	4606      	mov	r6, r0
 8012ca0:	b118      	cbz	r0, 8012caa <_fwrite_r+0x1a>
 8012ca2:	6a03      	ldr	r3, [r0, #32]
 8012ca4:	b90b      	cbnz	r3, 8012caa <_fwrite_r+0x1a>
 8012ca6:	f7ff ffbd 	bl	8012c24 <__sinit>
 8012caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012cac:	07dd      	lsls	r5, r3, #31
 8012cae:	d405      	bmi.n	8012cbc <_fwrite_r+0x2c>
 8012cb0:	89a3      	ldrh	r3, [r4, #12]
 8012cb2:	0598      	lsls	r0, r3, #22
 8012cb4:	d402      	bmi.n	8012cbc <_fwrite_r+0x2c>
 8012cb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cb8:	f000 fac1 	bl	801323e <__retarget_lock_acquire_recursive>
 8012cbc:	89a3      	ldrh	r3, [r4, #12]
 8012cbe:	0719      	lsls	r1, r3, #28
 8012cc0:	d516      	bpl.n	8012cf0 <_fwrite_r+0x60>
 8012cc2:	6923      	ldr	r3, [r4, #16]
 8012cc4:	b1a3      	cbz	r3, 8012cf0 <_fwrite_r+0x60>
 8012cc6:	2500      	movs	r5, #0
 8012cc8:	454d      	cmp	r5, r9
 8012cca:	d01f      	beq.n	8012d0c <_fwrite_r+0x7c>
 8012ccc:	68a7      	ldr	r7, [r4, #8]
 8012cce:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8012cd2:	3f01      	subs	r7, #1
 8012cd4:	2f00      	cmp	r7, #0
 8012cd6:	60a7      	str	r7, [r4, #8]
 8012cd8:	da04      	bge.n	8012ce4 <_fwrite_r+0x54>
 8012cda:	69a3      	ldr	r3, [r4, #24]
 8012cdc:	429f      	cmp	r7, r3
 8012cde:	db0f      	blt.n	8012d00 <_fwrite_r+0x70>
 8012ce0:	290a      	cmp	r1, #10
 8012ce2:	d00d      	beq.n	8012d00 <_fwrite_r+0x70>
 8012ce4:	6823      	ldr	r3, [r4, #0]
 8012ce6:	1c5a      	adds	r2, r3, #1
 8012ce8:	6022      	str	r2, [r4, #0]
 8012cea:	7019      	strb	r1, [r3, #0]
 8012cec:	3501      	adds	r5, #1
 8012cee:	e7eb      	b.n	8012cc8 <_fwrite_r+0x38>
 8012cf0:	4621      	mov	r1, r4
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	f000 f926 	bl	8012f44 <__swsetup_r>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d0e4      	beq.n	8012cc6 <_fwrite_r+0x36>
 8012cfc:	2500      	movs	r5, #0
 8012cfe:	e005      	b.n	8012d0c <_fwrite_r+0x7c>
 8012d00:	4622      	mov	r2, r4
 8012d02:	4630      	mov	r0, r6
 8012d04:	f000 f8e0 	bl	8012ec8 <__swbuf_r>
 8012d08:	3001      	adds	r0, #1
 8012d0a:	d1ef      	bne.n	8012cec <_fwrite_r+0x5c>
 8012d0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d0e:	07da      	lsls	r2, r3, #31
 8012d10:	d405      	bmi.n	8012d1e <_fwrite_r+0x8e>
 8012d12:	89a3      	ldrh	r3, [r4, #12]
 8012d14:	059b      	lsls	r3, r3, #22
 8012d16:	d402      	bmi.n	8012d1e <_fwrite_r+0x8e>
 8012d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d1a:	f000 fa91 	bl	8013240 <__retarget_lock_release_recursive>
 8012d1e:	fbb5 f0f8 	udiv	r0, r5, r8
 8012d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012d28 <fwrite>:
 8012d28:	b507      	push	{r0, r1, r2, lr}
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	460a      	mov	r2, r1
 8012d30:	4601      	mov	r1, r0
 8012d32:	4803      	ldr	r0, [pc, #12]	@ (8012d40 <fwrite+0x18>)
 8012d34:	6800      	ldr	r0, [r0, #0]
 8012d36:	f7ff ffab 	bl	8012c90 <_fwrite_r>
 8012d3a:	b003      	add	sp, #12
 8012d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d40:	20000b18 	.word	0x20000b18

08012d44 <iprintf>:
 8012d44:	b40f      	push	{r0, r1, r2, r3}
 8012d46:	b507      	push	{r0, r1, r2, lr}
 8012d48:	4906      	ldr	r1, [pc, #24]	@ (8012d64 <iprintf+0x20>)
 8012d4a:	ab04      	add	r3, sp, #16
 8012d4c:	6808      	ldr	r0, [r1, #0]
 8012d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d52:	6881      	ldr	r1, [r0, #8]
 8012d54:	9301      	str	r3, [sp, #4]
 8012d56:	f000 fc89 	bl	801366c <_vfiprintf_r>
 8012d5a:	b003      	add	sp, #12
 8012d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d60:	b004      	add	sp, #16
 8012d62:	4770      	bx	lr
 8012d64:	20000b18 	.word	0x20000b18

08012d68 <sniprintf>:
 8012d68:	b40c      	push	{r2, r3}
 8012d6a:	b530      	push	{r4, r5, lr}
 8012d6c:	4b17      	ldr	r3, [pc, #92]	@ (8012dcc <sniprintf+0x64>)
 8012d6e:	1e0c      	subs	r4, r1, #0
 8012d70:	681d      	ldr	r5, [r3, #0]
 8012d72:	b09d      	sub	sp, #116	@ 0x74
 8012d74:	da08      	bge.n	8012d88 <sniprintf+0x20>
 8012d76:	238b      	movs	r3, #139	@ 0x8b
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d7e:	b01d      	add	sp, #116	@ 0x74
 8012d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d84:	b002      	add	sp, #8
 8012d86:	4770      	bx	lr
 8012d88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012d90:	bf14      	ite	ne
 8012d92:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012d96:	4623      	moveq	r3, r4
 8012d98:	9304      	str	r3, [sp, #16]
 8012d9a:	9307      	str	r3, [sp, #28]
 8012d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012da0:	9002      	str	r0, [sp, #8]
 8012da2:	9006      	str	r0, [sp, #24]
 8012da4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012da8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012daa:	ab21      	add	r3, sp, #132	@ 0x84
 8012dac:	a902      	add	r1, sp, #8
 8012dae:	4628      	mov	r0, r5
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	f000 fb35 	bl	8013420 <_svfiprintf_r>
 8012db6:	1c43      	adds	r3, r0, #1
 8012db8:	bfbc      	itt	lt
 8012dba:	238b      	movlt	r3, #139	@ 0x8b
 8012dbc:	602b      	strlt	r3, [r5, #0]
 8012dbe:	2c00      	cmp	r4, #0
 8012dc0:	d0dd      	beq.n	8012d7e <sniprintf+0x16>
 8012dc2:	9b02      	ldr	r3, [sp, #8]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	701a      	strb	r2, [r3, #0]
 8012dc8:	e7d9      	b.n	8012d7e <sniprintf+0x16>
 8012dca:	bf00      	nop
 8012dcc:	20000b18 	.word	0x20000b18

08012dd0 <__sread>:
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dd8:	f000 f9d2 	bl	8013180 <_read_r>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	bfab      	itete	ge
 8012de0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012de2:	89a3      	ldrhlt	r3, [r4, #12]
 8012de4:	181b      	addge	r3, r3, r0
 8012de6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012dea:	bfac      	ite	ge
 8012dec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012dee:	81a3      	strhlt	r3, [r4, #12]
 8012df0:	bd10      	pop	{r4, pc}

08012df2 <__swrite>:
 8012df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df6:	461f      	mov	r7, r3
 8012df8:	898b      	ldrh	r3, [r1, #12]
 8012dfa:	05db      	lsls	r3, r3, #23
 8012dfc:	4605      	mov	r5, r0
 8012dfe:	460c      	mov	r4, r1
 8012e00:	4616      	mov	r6, r2
 8012e02:	d505      	bpl.n	8012e10 <__swrite+0x1e>
 8012e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e08:	2302      	movs	r3, #2
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f000 f9a6 	bl	801315c <_lseek_r>
 8012e10:	89a3      	ldrh	r3, [r4, #12]
 8012e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e1a:	81a3      	strh	r3, [r4, #12]
 8012e1c:	4632      	mov	r2, r6
 8012e1e:	463b      	mov	r3, r7
 8012e20:	4628      	mov	r0, r5
 8012e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e26:	f000 b9cd 	b.w	80131c4 <_write_r>

08012e2a <__sseek>:
 8012e2a:	b510      	push	{r4, lr}
 8012e2c:	460c      	mov	r4, r1
 8012e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e32:	f000 f993 	bl	801315c <_lseek_r>
 8012e36:	1c43      	adds	r3, r0, #1
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	bf15      	itete	ne
 8012e3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012e3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e46:	81a3      	strheq	r3, [r4, #12]
 8012e48:	bf18      	it	ne
 8012e4a:	81a3      	strhne	r3, [r4, #12]
 8012e4c:	bd10      	pop	{r4, pc}

08012e4e <__sclose>:
 8012e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e52:	f000 b91d 	b.w	8013090 <_close_r>

08012e56 <_vsniprintf_r>:
 8012e56:	b530      	push	{r4, r5, lr}
 8012e58:	4614      	mov	r4, r2
 8012e5a:	2c00      	cmp	r4, #0
 8012e5c:	b09b      	sub	sp, #108	@ 0x6c
 8012e5e:	4605      	mov	r5, r0
 8012e60:	461a      	mov	r2, r3
 8012e62:	da05      	bge.n	8012e70 <_vsniprintf_r+0x1a>
 8012e64:	238b      	movs	r3, #139	@ 0x8b
 8012e66:	6003      	str	r3, [r0, #0]
 8012e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e6c:	b01b      	add	sp, #108	@ 0x6c
 8012e6e:	bd30      	pop	{r4, r5, pc}
 8012e70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012e74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012e78:	bf14      	ite	ne
 8012e7a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012e7e:	4623      	moveq	r3, r4
 8012e80:	9302      	str	r3, [sp, #8]
 8012e82:	9305      	str	r3, [sp, #20]
 8012e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e88:	9100      	str	r1, [sp, #0]
 8012e8a:	9104      	str	r1, [sp, #16]
 8012e8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012e90:	4669      	mov	r1, sp
 8012e92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012e94:	f000 fac4 	bl	8013420 <_svfiprintf_r>
 8012e98:	1c43      	adds	r3, r0, #1
 8012e9a:	bfbc      	itt	lt
 8012e9c:	238b      	movlt	r3, #139	@ 0x8b
 8012e9e:	602b      	strlt	r3, [r5, #0]
 8012ea0:	2c00      	cmp	r4, #0
 8012ea2:	d0e3      	beq.n	8012e6c <_vsniprintf_r+0x16>
 8012ea4:	9b00      	ldr	r3, [sp, #0]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	701a      	strb	r2, [r3, #0]
 8012eaa:	e7df      	b.n	8012e6c <_vsniprintf_r+0x16>

08012eac <vsniprintf>:
 8012eac:	b507      	push	{r0, r1, r2, lr}
 8012eae:	9300      	str	r3, [sp, #0]
 8012eb0:	4613      	mov	r3, r2
 8012eb2:	460a      	mov	r2, r1
 8012eb4:	4601      	mov	r1, r0
 8012eb6:	4803      	ldr	r0, [pc, #12]	@ (8012ec4 <vsniprintf+0x18>)
 8012eb8:	6800      	ldr	r0, [r0, #0]
 8012eba:	f7ff ffcc 	bl	8012e56 <_vsniprintf_r>
 8012ebe:	b003      	add	sp, #12
 8012ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ec4:	20000b18 	.word	0x20000b18

08012ec8 <__swbuf_r>:
 8012ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eca:	460e      	mov	r6, r1
 8012ecc:	4614      	mov	r4, r2
 8012ece:	4605      	mov	r5, r0
 8012ed0:	b118      	cbz	r0, 8012eda <__swbuf_r+0x12>
 8012ed2:	6a03      	ldr	r3, [r0, #32]
 8012ed4:	b90b      	cbnz	r3, 8012eda <__swbuf_r+0x12>
 8012ed6:	f7ff fea5 	bl	8012c24 <__sinit>
 8012eda:	69a3      	ldr	r3, [r4, #24]
 8012edc:	60a3      	str	r3, [r4, #8]
 8012ede:	89a3      	ldrh	r3, [r4, #12]
 8012ee0:	071a      	lsls	r2, r3, #28
 8012ee2:	d501      	bpl.n	8012ee8 <__swbuf_r+0x20>
 8012ee4:	6923      	ldr	r3, [r4, #16]
 8012ee6:	b943      	cbnz	r3, 8012efa <__swbuf_r+0x32>
 8012ee8:	4621      	mov	r1, r4
 8012eea:	4628      	mov	r0, r5
 8012eec:	f000 f82a 	bl	8012f44 <__swsetup_r>
 8012ef0:	b118      	cbz	r0, 8012efa <__swbuf_r+0x32>
 8012ef2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012ef6:	4638      	mov	r0, r7
 8012ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012efa:	6823      	ldr	r3, [r4, #0]
 8012efc:	6922      	ldr	r2, [r4, #16]
 8012efe:	1a98      	subs	r0, r3, r2
 8012f00:	6963      	ldr	r3, [r4, #20]
 8012f02:	b2f6      	uxtb	r6, r6
 8012f04:	4283      	cmp	r3, r0
 8012f06:	4637      	mov	r7, r6
 8012f08:	dc05      	bgt.n	8012f16 <__swbuf_r+0x4e>
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	4628      	mov	r0, r5
 8012f0e:	f000 fed7 	bl	8013cc0 <_fflush_r>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d1ed      	bne.n	8012ef2 <__swbuf_r+0x2a>
 8012f16:	68a3      	ldr	r3, [r4, #8]
 8012f18:	3b01      	subs	r3, #1
 8012f1a:	60a3      	str	r3, [r4, #8]
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	1c5a      	adds	r2, r3, #1
 8012f20:	6022      	str	r2, [r4, #0]
 8012f22:	701e      	strb	r6, [r3, #0]
 8012f24:	6962      	ldr	r2, [r4, #20]
 8012f26:	1c43      	adds	r3, r0, #1
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d004      	beq.n	8012f36 <__swbuf_r+0x6e>
 8012f2c:	89a3      	ldrh	r3, [r4, #12]
 8012f2e:	07db      	lsls	r3, r3, #31
 8012f30:	d5e1      	bpl.n	8012ef6 <__swbuf_r+0x2e>
 8012f32:	2e0a      	cmp	r6, #10
 8012f34:	d1df      	bne.n	8012ef6 <__swbuf_r+0x2e>
 8012f36:	4621      	mov	r1, r4
 8012f38:	4628      	mov	r0, r5
 8012f3a:	f000 fec1 	bl	8013cc0 <_fflush_r>
 8012f3e:	2800      	cmp	r0, #0
 8012f40:	d0d9      	beq.n	8012ef6 <__swbuf_r+0x2e>
 8012f42:	e7d6      	b.n	8012ef2 <__swbuf_r+0x2a>

08012f44 <__swsetup_r>:
 8012f44:	b538      	push	{r3, r4, r5, lr}
 8012f46:	4b29      	ldr	r3, [pc, #164]	@ (8012fec <__swsetup_r+0xa8>)
 8012f48:	4605      	mov	r5, r0
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	460c      	mov	r4, r1
 8012f4e:	b118      	cbz	r0, 8012f58 <__swsetup_r+0x14>
 8012f50:	6a03      	ldr	r3, [r0, #32]
 8012f52:	b90b      	cbnz	r3, 8012f58 <__swsetup_r+0x14>
 8012f54:	f7ff fe66 	bl	8012c24 <__sinit>
 8012f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f5c:	0719      	lsls	r1, r3, #28
 8012f5e:	d422      	bmi.n	8012fa6 <__swsetup_r+0x62>
 8012f60:	06da      	lsls	r2, r3, #27
 8012f62:	d407      	bmi.n	8012f74 <__swsetup_r+0x30>
 8012f64:	2209      	movs	r2, #9
 8012f66:	602a      	str	r2, [r5, #0]
 8012f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f6c:	81a3      	strh	r3, [r4, #12]
 8012f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f72:	e033      	b.n	8012fdc <__swsetup_r+0x98>
 8012f74:	0758      	lsls	r0, r3, #29
 8012f76:	d512      	bpl.n	8012f9e <__swsetup_r+0x5a>
 8012f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f7a:	b141      	cbz	r1, 8012f8e <__swsetup_r+0x4a>
 8012f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f80:	4299      	cmp	r1, r3
 8012f82:	d002      	beq.n	8012f8a <__swsetup_r+0x46>
 8012f84:	4628      	mov	r0, r5
 8012f86:	f000 f99d 	bl	80132c4 <_free_r>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f8e:	89a3      	ldrh	r3, [r4, #12]
 8012f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f94:	81a3      	strh	r3, [r4, #12]
 8012f96:	2300      	movs	r3, #0
 8012f98:	6063      	str	r3, [r4, #4]
 8012f9a:	6923      	ldr	r3, [r4, #16]
 8012f9c:	6023      	str	r3, [r4, #0]
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	f043 0308 	orr.w	r3, r3, #8
 8012fa4:	81a3      	strh	r3, [r4, #12]
 8012fa6:	6923      	ldr	r3, [r4, #16]
 8012fa8:	b94b      	cbnz	r3, 8012fbe <__swsetup_r+0x7a>
 8012faa:	89a3      	ldrh	r3, [r4, #12]
 8012fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012fb4:	d003      	beq.n	8012fbe <__swsetup_r+0x7a>
 8012fb6:	4621      	mov	r1, r4
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f000 fee1 	bl	8013d80 <__smakebuf_r>
 8012fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fc2:	f013 0201 	ands.w	r2, r3, #1
 8012fc6:	d00a      	beq.n	8012fde <__swsetup_r+0x9a>
 8012fc8:	2200      	movs	r2, #0
 8012fca:	60a2      	str	r2, [r4, #8]
 8012fcc:	6962      	ldr	r2, [r4, #20]
 8012fce:	4252      	negs	r2, r2
 8012fd0:	61a2      	str	r2, [r4, #24]
 8012fd2:	6922      	ldr	r2, [r4, #16]
 8012fd4:	b942      	cbnz	r2, 8012fe8 <__swsetup_r+0xa4>
 8012fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012fda:	d1c5      	bne.n	8012f68 <__swsetup_r+0x24>
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
 8012fde:	0799      	lsls	r1, r3, #30
 8012fe0:	bf58      	it	pl
 8012fe2:	6962      	ldrpl	r2, [r4, #20]
 8012fe4:	60a2      	str	r2, [r4, #8]
 8012fe6:	e7f4      	b.n	8012fd2 <__swsetup_r+0x8e>
 8012fe8:	2000      	movs	r0, #0
 8012fea:	e7f7      	b.n	8012fdc <__swsetup_r+0x98>
 8012fec:	20000b18 	.word	0x20000b18

08012ff0 <memset>:
 8012ff0:	4402      	add	r2, r0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	4293      	cmp	r3, r2
 8012ff6:	d100      	bne.n	8012ffa <memset+0xa>
 8012ff8:	4770      	bx	lr
 8012ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8012ffe:	e7f9      	b.n	8012ff4 <memset+0x4>

08013000 <strchr>:
 8013000:	b2c9      	uxtb	r1, r1
 8013002:	4603      	mov	r3, r0
 8013004:	4618      	mov	r0, r3
 8013006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801300a:	b112      	cbz	r2, 8013012 <strchr+0x12>
 801300c:	428a      	cmp	r2, r1
 801300e:	d1f9      	bne.n	8013004 <strchr+0x4>
 8013010:	4770      	bx	lr
 8013012:	2900      	cmp	r1, #0
 8013014:	bf18      	it	ne
 8013016:	2000      	movne	r0, #0
 8013018:	4770      	bx	lr

0801301a <strncmp>:
 801301a:	b510      	push	{r4, lr}
 801301c:	b16a      	cbz	r2, 801303a <strncmp+0x20>
 801301e:	3901      	subs	r1, #1
 8013020:	1884      	adds	r4, r0, r2
 8013022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013026:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801302a:	429a      	cmp	r2, r3
 801302c:	d103      	bne.n	8013036 <strncmp+0x1c>
 801302e:	42a0      	cmp	r0, r4
 8013030:	d001      	beq.n	8013036 <strncmp+0x1c>
 8013032:	2a00      	cmp	r2, #0
 8013034:	d1f5      	bne.n	8013022 <strncmp+0x8>
 8013036:	1ad0      	subs	r0, r2, r3
 8013038:	bd10      	pop	{r4, pc}
 801303a:	4610      	mov	r0, r2
 801303c:	e7fc      	b.n	8013038 <strncmp+0x1e>

0801303e <strncpy>:
 801303e:	b510      	push	{r4, lr}
 8013040:	3901      	subs	r1, #1
 8013042:	4603      	mov	r3, r0
 8013044:	b132      	cbz	r2, 8013054 <strncpy+0x16>
 8013046:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801304a:	f803 4b01 	strb.w	r4, [r3], #1
 801304e:	3a01      	subs	r2, #1
 8013050:	2c00      	cmp	r4, #0
 8013052:	d1f7      	bne.n	8013044 <strncpy+0x6>
 8013054:	441a      	add	r2, r3
 8013056:	2100      	movs	r1, #0
 8013058:	4293      	cmp	r3, r2
 801305a:	d100      	bne.n	801305e <strncpy+0x20>
 801305c:	bd10      	pop	{r4, pc}
 801305e:	f803 1b01 	strb.w	r1, [r3], #1
 8013062:	e7f9      	b.n	8013058 <strncpy+0x1a>

08013064 <strstr>:
 8013064:	780a      	ldrb	r2, [r1, #0]
 8013066:	b570      	push	{r4, r5, r6, lr}
 8013068:	b96a      	cbnz	r2, 8013086 <strstr+0x22>
 801306a:	bd70      	pop	{r4, r5, r6, pc}
 801306c:	429a      	cmp	r2, r3
 801306e:	d109      	bne.n	8013084 <strstr+0x20>
 8013070:	460c      	mov	r4, r1
 8013072:	4605      	mov	r5, r0
 8013074:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013078:	2b00      	cmp	r3, #0
 801307a:	d0f6      	beq.n	801306a <strstr+0x6>
 801307c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013080:	429e      	cmp	r6, r3
 8013082:	d0f7      	beq.n	8013074 <strstr+0x10>
 8013084:	3001      	adds	r0, #1
 8013086:	7803      	ldrb	r3, [r0, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d1ef      	bne.n	801306c <strstr+0x8>
 801308c:	4618      	mov	r0, r3
 801308e:	e7ec      	b.n	801306a <strstr+0x6>

08013090 <_close_r>:
 8013090:	b538      	push	{r3, r4, r5, lr}
 8013092:	4d06      	ldr	r5, [pc, #24]	@ (80130ac <_close_r+0x1c>)
 8013094:	2300      	movs	r3, #0
 8013096:	4604      	mov	r4, r0
 8013098:	4608      	mov	r0, r1
 801309a:	602b      	str	r3, [r5, #0]
 801309c:	f7ee fcbe 	bl	8001a1c <_close>
 80130a0:	1c43      	adds	r3, r0, #1
 80130a2:	d102      	bne.n	80130aa <_close_r+0x1a>
 80130a4:	682b      	ldr	r3, [r5, #0]
 80130a6:	b103      	cbz	r3, 80130aa <_close_r+0x1a>
 80130a8:	6023      	str	r3, [r4, #0]
 80130aa:	bd38      	pop	{r3, r4, r5, pc}
 80130ac:	20010d10 	.word	0x20010d10

080130b0 <_reclaim_reent>:
 80130b0:	4b29      	ldr	r3, [pc, #164]	@ (8013158 <_reclaim_reent+0xa8>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4283      	cmp	r3, r0
 80130b6:	b570      	push	{r4, r5, r6, lr}
 80130b8:	4604      	mov	r4, r0
 80130ba:	d04b      	beq.n	8013154 <_reclaim_reent+0xa4>
 80130bc:	69c3      	ldr	r3, [r0, #28]
 80130be:	b1ab      	cbz	r3, 80130ec <_reclaim_reent+0x3c>
 80130c0:	68db      	ldr	r3, [r3, #12]
 80130c2:	b16b      	cbz	r3, 80130e0 <_reclaim_reent+0x30>
 80130c4:	2500      	movs	r5, #0
 80130c6:	69e3      	ldr	r3, [r4, #28]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	5959      	ldr	r1, [r3, r5]
 80130cc:	2900      	cmp	r1, #0
 80130ce:	d13b      	bne.n	8013148 <_reclaim_reent+0x98>
 80130d0:	3504      	adds	r5, #4
 80130d2:	2d80      	cmp	r5, #128	@ 0x80
 80130d4:	d1f7      	bne.n	80130c6 <_reclaim_reent+0x16>
 80130d6:	69e3      	ldr	r3, [r4, #28]
 80130d8:	4620      	mov	r0, r4
 80130da:	68d9      	ldr	r1, [r3, #12]
 80130dc:	f000 f8f2 	bl	80132c4 <_free_r>
 80130e0:	69e3      	ldr	r3, [r4, #28]
 80130e2:	6819      	ldr	r1, [r3, #0]
 80130e4:	b111      	cbz	r1, 80130ec <_reclaim_reent+0x3c>
 80130e6:	4620      	mov	r0, r4
 80130e8:	f000 f8ec 	bl	80132c4 <_free_r>
 80130ec:	6961      	ldr	r1, [r4, #20]
 80130ee:	b111      	cbz	r1, 80130f6 <_reclaim_reent+0x46>
 80130f0:	4620      	mov	r0, r4
 80130f2:	f000 f8e7 	bl	80132c4 <_free_r>
 80130f6:	69e1      	ldr	r1, [r4, #28]
 80130f8:	b111      	cbz	r1, 8013100 <_reclaim_reent+0x50>
 80130fa:	4620      	mov	r0, r4
 80130fc:	f000 f8e2 	bl	80132c4 <_free_r>
 8013100:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013102:	b111      	cbz	r1, 801310a <_reclaim_reent+0x5a>
 8013104:	4620      	mov	r0, r4
 8013106:	f000 f8dd 	bl	80132c4 <_free_r>
 801310a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801310c:	b111      	cbz	r1, 8013114 <_reclaim_reent+0x64>
 801310e:	4620      	mov	r0, r4
 8013110:	f000 f8d8 	bl	80132c4 <_free_r>
 8013114:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013116:	b111      	cbz	r1, 801311e <_reclaim_reent+0x6e>
 8013118:	4620      	mov	r0, r4
 801311a:	f000 f8d3 	bl	80132c4 <_free_r>
 801311e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013120:	b111      	cbz	r1, 8013128 <_reclaim_reent+0x78>
 8013122:	4620      	mov	r0, r4
 8013124:	f000 f8ce 	bl	80132c4 <_free_r>
 8013128:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801312a:	b111      	cbz	r1, 8013132 <_reclaim_reent+0x82>
 801312c:	4620      	mov	r0, r4
 801312e:	f000 f8c9 	bl	80132c4 <_free_r>
 8013132:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013134:	b111      	cbz	r1, 801313c <_reclaim_reent+0x8c>
 8013136:	4620      	mov	r0, r4
 8013138:	f000 f8c4 	bl	80132c4 <_free_r>
 801313c:	6a23      	ldr	r3, [r4, #32]
 801313e:	b14b      	cbz	r3, 8013154 <_reclaim_reent+0xa4>
 8013140:	4620      	mov	r0, r4
 8013142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013146:	4718      	bx	r3
 8013148:	680e      	ldr	r6, [r1, #0]
 801314a:	4620      	mov	r0, r4
 801314c:	f000 f8ba 	bl	80132c4 <_free_r>
 8013150:	4631      	mov	r1, r6
 8013152:	e7bb      	b.n	80130cc <_reclaim_reent+0x1c>
 8013154:	bd70      	pop	{r4, r5, r6, pc}
 8013156:	bf00      	nop
 8013158:	20000b18 	.word	0x20000b18

0801315c <_lseek_r>:
 801315c:	b538      	push	{r3, r4, r5, lr}
 801315e:	4d07      	ldr	r5, [pc, #28]	@ (801317c <_lseek_r+0x20>)
 8013160:	4604      	mov	r4, r0
 8013162:	4608      	mov	r0, r1
 8013164:	4611      	mov	r1, r2
 8013166:	2200      	movs	r2, #0
 8013168:	602a      	str	r2, [r5, #0]
 801316a:	461a      	mov	r2, r3
 801316c:	f7ee fc7d 	bl	8001a6a <_lseek>
 8013170:	1c43      	adds	r3, r0, #1
 8013172:	d102      	bne.n	801317a <_lseek_r+0x1e>
 8013174:	682b      	ldr	r3, [r5, #0]
 8013176:	b103      	cbz	r3, 801317a <_lseek_r+0x1e>
 8013178:	6023      	str	r3, [r4, #0]
 801317a:	bd38      	pop	{r3, r4, r5, pc}
 801317c:	20010d10 	.word	0x20010d10

08013180 <_read_r>:
 8013180:	b538      	push	{r3, r4, r5, lr}
 8013182:	4d07      	ldr	r5, [pc, #28]	@ (80131a0 <_read_r+0x20>)
 8013184:	4604      	mov	r4, r0
 8013186:	4608      	mov	r0, r1
 8013188:	4611      	mov	r1, r2
 801318a:	2200      	movs	r2, #0
 801318c:	602a      	str	r2, [r5, #0]
 801318e:	461a      	mov	r2, r3
 8013190:	f7ee fc0b 	bl	80019aa <_read>
 8013194:	1c43      	adds	r3, r0, #1
 8013196:	d102      	bne.n	801319e <_read_r+0x1e>
 8013198:	682b      	ldr	r3, [r5, #0]
 801319a:	b103      	cbz	r3, 801319e <_read_r+0x1e>
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	bd38      	pop	{r3, r4, r5, pc}
 80131a0:	20010d10 	.word	0x20010d10

080131a4 <_sbrk_r>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	4d06      	ldr	r5, [pc, #24]	@ (80131c0 <_sbrk_r+0x1c>)
 80131a8:	2300      	movs	r3, #0
 80131aa:	4604      	mov	r4, r0
 80131ac:	4608      	mov	r0, r1
 80131ae:	602b      	str	r3, [r5, #0]
 80131b0:	f7ee fc68 	bl	8001a84 <_sbrk>
 80131b4:	1c43      	adds	r3, r0, #1
 80131b6:	d102      	bne.n	80131be <_sbrk_r+0x1a>
 80131b8:	682b      	ldr	r3, [r5, #0]
 80131ba:	b103      	cbz	r3, 80131be <_sbrk_r+0x1a>
 80131bc:	6023      	str	r3, [r4, #0]
 80131be:	bd38      	pop	{r3, r4, r5, pc}
 80131c0:	20010d10 	.word	0x20010d10

080131c4 <_write_r>:
 80131c4:	b538      	push	{r3, r4, r5, lr}
 80131c6:	4d07      	ldr	r5, [pc, #28]	@ (80131e4 <_write_r+0x20>)
 80131c8:	4604      	mov	r4, r0
 80131ca:	4608      	mov	r0, r1
 80131cc:	4611      	mov	r1, r2
 80131ce:	2200      	movs	r2, #0
 80131d0:	602a      	str	r2, [r5, #0]
 80131d2:	461a      	mov	r2, r3
 80131d4:	f7ee fc06 	bl	80019e4 <_write>
 80131d8:	1c43      	adds	r3, r0, #1
 80131da:	d102      	bne.n	80131e2 <_write_r+0x1e>
 80131dc:	682b      	ldr	r3, [r5, #0]
 80131de:	b103      	cbz	r3, 80131e2 <_write_r+0x1e>
 80131e0:	6023      	str	r3, [r4, #0]
 80131e2:	bd38      	pop	{r3, r4, r5, pc}
 80131e4:	20010d10 	.word	0x20010d10

080131e8 <__errno>:
 80131e8:	4b01      	ldr	r3, [pc, #4]	@ (80131f0 <__errno+0x8>)
 80131ea:	6818      	ldr	r0, [r3, #0]
 80131ec:	4770      	bx	lr
 80131ee:	bf00      	nop
 80131f0:	20000b18 	.word	0x20000b18

080131f4 <__libc_init_array>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	4d0d      	ldr	r5, [pc, #52]	@ (801322c <__libc_init_array+0x38>)
 80131f8:	4c0d      	ldr	r4, [pc, #52]	@ (8013230 <__libc_init_array+0x3c>)
 80131fa:	1b64      	subs	r4, r4, r5
 80131fc:	10a4      	asrs	r4, r4, #2
 80131fe:	2600      	movs	r6, #0
 8013200:	42a6      	cmp	r6, r4
 8013202:	d109      	bne.n	8013218 <__libc_init_array+0x24>
 8013204:	4d0b      	ldr	r5, [pc, #44]	@ (8013234 <__libc_init_array+0x40>)
 8013206:	4c0c      	ldr	r4, [pc, #48]	@ (8013238 <__libc_init_array+0x44>)
 8013208:	f000 fe7e 	bl	8013f08 <_init>
 801320c:	1b64      	subs	r4, r4, r5
 801320e:	10a4      	asrs	r4, r4, #2
 8013210:	2600      	movs	r6, #0
 8013212:	42a6      	cmp	r6, r4
 8013214:	d105      	bne.n	8013222 <__libc_init_array+0x2e>
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	f855 3b04 	ldr.w	r3, [r5], #4
 801321c:	4798      	blx	r3
 801321e:	3601      	adds	r6, #1
 8013220:	e7ee      	b.n	8013200 <__libc_init_array+0xc>
 8013222:	f855 3b04 	ldr.w	r3, [r5], #4
 8013226:	4798      	blx	r3
 8013228:	3601      	adds	r6, #1
 801322a:	e7f2      	b.n	8013212 <__libc_init_array+0x1e>
 801322c:	08014fb4 	.word	0x08014fb4
 8013230:	08014fb4 	.word	0x08014fb4
 8013234:	08014fb4 	.word	0x08014fb4
 8013238:	08014fbc 	.word	0x08014fbc

0801323c <__retarget_lock_init_recursive>:
 801323c:	4770      	bx	lr

0801323e <__retarget_lock_acquire_recursive>:
 801323e:	4770      	bx	lr

08013240 <__retarget_lock_release_recursive>:
 8013240:	4770      	bx	lr

08013242 <strcpy>:
 8013242:	4603      	mov	r3, r0
 8013244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013248:	f803 2b01 	strb.w	r2, [r3], #1
 801324c:	2a00      	cmp	r2, #0
 801324e:	d1f9      	bne.n	8013244 <strcpy+0x2>
 8013250:	4770      	bx	lr

08013252 <memcpy>:
 8013252:	440a      	add	r2, r1
 8013254:	4291      	cmp	r1, r2
 8013256:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801325a:	d100      	bne.n	801325e <memcpy+0xc>
 801325c:	4770      	bx	lr
 801325e:	b510      	push	{r4, lr}
 8013260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013268:	4291      	cmp	r1, r2
 801326a:	d1f9      	bne.n	8013260 <memcpy+0xe>
 801326c:	bd10      	pop	{r4, pc}
	...

08013270 <__assert_func>:
 8013270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013272:	4614      	mov	r4, r2
 8013274:	461a      	mov	r2, r3
 8013276:	4b09      	ldr	r3, [pc, #36]	@ (801329c <__assert_func+0x2c>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	4605      	mov	r5, r0
 801327c:	68d8      	ldr	r0, [r3, #12]
 801327e:	b954      	cbnz	r4, 8013296 <__assert_func+0x26>
 8013280:	4b07      	ldr	r3, [pc, #28]	@ (80132a0 <__assert_func+0x30>)
 8013282:	461c      	mov	r4, r3
 8013284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013288:	9100      	str	r1, [sp, #0]
 801328a:	462b      	mov	r3, r5
 801328c:	4905      	ldr	r1, [pc, #20]	@ (80132a4 <__assert_func+0x34>)
 801328e:	f000 fd3f 	bl	8013d10 <fiprintf>
 8013292:	f000 fded 	bl	8013e70 <abort>
 8013296:	4b04      	ldr	r3, [pc, #16]	@ (80132a8 <__assert_func+0x38>)
 8013298:	e7f4      	b.n	8013284 <__assert_func+0x14>
 801329a:	bf00      	nop
 801329c:	20000b18 	.word	0x20000b18
 80132a0:	08014f75 	.word	0x08014f75
 80132a4:	08014f47 	.word	0x08014f47
 80132a8:	08014f3a 	.word	0x08014f3a

080132ac <__env_lock>:
 80132ac:	4801      	ldr	r0, [pc, #4]	@ (80132b4 <__env_lock+0x8>)
 80132ae:	f7ff bfc6 	b.w	801323e <__retarget_lock_acquire_recursive>
 80132b2:	bf00      	nop
 80132b4:	20010d14 	.word	0x20010d14

080132b8 <__env_unlock>:
 80132b8:	4801      	ldr	r0, [pc, #4]	@ (80132c0 <__env_unlock+0x8>)
 80132ba:	f7ff bfc1 	b.w	8013240 <__retarget_lock_release_recursive>
 80132be:	bf00      	nop
 80132c0:	20010d14 	.word	0x20010d14

080132c4 <_free_r>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	4605      	mov	r5, r0
 80132c8:	2900      	cmp	r1, #0
 80132ca:	d041      	beq.n	8013350 <_free_r+0x8c>
 80132cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132d0:	1f0c      	subs	r4, r1, #4
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	bfb8      	it	lt
 80132d6:	18e4      	addlt	r4, r4, r3
 80132d8:	f7ff faf2 	bl	80128c0 <__malloc_lock>
 80132dc:	4a1d      	ldr	r2, [pc, #116]	@ (8013354 <_free_r+0x90>)
 80132de:	6813      	ldr	r3, [r2, #0]
 80132e0:	b933      	cbnz	r3, 80132f0 <_free_r+0x2c>
 80132e2:	6063      	str	r3, [r4, #4]
 80132e4:	6014      	str	r4, [r2, #0]
 80132e6:	4628      	mov	r0, r5
 80132e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132ec:	f7ff baee 	b.w	80128cc <__malloc_unlock>
 80132f0:	42a3      	cmp	r3, r4
 80132f2:	d908      	bls.n	8013306 <_free_r+0x42>
 80132f4:	6820      	ldr	r0, [r4, #0]
 80132f6:	1821      	adds	r1, r4, r0
 80132f8:	428b      	cmp	r3, r1
 80132fa:	bf01      	itttt	eq
 80132fc:	6819      	ldreq	r1, [r3, #0]
 80132fe:	685b      	ldreq	r3, [r3, #4]
 8013300:	1809      	addeq	r1, r1, r0
 8013302:	6021      	streq	r1, [r4, #0]
 8013304:	e7ed      	b.n	80132e2 <_free_r+0x1e>
 8013306:	461a      	mov	r2, r3
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	b10b      	cbz	r3, 8013310 <_free_r+0x4c>
 801330c:	42a3      	cmp	r3, r4
 801330e:	d9fa      	bls.n	8013306 <_free_r+0x42>
 8013310:	6811      	ldr	r1, [r2, #0]
 8013312:	1850      	adds	r0, r2, r1
 8013314:	42a0      	cmp	r0, r4
 8013316:	d10b      	bne.n	8013330 <_free_r+0x6c>
 8013318:	6820      	ldr	r0, [r4, #0]
 801331a:	4401      	add	r1, r0
 801331c:	1850      	adds	r0, r2, r1
 801331e:	4283      	cmp	r3, r0
 8013320:	6011      	str	r1, [r2, #0]
 8013322:	d1e0      	bne.n	80132e6 <_free_r+0x22>
 8013324:	6818      	ldr	r0, [r3, #0]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	6053      	str	r3, [r2, #4]
 801332a:	4408      	add	r0, r1
 801332c:	6010      	str	r0, [r2, #0]
 801332e:	e7da      	b.n	80132e6 <_free_r+0x22>
 8013330:	d902      	bls.n	8013338 <_free_r+0x74>
 8013332:	230c      	movs	r3, #12
 8013334:	602b      	str	r3, [r5, #0]
 8013336:	e7d6      	b.n	80132e6 <_free_r+0x22>
 8013338:	6820      	ldr	r0, [r4, #0]
 801333a:	1821      	adds	r1, r4, r0
 801333c:	428b      	cmp	r3, r1
 801333e:	bf04      	itt	eq
 8013340:	6819      	ldreq	r1, [r3, #0]
 8013342:	685b      	ldreq	r3, [r3, #4]
 8013344:	6063      	str	r3, [r4, #4]
 8013346:	bf04      	itt	eq
 8013348:	1809      	addeq	r1, r1, r0
 801334a:	6021      	streq	r1, [r4, #0]
 801334c:	6054      	str	r4, [r2, #4]
 801334e:	e7ca      	b.n	80132e6 <_free_r+0x22>
 8013350:	bd38      	pop	{r3, r4, r5, pc}
 8013352:	bf00      	nop
 8013354:	20010bd0 	.word	0x20010bd0

08013358 <_malloc_usable_size_r>:
 8013358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801335c:	1f18      	subs	r0, r3, #4
 801335e:	2b00      	cmp	r3, #0
 8013360:	bfbc      	itt	lt
 8013362:	580b      	ldrlt	r3, [r1, r0]
 8013364:	18c0      	addlt	r0, r0, r3
 8013366:	4770      	bx	lr

08013368 <__ssputs_r>:
 8013368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801336c:	688e      	ldr	r6, [r1, #8]
 801336e:	461f      	mov	r7, r3
 8013370:	42be      	cmp	r6, r7
 8013372:	680b      	ldr	r3, [r1, #0]
 8013374:	4682      	mov	sl, r0
 8013376:	460c      	mov	r4, r1
 8013378:	4690      	mov	r8, r2
 801337a:	d82d      	bhi.n	80133d8 <__ssputs_r+0x70>
 801337c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013384:	d026      	beq.n	80133d4 <__ssputs_r+0x6c>
 8013386:	6965      	ldr	r5, [r4, #20]
 8013388:	6909      	ldr	r1, [r1, #16]
 801338a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801338e:	eba3 0901 	sub.w	r9, r3, r1
 8013392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013396:	1c7b      	adds	r3, r7, #1
 8013398:	444b      	add	r3, r9
 801339a:	106d      	asrs	r5, r5, #1
 801339c:	429d      	cmp	r5, r3
 801339e:	bf38      	it	cc
 80133a0:	461d      	movcc	r5, r3
 80133a2:	0553      	lsls	r3, r2, #21
 80133a4:	d527      	bpl.n	80133f6 <__ssputs_r+0x8e>
 80133a6:	4629      	mov	r1, r5
 80133a8:	f7ff fa0a 	bl	80127c0 <_malloc_r>
 80133ac:	4606      	mov	r6, r0
 80133ae:	b360      	cbz	r0, 801340a <__ssputs_r+0xa2>
 80133b0:	6921      	ldr	r1, [r4, #16]
 80133b2:	464a      	mov	r2, r9
 80133b4:	f7ff ff4d 	bl	8013252 <memcpy>
 80133b8:	89a3      	ldrh	r3, [r4, #12]
 80133ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80133be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133c2:	81a3      	strh	r3, [r4, #12]
 80133c4:	6126      	str	r6, [r4, #16]
 80133c6:	6165      	str	r5, [r4, #20]
 80133c8:	444e      	add	r6, r9
 80133ca:	eba5 0509 	sub.w	r5, r5, r9
 80133ce:	6026      	str	r6, [r4, #0]
 80133d0:	60a5      	str	r5, [r4, #8]
 80133d2:	463e      	mov	r6, r7
 80133d4:	42be      	cmp	r6, r7
 80133d6:	d900      	bls.n	80133da <__ssputs_r+0x72>
 80133d8:	463e      	mov	r6, r7
 80133da:	6820      	ldr	r0, [r4, #0]
 80133dc:	4632      	mov	r2, r6
 80133de:	4641      	mov	r1, r8
 80133e0:	f000 fd0a 	bl	8013df8 <memmove>
 80133e4:	68a3      	ldr	r3, [r4, #8]
 80133e6:	1b9b      	subs	r3, r3, r6
 80133e8:	60a3      	str	r3, [r4, #8]
 80133ea:	6823      	ldr	r3, [r4, #0]
 80133ec:	4433      	add	r3, r6
 80133ee:	6023      	str	r3, [r4, #0]
 80133f0:	2000      	movs	r0, #0
 80133f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f6:	462a      	mov	r2, r5
 80133f8:	f7ff fae2 	bl	80129c0 <_realloc_r>
 80133fc:	4606      	mov	r6, r0
 80133fe:	2800      	cmp	r0, #0
 8013400:	d1e0      	bne.n	80133c4 <__ssputs_r+0x5c>
 8013402:	6921      	ldr	r1, [r4, #16]
 8013404:	4650      	mov	r0, sl
 8013406:	f7ff ff5d 	bl	80132c4 <_free_r>
 801340a:	230c      	movs	r3, #12
 801340c:	f8ca 3000 	str.w	r3, [sl]
 8013410:	89a3      	ldrh	r3, [r4, #12]
 8013412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013416:	81a3      	strh	r3, [r4, #12]
 8013418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801341c:	e7e9      	b.n	80133f2 <__ssputs_r+0x8a>
	...

08013420 <_svfiprintf_r>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	4698      	mov	r8, r3
 8013426:	898b      	ldrh	r3, [r1, #12]
 8013428:	061b      	lsls	r3, r3, #24
 801342a:	b09d      	sub	sp, #116	@ 0x74
 801342c:	4607      	mov	r7, r0
 801342e:	460d      	mov	r5, r1
 8013430:	4614      	mov	r4, r2
 8013432:	d510      	bpl.n	8013456 <_svfiprintf_r+0x36>
 8013434:	690b      	ldr	r3, [r1, #16]
 8013436:	b973      	cbnz	r3, 8013456 <_svfiprintf_r+0x36>
 8013438:	2140      	movs	r1, #64	@ 0x40
 801343a:	f7ff f9c1 	bl	80127c0 <_malloc_r>
 801343e:	6028      	str	r0, [r5, #0]
 8013440:	6128      	str	r0, [r5, #16]
 8013442:	b930      	cbnz	r0, 8013452 <_svfiprintf_r+0x32>
 8013444:	230c      	movs	r3, #12
 8013446:	603b      	str	r3, [r7, #0]
 8013448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801344c:	b01d      	add	sp, #116	@ 0x74
 801344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013452:	2340      	movs	r3, #64	@ 0x40
 8013454:	616b      	str	r3, [r5, #20]
 8013456:	2300      	movs	r3, #0
 8013458:	9309      	str	r3, [sp, #36]	@ 0x24
 801345a:	2320      	movs	r3, #32
 801345c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013460:	f8cd 800c 	str.w	r8, [sp, #12]
 8013464:	2330      	movs	r3, #48	@ 0x30
 8013466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013604 <_svfiprintf_r+0x1e4>
 801346a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801346e:	f04f 0901 	mov.w	r9, #1
 8013472:	4623      	mov	r3, r4
 8013474:	469a      	mov	sl, r3
 8013476:	f813 2b01 	ldrb.w	r2, [r3], #1
 801347a:	b10a      	cbz	r2, 8013480 <_svfiprintf_r+0x60>
 801347c:	2a25      	cmp	r2, #37	@ 0x25
 801347e:	d1f9      	bne.n	8013474 <_svfiprintf_r+0x54>
 8013480:	ebba 0b04 	subs.w	fp, sl, r4
 8013484:	d00b      	beq.n	801349e <_svfiprintf_r+0x7e>
 8013486:	465b      	mov	r3, fp
 8013488:	4622      	mov	r2, r4
 801348a:	4629      	mov	r1, r5
 801348c:	4638      	mov	r0, r7
 801348e:	f7ff ff6b 	bl	8013368 <__ssputs_r>
 8013492:	3001      	adds	r0, #1
 8013494:	f000 80a7 	beq.w	80135e6 <_svfiprintf_r+0x1c6>
 8013498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801349a:	445a      	add	r2, fp
 801349c:	9209      	str	r2, [sp, #36]	@ 0x24
 801349e:	f89a 3000 	ldrb.w	r3, [sl]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 809f 	beq.w	80135e6 <_svfiprintf_r+0x1c6>
 80134a8:	2300      	movs	r3, #0
 80134aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80134ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134b2:	f10a 0a01 	add.w	sl, sl, #1
 80134b6:	9304      	str	r3, [sp, #16]
 80134b8:	9307      	str	r3, [sp, #28]
 80134ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80134be:	931a      	str	r3, [sp, #104]	@ 0x68
 80134c0:	4654      	mov	r4, sl
 80134c2:	2205      	movs	r2, #5
 80134c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c8:	484e      	ldr	r0, [pc, #312]	@ (8013604 <_svfiprintf_r+0x1e4>)
 80134ca:	f7ec feb9 	bl	8000240 <memchr>
 80134ce:	9a04      	ldr	r2, [sp, #16]
 80134d0:	b9d8      	cbnz	r0, 801350a <_svfiprintf_r+0xea>
 80134d2:	06d0      	lsls	r0, r2, #27
 80134d4:	bf44      	itt	mi
 80134d6:	2320      	movmi	r3, #32
 80134d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134dc:	0711      	lsls	r1, r2, #28
 80134de:	bf44      	itt	mi
 80134e0:	232b      	movmi	r3, #43	@ 0x2b
 80134e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134e6:	f89a 3000 	ldrb.w	r3, [sl]
 80134ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80134ec:	d015      	beq.n	801351a <_svfiprintf_r+0xfa>
 80134ee:	9a07      	ldr	r2, [sp, #28]
 80134f0:	4654      	mov	r4, sl
 80134f2:	2000      	movs	r0, #0
 80134f4:	f04f 0c0a 	mov.w	ip, #10
 80134f8:	4621      	mov	r1, r4
 80134fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134fe:	3b30      	subs	r3, #48	@ 0x30
 8013500:	2b09      	cmp	r3, #9
 8013502:	d94b      	bls.n	801359c <_svfiprintf_r+0x17c>
 8013504:	b1b0      	cbz	r0, 8013534 <_svfiprintf_r+0x114>
 8013506:	9207      	str	r2, [sp, #28]
 8013508:	e014      	b.n	8013534 <_svfiprintf_r+0x114>
 801350a:	eba0 0308 	sub.w	r3, r0, r8
 801350e:	fa09 f303 	lsl.w	r3, r9, r3
 8013512:	4313      	orrs	r3, r2
 8013514:	9304      	str	r3, [sp, #16]
 8013516:	46a2      	mov	sl, r4
 8013518:	e7d2      	b.n	80134c0 <_svfiprintf_r+0xa0>
 801351a:	9b03      	ldr	r3, [sp, #12]
 801351c:	1d19      	adds	r1, r3, #4
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	9103      	str	r1, [sp, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	bfbb      	ittet	lt
 8013526:	425b      	neglt	r3, r3
 8013528:	f042 0202 	orrlt.w	r2, r2, #2
 801352c:	9307      	strge	r3, [sp, #28]
 801352e:	9307      	strlt	r3, [sp, #28]
 8013530:	bfb8      	it	lt
 8013532:	9204      	strlt	r2, [sp, #16]
 8013534:	7823      	ldrb	r3, [r4, #0]
 8013536:	2b2e      	cmp	r3, #46	@ 0x2e
 8013538:	d10a      	bne.n	8013550 <_svfiprintf_r+0x130>
 801353a:	7863      	ldrb	r3, [r4, #1]
 801353c:	2b2a      	cmp	r3, #42	@ 0x2a
 801353e:	d132      	bne.n	80135a6 <_svfiprintf_r+0x186>
 8013540:	9b03      	ldr	r3, [sp, #12]
 8013542:	1d1a      	adds	r2, r3, #4
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	9203      	str	r2, [sp, #12]
 8013548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801354c:	3402      	adds	r4, #2
 801354e:	9305      	str	r3, [sp, #20]
 8013550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013614 <_svfiprintf_r+0x1f4>
 8013554:	7821      	ldrb	r1, [r4, #0]
 8013556:	2203      	movs	r2, #3
 8013558:	4650      	mov	r0, sl
 801355a:	f7ec fe71 	bl	8000240 <memchr>
 801355e:	b138      	cbz	r0, 8013570 <_svfiprintf_r+0x150>
 8013560:	9b04      	ldr	r3, [sp, #16]
 8013562:	eba0 000a 	sub.w	r0, r0, sl
 8013566:	2240      	movs	r2, #64	@ 0x40
 8013568:	4082      	lsls	r2, r0
 801356a:	4313      	orrs	r3, r2
 801356c:	3401      	adds	r4, #1
 801356e:	9304      	str	r3, [sp, #16]
 8013570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013574:	4824      	ldr	r0, [pc, #144]	@ (8013608 <_svfiprintf_r+0x1e8>)
 8013576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801357a:	2206      	movs	r2, #6
 801357c:	f7ec fe60 	bl	8000240 <memchr>
 8013580:	2800      	cmp	r0, #0
 8013582:	d036      	beq.n	80135f2 <_svfiprintf_r+0x1d2>
 8013584:	4b21      	ldr	r3, [pc, #132]	@ (801360c <_svfiprintf_r+0x1ec>)
 8013586:	bb1b      	cbnz	r3, 80135d0 <_svfiprintf_r+0x1b0>
 8013588:	9b03      	ldr	r3, [sp, #12]
 801358a:	3307      	adds	r3, #7
 801358c:	f023 0307 	bic.w	r3, r3, #7
 8013590:	3308      	adds	r3, #8
 8013592:	9303      	str	r3, [sp, #12]
 8013594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013596:	4433      	add	r3, r6
 8013598:	9309      	str	r3, [sp, #36]	@ 0x24
 801359a:	e76a      	b.n	8013472 <_svfiprintf_r+0x52>
 801359c:	fb0c 3202 	mla	r2, ip, r2, r3
 80135a0:	460c      	mov	r4, r1
 80135a2:	2001      	movs	r0, #1
 80135a4:	e7a8      	b.n	80134f8 <_svfiprintf_r+0xd8>
 80135a6:	2300      	movs	r3, #0
 80135a8:	3401      	adds	r4, #1
 80135aa:	9305      	str	r3, [sp, #20]
 80135ac:	4619      	mov	r1, r3
 80135ae:	f04f 0c0a 	mov.w	ip, #10
 80135b2:	4620      	mov	r0, r4
 80135b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135b8:	3a30      	subs	r2, #48	@ 0x30
 80135ba:	2a09      	cmp	r2, #9
 80135bc:	d903      	bls.n	80135c6 <_svfiprintf_r+0x1a6>
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d0c6      	beq.n	8013550 <_svfiprintf_r+0x130>
 80135c2:	9105      	str	r1, [sp, #20]
 80135c4:	e7c4      	b.n	8013550 <_svfiprintf_r+0x130>
 80135c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80135ca:	4604      	mov	r4, r0
 80135cc:	2301      	movs	r3, #1
 80135ce:	e7f0      	b.n	80135b2 <_svfiprintf_r+0x192>
 80135d0:	ab03      	add	r3, sp, #12
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	462a      	mov	r2, r5
 80135d6:	4b0e      	ldr	r3, [pc, #56]	@ (8013610 <_svfiprintf_r+0x1f0>)
 80135d8:	a904      	add	r1, sp, #16
 80135da:	4638      	mov	r0, r7
 80135dc:	f3af 8000 	nop.w
 80135e0:	1c42      	adds	r2, r0, #1
 80135e2:	4606      	mov	r6, r0
 80135e4:	d1d6      	bne.n	8013594 <_svfiprintf_r+0x174>
 80135e6:	89ab      	ldrh	r3, [r5, #12]
 80135e8:	065b      	lsls	r3, r3, #25
 80135ea:	f53f af2d 	bmi.w	8013448 <_svfiprintf_r+0x28>
 80135ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135f0:	e72c      	b.n	801344c <_svfiprintf_r+0x2c>
 80135f2:	ab03      	add	r3, sp, #12
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	462a      	mov	r2, r5
 80135f8:	4b05      	ldr	r3, [pc, #20]	@ (8013610 <_svfiprintf_r+0x1f0>)
 80135fa:	a904      	add	r1, sp, #16
 80135fc:	4638      	mov	r0, r7
 80135fe:	f000 f9bb 	bl	8013978 <_printf_i>
 8013602:	e7ed      	b.n	80135e0 <_svfiprintf_r+0x1c0>
 8013604:	08014f76 	.word	0x08014f76
 8013608:	08014f80 	.word	0x08014f80
 801360c:	00000000 	.word	0x00000000
 8013610:	08013369 	.word	0x08013369
 8013614:	08014f7c 	.word	0x08014f7c

08013618 <__sfputc_r>:
 8013618:	6893      	ldr	r3, [r2, #8]
 801361a:	3b01      	subs	r3, #1
 801361c:	2b00      	cmp	r3, #0
 801361e:	b410      	push	{r4}
 8013620:	6093      	str	r3, [r2, #8]
 8013622:	da08      	bge.n	8013636 <__sfputc_r+0x1e>
 8013624:	6994      	ldr	r4, [r2, #24]
 8013626:	42a3      	cmp	r3, r4
 8013628:	db01      	blt.n	801362e <__sfputc_r+0x16>
 801362a:	290a      	cmp	r1, #10
 801362c:	d103      	bne.n	8013636 <__sfputc_r+0x1e>
 801362e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013632:	f7ff bc49 	b.w	8012ec8 <__swbuf_r>
 8013636:	6813      	ldr	r3, [r2, #0]
 8013638:	1c58      	adds	r0, r3, #1
 801363a:	6010      	str	r0, [r2, #0]
 801363c:	7019      	strb	r1, [r3, #0]
 801363e:	4608      	mov	r0, r1
 8013640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013644:	4770      	bx	lr

08013646 <__sfputs_r>:
 8013646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013648:	4606      	mov	r6, r0
 801364a:	460f      	mov	r7, r1
 801364c:	4614      	mov	r4, r2
 801364e:	18d5      	adds	r5, r2, r3
 8013650:	42ac      	cmp	r4, r5
 8013652:	d101      	bne.n	8013658 <__sfputs_r+0x12>
 8013654:	2000      	movs	r0, #0
 8013656:	e007      	b.n	8013668 <__sfputs_r+0x22>
 8013658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801365c:	463a      	mov	r2, r7
 801365e:	4630      	mov	r0, r6
 8013660:	f7ff ffda 	bl	8013618 <__sfputc_r>
 8013664:	1c43      	adds	r3, r0, #1
 8013666:	d1f3      	bne.n	8013650 <__sfputs_r+0xa>
 8013668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801366c <_vfiprintf_r>:
 801366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013670:	460d      	mov	r5, r1
 8013672:	b09d      	sub	sp, #116	@ 0x74
 8013674:	4614      	mov	r4, r2
 8013676:	4698      	mov	r8, r3
 8013678:	4606      	mov	r6, r0
 801367a:	b118      	cbz	r0, 8013684 <_vfiprintf_r+0x18>
 801367c:	6a03      	ldr	r3, [r0, #32]
 801367e:	b90b      	cbnz	r3, 8013684 <_vfiprintf_r+0x18>
 8013680:	f7ff fad0 	bl	8012c24 <__sinit>
 8013684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013686:	07d9      	lsls	r1, r3, #31
 8013688:	d405      	bmi.n	8013696 <_vfiprintf_r+0x2a>
 801368a:	89ab      	ldrh	r3, [r5, #12]
 801368c:	059a      	lsls	r2, r3, #22
 801368e:	d402      	bmi.n	8013696 <_vfiprintf_r+0x2a>
 8013690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013692:	f7ff fdd4 	bl	801323e <__retarget_lock_acquire_recursive>
 8013696:	89ab      	ldrh	r3, [r5, #12]
 8013698:	071b      	lsls	r3, r3, #28
 801369a:	d501      	bpl.n	80136a0 <_vfiprintf_r+0x34>
 801369c:	692b      	ldr	r3, [r5, #16]
 801369e:	b99b      	cbnz	r3, 80136c8 <_vfiprintf_r+0x5c>
 80136a0:	4629      	mov	r1, r5
 80136a2:	4630      	mov	r0, r6
 80136a4:	f7ff fc4e 	bl	8012f44 <__swsetup_r>
 80136a8:	b170      	cbz	r0, 80136c8 <_vfiprintf_r+0x5c>
 80136aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80136ac:	07dc      	lsls	r4, r3, #31
 80136ae:	d504      	bpl.n	80136ba <_vfiprintf_r+0x4e>
 80136b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136b4:	b01d      	add	sp, #116	@ 0x74
 80136b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ba:	89ab      	ldrh	r3, [r5, #12]
 80136bc:	0598      	lsls	r0, r3, #22
 80136be:	d4f7      	bmi.n	80136b0 <_vfiprintf_r+0x44>
 80136c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80136c2:	f7ff fdbd 	bl	8013240 <__retarget_lock_release_recursive>
 80136c6:	e7f3      	b.n	80136b0 <_vfiprintf_r+0x44>
 80136c8:	2300      	movs	r3, #0
 80136ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80136cc:	2320      	movs	r3, #32
 80136ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80136d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80136d6:	2330      	movs	r3, #48	@ 0x30
 80136d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013888 <_vfiprintf_r+0x21c>
 80136dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80136e0:	f04f 0901 	mov.w	r9, #1
 80136e4:	4623      	mov	r3, r4
 80136e6:	469a      	mov	sl, r3
 80136e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ec:	b10a      	cbz	r2, 80136f2 <_vfiprintf_r+0x86>
 80136ee:	2a25      	cmp	r2, #37	@ 0x25
 80136f0:	d1f9      	bne.n	80136e6 <_vfiprintf_r+0x7a>
 80136f2:	ebba 0b04 	subs.w	fp, sl, r4
 80136f6:	d00b      	beq.n	8013710 <_vfiprintf_r+0xa4>
 80136f8:	465b      	mov	r3, fp
 80136fa:	4622      	mov	r2, r4
 80136fc:	4629      	mov	r1, r5
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ffa1 	bl	8013646 <__sfputs_r>
 8013704:	3001      	adds	r0, #1
 8013706:	f000 80a7 	beq.w	8013858 <_vfiprintf_r+0x1ec>
 801370a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801370c:	445a      	add	r2, fp
 801370e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013710:	f89a 3000 	ldrb.w	r3, [sl]
 8013714:	2b00      	cmp	r3, #0
 8013716:	f000 809f 	beq.w	8013858 <_vfiprintf_r+0x1ec>
 801371a:	2300      	movs	r3, #0
 801371c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013724:	f10a 0a01 	add.w	sl, sl, #1
 8013728:	9304      	str	r3, [sp, #16]
 801372a:	9307      	str	r3, [sp, #28]
 801372c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013730:	931a      	str	r3, [sp, #104]	@ 0x68
 8013732:	4654      	mov	r4, sl
 8013734:	2205      	movs	r2, #5
 8013736:	f814 1b01 	ldrb.w	r1, [r4], #1
 801373a:	4853      	ldr	r0, [pc, #332]	@ (8013888 <_vfiprintf_r+0x21c>)
 801373c:	f7ec fd80 	bl	8000240 <memchr>
 8013740:	9a04      	ldr	r2, [sp, #16]
 8013742:	b9d8      	cbnz	r0, 801377c <_vfiprintf_r+0x110>
 8013744:	06d1      	lsls	r1, r2, #27
 8013746:	bf44      	itt	mi
 8013748:	2320      	movmi	r3, #32
 801374a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801374e:	0713      	lsls	r3, r2, #28
 8013750:	bf44      	itt	mi
 8013752:	232b      	movmi	r3, #43	@ 0x2b
 8013754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013758:	f89a 3000 	ldrb.w	r3, [sl]
 801375c:	2b2a      	cmp	r3, #42	@ 0x2a
 801375e:	d015      	beq.n	801378c <_vfiprintf_r+0x120>
 8013760:	9a07      	ldr	r2, [sp, #28]
 8013762:	4654      	mov	r4, sl
 8013764:	2000      	movs	r0, #0
 8013766:	f04f 0c0a 	mov.w	ip, #10
 801376a:	4621      	mov	r1, r4
 801376c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013770:	3b30      	subs	r3, #48	@ 0x30
 8013772:	2b09      	cmp	r3, #9
 8013774:	d94b      	bls.n	801380e <_vfiprintf_r+0x1a2>
 8013776:	b1b0      	cbz	r0, 80137a6 <_vfiprintf_r+0x13a>
 8013778:	9207      	str	r2, [sp, #28]
 801377a:	e014      	b.n	80137a6 <_vfiprintf_r+0x13a>
 801377c:	eba0 0308 	sub.w	r3, r0, r8
 8013780:	fa09 f303 	lsl.w	r3, r9, r3
 8013784:	4313      	orrs	r3, r2
 8013786:	9304      	str	r3, [sp, #16]
 8013788:	46a2      	mov	sl, r4
 801378a:	e7d2      	b.n	8013732 <_vfiprintf_r+0xc6>
 801378c:	9b03      	ldr	r3, [sp, #12]
 801378e:	1d19      	adds	r1, r3, #4
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	9103      	str	r1, [sp, #12]
 8013794:	2b00      	cmp	r3, #0
 8013796:	bfbb      	ittet	lt
 8013798:	425b      	neglt	r3, r3
 801379a:	f042 0202 	orrlt.w	r2, r2, #2
 801379e:	9307      	strge	r3, [sp, #28]
 80137a0:	9307      	strlt	r3, [sp, #28]
 80137a2:	bfb8      	it	lt
 80137a4:	9204      	strlt	r2, [sp, #16]
 80137a6:	7823      	ldrb	r3, [r4, #0]
 80137a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80137aa:	d10a      	bne.n	80137c2 <_vfiprintf_r+0x156>
 80137ac:	7863      	ldrb	r3, [r4, #1]
 80137ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80137b0:	d132      	bne.n	8013818 <_vfiprintf_r+0x1ac>
 80137b2:	9b03      	ldr	r3, [sp, #12]
 80137b4:	1d1a      	adds	r2, r3, #4
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	9203      	str	r2, [sp, #12]
 80137ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80137be:	3402      	adds	r4, #2
 80137c0:	9305      	str	r3, [sp, #20]
 80137c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013898 <_vfiprintf_r+0x22c>
 80137c6:	7821      	ldrb	r1, [r4, #0]
 80137c8:	2203      	movs	r2, #3
 80137ca:	4650      	mov	r0, sl
 80137cc:	f7ec fd38 	bl	8000240 <memchr>
 80137d0:	b138      	cbz	r0, 80137e2 <_vfiprintf_r+0x176>
 80137d2:	9b04      	ldr	r3, [sp, #16]
 80137d4:	eba0 000a 	sub.w	r0, r0, sl
 80137d8:	2240      	movs	r2, #64	@ 0x40
 80137da:	4082      	lsls	r2, r0
 80137dc:	4313      	orrs	r3, r2
 80137de:	3401      	adds	r4, #1
 80137e0:	9304      	str	r3, [sp, #16]
 80137e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137e6:	4829      	ldr	r0, [pc, #164]	@ (801388c <_vfiprintf_r+0x220>)
 80137e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137ec:	2206      	movs	r2, #6
 80137ee:	f7ec fd27 	bl	8000240 <memchr>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d03f      	beq.n	8013876 <_vfiprintf_r+0x20a>
 80137f6:	4b26      	ldr	r3, [pc, #152]	@ (8013890 <_vfiprintf_r+0x224>)
 80137f8:	bb1b      	cbnz	r3, 8013842 <_vfiprintf_r+0x1d6>
 80137fa:	9b03      	ldr	r3, [sp, #12]
 80137fc:	3307      	adds	r3, #7
 80137fe:	f023 0307 	bic.w	r3, r3, #7
 8013802:	3308      	adds	r3, #8
 8013804:	9303      	str	r3, [sp, #12]
 8013806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013808:	443b      	add	r3, r7
 801380a:	9309      	str	r3, [sp, #36]	@ 0x24
 801380c:	e76a      	b.n	80136e4 <_vfiprintf_r+0x78>
 801380e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013812:	460c      	mov	r4, r1
 8013814:	2001      	movs	r0, #1
 8013816:	e7a8      	b.n	801376a <_vfiprintf_r+0xfe>
 8013818:	2300      	movs	r3, #0
 801381a:	3401      	adds	r4, #1
 801381c:	9305      	str	r3, [sp, #20]
 801381e:	4619      	mov	r1, r3
 8013820:	f04f 0c0a 	mov.w	ip, #10
 8013824:	4620      	mov	r0, r4
 8013826:	f810 2b01 	ldrb.w	r2, [r0], #1
 801382a:	3a30      	subs	r2, #48	@ 0x30
 801382c:	2a09      	cmp	r2, #9
 801382e:	d903      	bls.n	8013838 <_vfiprintf_r+0x1cc>
 8013830:	2b00      	cmp	r3, #0
 8013832:	d0c6      	beq.n	80137c2 <_vfiprintf_r+0x156>
 8013834:	9105      	str	r1, [sp, #20]
 8013836:	e7c4      	b.n	80137c2 <_vfiprintf_r+0x156>
 8013838:	fb0c 2101 	mla	r1, ip, r1, r2
 801383c:	4604      	mov	r4, r0
 801383e:	2301      	movs	r3, #1
 8013840:	e7f0      	b.n	8013824 <_vfiprintf_r+0x1b8>
 8013842:	ab03      	add	r3, sp, #12
 8013844:	9300      	str	r3, [sp, #0]
 8013846:	462a      	mov	r2, r5
 8013848:	4b12      	ldr	r3, [pc, #72]	@ (8013894 <_vfiprintf_r+0x228>)
 801384a:	a904      	add	r1, sp, #16
 801384c:	4630      	mov	r0, r6
 801384e:	f3af 8000 	nop.w
 8013852:	4607      	mov	r7, r0
 8013854:	1c78      	adds	r0, r7, #1
 8013856:	d1d6      	bne.n	8013806 <_vfiprintf_r+0x19a>
 8013858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801385a:	07d9      	lsls	r1, r3, #31
 801385c:	d405      	bmi.n	801386a <_vfiprintf_r+0x1fe>
 801385e:	89ab      	ldrh	r3, [r5, #12]
 8013860:	059a      	lsls	r2, r3, #22
 8013862:	d402      	bmi.n	801386a <_vfiprintf_r+0x1fe>
 8013864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013866:	f7ff fceb 	bl	8013240 <__retarget_lock_release_recursive>
 801386a:	89ab      	ldrh	r3, [r5, #12]
 801386c:	065b      	lsls	r3, r3, #25
 801386e:	f53f af1f 	bmi.w	80136b0 <_vfiprintf_r+0x44>
 8013872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013874:	e71e      	b.n	80136b4 <_vfiprintf_r+0x48>
 8013876:	ab03      	add	r3, sp, #12
 8013878:	9300      	str	r3, [sp, #0]
 801387a:	462a      	mov	r2, r5
 801387c:	4b05      	ldr	r3, [pc, #20]	@ (8013894 <_vfiprintf_r+0x228>)
 801387e:	a904      	add	r1, sp, #16
 8013880:	4630      	mov	r0, r6
 8013882:	f000 f879 	bl	8013978 <_printf_i>
 8013886:	e7e4      	b.n	8013852 <_vfiprintf_r+0x1e6>
 8013888:	08014f76 	.word	0x08014f76
 801388c:	08014f80 	.word	0x08014f80
 8013890:	00000000 	.word	0x00000000
 8013894:	08013647 	.word	0x08013647
 8013898:	08014f7c 	.word	0x08014f7c

0801389c <_printf_common>:
 801389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138a0:	4616      	mov	r6, r2
 80138a2:	4698      	mov	r8, r3
 80138a4:	688a      	ldr	r2, [r1, #8]
 80138a6:	690b      	ldr	r3, [r1, #16]
 80138a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80138ac:	4293      	cmp	r3, r2
 80138ae:	bfb8      	it	lt
 80138b0:	4613      	movlt	r3, r2
 80138b2:	6033      	str	r3, [r6, #0]
 80138b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80138b8:	4607      	mov	r7, r0
 80138ba:	460c      	mov	r4, r1
 80138bc:	b10a      	cbz	r2, 80138c2 <_printf_common+0x26>
 80138be:	3301      	adds	r3, #1
 80138c0:	6033      	str	r3, [r6, #0]
 80138c2:	6823      	ldr	r3, [r4, #0]
 80138c4:	0699      	lsls	r1, r3, #26
 80138c6:	bf42      	ittt	mi
 80138c8:	6833      	ldrmi	r3, [r6, #0]
 80138ca:	3302      	addmi	r3, #2
 80138cc:	6033      	strmi	r3, [r6, #0]
 80138ce:	6825      	ldr	r5, [r4, #0]
 80138d0:	f015 0506 	ands.w	r5, r5, #6
 80138d4:	d106      	bne.n	80138e4 <_printf_common+0x48>
 80138d6:	f104 0a19 	add.w	sl, r4, #25
 80138da:	68e3      	ldr	r3, [r4, #12]
 80138dc:	6832      	ldr	r2, [r6, #0]
 80138de:	1a9b      	subs	r3, r3, r2
 80138e0:	42ab      	cmp	r3, r5
 80138e2:	dc26      	bgt.n	8013932 <_printf_common+0x96>
 80138e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80138e8:	6822      	ldr	r2, [r4, #0]
 80138ea:	3b00      	subs	r3, #0
 80138ec:	bf18      	it	ne
 80138ee:	2301      	movne	r3, #1
 80138f0:	0692      	lsls	r2, r2, #26
 80138f2:	d42b      	bmi.n	801394c <_printf_common+0xb0>
 80138f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80138f8:	4641      	mov	r1, r8
 80138fa:	4638      	mov	r0, r7
 80138fc:	47c8      	blx	r9
 80138fe:	3001      	adds	r0, #1
 8013900:	d01e      	beq.n	8013940 <_printf_common+0xa4>
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	6922      	ldr	r2, [r4, #16]
 8013906:	f003 0306 	and.w	r3, r3, #6
 801390a:	2b04      	cmp	r3, #4
 801390c:	bf02      	ittt	eq
 801390e:	68e5      	ldreq	r5, [r4, #12]
 8013910:	6833      	ldreq	r3, [r6, #0]
 8013912:	1aed      	subeq	r5, r5, r3
 8013914:	68a3      	ldr	r3, [r4, #8]
 8013916:	bf0c      	ite	eq
 8013918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801391c:	2500      	movne	r5, #0
 801391e:	4293      	cmp	r3, r2
 8013920:	bfc4      	itt	gt
 8013922:	1a9b      	subgt	r3, r3, r2
 8013924:	18ed      	addgt	r5, r5, r3
 8013926:	2600      	movs	r6, #0
 8013928:	341a      	adds	r4, #26
 801392a:	42b5      	cmp	r5, r6
 801392c:	d11a      	bne.n	8013964 <_printf_common+0xc8>
 801392e:	2000      	movs	r0, #0
 8013930:	e008      	b.n	8013944 <_printf_common+0xa8>
 8013932:	2301      	movs	r3, #1
 8013934:	4652      	mov	r2, sl
 8013936:	4641      	mov	r1, r8
 8013938:	4638      	mov	r0, r7
 801393a:	47c8      	blx	r9
 801393c:	3001      	adds	r0, #1
 801393e:	d103      	bne.n	8013948 <_printf_common+0xac>
 8013940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013948:	3501      	adds	r5, #1
 801394a:	e7c6      	b.n	80138da <_printf_common+0x3e>
 801394c:	18e1      	adds	r1, r4, r3
 801394e:	1c5a      	adds	r2, r3, #1
 8013950:	2030      	movs	r0, #48	@ 0x30
 8013952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013956:	4422      	add	r2, r4
 8013958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801395c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013960:	3302      	adds	r3, #2
 8013962:	e7c7      	b.n	80138f4 <_printf_common+0x58>
 8013964:	2301      	movs	r3, #1
 8013966:	4622      	mov	r2, r4
 8013968:	4641      	mov	r1, r8
 801396a:	4638      	mov	r0, r7
 801396c:	47c8      	blx	r9
 801396e:	3001      	adds	r0, #1
 8013970:	d0e6      	beq.n	8013940 <_printf_common+0xa4>
 8013972:	3601      	adds	r6, #1
 8013974:	e7d9      	b.n	801392a <_printf_common+0x8e>
	...

08013978 <_printf_i>:
 8013978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801397c:	7e0f      	ldrb	r7, [r1, #24]
 801397e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013980:	2f78      	cmp	r7, #120	@ 0x78
 8013982:	4691      	mov	r9, r2
 8013984:	4680      	mov	r8, r0
 8013986:	460c      	mov	r4, r1
 8013988:	469a      	mov	sl, r3
 801398a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801398e:	d807      	bhi.n	80139a0 <_printf_i+0x28>
 8013990:	2f62      	cmp	r7, #98	@ 0x62
 8013992:	d80a      	bhi.n	80139aa <_printf_i+0x32>
 8013994:	2f00      	cmp	r7, #0
 8013996:	f000 80d2 	beq.w	8013b3e <_printf_i+0x1c6>
 801399a:	2f58      	cmp	r7, #88	@ 0x58
 801399c:	f000 80b9 	beq.w	8013b12 <_printf_i+0x19a>
 80139a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80139a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80139a8:	e03a      	b.n	8013a20 <_printf_i+0xa8>
 80139aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80139ae:	2b15      	cmp	r3, #21
 80139b0:	d8f6      	bhi.n	80139a0 <_printf_i+0x28>
 80139b2:	a101      	add	r1, pc, #4	@ (adr r1, 80139b8 <_printf_i+0x40>)
 80139b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80139b8:	08013a11 	.word	0x08013a11
 80139bc:	08013a25 	.word	0x08013a25
 80139c0:	080139a1 	.word	0x080139a1
 80139c4:	080139a1 	.word	0x080139a1
 80139c8:	080139a1 	.word	0x080139a1
 80139cc:	080139a1 	.word	0x080139a1
 80139d0:	08013a25 	.word	0x08013a25
 80139d4:	080139a1 	.word	0x080139a1
 80139d8:	080139a1 	.word	0x080139a1
 80139dc:	080139a1 	.word	0x080139a1
 80139e0:	080139a1 	.word	0x080139a1
 80139e4:	08013b25 	.word	0x08013b25
 80139e8:	08013a4f 	.word	0x08013a4f
 80139ec:	08013adf 	.word	0x08013adf
 80139f0:	080139a1 	.word	0x080139a1
 80139f4:	080139a1 	.word	0x080139a1
 80139f8:	08013b47 	.word	0x08013b47
 80139fc:	080139a1 	.word	0x080139a1
 8013a00:	08013a4f 	.word	0x08013a4f
 8013a04:	080139a1 	.word	0x080139a1
 8013a08:	080139a1 	.word	0x080139a1
 8013a0c:	08013ae7 	.word	0x08013ae7
 8013a10:	6833      	ldr	r3, [r6, #0]
 8013a12:	1d1a      	adds	r2, r3, #4
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	6032      	str	r2, [r6, #0]
 8013a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013a20:	2301      	movs	r3, #1
 8013a22:	e09d      	b.n	8013b60 <_printf_i+0x1e8>
 8013a24:	6833      	ldr	r3, [r6, #0]
 8013a26:	6820      	ldr	r0, [r4, #0]
 8013a28:	1d19      	adds	r1, r3, #4
 8013a2a:	6031      	str	r1, [r6, #0]
 8013a2c:	0606      	lsls	r6, r0, #24
 8013a2e:	d501      	bpl.n	8013a34 <_printf_i+0xbc>
 8013a30:	681d      	ldr	r5, [r3, #0]
 8013a32:	e003      	b.n	8013a3c <_printf_i+0xc4>
 8013a34:	0645      	lsls	r5, r0, #25
 8013a36:	d5fb      	bpl.n	8013a30 <_printf_i+0xb8>
 8013a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013a3c:	2d00      	cmp	r5, #0
 8013a3e:	da03      	bge.n	8013a48 <_printf_i+0xd0>
 8013a40:	232d      	movs	r3, #45	@ 0x2d
 8013a42:	426d      	negs	r5, r5
 8013a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a48:	4859      	ldr	r0, [pc, #356]	@ (8013bb0 <_printf_i+0x238>)
 8013a4a:	230a      	movs	r3, #10
 8013a4c:	e011      	b.n	8013a72 <_printf_i+0xfa>
 8013a4e:	6821      	ldr	r1, [r4, #0]
 8013a50:	6833      	ldr	r3, [r6, #0]
 8013a52:	0608      	lsls	r0, r1, #24
 8013a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8013a58:	d402      	bmi.n	8013a60 <_printf_i+0xe8>
 8013a5a:	0649      	lsls	r1, r1, #25
 8013a5c:	bf48      	it	mi
 8013a5e:	b2ad      	uxthmi	r5, r5
 8013a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8013a62:	4853      	ldr	r0, [pc, #332]	@ (8013bb0 <_printf_i+0x238>)
 8013a64:	6033      	str	r3, [r6, #0]
 8013a66:	bf14      	ite	ne
 8013a68:	230a      	movne	r3, #10
 8013a6a:	2308      	moveq	r3, #8
 8013a6c:	2100      	movs	r1, #0
 8013a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013a72:	6866      	ldr	r6, [r4, #4]
 8013a74:	60a6      	str	r6, [r4, #8]
 8013a76:	2e00      	cmp	r6, #0
 8013a78:	bfa2      	ittt	ge
 8013a7a:	6821      	ldrge	r1, [r4, #0]
 8013a7c:	f021 0104 	bicge.w	r1, r1, #4
 8013a80:	6021      	strge	r1, [r4, #0]
 8013a82:	b90d      	cbnz	r5, 8013a88 <_printf_i+0x110>
 8013a84:	2e00      	cmp	r6, #0
 8013a86:	d04b      	beq.n	8013b20 <_printf_i+0x1a8>
 8013a88:	4616      	mov	r6, r2
 8013a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8013a92:	5dc7      	ldrb	r7, [r0, r7]
 8013a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a98:	462f      	mov	r7, r5
 8013a9a:	42bb      	cmp	r3, r7
 8013a9c:	460d      	mov	r5, r1
 8013a9e:	d9f4      	bls.n	8013a8a <_printf_i+0x112>
 8013aa0:	2b08      	cmp	r3, #8
 8013aa2:	d10b      	bne.n	8013abc <_printf_i+0x144>
 8013aa4:	6823      	ldr	r3, [r4, #0]
 8013aa6:	07df      	lsls	r7, r3, #31
 8013aa8:	d508      	bpl.n	8013abc <_printf_i+0x144>
 8013aaa:	6923      	ldr	r3, [r4, #16]
 8013aac:	6861      	ldr	r1, [r4, #4]
 8013aae:	4299      	cmp	r1, r3
 8013ab0:	bfde      	ittt	le
 8013ab2:	2330      	movle	r3, #48	@ 0x30
 8013ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013ab8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013abc:	1b92      	subs	r2, r2, r6
 8013abe:	6122      	str	r2, [r4, #16]
 8013ac0:	f8cd a000 	str.w	sl, [sp]
 8013ac4:	464b      	mov	r3, r9
 8013ac6:	aa03      	add	r2, sp, #12
 8013ac8:	4621      	mov	r1, r4
 8013aca:	4640      	mov	r0, r8
 8013acc:	f7ff fee6 	bl	801389c <_printf_common>
 8013ad0:	3001      	adds	r0, #1
 8013ad2:	d14a      	bne.n	8013b6a <_printf_i+0x1f2>
 8013ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ad8:	b004      	add	sp, #16
 8013ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ade:	6823      	ldr	r3, [r4, #0]
 8013ae0:	f043 0320 	orr.w	r3, r3, #32
 8013ae4:	6023      	str	r3, [r4, #0]
 8013ae6:	4833      	ldr	r0, [pc, #204]	@ (8013bb4 <_printf_i+0x23c>)
 8013ae8:	2778      	movs	r7, #120	@ 0x78
 8013aea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013aee:	6823      	ldr	r3, [r4, #0]
 8013af0:	6831      	ldr	r1, [r6, #0]
 8013af2:	061f      	lsls	r7, r3, #24
 8013af4:	f851 5b04 	ldr.w	r5, [r1], #4
 8013af8:	d402      	bmi.n	8013b00 <_printf_i+0x188>
 8013afa:	065f      	lsls	r7, r3, #25
 8013afc:	bf48      	it	mi
 8013afe:	b2ad      	uxthmi	r5, r5
 8013b00:	6031      	str	r1, [r6, #0]
 8013b02:	07d9      	lsls	r1, r3, #31
 8013b04:	bf44      	itt	mi
 8013b06:	f043 0320 	orrmi.w	r3, r3, #32
 8013b0a:	6023      	strmi	r3, [r4, #0]
 8013b0c:	b11d      	cbz	r5, 8013b16 <_printf_i+0x19e>
 8013b0e:	2310      	movs	r3, #16
 8013b10:	e7ac      	b.n	8013a6c <_printf_i+0xf4>
 8013b12:	4827      	ldr	r0, [pc, #156]	@ (8013bb0 <_printf_i+0x238>)
 8013b14:	e7e9      	b.n	8013aea <_printf_i+0x172>
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	f023 0320 	bic.w	r3, r3, #32
 8013b1c:	6023      	str	r3, [r4, #0]
 8013b1e:	e7f6      	b.n	8013b0e <_printf_i+0x196>
 8013b20:	4616      	mov	r6, r2
 8013b22:	e7bd      	b.n	8013aa0 <_printf_i+0x128>
 8013b24:	6833      	ldr	r3, [r6, #0]
 8013b26:	6825      	ldr	r5, [r4, #0]
 8013b28:	6961      	ldr	r1, [r4, #20]
 8013b2a:	1d18      	adds	r0, r3, #4
 8013b2c:	6030      	str	r0, [r6, #0]
 8013b2e:	062e      	lsls	r6, r5, #24
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	d501      	bpl.n	8013b38 <_printf_i+0x1c0>
 8013b34:	6019      	str	r1, [r3, #0]
 8013b36:	e002      	b.n	8013b3e <_printf_i+0x1c6>
 8013b38:	0668      	lsls	r0, r5, #25
 8013b3a:	d5fb      	bpl.n	8013b34 <_printf_i+0x1bc>
 8013b3c:	8019      	strh	r1, [r3, #0]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	6123      	str	r3, [r4, #16]
 8013b42:	4616      	mov	r6, r2
 8013b44:	e7bc      	b.n	8013ac0 <_printf_i+0x148>
 8013b46:	6833      	ldr	r3, [r6, #0]
 8013b48:	1d1a      	adds	r2, r3, #4
 8013b4a:	6032      	str	r2, [r6, #0]
 8013b4c:	681e      	ldr	r6, [r3, #0]
 8013b4e:	6862      	ldr	r2, [r4, #4]
 8013b50:	2100      	movs	r1, #0
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7ec fb74 	bl	8000240 <memchr>
 8013b58:	b108      	cbz	r0, 8013b5e <_printf_i+0x1e6>
 8013b5a:	1b80      	subs	r0, r0, r6
 8013b5c:	6060      	str	r0, [r4, #4]
 8013b5e:	6863      	ldr	r3, [r4, #4]
 8013b60:	6123      	str	r3, [r4, #16]
 8013b62:	2300      	movs	r3, #0
 8013b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b68:	e7aa      	b.n	8013ac0 <_printf_i+0x148>
 8013b6a:	6923      	ldr	r3, [r4, #16]
 8013b6c:	4632      	mov	r2, r6
 8013b6e:	4649      	mov	r1, r9
 8013b70:	4640      	mov	r0, r8
 8013b72:	47d0      	blx	sl
 8013b74:	3001      	adds	r0, #1
 8013b76:	d0ad      	beq.n	8013ad4 <_printf_i+0x15c>
 8013b78:	6823      	ldr	r3, [r4, #0]
 8013b7a:	079b      	lsls	r3, r3, #30
 8013b7c:	d413      	bmi.n	8013ba6 <_printf_i+0x22e>
 8013b7e:	68e0      	ldr	r0, [r4, #12]
 8013b80:	9b03      	ldr	r3, [sp, #12]
 8013b82:	4298      	cmp	r0, r3
 8013b84:	bfb8      	it	lt
 8013b86:	4618      	movlt	r0, r3
 8013b88:	e7a6      	b.n	8013ad8 <_printf_i+0x160>
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	4632      	mov	r2, r6
 8013b8e:	4649      	mov	r1, r9
 8013b90:	4640      	mov	r0, r8
 8013b92:	47d0      	blx	sl
 8013b94:	3001      	adds	r0, #1
 8013b96:	d09d      	beq.n	8013ad4 <_printf_i+0x15c>
 8013b98:	3501      	adds	r5, #1
 8013b9a:	68e3      	ldr	r3, [r4, #12]
 8013b9c:	9903      	ldr	r1, [sp, #12]
 8013b9e:	1a5b      	subs	r3, r3, r1
 8013ba0:	42ab      	cmp	r3, r5
 8013ba2:	dcf2      	bgt.n	8013b8a <_printf_i+0x212>
 8013ba4:	e7eb      	b.n	8013b7e <_printf_i+0x206>
 8013ba6:	2500      	movs	r5, #0
 8013ba8:	f104 0619 	add.w	r6, r4, #25
 8013bac:	e7f5      	b.n	8013b9a <_printf_i+0x222>
 8013bae:	bf00      	nop
 8013bb0:	08014f87 	.word	0x08014f87
 8013bb4:	08014f98 	.word	0x08014f98

08013bb8 <__sflush_r>:
 8013bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc0:	0716      	lsls	r6, r2, #28
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	460c      	mov	r4, r1
 8013bc6:	d454      	bmi.n	8013c72 <__sflush_r+0xba>
 8013bc8:	684b      	ldr	r3, [r1, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	dc02      	bgt.n	8013bd4 <__sflush_r+0x1c>
 8013bce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	dd48      	ble.n	8013c66 <__sflush_r+0xae>
 8013bd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013bd6:	2e00      	cmp	r6, #0
 8013bd8:	d045      	beq.n	8013c66 <__sflush_r+0xae>
 8013bda:	2300      	movs	r3, #0
 8013bdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013be0:	682f      	ldr	r7, [r5, #0]
 8013be2:	6a21      	ldr	r1, [r4, #32]
 8013be4:	602b      	str	r3, [r5, #0]
 8013be6:	d030      	beq.n	8013c4a <__sflush_r+0x92>
 8013be8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013bea:	89a3      	ldrh	r3, [r4, #12]
 8013bec:	0759      	lsls	r1, r3, #29
 8013bee:	d505      	bpl.n	8013bfc <__sflush_r+0x44>
 8013bf0:	6863      	ldr	r3, [r4, #4]
 8013bf2:	1ad2      	subs	r2, r2, r3
 8013bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013bf6:	b10b      	cbz	r3, 8013bfc <__sflush_r+0x44>
 8013bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013bfa:	1ad2      	subs	r2, r2, r3
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c00:	6a21      	ldr	r1, [r4, #32]
 8013c02:	4628      	mov	r0, r5
 8013c04:	47b0      	blx	r6
 8013c06:	1c43      	adds	r3, r0, #1
 8013c08:	89a3      	ldrh	r3, [r4, #12]
 8013c0a:	d106      	bne.n	8013c1a <__sflush_r+0x62>
 8013c0c:	6829      	ldr	r1, [r5, #0]
 8013c0e:	291d      	cmp	r1, #29
 8013c10:	d82b      	bhi.n	8013c6a <__sflush_r+0xb2>
 8013c12:	4a2a      	ldr	r2, [pc, #168]	@ (8013cbc <__sflush_r+0x104>)
 8013c14:	410a      	asrs	r2, r1
 8013c16:	07d6      	lsls	r6, r2, #31
 8013c18:	d427      	bmi.n	8013c6a <__sflush_r+0xb2>
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	6062      	str	r2, [r4, #4]
 8013c1e:	04d9      	lsls	r1, r3, #19
 8013c20:	6922      	ldr	r2, [r4, #16]
 8013c22:	6022      	str	r2, [r4, #0]
 8013c24:	d504      	bpl.n	8013c30 <__sflush_r+0x78>
 8013c26:	1c42      	adds	r2, r0, #1
 8013c28:	d101      	bne.n	8013c2e <__sflush_r+0x76>
 8013c2a:	682b      	ldr	r3, [r5, #0]
 8013c2c:	b903      	cbnz	r3, 8013c30 <__sflush_r+0x78>
 8013c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013c32:	602f      	str	r7, [r5, #0]
 8013c34:	b1b9      	cbz	r1, 8013c66 <__sflush_r+0xae>
 8013c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013c3a:	4299      	cmp	r1, r3
 8013c3c:	d002      	beq.n	8013c44 <__sflush_r+0x8c>
 8013c3e:	4628      	mov	r0, r5
 8013c40:	f7ff fb40 	bl	80132c4 <_free_r>
 8013c44:	2300      	movs	r3, #0
 8013c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8013c48:	e00d      	b.n	8013c66 <__sflush_r+0xae>
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	47b0      	blx	r6
 8013c50:	4602      	mov	r2, r0
 8013c52:	1c50      	adds	r0, r2, #1
 8013c54:	d1c9      	bne.n	8013bea <__sflush_r+0x32>
 8013c56:	682b      	ldr	r3, [r5, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d0c6      	beq.n	8013bea <__sflush_r+0x32>
 8013c5c:	2b1d      	cmp	r3, #29
 8013c5e:	d001      	beq.n	8013c64 <__sflush_r+0xac>
 8013c60:	2b16      	cmp	r3, #22
 8013c62:	d11e      	bne.n	8013ca2 <__sflush_r+0xea>
 8013c64:	602f      	str	r7, [r5, #0]
 8013c66:	2000      	movs	r0, #0
 8013c68:	e022      	b.n	8013cb0 <__sflush_r+0xf8>
 8013c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c6e:	b21b      	sxth	r3, r3
 8013c70:	e01b      	b.n	8013caa <__sflush_r+0xf2>
 8013c72:	690f      	ldr	r7, [r1, #16]
 8013c74:	2f00      	cmp	r7, #0
 8013c76:	d0f6      	beq.n	8013c66 <__sflush_r+0xae>
 8013c78:	0793      	lsls	r3, r2, #30
 8013c7a:	680e      	ldr	r6, [r1, #0]
 8013c7c:	bf08      	it	eq
 8013c7e:	694b      	ldreq	r3, [r1, #20]
 8013c80:	600f      	str	r7, [r1, #0]
 8013c82:	bf18      	it	ne
 8013c84:	2300      	movne	r3, #0
 8013c86:	eba6 0807 	sub.w	r8, r6, r7
 8013c8a:	608b      	str	r3, [r1, #8]
 8013c8c:	f1b8 0f00 	cmp.w	r8, #0
 8013c90:	dde9      	ble.n	8013c66 <__sflush_r+0xae>
 8013c92:	6a21      	ldr	r1, [r4, #32]
 8013c94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013c96:	4643      	mov	r3, r8
 8013c98:	463a      	mov	r2, r7
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	47b0      	blx	r6
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	dc08      	bgt.n	8013cb4 <__sflush_r+0xfc>
 8013ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013caa:	81a3      	strh	r3, [r4, #12]
 8013cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb4:	4407      	add	r7, r0
 8013cb6:	eba8 0800 	sub.w	r8, r8, r0
 8013cba:	e7e7      	b.n	8013c8c <__sflush_r+0xd4>
 8013cbc:	dfbffffe 	.word	0xdfbffffe

08013cc0 <_fflush_r>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	690b      	ldr	r3, [r1, #16]
 8013cc4:	4605      	mov	r5, r0
 8013cc6:	460c      	mov	r4, r1
 8013cc8:	b913      	cbnz	r3, 8013cd0 <_fflush_r+0x10>
 8013cca:	2500      	movs	r5, #0
 8013ccc:	4628      	mov	r0, r5
 8013cce:	bd38      	pop	{r3, r4, r5, pc}
 8013cd0:	b118      	cbz	r0, 8013cda <_fflush_r+0x1a>
 8013cd2:	6a03      	ldr	r3, [r0, #32]
 8013cd4:	b90b      	cbnz	r3, 8013cda <_fflush_r+0x1a>
 8013cd6:	f7fe ffa5 	bl	8012c24 <__sinit>
 8013cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d0f3      	beq.n	8013cca <_fflush_r+0xa>
 8013ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ce4:	07d0      	lsls	r0, r2, #31
 8013ce6:	d404      	bmi.n	8013cf2 <_fflush_r+0x32>
 8013ce8:	0599      	lsls	r1, r3, #22
 8013cea:	d402      	bmi.n	8013cf2 <_fflush_r+0x32>
 8013cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cee:	f7ff faa6 	bl	801323e <__retarget_lock_acquire_recursive>
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	4621      	mov	r1, r4
 8013cf6:	f7ff ff5f 	bl	8013bb8 <__sflush_r>
 8013cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013cfc:	07da      	lsls	r2, r3, #31
 8013cfe:	4605      	mov	r5, r0
 8013d00:	d4e4      	bmi.n	8013ccc <_fflush_r+0xc>
 8013d02:	89a3      	ldrh	r3, [r4, #12]
 8013d04:	059b      	lsls	r3, r3, #22
 8013d06:	d4e1      	bmi.n	8013ccc <_fflush_r+0xc>
 8013d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d0a:	f7ff fa99 	bl	8013240 <__retarget_lock_release_recursive>
 8013d0e:	e7dd      	b.n	8013ccc <_fflush_r+0xc>

08013d10 <fiprintf>:
 8013d10:	b40e      	push	{r1, r2, r3}
 8013d12:	b503      	push	{r0, r1, lr}
 8013d14:	4601      	mov	r1, r0
 8013d16:	ab03      	add	r3, sp, #12
 8013d18:	4805      	ldr	r0, [pc, #20]	@ (8013d30 <fiprintf+0x20>)
 8013d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d1e:	6800      	ldr	r0, [r0, #0]
 8013d20:	9301      	str	r3, [sp, #4]
 8013d22:	f7ff fca3 	bl	801366c <_vfiprintf_r>
 8013d26:	b002      	add	sp, #8
 8013d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d2c:	b003      	add	sp, #12
 8013d2e:	4770      	bx	lr
 8013d30:	20000b18 	.word	0x20000b18

08013d34 <__swhatbuf_r>:
 8013d34:	b570      	push	{r4, r5, r6, lr}
 8013d36:	460c      	mov	r4, r1
 8013d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d3c:	2900      	cmp	r1, #0
 8013d3e:	b096      	sub	sp, #88	@ 0x58
 8013d40:	4615      	mov	r5, r2
 8013d42:	461e      	mov	r6, r3
 8013d44:	da0d      	bge.n	8013d62 <__swhatbuf_r+0x2e>
 8013d46:	89a3      	ldrh	r3, [r4, #12]
 8013d48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013d4c:	f04f 0100 	mov.w	r1, #0
 8013d50:	bf14      	ite	ne
 8013d52:	2340      	movne	r3, #64	@ 0x40
 8013d54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013d58:	2000      	movs	r0, #0
 8013d5a:	6031      	str	r1, [r6, #0]
 8013d5c:	602b      	str	r3, [r5, #0]
 8013d5e:	b016      	add	sp, #88	@ 0x58
 8013d60:	bd70      	pop	{r4, r5, r6, pc}
 8013d62:	466a      	mov	r2, sp
 8013d64:	f000 f862 	bl	8013e2c <_fstat_r>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	dbec      	blt.n	8013d46 <__swhatbuf_r+0x12>
 8013d6c:	9901      	ldr	r1, [sp, #4]
 8013d6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013d72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013d76:	4259      	negs	r1, r3
 8013d78:	4159      	adcs	r1, r3
 8013d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013d7e:	e7eb      	b.n	8013d58 <__swhatbuf_r+0x24>

08013d80 <__smakebuf_r>:
 8013d80:	898b      	ldrh	r3, [r1, #12]
 8013d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d84:	079d      	lsls	r5, r3, #30
 8013d86:	4606      	mov	r6, r0
 8013d88:	460c      	mov	r4, r1
 8013d8a:	d507      	bpl.n	8013d9c <__smakebuf_r+0x1c>
 8013d8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d90:	6023      	str	r3, [r4, #0]
 8013d92:	6123      	str	r3, [r4, #16]
 8013d94:	2301      	movs	r3, #1
 8013d96:	6163      	str	r3, [r4, #20]
 8013d98:	b003      	add	sp, #12
 8013d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d9c:	ab01      	add	r3, sp, #4
 8013d9e:	466a      	mov	r2, sp
 8013da0:	f7ff ffc8 	bl	8013d34 <__swhatbuf_r>
 8013da4:	9f00      	ldr	r7, [sp, #0]
 8013da6:	4605      	mov	r5, r0
 8013da8:	4639      	mov	r1, r7
 8013daa:	4630      	mov	r0, r6
 8013dac:	f7fe fd08 	bl	80127c0 <_malloc_r>
 8013db0:	b948      	cbnz	r0, 8013dc6 <__smakebuf_r+0x46>
 8013db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013db6:	059a      	lsls	r2, r3, #22
 8013db8:	d4ee      	bmi.n	8013d98 <__smakebuf_r+0x18>
 8013dba:	f023 0303 	bic.w	r3, r3, #3
 8013dbe:	f043 0302 	orr.w	r3, r3, #2
 8013dc2:	81a3      	strh	r3, [r4, #12]
 8013dc4:	e7e2      	b.n	8013d8c <__smakebuf_r+0xc>
 8013dc6:	89a3      	ldrh	r3, [r4, #12]
 8013dc8:	6020      	str	r0, [r4, #0]
 8013dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013dce:	81a3      	strh	r3, [r4, #12]
 8013dd0:	9b01      	ldr	r3, [sp, #4]
 8013dd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013dd6:	b15b      	cbz	r3, 8013df0 <__smakebuf_r+0x70>
 8013dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f000 f837 	bl	8013e50 <_isatty_r>
 8013de2:	b128      	cbz	r0, 8013df0 <__smakebuf_r+0x70>
 8013de4:	89a3      	ldrh	r3, [r4, #12]
 8013de6:	f023 0303 	bic.w	r3, r3, #3
 8013dea:	f043 0301 	orr.w	r3, r3, #1
 8013dee:	81a3      	strh	r3, [r4, #12]
 8013df0:	89a3      	ldrh	r3, [r4, #12]
 8013df2:	431d      	orrs	r5, r3
 8013df4:	81a5      	strh	r5, [r4, #12]
 8013df6:	e7cf      	b.n	8013d98 <__smakebuf_r+0x18>

08013df8 <memmove>:
 8013df8:	4288      	cmp	r0, r1
 8013dfa:	b510      	push	{r4, lr}
 8013dfc:	eb01 0402 	add.w	r4, r1, r2
 8013e00:	d902      	bls.n	8013e08 <memmove+0x10>
 8013e02:	4284      	cmp	r4, r0
 8013e04:	4623      	mov	r3, r4
 8013e06:	d807      	bhi.n	8013e18 <memmove+0x20>
 8013e08:	1e43      	subs	r3, r0, #1
 8013e0a:	42a1      	cmp	r1, r4
 8013e0c:	d008      	beq.n	8013e20 <memmove+0x28>
 8013e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e16:	e7f8      	b.n	8013e0a <memmove+0x12>
 8013e18:	4402      	add	r2, r0
 8013e1a:	4601      	mov	r1, r0
 8013e1c:	428a      	cmp	r2, r1
 8013e1e:	d100      	bne.n	8013e22 <memmove+0x2a>
 8013e20:	bd10      	pop	{r4, pc}
 8013e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e2a:	e7f7      	b.n	8013e1c <memmove+0x24>

08013e2c <_fstat_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	4d07      	ldr	r5, [pc, #28]	@ (8013e4c <_fstat_r+0x20>)
 8013e30:	2300      	movs	r3, #0
 8013e32:	4604      	mov	r4, r0
 8013e34:	4608      	mov	r0, r1
 8013e36:	4611      	mov	r1, r2
 8013e38:	602b      	str	r3, [r5, #0]
 8013e3a:	f7ed fdfb 	bl	8001a34 <_fstat>
 8013e3e:	1c43      	adds	r3, r0, #1
 8013e40:	d102      	bne.n	8013e48 <_fstat_r+0x1c>
 8013e42:	682b      	ldr	r3, [r5, #0]
 8013e44:	b103      	cbz	r3, 8013e48 <_fstat_r+0x1c>
 8013e46:	6023      	str	r3, [r4, #0]
 8013e48:	bd38      	pop	{r3, r4, r5, pc}
 8013e4a:	bf00      	nop
 8013e4c:	20010d10 	.word	0x20010d10

08013e50 <_isatty_r>:
 8013e50:	b538      	push	{r3, r4, r5, lr}
 8013e52:	4d06      	ldr	r5, [pc, #24]	@ (8013e6c <_isatty_r+0x1c>)
 8013e54:	2300      	movs	r3, #0
 8013e56:	4604      	mov	r4, r0
 8013e58:	4608      	mov	r0, r1
 8013e5a:	602b      	str	r3, [r5, #0]
 8013e5c:	f7ed fdfa 	bl	8001a54 <_isatty>
 8013e60:	1c43      	adds	r3, r0, #1
 8013e62:	d102      	bne.n	8013e6a <_isatty_r+0x1a>
 8013e64:	682b      	ldr	r3, [r5, #0]
 8013e66:	b103      	cbz	r3, 8013e6a <_isatty_r+0x1a>
 8013e68:	6023      	str	r3, [r4, #0]
 8013e6a:	bd38      	pop	{r3, r4, r5, pc}
 8013e6c:	20010d10 	.word	0x20010d10

08013e70 <abort>:
 8013e70:	b508      	push	{r3, lr}
 8013e72:	2006      	movs	r0, #6
 8013e74:	f000 f82c 	bl	8013ed0 <raise>
 8013e78:	2001      	movs	r0, #1
 8013e7a:	f7ed fd8b 	bl	8001994 <_exit>

08013e7e <_raise_r>:
 8013e7e:	291f      	cmp	r1, #31
 8013e80:	b538      	push	{r3, r4, r5, lr}
 8013e82:	4605      	mov	r5, r0
 8013e84:	460c      	mov	r4, r1
 8013e86:	d904      	bls.n	8013e92 <_raise_r+0x14>
 8013e88:	2316      	movs	r3, #22
 8013e8a:	6003      	str	r3, [r0, #0]
 8013e8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e90:	bd38      	pop	{r3, r4, r5, pc}
 8013e92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013e94:	b112      	cbz	r2, 8013e9c <_raise_r+0x1e>
 8013e96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e9a:	b94b      	cbnz	r3, 8013eb0 <_raise_r+0x32>
 8013e9c:	4628      	mov	r0, r5
 8013e9e:	f000 f831 	bl	8013f04 <_getpid_r>
 8013ea2:	4622      	mov	r2, r4
 8013ea4:	4601      	mov	r1, r0
 8013ea6:	4628      	mov	r0, r5
 8013ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013eac:	f000 b818 	b.w	8013ee0 <_kill_r>
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	d00a      	beq.n	8013eca <_raise_r+0x4c>
 8013eb4:	1c59      	adds	r1, r3, #1
 8013eb6:	d103      	bne.n	8013ec0 <_raise_r+0x42>
 8013eb8:	2316      	movs	r3, #22
 8013eba:	6003      	str	r3, [r0, #0]
 8013ebc:	2001      	movs	r0, #1
 8013ebe:	e7e7      	b.n	8013e90 <_raise_r+0x12>
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	4798      	blx	r3
 8013eca:	2000      	movs	r0, #0
 8013ecc:	e7e0      	b.n	8013e90 <_raise_r+0x12>
	...

08013ed0 <raise>:
 8013ed0:	4b02      	ldr	r3, [pc, #8]	@ (8013edc <raise+0xc>)
 8013ed2:	4601      	mov	r1, r0
 8013ed4:	6818      	ldr	r0, [r3, #0]
 8013ed6:	f7ff bfd2 	b.w	8013e7e <_raise_r>
 8013eda:	bf00      	nop
 8013edc:	20000b18 	.word	0x20000b18

08013ee0 <_kill_r>:
 8013ee0:	b538      	push	{r3, r4, r5, lr}
 8013ee2:	4d07      	ldr	r5, [pc, #28]	@ (8013f00 <_kill_r+0x20>)
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	4608      	mov	r0, r1
 8013eea:	4611      	mov	r1, r2
 8013eec:	602b      	str	r3, [r5, #0]
 8013eee:	f7ed fd41 	bl	8001974 <_kill>
 8013ef2:	1c43      	adds	r3, r0, #1
 8013ef4:	d102      	bne.n	8013efc <_kill_r+0x1c>
 8013ef6:	682b      	ldr	r3, [r5, #0]
 8013ef8:	b103      	cbz	r3, 8013efc <_kill_r+0x1c>
 8013efa:	6023      	str	r3, [r4, #0]
 8013efc:	bd38      	pop	{r3, r4, r5, pc}
 8013efe:	bf00      	nop
 8013f00:	20010d10 	.word	0x20010d10

08013f04 <_getpid_r>:
 8013f04:	f7ed bd2e 	b.w	8001964 <_getpid>

08013f08 <_init>:
 8013f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f0a:	bf00      	nop
 8013f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f0e:	bc08      	pop	{r3}
 8013f10:	469e      	mov	lr, r3
 8013f12:	4770      	bx	lr

08013f14 <_fini>:
 8013f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f16:	bf00      	nop
 8013f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f1a:	bc08      	pop	{r3}
 8013f1c:	469e      	mov	lr, r3
 8013f1e:	4770      	bx	lr
