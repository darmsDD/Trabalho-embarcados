
teste1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e08  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ac  08013fe8  08013fe8  00014fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015094  08015094  00017b68  2**0
                  CONTENTS
  4 .ARM          00000008  08015094  08015094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801509c  0801509c  00017b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801509c  0801509c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080150a4  080150a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b68  20000000  080150a8  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101b0  20000b68  08015c10  00017b68  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010d18  08015c10  00017d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017b68  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002276c  00000000  00000000  00017b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aa5  00000000  00000000  0003a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0003edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001494  00000000  00000000  00040868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d09b  00000000  00000000  00041cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000235e8  00000000  00000000  0006ed97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001166d6  00000000  00000000  0009237f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001a8a55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e18  00000000  00000000  001a8ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  001b08d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000b68 	.word	0x20000b68
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013fd0 	.word	0x08013fd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000b6c 	.word	0x20000b6c
 800021c:	08013fd0 	.word	0x08013fd0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_ldivmod>:
 8000668:	b97b      	cbnz	r3, 800068a <__aeabi_ldivmod+0x22>
 800066a:	b972      	cbnz	r2, 800068a <__aeabi_ldivmod+0x22>
 800066c:	2900      	cmp	r1, #0
 800066e:	bfbe      	ittt	lt
 8000670:	2000      	movlt	r0, #0
 8000672:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000676:	e006      	blt.n	8000686 <__aeabi_ldivmod+0x1e>
 8000678:	bf08      	it	eq
 800067a:	2800      	cmpeq	r0, #0
 800067c:	bf1c      	itt	ne
 800067e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000682:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000686:	f000 b9b5 	b.w	80009f4 <__aeabi_idiv0>
 800068a:	f1ad 0c08 	sub.w	ip, sp, #8
 800068e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000692:	2900      	cmp	r1, #0
 8000694:	db09      	blt.n	80006aa <__aeabi_ldivmod+0x42>
 8000696:	2b00      	cmp	r3, #0
 8000698:	db1a      	blt.n	80006d0 <__aeabi_ldivmod+0x68>
 800069a:	f000 f84d 	bl	8000738 <__udivmoddi4>
 800069e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a6:	b004      	add	sp, #16
 80006a8:	4770      	bx	lr
 80006aa:	4240      	negs	r0, r0
 80006ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db1b      	blt.n	80006ec <__aeabi_ldivmod+0x84>
 80006b4:	f000 f840 	bl	8000738 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4240      	negs	r0, r0
 80006c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c8:	4252      	negs	r2, r2
 80006ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ce:	4770      	bx	lr
 80006d0:	4252      	negs	r2, r2
 80006d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d6:	f000 f82f 	bl	8000738 <__udivmoddi4>
 80006da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e2:	b004      	add	sp, #16
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	4770      	bx	lr
 80006ec:	4252      	negs	r2, r2
 80006ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f2:	f000 f821 	bl	8000738 <__udivmoddi4>
 80006f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fe:	b004      	add	sp, #16
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	4770      	bx	lr

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROSTask */
  microROSTaskHandle = osThreadNew(microROSTaskFunction, NULL, &microROSTask_attributes);
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <MX_FREERTOS_Init+0x18>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_FREERTOS_Init+0x1c>)
 8000a02:	f005 f9fd 	bl	8005e00 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a03      	ldr	r2, [pc, #12]	@ (8000a18 <MX_FREERTOS_Init+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080140d8 	.word	0x080140d8
 8000a14:	08000a1d 	.word	0x08000a1d
 8000a18:	20000bc0 	.word	0x20000bc0

08000a1c <microROSTaskFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_microROSTaskFunction */
void microROSTaskFunction(void *argument)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b0a9      	sub	sp, #164	@ 0xa4
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN microROSTaskFunction */

  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 8000a24:	4b5b      	ldr	r3, [pc, #364]	@ (8000b94 <microROSTaskFunction+0x178>)
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	4b5b      	ldr	r3, [pc, #364]	@ (8000b98 <microROSTaskFunction+0x17c>)
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b9c <microROSTaskFunction+0x180>)
 8000a2e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ba0 <microROSTaskFunction+0x184>)
 8000a30:	495c      	ldr	r1, [pc, #368]	@ (8000ba4 <microROSTaskFunction+0x188>)
 8000a32:	2001      	movs	r0, #1
 8000a34:	f008 fdb0 	bl	8009598 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000a38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f008 fcff 	bl	8009440 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000a42:	4b59      	ldr	r3, [pc, #356]	@ (8000ba8 <microROSTaskFunction+0x18c>)
 8000a44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000a46:	4b59      	ldr	r3, [pc, #356]	@ (8000bac <microROSTaskFunction+0x190>)
 8000a48:	673b      	str	r3, [r7, #112]	@ 0x70
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000a4a:	4b59      	ldr	r3, [pc, #356]	@ (8000bb0 <microROSTaskFunction+0x194>)
 8000a4c:	677b      	str	r3, [r7, #116]	@ 0x74
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000a4e:	4b59      	ldr	r3, [pc, #356]	@ (8000bb4 <microROSTaskFunction+0x198>)
 8000a50:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000a52:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 fd0e 	bl	8009478 <rcutils_set_default_allocator>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	f083 0301 	eor.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <microROSTaskFunction+0x54>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8000a68:	21b2      	movs	r1, #178	@ 0xb2
 8000a6a:	4853      	ldr	r0, [pc, #332]	@ (8000bb8 <microROSTaskFunction+0x19c>)
 8000a6c:	f012 f9ce 	bl	8012e0c <iprintf>
  }

	rcl_allocator_t allocator = rcl_get_default_allocator();
 8000a70:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 fcf1 	bl	800945c <rcutils_get_default_allocator>
	// Initialize and modify options (Set DOMAIN ID to 10)
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8000a7a:	f008 fa4d 	bl	8008f18 <rcl_get_zero_initialized_init_options>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	657b      	str	r3, [r7, #84]	@ 0x54
	rcl_init_options_init(&init_options, allocator);
 8000a82:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000a86:	466a      	mov	r2, sp
 8000a88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a90:	e882 0003 	stmia.w	r2, {r0, r1}
 8000a94:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f008 fa3e 	bl	8008f1c <rcl_init_options_init>
	rcl_init_options_set_domain_id(&init_options, 25);
 8000aa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aa4:	2119      	movs	r1, #25
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 fb1a 	bl	80090e0 <rcl_init_options_set_domain_id>
	// Initialize rclc support object with custom options
	rclc_support_t support;
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8000aac:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000ab0:	f107 0020 	add.w	r0, r7, #32
 8000ab4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4613      	mov	r3, r2
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f008 fc12 	bl	80092e8 <rclc_support_init_with_options>
	// Create node object
	rcl_node_t node;
	const char * node_name = "test_node";
 8000ac4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bbc <microROSTaskFunction+0x1a0>)
 8000ac6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	// Node namespace (Can remain empty "")
	const char * namespace = "test_namespace";
 8000aca:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc0 <microROSTaskFunction+0x1a4>)
 8000acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	// Init node with configured support object
	rcl_ret_t rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	f107 0018 	add.w	r0, r7, #24
 8000ad8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000adc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000ae0:	f008 fc36 	bl	8009350 <rclc_node_init_default>
 8000ae4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	while (rc2 != RCL_RET_OK) {
 8000ae8:	e015      	b.n	8000b16 <microROSTaskFunction+0xfa>
		for(int i=0;i<10;i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000af0:	e00d      	b.n	8000b0e <microROSTaskFunction+0xf2>
			HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8000af2:	2120      	movs	r1, #32
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f001 ff24 	bl	8002944 <HAL_GPIO_TogglePin>
			osDelay(500);
 8000afc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b00:	f005 fa10 	bl	8005f24 <osDelay>
		for(int i=0;i<10;i++){
 8000b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	dded      	ble.n	8000af2 <microROSTaskFunction+0xd6>
	while (rc2 != RCL_RET_OK) {
 8000b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1e5      	bne.n	8000aea <microROSTaskFunction+0xce>
		}
	}


  //time sync
  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 8000b1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b22:	f009 fb05 	bl	800a130 <rmw_uros_sync_session>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <microROSTaskFunction+0x118>
	  printf("Error on time sync (line %d)\n", __LINE__);
 8000b2c:	21ce      	movs	r1, #206	@ 0xce
 8000b2e:	4825      	ldr	r0, [pc, #148]	@ (8000bc4 <microROSTaskFunction+0x1a8>)
 8000b30:	f012 f96c 	bl	8012e0c <iprintf>

  rclc_publisher_init_default(
 8000b34:	f007 fef0 	bl	8008918 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f107 0118 	add.w	r1, r7, #24
 8000b3e:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <microROSTaskFunction+0x1ac>)
 8000b40:	4822      	ldr	r0, [pc, #136]	@ (8000bcc <microROSTaskFunction+0x1b0>)
 8000b42:	f008 fc41 	bl	80093c8 <rclc_publisher_init_default>
//  	&joint_state_pub,
//  	&node,
//	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
//  	"/int_message");
//
    int i=132;
 8000b46:	2384      	movs	r3, #132	@ 0x84
 8000b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
//  joint_state_msg.data = i;
    float a_velocity[] = {500,500,100,100};
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <microROSTaskFunction+0x1b4>)
 8000b4e:	f107 0408 	add.w	r4, r7, #8
 8000b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    setActuatorMsg(a_velocity);
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f83d 	bl	8000bdc <setActuatorMsg>
  /* Infinite loop */
  for(;;)
  {
	  rcl_ret_t ret = rcl_publish(&joint_state_pub, &joint_state_msg, NULL);
 8000b62:	2200      	movs	r2, #0
 8000b64:	491b      	ldr	r1, [pc, #108]	@ (8000bd4 <microROSTaskFunction+0x1b8>)
 8000b66:	4819      	ldr	r0, [pc, #100]	@ (8000bcc <microROSTaskFunction+0x1b0>)
 8000b68:	f008 fb9a 	bl	80092a0 <rcl_publish>
 8000b6c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	  if (ret != RCL_RET_OK)
 8000b70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <microROSTaskFunction+0x164>
	  {
		  printf("Error publishing joint_state (line %d)\n", __LINE__);
 8000b78:	21e8      	movs	r1, #232	@ 0xe8
 8000b7a:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <microROSTaskFunction+0x1bc>)
 8000b7c:	f012 f946 	bl	8012e0c <iprintf>
	}
	  osDelay(1000);
 8000b80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b84:	f005 f9ce 	bl	8005f24 <osDelay>
	  //joint_state_msg.data = i;
	  i--;
 8000b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  {
 8000b92:	e7e6      	b.n	8000b62 <microROSTaskFunction+0x146>
 8000b94:	08001255 	.word	0x08001255
 8000b98:	080011f1 	.word	0x080011f1
 8000b9c:	080011d1 	.word	0x080011d1
 8000ba0:	080011a5 	.word	0x080011a5
 8000ba4:	20006260 	.word	0x20006260
 8000ba8:	080014c9 	.word	0x080014c9
 8000bac:	0800150d 	.word	0x0800150d
 8000bb0:	08001545 	.word	0x08001545
 8000bb4:	080015b1 	.word	0x080015b1
 8000bb8:	08013ff8 	.word	0x08013ff8
 8000bbc:	08014020 	.word	0x08014020
 8000bc0:	0801402c 	.word	0x0801402c
 8000bc4:	0801403c 	.word	0x0801403c
 8000bc8:	0801405c 	.word	0x0801405c
 8000bcc:	20000b84 	.word	0x20000b84
 8000bd0:	080140a4 	.word	0x080140a4
 8000bd4:	20000b88 	.word	0x20000b88
 8000bd8:	0801407c 	.word	0x0801407c

08000bdc <setActuatorMsg>:
	 * position: []
	 * velocity: []
	 * normalized: []
 * Só nos interessa a velocidade. Então o argumento da função é um ponteiro de float com 4 posições
 */
void setActuatorMsg(float *fp_velocity){
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	joint_state_msg.header.frame_id.capacity = 20;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000be6:	2214      	movs	r2, #20
 8000be8:	611a      	str	r2, [r3, #16]
	joint_state_msg.header.frame_id.data = (char*) pvPortMalloc(joint_state_msg.header.frame_id.capacity  * sizeof(char));
 8000bea:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 fca4 	bl	800853c <pvPortMalloc>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000bf8:	6093      	str	r3, [r2, #8]
	joint_state_msg.header.frame_id.size = strlen(joint_state_msg.header.frame_id.data);
 8000bfa:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fb6e 	bl	80002e0 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a25      	ldr	r2, [pc, #148]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c08:	60d3      	str	r3, [r2, #12]
//	joint_state_msg.position.data = (double*) pvPortMalloc(joint_state_msg.position.capacity * sizeof(double));
//	joint_state_msg.position.data[0] = 0;
//	joint_state_msg.position.data[1] = 0;
//	joint_state_msg.position.size = 2;

	joint_state_msg.velocity.capacity = 4;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
	joint_state_msg.velocity.data = (double*) pvPortMalloc(joint_state_msg.velocity.capacity * sizeof(double));
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f007 fc90 	bl	800853c <pvPortMalloc>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c20:	6213      	str	r3, [r2, #32]
	joint_state_msg.velocity.data[0] = fp_velocity[0];
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c28:	6a14      	ldr	r4, [r2, #32]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fcc4 	bl	80005b8 <__aeabi_f2d>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.data[1] = fp_velocity[1];
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c40:	6a1b      	ldr	r3, [r3, #32]
 8000c42:	f103 0408 	add.w	r4, r3, #8
 8000c46:	4610      	mov	r0, r2
 8000c48:	f7ff fcb6 	bl	80005b8 <__aeabi_f2d>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.data[2] = fp_velocity[2];
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3308      	adds	r3, #8
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c5c:	6a1b      	ldr	r3, [r3, #32]
 8000c5e:	f103 0410 	add.w	r4, r3, #16
 8000c62:	4610      	mov	r0, r2
 8000c64:	f7ff fca8 	bl	80005b8 <__aeabi_f2d>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.data[3] = fp_velocity[3];
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	330c      	adds	r3, #12
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	f103 0418 	add.w	r4, r3, #24
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f7ff fc9a 	bl	80005b8 <__aeabi_f2d>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	e9c4 2300 	strd	r2, r3, [r4]
	joint_state_msg.velocity.size = 4;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <setActuatorMsg+0xc0>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000b88 	.word	0x20000b88

08000ca0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000cac:	f006 f99c 	bl	8006fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e1c <pvPortMallocMicroROS+0x17c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000cb8:	f000 f986 	bl	8000fc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000cbc:	4b58      	ldr	r3, [pc, #352]	@ (8000e20 <pvPortMallocMicroROS+0x180>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 8090 	bne.w	8000dea <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d01e      	beq.n	8000d0e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d015      	beq.n	8000d0e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f023 0307 	bic.w	r3, r3, #7
 8000ce8:	3308      	adds	r3, #8
 8000cea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00b      	beq.n	8000d0e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cfa:	f383 8811 	msr	BASEPRI, r3
 8000cfe:	f3bf 8f6f 	isb	sy
 8000d02:	f3bf 8f4f 	dsb	sy
 8000d06:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d06a      	beq.n	8000dea <pvPortMallocMicroROS+0x14a>
 8000d14:	4b43      	ldr	r3, [pc, #268]	@ (8000e24 <pvPortMallocMicroROS+0x184>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d865      	bhi.n	8000dea <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d1e:	4b42      	ldr	r3, [pc, #264]	@ (8000e28 <pvPortMallocMicroROS+0x188>)
 8000d20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d22:	4b41      	ldr	r3, [pc, #260]	@ (8000e28 <pvPortMallocMicroROS+0x188>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d28:	e004      	b.n	8000d34 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d903      	bls.n	8000d46 <pvPortMallocMicroROS+0xa6>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f1      	bne.n	8000d2a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d46:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <pvPortMallocMicroROS+0x17c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d04c      	beq.n	8000dea <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2208      	movs	r2, #8
 8000d56:	4413      	add	r3, r2
 8000d58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	1ad2      	subs	r2, r2, r3
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d920      	bls.n	8000db4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00b      	beq.n	8000d9c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d88:	f383 8811 	msr	BASEPRI, r3
 8000d8c:	f3bf 8f6f 	isb	sy
 8000d90:	f3bf 8f4f 	dsb	sy
 8000d94:	613b      	str	r3, [r7, #16]
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dae:	69b8      	ldr	r0, [r7, #24]
 8000db0:	f000 f96c 	bl	800108c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <pvPortMallocMicroROS+0x184>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	4a19      	ldr	r2, [pc, #100]	@ (8000e24 <pvPortMallocMicroROS+0x184>)
 8000dc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <pvPortMallocMicroROS+0x184>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <pvPortMallocMicroROS+0x18c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d203      	bcs.n	8000dd6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <pvPortMallocMicroROS+0x184>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a16      	ldr	r2, [pc, #88]	@ (8000e2c <pvPortMallocMicroROS+0x18c>)
 8000dd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <pvPortMallocMicroROS+0x180>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	431a      	orrs	r2, r3
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000dea:	f006 f90b 	bl	8007004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00b      	beq.n	8000e10 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dfc:	f383 8811 	msr	BASEPRI, r3
 8000e00:	f3bf 8f6f 	isb	sy
 8000e04:	f3bf 8f4f 	dsb	sy
 8000e08:	60fb      	str	r3, [r7, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000e10:	69fb      	ldr	r3, [r7, #28]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200059ec 	.word	0x200059ec
 8000e20:	200059f8 	.word	0x200059f8
 8000e24:	200059f0 	.word	0x200059f0
 8000e28:	200059e4 	.word	0x200059e4
 8000e2c:	200059f4 	.word	0x200059f4

08000e30 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d04a      	beq.n	8000ed8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e42:	2308      	movs	r3, #8
 8000e44:	425b      	negs	r3, r3
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4413      	add	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <vPortFreeMicroROS+0xb0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10b      	bne.n	8000e76 <vPortFreeMicroROS+0x46>
	__asm volatile
 8000e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f3bf 8f6f 	isb	sy
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	60fb      	str	r3, [r7, #12]
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	e7fd      	b.n	8000e72 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <vPortFreeMicroROS+0x66>
	__asm volatile
 8000e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e82:	f383 8811 	msr	BASEPRI, r3
 8000e86:	f3bf 8f6f 	isb	sy
 8000e8a:	f3bf 8f4f 	dsb	sy
 8000e8e:	60bb      	str	r3, [r7, #8]
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	e7fd      	b.n	8000e92 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <vPortFreeMicroROS+0xb0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d019      	beq.n	8000ed8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d115      	bne.n	8000ed8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <vPortFreeMicroROS+0xb0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000ebc:	f006 f894 	bl	8006fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <vPortFreeMicroROS+0xb4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <vPortFreeMicroROS+0xb4>)
 8000ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000ece:	6938      	ldr	r0, [r7, #16]
 8000ed0:	f000 f8dc 	bl	800108c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000ed4:	f006 f896 	bl	8007004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200059f8 	.word	0x200059f8
 8000ee4:	200059f0 	.word	0x200059f0

08000ee8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <getBlockSize+0x38>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]

	return count;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200059f8 	.word	0x200059f8

08000f24 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f2e:	f006 f85b 	bl	8006fe8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f7ff feb4 	bl	8000ca0 <pvPortMallocMicroROS>
 8000f38:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d017      	beq.n	8000f70 <pvPortReallocMicroROS+0x4c>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d014      	beq.n	8000f70 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffce 	bl	8000ee8 <getBlockSize>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2208      	movs	r2, #8
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d201      	bcs.n	8000f60 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	68b8      	ldr	r0, [r7, #8]
 8000f66:	f012 f9d8 	bl	801331a <memcpy>

		vPortFreeMicroROS(pv);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff60 	bl	8000e30 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000f70:	f006 f848 	bl	8007004 <xTaskResumeAll>

	return newmem;
 8000f74:	68bb      	ldr	r3, [r7, #8]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f88:	f006 f82e 	bl	8006fe8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff fe82 	bl	8000ca0 <pvPortMallocMicroROS>
 8000f9c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000fa2:	e004      	b.n	8000fae <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	613a      	str	r2, [r7, #16]
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	617a      	str	r2, [r7, #20]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f5      	bne.n	8000fa4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000fb8:	f006 f824 	bl	8007004 <xTaskResumeAll>
  	return mem;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000fce:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000fd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <prvHeapInit+0xac>)
 8000fd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00c      	beq.n	8000ffc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3307      	adds	r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f023 0307 	bic.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <prvHeapInit+0xac>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001000:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <prvHeapInit+0xb0>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <prvHeapInit+0xb0>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001014:	2208      	movs	r2, #8
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f023 0307 	bic.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <prvHeapInit+0xb4>)
 8001028:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <prvHeapInit+0xb4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <prvHeapInit+0xb4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	1ad2      	subs	r2, r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <prvHeapInit+0xb4>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <prvHeapInit+0xb8>)
 8001056:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a09      	ldr	r2, [pc, #36]	@ (8001084 <prvHeapInit+0xbc>)
 800105e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <prvHeapInit+0xc0>)
 8001062:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000bc4 	.word	0x20000bc4
 8001078:	200059e4 	.word	0x200059e4
 800107c:	200059ec 	.word	0x200059ec
 8001080:	200059f4 	.word	0x200059f4
 8001084:	200059f0 	.word	0x200059f0
 8001088:	200059f8 	.word	0x200059f8

0800108c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <prvInsertBlockIntoFreeList+0xac>)
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e002      	b.n	80010a0 <prvInsertBlockIntoFreeList+0x14>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d8f7      	bhi.n	800109a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4413      	add	r3, r2
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d108      	bne.n	80010ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	441a      	add	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	441a      	add	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d118      	bne.n	8001114 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <prvInsertBlockIntoFreeList+0xb0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d00d      	beq.n	800110a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	441a      	add	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e008      	b.n	800111c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <prvInsertBlockIntoFreeList+0xb0>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e003      	b.n	800111c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d002      	beq.n	800112a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200059e4 	.word	0x200059e4
 800113c:	200059ec 	.word	0x200059ec

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001146:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <MX_DMA_Init+0x60>)
 8001148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114a:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <MX_DMA_Init+0x60>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6493      	str	r3, [r2, #72]	@ 0x48
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <MX_DMA_Init+0x60>)
 8001154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <MX_DMA_Init+0x60>)
 8001160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <MX_DMA_Init+0x60>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6493      	str	r3, [r2, #72]	@ 0x48
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <MX_DMA_Init+0x60>)
 800116c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	200b      	movs	r0, #11
 800117c:	f000 fee2 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001180:	200b      	movs	r0, #11
 8001182:	f000 fef9 	bl	8001f78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	200c      	movs	r0, #12
 800118c:	f000 feda 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001190:	200c      	movs	r0, #12
 8001192:	f000 fef1 	bl	8001f78 <HAL_NVIC_EnableIRQ>

}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000

080011a4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011b2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80011b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011b8:	4904      	ldr	r1, [pc, #16]	@ (80011cc <cubemx_transport_open+0x28>)
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 f87e 	bl	80042bc <HAL_UART_Receive_DMA>
    return true;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200059fc 	.word	0x200059fc

080011d0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80011de:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f003 f8b7 	bl	8004354 <HAL_UART_DMAStop>
    return true;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001204:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120c:	2b20      	cmp	r3, #32
 800120e:	d11b      	bne.n	8001248 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f002 ffcf 	bl	80041bc <HAL_UART_Transmit_DMA>
 800121e:	4603      	mov	r3, r0
 8001220:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001222:	e002      	b.n	800122a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f004 fe7d 	bl	8005f24 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800122a:	7cfb      	ldrb	r3, [r7, #19]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <cubemx_transport_write+0x4a>
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001236:	2b20      	cmp	r3, #32
 8001238:	d1f4      	bne.n	8001224 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800123a:	7cfb      	ldrb	r3, [r7, #19]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <cubemx_transport_write+0x54>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e002      	b.n	800124a <cubemx_transport_write+0x5a>
 8001244:	2300      	movs	r3, #0
 8001246:	e000      	b.n	800124a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001248:	2300      	movs	r3, #0
    }
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001268:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126e:	b672      	cpsid	i
}
 8001270:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <cubemx_transport_read+0x9c>)
 8001282:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001284:	b662      	cpsie	i
}
 8001286:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	3301      	adds	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800128e:	2001      	movs	r0, #1
 8001290:	f004 fe48 	bl	8005f24 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001294:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <cubemx_transport_read+0xa0>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <cubemx_transport_read+0x9c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d103      	bne.n	80012a8 <cubemx_transport_read+0x54>
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbe2      	blt.n	800126e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012ac:	e011      	b.n	80012d2 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <cubemx_transport_read+0xa0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	440b      	add	r3, r1
 80012b8:	490f      	ldr	r1, [pc, #60]	@ (80012f8 <cubemx_transport_read+0xa4>)
 80012ba:	5c8a      	ldrb	r2, [r1, r2]
 80012bc:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <cubemx_transport_read+0xa0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <cubemx_transport_read+0xa0>)
 80012ca:	6013      	str	r3, [r2, #0]
        wrote++;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	3301      	adds	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <cubemx_transport_read+0xa0>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <cubemx_transport_read+0x9c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d003      	beq.n	80012e6 <cubemx_transport_read+0x92>
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d3e3      	bcc.n	80012ae <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80012e6:	69bb      	ldr	r3, [r7, #24]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20006200 	.word	0x20006200
 80012f4:	200061fc 	.word	0x200061fc
 80012f8:	200059fc 	.word	0x200059fc

080012fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800132a:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001330:	f043 0320 	orr.w	r3, r3, #32
 8001334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b20      	ldr	r3, [pc, #128]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_GPIO_Init+0xd4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2120      	movs	r1, #32
 8001376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137a:	f001 facb 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800137e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001384:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480f      	ldr	r0, [pc, #60]	@ (80013d4 <MX_GPIO_Init+0xd8>)
 8001396:	f001 f93b 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800139a:	2320      	movs	r3, #32
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b4:	f001 f92c 	bl	8002610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2105      	movs	r1, #5
 80013bc:	2028      	movs	r0, #40	@ 0x28
 80013be:	f000 fdc1 	bl	8001f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c2:	2028      	movs	r0, #40	@ 0x28
 80013c4:	f000 fdd8 	bl	8001f78 <HAL_NVIC_EnableIRQ>

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000800 	.word	0x48000800

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fcc3 	bl	8001d66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f80e 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f7ff ff8a 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 80013e8:	f7ff feaa 	bl	8001140 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80013ec:	f000 fb8a 	bl	8001b04 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013f0:	f004 fcbc 	bl	8005d6c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013f4:	f7ff fb00 	bl	80009f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013f8:	f004 fcdc 	bl	8005db4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <main+0x24>

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	@ 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	2238      	movs	r2, #56	@ 0x38
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f011 fe52 	bl	80130b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001422:	2000      	movs	r0, #0
 8001424:	f001 facc 	bl	80029c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001432:	2340      	movs	r3, #64	@ 0x40
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800143e:	2304      	movs	r3, #4
 8001440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001442:	2355      	movs	r3, #85	@ 0x55
 8001444:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001446:	2302      	movs	r3, #2
 8001448:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0318 	add.w	r3, r7, #24
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fb66 	bl	8002b28 <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001462:	f000 f82b 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2303      	movs	r3, #3
 800146c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fe64 	bl	800314c <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800148a:	f000 f817 	bl	80014bc <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	@ 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014aa:	f000 fc75 	bl	8001d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40001000 	.word	0x40001000

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <microros_allocate+0x3c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <microros_allocate+0x3c>)
 80014e0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <microros_allocate+0x40>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <microros_allocate+0x40>)
 80014f0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fbd4 	bl	8000ca0 <pvPortMallocMicroROS>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20006204 	.word	0x20006204
 8001508:	20006208 	.word	0x20006208

0800150c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fce3 	bl	8000ee8 <getBlockSize>
 8001522:	4603      	mov	r3, r0
 8001524:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <microros_deallocate+0x34>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <microros_deallocate+0x34>)
 800152e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fc7d 	bl	8000e30 <vPortFreeMicroROS>
  }
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20006208 	.word	0x20006208

08001544 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <microros_reallocate+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	461a      	mov	r2, r3
 800155c:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <microros_reallocate+0x64>)
 800155e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <microros_reallocate+0x68>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	4413      	add	r3, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <microros_reallocate+0x68>)
 800156e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d104      	bne.n	8001580 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001576:	68b8      	ldr	r0, [r7, #8]
 8001578:	f7ff fb92 	bl	8000ca0 <pvPortMallocMicroROS>
 800157c:	4603      	mov	r3, r0
 800157e:	e00e      	b.n	800159e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fcb1 	bl	8000ee8 <getBlockSize>
 8001586:	4603      	mov	r3, r0
 8001588:	4a08      	ldr	r2, [pc, #32]	@ (80015ac <microros_reallocate+0x68>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <microros_reallocate+0x68>)
 8001592:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff fcc4 	bl	8000f24 <pvPortReallocMicroROS>
 800159c:	4603      	mov	r3, r0
  }
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20006204 	.word	0x20006204
 80015ac:	20006208 	.word	0x20006208

080015b0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <microros_zero_allocate+0x48>)
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <microros_zero_allocate+0x48>)
 80015ce:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <microros_zero_allocate+0x4c>)
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	461a      	mov	r2, r3
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <microros_zero_allocate+0x4c>)
 80015e2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f7ff fcc9 	bl	8000f7e <pvPortCallocMicroROS>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20006204 	.word	0x20006204
 80015fc:	20006208 	.word	0x20006208

08001600 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001616:	a320      	add	r3, pc, #128	@ (adr r3, 8001698 <UTILS_NanosecondsToTimespec+0x98>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f824 	bl	8000668 <__aeabi_ldivmod>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800162a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800162e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001698 <UTILS_NanosecondsToTimespec+0x98>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f818 	bl	8000668 <__aeabi_ldivmod>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	da20      	bge.n	8001686 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a11      	ldr	r2, [pc, #68]	@ (8001690 <UTILS_NanosecondsToTimespec+0x90>)
 800164a:	fb82 1203 	smull	r1, r2, r2, r3
 800164e:	1712      	asrs	r2, r2, #28
 8001650:	17db      	asrs	r3, r3, #31
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	6979      	ldr	r1, [r7, #20]
 8001660:	17c8      	asrs	r0, r1, #31
 8001662:	460c      	mov	r4, r1
 8001664:	4605      	mov	r5, r0
 8001666:	ebb2 0804 	subs.w	r8, r2, r4
 800166a:	eb63 0905 	sbc.w	r9, r3, r5
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	4906      	ldr	r1, [pc, #24]	@ (8001694 <UTILS_NanosecondsToTimespec+0x94>)
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	609a      	str	r2, [r3, #8]
    }
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001690:	44b82fa1 	.word	0x44b82fa1
 8001694:	3b9aca00 	.word	0x3b9aca00
 8001698:	3b9aca00 	.word	0x3b9aca00
 800169c:	00000000 	.word	0x00000000

080016a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	b08e      	sub	sp, #56	@ 0x38
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80016aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80016ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80016b0:	2300      	movs	r3, #0
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80016c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 ff20 	bl	800750c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80016cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ce:	17da      	asrs	r2, r3, #31
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	61fa      	str	r2, [r7, #28]
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	69b9      	ldr	r1, [r7, #24]
 80016de:	000b      	movs	r3, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80016e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e8:	2200      	movs	r2, #0
 80016ea:	461c      	mov	r4, r3
 80016ec:	4615      	mov	r5, r2
 80016ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016f2:	1911      	adds	r1, r2, r4
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	416b      	adcs	r3, r5
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001702:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	f04f 0400 	mov.w	r4, #0
 800170e:	f04f 0500 	mov.w	r5, #0
 8001712:	015d      	lsls	r5, r3, #5
 8001714:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001718:	0154      	lsls	r4, r2, #5
 800171a:	4622      	mov	r2, r4
 800171c:	462b      	mov	r3, r5
 800171e:	ebb2 0800 	subs.w	r8, r2, r0
 8001722:	eb63 0901 	sbc.w	r9, r3, r1
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001732:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001736:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800173a:	4690      	mov	r8, r2
 800173c:	4699      	mov	r9, r3
 800173e:	eb18 0a00 	adds.w	sl, r8, r0
 8001742:	eb49 0b01 	adc.w	fp, r9, r1
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001752:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001756:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800175a:	ebb2 040a 	subs.w	r4, r2, sl
 800175e:	603c      	str	r4, [r7, #0]
 8001760:	eb63 030b 	sbc.w	r3, r3, fp
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176a:	4623      	mov	r3, r4
 800176c:	181b      	adds	r3, r3, r0
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	462b      	mov	r3, r5
 8001772:	eb41 0303 	adc.w	r3, r1, r3
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	6a3a      	ldr	r2, [r7, #32]
 800177a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800177e:	f7ff ff3f 	bl	8001600 <UTILS_NanosecondsToTimespec>

    return 0;
 8001782:	2300      	movs	r3, #0
 8001784:	4618      	mov	r0, r3
 8001786:	3738      	adds	r7, #56	@ 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_MspInit+0x50>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	4a11      	ldr	r2, [pc, #68]	@ (80017e0 <HAL_MspInit+0x50>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_MspInit+0x50>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_MspInit+0x50>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <HAL_MspInit+0x50>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_MspInit+0x50>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	210f      	movs	r1, #15
 80017ca:	f06f 0001 	mvn.w	r0, #1
 80017ce:	f000 fbb9 	bl	8001f44 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017d2:	f001 f999 	bl	8002b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	@ 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017f4:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <HAL_InitTick+0xc4>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	4a2b      	ldr	r2, [pc, #172]	@ (80018a8 <HAL_InitTick+0xc4>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001800:	4b29      	ldr	r3, [pc, #164]	@ (80018a8 <HAL_InitTick+0xc4>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180c:	f107 020c 	add.w	r2, r7, #12
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fe6e 	bl	80034f8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800181c:	f001 fe40 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8001820:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001824:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <HAL_InitTick+0xc8>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	3b01      	subs	r3, #1
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001830:	4b1f      	ldr	r3, [pc, #124]	@ (80018b0 <HAL_InitTick+0xcc>)
 8001832:	4a20      	ldr	r2, [pc, #128]	@ (80018b4 <HAL_InitTick+0xd0>)
 8001834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <HAL_InitTick+0xcc>)
 8001838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <HAL_InitTick+0xcc>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <HAL_InitTick+0xcc>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <HAL_InitTick+0xcc>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001850:	4817      	ldr	r0, [pc, #92]	@ (80018b0 <HAL_InitTick+0xcc>)
 8001852:	f002 f917 	bl	8003a84 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800185c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11b      	bne.n	800189c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001864:	4812      	ldr	r0, [pc, #72]	@ (80018b0 <HAL_InitTick+0xcc>)
 8001866:	f002 f96f 	bl	8003b48 <HAL_TIM_Base_Start_IT>
 800186a:	4603      	mov	r3, r0
 800186c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001870:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001878:	2036      	movs	r0, #54	@ 0x36
 800187a:	f000 fb7d 	bl	8001f78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d808      	bhi.n	8001896 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	2036      	movs	r0, #54	@ 0x36
 800188a:	f000 fb5b 	bl	8001f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <HAL_InitTick+0xd4>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e002      	b.n	800189c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800189c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3730      	adds	r7, #48	@ 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	431bde83 	.word	0x431bde83
 80018b0:	2000620c 	.word	0x2000620c
 80018b4:	40001000 	.word	0x40001000
 80018b8:	20000008 	.word	0x20000008

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DMA1_Channel1_IRQHandler+0x10>)
 80018fa:	f000 fd2e 	bl	800235a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200062f4 	.word	0x200062f4

08001908 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA1_Channel2_IRQHandler+0x10>)
 800190e:	f000 fd24 	bl	800235a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20006354 	.word	0x20006354

0800191c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001920:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001924:	f001 f828 	bl	8002978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM6_DAC_IRQHandler+0x10>)
 8001932:	f002 f981 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000620c 	.word	0x2000620c

08001940 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <LPUART1_IRQHandler+0x10>)
 8001946:	f002 fd9b 	bl	8004480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20006260 	.word	0x20006260

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_kill>:

int _kill(int pid, int sig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196e:	f011 fc9f 	bl	80132b0 <__errno>
 8001972:	4603      	mov	r3, r0
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_exit>:

void _exit (int status)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001996:	bf00      	nop
 8001998:	e7fd      	b.n	8001996 <_exit+0x12>

0800199a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e00a      	b.n	80019c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ac:	f3af 8000 	nop.w
 80019b0:	4601      	mov	r1, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	60ba      	str	r2, [r7, #8]
 80019b8:	b2ca      	uxtb	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbf0      	blt.n	80019ac <_read+0x12>
  }

  return len;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e009      	b.n	80019fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	60ba      	str	r2, [r7, #8]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf1      	blt.n	80019e6 <_write+0x12>
  }
  return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_close>:

int _close(int file)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a34:	605a      	str	r2, [r3, #4]
  return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_isatty>:

int _isatty(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f011 fc04 	bl	80132b0 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	2000625c 	.word	0x2000625c
 8001adc:	20010d18 	.word	0x20010d18

08001ae0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b0a:	4a22      	ldr	r2, [pc, #136]	@ (8001b94 <MX_LPUART1_UART_Init+0x90>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b14:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b46:	4812      	ldr	r0, [pc, #72]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b48:	f002 fae8 	bl	800411c <HAL_UART_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b52:	f7ff fcb3 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b56:	2100      	movs	r1, #0
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b5a:	f003 fff8 	bl	8005b4e <HAL_UARTEx_SetTxFifoThreshold>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b64:	f7ff fcaa 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b6c:	f004 f82d 	bl	8005bca <HAL_UARTEx_SetRxFifoThreshold>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b76:	f7ff fca1 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_LPUART1_UART_Init+0x8c>)
 8001b7c:	f003 ffae 	bl	8005adc <HAL_UARTEx_DisableFifoMode>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b86:	f7ff fc99 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20006260 	.word	0x20006260
 8001b94:	40008000 	.word	0x40008000

08001b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b09e      	sub	sp, #120	@ 0x78
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2254      	movs	r2, #84	@ 0x54
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f011 fa7d 	bl	80130b8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a4e      	ldr	r2, [pc, #312]	@ (8001cfc <HAL_UART_MspInit+0x164>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	f040 8094 	bne.w	8001cf2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bca:	2320      	movs	r3, #32
 8001bcc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fd06 	bl	80035e8 <HAL_RCCEx_PeriphCLKConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001be2:	f7ff fc6b 	bl	80014bc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001be6:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <HAL_UART_MspInit+0x168>)
 8001be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bea:	4a45      	ldr	r2, [pc, #276]	@ (8001d00 <HAL_UART_MspInit+0x168>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001bf2:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_UART_MspInit+0x168>)
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <HAL_UART_MspInit+0x168>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	4a3f      	ldr	r2, [pc, #252]	@ (8001d00 <HAL_UART_MspInit+0x168>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_UART_MspInit+0x168>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001c16:	230c      	movs	r3, #12
 8001c18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001c26:	230c      	movs	r3, #12
 8001c28:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c34:	f000 fcec 	bl	8002610 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8001c38:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c3a:	4a33      	ldr	r2, [pc, #204]	@ (8001d08 <HAL_UART_MspInit+0x170>)
 8001c3c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001c3e:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c40:	2222      	movs	r2, #34	@ 0x22
 8001c42:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c44:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c50:	4b2c      	ldr	r3, [pc, #176]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c62:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c64:	2220      	movs	r2, #32
 8001c66:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c6a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001c6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001c70:	4824      	ldr	r0, [pc, #144]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c72:	f000 f98f 	bl	8001f94 <HAL_DMA_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001c7c:	f7ff fc1e 	bl	80014bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a20      	ldr	r2, [pc, #128]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c88:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_UART_MspInit+0x16c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001c90:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <HAL_UART_MspInit+0x178>)
 8001c92:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001c96:	2223      	movs	r2, #35	@ 0x23
 8001c98:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001ca8:	2280      	movs	r2, #128	@ 0x80
 8001caa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cac:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cc0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001cc6:	4811      	ldr	r0, [pc, #68]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cc8:	f000 f964 	bl	8001f94 <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001cd2:	f7ff fbf3 	bl	80014bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cda:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <HAL_UART_MspInit+0x174>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	205b      	movs	r0, #91	@ 0x5b
 8001ce8:	f000 f92c 	bl	8001f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001cec:	205b      	movs	r0, #91	@ 0x5b
 8001cee:	f000 f943 	bl	8001f78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3778      	adds	r7, #120	@ 0x78
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40008000 	.word	0x40008000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	200062f4 	.word	0x200062f4
 8001d08:	40020008 	.word	0x40020008
 8001d0c:	20006354 	.word	0x20006354
 8001d10:	4002001c 	.word	0x4002001c

08001d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d14:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d18:	f7ff fee2 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	@ (8001d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	@ (8001d58 <LoopForever+0xe>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	@ (8001d60 <LoopForever+0x16>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f011 fabb 	bl	80132bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d46:	f7ff fb47 	bl	80013d8 <main>

08001d4a <LoopForever>:

LoopForever:
    b LoopForever
 8001d4a:	e7fe      	b.n	8001d4a <LoopForever>
  ldr   r0, =_estack
 8001d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000b68 	.word	0x20000b68
  ldr r2, =_sidata
 8001d58:	080150a8 	.word	0x080150a8
  ldr r2, =_sbss
 8001d5c:	20000b68 	.word	0x20000b68
  ldr r4, =_ebss
 8001d60:	20010d18 	.word	0x20010d18

08001d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_2_IRQHandler>

08001d66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f8dc 	bl	8001f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d76:	200f      	movs	r0, #15
 8001d78:	f7ff fd34 	bl	80017e4 <HAL_InitTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	71fb      	strb	r3, [r7, #7]
 8001d86:	e001      	b.n	8001d8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d88:	f7ff fd02 	bl	8001790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_IncTick+0x1c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_IncTick+0x20>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_IncTick+0x1c>)
 8001da8:	6013      	str	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	200063b4 	.word	0x200063b4
 8001db8:	2000000c 	.word	0x2000000c

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200063b4 	.word	0x200063b4

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ff4c 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f52:	f7ff ff63 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	6978      	ldr	r0, [r7, #20]
 8001f5e:	f7ff ffb3 	bl	8001ec8 <NVIC_EncodePriority>
 8001f62:	4602      	mov	r2, r0
 8001f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff82 	bl	8001e74 <__NVIC_SetPriority>
}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff56 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e08d      	b.n	80020c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_DMA_Init+0x138>)
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d80f      	bhi.n	8001fd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b45      	ldr	r3, [pc, #276]	@ (80020d0 <HAL_DMA_Init+0x13c>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a45      	ldr	r2, [pc, #276]	@ (80020d4 <HAL_DMA_Init+0x140>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	009a      	lsls	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a42      	ldr	r2, [pc, #264]	@ (80020d8 <HAL_DMA_Init+0x144>)
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fd0:	e00e      	b.n	8001ff0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b40      	ldr	r3, [pc, #256]	@ (80020dc <HAL_DMA_Init+0x148>)
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80020d4 <HAL_DMA_Init+0x140>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	009a      	lsls	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a3c      	ldr	r2, [pc, #240]	@ (80020e0 <HAL_DMA_Init+0x14c>)
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa82 	bl	800254c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002050:	d102      	bne.n	8002058 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800206c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_DMA_Init+0x104>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d80c      	bhi.n	8002098 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 faa2 	bl	80025c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	e008      	b.n	80020aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40020407 	.word	0x40020407
 80020d0:	bffdfff8 	.word	0xbffdfff8
 80020d4:	cccccccd 	.word	0xcccccccd
 80020d8:	40020000 	.word	0x40020000
 80020dc:	bffdfbf8 	.word	0xbffdfbf8
 80020e0:	40020400 	.word	0x40020400

080020e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Start_IT+0x20>
 8002100:	2302      	movs	r3, #2
 8002102:	e066      	b.n	80021d2 <HAL_DMA_Start_IT+0xee>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d155      	bne.n	80021c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f9c7 	bl	80024d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 020e 	orr.w	r2, r2, #14
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00f      	b.n	800217c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 020a 	orr.w	r2, r2, #10
 800217a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002198:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e005      	b.n	80021d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d005      	beq.n	80021fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2204      	movs	r2, #4
 80021f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e037      	b.n	800226e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 020e 	bic.w	r2, r2, #14
 800220c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800224a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002262:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800226c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d00d      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2204      	movs	r2, #4
 80022a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e047      	b.n	8002350 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020e 	bic.w	r2, r2, #14
 80022ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800230c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800232e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
    }
  }
  return status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d026      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x7a>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d021      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0204 	bic.w	r2, r2, #4
 80023ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	f003 021f 	and.w	r2, r3, #31
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	2104      	movs	r1, #4
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d071      	beq.n	80024ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023d2:	e06c      	b.n	80024ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2202      	movs	r2, #2
 80023de:	409a      	lsls	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02e      	beq.n	8002446 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d029      	beq.n	8002446 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 020a 	bic.w	r2, r2, #10
 800240e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	2102      	movs	r1, #2
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d038      	beq.n	80024ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002444:	e033      	b.n	80024ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2208      	movs	r2, #8
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d02a      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d025      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020e 	bic.w	r2, r2, #14
 8002472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
}
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f003 021f 	and.w	r2, r3, #31
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d108      	bne.n	8002530 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800252e:	e007      	b.n	8002540 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d802      	bhi.n	8002566 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002560:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e001      	b.n	800256a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002568:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3b08      	subs	r3, #8
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002596:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2201      	movs	r2, #1
 80025a0:	409a      	lsls	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40020407 	.word	0x40020407
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020820 	.word	0x40020820
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	40020880 	.word	0x40020880

080025c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	461a      	mov	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a08      	ldr	r2, [pc, #32]	@ (800260c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025ea:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	1000823f 	.word	0x1000823f
 800260c:	40020940 	.word	0x40020940

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800261e:	e15a      	b.n	80028d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 814c 	beq.w	80028d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d005      	beq.n	8002650 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800264c:	2b02      	cmp	r3, #2
 800264e:	d130      	bne.n	80026b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002686:	2201      	movs	r2, #1
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0201 	and.w	r2, r3, #1
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d017      	beq.n	80026ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d123      	bne.n	8002742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80a6 	beq.w	80028d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002784:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <HAL_GPIO_Init+0x2e4>)
 8002786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002788:	4a5a      	ldr	r2, [pc, #360]	@ (80028f4 <HAL_GPIO_Init+0x2e4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002790:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_GPIO_Init+0x2e4>)
 8002792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279c:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	220f      	movs	r2, #15
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027c6:	d01f      	beq.n	8002808 <HAL_GPIO_Init+0x1f8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a4c      	ldr	r2, [pc, #304]	@ (80028fc <HAL_GPIO_Init+0x2ec>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d019      	beq.n	8002804 <HAL_GPIO_Init+0x1f4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002900 <HAL_GPIO_Init+0x2f0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_GPIO_Init+0x1f0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a4a      	ldr	r2, [pc, #296]	@ (8002904 <HAL_GPIO_Init+0x2f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00d      	beq.n	80027fc <HAL_GPIO_Init+0x1ec>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a49      	ldr	r2, [pc, #292]	@ (8002908 <HAL_GPIO_Init+0x2f8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0x1e8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a48      	ldr	r2, [pc, #288]	@ (800290c <HAL_GPIO_Init+0x2fc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_GPIO_Init+0x1e4>
 80027f0:	2305      	movs	r3, #5
 80027f2:	e00a      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 80027f4:	2306      	movs	r3, #6
 80027f6:	e008      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 80027f8:	2304      	movs	r3, #4
 80027fa:	e006      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 80027fc:	2303      	movs	r3, #3
 80027fe:	e004      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 8002800:	2302      	movs	r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_GPIO_Init+0x1fa>
 8002808:	2300      	movs	r3, #0
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	f002 0203 	and.w	r2, r2, #3
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	4093      	lsls	r3, r2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281a:	4937      	ldr	r1, [pc, #220]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002828:	4b39      	ldr	r3, [pc, #228]	@ (8002910 <HAL_GPIO_Init+0x300>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800284c:	4a30      	ldr	r2, [pc, #192]	@ (8002910 <HAL_GPIO_Init+0x300>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <HAL_GPIO_Init+0x300>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002876:	4a26      	ldr	r2, [pc, #152]	@ (8002910 <HAL_GPIO_Init+0x300>)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800287c:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <HAL_GPIO_Init+0x300>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002910 <HAL_GPIO_Init+0x300>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <HAL_GPIO_Init+0x300>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028ca:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <HAL_GPIO_Init+0x300>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f47f ae9d 	bne.w	8002620 <HAL_GPIO_Init+0x10>
  }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010000 	.word	0x40010000
 80028fc:	48000400 	.word	0x48000400
 8002900:	48000800 	.word	0x48000800
 8002904:	48000c00 	.word	0x48000c00
 8002908:	48001000 	.word	0x48001000
 800290c:	48001400 	.word	0x48001400
 8002910:	40010400 	.word	0x40010400

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002930:	e002      	b.n	8002938 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	43d9      	mvns	r1, r3
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	400b      	ands	r3, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298e:	4a05      	ldr	r2, [pc, #20]	@ (80029a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f806 	bl	80029a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40010400 	.word	0x40010400

080029a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d141      	bne.n	8002a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ce:	4b4b      	ldr	r3, [pc, #300]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d131      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029dc:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e2:	4a46      	ldr	r2, [pc, #280]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ec:	4b43      	ldr	r3, [pc, #268]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029f4:	4a41      	ldr	r2, [pc, #260]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029fc:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2232      	movs	r2, #50	@ 0x32
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	4a3f      	ldr	r2, [pc, #252]	@ (8002b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a12:	e002      	b.n	8002a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1a:	4b38      	ldr	r3, [pc, #224]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a26:	d102      	bne.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f2      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a2e:	4b33      	ldr	r3, [pc, #204]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d158      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e057      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a40:	4b2e      	ldr	r3, [pc, #184]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a46:	4a2d      	ldr	r2, [pc, #180]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002a50:	e04d      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a58:	d141      	bne.n	8002ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a5a:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a66:	d131      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a68:	4b24      	ldr	r3, [pc, #144]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6e:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a78:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a80:	4a1e      	ldr	r2, [pc, #120]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2232      	movs	r2, #50	@ 0x32
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	4a1c      	ldr	r2, [pc, #112]	@ (8002b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a9e:	e002      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab2:	d102      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f2      	bne.n	8002aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	d112      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e011      	b.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002adc:	e007      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ae6:	4a05      	ldr	r2, [pc, #20]	@ (8002afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40007000 	.word	0x40007000
 8002b00:	20000004 	.word	0x20000004
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b16:	6093      	str	r3, [r2, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40007000 	.word	0x40007000

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e2fe      	b.n	8003138 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b46:	4b97      	ldr	r3, [pc, #604]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b50:	4b94      	ldr	r3, [pc, #592]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x3e>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e2d9      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x74>
 8002b8e:	4b85      	ldr	r3, [pc, #532]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a84      	ldr	r2, [pc, #528]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7e      	ldr	r2, [pc, #504]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002bc0:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a77      	ldr	r2, [pc, #476]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b75      	ldr	r3, [pc, #468]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a74      	ldr	r2, [pc, #464]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff f8ec 	bl	8001dbc <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff f8e8 	bl	8001dbc <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e29e      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f8d8 	bl	8001dbc <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff f8d4 	bl	8001dbc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e28a      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	4b60      	ldr	r3, [pc, #384]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d075      	beq.n	8002d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3e:	4b59      	ldr	r3, [pc, #356]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c48:	4b56      	ldr	r3, [pc, #344]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_OscConfig+0x136>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_OscConfig+0x13c>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d11f      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x154>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e25d      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	4946      	ldr	r1, [pc, #280]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c90:	4b45      	ldr	r3, [pc, #276]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fda5 	bl	80017e4 <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d043      	beq.n	8002d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e249      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7ff f880 	bl	8001dbc <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7ff f87c 	bl	8001dbc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e232      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd2:	4b34      	ldr	r3, [pc, #208]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	061b      	lsls	r3, r3, #24
 8002cec:	492d      	ldr	r1, [pc, #180]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 8002cf2:	e01a      	b.n	8002d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7ff f85c 	bl	8001dbc <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7ff f858 	bl	8001dbc <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e20e      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d1a:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1e0>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d041      	beq.n	8002dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d44:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f835 	bl	8001dbc <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7ff f831 	bl	8001dbc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1e7      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d68:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0ef      	beq.n	8002d56 <HAL_RCC_OscConfig+0x22e>
 8002d76:	e020      	b.n	8002dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d7e:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_RCC_OscConfig+0x27c>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7ff f818 	bl	8001dbc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8e:	e00d      	b.n	8002dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7ff f814 	bl	8001dbc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d906      	bls.n	8002dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1ca      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dac:	4b8c      	ldr	r3, [pc, #560]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1ea      	bne.n	8002d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80a6 	beq.w	8002f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dcc:	4b84      	ldr	r3, [pc, #528]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_OscConfig+0x2b4>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x2b6>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dee:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dfe:	4b79      	ldr	r3, [pc, #484]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0a:	4b76      	ldr	r3, [pc, #472]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7fe ffd1 	bl	8001dbc <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7fe ffcd 	bl	8001dbc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e183      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e30:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <HAL_RCC_OscConfig+0x4bc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d108      	bne.n	8002e56 <HAL_RCC_OscConfig+0x32e>
 8002e44:	4b66      	ldr	r3, [pc, #408]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	4a65      	ldr	r2, [pc, #404]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e54:	e024      	b.n	8002ea0 <HAL_RCC_OscConfig+0x378>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d110      	bne.n	8002e80 <HAL_RCC_OscConfig+0x358>
 8002e5e:	4b60      	ldr	r3, [pc, #384]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	4a5e      	ldr	r2, [pc, #376]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7e:	e00f      	b.n	8002ea0 <HAL_RCC_OscConfig+0x378>
 8002e80:	4b57      	ldr	r3, [pc, #348]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	4a56      	ldr	r2, [pc, #344]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e90:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe ff88 	bl	8001dbc <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe ff84 	bl	8001dbc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e138      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec6:	4b46      	ldr	r3, [pc, #280]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ed      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x388>
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe ff71 	bl	8001dbc <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe ff6d 	bl	8001dbc <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e121      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ed      	bne.n	8002ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b35      	ldr	r3, [pc, #212]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	4a34      	ldr	r2, [pc, #208]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d03c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f28:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe ff40 	bl	8001dbc <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f40:	f7fe ff3c 	bl	8001dbc <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e0f2      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ef      	beq.n	8002f40 <HAL_RCC_OscConfig+0x418>
 8002f60:	e01b      	b.n	8002f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f62:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f68:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f023 0301 	bic.w	r3, r3, #1
 8002f6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe ff23 	bl	8001dbc <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7a:	f7fe ff1f 	bl	8001dbc <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0d5      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1ef      	bne.n	8002f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80c9 	beq.w	8003136 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	f000 8083 	beq.w	80030b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d15e      	bne.n	8003078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fef9 	bl	8001dbc <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	e00c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe fef5 	bl	8001dbc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d905      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0ab      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe8:	4b55      	ldr	r3, [pc, #340]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ec      	bne.n	8002fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff4:	4b52      	ldr	r3, [pc, #328]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	4b52      	ldr	r3, [pc, #328]	@ (8003144 <HAL_RCC_OscConfig+0x61c>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a11      	ldr	r1, [r2, #32]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003004:	3a01      	subs	r2, #1
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800300e:	0212      	lsls	r2, r2, #8
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003016:	0852      	lsrs	r2, r2, #1
 8003018:	3a01      	subs	r2, #1
 800301a:	0552      	lsls	r2, r2, #21
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0652      	lsls	r2, r2, #25
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800302e:	06d2      	lsls	r2, r2, #27
 8003030:	430a      	orrs	r2, r1
 8003032:	4943      	ldr	r1, [pc, #268]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8003034:	4313      	orrs	r3, r2
 8003036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003038:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a40      	ldr	r2, [pc, #256]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003044:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a3d      	ldr	r2, [pc, #244]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800304e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe feb4 	bl	8001dbc <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe feb0 	bl	8001dbc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e066      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	4b35      	ldr	r3, [pc, #212]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x530>
 8003076:	e05e      	b.n	8003136 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a30      	ldr	r2, [pc, #192]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 800307e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe fe9a 	bl	8001dbc <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fe96 	bl	8001dbc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04c      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309e:	4b28      	ldr	r3, [pc, #160]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030aa:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4924      	ldr	r1, [pc, #144]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_RCC_OscConfig+0x620>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60cb      	str	r3, [r1, #12]
 80030b6:	e03e      	b.n	8003136 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e039      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_OscConfig+0x618>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d12c      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	3b01      	subs	r3, #1
 80030e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d123      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d11b      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d113      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d109      	bne.n	8003132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	019f800c 	.word	0x019f800c
 8003148:	feeefffc 	.word	0xfeeefffc

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e11e      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b91      	ldr	r3, [pc, #580]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b8e      	ldr	r3, [pc, #568]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	498c      	ldr	r1, [pc, #560]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b8a      	ldr	r3, [pc, #552]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e106      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d073      	beq.n	8003288 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d129      	bne.n	80031fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a8:	4b81      	ldr	r3, [pc, #516]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0f4      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031b8:	f000 f9d0 	bl	800355c <RCC_GetSysClockFreqFromPLLSource>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4a7c      	ldr	r2, [pc, #496]	@ (80033b4 <HAL_RCC_ClockConfig+0x268>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d93f      	bls.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031c6:	4b7a      	ldr	r3, [pc, #488]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d033      	beq.n	8003246 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d12f      	bne.n	8003246 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031e6:	4b72      	ldr	r3, [pc, #456]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ee:	4a70      	ldr	r2, [pc, #448]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80031f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e024      	b.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d107      	bne.n	8003214 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003204:	4b6a      	ldr	r3, [pc, #424]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0c6      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003214:	4b66      	ldr	r3, [pc, #408]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0be      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003224:	f000 f8ce 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4a61      	ldr	r2, [pc, #388]	@ (80033b4 <HAL_RCC_ClockConfig+0x268>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d909      	bls.n	8003246 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003232:	4b5f      	ldr	r3, [pc, #380]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800323a:	4a5d      	ldr	r2, [pc, #372]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 800323c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003240:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003246:	4b5a      	ldr	r3, [pc, #360]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f023 0203 	bic.w	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4957      	ldr	r1, [pc, #348]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003254:	4313      	orrs	r3, r2
 8003256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fe fdb0 	bl	8001dbc <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	e00a      	b.n	8003276 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003260:	f7fe fdac 	bl	8001dbc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e095      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	4b4e      	ldr	r3, [pc, #312]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 020c 	and.w	r2, r3, #12
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	429a      	cmp	r2, r3
 8003286:	d1eb      	bne.n	8003260 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b43      	ldr	r3, [pc, #268]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a42      	ldr	r2, [pc, #264]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032b8:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032c0:	4a3b      	ldr	r2, [pc, #236]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4936      	ldr	r1, [pc, #216]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
 80032da:	e008      	b.n	80032ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b80      	cmp	r3, #128	@ 0x80
 80032e0:	d105      	bne.n	80032ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032e2:	4b33      	ldr	r3, [pc, #204]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4a32      	ldr	r2, [pc, #200]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 80032e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ee:	4b2f      	ldr	r3, [pc, #188]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d21d      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fc:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 020f 	bic.w	r2, r3, #15
 8003304:	4929      	ldr	r1, [pc, #164]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800330c:	f7fe fd56 	bl	8001dbc <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fd52 	bl	8001dbc <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e03b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d1ed      	bne.n	8003314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4917      	ldr	r1, [pc, #92]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003362:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	490f      	ldr	r1, [pc, #60]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003376:	f000 f825 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <HAL_RCC_ClockConfig+0x264>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <HAL_RCC_ClockConfig+0x26c>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <HAL_RCC_ClockConfig+0x270>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RCC_ClockConfig+0x274>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fa22 	bl	80017e4 <HAL_InitTick>
 80033a0:	4603      	mov	r3, r0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	04c4b400 	.word	0x04c4b400
 80033b8:	080140fc 	.word	0x080140fc
 80033bc:	20000004 	.word	0x20000004
 80033c0:	20000008 	.word	0x20000008

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033ca:	4b2c      	ldr	r3, [pc, #176]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e047      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033dc:	4b27      	ldr	r3, [pc, #156]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d102      	bne.n	80033ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e8:	4b26      	ldr	r3, [pc, #152]	@ (8003484 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e03e      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033ee:	4b23      	ldr	r3, [pc, #140]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d136      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033fa:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003404:	4b1d      	ldr	r3, [pc, #116]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3301      	adds	r3, #1
 8003410:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003418:	4a1a      	ldr	r2, [pc, #104]	@ (8003484 <HAL_RCC_GetSysClockFreq+0xc0>)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	4a16      	ldr	r2, [pc, #88]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003422:	68d2      	ldr	r2, [r2, #12]
 8003424:	0a12      	lsrs	r2, r2, #8
 8003426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	617b      	str	r3, [r7, #20]
      break;
 8003430:	e00c      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003432:	4a13      	ldr	r2, [pc, #76]	@ (8003480 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	4a10      	ldr	r2, [pc, #64]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	0a12      	lsrs	r2, r2, #8
 8003440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
      break;
 800344a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	0e5b      	lsrs	r3, r3, #25
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e001      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800346c:	693b      	ldr	r3, [r7, #16]
}
 800346e:	4618      	mov	r0, r3
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	00f42400 	.word	0x00f42400
 8003484:	016e3600 	.word	0x016e3600

08003488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4904      	ldr	r1, [pc, #16]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	0801410c 	.word	0x0801410c

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d0:	f7ff ffda 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0adb      	lsrs	r3, r3, #11
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4904      	ldr	r1, [pc, #16]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	0801410c 	.word	0x0801410c

080034f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	220f      	movs	r2, #15
 8003506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003508:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003514:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800352c:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <HAL_RCC_GetClockConfig+0x5c>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <HAL_RCC_GetClockConfig+0x60>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	40022000 	.word	0x40022000

0800355c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003562:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d10c      	bne.n	800359a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003580:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800358a:	68d2      	ldr	r2, [r2, #12]
 800358c:	0a12      	lsrs	r2, r2, #8
 800358e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	617b      	str	r3, [r7, #20]
    break;
 8003598:	e00c      	b.n	80035b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800359a:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	4a0e      	ldr	r2, [pc, #56]	@ (80035dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035a4:	68d2      	ldr	r2, [r2, #12]
 80035a6:	0a12      	lsrs	r2, r2, #8
 80035a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
    break;
 80035b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035b4:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0e5b      	lsrs	r3, r3, #25
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	3301      	adds	r3, #1
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035ce:	687b      	ldr	r3, [r7, #4]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40021000 	.word	0x40021000
 80035e0:	016e3600 	.word	0x016e3600
 80035e4:	00f42400 	.word	0x00f42400

080035e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8098 	beq.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360a:	4b43      	ldr	r3, [pc, #268]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10d      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003616:	4b40      	ldr	r3, [pc, #256]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a3f      	ldr	r2, [pc, #252]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
 8003622:	4b3d      	ldr	r3, [pc, #244]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362e:	2301      	movs	r3, #1
 8003630:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003632:	4b3a      	ldr	r3, [pc, #232]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a39      	ldr	r2, [pc, #228]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800363e:	f7fe fbbd 	bl	8001dbc <HAL_GetTick>
 8003642:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003644:	e009      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fe fbb9 	bl	8001dbc <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d902      	bls.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	74fb      	strb	r3, [r7, #19]
        break;
 8003658:	e005      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800365a:	4b30      	ldr	r3, [pc, #192]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ef      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d159      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800366c:	4b2a      	ldr	r3, [pc, #168]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003676:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	429a      	cmp	r2, r3
 8003686:	d019      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003688:	4b23      	ldr	r3, [pc, #140]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003692:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b4:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe fb79 	bl	8001dbc <HAL_GetTick>
 80036ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036cc:	e00b      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7fe fb75 	bl	8001dbc <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d902      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	74fb      	strb	r3, [r7, #19]
            break;
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ec      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fa:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	4903      	ldr	r1, [pc, #12]	@ (8003718 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003710:	e008      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	74bb      	strb	r3, [r7, #18]
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003718:	40021000 	.word	0x40021000
 800371c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003724:	7c7b      	ldrb	r3, [r7, #17]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4ba7      	ldr	r3, [pc, #668]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372e:	4aa6      	ldr	r2, [pc, #664]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003742:	4ba1      	ldr	r3, [pc, #644]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f023 0203 	bic.w	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	499d      	ldr	r1, [pc, #628]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003764:	4b98      	ldr	r3, [pc, #608]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	f023 020c 	bic.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4995      	ldr	r1, [pc, #596]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003786:	4b90      	ldr	r3, [pc, #576]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	498c      	ldr	r1, [pc, #560]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037a8:	4b87      	ldr	r3, [pc, #540]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	4984      	ldr	r1, [pc, #528]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ca:	4b7f      	ldr	r3, [pc, #508]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	497b      	ldr	r1, [pc, #492]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ec:	4b76      	ldr	r3, [pc, #472]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	4973      	ldr	r1, [pc, #460]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800380e:	4b6e      	ldr	r3, [pc, #440]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003814:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	496a      	ldr	r1, [pc, #424]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003830:	4b65      	ldr	r3, [pc, #404]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4962      	ldr	r1, [pc, #392]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003852:	4b5d      	ldr	r3, [pc, #372]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003858:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	4959      	ldr	r1, [pc, #356]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003874:	4b54      	ldr	r3, [pc, #336]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	4951      	ldr	r1, [pc, #324]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003896:	4b4c      	ldr	r3, [pc, #304]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	4948      	ldr	r1, [pc, #288]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b8:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c6:	4940      	ldr	r1, [pc, #256]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a3a      	ldr	r2, [pc, #232]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f0:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fe:	4932      	ldr	r1, [pc, #200]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003910:	4b2d      	ldr	r3, [pc, #180]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	4924      	ldr	r1, [pc, #144]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003948:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a1e      	ldr	r2, [pc, #120]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003952:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003960:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396e:	4916      	ldr	r1, [pc, #88]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800397e:	d105      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003980:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a10      	ldr	r2, [pc, #64]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800398a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d019      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003998:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	4908      	ldr	r1, [pc, #32]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039b6:	d109      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a02      	ldr	r2, [pc, #8]	@ (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e002      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039d8:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	4926      	ldr	r1, [pc, #152]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039f8:	4b21      	ldr	r3, [pc, #132]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a20      	ldr	r2, [pc, #128]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1e:	4918      	ldr	r1, [pc, #96]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d015      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a48:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a56:	490a      	ldr	r1, [pc, #40]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a66:	d105      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a68:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3718      	adds	r7, #24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e049      	b.n	8003b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f841 	bl	8003b32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f000 fa30 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e054      	b.n	8003c0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	@ (8003c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	@ (8003c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	@ (8003c28 <HAL_TIM_Base_Start_IT+0xe0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c2c <HAL_TIM_Base_Start_IT+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIM_Base_Start_IT+0x80>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c30 <HAL_TIM_Base_Start_IT+0xe8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d115      	bne.n	8003bf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	4b19      	ldr	r3, [pc, #100]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xec>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d015      	beq.n	8003c06 <HAL_TIM_Base_Start_IT+0xbe>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be0:	d011      	beq.n	8003c06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	e008      	b.n	8003c06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e000      	b.n	8003c08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40015000 	.word	0x40015000
 8003c34:	00010007 	.word	0x00010007

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d020      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0202 	mvn.w	r2, #2
 8003c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f931 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f923 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f934 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d020      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f90b 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8fd 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f90e 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0208 	mvn.w	r2, #8
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8e5 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8d7 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8e8 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d020      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0210 	mvn.w	r2, #16
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2208      	movs	r2, #8
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f8bf 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8b1 	bl	8003ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f8c2 	bl	8003efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0201 	mvn.w	r2, #1
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fb7a 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f969 	bl	80040a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00c      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f961 	bl	80040b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f87c 	bl	8003f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0220 	mvn.w	r2, #32
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f929 	bl	8004090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00c      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f935 	bl	80040cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f92d 	bl	80040e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f925 	bl	80040f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f91d 	bl	8004108 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4c      	ldr	r2, [pc, #304]	@ (800406c <TIM_Base_SetConfig+0x144>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d017      	beq.n	8003f70 <TIM_Base_SetConfig+0x48>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f46:	d013      	beq.n	8003f70 <TIM_Base_SetConfig+0x48>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a49      	ldr	r2, [pc, #292]	@ (8004070 <TIM_Base_SetConfig+0x148>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00f      	beq.n	8003f70 <TIM_Base_SetConfig+0x48>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a48      	ldr	r2, [pc, #288]	@ (8004074 <TIM_Base_SetConfig+0x14c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <TIM_Base_SetConfig+0x48>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a47      	ldr	r2, [pc, #284]	@ (8004078 <TIM_Base_SetConfig+0x150>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d007      	beq.n	8003f70 <TIM_Base_SetConfig+0x48>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a46      	ldr	r2, [pc, #280]	@ (800407c <TIM_Base_SetConfig+0x154>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_Base_SetConfig+0x48>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a45      	ldr	r2, [pc, #276]	@ (8004080 <TIM_Base_SetConfig+0x158>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d108      	bne.n	8003f82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a39      	ldr	r2, [pc, #228]	@ (800406c <TIM_Base_SetConfig+0x144>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d023      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f90:	d01f      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a36      	ldr	r2, [pc, #216]	@ (8004070 <TIM_Base_SetConfig+0x148>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a35      	ldr	r2, [pc, #212]	@ (8004074 <TIM_Base_SetConfig+0x14c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d017      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a34      	ldr	r2, [pc, #208]	@ (8004078 <TIM_Base_SetConfig+0x150>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a33      	ldr	r2, [pc, #204]	@ (800407c <TIM_Base_SetConfig+0x154>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <TIM_Base_SetConfig+0x15c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a32      	ldr	r2, [pc, #200]	@ (8004088 <TIM_Base_SetConfig+0x160>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a31      	ldr	r2, [pc, #196]	@ (800408c <TIM_Base_SetConfig+0x164>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_Base_SetConfig+0xaa>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8004080 <TIM_Base_SetConfig+0x158>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a18      	ldr	r2, [pc, #96]	@ (800406c <TIM_Base_SetConfig+0x144>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <TIM_Base_SetConfig+0x110>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <TIM_Base_SetConfig+0x154>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00f      	beq.n	8004038 <TIM_Base_SetConfig+0x110>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <TIM_Base_SetConfig+0x15c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_Base_SetConfig+0x110>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a19      	ldr	r2, [pc, #100]	@ (8004088 <TIM_Base_SetConfig+0x160>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_Base_SetConfig+0x110>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <TIM_Base_SetConfig+0x164>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x110>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a13      	ldr	r2, [pc, #76]	@ (8004080 <TIM_Base_SetConfig+0x158>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b01      	cmp	r3, #1
 8004050:	d105      	bne.n	800405e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f023 0201 	bic.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	611a      	str	r2, [r3, #16]
  }
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40012c00 	.word	0x40012c00
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40015000 	.word	0x40015000
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e042      	b.n	80041b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd fd29 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2224      	movs	r2, #36	@ 0x24
 800414a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f001 f806 	bl	8005178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fd07 	bl	8004b80 <UART_SetConfig>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e01b      	b.n	80041b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800418a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800419a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f001 f885 	bl	80052bc <UART_CheckIdleState>
 80041b2:	4603      	mov	r3, r0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	@ 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d167      	bne.n	80042a4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_UART_Transmit_DMA+0x24>
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e060      	b.n	80042a6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2221      	movs	r2, #33	@ 0x21
 8004206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d028      	beq.n	8004264 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004216:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <HAL_UART_Transmit_DMA+0xf4>)
 8004218:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800421e:	4a25      	ldr	r2, [pc, #148]	@ (80042b4 <HAL_UART_Transmit_DMA+0xf8>)
 8004220:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004226:	4a24      	ldr	r2, [pc, #144]	@ (80042b8 <HAL_UART_Transmit_DMA+0xfc>)
 8004228:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800422e:	2200      	movs	r2, #0
 8004230:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423a:	4619      	mov	r1, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3328      	adds	r3, #40	@ 0x28
 8004242:	461a      	mov	r2, r3
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	f7fd ff4d 	bl	80020e4 <HAL_DMA_Start_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2210      	movs	r2, #16
 8004254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e020      	b.n	80042a6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2240      	movs	r2, #64	@ 0x40
 800426a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3308      	adds	r3, #8
 8004272:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	613b      	str	r3, [r7, #16]
   return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428c:	623a      	str	r2, [r7, #32]
 800428e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	61bb      	str	r3, [r7, #24]
   return(result);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	@ 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	08005787 	.word	0x08005787
 80042b4:	08005821 	.word	0x08005821
 80042b8:	080059a7 	.word	0x080059a7

080042bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	@ 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d137      	bne.n	8004344 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_UART_Receive_DMA+0x24>
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e030      	b.n	8004346 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a18      	ldr	r2, [pc, #96]	@ (8004350 <HAL_UART_Receive_DMA+0x94>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d01f      	beq.n	8004334 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d018      	beq.n	8004334 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	613b      	str	r3, [r7, #16]
   return(result);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	623b      	str	r3, [r7, #32]
 8004322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	69f9      	ldr	r1, [r7, #28]
 8004326:	6a3a      	ldr	r2, [r7, #32]
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	61bb      	str	r3, [r7, #24]
   return(result);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	461a      	mov	r2, r3
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f001 f8d6 	bl	80054ec <UART_Start_Receive_DMA>
 8004340:	4603      	mov	r3, r0
 8004342:	e000      	b.n	8004346 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3728      	adds	r7, #40	@ 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40008000 	.word	0x40008000

08004354 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b090      	sub	sp, #64	@ 0x40
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800436a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d139      	bne.n	80043ee <HAL_UART_DMAStop+0x9a>
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	2b21      	cmp	r3, #33	@ 0x21
 800437e:	d136      	bne.n	80043ee <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d015      	beq.n	80043e8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd ff0a 	bl	80021da <HAL_DMA_Abort>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f871 	bl	80024b8 <HAL_DMA_GetError>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d105      	bne.n	80043e8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2210      	movs	r2, #16
 80043e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e047      	b.n	8004478 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f001 f925 	bl	8005638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b40      	cmp	r3, #64	@ 0x40
 80043fa:	d13c      	bne.n	8004476 <HAL_UART_DMAStop+0x122>
 80043fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fe:	2b22      	cmp	r3, #34	@ 0x22
 8004400:	d139      	bne.n	8004476 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	60bb      	str	r3, [r7, #8]
   return(result);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004418:	633b      	str	r3, [r7, #48]	@ 0x30
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3308      	adds	r3, #8
 8004420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004422:	61ba      	str	r2, [r7, #24]
 8004424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6979      	ldr	r1, [r7, #20]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	613b      	str	r3, [r7, #16]
   return(result);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd fec7 	bl	80021da <HAL_DMA_Abort>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe f82d 	bl	80024b8 <HAL_DMA_GetError>
 800445e:	4603      	mov	r3, r0
 8004460:	2b20      	cmp	r3, #32
 8004462:	d105      	bne.n	8004470 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2210      	movs	r2, #16
 8004468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e003      	b.n	8004478 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f001 f922 	bl	80056ba <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3740      	adds	r7, #64	@ 0x40
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b0ba      	sub	sp, #232	@ 0xe8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044ae:	4013      	ands	r3, r2
 80044b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11b      	bne.n	80044f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8300 	beq.w	8004aea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
      }
      return;
 80044f2:	e2fa      	b.n	8004aea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8123 	beq.w	8004744 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80044fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004502:	4b8d      	ldr	r3, [pc, #564]	@ (8004738 <HAL_UART_IRQHandler+0x2b8>)
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800450a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800450e:	4b8b      	ldr	r3, [pc, #556]	@ (800473c <HAL_UART_IRQHandler+0x2bc>)
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8116 	beq.w	8004744 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d011      	beq.n	8004548 <HAL_UART_IRQHandler+0xc8>
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d011      	beq.n	8004578 <HAL_UART_IRQHandler+0xf8>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2202      	movs	r2, #2
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <HAL_UART_IRQHandler+0x128>
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2204      	movs	r2, #4
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459e:	f043 0202 	orr.w	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d017      	beq.n	80045e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004738 <HAL_UART_IRQHandler+0x2b8>)
 80045c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <HAL_UART_IRQHandler+0x196>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8266 	beq.w	8004aee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800463a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800463e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466a:	2b40      	cmp	r3, #64	@ 0x40
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800466e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004672:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d054      	beq.n	8004724 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 f81d 	bl	80056ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d146      	bne.n	800471c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1d9      	bne.n	800468e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d017      	beq.n	8004714 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ea:	4a15      	ldr	r2, [pc, #84]	@ (8004740 <HAL_UART_IRQHandler+0x2c0>)
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fd fdc9 	bl	800228c <HAL_DMA_Abort_IT>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d019      	beq.n	8004734 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800470e:	4610      	mov	r0, r2
 8004710:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004712:	e00f      	b.n	8004734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa1d 	bl	8004b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471a:	e00b      	b.n	8004734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa19 	bl	8004b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004722:	e007      	b.n	8004734 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa15 	bl	8004b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004732:	e1dc      	b.n	8004aee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	bf00      	nop
    return;
 8004736:	e1da      	b.n	8004aee <HAL_UART_IRQHandler+0x66e>
 8004738:	10000001 	.word	0x10000001
 800473c:	04000120 	.word	0x04000120
 8004740:	08005a27 	.word	0x08005a27

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 8170 	bne.w	8004a2e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8169 	beq.w	8004a2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8162 	beq.w	8004a2e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2210      	movs	r2, #16
 8004770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b40      	cmp	r3, #64	@ 0x40
 800477e:	f040 80d8 	bne.w	8004932 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80af 	beq.w	80048f8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f080 80a7 	bcs.w	80048f8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8087 	bne.w	80048d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800480a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1da      	bne.n	80047c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800483a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800483e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e1      	bne.n	8004812 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3308      	adds	r3, #8
 8004854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800485e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e3      	bne.n	800484e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a4:	f023 0310 	bic.w	r3, r3, #16
 80048a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e4      	bne.n	8004894 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fd fc82 	bl	80021da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f939 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048f6:	e0fc      	b.n	8004af2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80048fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004902:	429a      	cmp	r2, r3
 8004904:	f040 80f5 	bne.w	8004af2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b20      	cmp	r3, #32
 8004918:	f040 80eb 	bne.w	8004af2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f91c 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
      return;
 8004930:	e0df      	b.n	8004af2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800493e:	b29b      	uxth	r3, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80d1 	beq.w	8004af6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004954:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80cc 	beq.w	8004af6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004980:	647b      	str	r3, [r7, #68]	@ 0x44
 8004982:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800498e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e4      	bne.n	800495e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	623b      	str	r3, [r7, #32]
   return(result);
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3308      	adds	r3, #8
 80049b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e1      	bne.n	8004994 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f023 0310 	bic.w	r3, r3, #16
 80049f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	69b9      	ldr	r1, [r7, #24]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	617b      	str	r3, [r7, #20]
   return(result);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1e4      	bne.n	80049e4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f89e 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a2c:	e063      	b.n	8004af6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00e      	beq.n	8004a58 <HAL_UART_IRQHandler+0x5d8>
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f001 f825 	bl	8005aa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a56:	e051      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d014      	beq.n	8004a8e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03a      	beq.n	8004afa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
    }
    return;
 8004a8c:	e035      	b.n	8004afa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x62e>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 ffcf 	bl	8005a4a <UART_EndTransmit_IT>
    return;
 8004aac:	e026      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <HAL_UART_IRQHandler+0x64e>
 8004aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004abe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fffe 	bl	8005ac8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004acc:	e016      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d010      	beq.n	8004afc <HAL_UART_IRQHandler+0x67c>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da0c      	bge.n	8004afc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 ffe6 	bl	8005ab4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae8:	e008      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
      return;
 8004aea:	bf00      	nop
 8004aec:	e006      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
    return;
 8004aee:	bf00      	nop
 8004af0:	e004      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
      return;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
      return;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <HAL_UART_IRQHandler+0x67c>
    return;
 8004afa:	bf00      	nop
  }
}
 8004afc:	37e8      	adds	r7, #232	@ 0xe8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop

08004b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b08c      	sub	sp, #48	@ 0x30
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4baa      	ldr	r3, [pc, #680]	@ (8004e58 <UART_SetConfig+0x2d8>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a9f      	ldr	r2, [pc, #636]	@ (8004e5c <UART_SetConfig+0x2dc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004bf6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	f023 010f 	bic.w	r1, r3, #15
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a90      	ldr	r2, [pc, #576]	@ (8004e60 <UART_SetConfig+0x2e0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d125      	bne.n	8004c70 <UART_SetConfig+0xf0>
 8004c24:	4b8f      	ldr	r3, [pc, #572]	@ (8004e64 <UART_SetConfig+0x2e4>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d81a      	bhi.n	8004c68 <UART_SetConfig+0xe8>
 8004c32:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <UART_SetConfig+0xb8>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c61 	.word	0x08004c61
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c4e:	e116      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c56:	e112      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	e10e      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c66:	e10a      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6e:	e106      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7c      	ldr	r2, [pc, #496]	@ (8004e68 <UART_SetConfig+0x2e8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d138      	bne.n	8004cec <UART_SetConfig+0x16c>
 8004c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e64 <UART_SetConfig+0x2e4>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d82d      	bhi.n	8004ce4 <UART_SetConfig+0x164>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <UART_SetConfig+0x110>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004ce5 	.word	0x08004ce5
 8004c9c:	08004ce5 	.word	0x08004ce5
 8004ca0:	08004cd5 	.word	0x08004cd5
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004cdd 	.word	0x08004cdd
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cca:	e0d8      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e0d4      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e0d0      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce2:	e0cc      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cea:	e0c8      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e6c <UART_SetConfig+0x2ec>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d125      	bne.n	8004d42 <UART_SetConfig+0x1c2>
 8004cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e64 <UART_SetConfig+0x2e4>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d00:	2b30      	cmp	r3, #48	@ 0x30
 8004d02:	d016      	beq.n	8004d32 <UART_SetConfig+0x1b2>
 8004d04:	2b30      	cmp	r3, #48	@ 0x30
 8004d06:	d818      	bhi.n	8004d3a <UART_SetConfig+0x1ba>
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d00a      	beq.n	8004d22 <UART_SetConfig+0x1a2>
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d814      	bhi.n	8004d3a <UART_SetConfig+0x1ba>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <UART_SetConfig+0x19a>
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d008      	beq.n	8004d2a <UART_SetConfig+0x1aa>
 8004d18:	e00f      	b.n	8004d3a <UART_SetConfig+0x1ba>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d20:	e0ad      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d22:	2302      	movs	r3, #2
 8004d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d28:	e0a9      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d30:	e0a5      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d32:	2308      	movs	r3, #8
 8004d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d38:	e0a1      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d40:	e09d      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a4a      	ldr	r2, [pc, #296]	@ (8004e70 <UART_SetConfig+0x2f0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d125      	bne.n	8004d98 <UART_SetConfig+0x218>
 8004d4c:	4b45      	ldr	r3, [pc, #276]	@ (8004e64 <UART_SetConfig+0x2e4>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d58:	d016      	beq.n	8004d88 <UART_SetConfig+0x208>
 8004d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d5c:	d818      	bhi.n	8004d90 <UART_SetConfig+0x210>
 8004d5e:	2b80      	cmp	r3, #128	@ 0x80
 8004d60:	d00a      	beq.n	8004d78 <UART_SetConfig+0x1f8>
 8004d62:	2b80      	cmp	r3, #128	@ 0x80
 8004d64:	d814      	bhi.n	8004d90 <UART_SetConfig+0x210>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <UART_SetConfig+0x1f0>
 8004d6a:	2b40      	cmp	r3, #64	@ 0x40
 8004d6c:	d008      	beq.n	8004d80 <UART_SetConfig+0x200>
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x210>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d76:	e082      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e07e      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e07a      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e076      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d96:	e072      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a35      	ldr	r2, [pc, #212]	@ (8004e74 <UART_SetConfig+0x2f4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d12a      	bne.n	8004df8 <UART_SetConfig+0x278>
 8004da2:	4b30      	ldr	r3, [pc, #192]	@ (8004e64 <UART_SetConfig+0x2e4>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db0:	d01a      	beq.n	8004de8 <UART_SetConfig+0x268>
 8004db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004db6:	d81b      	bhi.n	8004df0 <UART_SetConfig+0x270>
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dbc:	d00c      	beq.n	8004dd8 <UART_SetConfig+0x258>
 8004dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc2:	d815      	bhi.n	8004df0 <UART_SetConfig+0x270>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <UART_SetConfig+0x250>
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dcc:	d008      	beq.n	8004de0 <UART_SetConfig+0x260>
 8004dce:	e00f      	b.n	8004df0 <UART_SetConfig+0x270>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dd6:	e052      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dde:	e04e      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de6:	e04a      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dee:	e046      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df6:	e042      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <UART_SetConfig+0x2dc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d13a      	bne.n	8004e78 <UART_SetConfig+0x2f8>
 8004e02:	4b18      	ldr	r3, [pc, #96]	@ (8004e64 <UART_SetConfig+0x2e4>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e10:	d01a      	beq.n	8004e48 <UART_SetConfig+0x2c8>
 8004e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e16:	d81b      	bhi.n	8004e50 <UART_SetConfig+0x2d0>
 8004e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e1c:	d00c      	beq.n	8004e38 <UART_SetConfig+0x2b8>
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e22:	d815      	bhi.n	8004e50 <UART_SetConfig+0x2d0>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <UART_SetConfig+0x2b0>
 8004e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2c:	d008      	beq.n	8004e40 <UART_SetConfig+0x2c0>
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x2d0>
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e36:	e022      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3e:	e01e      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e46:	e01a      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4e:	e016      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e56:	e012      	b.n	8004e7e <UART_SetConfig+0x2fe>
 8004e58:	cfff69f3 	.word	0xcfff69f3
 8004e5c:	40008000 	.word	0x40008000
 8004e60:	40013800 	.word	0x40013800
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40004400 	.word	0x40004400
 8004e6c:	40004800 	.word	0x40004800
 8004e70:	40004c00 	.word	0x40004c00
 8004e74:	40005000 	.word	0x40005000
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4aae      	ldr	r2, [pc, #696]	@ (800513c <UART_SetConfig+0x5bc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	f040 8097 	bne.w	8004fb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d823      	bhi.n	8004eda <UART_SetConfig+0x35a>
 8004e92:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0x318>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004ecb 	.word	0x08004ecb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004edb 	.word	0x08004edb
 8004eb4:	08004edb 	.word	0x08004edb
 8004eb8:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fe faf0 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ec2:	e010      	b.n	8004ee6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8005140 <UART_SetConfig+0x5c0>)
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ec8:	e00d      	b.n	8004ee6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fe fa7b 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8004ece:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ed0:	e009      	b.n	8004ee6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ed8:	e005      	b.n	8004ee6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8130 	beq.w	800514e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	4a94      	ldr	r2, [pc, #592]	@ (8005144 <UART_SetConfig+0x5c4>)
 8004ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d305      	bcc.n	8004f1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d903      	bls.n	8004f26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f24:	e113      	b.n	800514e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	60fa      	str	r2, [r7, #12]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	4a84      	ldr	r2, [pc, #528]	@ (8005144 <UART_SetConfig+0x5c4>)
 8004f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f48:	f7fb fbde 	bl	8000708 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	020b      	lsls	r3, r1, #8
 8004f5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f62:	0202      	lsls	r2, r0, #8
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	6849      	ldr	r1, [r1, #4]
 8004f68:	0849      	lsrs	r1, r1, #1
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	4605      	mov	r5, r0
 8004f70:	eb12 0804 	adds.w	r8, r2, r4
 8004f74:	eb43 0905 	adc.w	r9, r3, r5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	469a      	mov	sl, r3
 8004f80:	4693      	mov	fp, r2
 8004f82:	4652      	mov	r2, sl
 8004f84:	465b      	mov	r3, fp
 8004f86:	4640      	mov	r0, r8
 8004f88:	4649      	mov	r1, r9
 8004f8a:	f7fb fbbd 	bl	8000708 <__aeabi_uldivmod>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4613      	mov	r3, r2
 8004f94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f9c:	d308      	bcc.n	8004fb0 <UART_SetConfig+0x430>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa4:	d204      	bcs.n	8004fb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	e0ce      	b.n	800514e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb6:	e0ca      	b.n	800514e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fc0:	d166      	bne.n	8005090 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004fc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d827      	bhi.n	800501a <UART_SetConfig+0x49a>
 8004fca:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <UART_SetConfig+0x450>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004ff5 	.word	0x08004ff5
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	0800501b 	.word	0x0800501b
 8004fe0:	0800500b 	.word	0x0800500b
 8004fe4:	0800501b 	.word	0x0800501b
 8004fe8:	0800501b 	.word	0x0800501b
 8004fec:	0800501b 	.word	0x0800501b
 8004ff0:	08005013 	.word	0x08005013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff4:	f7fe fa54 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ffa:	e014      	b.n	8005026 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7fe fa66 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8005000:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005002:	e010      	b.n	8005026 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005004:	4b4e      	ldr	r3, [pc, #312]	@ (8005140 <UART_SetConfig+0x5c0>)
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005008:	e00d      	b.n	8005026 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500a:	f7fe f9db 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 800500e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005010:	e009      	b.n	8005026 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005018:	e005      	b.n	8005026 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005024:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8090 	beq.w	800514e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	4a44      	ldr	r2, [pc, #272]	@ (8005144 <UART_SetConfig+0x5c4>)
 8005034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005038:	461a      	mov	r2, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005040:	005a      	lsls	r2, r3, #1
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	441a      	add	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	d916      	bls.n	8005088 <UART_SetConfig+0x508>
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005060:	d212      	bcs.n	8005088 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f023 030f 	bic.w	r3, r3, #15
 800506a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	b29a      	uxth	r2, r3
 8005078:	8bfb      	ldrh	r3, [r7, #30]
 800507a:	4313      	orrs	r3, r2
 800507c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	8bfa      	ldrh	r2, [r7, #30]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	e062      	b.n	800514e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800508e:	e05e      	b.n	800514e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005090:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005094:	2b08      	cmp	r3, #8
 8005096:	d828      	bhi.n	80050ea <UART_SetConfig+0x56a>
 8005098:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <UART_SetConfig+0x520>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	080050eb 	.word	0x080050eb
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050eb 	.word	0x080050eb
 80050bc:	080050eb 	.word	0x080050eb
 80050c0:	080050e3 	.word	0x080050e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c4:	f7fe f9ec 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 80050c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050ca:	e014      	b.n	80050f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050cc:	f7fe f9fe 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050d2:	e010      	b.n	80050f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <UART_SetConfig+0x5c0>)
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050d8:	e00d      	b.n	80050f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050da:	f7fe f973 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 80050de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050e0:	e009      	b.n	80050f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050e8:	e005      	b.n	80050f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050f4:	bf00      	nop
    }

    if (pclk != 0U)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d028      	beq.n	800514e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	4a10      	ldr	r2, [pc, #64]	@ (8005144 <UART_SetConfig+0x5c4>)
 8005102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005106:	461a      	mov	r2, r3
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	fbb3 f2f2 	udiv	r2, r3, r2
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	441a      	add	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	fbb2 f3f3 	udiv	r3, r2, r3
 800511e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	2b0f      	cmp	r3, #15
 8005124:	d910      	bls.n	8005148 <UART_SetConfig+0x5c8>
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512c:	d20c      	bcs.n	8005148 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	b29a      	uxth	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60da      	str	r2, [r3, #12]
 8005138:	e009      	b.n	800514e <UART_SetConfig+0x5ce>
 800513a:	bf00      	nop
 800513c:	40008000 	.word	0x40008000
 8005140:	00f42400 	.word	0x00f42400
 8005144:	08014114 	.word	0x08014114
      }
      else
      {
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2201      	movs	r2, #1
 8005152:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2201      	movs	r2, #1
 800515a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800516a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800516e:	4618      	mov	r0, r3
 8005170:	3730      	adds	r7, #48	@ 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01a      	beq.n	800528e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005276:	d10a      	bne.n	800528e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  }
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b098      	sub	sp, #96	@ 0x60
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052cc:	f7fc fd76 	bl	8001dbc <HAL_GetTick>
 80052d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d12f      	bne.n	8005340 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f88e 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d022      	beq.n	8005340 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
 800531a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800531e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e6      	bne.n	80052fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e063      	b.n	8005408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d149      	bne.n	80053e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005356:	2200      	movs	r2, #0
 8005358:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f857 	bl	8005410 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d03c      	beq.n	80053e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	623b      	str	r3, [r7, #32]
   return(result);
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800537c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
 8005388:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800538c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e6      	bne.n	8005368 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ba:	61fa      	str	r2, [r7, #28]
 80053bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	617b      	str	r3, [r7, #20]
   return(result);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e012      	b.n	8005408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3758      	adds	r7, #88	@ 0x58
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4613      	mov	r3, r2
 800541e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	e04f      	b.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005428:	d04b      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fc fcc7 	bl	8001dbc <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <UART_WaitOnFlagUntilTimeout+0x30>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e04e      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d037      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b80      	cmp	r3, #128	@ 0x80
 8005456:	d034      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d031      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d110      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2208      	movs	r2, #8
 8005472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f920 	bl	80056ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2208      	movs	r2, #8
 800547e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e029      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549c:	d111      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f906 	bl	80056ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e00f      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d0a0      	beq.n	8005422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b096      	sub	sp, #88	@ 0x58
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2222      	movs	r2, #34	@ 0x22
 8005514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02d      	beq.n	800557e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005528:	4a40      	ldr	r2, [pc, #256]	@ (800562c <UART_Start_Receive_DMA+0x140>)
 800552a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005532:	4a3f      	ldr	r2, [pc, #252]	@ (8005630 <UART_Start_Receive_DMA+0x144>)
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553c:	4a3d      	ldr	r2, [pc, #244]	@ (8005634 <UART_Start_Receive_DMA+0x148>)
 800553e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005546:	2200      	movs	r2, #0
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3324      	adds	r3, #36	@ 0x24
 8005556:	4619      	mov	r1, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	461a      	mov	r2, r3
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	f7fc fdc0 	bl	80020e4 <HAL_DMA_Start_IT>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2210      	movs	r2, #16
 800556e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e051      	b.n	8005622 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d018      	beq.n	80055b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559a:	657b      	str	r3, [r7, #84]	@ 0x54
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80055b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e6      	bne.n	8005586 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80055e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e5      	bne.n	80055b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	613b      	str	r3, [r7, #16]
   return(result);
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800560c:	623a      	str	r2, [r7, #32]
 800560e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	6a3a      	ldr	r2, [r7, #32]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	61bb      	str	r3, [r7, #24]
   return(result);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e5      	bne.n	80055ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3758      	adds	r7, #88	@ 0x58
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	0800583d 	.word	0x0800583d
 8005630:	08005969 	.word	0x08005969
 8005634:	080059a7 	.word	0x080059a7

08005638 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b08f      	sub	sp, #60	@ 0x3c
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	61fb      	str	r3, [r7, #28]
   return(result);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005654:	637b      	str	r3, [r7, #52]	@ 0x34
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005660:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e6      	bne.n	8005640 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	60bb      	str	r3, [r7, #8]
   return(result);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005688:	633b      	str	r3, [r7, #48]	@ 0x30
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005692:	61ba      	str	r2, [r7, #24]
 8005694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6979      	ldr	r1, [r7, #20]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	613b      	str	r3, [r7, #16]
   return(result);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80056ae:	bf00      	nop
 80056b0:	373c      	adds	r7, #60	@ 0x3c
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b095      	sub	sp, #84	@ 0x54
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e6      	bne.n	80056c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	61fb      	str	r3, [r7, #28]
   return(result);
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005718:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800571e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e3      	bne.n	80056f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d118      	bne.n	8005766 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	60bb      	str	r3, [r7, #8]
   return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f023 0310 	bic.w	r3, r3, #16
 8005748:	647b      	str	r3, [r7, #68]	@ 0x44
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6979      	ldr	r1, [r7, #20]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800577a:	bf00      	nop
 800577c:	3754      	adds	r7, #84	@ 0x54
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b090      	sub	sp, #64	@ 0x40
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d137      	bne.n	8005812 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80057a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	623b      	str	r3, [r7, #32]
   return(result);
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3308      	adds	r3, #8
 80057c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80057cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e5      	bne.n	80057aa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	617b      	str	r3, [r7, #20]
   return(result);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e6      	bne.n	80057de <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005810:	e002      	b.n	8005818 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005812:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005814:	f7ff f976 	bl	8004b04 <HAL_UART_TxCpltCallback>
}
 8005818:	bf00      	nop
 800581a:	3740      	adds	r7, #64	@ 0x40
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f7ff f972 	bl	8004b18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b09c      	sub	sp, #112	@ 0x70
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d171      	bne.n	800593c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800585a:	2200      	movs	r2, #0
 800585c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800586e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800587e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005880:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800588c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e6      	bne.n	8005860 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80058aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80058b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e5      	bne.n	8005892 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	623b      	str	r3, [r7, #32]
   return(result);
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80058de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1e5      	bne.n	80058c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058fc:	2220      	movs	r2, #32
 80058fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d118      	bne.n	800593c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	60fb      	str	r3, [r7, #12]
   return(result);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0310 	bic.w	r3, r3, #16
 800591e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	617b      	str	r3, [r7, #20]
   return(result);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800593c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800593e:	2200      	movs	r2, #0
 8005940:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800594a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800594c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005950:	4619      	mov	r1, r3
 8005952:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005954:	f7ff f908 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005958:	e002      	b.n	8005960 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800595a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800595c:	f7ff f8e6 	bl	8004b2c <HAL_UART_RxCpltCallback>
}
 8005960:	bf00      	nop
 8005962:	3770      	adds	r7, #112	@ 0x70
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d109      	bne.n	8005998 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	b29b      	uxth	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff f8e9 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005996:	e002      	b.n	800599e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff f8d1 	bl	8004b40 <HAL_UART_RxHalfCpltCallback>
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b80      	cmp	r3, #128	@ 0x80
 80059d0:	d109      	bne.n	80059e6 <UART_DMAError+0x40>
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b21      	cmp	r3, #33	@ 0x21
 80059d6:	d106      	bne.n	80059e6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80059e0:	6978      	ldr	r0, [r7, #20]
 80059e2:	f7ff fe29 	bl	8005638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d109      	bne.n	8005a08 <UART_DMAError+0x62>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b22      	cmp	r3, #34	@ 0x22
 80059f8:	d106      	bne.n	8005a08 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f7ff fe59 	bl	80056ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	f043 0210 	orr.w	r2, r3, #16
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	f7ff f89b 	bl	8004b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff f889 	bl	8004b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b088      	sub	sp, #32
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e6      	bne.n	8005a52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff f836 	bl	8004b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a98:	bf00      	nop
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e027      	b.n	8005b42 <HAL_UARTEx_DisableFifoMode+0x66>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2224      	movs	r2, #36	@ 0x24
 8005afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e02d      	b.n	8005bc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	@ 0x24
 8005b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f850 	bl	8005c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e02d      	b.n	8005c3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2224      	movs	r2, #36	@ 0x24
 8005bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f812 	bl	8005c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d108      	bne.n	8005c6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c68:	e031      	b.n	8005cce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c6a:	2308      	movs	r3, #8
 8005c6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c6e:	2308      	movs	r3, #8
 8005c70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	0e5b      	lsrs	r3, r3, #25
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	0f5b      	lsrs	r3, r3, #29
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	7b3a      	ldrb	r2, [r7, #12]
 8005c96:	4911      	ldr	r1, [pc, #68]	@ (8005cdc <UARTEx_SetNbDataToProcess+0x94>)
 8005c98:	5c8a      	ldrb	r2, [r1, r2]
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c9e:	7b3a      	ldrb	r2, [r7, #12]
 8005ca0:	490f      	ldr	r1, [pc, #60]	@ (8005ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ca4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	7b7a      	ldrb	r2, [r7, #13]
 8005cb4:	4909      	ldr	r1, [pc, #36]	@ (8005cdc <UARTEx_SetNbDataToProcess+0x94>)
 8005cb6:	5c8a      	ldrb	r2, [r1, r2]
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cbc:	7b7a      	ldrb	r2, [r7, #13]
 8005cbe:	4908      	ldr	r1, [pc, #32]	@ (8005ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	0801412c 	.word	0x0801412c
 8005ce0:	08014134 	.word	0x08014134

08005ce4 <__NVIC_SetPriority>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db0a      	blt.n	8005d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	490c      	ldr	r1, [pc, #48]	@ (8005d30 <__NVIC_SetPriority+0x4c>)
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	0112      	lsls	r2, r2, #4
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	440b      	add	r3, r1
 8005d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d0c:	e00a      	b.n	8005d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4908      	ldr	r1, [pc, #32]	@ (8005d34 <__NVIC_SetPriority+0x50>)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	3b04      	subs	r3, #4
 8005d1c:	0112      	lsls	r2, r2, #4
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	440b      	add	r3, r1
 8005d22:	761a      	strb	r2, [r3, #24]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000e100 	.word	0xe000e100
 8005d34:	e000ed00 	.word	0xe000ed00

08005d38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <SysTick_Handler+0x1c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d40:	f001 fd6e 	bl	8007820 <xTaskGetSchedulerState>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d4a:	f002 fb65 	bl	8008418 <xPortSysTickHandler>
  }
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	e000e010 	.word	0xe000e010

08005d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	f06f 0004 	mvn.w	r0, #4
 8005d62:	f7ff ffbf 	bl	8005ce4 <__NVIC_SetPriority>
#endif
}
 8005d66:	bf00      	nop
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d72:	f3ef 8305 	mrs	r3, IPSR
 8005d76:	603b      	str	r3, [r7, #0]
  return(result);
 8005d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d7e:	f06f 0305 	mvn.w	r3, #5
 8005d82:	607b      	str	r3, [r7, #4]
 8005d84:	e00c      	b.n	8005da0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d86:	4b0a      	ldr	r3, [pc, #40]	@ (8005db0 <osKernelInitialize+0x44>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d105      	bne.n	8005d9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <osKernelInitialize+0x44>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	e002      	b.n	8005da0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005da0:	687b      	ldr	r3, [r7, #4]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	200063b8 	.word	0x200063b8

08005db4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dba:	f3ef 8305 	mrs	r3, IPSR
 8005dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8005dc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dc6:	f06f 0305 	mvn.w	r3, #5
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e010      	b.n	8005df0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <osKernelStart+0x48>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d109      	bne.n	8005dea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dd6:	f7ff ffbf 	bl	8005d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dda:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <osKernelStart+0x48>)
 8005ddc:	2202      	movs	r2, #2
 8005dde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005de0:	f001 f892 	bl	8006f08 <vTaskStartScheduler>
      stat = osOK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	607b      	str	r3, [r7, #4]
 8005de8:	e002      	b.n	8005df0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005df0:	687b      	ldr	r3, [r7, #4]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200063b8 	.word	0x200063b8

08005e00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08e      	sub	sp, #56	@ 0x38
 8005e04:	af04      	add	r7, sp, #16
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e10:	f3ef 8305 	mrs	r3, IPSR
 8005e14:	617b      	str	r3, [r7, #20]
  return(result);
 8005e16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d17e      	bne.n	8005f1a <osThreadNew+0x11a>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d07b      	beq.n	8005f1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e22:	2380      	movs	r3, #128	@ 0x80
 8005e24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e26:	2318      	movs	r3, #24
 8005e28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d045      	beq.n	8005ec6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <osThreadNew+0x48>
        name = attr->name;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <osThreadNew+0x6e>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b38      	cmp	r3, #56	@ 0x38
 8005e60:	d805      	bhi.n	8005e6e <osThreadNew+0x6e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <osThreadNew+0x72>
        return (NULL);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e054      	b.n	8005f1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00e      	beq.n	8005ea8 <osThreadNew+0xa8>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005e90:	d90a      	bls.n	8005ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d006      	beq.n	8005ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <osThreadNew+0xa8>
        mem = 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e010      	b.n	8005eca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10c      	bne.n	8005eca <osThreadNew+0xca>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d108      	bne.n	8005eca <osThreadNew+0xca>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <osThreadNew+0xca>
          mem = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	e001      	b.n	8005eca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d110      	bne.n	8005ef2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ed8:	9202      	str	r2, [sp, #8]
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fe1a 	bl	8006b20 <xTaskCreateStatic>
 8005eec:	4603      	mov	r3, r0
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	e013      	b.n	8005f1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d110      	bne.n	8005f1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f107 0310 	add.w	r3, r7, #16
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fe68 	bl	8006be0 <xTaskCreate>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d001      	beq.n	8005f1a <osThreadNew+0x11a>
            hTask = NULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f1a:	693b      	ldr	r3, [r7, #16]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3728      	adds	r7, #40	@ 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f2c:	f3ef 8305 	mrs	r3, IPSR
 8005f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <osDelay+0x1c>
    stat = osErrorISR;
 8005f38:	f06f 0305 	mvn.w	r3, #5
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e007      	b.n	8005f50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 ffa6 	bl	8006e9c <vTaskDelay>
    }
  }

  return (stat);
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a07      	ldr	r2, [pc, #28]	@ (8005f88 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4a06      	ldr	r2, [pc, #24]	@ (8005f8c <vApplicationGetIdleTaskMemory+0x30>)
 8005f72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2280      	movs	r2, #128	@ 0x80
 8005f78:	601a      	str	r2, [r3, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	200063bc 	.word	0x200063bc
 8005f8c:	20006464 	.word	0x20006464

08005f90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a07      	ldr	r2, [pc, #28]	@ (8005fbc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4a06      	ldr	r2, [pc, #24]	@ (8005fc0 <vApplicationGetTimerTaskMemory+0x30>)
 8005fa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	20006664 	.word	0x20006664
 8005fc0:	2000670c 	.word	0x2000670c

08005fc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f103 0208 	add.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f103 0208 	add.w	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f103 0208 	add.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800607c:	d103      	bne.n	8006086 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e00c      	b.n	80060a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3308      	adds	r3, #8
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e002      	b.n	8006094 <vListInsert+0x2e>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	d2f6      	bcs.n	800608e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6852      	ldr	r2, [r2, #4]
 80060f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d103      	bne.n	800610c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	1e5a      	subs	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10b      	bne.n	8006158 <xQueueGenericReset+0x2c>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60bb      	str	r3, [r7, #8]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006158:	f002 f8ce 	bl	80082f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	68f9      	ldr	r1, [r7, #12]
 8006166:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	441a      	add	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006188:	3b01      	subs	r3, #1
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	441a      	add	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	22ff      	movs	r2, #255	@ 0xff
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	22ff      	movs	r2, #255	@ 0xff
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d114      	bne.n	80061d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01a      	beq.n	80061ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3310      	adds	r3, #16
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f942 	bl	8007444 <xTaskRemoveFromEventList>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061c6:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <xQueueGenericReset+0xd0>)
 80061c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	e009      	b.n	80061ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3310      	adds	r3, #16
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fef1 	bl	8005fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3324      	adds	r3, #36	@ 0x24
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff feec 	bl	8005fc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061ec:	f002 f8b6 	bl	800835c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061f0:	2301      	movs	r3, #1
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08e      	sub	sp, #56	@ 0x38
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	e7fd      	b.n	8006228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <xQueueGenericCreateStatic+0x56>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <xQueueGenericCreateStatic+0x5a>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <xQueueGenericCreateStatic+0x5c>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10b      	bne.n	8006278 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	623b      	str	r3, [r7, #32]
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	e7fd      	b.n	8006274 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <xQueueGenericCreateStatic+0x84>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <xQueueGenericCreateStatic+0x88>
 8006284:	2301      	movs	r3, #1
 8006286:	e000      	b.n	800628a <xQueueGenericCreateStatic+0x8a>
 8006288:	2300      	movs	r3, #0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	61fb      	str	r3, [r7, #28]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062a6:	2350      	movs	r3, #80	@ 0x50
 80062a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b50      	cmp	r3, #80	@ 0x50
 80062ae:	d00b      	beq.n	80062c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	61bb      	str	r3, [r7, #24]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80062ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00d      	beq.n	80062f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f805 	bl	80062fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3730      	adds	r7, #48	@ 0x30
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e002      	b.n	800631c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006328:	2101      	movs	r1, #1
 800632a:	69b8      	ldr	r0, [r7, #24]
 800632c:	f7ff fefe 	bl	800612c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	@ 0x38
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800634e:	2300      	movs	r3, #0
 8006350:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10b      	bne.n	8006374 <xQueueGenericSend+0x34>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <xQueueGenericSend+0x42>
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <xQueueGenericSend+0x46>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericSend+0x48>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <xQueueGenericSend+0x64>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d103      	bne.n	80063b2 <xQueueGenericSend+0x72>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericSend+0x76>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericSend+0x78>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <xQueueGenericSend+0x94>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063d4:	f001 fa24 	bl	8007820 <xTaskGetSchedulerState>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <xQueueGenericSend+0xa4>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <xQueueGenericSend+0xa8>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <xQueueGenericSend+0xaa>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <xQueueGenericSend+0xc6>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61fb      	str	r3, [r7, #28]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006406:	f001 ff77 	bl	80082f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006412:	429a      	cmp	r2, r3
 8006414:	d302      	bcc.n	800641c <xQueueGenericSend+0xdc>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d129      	bne.n	8006470 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006422:	f000 fa0f 	bl	8006844 <prvCopyDataToQueue>
 8006426:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d010      	beq.n	8006452 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	3324      	adds	r3, #36	@ 0x24
 8006434:	4618      	mov	r0, r3
 8006436:	f001 f805 	bl	8007444 <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d013      	beq.n	8006468 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006440:	4b3f      	ldr	r3, [pc, #252]	@ (8006540 <xQueueGenericSend+0x200>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e00a      	b.n	8006468 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006458:	4b39      	ldr	r3, [pc, #228]	@ (8006540 <xQueueGenericSend+0x200>)
 800645a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006468:	f001 ff78 	bl	800835c <vPortExitCritical>
				return pdPASS;
 800646c:	2301      	movs	r3, #1
 800646e:	e063      	b.n	8006538 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006476:	f001 ff71 	bl	800835c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800647a:	2300      	movs	r3, #0
 800647c:	e05c      	b.n	8006538 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006484:	f107 0314 	add.w	r3, r7, #20
 8006488:	4618      	mov	r0, r3
 800648a:	f001 f867 	bl	800755c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006492:	f001 ff63 	bl	800835c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006496:	f000 fda7 	bl	8006fe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800649a:	f001 ff2d 	bl	80082f8 <vPortEnterCritical>
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064aa:	d103      	bne.n	80064b4 <xQueueGenericSend+0x174>
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064ba:	b25b      	sxtb	r3, r3
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064c0:	d103      	bne.n	80064ca <xQueueGenericSend+0x18a>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064ca:	f001 ff47 	bl	800835c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ce:	1d3a      	adds	r2, r7, #4
 80064d0:	f107 0314 	add.w	r3, r7, #20
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 f856 	bl	8007588 <xTaskCheckForTimeOut>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d124      	bne.n	800652c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e4:	f000 faa6 	bl	8006a34 <prvIsQueueFull>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	3310      	adds	r3, #16
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ff52 	bl	80073a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064fe:	f000 fa31 	bl	8006964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006502:	f000 fd7f 	bl	8007004 <xTaskResumeAll>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	f47f af7c 	bne.w	8006406 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800650e:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <xQueueGenericSend+0x200>)
 8006510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	e772      	b.n	8006406 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006522:	f000 fa1f 	bl	8006964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006526:	f000 fd6d 	bl	8007004 <xTaskResumeAll>
 800652a:	e76c      	b.n	8006406 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800652c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800652e:	f000 fa19 	bl	8006964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006532:	f000 fd67 	bl	8007004 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006536:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006538:	4618      	mov	r0, r3
 800653a:	3738      	adds	r7, #56	@ 0x38
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b090      	sub	sp, #64	@ 0x40
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <xQueueGenericSendFromISR+0x3e>
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <xQueueGenericSendFromISR+0x42>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSendFromISR+0x44>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10b      	bne.n	80065a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d103      	bne.n	80065b2 <xQueueGenericSendFromISR+0x6e>
 80065aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <xQueueGenericSendFromISR+0x72>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <xQueueGenericSendFromISR+0x74>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	623b      	str	r3, [r7, #32]
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	e7fd      	b.n	80065d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065d4:	f001 ff70 	bl	80084b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065d8:	f3ef 8211 	mrs	r2, BASEPRI
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	61fa      	str	r2, [r7, #28]
 80065ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d302      	bcc.n	8006606 <xQueueGenericSendFromISR+0xc2>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d12f      	bne.n	8006666 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800660c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800661c:	f000 f912 	bl	8006844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006620:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006628:	d112      	bne.n	8006650 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	d016      	beq.n	8006660 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	3324      	adds	r3, #36	@ 0x24
 8006636:	4618      	mov	r0, r3
 8006638:	f000 ff04 	bl	8007444 <xTaskRemoveFromEventList>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00e      	beq.n	8006660 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e007      	b.n	8006660 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006650:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006654:	3301      	adds	r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	b25a      	sxtb	r2, r3
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006660:	2301      	movs	r3, #1
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006664:	e001      	b.n	800666a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006678:	4618      	mov	r0, r3
 800667a:	3740      	adds	r7, #64	@ 0x40
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08c      	sub	sp, #48	@ 0x30
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <xQueueReceive+0x32>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	623b      	str	r3, [r7, #32]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <xQueueReceive+0x40>
 80066b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <xQueueReceive+0x44>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <xQueueReceive+0x46>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <xQueueReceive+0x62>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	61fb      	str	r3, [r7, #28]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e2:	f001 f89d 	bl	8007820 <xTaskGetSchedulerState>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xQueueReceive+0x72>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueReceive+0x76>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueReceive+0x78>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <xQueueReceive+0x94>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61bb      	str	r3, [r7, #24]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006714:	f001 fdf0 	bl	80082f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01f      	beq.n	8006764 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006728:	f000 f8f6 	bl	8006918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	1e5a      	subs	r2, r3, #1
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00f      	beq.n	800675c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	3310      	adds	r3, #16
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fe7f 	bl	8007444 <xTaskRemoveFromEventList>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d007      	beq.n	800675c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800674c:	4b3c      	ldr	r3, [pc, #240]	@ (8006840 <xQueueReceive+0x1c0>)
 800674e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800675c:	f001 fdfe 	bl	800835c <vPortExitCritical>
				return pdPASS;
 8006760:	2301      	movs	r3, #1
 8006762:	e069      	b.n	8006838 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d103      	bne.n	8006772 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800676a:	f001 fdf7 	bl	800835c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800676e:	2300      	movs	r3, #0
 8006770:	e062      	b.n	8006838 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006778:	f107 0310 	add.w	r3, r7, #16
 800677c:	4618      	mov	r0, r3
 800677e:	f000 feed 	bl	800755c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006782:	2301      	movs	r3, #1
 8006784:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006786:	f001 fde9 	bl	800835c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800678a:	f000 fc2d 	bl	8006fe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800678e:	f001 fdb3 	bl	80082f8 <vPortEnterCritical>
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006798:	b25b      	sxtb	r3, r3
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800679e:	d103      	bne.n	80067a8 <xQueueReceive+0x128>
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067b4:	d103      	bne.n	80067be <xQueueReceive+0x13e>
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067be:	f001 fdcd 	bl	800835c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067c2:	1d3a      	adds	r2, r7, #4
 80067c4:	f107 0310 	add.w	r3, r7, #16
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fedc 	bl	8007588 <xTaskCheckForTimeOut>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d123      	bne.n	800681e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067d8:	f000 f916 	bl	8006a08 <prvIsQueueEmpty>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	3324      	adds	r3, #36	@ 0x24
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fdd8 	bl	80073a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f2:	f000 f8b7 	bl	8006964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067f6:	f000 fc05 	bl	8007004 <xTaskResumeAll>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d189      	bne.n	8006714 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006800:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <xQueueReceive+0x1c0>)
 8006802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	e780      	b.n	8006714 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006814:	f000 f8a6 	bl	8006964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006818:	f000 fbf4 	bl	8007004 <xTaskResumeAll>
 800681c:	e77a      	b.n	8006714 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800681e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006820:	f000 f8a0 	bl	8006964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006824:	f000 fbee 	bl	8007004 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800682a:	f000 f8ed 	bl	8006a08 <prvIsQueueEmpty>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	f43f af6f 	beq.w	8006714 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006836:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006838:	4618      	mov	r0, r3
 800683a:	3730      	adds	r7, #48	@ 0x30
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10d      	bne.n	800687e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d14d      	bne.n	8006906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fff4 	bl	800785c <xTaskPriorityDisinherit>
 8006874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	e043      	b.n	8006906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d119      	bne.n	80068b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6858      	ldr	r0, [r3, #4]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688c:	461a      	mov	r2, r3
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	f00c fd43 	bl	801331a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	441a      	add	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d32b      	bcc.n	8006906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]
 80068b6:	e026      	b.n	8006906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68d8      	ldr	r0, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	461a      	mov	r2, r3
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	f00c fd29 	bl	801331a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	425b      	negs	r3, r3
 80068d2:	441a      	add	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d207      	bcs.n	80068f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	425b      	negs	r3, r3
 80068ee:	441a      	add	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d105      	bne.n	8006906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	3b01      	subs	r3, #1
 8006904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800690e:	697b      	ldr	r3, [r7, #20]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d303      	bcc.n	800694c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68d9      	ldr	r1, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006954:	461a      	mov	r2, r3
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f00c fcdf 	bl	801331a <memcpy>
	}
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800696c:	f001 fcc4 	bl	80082f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006978:	e011      	b.n	800699e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d012      	beq.n	80069a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3324      	adds	r3, #36	@ 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fd5c 	bl	8007444 <xTaskRemoveFromEventList>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006992:	f000 fe5d 	bl	8007650 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	3b01      	subs	r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800699e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dce9      	bgt.n	800697a <prvUnlockQueue+0x16>
 80069a6:	e000      	b.n	80069aa <prvUnlockQueue+0x46>
					break;
 80069a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	22ff      	movs	r2, #255	@ 0xff
 80069ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069b2:	f001 fcd3 	bl	800835c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069b6:	f001 fc9f 	bl	80082f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c2:	e011      	b.n	80069e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d012      	beq.n	80069f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3310      	adds	r3, #16
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fd37 	bl	8007444 <xTaskRemoveFromEventList>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069dc:	f000 fe38 	bl	8007650 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	dce9      	bgt.n	80069c4 <prvUnlockQueue+0x60>
 80069f0:	e000      	b.n	80069f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	22ff      	movs	r2, #255	@ 0xff
 80069f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069fc:	f001 fcae 	bl	800835c <vPortExitCritical>
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a10:	f001 fc72 	bl	80082f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e001      	b.n	8006a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a26:	f001 fc99 	bl	800835c <vPortExitCritical>

	return xReturn;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a3c:	f001 fc5c 	bl	80082f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d102      	bne.n	8006a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e001      	b.n	8006a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 fc81 	bl	800835c <vPortExitCritical>

	return xReturn;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e014      	b.n	8006a9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a74:	4a0f      	ldr	r2, [pc, #60]	@ (8006ab4 <vQueueAddToRegistry+0x50>)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a80:	490c      	ldr	r1, [pc, #48]	@ (8006ab4 <vQueueAddToRegistry+0x50>)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <vQueueAddToRegistry+0x50>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4413      	add	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a96:	e006      	b.n	8006aa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b07      	cmp	r3, #7
 8006aa2:	d9e7      	bls.n	8006a74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20006b0c 	.word	0x20006b0c

08006ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ac8:	f001 fc16 	bl	80082f8 <vPortEnterCritical>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ad8:	d103      	bne.n	8006ae2 <vQueueWaitForMessageRestricted+0x2a>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aee:	d103      	bne.n	8006af8 <vQueueWaitForMessageRestricted+0x40>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006af8:	f001 fc30 	bl	800835c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3324      	adds	r3, #36	@ 0x24
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fc6d 	bl	80073ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	f7ff ff26 	bl	8006964 <prvUnlockQueue>
	}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	@ 0x38
 8006b24:	af04      	add	r7, sp, #16
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	61fb      	str	r3, [r7, #28]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b6a:	23a8      	movs	r3, #168	@ 0xa8
 8006b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2ba8      	cmp	r3, #168	@ 0xa8
 8006b72:	d00b      	beq.n	8006b8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	61bb      	str	r3, [r7, #24]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01e      	beq.n	8006bd2 <xTaskCreateStatic+0xb2>
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01b      	beq.n	8006bd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bac:	2300      	movs	r3, #0
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	f107 0314 	add.w	r3, r7, #20
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f851 	bl	8006c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bcc:	f000 f8f6 	bl	8006dbc <prvAddNewTaskToReadyList>
 8006bd0:	e001      	b.n	8006bd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bd6:	697b      	ldr	r3, [r7, #20]
	}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3728      	adds	r7, #40	@ 0x28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	@ 0x30
 8006be4:	af04      	add	r7, sp, #16
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fca1 	bl	800853c <pvPortMalloc>
 8006bfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00e      	beq.n	8006c20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c02:	20a8      	movs	r0, #168	@ 0xa8
 8006c04:	f001 fc9a 	bl	800853c <pvPortMalloc>
 8006c08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c16:	e005      	b.n	8006c24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c18:	6978      	ldr	r0, [r7, #20]
 8006c1a:	f001 fd5d 	bl	80086d8 <vPortFree>
 8006c1e:	e001      	b.n	8006c24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d017      	beq.n	8006c5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	2300      	movs	r3, #0
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	9302      	str	r3, [sp, #8]
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f80f 	bl	8006c6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c4e:	69f8      	ldr	r0, [r7, #28]
 8006c50:	f000 f8b4 	bl	8006dbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c54:	2301      	movs	r3, #1
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e002      	b.n	8006c60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c60:	69bb      	ldr	r3, [r7, #24]
	}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	461a      	mov	r2, r3
 8006c84:	21a5      	movs	r1, #165	@ 0xa5
 8006c86:	f00c fa17 	bl	80130b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c94:	3b01      	subs	r3, #1
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f023 0307 	bic.w	r3, r3, #7
 8006ca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	617b      	str	r3, [r7, #20]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01f      	beq.n	8006d0c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e012      	b.n	8006cf8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	7819      	ldrb	r1, [r3, #0]
 8006cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	3334      	adds	r3, #52	@ 0x34
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d006      	beq.n	8006d00 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d9e9      	bls.n	8006cd2 <prvInitialiseNewTask+0x66>
 8006cfe:	e000      	b.n	8006d02 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d0a:	e003      	b.n	8006d14 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	2b37      	cmp	r3, #55	@ 0x37
 8006d18:	d901      	bls.n	8006d1e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d1a:	2337      	movs	r3, #55	@ 0x37
 8006d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	3304      	adds	r3, #4
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff f965 	bl	8006004 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff f960 	bl	8006004 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	3354      	adds	r3, #84	@ 0x54
 8006d6e:	224c      	movs	r2, #76	@ 0x4c
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f00c f9a0 	bl	80130b8 <memset>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006db0 <prvInitialiseNewTask+0x144>)
 8006d7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	4a0c      	ldr	r2, [pc, #48]	@ (8006db4 <prvInitialiseNewTask+0x148>)
 8006d82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	4a0c      	ldr	r2, [pc, #48]	@ (8006db8 <prvInitialiseNewTask+0x14c>)
 8006d88:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	68f9      	ldr	r1, [r7, #12]
 8006d8e:	69b8      	ldr	r0, [r7, #24]
 8006d90:	f001 f982 	bl	8008098 <pxPortInitialiseStack>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006da6:	bf00      	nop
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20010bd4 	.word	0x20010bd4
 8006db4:	20010c3c 	.word	0x20010c3c
 8006db8:	20010ca4 	.word	0x20010ca4

08006dbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006dc4:	f001 fa98 	bl	80082f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006e80 <prvAddNewTaskToReadyList+0xc4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	4a2c      	ldr	r2, [pc, #176]	@ (8006e80 <prvAddNewTaskToReadyList+0xc4>)
 8006dd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e84 <prvAddNewTaskToReadyList+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dda:	4a2a      	ldr	r2, [pc, #168]	@ (8006e84 <prvAddNewTaskToReadyList+0xc8>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006de0:	4b27      	ldr	r3, [pc, #156]	@ (8006e80 <prvAddNewTaskToReadyList+0xc4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d110      	bne.n	8006e0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006de8:	f000 fc56 	bl	8007698 <prvInitialiseTaskLists>
 8006dec:	e00d      	b.n	8006e0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dee:	4b26      	ldr	r3, [pc, #152]	@ (8006e88 <prvAddNewTaskToReadyList+0xcc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006df6:	4b23      	ldr	r3, [pc, #140]	@ (8006e84 <prvAddNewTaskToReadyList+0xc8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d802      	bhi.n	8006e0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e04:	4a1f      	ldr	r2, [pc, #124]	@ (8006e84 <prvAddNewTaskToReadyList+0xc8>)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e0a:	4b20      	ldr	r3, [pc, #128]	@ (8006e8c <prvAddNewTaskToReadyList+0xd0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	4a1e      	ldr	r2, [pc, #120]	@ (8006e8c <prvAddNewTaskToReadyList+0xd0>)
 8006e12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e14:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <prvAddNewTaskToReadyList+0xd0>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e20:	4b1b      	ldr	r3, [pc, #108]	@ (8006e90 <prvAddNewTaskToReadyList+0xd4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d903      	bls.n	8006e30 <prvAddNewTaskToReadyList+0x74>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <prvAddNewTaskToReadyList+0xd4>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <prvAddNewTaskToReadyList+0xd8>)
 8006e3e:	441a      	add	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7ff f8e9 	bl	800601e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e4c:	f001 fa86 	bl	800835c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e50:	4b0d      	ldr	r3, [pc, #52]	@ (8006e88 <prvAddNewTaskToReadyList+0xcc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e58:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <prvAddNewTaskToReadyList+0xc8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d207      	bcs.n	8006e76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e66:	4b0c      	ldr	r3, [pc, #48]	@ (8006e98 <prvAddNewTaskToReadyList+0xdc>)
 8006e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20007020 	.word	0x20007020
 8006e84:	20006b4c 	.word	0x20006b4c
 8006e88:	2000702c 	.word	0x2000702c
 8006e8c:	2000703c 	.word	0x2000703c
 8006e90:	20007028 	.word	0x20007028
 8006e94:	20006b50 	.word	0x20006b50
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d018      	beq.n	8006ee0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006eae:	4b14      	ldr	r3, [pc, #80]	@ (8006f00 <vTaskDelay+0x64>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <vTaskDelay+0x32>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ece:	f000 f88b 	bl	8006fe8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fd31 	bl	800793c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eda:	f000 f893 	bl	8007004 <xTaskResumeAll>
 8006ede:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d107      	bne.n	8006ef6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ee6:	4b07      	ldr	r3, [pc, #28]	@ (8006f04 <vTaskDelay+0x68>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20007048 	.word	0x20007048
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	@ 0x28
 8006f0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f16:	463a      	mov	r2, r7
 8006f18:	1d39      	adds	r1, r7, #4
 8006f1a:	f107 0308 	add.w	r3, r7, #8
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff f81c 	bl	8005f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	9202      	str	r2, [sp, #8]
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	2300      	movs	r3, #0
 8006f34:	460a      	mov	r2, r1
 8006f36:	4924      	ldr	r1, [pc, #144]	@ (8006fc8 <vTaskStartScheduler+0xc0>)
 8006f38:	4824      	ldr	r0, [pc, #144]	@ (8006fcc <vTaskStartScheduler+0xc4>)
 8006f3a:	f7ff fdf1 	bl	8006b20 <xTaskCreateStatic>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4a23      	ldr	r2, [pc, #140]	@ (8006fd0 <vTaskStartScheduler+0xc8>)
 8006f42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f44:	4b22      	ldr	r3, [pc, #136]	@ (8006fd0 <vTaskStartScheduler+0xc8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	e001      	b.n	8006f56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d102      	bne.n	8006f62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f5c:	f000 fd42 	bl	80079e4 <xTimerCreateTimerTask>
 8006f60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d11b      	bne.n	8006fa0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	613b      	str	r3, [r7, #16]
}
 8006f7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f7c:	4b15      	ldr	r3, [pc, #84]	@ (8006fd4 <vTaskStartScheduler+0xcc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3354      	adds	r3, #84	@ 0x54
 8006f82:	4a15      	ldr	r2, [pc, #84]	@ (8006fd8 <vTaskStartScheduler+0xd0>)
 8006f84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f86:	4b15      	ldr	r3, [pc, #84]	@ (8006fdc <vTaskStartScheduler+0xd4>)
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f8e:	4b14      	ldr	r3, [pc, #80]	@ (8006fe0 <vTaskStartScheduler+0xd8>)
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f94:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <vTaskStartScheduler+0xdc>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f9a:	f001 f909 	bl	80081b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f9e:	e00f      	b.n	8006fc0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fa6:	d10b      	bne.n	8006fc0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	60fb      	str	r3, [r7, #12]
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	e7fd      	b.n	8006fbc <vTaskStartScheduler+0xb4>
}
 8006fc0:	bf00      	nop
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	080140b4 	.word	0x080140b4
 8006fcc:	08007669 	.word	0x08007669
 8006fd0:	20007044 	.word	0x20007044
 8006fd4:	20006b4c 	.word	0x20006b4c
 8006fd8:	20000b18 	.word	0x20000b18
 8006fdc:	20007040 	.word	0x20007040
 8006fe0:	2000702c 	.word	0x2000702c
 8006fe4:	20007024 	.word	0x20007024

08006fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fec:	4b04      	ldr	r3, [pc, #16]	@ (8007000 <vTaskSuspendAll+0x18>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a03      	ldr	r2, [pc, #12]	@ (8007000 <vTaskSuspendAll+0x18>)
 8006ff4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ff6:	bf00      	nop
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20007048 	.word	0x20007048

08007004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007012:	4b42      	ldr	r3, [pc, #264]	@ (800711c <xTaskResumeAll+0x118>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <xTaskResumeAll+0x2e>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	603b      	str	r3, [r7, #0]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007032:	f001 f961 	bl	80082f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007036:	4b39      	ldr	r3, [pc, #228]	@ (800711c <xTaskResumeAll+0x118>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3b01      	subs	r3, #1
 800703c:	4a37      	ldr	r2, [pc, #220]	@ (800711c <xTaskResumeAll+0x118>)
 800703e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007040:	4b36      	ldr	r3, [pc, #216]	@ (800711c <xTaskResumeAll+0x118>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d162      	bne.n	800710e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007048:	4b35      	ldr	r3, [pc, #212]	@ (8007120 <xTaskResumeAll+0x11c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05e      	beq.n	800710e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007050:	e02f      	b.n	80070b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007052:	4b34      	ldr	r3, [pc, #208]	@ (8007124 <xTaskResumeAll+0x120>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3318      	adds	r3, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff f83a 	bl	80060d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff f835 	bl	80060d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007072:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <xTaskResumeAll+0x124>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <xTaskResumeAll+0x7e>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4a2a      	ldr	r2, [pc, #168]	@ (8007128 <xTaskResumeAll+0x124>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a27      	ldr	r2, [pc, #156]	@ (800712c <xTaskResumeAll+0x128>)
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fe ffc0 	bl	800601e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a2:	4b23      	ldr	r3, [pc, #140]	@ (8007130 <xTaskResumeAll+0x12c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80070ac:	4b21      	ldr	r3, [pc, #132]	@ (8007134 <xTaskResumeAll+0x130>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007124 <xTaskResumeAll+0x120>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1cb      	bne.n	8007052 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070c0:	f000 fb8e 	bl	80077e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007138 <xTaskResumeAll+0x134>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d010      	beq.n	80070f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070d0:	f000 f846 	bl	8007160 <xTaskIncrementTick>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070da:	4b16      	ldr	r3, [pc, #88]	@ (8007134 <xTaskResumeAll+0x130>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f1      	bne.n	80070d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <xTaskResumeAll+0x134>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <xTaskResumeAll+0x130>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070fe:	4b0f      	ldr	r3, [pc, #60]	@ (800713c <xTaskResumeAll+0x138>)
 8007100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800710e:	f001 f925 	bl	800835c <vPortExitCritical>

	return xAlreadyYielded;
 8007112:	68bb      	ldr	r3, [r7, #8]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20007048 	.word	0x20007048
 8007120:	20007020 	.word	0x20007020
 8007124:	20006fe0 	.word	0x20006fe0
 8007128:	20007028 	.word	0x20007028
 800712c:	20006b50 	.word	0x20006b50
 8007130:	20006b4c 	.word	0x20006b4c
 8007134:	20007034 	.word	0x20007034
 8007138:	20007030 	.word	0x20007030
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007146:	4b05      	ldr	r3, [pc, #20]	@ (800715c <xTaskGetTickCount+0x1c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800714c:	687b      	ldr	r3, [r7, #4]
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20007024 	.word	0x20007024

08007160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716a:	4b4f      	ldr	r3, [pc, #316]	@ (80072a8 <xTaskIncrementTick+0x148>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f040 8090 	bne.w	8007294 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007174:	4b4d      	ldr	r3, [pc, #308]	@ (80072ac <xTaskIncrementTick+0x14c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800717c:	4a4b      	ldr	r2, [pc, #300]	@ (80072ac <xTaskIncrementTick+0x14c>)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d121      	bne.n	80071cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007188:	4b49      	ldr	r3, [pc, #292]	@ (80072b0 <xTaskIncrementTick+0x150>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	603b      	str	r3, [r7, #0]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xTaskIncrementTick+0x46>
 80071aa:	4b41      	ldr	r3, [pc, #260]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	4b40      	ldr	r3, [pc, #256]	@ (80072b4 <xTaskIncrementTick+0x154>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3e      	ldr	r2, [pc, #248]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4a3e      	ldr	r2, [pc, #248]	@ (80072b4 <xTaskIncrementTick+0x154>)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b3e      	ldr	r3, [pc, #248]	@ (80072b8 <xTaskIncrementTick+0x158>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	4a3c      	ldr	r2, [pc, #240]	@ (80072b8 <xTaskIncrementTick+0x158>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f000 fb0a 	bl	80077e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071cc:	4b3b      	ldr	r3, [pc, #236]	@ (80072bc <xTaskIncrementTick+0x15c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d349      	bcc.n	800726a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d6:	4b36      	ldr	r3, [pc, #216]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e0:	4b36      	ldr	r3, [pc, #216]	@ (80072bc <xTaskIncrementTick+0x15c>)
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071e6:	601a      	str	r2, [r3, #0]
					break;
 80071e8:	e03f      	b.n	800726a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b31      	ldr	r3, [pc, #196]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d203      	bcs.n	800720a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007202:	4a2e      	ldr	r2, [pc, #184]	@ (80072bc <xTaskIncrementTick+0x15c>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007208:	e02f      	b.n	800726a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3304      	adds	r3, #4
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe ff62 	bl	80060d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3318      	adds	r3, #24
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe ff59 	bl	80060d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722a:	4b25      	ldr	r3, [pc, #148]	@ (80072c0 <xTaskIncrementTick+0x160>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d903      	bls.n	800723a <xTaskIncrementTick+0xda>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	4a22      	ldr	r2, [pc, #136]	@ (80072c0 <xTaskIncrementTick+0x160>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4a1f      	ldr	r2, [pc, #124]	@ (80072c4 <xTaskIncrementTick+0x164>)
 8007248:	441a      	add	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe fee4 	bl	800601e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725a:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <xTaskIncrementTick+0x168>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	429a      	cmp	r2, r3
 8007262:	d3b8      	bcc.n	80071d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007268:	e7b5      	b.n	80071d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800726a:	4b17      	ldr	r3, [pc, #92]	@ (80072c8 <xTaskIncrementTick+0x168>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007270:	4914      	ldr	r1, [pc, #80]	@ (80072c4 <xTaskIncrementTick+0x164>)
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d901      	bls.n	8007286 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007286:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <xTaskIncrementTick+0x16c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e004      	b.n	800729e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007294:	4b0e      	ldr	r3, [pc, #56]	@ (80072d0 <xTaskIncrementTick+0x170>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <xTaskIncrementTick+0x170>)
 800729c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800729e:	697b      	ldr	r3, [r7, #20]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20007048 	.word	0x20007048
 80072ac:	20007024 	.word	0x20007024
 80072b0:	20006fd8 	.word	0x20006fd8
 80072b4:	20006fdc 	.word	0x20006fdc
 80072b8:	20007038 	.word	0x20007038
 80072bc:	20007040 	.word	0x20007040
 80072c0:	20007028 	.word	0x20007028
 80072c4:	20006b50 	.word	0x20006b50
 80072c8:	20006b4c 	.word	0x20006b4c
 80072cc:	20007034 	.word	0x20007034
 80072d0:	20007030 	.word	0x20007030

080072d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072da:	4b2b      	ldr	r3, [pc, #172]	@ (8007388 <vTaskSwitchContext+0xb4>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072e2:	4b2a      	ldr	r3, [pc, #168]	@ (800738c <vTaskSwitchContext+0xb8>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072e8:	e047      	b.n	800737a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80072ea:	4b28      	ldr	r3, [pc, #160]	@ (800738c <vTaskSwitchContext+0xb8>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f0:	4b27      	ldr	r3, [pc, #156]	@ (8007390 <vTaskSwitchContext+0xbc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e011      	b.n	800731c <vTaskSwitchContext+0x48>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <vTaskSwitchContext+0x42>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vTaskSwitchContext+0x3e>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b01      	subs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	491d      	ldr	r1, [pc, #116]	@ (8007394 <vTaskSwitchContext+0xc0>)
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0e3      	beq.n	80072f8 <vTaskSwitchContext+0x24>
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a16      	ldr	r2, [pc, #88]	@ (8007394 <vTaskSwitchContext+0xc0>)
 800733c:	4413      	add	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	3308      	adds	r3, #8
 8007352:	429a      	cmp	r2, r3
 8007354:	d104      	bne.n	8007360 <vTaskSwitchContext+0x8c>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4a0c      	ldr	r2, [pc, #48]	@ (8007398 <vTaskSwitchContext+0xc4>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4a09      	ldr	r2, [pc, #36]	@ (8007390 <vTaskSwitchContext+0xbc>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007370:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <vTaskSwitchContext+0xc4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3354      	adds	r3, #84	@ 0x54
 8007376:	4a09      	ldr	r2, [pc, #36]	@ (800739c <vTaskSwitchContext+0xc8>)
 8007378:	6013      	str	r3, [r2, #0]
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20007048 	.word	0x20007048
 800738c:	20007034 	.word	0x20007034
 8007390:	20007028 	.word	0x20007028
 8007394:	20006b50 	.word	0x20006b50
 8007398:	20006b4c 	.word	0x20006b4c
 800739c:	20000b18 	.word	0x20000b18

080073a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	e7fd      	b.n	80073c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c8:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <vTaskPlaceOnEventList+0x48>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3318      	adds	r3, #24
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fe fe48 	bl	8006066 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073d6:	2101      	movs	r1, #1
 80073d8:	6838      	ldr	r0, [r7, #0]
 80073da:	f000 faaf 	bl	800793c <prvAddCurrentTaskToDelayedList>
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20006b4c 	.word	0x20006b4c

080073ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	617b      	str	r3, [r7, #20]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007416:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <vTaskPlaceOnEventListRestricted+0x54>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3318      	adds	r3, #24
 800741c:	4619      	mov	r1, r3
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7fe fdfd 	bl	800601e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800742a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800742e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	68b8      	ldr	r0, [r7, #8]
 8007434:	f000 fa82 	bl	800793c <prvAddCurrentTaskToDelayedList>
	}
 8007438:	bf00      	nop
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20006b4c 	.word	0x20006b4c

08007444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	60fb      	str	r3, [r7, #12]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3318      	adds	r3, #24
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fe2e 	bl	80060d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800747c:	4b1d      	ldr	r3, [pc, #116]	@ (80074f4 <xTaskRemoveFromEventList+0xb0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d11d      	bne.n	80074c0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	3304      	adds	r3, #4
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe fe25 	bl	80060d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007492:	4b19      	ldr	r3, [pc, #100]	@ (80074f8 <xTaskRemoveFromEventList+0xb4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d903      	bls.n	80074a2 <xTaskRemoveFromEventList+0x5e>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	4a16      	ldr	r2, [pc, #88]	@ (80074f8 <xTaskRemoveFromEventList+0xb4>)
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4a13      	ldr	r2, [pc, #76]	@ (80074fc <xTaskRemoveFromEventList+0xb8>)
 80074b0:	441a      	add	r2, r3
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe fdb0 	bl	800601e <vListInsertEnd>
 80074be:	e005      	b.n	80074cc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	3318      	adds	r3, #24
 80074c4:	4619      	mov	r1, r3
 80074c6:	480e      	ldr	r0, [pc, #56]	@ (8007500 <xTaskRemoveFromEventList+0xbc>)
 80074c8:	f7fe fda9 	bl	800601e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <xTaskRemoveFromEventList+0xc0>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d905      	bls.n	80074e6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074de:	4b0a      	ldr	r3, [pc, #40]	@ (8007508 <xTaskRemoveFromEventList+0xc4>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e001      	b.n	80074ea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20007048 	.word	0x20007048
 80074f8:	20007028 	.word	0x20007028
 80074fc:	20006b50 	.word	0x20006b50
 8007500:	20006fe0 	.word	0x20006fe0
 8007504:	20006b4c 	.word	0x20006b4c
 8007508:	20007034 	.word	0x20007034

0800750c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60fb      	str	r3, [r7, #12]
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	e7fd      	b.n	800752e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007532:	f000 fee1 	bl	80082f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007536:	4b07      	ldr	r3, [pc, #28]	@ (8007554 <vTaskSetTimeOutState+0x48>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800753e:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <vTaskSetTimeOutState+0x4c>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007546:	f000 ff09 	bl	800835c <vPortExitCritical>
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20007038 	.word	0x20007038
 8007558:	20007024 	.word	0x20007024

0800755c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007564:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <vTaskInternalSetTimeOutState+0x24>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800756c:	4b05      	ldr	r3, [pc, #20]	@ (8007584 <vTaskInternalSetTimeOutState+0x28>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	605a      	str	r2, [r3, #4]
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20007038 	.word	0x20007038
 8007584:	20007024 	.word	0x20007024

08007588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	613b      	str	r3, [r7, #16]
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	e7fd      	b.n	80075ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60fb      	str	r3, [r7, #12]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80075ce:	f000 fe93 	bl	80082f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <xTaskCheckForTimeOut+0xc0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075ea:	d102      	bne.n	80075f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e023      	b.n	800763a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b15      	ldr	r3, [pc, #84]	@ (800764c <xTaskCheckForTimeOut+0xc4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d007      	beq.n	800760e <xTaskCheckForTimeOut+0x86>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	429a      	cmp	r2, r3
 8007606:	d302      	bcc.n	800760e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007608:	2301      	movs	r3, #1
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e015      	b.n	800763a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	429a      	cmp	r2, r3
 8007616:	d20b      	bcs.n	8007630 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ff99 	bl	800755c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	e004      	b.n	800763a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007636:	2301      	movs	r3, #1
 8007638:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800763a:	f000 fe8f 	bl	800835c <vPortExitCritical>

	return xReturn;
 800763e:	69fb      	ldr	r3, [r7, #28]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20007024 	.word	0x20007024
 800764c:	20007038 	.word	0x20007038

08007650 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007654:	4b03      	ldr	r3, [pc, #12]	@ (8007664 <vTaskMissedYield+0x14>)
 8007656:	2201      	movs	r2, #1
 8007658:	601a      	str	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20007034 	.word	0x20007034

08007668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007670:	f000 f852 	bl	8007718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007674:	4b06      	ldr	r3, [pc, #24]	@ (8007690 <prvIdleTask+0x28>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d9f9      	bls.n	8007670 <prvIdleTask+0x8>
			{
				taskYIELD();
 800767c:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <prvIdleTask+0x2c>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800768c:	e7f0      	b.n	8007670 <prvIdleTask+0x8>
 800768e:	bf00      	nop
 8007690:	20006b50 	.word	0x20006b50
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	e00c      	b.n	80076be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4a12      	ldr	r2, [pc, #72]	@ (80076f8 <prvInitialiseTaskLists+0x60>)
 80076b0:	4413      	add	r3, r2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe fc86 	bl	8005fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3301      	adds	r3, #1
 80076bc:	607b      	str	r3, [r7, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b37      	cmp	r3, #55	@ 0x37
 80076c2:	d9ef      	bls.n	80076a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076c4:	480d      	ldr	r0, [pc, #52]	@ (80076fc <prvInitialiseTaskLists+0x64>)
 80076c6:	f7fe fc7d 	bl	8005fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076ca:	480d      	ldr	r0, [pc, #52]	@ (8007700 <prvInitialiseTaskLists+0x68>)
 80076cc:	f7fe fc7a 	bl	8005fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076d0:	480c      	ldr	r0, [pc, #48]	@ (8007704 <prvInitialiseTaskLists+0x6c>)
 80076d2:	f7fe fc77 	bl	8005fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076d6:	480c      	ldr	r0, [pc, #48]	@ (8007708 <prvInitialiseTaskLists+0x70>)
 80076d8:	f7fe fc74 	bl	8005fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076dc:	480b      	ldr	r0, [pc, #44]	@ (800770c <prvInitialiseTaskLists+0x74>)
 80076de:	f7fe fc71 	bl	8005fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <prvInitialiseTaskLists+0x78>)
 80076e4:	4a05      	ldr	r2, [pc, #20]	@ (80076fc <prvInitialiseTaskLists+0x64>)
 80076e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <prvInitialiseTaskLists+0x7c>)
 80076ea:	4a05      	ldr	r2, [pc, #20]	@ (8007700 <prvInitialiseTaskLists+0x68>)
 80076ec:	601a      	str	r2, [r3, #0]
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20006b50 	.word	0x20006b50
 80076fc:	20006fb0 	.word	0x20006fb0
 8007700:	20006fc4 	.word	0x20006fc4
 8007704:	20006fe0 	.word	0x20006fe0
 8007708:	20006ff4 	.word	0x20006ff4
 800770c:	2000700c 	.word	0x2000700c
 8007710:	20006fd8 	.word	0x20006fd8
 8007714:	20006fdc 	.word	0x20006fdc

08007718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800771e:	e019      	b.n	8007754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007720:	f000 fdea 	bl	80082f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007724:	4b10      	ldr	r3, [pc, #64]	@ (8007768 <prvCheckTasksWaitingTermination+0x50>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fcd1 	bl	80060d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007736:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <prvCheckTasksWaitingTermination+0x54>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	4a0b      	ldr	r2, [pc, #44]	@ (800776c <prvCheckTasksWaitingTermination+0x54>)
 800773e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007740:	4b0b      	ldr	r3, [pc, #44]	@ (8007770 <prvCheckTasksWaitingTermination+0x58>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3b01      	subs	r3, #1
 8007746:	4a0a      	ldr	r2, [pc, #40]	@ (8007770 <prvCheckTasksWaitingTermination+0x58>)
 8007748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800774a:	f000 fe07 	bl	800835c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f810 	bl	8007774 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007754:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <prvCheckTasksWaitingTermination+0x58>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e1      	bne.n	8007720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20006ff4 	.word	0x20006ff4
 800776c:	20007020 	.word	0x20007020
 8007770:	20007008 	.word	0x20007008

08007774 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3354      	adds	r3, #84	@ 0x54
 8007780:	4618      	mov	r0, r3
 8007782:	f00b fcf9 	bl	8013178 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800778c:	2b00      	cmp	r3, #0
 800778e:	d108      	bne.n	80077a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007794:	4618      	mov	r0, r3
 8007796:	f000 ff9f 	bl	80086d8 <vPortFree>
				vPortFree( pxTCB );
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 ff9c 	bl	80086d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077a0:	e019      	b.n	80077d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d103      	bne.n	80077b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 ff93 	bl	80086d8 <vPortFree>
	}
 80077b2:	e010      	b.n	80077d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d00b      	beq.n	80077d6 <prvDeleteTCB+0x62>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	60fb      	str	r3, [r7, #12]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <prvDeleteTCB+0x5e>
	}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <prvResetNextTaskUnblockTime+0x38>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077f0:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <prvResetNextTaskUnblockTime+0x3c>)
 80077f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077f8:	e008      	b.n	800780c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fa:	4b07      	ldr	r3, [pc, #28]	@ (8007818 <prvResetNextTaskUnblockTime+0x38>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4a04      	ldr	r2, [pc, #16]	@ (800781c <prvResetNextTaskUnblockTime+0x3c>)
 800780a:	6013      	str	r3, [r2, #0]
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	20006fd8 	.word	0x20006fd8
 800781c:	20007040 	.word	0x20007040

08007820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007826:	4b0b      	ldr	r3, [pc, #44]	@ (8007854 <xTaskGetSchedulerState+0x34>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800782e:	2301      	movs	r3, #1
 8007830:	607b      	str	r3, [r7, #4]
 8007832:	e008      	b.n	8007846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007834:	4b08      	ldr	r3, [pc, #32]	@ (8007858 <xTaskGetSchedulerState+0x38>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800783c:	2302      	movs	r3, #2
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	e001      	b.n	8007846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007846:	687b      	ldr	r3, [r7, #4]
	}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	2000702c 	.word	0x2000702c
 8007858:	20007048 	.word	0x20007048

0800785c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d058      	beq.n	8007924 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007872:	4b2f      	ldr	r3, [pc, #188]	@ (8007930 <xTaskPriorityDisinherit+0xd4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	429a      	cmp	r2, r3
 800787a:	d00b      	beq.n	8007894 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60bb      	str	r3, [r7, #8]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d02c      	beq.n	8007924 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d128      	bne.n	8007924 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fbfe 	bl	80060d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007934 <xTaskPriorityDisinherit+0xd8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d903      	bls.n	8007904 <xTaskPriorityDisinherit+0xa8>
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007900:	4a0c      	ldr	r2, [pc, #48]	@ (8007934 <xTaskPriorityDisinherit+0xd8>)
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <xTaskPriorityDisinherit+0xdc>)
 8007912:	441a      	add	r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	3304      	adds	r3, #4
 8007918:	4619      	mov	r1, r3
 800791a:	4610      	mov	r0, r2
 800791c:	f7fe fb7f 	bl	800601e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007924:	697b      	ldr	r3, [r7, #20]
	}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20006b4c 	.word	0x20006b4c
 8007934:	20007028 	.word	0x20007028
 8007938:	20006b50 	.word	0x20006b50

0800793c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007946:	4b21      	ldr	r3, [pc, #132]	@ (80079cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800794c:	4b20      	ldr	r3, [pc, #128]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fbc0 	bl	80060d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800795e:	d10a      	bne.n	8007976 <prvAddCurrentTaskToDelayedList+0x3a>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007966:	4b1a      	ldr	r3, [pc, #104]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4819      	ldr	r0, [pc, #100]	@ (80079d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007970:	f7fe fb55 	bl	800601e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007974:	e026      	b.n	80079c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800797e:	4b14      	ldr	r3, [pc, #80]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d209      	bcs.n	80079a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800798e:	4b12      	ldr	r3, [pc, #72]	@ (80079d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b0f      	ldr	r3, [pc, #60]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe fb63 	bl	8006066 <vListInsert>
}
 80079a0:	e010      	b.n	80079c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079a2:	4b0e      	ldr	r3, [pc, #56]	@ (80079dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4b0a      	ldr	r3, [pc, #40]	@ (80079d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fe fb59 	bl	8006066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079b4:	4b0a      	ldr	r3, [pc, #40]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d202      	bcs.n	80079c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079be:	4a08      	ldr	r2, [pc, #32]	@ (80079e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20007024 	.word	0x20007024
 80079d0:	20006b4c 	.word	0x20006b4c
 80079d4:	2000700c 	.word	0x2000700c
 80079d8:	20006fdc 	.word	0x20006fdc
 80079dc:	20006fd8 	.word	0x20006fd8
 80079e0:	20007040 	.word	0x20007040

080079e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08a      	sub	sp, #40	@ 0x28
 80079e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079ee:	f000 fb13 	bl	8008018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a68 <xTimerCreateTimerTask+0x84>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d021      	beq.n	8007a3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a02:	1d3a      	adds	r2, r7, #4
 8007a04:	f107 0108 	add.w	r1, r7, #8
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fe fabf 	bl	8005f90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	9202      	str	r2, [sp, #8]
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	2300      	movs	r3, #0
 8007a22:	460a      	mov	r2, r1
 8007a24:	4911      	ldr	r1, [pc, #68]	@ (8007a6c <xTimerCreateTimerTask+0x88>)
 8007a26:	4812      	ldr	r0, [pc, #72]	@ (8007a70 <xTimerCreateTimerTask+0x8c>)
 8007a28:	f7ff f87a 	bl	8006b20 <xTaskCreateStatic>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4a11      	ldr	r2, [pc, #68]	@ (8007a74 <xTimerCreateTimerTask+0x90>)
 8007a30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a32:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <xTimerCreateTimerTask+0x90>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10b      	bne.n	8007a5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	613b      	str	r3, [r7, #16]
}
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a5c:	697b      	ldr	r3, [r7, #20]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000707c 	.word	0x2000707c
 8007a6c:	080140bc 	.word	0x080140bc
 8007a70:	08007bb1 	.word	0x08007bb1
 8007a74:	20007080 	.word	0x20007080

08007a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	@ 0x28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	623b      	str	r3, [r7, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007aa8:	4b19      	ldr	r3, [pc, #100]	@ (8007b10 <xTimerGenericCommand+0x98>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d02a      	beq.n	8007b06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	dc18      	bgt.n	8007af4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ac2:	f7ff fead 	bl	8007820 <xTaskGetSchedulerState>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d109      	bne.n	8007ae0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007acc:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <xTimerGenericCommand+0x98>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	f107 0110 	add.w	r1, r7, #16
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad8:	f7fe fc32 	bl	8006340 <xQueueGenericSend>
 8007adc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ade:	e012      	b.n	8007b06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8007b10 <xTimerGenericCommand+0x98>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	f107 0110 	add.w	r1, r7, #16
 8007ae8:	2300      	movs	r3, #0
 8007aea:	2200      	movs	r2, #0
 8007aec:	f7fe fc28 	bl	8006340 <xQueueGenericSend>
 8007af0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007af2:	e008      	b.n	8007b06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007af4:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <xTimerGenericCommand+0x98>)
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	f107 0110 	add.w	r1, r7, #16
 8007afc:	2300      	movs	r3, #0
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	f7fe fd20 	bl	8006544 <xQueueGenericSendFromISR>
 8007b04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3728      	adds	r7, #40	@ 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	2000707c 	.word	0x2000707c

08007b14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1e:	4b23      	ldr	r3, [pc, #140]	@ (8007bac <prvProcessExpiredTimer+0x98>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe fad3 	bl	80060d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d023      	beq.n	8007b88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	18d1      	adds	r1, r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f000 f8d5 	bl	8007cfc <prvInsertTimerInActiveList>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	2100      	movs	r1, #0
 8007b62:	6978      	ldr	r0, [r7, #20]
 8007b64:	f7ff ff88 	bl	8007a78 <xTimerGenericCommand>
 8007b68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d114      	bne.n	8007b9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	6978      	ldr	r0, [r7, #20]
 8007ba0:	4798      	blx	r3
}
 8007ba2:	bf00      	nop
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20007074 	.word	0x20007074

08007bb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bb8:	f107 0308 	add.w	r3, r7, #8
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f859 	bl	8007c74 <prvGetNextExpireTime>
 8007bc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f805 	bl	8007bd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bce:	f000 f8d7 	bl	8007d80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bd2:	bf00      	nop
 8007bd4:	e7f0      	b.n	8007bb8 <prvTimerTask+0x8>
	...

08007bd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007be2:	f7ff fa01 	bl	8006fe8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007be6:	f107 0308 	add.w	r3, r7, #8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f866 	bl	8007cbc <prvSampleTimeNow>
 8007bf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d130      	bne.n	8007c5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <prvProcessTimerOrBlockTask+0x3c>
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d806      	bhi.n	8007c14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c06:	f7ff f9fd 	bl	8007004 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff ff81 	bl	8007b14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c12:	e024      	b.n	8007c5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d008      	beq.n	8007c2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c1a:	4b13      	ldr	r3, [pc, #76]	@ (8007c68 <prvProcessTimerOrBlockTask+0x90>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <prvProcessTimerOrBlockTask+0x50>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <prvProcessTimerOrBlockTask+0x52>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c6c <prvProcessTimerOrBlockTask+0x94>)
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f7fe ff3d 	bl	8006ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c3e:	f7ff f9e1 	bl	8007004 <xTaskResumeAll>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c48:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <prvProcessTimerOrBlockTask+0x98>)
 8007c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	f3bf 8f6f 	isb	sy
}
 8007c58:	e001      	b.n	8007c5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c5a:	f7ff f9d3 	bl	8007004 <xTaskResumeAll>
}
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20007078 	.word	0x20007078
 8007c6c:	2000707c 	.word	0x2000707c
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb8 <prvGetNextExpireTime+0x44>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <prvGetNextExpireTime+0x16>
 8007c86:	2201      	movs	r2, #1
 8007c88:	e000      	b.n	8007c8c <prvGetNextExpireTime+0x18>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c98:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <prvGetNextExpireTime+0x44>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	e001      	b.n	8007ca8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20007074 	.word	0x20007074

08007cbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cc4:	f7ff fa3c 	bl	8007140 <xTaskGetTickCount>
 8007cc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cca:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf8 <prvSampleTimeNow+0x3c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d205      	bcs.n	8007ce0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cd4:	f000 f93a 	bl	8007f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e002      	b.n	8007ce6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ce6:	4a04      	ldr	r2, [pc, #16]	@ (8007cf8 <prvSampleTimeNow+0x3c>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cec:	68fb      	ldr	r3, [r7, #12]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20007084 	.word	0x20007084

08007cfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d812      	bhi.n	8007d48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	e01b      	b.n	8007d6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d36:	4b10      	ldr	r3, [pc, #64]	@ (8007d78 <prvInsertTimerInActiveList+0x7c>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7fe f990 	bl	8006066 <vListInsert>
 8007d46:	e012      	b.n	8007d6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d206      	bcs.n	8007d5e <prvInsertTimerInActiveList+0x62>
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d302      	bcc.n	8007d5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	e007      	b.n	8007d6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d5e:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <prvInsertTimerInActiveList+0x80>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fe f97c 	bl	8006066 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d6e:	697b      	ldr	r3, [r7, #20]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	20007078 	.word	0x20007078
 8007d7c:	20007074 	.word	0x20007074

08007d80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08e      	sub	sp, #56	@ 0x38
 8007d84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d86:	e0ce      	b.n	8007f26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da19      	bge.n	8007dc2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d8e:	1d3b      	adds	r3, r7, #4
 8007d90:	3304      	adds	r3, #4
 8007d92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	61fb      	str	r3, [r7, #28]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db8:	6850      	ldr	r0, [r2, #4]
 8007dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dbc:	6892      	ldr	r2, [r2, #8]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f2c0 80ae 	blt.w	8007f26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe f97c 	bl	80060d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007de0:	463b      	mov	r3, r7
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff ff6a 	bl	8007cbc <prvSampleTimeNow>
 8007de8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	f200 8097 	bhi.w	8007f20 <prvProcessReceivedCommands+0x1a0>
 8007df2:	a201      	add	r2, pc, #4	@ (adr r2, 8007df8 <prvProcessReceivedCommands+0x78>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e21 	.word	0x08007e21
 8007e04:	08007e97 	.word	0x08007e97
 8007e08:	08007eab 	.word	0x08007eab
 8007e0c:	08007ef7 	.word	0x08007ef7
 8007e10:	08007e21 	.word	0x08007e21
 8007e14:	08007e21 	.word	0x08007e21
 8007e18:	08007e97 	.word	0x08007e97
 8007e1c:	08007eab 	.word	0x08007eab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e26:	f043 0301 	orr.w	r3, r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	18d1      	adds	r1, r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e40:	f7ff ff5c 	bl	8007cfc <prvInsertTimerInActiveList>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d06c      	beq.n	8007f24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d061      	beq.n	8007f24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	441a      	add	r2, r3
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e72:	f7ff fe01 	bl	8007a78 <xTimerGenericCommand>
 8007e76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d152      	bne.n	8007f24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	61bb      	str	r3, [r7, #24]
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	e7fd      	b.n	8007e92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ea8:	e03d      	b.n	8007f26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	617b      	str	r3, [r7, #20]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	699a      	ldr	r2, [r3, #24]
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	18d1      	adds	r1, r2, r3
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ef0:	f7ff ff04 	bl	8007cfc <prvInsertTimerInActiveList>
					break;
 8007ef4:	e017      	b.n	8007f26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d103      	bne.n	8007f0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007f04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f06:	f000 fbe7 	bl	80086d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f0a:	e00c      	b.n	8007f26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f12:	f023 0301 	bic.w	r3, r3, #1
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f1e:	e002      	b.n	8007f26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f26:	4b08      	ldr	r3, [pc, #32]	@ (8007f48 <prvProcessReceivedCommands+0x1c8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	1d39      	adds	r1, r7, #4
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fba6 	bl	8006680 <xQueueReceive>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f47f af26 	bne.w	8007d88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	3730      	adds	r7, #48	@ 0x30
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	2000707c 	.word	0x2000707c

08007f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f52:	e049      	b.n	8007fe8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f54:	4b2e      	ldr	r3, [pc, #184]	@ (8008010 <prvSwitchTimerLists+0xc4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8008010 <prvSwitchTimerLists+0xc4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fe f8b3 	bl	80060d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d02f      	beq.n	8007fe8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d90e      	bls.n	8007fb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8008010 <prvSwitchTimerLists+0xc4>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3304      	adds	r3, #4
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	f7fe f858 	bl	8006066 <vListInsert>
 8007fb6:	e017      	b.n	8007fe8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff fd58 	bl	8007a78 <xTimerGenericCommand>
 8007fc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	603b      	str	r3, [r7, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fe8:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <prvSwitchTimerLists+0xc4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1b0      	bne.n	8007f54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ff2:	4b07      	ldr	r3, [pc, #28]	@ (8008010 <prvSwitchTimerLists+0xc4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ff8:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <prvSwitchTimerLists+0xc8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a04      	ldr	r2, [pc, #16]	@ (8008010 <prvSwitchTimerLists+0xc4>)
 8007ffe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008000:	4a04      	ldr	r2, [pc, #16]	@ (8008014 <prvSwitchTimerLists+0xc8>)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6013      	str	r3, [r2, #0]
}
 8008006:	bf00      	nop
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20007074 	.word	0x20007074
 8008014:	20007078 	.word	0x20007078

08008018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800801e:	f000 f96b 	bl	80082f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008022:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <prvCheckForValidListAndQueue+0x60>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d120      	bne.n	800806c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800802a:	4814      	ldr	r0, [pc, #80]	@ (800807c <prvCheckForValidListAndQueue+0x64>)
 800802c:	f7fd ffca 	bl	8005fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008030:	4813      	ldr	r0, [pc, #76]	@ (8008080 <prvCheckForValidListAndQueue+0x68>)
 8008032:	f7fd ffc7 	bl	8005fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008036:	4b13      	ldr	r3, [pc, #76]	@ (8008084 <prvCheckForValidListAndQueue+0x6c>)
 8008038:	4a10      	ldr	r2, [pc, #64]	@ (800807c <prvCheckForValidListAndQueue+0x64>)
 800803a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800803c:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <prvCheckForValidListAndQueue+0x70>)
 800803e:	4a10      	ldr	r2, [pc, #64]	@ (8008080 <prvCheckForValidListAndQueue+0x68>)
 8008040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008042:	2300      	movs	r3, #0
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4b11      	ldr	r3, [pc, #68]	@ (800808c <prvCheckForValidListAndQueue+0x74>)
 8008048:	4a11      	ldr	r2, [pc, #68]	@ (8008090 <prvCheckForValidListAndQueue+0x78>)
 800804a:	2110      	movs	r1, #16
 800804c:	200a      	movs	r0, #10
 800804e:	f7fe f8d7 	bl	8006200 <xQueueGenericCreateStatic>
 8008052:	4603      	mov	r3, r0
 8008054:	4a08      	ldr	r2, [pc, #32]	@ (8008078 <prvCheckForValidListAndQueue+0x60>)
 8008056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008058:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <prvCheckForValidListAndQueue+0x60>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d005      	beq.n	800806c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008060:	4b05      	ldr	r3, [pc, #20]	@ (8008078 <prvCheckForValidListAndQueue+0x60>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	490b      	ldr	r1, [pc, #44]	@ (8008094 <prvCheckForValidListAndQueue+0x7c>)
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fcfc 	bl	8006a64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800806c:	f000 f976 	bl	800835c <vPortExitCritical>
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	2000707c 	.word	0x2000707c
 800807c:	2000704c 	.word	0x2000704c
 8008080:	20007060 	.word	0x20007060
 8008084:	20007074 	.word	0x20007074
 8008088:	20007078 	.word	0x20007078
 800808c:	20007128 	.word	0x20007128
 8008090:	20007088 	.word	0x20007088
 8008094:	080140c4 	.word	0x080140c4

08008098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3b04      	subs	r3, #4
 80080a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3b04      	subs	r3, #4
 80080b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f023 0201 	bic.w	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3b04      	subs	r3, #4
 80080c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080c8:	4a0c      	ldr	r2, [pc, #48]	@ (80080fc <pxPortInitialiseStack+0x64>)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3b14      	subs	r3, #20
 80080d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3b04      	subs	r3, #4
 80080de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f06f 0202 	mvn.w	r2, #2
 80080e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3b20      	subs	r3, #32
 80080ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ee:	68fb      	ldr	r3, [r7, #12]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	08008101 	.word	0x08008101

08008100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800810a:	4b13      	ldr	r3, [pc, #76]	@ (8008158 <prvTaskExitError+0x58>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008112:	d00b      	beq.n	800812c <prvTaskExitError+0x2c>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <prvTaskExitError+0x28>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008140:	bf00      	nop
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0fc      	beq.n	8008142 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	20000010 	.word	0x20000010
 800815c:	00000000 	.word	0x00000000

08008160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <pxCurrentTCBConst2>)
 8008162:	6819      	ldr	r1, [r3, #0]
 8008164:	6808      	ldr	r0, [r1, #0]
 8008166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	f380 8809 	msr	PSP, r0
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f380 8811 	msr	BASEPRI, r0
 800817a:	4770      	bx	lr
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst2>:
 8008180:	20006b4c 	.word	0x20006b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008188:	4808      	ldr	r0, [pc, #32]	@ (80081ac <prvPortStartFirstTask+0x24>)
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	6800      	ldr	r0, [r0, #0]
 800818e:	f380 8808 	msr	MSP, r0
 8008192:	f04f 0000 	mov.w	r0, #0
 8008196:	f380 8814 	msr	CONTROL, r0
 800819a:	b662      	cpsie	i
 800819c:	b661      	cpsie	f
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	df00      	svc	0
 80081a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081aa:	bf00      	nop
 80081ac:	e000ed08 	.word	0xe000ed08

080081b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081b6:	4b47      	ldr	r3, [pc, #284]	@ (80082d4 <xPortStartScheduler+0x124>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a47      	ldr	r2, [pc, #284]	@ (80082d8 <xPortStartScheduler+0x128>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10b      	bne.n	80081d8 <xPortStartScheduler+0x28>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	613b      	str	r3, [r7, #16]
}
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
 80081d6:	e7fd      	b.n	80081d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081d8:	4b3e      	ldr	r3, [pc, #248]	@ (80082d4 <xPortStartScheduler+0x124>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a3f      	ldr	r2, [pc, #252]	@ (80082dc <xPortStartScheduler+0x12c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10b      	bne.n	80081fa <xPortStartScheduler+0x4a>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60fb      	str	r3, [r7, #12]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081fa:	4b39      	ldr	r3, [pc, #228]	@ (80082e0 <xPortStartScheduler+0x130>)
 80081fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	22ff      	movs	r2, #255	@ 0xff
 800820a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800821c:	b2da      	uxtb	r2, r3
 800821e:	4b31      	ldr	r3, [pc, #196]	@ (80082e4 <xPortStartScheduler+0x134>)
 8008220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008222:	4b31      	ldr	r3, [pc, #196]	@ (80082e8 <xPortStartScheduler+0x138>)
 8008224:	2207      	movs	r2, #7
 8008226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008228:	e009      	b.n	800823e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800822a:	4b2f      	ldr	r3, [pc, #188]	@ (80082e8 <xPortStartScheduler+0x138>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3b01      	subs	r3, #1
 8008230:	4a2d      	ldr	r2, [pc, #180]	@ (80082e8 <xPortStartScheduler+0x138>)
 8008232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	b2db      	uxtb	r3, r3
 800823c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008246:	2b80      	cmp	r3, #128	@ 0x80
 8008248:	d0ef      	beq.n	800822a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800824a:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <xPortStartScheduler+0x138>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1c3 0307 	rsb	r3, r3, #7
 8008252:	2b04      	cmp	r3, #4
 8008254:	d00b      	beq.n	800826e <xPortStartScheduler+0xbe>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	60bb      	str	r3, [r7, #8]
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	e7fd      	b.n	800826a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800826e:	4b1e      	ldr	r3, [pc, #120]	@ (80082e8 <xPortStartScheduler+0x138>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	4a1c      	ldr	r2, [pc, #112]	@ (80082e8 <xPortStartScheduler+0x138>)
 8008276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008278:	4b1b      	ldr	r3, [pc, #108]	@ (80082e8 <xPortStartScheduler+0x138>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008280:	4a19      	ldr	r2, [pc, #100]	@ (80082e8 <xPortStartScheduler+0x138>)
 8008282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	b2da      	uxtb	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800828c:	4b17      	ldr	r3, [pc, #92]	@ (80082ec <xPortStartScheduler+0x13c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a16      	ldr	r2, [pc, #88]	@ (80082ec <xPortStartScheduler+0x13c>)
 8008292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008298:	4b14      	ldr	r3, [pc, #80]	@ (80082ec <xPortStartScheduler+0x13c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a13      	ldr	r2, [pc, #76]	@ (80082ec <xPortStartScheduler+0x13c>)
 800829e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082a4:	f000 f8da 	bl	800845c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082a8:	4b11      	ldr	r3, [pc, #68]	@ (80082f0 <xPortStartScheduler+0x140>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082ae:	f000 f8f9 	bl	80084a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082b2:	4b10      	ldr	r3, [pc, #64]	@ (80082f4 <xPortStartScheduler+0x144>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a0f      	ldr	r2, [pc, #60]	@ (80082f4 <xPortStartScheduler+0x144>)
 80082b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082be:	f7ff ff63 	bl	8008188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082c2:	f7ff f807 	bl	80072d4 <vTaskSwitchContext>
	prvTaskExitError();
 80082c6:	f7ff ff1b 	bl	8008100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	e000ed00 	.word	0xe000ed00
 80082d8:	410fc271 	.word	0x410fc271
 80082dc:	410fc270 	.word	0x410fc270
 80082e0:	e000e400 	.word	0xe000e400
 80082e4:	20007178 	.word	0x20007178
 80082e8:	2000717c 	.word	0x2000717c
 80082ec:	e000ed20 	.word	0xe000ed20
 80082f0:	20000010 	.word	0x20000010
 80082f4:	e000ef34 	.word	0xe000ef34

080082f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
}
 8008310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008312:	4b10      	ldr	r3, [pc, #64]	@ (8008354 <vPortEnterCritical+0x5c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	4a0e      	ldr	r2, [pc, #56]	@ (8008354 <vPortEnterCritical+0x5c>)
 800831a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800831c:	4b0d      	ldr	r3, [pc, #52]	@ (8008354 <vPortEnterCritical+0x5c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d110      	bne.n	8008346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008324:	4b0c      	ldr	r3, [pc, #48]	@ (8008358 <vPortEnterCritical+0x60>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00b      	beq.n	8008346 <vPortEnterCritical+0x4e>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	603b      	str	r3, [r7, #0]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <vPortEnterCritical+0x4a>
	}
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000010 	.word	0x20000010
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <vPortExitCritical+0x50>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <vPortExitCritical+0x26>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	607b      	str	r3, [r7, #4]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008382:	4b0a      	ldr	r3, [pc, #40]	@ (80083ac <vPortExitCritical+0x50>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3b01      	subs	r3, #1
 8008388:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <vPortExitCritical+0x50>)
 800838a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800838c:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <vPortExitCritical+0x50>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <vPortExitCritical+0x44>
 8008394:	2300      	movs	r3, #0
 8008396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f383 8811 	msr	BASEPRI, r3
}
 800839e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20000010 	.word	0x20000010

080083b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083b0:	f3ef 8009 	mrs	r0, PSP
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4b15      	ldr	r3, [pc, #84]	@ (8008410 <pxCurrentTCBConst>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	f01e 0f10 	tst.w	lr, #16
 80083c0:	bf08      	it	eq
 80083c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083d4:	f380 8811 	msr	BASEPRI, r0
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f7fe ff78 	bl	80072d4 <vTaskSwitchContext>
 80083e4:	f04f 0000 	mov.w	r0, #0
 80083e8:	f380 8811 	msr	BASEPRI, r0
 80083ec:	bc09      	pop	{r0, r3}
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	6808      	ldr	r0, [r1, #0]
 80083f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f6:	f01e 0f10 	tst.w	lr, #16
 80083fa:	bf08      	it	eq
 80083fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008400:	f380 8809 	msr	PSP, r0
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w

08008410 <pxCurrentTCBConst>:
 8008410:	20006b4c 	.word	0x20006b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008432:	f7fe fe95 	bl	8007160 <xTaskIncrementTick>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800843c:	4b06      	ldr	r3, [pc, #24]	@ (8008458 <xPortSysTickHandler+0x40>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f383 8811 	msr	BASEPRI, r3
}
 800844e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008460:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <vPortSetupTimerInterrupt+0x34>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008466:	4b0b      	ldr	r3, [pc, #44]	@ (8008494 <vPortSetupTimerInterrupt+0x38>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <vPortSetupTimerInterrupt+0x3c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0a      	ldr	r2, [pc, #40]	@ (800849c <vPortSetupTimerInterrupt+0x40>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	099b      	lsrs	r3, r3, #6
 8008478:	4a09      	ldr	r2, [pc, #36]	@ (80084a0 <vPortSetupTimerInterrupt+0x44>)
 800847a:	3b01      	subs	r3, #1
 800847c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800847e:	4b04      	ldr	r3, [pc, #16]	@ (8008490 <vPortSetupTimerInterrupt+0x34>)
 8008480:	2207      	movs	r2, #7
 8008482:	601a      	str	r2, [r3, #0]
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000e010 	.word	0xe000e010
 8008494:	e000e018 	.word	0xe000e018
 8008498:	20000004 	.word	0x20000004
 800849c:	10624dd3 	.word	0x10624dd3
 80084a0:	e000e014 	.word	0xe000e014

080084a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084b4 <vPortEnableVFP+0x10>
 80084a8:	6801      	ldr	r1, [r0, #0]
 80084aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084ae:	6001      	str	r1, [r0, #0]
 80084b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084b2:	bf00      	nop
 80084b4:	e000ed88 	.word	0xe000ed88

080084b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084be:	f3ef 8305 	mrs	r3, IPSR
 80084c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b0f      	cmp	r3, #15
 80084c8:	d915      	bls.n	80084f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ca:	4a18      	ldr	r2, [pc, #96]	@ (800852c <vPortValidateInterruptPriority+0x74>)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084d4:	4b16      	ldr	r3, [pc, #88]	@ (8008530 <vPortValidateInterruptPriority+0x78>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	7afa      	ldrb	r2, [r7, #11]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d20b      	bcs.n	80084f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	e7fd      	b.n	80084f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <vPortValidateInterruptPriority+0x7c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008538 <vPortValidateInterruptPriority+0x80>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	429a      	cmp	r2, r3
 8008504:	d90b      	bls.n	800851e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	603b      	str	r3, [r7, #0]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <vPortValidateInterruptPriority+0x62>
	}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	e000e3f0 	.word	0xe000e3f0
 8008530:	20007178 	.word	0x20007178
 8008534:	e000ed0c 	.word	0xe000ed0c
 8008538:	2000717c 	.word	0x2000717c

0800853c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	@ 0x28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008544:	2300      	movs	r3, #0
 8008546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008548:	f7fe fd4e 	bl	8006fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800854c:	4b5c      	ldr	r3, [pc, #368]	@ (80086c0 <pvPortMalloc+0x184>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008554:	f000 f924 	bl	80087a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008558:	4b5a      	ldr	r3, [pc, #360]	@ (80086c4 <pvPortMalloc+0x188>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4013      	ands	r3, r2
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 8095 	bne.w	8008690 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01e      	beq.n	80085aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800856c:	2208      	movs	r2, #8
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	2b00      	cmp	r3, #0
 800857c:	d015      	beq.n	80085aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	3308      	adds	r3, #8
 8008586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00b      	beq.n	80085aa <pvPortMalloc+0x6e>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	617b      	str	r3, [r7, #20]
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	e7fd      	b.n	80085a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d06f      	beq.n	8008690 <pvPortMalloc+0x154>
 80085b0:	4b45      	ldr	r3, [pc, #276]	@ (80086c8 <pvPortMalloc+0x18c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d86a      	bhi.n	8008690 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085ba:	4b44      	ldr	r3, [pc, #272]	@ (80086cc <pvPortMalloc+0x190>)
 80085bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085be:	4b43      	ldr	r3, [pc, #268]	@ (80086cc <pvPortMalloc+0x190>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085c4:	e004      	b.n	80085d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d903      	bls.n	80085e2 <pvPortMalloc+0xa6>
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f1      	bne.n	80085c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085e2:	4b37      	ldr	r3, [pc, #220]	@ (80086c0 <pvPortMalloc+0x184>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d051      	beq.n	8008690 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2208      	movs	r2, #8
 80085f2:	4413      	add	r3, r2
 80085f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	1ad2      	subs	r2, r2, r3
 8008606:	2308      	movs	r3, #8
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	429a      	cmp	r2, r3
 800860c:	d920      	bls.n	8008650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800860e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4413      	add	r3, r2
 8008614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <pvPortMalloc+0xfc>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800864a:	69b8      	ldr	r0, [r7, #24]
 800864c:	f000 f90a 	bl	8008864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008650:	4b1d      	ldr	r3, [pc, #116]	@ (80086c8 <pvPortMalloc+0x18c>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	4a1b      	ldr	r2, [pc, #108]	@ (80086c8 <pvPortMalloc+0x18c>)
 800865c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800865e:	4b1a      	ldr	r3, [pc, #104]	@ (80086c8 <pvPortMalloc+0x18c>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b1b      	ldr	r3, [pc, #108]	@ (80086d0 <pvPortMalloc+0x194>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d203      	bcs.n	8008672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800866a:	4b17      	ldr	r3, [pc, #92]	@ (80086c8 <pvPortMalloc+0x18c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a18      	ldr	r2, [pc, #96]	@ (80086d0 <pvPortMalloc+0x194>)
 8008670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4b13      	ldr	r3, [pc, #76]	@ (80086c4 <pvPortMalloc+0x188>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	431a      	orrs	r2, r3
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008686:	4b13      	ldr	r3, [pc, #76]	@ (80086d4 <pvPortMalloc+0x198>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	4a11      	ldr	r2, [pc, #68]	@ (80086d4 <pvPortMalloc+0x198>)
 800868e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008690:	f7fe fcb8 	bl	8007004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <pvPortMalloc+0x17a>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60fb      	str	r3, [r7, #12]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <pvPortMalloc+0x176>
	return pvReturn;
 80086b6:	69fb      	ldr	r3, [r7, #28]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3728      	adds	r7, #40	@ 0x28
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	2000bfa8 	.word	0x2000bfa8
 80086c4:	2000bfbc 	.word	0x2000bfbc
 80086c8:	2000bfac 	.word	0x2000bfac
 80086cc:	2000bfa0 	.word	0x2000bfa0
 80086d0:	2000bfb0 	.word	0x2000bfb0
 80086d4:	2000bfb4 	.word	0x2000bfb4

080086d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d04f      	beq.n	800878a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086ea:	2308      	movs	r3, #8
 80086ec:	425b      	negs	r3, r3
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4413      	add	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4b25      	ldr	r3, [pc, #148]	@ (8008794 <vPortFree+0xbc>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <vPortFree+0x46>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60fb      	str	r3, [r7, #12]
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <vPortFree+0x66>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60bb      	str	r3, [r7, #8]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <vPortFree+0xbc>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01e      	beq.n	800878a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11a      	bne.n	800878a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	4b0e      	ldr	r3, [pc, #56]	@ (8008794 <vPortFree+0xbc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	43db      	mvns	r3, r3
 800875e:	401a      	ands	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008764:	f7fe fc40 	bl	8006fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <vPortFree+0xc0>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4413      	add	r3, r2
 8008772:	4a09      	ldr	r2, [pc, #36]	@ (8008798 <vPortFree+0xc0>)
 8008774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008776:	6938      	ldr	r0, [r7, #16]
 8008778:	f000 f874 	bl	8008864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800877c:	4b07      	ldr	r3, [pc, #28]	@ (800879c <vPortFree+0xc4>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	4a06      	ldr	r2, [pc, #24]	@ (800879c <vPortFree+0xc4>)
 8008784:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008786:	f7fe fc3d 	bl	8007004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800878a:	bf00      	nop
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000bfbc 	.word	0x2000bfbc
 8008798:	2000bfac 	.word	0x2000bfac
 800879c:	2000bfb8 	.word	0x2000bfb8

080087a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087a6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80087aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087ac:	4b27      	ldr	r3, [pc, #156]	@ (800884c <prvHeapInit+0xac>)
 80087ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00c      	beq.n	80087d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3307      	adds	r3, #7
 80087be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0307 	bic.w	r3, r3, #7
 80087c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	4a1f      	ldr	r2, [pc, #124]	@ (800884c <prvHeapInit+0xac>)
 80087d0:	4413      	add	r3, r2
 80087d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008850 <prvHeapInit+0xb0>)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087de:	4b1c      	ldr	r3, [pc, #112]	@ (8008850 <prvHeapInit+0xb0>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	4413      	add	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087ec:	2208      	movs	r2, #8
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0307 	bic.w	r3, r3, #7
 80087fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4a15      	ldr	r2, [pc, #84]	@ (8008854 <prvHeapInit+0xb4>)
 8008800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008802:	4b14      	ldr	r3, [pc, #80]	@ (8008854 <prvHeapInit+0xb4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2200      	movs	r2, #0
 8008808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800880a:	4b12      	ldr	r3, [pc, #72]	@ (8008854 <prvHeapInit+0xb4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008820:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <prvHeapInit+0xb4>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	4a0a      	ldr	r2, [pc, #40]	@ (8008858 <prvHeapInit+0xb8>)
 800882e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4a09      	ldr	r2, [pc, #36]	@ (800885c <prvHeapInit+0xbc>)
 8008836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008838:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <prvHeapInit+0xc0>)
 800883a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800883e:	601a      	str	r2, [r3, #0]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20007180 	.word	0x20007180
 8008850:	2000bfa0 	.word	0x2000bfa0
 8008854:	2000bfa8 	.word	0x2000bfa8
 8008858:	2000bfb0 	.word	0x2000bfb0
 800885c:	2000bfac 	.word	0x2000bfac
 8008860:	2000bfbc 	.word	0x2000bfbc

08008864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800886c:	4b28      	ldr	r3, [pc, #160]	@ (8008910 <prvInsertBlockIntoFreeList+0xac>)
 800886e:	60fb      	str	r3, [r7, #12]
 8008870:	e002      	b.n	8008878 <prvInsertBlockIntoFreeList+0x14>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	429a      	cmp	r2, r3
 8008880:	d8f7      	bhi.n	8008872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d108      	bne.n	80088a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	441a      	add	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	441a      	add	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d118      	bne.n	80088ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	4b15      	ldr	r3, [pc, #84]	@ (8008914 <prvInsertBlockIntoFreeList+0xb0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d00d      	beq.n	80088e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	441a      	add	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	e008      	b.n	80088f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008914 <prvInsertBlockIntoFreeList+0xb0>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e003      	b.n	80088f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d002      	beq.n	8008902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008902:	bf00      	nop
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	2000bfa0 	.word	0x2000bfa0
 8008914:	2000bfa8 	.word	0x2000bfa8

08008918 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008918:	4b04      	ldr	r3, [pc, #16]	@ (800892c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	b10a      	cbz	r2, 8008922 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xa>
 800891e:	4803      	ldr	r0, [pc, #12]	@ (800892c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 8008920:	4770      	bx	lr
 8008922:	4a03      	ldr	r2, [pc, #12]	@ (8008930 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x18>)
 8008924:	4801      	ldr	r0, [pc, #4]	@ (800892c <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	4770      	bx	lr
 800892c:	20000014 	.word	0x20000014
 8008930:	20000184 	.word	0x20000184

08008934 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008934:	4a02      	ldr	r2, [pc, #8]	@ (8008940 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xc>)
 8008936:	4b03      	ldr	r3, [pc, #12]	@ (8008944 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x10>)
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000184 	.word	0x20000184
 8008944:	20000014 	.word	0x20000014

08008948 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__position>:
 8008948:	6840      	ldr	r0, [r0, #4]
 800894a:	4770      	bx	lr

0800894c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__position>:
 800894c:	6800      	ldr	r0, [r0, #0]
 800894e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8008952:	4770      	bx	lr

08008954 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__position>:
 8008954:	6803      	ldr	r3, [r0, #0]
 8008956:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800895a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800895e:	e9c2 0100 	strd	r0, r1, [r2]
 8008962:	4770      	bx	lr

08008964 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__position>:
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	ed92 7b00 	vldr	d7, [r2]
 800896a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800896e:	ed83 7b00 	vstr	d7, [r3]
 8008972:	4770      	bx	lr

08008974 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_init_function>:
 8008974:	f002 b830 	b.w	800a9d8 <actuator_msgs__msg__Actuators__init>

08008978 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_fini_function>:
 8008978:	f002 b87e 	b.w	800aa78 <actuator_msgs__msg__Actuators__fini>

0800897c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__position>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4604      	mov	r4, r0
 8008980:	460d      	mov	r5, r1
 8008982:	f001 fedb 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 8008986:	4629      	mov	r1, r5
 8008988:	4620      	mov	r0, r4
 800898a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800898e:	f001 bebb 	b.w	800a708 <rosidl_runtime_c__double__Sequence__init>
 8008992:	bf00      	nop

08008994 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__normalized>:
 8008994:	6840      	ldr	r0, [r0, #4]
 8008996:	4770      	bx	lr

08008998 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__velocity>:
 8008998:	6840      	ldr	r0, [r0, #4]
 800899a:	4770      	bx	lr

0800899c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__velocity>:
 800899c:	6800      	ldr	r0, [r0, #0]
 800899e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089a2:	4770      	bx	lr

080089a4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__position>:
 80089a4:	6800      	ldr	r0, [r0, #0]
 80089a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089aa:	4770      	bx	lr

080089ac <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__normalized>:
 80089ac:	6800      	ldr	r0, [r0, #0]
 80089ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089b2:	4770      	bx	lr

080089b4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__normalized>:
 80089b4:	6800      	ldr	r0, [r0, #0]
 80089b6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089ba:	4770      	bx	lr

080089bc <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__velocity>:
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80089c2:	4770      	bx	lr

080089c4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__normalized>:
 80089c4:	6803      	ldr	r3, [r0, #0]
 80089c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089ce:	e9c2 0100 	strd	r0, r1, [r2]
 80089d2:	4770      	bx	lr

080089d4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__normalized>:
 80089d4:	6803      	ldr	r3, [r0, #0]
 80089d6:	ed92 7b00 	vldr	d7, [r2]
 80089da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089de:	ed83 7b00 	vstr	d7, [r3]
 80089e2:	4770      	bx	lr

080089e4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__velocity>:
 80089e4:	6803      	ldr	r3, [r0, #0]
 80089e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089ee:	e9c2 0100 	strd	r0, r1, [r2]
 80089f2:	4770      	bx	lr

080089f4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__velocity>:
 80089f4:	6803      	ldr	r3, [r0, #0]
 80089f6:	ed92 7b00 	vldr	d7, [r2]
 80089fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089fe:	ed83 7b00 	vstr	d7, [r3]
 8008a02:	4770      	bx	lr

08008a04 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__normalized>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4604      	mov	r4, r0
 8008a08:	460d      	mov	r5, r1
 8008a0a:	f001 fe97 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4620      	mov	r0, r4
 8008a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a16:	f001 be77 	b.w	800a708 <rosidl_runtime_c__double__Sequence__init>
 8008a1a:	bf00      	nop

08008a1c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__velocity>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	f001 fe8b 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 8008a26:	4629      	mov	r1, r5
 8008a28:	4620      	mov	r0, r4
 8008a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a2e:	f001 be6b 	b.w	800a708 <rosidl_runtime_c__double__Sequence__init>
 8008a32:	bf00      	nop

08008a34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008a34:	b508      	push	{r3, lr}
 8008a36:	f001 fec9 	bl	800a7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008a3a:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 8008a3c:	4906      	ldr	r1, [pc, #24]	@ (8008a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x24>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	60c8      	str	r0, [r1, #12]
 8008a42:	b10a      	cbz	r2, 8008a48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>
 8008a44:	4803      	ldr	r0, [pc, #12]	@ (8008a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 8008a46:	bd08      	pop	{r3, pc}
 8008a48:	4a04      	ldr	r2, [pc, #16]	@ (8008a5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x28>)
 8008a4a:	4802      	ldr	r0, [pc, #8]	@ (8008a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	bd08      	pop	{r3, pc}
 8008a52:	bf00      	nop
 8008a54:	20000034 	.word	0x20000034
 8008a58:	2000004c 	.word	0x2000004c
 8008a5c:	20000188 	.word	0x20000188

08008a60 <_Actuators__max_serialized_size>:
 8008a60:	b500      	push	{lr}
 8008a62:	b083      	sub	sp, #12
 8008a64:	2301      	movs	r3, #1
 8008a66:	2100      	movs	r1, #0
 8008a68:	f10d 0007 	add.w	r0, sp, #7
 8008a6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008a70:	f001 ff48 	bl	800a904 <max_serialized_size_std_msgs__msg__Header>
 8008a74:	b003      	add	sp, #12
 8008a76:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a7a:	bf00      	nop

08008a7c <get_serialized_size_actuator_msgs__msg__Actuators>:
 8008a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a80:	4606      	mov	r6, r0
 8008a82:	b1f8      	cbz	r0, 8008ac4 <get_serialized_size_actuator_msgs__msg__Actuators+0x48>
 8008a84:	460d      	mov	r5, r1
 8008a86:	f001 fec5 	bl	800a814 <get_serialized_size_std_msgs__msg__Header>
 8008a8a:	182f      	adds	r7, r5, r0
 8008a8c:	2104      	movs	r1, #4
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8008a94:	f000 f94a 	bl	8008d2c <ucdr_alignment>
 8008a98:	1d04      	adds	r4, r0, #4
 8008a9a:	443c      	add	r4, r7
 8008a9c:	f1b8 0f00 	cmp.w	r8, #0
 8008aa0:	d122      	bne.n	8008ae8 <get_serialized_size_actuator_msgs__msg__Actuators+0x6c>
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	2104      	movs	r1, #4
 8008aa6:	6a77      	ldr	r7, [r6, #36]	@ 0x24
 8008aa8:	f000 f940 	bl	8008d2c <ucdr_alignment>
 8008aac:	4404      	add	r4, r0
 8008aae:	3404      	adds	r4, #4
 8008ab0:	b997      	cbnz	r7, 8008ad8 <get_serialized_size_actuator_msgs__msg__Actuators+0x5c>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	2104      	movs	r1, #4
 8008ab6:	6b36      	ldr	r6, [r6, #48]	@ 0x30
 8008ab8:	f000 f938 	bl	8008d2c <ucdr_alignment>
 8008abc:	4404      	add	r4, r0
 8008abe:	3404      	adds	r4, #4
 8008ac0:	b916      	cbnz	r6, 8008ac8 <get_serialized_size_actuator_msgs__msg__Actuators+0x4c>
 8008ac2:	1b60      	subs	r0, r4, r5
 8008ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac8:	4620      	mov	r0, r4
 8008aca:	2108      	movs	r1, #8
 8008acc:	f000 f92e 	bl	8008d2c <ucdr_alignment>
 8008ad0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8008ad4:	1984      	adds	r4, r0, r6
 8008ad6:	e7f4      	b.n	8008ac2 <get_serialized_size_actuator_msgs__msg__Actuators+0x46>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	2108      	movs	r1, #8
 8008adc:	f000 f926 	bl	8008d2c <ucdr_alignment>
 8008ae0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 8008ae4:	4404      	add	r4, r0
 8008ae6:	e7e4      	b.n	8008ab2 <get_serialized_size_actuator_msgs__msg__Actuators+0x36>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	2108      	movs	r1, #8
 8008aec:	f000 f91e 	bl	8008d2c <ucdr_alignment>
 8008af0:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8008af4:	4404      	add	r4, r0
 8008af6:	e7d4      	b.n	8008aa2 <get_serialized_size_actuator_msgs__msg__Actuators+0x26>

08008af8 <_Actuators__cdr_deserialize>:
 8008af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	b083      	sub	sp, #12
 8008afe:	2900      	cmp	r1, #0
 8008b00:	d04e      	beq.n	8008ba0 <_Actuators__cdr_deserialize+0xa8>
 8008b02:	4605      	mov	r5, r0
 8008b04:	f001 ff08 	bl	800a918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008b08:	6843      	ldr	r3, [r0, #4]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	4798      	blx	r3
 8008b12:	69e6      	ldr	r6, [r4, #28]
 8008b14:	6961      	ldr	r1, [r4, #20]
 8008b16:	ab01      	add	r3, sp, #4
 8008b18:	4632      	mov	r2, r6
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f9e0 	bl	8008ee0 <ucdr_deserialize_sequence_double>
 8008b20:	9b01      	ldr	r3, [sp, #4]
 8008b22:	b9c8      	cbnz	r0, 8008b58 <_Actuators__cdr_deserialize+0x60>
 8008b24:	429e      	cmp	r6, r3
 8008b26:	d33f      	bcc.n	8008ba8 <_Actuators__cdr_deserialize+0xb0>
 8008b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b2a:	6a21      	ldr	r1, [r4, #32]
 8008b2c:	ab01      	add	r3, sp, #4
 8008b2e:	4632      	mov	r2, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	f000 f9d5 	bl	8008ee0 <ucdr_deserialize_sequence_double>
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	b310      	cbz	r0, 8008b80 <_Actuators__cdr_deserialize+0x88>
 8008b3a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b3c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8008b3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b40:	ab01      	add	r3, sp, #4
 8008b42:	463a      	mov	r2, r7
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f9cb 	bl	8008ee0 <ucdr_deserialize_sequence_double>
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	b128      	cbz	r0, 8008b5c <_Actuators__cdr_deserialize+0x64>
 8008b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b52:	4630      	mov	r0, r6
 8008b54:	b003      	add	sp, #12
 8008b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b58:	61a3      	str	r3, [r4, #24]
 8008b5a:	e7e5      	b.n	8008b28 <_Actuators__cdr_deserialize+0x30>
 8008b5c:	429f      	cmp	r7, r3
 8008b5e:	d2f8      	bcs.n	8008b52 <_Actuators__cdr_deserialize+0x5a>
 8008b60:	2301      	movs	r3, #1
 8008b62:	75a8      	strb	r0, [r5, #22]
 8008b64:	756b      	strb	r3, [r5, #21]
 8008b66:	2108      	movs	r1, #8
 8008b68:	6320      	str	r0, [r4, #48]	@ 0x30
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 f8f4 	bl	8008d58 <ucdr_align_to>
 8008b70:	9901      	ldr	r1, [sp, #4]
 8008b72:	4628      	mov	r0, r5
 8008b74:	00c9      	lsls	r1, r1, #3
 8008b76:	f000 f925 	bl	8008dc4 <ucdr_advance_buffer>
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	b003      	add	sp, #12
 8008b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b80:	429e      	cmp	r6, r3
 8008b82:	d2db      	bcs.n	8008b3c <_Actuators__cdr_deserialize+0x44>
 8008b84:	2301      	movs	r3, #1
 8008b86:	75a8      	strb	r0, [r5, #22]
 8008b88:	756b      	strb	r3, [r5, #21]
 8008b8a:	2108      	movs	r1, #8
 8008b8c:	6260      	str	r0, [r4, #36]	@ 0x24
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 f8e2 	bl	8008d58 <ucdr_align_to>
 8008b94:	9901      	ldr	r1, [sp, #4]
 8008b96:	4628      	mov	r0, r5
 8008b98:	00c9      	lsls	r1, r1, #3
 8008b9a:	f000 f913 	bl	8008dc4 <ucdr_advance_buffer>
 8008b9e:	e7cd      	b.n	8008b3c <_Actuators__cdr_deserialize+0x44>
 8008ba0:	460e      	mov	r6, r1
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	b003      	add	sp, #12
 8008ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba8:	2301      	movs	r3, #1
 8008baa:	75a8      	strb	r0, [r5, #22]
 8008bac:	756b      	strb	r3, [r5, #21]
 8008bae:	2108      	movs	r1, #8
 8008bb0:	61a0      	str	r0, [r4, #24]
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f8d0 	bl	8008d58 <ucdr_align_to>
 8008bb8:	9901      	ldr	r1, [sp, #4]
 8008bba:	4628      	mov	r0, r5
 8008bbc:	00c9      	lsls	r1, r1, #3
 8008bbe:	f000 f901 	bl	8008dc4 <ucdr_advance_buffer>
 8008bc2:	e7b1      	b.n	8008b28 <_Actuators__cdr_deserialize+0x30>

08008bc4 <_Actuators__cdr_serialize>:
 8008bc4:	b1d0      	cbz	r0, 8008bfc <_Actuators__cdr_serialize+0x38>
 8008bc6:	b538      	push	{r3, r4, r5, lr}
 8008bc8:	460d      	mov	r5, r1
 8008bca:	4604      	mov	r4, r0
 8008bcc:	f001 fea4 	bl	800a918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8008bd0:	6843      	ldr	r3, [r0, #4]
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4798      	blx	r3
 8008bda:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 f96c 	bl	8008ebc <ucdr_serialize_sequence_double>
 8008be4:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8008be8:	4628      	mov	r0, r5
 8008bea:	f000 f967 	bl	8008ebc <ucdr_serialize_sequence_double>
 8008bee:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf8:	f000 b960 	b.w	8008ebc <ucdr_serialize_sequence_double>
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop

08008c00 <_Actuators__get_serialized_size>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4605      	mov	r5, r0
 8008c04:	b1d0      	cbz	r0, 8008c3c <_Actuators__get_serialized_size+0x3c>
 8008c06:	2100      	movs	r1, #0
 8008c08:	f001 fe04 	bl	800a814 <get_serialized_size_std_msgs__msg__Header>
 8008c0c:	2104      	movs	r1, #4
 8008c0e:	4604      	mov	r4, r0
 8008c10:	69ae      	ldr	r6, [r5, #24]
 8008c12:	f000 f88b 	bl	8008d2c <ucdr_alignment>
 8008c16:	4404      	add	r4, r0
 8008c18:	3404      	adds	r4, #4
 8008c1a:	bb16      	cbnz	r6, 8008c62 <_Actuators__get_serialized_size+0x62>
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	2104      	movs	r1, #4
 8008c20:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8008c22:	f000 f883 	bl	8008d2c <ucdr_alignment>
 8008c26:	4404      	add	r4, r0
 8008c28:	3404      	adds	r4, #4
 8008c2a:	b996      	cbnz	r6, 8008c52 <_Actuators__get_serialized_size+0x52>
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	2104      	movs	r1, #4
 8008c30:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8008c32:	f000 f87b 	bl	8008d2c <ucdr_alignment>
 8008c36:	4404      	add	r4, r0
 8008c38:	1d25      	adds	r5, r4, #4
 8008c3a:	b90e      	cbnz	r6, 8008c40 <_Actuators__get_serialized_size+0x40>
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	2108      	movs	r1, #8
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 f872 	bl	8008d2c <ucdr_alignment>
 8008c48:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8008c4c:	4405      	add	r5, r0
 8008c4e:	4628      	mov	r0, r5
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	4620      	mov	r0, r4
 8008c54:	2108      	movs	r1, #8
 8008c56:	f000 f869 	bl	8008d2c <ucdr_alignment>
 8008c5a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008c5e:	4404      	add	r4, r0
 8008c60:	e7e4      	b.n	8008c2c <_Actuators__get_serialized_size+0x2c>
 8008c62:	4620      	mov	r0, r4
 8008c64:	2108      	movs	r1, #8
 8008c66:	f000 f861 	bl	8008d2c <ucdr_alignment>
 8008c6a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008c6e:	4404      	add	r4, r0
 8008c70:	e7d4      	b.n	8008c1c <_Actuators__get_serialized_size+0x1c>
 8008c72:	bf00      	nop

08008c74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 8008c74:	4800      	ldr	r0, [pc, #0]	@ (8008c78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x4>)
 8008c76:	4770      	bx	lr
 8008c78:	2000013c 	.word	0x2000013c

08008c7c <ucdr_check_buffer_available_for>:
 8008c7c:	7d83      	ldrb	r3, [r0, #22]
 8008c7e:	b93b      	cbnz	r3, 8008c90 <ucdr_check_buffer_available_for+0x14>
 8008c80:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008c84:	440b      	add	r3, r1
 8008c86:	4298      	cmp	r0, r3
 8008c88:	bf34      	ite	cc
 8008c8a:	2000      	movcc	r0, #0
 8008c8c:	2001      	movcs	r0, #1
 8008c8e:	4770      	bx	lr
 8008c90:	2000      	movs	r0, #0
 8008c92:	4770      	bx	lr

08008c94 <ucdr_check_final_buffer_behavior>:
 8008c94:	7d83      	ldrb	r3, [r0, #22]
 8008c96:	b943      	cbnz	r3, 8008caa <ucdr_check_final_buffer_behavior+0x16>
 8008c98:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008c9c:	4291      	cmp	r1, r2
 8008c9e:	b510      	push	{r4, lr}
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	d205      	bcs.n	8008cb0 <ucdr_check_final_buffer_behavior+0x1c>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	2300      	movs	r3, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	4770      	bx	lr
 8008cb0:	6982      	ldr	r2, [r0, #24]
 8008cb2:	b13a      	cbz	r2, 8008cc4 <ucdr_check_final_buffer_behavior+0x30>
 8008cb4:	69c1      	ldr	r1, [r0, #28]
 8008cb6:	4790      	blx	r2
 8008cb8:	f080 0301 	eor.w	r3, r0, #1
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	75a0      	strb	r0, [r4, #22]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	bd10      	pop	{r4, pc}
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	75a0      	strb	r0, [r4, #22]
 8008cc8:	e7fa      	b.n	8008cc0 <ucdr_check_final_buffer_behavior+0x2c>
 8008cca:	bf00      	nop

08008ccc <ucdr_set_on_full_buffer_callback>:
 8008ccc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop

08008cd4 <ucdr_init_buffer_origin_offset_endian>:
 8008cd4:	b410      	push	{r4}
 8008cd6:	9c01      	ldr	r4, [sp, #4]
 8008cd8:	6001      	str	r1, [r0, #0]
 8008cda:	440a      	add	r2, r1
 8008cdc:	6042      	str	r2, [r0, #4]
 8008cde:	190a      	adds	r2, r1, r4
 8008ce0:	441c      	add	r4, r3
 8008ce2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008ce6:	6082      	str	r2, [r0, #8]
 8008ce8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008cec:	7503      	strb	r3, [r0, #20]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf8:	7542      	strb	r2, [r0, #21]
 8008cfa:	7582      	strb	r2, [r0, #22]
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop

08008d00 <ucdr_init_buffer_origin_offset>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	9c04      	ldr	r4, [sp, #16]
 8008d06:	9400      	str	r4, [sp, #0]
 8008d08:	2401      	movs	r4, #1
 8008d0a:	9401      	str	r4, [sp, #4]
 8008d0c:	f7ff ffe2 	bl	8008cd4 <ucdr_init_buffer_origin_offset_endian>
 8008d10:	b002      	add	sp, #8
 8008d12:	bd10      	pop	{r4, pc}

08008d14 <ucdr_init_buffer_origin>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	2400      	movs	r4, #0
 8008d1a:	9400      	str	r4, [sp, #0]
 8008d1c:	f7ff fff0 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 8008d20:	b002      	add	sp, #8
 8008d22:	bd10      	pop	{r4, pc}

08008d24 <ucdr_init_buffer>:
 8008d24:	2300      	movs	r3, #0
 8008d26:	f7ff bff5 	b.w	8008d14 <ucdr_init_buffer_origin>
 8008d2a:	bf00      	nop

08008d2c <ucdr_alignment>:
 8008d2c:	fbb0 f3f1 	udiv	r3, r0, r1
 8008d30:	fb03 0011 	mls	r0, r3, r1, r0
 8008d34:	1a08      	subs	r0, r1, r0
 8008d36:	3901      	subs	r1, #1
 8008d38:	4008      	ands	r0, r1
 8008d3a:	4770      	bx	lr

08008d3c <ucdr_buffer_alignment>:
 8008d3c:	7d43      	ldrb	r3, [r0, #21]
 8008d3e:	428b      	cmp	r3, r1
 8008d40:	d208      	bcs.n	8008d54 <ucdr_buffer_alignment+0x18>
 8008d42:	6900      	ldr	r0, [r0, #16]
 8008d44:	fbb0 f3f1 	udiv	r3, r0, r1
 8008d48:	fb01 0013 	mls	r0, r1, r3, r0
 8008d4c:	1a08      	subs	r0, r1, r0
 8008d4e:	3901      	subs	r1, #1
 8008d50:	4008      	ands	r0, r1
 8008d52:	4770      	bx	lr
 8008d54:	2000      	movs	r0, #0
 8008d56:	4770      	bx	lr

08008d58 <ucdr_align_to>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	f7ff ffed 	bl	8008d3c <ucdr_buffer_alignment>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	6861      	ldr	r1, [r4, #4]
 8008d66:	6922      	ldr	r2, [r4, #16]
 8008d68:	7565      	strb	r5, [r4, #21]
 8008d6a:	4403      	add	r3, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf28      	it	cs
 8008d70:	460b      	movcs	r3, r1
 8008d72:	4402      	add	r2, r0
 8008d74:	60a3      	str	r3, [r4, #8]
 8008d76:	6122      	str	r2, [r4, #16]
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop

08008d7c <ucdr_buffer_length>:
 8008d7c:	6882      	ldr	r2, [r0, #8]
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	1a10      	subs	r0, r2, r0
 8008d82:	4770      	bx	lr

08008d84 <ucdr_buffer_remaining>:
 8008d84:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008d88:	1a10      	subs	r0, r2, r0
 8008d8a:	4770      	bx	lr

08008d8c <ucdr_check_final_buffer_behavior_array>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	7d83      	ldrb	r3, [r0, #22]
 8008d90:	b963      	cbnz	r3, 8008dac <ucdr_check_final_buffer_behavior_array+0x20>
 8008d92:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	4604      	mov	r4, r0
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	d308      	bcc.n	8008db0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008d9e:	b139      	cbz	r1, 8008db0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008da0:	6983      	ldr	r3, [r0, #24]
 8008da2:	b163      	cbz	r3, 8008dbe <ucdr_check_final_buffer_behavior_array+0x32>
 8008da4:	69c1      	ldr	r1, [r0, #28]
 8008da6:	4798      	blx	r3
 8008da8:	75a0      	strb	r0, [r4, #22]
 8008daa:	b108      	cbz	r0, 8008db0 <ucdr_check_final_buffer_behavior_array+0x24>
 8008dac:	2000      	movs	r0, #0
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7ff ffe7 	bl	8008d84 <ucdr_buffer_remaining>
 8008db6:	42a8      	cmp	r0, r5
 8008db8:	bf28      	it	cs
 8008dba:	4628      	movcs	r0, r5
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	7583      	strb	r3, [r0, #22]
 8008dc2:	e7f3      	b.n	8008dac <ucdr_check_final_buffer_behavior_array+0x20>

08008dc4 <ucdr_advance_buffer>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	f7ff ff57 	bl	8008c7c <ucdr_check_buffer_available_for>
 8008dce:	b178      	cbz	r0, 8008df0 <ucdr_advance_buffer+0x2c>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	68a2      	ldr	r2, [r4, #8]
 8008dd4:	442b      	add	r3, r5
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	2301      	movs	r3, #1
 8008dda:	442a      	add	r2, r5
 8008ddc:	7563      	strb	r3, [r4, #21]
 8008dde:	60a2      	str	r2, [r4, #8]
 8008de0:	bd38      	pop	{r3, r4, r5, pc}
 8008de2:	68a2      	ldr	r2, [r4, #8]
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	4402      	add	r2, r0
 8008de8:	4403      	add	r3, r0
 8008dea:	1a2d      	subs	r5, r5, r0
 8008dec:	60a2      	str	r2, [r4, #8]
 8008dee:	6123      	str	r3, [r4, #16]
 8008df0:	2201      	movs	r2, #1
 8008df2:	4629      	mov	r1, r5
 8008df4:	4620      	mov	r0, r4
 8008df6:	f7ff ffc9 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d1f1      	bne.n	8008de2 <ucdr_advance_buffer+0x1e>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	7563      	strb	r3, [r4, #21]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}

08008e04 <ucdr_serialize_sequence_char>:
 8008e04:	b570      	push	{r4, r5, r6, lr}
 8008e06:	460e      	mov	r6, r1
 8008e08:	4615      	mov	r5, r2
 8008e0a:	7d01      	ldrb	r1, [r0, #20]
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	f002 fbab 	bl	800b568 <ucdr_serialize_endian_uint32_t>
 8008e12:	b90d      	cbnz	r5, 8008e18 <ucdr_serialize_sequence_char+0x14>
 8008e14:	2001      	movs	r0, #1
 8008e16:	bd70      	pop	{r4, r5, r6, pc}
 8008e18:	7d21      	ldrb	r1, [r4, #20]
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4620      	mov	r0, r4
 8008e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e24:	f001 bee6 	b.w	800abf4 <ucdr_serialize_endian_array_char>

08008e28 <ucdr_deserialize_sequence_char>:
 8008e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2c:	461d      	mov	r5, r3
 8008e2e:	4616      	mov	r6, r2
 8008e30:	460f      	mov	r7, r1
 8008e32:	461a      	mov	r2, r3
 8008e34:	7d01      	ldrb	r1, [r0, #20]
 8008e36:	4604      	mov	r4, r0
 8008e38:	f002 fcb4 	bl	800b7a4 <ucdr_deserialize_endian_uint32_t>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	429e      	cmp	r6, r3
 8008e40:	d208      	bcs.n	8008e54 <ucdr_deserialize_sequence_char+0x2c>
 8008e42:	2201      	movs	r2, #1
 8008e44:	75a2      	strb	r2, [r4, #22]
 8008e46:	7d21      	ldrb	r1, [r4, #20]
 8008e48:	463a      	mov	r2, r7
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	f001 bf02 	b.w	800ac58 <ucdr_deserialize_endian_array_char>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1f6      	bne.n	8008e46 <ucdr_deserialize_sequence_char+0x1e>
 8008e58:	2001      	movs	r0, #1
 8008e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5e:	bf00      	nop

08008e60 <ucdr_serialize_sequence_uint8_t>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	4615      	mov	r5, r2
 8008e66:	7d01      	ldrb	r1, [r0, #20]
 8008e68:	4604      	mov	r4, r0
 8008e6a:	f002 fb7d 	bl	800b568 <ucdr_serialize_endian_uint32_t>
 8008e6e:	b90d      	cbnz	r5, 8008e74 <ucdr_serialize_sequence_uint8_t+0x14>
 8008e70:	2001      	movs	r0, #1
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	7d21      	ldrb	r1, [r4, #20]
 8008e76:	462b      	mov	r3, r5
 8008e78:	4632      	mov	r2, r6
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e80:	f001 bf4e 	b.w	800ad20 <ucdr_serialize_endian_array_uint8_t>

08008e84 <ucdr_deserialize_sequence_uint8_t>:
 8008e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e88:	461d      	mov	r5, r3
 8008e8a:	4616      	mov	r6, r2
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	461a      	mov	r2, r3
 8008e90:	7d01      	ldrb	r1, [r0, #20]
 8008e92:	4604      	mov	r4, r0
 8008e94:	f002 fc86 	bl	800b7a4 <ucdr_deserialize_endian_uint32_t>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	429e      	cmp	r6, r3
 8008e9c:	d208      	bcs.n	8008eb0 <ucdr_deserialize_sequence_uint8_t+0x2c>
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	75a2      	strb	r2, [r4, #22]
 8008ea2:	7d21      	ldrb	r1, [r4, #20]
 8008ea4:	463a      	mov	r2, r7
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	f001 bf9c 	b.w	800ade8 <ucdr_deserialize_endian_array_uint8_t>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f6      	bne.n	8008ea2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eba:	bf00      	nop

08008ebc <ucdr_serialize_sequence_double>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	460e      	mov	r6, r1
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	7d01      	ldrb	r1, [r0, #20]
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	f002 fb4f 	bl	800b568 <ucdr_serialize_endian_uint32_t>
 8008eca:	b90d      	cbnz	r5, 8008ed0 <ucdr_serialize_sequence_double+0x14>
 8008ecc:	2001      	movs	r0, #1
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	7d21      	ldrb	r1, [r4, #20]
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008edc:	f001 bfb6 	b.w	800ae4c <ucdr_serialize_endian_array_double>

08008ee0 <ucdr_deserialize_sequence_double>:
 8008ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee4:	461d      	mov	r5, r3
 8008ee6:	4616      	mov	r6, r2
 8008ee8:	460f      	mov	r7, r1
 8008eea:	461a      	mov	r2, r3
 8008eec:	7d01      	ldrb	r1, [r0, #20]
 8008eee:	4604      	mov	r4, r0
 8008ef0:	f002 fc58 	bl	800b7a4 <ucdr_deserialize_endian_uint32_t>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	429e      	cmp	r6, r3
 8008ef8:	d208      	bcs.n	8008f0c <ucdr_deserialize_sequence_double+0x2c>
 8008efa:	2201      	movs	r2, #1
 8008efc:	75a2      	strb	r2, [r4, #22]
 8008efe:	7d21      	ldrb	r1, [r4, #20]
 8008f00:	463a      	mov	r2, r7
 8008f02:	4620      	mov	r0, r4
 8008f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	f001 bff4 	b.w	800aef4 <ucdr_deserialize_endian_array_double>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f6      	bne.n	8008efe <ucdr_deserialize_sequence_double+0x1e>
 8008f10:	2001      	movs	r0, #1
 8008f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f16:	bf00      	nop

08008f18 <rcl_get_zero_initialized_init_options>:
 8008f18:	2000      	movs	r0, #0
 8008f1a:	4770      	bx	lr

08008f1c <rcl_init_options_init>:
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	b570      	push	{r4, r5, r6, lr}
 8008f20:	b09e      	sub	sp, #120	@ 0x78
 8008f22:	ad23      	add	r5, sp, #140	@ 0x8c
 8008f24:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d046      	beq.n	8008fba <rcl_init_options_init+0x9e>
 8008f2c:	6803      	ldr	r3, [r0, #0]
 8008f2e:	4604      	mov	r4, r0
 8008f30:	b133      	cbz	r3, 8008f40 <rcl_init_options_init+0x24>
 8008f32:	2564      	movs	r5, #100	@ 0x64
 8008f34:	4628      	mov	r0, r5
 8008f36:	b01e      	add	sp, #120	@ 0x78
 8008f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f3c:	b004      	add	sp, #16
 8008f3e:	4770      	bx	lr
 8008f40:	4628      	mov	r0, r5
 8008f42:	f000 fab7 	bl	80094b4 <rcutils_allocator_is_valid>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d037      	beq.n	8008fba <rcl_init_options_init+0x9e>
 8008f4a:	46ae      	mov	lr, r5
 8008f4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008f50:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8008f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f58:	f8de 3000 	ldr.w	r3, [lr]
 8008f5c:	f8cc 3000 	str.w	r3, [ip]
 8008f60:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8008f62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f64:	2070      	movs	r0, #112	@ 0x70
 8008f66:	4798      	blx	r3
 8008f68:	4606      	mov	r6, r0
 8008f6a:	6020      	str	r0, [r4, #0]
 8008f6c:	b338      	cbz	r0, 8008fbe <rcl_init_options_init+0xa2>
 8008f6e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8008f72:	4686      	mov	lr, r0
 8008f74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008f78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008f7c:	f8dc 3000 	ldr.w	r3, [ip]
 8008f80:	f8ce 3000 	str.w	r3, [lr]
 8008f84:	a802      	add	r0, sp, #8
 8008f86:	f000 fad7 	bl	8009538 <rmw_get_zero_initialized_init_options>
 8008f8a:	2258      	movs	r2, #88	@ 0x58
 8008f8c:	a902      	add	r1, sp, #8
 8008f8e:	f106 0018 	add.w	r0, r6, #24
 8008f92:	f00a f9c2 	bl	801331a <memcpy>
 8008f96:	ab26      	add	r3, sp, #152	@ 0x98
 8008f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f9c:	6826      	ldr	r6, [r4, #0]
 8008f9e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008fa2:	f106 0018 	add.w	r0, r6, #24
 8008fa6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008faa:	f000 fb0b 	bl	80095c4 <rmw_init_options_init>
 8008fae:	4605      	mov	r5, r0
 8008fb0:	b938      	cbnz	r0, 8008fc2 <rcl_init_options_init+0xa6>
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 8008fb8:	e7bc      	b.n	8008f34 <rcl_init_options_init+0x18>
 8008fba:	250b      	movs	r5, #11
 8008fbc:	e7ba      	b.n	8008f34 <rcl_init_options_init+0x18>
 8008fbe:	250a      	movs	r5, #10
 8008fc0:	e7b8      	b.n	8008f34 <rcl_init_options_init+0x18>
 8008fc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008fc4:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8008fc6:	6820      	ldr	r0, [r4, #0]
 8008fc8:	4798      	blx	r3
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f006 fb78 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	e7af      	b.n	8008f34 <rcl_init_options_init+0x18>

08008fd4 <rcl_init_options_fini>:
 8008fd4:	b530      	push	{r4, r5, lr}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	b1f0      	cbz	r0, 8009018 <rcl_init_options_fini+0x44>
 8008fda:	6803      	ldr	r3, [r0, #0]
 8008fdc:	4604      	mov	r4, r0
 8008fde:	b1db      	cbz	r3, 8009018 <rcl_init_options_fini+0x44>
 8008fe0:	469c      	mov	ip, r3
 8008fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fe6:	f10d 0e04 	add.w	lr, sp, #4
 8008fea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008fee:	f8dc 3000 	ldr.w	r3, [ip]
 8008ff2:	f8ce 3000 	str.w	r3, [lr]
 8008ff6:	a801      	add	r0, sp, #4
 8008ff8:	f000 fa5c 	bl	80094b4 <rcutils_allocator_is_valid>
 8008ffc:	b160      	cbz	r0, 8009018 <rcl_init_options_fini+0x44>
 8008ffe:	6820      	ldr	r0, [r4, #0]
 8009000:	3018      	adds	r0, #24
 8009002:	f000 fb7b 	bl	80096fc <rmw_init_options_fini>
 8009006:	4605      	mov	r5, r0
 8009008:	b950      	cbnz	r0, 8009020 <rcl_init_options_fini+0x4c>
 800900a:	6820      	ldr	r0, [r4, #0]
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	9905      	ldr	r1, [sp, #20]
 8009010:	4798      	blx	r3
 8009012:	4628      	mov	r0, r5
 8009014:	b007      	add	sp, #28
 8009016:	bd30      	pop	{r4, r5, pc}
 8009018:	250b      	movs	r5, #11
 800901a:	4628      	mov	r0, r5
 800901c:	b007      	add	sp, #28
 800901e:	bd30      	pop	{r4, r5, pc}
 8009020:	f006 fb4e 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 8009024:	4605      	mov	r5, r0
 8009026:	e7f8      	b.n	800901a <rcl_init_options_fini+0x46>

08009028 <rcl_init_options_copy>:
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902a:	b09d      	sub	sp, #116	@ 0x74
 800902c:	2800      	cmp	r0, #0
 800902e:	d04a      	beq.n	80090c6 <rcl_init_options_copy+0x9e>
 8009030:	4604      	mov	r4, r0
 8009032:	6800      	ldr	r0, [r0, #0]
 8009034:	2800      	cmp	r0, #0
 8009036:	d046      	beq.n	80090c6 <rcl_init_options_copy+0x9e>
 8009038:	460d      	mov	r5, r1
 800903a:	f000 fa3b 	bl	80094b4 <rcutils_allocator_is_valid>
 800903e:	2800      	cmp	r0, #0
 8009040:	d041      	beq.n	80090c6 <rcl_init_options_copy+0x9e>
 8009042:	2d00      	cmp	r5, #0
 8009044:	d03f      	beq.n	80090c6 <rcl_init_options_copy+0x9e>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	b11b      	cbz	r3, 8009052 <rcl_init_options_copy+0x2a>
 800904a:	2464      	movs	r4, #100	@ 0x64
 800904c:	4620      	mov	r0, r4
 800904e:	b01d      	add	sp, #116	@ 0x74
 8009050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009052:	6826      	ldr	r6, [r4, #0]
 8009054:	46b6      	mov	lr, r6
 8009056:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800905a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800905e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009062:	f8de 3000 	ldr.w	r3, [lr]
 8009066:	6837      	ldr	r7, [r6, #0]
 8009068:	f8cc 3000 	str.w	r3, [ip]
 800906c:	4619      	mov	r1, r3
 800906e:	2070      	movs	r0, #112	@ 0x70
 8009070:	47b8      	blx	r7
 8009072:	4606      	mov	r6, r0
 8009074:	6028      	str	r0, [r5, #0]
 8009076:	b350      	cbz	r0, 80090ce <rcl_init_options_copy+0xa6>
 8009078:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800907c:	4686      	mov	lr, r0
 800907e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009082:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009086:	f8dc 3000 	ldr.w	r3, [ip]
 800908a:	f8ce 3000 	str.w	r3, [lr]
 800908e:	4668      	mov	r0, sp
 8009090:	f000 fa52 	bl	8009538 <rmw_get_zero_initialized_init_options>
 8009094:	2258      	movs	r2, #88	@ 0x58
 8009096:	4669      	mov	r1, sp
 8009098:	f106 0018 	add.w	r0, r6, #24
 800909c:	f00a f93d 	bl	801331a <memcpy>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	6829      	ldr	r1, [r5, #0]
 80090a4:	3018      	adds	r0, #24
 80090a6:	3118      	adds	r1, #24
 80090a8:	f000 faf4 	bl	8009694 <rmw_init_options_copy>
 80090ac:	4604      	mov	r4, r0
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d0cc      	beq.n	800904c <rcl_init_options_copy+0x24>
 80090b2:	f000 fa0d 	bl	80094d0 <rcutils_get_error_string>
 80090b6:	f000 fa23 	bl	8009500 <rcutils_reset_error>
 80090ba:	4628      	mov	r0, r5
 80090bc:	f7ff ff8a 	bl	8008fd4 <rcl_init_options_fini>
 80090c0:	b138      	cbz	r0, 80090d2 <rcl_init_options_copy+0xaa>
 80090c2:	4604      	mov	r4, r0
 80090c4:	e7c2      	b.n	800904c <rcl_init_options_copy+0x24>
 80090c6:	240b      	movs	r4, #11
 80090c8:	4620      	mov	r0, r4
 80090ca:	b01d      	add	sp, #116	@ 0x74
 80090cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ce:	240a      	movs	r4, #10
 80090d0:	e7bc      	b.n	800904c <rcl_init_options_copy+0x24>
 80090d2:	4620      	mov	r0, r4
 80090d4:	b01d      	add	sp, #116	@ 0x74
 80090d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80090da:	f006 baf1 	b.w	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 80090de:	bf00      	nop

080090e0 <rcl_init_options_set_domain_id>:
 80090e0:	b120      	cbz	r0, 80090ec <rcl_init_options_set_domain_id+0xc>
 80090e2:	6803      	ldr	r3, [r0, #0]
 80090e4:	b113      	cbz	r3, 80090ec <rcl_init_options_set_domain_id+0xc>
 80090e6:	6259      	str	r1, [r3, #36]	@ 0x24
 80090e8:	2000      	movs	r0, #0
 80090ea:	4770      	bx	lr
 80090ec:	200b      	movs	r0, #11
 80090ee:	4770      	bx	lr

080090f0 <rcl_get_zero_initialized_publisher>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	@ (80090f8 <rcl_get_zero_initialized_publisher+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	080142f4 	.word	0x080142f4

080090fc <rcl_publisher_init>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	b088      	sub	sp, #32
 8009102:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009104:	2d00      	cmp	r5, #0
 8009106:	d06a      	beq.n	80091de <rcl_publisher_init+0xe2>
 8009108:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800910c:	4604      	mov	r4, r0
 800910e:	4648      	mov	r0, r9
 8009110:	460e      	mov	r6, r1
 8009112:	4690      	mov	r8, r2
 8009114:	461f      	mov	r7, r3
 8009116:	f000 f9cd 	bl	80094b4 <rcutils_allocator_is_valid>
 800911a:	2800      	cmp	r0, #0
 800911c:	d05f      	beq.n	80091de <rcl_publisher_init+0xe2>
 800911e:	2c00      	cmp	r4, #0
 8009120:	d05d      	beq.n	80091de <rcl_publisher_init+0xe2>
 8009122:	f8d4 a000 	ldr.w	sl, [r4]
 8009126:	f1ba 0f00 	cmp.w	sl, #0
 800912a:	d004      	beq.n	8009136 <rcl_publisher_init+0x3a>
 800912c:	2764      	movs	r7, #100	@ 0x64
 800912e:	4638      	mov	r0, r7
 8009130:	b008      	add	sp, #32
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	4630      	mov	r0, r6
 8009138:	f006 fe04 	bl	800fd44 <rcl_node_is_valid>
 800913c:	2800      	cmp	r0, #0
 800913e:	d053      	beq.n	80091e8 <rcl_publisher_init+0xec>
 8009140:	f1b8 0f00 	cmp.w	r8, #0
 8009144:	d04b      	beq.n	80091de <rcl_publisher_init+0xe2>
 8009146:	2f00      	cmp	r7, #0
 8009148:	d049      	beq.n	80091de <rcl_publisher_init+0xe2>
 800914a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800914e:	aa07      	add	r2, sp, #28
 8009150:	9205      	str	r2, [sp, #20]
 8009152:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8009156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800915a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800915e:	f8cd a01c 	str.w	sl, [sp, #28]
 8009162:	4639      	mov	r1, r7
 8009164:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009168:	4630      	mov	r0, r6
 800916a:	f006 fe7b 	bl	800fe64 <rcl_node_resolve_name>
 800916e:	4607      	mov	r7, r0
 8009170:	2800      	cmp	r0, #0
 8009172:	d150      	bne.n	8009216 <rcl_publisher_init+0x11a>
 8009174:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 8009178:	21c8      	movs	r1, #200	@ 0xc8
 800917a:	2001      	movs	r0, #1
 800917c:	4798      	blx	r3
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	2800      	cmp	r0, #0
 8009182:	d04e      	beq.n	8009222 <rcl_publisher_init+0x126>
 8009184:	4630      	mov	r0, r6
 8009186:	f006 fdff 	bl	800fd88 <rcl_node_get_rmw_handle>
 800918a:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	9a07      	ldr	r2, [sp, #28]
 8009192:	6827      	ldr	r7, [r4, #0]
 8009194:	462b      	mov	r3, r5
 8009196:	4641      	mov	r1, r8
 8009198:	f000 fdc4 	bl	8009d24 <rmw_create_publisher>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80091a2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80091a6:	b370      	cbz	r0, 8009206 <rcl_publisher_init+0x10a>
 80091a8:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80091ac:	f000 fe96 	bl	8009edc <rmw_publisher_get_actual_qos>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	4607      	mov	r7, r0
 80091b4:	b9d0      	cbnz	r0, 80091ec <rcl_publisher_init+0xf0>
 80091b6:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80091ba:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80091be:	4629      	mov	r1, r5
 80091c0:	2270      	movs	r2, #112	@ 0x70
 80091c2:	4618      	mov	r0, r3
 80091c4:	f00a f8a9 	bl	801331a <memcpy>
 80091c8:	6832      	ldr	r2, [r6, #0]
 80091ca:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80091ce:	9807      	ldr	r0, [sp, #28]
 80091d0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80091d2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80091d4:	4798      	blx	r3
 80091d6:	4638      	mov	r0, r7
 80091d8:	b008      	add	sp, #32
 80091da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091de:	270b      	movs	r7, #11
 80091e0:	4638      	mov	r0, r7
 80091e2:	b008      	add	sp, #32
 80091e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e8:	27c8      	movs	r7, #200	@ 0xc8
 80091ea:	e7a0      	b.n	800912e <rcl_publisher_init+0x32>
 80091ec:	b18b      	cbz	r3, 8009212 <rcl_publisher_init+0x116>
 80091ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80091f2:	b142      	cbz	r2, 8009206 <rcl_publisher_init+0x10a>
 80091f4:	4630      	mov	r0, r6
 80091f6:	f006 fdc7 	bl	800fd88 <rcl_node_get_rmw_handle>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009200:	f000 fe7a 	bl	8009ef8 <rmw_destroy_publisher>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8009208:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800920a:	4618      	mov	r0, r3
 800920c:	4790      	blx	r2
 800920e:	2300      	movs	r3, #0
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	2701      	movs	r7, #1
 8009214:	e7db      	b.n	80091ce <rcl_publisher_init+0xd2>
 8009216:	2867      	cmp	r0, #103	@ 0x67
 8009218:	d0d9      	beq.n	80091ce <rcl_publisher_init+0xd2>
 800921a:	2869      	cmp	r0, #105	@ 0x69
 800921c:	d003      	beq.n	8009226 <rcl_publisher_init+0x12a>
 800921e:	280a      	cmp	r0, #10
 8009220:	d1f7      	bne.n	8009212 <rcl_publisher_init+0x116>
 8009222:	270a      	movs	r7, #10
 8009224:	e7d3      	b.n	80091ce <rcl_publisher_init+0xd2>
 8009226:	2767      	movs	r7, #103	@ 0x67
 8009228:	e7d1      	b.n	80091ce <rcl_publisher_init+0xd2>
 800922a:	bf00      	nop

0800922c <rcl_publisher_get_default_options>:
 800922c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922e:	4919      	ldr	r1, [pc, #100]	@ (8009294 <rcl_publisher_get_default_options+0x68>)
 8009230:	4c19      	ldr	r4, [pc, #100]	@ (8009298 <rcl_publisher_get_default_options+0x6c>)
 8009232:	b08b      	sub	sp, #44	@ 0x2c
 8009234:	2250      	movs	r2, #80	@ 0x50
 8009236:	4605      	mov	r5, r0
 8009238:	4818      	ldr	r0, [pc, #96]	@ (800929c <rcl_publisher_get_default_options+0x70>)
 800923a:	f00a f86e 	bl	801331a <memcpy>
 800923e:	a802      	add	r0, sp, #8
 8009240:	f000 f90c 	bl	800945c <rcutils_get_default_allocator>
 8009244:	f10d 0c08 	add.w	ip, sp, #8
 8009248:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800924c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800924e:	466f      	mov	r7, sp
 8009250:	f8dc 3000 	ldr.w	r3, [ip]
 8009254:	f844 3b04 	str.w	r3, [r4], #4
 8009258:	4638      	mov	r0, r7
 800925a:	f000 f995 	bl	8009588 <rmw_get_default_publisher_options>
 800925e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009262:	2600      	movs	r6, #0
 8009264:	e884 0003 	stmia.w	r4, {r0, r1}
 8009268:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800926c:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 8009270:	f006 fd90 	bl	800fd94 <rcl_get_disable_loaned_message>
 8009274:	b958      	cbnz	r0, 800928e <rcl_publisher_get_default_options+0x62>
 8009276:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800927a:	4908      	ldr	r1, [pc, #32]	@ (800929c <rcl_publisher_get_default_options+0x70>)
 800927c:	2270      	movs	r2, #112	@ 0x70
 800927e:	4628      	mov	r0, r5
 8009280:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 8009284:	f00a f849 	bl	801331a <memcpy>
 8009288:	4628      	mov	r0, r5
 800928a:	b00b      	add	sp, #44	@ 0x2c
 800928c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928e:	f000 f937 	bl	8009500 <rcutils_reset_error>
 8009292:	e7f2      	b.n	800927a <rcl_publisher_get_default_options+0x4e>
 8009294:	080142f8 	.word	0x080142f8
 8009298:	2000c010 	.word	0x2000c010
 800929c:	2000bfc0 	.word	0x2000bfc0

080092a0 <rcl_publish>:
 80092a0:	b1f8      	cbz	r0, 80092e2 <rcl_publish+0x42>
 80092a2:	6803      	ldr	r3, [r0, #0]
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4604      	mov	r4, r0
 80092a8:	b1b3      	cbz	r3, 80092d8 <rcl_publish+0x38>
 80092aa:	4616      	mov	r6, r2
 80092ac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80092b0:	b192      	cbz	r2, 80092d8 <rcl_publish+0x38>
 80092b2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80092b6:	460d      	mov	r5, r1
 80092b8:	f006 fa22 	bl	800f700 <rcl_context_is_valid>
 80092bc:	b160      	cbz	r0, 80092d8 <rcl_publish+0x38>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80092c4:	b140      	cbz	r0, 80092d8 <rcl_publish+0x38>
 80092c6:	b155      	cbz	r5, 80092de <rcl_publish+0x3e>
 80092c8:	4632      	mov	r2, r6
 80092ca:	4629      	mov	r1, r5
 80092cc:	f000 fcca 	bl	8009c64 <rmw_publish>
 80092d0:	3800      	subs	r0, #0
 80092d2:	bf18      	it	ne
 80092d4:	2001      	movne	r0, #1
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
 80092de:	200b      	movs	r0, #11
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80092e6:	4770      	bx	lr

080092e8 <rclc_support_init_with_options>:
 80092e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ec:	b083      	sub	sp, #12
 80092ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80092f0:	b340      	cbz	r0, 8009344 <rclc_support_init_with_options+0x5c>
 80092f2:	461d      	mov	r5, r3
 80092f4:	b333      	cbz	r3, 8009344 <rclc_support_init_with_options+0x5c>
 80092f6:	b32e      	cbz	r6, 8009344 <rclc_support_init_with_options+0x5c>
 80092f8:	46e9      	mov	r9, sp
 80092fa:	4604      	mov	r4, r0
 80092fc:	4648      	mov	r0, r9
 80092fe:	460f      	mov	r7, r1
 8009300:	4690      	mov	r8, r2
 8009302:	f006 f9f3 	bl	800f6ec <rcl_get_zero_initialized_context>
 8009306:	e899 0003 	ldmia.w	r9, {r0, r1}
 800930a:	462a      	mov	r2, r5
 800930c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009310:	4623      	mov	r3, r4
 8009312:	4641      	mov	r1, r8
 8009314:	4638      	mov	r0, r7
 8009316:	f006 fa59 	bl	800f7cc <rcl_init>
 800931a:	4605      	mov	r5, r0
 800931c:	b960      	cbnz	r0, 8009338 <rclc_support_init_with_options+0x50>
 800931e:	60a6      	str	r6, [r4, #8]
 8009320:	4632      	mov	r2, r6
 8009322:	f104 010c 	add.w	r1, r4, #12
 8009326:	2003      	movs	r0, #3
 8009328:	f006 ff4a 	bl	80101c0 <rcl_clock_init>
 800932c:	4605      	mov	r5, r0
 800932e:	b918      	cbnz	r0, 8009338 <rclc_support_init_with_options+0x50>
 8009330:	4628      	mov	r0, r5
 8009332:	b003      	add	sp, #12
 8009334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009338:	f000 f8e2 	bl	8009500 <rcutils_reset_error>
 800933c:	4628      	mov	r0, r5
 800933e:	b003      	add	sp, #12
 8009340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009344:	250b      	movs	r5, #11
 8009346:	4628      	mov	r0, r5
 8009348:	b003      	add	sp, #12
 800934a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800934e:	bf00      	nop

08009350 <rclc_node_init_default>:
 8009350:	b3b8      	cbz	r0, 80093c2 <rclc_node_init_default+0x72>
 8009352:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009356:	460d      	mov	r5, r1
 8009358:	b0a1      	sub	sp, #132	@ 0x84
 800935a:	b329      	cbz	r1, 80093a8 <rclc_node_init_default+0x58>
 800935c:	4616      	mov	r6, r2
 800935e:	b31a      	cbz	r2, 80093a8 <rclc_node_init_default+0x58>
 8009360:	461f      	mov	r7, r3
 8009362:	b30b      	cbz	r3, 80093a8 <rclc_node_init_default+0x58>
 8009364:	f10d 0810 	add.w	r8, sp, #16
 8009368:	4604      	mov	r4, r0
 800936a:	4640      	mov	r0, r8
 800936c:	f006 fb8a 	bl	800fa84 <rcl_get_zero_initialized_node>
 8009370:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009374:	f10d 0918 	add.w	r9, sp, #24
 8009378:	e884 0003 	stmia.w	r4, {r0, r1}
 800937c:	4648      	mov	r0, r9
 800937e:	f006 fd29 	bl	800fdd4 <rcl_node_get_default_options>
 8009382:	4640      	mov	r0, r8
 8009384:	f006 fb7e 	bl	800fa84 <rcl_get_zero_initialized_node>
 8009388:	f8cd 9000 	str.w	r9, [sp]
 800938c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009390:	463b      	mov	r3, r7
 8009392:	e884 0003 	stmia.w	r4, {r0, r1}
 8009396:	4632      	mov	r2, r6
 8009398:	4629      	mov	r1, r5
 800939a:	4620      	mov	r0, r4
 800939c:	f006 fb7c 	bl	800fa98 <rcl_node_init>
 80093a0:	b930      	cbnz	r0, 80093b0 <rclc_node_init_default+0x60>
 80093a2:	b021      	add	sp, #132	@ 0x84
 80093a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093a8:	200b      	movs	r0, #11
 80093aa:	b021      	add	sp, #132	@ 0x84
 80093ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093b0:	9003      	str	r0, [sp, #12]
 80093b2:	f000 f8a5 	bl	8009500 <rcutils_reset_error>
 80093b6:	f000 f8a3 	bl	8009500 <rcutils_reset_error>
 80093ba:	9803      	ldr	r0, [sp, #12]
 80093bc:	b021      	add	sp, #132	@ 0x84
 80093be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c2:	200b      	movs	r0, #11
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop

080093c8 <rclc_publisher_init_default>:
 80093c8:	b368      	cbz	r0, 8009426 <rclc_publisher_init_default+0x5e>
 80093ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ce:	460d      	mov	r5, r1
 80093d0:	b0a0      	sub	sp, #128	@ 0x80
 80093d2:	b321      	cbz	r1, 800941e <rclc_publisher_init_default+0x56>
 80093d4:	4616      	mov	r6, r2
 80093d6:	b312      	cbz	r2, 800941e <rclc_publisher_init_default+0x56>
 80093d8:	461f      	mov	r7, r3
 80093da:	b303      	cbz	r3, 800941e <rclc_publisher_init_default+0x56>
 80093dc:	4604      	mov	r4, r0
 80093de:	f7ff fe87 	bl	80090f0 <rcl_get_zero_initialized_publisher>
 80093e2:	f10d 0810 	add.w	r8, sp, #16
 80093e6:	6020      	str	r0, [r4, #0]
 80093e8:	4640      	mov	r0, r8
 80093ea:	f7ff ff1f 	bl	800922c <rcl_publisher_get_default_options>
 80093ee:	490f      	ldr	r1, [pc, #60]	@ (800942c <rclc_publisher_init_default+0x64>)
 80093f0:	2250      	movs	r2, #80	@ 0x50
 80093f2:	4640      	mov	r0, r8
 80093f4:	f009 ff91 	bl	801331a <memcpy>
 80093f8:	f8cd 8000 	str.w	r8, [sp]
 80093fc:	463b      	mov	r3, r7
 80093fe:	4632      	mov	r2, r6
 8009400:	4629      	mov	r1, r5
 8009402:	4620      	mov	r0, r4
 8009404:	f7ff fe7a 	bl	80090fc <rcl_publisher_init>
 8009408:	b910      	cbnz	r0, 8009410 <rclc_publisher_init_default+0x48>
 800940a:	b020      	add	sp, #128	@ 0x80
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	9003      	str	r0, [sp, #12]
 8009412:	f000 f875 	bl	8009500 <rcutils_reset_error>
 8009416:	9803      	ldr	r0, [sp, #12]
 8009418:	b020      	add	sp, #128	@ 0x80
 800941a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941e:	200b      	movs	r0, #11
 8009420:	b020      	add	sp, #128	@ 0x80
 8009422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009426:	200b      	movs	r0, #11
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	08014348 	.word	0x08014348

08009430 <__default_zero_allocate>:
 8009430:	f009 b982 	b.w	8012738 <calloc>

08009434 <__default_reallocate>:
 8009434:	f009 bb20 	b.w	8012a78 <realloc>

08009438 <__default_deallocate>:
 8009438:	f009 b9fc 	b.w	8012834 <free>

0800943c <__default_allocate>:
 800943c:	f009 b9f2 	b.w	8012824 <malloc>

08009440 <rcutils_get_zero_initialized_allocator>:
 8009440:	b510      	push	{r4, lr}
 8009442:	4c05      	ldr	r4, [pc, #20]	@ (8009458 <rcutils_get_zero_initialized_allocator+0x18>)
 8009444:	4686      	mov	lr, r0
 8009446:	4684      	mov	ip, r0
 8009448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800944a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f8cc 3000 	str.w	r3, [ip]
 8009454:	4670      	mov	r0, lr
 8009456:	bd10      	pop	{r4, pc}
 8009458:	08014398 	.word	0x08014398

0800945c <rcutils_get_default_allocator>:
 800945c:	b510      	push	{r4, lr}
 800945e:	4c05      	ldr	r4, [pc, #20]	@ (8009474 <rcutils_get_default_allocator+0x18>)
 8009460:	4686      	mov	lr, r0
 8009462:	4684      	mov	ip, r0
 8009464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009466:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	f8cc 3000 	str.w	r3, [ip]
 8009470:	4670      	mov	r0, lr
 8009472:	bd10      	pop	{r4, pc}
 8009474:	20000170 	.word	0x20000170

08009478 <rcutils_set_default_allocator>:
 8009478:	b1a8      	cbz	r0, 80094a6 <rcutils_set_default_allocator+0x2e>
 800947a:	6802      	ldr	r2, [r0, #0]
 800947c:	b1a2      	cbz	r2, 80094a8 <rcutils_set_default_allocator+0x30>
 800947e:	6841      	ldr	r1, [r0, #4]
 8009480:	b1a1      	cbz	r1, 80094ac <rcutils_set_default_allocator+0x34>
 8009482:	b410      	push	{r4}
 8009484:	68c4      	ldr	r4, [r0, #12]
 8009486:	b164      	cbz	r4, 80094a2 <rcutils_set_default_allocator+0x2a>
 8009488:	6880      	ldr	r0, [r0, #8]
 800948a:	b138      	cbz	r0, 800949c <rcutils_set_default_allocator+0x24>
 800948c:	4b08      	ldr	r3, [pc, #32]	@ (80094b0 <rcutils_set_default_allocator+0x38>)
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	2200      	movs	r2, #0
 8009492:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8009496:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800949a:	2001      	movs	r0, #1
 800949c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	4620      	mov	r0, r4
 80094a4:	e7fa      	b.n	800949c <rcutils_set_default_allocator+0x24>
 80094a6:	4770      	bx	lr
 80094a8:	4610      	mov	r0, r2
 80094aa:	4770      	bx	lr
 80094ac:	4608      	mov	r0, r1
 80094ae:	4770      	bx	lr
 80094b0:	20000170 	.word	0x20000170

080094b4 <rcutils_allocator_is_valid>:
 80094b4:	b158      	cbz	r0, 80094ce <rcutils_allocator_is_valid+0x1a>
 80094b6:	6803      	ldr	r3, [r0, #0]
 80094b8:	b143      	cbz	r3, 80094cc <rcutils_allocator_is_valid+0x18>
 80094ba:	6843      	ldr	r3, [r0, #4]
 80094bc:	b133      	cbz	r3, 80094cc <rcutils_allocator_is_valid+0x18>
 80094be:	68c3      	ldr	r3, [r0, #12]
 80094c0:	b123      	cbz	r3, 80094cc <rcutils_allocator_is_valid+0x18>
 80094c2:	6880      	ldr	r0, [r0, #8]
 80094c4:	3800      	subs	r0, #0
 80094c6:	bf18      	it	ne
 80094c8:	2001      	movne	r0, #1
 80094ca:	4770      	bx	lr
 80094cc:	4618      	mov	r0, r3
 80094ce:	4770      	bx	lr

080094d0 <rcutils_get_error_string>:
 80094d0:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <rcutils_get_error_string+0x1c>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b13b      	cbz	r3, 80094e6 <rcutils_get_error_string+0x16>
 80094d6:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <rcutils_get_error_string+0x20>)
 80094d8:	781a      	ldrb	r2, [r3, #0]
 80094da:	b90a      	cbnz	r2, 80094e0 <rcutils_get_error_string+0x10>
 80094dc:	2201      	movs	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	4b04      	ldr	r3, [pc, #16]	@ (80094f4 <rcutils_get_error_string+0x24>)
 80094e2:	7818      	ldrb	r0, [r3, #0]
 80094e4:	4770      	bx	lr
 80094e6:	4b04      	ldr	r3, [pc, #16]	@ (80094f8 <rcutils_get_error_string+0x28>)
 80094e8:	7818      	ldrb	r0, [r3, #0]
 80094ea:	4770      	bx	lr
 80094ec:	2000c030 	.word	0x2000c030
 80094f0:	2000c035 	.word	0x2000c035
 80094f4:	2000c034 	.word	0x2000c034
 80094f8:	080143ac 	.word	0x080143ac
 80094fc:	00000000 	.word	0x00000000

08009500 <rcutils_reset_error>:
 8009500:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8009520 <rcutils_reset_error+0x20>
 8009504:	4a08      	ldr	r2, [pc, #32]	@ (8009528 <rcutils_reset_error+0x28>)
 8009506:	4809      	ldr	r0, [pc, #36]	@ (800952c <rcutils_reset_error+0x2c>)
 8009508:	4909      	ldr	r1, [pc, #36]	@ (8009530 <rcutils_reset_error+0x30>)
 800950a:	2300      	movs	r3, #0
 800950c:	8013      	strh	r3, [r2, #0]
 800950e:	ed82 7b02 	vstr	d7, [r2, #8]
 8009512:	4a08      	ldr	r2, [pc, #32]	@ (8009534 <rcutils_reset_error+0x34>)
 8009514:	7003      	strb	r3, [r0, #0]
 8009516:	700b      	strb	r3, [r1, #0]
 8009518:	7013      	strb	r3, [r2, #0]
 800951a:	4770      	bx	lr
 800951c:	f3af 8000 	nop.w
	...
 8009528:	2000c038 	.word	0x2000c038
 800952c:	2000c035 	.word	0x2000c035
 8009530:	2000c034 	.word	0x2000c034
 8009534:	2000c030 	.word	0x2000c030

08009538 <rmw_get_zero_initialized_init_options>:
 8009538:	b530      	push	{r4, r5, lr}
 800953a:	b08b      	sub	sp, #44	@ 0x2c
 800953c:	466d      	mov	r5, sp
 800953e:	4604      	mov	r4, r0
 8009540:	4628      	mov	r0, r5
 8009542:	f000 f825 	bl	8009590 <rmw_get_default_security_options>
 8009546:	a802      	add	r0, sp, #8
 8009548:	f007 fa50 	bl	80109ec <rmw_get_zero_initialized_discovery_options>
 800954c:	2258      	movs	r2, #88	@ 0x58
 800954e:	2100      	movs	r1, #0
 8009550:	4620      	mov	r0, r4
 8009552:	f009 fdb1 	bl	80130b8 <memset>
 8009556:	e895 0003 	ldmia.w	r5, {r0, r1}
 800955a:	f104 0310 	add.w	r3, r4, #16
 800955e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009562:	f10d 0c08 	add.w	ip, sp, #8
 8009566:	e883 0003 	stmia.w	r3, {r0, r1}
 800956a:	60e2      	str	r2, [r4, #12]
 800956c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009570:	f104 0e1c 	add.w	lr, r4, #28
 8009574:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009578:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800957c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8009580:	4620      	mov	r0, r4
 8009582:	b00b      	add	sp, #44	@ 0x2c
 8009584:	bd30      	pop	{r4, r5, pc}
 8009586:	bf00      	nop

08009588 <rmw_get_default_publisher_options>:
 8009588:	2200      	movs	r2, #0
 800958a:	6002      	str	r2, [r0, #0]
 800958c:	7102      	strb	r2, [r0, #4]
 800958e:	4770      	bx	lr

08009590 <rmw_get_default_security_options>:
 8009590:	2200      	movs	r2, #0
 8009592:	7002      	strb	r2, [r0, #0]
 8009594:	6042      	str	r2, [r0, #4]
 8009596:	4770      	bx	lr

08009598 <rmw_uros_set_custom_transport>:
 8009598:	b470      	push	{r4, r5, r6}
 800959a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800959e:	b162      	cbz	r2, 80095ba <rmw_uros_set_custom_transport+0x22>
 80095a0:	b15b      	cbz	r3, 80095ba <rmw_uros_set_custom_transport+0x22>
 80095a2:	b155      	cbz	r5, 80095ba <rmw_uros_set_custom_transport+0x22>
 80095a4:	b14e      	cbz	r6, 80095ba <rmw_uros_set_custom_transport+0x22>
 80095a6:	4c06      	ldr	r4, [pc, #24]	@ (80095c0 <rmw_uros_set_custom_transport+0x28>)
 80095a8:	7020      	strb	r0, [r4, #0]
 80095aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80095ae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80095b2:	6166      	str	r6, [r4, #20]
 80095b4:	2000      	movs	r0, #0
 80095b6:	bc70      	pop	{r4, r5, r6}
 80095b8:	4770      	bx	lr
 80095ba:	200b      	movs	r0, #11
 80095bc:	bc70      	pop	{r4, r5, r6}
 80095be:	4770      	bx	lr
 80095c0:	2000c048 	.word	0x2000c048

080095c4 <rmw_init_options_init>:
 80095c4:	b084      	sub	sp, #16
 80095c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c8:	b083      	sub	sp, #12
 80095ca:	ad09      	add	r5, sp, #36	@ 0x24
 80095cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80095d0:	b130      	cbz	r0, 80095e0 <rmw_init_options_init+0x1c>
 80095d2:	4604      	mov	r4, r0
 80095d4:	4628      	mov	r0, r5
 80095d6:	f7ff ff6d 	bl	80094b4 <rcutils_allocator_is_valid>
 80095da:	b108      	cbz	r0, 80095e0 <rmw_init_options_init+0x1c>
 80095dc:	68a6      	ldr	r6, [r4, #8]
 80095de:	b12e      	cbz	r6, 80095ec <rmw_init_options_init+0x28>
 80095e0:	200b      	movs	r0, #11
 80095e2:	b003      	add	sp, #12
 80095e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80095e8:	b004      	add	sp, #16
 80095ea:	4770      	bx	lr
 80095ec:	2200      	movs	r2, #0
 80095ee:	2300      	movs	r3, #0
 80095f0:	e9c4 2300 	strd	r2, r3, [r4]
 80095f4:	4b22      	ldr	r3, [pc, #136]	@ (8009680 <rmw_init_options_init+0xbc>)
 80095f6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8009690 <rmw_init_options_init+0xcc>
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60a3      	str	r3, [r4, #8]
 80095fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009600:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8009604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009608:	466f      	mov	r7, sp
 800960a:	682b      	ldr	r3, [r5, #0]
 800960c:	f8cc 3000 	str.w	r3, [ip]
 8009610:	4638      	mov	r0, r7
 8009612:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8009616:	60e6      	str	r6, [r4, #12]
 8009618:	f7ff ffba 	bl	8009590 <rmw_get_default_security_options>
 800961c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009620:	f104 0310 	add.w	r3, r4, #16
 8009624:	e883 0003 	stmia.w	r3, {r0, r1}
 8009628:	2203      	movs	r2, #3
 800962a:	4816      	ldr	r0, [pc, #88]	@ (8009684 <rmw_init_options_init+0xc0>)
 800962c:	4916      	ldr	r1, [pc, #88]	@ (8009688 <rmw_init_options_init+0xc4>)
 800962e:	7626      	strb	r6, [r4, #24]
 8009630:	f000 fe90 	bl	800a354 <rmw_uxrce_init_init_options_impl_memory>
 8009634:	4813      	ldr	r0, [pc, #76]	@ (8009684 <rmw_init_options_init+0xc0>)
 8009636:	f007 fc3b 	bl	8010eb0 <get_memory>
 800963a:	b1f0      	cbz	r0, 800967a <rmw_init_options_init+0xb6>
 800963c:	4a13      	ldr	r2, [pc, #76]	@ (800968c <rmw_init_options_init+0xc8>)
 800963e:	6883      	ldr	r3, [r0, #8]
 8009640:	6851      	ldr	r1, [r2, #4]
 8009642:	7810      	ldrb	r0, [r2, #0]
 8009644:	6563      	str	r3, [r4, #84]	@ 0x54
 8009646:	7418      	strb	r0, [r3, #16]
 8009648:	6159      	str	r1, [r3, #20]
 800964a:	68d1      	ldr	r1, [r2, #12]
 800964c:	61d9      	str	r1, [r3, #28]
 800964e:	6911      	ldr	r1, [r2, #16]
 8009650:	6219      	str	r1, [r3, #32]
 8009652:	6951      	ldr	r1, [r2, #20]
 8009654:	6892      	ldr	r2, [r2, #8]
 8009656:	619a      	str	r2, [r3, #24]
 8009658:	6259      	str	r1, [r3, #36]	@ 0x24
 800965a:	f004 ff35 	bl	800e4c8 <uxr_nanos>
 800965e:	f009 f99f 	bl	80129a0 <srand>
 8009662:	f009 f9cb 	bl	80129fc <rand>
 8009666:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009668:	6298      	str	r0, [r3, #40]	@ 0x28
 800966a:	2800      	cmp	r0, #0
 800966c:	d0f9      	beq.n	8009662 <rmw_init_options_init+0x9e>
 800966e:	2000      	movs	r0, #0
 8009670:	b003      	add	sp, #12
 8009672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009676:	b004      	add	sp, #16
 8009678:	4770      	bx	lr
 800967a:	2001      	movs	r0, #1
 800967c:	e7b1      	b.n	80095e2 <rmw_init_options_init+0x1e>
 800967e:	bf00      	nop
 8009680:	08014bf0 	.word	0x08014bf0
 8009684:	2000c234 	.word	0x2000c234
 8009688:	2000c1b0 	.word	0x2000c1b0
 800968c:	2000c048 	.word	0x2000c048
 8009690:	080143b0 	.word	0x080143b0

08009694 <rmw_init_options_copy>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	b158      	cbz	r0, 80096b0 <rmw_init_options_copy+0x1c>
 8009698:	460d      	mov	r5, r1
 800969a:	b149      	cbz	r1, 80096b0 <rmw_init_options_copy+0x1c>
 800969c:	4604      	mov	r4, r0
 800969e:	6880      	ldr	r0, [r0, #8]
 80096a0:	b120      	cbz	r0, 80096ac <rmw_init_options_copy+0x18>
 80096a2:	4b14      	ldr	r3, [pc, #80]	@ (80096f4 <rmw_init_options_copy+0x60>)
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	f7f6 fdbb 	bl	8000220 <strcmp>
 80096aa:	b9e8      	cbnz	r0, 80096e8 <rmw_init_options_copy+0x54>
 80096ac:	68ae      	ldr	r6, [r5, #8]
 80096ae:	b116      	cbz	r6, 80096b6 <rmw_init_options_copy+0x22>
 80096b0:	260b      	movs	r6, #11
 80096b2:	4630      	mov	r0, r6
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	2258      	movs	r2, #88	@ 0x58
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	f009 fe2d 	bl	801331a <memcpy>
 80096c0:	480d      	ldr	r0, [pc, #52]	@ (80096f8 <rmw_init_options_copy+0x64>)
 80096c2:	f007 fbf5 	bl	8010eb0 <get_memory>
 80096c6:	b190      	cbz	r0, 80096ee <rmw_init_options_copy+0x5a>
 80096c8:	6883      	ldr	r3, [r0, #8]
 80096ca:	656b      	str	r3, [r5, #84]	@ 0x54
 80096cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096ce:	f102 0c10 	add.w	ip, r2, #16
 80096d2:	f103 0510 	add.w	r5, r3, #16
 80096d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096dc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80096e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80096e4:	4630      	mov	r0, r6
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	260c      	movs	r6, #12
 80096ea:	4630      	mov	r0, r6
 80096ec:	bd70      	pop	{r4, r5, r6, pc}
 80096ee:	2601      	movs	r6, #1
 80096f0:	e7df      	b.n	80096b2 <rmw_init_options_copy+0x1e>
 80096f2:	bf00      	nop
 80096f4:	08014bf0 	.word	0x08014bf0
 80096f8:	2000c234 	.word	0x2000c234

080096fc <rmw_init_options_fini>:
 80096fc:	b368      	cbz	r0, 800975a <rmw_init_options_fini+0x5e>
 80096fe:	b510      	push	{r4, lr}
 8009700:	4604      	mov	r4, r0
 8009702:	b096      	sub	sp, #88	@ 0x58
 8009704:	3040      	adds	r0, #64	@ 0x40
 8009706:	f7ff fed5 	bl	80094b4 <rcutils_allocator_is_valid>
 800970a:	b1f0      	cbz	r0, 800974a <rmw_init_options_fini+0x4e>
 800970c:	68a0      	ldr	r0, [r4, #8]
 800970e:	b120      	cbz	r0, 800971a <rmw_init_options_fini+0x1e>
 8009710:	4b13      	ldr	r3, [pc, #76]	@ (8009760 <rmw_init_options_fini+0x64>)
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	f7f6 fd84 	bl	8000220 <strcmp>
 8009718:	b9e8      	cbnz	r0, 8009756 <rmw_init_options_fini+0x5a>
 800971a:	4b12      	ldr	r3, [pc, #72]	@ (8009764 <rmw_init_options_fini+0x68>)
 800971c:	6819      	ldr	r1, [r3, #0]
 800971e:	b1b9      	cbz	r1, 8009750 <rmw_init_options_fini+0x54>
 8009720:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009722:	e001      	b.n	8009728 <rmw_init_options_fini+0x2c>
 8009724:	6849      	ldr	r1, [r1, #4]
 8009726:	b199      	cbz	r1, 8009750 <rmw_init_options_fini+0x54>
 8009728:	688b      	ldr	r3, [r1, #8]
 800972a:	429a      	cmp	r2, r3
 800972c:	d1fa      	bne.n	8009724 <rmw_init_options_fini+0x28>
 800972e:	480d      	ldr	r0, [pc, #52]	@ (8009764 <rmw_init_options_fini+0x68>)
 8009730:	f007 fbce 	bl	8010ed0 <put_memory>
 8009734:	4668      	mov	r0, sp
 8009736:	f7ff feff 	bl	8009538 <rmw_get_zero_initialized_init_options>
 800973a:	2258      	movs	r2, #88	@ 0x58
 800973c:	4669      	mov	r1, sp
 800973e:	4620      	mov	r0, r4
 8009740:	f009 fdeb 	bl	801331a <memcpy>
 8009744:	2000      	movs	r0, #0
 8009746:	b016      	add	sp, #88	@ 0x58
 8009748:	bd10      	pop	{r4, pc}
 800974a:	200b      	movs	r0, #11
 800974c:	b016      	add	sp, #88	@ 0x58
 800974e:	bd10      	pop	{r4, pc}
 8009750:	2001      	movs	r0, #1
 8009752:	b016      	add	sp, #88	@ 0x58
 8009754:	bd10      	pop	{r4, pc}
 8009756:	200c      	movs	r0, #12
 8009758:	e7f5      	b.n	8009746 <rmw_init_options_fini+0x4a>
 800975a:	200b      	movs	r0, #11
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	08014bf0 	.word	0x08014bf0
 8009764:	2000c234 	.word	0x2000c234

08009768 <rmw_init>:
 8009768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800976c:	b083      	sub	sp, #12
 800976e:	2800      	cmp	r0, #0
 8009770:	f000 80d4 	beq.w	800991c <rmw_init+0x1b4>
 8009774:	460e      	mov	r6, r1
 8009776:	2900      	cmp	r1, #0
 8009778:	f000 80d0 	beq.w	800991c <rmw_init+0x1b4>
 800977c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800977e:	4605      	mov	r5, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 80cb 	beq.w	800991c <rmw_init+0x1b4>
 8009786:	4b77      	ldr	r3, [pc, #476]	@ (8009964 <rmw_init+0x1fc>)
 8009788:	6880      	ldr	r0, [r0, #8]
 800978a:	681f      	ldr	r7, [r3, #0]
 800978c:	b128      	cbz	r0, 800979a <rmw_init+0x32>
 800978e:	4639      	mov	r1, r7
 8009790:	f7f6 fd46 	bl	8000220 <strcmp>
 8009794:	2800      	cmp	r0, #0
 8009796:	f040 80d3 	bne.w	8009940 <rmw_init+0x1d8>
 800979a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800979e:	4c72      	ldr	r4, [pc, #456]	@ (8009968 <rmw_init+0x200>)
 80097a0:	4972      	ldr	r1, [pc, #456]	@ (800996c <rmw_init+0x204>)
 80097a2:	4873      	ldr	r0, [pc, #460]	@ (8009970 <rmw_init+0x208>)
 80097a4:	60b7      	str	r7, [r6, #8]
 80097a6:	e9c6 2300 	strd	r2, r3, [r6]
 80097aa:	68eb      	ldr	r3, [r5, #12]
 80097ac:	66b3      	str	r3, [r6, #104]	@ 0x68
 80097ae:	2201      	movs	r2, #1
 80097b0:	f000 fd70 	bl	800a294 <rmw_uxrce_init_session_memory>
 80097b4:	4620      	mov	r0, r4
 80097b6:	496f      	ldr	r1, [pc, #444]	@ (8009974 <rmw_init+0x20c>)
 80097b8:	2204      	movs	r2, #4
 80097ba:	f000 fdab 	bl	800a314 <rmw_uxrce_init_static_input_buffer_memory>
 80097be:	f04f 0800 	mov.w	r8, #0
 80097c2:	486b      	ldr	r0, [pc, #428]	@ (8009970 <rmw_init+0x208>)
 80097c4:	f884 800d 	strb.w	r8, [r4, #13]
 80097c8:	f007 fb72 	bl	8010eb0 <get_memory>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	f000 80b2 	beq.w	8009936 <rmw_init+0x1ce>
 80097d2:	6884      	ldr	r4, [r0, #8]
 80097d4:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80097d6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80097d8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80097dc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80097e0:	9101      	str	r1, [sp, #4]
 80097e2:	6a00      	ldr	r0, [r0, #32]
 80097e4:	9000      	str	r0, [sp, #0]
 80097e6:	f104 0910 	add.w	r9, r4, #16
 80097ea:	4661      	mov	r1, ip
 80097ec:	4648      	mov	r0, r9
 80097ee:	f002 fea9 	bl	800c544 <uxr_set_custom_transport_callbacks>
 80097f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097f6:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 80097fa:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80097fe:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8009802:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8009806:	495c      	ldr	r1, [pc, #368]	@ (8009978 <rmw_init+0x210>)
 8009808:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800980c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8009810:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8009814:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8009818:	4858      	ldr	r0, [pc, #352]	@ (800997c <rmw_init+0x214>)
 800981a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800981e:	2201      	movs	r2, #1
 8009820:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8009822:	f000 fd17 	bl	800a254 <rmw_uxrce_init_node_memory>
 8009826:	4956      	ldr	r1, [pc, #344]	@ (8009980 <rmw_init+0x218>)
 8009828:	4856      	ldr	r0, [pc, #344]	@ (8009984 <rmw_init+0x21c>)
 800982a:	2205      	movs	r2, #5
 800982c:	f000 fcf2 	bl	800a214 <rmw_uxrce_init_subscription_memory>
 8009830:	4955      	ldr	r1, [pc, #340]	@ (8009988 <rmw_init+0x220>)
 8009832:	4856      	ldr	r0, [pc, #344]	@ (800998c <rmw_init+0x224>)
 8009834:	220a      	movs	r2, #10
 8009836:	f000 fccd 	bl	800a1d4 <rmw_uxrce_init_publisher_memory>
 800983a:	4955      	ldr	r1, [pc, #340]	@ (8009990 <rmw_init+0x228>)
 800983c:	4855      	ldr	r0, [pc, #340]	@ (8009994 <rmw_init+0x22c>)
 800983e:	2201      	movs	r2, #1
 8009840:	f000 fc88 	bl	800a154 <rmw_uxrce_init_service_memory>
 8009844:	4954      	ldr	r1, [pc, #336]	@ (8009998 <rmw_init+0x230>)
 8009846:	4855      	ldr	r0, [pc, #340]	@ (800999c <rmw_init+0x234>)
 8009848:	2201      	movs	r2, #1
 800984a:	f000 fca3 	bl	800a194 <rmw_uxrce_init_client_memory>
 800984e:	4954      	ldr	r1, [pc, #336]	@ (80099a0 <rmw_init+0x238>)
 8009850:	4854      	ldr	r0, [pc, #336]	@ (80099a4 <rmw_init+0x23c>)
 8009852:	220f      	movs	r2, #15
 8009854:	f000 fd3e 	bl	800a2d4 <rmw_uxrce_init_topic_memory>
 8009858:	4953      	ldr	r1, [pc, #332]	@ (80099a8 <rmw_init+0x240>)
 800985a:	4854      	ldr	r0, [pc, #336]	@ (80099ac <rmw_init+0x244>)
 800985c:	2203      	movs	r2, #3
 800985e:	f000 fd79 	bl	800a354 <rmw_uxrce_init_init_options_impl_memory>
 8009862:	4953      	ldr	r1, [pc, #332]	@ (80099b0 <rmw_init+0x248>)
 8009864:	4853      	ldr	r0, [pc, #332]	@ (80099b4 <rmw_init+0x24c>)
 8009866:	2204      	movs	r2, #4
 8009868:	f000 fd94 	bl	800a394 <rmw_uxrce_init_wait_set_memory>
 800986c:	4952      	ldr	r1, [pc, #328]	@ (80099b8 <rmw_init+0x250>)
 800986e:	4853      	ldr	r0, [pc, #332]	@ (80099bc <rmw_init+0x254>)
 8009870:	2204      	movs	r2, #4
 8009872:	f000 fdaf 	bl	800a3d4 <rmw_uxrce_init_guard_condition_memory>
 8009876:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8009878:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800987a:	4642      	mov	r2, r8
 800987c:	f000 fc32 	bl	800a0e4 <rmw_uxrce_transport_init>
 8009880:	4607      	mov	r7, r0
 8009882:	2800      	cmp	r0, #0
 8009884:	d161      	bne.n	800994a <rmw_init+0x1e2>
 8009886:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009888:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800988c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800988e:	4628      	mov	r0, r5
 8009890:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8009894:	f003 f858 	bl	800c948 <uxr_init_session>
 8009898:	4628      	mov	r0, r5
 800989a:	4949      	ldr	r1, [pc, #292]	@ (80099c0 <rmw_init+0x258>)
 800989c:	4622      	mov	r2, r4
 800989e:	f003 f877 	bl	800c990 <uxr_set_topic_callback>
 80098a2:	4628      	mov	r0, r5
 80098a4:	4947      	ldr	r1, [pc, #284]	@ (80099c4 <rmw_init+0x25c>)
 80098a6:	463a      	mov	r2, r7
 80098a8:	f003 f86e 	bl	800c988 <uxr_set_status_callback>
 80098ac:	4628      	mov	r0, r5
 80098ae:	4946      	ldr	r1, [pc, #280]	@ (80099c8 <rmw_init+0x260>)
 80098b0:	463a      	mov	r2, r7
 80098b2:	f003 f871 	bl	800c998 <uxr_set_request_callback>
 80098b6:	4628      	mov	r0, r5
 80098b8:	4944      	ldr	r1, [pc, #272]	@ (80099cc <rmw_init+0x264>)
 80098ba:	463a      	mov	r2, r7
 80098bc:	f003 f870 	bl	800c9a0 <uxr_set_reply_callback>
 80098c0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80098c4:	2304      	movs	r3, #4
 80098c6:	0092      	lsls	r2, r2, #2
 80098c8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80098cc:	4628      	mov	r0, r5
 80098ce:	f003 f895 	bl	800c9fc <uxr_create_input_reliable_stream>
 80098d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80098d6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80098da:	2304      	movs	r3, #4
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80098e2:	4628      	mov	r0, r5
 80098e4:	f003 f872 	bl	800c9cc <uxr_create_output_reliable_stream>
 80098e8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80098ec:	4628      	mov	r0, r5
 80098ee:	f003 f87f 	bl	800c9f0 <uxr_create_input_best_effort_stream>
 80098f2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80098f6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80098fa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80098fe:	3114      	adds	r1, #20
 8009900:	4628      	mov	r0, r5
 8009902:	f003 f851 	bl	800c9a8 <uxr_create_output_best_effort_stream>
 8009906:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800990a:	4628      	mov	r0, r5
 800990c:	f003 fdac 	bl	800d468 <uxr_create_session>
 8009910:	4605      	mov	r5, r0
 8009912:	b140      	cbz	r0, 8009926 <rmw_init+0x1be>
 8009914:	4638      	mov	r0, r7
 8009916:	b003      	add	sp, #12
 8009918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800991c:	270b      	movs	r7, #11
 800991e:	4638      	mov	r0, r7
 8009920:	b003      	add	sp, #12
 8009922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009926:	4648      	mov	r0, r9
 8009928:	f002 fe4e 	bl	800c5c8 <uxr_close_custom_transport>
 800992c:	4810      	ldr	r0, [pc, #64]	@ (8009970 <rmw_init+0x208>)
 800992e:	4621      	mov	r1, r4
 8009930:	f007 face 	bl	8010ed0 <put_memory>
 8009934:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8009936:	2701      	movs	r7, #1
 8009938:	4638      	mov	r0, r7
 800993a:	b003      	add	sp, #12
 800993c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009940:	270c      	movs	r7, #12
 8009942:	4638      	mov	r0, r7
 8009944:	b003      	add	sp, #12
 8009946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800994a:	4648      	mov	r0, r9
 800994c:	f002 fe3c 	bl	800c5c8 <uxr_close_custom_transport>
 8009950:	4807      	ldr	r0, [pc, #28]	@ (8009970 <rmw_init+0x208>)
 8009952:	4621      	mov	r1, r4
 8009954:	f007 fabc 	bl	8010ed0 <put_memory>
 8009958:	4638      	mov	r0, r7
 800995a:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 800995e:	b003      	add	sp, #12
 8009960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009964:	08014bf0 	.word	0x08014bf0
 8009968:	2000e348 	.word	0x2000e348
 800996c:	2000f440 	.word	0x2000f440
 8009970:	200109e8 	.word	0x200109e8
 8009974:	2000c248 	.word	0x2000c248
 8009978:	2000f388 	.word	0x2000f388
 800997c:	2000f42c 	.word	0x2000f42c
 8009980:	2000e6c0 	.word	0x2000e6c0
 8009984:	2000eaf8 	.word	0x2000eaf8
 8009988:	2000eb08 	.word	0x2000eb08
 800998c:	2000f378 	.word	0x2000f378
 8009990:	2000e5e8 	.word	0x2000e5e8
 8009994:	2000e6b0 	.word	0x2000e6b0
 8009998:	2000e510 	.word	0x2000e510
 800999c:	2000e5d8 	.word	0x2000e5d8
 80099a0:	2000e358 	.word	0x2000e358
 80099a4:	2000e4fc 	.word	0x2000e4fc
 80099a8:	2000c1b0 	.word	0x2000c1b0
 80099ac:	2000c234 	.word	0x2000c234
 80099b0:	2000c130 	.word	0x2000c130
 80099b4:	2000c1a0 	.word	0x2000c1a0
 80099b8:	2000c0a0 	.word	0x2000c0a0
 80099bc:	2000c120 	.word	0x2000c120
 80099c0:	08010ce9 	.word	0x08010ce9
 80099c4:	08010ce1 	.word	0x08010ce1
 80099c8:	08010d81 	.word	0x08010d81
 80099cc:	08010e1d 	.word	0x08010e1d

080099d0 <rmw_context_fini>:
 80099d0:	4b17      	ldr	r3, [pc, #92]	@ (8009a30 <rmw_context_fini+0x60>)
 80099d2:	b570      	push	{r4, r5, r6, lr}
 80099d4:	681c      	ldr	r4, [r3, #0]
 80099d6:	4605      	mov	r5, r0
 80099d8:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80099da:	b33c      	cbz	r4, 8009a2c <rmw_context_fini+0x5c>
 80099dc:	2600      	movs	r6, #0
 80099de:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	4282      	cmp	r2, r0
 80099e6:	d018      	beq.n	8009a1a <rmw_context_fini+0x4a>
 80099e8:	2c00      	cmp	r4, #0
 80099ea:	d1f8      	bne.n	80099de <rmw_context_fini+0xe>
 80099ec:	b188      	cbz	r0, 8009a12 <rmw_context_fini+0x42>
 80099ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80099f2:	789b      	ldrb	r3, [r3, #2]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	bf14      	ite	ne
 80099f8:	210a      	movne	r1, #10
 80099fa:	2100      	moveq	r1, #0
 80099fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009a00:	f003 fd0a 	bl	800d418 <uxr_delete_session_retries>
 8009a04:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8009a06:	f000 fd05 	bl	800a414 <rmw_uxrce_fini_session_memory>
 8009a0a:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8009a0c:	3010      	adds	r0, #16
 8009a0e:	f002 fddb 	bl	800c5c8 <uxr_close_custom_transport>
 8009a12:	2300      	movs	r3, #0
 8009a14:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8009a16:	4630      	mov	r0, r6
 8009a18:	bd70      	pop	{r4, r5, r6, pc}
 8009a1a:	f103 0018 	add.w	r0, r3, #24
 8009a1e:	f000 f89b 	bl	8009b58 <rmw_destroy_node>
 8009a22:	4606      	mov	r6, r0
 8009a24:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d1d9      	bne.n	80099de <rmw_context_fini+0xe>
 8009a2a:	e7df      	b.n	80099ec <rmw_context_fini+0x1c>
 8009a2c:	4626      	mov	r6, r4
 8009a2e:	e7dd      	b.n	80099ec <rmw_context_fini+0x1c>
 8009a30:	2000f42c 	.word	0x2000f42c

08009a34 <create_node>:
 8009a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d063      	beq.n	8009b06 <create_node+0xd2>
 8009a3e:	4606      	mov	r6, r0
 8009a40:	4836      	ldr	r0, [pc, #216]	@ (8009b1c <create_node+0xe8>)
 8009a42:	460f      	mov	r7, r1
 8009a44:	4690      	mov	r8, r2
 8009a46:	461d      	mov	r5, r3
 8009a48:	f007 fa32 	bl	8010eb0 <get_memory>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d05a      	beq.n	8009b06 <create_node+0xd2>
 8009a50:	6884      	ldr	r4, [r0, #8]
 8009a52:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	f007 fa93 	bl	8010f80 <rmw_get_implementation_identifier>
 8009a5a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8009a5e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8009a62:	f8c4 9020 	str.w	r9, [r4, #32]
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7f6 fc3a 	bl	80002e0 <strlen>
 8009a6c:	1c42      	adds	r2, r0, #1
 8009a6e:	2a3c      	cmp	r2, #60	@ 0x3c
 8009a70:	f104 0518 	add.w	r5, r4, #24
 8009a74:	d844      	bhi.n	8009b00 <create_node+0xcc>
 8009a76:	4648      	mov	r0, r9
 8009a78:	4631      	mov	r1, r6
 8009a7a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8009a7e:	f009 fc4c 	bl	801331a <memcpy>
 8009a82:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7f6 fc2a 	bl	80002e0 <strlen>
 8009a8c:	1c42      	adds	r2, r0, #1
 8009a8e:	2a3c      	cmp	r2, #60	@ 0x3c
 8009a90:	d836      	bhi.n	8009b00 <create_node+0xcc>
 8009a92:	4639      	mov	r1, r7
 8009a94:	4648      	mov	r0, r9
 8009a96:	f009 fc40 	bl	801331a <memcpy>
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8009aa6:	1842      	adds	r2, r0, r1
 8009aa8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8009aac:	f002 fd90 	bl	800c5d0 <uxr_object_id>
 8009ab0:	6160      	str	r0, [r4, #20]
 8009ab2:	783b      	ldrb	r3, [r7, #0]
 8009ab4:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ab6:	d128      	bne.n	8009b0a <create_node+0xd6>
 8009ab8:	787b      	ldrb	r3, [r7, #1]
 8009aba:	bb33      	cbnz	r3, 8009b0a <create_node+0xd6>
 8009abc:	4a18      	ldr	r2, [pc, #96]	@ (8009b20 <create_node+0xec>)
 8009abe:	4819      	ldr	r0, [pc, #100]	@ (8009b24 <create_node+0xf0>)
 8009ac0:	4633      	mov	r3, r6
 8009ac2:	213c      	movs	r1, #60	@ 0x3c
 8009ac4:	f009 f9b4 	bl	8012e30 <sniprintf>
 8009ac8:	6920      	ldr	r0, [r4, #16]
 8009aca:	4916      	ldr	r1, [pc, #88]	@ (8009b24 <create_node+0xf0>)
 8009acc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8009ad0:	9100      	str	r1, [sp, #0]
 8009ad2:	2106      	movs	r1, #6
 8009ad4:	9101      	str	r1, [sp, #4]
 8009ad6:	6811      	ldr	r1, [r2, #0]
 8009ad8:	6962      	ldr	r2, [r4, #20]
 8009ada:	fa1f f388 	uxth.w	r3, r8
 8009ade:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009ae2:	f002 fbbb 	bl	800c25c <uxr_buffer_create_participant_bin>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	6920      	ldr	r0, [r4, #16]
 8009aea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009aee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009af2:	f000 fd69 	bl	800a5c8 <run_xrce_session>
 8009af6:	b118      	cbz	r0, 8009b00 <create_node+0xcc>
 8009af8:	4628      	mov	r0, r5
 8009afa:	b003      	add	sp, #12
 8009afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 fc8d 	bl	800a420 <rmw_uxrce_fini_node_memory>
 8009b06:	2500      	movs	r5, #0
 8009b08:	e7f6      	b.n	8009af8 <create_node+0xc4>
 8009b0a:	4a07      	ldr	r2, [pc, #28]	@ (8009b28 <create_node+0xf4>)
 8009b0c:	9600      	str	r6, [sp, #0]
 8009b0e:	463b      	mov	r3, r7
 8009b10:	213c      	movs	r1, #60	@ 0x3c
 8009b12:	4804      	ldr	r0, [pc, #16]	@ (8009b24 <create_node+0xf0>)
 8009b14:	f009 f98c 	bl	8012e30 <sniprintf>
 8009b18:	e7d6      	b.n	8009ac8 <create_node+0x94>
 8009b1a:	bf00      	nop
 8009b1c:	2000f42c 	.word	0x2000f42c
 8009b20:	080143cc 	.word	0x080143cc
 8009b24:	2000c064 	.word	0x2000c064
 8009b28:	080143b4 	.word	0x080143b4

08009b2c <rmw_create_node>:
 8009b2c:	b191      	cbz	r1, 8009b54 <rmw_create_node+0x28>
 8009b2e:	b410      	push	{r4}
 8009b30:	4614      	mov	r4, r2
 8009b32:	780a      	ldrb	r2, [r1, #0]
 8009b34:	4603      	mov	r3, r0
 8009b36:	4608      	mov	r0, r1
 8009b38:	b142      	cbz	r2, 8009b4c <rmw_create_node+0x20>
 8009b3a:	b13c      	cbz	r4, 8009b4c <rmw_create_node+0x20>
 8009b3c:	7822      	ldrb	r2, [r4, #0]
 8009b3e:	b12a      	cbz	r2, 8009b4c <rmw_create_node+0x20>
 8009b40:	4621      	mov	r1, r4
 8009b42:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b48:	f7ff bf74 	b.w	8009a34 <create_node>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	2000      	movs	r0, #0
 8009b56:	4770      	bx	lr

08009b58 <rmw_destroy_node>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	b328      	cbz	r0, 8009ba8 <rmw_destroy_node+0x50>
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	b120      	cbz	r0, 8009b6c <rmw_destroy_node+0x14>
 8009b62:	4b36      	ldr	r3, [pc, #216]	@ (8009c3c <rmw_destroy_node+0xe4>)
 8009b64:	6819      	ldr	r1, [r3, #0]
 8009b66:	f7f6 fb5b 	bl	8000220 <strcmp>
 8009b6a:	b9e8      	cbnz	r0, 8009ba8 <rmw_destroy_node+0x50>
 8009b6c:	687d      	ldr	r5, [r7, #4]
 8009b6e:	b1dd      	cbz	r5, 8009ba8 <rmw_destroy_node+0x50>
 8009b70:	4b33      	ldr	r3, [pc, #204]	@ (8009c40 <rmw_destroy_node+0xe8>)
 8009b72:	681c      	ldr	r4, [r3, #0]
 8009b74:	2c00      	cmp	r4, #0
 8009b76:	d05f      	beq.n	8009c38 <rmw_destroy_node+0xe0>
 8009b78:	2600      	movs	r6, #0
 8009b7a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009b7e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8009b82:	429d      	cmp	r5, r3
 8009b84:	d013      	beq.n	8009bae <rmw_destroy_node+0x56>
 8009b86:	2c00      	cmp	r4, #0
 8009b88:	d1f7      	bne.n	8009b7a <rmw_destroy_node+0x22>
 8009b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8009c44 <rmw_destroy_node+0xec>)
 8009b8c:	681c      	ldr	r4, [r3, #0]
 8009b8e:	b1c4      	cbz	r4, 8009bc2 <rmw_destroy_node+0x6a>
 8009b90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009b94:	6a0b      	ldr	r3, [r1, #32]
 8009b96:	429d      	cmp	r5, r3
 8009b98:	d1f9      	bne.n	8009b8e <rmw_destroy_node+0x36>
 8009b9a:	317c      	adds	r1, #124	@ 0x7c
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f000 fa41 	bl	800a024 <rmw_destroy_subscription>
 8009ba2:	2801      	cmp	r0, #1
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	d1f2      	bne.n	8009b8e <rmw_destroy_node+0x36>
 8009ba8:	2601      	movs	r6, #1
 8009baa:	4630      	mov	r0, r6
 8009bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bae:	3184      	adds	r1, #132	@ 0x84
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f000 f9a1 	bl	8009ef8 <rmw_destroy_publisher>
 8009bb6:	2801      	cmp	r0, #1
 8009bb8:	4606      	mov	r6, r0
 8009bba:	d0f5      	beq.n	8009ba8 <rmw_destroy_node+0x50>
 8009bbc:	2c00      	cmp	r4, #0
 8009bbe:	d1dc      	bne.n	8009b7a <rmw_destroy_node+0x22>
 8009bc0:	e7e3      	b.n	8009b8a <rmw_destroy_node+0x32>
 8009bc2:	4b21      	ldr	r3, [pc, #132]	@ (8009c48 <rmw_destroy_node+0xf0>)
 8009bc4:	681c      	ldr	r4, [r3, #0]
 8009bc6:	b16c      	cbz	r4, 8009be4 <rmw_destroy_node+0x8c>
 8009bc8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009bcc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8009bce:	429d      	cmp	r5, r3
 8009bd0:	d1f9      	bne.n	8009bc6 <rmw_destroy_node+0x6e>
 8009bd2:	317c      	adds	r1, #124	@ 0x7c
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f000 f9e1 	bl	8009f9c <rmw_destroy_service>
 8009bda:	2801      	cmp	r0, #1
 8009bdc:	4606      	mov	r6, r0
 8009bde:	d0e3      	beq.n	8009ba8 <rmw_destroy_node+0x50>
 8009be0:	2c00      	cmp	r4, #0
 8009be2:	d1f1      	bne.n	8009bc8 <rmw_destroy_node+0x70>
 8009be4:	4b19      	ldr	r3, [pc, #100]	@ (8009c4c <rmw_destroy_node+0xf4>)
 8009be6:	681c      	ldr	r4, [r3, #0]
 8009be8:	b16c      	cbz	r4, 8009c06 <rmw_destroy_node+0xae>
 8009bea:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8009bee:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8009bf0:	429d      	cmp	r5, r3
 8009bf2:	d1f9      	bne.n	8009be8 <rmw_destroy_node+0x90>
 8009bf4:	317c      	adds	r1, #124	@ 0x7c
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f007 f97e 	bl	8010ef8 <rmw_destroy_client>
 8009bfc:	2801      	cmp	r0, #1
 8009bfe:	4606      	mov	r6, r0
 8009c00:	d0d2      	beq.n	8009ba8 <rmw_destroy_node+0x50>
 8009c02:	2c00      	cmp	r4, #0
 8009c04:	d1f1      	bne.n	8009bea <rmw_destroy_node+0x92>
 8009c06:	6928      	ldr	r0, [r5, #16]
 8009c08:	696a      	ldr	r2, [r5, #20]
 8009c0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009c0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	f002 fad8 	bl	800c1c8 <uxr_buffer_delete_entity>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	6928      	ldr	r0, [r5, #16]
 8009c1c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009c20:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009c24:	f000 fcd0 	bl	800a5c8 <run_xrce_session>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	bf08      	it	eq
 8009c2c:	2602      	moveq	r6, #2
 8009c2e:	4638      	mov	r0, r7
 8009c30:	f000 fbf6 	bl	800a420 <rmw_uxrce_fini_node_memory>
 8009c34:	4630      	mov	r0, r6
 8009c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c38:	4626      	mov	r6, r4
 8009c3a:	e7a6      	b.n	8009b8a <rmw_destroy_node+0x32>
 8009c3c:	08014bf0 	.word	0x08014bf0
 8009c40:	2000f378 	.word	0x2000f378
 8009c44:	2000eaf8 	.word	0x2000eaf8
 8009c48:	2000e6b0 	.word	0x2000e6b0
 8009c4c:	2000e5d8 	.word	0x2000e5d8

08009c50 <rmw_node_get_graph_guard_condition>:
 8009c50:	6843      	ldr	r3, [r0, #4]
 8009c52:	6918      	ldr	r0, [r3, #16]
 8009c54:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop

08009c5c <flush_session>:
 8009c5c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8009c5e:	f003 ba41 	b.w	800d0e4 <uxr_run_session_until_confirm_delivery>
 8009c62:	bf00      	nop

08009c64 <rmw_publish>:
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d053      	beq.n	8009d10 <rmw_publish+0xac>
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	b08e      	sub	sp, #56	@ 0x38
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	d04b      	beq.n	8009d0a <rmw_publish+0xa6>
 8009c72:	4604      	mov	r4, r0
 8009c74:	6800      	ldr	r0, [r0, #0]
 8009c76:	f000 fd2d 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d045      	beq.n	8009d0a <rmw_publish+0xa6>
 8009c7e:	6866      	ldr	r6, [r4, #4]
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	d042      	beq.n	8009d0a <rmw_publish+0xa6>
 8009c84:	69b4      	ldr	r4, [r6, #24]
 8009c86:	4628      	mov	r0, r5
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	4798      	blx	r3
 8009c8c:	69f3      	ldr	r3, [r6, #28]
 8009c8e:	9005      	str	r0, [sp, #20]
 8009c90:	b113      	cbz	r3, 8009c98 <rmw_publish+0x34>
 8009c92:	a805      	add	r0, sp, #20
 8009c94:	4798      	blx	r3
 8009c96:	9805      	ldr	r0, [sp, #20]
 8009c98:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	9000      	str	r0, [sp, #0]
 8009ca0:	6972      	ldr	r2, [r6, #20]
 8009ca2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8009ca4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8009ca8:	ab06      	add	r3, sp, #24
 8009caa:	f004 fcaf 	bl	800e60c <uxr_prepare_output_stream>
 8009cae:	b1d8      	cbz	r0, 8009ce8 <rmw_publish+0x84>
 8009cb0:	68a3      	ldr	r3, [r4, #8]
 8009cb2:	a906      	add	r1, sp, #24
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	4798      	blx	r3
 8009cb8:	6a33      	ldr	r3, [r6, #32]
 8009cba:	4604      	mov	r4, r0
 8009cbc:	b10b      	cbz	r3, 8009cc2 <rmw_publish+0x5e>
 8009cbe:	a806      	add	r0, sp, #24
 8009cc0:	4798      	blx	r3
 8009cc2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8009cc6:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	6910      	ldr	r0, [r2, #16]
 8009cce:	d021      	beq.n	8009d14 <rmw_publish+0xb0>
 8009cd0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8009cd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009cd6:	f003 fa05 	bl	800d0e4 <uxr_run_session_until_confirm_delivery>
 8009cda:	4004      	ands	r4, r0
 8009cdc:	b2e4      	uxtb	r4, r4
 8009cde:	f084 0001 	eor.w	r0, r4, #1
 8009ce2:	b2c0      	uxtb	r0, r0
 8009ce4:	b00e      	add	sp, #56	@ 0x38
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8009cec:	6918      	ldr	r0, [r3, #16]
 8009cee:	4b0c      	ldr	r3, [pc, #48]	@ (8009d20 <rmw_publish+0xbc>)
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	9602      	str	r6, [sp, #8]
 8009cf8:	6972      	ldr	r2, [r6, #20]
 8009cfa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8009cfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009d00:	ab06      	add	r3, sp, #24
 8009d02:	f004 fcb3 	bl	800e66c <uxr_prepare_output_stream_fragmented>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d1d2      	bne.n	8009cb0 <rmw_publish+0x4c>
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	b00e      	add	sp, #56	@ 0x38
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	2001      	movs	r0, #1
 8009d12:	4770      	bx	lr
 8009d14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009d18:	f002 fe86 	bl	800ca28 <uxr_flash_output_streams>
 8009d1c:	e7df      	b.n	8009cde <rmw_publish+0x7a>
 8009d1e:	bf00      	nop
 8009d20:	08009c5d 	.word	0x08009c5d

08009d24 <rmw_create_publisher>:
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	b087      	sub	sp, #28
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f000 80c9 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d30:	460f      	mov	r7, r1
 8009d32:	2900      	cmp	r1, #0
 8009d34:	f000 80c5 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	6800      	ldr	r0, [r0, #0]
 8009d3c:	4615      	mov	r5, r2
 8009d3e:	461e      	mov	r6, r3
 8009d40:	f000 fcc8 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f000 80bc 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	f000 80b9 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d50:	782b      	ldrb	r3, [r5, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 80b5 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	f000 80b2 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d5e:	485c      	ldr	r0, [pc, #368]	@ (8009ed0 <rmw_create_publisher+0x1ac>)
 8009d60:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009d64:	f007 f8a4 	bl	8010eb0 <get_memory>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f000 80aa 	beq.w	8009ec2 <rmw_create_publisher+0x19e>
 8009d6e:	6884      	ldr	r4, [r0, #8]
 8009d70:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8009d74:	f007 f904 	bl	8010f80 <rmw_get_implementation_identifier>
 8009d78:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8009d7c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8009d80:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8009d84:	4628      	mov	r0, r5
 8009d86:	f7f6 faab 	bl	80002e0 <strlen>
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	283c      	cmp	r0, #60	@ 0x3c
 8009d8e:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 8009d92:	f200 808f 	bhi.w	8009eb4 <rmw_create_publisher+0x190>
 8009d96:	4a4f      	ldr	r2, [pc, #316]	@ (8009ed4 <rmw_create_publisher+0x1b0>)
 8009d98:	462b      	mov	r3, r5
 8009d9a:	213c      	movs	r1, #60	@ 0x3c
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	f009 f847 	bl	8012e30 <sniprintf>
 8009da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009da6:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8009da8:	4631      	mov	r1, r6
 8009daa:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8009dae:	2250      	movs	r2, #80	@ 0x50
 8009db0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8009db4:	f009 fab1 	bl	801331a <memcpy>
 8009db8:	7a33      	ldrb	r3, [r6, #8]
 8009dba:	4947      	ldr	r1, [pc, #284]	@ (8009ed8 <rmw_create_publisher+0x1b4>)
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dc2:	bf0c      	ite	eq
 8009dc4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8009dc8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8009dcc:	67a3      	str	r3, [r4, #120]	@ 0x78
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f000 fc8b 	bl	800a6f0 <get_message_typesupport_handle>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d06a      	beq.n	8009eb4 <rmw_create_publisher+0x190>
 8009dde:	6842      	ldr	r2, [r0, #4]
 8009de0:	61a2      	str	r2, [r4, #24]
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d066      	beq.n	8009eb4 <rmw_create_publisher+0x190>
 8009de6:	4629      	mov	r1, r5
 8009de8:	4633      	mov	r3, r6
 8009dea:	4648      	mov	r0, r9
 8009dec:	f007 f8ce 	bl	8010f8c <create_topic>
 8009df0:	6260      	str	r0, [r4, #36]	@ 0x24
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d062      	beq.n	8009ebc <rmw_create_publisher+0x198>
 8009df6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dfe:	2103      	movs	r1, #3
 8009e00:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8009e04:	1c42      	adds	r2, r0, #1
 8009e06:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8009e0a:	f002 fbe1 	bl	800c5d0 <uxr_object_id>
 8009e0e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8009e12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e16:	6120      	str	r0, [r4, #16]
 8009e18:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8009e1c:	6910      	ldr	r0, [r2, #16]
 8009e1e:	2506      	movs	r5, #6
 8009e20:	9500      	str	r5, [sp, #0]
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	6922      	ldr	r2, [r4, #16]
 8009e26:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009e2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009e2e:	f002 fa7b 	bl	800c328 <uxr_buffer_create_publisher_bin>
 8009e32:	4602      	mov	r2, r0
 8009e34:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009e38:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009e3c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009e40:	f000 fbc2 	bl	800a5c8 <run_xrce_session>
 8009e44:	b3b0      	cbz	r0, 8009eb4 <rmw_create_publisher+0x190>
 8009e46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e4e:	2105      	movs	r1, #5
 8009e50:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8009e54:	1c42      	adds	r2, r0, #1
 8009e56:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8009e5a:	f002 fbb9 	bl	800c5d0 <uxr_object_id>
 8009e5e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009e62:	6160      	str	r0, [r4, #20]
 8009e64:	4631      	mov	r1, r6
 8009e66:	af04      	add	r7, sp, #16
 8009e68:	691e      	ldr	r6, [r3, #16]
 8009e6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e6e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8009e72:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 8009e76:	4638      	mov	r0, r7
 8009e78:	f000 fbc6 	bl	800a608 <convert_qos_profile>
 8009e7c:	9503      	str	r5, [sp, #12]
 8009e7e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009e82:	9001      	str	r0, [sp, #4]
 8009e84:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009e88:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8009e92:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009e96:	f8da 1000 	ldr.w	r1, [sl]
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f002 fa72 	bl	800c384 <uxr_buffer_create_datawriter_bin>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009ea6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8009eaa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8009eae:	f000 fb8b 	bl	800a5c8 <run_xrce_session>
 8009eb2:	b940      	cbnz	r0, 8009ec6 <rmw_create_publisher+0x1a2>
 8009eb4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009eb6:	b108      	cbz	r0, 8009ebc <rmw_create_publisher+0x198>
 8009eb8:	f000 fb22 	bl	800a500 <rmw_uxrce_fini_topic_memory>
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	f000 fac7 	bl	800a450 <rmw_uxrce_fini_publisher_memory>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	4640      	mov	r0, r8
 8009ec8:	b007      	add	sp, #28
 8009eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ece:	bf00      	nop
 8009ed0:	2000f378 	.word	0x2000f378
 8009ed4:	080143cc 	.word	0x080143cc
 8009ed8:	08014238 	.word	0x08014238

08009edc <rmw_publisher_get_actual_qos>:
 8009edc:	b508      	push	{r3, lr}
 8009ede:	4603      	mov	r3, r0
 8009ee0:	b140      	cbz	r0, 8009ef4 <rmw_publisher_get_actual_qos+0x18>
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	b131      	cbz	r1, 8009ef4 <rmw_publisher_get_actual_qos+0x18>
 8009ee6:	6859      	ldr	r1, [r3, #4]
 8009ee8:	2250      	movs	r2, #80	@ 0x50
 8009eea:	3128      	adds	r1, #40	@ 0x28
 8009eec:	f009 fa15 	bl	801331a <memcpy>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	bd08      	pop	{r3, pc}
 8009ef4:	200b      	movs	r0, #11
 8009ef6:	bd08      	pop	{r3, pc}

08009ef8 <rmw_destroy_publisher>:
 8009ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efc:	b128      	cbz	r0, 8009f0a <rmw_destroy_publisher+0x12>
 8009efe:	4604      	mov	r4, r0
 8009f00:	6800      	ldr	r0, [r0, #0]
 8009f02:	460d      	mov	r5, r1
 8009f04:	f000 fbe6 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8009f08:	b918      	cbnz	r0, 8009f12 <rmw_destroy_publisher+0x1a>
 8009f0a:	2401      	movs	r4, #1
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f12:	6863      	ldr	r3, [r4, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0f8      	beq.n	8009f0a <rmw_destroy_publisher+0x12>
 8009f18:	2d00      	cmp	r5, #0
 8009f1a:	d0f6      	beq.n	8009f0a <rmw_destroy_publisher+0x12>
 8009f1c:	6828      	ldr	r0, [r5, #0]
 8009f1e:	f000 fbd9 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d0f1      	beq.n	8009f0a <rmw_destroy_publisher+0x12>
 8009f26:	686c      	ldr	r4, [r5, #4]
 8009f28:	2c00      	cmp	r4, #0
 8009f2a:	d0ee      	beq.n	8009f0a <rmw_destroy_publisher+0x12>
 8009f2c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009f2e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8009f32:	f007 f87f 	bl	8011034 <destroy_topic>
 8009f36:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009f3a:	6962      	ldr	r2, [r4, #20]
 8009f3c:	6918      	ldr	r0, [r3, #16]
 8009f3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009f42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009f46:	6819      	ldr	r1, [r3, #0]
 8009f48:	f002 f93e 	bl	800c1c8 <uxr_buffer_delete_entity>
 8009f4c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009f50:	6922      	ldr	r2, [r4, #16]
 8009f52:	4680      	mov	r8, r0
 8009f54:	6918      	ldr	r0, [r3, #16]
 8009f56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009f5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009f5e:	6819      	ldr	r1, [r3, #0]
 8009f60:	f002 f932 	bl	800c1c8 <uxr_buffer_delete_entity>
 8009f64:	4606      	mov	r6, r0
 8009f66:	6938      	ldr	r0, [r7, #16]
 8009f68:	4642      	mov	r2, r8
 8009f6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009f6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009f72:	f000 fb29 	bl	800a5c8 <run_xrce_session>
 8009f76:	4604      	mov	r4, r0
 8009f78:	6938      	ldr	r0, [r7, #16]
 8009f7a:	4632      	mov	r2, r6
 8009f7c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009f80:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009f84:	f000 fb20 	bl	800a5c8 <run_xrce_session>
 8009f88:	4004      	ands	r4, r0
 8009f8a:	f084 0401 	eor.w	r4, r4, #1
 8009f8e:	b2e4      	uxtb	r4, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	0064      	lsls	r4, r4, #1
 8009f94:	f000 fa5c 	bl	800a450 <rmw_uxrce_fini_publisher_memory>
 8009f98:	e7b8      	b.n	8009f0c <rmw_destroy_publisher+0x14>
 8009f9a:	bf00      	nop

08009f9c <rmw_destroy_service>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	b128      	cbz	r0, 8009fac <rmw_destroy_service+0x10>
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	6800      	ldr	r0, [r0, #0]
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	f000 fb95 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8009faa:	b910      	cbnz	r0, 8009fb2 <rmw_destroy_service+0x16>
 8009fac:	2401      	movs	r4, #1
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	6863      	ldr	r3, [r4, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0f9      	beq.n	8009fac <rmw_destroy_service+0x10>
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	d0f7      	beq.n	8009fac <rmw_destroy_service+0x10>
 8009fbc:	6828      	ldr	r0, [r5, #0]
 8009fbe:	f000 fb89 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d0f2      	beq.n	8009fac <rmw_destroy_service+0x10>
 8009fc6:	686e      	ldr	r6, [r5, #4]
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	d0ef      	beq.n	8009fac <rmw_destroy_service+0x10>
 8009fcc:	6864      	ldr	r4, [r4, #4]
 8009fce:	6932      	ldr	r2, [r6, #16]
 8009fd0:	6920      	ldr	r0, [r4, #16]
 8009fd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009fd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009fda:	6819      	ldr	r1, [r3, #0]
 8009fdc:	f002 fb26 	bl	800c62c <uxr_buffer_cancel_data>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	6920      	ldr	r0, [r4, #16]
 8009fe4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8009fe8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8009fec:	f000 faec 	bl	800a5c8 <run_xrce_session>
 8009ff0:	6920      	ldr	r0, [r4, #16]
 8009ff2:	6932      	ldr	r2, [r6, #16]
 8009ff4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8009ff8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8009ffc:	6819      	ldr	r1, [r3, #0]
 8009ffe:	f002 f8e3 	bl	800c1c8 <uxr_buffer_delete_entity>
 800a002:	4602      	mov	r2, r0
 800a004:	6920      	ldr	r0, [r4, #16]
 800a006:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a00a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a00e:	f000 fadb 	bl	800a5c8 <run_xrce_session>
 800a012:	f080 0401 	eor.w	r4, r0, #1
 800a016:	b2e4      	uxtb	r4, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	0064      	lsls	r4, r4, #1
 800a01c:	f000 fa44 	bl	800a4a8 <rmw_uxrce_fini_service_memory>
 800a020:	e7c5      	b.n	8009fae <rmw_destroy_service+0x12>
 800a022:	bf00      	nop

0800a024 <rmw_destroy_subscription>:
 800a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a028:	b128      	cbz	r0, 800a036 <rmw_destroy_subscription+0x12>
 800a02a:	4604      	mov	r4, r0
 800a02c:	6800      	ldr	r0, [r0, #0]
 800a02e:	460d      	mov	r5, r1
 800a030:	f000 fb50 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 800a034:	b918      	cbnz	r0, 800a03e <rmw_destroy_subscription+0x1a>
 800a036:	2401      	movs	r4, #1
 800a038:	4620      	mov	r0, r4
 800a03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a03e:	6863      	ldr	r3, [r4, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0f8      	beq.n	800a036 <rmw_destroy_subscription+0x12>
 800a044:	2d00      	cmp	r5, #0
 800a046:	d0f6      	beq.n	800a036 <rmw_destroy_subscription+0x12>
 800a048:	6828      	ldr	r0, [r5, #0]
 800a04a:	f000 fb43 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0f1      	beq.n	800a036 <rmw_destroy_subscription+0x12>
 800a052:	686c      	ldr	r4, [r5, #4]
 800a054:	2c00      	cmp	r4, #0
 800a056:	d0ee      	beq.n	800a036 <rmw_destroy_subscription+0x12>
 800a058:	6a26      	ldr	r6, [r4, #32]
 800a05a:	6962      	ldr	r2, [r4, #20]
 800a05c:	6930      	ldr	r0, [r6, #16]
 800a05e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a062:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a066:	6819      	ldr	r1, [r3, #0]
 800a068:	f002 fae0 	bl	800c62c <uxr_buffer_cancel_data>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6930      	ldr	r0, [r6, #16]
 800a070:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a074:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a078:	f000 faa6 	bl	800a5c8 <run_xrce_session>
 800a07c:	69e0      	ldr	r0, [r4, #28]
 800a07e:	f006 ffd9 	bl	8011034 <destroy_topic>
 800a082:	6a23      	ldr	r3, [r4, #32]
 800a084:	6962      	ldr	r2, [r4, #20]
 800a086:	6918      	ldr	r0, [r3, #16]
 800a088:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a08c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a090:	6819      	ldr	r1, [r3, #0]
 800a092:	f002 f899 	bl	800c1c8 <uxr_buffer_delete_entity>
 800a096:	6a23      	ldr	r3, [r4, #32]
 800a098:	6922      	ldr	r2, [r4, #16]
 800a09a:	4680      	mov	r8, r0
 800a09c:	6918      	ldr	r0, [r3, #16]
 800a09e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a0a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a0a6:	6819      	ldr	r1, [r3, #0]
 800a0a8:	f002 f88e 	bl	800c1c8 <uxr_buffer_delete_entity>
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	6930      	ldr	r0, [r6, #16]
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a0b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a0ba:	f000 fa85 	bl	800a5c8 <run_xrce_session>
 800a0be:	4604      	mov	r4, r0
 800a0c0:	6930      	ldr	r0, [r6, #16]
 800a0c2:	463a      	mov	r2, r7
 800a0c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a0c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a0cc:	f000 fa7c 	bl	800a5c8 <run_xrce_session>
 800a0d0:	4004      	ands	r4, r0
 800a0d2:	f084 0401 	eor.w	r4, r4, #1
 800a0d6:	b2e4      	uxtb	r4, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	0064      	lsls	r4, r4, #1
 800a0dc:	f000 f9ce 	bl	800a47c <rmw_uxrce_fini_subscription_memory>
 800a0e0:	e7aa      	b.n	800a038 <rmw_destroy_subscription+0x14>
 800a0e2:	bf00      	nop

0800a0e4 <rmw_uxrce_transport_init>:
 800a0e4:	b508      	push	{r3, lr}
 800a0e6:	b108      	cbz	r0, 800a0ec <rmw_uxrce_transport_init+0x8>
 800a0e8:	f100 0210 	add.w	r2, r0, #16
 800a0ec:	b139      	cbz	r1, 800a0fe <rmw_uxrce_transport_init+0x1a>
 800a0ee:	6949      	ldr	r1, [r1, #20]
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	f002 fa35 	bl	800c560 <uxr_init_custom_transport>
 800a0f6:	f080 0001 	eor.w	r0, r0, #1
 800a0fa:	b2c0      	uxtb	r0, r0
 800a0fc:	bd08      	pop	{r3, pc}
 800a0fe:	4b04      	ldr	r3, [pc, #16]	@ (800a110 <rmw_uxrce_transport_init+0x2c>)
 800a100:	4610      	mov	r0, r2
 800a102:	6859      	ldr	r1, [r3, #4]
 800a104:	f002 fa2c 	bl	800c560 <uxr_init_custom_transport>
 800a108:	f080 0001 	eor.w	r0, r0, #1
 800a10c:	b2c0      	uxtb	r0, r0
 800a10e:	bd08      	pop	{r3, pc}
 800a110:	2000c048 	.word	0x2000c048

0800a114 <rmw_uros_epoch_nanos>:
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <rmw_uros_epoch_nanos+0x18>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	b123      	cbz	r3, 800a124 <rmw_uros_epoch_nanos+0x10>
 800a11a:	6898      	ldr	r0, [r3, #8]
 800a11c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a120:	f002 bc78 	b.w	800ca14 <uxr_epoch_nanos>
 800a124:	2000      	movs	r0, #0
 800a126:	2100      	movs	r1, #0
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	200109e8 	.word	0x200109e8

0800a130 <rmw_uros_sync_session>:
 800a130:	b508      	push	{r3, lr}
 800a132:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <rmw_uros_sync_session+0x20>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	b14b      	cbz	r3, 800a14c <rmw_uros_sync_session+0x1c>
 800a138:	4601      	mov	r1, r0
 800a13a:	6898      	ldr	r0, [r3, #8]
 800a13c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a140:	f003 f84a 	bl	800d1d8 <uxr_sync_session>
 800a144:	f080 0001 	eor.w	r0, r0, #1
 800a148:	b2c0      	uxtb	r0, r0
 800a14a:	bd08      	pop	{r3, pc}
 800a14c:	2001      	movs	r0, #1
 800a14e:	bd08      	pop	{r3, pc}
 800a150:	200109e8 	.word	0x200109e8

0800a154 <rmw_uxrce_init_service_memory>:
 800a154:	b1e2      	cbz	r2, 800a190 <rmw_uxrce_init_service_memory+0x3c>
 800a156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15a:	7b05      	ldrb	r5, [r0, #12]
 800a15c:	4606      	mov	r6, r0
 800a15e:	b9ad      	cbnz	r5, 800a18c <rmw_uxrce_init_service_memory+0x38>
 800a160:	23c8      	movs	r3, #200	@ 0xc8
 800a162:	e9c0 5500 	strd	r5, r5, [r0]
 800a166:	6083      	str	r3, [r0, #8]
 800a168:	f240 1301 	movw	r3, #257	@ 0x101
 800a16c:	4617      	mov	r7, r2
 800a16e:	8183      	strh	r3, [r0, #12]
 800a170:	460c      	mov	r4, r1
 800a172:	46a8      	mov	r8, r5
 800a174:	4621      	mov	r1, r4
 800a176:	4630      	mov	r0, r6
 800a178:	3501      	adds	r5, #1
 800a17a:	f006 fea9 	bl	8010ed0 <put_memory>
 800a17e:	42af      	cmp	r7, r5
 800a180:	60a4      	str	r4, [r4, #8]
 800a182:	f884 800c 	strb.w	r8, [r4, #12]
 800a186:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a18a:	d1f3      	bne.n	800a174 <rmw_uxrce_init_service_memory+0x20>
 800a18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop

0800a194 <rmw_uxrce_init_client_memory>:
 800a194:	b1e2      	cbz	r2, 800a1d0 <rmw_uxrce_init_client_memory+0x3c>
 800a196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19a:	7b05      	ldrb	r5, [r0, #12]
 800a19c:	4606      	mov	r6, r0
 800a19e:	b9ad      	cbnz	r5, 800a1cc <rmw_uxrce_init_client_memory+0x38>
 800a1a0:	23c8      	movs	r3, #200	@ 0xc8
 800a1a2:	e9c0 5500 	strd	r5, r5, [r0]
 800a1a6:	6083      	str	r3, [r0, #8]
 800a1a8:	f240 1301 	movw	r3, #257	@ 0x101
 800a1ac:	4617      	mov	r7, r2
 800a1ae:	8183      	strh	r3, [r0, #12]
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	46a8      	mov	r8, r5
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	f006 fe89 	bl	8010ed0 <put_memory>
 800a1be:	42af      	cmp	r7, r5
 800a1c0:	60a4      	str	r4, [r4, #8]
 800a1c2:	f884 800c 	strb.w	r8, [r4, #12]
 800a1c6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a1ca:	d1f3      	bne.n	800a1b4 <rmw_uxrce_init_client_memory+0x20>
 800a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop

0800a1d4 <rmw_uxrce_init_publisher_memory>:
 800a1d4:	b1e2      	cbz	r2, 800a210 <rmw_uxrce_init_publisher_memory+0x3c>
 800a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	7b05      	ldrb	r5, [r0, #12]
 800a1dc:	4606      	mov	r6, r0
 800a1de:	b9ad      	cbnz	r5, 800a20c <rmw_uxrce_init_publisher_memory+0x38>
 800a1e0:	23d8      	movs	r3, #216	@ 0xd8
 800a1e2:	e9c0 5500 	strd	r5, r5, [r0]
 800a1e6:	6083      	str	r3, [r0, #8]
 800a1e8:	f240 1301 	movw	r3, #257	@ 0x101
 800a1ec:	4617      	mov	r7, r2
 800a1ee:	8183      	strh	r3, [r0, #12]
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	46a8      	mov	r8, r5
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	3501      	adds	r5, #1
 800a1fa:	f006 fe69 	bl	8010ed0 <put_memory>
 800a1fe:	42af      	cmp	r7, r5
 800a200:	60a4      	str	r4, [r4, #8]
 800a202:	f884 800c 	strb.w	r8, [r4, #12]
 800a206:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a20a:	d1f3      	bne.n	800a1f4 <rmw_uxrce_init_publisher_memory+0x20>
 800a20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop

0800a214 <rmw_uxrce_init_subscription_memory>:
 800a214:	b1e2      	cbz	r2, 800a250 <rmw_uxrce_init_subscription_memory+0x3c>
 800a216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	7b05      	ldrb	r5, [r0, #12]
 800a21c:	4606      	mov	r6, r0
 800a21e:	b9ad      	cbnz	r5, 800a24c <rmw_uxrce_init_subscription_memory+0x38>
 800a220:	23d8      	movs	r3, #216	@ 0xd8
 800a222:	e9c0 5500 	strd	r5, r5, [r0]
 800a226:	6083      	str	r3, [r0, #8]
 800a228:	f240 1301 	movw	r3, #257	@ 0x101
 800a22c:	4617      	mov	r7, r2
 800a22e:	8183      	strh	r3, [r0, #12]
 800a230:	460c      	mov	r4, r1
 800a232:	46a8      	mov	r8, r5
 800a234:	4621      	mov	r1, r4
 800a236:	4630      	mov	r0, r6
 800a238:	3501      	adds	r5, #1
 800a23a:	f006 fe49 	bl	8010ed0 <put_memory>
 800a23e:	42af      	cmp	r7, r5
 800a240:	60a4      	str	r4, [r4, #8]
 800a242:	f884 800c 	strb.w	r8, [r4, #12]
 800a246:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a24a:	d1f3      	bne.n	800a234 <rmw_uxrce_init_subscription_memory+0x20>
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop

0800a254 <rmw_uxrce_init_node_memory>:
 800a254:	b1e2      	cbz	r2, 800a290 <rmw_uxrce_init_node_memory+0x3c>
 800a256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25a:	7b05      	ldrb	r5, [r0, #12]
 800a25c:	4606      	mov	r6, r0
 800a25e:	b9ad      	cbnz	r5, 800a28c <rmw_uxrce_init_node_memory+0x38>
 800a260:	23a4      	movs	r3, #164	@ 0xa4
 800a262:	e9c0 5500 	strd	r5, r5, [r0]
 800a266:	6083      	str	r3, [r0, #8]
 800a268:	f240 1301 	movw	r3, #257	@ 0x101
 800a26c:	4617      	mov	r7, r2
 800a26e:	8183      	strh	r3, [r0, #12]
 800a270:	460c      	mov	r4, r1
 800a272:	46a8      	mov	r8, r5
 800a274:	4621      	mov	r1, r4
 800a276:	4630      	mov	r0, r6
 800a278:	3501      	adds	r5, #1
 800a27a:	f006 fe29 	bl	8010ed0 <put_memory>
 800a27e:	42af      	cmp	r7, r5
 800a280:	60a4      	str	r4, [r4, #8]
 800a282:	f884 800c 	strb.w	r8, [r4, #12]
 800a286:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a28a:	d1f3      	bne.n	800a274 <rmw_uxrce_init_node_memory+0x20>
 800a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop

0800a294 <rmw_uxrce_init_session_memory>:
 800a294:	b1ea      	cbz	r2, 800a2d2 <rmw_uxrce_init_session_memory+0x3e>
 800a296:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a29a:	7b05      	ldrb	r5, [r0, #12]
 800a29c:	4606      	mov	r6, r0
 800a29e:	b9b5      	cbnz	r5, 800a2ce <rmw_uxrce_init_session_memory+0x3a>
 800a2a0:	e9c0 5500 	strd	r5, r5, [r0]
 800a2a4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a2a8:	f240 1301 	movw	r3, #257	@ 0x101
 800a2ac:	4617      	mov	r7, r2
 800a2ae:	f8c0 8008 	str.w	r8, [r0, #8]
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	8183      	strh	r3, [r0, #12]
 800a2b6:	46a9      	mov	r9, r5
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	3501      	adds	r5, #1
 800a2be:	f006 fe07 	bl	8010ed0 <put_memory>
 800a2c2:	42af      	cmp	r7, r5
 800a2c4:	60a4      	str	r4, [r4, #8]
 800a2c6:	f884 900c 	strb.w	r9, [r4, #12]
 800a2ca:	4444      	add	r4, r8
 800a2cc:	d1f4      	bne.n	800a2b8 <rmw_uxrce_init_session_memory+0x24>
 800a2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d2:	4770      	bx	lr

0800a2d4 <rmw_uxrce_init_topic_memory>:
 800a2d4:	b1e2      	cbz	r2, 800a310 <rmw_uxrce_init_topic_memory+0x3c>
 800a2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2da:	7b05      	ldrb	r5, [r0, #12]
 800a2dc:	4606      	mov	r6, r0
 800a2de:	b9ad      	cbnz	r5, 800a30c <rmw_uxrce_init_topic_memory+0x38>
 800a2e0:	231c      	movs	r3, #28
 800a2e2:	e9c0 5500 	strd	r5, r5, [r0]
 800a2e6:	6083      	str	r3, [r0, #8]
 800a2e8:	f240 1301 	movw	r3, #257	@ 0x101
 800a2ec:	4617      	mov	r7, r2
 800a2ee:	8183      	strh	r3, [r0, #12]
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	46a8      	mov	r8, r5
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	f006 fde9 	bl	8010ed0 <put_memory>
 800a2fe:	42af      	cmp	r7, r5
 800a300:	60a4      	str	r4, [r4, #8]
 800a302:	f884 800c 	strb.w	r8, [r4, #12]
 800a306:	f104 041c 	add.w	r4, r4, #28
 800a30a:	d1f3      	bne.n	800a2f4 <rmw_uxrce_init_topic_memory+0x20>
 800a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop

0800a314 <rmw_uxrce_init_static_input_buffer_memory>:
 800a314:	b1ea      	cbz	r2, 800a352 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	7b05      	ldrb	r5, [r0, #12]
 800a31c:	4606      	mov	r6, r0
 800a31e:	b9b5      	cbnz	r5, 800a34e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a320:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800a324:	e9c0 5500 	strd	r5, r5, [r0]
 800a328:	6083      	str	r3, [r0, #8]
 800a32a:	f240 1301 	movw	r3, #257	@ 0x101
 800a32e:	4617      	mov	r7, r2
 800a330:	8183      	strh	r3, [r0, #12]
 800a332:	460c      	mov	r4, r1
 800a334:	46a8      	mov	r8, r5
 800a336:	4621      	mov	r1, r4
 800a338:	4630      	mov	r0, r6
 800a33a:	3501      	adds	r5, #1
 800a33c:	f006 fdc8 	bl	8010ed0 <put_memory>
 800a340:	42af      	cmp	r7, r5
 800a342:	60a4      	str	r4, [r4, #8]
 800a344:	f884 800c 	strb.w	r8, [r4, #12]
 800a348:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800a34c:	d1f3      	bne.n	800a336 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a352:	4770      	bx	lr

0800a354 <rmw_uxrce_init_init_options_impl_memory>:
 800a354:	b1e2      	cbz	r2, 800a390 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800a356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	7b05      	ldrb	r5, [r0, #12]
 800a35c:	4606      	mov	r6, r0
 800a35e:	b9ad      	cbnz	r5, 800a38c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800a360:	232c      	movs	r3, #44	@ 0x2c
 800a362:	e9c0 5500 	strd	r5, r5, [r0]
 800a366:	6083      	str	r3, [r0, #8]
 800a368:	f240 1301 	movw	r3, #257	@ 0x101
 800a36c:	4617      	mov	r7, r2
 800a36e:	8183      	strh	r3, [r0, #12]
 800a370:	460c      	mov	r4, r1
 800a372:	46a8      	mov	r8, r5
 800a374:	4621      	mov	r1, r4
 800a376:	4630      	mov	r0, r6
 800a378:	3501      	adds	r5, #1
 800a37a:	f006 fda9 	bl	8010ed0 <put_memory>
 800a37e:	42af      	cmp	r7, r5
 800a380:	60a4      	str	r4, [r4, #8]
 800a382:	f884 800c 	strb.w	r8, [r4, #12]
 800a386:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800a38a:	d1f3      	bne.n	800a374 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop

0800a394 <rmw_uxrce_init_wait_set_memory>:
 800a394:	b1e2      	cbz	r2, 800a3d0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800a396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39a:	7b05      	ldrb	r5, [r0, #12]
 800a39c:	4606      	mov	r6, r0
 800a39e:	b9ad      	cbnz	r5, 800a3cc <rmw_uxrce_init_wait_set_memory+0x38>
 800a3a0:	231c      	movs	r3, #28
 800a3a2:	e9c0 5500 	strd	r5, r5, [r0]
 800a3a6:	6083      	str	r3, [r0, #8]
 800a3a8:	f240 1301 	movw	r3, #257	@ 0x101
 800a3ac:	4617      	mov	r7, r2
 800a3ae:	8183      	strh	r3, [r0, #12]
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	46a8      	mov	r8, r5
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	f006 fd89 	bl	8010ed0 <put_memory>
 800a3be:	42af      	cmp	r7, r5
 800a3c0:	60a4      	str	r4, [r4, #8]
 800a3c2:	f884 800c 	strb.w	r8, [r4, #12]
 800a3c6:	f104 041c 	add.w	r4, r4, #28
 800a3ca:	d1f3      	bne.n	800a3b4 <rmw_uxrce_init_wait_set_memory+0x20>
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop

0800a3d4 <rmw_uxrce_init_guard_condition_memory>:
 800a3d4:	b1e2      	cbz	r2, 800a410 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800a3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3da:	7b05      	ldrb	r5, [r0, #12]
 800a3dc:	4606      	mov	r6, r0
 800a3de:	b9ad      	cbnz	r5, 800a40c <rmw_uxrce_init_guard_condition_memory+0x38>
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	e9c0 5500 	strd	r5, r5, [r0]
 800a3e6:	6083      	str	r3, [r0, #8]
 800a3e8:	f240 1301 	movw	r3, #257	@ 0x101
 800a3ec:	4617      	mov	r7, r2
 800a3ee:	8183      	strh	r3, [r0, #12]
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	46a8      	mov	r8, r5
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	f006 fd69 	bl	8010ed0 <put_memory>
 800a3fe:	42af      	cmp	r7, r5
 800a400:	60a4      	str	r4, [r4, #8]
 800a402:	f884 800c 	strb.w	r8, [r4, #12]
 800a406:	f104 0420 	add.w	r4, r4, #32
 800a40a:	d1f3      	bne.n	800a3f4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800a40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop

0800a414 <rmw_uxrce_fini_session_memory>:
 800a414:	4601      	mov	r1, r0
 800a416:	4801      	ldr	r0, [pc, #4]	@ (800a41c <rmw_uxrce_fini_session_memory+0x8>)
 800a418:	f006 bd5a 	b.w	8010ed0 <put_memory>
 800a41c:	200109e8 	.word	0x200109e8

0800a420 <rmw_uxrce_fini_node_memory>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	6800      	ldr	r0, [r0, #0]
 800a426:	b128      	cbz	r0, 800a434 <rmw_uxrce_fini_node_memory+0x14>
 800a428:	4b07      	ldr	r3, [pc, #28]	@ (800a448 <rmw_uxrce_fini_node_memory+0x28>)
 800a42a:	6819      	ldr	r1, [r3, #0]
 800a42c:	f7f5 fef8 	bl	8000220 <strcmp>
 800a430:	b940      	cbnz	r0, 800a444 <rmw_uxrce_fini_node_memory+0x24>
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	6861      	ldr	r1, [r4, #4]
 800a436:	b129      	cbz	r1, 800a444 <rmw_uxrce_fini_node_memory+0x24>
 800a438:	2500      	movs	r5, #0
 800a43a:	4804      	ldr	r0, [pc, #16]	@ (800a44c <rmw_uxrce_fini_node_memory+0x2c>)
 800a43c:	610d      	str	r5, [r1, #16]
 800a43e:	f006 fd47 	bl	8010ed0 <put_memory>
 800a442:	6065      	str	r5, [r4, #4]
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	bf00      	nop
 800a448:	08014bf0 	.word	0x08014bf0
 800a44c:	2000f42c 	.word	0x2000f42c

0800a450 <rmw_uxrce_fini_publisher_memory>:
 800a450:	b510      	push	{r4, lr}
 800a452:	4604      	mov	r4, r0
 800a454:	6800      	ldr	r0, [r0, #0]
 800a456:	b128      	cbz	r0, 800a464 <rmw_uxrce_fini_publisher_memory+0x14>
 800a458:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <rmw_uxrce_fini_publisher_memory+0x24>)
 800a45a:	6819      	ldr	r1, [r3, #0]
 800a45c:	f7f5 fee0 	bl	8000220 <strcmp>
 800a460:	b938      	cbnz	r0, 800a472 <rmw_uxrce_fini_publisher_memory+0x22>
 800a462:	6020      	str	r0, [r4, #0]
 800a464:	6861      	ldr	r1, [r4, #4]
 800a466:	b121      	cbz	r1, 800a472 <rmw_uxrce_fini_publisher_memory+0x22>
 800a468:	4803      	ldr	r0, [pc, #12]	@ (800a478 <rmw_uxrce_fini_publisher_memory+0x28>)
 800a46a:	f006 fd31 	bl	8010ed0 <put_memory>
 800a46e:	2300      	movs	r3, #0
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	bd10      	pop	{r4, pc}
 800a474:	08014bf0 	.word	0x08014bf0
 800a478:	2000f378 	.word	0x2000f378

0800a47c <rmw_uxrce_fini_subscription_memory>:
 800a47c:	b510      	push	{r4, lr}
 800a47e:	4604      	mov	r4, r0
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	b128      	cbz	r0, 800a490 <rmw_uxrce_fini_subscription_memory+0x14>
 800a484:	4b06      	ldr	r3, [pc, #24]	@ (800a4a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800a486:	6819      	ldr	r1, [r3, #0]
 800a488:	f7f5 feca 	bl	8000220 <strcmp>
 800a48c:	b938      	cbnz	r0, 800a49e <rmw_uxrce_fini_subscription_memory+0x22>
 800a48e:	6020      	str	r0, [r4, #0]
 800a490:	6861      	ldr	r1, [r4, #4]
 800a492:	b121      	cbz	r1, 800a49e <rmw_uxrce_fini_subscription_memory+0x22>
 800a494:	4803      	ldr	r0, [pc, #12]	@ (800a4a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800a496:	f006 fd1b 	bl	8010ed0 <put_memory>
 800a49a:	2300      	movs	r3, #0
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	bd10      	pop	{r4, pc}
 800a4a0:	08014bf0 	.word	0x08014bf0
 800a4a4:	2000eaf8 	.word	0x2000eaf8

0800a4a8 <rmw_uxrce_fini_service_memory>:
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	6800      	ldr	r0, [r0, #0]
 800a4ae:	b128      	cbz	r0, 800a4bc <rmw_uxrce_fini_service_memory+0x14>
 800a4b0:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <rmw_uxrce_fini_service_memory+0x24>)
 800a4b2:	6819      	ldr	r1, [r3, #0]
 800a4b4:	f7f5 feb4 	bl	8000220 <strcmp>
 800a4b8:	b938      	cbnz	r0, 800a4ca <rmw_uxrce_fini_service_memory+0x22>
 800a4ba:	6020      	str	r0, [r4, #0]
 800a4bc:	6861      	ldr	r1, [r4, #4]
 800a4be:	b121      	cbz	r1, 800a4ca <rmw_uxrce_fini_service_memory+0x22>
 800a4c0:	4803      	ldr	r0, [pc, #12]	@ (800a4d0 <rmw_uxrce_fini_service_memory+0x28>)
 800a4c2:	f006 fd05 	bl	8010ed0 <put_memory>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	bd10      	pop	{r4, pc}
 800a4cc:	08014bf0 	.word	0x08014bf0
 800a4d0:	2000e6b0 	.word	0x2000e6b0

0800a4d4 <rmw_uxrce_fini_client_memory>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	6800      	ldr	r0, [r0, #0]
 800a4da:	b128      	cbz	r0, 800a4e8 <rmw_uxrce_fini_client_memory+0x14>
 800a4dc:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <rmw_uxrce_fini_client_memory+0x24>)
 800a4de:	6819      	ldr	r1, [r3, #0]
 800a4e0:	f7f5 fe9e 	bl	8000220 <strcmp>
 800a4e4:	b938      	cbnz	r0, 800a4f6 <rmw_uxrce_fini_client_memory+0x22>
 800a4e6:	6020      	str	r0, [r4, #0]
 800a4e8:	6861      	ldr	r1, [r4, #4]
 800a4ea:	b121      	cbz	r1, 800a4f6 <rmw_uxrce_fini_client_memory+0x22>
 800a4ec:	4803      	ldr	r0, [pc, #12]	@ (800a4fc <rmw_uxrce_fini_client_memory+0x28>)
 800a4ee:	f006 fcef 	bl	8010ed0 <put_memory>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6063      	str	r3, [r4, #4]
 800a4f6:	bd10      	pop	{r4, pc}
 800a4f8:	08014bf0 	.word	0x08014bf0
 800a4fc:	2000e5d8 	.word	0x2000e5d8

0800a500 <rmw_uxrce_fini_topic_memory>:
 800a500:	b510      	push	{r4, lr}
 800a502:	4604      	mov	r4, r0
 800a504:	4621      	mov	r1, r4
 800a506:	4803      	ldr	r0, [pc, #12]	@ (800a514 <rmw_uxrce_fini_topic_memory+0x14>)
 800a508:	f006 fce2 	bl	8010ed0 <put_memory>
 800a50c:	2300      	movs	r3, #0
 800a50e:	61a3      	str	r3, [r4, #24]
 800a510:	bd10      	pop	{r4, pc}
 800a512:	bf00      	nop
 800a514:	2000e4fc 	.word	0x2000e4fc

0800a518 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800a518:	b082      	sub	sp, #8
 800a51a:	b530      	push	{r4, r5, lr}
 800a51c:	4929      	ldr	r1, [pc, #164]	@ (800a5c4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800a51e:	ac03      	add	r4, sp, #12
 800a520:	e884 000c 	stmia.w	r4, {r2, r3}
 800a524:	680c      	ldr	r4, [r1, #0]
 800a526:	461d      	mov	r5, r3
 800a528:	4602      	mov	r2, r0
 800a52a:	2c00      	cmp	r4, #0
 800a52c:	d043      	beq.n	800a5b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800a52e:	4620      	mov	r0, r4
 800a530:	2100      	movs	r1, #0
 800a532:	6883      	ldr	r3, [r0, #8]
 800a534:	6840      	ldr	r0, [r0, #4]
 800a536:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800a53a:	429a      	cmp	r2, r3
 800a53c:	bf08      	it	eq
 800a53e:	3101      	addeq	r1, #1
 800a540:	2800      	cmp	r0, #0
 800a542:	d1f6      	bne.n	800a532 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800a544:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d027      	beq.n	800a59c <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800a54c:	d906      	bls.n	800a55c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d004      	beq.n	800a55c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800a552:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a556:	2000      	movs	r0, #0
 800a558:	b002      	add	sp, #8
 800a55a:	4770      	bx	lr
 800a55c:	b1fd      	cbz	r5, 800a59e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a55e:	428d      	cmp	r5, r1
 800a560:	d81d      	bhi.n	800a59e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a562:	2c00      	cmp	r4, #0
 800a564:	d0f5      	beq.n	800a552 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800a566:	2000      	movs	r0, #0
 800a568:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800a56c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800a570:	e001      	b.n	800a576 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800a572:	6864      	ldr	r4, [r4, #4]
 800a574:	b1dc      	cbz	r4, 800a5ae <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800a57c:	428a      	cmp	r2, r1
 800a57e:	d1f8      	bne.n	800a572 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a580:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800a584:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800a588:	4561      	cmp	r1, ip
 800a58a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a58e:	eb73 0e05 	sbcs.w	lr, r3, r5
 800a592:	daee      	bge.n	800a572 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a594:	468c      	mov	ip, r1
 800a596:	461d      	mov	r5, r3
 800a598:	4620      	mov	r0, r4
 800a59a:	e7ea      	b.n	800a572 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800a59c:	b92d      	cbnz	r5, 800a5aa <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800a59e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a2:	4808      	ldr	r0, [pc, #32]	@ (800a5c4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800a5a4:	b002      	add	sp, #8
 800a5a6:	f006 bc83 	b.w	8010eb0 <get_memory>
 800a5aa:	428d      	cmp	r5, r1
 800a5ac:	d8f7      	bhi.n	800a59e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a5ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5b2:	b002      	add	sp, #8
 800a5b4:	4770      	bx	lr
 800a5b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d0ef      	beq.n	800a59e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a5be:	d9ee      	bls.n	800a59e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	e7c4      	b.n	800a54e <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800a5c4:	2000e348 	.word	0x2000e348

0800a5c8 <run_xrce_session>:
 800a5c8:	b500      	push	{lr}
 800a5ca:	f891 c002 	ldrb.w	ip, [r1, #2]
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	f1bc 0f01 	cmp.w	ip, #1
 800a5d4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800a5d8:	d00f      	beq.n	800a5fa <run_xrce_session+0x32>
 800a5da:	4619      	mov	r1, r3
 800a5dc:	2301      	movs	r3, #1
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	f10d 020e 	add.w	r2, sp, #14
 800a5e4:	f10d 0317 	add.w	r3, sp, #23
 800a5e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5ec:	f002 fda0 	bl	800d130 <uxr_run_session_until_all_status>
 800a5f0:	b100      	cbz	r0, 800a5f4 <run_xrce_session+0x2c>
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	b007      	add	sp, #28
 800a5f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5fe:	f002 fa13 	bl	800ca28 <uxr_flash_output_streams>
 800a602:	2001      	movs	r0, #1
 800a604:	e7f6      	b.n	800a5f4 <run_xrce_session+0x2c>
 800a606:	bf00      	nop

0800a608 <convert_qos_profile>:
 800a608:	780a      	ldrb	r2, [r1, #0]
 800a60a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a60e:	f1a2 0202 	sub.w	r2, r2, #2
 800a612:	fab2 f282 	clz	r2, r2
 800a616:	0952      	lsrs	r2, r2, #5
 800a618:	7082      	strb	r2, [r0, #2]
 800a61a:	7a4a      	ldrb	r2, [r1, #9]
 800a61c:	8889      	ldrh	r1, [r1, #4]
 800a61e:	8081      	strh	r1, [r0, #4]
 800a620:	f1a2 0202 	sub.w	r2, r2, #2
 800a624:	f1ac 0c02 	sub.w	ip, ip, #2
 800a628:	fab2 f282 	clz	r2, r2
 800a62c:	fabc fc8c 	clz	ip, ip
 800a630:	0952      	lsrs	r2, r2, #5
 800a632:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a636:	0052      	lsls	r2, r2, #1
 800a638:	f880 c001 	strb.w	ip, [r0, #1]
 800a63c:	7002      	strb	r2, [r0, #0]
 800a63e:	4770      	bx	lr

0800a640 <generate_type_name>:
 800a640:	b530      	push	{r4, r5, lr}
 800a642:	2300      	movs	r3, #0
 800a644:	700b      	strb	r3, [r1, #0]
 800a646:	6803      	ldr	r3, [r0, #0]
 800a648:	b087      	sub	sp, #28
 800a64a:	4614      	mov	r4, r2
 800a64c:	b1d3      	cbz	r3, 800a684 <generate_type_name+0x44>
 800a64e:	4a0f      	ldr	r2, [pc, #60]	@ (800a68c <generate_type_name+0x4c>)
 800a650:	4615      	mov	r5, r2
 800a652:	9203      	str	r2, [sp, #12]
 800a654:	9500      	str	r5, [sp, #0]
 800a656:	6842      	ldr	r2, [r0, #4]
 800a658:	480d      	ldr	r0, [pc, #52]	@ (800a690 <generate_type_name+0x50>)
 800a65a:	9001      	str	r0, [sp, #4]
 800a65c:	4608      	mov	r0, r1
 800a65e:	490d      	ldr	r1, [pc, #52]	@ (800a694 <generate_type_name+0x54>)
 800a660:	9204      	str	r2, [sp, #16]
 800a662:	9105      	str	r1, [sp, #20]
 800a664:	9102      	str	r1, [sp, #8]
 800a666:	4a0c      	ldr	r2, [pc, #48]	@ (800a698 <generate_type_name+0x58>)
 800a668:	4621      	mov	r1, r4
 800a66a:	f008 fbe1 	bl	8012e30 <sniprintf>
 800a66e:	2800      	cmp	r0, #0
 800a670:	db05      	blt.n	800a67e <generate_type_name+0x3e>
 800a672:	4284      	cmp	r4, r0
 800a674:	bfd4      	ite	le
 800a676:	2000      	movle	r0, #0
 800a678:	2001      	movgt	r0, #1
 800a67a:	b007      	add	sp, #28
 800a67c:	bd30      	pop	{r4, r5, pc}
 800a67e:	2000      	movs	r0, #0
 800a680:	b007      	add	sp, #28
 800a682:	bd30      	pop	{r4, r5, pc}
 800a684:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <generate_type_name+0x5c>)
 800a686:	4a01      	ldr	r2, [pc, #4]	@ (800a68c <generate_type_name+0x4c>)
 800a688:	461d      	mov	r5, r3
 800a68a:	e7e2      	b.n	800a652 <generate_type_name+0x12>
 800a68c:	080143bc 	.word	0x080143bc
 800a690:	080143d4 	.word	0x080143d4
 800a694:	080143d0 	.word	0x080143d0
 800a698:	080143c0 	.word	0x080143c0
 800a69c:	08014e0c 	.word	0x08014e0c

0800a6a0 <generate_topic_name>:
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	9000      	str	r0, [sp, #0]
 800a6a8:	4b08      	ldr	r3, [pc, #32]	@ (800a6cc <generate_topic_name+0x2c>)
 800a6aa:	4a09      	ldr	r2, [pc, #36]	@ (800a6d0 <generate_topic_name+0x30>)
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	f008 fbbe 	bl	8012e30 <sniprintf>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	db05      	blt.n	800a6c4 <generate_topic_name+0x24>
 800a6b8:	4284      	cmp	r4, r0
 800a6ba:	bfd4      	ite	le
 800a6bc:	2000      	movle	r0, #0
 800a6be:	2001      	movgt	r0, #1
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd10      	pop	{r4, pc}
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	b002      	add	sp, #8
 800a6c8:	bd10      	pop	{r4, pc}
 800a6ca:	bf00      	nop
 800a6cc:	080143e0 	.word	0x080143e0
 800a6d0:	080143d8 	.word	0x080143d8

0800a6d4 <is_uxrce_rmw_identifier_valid>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	b140      	cbz	r0, 800a6ec <is_uxrce_rmw_identifier_valid+0x18>
 800a6da:	f006 fc51 	bl	8010f80 <rmw_get_implementation_identifier>
 800a6de:	4601      	mov	r1, r0
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f7f5 fd9d 	bl	8000220 <strcmp>
 800a6e6:	fab0 f080 	clz	r0, r0
 800a6ea:	0940      	lsrs	r0, r0, #5
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	bf00      	nop

0800a6f0 <get_message_typesupport_handle>:
 800a6f0:	6883      	ldr	r3, [r0, #8]
 800a6f2:	4718      	bx	r3

0800a6f4 <get_message_typesupport_handle_function>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	6800      	ldr	r0, [r0, #0]
 800a6fa:	f7f5 fd91 	bl	8000220 <strcmp>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	bf0c      	ite	eq
 800a702:	4620      	moveq	r0, r4
 800a704:	2000      	movne	r0, #0
 800a706:	bd10      	pop	{r4, pc}

0800a708 <rosidl_runtime_c__double__Sequence__init>:
 800a708:	b1b0      	cbz	r0, 800a738 <rosidl_runtime_c__double__Sequence__init+0x30>
 800a70a:	b530      	push	{r4, r5, lr}
 800a70c:	460d      	mov	r5, r1
 800a70e:	b087      	sub	sp, #28
 800a710:	4604      	mov	r4, r0
 800a712:	b931      	cbnz	r1, 800a722 <rosidl_runtime_c__double__Sequence__init+0x1a>
 800a714:	4608      	mov	r0, r1
 800a716:	e9c4 0500 	strd	r0, r5, [r4]
 800a71a:	60a5      	str	r5, [r4, #8]
 800a71c:	2001      	movs	r0, #1
 800a71e:	b007      	add	sp, #28
 800a720:	bd30      	pop	{r4, r5, pc}
 800a722:	a801      	add	r0, sp, #4
 800a724:	f7fe fe9a 	bl	800945c <rcutils_get_default_allocator>
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	9905      	ldr	r1, [sp, #20]
 800a72c:	00e8      	lsls	r0, r5, #3
 800a72e:	4798      	blx	r3
 800a730:	2800      	cmp	r0, #0
 800a732:	d1f0      	bne.n	800a716 <rosidl_runtime_c__double__Sequence__init+0xe>
 800a734:	2000      	movs	r0, #0
 800a736:	e7f2      	b.n	800a71e <rosidl_runtime_c__double__Sequence__init+0x16>
 800a738:	2000      	movs	r0, #0
 800a73a:	4770      	bx	lr

0800a73c <rosidl_runtime_c__double__Sequence__fini>:
 800a73c:	b188      	cbz	r0, 800a762 <rosidl_runtime_c__double__Sequence__fini+0x26>
 800a73e:	b510      	push	{r4, lr}
 800a740:	6803      	ldr	r3, [r0, #0]
 800a742:	b086      	sub	sp, #24
 800a744:	4604      	mov	r4, r0
 800a746:	b153      	cbz	r3, 800a75e <rosidl_runtime_c__double__Sequence__fini+0x22>
 800a748:	a801      	add	r0, sp, #4
 800a74a:	f7fe fe87 	bl	800945c <rcutils_get_default_allocator>
 800a74e:	9b02      	ldr	r3, [sp, #8]
 800a750:	9905      	ldr	r1, [sp, #20]
 800a752:	6820      	ldr	r0, [r4, #0]
 800a754:	4798      	blx	r3
 800a756:	2300      	movs	r3, #0
 800a758:	e9c4 3300 	strd	r3, r3, [r4]
 800a75c:	60a3      	str	r3, [r4, #8]
 800a75e:	b006      	add	sp, #24
 800a760:	bd10      	pop	{r4, pc}
 800a762:	4770      	bx	lr

0800a764 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	6805      	ldr	r5, [r0, #0]
 800a76a:	4604      	mov	r4, r0
 800a76c:	4628      	mov	r0, r5
 800a76e:	460e      	mov	r6, r1
 800a770:	f7f5 fd56 	bl	8000220 <strcmp>
 800a774:	b308      	cbz	r0, 800a7ba <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800a776:	4b12      	ldr	r3, [pc, #72]	@ (800a7c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800a778:	4628      	mov	r0, r5
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	f7f5 fd50 	bl	8000220 <strcmp>
 800a780:	4605      	mov	r5, r0
 800a782:	b980      	cbnz	r0, 800a7a6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800a784:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a788:	f8d8 4000 	ldr.w	r4, [r8]
 800a78c:	b1ac      	cbz	r4, 800a7ba <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800a78e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800a792:	3f04      	subs	r7, #4
 800a794:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800a798:	4631      	mov	r1, r6
 800a79a:	f7f5 fd41 	bl	8000220 <strcmp>
 800a79e:	b128      	cbz	r0, 800a7ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	42a5      	cmp	r5, r4
 800a7a4:	d1f6      	bne.n	800a794 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a7b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b8:	4718      	bx	r3
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	20000184 	.word	0x20000184

0800a7c4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800a7c4:	f006 bca0 	b.w	8011108 <std_msgs__msg__Header__init>

0800a7c8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800a7c8:	f006 bcbe 	b.w	8011148 <std_msgs__msg__Header__fini>

0800a7cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800a7cc:	b508      	push	{r3, lr}
 800a7ce:	f000 f99b 	bl	800ab08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800a7d2:	4b06      	ldr	r3, [pc, #24]	@ (800a7ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800a7d4:	4906      	ldr	r1, [pc, #24]	@ (800a7f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	60c8      	str	r0, [r1, #12]
 800a7da:	b10a      	cbz	r2, 800a7e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800a7dc:	4803      	ldr	r0, [pc, #12]	@ (800a7ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800a7de:	bd08      	pop	{r3, pc}
 800a7e0:	4a04      	ldr	r2, [pc, #16]	@ (800a7f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800a7e2:	4802      	ldr	r0, [pc, #8]	@ (800a7ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800a7e4:	6812      	ldr	r2, [r2, #0]
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	bd08      	pop	{r3, pc}
 800a7ea:	bf00      	nop
 800a7ec:	2000018c 	.word	0x2000018c
 800a7f0:	200001a4 	.word	0x200001a4
 800a7f4:	20000188 	.word	0x20000188

0800a7f8 <_Header__max_serialized_size>:
 800a7f8:	b500      	push	{lr}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	2100      	movs	r1, #0
 800a800:	f10d 0007 	add.w	r0, sp, #7
 800a804:	f88d 3007 	strb.w	r3, [sp, #7]
 800a808:	f000 f9dc 	bl	800abc4 <max_serialized_size_builtin_interfaces__msg__Time>
 800a80c:	b003      	add	sp, #12
 800a80e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a812:	bf00      	nop

0800a814 <get_serialized_size_std_msgs__msg__Header>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	4605      	mov	r5, r0
 800a818:	b168      	cbz	r0, 800a836 <get_serialized_size_std_msgs__msg__Header+0x22>
 800a81a:	460c      	mov	r4, r1
 800a81c:	f000 f982 	bl	800ab24 <get_serialized_size_builtin_interfaces__msg__Time>
 800a820:	1826      	adds	r6, r4, r0
 800a822:	2104      	movs	r1, #4
 800a824:	4630      	mov	r0, r6
 800a826:	f7fe fa81 	bl	8008d2c <ucdr_alignment>
 800a82a:	68eb      	ldr	r3, [r5, #12]
 800a82c:	f1c4 0405 	rsb	r4, r4, #5
 800a830:	441c      	add	r4, r3
 800a832:	4404      	add	r4, r0
 800a834:	19a0      	adds	r0, r4, r6
 800a836:	bd70      	pop	{r4, r5, r6, pc}

0800a838 <_Header__cdr_deserialize>:
 800a838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	b083      	sub	sp, #12
 800a83e:	b1e1      	cbz	r1, 800a87a <_Header__cdr_deserialize+0x42>
 800a840:	4606      	mov	r6, r0
 800a842:	f000 f9d3 	bl	800abec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800a846:	6843      	ldr	r3, [r0, #4]
 800a848:	4621      	mov	r1, r4
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	4630      	mov	r0, r6
 800a84e:	4798      	blx	r3
 800a850:	6927      	ldr	r7, [r4, #16]
 800a852:	68a1      	ldr	r1, [r4, #8]
 800a854:	ab01      	add	r3, sp, #4
 800a856:	463a      	mov	r2, r7
 800a858:	4630      	mov	r0, r6
 800a85a:	f7fe fae5 	bl	8008e28 <ucdr_deserialize_sequence_char>
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	4605      	mov	r5, r0
 800a862:	b920      	cbnz	r0, 800a86e <_Header__cdr_deserialize+0x36>
 800a864:	429f      	cmp	r7, r3
 800a866:	d30c      	bcc.n	800a882 <_Header__cdr_deserialize+0x4a>
 800a868:	4628      	mov	r0, r5
 800a86a:	b003      	add	sp, #12
 800a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86e:	b103      	cbz	r3, 800a872 <_Header__cdr_deserialize+0x3a>
 800a870:	3b01      	subs	r3, #1
 800a872:	4628      	mov	r0, r5
 800a874:	60e3      	str	r3, [r4, #12]
 800a876:	b003      	add	sp, #12
 800a878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87a:	460d      	mov	r5, r1
 800a87c:	4628      	mov	r0, r5
 800a87e:	b003      	add	sp, #12
 800a880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a882:	2101      	movs	r1, #1
 800a884:	75b0      	strb	r0, [r6, #22]
 800a886:	7571      	strb	r1, [r6, #21]
 800a888:	60e0      	str	r0, [r4, #12]
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7fe fa64 	bl	8008d58 <ucdr_align_to>
 800a890:	4630      	mov	r0, r6
 800a892:	9901      	ldr	r1, [sp, #4]
 800a894:	f7fe fa96 	bl	8008dc4 <ucdr_advance_buffer>
 800a898:	4628      	mov	r0, r5
 800a89a:	b003      	add	sp, #12
 800a89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89e:	bf00      	nop

0800a8a0 <_Header__cdr_serialize>:
 800a8a0:	b1f8      	cbz	r0, 800a8e2 <_Header__cdr_serialize+0x42>
 800a8a2:	b570      	push	{r4, r5, r6, lr}
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	f000 f9a0 	bl	800abec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800a8ac:	6843      	ldr	r3, [r0, #4]
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4798      	blx	r3
 800a8b6:	68a6      	ldr	r6, [r4, #8]
 800a8b8:	b156      	cbz	r6, 800a8d0 <_Header__cdr_serialize+0x30>
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7f5 fd10 	bl	80002e0 <strlen>
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	60e0      	str	r0, [r4, #12]
 800a8c4:	1c42      	adds	r2, r0, #1
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8cc:	f7fe ba9a 	b.w	8008e04 <ucdr_serialize_sequence_char>
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	60e0      	str	r0, [r4, #12]
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8de:	f7fe ba91 	b.w	8008e04 <ucdr_serialize_sequence_char>
 800a8e2:	4770      	bx	lr

0800a8e4 <_Header__get_serialized_size>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	b150      	cbz	r0, 800a900 <_Header__get_serialized_size+0x1c>
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	f000 f91a 	bl	800ab24 <get_serialized_size_builtin_interfaces__msg__Time>
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	f7fe fa1a 	bl	8008d2c <ucdr_alignment>
 800a8f8:	68e4      	ldr	r4, [r4, #12]
 800a8fa:	3405      	adds	r4, #5
 800a8fc:	442c      	add	r4, r5
 800a8fe:	4420      	add	r0, r4
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop

0800a904 <max_serialized_size_std_msgs__msg__Header>:
 800a904:	b510      	push	{r4, lr}
 800a906:	2301      	movs	r3, #1
 800a908:	4604      	mov	r4, r0
 800a90a:	7003      	strb	r3, [r0, #0]
 800a90c:	f000 f95a 	bl	800abc4 <max_serialized_size_builtin_interfaces__msg__Time>
 800a910:	2300      	movs	r3, #0
 800a912:	7023      	strb	r3, [r4, #0]
 800a914:	bd10      	pop	{r4, pc}
 800a916:	bf00      	nop

0800a918 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800a918:	4800      	ldr	r0, [pc, #0]	@ (800a91c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800a91a:	4770      	bx	lr
 800a91c:	2000021c 	.word	0x2000021c

0800a920 <actuator_msgs__msg__Actuators__get_type_hash>:
 800a920:	4800      	ldr	r0, [pc, #0]	@ (800a924 <actuator_msgs__msg__Actuators__get_type_hash+0x4>)
 800a922:	4770      	bx	lr
 800a924:	20000250 	.word	0x20000250

0800a928 <actuator_msgs__msg__Actuators__get_type_description>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4e0c      	ldr	r6, [pc, #48]	@ (800a95c <actuator_msgs__msg__Actuators__get_type_description+0x34>)
 800a92c:	7835      	ldrb	r5, [r6, #0]
 800a92e:	b10d      	cbz	r5, 800a934 <actuator_msgs__msg__Actuators__get_type_description+0xc>
 800a930:	480b      	ldr	r0, [pc, #44]	@ (800a960 <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	4628      	mov	r0, r5
 800a936:	f000 f8b7 	bl	800aaa8 <builtin_interfaces__msg__Time__get_type_description>
 800a93a:	300c      	adds	r0, #12
 800a93c:	c807      	ldmia	r0, {r0, r1, r2}
 800a93e:	4c09      	ldr	r4, [pc, #36]	@ (800a964 <actuator_msgs__msg__Actuators__get_type_description+0x3c>)
 800a940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a944:	4628      	mov	r0, r5
 800a946:	f006 fb9b 	bl	8011080 <std_msgs__msg__Header__get_type_description>
 800a94a:	300c      	adds	r0, #12
 800a94c:	c807      	ldmia	r0, {r0, r1, r2}
 800a94e:	3418      	adds	r4, #24
 800a950:	2301      	movs	r3, #1
 800a952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a956:	7033      	strb	r3, [r6, #0]
 800a958:	4801      	ldr	r0, [pc, #4]	@ (800a960 <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	20010a65 	.word	0x20010a65
 800a960:	08014488 	.word	0x08014488
 800a964:	20000458 	.word	0x20000458

0800a968 <actuator_msgs__msg__Actuators__get_type_description_sources>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	4e17      	ldr	r6, [pc, #92]	@ (800a9c8 <actuator_msgs__msg__Actuators__get_type_description_sources+0x60>)
 800a96c:	7837      	ldrb	r7, [r6, #0]
 800a96e:	b10f      	cbz	r7, 800a974 <actuator_msgs__msg__Actuators__get_type_description_sources+0xc>
 800a970:	4816      	ldr	r0, [pc, #88]	@ (800a9cc <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a974:	4d16      	ldr	r5, [pc, #88]	@ (800a9d0 <actuator_msgs__msg__Actuators__get_type_description_sources+0x68>)
 800a976:	4c17      	ldr	r4, [pc, #92]	@ (800a9d4 <actuator_msgs__msg__Actuators__get_type_description_sources+0x6c>)
 800a978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a97a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a97c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a97e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	4625      	mov	r5, r4
 800a984:	4638      	mov	r0, r7
 800a986:	f845 3b04 	str.w	r3, [r5], #4
 800a98a:	f000 f899 	bl	800aac0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800a98e:	4684      	mov	ip, r0
 800a990:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a996:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a99a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a99c:	4638      	mov	r0, r7
 800a99e:	f8dc 3000 	ldr.w	r3, [ip]
 800a9a2:	602b      	str	r3, [r5, #0]
 800a9a4:	f006 fb84 	bl	80110b0 <std_msgs__msg__Header__get_individual_type_description_source>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4684      	mov	ip, r0
 800a9ac:	7033      	strb	r3, [r6, #0]
 800a9ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a9b2:	3428      	adds	r4, #40	@ 0x28
 800a9b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a9ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9bc:	f8dc 3000 	ldr.w	r3, [ip]
 800a9c0:	4802      	ldr	r0, [pc, #8]	@ (800a9cc <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20010a64 	.word	0x20010a64
 800a9cc:	08014458 	.word	0x08014458
 800a9d0:	08014464 	.word	0x08014464
 800a9d4:	200109f8 	.word	0x200109f8

0800a9d8 <actuator_msgs__msg__Actuators__init>:
 800a9d8:	b3f0      	cbz	r0, 800aa58 <actuator_msgs__msg__Actuators__init+0x80>
 800a9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9dc:	4604      	mov	r4, r0
 800a9de:	f006 fb93 	bl	8011108 <std_msgs__msg__Header__init>
 800a9e2:	b1a8      	cbz	r0, 800aa10 <actuator_msgs__msg__Actuators__init+0x38>
 800a9e4:	f104 0514 	add.w	r5, r4, #20
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f7ff fe8c 	bl	800a708 <rosidl_runtime_c__double__Sequence__init>
 800a9f0:	b368      	cbz	r0, 800aa4e <actuator_msgs__msg__Actuators__init+0x76>
 800a9f2:	f104 0620 	add.w	r6, r4, #32
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7ff fe85 	bl	800a708 <rosidl_runtime_c__double__Sequence__init>
 800a9fe:	b1c0      	cbz	r0, 800aa32 <actuator_msgs__msg__Actuators__init+0x5a>
 800aa00:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 800aa04:	2100      	movs	r1, #0
 800aa06:	4638      	mov	r0, r7
 800aa08:	f7ff fe7e 	bl	800a708 <rosidl_runtime_c__double__Sequence__init>
 800aa0c:	b330      	cbz	r0, 800aa5c <actuator_msgs__msg__Actuators__init+0x84>
 800aa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa10:	4620      	mov	r0, r4
 800aa12:	f006 fb99 	bl	8011148 <std_msgs__msg__Header__fini>
 800aa16:	f104 0014 	add.w	r0, r4, #20
 800aa1a:	f7ff fe8f 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa1e:	f104 0020 	add.w	r0, r4, #32
 800aa22:	f7ff fe8b 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa26:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800aa2a:	f7ff fe87 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa32:	4620      	mov	r0, r4
 800aa34:	f006 fb88 	bl	8011148 <std_msgs__msg__Header__fini>
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f7ff fe7f 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7ff fe7c 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa44:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800aa48:	f7ff fe78 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa4c:	e7ef      	b.n	800aa2e <actuator_msgs__msg__Actuators__init+0x56>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f006 fb7a 	bl	8011148 <std_msgs__msg__Header__fini>
 800aa54:	4628      	mov	r0, r5
 800aa56:	e7e0      	b.n	800aa1a <actuator_msgs__msg__Actuators__init+0x42>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	4770      	bx	lr
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f006 fb73 	bl	8011148 <std_msgs__msg__Header__fini>
 800aa62:	4628      	mov	r0, r5
 800aa64:	f7ff fe6a 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7ff fe67 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f7ff fe64 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa74:	e7db      	b.n	800aa2e <actuator_msgs__msg__Actuators__init+0x56>
 800aa76:	bf00      	nop

0800aa78 <actuator_msgs__msg__Actuators__fini>:
 800aa78:	b188      	cbz	r0, 800aa9e <actuator_msgs__msg__Actuators__fini+0x26>
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	f006 fb63 	bl	8011148 <std_msgs__msg__Header__fini>
 800aa82:	f104 0014 	add.w	r0, r4, #20
 800aa86:	f7ff fe59 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa8a:	f104 0020 	add.w	r0, r4, #32
 800aa8e:	f7ff fe55 	bl	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa92:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800aa96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa9a:	f7ff be4f 	b.w	800a73c <rosidl_runtime_c__double__Sequence__fini>
 800aa9e:	4770      	bx	lr

0800aaa0 <builtin_interfaces__msg__Time__get_type_hash>:
 800aaa0:	4800      	ldr	r0, [pc, #0]	@ (800aaa4 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 800aaa2:	4770      	bx	lr
 800aaa4:	20000618 	.word	0x20000618

0800aaa8 <builtin_interfaces__msg__Time__get_type_description>:
 800aaa8:	4b03      	ldr	r3, [pc, #12]	@ (800aab8 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 800aaaa:	781a      	ldrb	r2, [r3, #0]
 800aaac:	b90a      	cbnz	r2, 800aab2 <builtin_interfaces__msg__Time__get_type_description+0xa>
 800aaae:	2201      	movs	r2, #1
 800aab0:	701a      	strb	r2, [r3, #0]
 800aab2:	4802      	ldr	r0, [pc, #8]	@ (800aabc <builtin_interfaces__msg__Time__get_type_description+0x14>)
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20010a8d 	.word	0x20010a8d
 800aabc:	080144dc 	.word	0x080144dc

0800aac0 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 800aac0:	4800      	ldr	r0, [pc, #0]	@ (800aac4 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 800aac2:	4770      	bx	lr
 800aac4:	080144b8 	.word	0x080144b8

0800aac8 <builtin_interfaces__msg__Time__get_type_description_sources>:
 800aac8:	4b09      	ldr	r3, [pc, #36]	@ (800aaf0 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	b96a      	cbnz	r2, 800aaea <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 800aace:	b430      	push	{r4, r5}
 800aad0:	4d08      	ldr	r5, [pc, #32]	@ (800aaf4 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 800aad2:	4c09      	ldr	r4, [pc, #36]	@ (800aaf8 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 800aad4:	2201      	movs	r2, #1
 800aad6:	701a      	strb	r2, [r3, #0]
 800aad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aadc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	4806      	ldr	r0, [pc, #24]	@ (800aafc <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bc30      	pop	{r4, r5}
 800aae8:	4770      	bx	lr
 800aaea:	4804      	ldr	r0, [pc, #16]	@ (800aafc <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	20010a8c 	.word	0x20010a8c
 800aaf4:	080144b8 	.word	0x080144b8
 800aaf8:	20010a68 	.word	0x20010a68
 800aafc:	080144ac 	.word	0x080144ac

0800ab00 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800ab00:	f006 bb2e 	b.w	8011160 <builtin_interfaces__msg__Time__init>

0800ab04 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ab04:	f006 bb30 	b.w	8011168 <builtin_interfaces__msg__Time__fini>

0800ab08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ab08:	4b04      	ldr	r3, [pc, #16]	@ (800ab1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	b10a      	cbz	r2, 800ab12 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ab0e:	4803      	ldr	r0, [pc, #12]	@ (800ab1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ab10:	4770      	bx	lr
 800ab12:	4a03      	ldr	r2, [pc, #12]	@ (800ab20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ab14:	4801      	ldr	r0, [pc, #4]	@ (800ab1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	4770      	bx	lr
 800ab1c:	200007f0 	.word	0x200007f0
 800ab20:	20000188 	.word	0x20000188

0800ab24 <get_serialized_size_builtin_interfaces__msg__Time>:
 800ab24:	b180      	cbz	r0, 800ab48 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ab26:	b538      	push	{r3, r4, r5, lr}
 800ab28:	460d      	mov	r5, r1
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	f7fe f8fd 	bl	8008d2c <ucdr_alignment>
 800ab32:	2104      	movs	r1, #4
 800ab34:	186c      	adds	r4, r5, r1
 800ab36:	4404      	add	r4, r0
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f7fe f8f7 	bl	8008d2c <ucdr_alignment>
 800ab3e:	f1c5 0504 	rsb	r5, r5, #4
 800ab42:	4405      	add	r5, r0
 800ab44:	1928      	adds	r0, r5, r4
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop

0800ab4c <_Time__cdr_deserialize>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	460c      	mov	r4, r1
 800ab50:	b141      	cbz	r1, 800ab64 <_Time__cdr_deserialize+0x18>
 800ab52:	4605      	mov	r5, r0
 800ab54:	f001 f91a 	bl	800bd8c <ucdr_deserialize_int32_t>
 800ab58:	1d21      	adds	r1, r4, #4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab60:	f000 bd92 	b.w	800b688 <ucdr_deserialize_uint32_t>
 800ab64:	4608      	mov	r0, r1
 800ab66:	bd38      	pop	{r3, r4, r5, pc}

0800ab68 <_Time__cdr_serialize>:
 800ab68:	b160      	cbz	r0, 800ab84 <_Time__cdr_serialize+0x1c>
 800ab6a:	b538      	push	{r3, r4, r5, lr}
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	4604      	mov	r4, r0
 800ab70:	6801      	ldr	r1, [r0, #0]
 800ab72:	4628      	mov	r0, r5
 800ab74:	f001 f870 	bl	800bc58 <ucdr_serialize_int32_t>
 800ab78:	6861      	ldr	r1, [r4, #4]
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab80:	f000 bc58 	b.w	800b434 <ucdr_serialize_uint32_t>
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop

0800ab88 <_Time__get_serialized_size>:
 800ab88:	b160      	cbz	r0, 800aba4 <_Time__get_serialized_size+0x1c>
 800ab8a:	b510      	push	{r4, lr}
 800ab8c:	2104      	movs	r1, #4
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f7fe f8cc 	bl	8008d2c <ucdr_alignment>
 800ab94:	1d04      	adds	r4, r0, #4
 800ab96:	2104      	movs	r1, #4
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f7fe f8c7 	bl	8008d2c <ucdr_alignment>
 800ab9e:	3004      	adds	r0, #4
 800aba0:	4420      	add	r0, r4
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop

0800aba8 <_Time__max_serialized_size>:
 800aba8:	b510      	push	{r4, lr}
 800abaa:	2104      	movs	r1, #4
 800abac:	2000      	movs	r0, #0
 800abae:	f7fe f8bd 	bl	8008d2c <ucdr_alignment>
 800abb2:	1d04      	adds	r4, r0, #4
 800abb4:	2104      	movs	r1, #4
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7fe f8b8 	bl	8008d2c <ucdr_alignment>
 800abbc:	3004      	adds	r0, #4
 800abbe:	4420      	add	r0, r4
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	bf00      	nop

0800abc4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	460c      	mov	r4, r1
 800abc8:	2301      	movs	r3, #1
 800abca:	7003      	strb	r3, [r0, #0]
 800abcc:	2104      	movs	r1, #4
 800abce:	4620      	mov	r0, r4
 800abd0:	f7fe f8ac 	bl	8008d2c <ucdr_alignment>
 800abd4:	2104      	movs	r1, #4
 800abd6:	1863      	adds	r3, r4, r1
 800abd8:	18c5      	adds	r5, r0, r3
 800abda:	4628      	mov	r0, r5
 800abdc:	f7fe f8a6 	bl	8008d2c <ucdr_alignment>
 800abe0:	f1c4 0404 	rsb	r4, r4, #4
 800abe4:	4420      	add	r0, r4
 800abe6:	4428      	add	r0, r5
 800abe8:	bd38      	pop	{r3, r4, r5, pc}
 800abea:	bf00      	nop

0800abec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800abec:	4800      	ldr	r0, [pc, #0]	@ (800abf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800abee:	4770      	bx	lr
 800abf0:	20000880 	.word	0x20000880

0800abf4 <ucdr_serialize_endian_array_char>:
 800abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf8:	4619      	mov	r1, r3
 800abfa:	461f      	mov	r7, r3
 800abfc:	4605      	mov	r5, r0
 800abfe:	4690      	mov	r8, r2
 800ac00:	f7fe f83c 	bl	8008c7c <ucdr_check_buffer_available_for>
 800ac04:	b9e0      	cbnz	r0, 800ac40 <ucdr_serialize_endian_array_char+0x4c>
 800ac06:	463e      	mov	r6, r7
 800ac08:	e009      	b.n	800ac1e <ucdr_serialize_endian_array_char+0x2a>
 800ac0a:	68a8      	ldr	r0, [r5, #8]
 800ac0c:	f008 fb85 	bl	801331a <memcpy>
 800ac10:	68ab      	ldr	r3, [r5, #8]
 800ac12:	6928      	ldr	r0, [r5, #16]
 800ac14:	4423      	add	r3, r4
 800ac16:	4420      	add	r0, r4
 800ac18:	1b36      	subs	r6, r6, r4
 800ac1a:	60ab      	str	r3, [r5, #8]
 800ac1c:	6128      	str	r0, [r5, #16]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4631      	mov	r1, r6
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7fe f8b2 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800ac28:	1bb9      	subs	r1, r7, r6
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	4441      	add	r1, r8
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1ea      	bne.n	800ac0a <ucdr_serialize_endian_array_char+0x16>
 800ac34:	2301      	movs	r3, #1
 800ac36:	7da8      	ldrb	r0, [r5, #22]
 800ac38:	756b      	strb	r3, [r5, #21]
 800ac3a:	4058      	eors	r0, r3
 800ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac40:	463a      	mov	r2, r7
 800ac42:	68a8      	ldr	r0, [r5, #8]
 800ac44:	4641      	mov	r1, r8
 800ac46:	f008 fb68 	bl	801331a <memcpy>
 800ac4a:	68aa      	ldr	r2, [r5, #8]
 800ac4c:	692b      	ldr	r3, [r5, #16]
 800ac4e:	443a      	add	r2, r7
 800ac50:	443b      	add	r3, r7
 800ac52:	60aa      	str	r2, [r5, #8]
 800ac54:	612b      	str	r3, [r5, #16]
 800ac56:	e7ed      	b.n	800ac34 <ucdr_serialize_endian_array_char+0x40>

0800ac58 <ucdr_deserialize_endian_array_char>:
 800ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	461f      	mov	r7, r3
 800ac60:	4605      	mov	r5, r0
 800ac62:	4690      	mov	r8, r2
 800ac64:	f7fe f80a 	bl	8008c7c <ucdr_check_buffer_available_for>
 800ac68:	b9e0      	cbnz	r0, 800aca4 <ucdr_deserialize_endian_array_char+0x4c>
 800ac6a:	463e      	mov	r6, r7
 800ac6c:	e009      	b.n	800ac82 <ucdr_deserialize_endian_array_char+0x2a>
 800ac6e:	68a9      	ldr	r1, [r5, #8]
 800ac70:	f008 fb53 	bl	801331a <memcpy>
 800ac74:	68aa      	ldr	r2, [r5, #8]
 800ac76:	692b      	ldr	r3, [r5, #16]
 800ac78:	4422      	add	r2, r4
 800ac7a:	4423      	add	r3, r4
 800ac7c:	1b36      	subs	r6, r6, r4
 800ac7e:	60aa      	str	r2, [r5, #8]
 800ac80:	612b      	str	r3, [r5, #16]
 800ac82:	2201      	movs	r2, #1
 800ac84:	4631      	mov	r1, r6
 800ac86:	4628      	mov	r0, r5
 800ac88:	f7fe f880 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	1bb8      	subs	r0, r7, r6
 800ac90:	4622      	mov	r2, r4
 800ac92:	4440      	add	r0, r8
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	d1ea      	bne.n	800ac6e <ucdr_deserialize_endian_array_char+0x16>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	7da8      	ldrb	r0, [r5, #22]
 800ac9c:	756b      	strb	r3, [r5, #21]
 800ac9e:	4058      	eors	r0, r3
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	463a      	mov	r2, r7
 800aca6:	68a9      	ldr	r1, [r5, #8]
 800aca8:	4640      	mov	r0, r8
 800acaa:	f008 fb36 	bl	801331a <memcpy>
 800acae:	68aa      	ldr	r2, [r5, #8]
 800acb0:	692b      	ldr	r3, [r5, #16]
 800acb2:	443a      	add	r2, r7
 800acb4:	443b      	add	r3, r7
 800acb6:	60aa      	str	r2, [r5, #8]
 800acb8:	612b      	str	r3, [r5, #16]
 800acba:	e7ed      	b.n	800ac98 <ucdr_deserialize_endian_array_char+0x40>

0800acbc <ucdr_serialize_array_uint8_t>:
 800acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	4688      	mov	r8, r1
 800acc2:	4611      	mov	r1, r2
 800acc4:	4617      	mov	r7, r2
 800acc6:	4605      	mov	r5, r0
 800acc8:	f7fd ffd8 	bl	8008c7c <ucdr_check_buffer_available_for>
 800accc:	b9e0      	cbnz	r0, 800ad08 <ucdr_serialize_array_uint8_t+0x4c>
 800acce:	463e      	mov	r6, r7
 800acd0:	e009      	b.n	800ace6 <ucdr_serialize_array_uint8_t+0x2a>
 800acd2:	68a8      	ldr	r0, [r5, #8]
 800acd4:	f008 fb21 	bl	801331a <memcpy>
 800acd8:	68aa      	ldr	r2, [r5, #8]
 800acda:	692b      	ldr	r3, [r5, #16]
 800acdc:	4422      	add	r2, r4
 800acde:	4423      	add	r3, r4
 800ace0:	1b36      	subs	r6, r6, r4
 800ace2:	60aa      	str	r2, [r5, #8]
 800ace4:	612b      	str	r3, [r5, #16]
 800ace6:	2201      	movs	r2, #1
 800ace8:	4631      	mov	r1, r6
 800acea:	4628      	mov	r0, r5
 800acec:	f7fe f84e 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800acf0:	1bb9      	subs	r1, r7, r6
 800acf2:	4604      	mov	r4, r0
 800acf4:	4602      	mov	r2, r0
 800acf6:	4441      	add	r1, r8
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d1ea      	bne.n	800acd2 <ucdr_serialize_array_uint8_t+0x16>
 800acfc:	2301      	movs	r3, #1
 800acfe:	7da8      	ldrb	r0, [r5, #22]
 800ad00:	756b      	strb	r3, [r5, #21]
 800ad02:	4058      	eors	r0, r3
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	463a      	mov	r2, r7
 800ad0a:	68a8      	ldr	r0, [r5, #8]
 800ad0c:	4641      	mov	r1, r8
 800ad0e:	f008 fb04 	bl	801331a <memcpy>
 800ad12:	68aa      	ldr	r2, [r5, #8]
 800ad14:	692b      	ldr	r3, [r5, #16]
 800ad16:	443a      	add	r2, r7
 800ad18:	443b      	add	r3, r7
 800ad1a:	60aa      	str	r2, [r5, #8]
 800ad1c:	612b      	str	r3, [r5, #16]
 800ad1e:	e7ed      	b.n	800acfc <ucdr_serialize_array_uint8_t+0x40>

0800ad20 <ucdr_serialize_endian_array_uint8_t>:
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	4619      	mov	r1, r3
 800ad26:	461f      	mov	r7, r3
 800ad28:	4605      	mov	r5, r0
 800ad2a:	4690      	mov	r8, r2
 800ad2c:	f7fd ffa6 	bl	8008c7c <ucdr_check_buffer_available_for>
 800ad30:	b9e0      	cbnz	r0, 800ad6c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800ad32:	463e      	mov	r6, r7
 800ad34:	e009      	b.n	800ad4a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800ad36:	68a8      	ldr	r0, [r5, #8]
 800ad38:	f008 faef 	bl	801331a <memcpy>
 800ad3c:	68ab      	ldr	r3, [r5, #8]
 800ad3e:	6928      	ldr	r0, [r5, #16]
 800ad40:	4423      	add	r3, r4
 800ad42:	4420      	add	r0, r4
 800ad44:	1b36      	subs	r6, r6, r4
 800ad46:	60ab      	str	r3, [r5, #8]
 800ad48:	6128      	str	r0, [r5, #16]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f7fe f81c 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800ad54:	1bb9      	subs	r1, r7, r6
 800ad56:	4604      	mov	r4, r0
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4441      	add	r1, r8
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d1ea      	bne.n	800ad36 <ucdr_serialize_endian_array_uint8_t+0x16>
 800ad60:	2301      	movs	r3, #1
 800ad62:	7da8      	ldrb	r0, [r5, #22]
 800ad64:	756b      	strb	r3, [r5, #21]
 800ad66:	4058      	eors	r0, r3
 800ad68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6c:	463a      	mov	r2, r7
 800ad6e:	68a8      	ldr	r0, [r5, #8]
 800ad70:	4641      	mov	r1, r8
 800ad72:	f008 fad2 	bl	801331a <memcpy>
 800ad76:	68aa      	ldr	r2, [r5, #8]
 800ad78:	692b      	ldr	r3, [r5, #16]
 800ad7a:	443a      	add	r2, r7
 800ad7c:	443b      	add	r3, r7
 800ad7e:	60aa      	str	r2, [r5, #8]
 800ad80:	612b      	str	r3, [r5, #16]
 800ad82:	e7ed      	b.n	800ad60 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ad84 <ucdr_deserialize_array_uint8_t>:
 800ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad88:	4688      	mov	r8, r1
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4617      	mov	r7, r2
 800ad8e:	4605      	mov	r5, r0
 800ad90:	f7fd ff74 	bl	8008c7c <ucdr_check_buffer_available_for>
 800ad94:	b9e0      	cbnz	r0, 800add0 <ucdr_deserialize_array_uint8_t+0x4c>
 800ad96:	463e      	mov	r6, r7
 800ad98:	e009      	b.n	800adae <ucdr_deserialize_array_uint8_t+0x2a>
 800ad9a:	68a9      	ldr	r1, [r5, #8]
 800ad9c:	f008 fabd 	bl	801331a <memcpy>
 800ada0:	68aa      	ldr	r2, [r5, #8]
 800ada2:	692b      	ldr	r3, [r5, #16]
 800ada4:	4422      	add	r2, r4
 800ada6:	4423      	add	r3, r4
 800ada8:	1b36      	subs	r6, r6, r4
 800adaa:	60aa      	str	r2, [r5, #8]
 800adac:	612b      	str	r3, [r5, #16]
 800adae:	2201      	movs	r2, #1
 800adb0:	4631      	mov	r1, r6
 800adb2:	4628      	mov	r0, r5
 800adb4:	f7fd ffea 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800adb8:	4604      	mov	r4, r0
 800adba:	1bb8      	subs	r0, r7, r6
 800adbc:	4622      	mov	r2, r4
 800adbe:	4440      	add	r0, r8
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	d1ea      	bne.n	800ad9a <ucdr_deserialize_array_uint8_t+0x16>
 800adc4:	2301      	movs	r3, #1
 800adc6:	7da8      	ldrb	r0, [r5, #22]
 800adc8:	756b      	strb	r3, [r5, #21]
 800adca:	4058      	eors	r0, r3
 800adcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add0:	463a      	mov	r2, r7
 800add2:	68a9      	ldr	r1, [r5, #8]
 800add4:	4640      	mov	r0, r8
 800add6:	f008 faa0 	bl	801331a <memcpy>
 800adda:	68aa      	ldr	r2, [r5, #8]
 800addc:	692b      	ldr	r3, [r5, #16]
 800adde:	443a      	add	r2, r7
 800ade0:	443b      	add	r3, r7
 800ade2:	60aa      	str	r2, [r5, #8]
 800ade4:	612b      	str	r3, [r5, #16]
 800ade6:	e7ed      	b.n	800adc4 <ucdr_deserialize_array_uint8_t+0x40>

0800ade8 <ucdr_deserialize_endian_array_uint8_t>:
 800ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adec:	4619      	mov	r1, r3
 800adee:	461f      	mov	r7, r3
 800adf0:	4605      	mov	r5, r0
 800adf2:	4690      	mov	r8, r2
 800adf4:	f7fd ff42 	bl	8008c7c <ucdr_check_buffer_available_for>
 800adf8:	b9e0      	cbnz	r0, 800ae34 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800adfa:	463e      	mov	r6, r7
 800adfc:	e009      	b.n	800ae12 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800adfe:	68a9      	ldr	r1, [r5, #8]
 800ae00:	f008 fa8b 	bl	801331a <memcpy>
 800ae04:	68aa      	ldr	r2, [r5, #8]
 800ae06:	692b      	ldr	r3, [r5, #16]
 800ae08:	4422      	add	r2, r4
 800ae0a:	4423      	add	r3, r4
 800ae0c:	1b36      	subs	r6, r6, r4
 800ae0e:	60aa      	str	r2, [r5, #8]
 800ae10:	612b      	str	r3, [r5, #16]
 800ae12:	2201      	movs	r2, #1
 800ae14:	4631      	mov	r1, r6
 800ae16:	4628      	mov	r0, r5
 800ae18:	f7fd ffb8 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	1bb8      	subs	r0, r7, r6
 800ae20:	4622      	mov	r2, r4
 800ae22:	4440      	add	r0, r8
 800ae24:	2c00      	cmp	r4, #0
 800ae26:	d1ea      	bne.n	800adfe <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	7da8      	ldrb	r0, [r5, #22]
 800ae2c:	756b      	strb	r3, [r5, #21]
 800ae2e:	4058      	eors	r0, r3
 800ae30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae34:	463a      	mov	r2, r7
 800ae36:	68a9      	ldr	r1, [r5, #8]
 800ae38:	4640      	mov	r0, r8
 800ae3a:	f008 fa6e 	bl	801331a <memcpy>
 800ae3e:	68aa      	ldr	r2, [r5, #8]
 800ae40:	692b      	ldr	r3, [r5, #16]
 800ae42:	443a      	add	r2, r7
 800ae44:	443b      	add	r3, r7
 800ae46:	60aa      	str	r2, [r5, #8]
 800ae48:	612b      	str	r3, [r5, #16]
 800ae4a:	e7ed      	b.n	800ae28 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800ae4c <ucdr_serialize_endian_array_double>:
 800ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae50:	4688      	mov	r8, r1
 800ae52:	2108      	movs	r1, #8
 800ae54:	4604      	mov	r4, r0
 800ae56:	4616      	mov	r6, r2
 800ae58:	461f      	mov	r7, r3
 800ae5a:	f7fd ff6f 	bl	8008d3c <ucdr_buffer_alignment>
 800ae5e:	4601      	mov	r1, r0
 800ae60:	4620      	mov	r0, r4
 800ae62:	7d65      	ldrb	r5, [r4, #21]
 800ae64:	f7fd ffae 	bl	8008dc4 <ucdr_advance_buffer>
 800ae68:	f1b8 0f01 	cmp.w	r8, #1
 800ae6c:	7565      	strb	r5, [r4, #21]
 800ae6e:	d00f      	beq.n	800ae90 <ucdr_serialize_endian_array_double+0x44>
 800ae70:	2500      	movs	r5, #0
 800ae72:	b147      	cbz	r7, 800ae86 <ucdr_serialize_endian_array_double+0x3a>
 800ae74:	ecb6 0b02 	vldmia	r6!, {d0}
 800ae78:	4641      	mov	r1, r8
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	f001 f813 	bl	800bea8 <ucdr_serialize_endian_double>
 800ae82:	42af      	cmp	r7, r5
 800ae84:	d1f6      	bne.n	800ae74 <ucdr_serialize_endian_array_double+0x28>
 800ae86:	7da0      	ldrb	r0, [r4, #22]
 800ae88:	f080 0001 	eor.w	r0, r0, #1
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae90:	00ff      	lsls	r7, r7, #3
 800ae92:	4639      	mov	r1, r7
 800ae94:	4620      	mov	r0, r4
 800ae96:	f7fd fef1 	bl	8008c7c <ucdr_check_buffer_available_for>
 800ae9a:	b9f8      	cbnz	r0, 800aedc <ucdr_serialize_endian_array_double+0x90>
 800ae9c:	46b8      	mov	r8, r7
 800ae9e:	e00a      	b.n	800aeb6 <ucdr_serialize_endian_array_double+0x6a>
 800aea0:	68a0      	ldr	r0, [r4, #8]
 800aea2:	f008 fa3a 	bl	801331a <memcpy>
 800aea6:	68a2      	ldr	r2, [r4, #8]
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	442a      	add	r2, r5
 800aeac:	442b      	add	r3, r5
 800aeae:	eba8 0805 	sub.w	r8, r8, r5
 800aeb2:	60a2      	str	r2, [r4, #8]
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	2208      	movs	r2, #8
 800aeb8:	4641      	mov	r1, r8
 800aeba:	4620      	mov	r0, r4
 800aebc:	f7fd ff66 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800aec0:	eba7 0108 	sub.w	r1, r7, r8
 800aec4:	4605      	mov	r5, r0
 800aec6:	4602      	mov	r2, r0
 800aec8:	4431      	add	r1, r6
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d1e8      	bne.n	800aea0 <ucdr_serialize_endian_array_double+0x54>
 800aece:	7da0      	ldrb	r0, [r4, #22]
 800aed0:	2308      	movs	r3, #8
 800aed2:	7563      	strb	r3, [r4, #21]
 800aed4:	f080 0001 	eor.w	r0, r0, #1
 800aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aedc:	463a      	mov	r2, r7
 800aede:	68a0      	ldr	r0, [r4, #8]
 800aee0:	4631      	mov	r1, r6
 800aee2:	f008 fa1a 	bl	801331a <memcpy>
 800aee6:	68a2      	ldr	r2, [r4, #8]
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	443a      	add	r2, r7
 800aeec:	443b      	add	r3, r7
 800aeee:	60a2      	str	r2, [r4, #8]
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	e7ec      	b.n	800aece <ucdr_serialize_endian_array_double+0x82>

0800aef4 <ucdr_deserialize_endian_array_double>:
 800aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef8:	4688      	mov	r8, r1
 800aefa:	2108      	movs	r1, #8
 800aefc:	4605      	mov	r5, r0
 800aefe:	4614      	mov	r4, r2
 800af00:	461f      	mov	r7, r3
 800af02:	f7fd ff1b 	bl	8008d3c <ucdr_buffer_alignment>
 800af06:	4601      	mov	r1, r0
 800af08:	4628      	mov	r0, r5
 800af0a:	7d6e      	ldrb	r6, [r5, #21]
 800af0c:	f7fd ff5a 	bl	8008dc4 <ucdr_advance_buffer>
 800af10:	f1b8 0f01 	cmp.w	r8, #1
 800af14:	756e      	strb	r6, [r5, #21]
 800af16:	d010      	beq.n	800af3a <ucdr_deserialize_endian_array_double+0x46>
 800af18:	2600      	movs	r6, #0
 800af1a:	b14f      	cbz	r7, 800af30 <ucdr_deserialize_endian_array_double+0x3c>
 800af1c:	4622      	mov	r2, r4
 800af1e:	4641      	mov	r1, r8
 800af20:	4628      	mov	r0, r5
 800af22:	3601      	adds	r6, #1
 800af24:	f001 f888 	bl	800c038 <ucdr_deserialize_endian_double>
 800af28:	42b7      	cmp	r7, r6
 800af2a:	f104 0408 	add.w	r4, r4, #8
 800af2e:	d1f5      	bne.n	800af1c <ucdr_deserialize_endian_array_double+0x28>
 800af30:	7da8      	ldrb	r0, [r5, #22]
 800af32:	f080 0001 	eor.w	r0, r0, #1
 800af36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af3a:	00ff      	lsls	r7, r7, #3
 800af3c:	4639      	mov	r1, r7
 800af3e:	4628      	mov	r0, r5
 800af40:	f7fd fe9c 	bl	8008c7c <ucdr_check_buffer_available_for>
 800af44:	b9f8      	cbnz	r0, 800af86 <ucdr_deserialize_endian_array_double+0x92>
 800af46:	46b8      	mov	r8, r7
 800af48:	e00a      	b.n	800af60 <ucdr_deserialize_endian_array_double+0x6c>
 800af4a:	68a9      	ldr	r1, [r5, #8]
 800af4c:	f008 f9e5 	bl	801331a <memcpy>
 800af50:	68aa      	ldr	r2, [r5, #8]
 800af52:	692b      	ldr	r3, [r5, #16]
 800af54:	4432      	add	r2, r6
 800af56:	4433      	add	r3, r6
 800af58:	eba8 0806 	sub.w	r8, r8, r6
 800af5c:	60aa      	str	r2, [r5, #8]
 800af5e:	612b      	str	r3, [r5, #16]
 800af60:	2208      	movs	r2, #8
 800af62:	4641      	mov	r1, r8
 800af64:	4628      	mov	r0, r5
 800af66:	f7fd ff11 	bl	8008d8c <ucdr_check_final_buffer_behavior_array>
 800af6a:	4606      	mov	r6, r0
 800af6c:	eba7 0008 	sub.w	r0, r7, r8
 800af70:	4632      	mov	r2, r6
 800af72:	4420      	add	r0, r4
 800af74:	2e00      	cmp	r6, #0
 800af76:	d1e8      	bne.n	800af4a <ucdr_deserialize_endian_array_double+0x56>
 800af78:	7da8      	ldrb	r0, [r5, #22]
 800af7a:	2308      	movs	r3, #8
 800af7c:	756b      	strb	r3, [r5, #21]
 800af7e:	f080 0001 	eor.w	r0, r0, #1
 800af82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af86:	463a      	mov	r2, r7
 800af88:	68a9      	ldr	r1, [r5, #8]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f008 f9c5 	bl	801331a <memcpy>
 800af90:	68aa      	ldr	r2, [r5, #8]
 800af92:	692b      	ldr	r3, [r5, #16]
 800af94:	443a      	add	r2, r7
 800af96:	443b      	add	r3, r7
 800af98:	60aa      	str	r2, [r5, #8]
 800af9a:	612b      	str	r3, [r5, #16]
 800af9c:	e7ec      	b.n	800af78 <ucdr_deserialize_endian_array_double+0x84>
 800af9e:	bf00      	nop

0800afa0 <ucdr_serialize_bool>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	460d      	mov	r5, r1
 800afa4:	2101      	movs	r1, #1
 800afa6:	4604      	mov	r4, r0
 800afa8:	f7fd fe74 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800afac:	b148      	cbz	r0, 800afc2 <ucdr_serialize_bool+0x22>
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	701d      	strb	r5, [r3, #0]
 800afb2:	68a2      	ldr	r2, [r4, #8]
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	2101      	movs	r1, #1
 800afb8:	440a      	add	r2, r1
 800afba:	440b      	add	r3, r1
 800afbc:	60a2      	str	r2, [r4, #8]
 800afbe:	6123      	str	r3, [r4, #16]
 800afc0:	7561      	strb	r1, [r4, #21]
 800afc2:	7da0      	ldrb	r0, [r4, #22]
 800afc4:	f080 0001 	eor.w	r0, r0, #1
 800afc8:	bd38      	pop	{r3, r4, r5, pc}
 800afca:	bf00      	nop

0800afcc <ucdr_deserialize_bool>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	460d      	mov	r5, r1
 800afd0:	2101      	movs	r1, #1
 800afd2:	4604      	mov	r4, r0
 800afd4:	f7fd fe5e 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800afd8:	b160      	cbz	r0, 800aff4 <ucdr_deserialize_bool+0x28>
 800afda:	68a2      	ldr	r2, [r4, #8]
 800afdc:	6923      	ldr	r3, [r4, #16]
 800afde:	f812 1b01 	ldrb.w	r1, [r2], #1
 800afe2:	3900      	subs	r1, #0
 800afe4:	bf18      	it	ne
 800afe6:	2101      	movne	r1, #1
 800afe8:	7029      	strb	r1, [r5, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	2101      	movs	r1, #1
 800afee:	60a2      	str	r2, [r4, #8]
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	7561      	strb	r1, [r4, #21]
 800aff4:	7da0      	ldrb	r0, [r4, #22]
 800aff6:	f080 0001 	eor.w	r0, r0, #1
 800affa:	bd38      	pop	{r3, r4, r5, pc}

0800affc <ucdr_serialize_uint8_t>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	460d      	mov	r5, r1
 800b000:	2101      	movs	r1, #1
 800b002:	4604      	mov	r4, r0
 800b004:	f7fd fe46 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b008:	b148      	cbz	r0, 800b01e <ucdr_serialize_uint8_t+0x22>
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	701d      	strb	r5, [r3, #0]
 800b00e:	68a2      	ldr	r2, [r4, #8]
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	2101      	movs	r1, #1
 800b014:	440a      	add	r2, r1
 800b016:	440b      	add	r3, r1
 800b018:	60a2      	str	r2, [r4, #8]
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	7561      	strb	r1, [r4, #21]
 800b01e:	7da0      	ldrb	r0, [r4, #22]
 800b020:	f080 0001 	eor.w	r0, r0, #1
 800b024:	bd38      	pop	{r3, r4, r5, pc}
 800b026:	bf00      	nop

0800b028 <ucdr_deserialize_uint8_t>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	460d      	mov	r5, r1
 800b02c:	2101      	movs	r1, #1
 800b02e:	4604      	mov	r4, r0
 800b030:	f7fd fe30 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b034:	b150      	cbz	r0, 800b04c <ucdr_deserialize_uint8_t+0x24>
 800b036:	68a3      	ldr	r3, [r4, #8]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	702b      	strb	r3, [r5, #0]
 800b03c:	68a2      	ldr	r2, [r4, #8]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	2101      	movs	r1, #1
 800b042:	440a      	add	r2, r1
 800b044:	440b      	add	r3, r1
 800b046:	60a2      	str	r2, [r4, #8]
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	7561      	strb	r1, [r4, #21]
 800b04c:	7da0      	ldrb	r0, [r4, #22]
 800b04e:	f080 0001 	eor.w	r0, r0, #1
 800b052:	bd38      	pop	{r3, r4, r5, pc}

0800b054 <ucdr_serialize_uint16_t>:
 800b054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	460b      	mov	r3, r1
 800b05c:	2102      	movs	r1, #2
 800b05e:	4604      	mov	r4, r0
 800b060:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b064:	f7fd fe6a 	bl	8008d3c <ucdr_buffer_alignment>
 800b068:	4601      	mov	r1, r0
 800b06a:	4620      	mov	r0, r4
 800b06c:	7d67      	ldrb	r7, [r4, #21]
 800b06e:	f7fd fea9 	bl	8008dc4 <ucdr_advance_buffer>
 800b072:	2102      	movs	r1, #2
 800b074:	4620      	mov	r0, r4
 800b076:	f7fd fe01 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b07a:	b1c0      	cbz	r0, 800b0ae <ucdr_serialize_uint16_t+0x5a>
 800b07c:	7d22      	ldrb	r2, [r4, #20]
 800b07e:	68a3      	ldr	r3, [r4, #8]
 800b080:	2a01      	cmp	r2, #1
 800b082:	d04e      	beq.n	800b122 <ucdr_serialize_uint16_t+0xce>
 800b084:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b090:	705a      	strb	r2, [r3, #1]
 800b092:	68a2      	ldr	r2, [r4, #8]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	3202      	adds	r2, #2
 800b098:	3302      	adds	r3, #2
 800b09a:	2102      	movs	r1, #2
 800b09c:	60a2      	str	r2, [r4, #8]
 800b09e:	6123      	str	r3, [r4, #16]
 800b0a0:	7561      	strb	r1, [r4, #21]
 800b0a2:	7da0      	ldrb	r0, [r4, #22]
 800b0a4:	f080 0001 	eor.w	r0, r0, #1
 800b0a8:	b002      	add	sp, #8
 800b0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ae:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b0b2:	42ab      	cmp	r3, r5
 800b0b4:	d923      	bls.n	800b0fe <ucdr_serialize_uint16_t+0xaa>
 800b0b6:	1b5e      	subs	r6, r3, r5
 800b0b8:	60a3      	str	r3, [r4, #8]
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	f1c6 0802 	rsb	r8, r6, #2
 800b0c0:	4433      	add	r3, r6
 800b0c2:	6123      	str	r3, [r4, #16]
 800b0c4:	4641      	mov	r1, r8
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f7fd fde4 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b0cc:	b368      	cbz	r0, 800b12a <ucdr_serialize_uint16_t+0xd6>
 800b0ce:	7d23      	ldrb	r3, [r4, #20]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d03b      	beq.n	800b14c <ucdr_serialize_uint16_t+0xf8>
 800b0d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b0d8:	702b      	strb	r3, [r5, #0]
 800b0da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b0de:	706b      	strb	r3, [r5, #1]
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	68a2      	ldr	r2, [r4, #8]
 800b0e4:	7da0      	ldrb	r0, [r4, #22]
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	4442      	add	r2, r8
 800b0ea:	1b9b      	subs	r3, r3, r6
 800b0ec:	2102      	movs	r1, #2
 800b0ee:	f080 0001 	eor.w	r0, r0, #1
 800b0f2:	60a2      	str	r2, [r4, #8]
 800b0f4:	6123      	str	r3, [r4, #16]
 800b0f6:	7561      	strb	r1, [r4, #21]
 800b0f8:	b002      	add	sp, #8
 800b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fe:	2102      	movs	r1, #2
 800b100:	4620      	mov	r0, r4
 800b102:	f7fd fdc7 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b106:	2800      	cmp	r0, #0
 800b108:	d0cb      	beq.n	800b0a2 <ucdr_serialize_uint16_t+0x4e>
 800b10a:	7d23      	ldrb	r3, [r4, #20]
 800b10c:	68a2      	ldr	r2, [r4, #8]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d018      	beq.n	800b144 <ucdr_serialize_uint16_t+0xf0>
 800b112:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b116:	7013      	strb	r3, [r2, #0]
 800b118:	68a3      	ldr	r3, [r4, #8]
 800b11a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b11e:	705a      	strb	r2, [r3, #1]
 800b120:	e7b7      	b.n	800b092 <ucdr_serialize_uint16_t+0x3e>
 800b122:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b126:	801a      	strh	r2, [r3, #0]
 800b128:	e7b3      	b.n	800b092 <ucdr_serialize_uint16_t+0x3e>
 800b12a:	68a2      	ldr	r2, [r4, #8]
 800b12c:	6923      	ldr	r3, [r4, #16]
 800b12e:	7da0      	ldrb	r0, [r4, #22]
 800b130:	7567      	strb	r7, [r4, #21]
 800b132:	1b92      	subs	r2, r2, r6
 800b134:	1b9b      	subs	r3, r3, r6
 800b136:	f080 0001 	eor.w	r0, r0, #1
 800b13a:	60a2      	str	r2, [r4, #8]
 800b13c:	6123      	str	r3, [r4, #16]
 800b13e:	b002      	add	sp, #8
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b148:	8013      	strh	r3, [r2, #0]
 800b14a:	e7a2      	b.n	800b092 <ucdr_serialize_uint16_t+0x3e>
 800b14c:	4628      	mov	r0, r5
 800b14e:	f10d 0506 	add.w	r5, sp, #6
 800b152:	4632      	mov	r2, r6
 800b154:	4629      	mov	r1, r5
 800b156:	f008 f8e0 	bl	801331a <memcpy>
 800b15a:	68a0      	ldr	r0, [r4, #8]
 800b15c:	4642      	mov	r2, r8
 800b15e:	19a9      	adds	r1, r5, r6
 800b160:	f008 f8db 	bl	801331a <memcpy>
 800b164:	e7bc      	b.n	800b0e0 <ucdr_serialize_uint16_t+0x8c>
 800b166:	bf00      	nop

0800b168 <ucdr_serialize_endian_uint16_t>:
 800b168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b16c:	b083      	sub	sp, #12
 800b16e:	460d      	mov	r5, r1
 800b170:	2102      	movs	r1, #2
 800b172:	4604      	mov	r4, r0
 800b174:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b178:	f7fd fde0 	bl	8008d3c <ucdr_buffer_alignment>
 800b17c:	4601      	mov	r1, r0
 800b17e:	4620      	mov	r0, r4
 800b180:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b184:	f7fd fe1e 	bl	8008dc4 <ucdr_advance_buffer>
 800b188:	2102      	movs	r1, #2
 800b18a:	4620      	mov	r0, r4
 800b18c:	f7fd fd76 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b190:	bb60      	cbnz	r0, 800b1ec <ucdr_serialize_endian_uint16_t+0x84>
 800b192:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b196:	42be      	cmp	r6, r7
 800b198:	d923      	bls.n	800b1e2 <ucdr_serialize_endian_uint16_t+0x7a>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	60a6      	str	r6, [r4, #8]
 800b19e:	1bf6      	subs	r6, r6, r7
 800b1a0:	4433      	add	r3, r6
 800b1a2:	f1c6 0902 	rsb	r9, r6, #2
 800b1a6:	6123      	str	r3, [r4, #16]
 800b1a8:	4649      	mov	r1, r9
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f7fd fd72 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d037      	beq.n	800b224 <ucdr_serialize_endian_uint16_t+0xbc>
 800b1b4:	2d01      	cmp	r5, #1
 800b1b6:	d043      	beq.n	800b240 <ucdr_serialize_endian_uint16_t+0xd8>
 800b1b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1bc:	703b      	strb	r3, [r7, #0]
 800b1be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1c2:	707b      	strb	r3, [r7, #1]
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	68a2      	ldr	r2, [r4, #8]
 800b1c8:	7da0      	ldrb	r0, [r4, #22]
 800b1ca:	3302      	adds	r3, #2
 800b1cc:	444a      	add	r2, r9
 800b1ce:	1b9b      	subs	r3, r3, r6
 800b1d0:	2102      	movs	r1, #2
 800b1d2:	f080 0001 	eor.w	r0, r0, #1
 800b1d6:	60a2      	str	r2, [r4, #8]
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	7561      	strb	r1, [r4, #21]
 800b1dc:	b003      	add	sp, #12
 800b1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1e2:	2102      	movs	r1, #2
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f7fd fd55 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b1ea:	b188      	cbz	r0, 800b210 <ucdr_serialize_endian_uint16_t+0xa8>
 800b1ec:	2d01      	cmp	r5, #1
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	d014      	beq.n	800b21c <ucdr_serialize_endian_uint16_t+0xb4>
 800b1f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1f6:	701a      	strb	r2, [r3, #0]
 800b1f8:	68a3      	ldr	r3, [r4, #8]
 800b1fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1fe:	705a      	strb	r2, [r3, #1]
 800b200:	68a2      	ldr	r2, [r4, #8]
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	3202      	adds	r2, #2
 800b206:	3302      	adds	r3, #2
 800b208:	2102      	movs	r1, #2
 800b20a:	60a2      	str	r2, [r4, #8]
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	7561      	strb	r1, [r4, #21]
 800b210:	7da0      	ldrb	r0, [r4, #22]
 800b212:	f080 0001 	eor.w	r0, r0, #1
 800b216:	b003      	add	sp, #12
 800b218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b21c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b220:	801a      	strh	r2, [r3, #0]
 800b222:	e7ed      	b.n	800b200 <ucdr_serialize_endian_uint16_t+0x98>
 800b224:	68a2      	ldr	r2, [r4, #8]
 800b226:	6923      	ldr	r3, [r4, #16]
 800b228:	7da0      	ldrb	r0, [r4, #22]
 800b22a:	f884 8015 	strb.w	r8, [r4, #21]
 800b22e:	1b92      	subs	r2, r2, r6
 800b230:	1b9b      	subs	r3, r3, r6
 800b232:	f080 0001 	eor.w	r0, r0, #1
 800b236:	60a2      	str	r2, [r4, #8]
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	b003      	add	sp, #12
 800b23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b240:	f10d 0506 	add.w	r5, sp, #6
 800b244:	4632      	mov	r2, r6
 800b246:	4629      	mov	r1, r5
 800b248:	4638      	mov	r0, r7
 800b24a:	f008 f866 	bl	801331a <memcpy>
 800b24e:	68a0      	ldr	r0, [r4, #8]
 800b250:	464a      	mov	r2, r9
 800b252:	19a9      	adds	r1, r5, r6
 800b254:	f008 f861 	bl	801331a <memcpy>
 800b258:	e7b4      	b.n	800b1c4 <ucdr_serialize_endian_uint16_t+0x5c>
 800b25a:	bf00      	nop

0800b25c <ucdr_deserialize_uint16_t>:
 800b25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b260:	460d      	mov	r5, r1
 800b262:	2102      	movs	r1, #2
 800b264:	4604      	mov	r4, r0
 800b266:	f7fd fd69 	bl	8008d3c <ucdr_buffer_alignment>
 800b26a:	4601      	mov	r1, r0
 800b26c:	4620      	mov	r0, r4
 800b26e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b272:	f7fd fda7 	bl	8008dc4 <ucdr_advance_buffer>
 800b276:	2102      	movs	r1, #2
 800b278:	4620      	mov	r0, r4
 800b27a:	f7fd fcff 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b27e:	b1a8      	cbz	r0, 800b2ac <ucdr_deserialize_uint16_t+0x50>
 800b280:	7d22      	ldrb	r2, [r4, #20]
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	2a01      	cmp	r2, #1
 800b286:	d046      	beq.n	800b316 <ucdr_deserialize_uint16_t+0xba>
 800b288:	785b      	ldrb	r3, [r3, #1]
 800b28a:	702b      	strb	r3, [r5, #0]
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	706b      	strb	r3, [r5, #1]
 800b292:	68a2      	ldr	r2, [r4, #8]
 800b294:	6923      	ldr	r3, [r4, #16]
 800b296:	3202      	adds	r2, #2
 800b298:	3302      	adds	r3, #2
 800b29a:	2102      	movs	r1, #2
 800b29c:	60a2      	str	r2, [r4, #8]
 800b29e:	6123      	str	r3, [r4, #16]
 800b2a0:	7561      	strb	r1, [r4, #21]
 800b2a2:	7da0      	ldrb	r0, [r4, #22]
 800b2a4:	f080 0001 	eor.w	r0, r0, #1
 800b2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b2b0:	42be      	cmp	r6, r7
 800b2b2:	d920      	bls.n	800b2f6 <ucdr_deserialize_uint16_t+0x9a>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	60a6      	str	r6, [r4, #8]
 800b2b8:	1bf6      	subs	r6, r6, r7
 800b2ba:	4433      	add	r3, r6
 800b2bc:	f1c6 0902 	rsb	r9, r6, #2
 800b2c0:	6123      	str	r3, [r4, #16]
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f7fd fce5 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b2ca:	b338      	cbz	r0, 800b31c <ucdr_deserialize_uint16_t+0xc0>
 800b2cc:	7d23      	ldrb	r3, [r4, #20]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d034      	beq.n	800b33c <ucdr_deserialize_uint16_t+0xe0>
 800b2d2:	787b      	ldrb	r3, [r7, #1]
 800b2d4:	702b      	strb	r3, [r5, #0]
 800b2d6:	783b      	ldrb	r3, [r7, #0]
 800b2d8:	706b      	strb	r3, [r5, #1]
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	68a2      	ldr	r2, [r4, #8]
 800b2de:	7da0      	ldrb	r0, [r4, #22]
 800b2e0:	2102      	movs	r1, #2
 800b2e2:	3302      	adds	r3, #2
 800b2e4:	444a      	add	r2, r9
 800b2e6:	1b9b      	subs	r3, r3, r6
 800b2e8:	7561      	strb	r1, [r4, #21]
 800b2ea:	60a2      	str	r2, [r4, #8]
 800b2ec:	6123      	str	r3, [r4, #16]
 800b2ee:	f080 0001 	eor.w	r0, r0, #1
 800b2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f6:	2102      	movs	r1, #2
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f7fd fccb 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d0cf      	beq.n	800b2a2 <ucdr_deserialize_uint16_t+0x46>
 800b302:	7d23      	ldrb	r3, [r4, #20]
 800b304:	68a2      	ldr	r2, [r4, #8]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d015      	beq.n	800b336 <ucdr_deserialize_uint16_t+0xda>
 800b30a:	7853      	ldrb	r3, [r2, #1]
 800b30c:	702b      	strb	r3, [r5, #0]
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	706b      	strb	r3, [r5, #1]
 800b314:	e7bd      	b.n	800b292 <ucdr_deserialize_uint16_t+0x36>
 800b316:	881b      	ldrh	r3, [r3, #0]
 800b318:	802b      	strh	r3, [r5, #0]
 800b31a:	e7ba      	b.n	800b292 <ucdr_deserialize_uint16_t+0x36>
 800b31c:	68a2      	ldr	r2, [r4, #8]
 800b31e:	6923      	ldr	r3, [r4, #16]
 800b320:	7da0      	ldrb	r0, [r4, #22]
 800b322:	f884 8015 	strb.w	r8, [r4, #21]
 800b326:	1b92      	subs	r2, r2, r6
 800b328:	1b9b      	subs	r3, r3, r6
 800b32a:	60a2      	str	r2, [r4, #8]
 800b32c:	6123      	str	r3, [r4, #16]
 800b32e:	f080 0001 	eor.w	r0, r0, #1
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	8813      	ldrh	r3, [r2, #0]
 800b338:	802b      	strh	r3, [r5, #0]
 800b33a:	e7aa      	b.n	800b292 <ucdr_deserialize_uint16_t+0x36>
 800b33c:	4639      	mov	r1, r7
 800b33e:	4632      	mov	r2, r6
 800b340:	4628      	mov	r0, r5
 800b342:	f007 ffea 	bl	801331a <memcpy>
 800b346:	68a1      	ldr	r1, [r4, #8]
 800b348:	464a      	mov	r2, r9
 800b34a:	19a8      	adds	r0, r5, r6
 800b34c:	f007 ffe5 	bl	801331a <memcpy>
 800b350:	e7c3      	b.n	800b2da <ucdr_deserialize_uint16_t+0x7e>
 800b352:	bf00      	nop

0800b354 <ucdr_deserialize_endian_uint16_t>:
 800b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	460e      	mov	r6, r1
 800b35a:	2102      	movs	r1, #2
 800b35c:	4604      	mov	r4, r0
 800b35e:	4615      	mov	r5, r2
 800b360:	f7fd fcec 	bl	8008d3c <ucdr_buffer_alignment>
 800b364:	4601      	mov	r1, r0
 800b366:	4620      	mov	r0, r4
 800b368:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b36c:	f7fd fd2a 	bl	8008dc4 <ucdr_advance_buffer>
 800b370:	2102      	movs	r1, #2
 800b372:	4620      	mov	r0, r4
 800b374:	f7fd fc82 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b378:	bb60      	cbnz	r0, 800b3d4 <ucdr_deserialize_endian_uint16_t+0x80>
 800b37a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b37e:	4547      	cmp	r7, r8
 800b380:	d923      	bls.n	800b3ca <ucdr_deserialize_endian_uint16_t+0x76>
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	60a7      	str	r7, [r4, #8]
 800b386:	eba7 0708 	sub.w	r7, r7, r8
 800b38a:	443b      	add	r3, r7
 800b38c:	f1c7 0a02 	rsb	sl, r7, #2
 800b390:	6123      	str	r3, [r4, #16]
 800b392:	4651      	mov	r1, sl
 800b394:	4620      	mov	r0, r4
 800b396:	f7fd fc7d 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d032      	beq.n	800b404 <ucdr_deserialize_endian_uint16_t+0xb0>
 800b39e:	2e01      	cmp	r6, #1
 800b3a0:	d03d      	beq.n	800b41e <ucdr_deserialize_endian_uint16_t+0xca>
 800b3a2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b3a6:	702b      	strb	r3, [r5, #0]
 800b3a8:	f898 3000 	ldrb.w	r3, [r8]
 800b3ac:	706b      	strb	r3, [r5, #1]
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	68a2      	ldr	r2, [r4, #8]
 800b3b2:	7da0      	ldrb	r0, [r4, #22]
 800b3b4:	2102      	movs	r1, #2
 800b3b6:	3302      	adds	r3, #2
 800b3b8:	4452      	add	r2, sl
 800b3ba:	1bdb      	subs	r3, r3, r7
 800b3bc:	7561      	strb	r1, [r4, #21]
 800b3be:	60a2      	str	r2, [r4, #8]
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	f080 0001 	eor.w	r0, r0, #1
 800b3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ca:	2102      	movs	r1, #2
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f7fd fc61 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b3d2:	b178      	cbz	r0, 800b3f4 <ucdr_deserialize_endian_uint16_t+0xa0>
 800b3d4:	2e01      	cmp	r6, #1
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	d011      	beq.n	800b3fe <ucdr_deserialize_endian_uint16_t+0xaa>
 800b3da:	785b      	ldrb	r3, [r3, #1]
 800b3dc:	702b      	strb	r3, [r5, #0]
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	706b      	strb	r3, [r5, #1]
 800b3e4:	68a2      	ldr	r2, [r4, #8]
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	3202      	adds	r2, #2
 800b3ea:	3302      	adds	r3, #2
 800b3ec:	2102      	movs	r1, #2
 800b3ee:	60a2      	str	r2, [r4, #8]
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	7561      	strb	r1, [r4, #21]
 800b3f4:	7da0      	ldrb	r0, [r4, #22]
 800b3f6:	f080 0001 	eor.w	r0, r0, #1
 800b3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	802b      	strh	r3, [r5, #0]
 800b402:	e7ef      	b.n	800b3e4 <ucdr_deserialize_endian_uint16_t+0x90>
 800b404:	68a2      	ldr	r2, [r4, #8]
 800b406:	6923      	ldr	r3, [r4, #16]
 800b408:	7da0      	ldrb	r0, [r4, #22]
 800b40a:	f884 9015 	strb.w	r9, [r4, #21]
 800b40e:	1bd2      	subs	r2, r2, r7
 800b410:	1bdb      	subs	r3, r3, r7
 800b412:	60a2      	str	r2, [r4, #8]
 800b414:	6123      	str	r3, [r4, #16]
 800b416:	f080 0001 	eor.w	r0, r0, #1
 800b41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b41e:	4641      	mov	r1, r8
 800b420:	463a      	mov	r2, r7
 800b422:	4628      	mov	r0, r5
 800b424:	f007 ff79 	bl	801331a <memcpy>
 800b428:	68a1      	ldr	r1, [r4, #8]
 800b42a:	4652      	mov	r2, sl
 800b42c:	19e8      	adds	r0, r5, r7
 800b42e:	f007 ff74 	bl	801331a <memcpy>
 800b432:	e7bc      	b.n	800b3ae <ucdr_deserialize_endian_uint16_t+0x5a>

0800b434 <ucdr_serialize_uint32_t>:
 800b434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	4604      	mov	r4, r0
 800b43c:	9101      	str	r1, [sp, #4]
 800b43e:	2104      	movs	r1, #4
 800b440:	f7fd fc7c 	bl	8008d3c <ucdr_buffer_alignment>
 800b444:	4601      	mov	r1, r0
 800b446:	4620      	mov	r0, r4
 800b448:	7d67      	ldrb	r7, [r4, #21]
 800b44a:	f7fd fcbb 	bl	8008dc4 <ucdr_advance_buffer>
 800b44e:	2104      	movs	r1, #4
 800b450:	4620      	mov	r0, r4
 800b452:	f7fd fc13 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b456:	b300      	cbz	r0, 800b49a <ucdr_serialize_uint32_t+0x66>
 800b458:	7d22      	ldrb	r2, [r4, #20]
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	2a01      	cmp	r2, #1
 800b45e:	d05d      	beq.n	800b51c <ucdr_serialize_uint32_t+0xe8>
 800b460:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	68a3      	ldr	r3, [r4, #8]
 800b468:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b46c:	705a      	strb	r2, [r3, #1]
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b474:	709a      	strb	r2, [r3, #2]
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b47c:	70da      	strb	r2, [r3, #3]
 800b47e:	68a2      	ldr	r2, [r4, #8]
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	3204      	adds	r2, #4
 800b484:	3304      	adds	r3, #4
 800b486:	2104      	movs	r1, #4
 800b488:	60a2      	str	r2, [r4, #8]
 800b48a:	6123      	str	r3, [r4, #16]
 800b48c:	7561      	strb	r1, [r4, #21]
 800b48e:	7da0      	ldrb	r0, [r4, #22]
 800b490:	f080 0001 	eor.w	r0, r0, #1
 800b494:	b002      	add	sp, #8
 800b496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b49e:	42ab      	cmp	r3, r5
 800b4a0:	d92e      	bls.n	800b500 <ucdr_serialize_uint32_t+0xcc>
 800b4a2:	1b5e      	subs	r6, r3, r5
 800b4a4:	60a3      	str	r3, [r4, #8]
 800b4a6:	6923      	ldr	r3, [r4, #16]
 800b4a8:	f1c6 0804 	rsb	r8, r6, #4
 800b4ac:	4433      	add	r3, r6
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7fd fbee 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b4b8:	b398      	cbz	r0, 800b522 <ucdr_serialize_uint32_t+0xee>
 800b4ba:	7d23      	ldrb	r3, [r4, #20]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d046      	beq.n	800b54e <ucdr_serialize_uint32_t+0x11a>
 800b4c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4c4:	702b      	strb	r3, [r5, #0]
 800b4c6:	2e01      	cmp	r6, #1
 800b4c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4cc:	706b      	strb	r3, [r5, #1]
 800b4ce:	d035      	beq.n	800b53c <ucdr_serialize_uint32_t+0x108>
 800b4d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4d4:	70ab      	strb	r3, [r5, #2]
 800b4d6:	2e02      	cmp	r6, #2
 800b4d8:	d034      	beq.n	800b544 <ucdr_serialize_uint32_t+0x110>
 800b4da:	3503      	adds	r5, #3
 800b4dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4e0:	702b      	strb	r3, [r5, #0]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	68a2      	ldr	r2, [r4, #8]
 800b4e6:	7da0      	ldrb	r0, [r4, #22]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	4442      	add	r2, r8
 800b4ec:	1b9b      	subs	r3, r3, r6
 800b4ee:	2104      	movs	r1, #4
 800b4f0:	f080 0001 	eor.w	r0, r0, #1
 800b4f4:	60a2      	str	r2, [r4, #8]
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	7561      	strb	r1, [r4, #21]
 800b4fa:	b002      	add	sp, #8
 800b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b500:	2104      	movs	r1, #4
 800b502:	4620      	mov	r0, r4
 800b504:	f7fd fbc6 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d0c0      	beq.n	800b48e <ucdr_serialize_uint32_t+0x5a>
 800b50c:	7d23      	ldrb	r3, [r4, #20]
 800b50e:	68a2      	ldr	r2, [r4, #8]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d019      	beq.n	800b548 <ucdr_serialize_uint32_t+0x114>
 800b514:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b518:	7013      	strb	r3, [r2, #0]
 800b51a:	e7a4      	b.n	800b466 <ucdr_serialize_uint32_t+0x32>
 800b51c:	9a01      	ldr	r2, [sp, #4]
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	e7ad      	b.n	800b47e <ucdr_serialize_uint32_t+0x4a>
 800b522:	68a2      	ldr	r2, [r4, #8]
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	7da0      	ldrb	r0, [r4, #22]
 800b528:	7567      	strb	r7, [r4, #21]
 800b52a:	1b92      	subs	r2, r2, r6
 800b52c:	1b9b      	subs	r3, r3, r6
 800b52e:	f080 0001 	eor.w	r0, r0, #1
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	b002      	add	sp, #8
 800b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53c:	68a3      	ldr	r3, [r4, #8]
 800b53e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	68a5      	ldr	r5, [r4, #8]
 800b546:	e7c9      	b.n	800b4dc <ucdr_serialize_uint32_t+0xa8>
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	e797      	b.n	800b47e <ucdr_serialize_uint32_t+0x4a>
 800b54e:	4628      	mov	r0, r5
 800b550:	ad01      	add	r5, sp, #4
 800b552:	4632      	mov	r2, r6
 800b554:	4629      	mov	r1, r5
 800b556:	f007 fee0 	bl	801331a <memcpy>
 800b55a:	68a0      	ldr	r0, [r4, #8]
 800b55c:	4642      	mov	r2, r8
 800b55e:	19a9      	adds	r1, r5, r6
 800b560:	f007 fedb 	bl	801331a <memcpy>
 800b564:	e7bd      	b.n	800b4e2 <ucdr_serialize_uint32_t+0xae>
 800b566:	bf00      	nop

0800b568 <ucdr_serialize_endian_uint32_t>:
 800b568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b56c:	b083      	sub	sp, #12
 800b56e:	460d      	mov	r5, r1
 800b570:	2104      	movs	r1, #4
 800b572:	4604      	mov	r4, r0
 800b574:	9201      	str	r2, [sp, #4]
 800b576:	f7fd fbe1 	bl	8008d3c <ucdr_buffer_alignment>
 800b57a:	4601      	mov	r1, r0
 800b57c:	4620      	mov	r0, r4
 800b57e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b582:	f7fd fc1f 	bl	8008dc4 <ucdr_advance_buffer>
 800b586:	2104      	movs	r1, #4
 800b588:	4620      	mov	r0, r4
 800b58a:	f7fd fb77 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d137      	bne.n	800b602 <ucdr_serialize_endian_uint32_t+0x9a>
 800b592:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b596:	42b7      	cmp	r7, r6
 800b598:	d92e      	bls.n	800b5f8 <ucdr_serialize_endian_uint32_t+0x90>
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	60a7      	str	r7, [r4, #8]
 800b59e:	1bbf      	subs	r7, r7, r6
 800b5a0:	443b      	add	r3, r7
 800b5a2:	f1c7 0904 	rsb	r9, r7, #4
 800b5a6:	6123      	str	r3, [r4, #16]
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f7fd fb72 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d049      	beq.n	800b648 <ucdr_serialize_endian_uint32_t+0xe0>
 800b5b4:	2d01      	cmp	r5, #1
 800b5b6:	d05b      	beq.n	800b670 <ucdr_serialize_endian_uint32_t+0x108>
 800b5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5bc:	7033      	strb	r3, [r6, #0]
 800b5be:	2f01      	cmp	r7, #1
 800b5c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5c4:	7073      	strb	r3, [r6, #1]
 800b5c6:	d04d      	beq.n	800b664 <ucdr_serialize_endian_uint32_t+0xfc>
 800b5c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b5cc:	70b3      	strb	r3, [r6, #2]
 800b5ce:	2f02      	cmp	r7, #2
 800b5d0:	d04c      	beq.n	800b66c <ucdr_serialize_endian_uint32_t+0x104>
 800b5d2:	3603      	adds	r6, #3
 800b5d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5d8:	7033      	strb	r3, [r6, #0]
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	68a2      	ldr	r2, [r4, #8]
 800b5de:	7da0      	ldrb	r0, [r4, #22]
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	444a      	add	r2, r9
 800b5e4:	1bdb      	subs	r3, r3, r7
 800b5e6:	2104      	movs	r1, #4
 800b5e8:	f080 0001 	eor.w	r0, r0, #1
 800b5ec:	60a2      	str	r2, [r4, #8]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	7561      	strb	r1, [r4, #21]
 800b5f2:	b003      	add	sp, #12
 800b5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f8:	2104      	movs	r1, #4
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7fd fb4a 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b600:	b1c8      	cbz	r0, 800b636 <ucdr_serialize_endian_uint32_t+0xce>
 800b602:	2d01      	cmp	r5, #1
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	d01c      	beq.n	800b642 <ucdr_serialize_endian_uint32_t+0xda>
 800b608:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	68a3      	ldr	r3, [r4, #8]
 800b610:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b614:	705a      	strb	r2, [r3, #1]
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b61c:	709a      	strb	r2, [r3, #2]
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b624:	70da      	strb	r2, [r3, #3]
 800b626:	68a2      	ldr	r2, [r4, #8]
 800b628:	6923      	ldr	r3, [r4, #16]
 800b62a:	3204      	adds	r2, #4
 800b62c:	3304      	adds	r3, #4
 800b62e:	2104      	movs	r1, #4
 800b630:	60a2      	str	r2, [r4, #8]
 800b632:	6123      	str	r3, [r4, #16]
 800b634:	7561      	strb	r1, [r4, #21]
 800b636:	7da0      	ldrb	r0, [r4, #22]
 800b638:	f080 0001 	eor.w	r0, r0, #1
 800b63c:	b003      	add	sp, #12
 800b63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b642:	9a01      	ldr	r2, [sp, #4]
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	e7ee      	b.n	800b626 <ucdr_serialize_endian_uint32_t+0xbe>
 800b648:	68a2      	ldr	r2, [r4, #8]
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	7da0      	ldrb	r0, [r4, #22]
 800b64e:	f884 8015 	strb.w	r8, [r4, #21]
 800b652:	1bd2      	subs	r2, r2, r7
 800b654:	1bdb      	subs	r3, r3, r7
 800b656:	f080 0001 	eor.w	r0, r0, #1
 800b65a:	60a2      	str	r2, [r4, #8]
 800b65c:	6123      	str	r3, [r4, #16]
 800b65e:	b003      	add	sp, #12
 800b660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b664:	68a3      	ldr	r3, [r4, #8]
 800b666:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b66a:	701a      	strb	r2, [r3, #0]
 800b66c:	68a6      	ldr	r6, [r4, #8]
 800b66e:	e7b1      	b.n	800b5d4 <ucdr_serialize_endian_uint32_t+0x6c>
 800b670:	ad01      	add	r5, sp, #4
 800b672:	463a      	mov	r2, r7
 800b674:	4629      	mov	r1, r5
 800b676:	4630      	mov	r0, r6
 800b678:	f007 fe4f 	bl	801331a <memcpy>
 800b67c:	68a0      	ldr	r0, [r4, #8]
 800b67e:	464a      	mov	r2, r9
 800b680:	19e9      	adds	r1, r5, r7
 800b682:	f007 fe4a 	bl	801331a <memcpy>
 800b686:	e7a8      	b.n	800b5da <ucdr_serialize_endian_uint32_t+0x72>

0800b688 <ucdr_deserialize_uint32_t>:
 800b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b68c:	460d      	mov	r5, r1
 800b68e:	2104      	movs	r1, #4
 800b690:	4604      	mov	r4, r0
 800b692:	f7fd fb53 	bl	8008d3c <ucdr_buffer_alignment>
 800b696:	4601      	mov	r1, r0
 800b698:	4620      	mov	r0, r4
 800b69a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b69e:	f7fd fb91 	bl	8008dc4 <ucdr_advance_buffer>
 800b6a2:	2104      	movs	r1, #4
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f7fd fae9 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b6aa:	b1d8      	cbz	r0, 800b6e4 <ucdr_deserialize_uint32_t+0x5c>
 800b6ac:	7d22      	ldrb	r2, [r4, #20]
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	2a01      	cmp	r2, #1
 800b6b2:	d052      	beq.n	800b75a <ucdr_deserialize_uint32_t+0xd2>
 800b6b4:	78db      	ldrb	r3, [r3, #3]
 800b6b6:	702b      	strb	r3, [r5, #0]
 800b6b8:	68a3      	ldr	r3, [r4, #8]
 800b6ba:	789b      	ldrb	r3, [r3, #2]
 800b6bc:	706b      	strb	r3, [r5, #1]
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	785b      	ldrb	r3, [r3, #1]
 800b6c2:	70ab      	strb	r3, [r5, #2]
 800b6c4:	68a3      	ldr	r3, [r4, #8]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	70eb      	strb	r3, [r5, #3]
 800b6ca:	68a2      	ldr	r2, [r4, #8]
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	3204      	adds	r2, #4
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	2104      	movs	r1, #4
 800b6d4:	60a2      	str	r2, [r4, #8]
 800b6d6:	6123      	str	r3, [r4, #16]
 800b6d8:	7561      	strb	r1, [r4, #21]
 800b6da:	7da0      	ldrb	r0, [r4, #22]
 800b6dc:	f080 0001 	eor.w	r0, r0, #1
 800b6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b6e8:	42b7      	cmp	r7, r6
 800b6ea:	d92a      	bls.n	800b742 <ucdr_deserialize_uint32_t+0xba>
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	60a7      	str	r7, [r4, #8]
 800b6f0:	1bbf      	subs	r7, r7, r6
 800b6f2:	443b      	add	r3, r7
 800b6f4:	f1c7 0904 	rsb	r9, r7, #4
 800b6f8:	6123      	str	r3, [r4, #16]
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f7fd fac9 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b702:	b368      	cbz	r0, 800b760 <ucdr_deserialize_uint32_t+0xd8>
 800b704:	7d23      	ldrb	r3, [r4, #20]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d040      	beq.n	800b78c <ucdr_deserialize_uint32_t+0x104>
 800b70a:	78f3      	ldrb	r3, [r6, #3]
 800b70c:	702b      	strb	r3, [r5, #0]
 800b70e:	78b3      	ldrb	r3, [r6, #2]
 800b710:	706b      	strb	r3, [r5, #1]
 800b712:	2f01      	cmp	r7, #1
 800b714:	d031      	beq.n	800b77a <ucdr_deserialize_uint32_t+0xf2>
 800b716:	7873      	ldrb	r3, [r6, #1]
 800b718:	70ab      	strb	r3, [r5, #2]
 800b71a:	2f02      	cmp	r7, #2
 800b71c:	f105 0503 	add.w	r5, r5, #3
 800b720:	d02f      	beq.n	800b782 <ucdr_deserialize_uint32_t+0xfa>
 800b722:	7833      	ldrb	r3, [r6, #0]
 800b724:	702b      	strb	r3, [r5, #0]
 800b726:	6923      	ldr	r3, [r4, #16]
 800b728:	68a2      	ldr	r2, [r4, #8]
 800b72a:	7da0      	ldrb	r0, [r4, #22]
 800b72c:	2104      	movs	r1, #4
 800b72e:	3304      	adds	r3, #4
 800b730:	444a      	add	r2, r9
 800b732:	1bdb      	subs	r3, r3, r7
 800b734:	7561      	strb	r1, [r4, #21]
 800b736:	60a2      	str	r2, [r4, #8]
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	f080 0001 	eor.w	r0, r0, #1
 800b73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b742:	2104      	movs	r1, #4
 800b744:	4620      	mov	r0, r4
 800b746:	f7fd faa5 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0c5      	beq.n	800b6da <ucdr_deserialize_uint32_t+0x52>
 800b74e:	7d23      	ldrb	r3, [r4, #20]
 800b750:	68a2      	ldr	r2, [r4, #8]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d017      	beq.n	800b786 <ucdr_deserialize_uint32_t+0xfe>
 800b756:	78d3      	ldrb	r3, [r2, #3]
 800b758:	e7ad      	b.n	800b6b6 <ucdr_deserialize_uint32_t+0x2e>
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	602b      	str	r3, [r5, #0]
 800b75e:	e7b4      	b.n	800b6ca <ucdr_deserialize_uint32_t+0x42>
 800b760:	68a2      	ldr	r2, [r4, #8]
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	7da0      	ldrb	r0, [r4, #22]
 800b766:	f884 8015 	strb.w	r8, [r4, #21]
 800b76a:	1bd2      	subs	r2, r2, r7
 800b76c:	1bdb      	subs	r3, r3, r7
 800b76e:	60a2      	str	r2, [r4, #8]
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	f080 0001 	eor.w	r0, r0, #1
 800b776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	70ab      	strb	r3, [r5, #2]
 800b780:	3503      	adds	r5, #3
 800b782:	68a6      	ldr	r6, [r4, #8]
 800b784:	e7cd      	b.n	800b722 <ucdr_deserialize_uint32_t+0x9a>
 800b786:	6813      	ldr	r3, [r2, #0]
 800b788:	602b      	str	r3, [r5, #0]
 800b78a:	e79e      	b.n	800b6ca <ucdr_deserialize_uint32_t+0x42>
 800b78c:	4631      	mov	r1, r6
 800b78e:	463a      	mov	r2, r7
 800b790:	4628      	mov	r0, r5
 800b792:	f007 fdc2 	bl	801331a <memcpy>
 800b796:	68a1      	ldr	r1, [r4, #8]
 800b798:	464a      	mov	r2, r9
 800b79a:	19e8      	adds	r0, r5, r7
 800b79c:	f007 fdbd 	bl	801331a <memcpy>
 800b7a0:	e7c1      	b.n	800b726 <ucdr_deserialize_uint32_t+0x9e>
 800b7a2:	bf00      	nop

0800b7a4 <ucdr_deserialize_endian_uint32_t>:
 800b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	460e      	mov	r6, r1
 800b7aa:	2104      	movs	r1, #4
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	4615      	mov	r5, r2
 800b7b0:	f7fd fac4 	bl	8008d3c <ucdr_buffer_alignment>
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b7bc:	f7fd fb02 	bl	8008dc4 <ucdr_advance_buffer>
 800b7c0:	2104      	movs	r1, #4
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f7fd fa5a 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d137      	bne.n	800b83c <ucdr_deserialize_endian_uint32_t+0x98>
 800b7cc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b7d0:	42bb      	cmp	r3, r7
 800b7d2:	d92e      	bls.n	800b832 <ucdr_deserialize_endian_uint32_t+0x8e>
 800b7d4:	eba3 0807 	sub.w	r8, r3, r7
 800b7d8:	60a3      	str	r3, [r4, #8]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	f1c8 0a04 	rsb	sl, r8, #4
 800b7e0:	4443      	add	r3, r8
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	4651      	mov	r1, sl
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7fd fa54 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d043      	beq.n	800b878 <ucdr_deserialize_endian_uint32_t+0xd4>
 800b7f0:	2e01      	cmp	r6, #1
 800b7f2:	d056      	beq.n	800b8a2 <ucdr_deserialize_endian_uint32_t+0xfe>
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	702b      	strb	r3, [r5, #0]
 800b7f8:	78bb      	ldrb	r3, [r7, #2]
 800b7fa:	706b      	strb	r3, [r5, #1]
 800b7fc:	f1b8 0f01 	cmp.w	r8, #1
 800b800:	d049      	beq.n	800b896 <ucdr_deserialize_endian_uint32_t+0xf2>
 800b802:	787b      	ldrb	r3, [r7, #1]
 800b804:	70ab      	strb	r3, [r5, #2]
 800b806:	f1b8 0f02 	cmp.w	r8, #2
 800b80a:	f105 0503 	add.w	r5, r5, #3
 800b80e:	d046      	beq.n	800b89e <ucdr_deserialize_endian_uint32_t+0xfa>
 800b810:	783b      	ldrb	r3, [r7, #0]
 800b812:	702b      	strb	r3, [r5, #0]
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	68a2      	ldr	r2, [r4, #8]
 800b818:	7da0      	ldrb	r0, [r4, #22]
 800b81a:	2104      	movs	r1, #4
 800b81c:	3304      	adds	r3, #4
 800b81e:	4452      	add	r2, sl
 800b820:	eba3 0308 	sub.w	r3, r3, r8
 800b824:	7561      	strb	r1, [r4, #21]
 800b826:	60a2      	str	r2, [r4, #8]
 800b828:	6123      	str	r3, [r4, #16]
 800b82a:	f080 0001 	eor.w	r0, r0, #1
 800b82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b832:	2104      	movs	r1, #4
 800b834:	4620      	mov	r0, r4
 800b836:	f7fd fa2d 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b83a:	b1a8      	cbz	r0, 800b868 <ucdr_deserialize_endian_uint32_t+0xc4>
 800b83c:	2e01      	cmp	r6, #1
 800b83e:	68a3      	ldr	r3, [r4, #8]
 800b840:	d017      	beq.n	800b872 <ucdr_deserialize_endian_uint32_t+0xce>
 800b842:	78db      	ldrb	r3, [r3, #3]
 800b844:	702b      	strb	r3, [r5, #0]
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	789b      	ldrb	r3, [r3, #2]
 800b84a:	706b      	strb	r3, [r5, #1]
 800b84c:	68a3      	ldr	r3, [r4, #8]
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	70ab      	strb	r3, [r5, #2]
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	70eb      	strb	r3, [r5, #3]
 800b858:	68a2      	ldr	r2, [r4, #8]
 800b85a:	6923      	ldr	r3, [r4, #16]
 800b85c:	3204      	adds	r2, #4
 800b85e:	3304      	adds	r3, #4
 800b860:	2104      	movs	r1, #4
 800b862:	60a2      	str	r2, [r4, #8]
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	7561      	strb	r1, [r4, #21]
 800b868:	7da0      	ldrb	r0, [r4, #22]
 800b86a:	f080 0001 	eor.w	r0, r0, #1
 800b86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	e7ef      	b.n	800b858 <ucdr_deserialize_endian_uint32_t+0xb4>
 800b878:	68a2      	ldr	r2, [r4, #8]
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	7da0      	ldrb	r0, [r4, #22]
 800b87e:	f884 9015 	strb.w	r9, [r4, #21]
 800b882:	eba2 0208 	sub.w	r2, r2, r8
 800b886:	eba3 0308 	sub.w	r3, r3, r8
 800b88a:	60a2      	str	r2, [r4, #8]
 800b88c:	6123      	str	r3, [r4, #16]
 800b88e:	f080 0001 	eor.w	r0, r0, #1
 800b892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	785b      	ldrb	r3, [r3, #1]
 800b89a:	70ab      	strb	r3, [r5, #2]
 800b89c:	3503      	adds	r5, #3
 800b89e:	68a7      	ldr	r7, [r4, #8]
 800b8a0:	e7b6      	b.n	800b810 <ucdr_deserialize_endian_uint32_t+0x6c>
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f007 fd37 	bl	801331a <memcpy>
 800b8ac:	68a1      	ldr	r1, [r4, #8]
 800b8ae:	4652      	mov	r2, sl
 800b8b0:	eb05 0008 	add.w	r0, r5, r8
 800b8b4:	f007 fd31 	bl	801331a <memcpy>
 800b8b8:	e7ac      	b.n	800b814 <ucdr_deserialize_endian_uint32_t+0x70>
 800b8ba:	bf00      	nop

0800b8bc <ucdr_serialize_uint64_t>:
 800b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c0:	2108      	movs	r1, #8
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	e9cd 2300 	strd	r2, r3, [sp]
 800b8ca:	f7fd fa37 	bl	8008d3c <ucdr_buffer_alignment>
 800b8ce:	4601      	mov	r1, r0
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	7d67      	ldrb	r7, [r4, #21]
 800b8d4:	f7fd fa76 	bl	8008dc4 <ucdr_advance_buffer>
 800b8d8:	2108      	movs	r1, #8
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7fd f9ce 	bl	8008c7c <ucdr_check_buffer_available_for>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d14d      	bne.n	800b980 <ucdr_serialize_uint64_t+0xc4>
 800b8e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b8e8:	42ab      	cmp	r3, r5
 800b8ea:	d944      	bls.n	800b976 <ucdr_serialize_uint64_t+0xba>
 800b8ec:	1b5e      	subs	r6, r3, r5
 800b8ee:	60a3      	str	r3, [r4, #8]
 800b8f0:	6923      	ldr	r3, [r4, #16]
 800b8f2:	f1c6 0808 	rsb	r8, r6, #8
 800b8f6:	4433      	add	r3, r6
 800b8f8:	6123      	str	r3, [r4, #16]
 800b8fa:	4641      	mov	r1, r8
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f7fd f9c9 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b902:	2800      	cmp	r0, #0
 800b904:	d072      	beq.n	800b9ec <ucdr_serialize_uint64_t+0x130>
 800b906:	7d23      	ldrb	r3, [r4, #20]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	f000 8092 	beq.w	800ba32 <ucdr_serialize_uint64_t+0x176>
 800b90e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b912:	702b      	strb	r3, [r5, #0]
 800b914:	2e01      	cmp	r6, #1
 800b916:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b91a:	706b      	strb	r3, [r5, #1]
 800b91c:	d073      	beq.n	800ba06 <ucdr_serialize_uint64_t+0x14a>
 800b91e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b922:	70ab      	strb	r3, [r5, #2]
 800b924:	2e02      	cmp	r6, #2
 800b926:	d072      	beq.n	800ba0e <ucdr_serialize_uint64_t+0x152>
 800b928:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b92c:	70eb      	strb	r3, [r5, #3]
 800b92e:	2e03      	cmp	r6, #3
 800b930:	d071      	beq.n	800ba16 <ucdr_serialize_uint64_t+0x15a>
 800b932:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b936:	712b      	strb	r3, [r5, #4]
 800b938:	2e04      	cmp	r6, #4
 800b93a:	d070      	beq.n	800ba1e <ucdr_serialize_uint64_t+0x162>
 800b93c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b940:	716b      	strb	r3, [r5, #5]
 800b942:	2e05      	cmp	r6, #5
 800b944:	d06f      	beq.n	800ba26 <ucdr_serialize_uint64_t+0x16a>
 800b946:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b94a:	71ab      	strb	r3, [r5, #6]
 800b94c:	2e06      	cmp	r6, #6
 800b94e:	d06e      	beq.n	800ba2e <ucdr_serialize_uint64_t+0x172>
 800b950:	3507      	adds	r5, #7
 800b952:	f89d 3000 	ldrb.w	r3, [sp]
 800b956:	702b      	strb	r3, [r5, #0]
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	68a2      	ldr	r2, [r4, #8]
 800b95c:	7da0      	ldrb	r0, [r4, #22]
 800b95e:	3308      	adds	r3, #8
 800b960:	4442      	add	r2, r8
 800b962:	1b9b      	subs	r3, r3, r6
 800b964:	2108      	movs	r1, #8
 800b966:	f080 0001 	eor.w	r0, r0, #1
 800b96a:	60a2      	str	r2, [r4, #8]
 800b96c:	6123      	str	r3, [r4, #16]
 800b96e:	7561      	strb	r1, [r4, #21]
 800b970:	b002      	add	sp, #8
 800b972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b976:	2108      	movs	r1, #8
 800b978:	4620      	mov	r0, r4
 800b97a:	f7fd f98b 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800b97e:	b350      	cbz	r0, 800b9d6 <ucdr_serialize_uint64_t+0x11a>
 800b980:	7d22      	ldrb	r2, [r4, #20]
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	2a01      	cmp	r2, #1
 800b986:	d02c      	beq.n	800b9e2 <ucdr_serialize_uint64_t+0x126>
 800b988:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b98c:	701a      	strb	r2, [r3, #0]
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b994:	705a      	strb	r2, [r3, #1]
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b99c:	709a      	strb	r2, [r3, #2]
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9a4:	70da      	strb	r2, [r3, #3]
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b9ac:	711a      	strb	r2, [r3, #4]
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b9b4:	715a      	strb	r2, [r3, #5]
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b9bc:	719a      	strb	r2, [r3, #6]
 800b9be:	68a3      	ldr	r3, [r4, #8]
 800b9c0:	f89d 2000 	ldrb.w	r2, [sp]
 800b9c4:	71da      	strb	r2, [r3, #7]
 800b9c6:	68a2      	ldr	r2, [r4, #8]
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	3208      	adds	r2, #8
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	2108      	movs	r1, #8
 800b9d0:	60a2      	str	r2, [r4, #8]
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	7561      	strb	r1, [r4, #21]
 800b9d6:	7da0      	ldrb	r0, [r4, #22]
 800b9d8:	f080 0001 	eor.w	r0, r0, #1
 800b9dc:	b002      	add	sp, #8
 800b9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9e6:	6019      	str	r1, [r3, #0]
 800b9e8:	605a      	str	r2, [r3, #4]
 800b9ea:	e7ec      	b.n	800b9c6 <ucdr_serialize_uint64_t+0x10a>
 800b9ec:	68a2      	ldr	r2, [r4, #8]
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	7da0      	ldrb	r0, [r4, #22]
 800b9f2:	7567      	strb	r7, [r4, #21]
 800b9f4:	1b92      	subs	r2, r2, r6
 800b9f6:	1b9b      	subs	r3, r3, r6
 800b9f8:	f080 0001 	eor.w	r0, r0, #1
 800b9fc:	60a2      	str	r2, [r4, #8]
 800b9fe:	6123      	str	r3, [r4, #16]
 800ba00:	b002      	add	sp, #8
 800ba02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	68a3      	ldr	r3, [r4, #8]
 800ba10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba24:	701a      	strb	r2, [r3, #0]
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	68a5      	ldr	r5, [r4, #8]
 800ba30:	e78f      	b.n	800b952 <ucdr_serialize_uint64_t+0x96>
 800ba32:	4628      	mov	r0, r5
 800ba34:	466d      	mov	r5, sp
 800ba36:	4632      	mov	r2, r6
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f007 fc6e 	bl	801331a <memcpy>
 800ba3e:	68a0      	ldr	r0, [r4, #8]
 800ba40:	4642      	mov	r2, r8
 800ba42:	19a9      	adds	r1, r5, r6
 800ba44:	f007 fc69 	bl	801331a <memcpy>
 800ba48:	e786      	b.n	800b958 <ucdr_serialize_uint64_t+0x9c>
 800ba4a:	bf00      	nop

0800ba4c <ucdr_serialize_int16_t>:
 800ba4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	460b      	mov	r3, r1
 800ba54:	2102      	movs	r1, #2
 800ba56:	4604      	mov	r4, r0
 800ba58:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ba5c:	f7fd f96e 	bl	8008d3c <ucdr_buffer_alignment>
 800ba60:	4601      	mov	r1, r0
 800ba62:	4620      	mov	r0, r4
 800ba64:	7d67      	ldrb	r7, [r4, #21]
 800ba66:	f7fd f9ad 	bl	8008dc4 <ucdr_advance_buffer>
 800ba6a:	2102      	movs	r1, #2
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7fd f905 	bl	8008c7c <ucdr_check_buffer_available_for>
 800ba72:	b1c0      	cbz	r0, 800baa6 <ucdr_serialize_int16_t+0x5a>
 800ba74:	7d22      	ldrb	r2, [r4, #20]
 800ba76:	68a3      	ldr	r3, [r4, #8]
 800ba78:	2a01      	cmp	r2, #1
 800ba7a:	d04e      	beq.n	800bb1a <ucdr_serialize_int16_t+0xce>
 800ba7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba80:	701a      	strb	r2, [r3, #0]
 800ba82:	68a3      	ldr	r3, [r4, #8]
 800ba84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba88:	705a      	strb	r2, [r3, #1]
 800ba8a:	68a2      	ldr	r2, [r4, #8]
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	3202      	adds	r2, #2
 800ba90:	3302      	adds	r3, #2
 800ba92:	2102      	movs	r1, #2
 800ba94:	60a2      	str	r2, [r4, #8]
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	7561      	strb	r1, [r4, #21]
 800ba9a:	7da0      	ldrb	r0, [r4, #22]
 800ba9c:	f080 0001 	eor.w	r0, r0, #1
 800baa0:	b002      	add	sp, #8
 800baa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800baaa:	42ab      	cmp	r3, r5
 800baac:	d923      	bls.n	800baf6 <ucdr_serialize_int16_t+0xaa>
 800baae:	1b5e      	subs	r6, r3, r5
 800bab0:	60a3      	str	r3, [r4, #8]
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	f1c6 0802 	rsb	r8, r6, #2
 800bab8:	4433      	add	r3, r6
 800baba:	6123      	str	r3, [r4, #16]
 800babc:	4641      	mov	r1, r8
 800babe:	4620      	mov	r0, r4
 800bac0:	f7fd f8e8 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bac4:	b368      	cbz	r0, 800bb22 <ucdr_serialize_int16_t+0xd6>
 800bac6:	7d23      	ldrb	r3, [r4, #20]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d03b      	beq.n	800bb44 <ucdr_serialize_int16_t+0xf8>
 800bacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bad0:	702b      	strb	r3, [r5, #0]
 800bad2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bad6:	706b      	strb	r3, [r5, #1]
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	68a2      	ldr	r2, [r4, #8]
 800badc:	7da0      	ldrb	r0, [r4, #22]
 800bade:	3302      	adds	r3, #2
 800bae0:	4442      	add	r2, r8
 800bae2:	1b9b      	subs	r3, r3, r6
 800bae4:	2102      	movs	r1, #2
 800bae6:	f080 0001 	eor.w	r0, r0, #1
 800baea:	60a2      	str	r2, [r4, #8]
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	7561      	strb	r1, [r4, #21]
 800baf0:	b002      	add	sp, #8
 800baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf6:	2102      	movs	r1, #2
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7fd f8cb 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d0cb      	beq.n	800ba9a <ucdr_serialize_int16_t+0x4e>
 800bb02:	7d23      	ldrb	r3, [r4, #20]
 800bb04:	68a2      	ldr	r2, [r4, #8]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d018      	beq.n	800bb3c <ucdr_serialize_int16_t+0xf0>
 800bb0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb0e:	7013      	strb	r3, [r2, #0]
 800bb10:	68a3      	ldr	r3, [r4, #8]
 800bb12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb16:	705a      	strb	r2, [r3, #1]
 800bb18:	e7b7      	b.n	800ba8a <ucdr_serialize_int16_t+0x3e>
 800bb1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb1e:	801a      	strh	r2, [r3, #0]
 800bb20:	e7b3      	b.n	800ba8a <ucdr_serialize_int16_t+0x3e>
 800bb22:	68a2      	ldr	r2, [r4, #8]
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	7da0      	ldrb	r0, [r4, #22]
 800bb28:	7567      	strb	r7, [r4, #21]
 800bb2a:	1b92      	subs	r2, r2, r6
 800bb2c:	1b9b      	subs	r3, r3, r6
 800bb2e:	f080 0001 	eor.w	r0, r0, #1
 800bb32:	60a2      	str	r2, [r4, #8]
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	b002      	add	sp, #8
 800bb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bb40:	8013      	strh	r3, [r2, #0]
 800bb42:	e7a2      	b.n	800ba8a <ucdr_serialize_int16_t+0x3e>
 800bb44:	4628      	mov	r0, r5
 800bb46:	f10d 0506 	add.w	r5, sp, #6
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f007 fbe4 	bl	801331a <memcpy>
 800bb52:	68a0      	ldr	r0, [r4, #8]
 800bb54:	4642      	mov	r2, r8
 800bb56:	19a9      	adds	r1, r5, r6
 800bb58:	f007 fbdf 	bl	801331a <memcpy>
 800bb5c:	e7bc      	b.n	800bad8 <ucdr_serialize_int16_t+0x8c>
 800bb5e:	bf00      	nop

0800bb60 <ucdr_deserialize_int16_t>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	460d      	mov	r5, r1
 800bb66:	2102      	movs	r1, #2
 800bb68:	4604      	mov	r4, r0
 800bb6a:	f7fd f8e7 	bl	8008d3c <ucdr_buffer_alignment>
 800bb6e:	4601      	mov	r1, r0
 800bb70:	4620      	mov	r0, r4
 800bb72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb76:	f7fd f925 	bl	8008dc4 <ucdr_advance_buffer>
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f7fd f87d 	bl	8008c7c <ucdr_check_buffer_available_for>
 800bb82:	b1a8      	cbz	r0, 800bbb0 <ucdr_deserialize_int16_t+0x50>
 800bb84:	7d22      	ldrb	r2, [r4, #20]
 800bb86:	68a3      	ldr	r3, [r4, #8]
 800bb88:	2a01      	cmp	r2, #1
 800bb8a:	d046      	beq.n	800bc1a <ucdr_deserialize_int16_t+0xba>
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	702b      	strb	r3, [r5, #0]
 800bb90:	68a3      	ldr	r3, [r4, #8]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	706b      	strb	r3, [r5, #1]
 800bb96:	68a2      	ldr	r2, [r4, #8]
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	3202      	adds	r2, #2
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	2102      	movs	r1, #2
 800bba0:	60a2      	str	r2, [r4, #8]
 800bba2:	6123      	str	r3, [r4, #16]
 800bba4:	7561      	strb	r1, [r4, #21]
 800bba6:	7da0      	ldrb	r0, [r4, #22]
 800bba8:	f080 0001 	eor.w	r0, r0, #1
 800bbac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bbb4:	42be      	cmp	r6, r7
 800bbb6:	d920      	bls.n	800bbfa <ucdr_deserialize_int16_t+0x9a>
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	60a6      	str	r6, [r4, #8]
 800bbbc:	1bf6      	subs	r6, r6, r7
 800bbbe:	4433      	add	r3, r6
 800bbc0:	f1c6 0902 	rsb	r9, r6, #2
 800bbc4:	6123      	str	r3, [r4, #16]
 800bbc6:	4649      	mov	r1, r9
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f7fd f863 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bbce:	b338      	cbz	r0, 800bc20 <ucdr_deserialize_int16_t+0xc0>
 800bbd0:	7d23      	ldrb	r3, [r4, #20]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d034      	beq.n	800bc40 <ucdr_deserialize_int16_t+0xe0>
 800bbd6:	787b      	ldrb	r3, [r7, #1]
 800bbd8:	702b      	strb	r3, [r5, #0]
 800bbda:	783b      	ldrb	r3, [r7, #0]
 800bbdc:	706b      	strb	r3, [r5, #1]
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	68a2      	ldr	r2, [r4, #8]
 800bbe2:	7da0      	ldrb	r0, [r4, #22]
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	3302      	adds	r3, #2
 800bbe8:	444a      	add	r2, r9
 800bbea:	1b9b      	subs	r3, r3, r6
 800bbec:	7561      	strb	r1, [r4, #21]
 800bbee:	60a2      	str	r2, [r4, #8]
 800bbf0:	6123      	str	r3, [r4, #16]
 800bbf2:	f080 0001 	eor.w	r0, r0, #1
 800bbf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfa:	2102      	movs	r1, #2
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f7fd f849 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d0cf      	beq.n	800bba6 <ucdr_deserialize_int16_t+0x46>
 800bc06:	7d23      	ldrb	r3, [r4, #20]
 800bc08:	68a2      	ldr	r2, [r4, #8]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d015      	beq.n	800bc3a <ucdr_deserialize_int16_t+0xda>
 800bc0e:	7853      	ldrb	r3, [r2, #1]
 800bc10:	702b      	strb	r3, [r5, #0]
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	706b      	strb	r3, [r5, #1]
 800bc18:	e7bd      	b.n	800bb96 <ucdr_deserialize_int16_t+0x36>
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	802b      	strh	r3, [r5, #0]
 800bc1e:	e7ba      	b.n	800bb96 <ucdr_deserialize_int16_t+0x36>
 800bc20:	68a2      	ldr	r2, [r4, #8]
 800bc22:	6923      	ldr	r3, [r4, #16]
 800bc24:	7da0      	ldrb	r0, [r4, #22]
 800bc26:	f884 8015 	strb.w	r8, [r4, #21]
 800bc2a:	1b92      	subs	r2, r2, r6
 800bc2c:	1b9b      	subs	r3, r3, r6
 800bc2e:	60a2      	str	r2, [r4, #8]
 800bc30:	6123      	str	r3, [r4, #16]
 800bc32:	f080 0001 	eor.w	r0, r0, #1
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	8813      	ldrh	r3, [r2, #0]
 800bc3c:	802b      	strh	r3, [r5, #0]
 800bc3e:	e7aa      	b.n	800bb96 <ucdr_deserialize_int16_t+0x36>
 800bc40:	4639      	mov	r1, r7
 800bc42:	4632      	mov	r2, r6
 800bc44:	4628      	mov	r0, r5
 800bc46:	f007 fb68 	bl	801331a <memcpy>
 800bc4a:	68a1      	ldr	r1, [r4, #8]
 800bc4c:	464a      	mov	r2, r9
 800bc4e:	19a8      	adds	r0, r5, r6
 800bc50:	f007 fb63 	bl	801331a <memcpy>
 800bc54:	e7c3      	b.n	800bbde <ucdr_deserialize_int16_t+0x7e>
 800bc56:	bf00      	nop

0800bc58 <ucdr_serialize_int32_t>:
 800bc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	4604      	mov	r4, r0
 800bc60:	9101      	str	r1, [sp, #4]
 800bc62:	2104      	movs	r1, #4
 800bc64:	f7fd f86a 	bl	8008d3c <ucdr_buffer_alignment>
 800bc68:	4601      	mov	r1, r0
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	7d67      	ldrb	r7, [r4, #21]
 800bc6e:	f7fd f8a9 	bl	8008dc4 <ucdr_advance_buffer>
 800bc72:	2104      	movs	r1, #4
 800bc74:	4620      	mov	r0, r4
 800bc76:	f7fd f801 	bl	8008c7c <ucdr_check_buffer_available_for>
 800bc7a:	b300      	cbz	r0, 800bcbe <ucdr_serialize_int32_t+0x66>
 800bc7c:	7d22      	ldrb	r2, [r4, #20]
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	2a01      	cmp	r2, #1
 800bc82:	d05d      	beq.n	800bd40 <ucdr_serialize_int32_t+0xe8>
 800bc84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc90:	705a      	strb	r2, [r3, #1]
 800bc92:	68a3      	ldr	r3, [r4, #8]
 800bc94:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc98:	709a      	strb	r2, [r3, #2]
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bca0:	70da      	strb	r2, [r3, #3]
 800bca2:	68a2      	ldr	r2, [r4, #8]
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	3204      	adds	r2, #4
 800bca8:	3304      	adds	r3, #4
 800bcaa:	2104      	movs	r1, #4
 800bcac:	60a2      	str	r2, [r4, #8]
 800bcae:	6123      	str	r3, [r4, #16]
 800bcb0:	7561      	strb	r1, [r4, #21]
 800bcb2:	7da0      	ldrb	r0, [r4, #22]
 800bcb4:	f080 0001 	eor.w	r0, r0, #1
 800bcb8:	b002      	add	sp, #8
 800bcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcbe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bcc2:	42ab      	cmp	r3, r5
 800bcc4:	d92e      	bls.n	800bd24 <ucdr_serialize_int32_t+0xcc>
 800bcc6:	1b5e      	subs	r6, r3, r5
 800bcc8:	60a3      	str	r3, [r4, #8]
 800bcca:	6923      	ldr	r3, [r4, #16]
 800bccc:	f1c6 0804 	rsb	r8, r6, #4
 800bcd0:	4433      	add	r3, r6
 800bcd2:	6123      	str	r3, [r4, #16]
 800bcd4:	4641      	mov	r1, r8
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7fc ffdc 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bcdc:	b398      	cbz	r0, 800bd46 <ucdr_serialize_int32_t+0xee>
 800bcde:	7d23      	ldrb	r3, [r4, #20]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d046      	beq.n	800bd72 <ucdr_serialize_int32_t+0x11a>
 800bce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bce8:	702b      	strb	r3, [r5, #0]
 800bcea:	2e01      	cmp	r6, #1
 800bcec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcf0:	706b      	strb	r3, [r5, #1]
 800bcf2:	d035      	beq.n	800bd60 <ucdr_serialize_int32_t+0x108>
 800bcf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bcf8:	70ab      	strb	r3, [r5, #2]
 800bcfa:	2e02      	cmp	r6, #2
 800bcfc:	d034      	beq.n	800bd68 <ucdr_serialize_int32_t+0x110>
 800bcfe:	3503      	adds	r5, #3
 800bd00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd04:	702b      	strb	r3, [r5, #0]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	68a2      	ldr	r2, [r4, #8]
 800bd0a:	7da0      	ldrb	r0, [r4, #22]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4442      	add	r2, r8
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	2104      	movs	r1, #4
 800bd14:	f080 0001 	eor.w	r0, r0, #1
 800bd18:	60a2      	str	r2, [r4, #8]
 800bd1a:	6123      	str	r3, [r4, #16]
 800bd1c:	7561      	strb	r1, [r4, #21]
 800bd1e:	b002      	add	sp, #8
 800bd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd24:	2104      	movs	r1, #4
 800bd26:	4620      	mov	r0, r4
 800bd28:	f7fc ffb4 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d0c0      	beq.n	800bcb2 <ucdr_serialize_int32_t+0x5a>
 800bd30:	7d23      	ldrb	r3, [r4, #20]
 800bd32:	68a2      	ldr	r2, [r4, #8]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d019      	beq.n	800bd6c <ucdr_serialize_int32_t+0x114>
 800bd38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd3c:	7013      	strb	r3, [r2, #0]
 800bd3e:	e7a4      	b.n	800bc8a <ucdr_serialize_int32_t+0x32>
 800bd40:	9a01      	ldr	r2, [sp, #4]
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	e7ad      	b.n	800bca2 <ucdr_serialize_int32_t+0x4a>
 800bd46:	68a2      	ldr	r2, [r4, #8]
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	7da0      	ldrb	r0, [r4, #22]
 800bd4c:	7567      	strb	r7, [r4, #21]
 800bd4e:	1b92      	subs	r2, r2, r6
 800bd50:	1b9b      	subs	r3, r3, r6
 800bd52:	f080 0001 	eor.w	r0, r0, #1
 800bd56:	60a2      	str	r2, [r4, #8]
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	b002      	add	sp, #8
 800bd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	68a5      	ldr	r5, [r4, #8]
 800bd6a:	e7c9      	b.n	800bd00 <ucdr_serialize_int32_t+0xa8>
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	e797      	b.n	800bca2 <ucdr_serialize_int32_t+0x4a>
 800bd72:	4628      	mov	r0, r5
 800bd74:	ad01      	add	r5, sp, #4
 800bd76:	4632      	mov	r2, r6
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f007 face 	bl	801331a <memcpy>
 800bd7e:	68a0      	ldr	r0, [r4, #8]
 800bd80:	4642      	mov	r2, r8
 800bd82:	19a9      	adds	r1, r5, r6
 800bd84:	f007 fac9 	bl	801331a <memcpy>
 800bd88:	e7bd      	b.n	800bd06 <ucdr_serialize_int32_t+0xae>
 800bd8a:	bf00      	nop

0800bd8c <ucdr_deserialize_int32_t>:
 800bd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd90:	460d      	mov	r5, r1
 800bd92:	2104      	movs	r1, #4
 800bd94:	4604      	mov	r4, r0
 800bd96:	f7fc ffd1 	bl	8008d3c <ucdr_buffer_alignment>
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bda2:	f7fd f80f 	bl	8008dc4 <ucdr_advance_buffer>
 800bda6:	2104      	movs	r1, #4
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f7fc ff67 	bl	8008c7c <ucdr_check_buffer_available_for>
 800bdae:	b1d8      	cbz	r0, 800bde8 <ucdr_deserialize_int32_t+0x5c>
 800bdb0:	7d22      	ldrb	r2, [r4, #20]
 800bdb2:	68a3      	ldr	r3, [r4, #8]
 800bdb4:	2a01      	cmp	r2, #1
 800bdb6:	d052      	beq.n	800be5e <ucdr_deserialize_int32_t+0xd2>
 800bdb8:	78db      	ldrb	r3, [r3, #3]
 800bdba:	702b      	strb	r3, [r5, #0]
 800bdbc:	68a3      	ldr	r3, [r4, #8]
 800bdbe:	789b      	ldrb	r3, [r3, #2]
 800bdc0:	706b      	strb	r3, [r5, #1]
 800bdc2:	68a3      	ldr	r3, [r4, #8]
 800bdc4:	785b      	ldrb	r3, [r3, #1]
 800bdc6:	70ab      	strb	r3, [r5, #2]
 800bdc8:	68a3      	ldr	r3, [r4, #8]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	70eb      	strb	r3, [r5, #3]
 800bdce:	68a2      	ldr	r2, [r4, #8]
 800bdd0:	6923      	ldr	r3, [r4, #16]
 800bdd2:	3204      	adds	r2, #4
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	2104      	movs	r1, #4
 800bdd8:	60a2      	str	r2, [r4, #8]
 800bdda:	6123      	str	r3, [r4, #16]
 800bddc:	7561      	strb	r1, [r4, #21]
 800bdde:	7da0      	ldrb	r0, [r4, #22]
 800bde0:	f080 0001 	eor.w	r0, r0, #1
 800bde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bdec:	42b7      	cmp	r7, r6
 800bdee:	d92a      	bls.n	800be46 <ucdr_deserialize_int32_t+0xba>
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	60a7      	str	r7, [r4, #8]
 800bdf4:	1bbf      	subs	r7, r7, r6
 800bdf6:	443b      	add	r3, r7
 800bdf8:	f1c7 0904 	rsb	r9, r7, #4
 800bdfc:	6123      	str	r3, [r4, #16]
 800bdfe:	4649      	mov	r1, r9
 800be00:	4620      	mov	r0, r4
 800be02:	f7fc ff47 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800be06:	b368      	cbz	r0, 800be64 <ucdr_deserialize_int32_t+0xd8>
 800be08:	7d23      	ldrb	r3, [r4, #20]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d040      	beq.n	800be90 <ucdr_deserialize_int32_t+0x104>
 800be0e:	78f3      	ldrb	r3, [r6, #3]
 800be10:	702b      	strb	r3, [r5, #0]
 800be12:	78b3      	ldrb	r3, [r6, #2]
 800be14:	706b      	strb	r3, [r5, #1]
 800be16:	2f01      	cmp	r7, #1
 800be18:	d031      	beq.n	800be7e <ucdr_deserialize_int32_t+0xf2>
 800be1a:	7873      	ldrb	r3, [r6, #1]
 800be1c:	70ab      	strb	r3, [r5, #2]
 800be1e:	2f02      	cmp	r7, #2
 800be20:	f105 0503 	add.w	r5, r5, #3
 800be24:	d02f      	beq.n	800be86 <ucdr_deserialize_int32_t+0xfa>
 800be26:	7833      	ldrb	r3, [r6, #0]
 800be28:	702b      	strb	r3, [r5, #0]
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	68a2      	ldr	r2, [r4, #8]
 800be2e:	7da0      	ldrb	r0, [r4, #22]
 800be30:	2104      	movs	r1, #4
 800be32:	3304      	adds	r3, #4
 800be34:	444a      	add	r2, r9
 800be36:	1bdb      	subs	r3, r3, r7
 800be38:	7561      	strb	r1, [r4, #21]
 800be3a:	60a2      	str	r2, [r4, #8]
 800be3c:	6123      	str	r3, [r4, #16]
 800be3e:	f080 0001 	eor.w	r0, r0, #1
 800be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be46:	2104      	movs	r1, #4
 800be48:	4620      	mov	r0, r4
 800be4a:	f7fc ff23 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0c5      	beq.n	800bdde <ucdr_deserialize_int32_t+0x52>
 800be52:	7d23      	ldrb	r3, [r4, #20]
 800be54:	68a2      	ldr	r2, [r4, #8]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d017      	beq.n	800be8a <ucdr_deserialize_int32_t+0xfe>
 800be5a:	78d3      	ldrb	r3, [r2, #3]
 800be5c:	e7ad      	b.n	800bdba <ucdr_deserialize_int32_t+0x2e>
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	e7b4      	b.n	800bdce <ucdr_deserialize_int32_t+0x42>
 800be64:	68a2      	ldr	r2, [r4, #8]
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	7da0      	ldrb	r0, [r4, #22]
 800be6a:	f884 8015 	strb.w	r8, [r4, #21]
 800be6e:	1bd2      	subs	r2, r2, r7
 800be70:	1bdb      	subs	r3, r3, r7
 800be72:	60a2      	str	r2, [r4, #8]
 800be74:	6123      	str	r3, [r4, #16]
 800be76:	f080 0001 	eor.w	r0, r0, #1
 800be7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7e:	68a3      	ldr	r3, [r4, #8]
 800be80:	785b      	ldrb	r3, [r3, #1]
 800be82:	70ab      	strb	r3, [r5, #2]
 800be84:	3503      	adds	r5, #3
 800be86:	68a6      	ldr	r6, [r4, #8]
 800be88:	e7cd      	b.n	800be26 <ucdr_deserialize_int32_t+0x9a>
 800be8a:	6813      	ldr	r3, [r2, #0]
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	e79e      	b.n	800bdce <ucdr_deserialize_int32_t+0x42>
 800be90:	4631      	mov	r1, r6
 800be92:	463a      	mov	r2, r7
 800be94:	4628      	mov	r0, r5
 800be96:	f007 fa40 	bl	801331a <memcpy>
 800be9a:	68a1      	ldr	r1, [r4, #8]
 800be9c:	464a      	mov	r2, r9
 800be9e:	19e8      	adds	r0, r5, r7
 800bea0:	f007 fa3b 	bl	801331a <memcpy>
 800bea4:	e7c1      	b.n	800be2a <ucdr_deserialize_int32_t+0x9e>
 800bea6:	bf00      	nop

0800bea8 <ucdr_serialize_endian_double>:
 800bea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beac:	460e      	mov	r6, r1
 800beae:	b083      	sub	sp, #12
 800beb0:	2108      	movs	r1, #8
 800beb2:	4604      	mov	r4, r0
 800beb4:	ed8d 0b00 	vstr	d0, [sp]
 800beb8:	f7fc ff40 	bl	8008d3c <ucdr_buffer_alignment>
 800bebc:	4601      	mov	r1, r0
 800bebe:	4620      	mov	r0, r4
 800bec0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bec4:	f7fc ff7e 	bl	8008dc4 <ucdr_advance_buffer>
 800bec8:	2108      	movs	r1, #8
 800beca:	4620      	mov	r0, r4
 800becc:	f7fc fed6 	bl	8008c7c <ucdr_check_buffer_available_for>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d14c      	bne.n	800bf6e <ucdr_serialize_endian_double+0xc6>
 800bed4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800bed8:	42bd      	cmp	r5, r7
 800beda:	d943      	bls.n	800bf64 <ucdr_serialize_endian_double+0xbc>
 800bedc:	6923      	ldr	r3, [r4, #16]
 800bede:	60a5      	str	r5, [r4, #8]
 800bee0:	1bed      	subs	r5, r5, r7
 800bee2:	442b      	add	r3, r5
 800bee4:	f1c5 0908 	rsb	r9, r5, #8
 800bee8:	6123      	str	r3, [r4, #16]
 800beea:	4649      	mov	r1, r9
 800beec:	4620      	mov	r0, r4
 800beee:	f7fc fed1 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	d070      	beq.n	800bfd8 <ucdr_serialize_endian_double+0x130>
 800bef6:	2e01      	cmp	r6, #1
 800bef8:	f000 8092 	beq.w	800c020 <ucdr_serialize_endian_double+0x178>
 800befc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf00:	703b      	strb	r3, [r7, #0]
 800bf02:	2d01      	cmp	r5, #1
 800bf04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf08:	707b      	strb	r3, [r7, #1]
 800bf0a:	d073      	beq.n	800bff4 <ucdr_serialize_endian_double+0x14c>
 800bf0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bf10:	70bb      	strb	r3, [r7, #2]
 800bf12:	2d02      	cmp	r5, #2
 800bf14:	d072      	beq.n	800bffc <ucdr_serialize_endian_double+0x154>
 800bf16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bf1a:	70fb      	strb	r3, [r7, #3]
 800bf1c:	2d03      	cmp	r5, #3
 800bf1e:	d071      	beq.n	800c004 <ucdr_serialize_endian_double+0x15c>
 800bf20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bf24:	713b      	strb	r3, [r7, #4]
 800bf26:	2d04      	cmp	r5, #4
 800bf28:	d070      	beq.n	800c00c <ucdr_serialize_endian_double+0x164>
 800bf2a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bf2e:	717b      	strb	r3, [r7, #5]
 800bf30:	2d05      	cmp	r5, #5
 800bf32:	d06f      	beq.n	800c014 <ucdr_serialize_endian_double+0x16c>
 800bf34:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bf38:	71bb      	strb	r3, [r7, #6]
 800bf3a:	2d06      	cmp	r5, #6
 800bf3c:	d06e      	beq.n	800c01c <ucdr_serialize_endian_double+0x174>
 800bf3e:	3707      	adds	r7, #7
 800bf40:	f89d 3000 	ldrb.w	r3, [sp]
 800bf44:	703b      	strb	r3, [r7, #0]
 800bf46:	6923      	ldr	r3, [r4, #16]
 800bf48:	68a2      	ldr	r2, [r4, #8]
 800bf4a:	7da0      	ldrb	r0, [r4, #22]
 800bf4c:	3308      	adds	r3, #8
 800bf4e:	444a      	add	r2, r9
 800bf50:	1b5b      	subs	r3, r3, r5
 800bf52:	2108      	movs	r1, #8
 800bf54:	f080 0001 	eor.w	r0, r0, #1
 800bf58:	60a2      	str	r2, [r4, #8]
 800bf5a:	6123      	str	r3, [r4, #16]
 800bf5c:	7561      	strb	r1, [r4, #21]
 800bf5e:	b003      	add	sp, #12
 800bf60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf64:	2108      	movs	r1, #8
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7fc fe94 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800bf6c:	b348      	cbz	r0, 800bfc2 <ucdr_serialize_endian_double+0x11a>
 800bf6e:	2e01      	cmp	r6, #1
 800bf70:	68a3      	ldr	r3, [r4, #8]
 800bf72:	d02c      	beq.n	800bfce <ucdr_serialize_endian_double+0x126>
 800bf74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf80:	705a      	strb	r2, [r3, #1]
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf88:	709a      	strb	r2, [r3, #2]
 800bf8a:	68a3      	ldr	r3, [r4, #8]
 800bf8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf90:	70da      	strb	r2, [r3, #3]
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf98:	711a      	strb	r2, [r3, #4]
 800bf9a:	68a3      	ldr	r3, [r4, #8]
 800bf9c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bfa0:	715a      	strb	r2, [r3, #5]
 800bfa2:	68a3      	ldr	r3, [r4, #8]
 800bfa4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bfa8:	719a      	strb	r2, [r3, #6]
 800bfaa:	68a3      	ldr	r3, [r4, #8]
 800bfac:	f89d 2000 	ldrb.w	r2, [sp]
 800bfb0:	71da      	strb	r2, [r3, #7]
 800bfb2:	68a2      	ldr	r2, [r4, #8]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	3208      	adds	r2, #8
 800bfb8:	3308      	adds	r3, #8
 800bfba:	2108      	movs	r1, #8
 800bfbc:	60a2      	str	r2, [r4, #8]
 800bfbe:	6123      	str	r3, [r4, #16]
 800bfc0:	7561      	strb	r1, [r4, #21]
 800bfc2:	7da0      	ldrb	r0, [r4, #22]
 800bfc4:	f080 0001 	eor.w	r0, r0, #1
 800bfc8:	b003      	add	sp, #12
 800bfca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfd2:	6019      	str	r1, [r3, #0]
 800bfd4:	605a      	str	r2, [r3, #4]
 800bfd6:	e7ec      	b.n	800bfb2 <ucdr_serialize_endian_double+0x10a>
 800bfd8:	68a2      	ldr	r2, [r4, #8]
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	7da0      	ldrb	r0, [r4, #22]
 800bfde:	f884 8015 	strb.w	r8, [r4, #21]
 800bfe2:	1b52      	subs	r2, r2, r5
 800bfe4:	1b5b      	subs	r3, r3, r5
 800bfe6:	f080 0001 	eor.w	r0, r0, #1
 800bfea:	60a2      	str	r2, [r4, #8]
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	b003      	add	sp, #12
 800bff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bff4:	68a3      	ldr	r3, [r4, #8]
 800bff6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	68a3      	ldr	r3, [r4, #8]
 800bffe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	68a3      	ldr	r3, [r4, #8]
 800c006:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	68a3      	ldr	r3, [r4, #8]
 800c016:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c01a:	701a      	strb	r2, [r3, #0]
 800c01c:	68a7      	ldr	r7, [r4, #8]
 800c01e:	e78f      	b.n	800bf40 <ucdr_serialize_endian_double+0x98>
 800c020:	466e      	mov	r6, sp
 800c022:	462a      	mov	r2, r5
 800c024:	4631      	mov	r1, r6
 800c026:	4638      	mov	r0, r7
 800c028:	f007 f977 	bl	801331a <memcpy>
 800c02c:	68a0      	ldr	r0, [r4, #8]
 800c02e:	464a      	mov	r2, r9
 800c030:	1971      	adds	r1, r6, r5
 800c032:	f007 f972 	bl	801331a <memcpy>
 800c036:	e786      	b.n	800bf46 <ucdr_serialize_endian_double+0x9e>

0800c038 <ucdr_deserialize_endian_double>:
 800c038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c03c:	460f      	mov	r7, r1
 800c03e:	2108      	movs	r1, #8
 800c040:	4604      	mov	r4, r0
 800c042:	4615      	mov	r5, r2
 800c044:	f7fc fe7a 	bl	8008d3c <ucdr_buffer_alignment>
 800c048:	4601      	mov	r1, r0
 800c04a:	4620      	mov	r0, r4
 800c04c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c050:	f7fc feb8 	bl	8008dc4 <ucdr_advance_buffer>
 800c054:	2108      	movs	r1, #8
 800c056:	4620      	mov	r0, r4
 800c058:	f7fc fe10 	bl	8008c7c <ucdr_check_buffer_available_for>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d14f      	bne.n	800c100 <ucdr_deserialize_endian_double+0xc8>
 800c060:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c064:	4546      	cmp	r6, r8
 800c066:	d946      	bls.n	800c0f6 <ucdr_deserialize_endian_double+0xbe>
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	60a6      	str	r6, [r4, #8]
 800c06c:	eba6 0608 	sub.w	r6, r6, r8
 800c070:	4433      	add	r3, r6
 800c072:	f1c6 0a08 	rsb	sl, r6, #8
 800c076:	6123      	str	r3, [r4, #16]
 800c078:	4651      	mov	r1, sl
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7fc fe0a 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800c080:	2800      	cmp	r0, #0
 800c082:	d069      	beq.n	800c158 <ucdr_deserialize_endian_double+0x120>
 800c084:	2f01      	cmp	r7, #1
 800c086:	f000 808b 	beq.w	800c1a0 <ucdr_deserialize_endian_double+0x168>
 800c08a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c08e:	702b      	strb	r3, [r5, #0]
 800c090:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c094:	706b      	strb	r3, [r5, #1]
 800c096:	2e01      	cmp	r6, #1
 800c098:	d06b      	beq.n	800c172 <ucdr_deserialize_endian_double+0x13a>
 800c09a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c09e:	70ab      	strb	r3, [r5, #2]
 800c0a0:	2e02      	cmp	r6, #2
 800c0a2:	f000 808e 	beq.w	800c1c2 <ucdr_deserialize_endian_double+0x18a>
 800c0a6:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c0aa:	70eb      	strb	r3, [r5, #3]
 800c0ac:	2e03      	cmp	r6, #3
 800c0ae:	f000 8086 	beq.w	800c1be <ucdr_deserialize_endian_double+0x186>
 800c0b2:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c0b6:	712b      	strb	r3, [r5, #4]
 800c0b8:	2e04      	cmp	r6, #4
 800c0ba:	d07e      	beq.n	800c1ba <ucdr_deserialize_endian_double+0x182>
 800c0bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c0c0:	716b      	strb	r3, [r5, #5]
 800c0c2:	2e05      	cmp	r6, #5
 800c0c4:	d077      	beq.n	800c1b6 <ucdr_deserialize_endian_double+0x17e>
 800c0c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c0ca:	71ab      	strb	r3, [r5, #6]
 800c0cc:	2e06      	cmp	r6, #6
 800c0ce:	f105 0507 	add.w	r5, r5, #7
 800c0d2:	d062      	beq.n	800c19a <ucdr_deserialize_endian_double+0x162>
 800c0d4:	f898 3000 	ldrb.w	r3, [r8]
 800c0d8:	702b      	strb	r3, [r5, #0]
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	68a2      	ldr	r2, [r4, #8]
 800c0de:	7da0      	ldrb	r0, [r4, #22]
 800c0e0:	2108      	movs	r1, #8
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	4452      	add	r2, sl
 800c0e6:	1b9b      	subs	r3, r3, r6
 800c0e8:	7561      	strb	r1, [r4, #21]
 800c0ea:	60a2      	str	r2, [r4, #8]
 800c0ec:	6123      	str	r3, [r4, #16]
 800c0ee:	f080 0001 	eor.w	r0, r0, #1
 800c0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f6:	2108      	movs	r1, #8
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7fc fdcb 	bl	8008c94 <ucdr_check_final_buffer_behavior>
 800c0fe:	b308      	cbz	r0, 800c144 <ucdr_deserialize_endian_double+0x10c>
 800c100:	2f01      	cmp	r7, #1
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	d023      	beq.n	800c14e <ucdr_deserialize_endian_double+0x116>
 800c106:	79db      	ldrb	r3, [r3, #7]
 800c108:	702b      	strb	r3, [r5, #0]
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	799b      	ldrb	r3, [r3, #6]
 800c10e:	706b      	strb	r3, [r5, #1]
 800c110:	68a3      	ldr	r3, [r4, #8]
 800c112:	795b      	ldrb	r3, [r3, #5]
 800c114:	70ab      	strb	r3, [r5, #2]
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	791b      	ldrb	r3, [r3, #4]
 800c11a:	70eb      	strb	r3, [r5, #3]
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	78db      	ldrb	r3, [r3, #3]
 800c120:	712b      	strb	r3, [r5, #4]
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	789b      	ldrb	r3, [r3, #2]
 800c126:	716b      	strb	r3, [r5, #5]
 800c128:	68a3      	ldr	r3, [r4, #8]
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	71ab      	strb	r3, [r5, #6]
 800c12e:	68a3      	ldr	r3, [r4, #8]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	71eb      	strb	r3, [r5, #7]
 800c134:	68a2      	ldr	r2, [r4, #8]
 800c136:	6923      	ldr	r3, [r4, #16]
 800c138:	3208      	adds	r2, #8
 800c13a:	3308      	adds	r3, #8
 800c13c:	2108      	movs	r1, #8
 800c13e:	60a2      	str	r2, [r4, #8]
 800c140:	6123      	str	r3, [r4, #16]
 800c142:	7561      	strb	r1, [r4, #21]
 800c144:	7da0      	ldrb	r0, [r4, #22]
 800c146:	f080 0001 	eor.w	r0, r0, #1
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	606b      	str	r3, [r5, #4]
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	e7ed      	b.n	800c134 <ucdr_deserialize_endian_double+0xfc>
 800c158:	68a2      	ldr	r2, [r4, #8]
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	7da0      	ldrb	r0, [r4, #22]
 800c15e:	f884 9015 	strb.w	r9, [r4, #21]
 800c162:	1b92      	subs	r2, r2, r6
 800c164:	1b9b      	subs	r3, r3, r6
 800c166:	60a2      	str	r2, [r4, #8]
 800c168:	6123      	str	r3, [r4, #16]
 800c16a:	f080 0001 	eor.w	r0, r0, #1
 800c16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	795b      	ldrb	r3, [r3, #5]
 800c176:	70ab      	strb	r3, [r5, #2]
 800c178:	3503      	adds	r5, #3
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	791b      	ldrb	r3, [r3, #4]
 800c17e:	f805 3b01 	strb.w	r3, [r5], #1
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	78db      	ldrb	r3, [r3, #3]
 800c186:	f805 3b01 	strb.w	r3, [r5], #1
 800c18a:	68a3      	ldr	r3, [r4, #8]
 800c18c:	789b      	ldrb	r3, [r3, #2]
 800c18e:	f805 3b01 	strb.w	r3, [r5], #1
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	f805 3b01 	strb.w	r3, [r5], #1
 800c19a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c19e:	e799      	b.n	800c0d4 <ucdr_deserialize_endian_double+0x9c>
 800c1a0:	4641      	mov	r1, r8
 800c1a2:	4632      	mov	r2, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f007 f8b8 	bl	801331a <memcpy>
 800c1aa:	68a1      	ldr	r1, [r4, #8]
 800c1ac:	4652      	mov	r2, sl
 800c1ae:	19a8      	adds	r0, r5, r6
 800c1b0:	f007 f8b3 	bl	801331a <memcpy>
 800c1b4:	e791      	b.n	800c0da <ucdr_deserialize_endian_double+0xa2>
 800c1b6:	3506      	adds	r5, #6
 800c1b8:	e7eb      	b.n	800c192 <ucdr_deserialize_endian_double+0x15a>
 800c1ba:	3505      	adds	r5, #5
 800c1bc:	e7e5      	b.n	800c18a <ucdr_deserialize_endian_double+0x152>
 800c1be:	3504      	adds	r5, #4
 800c1c0:	e7df      	b.n	800c182 <ucdr_deserialize_endian_double+0x14a>
 800c1c2:	3503      	adds	r5, #3
 800c1c4:	e7d9      	b.n	800c17a <ucdr_deserialize_endian_double+0x142>
 800c1c6:	bf00      	nop

0800c1c8 <uxr_buffer_delete_entity>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	b08e      	sub	sp, #56	@ 0x38
 800c1ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	ab06      	add	r3, sp, #24
 800c1da:	4604      	mov	r4, r0
 800c1dc:	f001 fa2a 	bl	800d634 <uxr_prepare_stream_to_write_submessage>
 800c1e0:	b918      	cbnz	r0, 800c1ea <uxr_buffer_delete_entity+0x22>
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	b00e      	add	sp, #56	@ 0x38
 800c1e8:	bd10      	pop	{r4, pc}
 800c1ea:	9902      	ldr	r1, [sp, #8]
 800c1ec:	aa05      	add	r2, sp, #20
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f001 fb5a 	bl	800d8a8 <uxr_init_base_object_request>
 800c1f4:	a905      	add	r1, sp, #20
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	a806      	add	r0, sp, #24
 800c1fa:	f003 f8df 	bl	800f3bc <uxr_serialize_DELETE_Payload>
 800c1fe:	4620      	mov	r0, r4
 800c200:	b00e      	add	sp, #56	@ 0x38
 800c202:	bd10      	pop	{r4, pc}

0800c204 <uxr_common_create_entity>:
 800c204:	b510      	push	{r4, lr}
 800c206:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c20a:	b08c      	sub	sp, #48	@ 0x30
 800c20c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c210:	f1bc 0f01 	cmp.w	ip, #1
 800c214:	bf08      	it	eq
 800c216:	f003 0201 	andeq.w	r2, r3, #1
 800c21a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c21e:	bf18      	it	ne
 800c220:	2200      	movne	r2, #0
 800c222:	330e      	adds	r3, #14
 800c224:	441a      	add	r2, r3
 800c226:	2301      	movs	r3, #1
 800c228:	e9cd 3100 	strd	r3, r1, [sp]
 800c22c:	b292      	uxth	r2, r2
 800c22e:	9903      	ldr	r1, [sp, #12]
 800c230:	ab04      	add	r3, sp, #16
 800c232:	4604      	mov	r4, r0
 800c234:	f001 f9fe 	bl	800d634 <uxr_prepare_stream_to_write_submessage>
 800c238:	b918      	cbnz	r0, 800c242 <uxr_common_create_entity+0x3e>
 800c23a:	4604      	mov	r4, r0
 800c23c:	4620      	mov	r0, r4
 800c23e:	b00c      	add	sp, #48	@ 0x30
 800c240:	bd10      	pop	{r4, pc}
 800c242:	9902      	ldr	r1, [sp, #8]
 800c244:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c246:	4620      	mov	r0, r4
 800c248:	f001 fb2e 	bl	800d8a8 <uxr_init_base_object_request>
 800c24c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c24e:	4604      	mov	r4, r0
 800c250:	a804      	add	r0, sp, #16
 800c252:	f003 f811 	bl	800f278 <uxr_serialize_CREATE_Payload>
 800c256:	4620      	mov	r0, r4
 800c258:	b00c      	add	sp, #48	@ 0x30
 800c25a:	bd10      	pop	{r4, pc}

0800c25c <uxr_buffer_create_participant_bin>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c262:	ac11      	add	r4, sp, #68	@ 0x44
 800c264:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c268:	2303      	movs	r3, #3
 800c26a:	7223      	strb	r3, [r4, #8]
 800c26c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c26e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c272:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c276:	2201      	movs	r2, #1
 800c278:	2100      	movs	r1, #0
 800c27a:	4605      	mov	r5, r0
 800c27c:	7122      	strb	r2, [r4, #4]
 800c27e:	f88d 1014 	strb.w	r1, [sp, #20]
 800c282:	b1cb      	cbz	r3, 800c2b8 <uxr_buffer_create_participant_bin+0x5c>
 800c284:	f88d 201c 	strb.w	r2, [sp, #28]
 800c288:	9308      	str	r3, [sp, #32]
 800c28a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c28e:	a915      	add	r1, sp, #84	@ 0x54
 800c290:	a809      	add	r0, sp, #36	@ 0x24
 800c292:	f7fc fd47 	bl	8008d24 <ucdr_init_buffer>
 800c296:	a905      	add	r1, sp, #20
 800c298:	a809      	add	r0, sp, #36	@ 0x24
 800c29a:	f002 fce3 	bl	800ec64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2a0:	9600      	str	r6, [sp, #0]
 800c2a2:	9401      	str	r4, [sp, #4]
 800c2a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c2a8:	60e3      	str	r3, [r4, #12]
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	f7ff ffa9 	bl	800c204 <uxr_common_create_entity>
 800c2b2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	f88d 301c 	strb.w	r3, [sp, #28]
 800c2bc:	e7e5      	b.n	800c28a <uxr_buffer_create_participant_bin+0x2e>
 800c2be:	bf00      	nop

0800c2c0 <uxr_buffer_create_topic_bin>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	9105      	str	r1, [sp, #20]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	a997      	add	r1, sp, #604	@ 0x25c
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c2d4:	9204      	str	r2, [sp, #16]
 800c2d6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c2da:	f000 f99b 	bl	800c614 <uxr_object_id_to_raw>
 800c2de:	2303      	movs	r3, #3
 800c2e0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c2e4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c2e6:	9306      	str	r3, [sp, #24]
 800c2e8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c2f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	a917      	add	r1, sp, #92	@ 0x5c
 800c2fa:	a80b      	add	r0, sp, #44	@ 0x2c
 800c2fc:	f88d 301c 	strb.w	r3, [sp, #28]
 800c300:	f7fc fd10 	bl	8008d24 <ucdr_init_buffer>
 800c304:	a906      	add	r1, sp, #24
 800c306:	a80b      	add	r0, sp, #44	@ 0x2c
 800c308:	f002 fcce 	bl	800eca8 <uxr_serialize_OBJK_Topic_Binary>
 800c30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c30e:	9316      	str	r3, [sp, #88]	@ 0x58
 800c310:	ac13      	add	r4, sp, #76	@ 0x4c
 800c312:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c316:	9600      	str	r6, [sp, #0]
 800c318:	9401      	str	r4, [sp, #4]
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7ff ff71 	bl	800c204 <uxr_common_create_entity>
 800c322:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c326:	bd70      	pop	{r4, r5, r6, pc}

0800c328 <uxr_buffer_create_publisher_bin>:
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c32e:	4605      	mov	r5, r0
 800c330:	9105      	str	r1, [sp, #20]
 800c332:	4618      	mov	r0, r3
 800c334:	2603      	movs	r6, #3
 800c336:	a992      	add	r1, sp, #584	@ 0x248
 800c338:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c33c:	9204      	str	r2, [sp, #16]
 800c33e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c342:	f000 f967 	bl	800c614 <uxr_object_id_to_raw>
 800c346:	2300      	movs	r3, #0
 800c348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c34c:	a912      	add	r1, sp, #72	@ 0x48
 800c34e:	a806      	add	r0, sp, #24
 800c350:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c354:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c358:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c35c:	f7fc fce2 	bl	8008d24 <ucdr_init_buffer>
 800c360:	a993      	add	r1, sp, #588	@ 0x24c
 800c362:	a806      	add	r0, sp, #24
 800c364:	f002 fd56 	bl	800ee14 <uxr_serialize_OBJK_Publisher_Binary>
 800c368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c36a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c36c:	ac0e      	add	r4, sp, #56	@ 0x38
 800c36e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c372:	9700      	str	r7, [sp, #0]
 800c374:	9401      	str	r4, [sp, #4]
 800c376:	b29b      	uxth	r3, r3
 800c378:	4628      	mov	r0, r5
 800c37a:	f7ff ff43 	bl	800c204 <uxr_common_create_entity>
 800c37e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c384 <uxr_buffer_create_datawriter_bin>:
 800c384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c386:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c38a:	ac1d      	add	r4, sp, #116	@ 0x74
 800c38c:	9105      	str	r1, [sp, #20]
 800c38e:	4605      	mov	r5, r0
 800c390:	a9a1      	add	r1, sp, #644	@ 0x284
 800c392:	4618      	mov	r0, r3
 800c394:	2305      	movs	r3, #5
 800c396:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800c39a:	9204      	str	r2, [sp, #16]
 800c39c:	7123      	strb	r3, [r4, #4]
 800c39e:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800c3a2:	f000 f937 	bl	800c614 <uxr_object_id_to_raw>
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	a90e      	add	r1, sp, #56	@ 0x38
 800c3aa:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c3ac:	7223      	strb	r3, [r4, #8]
 800c3ae:	f000 f931 	bl	800c614 <uxr_object_id_to_raw>
 800c3b2:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800c3b6:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	3f00      	subs	r7, #0
 800c3be:	fab3 f383 	clz	r3, r3
 800c3c2:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800c3c6:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800c3ca:	bf18      	it	ne
 800c3cc:	2701      	movne	r7, #1
 800c3ce:	095b      	lsrs	r3, r3, #5
 800c3d0:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800c3d4:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800c3d8:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800c3e2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c3e6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800c3ea:	b919      	cbnz	r1, 800c3f4 <uxr_buffer_create_datawriter_bin+0x70>
 800c3ec:	f043 0302 	orr.w	r3, r3, #2
 800c3f0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c3f4:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800c3f8:	2a01      	cmp	r2, #1
 800c3fa:	d022      	beq.n	800c442 <uxr_buffer_create_datawriter_bin+0xbe>
 800c3fc:	2a03      	cmp	r2, #3
 800c3fe:	d01b      	beq.n	800c438 <uxr_buffer_create_datawriter_bin+0xb4>
 800c400:	b91a      	cbnz	r2, 800c40a <uxr_buffer_create_datawriter_bin+0x86>
 800c402:	f043 0308 	orr.w	r3, r3, #8
 800c406:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c40a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c40e:	a921      	add	r1, sp, #132	@ 0x84
 800c410:	a806      	add	r0, sp, #24
 800c412:	f7fc fc87 	bl	8008d24 <ucdr_init_buffer>
 800c416:	a90e      	add	r1, sp, #56	@ 0x38
 800c418:	a806      	add	r0, sp, #24
 800c41a:	f002 fd61 	bl	800eee0 <uxr_serialize_OBJK_DataWriter_Binary>
 800c41e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c420:	9600      	str	r6, [sp, #0]
 800c422:	9401      	str	r4, [sp, #4]
 800c424:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c428:	60e3      	str	r3, [r4, #12]
 800c42a:	4628      	mov	r0, r5
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	f7ff fee9 	bl	800c204 <uxr_common_create_entity>
 800c432:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c438:	f043 0320 	orr.w	r3, r3, #32
 800c43c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c440:	e7e3      	b.n	800c40a <uxr_buffer_create_datawriter_bin+0x86>
 800c442:	f043 0310 	orr.w	r3, r3, #16
 800c446:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c44a:	e7de      	b.n	800c40a <uxr_buffer_create_datawriter_bin+0x86>

0800c44c <get_custom_error>:
 800c44c:	4b01      	ldr	r3, [pc, #4]	@ (800c454 <get_custom_error+0x8>)
 800c44e:	7818      	ldrb	r0, [r3, #0]
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	20010a8e 	.word	0x20010a8e

0800c458 <recv_custom_msg>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	b089      	sub	sp, #36	@ 0x24
 800c45e:	4693      	mov	fp, r2
 800c460:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800c464:	9104      	str	r1, [sp, #16]
 800c466:	2100      	movs	r1, #0
 800c468:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	4604      	mov	r4, r0
 800c470:	f88d 101e 	strb.w	r1, [sp, #30]
 800c474:	b332      	cbz	r2, 800c4c4 <recv_custom_msg+0x6c>
 800c476:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800c47a:	f10d 091f 	add.w	r9, sp, #31
 800c47e:	f10d 0814 	add.w	r8, sp, #20
 800c482:	f10d 071e 	add.w	r7, sp, #30
 800c486:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800c48a:	e004      	b.n	800c496 <recv_custom_msg+0x3e>
 800c48c:	9b05      	ldr	r3, [sp, #20]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	dd10      	ble.n	800c4b4 <recv_custom_msg+0x5c>
 800c492:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800c496:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c49a:	e9cd 6700 	strd	r6, r7, [sp]
 800c49e:	4623      	mov	r3, r4
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	f001 fc11 	bl	800dccc <uxr_read_framed_msg>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d0ee      	beq.n	800c48c <recv_custom_msg+0x34>
 800c4ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c4b2:	b1a3      	cbz	r3, 800c4de <recv_custom_msg+0x86>
 800c4b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f0 <recv_custom_msg+0x98>)
 800c4b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	2000      	movs	r0, #0
 800c4be:	b009      	add	sp, #36	@ 0x24
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	f10d 021f 	add.w	r2, sp, #31
 800c4c8:	9200      	str	r2, [sp, #0]
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4d0:	47a8      	blx	r5
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d0ee      	beq.n	800c4b4 <recv_custom_msg+0x5c>
 800c4d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1ea      	bne.n	800c4b4 <recv_custom_msg+0x5c>
 800c4de:	9b04      	ldr	r3, [sp, #16]
 800c4e0:	f8cb 0000 	str.w	r0, [fp]
 800c4e4:	2001      	movs	r0, #1
 800c4e6:	601c      	str	r4, [r3, #0]
 800c4e8:	b009      	add	sp, #36	@ 0x24
 800c4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20010a8e 	.word	0x20010a8e

0800c4f4 <send_custom_msg>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800c4fa:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800c4fe:	b086      	sub	sp, #24
 800c500:	4616      	mov	r6, r2
 800c502:	b965      	cbnz	r5, 800c51e <send_custom_msg+0x2a>
 800c504:	f10d 0317 	add.w	r3, sp, #23
 800c508:	47a0      	blx	r4
 800c50a:	b108      	cbz	r0, 800c510 <send_custom_msg+0x1c>
 800c50c:	42b0      	cmp	r0, r6
 800c50e:	d014      	beq.n	800c53a <send_custom_msg+0x46>
 800c510:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <send_custom_msg+0x4c>)
 800c512:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800c516:	701a      	strb	r2, [r3, #0]
 800c518:	2000      	movs	r0, #0
 800c51a:	b006      	add	sp, #24
 800c51c:	bd70      	pop	{r4, r5, r6, pc}
 800c51e:	f10d 0217 	add.w	r2, sp, #23
 800c522:	9202      	str	r2, [sp, #8]
 800c524:	2200      	movs	r2, #0
 800c526:	e9cd 6200 	strd	r6, r2, [sp]
 800c52a:	460b      	mov	r3, r1
 800c52c:	4602      	mov	r2, r0
 800c52e:	4621      	mov	r1, r4
 800c530:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800c534:	f001 f9ec 	bl	800d910 <uxr_write_framed_msg>
 800c538:	e7e7      	b.n	800c50a <send_custom_msg+0x16>
 800c53a:	2001      	movs	r0, #1
 800c53c:	b006      	add	sp, #24
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	20010a8e 	.word	0x20010a8e

0800c544 <uxr_set_custom_transport_callbacks>:
 800c544:	b410      	push	{r4}
 800c546:	9c01      	ldr	r4, [sp, #4]
 800c548:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800c54c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800c550:	9b02      	ldr	r3, [sp, #8]
 800c552:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800c556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c55a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800c55e:	4770      	bx	lr

0800c560 <uxr_init_custom_transport>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800c566:	b303      	cbz	r3, 800c5aa <uxr_init_custom_transport+0x4a>
 800c568:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800c56c:	4604      	mov	r4, r0
 800c56e:	b1e2      	cbz	r2, 800c5aa <uxr_init_custom_transport+0x4a>
 800c570:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800c574:	b1ca      	cbz	r2, 800c5aa <uxr_init_custom_transport+0x4a>
 800c576:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800c57a:	b1b2      	cbz	r2, 800c5aa <uxr_init_custom_transport+0x4a>
 800c57c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800c580:	4798      	blx	r3
 800c582:	4605      	mov	r5, r0
 800c584:	b188      	cbz	r0, 800c5aa <uxr_init_custom_transport+0x4a>
 800c586:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800c58a:	b98b      	cbnz	r3, 800c5b0 <uxr_init_custom_transport+0x50>
 800c58c:	490b      	ldr	r1, [pc, #44]	@ (800c5bc <uxr_init_custom_transport+0x5c>)
 800c58e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5c0 <uxr_init_custom_transport+0x60>)
 800c590:	4a0c      	ldr	r2, [pc, #48]	@ (800c5c4 <uxr_init_custom_transport+0x64>)
 800c592:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800c596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c59a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800c59e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800c5a2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	2500      	movs	r5, #0
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800c5b6:	f001 f9a5 	bl	800d904 <uxr_init_framing_io>
 800c5ba:	e7e7      	b.n	800c58c <uxr_init_custom_transport+0x2c>
 800c5bc:	0800c4f5 	.word	0x0800c4f5
 800c5c0:	0800c459 	.word	0x0800c459
 800c5c4:	0800c44d 	.word	0x0800c44d

0800c5c8 <uxr_close_custom_transport>:
 800c5c8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800c5cc:	4718      	bx	r3
 800c5ce:	bf00      	nop

0800c5d0 <uxr_object_id>:
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	f88d 1006 	strb.w	r1, [sp, #6]
 800c5d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c5dc:	f360 030f 	bfi	r3, r0, #0, #16
 800c5e0:	f362 431f 	bfi	r3, r2, #16, #16
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	b002      	add	sp, #8
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop

0800c5ec <uxr_object_id_from_raw>:
 800c5ec:	7843      	ldrb	r3, [r0, #1]
 800c5ee:	7801      	ldrb	r1, [r0, #0]
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	f003 020f 	and.w	r2, r3, #15
 800c5f6:	f88d 2006 	strb.w	r2, [sp, #6]
 800c5fa:	091b      	lsrs	r3, r3, #4
 800c5fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c600:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c604:	2000      	movs	r0, #0
 800c606:	f363 000f 	bfi	r0, r3, #0, #16
 800c60a:	f362 401f 	bfi	r0, r2, #16, #16
 800c60e:	b002      	add	sp, #8
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop

0800c614 <uxr_object_id_to_raw>:
 800c614:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c618:	b082      	sub	sp, #8
 800c61a:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800c61e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800c622:	700a      	strb	r2, [r1, #0]
 800c624:	704b      	strb	r3, [r1, #1]
 800c626:	b002      	add	sp, #8
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop

0800c62c <uxr_buffer_cancel_data>:
 800c62c:	b510      	push	{r4, lr}
 800c62e:	b094      	sub	sp, #80	@ 0x50
 800c630:	2300      	movs	r3, #0
 800c632:	9301      	str	r3, [sp, #4]
 800c634:	9205      	str	r2, [sp, #20]
 800c636:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f88d 301e 	strb.w	r3, [sp, #30]
 800c640:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800c644:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800c648:	2308      	movs	r3, #8
 800c64a:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	2210      	movs	r2, #16
 800c652:	ab0c      	add	r3, sp, #48	@ 0x30
 800c654:	4604      	mov	r4, r0
 800c656:	f000 ffed 	bl	800d634 <uxr_prepare_stream_to_write_submessage>
 800c65a:	b918      	cbnz	r0, 800c664 <uxr_buffer_cancel_data+0x38>
 800c65c:	4604      	mov	r4, r0
 800c65e:	4620      	mov	r0, r4
 800c660:	b014      	add	sp, #80	@ 0x50
 800c662:	bd10      	pop	{r4, pc}
 800c664:	9905      	ldr	r1, [sp, #20]
 800c666:	aa06      	add	r2, sp, #24
 800c668:	4620      	mov	r0, r4
 800c66a:	f001 f91d 	bl	800d8a8 <uxr_init_base_object_request>
 800c66e:	a906      	add	r1, sp, #24
 800c670:	4604      	mov	r4, r0
 800c672:	a80c      	add	r0, sp, #48	@ 0x30
 800c674:	f002 ff4c 	bl	800f510 <uxr_serialize_READ_DATA_Payload>
 800c678:	4620      	mov	r0, r4
 800c67a:	b014      	add	sp, #80	@ 0x50
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	bf00      	nop

0800c680 <read_submessage_format>:
 800c680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c684:	b095      	sub	sp, #84	@ 0x54
 800c686:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 800c68a:	b113      	cbz	r3, 800c692 <read_submessage_format+0x12>
 800c68c:	b015      	add	sp, #84	@ 0x54
 800c68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c692:	460c      	mov	r4, r1
 800c694:	4616      	mov	r6, r2
 800c696:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c69a:	461d      	mov	r5, r3
 800c69c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	1a52      	subs	r2, r2, r1
 800c6a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6a4:	9305      	str	r3, [sp, #20]
 800c6a6:	4680      	mov	r8, r0
 800c6a8:	a80c      	add	r0, sp, #48	@ 0x30
 800c6aa:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 800c6ae:	f7fc fb39 	bl	8008d24 <ucdr_init_buffer>
 800c6b2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c6b6:	a80c      	add	r0, sp, #48	@ 0x30
 800c6b8:	f7fc fb08 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 800c6bc:	69e3      	ldr	r3, [r4, #28]
 800c6be:	b35b      	cbz	r3, 800c718 <read_submessage_format+0x98>
 800c6c0:	f1b9 0f07 	cmp.w	r9, #7
 800c6c4:	751d      	strb	r5, [r3, #20]
 800c6c6:	d043      	beq.n	800c750 <read_submessage_format+0xd0>
 800c6c8:	f1b9 0f08 	cmp.w	r9, #8
 800c6cc:	d032      	beq.n	800c734 <read_submessage_format+0xb4>
 800c6ce:	f1b9 0f06 	cmp.w	r9, #6
 800c6d2:	d008      	beq.n	800c6e6 <read_submessage_format+0x66>
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	751a      	strb	r2, [r3, #20]
 800c6d8:	4631      	mov	r1, r6
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7fc fb72 	bl	8008dc4 <ucdr_advance_buffer>
 800c6e0:	b015      	add	sp, #84	@ 0x54
 800c6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800c6ea:	2d00      	cmp	r5, #0
 800c6ec:	d0f2      	beq.n	800c6d4 <read_submessage_format+0x54>
 800c6ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6f0:	e9cd 3600 	strd	r3, r6, [sp]
 800c6f4:	2306      	movs	r3, #6
 800c6f6:	f88d 3016 	strb.w	r3, [sp, #22]
 800c6fa:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 800c6fe:	9302      	str	r3, [sp, #8]
 800c700:	463a      	mov	r2, r7
 800c702:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800c706:	4640      	mov	r0, r8
 800c708:	47a8      	blx	r5
 800c70a:	69e3      	ldr	r3, [r4, #28]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1de      	bne.n	800c6d4 <read_submessage_format+0x54>
 800c716:	e7df      	b.n	800c6d8 <read_submessage_format+0x58>
 800c718:	f1b9 0f07 	cmp.w	r9, #7
 800c71c:	d032      	beq.n	800c784 <read_submessage_format+0x104>
 800c71e:	f1b9 0f08 	cmp.w	r9, #8
 800c722:	d02a      	beq.n	800c77a <read_submessage_format+0xfa>
 800c724:	f1b9 0f06 	cmp.w	r9, #6
 800c728:	d1d6      	bne.n	800c6d8 <read_submessage_format+0x58>
 800c72a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 800c72e:	2d00      	cmp	r5, #0
 800c730:	d1dd      	bne.n	800c6ee <read_submessage_format+0x6e>
 800c732:	e7d1      	b.n	800c6d8 <read_submessage_format+0x58>
 800c734:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 800c738:	2a00      	cmp	r2, #0
 800c73a:	d0cb      	beq.n	800c6d4 <read_submessage_format+0x54>
 800c73c:	a906      	add	r1, sp, #24
 800c73e:	a80c      	add	r0, sp, #48	@ 0x30
 800c740:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c742:	f002 ff93 	bl	800f66c <uxr_deserialize_SampleIdentity>
 800c746:	bb28      	cbnz	r0, 800c794 <read_submessage_format+0x114>
 800c748:	69e3      	ldr	r3, [r4, #28]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1c2      	bne.n	800c6d4 <read_submessage_format+0x54>
 800c74e:	e7c3      	b.n	800c6d8 <read_submessage_format+0x58>
 800c750:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 800c754:	b16a      	cbz	r2, 800c772 <read_submessage_format+0xf2>
 800c756:	a906      	add	r1, sp, #24
 800c758:	a80c      	add	r0, sp, #48	@ 0x30
 800c75a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c75c:	f002 fc8c 	bl	800f078 <uxr_deserialize_BaseObjectRequest>
 800c760:	2800      	cmp	r0, #0
 800c762:	d13a      	bne.n	800c7da <read_submessage_format+0x15a>
 800c764:	68a2      	ldr	r2, [r4, #8]
 800c766:	69e3      	ldr	r3, [r4, #28]
 800c768:	4432      	add	r2, r6
 800c76a:	60a2      	str	r2, [r4, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1b1      	bne.n	800c6d4 <read_submessage_format+0x54>
 800c770:	e7b2      	b.n	800c6d8 <read_submessage_format+0x58>
 800c772:	68a2      	ldr	r2, [r4, #8]
 800c774:	4432      	add	r2, r6
 800c776:	60a2      	str	r2, [r4, #8]
 800c778:	e7ac      	b.n	800c6d4 <read_submessage_format+0x54>
 800c77a:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1dc      	bne.n	800c73c <read_submessage_format+0xbc>
 800c782:	e7a9      	b.n	800c6d8 <read_submessage_format+0x58>
 800c784:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e4      	bne.n	800c756 <read_submessage_format+0xd6>
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	4433      	add	r3, r6
 800c790:	60a3      	str	r3, [r4, #8]
 800c792:	e7a1      	b.n	800c6d8 <read_submessage_format+0x58>
 800c794:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800c798:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c79a:	1a52      	subs	r2, r2, r1
 800c79c:	1aed      	subs	r5, r5, r3
 800c79e:	a80c      	add	r0, sp, #48	@ 0x30
 800c7a0:	f7fc fac0 	bl	8008d24 <ucdr_init_buffer>
 800c7a4:	4435      	add	r5, r6
 800c7a6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c7aa:	a80c      	add	r0, sp, #48	@ 0x30
 800c7ac:	f7fc fa8e 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 800c7b0:	b2ad      	uxth	r5, r5
 800c7b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	9501      	str	r5, [sp, #4]
 800c7b8:	2108      	movs	r1, #8
 800c7ba:	f88d 1016 	strb.w	r1, [sp, #22]
 800c7be:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 800c7c2:	9102      	str	r1, [sp, #8]
 800c7c4:	ab06      	add	r3, sp, #24
 800c7c6:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 800c7ca:	9905      	ldr	r1, [sp, #20]
 800c7cc:	463a      	mov	r2, r7
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	47a8      	blx	r5
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800c7d8:	e7b6      	b.n	800c748 <read_submessage_format+0xc8>
 800c7da:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800c7de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7e0:	1a52      	subs	r2, r2, r1
 800c7e2:	1aed      	subs	r5, r5, r3
 800c7e4:	a80c      	add	r0, sp, #48	@ 0x30
 800c7e6:	f7fc fa9d 	bl	8008d24 <ucdr_init_buffer>
 800c7ea:	4435      	add	r5, r6
 800c7ec:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800c7f0:	a80c      	add	r0, sp, #48	@ 0x30
 800c7f2:	f7fc fa6b 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 800c7f6:	b2ad      	uxth	r5, r5
 800c7f8:	ab0c      	add	r3, sp, #48	@ 0x30
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	9501      	str	r5, [sp, #4]
 800c7fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800c802:	2107      	movs	r1, #7
 800c804:	f88d 1016 	strb.w	r1, [sp, #22]
 800c808:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 800c80c:	9102      	str	r1, [sp, #8]
 800c80e:	ba5b      	rev16	r3, r3
 800c810:	b29b      	uxth	r3, r3
 800c812:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 800c816:	9905      	ldr	r1, [sp, #20]
 800c818:	463a      	mov	r2, r7
 800c81a:	4640      	mov	r0, r8
 800c81c:	47a8      	blx	r5
 800c81e:	2301      	movs	r3, #1
 800c820:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 800c824:	e79e      	b.n	800c764 <read_submessage_format+0xe4>
 800c826:	bf00      	nop

0800c828 <on_get_fragmentation_info>:
 800c828:	b500      	push	{lr}
 800c82a:	b08b      	sub	sp, #44	@ 0x2c
 800c82c:	4601      	mov	r1, r0
 800c82e:	2204      	movs	r2, #4
 800c830:	a802      	add	r0, sp, #8
 800c832:	f7fc fa77 	bl	8008d24 <ucdr_init_buffer>
 800c836:	f10d 0305 	add.w	r3, sp, #5
 800c83a:	f10d 0206 	add.w	r2, sp, #6
 800c83e:	a901      	add	r1, sp, #4
 800c840:	a802      	add	r0, sp, #8
 800c842:	f001 fdfb 	bl	800e43c <uxr_read_submessage_header>
 800c846:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c84a:	2b0d      	cmp	r3, #13
 800c84c:	d003      	beq.n	800c856 <on_get_fragmentation_info+0x2e>
 800c84e:	2000      	movs	r0, #0
 800c850:	b00b      	add	sp, #44	@ 0x2c
 800c852:	f85d fb04 	ldr.w	pc, [sp], #4
 800c856:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c85a:	f013 0f02 	tst.w	r3, #2
 800c85e:	bf0c      	ite	eq
 800c860:	2001      	moveq	r0, #1
 800c862:	2002      	movne	r0, #2
 800c864:	b00b      	add	sp, #44	@ 0x2c
 800c866:	f85d fb04 	ldr.w	pc, [sp], #4
 800c86a:	bf00      	nop

0800c86c <read_submessage_get_info>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	2500      	movs	r5, #0
 800c870:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800c874:	4604      	mov	r4, r0
 800c876:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800c87a:	460e      	mov	r6, r1
 800c87c:	a810      	add	r0, sp, #64	@ 0x40
 800c87e:	4629      	mov	r1, r5
 800c880:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c884:	f006 fc18 	bl	80130b8 <memset>
 800c888:	a903      	add	r1, sp, #12
 800c88a:	4630      	mov	r0, r6
 800c88c:	f002 fd82 	bl	800f394 <uxr_deserialize_GET_INFO_Payload>
 800c890:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c894:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c898:	4620      	mov	r0, r4
 800c89a:	f000 fffd 	bl	800d898 <uxr_session_header_offset>
 800c89e:	462b      	mov	r3, r5
 800c8a0:	9000      	str	r0, [sp, #0]
 800c8a2:	220c      	movs	r2, #12
 800c8a4:	a905      	add	r1, sp, #20
 800c8a6:	a808      	add	r0, sp, #32
 800c8a8:	f7fc fa2a 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800c8ac:	a910      	add	r1, sp, #64	@ 0x40
 800c8ae:	a808      	add	r0, sp, #32
 800c8b0:	f002 fde2 	bl	800f478 <uxr_serialize_INFO_Payload>
 800c8b4:	9b08      	ldr	r3, [sp, #32]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	f000 ff98 	bl	800d7f0 <uxr_stamp_session_header>
 800c8c0:	a808      	add	r0, sp, #32
 800c8c2:	f7fc fa5b 	bl	8008d7c <ucdr_buffer_length>
 800c8c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	a905      	add	r1, sp, #20
 800c8cc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c8d0:	47a0      	blx	r4
 800c8d2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}

0800c8d8 <write_submessage_acknack.isra.0>:
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	b092      	sub	sp, #72	@ 0x48
 800c8dc:	4605      	mov	r5, r0
 800c8de:	460e      	mov	r6, r1
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	f000 ffd9 	bl	800d898 <uxr_session_header_offset>
 800c8e6:	a905      	add	r1, sp, #20
 800c8e8:	9000      	str	r0, [sp, #0]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	a80a      	add	r0, sp, #40	@ 0x28
 800c8ee:	2211      	movs	r2, #17
 800c8f0:	f7fc fa06 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800c8f4:	2318      	movs	r3, #24
 800c8f6:	fb03 5404 	mla	r4, r3, r4, r5
 800c8fa:	2205      	movs	r2, #5
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	3450      	adds	r4, #80	@ 0x50
 800c900:	210a      	movs	r1, #10
 800c902:	a80a      	add	r0, sp, #40	@ 0x28
 800c904:	f001 fd80 	bl	800e408 <uxr_buffer_submessage_header>
 800c908:	a903      	add	r1, sp, #12
 800c90a:	4620      	mov	r0, r4
 800c90c:	f004 fdda 	bl	80114c4 <uxr_compute_acknack>
 800c910:	ba40      	rev16	r0, r0
 800c912:	f8ad 000e 	strh.w	r0, [sp, #14]
 800c916:	a903      	add	r1, sp, #12
 800c918:	a80a      	add	r0, sp, #40	@ 0x28
 800c91a:	f88d 6010 	strb.w	r6, [sp, #16]
 800c91e:	f002 fe1b 	bl	800f558 <uxr_serialize_ACKNACK_Payload>
 800c922:	2200      	movs	r2, #0
 800c924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c926:	4611      	mov	r1, r2
 800c928:	4628      	mov	r0, r5
 800c92a:	f000 ff61 	bl	800d7f0 <uxr_stamp_session_header>
 800c92e:	a80a      	add	r0, sp, #40	@ 0x28
 800c930:	f7fc fa24 	bl	8008d7c <ucdr_buffer_length>
 800c934:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c936:	4602      	mov	r2, r0
 800c938:	a905      	add	r1, sp, #20
 800c93a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c93e:	47a0      	blx	r4
 800c940:	b012      	add	sp, #72	@ 0x48
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	0000      	movs	r0, r0
	...

0800c948 <uxr_init_session>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c980 <uxr_init_session+0x38>
 800c94e:	2300      	movs	r3, #0
 800c950:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800c954:	4604      	mov	r4, r0
 800c956:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800c95a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800c95e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800c962:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800c966:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800c96a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800c96e:	2181      	movs	r1, #129	@ 0x81
 800c970:	f000 fea2 	bl	800d6b8 <uxr_init_session_info>
 800c974:	f104 0008 	add.w	r0, r4, #8
 800c978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c97c:	f001 bc60 	b.w	800e240 <uxr_init_stream_storage>
	...

0800c988 <uxr_set_status_callback>:
 800c988:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop

0800c990 <uxr_set_topic_callback>:
 800c990:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop

0800c998 <uxr_set_request_callback>:
 800c998:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop

0800c9a0 <uxr_set_reply_callback>:
 800c9a0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop

0800c9a8 <uxr_create_output_best_effort_stream>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	4616      	mov	r6, r2
 800c9b2:	f000 ff71 	bl	800d898 <uxr_session_header_offset>
 800c9b6:	4632      	mov	r2, r6
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	f104 0008 	add.w	r0, r4, #8
 800c9c0:	b002      	add	sp, #8
 800c9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9c6:	f001 bc85 	b.w	800e2d4 <uxr_add_output_best_effort_buffer>
 800c9ca:	bf00      	nop

0800c9cc <uxr_create_output_reliable_stream>:
 800c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	460d      	mov	r5, r1
 800c9d4:	4616      	mov	r6, r2
 800c9d6:	461f      	mov	r7, r3
 800c9d8:	f000 ff5e 	bl	800d898 <uxr_session_header_offset>
 800c9dc:	463b      	mov	r3, r7
 800c9de:	9000      	str	r0, [sp, #0]
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	f104 0008 	add.w	r0, r4, #8
 800c9e8:	f001 fc88 	bl	800e2fc <uxr_add_output_reliable_buffer>
 800c9ec:	b005      	add	sp, #20
 800c9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9f0 <uxr_create_input_best_effort_stream>:
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	3008      	adds	r0, #8
 800c9f4:	b002      	add	sp, #8
 800c9f6:	f001 bc9b 	b.w	800e330 <uxr_add_input_best_effort_buffer>
 800c9fa:	bf00      	nop

0800c9fc <uxr_create_input_reliable_stream>:
 800c9fc:	b510      	push	{r4, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	4c03      	ldr	r4, [pc, #12]	@ (800ca10 <uxr_create_input_reliable_stream+0x14>)
 800ca02:	9400      	str	r4, [sp, #0]
 800ca04:	3008      	adds	r0, #8
 800ca06:	f001 fca9 	bl	800e35c <uxr_add_input_reliable_buffer>
 800ca0a:	b004      	add	sp, #16
 800ca0c:	bd10      	pop	{r4, pc}
 800ca0e:	bf00      	nop
 800ca10:	0800c829 	.word	0x0800c829

0800ca14 <uxr_epoch_nanos>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4604      	mov	r4, r0
 800ca18:	f001 fd56 	bl	800e4c8 <uxr_nanos>
 800ca1c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ca20:	1ac0      	subs	r0, r0, r3
 800ca22:	eb61 0102 	sbc.w	r1, r1, r2
 800ca26:	bd10      	pop	{r4, pc}

0800ca28 <uxr_flash_output_streams>:
 800ca28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2c:	7e03      	ldrb	r3, [r0, #24]
 800ca2e:	b084      	sub	sp, #16
 800ca30:	4604      	mov	r4, r0
 800ca32:	b373      	cbz	r3, 800ca92 <uxr_flash_output_streams+0x6a>
 800ca34:	2500      	movs	r5, #0
 800ca36:	f100 0908 	add.w	r9, r0, #8
 800ca3a:	f10d 0802 	add.w	r8, sp, #2
 800ca3e:	4628      	mov	r0, r5
 800ca40:	af03      	add	r7, sp, #12
 800ca42:	ae02      	add	r6, sp, #8
 800ca44:	e006      	b.n	800ca54 <uxr_flash_output_streams+0x2c>
 800ca46:	7e23      	ldrb	r3, [r4, #24]
 800ca48:	3501      	adds	r5, #1
 800ca4a:	b2e8      	uxtb	r0, r5
 800ca4c:	4283      	cmp	r3, r0
 800ca4e:	f109 0910 	add.w	r9, r9, #16
 800ca52:	d91e      	bls.n	800ca92 <uxr_flash_output_streams+0x6a>
 800ca54:	2201      	movs	r2, #1
 800ca56:	4611      	mov	r1, r2
 800ca58:	f001 fbba 	bl	800e1d0 <uxr_stream_id>
 800ca5c:	4643      	mov	r3, r8
 800ca5e:	4684      	mov	ip, r0
 800ca60:	463a      	mov	r2, r7
 800ca62:	4631      	mov	r1, r6
 800ca64:	4648      	mov	r0, r9
 800ca66:	f8cd c004 	str.w	ip, [sp, #4]
 800ca6a:	f004 fdaf 	bl	80115cc <uxr_prepare_best_effort_buffer_to_send>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d0e9      	beq.n	800ca46 <uxr_flash_output_streams+0x1e>
 800ca72:	9b02      	ldr	r3, [sp, #8]
 800ca74:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ca78:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 feb7 	bl	800d7f0 <uxr_stamp_session_header>
 800ca82:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ca84:	9a03      	ldr	r2, [sp, #12]
 800ca86:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ca8a:	9902      	ldr	r1, [sp, #8]
 800ca8c:	6818      	ldr	r0, [r3, #0]
 800ca8e:	47d0      	blx	sl
 800ca90:	e7d9      	b.n	800ca46 <uxr_flash_output_streams+0x1e>
 800ca92:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ca96:	b37b      	cbz	r3, 800caf8 <uxr_flash_output_streams+0xd0>
 800ca98:	f04f 0900 	mov.w	r9, #0
 800ca9c:	f104 0520 	add.w	r5, r4, #32
 800caa0:	f10d 0802 	add.w	r8, sp, #2
 800caa4:	af03      	add	r7, sp, #12
 800caa6:	ae02      	add	r6, sp, #8
 800caa8:	4648      	mov	r0, r9
 800caaa:	2201      	movs	r2, #1
 800caac:	2102      	movs	r1, #2
 800caae:	f001 fb8f 	bl	800e1d0 <uxr_stream_id>
 800cab2:	9001      	str	r0, [sp, #4]
 800cab4:	e00e      	b.n	800cad4 <uxr_flash_output_streams+0xac>
 800cab6:	9b02      	ldr	r3, [sp, #8]
 800cab8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cabc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cac0:	4620      	mov	r0, r4
 800cac2:	f000 fe95 	bl	800d7f0 <uxr_stamp_session_header>
 800cac6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cac8:	9a03      	ldr	r2, [sp, #12]
 800caca:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cace:	9902      	ldr	r1, [sp, #8]
 800cad0:	6818      	ldr	r0, [r3, #0]
 800cad2:	47d0      	blx	sl
 800cad4:	4643      	mov	r3, r8
 800cad6:	463a      	mov	r2, r7
 800cad8:	4631      	mov	r1, r6
 800cada:	4628      	mov	r0, r5
 800cadc:	f004 ff8a 	bl	80119f4 <uxr_prepare_next_reliable_buffer_to_send>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d1e8      	bne.n	800cab6 <uxr_flash_output_streams+0x8e>
 800cae4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cae8:	f109 0901 	add.w	r9, r9, #1
 800caec:	fa5f f089 	uxtb.w	r0, r9
 800caf0:	4283      	cmp	r3, r0
 800caf2:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800caf6:	d8d8      	bhi.n	800caaa <uxr_flash_output_streams+0x82>
 800caf8:	b004      	add	sp, #16
 800cafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafe:	bf00      	nop

0800cb00 <read_submessage_info>:
 800cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb04:	460d      	mov	r5, r1
 800cb06:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cb0a:	4669      	mov	r1, sp
 800cb0c:	4607      	mov	r7, r0
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f002 fb50 	bl	800f1b4 <uxr_deserialize_BaseObjectReply>
 800cb14:	a902      	add	r1, sp, #8
 800cb16:	4604      	mov	r4, r0
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cb1e:	f7fe fa55 	bl	800afcc <ucdr_deserialize_bool>
 800cb22:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cb26:	4004      	ands	r4, r0
 800cb28:	b2e4      	uxtb	r4, r4
 800cb2a:	b95b      	cbnz	r3, 800cb44 <read_submessage_info+0x44>
 800cb2c:	a987      	add	r1, sp, #540	@ 0x21c
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f7fe fa4c 	bl	800afcc <ucdr_deserialize_bool>
 800cb34:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cb38:	4606      	mov	r6, r0
 800cb3a:	b94b      	cbnz	r3, 800cb50 <read_submessage_info+0x50>
 800cb3c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb44:	a903      	add	r1, sp, #12
 800cb46:	4628      	mov	r0, r5
 800cb48:	f002 f9f6 	bl	800ef38 <uxr_deserialize_ObjectVariant>
 800cb4c:	4004      	ands	r4, r0
 800cb4e:	e7ed      	b.n	800cb2c <read_submessage_info+0x2c>
 800cb50:	a988      	add	r1, sp, #544	@ 0x220
 800cb52:	4628      	mov	r0, r5
 800cb54:	f7fe fa68 	bl	800b028 <ucdr_deserialize_uint8_t>
 800cb58:	4234      	tst	r4, r6
 800cb5a:	d0ef      	beq.n	800cb3c <read_submessage_info+0x3c>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d0ed      	beq.n	800cb3c <read_submessage_info+0x3c>
 800cb60:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cb64:	2b0d      	cmp	r3, #13
 800cb66:	d1e9      	bne.n	800cb3c <read_submessage_info+0x3c>
 800cb68:	a98a      	add	r1, sp, #552	@ 0x228
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7fe fff8 	bl	800bb60 <ucdr_deserialize_int16_t>
 800cb70:	b140      	cbz	r0, 800cb84 <read_submessage_info+0x84>
 800cb72:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	dd07      	ble.n	800cb8a <read_submessage_info+0x8a>
 800cb7a:	f1b8 0f00 	cmp.w	r8, #0
 800cb7e:	bf0c      	ite	eq
 800cb80:	2002      	moveq	r0, #2
 800cb82:	2001      	movne	r0, #1
 800cb84:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cb88:	e7d8      	b.n	800cb3c <read_submessage_info+0x3c>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e7fa      	b.n	800cb84 <read_submessage_info+0x84>
 800cb8e:	bf00      	nop

0800cb90 <read_submessage_list>:
 800cb90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb94:	b097      	sub	sp, #92	@ 0x5c
 800cb96:	4604      	mov	r4, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb9c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cba0:	aa0c      	add	r2, sp, #48	@ 0x30
 800cba2:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cba6:	4628      	mov	r0, r5
 800cba8:	f001 fc48 	bl	800e43c <uxr_read_submessage_header>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f000 812c 	beq.w	800ce0a <read_submessage_list+0x27a>
 800cbb2:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800cbb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbb8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800cbbc:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800cbc0:	3902      	subs	r1, #2
 800cbc2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cbc6:	290d      	cmp	r1, #13
 800cbc8:	d8e8      	bhi.n	800cb9c <read_submessage_list+0xc>
 800cbca:	a201      	add	r2, pc, #4	@ (adr r2, 800cbd0 <read_submessage_list+0x40>)
 800cbcc:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800cbd0:	0800ce01 	.word	0x0800ce01
 800cbd4:	0800cb9d 	.word	0x0800cb9d
 800cbd8:	0800cdf1 	.word	0x0800cdf1
 800cbdc:	0800cd93 	.word	0x0800cd93
 800cbe0:	0800cd89 	.word	0x0800cd89
 800cbe4:	0800cb9d 	.word	0x0800cb9d
 800cbe8:	0800cb9d 	.word	0x0800cb9d
 800cbec:	0800cd0d 	.word	0x0800cd0d
 800cbf0:	0800cca5 	.word	0x0800cca5
 800cbf4:	0800cc65 	.word	0x0800cc65
 800cbf8:	0800cb9d 	.word	0x0800cb9d
 800cbfc:	0800cb9d 	.word	0x0800cb9d
 800cc00:	0800cb9d 	.word	0x0800cb9d
 800cc04:	0800cc09 	.word	0x0800cc09
 800cc08:	a910      	add	r1, sp, #64	@ 0x40
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f002 fd02 	bl	800f614 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800cc10:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800cc14:	2e00      	cmp	r6, #0
 800cc16:	f000 8100 	beq.w	800ce1a <read_submessage_list+0x28a>
 800cc1a:	f001 fc55 	bl	800e4c8 <uxr_nanos>
 800cc1e:	f04f 0800 	mov.w	r8, #0
 800cc22:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800cc2a:	4990      	ldr	r1, [pc, #576]	@ (800ce6c <read_submessage_list+0x2dc>)
 800cc2c:	46c4      	mov	ip, r8
 800cc2e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800cc32:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800cc36:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800cc38:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800cc3a:	46c6      	mov	lr, r8
 800cc3c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800cc40:	46bc      	mov	ip, r7
 800cc42:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800cc46:	fbc0 7801 	smlal	r7, r8, r0, r1
 800cc4a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800cc4e:	e9cd 7800 	strd	r7, r8, [sp]
 800cc52:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800cc56:	9106      	str	r1, [sp, #24]
 800cc58:	4620      	mov	r0, r4
 800cc5a:	47b0      	blx	r6
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800cc62:	e79b      	b.n	800cb9c <read_submessage_list+0xc>
 800cc64:	a910      	add	r1, sp, #64	@ 0x40
 800cc66:	4628      	mov	r0, r5
 800cc68:	f002 fcb4 	bl	800f5d4 <uxr_deserialize_HEARTBEAT_Payload>
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800cc72:	f001 fac9 	bl	800e208 <uxr_stream_id_from_raw>
 800cc76:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800cc7a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	f104 0008 	add.w	r0, r4, #8
 800cc82:	f001 fba1 	bl	800e3c8 <uxr_get_input_reliable_stream>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d088      	beq.n	800cb9c <read_submessage_list+0xc>
 800cc8a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800cc8e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800cc92:	f004 fc0b 	bl	80114ac <uxr_process_heartbeat>
 800cc96:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800cc9a:	4632      	mov	r2, r6
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7ff fe1b 	bl	800c8d8 <write_submessage_acknack.isra.0>
 800cca2:	e77b      	b.n	800cb9c <read_submessage_list+0xc>
 800cca4:	a910      	add	r1, sp, #64	@ 0x40
 800cca6:	4628      	mov	r0, r5
 800cca8:	f002 fc6c 	bl	800f584 <uxr_deserialize_ACKNACK_Payload>
 800ccac:	2100      	movs	r1, #0
 800ccae:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ccb2:	f001 faa9 	bl	800e208 <uxr_stream_id_from_raw>
 800ccb6:	900d      	str	r0, [sp, #52]	@ 0x34
 800ccb8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ccbc:	f104 0008 	add.w	r0, r4, #8
 800ccc0:	f001 fb6e 	bl	800e3a0 <uxr_get_output_reliable_stream>
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f43f af68 	beq.w	800cb9c <read_submessage_list+0xc>
 800cccc:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800ccd0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ccd4:	ba49      	rev16	r1, r1
 800ccd6:	b289      	uxth	r1, r1
 800ccd8:	f004 ff36 	bl	8011b48 <uxr_process_acknack>
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f004 fef7 	bl	8011ad0 <uxr_begin_output_nack_buffer_it>
 800cce2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cce6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ccea:	e005      	b.n	800ccf8 <read_submessage_list+0x168>
 800ccec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ccee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ccf0:	685f      	ldr	r7, [r3, #4]
 800ccf2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccf4:	6818      	ldr	r0, [r3, #0]
 800ccf6:	47b8      	blx	r7
 800ccf8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ccfc:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ccfe:	4641      	mov	r1, r8
 800cd00:	4630      	mov	r0, r6
 800cd02:	f004 fee7 	bl	8011ad4 <uxr_next_reliable_nack_buffer_to_send>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d1f0      	bne.n	800ccec <read_submessage_list+0x15c>
 800cd0a:	e747      	b.n	800cb9c <read_submessage_list+0xc>
 800cd0c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800cd10:	4641      	mov	r1, r8
 800cd12:	900d      	str	r0, [sp, #52]	@ 0x34
 800cd14:	4628      	mov	r0, r5
 800cd16:	f002 f9af 	bl	800f078 <uxr_deserialize_BaseObjectRequest>
 800cd1a:	3e04      	subs	r6, #4
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	a90f      	add	r1, sp, #60	@ 0x3c
 800cd20:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800cd24:	f000 fdde 	bl	800d8e4 <uxr_parse_base_object_request>
 800cd28:	fa1f f886 	uxth.w	r8, r6
 800cd2c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cd30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd32:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800cd36:	9110      	str	r1, [sp, #64]	@ 0x40
 800cd38:	f007 070e 	and.w	r7, r7, #14
 800cd3c:	b136      	cbz	r6, 800cd4c <read_submessage_list+0x1bc>
 800cd3e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	464a      	mov	r2, r9
 800cd46:	2300      	movs	r3, #0
 800cd48:	4620      	mov	r0, r4
 800cd4a:	47b0      	blx	r6
 800cd4c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800cd4e:	b16b      	cbz	r3, 800cd6c <read_submessage_list+0x1dc>
 800cd50:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cd52:	2100      	movs	r1, #0
 800cd54:	3802      	subs	r0, #2
 800cd56:	e002      	b.n	800cd5e <read_submessage_list+0x1ce>
 800cd58:	3101      	adds	r1, #1
 800cd5a:	428b      	cmp	r3, r1
 800cd5c:	d006      	beq.n	800cd6c <read_submessage_list+0x1dc>
 800cd5e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cd62:	454e      	cmp	r6, r9
 800cd64:	d1f8      	bne.n	800cd58 <read_submessage_list+0x1c8>
 800cd66:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cd68:	2200      	movs	r2, #0
 800cd6a:	545a      	strb	r2, [r3, r1]
 800cd6c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800cd70:	9102      	str	r1, [sp, #8]
 800cd72:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd74:	9101      	str	r1, [sp, #4]
 800cd76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cd78:	9100      	str	r1, [sp, #0]
 800cd7a:	463b      	mov	r3, r7
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4620      	mov	r0, r4
 800cd82:	f7ff fc7d 	bl	800c680 <read_submessage_format>
 800cd86:	e709      	b.n	800cb9c <read_submessage_list+0xc>
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f7ff feb8 	bl	800cb00 <read_submessage_info>
 800cd90:	e704      	b.n	800cb9c <read_submessage_list+0xc>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d03c      	beq.n	800ce10 <read_submessage_list+0x280>
 800cd96:	a910      	add	r1, sp, #64	@ 0x40
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f002 fb4f 	bl	800f43c <uxr_deserialize_STATUS_Payload>
 800cd9e:	a90e      	add	r1, sp, #56	@ 0x38
 800cda0:	a810      	add	r0, sp, #64	@ 0x40
 800cda2:	aa0d      	add	r2, sp, #52	@ 0x34
 800cda4:	f000 fd9e 	bl	800d8e4 <uxr_parse_base_object_request>
 800cda8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800cdac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdae:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800cdb2:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800cdb6:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cdb8:	b136      	cbz	r6, 800cdc8 <read_submessage_list+0x238>
 800cdba:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	463a      	mov	r2, r7
 800cdc2:	4643      	mov	r3, r8
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	47b0      	blx	r6
 800cdc8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	f43f aee6 	beq.w	800cb9c <read_submessage_list+0xc>
 800cdd0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	3802      	subs	r0, #2
 800cdd6:	e003      	b.n	800cde0 <read_submessage_list+0x250>
 800cdd8:	3101      	adds	r1, #1
 800cdda:	4291      	cmp	r1, r2
 800cddc:	f43f aede 	beq.w	800cb9c <read_submessage_list+0xc>
 800cde0:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800cde4:	42be      	cmp	r6, r7
 800cde6:	d1f7      	bne.n	800cdd8 <read_submessage_list+0x248>
 800cde8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cdea:	f803 8001 	strb.w	r8, [r3, r1]
 800cdee:	e6d5      	b.n	800cb9c <read_submessage_list+0xc>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f aed3 	bne.w	800cb9c <read_submessage_list+0xc>
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f000 fcbb 	bl	800d774 <uxr_read_create_session_status>
 800cdfe:	e6cd      	b.n	800cb9c <read_submessage_list+0xc>
 800ce00:	4629      	mov	r1, r5
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff fd32 	bl	800c86c <read_submessage_get_info>
 800ce08:	e6c8      	b.n	800cb9c <read_submessage_list+0xc>
 800ce0a:	b017      	add	sp, #92	@ 0x5c
 800ce0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce10:	4629      	mov	r1, r5
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 fcbc 	bl	800d790 <uxr_read_delete_session_status>
 800ce18:	e6c0      	b.n	800cb9c <read_submessage_list+0xc>
 800ce1a:	f001 fb55 	bl	800e4c8 <uxr_nanos>
 800ce1e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800ce22:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800ce6c <read_submessage_list+0x2dc>
 800ce26:	4633      	mov	r3, r6
 800ce28:	fbc7 230c 	smlal	r2, r3, r7, ip
 800ce2c:	1810      	adds	r0, r2, r0
 800ce2e:	eb43 0301 	adc.w	r3, r3, r1
 800ce32:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800ce36:	46b6      	mov	lr, r6
 800ce38:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800ce3c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800ce40:	fbc1 760c 	smlal	r7, r6, r1, ip
 800ce44:	19d2      	adds	r2, r2, r7
 800ce46:	eb4e 0106 	adc.w	r1, lr, r6
 800ce4a:	1a80      	subs	r0, r0, r2
 800ce4c:	eb63 0301 	sbc.w	r3, r3, r1
 800ce50:	0fda      	lsrs	r2, r3, #31
 800ce52:	1812      	adds	r2, r2, r0
 800ce54:	f143 0300 	adc.w	r3, r3, #0
 800ce58:	0852      	lsrs	r2, r2, #1
 800ce5a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ce5e:	105b      	asrs	r3, r3, #1
 800ce60:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ce64:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ce68:	e6f8      	b.n	800cc5c <read_submessage_list+0xcc>
 800ce6a:	bf00      	nop
 800ce6c:	3b9aca00 	.word	0x3b9aca00

0800ce70 <listen_message_reliably>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	f1b1 0b00 	subs.w	fp, r1, #0
 800ce78:	b09f      	sub	sp, #124	@ 0x7c
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	bfb8      	it	lt
 800ce7e:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800ce82:	f001 fb07 	bl	800e494 <uxr_millis>
 800ce86:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ce8a:	9003      	str	r0, [sp, #12]
 800ce8c:	9104      	str	r1, [sp, #16]
 800ce8e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800ce92:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 80a4 	beq.w	800cfe4 <listen_message_reliably+0x174>
 800ce9c:	2500      	movs	r5, #0
 800ce9e:	e9cd b806 	strd	fp, r8, [sp, #24]
 800cea2:	f106 0420 	add.w	r4, r6, #32
 800cea6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ceaa:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800ceae:	4628      	mov	r0, r5
 800ceb0:	e011      	b.n	800ced6 <listen_message_reliably+0x66>
 800ceb2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ceb6:	42ba      	cmp	r2, r7
 800ceb8:	eb73 0109 	sbcs.w	r1, r3, r9
 800cebc:	bfb8      	it	lt
 800cebe:	4699      	movlt	r9, r3
 800cec0:	f105 0501 	add.w	r5, r5, #1
 800cec4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800cec8:	b2e8      	uxtb	r0, r5
 800ceca:	bfb8      	it	lt
 800cecc:	4617      	movlt	r7, r2
 800cece:	4283      	cmp	r3, r0
 800ced0:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800ced4:	d94a      	bls.n	800cf6c <listen_message_reliably+0xfc>
 800ced6:	2201      	movs	r2, #1
 800ced8:	2102      	movs	r1, #2
 800ceda:	f001 f979 	bl	800e1d0 <uxr_stream_id>
 800cede:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800cee2:	4601      	mov	r1, r0
 800cee4:	4620      	mov	r0, r4
 800cee6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cee8:	f004 fdc2 	bl	8011a70 <uxr_update_output_stream_heartbeat_timestamp>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d0e0      	beq.n	800ceb2 <listen_message_reliably+0x42>
 800cef0:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800cef4:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800cef8:	9305      	str	r3, [sp, #20]
 800cefa:	4630      	mov	r0, r6
 800cefc:	f000 fccc 	bl	800d898 <uxr_session_header_offset>
 800cf00:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800cf04:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800cf08:	9000      	str	r0, [sp, #0]
 800cf0a:	a90e      	add	r1, sp, #56	@ 0x38
 800cf0c:	4640      	mov	r0, r8
 800cf0e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800cf12:	2300      	movs	r3, #0
 800cf14:	2211      	movs	r2, #17
 800cf16:	f7fb fef3 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	2205      	movs	r2, #5
 800cf1e:	210b      	movs	r1, #11
 800cf20:	4640      	mov	r0, r8
 800cf22:	f001 fa71 	bl	800e408 <uxr_buffer_submessage_header>
 800cf26:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	f004 fe62 	bl	8011bf4 <uxr_seq_num_add>
 800cf30:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800cf34:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800cf38:	4602      	mov	r2, r0
 800cf3a:	9b05      	ldr	r3, [sp, #20]
 800cf3c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800cf40:	a90c      	add	r1, sp, #48	@ 0x30
 800cf42:	4640      	mov	r0, r8
 800cf44:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800cf48:	f002 fb30 	bl	800f5ac <uxr_serialize_HEARTBEAT_Payload>
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf50:	4611      	mov	r1, r2
 800cf52:	4630      	mov	r0, r6
 800cf54:	f000 fc4c 	bl	800d7f0 <uxr_stamp_session_header>
 800cf58:	4640      	mov	r0, r8
 800cf5a:	f7fb ff0f 	bl	8008d7c <ucdr_buffer_length>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800cf62:	a90e      	add	r1, sp, #56	@ 0x38
 800cf64:	e9d0 0300 	ldrd	r0, r3, [r0]
 800cf68:	4798      	blx	r3
 800cf6a:	e7a2      	b.n	800ceb2 <listen_message_reliably+0x42>
 800cf6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cf70:	4599      	cmp	r9, r3
 800cf72:	bf08      	it	eq
 800cf74:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 800cf78:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800cf7c:	d032      	beq.n	800cfe4 <listen_message_reliably+0x174>
 800cf7e:	9b03      	ldr	r3, [sp, #12]
 800cf80:	1aff      	subs	r7, r7, r3
 800cf82:	2f00      	cmp	r7, #0
 800cf84:	bf08      	it	eq
 800cf86:	2701      	moveq	r7, #1
 800cf88:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800cf8a:	455f      	cmp	r7, fp
 800cf8c:	bfa8      	it	ge
 800cf8e:	465f      	movge	r7, fp
 800cf90:	689c      	ldr	r4, [r3, #8]
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	4642      	mov	r2, r8
 800cf96:	463b      	mov	r3, r7
 800cf98:	4651      	mov	r1, sl
 800cf9a:	47a0      	blx	r4
 800cf9c:	ebab 0b07 	sub.w	fp, fp, r7
 800cfa0:	b958      	cbnz	r0, 800cfba <listen_message_reliably+0x14a>
 800cfa2:	f1bb 0f00 	cmp.w	fp, #0
 800cfa6:	dd44      	ble.n	800d032 <listen_message_reliably+0x1c2>
 800cfa8:	f001 fa74 	bl	800e494 <uxr_millis>
 800cfac:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d03c      	beq.n	800d02e <listen_message_reliably+0x1be>
 800cfb4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800cfb8:	e770      	b.n	800ce9c <listen_message_reliably+0x2c>
 800cfba:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	a80e      	add	r0, sp, #56	@ 0x38
 800cfc2:	f7fb feaf 	bl	8008d24 <ucdr_init_buffer>
 800cfc6:	2500      	movs	r5, #0
 800cfc8:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800cfcc:	aa08      	add	r2, sp, #32
 800cfce:	a90e      	add	r1, sp, #56	@ 0x38
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f88d 5020 	strb.w	r5, [sp, #32]
 800cfd6:	f000 fc21 	bl	800d81c <uxr_read_session_header>
 800cfda:	b928      	cbnz	r0, 800cfe8 <listen_message_reliably+0x178>
 800cfdc:	4620      	mov	r0, r4
 800cfde:	b01f      	add	sp, #124	@ 0x7c
 800cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe4:	465f      	mov	r7, fp
 800cfe6:	e7cc      	b.n	800cf82 <listen_message_reliably+0x112>
 800cfe8:	4629      	mov	r1, r5
 800cfea:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800cfee:	f001 f90b 	bl	800e208 <uxr_stream_id_from_raw>
 800cff2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800cff6:	2f01      	cmp	r7, #1
 800cff8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800cffc:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800d000:	fa5f f880 	uxtb.w	r8, r0
 800d004:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800d008:	d050      	beq.n	800d0ac <listen_message_reliably+0x23c>
 800d00a:	2f02      	cmp	r7, #2
 800d00c:	d016      	beq.n	800d03c <listen_message_reliably+0x1cc>
 800d00e:	2f00      	cmp	r7, #0
 800d010:	d1e4      	bne.n	800cfdc <listen_message_reliably+0x16c>
 800d012:	4639      	mov	r1, r7
 800d014:	4638      	mov	r0, r7
 800d016:	f001 f8f7 	bl	800e208 <uxr_stream_id_from_raw>
 800d01a:	a90e      	add	r1, sp, #56	@ 0x38
 800d01c:	4602      	mov	r2, r0
 800d01e:	4630      	mov	r0, r6
 800d020:	920c      	str	r2, [sp, #48]	@ 0x30
 800d022:	f7ff fdb5 	bl	800cb90 <read_submessage_list>
 800d026:	4620      	mov	r0, r4
 800d028:	b01f      	add	sp, #124	@ 0x7c
 800d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02e:	465f      	mov	r7, fp
 800d030:	e7aa      	b.n	800cf88 <listen_message_reliably+0x118>
 800d032:	4604      	mov	r4, r0
 800d034:	4620      	mov	r0, r4
 800d036:	b01f      	add	sp, #124	@ 0x7c
 800d038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03c:	4629      	mov	r1, r5
 800d03e:	f106 0008 	add.w	r0, r6, #8
 800d042:	f001 f9c1 	bl	800e3c8 <uxr_get_input_reliable_stream>
 800d046:	4681      	mov	r9, r0
 800d048:	b338      	cbz	r0, 800d09a <listen_message_reliably+0x22a>
 800d04a:	a80e      	add	r0, sp, #56	@ 0x38
 800d04c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800d050:	f7fb fe98 	bl	8008d84 <ucdr_buffer_remaining>
 800d054:	4603      	mov	r3, r0
 800d056:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800d05a:	9000      	str	r0, [sp, #0]
 800d05c:	465a      	mov	r2, fp
 800d05e:	4651      	mov	r1, sl
 800d060:	4648      	mov	r0, r9
 800d062:	f004 f931 	bl	80112c8 <uxr_receive_reliable_message>
 800d066:	b1c0      	cbz	r0, 800d09a <listen_message_reliably+0x22a>
 800d068:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800d06c:	b393      	cbz	r3, 800d0d4 <listen_message_reliably+0x264>
 800d06e:	af16      	add	r7, sp, #88	@ 0x58
 800d070:	f04f 0a02 	mov.w	sl, #2
 800d074:	e00a      	b.n	800d08c <listen_message_reliably+0x21c>
 800d076:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800d07a:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800d07e:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800d082:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d084:	4639      	mov	r1, r7
 800d086:	4630      	mov	r0, r6
 800d088:	f7ff fd82 	bl	800cb90 <read_submessage_list>
 800d08c:	2204      	movs	r2, #4
 800d08e:	4639      	mov	r1, r7
 800d090:	4648      	mov	r0, r9
 800d092:	f004 f993 	bl	80113bc <uxr_next_input_reliable_buffer_available>
 800d096:	2800      	cmp	r0, #0
 800d098:	d1ed      	bne.n	800d076 <listen_message_reliably+0x206>
 800d09a:	4630      	mov	r0, r6
 800d09c:	462a      	mov	r2, r5
 800d09e:	4641      	mov	r1, r8
 800d0a0:	f7ff fc1a 	bl	800c8d8 <write_submessage_acknack.isra.0>
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	b01f      	add	sp, #124	@ 0x7c
 800d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	f106 0008 	add.w	r0, r6, #8
 800d0b2:	f001 f97f 	bl	800e3b4 <uxr_get_input_best_effort_stream>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d090      	beq.n	800cfdc <listen_message_reliably+0x16c>
 800d0ba:	4651      	mov	r1, sl
 800d0bc:	f004 f874 	bl	80111a8 <uxr_receive_best_effort_message>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d08b      	beq.n	800cfdc <listen_message_reliably+0x16c>
 800d0c4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d0c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0ca:	a90e      	add	r1, sp, #56	@ 0x38
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f7ff fd5f 	bl	800cb90 <read_submessage_list>
 800d0d2:	e783      	b.n	800cfdc <listen_message_reliably+0x16c>
 800d0d4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800d0d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0da:	a90e      	add	r1, sp, #56	@ 0x38
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff fd57 	bl	800cb90 <read_submessage_list>
 800d0e2:	e7c4      	b.n	800d06e <listen_message_reliably+0x1fe>

0800d0e4 <uxr_run_session_until_confirm_delivery>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	460d      	mov	r5, r1
 800d0ec:	f001 f9d2 	bl	800e494 <uxr_millis>
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff fc98 	bl	800ca28 <uxr_flash_output_streams>
 800d0f8:	2d00      	cmp	r5, #0
 800d0fa:	db16      	blt.n	800d12a <uxr_run_session_until_confirm_delivery+0x46>
 800d0fc:	462c      	mov	r4, r5
 800d0fe:	f106 0808 	add.w	r8, r6, #8
 800d102:	e008      	b.n	800d116 <uxr_run_session_until_confirm_delivery+0x32>
 800d104:	4621      	mov	r1, r4
 800d106:	4630      	mov	r0, r6
 800d108:	f7ff feb2 	bl	800ce70 <listen_message_reliably>
 800d10c:	f001 f9c2 	bl	800e494 <uxr_millis>
 800d110:	1bc1      	subs	r1, r0, r7
 800d112:	1a6c      	subs	r4, r5, r1
 800d114:	d404      	bmi.n	800d120 <uxr_run_session_until_confirm_delivery+0x3c>
 800d116:	4640      	mov	r0, r8
 800d118:	f001 f960 	bl	800e3dc <uxr_output_streams_confirmed>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d0f1      	beq.n	800d104 <uxr_run_session_until_confirm_delivery+0x20>
 800d120:	4640      	mov	r0, r8
 800d122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	f001 b959 	b.w	800e3dc <uxr_output_streams_confirmed>
 800d12a:	f106 0808 	add.w	r8, r6, #8
 800d12e:	e7f7      	b.n	800d120 <uxr_run_session_until_confirm_delivery+0x3c>

0800d130 <uxr_run_session_until_all_status>:
 800d130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d134:	9c08      	ldr	r4, [sp, #32]
 800d136:	4605      	mov	r5, r0
 800d138:	460f      	mov	r7, r1
 800d13a:	4690      	mov	r8, r2
 800d13c:	461e      	mov	r6, r3
 800d13e:	f7ff fc73 	bl	800ca28 <uxr_flash_output_streams>
 800d142:	b124      	cbz	r4, 800d14e <uxr_run_session_until_all_status+0x1e>
 800d144:	4622      	mov	r2, r4
 800d146:	21ff      	movs	r1, #255	@ 0xff
 800d148:	4630      	mov	r0, r6
 800d14a:	f005 ffb5 	bl	80130b8 <memset>
 800d14e:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800d152:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d154:	f001 f99e 	bl	800e494 <uxr_millis>
 800d158:	4639      	mov	r1, r7
 800d15a:	4681      	mov	r9, r0
 800d15c:	4628      	mov	r0, r5
 800d15e:	f7ff fe87 	bl	800ce70 <listen_message_reliably>
 800d162:	f001 f997 	bl	800e494 <uxr_millis>
 800d166:	eba0 0109 	sub.w	r1, r0, r9
 800d16a:	1a79      	subs	r1, r7, r1
 800d16c:	b36c      	cbz	r4, 800d1ca <uxr_run_session_until_all_status+0x9a>
 800d16e:	1e70      	subs	r0, r6, #1
 800d170:	46c6      	mov	lr, r8
 800d172:	1902      	adds	r2, r0, r4
 800d174:	4684      	mov	ip, r0
 800d176:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d17a:	2bff      	cmp	r3, #255	@ 0xff
 800d17c:	d007      	beq.n	800d18e <uxr_run_session_until_all_status+0x5e>
 800d17e:	4594      	cmp	ip, r2
 800d180:	d00f      	beq.n	800d1a2 <uxr_run_session_until_all_status+0x72>
 800d182:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d186:	2bff      	cmp	r3, #255	@ 0xff
 800d188:	f10e 0e02 	add.w	lr, lr, #2
 800d18c:	d1f7      	bne.n	800d17e <uxr_run_session_until_all_status+0x4e>
 800d18e:	4594      	cmp	ip, r2
 800d190:	f8be 3000 	ldrh.w	r3, [lr]
 800d194:	d014      	beq.n	800d1c0 <uxr_run_session_until_all_status+0x90>
 800d196:	f10e 0e02 	add.w	lr, lr, #2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0eb      	beq.n	800d176 <uxr_run_session_until_all_status+0x46>
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	dcdc      	bgt.n	800d15c <uxr_run_session_until_all_status+0x2c>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800d1a6:	e001      	b.n	800d1ac <uxr_run_session_until_all_status+0x7c>
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d812      	bhi.n	800d1d2 <uxr_run_session_until_all_status+0xa2>
 800d1ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d1b0:	4290      	cmp	r0, r2
 800d1b2:	d1f9      	bne.n	800d1a8 <uxr_run_session_until_all_status+0x78>
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	bf8c      	ite	hi
 800d1b8:	2000      	movhi	r0, #0
 800d1ba:	2001      	movls	r0, #1
 800d1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c0:	2900      	cmp	r1, #0
 800d1c2:	ddee      	ble.n	800d1a2 <uxr_run_session_until_all_status+0x72>
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1c9      	bne.n	800d15c <uxr_run_session_until_all_status+0x2c>
 800d1c8:	e7eb      	b.n	800d1a2 <uxr_run_session_until_all_status+0x72>
 800d1ca:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800d1cc:	2001      	movs	r0, #1
 800d1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d1d8 <uxr_sync_session>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	b092      	sub	sp, #72	@ 0x48
 800d1dc:	4604      	mov	r4, r0
 800d1de:	460d      	mov	r5, r1
 800d1e0:	f000 fb5a 	bl	800d898 <uxr_session_header_offset>
 800d1e4:	2214      	movs	r2, #20
 800d1e6:	eb0d 0102 	add.w	r1, sp, r2
 800d1ea:	9000      	str	r0, [sp, #0]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	a80a      	add	r0, sp, #40	@ 0x28
 800d1f0:	f7fb fd86 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	2208      	movs	r2, #8
 800d1f8:	210e      	movs	r1, #14
 800d1fa:	a80a      	add	r0, sp, #40	@ 0x28
 800d1fc:	f001 f904 	bl	800e408 <uxr_buffer_submessage_header>
 800d200:	f001 f962 	bl	800e4c8 <uxr_nanos>
 800d204:	a318      	add	r3, pc, #96	@ (adr r3, 800d268 <uxr_sync_session+0x90>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	f7f3 fa2d 	bl	8000668 <__aeabi_ldivmod>
 800d20e:	a903      	add	r1, sp, #12
 800d210:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800d214:	a80a      	add	r0, sp, #40	@ 0x28
 800d216:	f002 f9ef 	bl	800f5f8 <uxr_serialize_TIMESTAMP_Payload>
 800d21a:	2200      	movs	r2, #0
 800d21c:	4611      	mov	r1, r2
 800d21e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fae5 	bl	800d7f0 <uxr_stamp_session_header>
 800d226:	a80a      	add	r0, sp, #40	@ 0x28
 800d228:	f7fb fda8 	bl	8008d7c <ucdr_buffer_length>
 800d22c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d22e:	4602      	mov	r2, r0
 800d230:	a905      	add	r1, sp, #20
 800d232:	e9d3 0600 	ldrd	r0, r6, [r3]
 800d236:	47b0      	blx	r6
 800d238:	f001 f92c 	bl	800e494 <uxr_millis>
 800d23c:	2300      	movs	r3, #0
 800d23e:	4606      	mov	r6, r0
 800d240:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800d244:	4629      	mov	r1, r5
 800d246:	e000      	b.n	800d24a <uxr_sync_session+0x72>
 800d248:	b950      	cbnz	r0, 800d260 <uxr_sync_session+0x88>
 800d24a:	4620      	mov	r0, r4
 800d24c:	f7ff fe10 	bl	800ce70 <listen_message_reliably>
 800d250:	f001 f920 	bl	800e494 <uxr_millis>
 800d254:	1b81      	subs	r1, r0, r6
 800d256:	1a69      	subs	r1, r5, r1
 800d258:	2900      	cmp	r1, #0
 800d25a:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800d25e:	dcf3      	bgt.n	800d248 <uxr_sync_session+0x70>
 800d260:	b012      	add	sp, #72	@ 0x48
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	f3af 8000 	nop.w
 800d268:	3b9aca00 	.word	0x3b9aca00
 800d26c:	00000000 	.word	0x00000000

0800d270 <wait_session_status>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	4604      	mov	r4, r0
 800d276:	20ff      	movs	r0, #255	@ 0xff
 800d278:	b09f      	sub	sp, #124	@ 0x7c
 800d27a:	7160      	strb	r0, [r4, #5]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80bb 	beq.w	800d3f8 <wait_session_status+0x188>
 800d282:	4692      	mov	sl, r2
 800d284:	469b      	mov	fp, r3
 800d286:	f04f 0800 	mov.w	r8, #0
 800d28a:	9105      	str	r1, [sp, #20]
 800d28c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d28e:	9905      	ldr	r1, [sp, #20]
 800d290:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d294:	4652      	mov	r2, sl
 800d296:	47a8      	blx	r5
 800d298:	f001 f8fc 	bl	800e494 <uxr_millis>
 800d29c:	2700      	movs	r7, #0
 800d29e:	4605      	mov	r5, r0
 800d2a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d2a4:	e009      	b.n	800d2ba <wait_session_status+0x4a>
 800d2a6:	f001 f8f5 	bl	800e494 <uxr_millis>
 800d2aa:	1b43      	subs	r3, r0, r5
 800d2ac:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	7962      	ldrb	r2, [r4, #5]
 800d2b4:	dd3d      	ble.n	800d332 <wait_session_status+0xc2>
 800d2b6:	2aff      	cmp	r2, #255	@ 0xff
 800d2b8:	d13b      	bne.n	800d332 <wait_session_status+0xc2>
 800d2ba:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d2bc:	a90a      	add	r1, sp, #40	@ 0x28
 800d2be:	6896      	ldr	r6, [r2, #8]
 800d2c0:	6810      	ldr	r0, [r2, #0]
 800d2c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2c4:	47b0      	blx	r6
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d0ed      	beq.n	800d2a6 <wait_session_status+0x36>
 800d2ca:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800d2ce:	a80e      	add	r0, sp, #56	@ 0x38
 800d2d0:	f7fb fd28 	bl	8008d24 <ucdr_init_buffer>
 800d2d4:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800d2d8:	aa09      	add	r2, sp, #36	@ 0x24
 800d2da:	a90e      	add	r1, sp, #56	@ 0x38
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800d2e2:	f000 fa9b 	bl	800d81c <uxr_read_session_header>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d0dd      	beq.n	800d2a6 <wait_session_status+0x36>
 800d2ea:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	f000 ff8a 	bl	800e208 <uxr_stream_id_from_raw>
 800d2f4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800d2f8:	9304      	str	r3, [sp, #16]
 800d2fa:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d2fe:	b2c3      	uxtb	r3, r0
 800d300:	f1b9 0f01 	cmp.w	r9, #1
 800d304:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800d308:	9303      	str	r3, [sp, #12]
 800d30a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d30e:	d05d      	beq.n	800d3cc <wait_session_status+0x15c>
 800d310:	f1b9 0f02 	cmp.w	r9, #2
 800d314:	d01a      	beq.n	800d34c <wait_session_status+0xdc>
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	d1c4      	bne.n	800d2a6 <wait_session_status+0x36>
 800d31c:	4649      	mov	r1, r9
 800d31e:	4648      	mov	r0, r9
 800d320:	f000 ff72 	bl	800e208 <uxr_stream_id_from_raw>
 800d324:	a90e      	add	r1, sp, #56	@ 0x38
 800d326:	4602      	mov	r2, r0
 800d328:	900d      	str	r0, [sp, #52]	@ 0x34
 800d32a:	4620      	mov	r0, r4
 800d32c:	f7ff fc30 	bl	800cb90 <read_submessage_list>
 800d330:	e7b9      	b.n	800d2a6 <wait_session_status+0x36>
 800d332:	f108 0801 	add.w	r8, r8, #1
 800d336:	45c3      	cmp	fp, r8
 800d338:	d001      	beq.n	800d33e <wait_session_status+0xce>
 800d33a:	2aff      	cmp	r2, #255	@ 0xff
 800d33c:	d0a6      	beq.n	800d28c <wait_session_status+0x1c>
 800d33e:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800d342:	bf18      	it	ne
 800d344:	2001      	movne	r0, #1
 800d346:	b01f      	add	sp, #124	@ 0x7c
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34c:	4631      	mov	r1, r6
 800d34e:	f104 0008 	add.w	r0, r4, #8
 800d352:	f001 f839 	bl	800e3c8 <uxr_get_input_reliable_stream>
 800d356:	9006      	str	r0, [sp, #24]
 800d358:	2800      	cmp	r0, #0
 800d35a:	d031      	beq.n	800d3c0 <wait_session_status+0x150>
 800d35c:	aa0e      	add	r2, sp, #56	@ 0x38
 800d35e:	4610      	mov	r0, r2
 800d360:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d362:	9207      	str	r2, [sp, #28]
 800d364:	f7fb fd0e 	bl	8008d84 <ucdr_buffer_remaining>
 800d368:	4603      	mov	r3, r0
 800d36a:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800d36e:	9000      	str	r0, [sp, #0]
 800d370:	9a07      	ldr	r2, [sp, #28]
 800d372:	9904      	ldr	r1, [sp, #16]
 800d374:	9806      	ldr	r0, [sp, #24]
 800d376:	f003 ffa7 	bl	80112c8 <uxr_receive_reliable_message>
 800d37a:	b308      	cbz	r0, 800d3c0 <wait_session_status+0x150>
 800d37c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d380:	2b00      	cmp	r3, #0
 800d382:	d041      	beq.n	800d408 <wait_session_status+0x198>
 800d384:	f8cd 8010 	str.w	r8, [sp, #16]
 800d388:	9507      	str	r5, [sp, #28]
 800d38a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d38e:	9d06      	ldr	r5, [sp, #24]
 800d390:	f04f 0902 	mov.w	r9, #2
 800d394:	e00a      	b.n	800d3ac <wait_session_status+0x13c>
 800d396:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800d39a:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800d39e:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d3a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3a4:	a916      	add	r1, sp, #88	@ 0x58
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f7ff fbf2 	bl	800cb90 <read_submessage_list>
 800d3ac:	2204      	movs	r2, #4
 800d3ae:	a916      	add	r1, sp, #88	@ 0x58
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f004 f803 	bl	80113bc <uxr_next_input_reliable_buffer_available>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d1ed      	bne.n	800d396 <wait_session_status+0x126>
 800d3ba:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d3be:	9d07      	ldr	r5, [sp, #28]
 800d3c0:	9903      	ldr	r1, [sp, #12]
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f7ff fa87 	bl	800c8d8 <write_submessage_acknack.isra.0>
 800d3ca:	e76c      	b.n	800d2a6 <wait_session_status+0x36>
 800d3cc:	4631      	mov	r1, r6
 800d3ce:	f104 0008 	add.w	r0, r4, #8
 800d3d2:	f000 ffef 	bl	800e3b4 <uxr_get_input_best_effort_stream>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	f43f af65 	beq.w	800d2a6 <wait_session_status+0x36>
 800d3dc:	9904      	ldr	r1, [sp, #16]
 800d3de:	f003 fee3 	bl	80111a8 <uxr_receive_best_effort_message>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f43f af5f 	beq.w	800d2a6 <wait_session_status+0x36>
 800d3e8:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d3ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3ee:	a90e      	add	r1, sp, #56	@ 0x38
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7ff fbcd 	bl	800cb90 <read_submessage_list>
 800d3f6:	e756      	b.n	800d2a6 <wait_session_status+0x36>
 800d3f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3fa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d3fe:	47a0      	blx	r4
 800d400:	2001      	movs	r0, #1
 800d402:	b01f      	add	sp, #124	@ 0x7c
 800d404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d408:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800d40c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d40e:	a90e      	add	r1, sp, #56	@ 0x38
 800d410:	4620      	mov	r0, r4
 800d412:	f7ff fbbd 	bl	800cb90 <read_submessage_list>
 800d416:	e7b5      	b.n	800d384 <wait_session_status+0x114>

0800d418 <uxr_delete_session_retries>:
 800d418:	b530      	push	{r4, r5, lr}
 800d41a:	b08f      	sub	sp, #60	@ 0x3c
 800d41c:	4604      	mov	r4, r0
 800d41e:	460d      	mov	r5, r1
 800d420:	f000 fa3a 	bl	800d898 <uxr_session_header_offset>
 800d424:	2300      	movs	r3, #0
 800d426:	2210      	movs	r2, #16
 800d428:	9000      	str	r0, [sp, #0]
 800d42a:	a902      	add	r1, sp, #8
 800d42c:	a806      	add	r0, sp, #24
 800d42e:	f7fb fc67 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800d432:	a906      	add	r1, sp, #24
 800d434:	4620      	mov	r0, r4
 800d436:	f000 f981 	bl	800d73c <uxr_buffer_delete_session>
 800d43a:	2200      	movs	r2, #0
 800d43c:	4611      	mov	r1, r2
 800d43e:	9b06      	ldr	r3, [sp, #24]
 800d440:	4620      	mov	r0, r4
 800d442:	f000 f9d5 	bl	800d7f0 <uxr_stamp_session_header>
 800d446:	a806      	add	r0, sp, #24
 800d448:	f7fb fc98 	bl	8008d7c <ucdr_buffer_length>
 800d44c:	462b      	mov	r3, r5
 800d44e:	4602      	mov	r2, r0
 800d450:	a902      	add	r1, sp, #8
 800d452:	4620      	mov	r0, r4
 800d454:	f7ff ff0c 	bl	800d270 <wait_session_status>
 800d458:	b118      	cbz	r0, 800d462 <uxr_delete_session_retries+0x4a>
 800d45a:	7960      	ldrb	r0, [r4, #5]
 800d45c:	fab0 f080 	clz	r0, r0
 800d460:	0940      	lsrs	r0, r0, #5
 800d462:	b00f      	add	sp, #60	@ 0x3c
 800d464:	bd30      	pop	{r4, r5, pc}
 800d466:	bf00      	nop

0800d468 <uxr_create_session>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	f100 0308 	add.w	r3, r0, #8
 800d470:	b0ab      	sub	sp, #172	@ 0xac
 800d472:	4604      	mov	r4, r0
 800d474:	4618      	mov	r0, r3
 800d476:	9303      	str	r3, [sp, #12]
 800d478:	f000 feec 	bl	800e254 <uxr_reset_stream_storage>
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 fa0b 	bl	800d898 <uxr_session_header_offset>
 800d482:	2300      	movs	r3, #0
 800d484:	9000      	str	r0, [sp, #0]
 800d486:	221c      	movs	r2, #28
 800d488:	a90b      	add	r1, sp, #44	@ 0x2c
 800d48a:	a812      	add	r0, sp, #72	@ 0x48
 800d48c:	f7fb fc38 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800d490:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d492:	8a1a      	ldrh	r2, [r3, #16]
 800d494:	3a04      	subs	r2, #4
 800d496:	b292      	uxth	r2, r2
 800d498:	a912      	add	r1, sp, #72	@ 0x48
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 f924 	bl	800d6e8 <uxr_buffer_create_session>
 800d4a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 f990 	bl	800d7c8 <uxr_stamp_create_session_header>
 800d4a8:	a812      	add	r0, sp, #72	@ 0x48
 800d4aa:	f7fb fc67 	bl	8008d7c <ucdr_buffer_length>
 800d4ae:	23ff      	movs	r3, #255	@ 0xff
 800d4b0:	4683      	mov	fp, r0
 800d4b2:	7163      	strb	r3, [r4, #5]
 800d4b4:	f04f 080a 	mov.w	r8, #10
 800d4b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d4ba:	465a      	mov	r2, fp
 800d4bc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d4c0:	a90b      	add	r1, sp, #44	@ 0x2c
 800d4c2:	47a8      	blx	r5
 800d4c4:	f000 ffe6 	bl	800e494 <uxr_millis>
 800d4c8:	2700      	movs	r7, #0
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d4d0:	e009      	b.n	800d4e6 <uxr_create_session+0x7e>
 800d4d2:	f000 ffdf 	bl	800e494 <uxr_millis>
 800d4d6:	1b43      	subs	r3, r0, r5
 800d4d8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	7962      	ldrb	r2, [r4, #5]
 800d4e0:	dd3d      	ble.n	800d55e <uxr_create_session+0xf6>
 800d4e2:	2aff      	cmp	r2, #255	@ 0xff
 800d4e4:	d13b      	bne.n	800d55e <uxr_create_session+0xf6>
 800d4e6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d4e8:	a907      	add	r1, sp, #28
 800d4ea:	6896      	ldr	r6, [r2, #8]
 800d4ec:	6810      	ldr	r0, [r2, #0]
 800d4ee:	aa08      	add	r2, sp, #32
 800d4f0:	47b0      	blx	r6
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d0ed      	beq.n	800d4d2 <uxr_create_session+0x6a>
 800d4f6:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d4fa:	a81a      	add	r0, sp, #104	@ 0x68
 800d4fc:	f7fb fc12 	bl	8008d24 <ucdr_init_buffer>
 800d500:	f10d 031a 	add.w	r3, sp, #26
 800d504:	aa06      	add	r2, sp, #24
 800d506:	a91a      	add	r1, sp, #104	@ 0x68
 800d508:	4620      	mov	r0, r4
 800d50a:	f88d 7018 	strb.w	r7, [sp, #24]
 800d50e:	f000 f985 	bl	800d81c <uxr_read_session_header>
 800d512:	2800      	cmp	r0, #0
 800d514:	d0dd      	beq.n	800d4d2 <uxr_create_session+0x6a>
 800d516:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d51a:	2100      	movs	r1, #0
 800d51c:	f000 fe74 	bl	800e208 <uxr_stream_id_from_raw>
 800d520:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800d524:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d528:	9302      	str	r3, [sp, #8]
 800d52a:	f1b9 0f01 	cmp.w	r9, #1
 800d52e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d532:	fa5f fa80 	uxtb.w	sl, r0
 800d536:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d53a:	d056      	beq.n	800d5ea <uxr_create_session+0x182>
 800d53c:	f1b9 0f02 	cmp.w	r9, #2
 800d540:	d018      	beq.n	800d574 <uxr_create_session+0x10c>
 800d542:	f1b9 0f00 	cmp.w	r9, #0
 800d546:	d1c4      	bne.n	800d4d2 <uxr_create_session+0x6a>
 800d548:	4649      	mov	r1, r9
 800d54a:	4648      	mov	r0, r9
 800d54c:	f000 fe5c 	bl	800e208 <uxr_stream_id_from_raw>
 800d550:	a91a      	add	r1, sp, #104	@ 0x68
 800d552:	4602      	mov	r2, r0
 800d554:	900a      	str	r0, [sp, #40]	@ 0x28
 800d556:	4620      	mov	r0, r4
 800d558:	f7ff fb1a 	bl	800cb90 <read_submessage_list>
 800d55c:	e7b9      	b.n	800d4d2 <uxr_create_session+0x6a>
 800d55e:	f1b8 0801 	subs.w	r8, r8, #1
 800d562:	d001      	beq.n	800d568 <uxr_create_session+0x100>
 800d564:	2aff      	cmp	r2, #255	@ 0xff
 800d566:	d0a7      	beq.n	800d4b8 <uxr_create_session+0x50>
 800d568:	2a00      	cmp	r2, #0
 800d56a:	d05b      	beq.n	800d624 <uxr_create_session+0x1bc>
 800d56c:	2000      	movs	r0, #0
 800d56e:	b02b      	add	sp, #172	@ 0xac
 800d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d574:	9803      	ldr	r0, [sp, #12]
 800d576:	4631      	mov	r1, r6
 800d578:	f000 ff26 	bl	800e3c8 <uxr_get_input_reliable_stream>
 800d57c:	9004      	str	r0, [sp, #16]
 800d57e:	b370      	cbz	r0, 800d5de <uxr_create_session+0x176>
 800d580:	aa1a      	add	r2, sp, #104	@ 0x68
 800d582:	4610      	mov	r0, r2
 800d584:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d586:	9205      	str	r2, [sp, #20]
 800d588:	f7fb fbfc 	bl	8008d84 <ucdr_buffer_remaining>
 800d58c:	4603      	mov	r3, r0
 800d58e:	f10d 0019 	add.w	r0, sp, #25
 800d592:	9000      	str	r0, [sp, #0]
 800d594:	9a05      	ldr	r2, [sp, #20]
 800d596:	9902      	ldr	r1, [sp, #8]
 800d598:	9804      	ldr	r0, [sp, #16]
 800d59a:	f003 fe95 	bl	80112c8 <uxr_receive_reliable_message>
 800d59e:	b1f0      	cbz	r0, 800d5de <uxr_create_session+0x176>
 800d5a0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d035      	beq.n	800d614 <uxr_create_session+0x1ac>
 800d5a8:	f8cd b008 	str.w	fp, [sp, #8]
 800d5ac:	f04f 0902 	mov.w	r9, #2
 800d5b0:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d5b4:	e00a      	b.n	800d5cc <uxr_create_session+0x164>
 800d5b6:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800d5ba:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d5be:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d5c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5c4:	a922      	add	r1, sp, #136	@ 0x88
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f7ff fae2 	bl	800cb90 <read_submessage_list>
 800d5cc:	2204      	movs	r2, #4
 800d5ce:	a922      	add	r1, sp, #136	@ 0x88
 800d5d0:	4658      	mov	r0, fp
 800d5d2:	f003 fef3 	bl	80113bc <uxr_next_input_reliable_buffer_available>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d1ed      	bne.n	800d5b6 <uxr_create_session+0x14e>
 800d5da:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d5de:	4632      	mov	r2, r6
 800d5e0:	4651      	mov	r1, sl
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f7ff f978 	bl	800c8d8 <write_submessage_acknack.isra.0>
 800d5e8:	e773      	b.n	800d4d2 <uxr_create_session+0x6a>
 800d5ea:	9803      	ldr	r0, [sp, #12]
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	f000 fee1 	bl	800e3b4 <uxr_get_input_best_effort_stream>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	f43f af6d 	beq.w	800d4d2 <uxr_create_session+0x6a>
 800d5f8:	9902      	ldr	r1, [sp, #8]
 800d5fa:	f003 fdd5 	bl	80111a8 <uxr_receive_best_effort_message>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f43f af67 	beq.w	800d4d2 <uxr_create_session+0x6a>
 800d604:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d608:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d60a:	a91a      	add	r1, sp, #104	@ 0x68
 800d60c:	4620      	mov	r0, r4
 800d60e:	f7ff fabf 	bl	800cb90 <read_submessage_list>
 800d612:	e75e      	b.n	800d4d2 <uxr_create_session+0x6a>
 800d614:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800d618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d61a:	a91a      	add	r1, sp, #104	@ 0x68
 800d61c:	4620      	mov	r0, r4
 800d61e:	f7ff fab7 	bl	800cb90 <read_submessage_list>
 800d622:	e7c1      	b.n	800d5a8 <uxr_create_session+0x140>
 800d624:	9803      	ldr	r0, [sp, #12]
 800d626:	f000 fe15 	bl	800e254 <uxr_reset_stream_storage>
 800d62a:	2001      	movs	r0, #1
 800d62c:	b02b      	add	sp, #172	@ 0xac
 800d62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d632:	bf00      	nop

0800d634 <uxr_prepare_stream_to_write_submessage>:
 800d634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d638:	b082      	sub	sp, #8
 800d63a:	4606      	mov	r6, r0
 800d63c:	4610      	mov	r0, r2
 800d63e:	4614      	mov	r4, r2
 800d640:	9101      	str	r1, [sp, #4]
 800d642:	461f      	mov	r7, r3
 800d644:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d648:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800d64c:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800d650:	f000 ff1a 	bl	800e488 <uxr_submessage_padding>
 800d654:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d658:	1d21      	adds	r1, r4, #4
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	eb01 0a00 	add.w	sl, r1, r0
 800d660:	d012      	beq.n	800d688 <uxr_prepare_stream_to_write_submessage+0x54>
 800d662:	2b02      	cmp	r3, #2
 800d664:	d003      	beq.n	800d66e <uxr_prepare_stream_to_write_submessage+0x3a>
 800d666:	2000      	movs	r0, #0
 800d668:	b002      	add	sp, #8
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	4629      	mov	r1, r5
 800d670:	f106 0008 	add.w	r0, r6, #8
 800d674:	f000 fe94 	bl	800e3a0 <uxr_get_output_reliable_stream>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d0f4      	beq.n	800d666 <uxr_prepare_stream_to_write_submessage+0x32>
 800d67c:	4651      	mov	r1, sl
 800d67e:	463a      	mov	r2, r7
 800d680:	f004 f852 	bl	8011728 <uxr_prepare_reliable_buffer_to_write>
 800d684:	b968      	cbnz	r0, 800d6a2 <uxr_prepare_stream_to_write_submessage+0x6e>
 800d686:	e7ee      	b.n	800d666 <uxr_prepare_stream_to_write_submessage+0x32>
 800d688:	4629      	mov	r1, r5
 800d68a:	f106 0008 	add.w	r0, r6, #8
 800d68e:	f000 fe7f 	bl	800e390 <uxr_get_output_best_effort_stream>
 800d692:	2800      	cmp	r0, #0
 800d694:	d0e7      	beq.n	800d666 <uxr_prepare_stream_to_write_submessage+0x32>
 800d696:	4651      	mov	r1, sl
 800d698:	463a      	mov	r2, r7
 800d69a:	f003 ff77 	bl	801158c <uxr_prepare_best_effort_buffer_to_write>
 800d69e:	2800      	cmp	r0, #0
 800d6a0:	d0e1      	beq.n	800d666 <uxr_prepare_stream_to_write_submessage+0x32>
 800d6a2:	464b      	mov	r3, r9
 800d6a4:	b2a2      	uxth	r2, r4
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f000 fead 	bl	800e408 <uxr_buffer_submessage_header>
 800d6ae:	2001      	movs	r0, #1
 800d6b0:	b002      	add	sp, #8
 800d6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b6:	bf00      	nop

0800d6b8 <uxr_init_session_info>:
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f361 0307 	bfi	r3, r1, #0, #8
 800d6be:	0e11      	lsrs	r1, r2, #24
 800d6c0:	f361 230f 	bfi	r3, r1, #8, #8
 800d6c4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800d6c8:	f361 4317 	bfi	r3, r1, #16, #8
 800d6cc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d6d0:	f361 631f 	bfi	r3, r1, #24, #8
 800d6d4:	f04f 0c09 	mov.w	ip, #9
 800d6d8:	21ff      	movs	r1, #255	@ 0xff
 800d6da:	6003      	str	r3, [r0, #0]
 800d6dc:	7102      	strb	r2, [r0, #4]
 800d6de:	f8a0 c006 	strh.w	ip, [r0, #6]
 800d6e2:	7141      	strb	r1, [r0, #5]
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop

0800d6e8 <uxr_buffer_create_session>:
 800d6e8:	b530      	push	{r4, r5, lr}
 800d6ea:	4d13      	ldr	r5, [pc, #76]	@ (800d738 <uxr_buffer_create_session+0x50>)
 800d6ec:	b089      	sub	sp, #36	@ 0x24
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9307      	str	r3, [sp, #28]
 800d6f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d6f6:	682a      	ldr	r2, [r5, #0]
 800d6f8:	9200      	str	r2, [sp, #0]
 800d6fa:	460c      	mov	r4, r1
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	88a9      	ldrh	r1, [r5, #4]
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	80c2      	strh	r2, [r0, #6]
 800d704:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d708:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800d70c:	7800      	ldrb	r0, [r0, #0]
 800d70e:	9303      	str	r3, [sp, #12]
 800d710:	f88d 2004 	strb.w	r2, [sp, #4]
 800d714:	9102      	str	r1, [sp, #8]
 800d716:	2210      	movs	r2, #16
 800d718:	4619      	mov	r1, r3
 800d71a:	f88d 000c 	strb.w	r0, [sp, #12]
 800d71e:	4620      	mov	r0, r4
 800d720:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d724:	9306      	str	r3, [sp, #24]
 800d726:	f000 fe6f 	bl	800e408 <uxr_buffer_submessage_header>
 800d72a:	4669      	mov	r1, sp
 800d72c:	4620      	mov	r0, r4
 800d72e:	f001 fda1 	bl	800f274 <uxr_serialize_CREATE_CLIENT_Payload>
 800d732:	b009      	add	sp, #36	@ 0x24
 800d734:	bd30      	pop	{r4, r5, pc}
 800d736:	bf00      	nop
 800d738:	080140cc 	.word	0x080140cc

0800d73c <uxr_buffer_delete_session>:
 800d73c:	b510      	push	{r4, lr}
 800d73e:	4a0c      	ldr	r2, [pc, #48]	@ (800d770 <uxr_buffer_delete_session+0x34>)
 800d740:	b082      	sub	sp, #8
 800d742:	460c      	mov	r4, r1
 800d744:	2302      	movs	r3, #2
 800d746:	8911      	ldrh	r1, [r2, #8]
 800d748:	80c3      	strh	r3, [r0, #6]
 800d74a:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800d74e:	2300      	movs	r3, #0
 800d750:	2204      	movs	r2, #4
 800d752:	f8ad 1006 	strh.w	r1, [sp, #6]
 800d756:	4620      	mov	r0, r4
 800d758:	2103      	movs	r1, #3
 800d75a:	f8ad c004 	strh.w	ip, [sp, #4]
 800d75e:	f000 fe53 	bl	800e408 <uxr_buffer_submessage_header>
 800d762:	a901      	add	r1, sp, #4
 800d764:	4620      	mov	r0, r4
 800d766:	f001 fe29 	bl	800f3bc <uxr_serialize_DELETE_Payload>
 800d76a:	b002      	add	sp, #8
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	bf00      	nop
 800d770:	080140cc 	.word	0x080140cc

0800d774 <uxr_read_create_session_status>:
 800d774:	b510      	push	{r4, lr}
 800d776:	460b      	mov	r3, r1
 800d778:	b088      	sub	sp, #32
 800d77a:	4604      	mov	r4, r0
 800d77c:	a901      	add	r1, sp, #4
 800d77e:	4618      	mov	r0, r3
 800d780:	f001 fe2c 	bl	800f3dc <uxr_deserialize_STATUS_AGENT_Payload>
 800d784:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d788:	7163      	strb	r3, [r4, #5]
 800d78a:	b008      	add	sp, #32
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	bf00      	nop

0800d790 <uxr_read_delete_session_status>:
 800d790:	b510      	push	{r4, lr}
 800d792:	460b      	mov	r3, r1
 800d794:	b082      	sub	sp, #8
 800d796:	4604      	mov	r4, r0
 800d798:	4669      	mov	r1, sp
 800d79a:	4618      	mov	r0, r3
 800d79c:	f001 fe4e 	bl	800f43c <uxr_deserialize_STATUS_Payload>
 800d7a0:	88e3      	ldrh	r3, [r4, #6]
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d001      	beq.n	800d7aa <uxr_read_delete_session_status+0x1a>
 800d7a6:	b002      	add	sp, #8
 800d7a8:	bd10      	pop	{r4, pc}
 800d7aa:	f10d 0002 	add.w	r0, sp, #2
 800d7ae:	f7fe ff1d 	bl	800c5ec <uxr_object_id_from_raw>
 800d7b2:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d7ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7be:	bf08      	it	eq
 800d7c0:	7162      	strbeq	r2, [r4, #5]
 800d7c2:	b002      	add	sp, #8
 800d7c4:	bd10      	pop	{r4, pc}
 800d7c6:	bf00      	nop

0800d7c8 <uxr_stamp_create_session_header>:
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	2208      	movs	r2, #8
 800d7cc:	b08a      	sub	sp, #40	@ 0x28
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	eb0d 0002 	add.w	r0, sp, r2
 800d7d4:	f7fb faa6 	bl	8008d24 <ucdr_init_buffer>
 800d7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7dc:	9400      	str	r4, [sp, #0]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	a802      	add	r0, sp, #8
 800d7e4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800d7e8:	f001 f80c 	bl	800e804 <uxr_serialize_message_header>
 800d7ec:	b00a      	add	sp, #40	@ 0x28
 800d7ee:	bd10      	pop	{r4, pc}

0800d7f0 <uxr_stamp_session_header>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	b08a      	sub	sp, #40	@ 0x28
 800d7f6:	4616      	mov	r6, r2
 800d7f8:	2208      	movs	r2, #8
 800d7fa:	eb0d 0002 	add.w	r0, sp, r2
 800d7fe:	460d      	mov	r5, r1
 800d800:	4619      	mov	r1, r3
 800d802:	f7fb fa8f 	bl	8008d24 <ucdr_init_buffer>
 800d806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d80a:	9400      	str	r4, [sp, #0]
 800d80c:	4633      	mov	r3, r6
 800d80e:	462a      	mov	r2, r5
 800d810:	a802      	add	r0, sp, #8
 800d812:	f000 fff7 	bl	800e804 <uxr_serialize_message_header>
 800d816:	b00a      	add	sp, #40	@ 0x28
 800d818:	bd70      	pop	{r4, r5, r6, pc}
 800d81a:	bf00      	nop

0800d81c <uxr_read_session_header>:
 800d81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81e:	4607      	mov	r7, r0
 800d820:	b085      	sub	sp, #20
 800d822:	4608      	mov	r0, r1
 800d824:	460c      	mov	r4, r1
 800d826:	4615      	mov	r5, r2
 800d828:	461e      	mov	r6, r3
 800d82a:	f7fb faab 	bl	8008d84 <ucdr_buffer_remaining>
 800d82e:	2808      	cmp	r0, #8
 800d830:	d802      	bhi.n	800d838 <uxr_read_session_header+0x1c>
 800d832:	2000      	movs	r0, #0
 800d834:	b005      	add	sp, #20
 800d836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d838:	ab03      	add	r3, sp, #12
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	462a      	mov	r2, r5
 800d83e:	4633      	mov	r3, r6
 800d840:	f10d 010b 	add.w	r1, sp, #11
 800d844:	4620      	mov	r0, r4
 800d846:	f000 fffb 	bl	800e840 <uxr_deserialize_message_header>
 800d84a:	783a      	ldrb	r2, [r7, #0]
 800d84c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d850:	4293      	cmp	r3, r2
 800d852:	d1ee      	bne.n	800d832 <uxr_read_session_header+0x16>
 800d854:	061b      	lsls	r3, r3, #24
 800d856:	d41c      	bmi.n	800d892 <uxr_read_session_header+0x76>
 800d858:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d85c:	787b      	ldrb	r3, [r7, #1]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d003      	beq.n	800d86a <uxr_read_session_header+0x4e>
 800d862:	2001      	movs	r0, #1
 800d864:	f080 0001 	eor.w	r0, r0, #1
 800d868:	e7e4      	b.n	800d834 <uxr_read_session_header+0x18>
 800d86a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d86e:	78bb      	ldrb	r3, [r7, #2]
 800d870:	429a      	cmp	r2, r3
 800d872:	f107 0102 	add.w	r1, r7, #2
 800d876:	d1f4      	bne.n	800d862 <uxr_read_session_header+0x46>
 800d878:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d87c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d880:	429a      	cmp	r2, r3
 800d882:	d1ee      	bne.n	800d862 <uxr_read_session_header+0x46>
 800d884:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d888:	784b      	ldrb	r3, [r1, #1]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d1e9      	bne.n	800d862 <uxr_read_session_header+0x46>
 800d88e:	2000      	movs	r0, #0
 800d890:	e7e8      	b.n	800d864 <uxr_read_session_header+0x48>
 800d892:	2001      	movs	r0, #1
 800d894:	e7ce      	b.n	800d834 <uxr_read_session_header+0x18>
 800d896:	bf00      	nop

0800d898 <uxr_session_header_offset>:
 800d898:	f990 3000 	ldrsb.w	r3, [r0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	bfb4      	ite	lt
 800d8a0:	2004      	movlt	r0, #4
 800d8a2:	2008      	movge	r0, #8
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop

0800d8a8 <uxr_init_base_object_request>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	88c3      	ldrh	r3, [r0, #6]
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800d8b2:	9101      	str	r1, [sp, #4]
 800d8b4:	f1a3 010a 	sub.w	r1, r3, #10
 800d8b8:	b289      	uxth	r1, r1
 800d8ba:	42a1      	cmp	r1, r4
 800d8bc:	d80e      	bhi.n	800d8dc <uxr_init_base_object_request+0x34>
 800d8be:	3301      	adds	r3, #1
 800d8c0:	b29c      	uxth	r4, r3
 800d8c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	80c4      	strh	r4, [r0, #6]
 800d8ca:	9801      	ldr	r0, [sp, #4]
 800d8cc:	7011      	strb	r1, [r2, #0]
 800d8ce:	7053      	strb	r3, [r2, #1]
 800d8d0:	1c91      	adds	r1, r2, #2
 800d8d2:	f7fe fe9f 	bl	800c614 <uxr_object_id_to_raw>
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	b002      	add	sp, #8
 800d8da:	bd10      	pop	{r4, pc}
 800d8dc:	230a      	movs	r3, #10
 800d8de:	2100      	movs	r1, #0
 800d8e0:	461c      	mov	r4, r3
 800d8e2:	e7f1      	b.n	800d8c8 <uxr_init_base_object_request+0x20>

0800d8e4 <uxr_parse_base_object_request>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	3002      	adds	r0, #2
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	4616      	mov	r6, r2
 800d8ee:	f7fe fe7d 	bl	800c5ec <uxr_object_id_from_raw>
 800d8f2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800d8f6:	8028      	strh	r0, [r5, #0]
 800d8f8:	806b      	strh	r3, [r5, #2]
 800d8fa:	8823      	ldrh	r3, [r4, #0]
 800d8fc:	ba5b      	rev16	r3, r3
 800d8fe:	8033      	strh	r3, [r6, #0]
 800d900:	bd70      	pop	{r4, r5, r6, pc}
 800d902:	bf00      	nop

0800d904 <uxr_init_framing_io>:
 800d904:	2300      	movs	r3, #0
 800d906:	7041      	strb	r1, [r0, #1]
 800d908:	7003      	strb	r3, [r0, #0]
 800d90a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop

0800d910 <uxr_write_framed_msg>:
 800d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	f890 c001 	ldrb.w	ip, [r0, #1]
 800d918:	4617      	mov	r7, r2
 800d91a:	227e      	movs	r2, #126	@ 0x7e
 800d91c:	b085      	sub	sp, #20
 800d91e:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800d922:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800d926:	2a01      	cmp	r2, #1
 800d928:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800d92c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800d930:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d934:	4604      	mov	r4, r0
 800d936:	460e      	mov	r6, r1
 800d938:	469a      	mov	sl, r3
 800d93a:	f240 812e 	bls.w	800db9a <uxr_write_framed_msg+0x28a>
 800d93e:	2003      	movs	r0, #3
 800d940:	2102      	movs	r1, #2
 800d942:	f04f 0905 	mov.w	r9, #5
 800d946:	2204      	movs	r2, #4
 800d948:	4686      	mov	lr, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800d950:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800d954:	f1bc 0f01 	cmp.w	ip, #1
 800d958:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800d95c:	4421      	add	r1, r4
 800d95e:	f240 8110 	bls.w	800db82 <uxr_write_framed_msg+0x272>
 800d962:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800d966:	fa5f fc8b 	uxtb.w	ip, fp
 800d96a:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800d96e:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800d972:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800d976:	f1be 0f01 	cmp.w	lr, #1
 800d97a:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800d97e:	b2ed      	uxtb	r5, r5
 800d980:	d94c      	bls.n	800da1c <uxr_write_framed_msg+0x10c>
 800d982:	4420      	add	r0, r4
 800d984:	2d01      	cmp	r5, #1
 800d986:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800d98a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d98e:	d95d      	bls.n	800da4c <uxr_write_framed_msg+0x13c>
 800d990:	18a0      	adds	r0, r4, r2
 800d992:	3201      	adds	r2, #1
 800d994:	b2d2      	uxtb	r2, r2
 800d996:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800d99a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d99e:	f1bb 0f00 	cmp.w	fp, #0
 800d9a2:	f000 8108 	beq.w	800dbb6 <uxr_write_framed_msg+0x2a6>
 800d9a6:	f04f 0c00 	mov.w	ip, #0
 800d9aa:	4661      	mov	r1, ip
 800d9ac:	46de      	mov	lr, fp
 800d9ae:	46e3      	mov	fp, ip
 800d9b0:	46d4      	mov	ip, sl
 800d9b2:	468a      	mov	sl, r1
 800d9b4:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800dbc0 <uxr_write_framed_msg+0x2b0>
 800d9b8:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800d9bc:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800d9c0:	2901      	cmp	r1, #1
 800d9c2:	d91b      	bls.n	800d9fc <uxr_write_framed_msg+0xec>
 800d9c4:	2a29      	cmp	r2, #41	@ 0x29
 800d9c6:	d84e      	bhi.n	800da66 <uxr_write_framed_msg+0x156>
 800d9c8:	18a1      	adds	r1, r4, r2
 800d9ca:	3201      	adds	r2, #1
 800d9cc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800d9d0:	b2d2      	uxtb	r2, r2
 800d9d2:	ea8b 0303 	eor.w	r3, fp, r3
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d9dc:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800d9e0:	f10a 0a01 	add.w	sl, sl, #1
 800d9e4:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800d9e8:	45d6      	cmp	lr, sl
 800d9ea:	d95a      	bls.n	800daa2 <uxr_write_framed_msg+0x192>
 800d9ec:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800d9f0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d9f4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800d9f8:	2901      	cmp	r1, #1
 800d9fa:	d8e3      	bhi.n	800d9c4 <uxr_write_framed_msg+0xb4>
 800d9fc:	1c51      	adds	r1, r2, #1
 800d9fe:	b2c9      	uxtb	r1, r1
 800da00:	2929      	cmp	r1, #41	@ 0x29
 800da02:	d830      	bhi.n	800da66 <uxr_write_framed_msg+0x156>
 800da04:	18a1      	adds	r1, r4, r2
 800da06:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800da0a:	3202      	adds	r2, #2
 800da0c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800da10:	f083 0020 	eor.w	r0, r3, #32
 800da14:	b2d2      	uxtb	r2, r2
 800da16:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800da1a:	e7da      	b.n	800d9d2 <uxr_write_framed_msg+0xc2>
 800da1c:	eb04 0e00 	add.w	lr, r4, r0
 800da20:	f08c 0c20 	eor.w	ip, ip, #32
 800da24:	1c82      	adds	r2, r0, #2
 800da26:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800da2a:	b2d2      	uxtb	r2, r2
 800da2c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800da30:	2d01      	cmp	r5, #1
 800da32:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800da36:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da3a:	d907      	bls.n	800da4c <uxr_write_framed_msg+0x13c>
 800da3c:	4422      	add	r2, r4
 800da3e:	3003      	adds	r0, #3
 800da40:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800da44:	b2c2      	uxtb	r2, r0
 800da46:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da4a:	e7ac      	b.n	800d9a6 <uxr_write_framed_msg+0x96>
 800da4c:	18a0      	adds	r0, r4, r2
 800da4e:	f081 0120 	eor.w	r1, r1, #32
 800da52:	3202      	adds	r2, #2
 800da54:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800da58:	b2d2      	uxtb	r2, r2
 800da5a:	217d      	movs	r1, #125	@ 0x7d
 800da5c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800da60:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800da64:	e79f      	b.n	800d9a6 <uxr_write_framed_msg+0x96>
 800da66:	e9cd ba00 	strd	fp, sl, [sp]
 800da6a:	2500      	movs	r5, #0
 800da6c:	46e2      	mov	sl, ip
 800da6e:	46f3      	mov	fp, lr
 800da70:	e000      	b.n	800da74 <uxr_write_framed_msg+0x164>
 800da72:	b190      	cbz	r0, 800da9a <uxr_write_framed_msg+0x18a>
 800da74:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800da78:	1b52      	subs	r2, r2, r5
 800da7a:	4643      	mov	r3, r8
 800da7c:	4421      	add	r1, r4
 800da7e:	4638      	mov	r0, r7
 800da80:	47b0      	blx	r6
 800da82:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800da86:	4405      	add	r5, r0
 800da88:	4295      	cmp	r5, r2
 800da8a:	d3f2      	bcc.n	800da72 <uxr_write_framed_msg+0x162>
 800da8c:	46d4      	mov	ip, sl
 800da8e:	46de      	mov	lr, fp
 800da90:	f8dd a004 	ldr.w	sl, [sp, #4]
 800da94:	f8dd b000 	ldr.w	fp, [sp]
 800da98:	d06f      	beq.n	800db7a <uxr_write_framed_msg+0x26a>
 800da9a:	2000      	movs	r0, #0
 800da9c:	b005      	add	sp, #20
 800da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa2:	46dc      	mov	ip, fp
 800daa4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800daa8:	f8ad c00c 	strh.w	ip, [sp, #12]
 800daac:	46f3      	mov	fp, lr
 800daae:	fa5f fc8c 	uxtb.w	ip, ip
 800dab2:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	f04f 0900 	mov.w	r9, #0
 800dabc:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800dac0:	d930      	bls.n	800db24 <uxr_write_framed_msg+0x214>
 800dac2:	2a29      	cmp	r2, #41	@ 0x29
 800dac4:	d91c      	bls.n	800db00 <uxr_write_framed_msg+0x1f0>
 800dac6:	2500      	movs	r5, #0
 800dac8:	e001      	b.n	800dace <uxr_write_framed_msg+0x1be>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d0e5      	beq.n	800da9a <uxr_write_framed_msg+0x18a>
 800dace:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800dad2:	1b52      	subs	r2, r2, r5
 800dad4:	4643      	mov	r3, r8
 800dad6:	4421      	add	r1, r4
 800dad8:	4638      	mov	r0, r7
 800dada:	47b0      	blx	r6
 800dadc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dae0:	4405      	add	r5, r0
 800dae2:	4295      	cmp	r5, r2
 800dae4:	d3f1      	bcc.n	800daca <uxr_write_framed_msg+0x1ba>
 800dae6:	d1d8      	bne.n	800da9a <uxr_write_framed_msg+0x18a>
 800dae8:	f109 0310 	add.w	r3, r9, #16
 800daec:	446b      	add	r3, sp
 800daee:	2200      	movs	r2, #0
 800daf0:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800daf4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800daf8:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d911      	bls.n	800db24 <uxr_write_framed_msg+0x214>
 800db00:	18a3      	adds	r3, r4, r2
 800db02:	3201      	adds	r2, #1
 800db04:	b2d2      	uxtb	r2, r2
 800db06:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800db0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800db0e:	f1b9 0f00 	cmp.w	r9, #0
 800db12:	d119      	bne.n	800db48 <uxr_write_framed_msg+0x238>
 800db14:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800db18:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	f04f 0901 	mov.w	r9, #1
 800db22:	d8ce      	bhi.n	800dac2 <uxr_write_framed_msg+0x1b2>
 800db24:	1c53      	adds	r3, r2, #1
 800db26:	b2db      	uxtb	r3, r3
 800db28:	2b29      	cmp	r3, #41	@ 0x29
 800db2a:	d8cc      	bhi.n	800dac6 <uxr_write_framed_msg+0x1b6>
 800db2c:	18a3      	adds	r3, r4, r2
 800db2e:	3202      	adds	r2, #2
 800db30:	f08c 0c20 	eor.w	ip, ip, #32
 800db34:	b2d2      	uxtb	r2, r2
 800db36:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800db3a:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800db3e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800db42:	f1b9 0f00 	cmp.w	r9, #0
 800db46:	d0e5      	beq.n	800db14 <uxr_write_framed_msg+0x204>
 800db48:	2500      	movs	r5, #0
 800db4a:	e001      	b.n	800db50 <uxr_write_framed_msg+0x240>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d0a4      	beq.n	800da9a <uxr_write_framed_msg+0x18a>
 800db50:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800db54:	1b52      	subs	r2, r2, r5
 800db56:	4643      	mov	r3, r8
 800db58:	4421      	add	r1, r4
 800db5a:	4638      	mov	r0, r7
 800db5c:	47b0      	blx	r6
 800db5e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800db62:	4405      	add	r5, r0
 800db64:	4295      	cmp	r5, r2
 800db66:	d3f1      	bcc.n	800db4c <uxr_write_framed_msg+0x23c>
 800db68:	d197      	bne.n	800da9a <uxr_write_framed_msg+0x18a>
 800db6a:	2300      	movs	r3, #0
 800db6c:	fa1f f08b 	uxth.w	r0, fp
 800db70:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800db74:	b005      	add	sp, #20
 800db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7a:	2300      	movs	r3, #0
 800db7c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800db80:	e732      	b.n	800d9e8 <uxr_write_framed_msg+0xd8>
 800db82:	44a6      	add	lr, r4
 800db84:	f085 0520 	eor.w	r5, r5, #32
 800db88:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800db8c:	4610      	mov	r0, r2
 800db8e:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800db92:	464a      	mov	r2, r9
 800db94:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800db98:	e6e5      	b.n	800d966 <uxr_write_framed_msg+0x56>
 800db9a:	f08c 0c20 	eor.w	ip, ip, #32
 800db9e:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800dba2:	2103      	movs	r1, #3
 800dba4:	2004      	movs	r0, #4
 800dba6:	f04f 0906 	mov.w	r9, #6
 800dbaa:	2205      	movs	r2, #5
 800dbac:	4686      	mov	lr, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800dbb4:	e6ca      	b.n	800d94c <uxr_write_framed_msg+0x3c>
 800dbb6:	f8ad b00c 	strh.w	fp, [sp, #12]
 800dbba:	46dc      	mov	ip, fp
 800dbbc:	e779      	b.n	800dab2 <uxr_write_framed_msg+0x1a2>
 800dbbe:	bf00      	nop
 800dbc0:	08014560 	.word	0x08014560

0800dbc4 <uxr_framing_read_transport>:
 800dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc8:	4604      	mov	r4, r0
 800dbca:	b083      	sub	sp, #12
 800dbcc:	461f      	mov	r7, r3
 800dbce:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800dbd2:	4689      	mov	r9, r1
 800dbd4:	4692      	mov	sl, r2
 800dbd6:	f000 fc5d 	bl	800e494 <uxr_millis>
 800dbda:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dbde:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800dbe2:	42b3      	cmp	r3, r6
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	d062      	beq.n	800dcae <uxr_framing_read_transport+0xea>
 800dbe8:	d81c      	bhi.n	800dc24 <uxr_framing_read_transport+0x60>
 800dbea:	1e75      	subs	r5, r6, #1
 800dbec:	1aed      	subs	r5, r5, r3
 800dbee:	b2ed      	uxtb	r5, r5
 800dbf0:	2600      	movs	r6, #0
 800dbf2:	455d      	cmp	r5, fp
 800dbf4:	d81f      	bhi.n	800dc36 <uxr_framing_read_transport+0x72>
 800dbf6:	19ab      	adds	r3, r5, r6
 800dbf8:	455b      	cmp	r3, fp
 800dbfa:	bf84      	itt	hi
 800dbfc:	ebab 0b05 	subhi.w	fp, fp, r5
 800dc00:	fa5f f68b 	uxtbhi.w	r6, fp
 800dc04:	b9e5      	cbnz	r5, 800dc40 <uxr_framing_read_transport+0x7c>
 800dc06:	f04f 0b00 	mov.w	fp, #0
 800dc0a:	f000 fc43 	bl	800e494 <uxr_millis>
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	eba0 0108 	sub.w	r1, r0, r8
 800dc14:	1a5b      	subs	r3, r3, r1
 800dc16:	4658      	mov	r0, fp
 800dc18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dc1c:	603b      	str	r3, [r7, #0]
 800dc1e:	b003      	add	sp, #12
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	2e00      	cmp	r6, #0
 800dc26:	d04a      	beq.n	800dcbe <uxr_framing_read_transport+0xfa>
 800dc28:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800dc2c:	b2dd      	uxtb	r5, r3
 800dc2e:	3e01      	subs	r6, #1
 800dc30:	455d      	cmp	r5, fp
 800dc32:	b2f6      	uxtb	r6, r6
 800dc34:	d9df      	bls.n	800dbf6 <uxr_framing_read_transport+0x32>
 800dc36:	fa5f f58b 	uxtb.w	r5, fp
 800dc3a:	2600      	movs	r6, #0
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	d0e2      	beq.n	800dc06 <uxr_framing_read_transport+0x42>
 800dc40:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800dc44:	3102      	adds	r1, #2
 800dc46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	4421      	add	r1, r4
 800dc4e:	462a      	mov	r2, r5
 800dc50:	4650      	mov	r0, sl
 800dc52:	47c8      	blx	r9
 800dc54:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dc58:	4a1b      	ldr	r2, [pc, #108]	@ (800dcc8 <uxr_framing_read_transport+0x104>)
 800dc5a:	4403      	add	r3, r0
 800dc5c:	0859      	lsrs	r1, r3, #1
 800dc5e:	4683      	mov	fp, r0
 800dc60:	fba2 0101 	umull	r0, r1, r2, r1
 800dc64:	0889      	lsrs	r1, r1, #2
 800dc66:	222a      	movs	r2, #42	@ 0x2a
 800dc68:	fb02 3111 	mls	r1, r2, r1, r3
 800dc6c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800dc70:	f1bb 0f00 	cmp.w	fp, #0
 800dc74:	d0c7      	beq.n	800dc06 <uxr_framing_read_transport+0x42>
 800dc76:	45ab      	cmp	fp, r5
 800dc78:	d1c7      	bne.n	800dc0a <uxr_framing_read_transport+0x46>
 800dc7a:	2e00      	cmp	r6, #0
 800dc7c:	d0c5      	beq.n	800dc0a <uxr_framing_read_transport+0x46>
 800dc7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	3102      	adds	r1, #2
 800dc84:	4632      	mov	r2, r6
 800dc86:	4421      	add	r1, r4
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4650      	mov	r0, sl
 800dc8c:	47c8      	blx	r9
 800dc8e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800dc92:	4a0d      	ldr	r2, [pc, #52]	@ (800dcc8 <uxr_framing_read_transport+0x104>)
 800dc94:	4403      	add	r3, r0
 800dc96:	0859      	lsrs	r1, r3, #1
 800dc98:	fba2 2101 	umull	r2, r1, r2, r1
 800dc9c:	0889      	lsrs	r1, r1, #2
 800dc9e:	222a      	movs	r2, #42	@ 0x2a
 800dca0:	fb02 3311 	mls	r3, r2, r1, r3
 800dca4:	eb00 0b05 	add.w	fp, r0, r5
 800dca8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800dcac:	e7ad      	b.n	800dc0a <uxr_framing_read_transport+0x46>
 800dcae:	2600      	movs	r6, #0
 800dcb0:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800dcb4:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800dcb6:	d9be      	bls.n	800dc36 <uxr_framing_read_transport+0x72>
 800dcb8:	2529      	movs	r5, #41	@ 0x29
 800dcba:	2102      	movs	r1, #2
 800dcbc:	e7c3      	b.n	800dc46 <uxr_framing_read_transport+0x82>
 800dcbe:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800dcc2:	b2dd      	uxtb	r5, r3
 800dcc4:	e795      	b.n	800dbf2 <uxr_framing_read_transport+0x2e>
 800dcc6:	bf00      	nop
 800dcc8:	30c30c31 	.word	0x30c30c31

0800dccc <uxr_read_framed_msg>:
 800dccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd0:	461d      	mov	r5, r3
 800dcd2:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800dcd6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800dcda:	b085      	sub	sp, #20
 800dcdc:	459c      	cmp	ip, r3
 800dcde:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800dce2:	4604      	mov	r4, r0
 800dce4:	460f      	mov	r7, r1
 800dce6:	4616      	mov	r6, r2
 800dce8:	f000 81ae 	beq.w	800e048 <uxr_read_framed_msg+0x37c>
 800dcec:	2000      	movs	r0, #0
 800dcee:	4639      	mov	r1, r7
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d138      	bne.n	800dd66 <uxr_read_framed_msg+0x9a>
 800dcf4:	468a      	mov	sl, r1
 800dcf6:	7823      	ldrb	r3, [r4, #0]
 800dcf8:	2b07      	cmp	r3, #7
 800dcfa:	d8fd      	bhi.n	800dcf8 <uxr_read_framed_msg+0x2c>
 800dcfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dd00:	0116013b 	.word	0x0116013b
 800dd04:	00cd00f0 	.word	0x00cd00f0
 800dd08:	005a00a0 	.word	0x005a00a0
 800dd0c:	00080037 	.word	0x00080037
 800dd10:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800dd14:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dd18:	4290      	cmp	r0, r2
 800dd1a:	f000 8167 	beq.w	800dfec <uxr_read_framed_msg+0x320>
 800dd1e:	18a3      	adds	r3, r4, r2
 800dd20:	1c57      	adds	r7, r2, #1
 800dd22:	49c7      	ldr	r1, [pc, #796]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800dd24:	f893 c002 	ldrb.w	ip, [r3, #2]
 800dd28:	087b      	lsrs	r3, r7, #1
 800dd2a:	fba1 8303 	umull	r8, r3, r1, r3
 800dd2e:	089b      	lsrs	r3, r3, #2
 800dd30:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dd34:	fb08 7313 	mls	r3, r8, r3, r7
 800dd38:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800dd3c:	b2df      	uxtb	r7, r3
 800dd3e:	f000 81b2 	beq.w	800e0a6 <uxr_read_framed_msg+0x3da>
 800dd42:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800dd46:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800dd4a:	f000 8220 	beq.w	800e18e <uxr_read_framed_msg+0x4c2>
 800dd4e:	4661      	mov	r1, ip
 800dd50:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800dd52:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800dd54:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800dd60:	7021      	strb	r1, [r4, #0]
 800dd62:	f000 8198 	beq.w	800e096 <uxr_read_framed_msg+0x3ca>
 800dd66:	2000      	movs	r0, #0
 800dd68:	b005      	add	sp, #20
 800dd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd6e:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800dd72:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dd76:	4297      	cmp	r7, r2
 800dd78:	f000 8148 	beq.w	800e00c <uxr_read_framed_msg+0x340>
 800dd7c:	18a3      	adds	r3, r4, r2
 800dd7e:	f102 0c01 	add.w	ip, r2, #1
 800dd82:	49af      	ldr	r1, [pc, #700]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800dd84:	7898      	ldrb	r0, [r3, #2]
 800dd86:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800dd8a:	fba1 8303 	umull	r8, r3, r1, r3
 800dd8e:	089b      	lsrs	r3, r3, #2
 800dd90:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dd94:	fb08 c313 	mls	r3, r8, r3, ip
 800dd98:	287d      	cmp	r0, #125	@ 0x7d
 800dd9a:	fa5f fc83 	uxtb.w	ip, r3
 800dd9e:	f000 8194 	beq.w	800e0ca <uxr_read_framed_msg+0x3fe>
 800dda2:	287e      	cmp	r0, #126	@ 0x7e
 800dda4:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800dda8:	f000 8200 	beq.w	800e1ac <uxr_read_framed_msg+0x4e0>
 800ddac:	2307      	movs	r3, #7
 800ddae:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800ddb0:	7023      	strb	r3, [r4, #0]
 800ddb2:	e7a0      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800ddb4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ddb6:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800ddb8:	429f      	cmp	r7, r3
 800ddba:	f240 8164 	bls.w	800e086 <uxr_read_framed_msg+0x3ba>
 800ddbe:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800e040 <uxr_read_framed_msg+0x374>
 800ddc2:	f8cd a00c 	str.w	sl, [sp, #12]
 800ddc6:	212a      	movs	r1, #42	@ 0x2a
 800ddc8:	e01f      	b.n	800de0a <uxr_read_framed_msg+0x13e>
 800ddca:	f89a e002 	ldrb.w	lr, [sl, #2]
 800ddce:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800ddd2:	f000 80ea 	beq.w	800dfaa <uxr_read_framed_msg+0x2de>
 800ddd6:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800ddda:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ddde:	f000 8142 	beq.w	800e066 <uxr_read_framed_msg+0x39a>
 800dde2:	f805 e003 	strb.w	lr, [r5, r3]
 800dde6:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800dde8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ddea:	4f96      	ldr	r7, [pc, #600]	@ (800e044 <uxr_read_framed_msg+0x378>)
 800ddec:	ea80 020e 	eor.w	r2, r0, lr
 800ddf0:	b2d2      	uxtb	r2, r2
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800ddf8:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800de00:	42bb      	cmp	r3, r7
 800de02:	8663      	strh	r3, [r4, #50]	@ 0x32
 800de04:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800de06:	f080 80e7 	bcs.w	800dfd8 <uxr_read_framed_msg+0x30c>
 800de0a:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800de0e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800de12:	f100 0c01 	add.w	ip, r0, #1
 800de16:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800de1a:	fba9 e20e 	umull	lr, r2, r9, lr
 800de1e:	0892      	lsrs	r2, r2, #2
 800de20:	fb01 c212 	mls	r2, r1, r2, ip
 800de24:	4580      	cmp	r8, r0
 800de26:	eb04 0a00 	add.w	sl, r4, r0
 800de2a:	fa5f fc82 	uxtb.w	ip, r2
 800de2e:	d1cc      	bne.n	800ddca <uxr_read_framed_msg+0xfe>
 800de30:	42bb      	cmp	r3, r7
 800de32:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800de36:	f040 8128 	bne.w	800e08a <uxr_read_framed_msg+0x3be>
 800de3a:	2306      	movs	r3, #6
 800de3c:	7023      	strb	r3, [r4, #0]
 800de3e:	e75a      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800de40:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800de44:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800de48:	4297      	cmp	r7, r2
 800de4a:	f000 80cf 	beq.w	800dfec <uxr_read_framed_msg+0x320>
 800de4e:	18a3      	adds	r3, r4, r2
 800de50:	f102 0c01 	add.w	ip, r2, #1
 800de54:	497a      	ldr	r1, [pc, #488]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800de56:	7898      	ldrb	r0, [r3, #2]
 800de58:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800de5c:	fba1 8303 	umull	r8, r3, r1, r3
 800de60:	089b      	lsrs	r3, r3, #2
 800de62:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800de66:	fb08 c313 	mls	r3, r8, r3, ip
 800de6a:	287d      	cmp	r0, #125	@ 0x7d
 800de6c:	fa5f fc83 	uxtb.w	ip, r3
 800de70:	f000 813d 	beq.w	800e0ee <uxr_read_framed_msg+0x422>
 800de74:	287e      	cmp	r0, #126	@ 0x7e
 800de76:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800de7a:	f000 8188 	beq.w	800e18e <uxr_read_framed_msg+0x4c2>
 800de7e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800de80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800de82:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800de86:	b29b      	uxth	r3, r3
 800de88:	2200      	movs	r2, #0
 800de8a:	428b      	cmp	r3, r1
 800de8c:	8623      	strh	r3, [r4, #48]	@ 0x30
 800de8e:	8662      	strh	r2, [r4, #50]	@ 0x32
 800de90:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800de92:	f240 80f5 	bls.w	800e080 <uxr_read_framed_msg+0x3b4>
 800de96:	7022      	strb	r2, [r4, #0]
 800de98:	e765      	b.n	800dd66 <uxr_read_framed_msg+0x9a>
 800de9a:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800de9e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dea2:	4297      	cmp	r7, r2
 800dea4:	f000 80b2 	beq.w	800e00c <uxr_read_framed_msg+0x340>
 800dea8:	18a3      	adds	r3, r4, r2
 800deaa:	f102 0c01 	add.w	ip, r2, #1
 800deae:	4964      	ldr	r1, [pc, #400]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800deb0:	7898      	ldrb	r0, [r3, #2]
 800deb2:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800deb6:	fba1 8303 	umull	r8, r3, r1, r3
 800deba:	089b      	lsrs	r3, r3, #2
 800debc:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800dec0:	fb08 c313 	mls	r3, r8, r3, ip
 800dec4:	287d      	cmp	r0, #125	@ 0x7d
 800dec6:	fa5f fc83 	uxtb.w	ip, r3
 800deca:	f000 813b 	beq.w	800e144 <uxr_read_framed_msg+0x478>
 800dece:	287e      	cmp	r0, #126	@ 0x7e
 800ded0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ded4:	f000 816a 	beq.w	800e1ac <uxr_read_framed_msg+0x4e0>
 800ded8:	2304      	movs	r3, #4
 800deda:	8620      	strh	r0, [r4, #48]	@ 0x30
 800dedc:	7023      	strb	r3, [r4, #0]
 800dede:	e70a      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800dee0:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800dee4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800dee8:	4297      	cmp	r7, r2
 800deea:	f000 80c4 	beq.w	800e076 <uxr_read_framed_msg+0x3aa>
 800deee:	18a3      	adds	r3, r4, r2
 800def0:	f102 0c01 	add.w	ip, r2, #1
 800def4:	4952      	ldr	r1, [pc, #328]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800def6:	7898      	ldrb	r0, [r3, #2]
 800def8:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800defc:	fba1 8303 	umull	r8, r3, r1, r3
 800df00:	089b      	lsrs	r3, r3, #2
 800df02:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800df06:	fb08 c313 	mls	r3, r8, r3, ip
 800df0a:	287d      	cmp	r0, #125	@ 0x7d
 800df0c:	fa5f fc83 	uxtb.w	ip, r3
 800df10:	f000 812b 	beq.w	800e16a <uxr_read_framed_msg+0x49e>
 800df14:	287e      	cmp	r0, #126	@ 0x7e
 800df16:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800df1a:	f000 8155 	beq.w	800e1c8 <uxr_read_framed_msg+0x4fc>
 800df1e:	7863      	ldrb	r3, [r4, #1]
 800df20:	4283      	cmp	r3, r0
 800df22:	bf0c      	ite	eq
 800df24:	2303      	moveq	r3, #3
 800df26:	2300      	movne	r3, #0
 800df28:	7023      	strb	r3, [r4, #0]
 800df2a:	e6e4      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800df2c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800df30:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800df34:	2300      	movs	r3, #0
 800df36:	4290      	cmp	r0, r2
 800df38:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800df3c:	d06b      	beq.n	800e016 <uxr_read_framed_msg+0x34a>
 800df3e:	18a3      	adds	r3, r4, r2
 800df40:	f102 0c01 	add.w	ip, r2, #1
 800df44:	493e      	ldr	r1, [pc, #248]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800df46:	789f      	ldrb	r7, [r3, #2]
 800df48:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800df4c:	fba1 8303 	umull	r8, r3, r1, r3
 800df50:	089b      	lsrs	r3, r3, #2
 800df52:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800df56:	fb08 c313 	mls	r3, r8, r3, ip
 800df5a:	2f7d      	cmp	r7, #125	@ 0x7d
 800df5c:	fa5f fc83 	uxtb.w	ip, r3
 800df60:	f000 80d8 	beq.w	800e114 <uxr_read_framed_msg+0x448>
 800df64:	2f7e      	cmp	r7, #126	@ 0x7e
 800df66:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800df6a:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800df6e:	d052      	beq.n	800e016 <uxr_read_framed_msg+0x34a>
 800df70:	2302      	movs	r3, #2
 800df72:	7023      	strb	r3, [r4, #0]
 800df74:	e6bf      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800df76:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800df7a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800df7e:	4930      	ldr	r1, [pc, #192]	@ (800e040 <uxr_read_framed_msg+0x374>)
 800df80:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800df84:	e004      	b.n	800df90 <uxr_read_framed_msg+0x2c4>
 800df86:	78bb      	ldrb	r3, [r7, #2]
 800df88:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800df8c:	2b7e      	cmp	r3, #126	@ 0x7e
 800df8e:	d02a      	beq.n	800dfe6 <uxr_read_framed_msg+0x31a>
 800df90:	1c50      	adds	r0, r2, #1
 800df92:	0843      	lsrs	r3, r0, #1
 800df94:	fba1 e303 	umull	lr, r3, r1, r3
 800df98:	089b      	lsrs	r3, r3, #2
 800df9a:	fb0c 0013 	mls	r0, ip, r3, r0
 800df9e:	4590      	cmp	r8, r2
 800dfa0:	eb04 0702 	add.w	r7, r4, r2
 800dfa4:	b2c2      	uxtb	r2, r0
 800dfa6:	d1ee      	bne.n	800df86 <uxr_read_framed_msg+0x2ba>
 800dfa8:	e6dd      	b.n	800dd66 <uxr_read_framed_msg+0x9a>
 800dfaa:	3002      	adds	r0, #2
 800dfac:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800dfb0:	eb04 0a02 	add.w	sl, r4, r2
 800dfb4:	fba9 e20e 	umull	lr, r2, r9, lr
 800dfb8:	0892      	lsrs	r2, r2, #2
 800dfba:	45e0      	cmp	r8, ip
 800dfbc:	fb01 0012 	mls	r0, r1, r2, r0
 800dfc0:	f43f af36 	beq.w	800de30 <uxr_read_framed_msg+0x164>
 800dfc4:	f89a e002 	ldrb.w	lr, [sl, #2]
 800dfc8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800dfcc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800dfd0:	d049      	beq.n	800e066 <uxr_read_framed_msg+0x39a>
 800dfd2:	f08e 0e20 	eor.w	lr, lr, #32
 800dfd6:	e704      	b.n	800dde2 <uxr_read_framed_msg+0x116>
 800dfd8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800dfdc:	f43f af2d 	beq.w	800de3a <uxr_read_framed_msg+0x16e>
 800dfe0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800dfe4:	d151      	bne.n	800e08a <uxr_read_framed_msg+0x3be>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	7023      	strb	r3, [r4, #0]
 800dfea:	e684      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800dfec:	4651      	mov	r1, sl
 800dfee:	f8cd b000 	str.w	fp, [sp]
 800dff2:	2301      	movs	r3, #1
 800dff4:	9301      	str	r3, [sp, #4]
 800dff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dff8:	9103      	str	r1, [sp, #12]
 800dffa:	4632      	mov	r2, r6
 800dffc:	4620      	mov	r0, r4
 800dffe:	f7ff fde1 	bl	800dbc4 <uxr_framing_read_transport>
 800e002:	fab0 f080 	clz	r0, r0
 800e006:	9903      	ldr	r1, [sp, #12]
 800e008:	0940      	lsrs	r0, r0, #5
 800e00a:	e671      	b.n	800dcf0 <uxr_read_framed_msg+0x24>
 800e00c:	4651      	mov	r1, sl
 800e00e:	f8cd b000 	str.w	fp, [sp]
 800e012:	2302      	movs	r3, #2
 800e014:	e7ee      	b.n	800dff4 <uxr_read_framed_msg+0x328>
 800e016:	2304      	movs	r3, #4
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	f8cd b000 	str.w	fp, [sp]
 800e01e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e020:	4632      	mov	r2, r6
 800e022:	4651      	mov	r1, sl
 800e024:	4620      	mov	r0, r4
 800e026:	f7ff fdcd 	bl	800dbc4 <uxr_framing_read_transport>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	f47f ae63 	bne.w	800dcf6 <uxr_read_framed_msg+0x2a>
 800e030:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800e034:	387e      	subs	r0, #126	@ 0x7e
 800e036:	4651      	mov	r1, sl
 800e038:	bf18      	it	ne
 800e03a:	2001      	movne	r0, #1
 800e03c:	e658      	b.n	800dcf0 <uxr_read_framed_msg+0x24>
 800e03e:	bf00      	nop
 800e040:	30c30c31 	.word	0x30c30c31
 800e044:	08014560 	.word	0x08014560
 800e048:	2305      	movs	r3, #5
 800e04a:	9301      	str	r3, [sp, #4]
 800e04c:	f8cd b000 	str.w	fp, [sp]
 800e050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e052:	f7ff fdb7 	bl	800dbc4 <uxr_framing_read_transport>
 800e056:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800e05a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e05e:	429a      	cmp	r2, r3
 800e060:	f43f ae81 	beq.w	800dd66 <uxr_read_framed_msg+0x9a>
 800e064:	e642      	b.n	800dcec <uxr_read_framed_msg+0x20>
 800e066:	42bb      	cmp	r3, r7
 800e068:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800e06c:	f43f aee5 	beq.w	800de3a <uxr_read_framed_msg+0x16e>
 800e070:	2301      	movs	r3, #1
 800e072:	7023      	strb	r3, [r4, #0]
 800e074:	e63f      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800e076:	4651      	mov	r1, sl
 800e078:	f8cd b000 	str.w	fp, [sp]
 800e07c:	2303      	movs	r3, #3
 800e07e:	e7b9      	b.n	800dff4 <uxr_read_framed_msg+0x328>
 800e080:	2305      	movs	r3, #5
 800e082:	7023      	strb	r3, [r4, #0]
 800e084:	e637      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800e086:	f43f aed8 	beq.w	800de3a <uxr_read_framed_msg+0x16e>
 800e08a:	1afb      	subs	r3, r7, r3
 800e08c:	3302      	adds	r3, #2
 800e08e:	e9cd b300 	strd	fp, r3, [sp]
 800e092:	4651      	mov	r1, sl
 800e094:	e7af      	b.n	800dff6 <uxr_read_framed_msg+0x32a>
 800e096:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e098:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e09c:	7013      	strb	r3, [r2, #0]
 800e09e:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800e0a0:	b005      	add	sp, #20
 800e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a6:	4287      	cmp	r7, r0
 800e0a8:	d0a0      	beq.n	800dfec <uxr_read_framed_msg+0x320>
 800e0aa:	4423      	add	r3, r4
 800e0ac:	3202      	adds	r2, #2
 800e0ae:	7898      	ldrb	r0, [r3, #2]
 800e0b0:	0853      	lsrs	r3, r2, #1
 800e0b2:	fba1 e303 	umull	lr, r3, r1, r3
 800e0b6:	089b      	lsrs	r3, r3, #2
 800e0b8:	fb08 2213 	mls	r2, r8, r3, r2
 800e0bc:	287e      	cmp	r0, #126	@ 0x7e
 800e0be:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e0c2:	d064      	beq.n	800e18e <uxr_read_framed_msg+0x4c2>
 800e0c4:	f080 0120 	eor.w	r1, r0, #32
 800e0c8:	e642      	b.n	800dd50 <uxr_read_framed_msg+0x84>
 800e0ca:	45bc      	cmp	ip, r7
 800e0cc:	d09e      	beq.n	800e00c <uxr_read_framed_msg+0x340>
 800e0ce:	4423      	add	r3, r4
 800e0d0:	3202      	adds	r2, #2
 800e0d2:	7898      	ldrb	r0, [r3, #2]
 800e0d4:	0853      	lsrs	r3, r2, #1
 800e0d6:	fba1 e303 	umull	lr, r3, r1, r3
 800e0da:	089b      	lsrs	r3, r3, #2
 800e0dc:	fb08 2213 	mls	r2, r8, r3, r2
 800e0e0:	287e      	cmp	r0, #126	@ 0x7e
 800e0e2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e0e6:	d061      	beq.n	800e1ac <uxr_read_framed_msg+0x4e0>
 800e0e8:	f080 0020 	eor.w	r0, r0, #32
 800e0ec:	e65e      	b.n	800ddac <uxr_read_framed_msg+0xe0>
 800e0ee:	4567      	cmp	r7, ip
 800e0f0:	f43f af7c 	beq.w	800dfec <uxr_read_framed_msg+0x320>
 800e0f4:	4423      	add	r3, r4
 800e0f6:	3202      	adds	r2, #2
 800e0f8:	7898      	ldrb	r0, [r3, #2]
 800e0fa:	0853      	lsrs	r3, r2, #1
 800e0fc:	fba1 e303 	umull	lr, r3, r1, r3
 800e100:	089b      	lsrs	r3, r3, #2
 800e102:	fb08 2213 	mls	r2, r8, r3, r2
 800e106:	287e      	cmp	r0, #126	@ 0x7e
 800e108:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e10c:	d03f      	beq.n	800e18e <uxr_read_framed_msg+0x4c2>
 800e10e:	f080 0020 	eor.w	r0, r0, #32
 800e112:	e6b4      	b.n	800de7e <uxr_read_framed_msg+0x1b2>
 800e114:	4560      	cmp	r0, ip
 800e116:	f43f af7e 	beq.w	800e016 <uxr_read_framed_msg+0x34a>
 800e11a:	4423      	add	r3, r4
 800e11c:	3202      	adds	r2, #2
 800e11e:	7898      	ldrb	r0, [r3, #2]
 800e120:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e124:	0853      	lsrs	r3, r2, #1
 800e126:	fba1 e303 	umull	lr, r3, r1, r3
 800e12a:	089b      	lsrs	r3, r3, #2
 800e12c:	fb08 2213 	mls	r2, r8, r3, r2
 800e130:	287e      	cmp	r0, #126	@ 0x7e
 800e132:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e136:	f43f af6e 	beq.w	800e016 <uxr_read_framed_msg+0x34a>
 800e13a:	f080 0020 	eor.w	r0, r0, #32
 800e13e:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e142:	e715      	b.n	800df70 <uxr_read_framed_msg+0x2a4>
 800e144:	4567      	cmp	r7, ip
 800e146:	f43f af61 	beq.w	800e00c <uxr_read_framed_msg+0x340>
 800e14a:	4423      	add	r3, r4
 800e14c:	3202      	adds	r2, #2
 800e14e:	7898      	ldrb	r0, [r3, #2]
 800e150:	0853      	lsrs	r3, r2, #1
 800e152:	fba1 e303 	umull	lr, r3, r1, r3
 800e156:	089b      	lsrs	r3, r3, #2
 800e158:	fb08 2213 	mls	r2, r8, r3, r2
 800e15c:	287e      	cmp	r0, #126	@ 0x7e
 800e15e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e162:	d023      	beq.n	800e1ac <uxr_read_framed_msg+0x4e0>
 800e164:	f080 0020 	eor.w	r0, r0, #32
 800e168:	e6b6      	b.n	800ded8 <uxr_read_framed_msg+0x20c>
 800e16a:	45bc      	cmp	ip, r7
 800e16c:	d083      	beq.n	800e076 <uxr_read_framed_msg+0x3aa>
 800e16e:	4423      	add	r3, r4
 800e170:	3202      	adds	r2, #2
 800e172:	7898      	ldrb	r0, [r3, #2]
 800e174:	0853      	lsrs	r3, r2, #1
 800e176:	fba1 e303 	umull	lr, r3, r1, r3
 800e17a:	089b      	lsrs	r3, r3, #2
 800e17c:	fb08 2213 	mls	r2, r8, r3, r2
 800e180:	287e      	cmp	r0, #126	@ 0x7e
 800e182:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e186:	d01f      	beq.n	800e1c8 <uxr_read_framed_msg+0x4fc>
 800e188:	f080 0020 	eor.w	r0, r0, #32
 800e18c:	e6c7      	b.n	800df1e <uxr_read_framed_msg+0x252>
 800e18e:	2701      	movs	r7, #1
 800e190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e192:	f8cd b000 	str.w	fp, [sp]
 800e196:	9701      	str	r7, [sp, #4]
 800e198:	4632      	mov	r2, r6
 800e19a:	4651      	mov	r1, sl
 800e19c:	4620      	mov	r0, r4
 800e19e:	f7ff fd11 	bl	800dbc4 <uxr_framing_read_transport>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	f47f ada7 	bne.w	800dcf6 <uxr_read_framed_msg+0x2a>
 800e1a8:	7027      	strb	r7, [r4, #0]
 800e1aa:	e5a4      	b.n	800dcf6 <uxr_read_framed_msg+0x2a>
 800e1ac:	f8cd b000 	str.w	fp, [sp]
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	9301      	str	r3, [sp, #4]
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e1b8:	4651      	mov	r1, sl
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f7ff fd02 	bl	800dbc4 <uxr_framing_read_transport>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	f47f ad98 	bne.w	800dcf6 <uxr_read_framed_msg+0x2a>
 800e1c6:	e70e      	b.n	800dfe6 <uxr_read_framed_msg+0x31a>
 800e1c8:	f8cd b000 	str.w	fp, [sp]
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e7f0      	b.n	800e1b2 <uxr_read_framed_msg+0x4e6>

0800e1d0 <uxr_stream_id>:
 800e1d0:	2901      	cmp	r1, #1
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	d011      	beq.n	800e1fc <uxr_stream_id+0x2c>
 800e1d8:	2902      	cmp	r1, #2
 800e1da:	f04f 0c00 	mov.w	ip, #0
 800e1de:	d00a      	beq.n	800e1f6 <uxr_stream_id+0x26>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	f36c 0007 	bfi	r0, ip, #0, #8
 800e1e6:	f363 200f 	bfi	r0, r3, #8, #8
 800e1ea:	f361 4017 	bfi	r0, r1, #16, #8
 800e1ee:	f362 601f 	bfi	r0, r2, #24, #8
 800e1f2:	b002      	add	sp, #8
 800e1f4:	4770      	bx	lr
 800e1f6:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e1fa:	e7f1      	b.n	800e1e0 <uxr_stream_id+0x10>
 800e1fc:	f100 0c01 	add.w	ip, r0, #1
 800e200:	fa5f fc8c 	uxtb.w	ip, ip
 800e204:	e7ec      	b.n	800e1e0 <uxr_stream_id+0x10>
 800e206:	bf00      	nop

0800e208 <uxr_stream_id_from_raw>:
 800e208:	b082      	sub	sp, #8
 800e20a:	4603      	mov	r3, r0
 800e20c:	b130      	cbz	r0, 800e21c <uxr_stream_id_from_raw+0x14>
 800e20e:	0602      	lsls	r2, r0, #24
 800e210:	d411      	bmi.n	800e236 <uxr_stream_id_from_raw+0x2e>
 800e212:	1e42      	subs	r2, r0, #1
 800e214:	b2d2      	uxtb	r2, r2
 800e216:	f04f 0c01 	mov.w	ip, #1
 800e21a:	e001      	b.n	800e220 <uxr_stream_id_from_raw+0x18>
 800e21c:	4684      	mov	ip, r0
 800e21e:	4602      	mov	r2, r0
 800e220:	2000      	movs	r0, #0
 800e222:	f363 0007 	bfi	r0, r3, #0, #8
 800e226:	f362 200f 	bfi	r0, r2, #8, #8
 800e22a:	f36c 4017 	bfi	r0, ip, #16, #8
 800e22e:	f361 601f 	bfi	r0, r1, #24, #8
 800e232:	b002      	add	sp, #8
 800e234:	4770      	bx	lr
 800e236:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e23a:	f04f 0c02 	mov.w	ip, #2
 800e23e:	e7ef      	b.n	800e220 <uxr_stream_id_from_raw+0x18>

0800e240 <uxr_init_stream_storage>:
 800e240:	2300      	movs	r3, #0
 800e242:	7403      	strb	r3, [r0, #16]
 800e244:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e248:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e24c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop

0800e254 <uxr_reset_stream_storage>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	7c03      	ldrb	r3, [r0, #16]
 800e258:	4604      	mov	r4, r0
 800e25a:	b153      	cbz	r3, 800e272 <uxr_reset_stream_storage+0x1e>
 800e25c:	4606      	mov	r6, r0
 800e25e:	2500      	movs	r5, #0
 800e260:	4630      	mov	r0, r6
 800e262:	f003 f98d 	bl	8011580 <uxr_reset_output_best_effort_stream>
 800e266:	7c23      	ldrb	r3, [r4, #16]
 800e268:	3501      	adds	r5, #1
 800e26a:	42ab      	cmp	r3, r5
 800e26c:	f106 0610 	add.w	r6, r6, #16
 800e270:	d8f6      	bhi.n	800e260 <uxr_reset_stream_storage+0xc>
 800e272:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e276:	b163      	cbz	r3, 800e292 <uxr_reset_stream_storage+0x3e>
 800e278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e27c:	2500      	movs	r5, #0
 800e27e:	4630      	mov	r0, r6
 800e280:	f002 ff8e 	bl	80111a0 <uxr_reset_input_best_effort_stream>
 800e284:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e288:	3501      	adds	r5, #1
 800e28a:	42ab      	cmp	r3, r5
 800e28c:	f106 0602 	add.w	r6, r6, #2
 800e290:	d8f5      	bhi.n	800e27e <uxr_reset_stream_storage+0x2a>
 800e292:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e296:	b163      	cbz	r3, 800e2b2 <uxr_reset_stream_storage+0x5e>
 800e298:	f104 0618 	add.w	r6, r4, #24
 800e29c:	2500      	movs	r5, #0
 800e29e:	4630      	mov	r0, r6
 800e2a0:	f003 fa18 	bl	80116d4 <uxr_reset_output_reliable_stream>
 800e2a4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e2a8:	3501      	adds	r5, #1
 800e2aa:	42ab      	cmp	r3, r5
 800e2ac:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e2b0:	d8f5      	bhi.n	800e29e <uxr_reset_stream_storage+0x4a>
 800e2b2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e2b6:	b163      	cbz	r3, 800e2d2 <uxr_reset_stream_storage+0x7e>
 800e2b8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e2bc:	2500      	movs	r5, #0
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f002 ffde 	bl	8011280 <uxr_reset_input_reliable_stream>
 800e2c4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	42ab      	cmp	r3, r5
 800e2cc:	f106 0618 	add.w	r6, r6, #24
 800e2d0:	d8f5      	bhi.n	800e2be <uxr_reset_stream_storage+0x6a>
 800e2d2:	bd70      	pop	{r4, r5, r6, pc}

0800e2d4 <uxr_add_output_best_effort_buffer>:
 800e2d4:	b510      	push	{r4, lr}
 800e2d6:	7c04      	ldrb	r4, [r0, #16]
 800e2d8:	f104 0c01 	add.w	ip, r4, #1
 800e2dc:	b082      	sub	sp, #8
 800e2de:	f880 c010 	strb.w	ip, [r0, #16]
 800e2e2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e2e6:	f003 f941 	bl	801156c <uxr_init_output_best_effort_stream>
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	b002      	add	sp, #8
 800e2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2f6:	f7ff bf6b 	b.w	800e1d0 <uxr_stream_id>
 800e2fa:	bf00      	nop

0800e2fc <uxr_add_output_reliable_buffer>:
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	4684      	mov	ip, r0
 800e302:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e306:	9000      	str	r0, [sp, #0]
 800e308:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e30c:	2028      	movs	r0, #40	@ 0x28
 800e30e:	fb00 c004 	mla	r0, r0, r4, ip
 800e312:	f104 0e01 	add.w	lr, r4, #1
 800e316:	3018      	adds	r0, #24
 800e318:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e31c:	f003 f9a2 	bl	8011664 <uxr_init_output_reliable_stream>
 800e320:	2201      	movs	r2, #1
 800e322:	2102      	movs	r1, #2
 800e324:	4620      	mov	r0, r4
 800e326:	b004      	add	sp, #16
 800e328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e32c:	f7ff bf50 	b.w	800e1d0 <uxr_stream_id>

0800e330 <uxr_add_input_best_effort_buffer>:
 800e330:	b510      	push	{r4, lr}
 800e332:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e336:	1c62      	adds	r2, r4, #1
 800e338:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e33c:	b082      	sub	sp, #8
 800e33e:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800e342:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e346:	f002 ff27 	bl	8011198 <uxr_init_input_best_effort_stream>
 800e34a:	2200      	movs	r2, #0
 800e34c:	2101      	movs	r1, #1
 800e34e:	4620      	mov	r0, r4
 800e350:	b002      	add	sp, #8
 800e352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e356:	f7ff bf3b 	b.w	800e1d0 <uxr_stream_id>
 800e35a:	bf00      	nop

0800e35c <uxr_add_input_reliable_buffer>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	4684      	mov	ip, r0
 800e362:	9806      	ldr	r0, [sp, #24]
 800e364:	9000      	str	r0, [sp, #0]
 800e366:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e36a:	2018      	movs	r0, #24
 800e36c:	fb00 c004 	mla	r0, r0, r4, ip
 800e370:	f104 0e01 	add.w	lr, r4, #1
 800e374:	3048      	adds	r0, #72	@ 0x48
 800e376:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e37a:	f002 ff55 	bl	8011228 <uxr_init_input_reliable_stream>
 800e37e:	2200      	movs	r2, #0
 800e380:	2102      	movs	r1, #2
 800e382:	4620      	mov	r0, r4
 800e384:	b004      	add	sp, #16
 800e386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e38a:	f7ff bf21 	b.w	800e1d0 <uxr_stream_id>
 800e38e:	bf00      	nop

0800e390 <uxr_get_output_best_effort_stream>:
 800e390:	7c03      	ldrb	r3, [r0, #16]
 800e392:	428b      	cmp	r3, r1
 800e394:	bf8c      	ite	hi
 800e396:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e39a:	2000      	movls	r0, #0
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop

0800e3a0 <uxr_get_output_reliable_stream>:
 800e3a0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e3a4:	428b      	cmp	r3, r1
 800e3a6:	bf83      	ittte	hi
 800e3a8:	2328      	movhi	r3, #40	@ 0x28
 800e3aa:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e3ae:	3018      	addhi	r0, #24
 800e3b0:	2000      	movls	r0, #0
 800e3b2:	4770      	bx	lr

0800e3b4 <uxr_get_input_best_effort_stream>:
 800e3b4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e3b8:	428b      	cmp	r3, r1
 800e3ba:	bf86      	itte	hi
 800e3bc:	3121      	addhi	r1, #33	@ 0x21
 800e3be:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e3c2:	2000      	movls	r0, #0
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop

0800e3c8 <uxr_get_input_reliable_stream>:
 800e3c8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf83      	ittte	hi
 800e3d0:	2318      	movhi	r3, #24
 800e3d2:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e3d6:	3048      	addhi	r0, #72	@ 0x48
 800e3d8:	2000      	movls	r0, #0
 800e3da:	4770      	bx	lr

0800e3dc <uxr_output_streams_confirmed>:
 800e3dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e3e0:	b183      	cbz	r3, 800e404 <uxr_output_streams_confirmed+0x28>
 800e3e2:	b570      	push	{r4, r5, r6, lr}
 800e3e4:	4606      	mov	r6, r0
 800e3e6:	f100 0518 	add.w	r5, r0, #24
 800e3ea:	2400      	movs	r4, #0
 800e3ec:	e001      	b.n	800e3f2 <uxr_output_streams_confirmed+0x16>
 800e3ee:	3528      	adds	r5, #40	@ 0x28
 800e3f0:	b138      	cbz	r0, 800e402 <uxr_output_streams_confirmed+0x26>
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f003 fbd6 	bl	8011ba4 <uxr_is_output_up_to_date>
 800e3f8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e3fc:	3401      	adds	r4, #1
 800e3fe:	42a3      	cmp	r3, r4
 800e400:	d8f5      	bhi.n	800e3ee <uxr_output_streams_confirmed+0x12>
 800e402:	bd70      	pop	{r4, r5, r6, pc}
 800e404:	2001      	movs	r0, #1
 800e406:	4770      	bx	lr

0800e408 <uxr_buffer_submessage_header>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	4604      	mov	r4, r0
 800e40c:	460e      	mov	r6, r1
 800e40e:	2104      	movs	r1, #4
 800e410:	4615      	mov	r5, r2
 800e412:	461f      	mov	r7, r3
 800e414:	f7fa fca0 	bl	8008d58 <ucdr_align_to>
 800e418:	2301      	movs	r3, #1
 800e41a:	7523      	strb	r3, [r4, #20]
 800e41c:	f047 0201 	orr.w	r2, r7, #1
 800e420:	462b      	mov	r3, r5
 800e422:	4631      	mov	r1, r6
 800e424:	4620      	mov	r0, r4
 800e426:	f000 fa2b 	bl	800e880 <uxr_serialize_submessage_header>
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7fa fcaa 	bl	8008d84 <ucdr_buffer_remaining>
 800e430:	42a8      	cmp	r0, r5
 800e432:	bf34      	ite	cc
 800e434:	2000      	movcc	r0, #0
 800e436:	2001      	movcs	r0, #1
 800e438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e43a:	bf00      	nop

0800e43c <uxr_read_submessage_header>:
 800e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e440:	4604      	mov	r4, r0
 800e442:	460d      	mov	r5, r1
 800e444:	2104      	movs	r1, #4
 800e446:	4616      	mov	r6, r2
 800e448:	4698      	mov	r8, r3
 800e44a:	f7fa fc85 	bl	8008d58 <ucdr_align_to>
 800e44e:	4620      	mov	r0, r4
 800e450:	f7fa fc98 	bl	8008d84 <ucdr_buffer_remaining>
 800e454:	2803      	cmp	r0, #3
 800e456:	bf8c      	ite	hi
 800e458:	2701      	movhi	r7, #1
 800e45a:	2700      	movls	r7, #0
 800e45c:	d802      	bhi.n	800e464 <uxr_read_submessage_header+0x28>
 800e45e:	4638      	mov	r0, r7
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	4633      	mov	r3, r6
 800e466:	4642      	mov	r2, r8
 800e468:	4620      	mov	r0, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	f000 fa1a 	bl	800e8a4 <uxr_deserialize_submessage_header>
 800e470:	f898 3000 	ldrb.w	r3, [r8]
 800e474:	f003 0201 	and.w	r2, r3, #1
 800e478:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e47c:	f888 3000 	strb.w	r3, [r8]
 800e480:	7522      	strb	r2, [r4, #20]
 800e482:	4638      	mov	r0, r7
 800e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e488 <uxr_submessage_padding>:
 800e488:	f010 0003 	ands.w	r0, r0, #3
 800e48c:	bf18      	it	ne
 800e48e:	f1c0 0004 	rsbne	r0, r0, #4
 800e492:	4770      	bx	lr

0800e494 <uxr_millis>:
 800e494:	b510      	push	{r4, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	4669      	mov	r1, sp
 800e49a:	2001      	movs	r0, #1
 800e49c:	f7f3 f900 	bl	80016a0 <clock_gettime>
 800e4a0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e4a4:	4b06      	ldr	r3, [pc, #24]	@ (800e4c0 <uxr_millis+0x2c>)
 800e4a6:	fba0 0103 	umull	r0, r1, r0, r3
 800e4aa:	1900      	adds	r0, r0, r4
 800e4ac:	fb03 1102 	mla	r1, r3, r2, r1
 800e4b0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e4b4:	4a03      	ldr	r2, [pc, #12]	@ (800e4c4 <uxr_millis+0x30>)
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f7f2 f8d6 	bl	8000668 <__aeabi_ldivmod>
 800e4bc:	b004      	add	sp, #16
 800e4be:	bd10      	pop	{r4, pc}
 800e4c0:	3b9aca00 	.word	0x3b9aca00
 800e4c4:	000f4240 	.word	0x000f4240

0800e4c8 <uxr_nanos>:
 800e4c8:	b510      	push	{r4, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	4669      	mov	r1, sp
 800e4ce:	2001      	movs	r0, #1
 800e4d0:	f7f3 f8e6 	bl	80016a0 <clock_gettime>
 800e4d4:	4a06      	ldr	r2, [pc, #24]	@ (800e4f0 <uxr_nanos+0x28>)
 800e4d6:	9800      	ldr	r0, [sp, #0]
 800e4d8:	9902      	ldr	r1, [sp, #8]
 800e4da:	9c01      	ldr	r4, [sp, #4]
 800e4dc:	fba0 0302 	umull	r0, r3, r0, r2
 800e4e0:	1840      	adds	r0, r0, r1
 800e4e2:	fb02 3304 	mla	r3, r2, r4, r3
 800e4e6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e4ea:	b004      	add	sp, #16
 800e4ec:	bd10      	pop	{r4, pc}
 800e4ee:	bf00      	nop
 800e4f0:	3b9aca00 	.word	0x3b9aca00

0800e4f4 <on_full_output_buffer_fragmented>:
 800e4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	b08a      	sub	sp, #40	@ 0x28
 800e4fc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e500:	4606      	mov	r6, r0
 800e502:	f104 0008 	add.w	r0, r4, #8
 800e506:	f7ff ff4b 	bl	800e3a0 <uxr_get_output_reliable_stream>
 800e50a:	4605      	mov	r5, r0
 800e50c:	f003 fb54 	bl	8011bb8 <get_available_free_slots>
 800e510:	b968      	cbnz	r0, 800e52e <on_full_output_buffer_fragmented+0x3a>
 800e512:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e516:	4620      	mov	r0, r4
 800e518:	4798      	blx	r3
 800e51a:	b918      	cbnz	r0, 800e524 <on_full_output_buffer_fragmented+0x30>
 800e51c:	2001      	movs	r0, #1
 800e51e:	b00a      	add	sp, #40	@ 0x28
 800e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e524:	4628      	mov	r0, r5
 800e526:	f003 fb47 	bl	8011bb8 <get_available_free_slots>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d0f6      	beq.n	800e51c <on_full_output_buffer_fragmented+0x28>
 800e52e:	892a      	ldrh	r2, [r5, #8]
 800e530:	686b      	ldr	r3, [r5, #4]
 800e532:	fbb3 f8f2 	udiv	r8, r3, r2
 800e536:	89eb      	ldrh	r3, [r5, #14]
 800e538:	7b29      	ldrb	r1, [r5, #12]
 800e53a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e53e:	fb02 3310 	mls	r3, r2, r0, r3
 800e542:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800e546:	b29b      	uxth	r3, r3
 800e548:	fb08 f303 	mul.w	r3, r8, r3
 800e54c:	31fc      	adds	r1, #252	@ 0xfc
 800e54e:	f1a8 0804 	sub.w	r8, r8, #4
 800e552:	4441      	add	r1, r8
 800e554:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e558:	b28f      	uxth	r7, r1
 800e55a:	6829      	ldr	r1, [r5, #0]
 800e55c:	3304      	adds	r3, #4
 800e55e:	1bd2      	subs	r2, r2, r7
 800e560:	4419      	add	r1, r3
 800e562:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800e566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	4642      	mov	r2, r8
 800e56e:	2300      	movs	r3, #0
 800e570:	a802      	add	r0, sp, #8
 800e572:	f7fa fbc5 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800e576:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e57a:	f102 0308 	add.w	r3, r2, #8
 800e57e:	4543      	cmp	r3, r8
 800e580:	d928      	bls.n	800e5d4 <on_full_output_buffer_fragmented+0xe0>
 800e582:	463a      	mov	r2, r7
 800e584:	2300      	movs	r3, #0
 800e586:	210d      	movs	r1, #13
 800e588:	a802      	add	r0, sp, #8
 800e58a:	f7ff ff3d 	bl	800e408 <uxr_buffer_submessage_header>
 800e58e:	8929      	ldrh	r1, [r5, #8]
 800e590:	89eb      	ldrh	r3, [r5, #14]
 800e592:	fbb3 f2f1 	udiv	r2, r3, r1
 800e596:	fb01 3312 	mls	r3, r1, r2, r3
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	686a      	ldr	r2, [r5, #4]
 800e59e:	fbb2 f2f1 	udiv	r2, r2, r1
 800e5a2:	fb02 f303 	mul.w	r3, r2, r3
 800e5a6:	682a      	ldr	r2, [r5, #0]
 800e5a8:	f842 8003 	str.w	r8, [r2, r3]
 800e5ac:	89e8      	ldrh	r0, [r5, #14]
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	f003 fb20 	bl	8011bf4 <uxr_seq_num_add>
 800e5b4:	9904      	ldr	r1, [sp, #16]
 800e5b6:	9a03      	ldr	r2, [sp, #12]
 800e5b8:	81e8      	strh	r0, [r5, #14]
 800e5ba:	1a52      	subs	r2, r2, r1
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f7fa fbb1 	bl	8008d24 <ucdr_init_buffer>
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	4910      	ldr	r1, [pc, #64]	@ (800e608 <on_full_output_buffer_fragmented+0x114>)
 800e5c6:	4622      	mov	r2, r4
 800e5c8:	f7fa fb80 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	b00a      	add	sp, #40	@ 0x28
 800e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d4:	b292      	uxth	r2, r2
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	210d      	movs	r1, #13
 800e5da:	a802      	add	r0, sp, #8
 800e5dc:	f7ff ff14 	bl	800e408 <uxr_buffer_submessage_header>
 800e5e0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e5e4:	8928      	ldrh	r0, [r5, #8]
 800e5e6:	f103 0208 	add.w	r2, r3, #8
 800e5ea:	89eb      	ldrh	r3, [r5, #14]
 800e5ec:	fbb3 f1f0 	udiv	r1, r3, r0
 800e5f0:	fb00 3311 	mls	r3, r0, r1, r3
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	6869      	ldr	r1, [r5, #4]
 800e5f8:	fbb1 f1f0 	udiv	r1, r1, r0
 800e5fc:	fb01 f303 	mul.w	r3, r1, r3
 800e600:	6829      	ldr	r1, [r5, #0]
 800e602:	50ca      	str	r2, [r1, r3]
 800e604:	e7d2      	b.n	800e5ac <on_full_output_buffer_fragmented+0xb8>
 800e606:	bf00      	nop
 800e608:	0800e4f5 	.word	0x0800e4f5

0800e60c <uxr_prepare_output_stream>:
 800e60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e60e:	b087      	sub	sp, #28
 800e610:	2707      	movs	r7, #7
 800e612:	9202      	str	r2, [sp, #8]
 800e614:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e616:	2500      	movs	r5, #0
 800e618:	3204      	adds	r2, #4
 800e61a:	e9cd 7500 	strd	r7, r5, [sp]
 800e61e:	461c      	mov	r4, r3
 800e620:	4606      	mov	r6, r0
 800e622:	f7ff f807 	bl	800d634 <uxr_prepare_stream_to_write_submessage>
 800e626:	f080 0201 	eor.w	r2, r0, #1
 800e62a:	b2d2      	uxtb	r2, r2
 800e62c:	75a2      	strb	r2, [r4, #22]
 800e62e:	b112      	cbz	r2, 800e636 <uxr_prepare_output_stream+0x2a>
 800e630:	4628      	mov	r0, r5
 800e632:	b007      	add	sp, #28
 800e634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e636:	aa05      	add	r2, sp, #20
 800e638:	9902      	ldr	r1, [sp, #8]
 800e63a:	4630      	mov	r0, r6
 800e63c:	f7ff f934 	bl	800d8a8 <uxr_init_base_object_request>
 800e640:	a905      	add	r1, sp, #20
 800e642:	4605      	mov	r5, r0
 800e644:	4620      	mov	r0, r4
 800e646:	f000 ff77 	bl	800f538 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e64a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e64e:	69a6      	ldr	r6, [r4, #24]
 800e650:	69e7      	ldr	r7, [r4, #28]
 800e652:	1a52      	subs	r2, r2, r1
 800e654:	4620      	mov	r0, r4
 800e656:	f7fa fb65 	bl	8008d24 <ucdr_init_buffer>
 800e65a:	4620      	mov	r0, r4
 800e65c:	463a      	mov	r2, r7
 800e65e:	4631      	mov	r1, r6
 800e660:	f7fa fb34 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 800e664:	4628      	mov	r0, r5
 800e666:	b007      	add	sp, #28
 800e668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e66a:	bf00      	nop

0800e66c <uxr_prepare_output_stream_fragmented>:
 800e66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e670:	b093      	sub	sp, #76	@ 0x4c
 800e672:	4605      	mov	r5, r0
 800e674:	9107      	str	r1, [sp, #28]
 800e676:	3008      	adds	r0, #8
 800e678:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e67c:	9303      	str	r3, [sp, #12]
 800e67e:	9206      	str	r2, [sp, #24]
 800e680:	f7ff fe8e 	bl	800e3a0 <uxr_get_output_reliable_stream>
 800e684:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	f000 8095 	beq.w	800e7b8 <uxr_prepare_output_stream_fragmented+0x14c>
 800e68e:	4604      	mov	r4, r0
 800e690:	2800      	cmp	r0, #0
 800e692:	f000 8091 	beq.w	800e7b8 <uxr_prepare_output_stream_fragmented+0x14c>
 800e696:	f003 fa8f 	bl	8011bb8 <get_available_free_slots>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f000 8087 	beq.w	800e7ae <uxr_prepare_output_stream_fragmented+0x142>
 800e6a0:	8922      	ldrh	r2, [r4, #8]
 800e6a2:	89e7      	ldrh	r7, [r4, #14]
 800e6a4:	fbb7 f3f2 	udiv	r3, r7, r2
 800e6a8:	fb02 7313 	mls	r3, r2, r3, r7
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	6861      	ldr	r1, [r4, #4]
 800e6b0:	fbb1 f1f2 	udiv	r1, r1, r2
 800e6b4:	6822      	ldr	r2, [r4, #0]
 800e6b6:	9105      	str	r1, [sp, #20]
 800e6b8:	fb01 f303 	mul.w	r3, r1, r3
 800e6bc:	3304      	adds	r3, #4
 800e6be:	eb02 0903 	add.w	r9, r2, r3
 800e6c2:	7b23      	ldrb	r3, [r4, #12]
 800e6c4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e6c8:	4543      	cmp	r3, r8
 800e6ca:	f1a1 0b04 	sub.w	fp, r1, #4
 800e6ce:	d37f      	bcc.n	800e7d0 <uxr_prepare_output_stream_fragmented+0x164>
 800e6d0:	f1ab 0a04 	sub.w	sl, fp, #4
 800e6d4:	ebaa 0a03 	sub.w	sl, sl, r3
 800e6d8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800e6da:	f8cd 8000 	str.w	r8, [sp]
 800e6de:	fa1f f38a 	uxth.w	r3, sl
 800e6e2:	9304      	str	r3, [sp, #16]
 800e6e4:	465a      	mov	r2, fp
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	a80a      	add	r0, sp, #40	@ 0x28
 800e6ec:	f7fa fb08 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 800e6f0:	f106 0a08 	add.w	sl, r6, #8
 800e6f4:	45da      	cmp	sl, fp
 800e6f6:	bf2c      	ite	cs
 800e6f8:	2300      	movcs	r3, #0
 800e6fa:	2301      	movcc	r3, #1
 800e6fc:	9a04      	ldr	r2, [sp, #16]
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	210d      	movs	r1, #13
 800e702:	a80a      	add	r0, sp, #40	@ 0x28
 800e704:	f7ff fe80 	bl	800e408 <uxr_buffer_submessage_header>
 800e708:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e70c:	fbb7 f2fc 	udiv	r2, r7, ip
 800e710:	fb0c 7212 	mls	r2, ip, r2, r7
 800e714:	b292      	uxth	r2, r2
 800e716:	6863      	ldr	r3, [r4, #4]
 800e718:	fbb3 f3fc 	udiv	r3, r3, ip
 800e71c:	fb02 f303 	mul.w	r3, r2, r3
 800e720:	6822      	ldr	r2, [r4, #0]
 800e722:	2101      	movs	r1, #1
 800e724:	f842 b003 	str.w	fp, [r2, r3]
 800e728:	4638      	mov	r0, r7
 800e72a:	f003 fa63 	bl	8011bf4 <uxr_seq_num_add>
 800e72e:	9b05      	ldr	r3, [sp, #20]
 800e730:	9e03      	ldr	r6, [sp, #12]
 800e732:	f1a3 0208 	sub.w	r2, r3, #8
 800e736:	f108 0104 	add.w	r1, r8, #4
 800e73a:	4607      	mov	r7, r0
 800e73c:	eba2 0208 	sub.w	r2, r2, r8
 800e740:	4449      	add	r1, r9
 800e742:	4630      	mov	r0, r6
 800e744:	f7fa faee 	bl	8008d24 <ucdr_init_buffer>
 800e748:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e74a:	81e7      	strh	r7, [r4, #14]
 800e74c:	1d1a      	adds	r2, r3, #4
 800e74e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e752:	bf28      	it	cs
 800e754:	2200      	movcs	r2, #0
 800e756:	2300      	movs	r3, #0
 800e758:	b292      	uxth	r2, r2
 800e75a:	2107      	movs	r1, #7
 800e75c:	4630      	mov	r0, r6
 800e75e:	f7ff fe53 	bl	800e408 <uxr_buffer_submessage_header>
 800e762:	9906      	ldr	r1, [sp, #24]
 800e764:	aa09      	add	r2, sp, #36	@ 0x24
 800e766:	4628      	mov	r0, r5
 800e768:	f7ff f89e 	bl	800d8a8 <uxr_init_base_object_request>
 800e76c:	4604      	mov	r4, r0
 800e76e:	b320      	cbz	r0, 800e7ba <uxr_prepare_output_stream_fragmented+0x14e>
 800e770:	9e03      	ldr	r6, [sp, #12]
 800e772:	a909      	add	r1, sp, #36	@ 0x24
 800e774:	4630      	mov	r0, r6
 800e776:	f000 fedf 	bl	800f538 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e77a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e77e:	4630      	mov	r0, r6
 800e780:	1a52      	subs	r2, r2, r1
 800e782:	f7fa facf 	bl	8008d24 <ucdr_init_buffer>
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e78c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e78e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e792:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e794:	491a      	ldr	r1, [pc, #104]	@ (800e800 <uxr_prepare_output_stream_fragmented+0x194>)
 800e796:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e79a:	4630      	mov	r0, r6
 800e79c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	f7fa fa93 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	b013      	add	sp, #76	@ 0x4c
 800e7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ae:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e7b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	4798      	blx	r3
 800e7b6:	b920      	cbnz	r0, 800e7c2 <uxr_prepare_output_stream_fragmented+0x156>
 800e7b8:	2400      	movs	r4, #0
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	b013      	add	sp, #76	@ 0x4c
 800e7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f003 f9f8 	bl	8011bb8 <get_available_free_slots>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	f47f af69 	bne.w	800e6a0 <uxr_prepare_output_stream_fragmented+0x34>
 800e7ce:	e7f3      	b.n	800e7b8 <uxr_prepare_output_stream_fragmented+0x14c>
 800e7d0:	4638      	mov	r0, r7
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	f003 fa0e 	bl	8011bf4 <uxr_seq_num_add>
 800e7d8:	8921      	ldrh	r1, [r4, #8]
 800e7da:	fbb0 f2f1 	udiv	r2, r0, r1
 800e7de:	fb01 0212 	mls	r2, r1, r2, r0
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	6863      	ldr	r3, [r4, #4]
 800e7e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7ea:	fb02 f303 	mul.w	r3, r2, r3
 800e7ee:	6822      	ldr	r2, [r4, #0]
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	eb02 0903 	add.w	r9, r2, r3
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	7b23      	ldrb	r3, [r4, #12]
 800e7fa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e7fe:	e767      	b.n	800e6d0 <uxr_prepare_output_stream_fragmented+0x64>
 800e800:	0800e4f5 	.word	0x0800e4f5

0800e804 <uxr_serialize_message_header>:
 800e804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e808:	4617      	mov	r7, r2
 800e80a:	4604      	mov	r4, r0
 800e80c:	461e      	mov	r6, r3
 800e80e:	460d      	mov	r5, r1
 800e810:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e814:	f7fc fbf2 	bl	800affc <ucdr_serialize_uint8_t>
 800e818:	4639      	mov	r1, r7
 800e81a:	4620      	mov	r0, r4
 800e81c:	f7fc fbee 	bl	800affc <ucdr_serialize_uint8_t>
 800e820:	4632      	mov	r2, r6
 800e822:	2101      	movs	r1, #1
 800e824:	4620      	mov	r0, r4
 800e826:	f7fc fc9f 	bl	800b168 <ucdr_serialize_endian_uint16_t>
 800e82a:	062b      	lsls	r3, r5, #24
 800e82c:	d501      	bpl.n	800e832 <uxr_serialize_message_header+0x2e>
 800e82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e832:	4641      	mov	r1, r8
 800e834:	4620      	mov	r0, r4
 800e836:	2204      	movs	r2, #4
 800e838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e83c:	f7fc ba3e 	b.w	800acbc <ucdr_serialize_array_uint8_t>

0800e840 <uxr_deserialize_message_header>:
 800e840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e844:	4617      	mov	r7, r2
 800e846:	4604      	mov	r4, r0
 800e848:	461e      	mov	r6, r3
 800e84a:	460d      	mov	r5, r1
 800e84c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e850:	f7fc fbea 	bl	800b028 <ucdr_deserialize_uint8_t>
 800e854:	4639      	mov	r1, r7
 800e856:	4620      	mov	r0, r4
 800e858:	f7fc fbe6 	bl	800b028 <ucdr_deserialize_uint8_t>
 800e85c:	4632      	mov	r2, r6
 800e85e:	2101      	movs	r1, #1
 800e860:	4620      	mov	r0, r4
 800e862:	f7fc fd77 	bl	800b354 <ucdr_deserialize_endian_uint16_t>
 800e866:	f995 3000 	ldrsb.w	r3, [r5]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	da01      	bge.n	800e872 <uxr_deserialize_message_header+0x32>
 800e86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e872:	4641      	mov	r1, r8
 800e874:	4620      	mov	r0, r4
 800e876:	2204      	movs	r2, #4
 800e878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e87c:	f7fc ba82 	b.w	800ad84 <ucdr_deserialize_array_uint8_t>

0800e880 <uxr_serialize_submessage_header>:
 800e880:	b570      	push	{r4, r5, r6, lr}
 800e882:	4616      	mov	r6, r2
 800e884:	4604      	mov	r4, r0
 800e886:	461d      	mov	r5, r3
 800e888:	f7fc fbb8 	bl	800affc <ucdr_serialize_uint8_t>
 800e88c:	4631      	mov	r1, r6
 800e88e:	4620      	mov	r0, r4
 800e890:	f7fc fbb4 	bl	800affc <ucdr_serialize_uint8_t>
 800e894:	462a      	mov	r2, r5
 800e896:	4620      	mov	r0, r4
 800e898:	2101      	movs	r1, #1
 800e89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e89e:	f7fc bc63 	b.w	800b168 <ucdr_serialize_endian_uint16_t>
 800e8a2:	bf00      	nop

0800e8a4 <uxr_deserialize_submessage_header>:
 800e8a4:	b570      	push	{r4, r5, r6, lr}
 800e8a6:	4616      	mov	r6, r2
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	461d      	mov	r5, r3
 800e8ac:	f7fc fbbc 	bl	800b028 <ucdr_deserialize_uint8_t>
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f7fc fbb8 	bl	800b028 <ucdr_deserialize_uint8_t>
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	2101      	movs	r1, #1
 800e8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8c2:	f7fc bd47 	b.w	800b354 <ucdr_deserialize_endian_uint16_t>
 800e8c6:	bf00      	nop

0800e8c8 <uxr_serialize_CLIENT_Representation>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	2204      	movs	r2, #4
 800e8ce:	460e      	mov	r6, r1
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	f7fc f9f3 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800e8d6:	2202      	movs	r2, #2
 800e8d8:	1d31      	adds	r1, r6, #4
 800e8da:	4604      	mov	r4, r0
 800e8dc:	4628      	mov	r0, r5
 800e8de:	f7fc f9ed 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	4004      	ands	r4, r0
 800e8e6:	1db1      	adds	r1, r6, #6
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	f7fc f9e7 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800e8ee:	b2e4      	uxtb	r4, r4
 800e8f0:	2204      	movs	r2, #4
 800e8f2:	4004      	ands	r4, r0
 800e8f4:	f106 0108 	add.w	r1, r6, #8
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	f7fc f9df 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800e8fe:	7b31      	ldrb	r1, [r6, #12]
 800e900:	ea00 0804 	and.w	r8, r0, r4
 800e904:	4628      	mov	r0, r5
 800e906:	f7fc fb79 	bl	800affc <ucdr_serialize_uint8_t>
 800e90a:	7b71      	ldrb	r1, [r6, #13]
 800e90c:	ea08 0800 	and.w	r8, r8, r0
 800e910:	4628      	mov	r0, r5
 800e912:	f7fc fb45 	bl	800afa0 <ucdr_serialize_bool>
 800e916:	7b73      	ldrb	r3, [r6, #13]
 800e918:	ea08 0800 	and.w	r8, r8, r0
 800e91c:	b93b      	cbnz	r3, 800e92e <uxr_serialize_CLIENT_Representation+0x66>
 800e91e:	8bb1      	ldrh	r1, [r6, #28]
 800e920:	4628      	mov	r0, r5
 800e922:	f7fc fb97 	bl	800b054 <ucdr_serialize_uint16_t>
 800e926:	ea08 0000 	and.w	r0, r8, r0
 800e92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92e:	6931      	ldr	r1, [r6, #16]
 800e930:	4628      	mov	r0, r5
 800e932:	f7fc fd7f 	bl	800b434 <ucdr_serialize_uint32_t>
 800e936:	6933      	ldr	r3, [r6, #16]
 800e938:	b1e3      	cbz	r3, 800e974 <uxr_serialize_CLIENT_Representation+0xac>
 800e93a:	b1c0      	cbz	r0, 800e96e <uxr_serialize_CLIENT_Representation+0xa6>
 800e93c:	4637      	mov	r7, r6
 800e93e:	f04f 0900 	mov.w	r9, #0
 800e942:	e001      	b.n	800e948 <uxr_serialize_CLIENT_Representation+0x80>
 800e944:	3708      	adds	r7, #8
 800e946:	b194      	cbz	r4, 800e96e <uxr_serialize_CLIENT_Representation+0xa6>
 800e948:	6979      	ldr	r1, [r7, #20]
 800e94a:	4628      	mov	r0, r5
 800e94c:	f002 fc0e 	bl	801116c <ucdr_serialize_string>
 800e950:	69b9      	ldr	r1, [r7, #24]
 800e952:	4604      	mov	r4, r0
 800e954:	4628      	mov	r0, r5
 800e956:	f002 fc09 	bl	801116c <ucdr_serialize_string>
 800e95a:	6933      	ldr	r3, [r6, #16]
 800e95c:	f109 0901 	add.w	r9, r9, #1
 800e960:	4004      	ands	r4, r0
 800e962:	4599      	cmp	r9, r3
 800e964:	b2e4      	uxtb	r4, r4
 800e966:	d3ed      	bcc.n	800e944 <uxr_serialize_CLIENT_Representation+0x7c>
 800e968:	ea08 0804 	and.w	r8, r8, r4
 800e96c:	e7d7      	b.n	800e91e <uxr_serialize_CLIENT_Representation+0x56>
 800e96e:	f04f 0800 	mov.w	r8, #0
 800e972:	e7d4      	b.n	800e91e <uxr_serialize_CLIENT_Representation+0x56>
 800e974:	ea08 0800 	and.w	r8, r8, r0
 800e978:	e7d1      	b.n	800e91e <uxr_serialize_CLIENT_Representation+0x56>
 800e97a:	bf00      	nop

0800e97c <uxr_deserialize_CLIENT_Representation>:
 800e97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e980:	2204      	movs	r2, #4
 800e982:	460c      	mov	r4, r1
 800e984:	4605      	mov	r5, r0
 800e986:	f7fc f9fd 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800e98a:	2202      	movs	r2, #2
 800e98c:	1d21      	adds	r1, r4, #4
 800e98e:	4606      	mov	r6, r0
 800e990:	4628      	mov	r0, r5
 800e992:	f7fc f9f7 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800e996:	2202      	movs	r2, #2
 800e998:	4006      	ands	r6, r0
 800e99a:	1da1      	adds	r1, r4, #6
 800e99c:	4628      	mov	r0, r5
 800e99e:	f7fc f9f1 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800e9a2:	b2f6      	uxtb	r6, r6
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	4006      	ands	r6, r0
 800e9a8:	f104 0108 	add.w	r1, r4, #8
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f7fc f9e9 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800e9b2:	f104 010c 	add.w	r1, r4, #12
 800e9b6:	ea00 0706 	and.w	r7, r0, r6
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	f7fc fb34 	bl	800b028 <ucdr_deserialize_uint8_t>
 800e9c0:	f104 010d 	add.w	r1, r4, #13
 800e9c4:	4007      	ands	r7, r0
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f7fc fb00 	bl	800afcc <ucdr_deserialize_bool>
 800e9cc:	7b63      	ldrb	r3, [r4, #13]
 800e9ce:	4007      	ands	r7, r0
 800e9d0:	b93b      	cbnz	r3, 800e9e2 <uxr_deserialize_CLIENT_Representation+0x66>
 800e9d2:	f104 011c 	add.w	r1, r4, #28
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	f7fc fc40 	bl	800b25c <ucdr_deserialize_uint16_t>
 800e9dc:	4038      	ands	r0, r7
 800e9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9e2:	f104 0110 	add.w	r1, r4, #16
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f7fc fe4e 	bl	800b688 <ucdr_deserialize_uint32_t>
 800e9ec:	6923      	ldr	r3, [r4, #16]
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d903      	bls.n	800e9fa <uxr_deserialize_CLIENT_Representation+0x7e>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	75ab      	strb	r3, [r5, #22]
 800e9f6:	2700      	movs	r7, #0
 800e9f8:	e7eb      	b.n	800e9d2 <uxr_deserialize_CLIENT_Representation+0x56>
 800e9fa:	b30b      	cbz	r3, 800ea40 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d0fa      	beq.n	800e9f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ea00:	46a0      	mov	r8, r4
 800ea02:	f04f 0900 	mov.w	r9, #0
 800ea06:	e003      	b.n	800ea10 <uxr_deserialize_CLIENT_Representation+0x94>
 800ea08:	f108 0808 	add.w	r8, r8, #8
 800ea0c:	2e00      	cmp	r6, #0
 800ea0e:	d0f2      	beq.n	800e9f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ea10:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ea14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f002 fbb5 	bl	8011188 <ucdr_deserialize_string>
 800ea1e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ea22:	4606      	mov	r6, r0
 800ea24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f002 fbad 	bl	8011188 <ucdr_deserialize_string>
 800ea2e:	6923      	ldr	r3, [r4, #16]
 800ea30:	f109 0901 	add.w	r9, r9, #1
 800ea34:	4006      	ands	r6, r0
 800ea36:	4599      	cmp	r9, r3
 800ea38:	b2f6      	uxtb	r6, r6
 800ea3a:	d3e5      	bcc.n	800ea08 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ea3c:	4037      	ands	r7, r6
 800ea3e:	e7c8      	b.n	800e9d2 <uxr_deserialize_CLIENT_Representation+0x56>
 800ea40:	4007      	ands	r7, r0
 800ea42:	e7c6      	b.n	800e9d2 <uxr_deserialize_CLIENT_Representation+0x56>

0800ea44 <uxr_serialize_AGENT_Representation>:
 800ea44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea48:	2204      	movs	r2, #4
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	4605      	mov	r5, r0
 800ea4e:	f7fc f935 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800ea52:	2202      	movs	r2, #2
 800ea54:	4604      	mov	r4, r0
 800ea56:	1d39      	adds	r1, r7, #4
 800ea58:	4628      	mov	r0, r5
 800ea5a:	f7fc f92f 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800ea5e:	4020      	ands	r0, r4
 800ea60:	2202      	movs	r2, #2
 800ea62:	b2c4      	uxtb	r4, r0
 800ea64:	1db9      	adds	r1, r7, #6
 800ea66:	4628      	mov	r0, r5
 800ea68:	f7fc f928 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800ea6c:	7a39      	ldrb	r1, [r7, #8]
 800ea6e:	4004      	ands	r4, r0
 800ea70:	4628      	mov	r0, r5
 800ea72:	f7fc fa95 	bl	800afa0 <ucdr_serialize_bool>
 800ea76:	7a3b      	ldrb	r3, [r7, #8]
 800ea78:	ea00 0804 	and.w	r8, r0, r4
 800ea7c:	b913      	cbnz	r3, 800ea84 <uxr_serialize_AGENT_Representation+0x40>
 800ea7e:	4640      	mov	r0, r8
 800ea80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea84:	68f9      	ldr	r1, [r7, #12]
 800ea86:	4628      	mov	r0, r5
 800ea88:	f7fc fcd4 	bl	800b434 <ucdr_serialize_uint32_t>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	b303      	cbz	r3, 800ead2 <uxr_serialize_AGENT_Representation+0x8e>
 800ea90:	b1d0      	cbz	r0, 800eac8 <uxr_serialize_AGENT_Representation+0x84>
 800ea92:	463e      	mov	r6, r7
 800ea94:	f04f 0900 	mov.w	r9, #0
 800ea98:	e001      	b.n	800ea9e <uxr_serialize_AGENT_Representation+0x5a>
 800ea9a:	3608      	adds	r6, #8
 800ea9c:	b1a4      	cbz	r4, 800eac8 <uxr_serialize_AGENT_Representation+0x84>
 800ea9e:	6931      	ldr	r1, [r6, #16]
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f002 fb63 	bl	801116c <ucdr_serialize_string>
 800eaa6:	6971      	ldr	r1, [r6, #20]
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f002 fb5e 	bl	801116c <ucdr_serialize_string>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f109 0901 	add.w	r9, r9, #1
 800eab6:	4004      	ands	r4, r0
 800eab8:	4599      	cmp	r9, r3
 800eaba:	b2e4      	uxtb	r4, r4
 800eabc:	d3ed      	bcc.n	800ea9a <uxr_serialize_AGENT_Representation+0x56>
 800eabe:	ea08 0804 	and.w	r8, r8, r4
 800eac2:	4640      	mov	r0, r8
 800eac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eac8:	f04f 0800 	mov.w	r8, #0
 800eacc:	4640      	mov	r0, r8
 800eace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead2:	ea08 0800 	and.w	r8, r8, r0
 800ead6:	e7d2      	b.n	800ea7e <uxr_serialize_AGENT_Representation+0x3a>

0800ead8 <uxr_serialize_DATAWRITER_Representation>:
 800ead8:	b570      	push	{r4, r5, r6, lr}
 800eada:	460d      	mov	r5, r1
 800eadc:	7809      	ldrb	r1, [r1, #0]
 800eade:	4606      	mov	r6, r0
 800eae0:	f7fc fa8c 	bl	800affc <ucdr_serialize_uint8_t>
 800eae4:	4604      	mov	r4, r0
 800eae6:	b130      	cbz	r0, 800eaf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eae8:	782b      	ldrb	r3, [r5, #0]
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d00c      	beq.n	800eb08 <uxr_serialize_DATAWRITER_Representation+0x30>
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d010      	beq.n	800eb14 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d008      	beq.n	800eb08 <uxr_serialize_DATAWRITER_Representation+0x30>
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800eafc:	4630      	mov	r0, r6
 800eafe:	f7fc f8dd 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800eb02:	4020      	ands	r0, r4
 800eb04:	b2c0      	uxtb	r0, r0
 800eb06:	bd70      	pop	{r4, r5, r6, pc}
 800eb08:	6869      	ldr	r1, [r5, #4]
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f002 fb2e 	bl	801116c <ucdr_serialize_string>
 800eb10:	4604      	mov	r4, r0
 800eb12:	e7f0      	b.n	800eaf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eb14:	4629      	mov	r1, r5
 800eb16:	4630      	mov	r0, r6
 800eb18:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800eb1c:	3104      	adds	r1, #4
 800eb1e:	f7fa f99f 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800eb22:	4604      	mov	r4, r0
 800eb24:	e7e7      	b.n	800eaf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eb26:	bf00      	nop

0800eb28 <uxr_serialize_ObjectVariant.part.0>:
 800eb28:	b570      	push	{r4, r5, r6, lr}
 800eb2a:	780b      	ldrb	r3, [r1, #0]
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	460c      	mov	r4, r1
 800eb30:	4605      	mov	r5, r0
 800eb32:	2b0d      	cmp	r3, #13
 800eb34:	d816      	bhi.n	800eb64 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800eb36:	e8df f003 	tbb	[pc, r3]
 800eb3a:	0733      	.short	0x0733
 800eb3c:	07071717 	.word	0x07071717
 800eb40:	0c150707 	.word	0x0c150707
 800eb44:	4c510c0c 	.word	0x4c510c0c
 800eb48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb4c:	3104      	adds	r1, #4
 800eb4e:	f7ff bfc3 	b.w	800ead8 <uxr_serialize_DATAWRITER_Representation>
 800eb52:	7909      	ldrb	r1, [r1, #4]
 800eb54:	f7fc fa52 	bl	800affc <ucdr_serialize_uint8_t>
 800eb58:	b300      	cbz	r0, 800eb9c <uxr_serialize_ObjectVariant.part.0+0x74>
 800eb5a:	7923      	ldrb	r3, [r4, #4]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d042      	beq.n	800ebe6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d040      	beq.n	800ebe6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800eb64:	2001      	movs	r0, #1
 800eb66:	bd70      	pop	{r4, r5, r6, pc}
 800eb68:	7909      	ldrb	r1, [r1, #4]
 800eb6a:	f7fc fa47 	bl	800affc <ucdr_serialize_uint8_t>
 800eb6e:	4606      	mov	r6, r0
 800eb70:	b158      	cbz	r0, 800eb8a <uxr_serialize_ObjectVariant.part.0+0x62>
 800eb72:	7923      	ldrb	r3, [r4, #4]
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d03c      	beq.n	800ebf2 <uxr_serialize_ObjectVariant.part.0+0xca>
 800eb78:	2b03      	cmp	r3, #3
 800eb7a:	d106      	bne.n	800eb8a <uxr_serialize_ObjectVariant.part.0+0x62>
 800eb7c:	68a2      	ldr	r2, [r4, #8]
 800eb7e:	f104 010c 	add.w	r1, r4, #12
 800eb82:	4628      	mov	r0, r5
 800eb84:	f7fa f96c 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800eb88:	4606      	mov	r6, r0
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800eb90:	4628      	mov	r0, r5
 800eb92:	f7fc f893 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800eb96:	4030      	ands	r0, r6
 800eb98:	b2c0      	uxtb	r0, r0
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	7909      	ldrb	r1, [r1, #4]
 800eba2:	f7fc fa2b 	bl	800affc <ucdr_serialize_uint8_t>
 800eba6:	4606      	mov	r6, r0
 800eba8:	b158      	cbz	r0, 800ebc2 <uxr_serialize_ObjectVariant.part.0+0x9a>
 800ebaa:	7923      	ldrb	r3, [r4, #4]
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d003      	beq.n	800ebb8 <uxr_serialize_ObjectVariant.part.0+0x90>
 800ebb0:	2b03      	cmp	r3, #3
 800ebb2:	d024      	beq.n	800ebfe <uxr_serialize_ObjectVariant.part.0+0xd6>
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d104      	bne.n	800ebc2 <uxr_serialize_ObjectVariant.part.0+0x9a>
 800ebb8:	68a1      	ldr	r1, [r4, #8]
 800ebba:	4628      	mov	r0, r5
 800ebbc:	f002 fad6 	bl	801116c <ucdr_serialize_string>
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f7fc ff40 	bl	800ba4c <ucdr_serialize_int16_t>
 800ebcc:	4030      	ands	r0, r6
 800ebce:	b2c0      	uxtb	r0, r0
 800ebd0:	bd70      	pop	{r4, r5, r6, pc}
 800ebd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebd6:	3104      	adds	r1, #4
 800ebd8:	f7ff be76 	b.w	800e8c8 <uxr_serialize_CLIENT_Representation>
 800ebdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebe0:	3104      	adds	r1, #4
 800ebe2:	f7ff bf2f 	b.w	800ea44 <uxr_serialize_AGENT_Representation>
 800ebe6:	68a1      	ldr	r1, [r4, #8]
 800ebe8:	4628      	mov	r0, r5
 800ebea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebee:	f002 babd 	b.w	801116c <ucdr_serialize_string>
 800ebf2:	68a1      	ldr	r1, [r4, #8]
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f002 fab9 	bl	801116c <ucdr_serialize_string>
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	e7c5      	b.n	800eb8a <uxr_serialize_ObjectVariant.part.0+0x62>
 800ebfe:	68a2      	ldr	r2, [r4, #8]
 800ec00:	f104 010c 	add.w	r1, r4, #12
 800ec04:	4628      	mov	r0, r5
 800ec06:	f7fa f92b 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	e7d9      	b.n	800ebc2 <uxr_serialize_ObjectVariant.part.0+0x9a>
 800ec0e:	bf00      	nop

0800ec10 <uxr_deserialize_DATAWRITER_Representation>:
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	4606      	mov	r6, r0
 800ec14:	460d      	mov	r5, r1
 800ec16:	f7fc fa07 	bl	800b028 <ucdr_deserialize_uint8_t>
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	b130      	cbz	r0, 800ec2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec1e:	782b      	ldrb	r3, [r5, #0]
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d00c      	beq.n	800ec3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d012      	beq.n	800ec4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d008      	beq.n	800ec3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ec2c:	2202      	movs	r2, #2
 800ec2e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7fc f8a6 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800ec38:	4020      	ands	r0, r4
 800ec3a:	b2c0      	uxtb	r0, r0
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
 800ec3e:	6869      	ldr	r1, [r5, #4]
 800ec40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec44:	4630      	mov	r0, r6
 800ec46:	f002 fa9f 	bl	8011188 <ucdr_deserialize_string>
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	e7ee      	b.n	800ec2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec4e:	1d2b      	adds	r3, r5, #4
 800ec50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec54:	f105 0108 	add.w	r1, r5, #8
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7fa f913 	bl	8008e84 <ucdr_deserialize_sequence_uint8_t>
 800ec5e:	4604      	mov	r4, r0
 800ec60:	e7e4      	b.n	800ec2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec62:	bf00      	nop

0800ec64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	460d      	mov	r5, r1
 800ec68:	7809      	ldrb	r1, [r1, #0]
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	f7fc f998 	bl	800afa0 <ucdr_serialize_bool>
 800ec70:	782b      	ldrb	r3, [r5, #0]
 800ec72:	4604      	mov	r4, r0
 800ec74:	b94b      	cbnz	r3, 800ec8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ec76:	7a29      	ldrb	r1, [r5, #8]
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f7fc f991 	bl	800afa0 <ucdr_serialize_bool>
 800ec7e:	7a2b      	ldrb	r3, [r5, #8]
 800ec80:	4004      	ands	r4, r0
 800ec82:	b2e4      	uxtb	r4, r4
 800ec84:	b943      	cbnz	r3, 800ec98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ec86:	4620      	mov	r0, r4
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
 800ec8a:	6869      	ldr	r1, [r5, #4]
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f002 fa6d 	bl	801116c <ucdr_serialize_string>
 800ec92:	4004      	ands	r4, r0
 800ec94:	b2e4      	uxtb	r4, r4
 800ec96:	e7ee      	b.n	800ec76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ec98:	68e9      	ldr	r1, [r5, #12]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f002 fa66 	bl	801116c <ucdr_serialize_string>
 800eca0:	4004      	ands	r4, r0
 800eca2:	4620      	mov	r0, r4
 800eca4:	bd70      	pop	{r4, r5, r6, pc}
 800eca6:	bf00      	nop

0800eca8 <uxr_serialize_OBJK_Topic_Binary>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	460d      	mov	r5, r1
 800ecac:	6809      	ldr	r1, [r1, #0]
 800ecae:	4606      	mov	r6, r0
 800ecb0:	f002 fa5c 	bl	801116c <ucdr_serialize_string>
 800ecb4:	7929      	ldrb	r1, [r5, #4]
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f7fc f971 	bl	800afa0 <ucdr_serialize_bool>
 800ecbe:	792b      	ldrb	r3, [r5, #4]
 800ecc0:	4004      	ands	r4, r0
 800ecc2:	b2e4      	uxtb	r4, r4
 800ecc4:	b943      	cbnz	r3, 800ecd8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ecc6:	7b29      	ldrb	r1, [r5, #12]
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7fc f969 	bl	800afa0 <ucdr_serialize_bool>
 800ecce:	7b2b      	ldrb	r3, [r5, #12]
 800ecd0:	4004      	ands	r4, r0
 800ecd2:	b93b      	cbnz	r3, 800ece4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	68a9      	ldr	r1, [r5, #8]
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f002 fa46 	bl	801116c <ucdr_serialize_string>
 800ece0:	4004      	ands	r4, r0
 800ece2:	e7f0      	b.n	800ecc6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ece4:	6929      	ldr	r1, [r5, #16]
 800ece6:	4630      	mov	r0, r6
 800ece8:	f002 fa40 	bl	801116c <ucdr_serialize_string>
 800ecec:	4004      	ands	r4, r0
 800ecee:	b2e4      	uxtb	r4, r4
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}

0800ecf4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	7809      	ldrb	r1, [r1, #0]
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	f7fc f94f 	bl	800afa0 <ucdr_serialize_bool>
 800ed02:	7823      	ldrb	r3, [r4, #0]
 800ed04:	4605      	mov	r5, r0
 800ed06:	b96b      	cbnz	r3, 800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ed08:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7fc f947 	bl	800afa0 <ucdr_serialize_bool>
 800ed12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ed16:	4005      	ands	r5, r0
 800ed18:	b2ed      	uxtb	r5, r5
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d16a      	bne.n	800edf4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800ed1e:	4628      	mov	r0, r5
 800ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed24:	6861      	ldr	r1, [r4, #4]
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7fc fb84 	bl	800b434 <ucdr_serialize_uint32_t>
 800ed2c:	6863      	ldr	r3, [r4, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d06c      	beq.n	800ee0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d068      	beq.n	800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed36:	68a1      	ldr	r1, [r4, #8]
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f002 fa17 	bl	801116c <ucdr_serialize_string>
 800ed3e:	6862      	ldr	r2, [r4, #4]
 800ed40:	2a01      	cmp	r2, #1
 800ed42:	d953      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d05f      	beq.n	800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed48:	68e1      	ldr	r1, [r4, #12]
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f002 fa0e 	bl	801116c <ucdr_serialize_string>
 800ed50:	6862      	ldr	r2, [r4, #4]
 800ed52:	2a02      	cmp	r2, #2
 800ed54:	d94a      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d056      	beq.n	800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed5a:	6921      	ldr	r1, [r4, #16]
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f002 fa05 	bl	801116c <ucdr_serialize_string>
 800ed62:	6862      	ldr	r2, [r4, #4]
 800ed64:	2a03      	cmp	r2, #3
 800ed66:	d941      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d04d      	beq.n	800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed6c:	6961      	ldr	r1, [r4, #20]
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f002 f9fc 	bl	801116c <ucdr_serialize_string>
 800ed74:	6862      	ldr	r2, [r4, #4]
 800ed76:	2a04      	cmp	r2, #4
 800ed78:	d938      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d044      	beq.n	800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed7e:	69a1      	ldr	r1, [r4, #24]
 800ed80:	4630      	mov	r0, r6
 800ed82:	f002 f9f3 	bl	801116c <ucdr_serialize_string>
 800ed86:	6862      	ldr	r2, [r4, #4]
 800ed88:	2a05      	cmp	r2, #5
 800ed8a:	d92f      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d03b      	beq.n	800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ed90:	69e1      	ldr	r1, [r4, #28]
 800ed92:	4630      	mov	r0, r6
 800ed94:	f002 f9ea 	bl	801116c <ucdr_serialize_string>
 800ed98:	6862      	ldr	r2, [r4, #4]
 800ed9a:	2a06      	cmp	r2, #6
 800ed9c:	d926      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed9e:	b398      	cbz	r0, 800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800eda0:	6a21      	ldr	r1, [r4, #32]
 800eda2:	4630      	mov	r0, r6
 800eda4:	f002 f9e2 	bl	801116c <ucdr_serialize_string>
 800eda8:	6862      	ldr	r2, [r4, #4]
 800edaa:	2a07      	cmp	r2, #7
 800edac:	d91e      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edae:	b358      	cbz	r0, 800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800edb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800edb2:	4630      	mov	r0, r6
 800edb4:	f002 f9da 	bl	801116c <ucdr_serialize_string>
 800edb8:	6862      	ldr	r2, [r4, #4]
 800edba:	2a08      	cmp	r2, #8
 800edbc:	d916      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edbe:	b318      	cbz	r0, 800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800edc0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800edc2:	4630      	mov	r0, r6
 800edc4:	f002 f9d2 	bl	801116c <ucdr_serialize_string>
 800edc8:	6862      	ldr	r2, [r4, #4]
 800edca:	2a09      	cmp	r2, #9
 800edcc:	d90e      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edce:	b1d8      	cbz	r0, 800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800edd0:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800edd4:	2709      	movs	r7, #9
 800edd6:	e000      	b.n	800edda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800edd8:	b1b0      	cbz	r0, 800ee08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800edda:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800edde:	4630      	mov	r0, r6
 800ede0:	f002 f9c4 	bl	801116c <ucdr_serialize_string>
 800ede4:	6862      	ldr	r2, [r4, #4]
 800ede6:	3701      	adds	r7, #1
 800ede8:	4297      	cmp	r7, r2
 800edea:	d3f5      	bcc.n	800edd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800edec:	ea05 0300 	and.w	r3, r5, r0
 800edf0:	b2dd      	uxtb	r5, r3
 800edf2:	e789      	b.n	800ed08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800edf4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800edf6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7fa f830 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800ee00:	4005      	ands	r5, r0
 800ee02:	4628      	mov	r0, r5
 800ee04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee08:	2500      	movs	r5, #0
 800ee0a:	e77d      	b.n	800ed08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ee0c:	4028      	ands	r0, r5
 800ee0e:	b2c5      	uxtb	r5, r0
 800ee10:	e77a      	b.n	800ed08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ee12:	bf00      	nop

0800ee14 <uxr_serialize_OBJK_Publisher_Binary>:
 800ee14:	b570      	push	{r4, r5, r6, lr}
 800ee16:	460d      	mov	r5, r1
 800ee18:	7809      	ldrb	r1, [r1, #0]
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	f7fc f8c0 	bl	800afa0 <ucdr_serialize_bool>
 800ee20:	782b      	ldrb	r3, [r5, #0]
 800ee22:	4604      	mov	r4, r0
 800ee24:	b94b      	cbnz	r3, 800ee3a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ee26:	7a29      	ldrb	r1, [r5, #8]
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7fc f8b9 	bl	800afa0 <ucdr_serialize_bool>
 800ee2e:	7a2b      	ldrb	r3, [r5, #8]
 800ee30:	4004      	ands	r4, r0
 800ee32:	b2e4      	uxtb	r4, r4
 800ee34:	b943      	cbnz	r3, 800ee48 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ee36:	4620      	mov	r0, r4
 800ee38:	bd70      	pop	{r4, r5, r6, pc}
 800ee3a:	6869      	ldr	r1, [r5, #4]
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f002 f995 	bl	801116c <ucdr_serialize_string>
 800ee42:	4004      	ands	r4, r0
 800ee44:	b2e4      	uxtb	r4, r4
 800ee46:	e7ee      	b.n	800ee26 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ee48:	f105 010c 	add.w	r1, r5, #12
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f7ff ff51 	bl	800ecf4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ee52:	4004      	ands	r4, r0
 800ee54:	4620      	mov	r0, r4
 800ee56:	bd70      	pop	{r4, r5, r6, pc}

0800ee58 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800ee58:	b570      	push	{r4, r5, r6, lr}
 800ee5a:	460d      	mov	r5, r1
 800ee5c:	8809      	ldrh	r1, [r1, #0]
 800ee5e:	4606      	mov	r6, r0
 800ee60:	f7fc f8f8 	bl	800b054 <ucdr_serialize_uint16_t>
 800ee64:	78a9      	ldrb	r1, [r5, #2]
 800ee66:	4604      	mov	r4, r0
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f7fc f899 	bl	800afa0 <ucdr_serialize_bool>
 800ee6e:	78ab      	ldrb	r3, [r5, #2]
 800ee70:	4004      	ands	r4, r0
 800ee72:	b2e4      	uxtb	r4, r4
 800ee74:	b9b3      	cbnz	r3, 800eea4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800ee76:	79a9      	ldrb	r1, [r5, #6]
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7fc f891 	bl	800afa0 <ucdr_serialize_bool>
 800ee7e:	79ab      	ldrb	r3, [r5, #6]
 800ee80:	4004      	ands	r4, r0
 800ee82:	bb33      	cbnz	r3, 800eed2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800ee84:	7b29      	ldrb	r1, [r5, #12]
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7fc f88a 	bl	800afa0 <ucdr_serialize_bool>
 800ee8c:	7b2b      	ldrb	r3, [r5, #12]
 800ee8e:	4004      	ands	r4, r0
 800ee90:	b9c3      	cbnz	r3, 800eec4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800ee92:	7d29      	ldrb	r1, [r5, #20]
 800ee94:	4630      	mov	r0, r6
 800ee96:	f7fc f883 	bl	800afa0 <ucdr_serialize_bool>
 800ee9a:	7d2b      	ldrb	r3, [r5, #20]
 800ee9c:	4004      	ands	r4, r0
 800ee9e:	b93b      	cbnz	r3, 800eeb0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800eea0:	4620      	mov	r0, r4
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	88a9      	ldrh	r1, [r5, #4]
 800eea6:	4630      	mov	r0, r6
 800eea8:	f7fc f8d4 	bl	800b054 <ucdr_serialize_uint16_t>
 800eeac:	4004      	ands	r4, r0
 800eeae:	e7e2      	b.n	800ee76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800eeb0:	69aa      	ldr	r2, [r5, #24]
 800eeb2:	f105 011c 	add.w	r1, r5, #28
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f7f9 ffd2 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800eebc:	4004      	ands	r4, r0
 800eebe:	b2e4      	uxtb	r4, r4
 800eec0:	4620      	mov	r0, r4
 800eec2:	bd70      	pop	{r4, r5, r6, pc}
 800eec4:	6929      	ldr	r1, [r5, #16]
 800eec6:	4630      	mov	r0, r6
 800eec8:	f7fc fab4 	bl	800b434 <ucdr_serialize_uint32_t>
 800eecc:	4004      	ands	r4, r0
 800eece:	b2e4      	uxtb	r4, r4
 800eed0:	e7df      	b.n	800ee92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800eed2:	68a9      	ldr	r1, [r5, #8]
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7fc faad 	bl	800b434 <ucdr_serialize_uint32_t>
 800eeda:	4004      	ands	r4, r0
 800eedc:	b2e4      	uxtb	r4, r4
 800eede:	e7d1      	b.n	800ee84 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800eee0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800eee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee2:	2202      	movs	r2, #2
 800eee4:	460d      	mov	r5, r1
 800eee6:	4606      	mov	r6, r0
 800eee8:	f7fb fee8 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800eeec:	78a9      	ldrb	r1, [r5, #2]
 800eeee:	4604      	mov	r4, r0
 800eef0:	4630      	mov	r0, r6
 800eef2:	f7fc f855 	bl	800afa0 <ucdr_serialize_bool>
 800eef6:	78ab      	ldrb	r3, [r5, #2]
 800eef8:	4004      	ands	r4, r0
 800eefa:	b2e4      	uxtb	r4, r4
 800eefc:	b90b      	cbnz	r3, 800ef02 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800eefe:	4620      	mov	r0, r4
 800ef00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef02:	f105 0108 	add.w	r1, r5, #8
 800ef06:	4630      	mov	r0, r6
 800ef08:	f7ff ffa6 	bl	800ee58 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ef0c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ef10:	4607      	mov	r7, r0
 800ef12:	4630      	mov	r0, r6
 800ef14:	f7fc f844 	bl	800afa0 <ucdr_serialize_bool>
 800ef18:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ef1c:	4007      	ands	r7, r0
 800ef1e:	b2ff      	uxtb	r7, r7
 800ef20:	b913      	cbnz	r3, 800ef28 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ef22:	403c      	ands	r4, r7
 800ef24:	4620      	mov	r0, r4
 800ef26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef28:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	f7fc fcc5 	bl	800b8bc <ucdr_serialize_uint64_t>
 800ef32:	4007      	ands	r7, r0
 800ef34:	e7f5      	b.n	800ef22 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ef36:	bf00      	nop

0800ef38 <uxr_deserialize_ObjectVariant>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	460e      	mov	r6, r1
 800ef3e:	f7fc f873 	bl	800b028 <ucdr_deserialize_uint8_t>
 800ef42:	b168      	cbz	r0, 800ef60 <uxr_deserialize_ObjectVariant+0x28>
 800ef44:	7833      	ldrb	r3, [r6, #0]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	4604      	mov	r4, r0
 800ef4a:	2b0d      	cmp	r3, #13
 800ef4c:	d809      	bhi.n	800ef62 <uxr_deserialize_ObjectVariant+0x2a>
 800ef4e:	e8df f003 	tbb	[pc, r3]
 800ef52:	0a64      	.short	0x0a64
 800ef54:	0a0a2323 	.word	0x0a0a2323
 800ef58:	10080a0a 	.word	0x10080a0a
 800ef5c:	5e411010 	.word	0x5e411010
 800ef60:	2400      	movs	r4, #0
 800ef62:	4620      	mov	r0, r4
 800ef64:	bd70      	pop	{r4, r5, r6, pc}
 800ef66:	1d31      	adds	r1, r6, #4
 800ef68:	4628      	mov	r0, r5
 800ef6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef6e:	f7ff be4f 	b.w	800ec10 <uxr_deserialize_DATAWRITER_Representation>
 800ef72:	1d31      	adds	r1, r6, #4
 800ef74:	4628      	mov	r0, r5
 800ef76:	f7fc f857 	bl	800b028 <ucdr_deserialize_uint8_t>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d0f0      	beq.n	800ef60 <uxr_deserialize_ObjectVariant+0x28>
 800ef7e:	7933      	ldrb	r3, [r6, #4]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d001      	beq.n	800ef88 <uxr_deserialize_ObjectVariant+0x50>
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d1ec      	bne.n	800ef62 <uxr_deserialize_ObjectVariant+0x2a>
 800ef88:	68b1      	ldr	r1, [r6, #8]
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef94:	f002 b8f8 	b.w	8011188 <ucdr_deserialize_string>
 800ef98:	1d31      	adds	r1, r6, #4
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f7fc f844 	bl	800b028 <ucdr_deserialize_uint8_t>
 800efa0:	4604      	mov	r4, r0
 800efa2:	b170      	cbz	r0, 800efc2 <uxr_deserialize_ObjectVariant+0x8a>
 800efa4:	7933      	ldrb	r3, [r6, #4]
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	d053      	beq.n	800f052 <uxr_deserialize_ObjectVariant+0x11a>
 800efaa:	2b03      	cmp	r3, #3
 800efac:	d109      	bne.n	800efc2 <uxr_deserialize_ObjectVariant+0x8a>
 800efae:	f106 0308 	add.w	r3, r6, #8
 800efb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efb6:	f106 010c 	add.w	r1, r6, #12
 800efba:	4628      	mov	r0, r5
 800efbc:	f7f9 ff62 	bl	8008e84 <ucdr_deserialize_sequence_uint8_t>
 800efc0:	4604      	mov	r4, r0
 800efc2:	2202      	movs	r2, #2
 800efc4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800efc8:	4628      	mov	r0, r5
 800efca:	f7fb fedb 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800efce:	4004      	ands	r4, r0
 800efd0:	b2e4      	uxtb	r4, r4
 800efd2:	e7c6      	b.n	800ef62 <uxr_deserialize_ObjectVariant+0x2a>
 800efd4:	2204      	movs	r2, #4
 800efd6:	18b1      	adds	r1, r6, r2
 800efd8:	4628      	mov	r0, r5
 800efda:	f7fb fed3 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800efde:	2202      	movs	r2, #2
 800efe0:	f106 0108 	add.w	r1, r6, #8
 800efe4:	4604      	mov	r4, r0
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7fb fecc 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800efec:	2202      	movs	r2, #2
 800efee:	4004      	ands	r4, r0
 800eff0:	f106 010a 	add.w	r1, r6, #10
 800eff4:	4628      	mov	r0, r5
 800eff6:	f7fb fec5 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800effa:	b2e4      	uxtb	r4, r4
 800effc:	4603      	mov	r3, r0
 800effe:	f106 010c 	add.w	r1, r6, #12
 800f002:	4628      	mov	r0, r5
 800f004:	401c      	ands	r4, r3
 800f006:	f7fb ffe1 	bl	800afcc <ucdr_deserialize_bool>
 800f00a:	4004      	ands	r4, r0
 800f00c:	e7a9      	b.n	800ef62 <uxr_deserialize_ObjectVariant+0x2a>
 800f00e:	1d31      	adds	r1, r6, #4
 800f010:	4628      	mov	r0, r5
 800f012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f016:	f7ff bcb1 	b.w	800e97c <uxr_deserialize_CLIENT_Representation>
 800f01a:	1d31      	adds	r1, r6, #4
 800f01c:	4628      	mov	r0, r5
 800f01e:	f7fc f803 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f022:	4604      	mov	r4, r0
 800f024:	b168      	cbz	r0, 800f042 <uxr_deserialize_ObjectVariant+0x10a>
 800f026:	7933      	ldrb	r3, [r6, #4]
 800f028:	2b02      	cmp	r3, #2
 800f02a:	d003      	beq.n	800f034 <uxr_deserialize_ObjectVariant+0xfc>
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d018      	beq.n	800f062 <uxr_deserialize_ObjectVariant+0x12a>
 800f030:	2b01      	cmp	r3, #1
 800f032:	d106      	bne.n	800f042 <uxr_deserialize_ObjectVariant+0x10a>
 800f034:	68b1      	ldr	r1, [r6, #8]
 800f036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f03a:	4628      	mov	r0, r5
 800f03c:	f002 f8a4 	bl	8011188 <ucdr_deserialize_string>
 800f040:	4604      	mov	r4, r0
 800f042:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f046:	4628      	mov	r0, r5
 800f048:	f7fc fd8a 	bl	800bb60 <ucdr_deserialize_int16_t>
 800f04c:	4004      	ands	r4, r0
 800f04e:	b2e4      	uxtb	r4, r4
 800f050:	e787      	b.n	800ef62 <uxr_deserialize_ObjectVariant+0x2a>
 800f052:	68b1      	ldr	r1, [r6, #8]
 800f054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f058:	4628      	mov	r0, r5
 800f05a:	f002 f895 	bl	8011188 <ucdr_deserialize_string>
 800f05e:	4604      	mov	r4, r0
 800f060:	e7af      	b.n	800efc2 <uxr_deserialize_ObjectVariant+0x8a>
 800f062:	f106 0308 	add.w	r3, r6, #8
 800f066:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f06a:	f106 010c 	add.w	r1, r6, #12
 800f06e:	4628      	mov	r0, r5
 800f070:	f7f9 ff08 	bl	8008e84 <ucdr_deserialize_sequence_uint8_t>
 800f074:	4604      	mov	r4, r0
 800f076:	e7e4      	b.n	800f042 <uxr_deserialize_ObjectVariant+0x10a>

0800f078 <uxr_deserialize_BaseObjectRequest>:
 800f078:	b570      	push	{r4, r5, r6, lr}
 800f07a:	2202      	movs	r2, #2
 800f07c:	4605      	mov	r5, r0
 800f07e:	460e      	mov	r6, r1
 800f080:	f7fb fe80 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f084:	2202      	movs	r2, #2
 800f086:	4604      	mov	r4, r0
 800f088:	18b1      	adds	r1, r6, r2
 800f08a:	4628      	mov	r0, r5
 800f08c:	f7fb fe7a 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f090:	4020      	ands	r0, r4
 800f092:	b2c0      	uxtb	r0, r0
 800f094:	bd70      	pop	{r4, r5, r6, pc}
 800f096:	bf00      	nop

0800f098 <uxr_serialize_ActivityInfoVariant>:
 800f098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f09c:	460d      	mov	r5, r1
 800f09e:	7809      	ldrb	r1, [r1, #0]
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	f7fb ffab 	bl	800affc <ucdr_serialize_uint8_t>
 800f0a6:	b130      	cbz	r0, 800f0b6 <uxr_serialize_ActivityInfoVariant+0x1e>
 800f0a8:	782b      	ldrb	r3, [r5, #0]
 800f0aa:	2b06      	cmp	r3, #6
 800f0ac:	d014      	beq.n	800f0d8 <uxr_serialize_ActivityInfoVariant+0x40>
 800f0ae:	2b0d      	cmp	r3, #13
 800f0b0:	d019      	beq.n	800f0e6 <uxr_serialize_ActivityInfoVariant+0x4e>
 800f0b2:	2b05      	cmp	r3, #5
 800f0b4:	d001      	beq.n	800f0ba <uxr_serialize_ActivityInfoVariant+0x22>
 800f0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f7fc fcc4 	bl	800ba4c <ucdr_serialize_int16_t>
 800f0c4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7fc fbf6 	bl	800b8bc <ucdr_serialize_uint64_t>
 800f0d0:	4020      	ands	r0, r4
 800f0d2:	b2c0      	uxtb	r0, r0
 800f0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0d8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f0dc:	4630      	mov	r0, r6
 800f0de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0e2:	f7fc bcb3 	b.w	800ba4c <ucdr_serialize_int16_t>
 800f0e6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	f7fc fcae 	bl	800ba4c <ucdr_serialize_int16_t>
 800f0f0:	68e9      	ldr	r1, [r5, #12]
 800f0f2:	4681      	mov	r9, r0
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f7fc f99d 	bl	800b434 <ucdr_serialize_uint32_t>
 800f0fa:	68eb      	ldr	r3, [r5, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d051      	beq.n	800f1a4 <uxr_serialize_ActivityInfoVariant+0x10c>
 800f100:	b1e8      	cbz	r0, 800f13e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f102:	f105 0714 	add.w	r7, r5, #20
 800f106:	f04f 0800 	mov.w	r8, #0
 800f10a:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 800f10e:	4630      	mov	r0, r6
 800f110:	f7fb ff74 	bl	800affc <ucdr_serialize_uint8_t>
 800f114:	b198      	cbz	r0, 800f13e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f116:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d839      	bhi.n	800f192 <uxr_serialize_ActivityInfoVariant+0xfa>
 800f11e:	e8df f003 	tbb	[pc, r3]
 800f122:	1e2b      	.short	0x1e2b
 800f124:	0211      	.short	0x0211
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	4630      	mov	r0, r6
 800f12a:	f002 f81f 	bl	801116c <ucdr_serialize_string>
 800f12e:	68eb      	ldr	r3, [r5, #12]
 800f130:	f108 0801 	add.w	r8, r8, #1
 800f134:	4598      	cmp	r8, r3
 800f136:	d231      	bcs.n	800f19c <uxr_serialize_ActivityInfoVariant+0x104>
 800f138:	3718      	adds	r7, #24
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d1e5      	bne.n	800f10a <uxr_serialize_ActivityInfoVariant+0x72>
 800f13e:	2000      	movs	r0, #0
 800f140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f144:	2210      	movs	r2, #16
 800f146:	4639      	mov	r1, r7
 800f148:	4630      	mov	r0, r6
 800f14a:	f7fb fdb7 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f14e:	6939      	ldr	r1, [r7, #16]
 800f150:	4604      	mov	r4, r0
 800f152:	4630      	mov	r0, r6
 800f154:	f7fc f96e 	bl	800b434 <ucdr_serialize_uint32_t>
 800f158:	4020      	ands	r0, r4
 800f15a:	b2c0      	uxtb	r0, r0
 800f15c:	e7e7      	b.n	800f12e <uxr_serialize_ActivityInfoVariant+0x96>
 800f15e:	2204      	movs	r2, #4
 800f160:	4639      	mov	r1, r7
 800f162:	4630      	mov	r0, r6
 800f164:	f7fb fdaa 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f168:	88b9      	ldrh	r1, [r7, #4]
 800f16a:	4604      	mov	r4, r0
 800f16c:	4630      	mov	r0, r6
 800f16e:	f7fb ff71 	bl	800b054 <ucdr_serialize_uint16_t>
 800f172:	4020      	ands	r0, r4
 800f174:	b2c0      	uxtb	r0, r0
 800f176:	e7da      	b.n	800f12e <uxr_serialize_ActivityInfoVariant+0x96>
 800f178:	2202      	movs	r2, #2
 800f17a:	4639      	mov	r1, r7
 800f17c:	4630      	mov	r0, r6
 800f17e:	f7fb fd9d 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f182:	78b9      	ldrb	r1, [r7, #2]
 800f184:	4604      	mov	r4, r0
 800f186:	4630      	mov	r0, r6
 800f188:	f7fb ff38 	bl	800affc <ucdr_serialize_uint8_t>
 800f18c:	4020      	ands	r0, r4
 800f18e:	b2c0      	uxtb	r0, r0
 800f190:	e7cd      	b.n	800f12e <uxr_serialize_ActivityInfoVariant+0x96>
 800f192:	68eb      	ldr	r3, [r5, #12]
 800f194:	f108 0801 	add.w	r8, r8, #1
 800f198:	4598      	cmp	r8, r3
 800f19a:	d308      	bcc.n	800f1ae <uxr_serialize_ActivityInfoVariant+0x116>
 800f19c:	ea09 0000 	and.w	r0, r9, r0
 800f1a0:	b2c0      	uxtb	r0, r0
 800f1a2:	e788      	b.n	800f0b6 <uxr_serialize_ActivityInfoVariant+0x1e>
 800f1a4:	ea09 0900 	and.w	r9, r9, r0
 800f1a8:	fa5f f089 	uxtb.w	r0, r9
 800f1ac:	e783      	b.n	800f0b6 <uxr_serialize_ActivityInfoVariant+0x1e>
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	e7ab      	b.n	800f10a <uxr_serialize_ActivityInfoVariant+0x72>
 800f1b2:	bf00      	nop

0800f1b4 <uxr_deserialize_BaseObjectReply>:
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	f7fb fde1 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	18b9      	adds	r1, r7, r2
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7fb fddb 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f1ce:	1d39      	adds	r1, r7, #4
 800f1d0:	4680      	mov	r8, r0
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7fb ff28 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f1d8:	1d79      	adds	r1, r7, #5
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7fb ff23 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f1e2:	ea05 0508 	and.w	r5, r5, r8
 800f1e6:	402c      	ands	r4, r5
 800f1e8:	4020      	ands	r0, r4
 800f1ea:	b2c0      	uxtb	r0, r0
 800f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1f0 <uxr_serialize_ReadSpecification>:
 800f1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f4:	460d      	mov	r5, r1
 800f1f6:	7809      	ldrb	r1, [r1, #0]
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	f7fb feff 	bl	800affc <ucdr_serialize_uint8_t>
 800f1fe:	7869      	ldrb	r1, [r5, #1]
 800f200:	4604      	mov	r4, r0
 800f202:	4630      	mov	r0, r6
 800f204:	f7fb fefa 	bl	800affc <ucdr_serialize_uint8_t>
 800f208:	78a9      	ldrb	r1, [r5, #2]
 800f20a:	4004      	ands	r4, r0
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7fb fec7 	bl	800afa0 <ucdr_serialize_bool>
 800f212:	78ab      	ldrb	r3, [r5, #2]
 800f214:	b2e4      	uxtb	r4, r4
 800f216:	4004      	ands	r4, r0
 800f218:	b94b      	cbnz	r3, 800f22e <uxr_serialize_ReadSpecification+0x3e>
 800f21a:	7a29      	ldrb	r1, [r5, #8]
 800f21c:	4630      	mov	r0, r6
 800f21e:	f7fb febf 	bl	800afa0 <ucdr_serialize_bool>
 800f222:	7a2b      	ldrb	r3, [r5, #8]
 800f224:	4004      	ands	r4, r0
 800f226:	b943      	cbnz	r3, 800f23a <uxr_serialize_ReadSpecification+0x4a>
 800f228:	4620      	mov	r0, r4
 800f22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f22e:	6869      	ldr	r1, [r5, #4]
 800f230:	4630      	mov	r0, r6
 800f232:	f001 ff9b 	bl	801116c <ucdr_serialize_string>
 800f236:	4004      	ands	r4, r0
 800f238:	e7ef      	b.n	800f21a <uxr_serialize_ReadSpecification+0x2a>
 800f23a:	8969      	ldrh	r1, [r5, #10]
 800f23c:	4630      	mov	r0, r6
 800f23e:	f7fb ff09 	bl	800b054 <ucdr_serialize_uint16_t>
 800f242:	89a9      	ldrh	r1, [r5, #12]
 800f244:	4607      	mov	r7, r0
 800f246:	4630      	mov	r0, r6
 800f248:	f7fb ff04 	bl	800b054 <ucdr_serialize_uint16_t>
 800f24c:	89e9      	ldrh	r1, [r5, #14]
 800f24e:	4007      	ands	r7, r0
 800f250:	4630      	mov	r0, r6
 800f252:	f7fb feff 	bl	800b054 <ucdr_serialize_uint16_t>
 800f256:	8a29      	ldrh	r1, [r5, #16]
 800f258:	4680      	mov	r8, r0
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7fb fefa 	bl	800b054 <ucdr_serialize_uint16_t>
 800f260:	b2ff      	uxtb	r7, r7
 800f262:	ea04 0507 	and.w	r5, r4, r7
 800f266:	ea05 0508 	and.w	r5, r5, r8
 800f26a:	ea00 0405 	and.w	r4, r0, r5
 800f26e:	4620      	mov	r0, r4
 800f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f274 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f274:	f7ff bb28 	b.w	800e8c8 <uxr_serialize_CLIENT_Representation>

0800f278 <uxr_serialize_CREATE_Payload>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	2202      	movs	r2, #2
 800f27c:	4606      	mov	r6, r0
 800f27e:	460d      	mov	r5, r1
 800f280:	f7fb fd1c 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f284:	2202      	movs	r2, #2
 800f286:	18a9      	adds	r1, r5, r2
 800f288:	4604      	mov	r4, r0
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7fb fd16 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f290:	7929      	ldrb	r1, [r5, #4]
 800f292:	4607      	mov	r7, r0
 800f294:	4630      	mov	r0, r6
 800f296:	f7fb feb1 	bl	800affc <ucdr_serialize_uint8_t>
 800f29a:	b170      	cbz	r0, 800f2ba <uxr_serialize_CREATE_Payload+0x42>
 800f29c:	792b      	ldrb	r3, [r5, #4]
 800f29e:	403c      	ands	r4, r7
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	b2e4      	uxtb	r4, r4
 800f2a4:	2b0d      	cmp	r3, #13
 800f2a6:	d809      	bhi.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f2a8:	e8df f003 	tbb	[pc, r3]
 800f2ac:	23230a3e 	.word	0x23230a3e
 800f2b0:	0a0a0a0a 	.word	0x0a0a0a0a
 800f2b4:	12121208 	.word	0x12121208
 800f2b8:	5f58      	.short	0x5f58
 800f2ba:	2400      	movs	r4, #0
 800f2bc:	4620      	mov	r0, r4
 800f2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2c0:	f105 0108 	add.w	r1, r5, #8
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f7ff fc07 	bl	800ead8 <uxr_serialize_DATAWRITER_Representation>
 800f2ca:	4004      	ands	r4, r0
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d0:	7a29      	ldrb	r1, [r5, #8]
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f7fb fe92 	bl	800affc <ucdr_serialize_uint8_t>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d0ee      	beq.n	800f2ba <uxr_serialize_CREATE_Payload+0x42>
 800f2dc:	7a2b      	ldrb	r3, [r5, #8]
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d001      	beq.n	800f2e6 <uxr_serialize_CREATE_Payload+0x6e>
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d1ea      	bne.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f2e6:	68e9      	ldr	r1, [r5, #12]
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f001 ff3f 	bl	801116c <ucdr_serialize_string>
 800f2ee:	4004      	ands	r4, r0
 800f2f0:	e7e4      	b.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f2f2:	7a29      	ldrb	r1, [r5, #8]
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f7fb fe81 	bl	800affc <ucdr_serialize_uint8_t>
 800f2fa:	4607      	mov	r7, r0
 800f2fc:	b158      	cbz	r0, 800f316 <uxr_serialize_CREATE_Payload+0x9e>
 800f2fe:	7a2b      	ldrb	r3, [r5, #8]
 800f300:	2b02      	cmp	r3, #2
 800f302:	d039      	beq.n	800f378 <uxr_serialize_CREATE_Payload+0x100>
 800f304:	2b03      	cmp	r3, #3
 800f306:	d106      	bne.n	800f316 <uxr_serialize_CREATE_Payload+0x9e>
 800f308:	68ea      	ldr	r2, [r5, #12]
 800f30a:	f105 0110 	add.w	r1, r5, #16
 800f30e:	4630      	mov	r0, r6
 800f310:	f7f9 fda6 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800f314:	4607      	mov	r7, r0
 800f316:	2202      	movs	r2, #2
 800f318:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 800f31c:	4630      	mov	r0, r6
 800f31e:	f7fb fccd 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f322:	4038      	ands	r0, r7
 800f324:	4004      	ands	r4, r0
 800f326:	e7c9      	b.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f328:	7a29      	ldrb	r1, [r5, #8]
 800f32a:	4630      	mov	r0, r6
 800f32c:	f7fb fe66 	bl	800affc <ucdr_serialize_uint8_t>
 800f330:	4607      	mov	r7, r0
 800f332:	b158      	cbz	r0, 800f34c <uxr_serialize_CREATE_Payload+0xd4>
 800f334:	7a2b      	ldrb	r3, [r5, #8]
 800f336:	2b02      	cmp	r3, #2
 800f338:	d003      	beq.n	800f342 <uxr_serialize_CREATE_Payload+0xca>
 800f33a:	2b03      	cmp	r3, #3
 800f33c:	d022      	beq.n	800f384 <uxr_serialize_CREATE_Payload+0x10c>
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d104      	bne.n	800f34c <uxr_serialize_CREATE_Payload+0xd4>
 800f342:	68e9      	ldr	r1, [r5, #12]
 800f344:	4630      	mov	r0, r6
 800f346:	f001 ff11 	bl	801116c <ucdr_serialize_string>
 800f34a:	4607      	mov	r7, r0
 800f34c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 800f350:	4630      	mov	r0, r6
 800f352:	f7fc fb7b 	bl	800ba4c <ucdr_serialize_int16_t>
 800f356:	4038      	ands	r0, r7
 800f358:	4004      	ands	r4, r0
 800f35a:	e7af      	b.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f35c:	f105 0108 	add.w	r1, r5, #8
 800f360:	4630      	mov	r0, r6
 800f362:	f7ff fb6f 	bl	800ea44 <uxr_serialize_AGENT_Representation>
 800f366:	4004      	ands	r4, r0
 800f368:	e7a8      	b.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f36a:	f105 0108 	add.w	r1, r5, #8
 800f36e:	4630      	mov	r0, r6
 800f370:	f7ff faaa 	bl	800e8c8 <uxr_serialize_CLIENT_Representation>
 800f374:	4004      	ands	r4, r0
 800f376:	e7a1      	b.n	800f2bc <uxr_serialize_CREATE_Payload+0x44>
 800f378:	68e9      	ldr	r1, [r5, #12]
 800f37a:	4630      	mov	r0, r6
 800f37c:	f001 fef6 	bl	801116c <ucdr_serialize_string>
 800f380:	4607      	mov	r7, r0
 800f382:	e7c8      	b.n	800f316 <uxr_serialize_CREATE_Payload+0x9e>
 800f384:	68ea      	ldr	r2, [r5, #12]
 800f386:	f105 0110 	add.w	r1, r5, #16
 800f38a:	4630      	mov	r0, r6
 800f38c:	f7f9 fd68 	bl	8008e60 <ucdr_serialize_sequence_uint8_t>
 800f390:	4607      	mov	r7, r0
 800f392:	e7db      	b.n	800f34c <uxr_serialize_CREATE_Payload+0xd4>

0800f394 <uxr_deserialize_GET_INFO_Payload>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	2202      	movs	r2, #2
 800f398:	4605      	mov	r5, r0
 800f39a:	460e      	mov	r6, r1
 800f39c:	f7fb fcf2 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f3a0:	2202      	movs	r2, #2
 800f3a2:	18b1      	adds	r1, r6, r2
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f7fb fcec 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f3ac:	1d31      	adds	r1, r6, #4
 800f3ae:	4004      	ands	r4, r0
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f7fc f969 	bl	800b688 <ucdr_deserialize_uint32_t>
 800f3b6:	b2e4      	uxtb	r4, r4
 800f3b8:	4020      	ands	r0, r4
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}

0800f3bc <uxr_serialize_DELETE_Payload>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	2202      	movs	r2, #2
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	460e      	mov	r6, r1
 800f3c4:	f7fb fc7a 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f3c8:	2202      	movs	r2, #2
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	18b1      	adds	r1, r6, r2
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7fb fc74 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f3d4:	4020      	ands	r0, r4
 800f3d6:	b2c0      	uxtb	r0, r0
 800f3d8:	bd70      	pop	{r4, r5, r6, pc}
 800f3da:	bf00      	nop

0800f3dc <uxr_deserialize_STATUS_AGENT_Payload>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	460e      	mov	r6, r1
 800f3e4:	f7fb fe20 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f3e8:	1c71      	adds	r1, r6, #1
 800f3ea:	4604      	mov	r4, r0
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f7fb fe1b 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f3f2:	2204      	movs	r2, #4
 800f3f4:	18b1      	adds	r1, r6, r2
 800f3f6:	4681      	mov	r9, r0
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f7fb fcc3 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f3fe:	f106 0108 	add.w	r1, r6, #8
 800f402:	4680      	mov	r8, r0
 800f404:	2202      	movs	r2, #2
 800f406:	4628      	mov	r0, r5
 800f408:	f7fb fcbc 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f40c:	2202      	movs	r2, #2
 800f40e:	f106 010a 	add.w	r1, r6, #10
 800f412:	4607      	mov	r7, r0
 800f414:	4628      	mov	r0, r5
 800f416:	f7fb fcb5 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f41a:	ea04 0409 	and.w	r4, r4, r9
 800f41e:	4603      	mov	r3, r0
 800f420:	f106 010c 	add.w	r1, r6, #12
 800f424:	4628      	mov	r0, r5
 800f426:	b2e4      	uxtb	r4, r4
 800f428:	461d      	mov	r5, r3
 800f42a:	ea04 0408 	and.w	r4, r4, r8
 800f42e:	f7fb fdcd 	bl	800afcc <ucdr_deserialize_bool>
 800f432:	4027      	ands	r7, r4
 800f434:	403d      	ands	r5, r7
 800f436:	4028      	ands	r0, r5
 800f438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f43c <uxr_deserialize_STATUS_Payload>:
 800f43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f440:	2202      	movs	r2, #2
 800f442:	4606      	mov	r6, r0
 800f444:	460f      	mov	r7, r1
 800f446:	f7fb fc9d 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f44a:	2202      	movs	r2, #2
 800f44c:	18b9      	adds	r1, r7, r2
 800f44e:	4605      	mov	r5, r0
 800f450:	4630      	mov	r0, r6
 800f452:	f7fb fc97 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f456:	1d39      	adds	r1, r7, #4
 800f458:	4680      	mov	r8, r0
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7fb fde4 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f460:	1d79      	adds	r1, r7, #5
 800f462:	4604      	mov	r4, r0
 800f464:	4630      	mov	r0, r6
 800f466:	f7fb fddf 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f46a:	ea05 0508 	and.w	r5, r5, r8
 800f46e:	402c      	ands	r4, r5
 800f470:	4020      	ands	r0, r4
 800f472:	b2c0      	uxtb	r0, r0
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f478 <uxr_serialize_INFO_Payload>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	2202      	movs	r2, #2
 800f47e:	460c      	mov	r4, r1
 800f480:	4605      	mov	r5, r0
 800f482:	f7fb fc1b 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f486:	2202      	movs	r2, #2
 800f488:	18a1      	adds	r1, r4, r2
 800f48a:	4680      	mov	r8, r0
 800f48c:	4628      	mov	r0, r5
 800f48e:	f7fb fc15 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f492:	7921      	ldrb	r1, [r4, #4]
 800f494:	4607      	mov	r7, r0
 800f496:	4628      	mov	r0, r5
 800f498:	f7fb fdb0 	bl	800affc <ucdr_serialize_uint8_t>
 800f49c:	7961      	ldrb	r1, [r4, #5]
 800f49e:	4606      	mov	r6, r0
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f7fb fdab 	bl	800affc <ucdr_serialize_uint8_t>
 800f4a6:	ea08 0807 	and.w	r8, r8, r7
 800f4aa:	ea06 0608 	and.w	r6, r6, r8
 800f4ae:	ea00 0706 	and.w	r7, r0, r6
 800f4b2:	7a21      	ldrb	r1, [r4, #8]
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f7fb fd73 	bl	800afa0 <ucdr_serialize_bool>
 800f4ba:	7a23      	ldrb	r3, [r4, #8]
 800f4bc:	b2ff      	uxtb	r7, r7
 800f4be:	4606      	mov	r6, r0
 800f4c0:	b96b      	cbnz	r3, 800f4de <uxr_serialize_INFO_Payload+0x66>
 800f4c2:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	f7fb fd6a 	bl	800afa0 <ucdr_serialize_bool>
 800f4cc:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f4d0:	4030      	ands	r0, r6
 800f4d2:	b2c6      	uxtb	r6, r0
 800f4d4:	b983      	cbnz	r3, 800f4f8 <uxr_serialize_INFO_Payload+0x80>
 800f4d6:	ea06 0007 	and.w	r0, r6, r7
 800f4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4de:	7b21      	ldrb	r1, [r4, #12]
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f7fb fd8b 	bl	800affc <ucdr_serialize_uint8_t>
 800f4e6:	b188      	cbz	r0, 800f50c <uxr_serialize_INFO_Payload+0x94>
 800f4e8:	f104 010c 	add.w	r1, r4, #12
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	f7ff fb1b 	bl	800eb28 <uxr_serialize_ObjectVariant.part.0>
 800f4f2:	4030      	ands	r0, r6
 800f4f4:	b2c6      	uxtb	r6, r0
 800f4f6:	e7e4      	b.n	800f4c2 <uxr_serialize_INFO_Payload+0x4a>
 800f4f8:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f7ff fdcb 	bl	800f098 <uxr_serialize_ActivityInfoVariant>
 800f502:	4006      	ands	r6, r0
 800f504:	ea06 0007 	and.w	r0, r6, r7
 800f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50c:	4606      	mov	r6, r0
 800f50e:	e7d8      	b.n	800f4c2 <uxr_serialize_INFO_Payload+0x4a>

0800f510 <uxr_serialize_READ_DATA_Payload>:
 800f510:	b570      	push	{r4, r5, r6, lr}
 800f512:	2202      	movs	r2, #2
 800f514:	4605      	mov	r5, r0
 800f516:	460e      	mov	r6, r1
 800f518:	f7fb fbd0 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f51c:	2202      	movs	r2, #2
 800f51e:	18b1      	adds	r1, r6, r2
 800f520:	4604      	mov	r4, r0
 800f522:	4628      	mov	r0, r5
 800f524:	f7fb fbca 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f528:	1d31      	adds	r1, r6, #4
 800f52a:	4004      	ands	r4, r0
 800f52c:	4628      	mov	r0, r5
 800f52e:	f7ff fe5f 	bl	800f1f0 <uxr_serialize_ReadSpecification>
 800f532:	b2e4      	uxtb	r4, r4
 800f534:	4020      	ands	r0, r4
 800f536:	bd70      	pop	{r4, r5, r6, pc}

0800f538 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f538:	b570      	push	{r4, r5, r6, lr}
 800f53a:	2202      	movs	r2, #2
 800f53c:	4605      	mov	r5, r0
 800f53e:	460e      	mov	r6, r1
 800f540:	f7fb fbbc 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f544:	2202      	movs	r2, #2
 800f546:	4604      	mov	r4, r0
 800f548:	18b1      	adds	r1, r6, r2
 800f54a:	4628      	mov	r0, r5
 800f54c:	f7fb fbb6 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f550:	4020      	ands	r0, r4
 800f552:	b2c0      	uxtb	r0, r0
 800f554:	bd70      	pop	{r4, r5, r6, pc}
 800f556:	bf00      	nop

0800f558 <uxr_serialize_ACKNACK_Payload>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	460c      	mov	r4, r1
 800f55c:	460e      	mov	r6, r1
 800f55e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f562:	4605      	mov	r5, r0
 800f564:	f7fb fd76 	bl	800b054 <ucdr_serialize_uint16_t>
 800f568:	2202      	movs	r2, #2
 800f56a:	4621      	mov	r1, r4
 800f56c:	4604      	mov	r4, r0
 800f56e:	4628      	mov	r0, r5
 800f570:	f7fb fba4 	bl	800acbc <ucdr_serialize_array_uint8_t>
 800f574:	7931      	ldrb	r1, [r6, #4]
 800f576:	4004      	ands	r4, r0
 800f578:	4628      	mov	r0, r5
 800f57a:	f7fb fd3f 	bl	800affc <ucdr_serialize_uint8_t>
 800f57e:	b2e4      	uxtb	r4, r4
 800f580:	4020      	ands	r0, r4
 800f582:	bd70      	pop	{r4, r5, r6, pc}

0800f584 <uxr_deserialize_ACKNACK_Payload>:
 800f584:	b570      	push	{r4, r5, r6, lr}
 800f586:	4605      	mov	r5, r0
 800f588:	460e      	mov	r6, r1
 800f58a:	f7fb fe67 	bl	800b25c <ucdr_deserialize_uint16_t>
 800f58e:	2202      	movs	r2, #2
 800f590:	18b1      	adds	r1, r6, r2
 800f592:	4604      	mov	r4, r0
 800f594:	4628      	mov	r0, r5
 800f596:	f7fb fbf5 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f59a:	1d31      	adds	r1, r6, #4
 800f59c:	4004      	ands	r4, r0
 800f59e:	4628      	mov	r0, r5
 800f5a0:	f7fb fd42 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f5a4:	b2e4      	uxtb	r4, r4
 800f5a6:	4020      	ands	r0, r4
 800f5a8:	bd70      	pop	{r4, r5, r6, pc}
 800f5aa:	bf00      	nop

0800f5ac <uxr_serialize_HEARTBEAT_Payload>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	460d      	mov	r5, r1
 800f5b0:	8809      	ldrh	r1, [r1, #0]
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	f7fb fd4e 	bl	800b054 <ucdr_serialize_uint16_t>
 800f5b8:	8869      	ldrh	r1, [r5, #2]
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	4630      	mov	r0, r6
 800f5be:	f7fb fd49 	bl	800b054 <ucdr_serialize_uint16_t>
 800f5c2:	7929      	ldrb	r1, [r5, #4]
 800f5c4:	4004      	ands	r4, r0
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f7fb fd18 	bl	800affc <ucdr_serialize_uint8_t>
 800f5cc:	b2e4      	uxtb	r4, r4
 800f5ce:	4020      	ands	r0, r4
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	bf00      	nop

0800f5d4 <uxr_deserialize_HEARTBEAT_Payload>:
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	460e      	mov	r6, r1
 800f5da:	f7fb fe3f 	bl	800b25c <ucdr_deserialize_uint16_t>
 800f5de:	1cb1      	adds	r1, r6, #2
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	4628      	mov	r0, r5
 800f5e4:	f7fb fe3a 	bl	800b25c <ucdr_deserialize_uint16_t>
 800f5e8:	1d31      	adds	r1, r6, #4
 800f5ea:	4004      	ands	r4, r0
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f7fb fd1b 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f5f2:	b2e4      	uxtb	r4, r4
 800f5f4:	4020      	ands	r0, r4
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}

0800f5f8 <uxr_serialize_TIMESTAMP_Payload>:
 800f5f8:	b570      	push	{r4, r5, r6, lr}
 800f5fa:	460d      	mov	r5, r1
 800f5fc:	6809      	ldr	r1, [r1, #0]
 800f5fe:	4606      	mov	r6, r0
 800f600:	f7fc fb2a 	bl	800bc58 <ucdr_serialize_int32_t>
 800f604:	6869      	ldr	r1, [r5, #4]
 800f606:	4604      	mov	r4, r0
 800f608:	4630      	mov	r0, r6
 800f60a:	f7fb ff13 	bl	800b434 <ucdr_serialize_uint32_t>
 800f60e:	4020      	ands	r0, r4
 800f610:	b2c0      	uxtb	r0, r0
 800f612:	bd70      	pop	{r4, r5, r6, pc}

0800f614 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f618:	4605      	mov	r5, r0
 800f61a:	460e      	mov	r6, r1
 800f61c:	f7fc fbb6 	bl	800bd8c <ucdr_deserialize_int32_t>
 800f620:	1d31      	adds	r1, r6, #4
 800f622:	4607      	mov	r7, r0
 800f624:	4628      	mov	r0, r5
 800f626:	f7fc f82f 	bl	800b688 <ucdr_deserialize_uint32_t>
 800f62a:	f106 0108 	add.w	r1, r6, #8
 800f62e:	4680      	mov	r8, r0
 800f630:	4628      	mov	r0, r5
 800f632:	f7fc fbab 	bl	800bd8c <ucdr_deserialize_int32_t>
 800f636:	f106 010c 	add.w	r1, r6, #12
 800f63a:	4604      	mov	r4, r0
 800f63c:	4628      	mov	r0, r5
 800f63e:	f7fc f823 	bl	800b688 <ucdr_deserialize_uint32_t>
 800f642:	ea07 0708 	and.w	r7, r7, r8
 800f646:	403c      	ands	r4, r7
 800f648:	f106 0110 	add.w	r1, r6, #16
 800f64c:	4004      	ands	r4, r0
 800f64e:	4628      	mov	r0, r5
 800f650:	f7fc fb9c 	bl	800bd8c <ucdr_deserialize_int32_t>
 800f654:	f106 0114 	add.w	r1, r6, #20
 800f658:	4607      	mov	r7, r0
 800f65a:	4628      	mov	r0, r5
 800f65c:	f7fc f814 	bl	800b688 <ucdr_deserialize_uint32_t>
 800f660:	b2e4      	uxtb	r4, r4
 800f662:	403c      	ands	r4, r7
 800f664:	4020      	ands	r0, r4
 800f666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f66a:	bf00      	nop

0800f66c <uxr_deserialize_SampleIdentity>:
 800f66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f670:	220c      	movs	r2, #12
 800f672:	4604      	mov	r4, r0
 800f674:	460d      	mov	r5, r1
 800f676:	f7fb fb85 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f67a:	2203      	movs	r2, #3
 800f67c:	f105 010c 	add.w	r1, r5, #12
 800f680:	4680      	mov	r8, r0
 800f682:	4620      	mov	r0, r4
 800f684:	f7fb fb7e 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 800f688:	f105 010f 	add.w	r1, r5, #15
 800f68c:	4681      	mov	r9, r0
 800f68e:	4620      	mov	r0, r4
 800f690:	f7fb fcca 	bl	800b028 <ucdr_deserialize_uint8_t>
 800f694:	f105 0110 	add.w	r1, r5, #16
 800f698:	4607      	mov	r7, r0
 800f69a:	4620      	mov	r0, r4
 800f69c:	f7fc fb76 	bl	800bd8c <ucdr_deserialize_int32_t>
 800f6a0:	f105 0114 	add.w	r1, r5, #20
 800f6a4:	4606      	mov	r6, r0
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f7fb ffee 	bl	800b688 <ucdr_deserialize_uint32_t>
 800f6ac:	ea08 0809 	and.w	r8, r8, r9
 800f6b0:	ea07 0708 	and.w	r7, r7, r8
 800f6b4:	403e      	ands	r6, r7
 800f6b6:	4030      	ands	r0, r6
 800f6b8:	b2c0      	uxtb	r0, r0
 800f6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6be:	bf00      	nop

0800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f6c0:	280b      	cmp	r0, #11
 800f6c2:	dc0d      	bgt.n	800f6e0 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	db09      	blt.n	800f6dc <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f6c8:	280b      	cmp	r0, #11
 800f6ca:	d807      	bhi.n	800f6dc <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f6cc:	e8df f000 	tbb	[pc, r0]
 800f6d0:	07060607 	.word	0x07060607
 800f6d4:	06060606 	.word	0x06060606
 800f6d8:	07070606 	.word	0x07070606
 800f6dc:	2001      	movs	r0, #1
 800f6de:	4770      	bx	lr
 800f6e0:	28cb      	cmp	r0, #203	@ 0xcb
 800f6e2:	bf14      	ite	ne
 800f6e4:	2001      	movne	r0, #1
 800f6e6:	20cb      	moveq	r0, #203	@ 0xcb
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop

0800f6ec <rcl_get_zero_initialized_context>:
 800f6ec:	4a03      	ldr	r2, [pc, #12]	@ (800f6fc <rcl_get_zero_initialized_context+0x10>)
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	4770      	bx	lr
 800f6fc:	08014760 	.word	0x08014760

0800f700 <rcl_context_is_valid>:
 800f700:	b118      	cbz	r0, 800f70a <rcl_context_is_valid+0xa>
 800f702:	6840      	ldr	r0, [r0, #4]
 800f704:	3800      	subs	r0, #0
 800f706:	bf18      	it	ne
 800f708:	2001      	movne	r0, #1
 800f70a:	4770      	bx	lr

0800f70c <__cleanup_context>:
 800f70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f710:	4606      	mov	r6, r0
 800f712:	6800      	ldr	r0, [r0, #0]
 800f714:	2300      	movs	r3, #0
 800f716:	6073      	str	r3, [r6, #4]
 800f718:	2800      	cmp	r0, #0
 800f71a:	d042      	beq.n	800f7a2 <__cleanup_context+0x96>
 800f71c:	6943      	ldr	r3, [r0, #20]
 800f71e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f722:	6907      	ldr	r7, [r0, #16]
 800f724:	b39b      	cbz	r3, 800f78e <__cleanup_context+0x82>
 800f726:	3014      	adds	r0, #20
 800f728:	f7f9 fc54 	bl	8008fd4 <rcl_init_options_fini>
 800f72c:	4680      	mov	r8, r0
 800f72e:	2800      	cmp	r0, #0
 800f730:	d144      	bne.n	800f7bc <__cleanup_context+0xb0>
 800f732:	6830      	ldr	r0, [r6, #0]
 800f734:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f736:	b123      	cbz	r3, 800f742 <__cleanup_context+0x36>
 800f738:	3028      	adds	r0, #40	@ 0x28
 800f73a:	f7fa f949 	bl	80099d0 <rmw_context_fini>
 800f73e:	bbb8      	cbnz	r0, 800f7b0 <__cleanup_context+0xa4>
 800f740:	6830      	ldr	r0, [r6, #0]
 800f742:	6a03      	ldr	r3, [r0, #32]
 800f744:	b1db      	cbz	r3, 800f77e <__cleanup_context+0x72>
 800f746:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f74a:	2a01      	cmp	r2, #1
 800f74c:	f17c 0100 	sbcs.w	r1, ip, #0
 800f750:	db11      	blt.n	800f776 <__cleanup_context+0x6a>
 800f752:	2400      	movs	r4, #0
 800f754:	4625      	mov	r5, r4
 800f756:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f75a:	4639      	mov	r1, r7
 800f75c:	b1c8      	cbz	r0, 800f792 <__cleanup_context+0x86>
 800f75e:	47c8      	blx	r9
 800f760:	6833      	ldr	r3, [r6, #0]
 800f762:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f766:	3401      	adds	r4, #1
 800f768:	f145 0500 	adc.w	r5, r5, #0
 800f76c:	4294      	cmp	r4, r2
 800f76e:	eb75 010c 	sbcs.w	r1, r5, ip
 800f772:	6a1b      	ldr	r3, [r3, #32]
 800f774:	dbef      	blt.n	800f756 <__cleanup_context+0x4a>
 800f776:	4618      	mov	r0, r3
 800f778:	4639      	mov	r1, r7
 800f77a:	47c8      	blx	r9
 800f77c:	6830      	ldr	r0, [r6, #0]
 800f77e:	4639      	mov	r1, r7
 800f780:	47c8      	blx	r9
 800f782:	2300      	movs	r3, #0
 800f784:	e9c6 3300 	strd	r3, r3, [r6]
 800f788:	4640      	mov	r0, r8
 800f78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f78e:	4698      	mov	r8, r3
 800f790:	e7d0      	b.n	800f734 <__cleanup_context+0x28>
 800f792:	3401      	adds	r4, #1
 800f794:	f145 0500 	adc.w	r5, r5, #0
 800f798:	4294      	cmp	r4, r2
 800f79a:	eb75 010c 	sbcs.w	r1, r5, ip
 800f79e:	dbda      	blt.n	800f756 <__cleanup_context+0x4a>
 800f7a0:	e7e9      	b.n	800f776 <__cleanup_context+0x6a>
 800f7a2:	4680      	mov	r8, r0
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e9c6 3300 	strd	r3, r3, [r6]
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b0:	f1b8 0f00 	cmp.w	r8, #0
 800f7b4:	d005      	beq.n	800f7c2 <__cleanup_context+0xb6>
 800f7b6:	f7f9 fea3 	bl	8009500 <rcutils_reset_error>
 800f7ba:	e7c1      	b.n	800f740 <__cleanup_context+0x34>
 800f7bc:	f7f9 fea0 	bl	8009500 <rcutils_reset_error>
 800f7c0:	e7b7      	b.n	800f732 <__cleanup_context+0x26>
 800f7c2:	f7ff ff7d 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 800f7c6:	4680      	mov	r8, r0
 800f7c8:	e7f5      	b.n	800f7b6 <__cleanup_context+0xaa>
 800f7ca:	bf00      	nop

0800f7cc <rcl_init>:
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	1e04      	subs	r4, r0, #0
 800f7d2:	b0a7      	sub	sp, #156	@ 0x9c
 800f7d4:	460d      	mov	r5, r1
 800f7d6:	4617      	mov	r7, r2
 800f7d8:	461e      	mov	r6, r3
 800f7da:	dd13      	ble.n	800f804 <rcl_init+0x38>
 800f7dc:	b161      	cbz	r1, 800f7f8 <rcl_init+0x2c>
 800f7de:	f1a1 0e04 	sub.w	lr, r1, #4
 800f7e2:	f04f 0c00 	mov.w	ip, #0
 800f7e6:	e001      	b.n	800f7ec <rcl_init+0x20>
 800f7e8:	4564      	cmp	r4, ip
 800f7ea:	d00d      	beq.n	800f808 <rcl_init+0x3c>
 800f7ec:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 800f7f0:	f10c 0c01 	add.w	ip, ip, #1
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d1f7      	bne.n	800f7e8 <rcl_init+0x1c>
 800f7f8:	f04f 080b 	mov.w	r8, #11
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	b027      	add	sp, #156	@ 0x9c
 800f800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f804:	2900      	cmp	r1, #0
 800f806:	d1f7      	bne.n	800f7f8 <rcl_init+0x2c>
 800f808:	2f00      	cmp	r7, #0
 800f80a:	d0f5      	beq.n	800f7f8 <rcl_init+0x2c>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0f2      	beq.n	800f7f8 <rcl_init+0x2c>
 800f812:	469c      	mov	ip, r3
 800f814:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f818:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 800f81c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f820:	f8dc 3000 	ldr.w	r3, [ip]
 800f824:	f8ce 3000 	str.w	r3, [lr]
 800f828:	a821      	add	r0, sp, #132	@ 0x84
 800f82a:	f7f9 fe43 	bl	80094b4 <rcutils_allocator_is_valid>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d0e2      	beq.n	800f7f8 <rcl_init+0x2c>
 800f832:	2e00      	cmp	r6, #0
 800f834:	d0e0      	beq.n	800f7f8 <rcl_init+0x2c>
 800f836:	6833      	ldr	r3, [r6, #0]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d176      	bne.n	800f92a <rcl_init+0x15e>
 800f83c:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800f840:	2198      	movs	r1, #152	@ 0x98
 800f842:	2001      	movs	r0, #1
 800f844:	4798      	blx	r3
 800f846:	4680      	mov	r8, r0
 800f848:	6030      	str	r0, [r6, #0]
 800f84a:	2800      	cmp	r0, #0
 800f84c:	f000 80cc 	beq.w	800f9e8 <rcl_init+0x21c>
 800f850:	a802      	add	r0, sp, #8
 800f852:	f001 f8ff 	bl	8010a54 <rmw_get_zero_initialized_context>
 800f856:	a902      	add	r1, sp, #8
 800f858:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800f85c:	2270      	movs	r2, #112	@ 0x70
 800f85e:	f003 fd5c 	bl	801331a <memcpy>
 800f862:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 800f866:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f86a:	f8d6 8000 	ldr.w	r8, [r6]
 800f86e:	46c4      	mov	ip, r8
 800f870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f874:	f8de 3000 	ldr.w	r3, [lr]
 800f878:	f8cc 3000 	str.w	r3, [ip]
 800f87c:	f108 0114 	add.w	r1, r8, #20
 800f880:	4638      	mov	r0, r7
 800f882:	f7f9 fbd1 	bl	8009028 <rcl_init_options_copy>
 800f886:	4680      	mov	r8, r0
 800f888:	2800      	cmp	r0, #0
 800f88a:	d147      	bne.n	800f91c <rcl_init+0x150>
 800f88c:	f8d6 9000 	ldr.w	r9, [r6]
 800f890:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 800f894:	f8c9 0020 	str.w	r0, [r9, #32]
 800f898:	f8c9 4018 	str.w	r4, [r9, #24]
 800f89c:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f8a0:	2c00      	cmp	r4, #0
 800f8a2:	d04a      	beq.n	800f93a <rcl_init+0x16e>
 800f8a4:	2d00      	cmp	r5, #0
 800f8a6:	d048      	beq.n	800f93a <rcl_init+0x16e>
 800f8a8:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 800f8ac:	2104      	movs	r1, #4
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	4798      	blx	r3
 800f8b2:	f8c9 0020 	str.w	r0, [r9, #32]
 800f8b6:	f8d6 9000 	ldr.w	r9, [r6]
 800f8ba:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800f8be:	f1bb 0f00 	cmp.w	fp, #0
 800f8c2:	d029      	beq.n	800f918 <rcl_init+0x14c>
 800f8c4:	2c01      	cmp	r4, #1
 800f8c6:	f17a 0300 	sbcs.w	r3, sl, #0
 800f8ca:	db36      	blt.n	800f93a <rcl_init+0x16e>
 800f8cc:	f04f 0800 	mov.w	r8, #0
 800f8d0:	3d04      	subs	r5, #4
 800f8d2:	46c1      	mov	r9, r8
 800f8d4:	e00d      	b.n	800f8f2 <rcl_init+0x126>
 800f8d6:	6829      	ldr	r1, [r5, #0]
 800f8d8:	f003 fd1f 	bl	801331a <memcpy>
 800f8dc:	f118 0801 	adds.w	r8, r8, #1
 800f8e0:	f149 0900 	adc.w	r9, r9, #0
 800f8e4:	45ca      	cmp	sl, r9
 800f8e6:	bf08      	it	eq
 800f8e8:	4544      	cmpeq	r4, r8
 800f8ea:	d024      	beq.n	800f936 <rcl_init+0x16a>
 800f8ec:	6833      	ldr	r3, [r6, #0]
 800f8ee:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800f8f2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f8f6:	f7f0 fcf3 	bl	80002e0 <strlen>
 800f8fa:	1c42      	adds	r2, r0, #1
 800f8fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f8fe:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800f900:	9201      	str	r2, [sp, #4]
 800f902:	4610      	mov	r0, r2
 800f904:	4798      	blx	r3
 800f906:	6833      	ldr	r3, [r6, #0]
 800f908:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	9a01      	ldr	r2, [sp, #4]
 800f910:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f914:	2800      	cmp	r0, #0
 800f916:	d1de      	bne.n	800f8d6 <rcl_init+0x10a>
 800f918:	f04f 080a 	mov.w	r8, #10
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7ff fef5 	bl	800f70c <__cleanup_context>
 800f922:	4640      	mov	r0, r8
 800f924:	b027      	add	sp, #156	@ 0x9c
 800f926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f92a:	f04f 0864 	mov.w	r8, #100	@ 0x64
 800f92e:	4640      	mov	r0, r8
 800f930:	b027      	add	sp, #156	@ 0x9c
 800f932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f936:	f8d6 9000 	ldr.w	r9, [r6]
 800f93a:	4a40      	ldr	r2, [pc, #256]	@ (800fa3c <rcl_init+0x270>)
 800f93c:	6813      	ldr	r3, [r2, #0]
 800f93e:	3301      	adds	r3, #1
 800f940:	d04d      	beq.n	800f9de <rcl_init+0x212>
 800f942:	461d      	mov	r5, r3
 800f944:	2000      	movs	r0, #0
 800f946:	4619      	mov	r1, r3
 800f948:	f8d9 4014 	ldr.w	r4, [r9, #20]
 800f94c:	6073      	str	r3, [r6, #4]
 800f94e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f950:	6011      	str	r1, [r2, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	e9c4 5006 	strd	r5, r0, [r4, #24]
 800f958:	d05e      	beq.n	800fa18 <rcl_init+0x24c>
 800f95a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d045      	beq.n	800f9ee <rcl_init+0x222>
 800f962:	683a      	ldr	r2, [r7, #0]
 800f964:	2b01      	cmp	r3, #1
 800f966:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800f96a:	d04c      	beq.n	800fa06 <rcl_init+0x23a>
 800f96c:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 800f970:	2a00      	cmp	r2, #0
 800f972:	d05c      	beq.n	800fa2e <rcl_init+0x262>
 800f974:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f976:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800f97a:	b953      	cbnz	r3, 800f992 <rcl_init+0x1c6>
 800f97c:	2801      	cmp	r0, #1
 800f97e:	d008      	beq.n	800f992 <rcl_init+0x1c6>
 800f980:	a921      	add	r1, sp, #132	@ 0x84
 800f982:	4628      	mov	r0, r5
 800f984:	f002 f9a0 	bl	8011cc8 <rcl_get_discovery_static_peers>
 800f988:	4680      	mov	r8, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d1c6      	bne.n	800f91c <rcl_init+0x150>
 800f98e:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800f992:	f002 f98f 	bl	8011cb4 <rcl_automatic_discovery_range_to_string>
 800f996:	6833      	ldr	r3, [r6, #0]
 800f998:	695b      	ldr	r3, [r3, #20]
 800f99a:	aa20      	add	r2, sp, #128	@ 0x80
 800f99c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f99e:	a91f      	add	r1, sp, #124	@ 0x7c
 800f9a0:	f000 fcc6 	bl	8010330 <rcl_validate_enclave_name>
 800f9a4:	4680      	mov	r8, r0
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d1b8      	bne.n	800f91c <rcl_init+0x150>
 800f9aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f9ac:	bb8b      	cbnz	r3, 800fa12 <rcl_init+0x246>
 800f9ae:	6831      	ldr	r1, [r6, #0]
 800f9b0:	694b      	ldr	r3, [r1, #20]
 800f9b2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800f9b4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f9b8:	f000 fba6 	bl	8010108 <rcl_get_security_options_from_environment>
 800f9bc:	4680      	mov	r8, r0
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d1ac      	bne.n	800f91c <rcl_init+0x150>
 800f9c2:	6831      	ldr	r1, [r6, #0]
 800f9c4:	6948      	ldr	r0, [r1, #20]
 800f9c6:	3128      	adds	r1, #40	@ 0x28
 800f9c8:	3018      	adds	r0, #24
 800f9ca:	f7f9 fecd 	bl	8009768 <rmw_init>
 800f9ce:	4680      	mov	r8, r0
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	f43f af13 	beq.w	800f7fc <rcl_init+0x30>
 800f9d6:	f7ff fe73 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 800f9da:	4680      	mov	r8, r0
 800f9dc:	e79e      	b.n	800f91c <rcl_init+0x150>
 800f9de:	2101      	movs	r1, #1
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	e7af      	b.n	800f948 <rcl_init+0x17c>
 800f9e8:	f04f 080a 	mov.w	r8, #10
 800f9ec:	e706      	b.n	800f7fc <rcl_init+0x30>
 800f9ee:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800f9f2:	f000 f825 	bl	800fa40 <rcl_get_localhost_only>
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d18f      	bne.n	800f91c <rcl_init+0x150>
 800f9fc:	6832      	ldr	r2, [r6, #0]
 800f9fe:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800fa02:	6954      	ldr	r4, [r2, #20]
 800fa04:	e7ad      	b.n	800f962 <rcl_init+0x196>
 800fa06:	2002      	movs	r0, #2
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 800fa0e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800fa10:	e7bf      	b.n	800f992 <rcl_init+0x1c6>
 800fa12:	f04f 0801 	mov.w	r8, #1
 800fa16:	e781      	b.n	800f91c <rcl_init+0x150>
 800fa18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800fa1c:	f002 f9be 	bl	8011d9c <rcl_get_default_domain_id>
 800fa20:	4680      	mov	r8, r0
 800fa22:	2800      	cmp	r0, #0
 800fa24:	f47f af7a 	bne.w	800f91c <rcl_init+0x150>
 800fa28:	6833      	ldr	r3, [r6, #0]
 800fa2a:	695c      	ldr	r4, [r3, #20]
 800fa2c:	e795      	b.n	800f95a <rcl_init+0x18e>
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f002 f8fe 	bl	8011c30 <rcl_get_automatic_discovery_range>
 800fa34:	4680      	mov	r8, r0
 800fa36:	2800      	cmp	r0, #0
 800fa38:	d09c      	beq.n	800f974 <rcl_init+0x1a8>
 800fa3a:	e76f      	b.n	800f91c <rcl_init+0x150>
 800fa3c:	20010a90 	.word	0x20010a90

0800fa40 <rcl_get_localhost_only>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	2300      	movs	r3, #0
 800fa46:	9301      	str	r3, [sp, #4]
 800fa48:	b1b8      	cbz	r0, 800fa7a <rcl_get_localhost_only+0x3a>
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	a901      	add	r1, sp, #4
 800fa4e:	480c      	ldr	r0, [pc, #48]	@ (800fa80 <rcl_get_localhost_only+0x40>)
 800fa50:	f000 fcb6 	bl	80103c0 <rcutils_get_env>
 800fa54:	b110      	cbz	r0, 800fa5c <rcl_get_localhost_only+0x1c>
 800fa56:	2001      	movs	r0, #1
 800fa58:	b002      	add	sp, #8
 800fa5a:	bd10      	pop	{r4, pc}
 800fa5c:	9b01      	ldr	r3, [sp, #4]
 800fa5e:	b10b      	cbz	r3, 800fa64 <rcl_get_localhost_only+0x24>
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	b923      	cbnz	r3, 800fa6e <rcl_get_localhost_only+0x2e>
 800fa64:	2300      	movs	r3, #0
 800fa66:	7023      	strb	r3, [r4, #0]
 800fa68:	2000      	movs	r0, #0
 800fa6a:	b002      	add	sp, #8
 800fa6c:	bd10      	pop	{r4, pc}
 800fa6e:	2b31      	cmp	r3, #49	@ 0x31
 800fa70:	bf14      	ite	ne
 800fa72:	2302      	movne	r3, #2
 800fa74:	2301      	moveq	r3, #1
 800fa76:	7023      	strb	r3, [r4, #0]
 800fa78:	e7f6      	b.n	800fa68 <rcl_get_localhost_only+0x28>
 800fa7a:	200b      	movs	r0, #11
 800fa7c:	b002      	add	sp, #8
 800fa7e:	bd10      	pop	{r4, pc}
 800fa80:	08014768 	.word	0x08014768

0800fa84 <rcl_get_zero_initialized_node>:
 800fa84:	4a03      	ldr	r2, [pc, #12]	@ (800fa94 <rcl_get_zero_initialized_node+0x10>)
 800fa86:	4603      	mov	r3, r0
 800fa88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa8c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa90:	4618      	mov	r0, r3
 800fa92:	4770      	bx	lr
 800fa94:	080147a0 	.word	0x080147a0

0800fa98 <rcl_node_init>:
 800fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa9c:	b0ab      	sub	sp, #172	@ 0xac
 800fa9e:	4604      	mov	r4, r0
 800faa0:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800faa2:	a825      	add	r0, sp, #148	@ 0x94
 800faa4:	4689      	mov	r9, r1
 800faa6:	4690      	mov	r8, r2
 800faa8:	461f      	mov	r7, r3
 800faaa:	f002 fb95 	bl	80121d8 <rcl_guard_condition_get_default_options>
 800faae:	2d00      	cmp	r5, #0
 800fab0:	f000 80d8 	beq.w	800fc64 <rcl_node_init+0x1cc>
 800fab4:	4628      	mov	r0, r5
 800fab6:	f7f9 fcfd 	bl	80094b4 <rcutils_allocator_is_valid>
 800faba:	2800      	cmp	r0, #0
 800fabc:	f000 80d2 	beq.w	800fc64 <rcl_node_init+0x1cc>
 800fac0:	f1b9 0f00 	cmp.w	r9, #0
 800fac4:	f000 80ce 	beq.w	800fc64 <rcl_node_init+0x1cc>
 800fac8:	f1b8 0f00 	cmp.w	r8, #0
 800facc:	f000 80ca 	beq.w	800fc64 <rcl_node_init+0x1cc>
 800fad0:	2c00      	cmp	r4, #0
 800fad2:	f000 80c7 	beq.w	800fc64 <rcl_node_init+0x1cc>
 800fad6:	6866      	ldr	r6, [r4, #4]
 800fad8:	2e00      	cmp	r6, #0
 800fada:	f040 80ca 	bne.w	800fc72 <rcl_node_init+0x1da>
 800fade:	2f00      	cmp	r7, #0
 800fae0:	f000 80c0 	beq.w	800fc64 <rcl_node_init+0x1cc>
 800fae4:	4638      	mov	r0, r7
 800fae6:	f7ff fe0b 	bl	800f700 <rcl_context_is_valid>
 800faea:	2800      	cmp	r0, #0
 800faec:	f000 80bf 	beq.w	800fc6e <rcl_node_init+0x1d6>
 800faf0:	4632      	mov	r2, r6
 800faf2:	a924      	add	r1, sp, #144	@ 0x90
 800faf4:	4648      	mov	r0, r9
 800faf6:	9624      	str	r6, [sp, #144]	@ 0x90
 800faf8:	f001 f89a 	bl	8010c30 <rmw_validate_node_name>
 800fafc:	4606      	mov	r6, r0
 800fafe:	2800      	cmp	r0, #0
 800fb00:	f040 80b1 	bne.w	800fc66 <rcl_node_init+0x1ce>
 800fb04:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800fb06:	2800      	cmp	r0, #0
 800fb08:	f040 8104 	bne.w	800fd14 <rcl_node_init+0x27c>
 800fb0c:	f898 3000 	ldrb.w	r3, [r8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 80f0 	beq.w	800fcf6 <rcl_node_init+0x25e>
 800fb16:	2b2f      	cmp	r3, #47	@ 0x2f
 800fb18:	f000 80b0 	beq.w	800fc7c <rcl_node_init+0x1e4>
 800fb1c:	4b85      	ldr	r3, [pc, #532]	@ (800fd34 <rcl_node_init+0x29c>)
 800fb1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb22:	9302      	str	r3, [sp, #8]
 800fb24:	692b      	ldr	r3, [r5, #16]
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fb2c:	9301      	str	r3, [sp, #4]
 800fb2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fb32:	f000 fc6d 	bl	8010410 <rcutils_format_string_limit>
 800fb36:	4680      	mov	r8, r0
 800fb38:	f1b8 0f00 	cmp.w	r8, #0
 800fb3c:	f000 80e8 	beq.w	800fd10 <rcl_node_init+0x278>
 800fb40:	2200      	movs	r2, #0
 800fb42:	a924      	add	r1, sp, #144	@ 0x90
 800fb44:	4640      	mov	r0, r8
 800fb46:	9224      	str	r2, [sp, #144]	@ 0x90
 800fb48:	f001 f854 	bl	8010bf4 <rmw_validate_namespace>
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	f040 80a4 	bne.w	800fc9c <rcl_node_init+0x204>
 800fb54:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800fb56:	2800      	cmp	r0, #0
 800fb58:	f040 809d 	bne.w	800fc96 <rcl_node_init+0x1fe>
 800fb5c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800fb60:	2178      	movs	r1, #120	@ 0x78
 800fb62:	2001      	movs	r0, #1
 800fb64:	4798      	blx	r3
 800fb66:	4606      	mov	r6, r0
 800fb68:	6060      	str	r0, [r4, #4]
 800fb6a:	2800      	cmp	r0, #0
 800fb6c:	f000 80d6 	beq.w	800fd1c <rcl_node_init+0x284>
 800fb70:	a80a      	add	r0, sp, #40	@ 0x28
 800fb72:	f000 f92f 	bl	800fdd4 <rcl_node_get_default_options>
 800fb76:	a90a      	add	r1, sp, #40	@ 0x28
 800fb78:	4630      	mov	r0, r6
 800fb7a:	2268      	movs	r2, #104	@ 0x68
 800fb7c:	f003 fbcd 	bl	801331a <memcpy>
 800fb80:	6861      	ldr	r1, [r4, #4]
 800fb82:	6027      	str	r7, [r4, #0]
 800fb84:	4628      	mov	r0, r5
 800fb86:	f000 f933 	bl	800fdf0 <rcl_node_options_copy>
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	f040 8085 	bne.w	800fc9c <rcl_node_init+0x204>
 800fb92:	4640      	mov	r0, r8
 800fb94:	f7f0 fba4 	bl	80002e0 <strlen>
 800fb98:	eb08 0300 	add.w	r3, r8, r0
 800fb9c:	6866      	ldr	r6, [r4, #4]
 800fb9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fba2:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800fba6:	2b2f      	cmp	r3, #47	@ 0x2f
 800fba8:	bf0c      	ite	eq
 800fbaa:	4b63      	ldreq	r3, [pc, #396]	@ (800fd38 <rcl_node_init+0x2a0>)
 800fbac:	4b63      	ldrne	r3, [pc, #396]	@ (800fd3c <rcl_node_init+0x2a4>)
 800fbae:	9302      	str	r3, [sp, #8]
 800fbb0:	692b      	ldr	r3, [r5, #16]
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fbb8:	9301      	str	r3, [sp, #4]
 800fbba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fbbe:	f000 fc27 	bl	8010410 <rcutils_format_string_limit>
 800fbc2:	6863      	ldr	r3, [r4, #4]
 800fbc4:	6770      	str	r0, [r6, #116]	@ 0x74
 800fbc6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800fbc8:	2a00      	cmp	r2, #0
 800fbca:	f000 80a9 	beq.w	800fd20 <rcl_node_init+0x288>
 800fbce:	6822      	ldr	r2, [r4, #0]
 800fbd0:	9307      	str	r3, [sp, #28]
 800fbd2:	6810      	ldr	r0, [r2, #0]
 800fbd4:	4649      	mov	r1, r9
 800fbd6:	3028      	adds	r0, #40	@ 0x28
 800fbd8:	4642      	mov	r2, r8
 800fbda:	f7f9 ffa7 	bl	8009b2c <rmw_create_node>
 800fbde:	9b07      	ldr	r3, [sp, #28]
 800fbe0:	6698      	str	r0, [r3, #104]	@ 0x68
 800fbe2:	6863      	ldr	r3, [r4, #4]
 800fbe4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	f000 809d 	beq.w	800fd26 <rcl_node_init+0x28e>
 800fbec:	f7fa f830 	bl	8009c50 <rmw_node_get_graph_guard_condition>
 800fbf0:	4681      	mov	r9, r0
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	f000 809c 	beq.w	800fd30 <rcl_node_init+0x298>
 800fbf8:	682b      	ldr	r3, [r5, #0]
 800fbfa:	6929      	ldr	r1, [r5, #16]
 800fbfc:	6866      	ldr	r6, [r4, #4]
 800fbfe:	2008      	movs	r0, #8
 800fc00:	4798      	blx	r3
 800fc02:	6863      	ldr	r3, [r4, #4]
 800fc04:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fc06:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800fc0a:	f1ba 0f00 	cmp.w	sl, #0
 800fc0e:	f000 808d 	beq.w	800fd2c <rcl_node_init+0x294>
 800fc12:	f10d 0b20 	add.w	fp, sp, #32
 800fc16:	4658      	mov	r0, fp
 800fc18:	f002 fa52 	bl	80120c0 <rcl_get_zero_initialized_guard_condition>
 800fc1c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800fc20:	6863      	ldr	r3, [r4, #4]
 800fc22:	46ac      	mov	ip, r5
 800fc24:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fc28:	e88a 0003 	stmia.w	sl, {r0, r1}
 800fc2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc30:	ae25      	add	r6, sp, #148	@ 0x94
 800fc32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc34:	f8dc 3000 	ldr.w	r3, [ip]
 800fc38:	6033      	str	r3, [r6, #0]
 800fc3a:	ab2a      	add	r3, sp, #168	@ 0xa8
 800fc3c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fc40:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc44:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800fc46:	463a      	mov	r2, r7
 800fc48:	4649      	mov	r1, r9
 800fc4a:	4670      	mov	r0, lr
 800fc4c:	f002 fa42 	bl	80120d4 <rcl_guard_condition_init_from_rmw>
 800fc50:	4606      	mov	r6, r0
 800fc52:	bb18      	cbnz	r0, 800fc9c <rcl_node_init+0x204>
 800fc54:	686b      	ldr	r3, [r5, #4]
 800fc56:	6929      	ldr	r1, [r5, #16]
 800fc58:	4798      	blx	r3
 800fc5a:	686b      	ldr	r3, [r5, #4]
 800fc5c:	6929      	ldr	r1, [r5, #16]
 800fc5e:	4640      	mov	r0, r8
 800fc60:	4798      	blx	r3
 800fc62:	e000      	b.n	800fc66 <rcl_node_init+0x1ce>
 800fc64:	260b      	movs	r6, #11
 800fc66:	4630      	mov	r0, r6
 800fc68:	b02b      	add	sp, #172	@ 0xac
 800fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6e:	2665      	movs	r6, #101	@ 0x65
 800fc70:	e7f9      	b.n	800fc66 <rcl_node_init+0x1ce>
 800fc72:	2664      	movs	r6, #100	@ 0x64
 800fc74:	4630      	mov	r0, r6
 800fc76:	b02b      	add	sp, #172	@ 0xac
 800fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7c:	f105 030c 	add.w	r3, r5, #12
 800fc80:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc84:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fc88:	4640      	mov	r0, r8
 800fc8a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fc8e:	f000 fcdd 	bl	801064c <rcutils_strdup>
 800fc92:	4680      	mov	r8, r0
 800fc94:	e750      	b.n	800fb38 <rcl_node_init+0xa0>
 800fc96:	f000 ffbf 	bl	8010c18 <rmw_namespace_validation_result_string>
 800fc9a:	26ca      	movs	r6, #202	@ 0xca
 800fc9c:	6863      	ldr	r3, [r4, #4]
 800fc9e:	b1f3      	cbz	r3, 800fcde <rcl_node_init+0x246>
 800fca0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fca2:	b138      	cbz	r0, 800fcb4 <rcl_node_init+0x21c>
 800fca4:	f002 fa76 	bl	8012194 <rcl_guard_condition_fini>
 800fca8:	6863      	ldr	r3, [r4, #4]
 800fcaa:	6929      	ldr	r1, [r5, #16]
 800fcac:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fcae:	686b      	ldr	r3, [r5, #4]
 800fcb0:	4798      	blx	r3
 800fcb2:	6863      	ldr	r3, [r4, #4]
 800fcb4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fcb6:	b110      	cbz	r0, 800fcbe <rcl_node_init+0x226>
 800fcb8:	f7f9 ff4e 	bl	8009b58 <rmw_destroy_node>
 800fcbc:	6863      	ldr	r3, [r4, #4]
 800fcbe:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800fcc0:	6929      	ldr	r1, [r5, #16]
 800fcc2:	686b      	ldr	r3, [r5, #4]
 800fcc4:	4798      	blx	r3
 800fcc6:	6863      	ldr	r3, [r4, #4]
 800fcc8:	6929      	ldr	r1, [r5, #16]
 800fcca:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fccc:	686b      	ldr	r3, [r5, #4]
 800fcce:	4798      	blx	r3
 800fcd0:	6860      	ldr	r0, [r4, #4]
 800fcd2:	f000 f8ab 	bl	800fe2c <rcl_node_options_fini>
 800fcd6:	686b      	ldr	r3, [r5, #4]
 800fcd8:	6929      	ldr	r1, [r5, #16]
 800fcda:	6860      	ldr	r0, [r4, #4]
 800fcdc:	4798      	blx	r3
 800fcde:	686b      	ldr	r3, [r5, #4]
 800fce0:	6929      	ldr	r1, [r5, #16]
 800fce2:	2000      	movs	r0, #0
 800fce4:	4798      	blx	r3
 800fce6:	686b      	ldr	r3, [r5, #4]
 800fce8:	6929      	ldr	r1, [r5, #16]
 800fcea:	4640      	mov	r0, r8
 800fcec:	4798      	blx	r3
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e9c4 3300 	strd	r3, r3, [r4]
 800fcf4:	e7b7      	b.n	800fc66 <rcl_node_init+0x1ce>
 800fcf6:	f105 030c 	add.w	r3, r5, #12
 800fcfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fcfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fd02:	480f      	ldr	r0, [pc, #60]	@ (800fd40 <rcl_node_init+0x2a8>)
 800fd04:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800fd08:	f000 fca0 	bl	801064c <rcutils_strdup>
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	e713      	b.n	800fb38 <rcl_node_init+0xa0>
 800fd10:	260a      	movs	r6, #10
 800fd12:	e7a8      	b.n	800fc66 <rcl_node_init+0x1ce>
 800fd14:	f000 ffd8 	bl	8010cc8 <rmw_node_name_validation_result_string>
 800fd18:	26c9      	movs	r6, #201	@ 0xc9
 800fd1a:	e7a4      	b.n	800fc66 <rcl_node_init+0x1ce>
 800fd1c:	260a      	movs	r6, #10
 800fd1e:	e7de      	b.n	800fcde <rcl_node_init+0x246>
 800fd20:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fd22:	260a      	movs	r6, #10
 800fd24:	e7bd      	b.n	800fca2 <rcl_node_init+0x20a>
 800fd26:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fd28:	2601      	movs	r6, #1
 800fd2a:	e7ba      	b.n	800fca2 <rcl_node_init+0x20a>
 800fd2c:	260a      	movs	r6, #10
 800fd2e:	e7c1      	b.n	800fcb4 <rcl_node_init+0x21c>
 800fd30:	2601      	movs	r6, #1
 800fd32:	e7b3      	b.n	800fc9c <rcl_node_init+0x204>
 800fd34:	08014780 	.word	0x08014780
 800fd38:	080143d8 	.word	0x080143d8
 800fd3c:	080143b4 	.word	0x080143b4
 800fd40:	080143b0 	.word	0x080143b0

0800fd44 <rcl_node_is_valid>:
 800fd44:	b130      	cbz	r0, 800fd54 <rcl_node_is_valid+0x10>
 800fd46:	6843      	ldr	r3, [r0, #4]
 800fd48:	b123      	cbz	r3, 800fd54 <rcl_node_is_valid+0x10>
 800fd4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd4c:	b113      	cbz	r3, 800fd54 <rcl_node_is_valid+0x10>
 800fd4e:	6800      	ldr	r0, [r0, #0]
 800fd50:	f7ff bcd6 	b.w	800f700 <rcl_context_is_valid>
 800fd54:	2000      	movs	r0, #0
 800fd56:	4770      	bx	lr

0800fd58 <rcl_node_get_name>:
 800fd58:	b120      	cbz	r0, 800fd64 <rcl_node_get_name+0xc>
 800fd5a:	6840      	ldr	r0, [r0, #4]
 800fd5c:	b110      	cbz	r0, 800fd64 <rcl_node_get_name+0xc>
 800fd5e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd60:	b100      	cbz	r0, 800fd64 <rcl_node_get_name+0xc>
 800fd62:	6880      	ldr	r0, [r0, #8]
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop

0800fd68 <rcl_node_get_namespace>:
 800fd68:	b120      	cbz	r0, 800fd74 <rcl_node_get_namespace+0xc>
 800fd6a:	6840      	ldr	r0, [r0, #4]
 800fd6c:	b110      	cbz	r0, 800fd74 <rcl_node_get_namespace+0xc>
 800fd6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd70:	b100      	cbz	r0, 800fd74 <rcl_node_get_namespace+0xc>
 800fd72:	68c0      	ldr	r0, [r0, #12]
 800fd74:	4770      	bx	lr
 800fd76:	bf00      	nop

0800fd78 <rcl_node_get_options>:
 800fd78:	b128      	cbz	r0, 800fd86 <rcl_node_get_options+0xe>
 800fd7a:	6840      	ldr	r0, [r0, #4]
 800fd7c:	b118      	cbz	r0, 800fd86 <rcl_node_get_options+0xe>
 800fd7e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	bf08      	it	eq
 800fd84:	2000      	moveq	r0, #0
 800fd86:	4770      	bx	lr

0800fd88 <rcl_node_get_rmw_handle>:
 800fd88:	b110      	cbz	r0, 800fd90 <rcl_node_get_rmw_handle+0x8>
 800fd8a:	6840      	ldr	r0, [r0, #4]
 800fd8c:	b100      	cbz	r0, 800fd90 <rcl_node_get_rmw_handle+0x8>
 800fd8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fd90:	4770      	bx	lr
 800fd92:	bf00      	nop

0800fd94 <rcl_get_disable_loaned_message>:
 800fd94:	b510      	push	{r4, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	2300      	movs	r3, #0
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	b1a0      	cbz	r0, 800fdc8 <rcl_get_disable_loaned_message+0x34>
 800fd9e:	4604      	mov	r4, r0
 800fda0:	a901      	add	r1, sp, #4
 800fda2:	480b      	ldr	r0, [pc, #44]	@ (800fdd0 <rcl_get_disable_loaned_message+0x3c>)
 800fda4:	f000 fb0c 	bl	80103c0 <rcutils_get_env>
 800fda8:	b110      	cbz	r0, 800fdb0 <rcl_get_disable_loaned_message+0x1c>
 800fdaa:	2001      	movs	r0, #1
 800fdac:	b002      	add	sp, #8
 800fdae:	bd10      	pop	{r4, pc}
 800fdb0:	9a01      	ldr	r2, [sp, #4]
 800fdb2:	7813      	ldrb	r3, [r2, #0]
 800fdb4:	3b31      	subs	r3, #49	@ 0x31
 800fdb6:	bf08      	it	eq
 800fdb8:	7853      	ldrbeq	r3, [r2, #1]
 800fdba:	fab3 f383 	clz	r3, r3
 800fdbe:	095b      	lsrs	r3, r3, #5
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	7023      	strb	r3, [r4, #0]
 800fdc4:	b002      	add	sp, #8
 800fdc6:	bd10      	pop	{r4, pc}
 800fdc8:	200b      	movs	r0, #11
 800fdca:	b002      	add	sp, #8
 800fdcc:	bd10      	pop	{r4, pc}
 800fdce:	bf00      	nop
 800fdd0:	08014784 	.word	0x08014784

0800fdd4 <rcl_node_get_default_options>:
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	2253      	movs	r2, #83	@ 0x53
 800fdd8:	4604      	mov	r4, r0
 800fdda:	2100      	movs	r1, #0
 800fddc:	3015      	adds	r0, #21
 800fdde:	f003 f96b 	bl	80130b8 <memset>
 800fde2:	4620      	mov	r0, r4
 800fde4:	f7f9 fb3a 	bl	800945c <rcutils_get_default_allocator>
 800fde8:	2301      	movs	r3, #1
 800fdea:	7523      	strb	r3, [r4, #20]
 800fdec:	4620      	mov	r0, r4
 800fdee:	bd10      	pop	{r4, pc}

0800fdf0 <rcl_node_options_copy>:
 800fdf0:	b1d0      	cbz	r0, 800fe28 <rcl_node_options_copy+0x38>
 800fdf2:	b570      	push	{r4, r5, r6, lr}
 800fdf4:	460c      	mov	r4, r1
 800fdf6:	b1a9      	cbz	r1, 800fe24 <rcl_node_options_copy+0x34>
 800fdf8:	4288      	cmp	r0, r1
 800fdfa:	4684      	mov	ip, r0
 800fdfc:	d012      	beq.n	800fe24 <rcl_node_options_copy+0x34>
 800fdfe:	4605      	mov	r5, r0
 800fe00:	8a86      	ldrh	r6, [r0, #20]
 800fe02:	468e      	mov	lr, r1
 800fe04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe0a:	682b      	ldr	r3, [r5, #0]
 800fe0c:	f8ce 3000 	str.w	r3, [lr]
 800fe10:	f10c 0118 	add.w	r1, ip, #24
 800fe14:	2250      	movs	r2, #80	@ 0x50
 800fe16:	82a6      	strh	r6, [r4, #20]
 800fe18:	f104 0018 	add.w	r0, r4, #24
 800fe1c:	f003 fa7d 	bl	801331a <memcpy>
 800fe20:	2000      	movs	r0, #0
 800fe22:	bd70      	pop	{r4, r5, r6, pc}
 800fe24:	200b      	movs	r0, #11
 800fe26:	bd70      	pop	{r4, r5, r6, pc}
 800fe28:	200b      	movs	r0, #11
 800fe2a:	4770      	bx	lr

0800fe2c <rcl_node_options_fini>:
 800fe2c:	b1c0      	cbz	r0, 800fe60 <rcl_node_options_fini+0x34>
 800fe2e:	b500      	push	{lr}
 800fe30:	4684      	mov	ip, r0
 800fe32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe36:	b087      	sub	sp, #28
 800fe38:	f10d 0e04 	add.w	lr, sp, #4
 800fe3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe40:	f8dc 3000 	ldr.w	r3, [ip]
 800fe44:	f8ce 3000 	str.w	r3, [lr]
 800fe48:	a801      	add	r0, sp, #4
 800fe4a:	f7f9 fb33 	bl	80094b4 <rcutils_allocator_is_valid>
 800fe4e:	b118      	cbz	r0, 800fe58 <rcl_node_options_fini+0x2c>
 800fe50:	2000      	movs	r0, #0
 800fe52:	b007      	add	sp, #28
 800fe54:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe58:	200b      	movs	r0, #11
 800fe5a:	b007      	add	sp, #28
 800fe5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe60:	200b      	movs	r0, #11
 800fe62:	4770      	bx	lr

0800fe64 <rcl_node_resolve_name>:
 800fe64:	b082      	sub	sp, #8
 800fe66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6a:	b091      	sub	sp, #68	@ 0x44
 800fe6c:	ac1a      	add	r4, sp, #104	@ 0x68
 800fe6e:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe72:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d03a      	beq.n	800fef0 <rcl_node_resolve_name+0x8c>
 800fe7a:	460c      	mov	r4, r1
 800fe7c:	4605      	mov	r5, r0
 800fe7e:	f7ff ff7b 	bl	800fd78 <rcl_node_get_options>
 800fe82:	b370      	cbz	r0, 800fee2 <rcl_node_resolve_name+0x7e>
 800fe84:	4628      	mov	r0, r5
 800fe86:	f7ff ff67 	bl	800fd58 <rcl_node_get_name>
 800fe8a:	4681      	mov	r9, r0
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f7ff ff6b 	bl	800fd68 <rcl_node_get_namespace>
 800fe92:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fe96:	4607      	mov	r7, r0
 800fe98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe9c:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fe9e:	46ac      	mov	ip, r5
 800fea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fea4:	f8de 3000 	ldr.w	r3, [lr]
 800fea8:	f8cc 3000 	str.w	r3, [ip]
 800feac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800feae:	b1fb      	cbz	r3, 800fef0 <rcl_node_resolve_name+0x8c>
 800feb0:	468a      	mov	sl, r1
 800feb2:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800feb6:	f000 fc29 	bl	801070c <rcutils_get_zero_initialized_string_map>
 800feba:	ab10      	add	r3, sp, #64	@ 0x40
 800febc:	9008      	str	r0, [sp, #32]
 800febe:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fec2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fec6:	2100      	movs	r1, #0
 800fec8:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fecc:	a808      	add	r0, sp, #32
 800fece:	f000 fc77 	bl	80107c0 <rcutils_string_map_init>
 800fed2:	4606      	mov	r6, r0
 800fed4:	b170      	cbz	r0, 800fef4 <rcl_node_resolve_name+0x90>
 800fed6:	f7f9 fafb 	bl	80094d0 <rcutils_get_error_string>
 800feda:	f7f9 fb11 	bl	8009500 <rcutils_reset_error>
 800fede:	2e0a      	cmp	r6, #10
 800fee0:	d000      	beq.n	800fee4 <rcl_node_resolve_name+0x80>
 800fee2:	2601      	movs	r6, #1
 800fee4:	4630      	mov	r0, r6
 800fee6:	b011      	add	sp, #68	@ 0x44
 800fee8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	b002      	add	sp, #8
 800feee:	4770      	bx	lr
 800fef0:	260b      	movs	r6, #11
 800fef2:	e7f7      	b.n	800fee4 <rcl_node_resolve_name+0x80>
 800fef4:	9009      	str	r0, [sp, #36]	@ 0x24
 800fef6:	9007      	str	r0, [sp, #28]
 800fef8:	a808      	add	r0, sp, #32
 800fefa:	f002 f8db 	bl	80120b4 <rcl_get_default_topic_name_substitutions>
 800fefe:	4606      	mov	r6, r0
 800ff00:	b1b0      	cbz	r0, 800ff30 <rcl_node_resolve_name+0xcc>
 800ff02:	280a      	cmp	r0, #10
 800ff04:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800ff08:	d000      	beq.n	800ff0c <rcl_node_resolve_name+0xa8>
 800ff0a:	2601      	movs	r6, #1
 800ff0c:	a808      	add	r0, sp, #32
 800ff0e:	f000 fc95 	bl	801083c <rcutils_string_map_fini>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d132      	bne.n	800ff7c <rcl_node_resolve_name+0x118>
 800ff16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff18:	4659      	mov	r1, fp
 800ff1a:	47d0      	blx	sl
 800ff1c:	4659      	mov	r1, fp
 800ff1e:	4648      	mov	r0, r9
 800ff20:	47d0      	blx	sl
 800ff22:	f1b8 0f00 	cmp.w	r8, #0
 800ff26:	d0dd      	beq.n	800fee4 <rcl_node_resolve_name+0x80>
 800ff28:	2e67      	cmp	r6, #103	@ 0x67
 800ff2a:	bf08      	it	eq
 800ff2c:	2668      	moveq	r6, #104	@ 0x68
 800ff2e:	e7d9      	b.n	800fee4 <rcl_node_resolve_name+0x80>
 800ff30:	ab09      	add	r3, sp, #36	@ 0x24
 800ff32:	9305      	str	r3, [sp, #20]
 800ff34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff36:	46ec      	mov	ip, sp
 800ff38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff3c:	682b      	ldr	r3, [r5, #0]
 800ff3e:	f8cc 3000 	str.w	r3, [ip]
 800ff42:	463a      	mov	r2, r7
 800ff44:	4649      	mov	r1, r9
 800ff46:	4620      	mov	r0, r4
 800ff48:	ab08      	add	r3, sp, #32
 800ff4a:	f001 ff55 	bl	8011df8 <rcl_expand_topic_name>
 800ff4e:	4606      	mov	r6, r0
 800ff50:	b9c8      	cbnz	r0, 800ff86 <rcl_node_resolve_name+0x122>
 800ff52:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800ff56:	9009      	str	r0, [sp, #36]	@ 0x24
 800ff58:	4602      	mov	r2, r0
 800ff5a:	a90a      	add	r1, sp, #40	@ 0x28
 800ff5c:	4648      	mov	r0, r9
 800ff5e:	f000 fd91 	bl	8010a84 <rmw_validate_full_topic_name>
 800ff62:	b998      	cbnz	r0, 800ff8c <rcl_node_resolve_name+0x128>
 800ff64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ff66:	bb14      	cbnz	r4, 800ffae <rcl_node_resolve_name+0x14a>
 800ff68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff6a:	a808      	add	r0, sp, #32
 800ff6c:	f8c3 9000 	str.w	r9, [r3]
 800ff70:	f000 fc64 	bl	801083c <rcutils_string_map_fini>
 800ff74:	4606      	mov	r6, r0
 800ff76:	b978      	cbnz	r0, 800ff98 <rcl_node_resolve_name+0x134>
 800ff78:	4681      	mov	r9, r0
 800ff7a:	e7cc      	b.n	800ff16 <rcl_node_resolve_name+0xb2>
 800ff7c:	f7f9 faa8 	bl	80094d0 <rcutils_get_error_string>
 800ff80:	f7f9 fabe 	bl	8009500 <rcutils_reset_error>
 800ff84:	e7c7      	b.n	800ff16 <rcl_node_resolve_name+0xb2>
 800ff86:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800ff8a:	e7bf      	b.n	800ff0c <rcl_node_resolve_name+0xa8>
 800ff8c:	f7f9 faa0 	bl	80094d0 <rcutils_get_error_string>
 800ff90:	2601      	movs	r6, #1
 800ff92:	f7f9 fab5 	bl	8009500 <rcutils_reset_error>
 800ff96:	e7b9      	b.n	800ff0c <rcl_node_resolve_name+0xa8>
 800ff98:	f7f9 fa9a 	bl	80094d0 <rcutils_get_error_string>
 800ff9c:	f7f9 fab0 	bl	8009500 <rcutils_reset_error>
 800ffa0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ffa2:	4659      	mov	r1, fp
 800ffa4:	47d0      	blx	sl
 800ffa6:	4659      	mov	r1, fp
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	47d0      	blx	sl
 800ffac:	e799      	b.n	800fee2 <rcl_node_resolve_name+0x7e>
 800ffae:	2667      	movs	r6, #103	@ 0x67
 800ffb0:	e7ac      	b.n	800ff0c <rcl_node_resolve_name+0xa8>
 800ffb2:	bf00      	nop

0800ffb4 <exact_match_lookup>:
 800ffb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffb6:	f102 0708 	add.w	r7, r2, #8
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4614      	mov	r4, r2
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ffc4:	b085      	sub	sp, #20
 800ffc6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	4918      	ldr	r1, [pc, #96]	@ (8010030 <exact_match_lookup+0x7c>)
 800ffce:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ffd2:	f000 fa0f 	bl	80103f4 <rcutils_join_path>
 800ffd6:	7833      	ldrb	r3, [r6, #0]
 800ffd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800ffda:	4605      	mov	r5, r0
 800ffdc:	d022      	beq.n	8010024 <exact_match_lookup+0x70>
 800ffde:	f104 030c 	add.w	r3, r4, #12
 800ffe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffe6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ffea:	1c70      	adds	r0, r6, #1
 800ffec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fff0:	f000 fa06 	bl	8010400 <rcutils_to_native_path>
 800fff4:	4606      	mov	r6, r0
 800fff6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fffa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fffe:	4631      	mov	r1, r6
 8010000:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010004:	4628      	mov	r0, r5
 8010006:	f000 f9f5 	bl	80103f4 <rcutils_join_path>
 801000a:	6863      	ldr	r3, [r4, #4]
 801000c:	6921      	ldr	r1, [r4, #16]
 801000e:	4607      	mov	r7, r0
 8010010:	4630      	mov	r0, r6
 8010012:	4798      	blx	r3
 8010014:	4628      	mov	r0, r5
 8010016:	6863      	ldr	r3, [r4, #4]
 8010018:	6921      	ldr	r1, [r4, #16]
 801001a:	4798      	blx	r3
 801001c:	463d      	mov	r5, r7
 801001e:	4628      	mov	r0, r5
 8010020:	b005      	add	sp, #20
 8010022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010024:	7873      	ldrb	r3, [r6, #1]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1d9      	bne.n	800ffde <exact_match_lookup+0x2a>
 801002a:	4628      	mov	r0, r5
 801002c:	b005      	add	sp, #20
 801002e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010030:	080147e4 	.word	0x080147e4

08010034 <rcl_get_secure_root>:
 8010034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010038:	b085      	sub	sp, #20
 801003a:	b168      	cbz	r0, 8010058 <rcl_get_secure_root+0x24>
 801003c:	4607      	mov	r7, r0
 801003e:	4608      	mov	r0, r1
 8010040:	460c      	mov	r4, r1
 8010042:	f7f9 fa37 	bl	80094b4 <rcutils_allocator_is_valid>
 8010046:	b138      	cbz	r0, 8010058 <rcl_get_secure_root+0x24>
 8010048:	2300      	movs	r3, #0
 801004a:	482d      	ldr	r0, [pc, #180]	@ (8010100 <rcl_get_secure_root+0xcc>)
 801004c:	9303      	str	r3, [sp, #12]
 801004e:	a903      	add	r1, sp, #12
 8010050:	f000 f9b6 	bl	80103c0 <rcutils_get_env>
 8010054:	4605      	mov	r5, r0
 8010056:	b120      	cbz	r0, 8010062 <rcl_get_secure_root+0x2e>
 8010058:	2500      	movs	r5, #0
 801005a:	4628      	mov	r0, r5
 801005c:	b005      	add	sp, #20
 801005e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010062:	9b03      	ldr	r3, [sp, #12]
 8010064:	781a      	ldrb	r2, [r3, #0]
 8010066:	2a00      	cmp	r2, #0
 8010068:	d0f6      	beq.n	8010058 <rcl_get_secure_root+0x24>
 801006a:	f104 090c 	add.w	r9, r4, #12
 801006e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010072:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010076:	4618      	mov	r0, r3
 8010078:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801007c:	f000 fae6 	bl	801064c <rcutils_strdup>
 8010080:	4680      	mov	r8, r0
 8010082:	2800      	cmp	r0, #0
 8010084:	d0e8      	beq.n	8010058 <rcl_get_secure_root+0x24>
 8010086:	481f      	ldr	r0, [pc, #124]	@ (8010104 <rcl_get_secure_root+0xd0>)
 8010088:	9503      	str	r5, [sp, #12]
 801008a:	a903      	add	r1, sp, #12
 801008c:	f000 f998 	bl	80103c0 <rcutils_get_env>
 8010090:	b160      	cbz	r0, 80100ac <rcl_get_secure_root+0x78>
 8010092:	2600      	movs	r6, #0
 8010094:	6863      	ldr	r3, [r4, #4]
 8010096:	6921      	ldr	r1, [r4, #16]
 8010098:	4630      	mov	r0, r6
 801009a:	4798      	blx	r3
 801009c:	4640      	mov	r0, r8
 801009e:	6863      	ldr	r3, [r4, #4]
 80100a0:	6921      	ldr	r1, [r4, #16]
 80100a2:	4798      	blx	r3
 80100a4:	4628      	mov	r0, r5
 80100a6:	b005      	add	sp, #20
 80100a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100ac:	9b03      	ldr	r3, [sp, #12]
 80100ae:	781e      	ldrb	r6, [r3, #0]
 80100b0:	b1f6      	cbz	r6, 80100f0 <rcl_get_secure_root+0xbc>
 80100b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80100b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80100ba:	4618      	mov	r0, r3
 80100bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80100c0:	f000 fac4 	bl	801064c <rcutils_strdup>
 80100c4:	4606      	mov	r6, r0
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d0e3      	beq.n	8010092 <rcl_get_secure_root+0x5e>
 80100ca:	4622      	mov	r2, r4
 80100cc:	4641      	mov	r1, r8
 80100ce:	f7ff ff71 	bl	800ffb4 <exact_match_lookup>
 80100d2:	4605      	mov	r5, r0
 80100d4:	2d00      	cmp	r5, #0
 80100d6:	d0dd      	beq.n	8010094 <rcl_get_secure_root+0x60>
 80100d8:	4628      	mov	r0, r5
 80100da:	f000 f989 	bl	80103f0 <rcutils_is_directory>
 80100de:	4607      	mov	r7, r0
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d1d7      	bne.n	8010094 <rcl_get_secure_root+0x60>
 80100e4:	4628      	mov	r0, r5
 80100e6:	6863      	ldr	r3, [r4, #4]
 80100e8:	6921      	ldr	r1, [r4, #16]
 80100ea:	4798      	blx	r3
 80100ec:	463d      	mov	r5, r7
 80100ee:	e7d1      	b.n	8010094 <rcl_get_secure_root+0x60>
 80100f0:	4622      	mov	r2, r4
 80100f2:	4638      	mov	r0, r7
 80100f4:	4641      	mov	r1, r8
 80100f6:	f7ff ff5d 	bl	800ffb4 <exact_match_lookup>
 80100fa:	4605      	mov	r5, r0
 80100fc:	e7ea      	b.n	80100d4 <rcl_get_secure_root+0xa0>
 80100fe:	bf00      	nop
 8010100:	080147f0 	.word	0x080147f0
 8010104:	08014808 	.word	0x08014808

08010108 <rcl_get_security_options_from_environment>:
 8010108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801010a:	b083      	sub	sp, #12
 801010c:	2300      	movs	r3, #0
 801010e:	4605      	mov	r5, r0
 8010110:	460e      	mov	r6, r1
 8010112:	481a      	ldr	r0, [pc, #104]	@ (801017c <rcl_get_security_options_from_environment+0x74>)
 8010114:	9301      	str	r3, [sp, #4]
 8010116:	a901      	add	r1, sp, #4
 8010118:	4617      	mov	r7, r2
 801011a:	f000 f951 	bl	80103c0 <rcutils_get_env>
 801011e:	b110      	cbz	r0, 8010126 <rcl_get_security_options_from_environment+0x1e>
 8010120:	2001      	movs	r0, #1
 8010122:	b003      	add	sp, #12
 8010124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010126:	4604      	mov	r4, r0
 8010128:	4915      	ldr	r1, [pc, #84]	@ (8010180 <rcl_get_security_options_from_environment+0x78>)
 801012a:	9801      	ldr	r0, [sp, #4]
 801012c:	f7f0 f878 	bl	8000220 <strcmp>
 8010130:	b9b0      	cbnz	r0, 8010160 <rcl_get_security_options_from_environment+0x58>
 8010132:	9001      	str	r0, [sp, #4]
 8010134:	b1c7      	cbz	r7, 8010168 <rcl_get_security_options_from_environment+0x60>
 8010136:	4813      	ldr	r0, [pc, #76]	@ (8010184 <rcl_get_security_options_from_environment+0x7c>)
 8010138:	a901      	add	r1, sp, #4
 801013a:	f000 f941 	bl	80103c0 <rcutils_get_env>
 801013e:	2800      	cmp	r0, #0
 8010140:	d1ee      	bne.n	8010120 <rcl_get_security_options_from_environment+0x18>
 8010142:	4911      	ldr	r1, [pc, #68]	@ (8010188 <rcl_get_security_options_from_environment+0x80>)
 8010144:	9801      	ldr	r0, [sp, #4]
 8010146:	f7f0 f86b 	bl	8000220 <strcmp>
 801014a:	fab0 f080 	clz	r0, r0
 801014e:	0940      	lsrs	r0, r0, #5
 8010150:	7038      	strb	r0, [r7, #0]
 8010152:	4631      	mov	r1, r6
 8010154:	4628      	mov	r0, r5
 8010156:	f7ff ff6d 	bl	8010034 <rcl_get_secure_root>
 801015a:	b138      	cbz	r0, 801016c <rcl_get_security_options_from_environment+0x64>
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	e000      	b.n	8010162 <rcl_get_security_options_from_environment+0x5a>
 8010160:	703c      	strb	r4, [r7, #0]
 8010162:	2000      	movs	r0, #0
 8010164:	b003      	add	sp, #12
 8010166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010168:	200b      	movs	r0, #11
 801016a:	e7da      	b.n	8010122 <rcl_get_security_options_from_environment+0x1a>
 801016c:	7838      	ldrb	r0, [r7, #0]
 801016e:	f1a0 0001 	sub.w	r0, r0, #1
 8010172:	fab0 f080 	clz	r0, r0
 8010176:	0940      	lsrs	r0, r0, #5
 8010178:	e7d3      	b.n	8010122 <rcl_get_security_options_from_environment+0x1a>
 801017a:	bf00      	nop
 801017c:	080147a8 	.word	0x080147a8
 8010180:	080147bc 	.word	0x080147bc
 8010184:	080147c4 	.word	0x080147c4
 8010188:	080147dc 	.word	0x080147dc

0801018c <rcl_get_system_time>:
 801018c:	4608      	mov	r0, r1
 801018e:	f000 bbd9 	b.w	8010944 <rcutils_system_time_now>
 8010192:	bf00      	nop

08010194 <rcl_get_steady_time>:
 8010194:	4608      	mov	r0, r1
 8010196:	f000 bbff 	b.w	8010998 <rcutils_steady_time_now>
 801019a:	bf00      	nop

0801019c <rcl_get_ros_time>:
 801019c:	7a03      	ldrb	r3, [r0, #8]
 801019e:	b510      	push	{r4, lr}
 80101a0:	460c      	mov	r4, r1
 80101a2:	b143      	cbz	r3, 80101b6 <rcl_get_ros_time+0x1a>
 80101a4:	2105      	movs	r1, #5
 80101a6:	f000 f8d5 	bl	8010354 <__atomic_load_8>
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	e9c4 2300 	strd	r2, r3, [r4]
 80101b2:	2000      	movs	r0, #0
 80101b4:	bd10      	pop	{r4, pc}
 80101b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101ba:	4608      	mov	r0, r1
 80101bc:	f000 bbc2 	b.w	8010944 <rcutils_system_time_now>

080101c0 <rcl_clock_init>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	4605      	mov	r5, r0
 80101c4:	4610      	mov	r0, r2
 80101c6:	4614      	mov	r4, r2
 80101c8:	460e      	mov	r6, r1
 80101ca:	f7f9 f973 	bl	80094b4 <rcutils_allocator_is_valid>
 80101ce:	b128      	cbz	r0, 80101dc <rcl_clock_init+0x1c>
 80101d0:	2d03      	cmp	r5, #3
 80101d2:	d803      	bhi.n	80101dc <rcl_clock_init+0x1c>
 80101d4:	e8df f005 	tbb	[pc, r5]
 80101d8:	044c291a 	.word	0x044c291a
 80101dc:	200b      	movs	r0, #11
 80101de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101e0:	2e00      	cmp	r6, #0
 80101e2:	d0fb      	beq.n	80101dc <rcl_clock_init+0x1c>
 80101e4:	2c00      	cmp	r4, #0
 80101e6:	d0f9      	beq.n	80101dc <rcl_clock_init+0x1c>
 80101e8:	2300      	movs	r3, #0
 80101ea:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80101ee:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8010294 <rcl_clock_init+0xd4>
 80101f2:	6133      	str	r3, [r6, #16]
 80101f4:	f106 0514 	add.w	r5, r6, #20
 80101f8:	2703      	movs	r7, #3
 80101fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	f8c6 c00c 	str.w	ip, [r6, #12]
 8010206:	7037      	strb	r7, [r6, #0]
 8010208:	2000      	movs	r0, #0
 801020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801020c:	2e00      	cmp	r6, #0
 801020e:	d0e5      	beq.n	80101dc <rcl_clock_init+0x1c>
 8010210:	2300      	movs	r3, #0
 8010212:	7033      	strb	r3, [r6, #0]
 8010214:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010218:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801021c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801021e:	f106 0514 	add.w	r5, r6, #20
 8010222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	602b      	str	r3, [r5, #0]
 8010228:	e7ee      	b.n	8010208 <rcl_clock_init+0x48>
 801022a:	2e00      	cmp	r6, #0
 801022c:	d0d6      	beq.n	80101dc <rcl_clock_init+0x1c>
 801022e:	2c00      	cmp	r4, #0
 8010230:	d0d4      	beq.n	80101dc <rcl_clock_init+0x1c>
 8010232:	2700      	movs	r7, #0
 8010234:	7037      	strb	r7, [r6, #0]
 8010236:	46a4      	mov	ip, r4
 8010238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801023c:	f106 0514 	add.w	r5, r6, #20
 8010240:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010244:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801024a:	f8dc 3000 	ldr.w	r3, [ip]
 801024e:	602b      	str	r3, [r5, #0]
 8010250:	6921      	ldr	r1, [r4, #16]
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	2010      	movs	r0, #16
 8010256:	4798      	blx	r3
 8010258:	6130      	str	r0, [r6, #16]
 801025a:	b1b8      	cbz	r0, 801028c <rcl_clock_init+0xcc>
 801025c:	2200      	movs	r2, #0
 801025e:	2300      	movs	r3, #0
 8010260:	e9c0 2300 	strd	r2, r3, [r0]
 8010264:	4a0a      	ldr	r2, [pc, #40]	@ (8010290 <rcl_clock_init+0xd0>)
 8010266:	7207      	strb	r7, [r0, #8]
 8010268:	2301      	movs	r3, #1
 801026a:	60f2      	str	r2, [r6, #12]
 801026c:	7033      	strb	r3, [r6, #0]
 801026e:	e7cb      	b.n	8010208 <rcl_clock_init+0x48>
 8010270:	2e00      	cmp	r6, #0
 8010272:	d0b3      	beq.n	80101dc <rcl_clock_init+0x1c>
 8010274:	2c00      	cmp	r4, #0
 8010276:	d0b1      	beq.n	80101dc <rcl_clock_init+0x1c>
 8010278:	2300      	movs	r3, #0
 801027a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801027e:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8010298 <rcl_clock_init+0xd8>
 8010282:	6133      	str	r3, [r6, #16]
 8010284:	f106 0514 	add.w	r5, r6, #20
 8010288:	2702      	movs	r7, #2
 801028a:	e7b6      	b.n	80101fa <rcl_clock_init+0x3a>
 801028c:	200a      	movs	r0, #10
 801028e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010290:	0801019d 	.word	0x0801019d
 8010294:	08010195 	.word	0x08010195
 8010298:	0801018d 	.word	0x0801018d

0801029c <rcl_validate_enclave_name_with_size>:
 801029c:	2800      	cmp	r0, #0
 801029e:	d037      	beq.n	8010310 <rcl_validate_enclave_name_with_size+0x74>
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	4614      	mov	r4, r2
 80102a4:	b0c2      	sub	sp, #264	@ 0x108
 80102a6:	b342      	cbz	r2, 80102fa <rcl_validate_enclave_name_with_size+0x5e>
 80102a8:	461e      	mov	r6, r3
 80102aa:	466a      	mov	r2, sp
 80102ac:	ab01      	add	r3, sp, #4
 80102ae:	460d      	mov	r5, r1
 80102b0:	f000 fc60 	bl	8010b74 <rmw_validate_namespace_with_size>
 80102b4:	4684      	mov	ip, r0
 80102b6:	bb28      	cbnz	r0, 8010304 <rcl_validate_enclave_name_with_size+0x68>
 80102b8:	9b00      	ldr	r3, [sp, #0]
 80102ba:	b923      	cbnz	r3, 80102c6 <rcl_validate_enclave_name_with_size+0x2a>
 80102bc:	2300      	movs	r3, #0
 80102be:	6023      	str	r3, [r4, #0]
 80102c0:	4660      	mov	r0, ip
 80102c2:	b042      	add	sp, #264	@ 0x108
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
 80102c6:	2b07      	cmp	r3, #7
 80102c8:	d00f      	beq.n	80102ea <rcl_validate_enclave_name_with_size+0x4e>
 80102ca:	1e5a      	subs	r2, r3, #1
 80102cc:	2a05      	cmp	r2, #5
 80102ce:	d823      	bhi.n	8010318 <rcl_validate_enclave_name_with_size+0x7c>
 80102d0:	e8df f002 	tbb	[pc, r2]
 80102d4:	03030303 	.word	0x03030303
 80102d8:	0303      	.short	0x0303
 80102da:	6023      	str	r3, [r4, #0]
 80102dc:	2e00      	cmp	r6, #0
 80102de:	d0ef      	beq.n	80102c0 <rcl_validate_enclave_name_with_size+0x24>
 80102e0:	9b01      	ldr	r3, [sp, #4]
 80102e2:	6033      	str	r3, [r6, #0]
 80102e4:	4660      	mov	r0, ip
 80102e6:	b042      	add	sp, #264	@ 0x108
 80102e8:	bd70      	pop	{r4, r5, r6, pc}
 80102ea:	2dff      	cmp	r5, #255	@ 0xff
 80102ec:	d9e6      	bls.n	80102bc <rcl_validate_enclave_name_with_size+0x20>
 80102ee:	6023      	str	r3, [r4, #0]
 80102f0:	2e00      	cmp	r6, #0
 80102f2:	d0e5      	beq.n	80102c0 <rcl_validate_enclave_name_with_size+0x24>
 80102f4:	23fe      	movs	r3, #254	@ 0xfe
 80102f6:	6033      	str	r3, [r6, #0]
 80102f8:	e7e2      	b.n	80102c0 <rcl_validate_enclave_name_with_size+0x24>
 80102fa:	f04f 0c0b 	mov.w	ip, #11
 80102fe:	4660      	mov	r0, ip
 8010300:	b042      	add	sp, #264	@ 0x108
 8010302:	bd70      	pop	{r4, r5, r6, pc}
 8010304:	f7ff f9dc 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 8010308:	4684      	mov	ip, r0
 801030a:	4660      	mov	r0, ip
 801030c:	b042      	add	sp, #264	@ 0x108
 801030e:	bd70      	pop	{r4, r5, r6, pc}
 8010310:	f04f 0c0b 	mov.w	ip, #11
 8010314:	4660      	mov	r0, ip
 8010316:	4770      	bx	lr
 8010318:	4a04      	ldr	r2, [pc, #16]	@ (801032c <rcl_validate_enclave_name_with_size+0x90>)
 801031a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801031e:	a802      	add	r0, sp, #8
 8010320:	f000 f968 	bl	80105f4 <rcutils_snprintf>
 8010324:	f04f 0c01 	mov.w	ip, #1
 8010328:	e7ca      	b.n	80102c0 <rcl_validate_enclave_name_with_size+0x24>
 801032a:	bf00      	nop
 801032c:	08014828 	.word	0x08014828

08010330 <rcl_validate_enclave_name>:
 8010330:	b168      	cbz	r0, 801034e <rcl_validate_enclave_name+0x1e>
 8010332:	b570      	push	{r4, r5, r6, lr}
 8010334:	460d      	mov	r5, r1
 8010336:	4616      	mov	r6, r2
 8010338:	4604      	mov	r4, r0
 801033a:	f7ef ffd1 	bl	80002e0 <strlen>
 801033e:	4633      	mov	r3, r6
 8010340:	4601      	mov	r1, r0
 8010342:	462a      	mov	r2, r5
 8010344:	4620      	mov	r0, r4
 8010346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801034a:	f7ff bfa7 	b.w	801029c <rcl_validate_enclave_name_with_size>
 801034e:	200b      	movs	r0, #11
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop

08010354 <__atomic_load_8>:
 8010354:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010358:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801035c:	4a15      	ldr	r2, [pc, #84]	@ (80103b4 <__atomic_load_8+0x60>)
 801035e:	4b16      	ldr	r3, [pc, #88]	@ (80103b8 <__atomic_load_8+0x64>)
 8010360:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010364:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010368:	fb02 f101 	mul.w	r1, r2, r1
 801036c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010370:	fba3 2301 	umull	r2, r3, r3, r1
 8010374:	091b      	lsrs	r3, r3, #4
 8010376:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801037a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801037e:	b4f0      	push	{r4, r5, r6, r7}
 8010380:	4d0e      	ldr	r5, [pc, #56]	@ (80103bc <__atomic_load_8+0x68>)
 8010382:	1ac9      	subs	r1, r1, r3
 8010384:	194a      	adds	r2, r1, r5
 8010386:	f04f 0c01 	mov.w	ip, #1
 801038a:	e8d2 3f4f 	ldrexb	r3, [r2]
 801038e:	e8c2 cf44 	strexb	r4, ip, [r2]
 8010392:	2c00      	cmp	r4, #0
 8010394:	d1f9      	bne.n	801038a <__atomic_load_8+0x36>
 8010396:	f3bf 8f5b 	dmb	ish
 801039a:	b2dc      	uxtb	r4, r3
 801039c:	2c00      	cmp	r4, #0
 801039e:	d1f4      	bne.n	801038a <__atomic_load_8+0x36>
 80103a0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80103a4:	f3bf 8f5b 	dmb	ish
 80103a8:	546b      	strb	r3, [r5, r1]
 80103aa:	4630      	mov	r0, r6
 80103ac:	4639      	mov	r1, r7
 80103ae:	bcf0      	pop	{r4, r5, r6, r7}
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop
 80103b4:	27d4eb2d 	.word	0x27d4eb2d
 80103b8:	b21642c9 	.word	0xb21642c9
 80103bc:	20010a94 	.word	0x20010a94

080103c0 <rcutils_get_env>:
 80103c0:	b150      	cbz	r0, 80103d8 <rcutils_get_env+0x18>
 80103c2:	b510      	push	{r4, lr}
 80103c4:	460c      	mov	r4, r1
 80103c6:	b909      	cbnz	r1, 80103cc <rcutils_get_env+0xc>
 80103c8:	4806      	ldr	r0, [pc, #24]	@ (80103e4 <rcutils_get_env+0x24>)
 80103ca:	bd10      	pop	{r4, pc}
 80103cc:	f002 f9e2 	bl	8012794 <getenv>
 80103d0:	b120      	cbz	r0, 80103dc <rcutils_get_env+0x1c>
 80103d2:	6020      	str	r0, [r4, #0]
 80103d4:	2000      	movs	r0, #0
 80103d6:	bd10      	pop	{r4, pc}
 80103d8:	4803      	ldr	r0, [pc, #12]	@ (80103e8 <rcutils_get_env+0x28>)
 80103da:	4770      	bx	lr
 80103dc:	4b03      	ldr	r3, [pc, #12]	@ (80103ec <rcutils_get_env+0x2c>)
 80103de:	6023      	str	r3, [r4, #0]
 80103e0:	e7f8      	b.n	80103d4 <rcutils_get_env+0x14>
 80103e2:	bf00      	nop
 80103e4:	080148a4 	.word	0x080148a4
 80103e8:	08014888 	.word	0x08014888
 80103ec:	08014e0c 	.word	0x08014e0c

080103f0 <rcutils_is_directory>:
 80103f0:	2000      	movs	r0, #0
 80103f2:	4770      	bx	lr

080103f4 <rcutils_join_path>:
 80103f4:	b082      	sub	sp, #8
 80103f6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80103fa:	2000      	movs	r0, #0
 80103fc:	b002      	add	sp, #8
 80103fe:	4770      	bx	lr

08010400 <rcutils_to_native_path>:
 8010400:	b084      	sub	sp, #16
 8010402:	a801      	add	r0, sp, #4
 8010404:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010408:	b004      	add	sp, #16
 801040a:	2000      	movs	r0, #0
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop

08010410 <rcutils_format_string_limit>:
 8010410:	b40f      	push	{r0, r1, r2, r3}
 8010412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010414:	b083      	sub	sp, #12
 8010416:	ac08      	add	r4, sp, #32
 8010418:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801041a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801041e:	b376      	cbz	r6, 801047e <rcutils_format_string_limit+0x6e>
 8010420:	4620      	mov	r0, r4
 8010422:	f7f9 f847 	bl	80094b4 <rcutils_allocator_is_valid>
 8010426:	b350      	cbz	r0, 801047e <rcutils_format_string_limit+0x6e>
 8010428:	2100      	movs	r1, #0
 801042a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801042c:	4632      	mov	r2, r6
 801042e:	4608      	mov	r0, r1
 8010430:	e9cd 3300 	strd	r3, r3, [sp]
 8010434:	f000 f8f8 	bl	8010628 <rcutils_vsnprintf>
 8010438:	1c43      	adds	r3, r0, #1
 801043a:	4605      	mov	r5, r0
 801043c:	d01f      	beq.n	801047e <rcutils_format_string_limit+0x6e>
 801043e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010440:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010442:	1c47      	adds	r7, r0, #1
 8010444:	429f      	cmp	r7, r3
 8010446:	bf84      	itt	hi
 8010448:	461f      	movhi	r7, r3
 801044a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801044e:	4638      	mov	r0, r7
 8010450:	9b08      	ldr	r3, [sp, #32]
 8010452:	4798      	blx	r3
 8010454:	4604      	mov	r4, r0
 8010456:	b190      	cbz	r0, 801047e <rcutils_format_string_limit+0x6e>
 8010458:	9b01      	ldr	r3, [sp, #4]
 801045a:	4632      	mov	r2, r6
 801045c:	4639      	mov	r1, r7
 801045e:	f000 f8e3 	bl	8010628 <rcutils_vsnprintf>
 8010462:	2800      	cmp	r0, #0
 8010464:	db07      	blt.n	8010476 <rcutils_format_string_limit+0x66>
 8010466:	2300      	movs	r3, #0
 8010468:	5563      	strb	r3, [r4, r5]
 801046a:	4620      	mov	r0, r4
 801046c:	b003      	add	sp, #12
 801046e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010472:	b004      	add	sp, #16
 8010474:	4770      	bx	lr
 8010476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801047a:	4620      	mov	r0, r4
 801047c:	4798      	blx	r3
 801047e:	2400      	movs	r4, #0
 8010480:	e7f3      	b.n	801046a <rcutils_format_string_limit+0x5a>
 8010482:	bf00      	nop

08010484 <rcutils_repl_str>:
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010488:	4699      	mov	r9, r3
 801048a:	b089      	sub	sp, #36	@ 0x24
 801048c:	4603      	mov	r3, r0
 801048e:	4648      	mov	r0, r9
 8010490:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010494:	4698      	mov	r8, r3
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	460c      	mov	r4, r1
 801049a:	f7f9 f80b 	bl	80094b4 <rcutils_allocator_is_valid>
 801049e:	2800      	cmp	r0, #0
 80104a0:	f000 80a3 	beq.w	80105ea <rcutils_repl_str+0x166>
 80104a4:	4620      	mov	r0, r4
 80104a6:	f7ef ff1b 	bl	80002e0 <strlen>
 80104aa:	f04f 0a00 	mov.w	sl, #0
 80104ae:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80104b2:	9001      	str	r0, [sp, #4]
 80104b4:	4657      	mov	r7, sl
 80104b6:	4655      	mov	r5, sl
 80104b8:	2610      	movs	r6, #16
 80104ba:	e01e      	b.n	80104fa <rcutils_repl_str+0x76>
 80104bc:	3501      	adds	r5, #1
 80104be:	45aa      	cmp	sl, r5
 80104c0:	d212      	bcs.n	80104e8 <rcutils_repl_str+0x64>
 80104c2:	44b2      	add	sl, r6
 80104c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80104c8:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80104cc:	4798      	blx	r3
 80104ce:	2800      	cmp	r0, #0
 80104d0:	f000 8088 	beq.w	80105e4 <rcutils_repl_str+0x160>
 80104d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80104d8:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80104dc:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80104e0:	4607      	mov	r7, r0
 80104e2:	bf28      	it	cs
 80104e4:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80104e8:	9a00      	ldr	r2, [sp, #0]
 80104ea:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80104ee:	1aa2      	subs	r2, r4, r2
 80104f0:	f843 2c04 	str.w	r2, [r3, #-4]
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	eb04 0803 	add.w	r8, r4, r3
 80104fa:	9902      	ldr	r1, [sp, #8]
 80104fc:	4640      	mov	r0, r8
 80104fe:	f002 fe15 	bl	801312c <strstr>
 8010502:	4604      	mov	r4, r0
 8010504:	465a      	mov	r2, fp
 8010506:	4638      	mov	r0, r7
 8010508:	2c00      	cmp	r4, #0
 801050a:	d1d7      	bne.n	80104bc <rcutils_repl_str+0x38>
 801050c:	4640      	mov	r0, r8
 801050e:	f7ef fee7 	bl	80002e0 <strlen>
 8010512:	9b00      	ldr	r3, [sp, #0]
 8010514:	eba8 0803 	sub.w	r8, r8, r3
 8010518:	eb08 0300 	add.w	r3, r8, r0
 801051c:	9304      	str	r3, [sp, #16]
 801051e:	f8d9 8000 	ldr.w	r8, [r9]
 8010522:	2d00      	cmp	r5, #0
 8010524:	d03f      	beq.n	80105a6 <rcutils_repl_str+0x122>
 8010526:	9803      	ldr	r0, [sp, #12]
 8010528:	f7ef feda 	bl	80002e0 <strlen>
 801052c:	4606      	mov	r6, r0
 801052e:	9801      	ldr	r0, [sp, #4]
 8010530:	9a04      	ldr	r2, [sp, #16]
 8010532:	1a33      	subs	r3, r6, r0
 8010534:	fb05 2a03 	mla	sl, r5, r3, r2
 8010538:	4659      	mov	r1, fp
 801053a:	f10a 0001 	add.w	r0, sl, #1
 801053e:	47c0      	blx	r8
 8010540:	4683      	mov	fp, r0
 8010542:	2800      	cmp	r0, #0
 8010544:	d04e      	beq.n	80105e4 <rcutils_repl_str+0x160>
 8010546:	683a      	ldr	r2, [r7, #0]
 8010548:	9900      	ldr	r1, [sp, #0]
 801054a:	f002 fee6 	bl	801331a <memcpy>
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	9706      	str	r7, [sp, #24]
 8010552:	1e6a      	subs	r2, r5, #1
 8010554:	445b      	add	r3, fp
 8010556:	46a8      	mov	r8, r5
 8010558:	9202      	str	r2, [sp, #8]
 801055a:	4625      	mov	r5, r4
 801055c:	f8cd 901c 	str.w	r9, [sp, #28]
 8010560:	461c      	mov	r4, r3
 8010562:	9903      	ldr	r1, [sp, #12]
 8010564:	4632      	mov	r2, r6
 8010566:	4620      	mov	r0, r4
 8010568:	f002 fed7 	bl	801331a <memcpy>
 801056c:	9b01      	ldr	r3, [sp, #4]
 801056e:	f857 2b04 	ldr.w	r2, [r7], #4
 8010572:	eb02 0c03 	add.w	ip, r2, r3
 8010576:	9b00      	ldr	r3, [sp, #0]
 8010578:	eb03 010c 	add.w	r1, r3, ip
 801057c:	9b02      	ldr	r3, [sp, #8]
 801057e:	4434      	add	r4, r6
 8010580:	429d      	cmp	r5, r3
 8010582:	4620      	mov	r0, r4
 8010584:	d022      	beq.n	80105cc <rcutils_repl_str+0x148>
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	eba2 090c 	sub.w	r9, r2, ip
 801058c:	464a      	mov	r2, r9
 801058e:	3501      	adds	r5, #1
 8010590:	f002 fec3 	bl	801331a <memcpy>
 8010594:	45a8      	cmp	r8, r5
 8010596:	444c      	add	r4, r9
 8010598:	d1e3      	bne.n	8010562 <rcutils_repl_str+0xde>
 801059a:	2300      	movs	r3, #0
 801059c:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 80105a0:	f80b 300a 	strb.w	r3, [fp, sl]
 80105a4:	e008      	b.n	80105b8 <rcutils_repl_str+0x134>
 80105a6:	4618      	mov	r0, r3
 80105a8:	4659      	mov	r1, fp
 80105aa:	3001      	adds	r0, #1
 80105ac:	47c0      	blx	r8
 80105ae:	4683      	mov	fp, r0
 80105b0:	b110      	cbz	r0, 80105b8 <rcutils_repl_str+0x134>
 80105b2:	9900      	ldr	r1, [sp, #0]
 80105b4:	f002 fea9 	bl	801330a <strcpy>
 80105b8:	4638      	mov	r0, r7
 80105ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80105be:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80105c2:	4798      	blx	r3
 80105c4:	4658      	mov	r0, fp
 80105c6:	b009      	add	sp, #36	@ 0x24
 80105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	9b04      	ldr	r3, [sp, #16]
 80105ce:	eba3 020c 	sub.w	r2, r3, ip
 80105d2:	9205      	str	r2, [sp, #20]
 80105d4:	3501      	adds	r5, #1
 80105d6:	f002 fea0 	bl	801331a <memcpy>
 80105da:	9a05      	ldr	r2, [sp, #20]
 80105dc:	45a8      	cmp	r8, r5
 80105de:	4414      	add	r4, r2
 80105e0:	d1bf      	bne.n	8010562 <rcutils_repl_str+0xde>
 80105e2:	e7da      	b.n	801059a <rcutils_repl_str+0x116>
 80105e4:	f04f 0b00 	mov.w	fp, #0
 80105e8:	e7e6      	b.n	80105b8 <rcutils_repl_str+0x134>
 80105ea:	4683      	mov	fp, r0
 80105ec:	4658      	mov	r0, fp
 80105ee:	b009      	add	sp, #36	@ 0x24
 80105f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105f4 <rcutils_snprintf>:
 80105f4:	b40c      	push	{r2, r3}
 80105f6:	b530      	push	{r4, r5, lr}
 80105f8:	b083      	sub	sp, #12
 80105fa:	ab06      	add	r3, sp, #24
 80105fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010600:	9301      	str	r3, [sp, #4]
 8010602:	b152      	cbz	r2, 801061a <rcutils_snprintf+0x26>
 8010604:	b138      	cbz	r0, 8010616 <rcutils_snprintf+0x22>
 8010606:	b141      	cbz	r1, 801061a <rcutils_snprintf+0x26>
 8010608:	f002 fcb4 	bl	8012f74 <vsniprintf>
 801060c:	b003      	add	sp, #12
 801060e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010612:	b002      	add	sp, #8
 8010614:	4770      	bx	lr
 8010616:	2900      	cmp	r1, #0
 8010618:	d0f6      	beq.n	8010608 <rcutils_snprintf+0x14>
 801061a:	f002 fe49 	bl	80132b0 <__errno>
 801061e:	2316      	movs	r3, #22
 8010620:	6003      	str	r3, [r0, #0]
 8010622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010626:	e7f1      	b.n	801060c <rcutils_snprintf+0x18>

08010628 <rcutils_vsnprintf>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	b13a      	cbz	r2, 801063c <rcutils_vsnprintf+0x14>
 801062c:	b120      	cbz	r0, 8010638 <rcutils_vsnprintf+0x10>
 801062e:	b129      	cbz	r1, 801063c <rcutils_vsnprintf+0x14>
 8010630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010634:	f002 bc9e 	b.w	8012f74 <vsniprintf>
 8010638:	2900      	cmp	r1, #0
 801063a:	d0f9      	beq.n	8010630 <rcutils_vsnprintf+0x8>
 801063c:	f002 fe38 	bl	80132b0 <__errno>
 8010640:	2316      	movs	r3, #22
 8010642:	6003      	str	r3, [r0, #0]
 8010644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010648:	bd70      	pop	{r4, r5, r6, pc}
 801064a:	bf00      	nop

0801064c <rcutils_strdup>:
 801064c:	b084      	sub	sp, #16
 801064e:	b570      	push	{r4, r5, r6, lr}
 8010650:	b086      	sub	sp, #24
 8010652:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8010656:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801065a:	4604      	mov	r4, r0
 801065c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010660:	f10d 0e04 	add.w	lr, sp, #4
 8010664:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010668:	f8dc 3000 	ldr.w	r3, [ip]
 801066c:	f8ce 3000 	str.w	r3, [lr]
 8010670:	b304      	cbz	r4, 80106b4 <rcutils_strdup+0x68>
 8010672:	a801      	add	r0, sp, #4
 8010674:	f7f8 ff1e 	bl	80094b4 <rcutils_allocator_is_valid>
 8010678:	b1e0      	cbz	r0, 80106b4 <rcutils_strdup+0x68>
 801067a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801067e:	2100      	movs	r1, #0
 8010680:	4620      	mov	r0, r4
 8010682:	f7ef fddd 	bl	8000240 <memchr>
 8010686:	b190      	cbz	r0, 80106ae <rcutils_strdup+0x62>
 8010688:	1b06      	subs	r6, r0, r4
 801068a:	1c70      	adds	r0, r6, #1
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	9905      	ldr	r1, [sp, #20]
 8010690:	4798      	blx	r3
 8010692:	4605      	mov	r5, r0
 8010694:	b128      	cbz	r0, 80106a2 <rcutils_strdup+0x56>
 8010696:	4632      	mov	r2, r6
 8010698:	4621      	mov	r1, r4
 801069a:	f002 fe3e 	bl	801331a <memcpy>
 801069e:	2300      	movs	r3, #0
 80106a0:	55ab      	strb	r3, [r5, r6]
 80106a2:	4628      	mov	r0, r5
 80106a4:	b006      	add	sp, #24
 80106a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106aa:	b004      	add	sp, #16
 80106ac:	4770      	bx	lr
 80106ae:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80106b2:	e7eb      	b.n	801068c <rcutils_strdup+0x40>
 80106b4:	2500      	movs	r5, #0
 80106b6:	e7f4      	b.n	80106a2 <rcutils_strdup+0x56>

080106b8 <rcutils_strndup>:
 80106b8:	b082      	sub	sp, #8
 80106ba:	b570      	push	{r4, r5, r6, lr}
 80106bc:	ac04      	add	r4, sp, #16
 80106be:	e884 000c 	stmia.w	r4, {r2, r3}
 80106c2:	b1e8      	cbz	r0, 8010700 <rcutils_strndup+0x48>
 80106c4:	4605      	mov	r5, r0
 80106c6:	a804      	add	r0, sp, #16
 80106c8:	460c      	mov	r4, r1
 80106ca:	f7f8 fef3 	bl	80094b4 <rcutils_allocator_is_valid>
 80106ce:	b1b8      	cbz	r0, 8010700 <rcutils_strndup+0x48>
 80106d0:	4622      	mov	r2, r4
 80106d2:	2100      	movs	r1, #0
 80106d4:	4628      	mov	r0, r5
 80106d6:	f7ef fdb3 	bl	8000240 <memchr>
 80106da:	b100      	cbz	r0, 80106de <rcutils_strndup+0x26>
 80106dc:	1b44      	subs	r4, r0, r5
 80106de:	9b04      	ldr	r3, [sp, #16]
 80106e0:	9908      	ldr	r1, [sp, #32]
 80106e2:	1c60      	adds	r0, r4, #1
 80106e4:	4798      	blx	r3
 80106e6:	4606      	mov	r6, r0
 80106e8:	b128      	cbz	r0, 80106f6 <rcutils_strndup+0x3e>
 80106ea:	4622      	mov	r2, r4
 80106ec:	4629      	mov	r1, r5
 80106ee:	f002 fe14 	bl	801331a <memcpy>
 80106f2:	2300      	movs	r3, #0
 80106f4:	5533      	strb	r3, [r6, r4]
 80106f6:	4630      	mov	r0, r6
 80106f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106fc:	b002      	add	sp, #8
 80106fe:	4770      	bx	lr
 8010700:	2600      	movs	r6, #0
 8010702:	4630      	mov	r0, r6
 8010704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010708:	b002      	add	sp, #8
 801070a:	4770      	bx	lr

0801070c <rcutils_get_zero_initialized_string_map>:
 801070c:	4b01      	ldr	r3, [pc, #4]	@ (8010714 <rcutils_get_zero_initialized_string_map+0x8>)
 801070e:	2000      	movs	r0, #0
 8010710:	6018      	str	r0, [r3, #0]
 8010712:	4770      	bx	lr
 8010714:	20010aac 	.word	0x20010aac

08010718 <rcutils_string_map_reserve>:
 8010718:	2800      	cmp	r0, #0
 801071a:	d04e      	beq.n	80107ba <rcutils_string_map_reserve+0xa2>
 801071c:	b530      	push	{r4, r5, lr}
 801071e:	6803      	ldr	r3, [r0, #0]
 8010720:	b087      	sub	sp, #28
 8010722:	4604      	mov	r4, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d043      	beq.n	80107b0 <rcutils_string_map_reserve+0x98>
 8010728:	f103 0c0c 	add.w	ip, r3, #12
 801072c:	460d      	mov	r5, r1
 801072e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010732:	f10d 0e04 	add.w	lr, sp, #4
 8010736:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801073a:	f8dc 3000 	ldr.w	r3, [ip]
 801073e:	f8ce 3000 	str.w	r3, [lr]
 8010742:	a801      	add	r0, sp, #4
 8010744:	f7f8 feb6 	bl	80094b4 <rcutils_allocator_is_valid>
 8010748:	b308      	cbz	r0, 801078e <rcutils_string_map_reserve+0x76>
 801074a:	6823      	ldr	r3, [r4, #0]
 801074c:	6899      	ldr	r1, [r3, #8]
 801074e:	42a9      	cmp	r1, r5
 8010750:	d829      	bhi.n	80107a6 <rcutils_string_map_reserve+0x8e>
 8010752:	685a      	ldr	r2, [r3, #4]
 8010754:	42aa      	cmp	r2, r5
 8010756:	d024      	beq.n	80107a2 <rcutils_string_map_reserve+0x8a>
 8010758:	b1e5      	cbz	r5, 8010794 <rcutils_string_map_reserve+0x7c>
 801075a:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801075e:	d22a      	bcs.n	80107b6 <rcutils_string_map_reserve+0x9e>
 8010760:	6818      	ldr	r0, [r3, #0]
 8010762:	9a05      	ldr	r2, [sp, #20]
 8010764:	9b03      	ldr	r3, [sp, #12]
 8010766:	00e9      	lsls	r1, r5, #3
 8010768:	4798      	blx	r3
 801076a:	b320      	cbz	r0, 80107b6 <rcutils_string_map_reserve+0x9e>
 801076c:	6824      	ldr	r4, [r4, #0]
 801076e:	6861      	ldr	r1, [r4, #4]
 8010770:	6020      	str	r0, [r4, #0]
 8010772:	42a9      	cmp	r1, r5
 8010774:	d214      	bcs.n	80107a0 <rcutils_string_map_reserve+0x88>
 8010776:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801077a:	1a69      	subs	r1, r5, r1
 801077c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010780:	2200      	movs	r2, #0
 8010782:	e9c3 2200 	strd	r2, r2, [r3]
 8010786:	3308      	adds	r3, #8
 8010788:	428b      	cmp	r3, r1
 801078a:	d1fa      	bne.n	8010782 <rcutils_string_map_reserve+0x6a>
 801078c:	e008      	b.n	80107a0 <rcutils_string_map_reserve+0x88>
 801078e:	200b      	movs	r0, #11
 8010790:	b007      	add	sp, #28
 8010792:	bd30      	pop	{r4, r5, pc}
 8010794:	9a02      	ldr	r2, [sp, #8]
 8010796:	9905      	ldr	r1, [sp, #20]
 8010798:	6818      	ldr	r0, [r3, #0]
 801079a:	4790      	blx	r2
 801079c:	6824      	ldr	r4, [r4, #0]
 801079e:	6025      	str	r5, [r4, #0]
 80107a0:	6065      	str	r5, [r4, #4]
 80107a2:	2000      	movs	r0, #0
 80107a4:	e7f4      	b.n	8010790 <rcutils_string_map_reserve+0x78>
 80107a6:	4620      	mov	r0, r4
 80107a8:	f7ff ffb6 	bl	8010718 <rcutils_string_map_reserve>
 80107ac:	b007      	add	sp, #28
 80107ae:	bd30      	pop	{r4, r5, pc}
 80107b0:	201f      	movs	r0, #31
 80107b2:	b007      	add	sp, #28
 80107b4:	bd30      	pop	{r4, r5, pc}
 80107b6:	200a      	movs	r0, #10
 80107b8:	e7ea      	b.n	8010790 <rcutils_string_map_reserve+0x78>
 80107ba:	200b      	movs	r0, #11
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop

080107c0 <rcutils_string_map_init>:
 80107c0:	b082      	sub	sp, #8
 80107c2:	b570      	push	{r4, r5, r6, lr}
 80107c4:	ac04      	add	r4, sp, #16
 80107c6:	e884 000c 	stmia.w	r4, {r2, r3}
 80107ca:	b378      	cbz	r0, 801082c <rcutils_string_map_init+0x6c>
 80107cc:	6806      	ldr	r6, [r0, #0]
 80107ce:	4604      	mov	r4, r0
 80107d0:	b12e      	cbz	r6, 80107de <rcutils_string_map_init+0x1e>
 80107d2:	251e      	movs	r5, #30
 80107d4:	4628      	mov	r0, r5
 80107d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107da:	b002      	add	sp, #8
 80107dc:	4770      	bx	lr
 80107de:	a804      	add	r0, sp, #16
 80107e0:	460d      	mov	r5, r1
 80107e2:	f7f8 fe67 	bl	80094b4 <rcutils_allocator_is_valid>
 80107e6:	b308      	cbz	r0, 801082c <rcutils_string_map_init+0x6c>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	9908      	ldr	r1, [sp, #32]
 80107ec:	2020      	movs	r0, #32
 80107ee:	4798      	blx	r3
 80107f0:	6020      	str	r0, [r4, #0]
 80107f2:	b308      	cbz	r0, 8010838 <rcutils_string_map_init+0x78>
 80107f4:	f10d 0e10 	add.w	lr, sp, #16
 80107f8:	e9c0 6600 	strd	r6, r6, [r0]
 80107fc:	6086      	str	r6, [r0, #8]
 80107fe:	f100 0c0c 	add.w	ip, r0, #12
 8010802:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801080a:	f8de 3000 	ldr.w	r3, [lr]
 801080e:	f8cc 3000 	str.w	r3, [ip]
 8010812:	4629      	mov	r1, r5
 8010814:	4620      	mov	r0, r4
 8010816:	f7ff ff7f 	bl	8010718 <rcutils_string_map_reserve>
 801081a:	4605      	mov	r5, r0
 801081c:	2800      	cmp	r0, #0
 801081e:	d0d9      	beq.n	80107d4 <rcutils_string_map_init+0x14>
 8010820:	9b05      	ldr	r3, [sp, #20]
 8010822:	9908      	ldr	r1, [sp, #32]
 8010824:	6820      	ldr	r0, [r4, #0]
 8010826:	4798      	blx	r3
 8010828:	6026      	str	r6, [r4, #0]
 801082a:	e7d3      	b.n	80107d4 <rcutils_string_map_init+0x14>
 801082c:	250b      	movs	r5, #11
 801082e:	4628      	mov	r0, r5
 8010830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010834:	b002      	add	sp, #8
 8010836:	4770      	bx	lr
 8010838:	250a      	movs	r5, #10
 801083a:	e7cb      	b.n	80107d4 <rcutils_string_map_init+0x14>

0801083c <rcutils_string_map_fini>:
 801083c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010840:	b086      	sub	sp, #24
 8010842:	2800      	cmp	r0, #0
 8010844:	d04f      	beq.n	80108e6 <rcutils_string_map_fini+0xaa>
 8010846:	6805      	ldr	r5, [r0, #0]
 8010848:	4606      	mov	r6, r0
 801084a:	2d00      	cmp	r5, #0
 801084c:	d046      	beq.n	80108dc <rcutils_string_map_fini+0xa0>
 801084e:	686b      	ldr	r3, [r5, #4]
 8010850:	b353      	cbz	r3, 80108a8 <rcutils_string_map_fini+0x6c>
 8010852:	2400      	movs	r4, #0
 8010854:	682a      	ldr	r2, [r5, #0]
 8010856:	4627      	mov	r7, r4
 8010858:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801085c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8010860:	b1f8      	cbz	r0, 80108a2 <rcutils_string_map_fini+0x66>
 8010862:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8010866:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801086a:	4651      	mov	r1, sl
 801086c:	47c8      	blx	r9
 801086e:	682b      	ldr	r3, [r5, #0]
 8010870:	eb03 0208 	add.w	r2, r3, r8
 8010874:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8010878:	6850      	ldr	r0, [r2, #4]
 801087a:	4651      	mov	r1, sl
 801087c:	47c8      	blx	r9
 801087e:	682a      	ldr	r2, [r5, #0]
 8010880:	68ab      	ldr	r3, [r5, #8]
 8010882:	4442      	add	r2, r8
 8010884:	3b01      	subs	r3, #1
 8010886:	6057      	str	r7, [r2, #4]
 8010888:	60ab      	str	r3, [r5, #8]
 801088a:	6835      	ldr	r5, [r6, #0]
 801088c:	686b      	ldr	r3, [r5, #4]
 801088e:	3401      	adds	r4, #1
 8010890:	429c      	cmp	r4, r3
 8010892:	d209      	bcs.n	80108a8 <rcutils_string_map_fini+0x6c>
 8010894:	682a      	ldr	r2, [r5, #0]
 8010896:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801089a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801089e:	2800      	cmp	r0, #0
 80108a0:	d1df      	bne.n	8010862 <rcutils_string_map_fini+0x26>
 80108a2:	3401      	adds	r4, #1
 80108a4:	42a3      	cmp	r3, r4
 80108a6:	d8d7      	bhi.n	8010858 <rcutils_string_map_fini+0x1c>
 80108a8:	2100      	movs	r1, #0
 80108aa:	4630      	mov	r0, r6
 80108ac:	f7ff ff34 	bl	8010718 <rcutils_string_map_reserve>
 80108b0:	4604      	mov	r4, r0
 80108b2:	b118      	cbz	r0, 80108bc <rcutils_string_map_fini+0x80>
 80108b4:	4620      	mov	r0, r4
 80108b6:	b006      	add	sp, #24
 80108b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108bc:	6835      	ldr	r5, [r6, #0]
 80108be:	350c      	adds	r5, #12
 80108c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108c2:	af01      	add	r7, sp, #4
 80108c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80108c6:	682b      	ldr	r3, [r5, #0]
 80108c8:	603b      	str	r3, [r7, #0]
 80108ca:	a801      	add	r0, sp, #4
 80108cc:	f7f8 fdf2 	bl	80094b4 <rcutils_allocator_is_valid>
 80108d0:	b148      	cbz	r0, 80108e6 <rcutils_string_map_fini+0xaa>
 80108d2:	9b02      	ldr	r3, [sp, #8]
 80108d4:	9905      	ldr	r1, [sp, #20]
 80108d6:	6830      	ldr	r0, [r6, #0]
 80108d8:	4798      	blx	r3
 80108da:	6034      	str	r4, [r6, #0]
 80108dc:	2400      	movs	r4, #0
 80108de:	4620      	mov	r0, r4
 80108e0:	b006      	add	sp, #24
 80108e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e6:	240b      	movs	r4, #11
 80108e8:	4620      	mov	r0, r4
 80108ea:	b006      	add	sp, #24
 80108ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080108f0 <rcutils_string_map_getn>:
 80108f0:	b338      	cbz	r0, 8010942 <rcutils_string_map_getn+0x52>
 80108f2:	6800      	ldr	r0, [r0, #0]
 80108f4:	b328      	cbz	r0, 8010942 <rcutils_string_map_getn+0x52>
 80108f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108fa:	460e      	mov	r6, r1
 80108fc:	b1c1      	cbz	r1, 8010930 <rcutils_string_map_getn+0x40>
 80108fe:	e9d0 9800 	ldrd	r9, r8, [r0]
 8010902:	f1b8 0f00 	cmp.w	r8, #0
 8010906:	d013      	beq.n	8010930 <rcutils_string_map_getn+0x40>
 8010908:	4617      	mov	r7, r2
 801090a:	2400      	movs	r4, #0
 801090c:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8010910:	4628      	mov	r0, r5
 8010912:	b155      	cbz	r5, 801092a <rcutils_string_map_getn+0x3a>
 8010914:	f7ef fce4 	bl	80002e0 <strlen>
 8010918:	42b8      	cmp	r0, r7
 801091a:	4602      	mov	r2, r0
 801091c:	4629      	mov	r1, r5
 801091e:	bf38      	it	cc
 8010920:	463a      	movcc	r2, r7
 8010922:	4630      	mov	r0, r6
 8010924:	f002 fbdd 	bl	80130e2 <strncmp>
 8010928:	b128      	cbz	r0, 8010936 <rcutils_string_map_getn+0x46>
 801092a:	3401      	adds	r4, #1
 801092c:	45a0      	cmp	r8, r4
 801092e:	d1ed      	bne.n	801090c <rcutils_string_map_getn+0x1c>
 8010930:	2000      	movs	r0, #0
 8010932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010936:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801093a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801093e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010942:	4770      	bx	lr

08010944 <rcutils_system_time_now>:
 8010944:	b318      	cbz	r0, 801098e <rcutils_system_time_now+0x4a>
 8010946:	b570      	push	{r4, r5, r6, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	4604      	mov	r4, r0
 801094c:	4669      	mov	r1, sp
 801094e:	2001      	movs	r0, #1
 8010950:	f7f0 fea6 	bl	80016a0 <clock_gettime>
 8010954:	2800      	cmp	r0, #0
 8010956:	db17      	blt.n	8010988 <rcutils_system_time_now+0x44>
 8010958:	e9dd 3100 	ldrd	r3, r1, [sp]
 801095c:	2900      	cmp	r1, #0
 801095e:	db13      	blt.n	8010988 <rcutils_system_time_now+0x44>
 8010960:	9d02      	ldr	r5, [sp, #8]
 8010962:	2d00      	cmp	r5, #0
 8010964:	db0d      	blt.n	8010982 <rcutils_system_time_now+0x3e>
 8010966:	4e0b      	ldr	r6, [pc, #44]	@ (8010994 <rcutils_system_time_now+0x50>)
 8010968:	fba3 3206 	umull	r3, r2, r3, r6
 801096c:	195b      	adds	r3, r3, r5
 801096e:	fb06 2201 	mla	r2, r6, r1, r2
 8010972:	f04f 0000 	mov.w	r0, #0
 8010976:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801097a:	e9c4 3200 	strd	r3, r2, [r4]
 801097e:	b004      	add	sp, #16
 8010980:	bd70      	pop	{r4, r5, r6, pc}
 8010982:	ea53 0201 	orrs.w	r2, r3, r1
 8010986:	d1ee      	bne.n	8010966 <rcutils_system_time_now+0x22>
 8010988:	2002      	movs	r0, #2
 801098a:	b004      	add	sp, #16
 801098c:	bd70      	pop	{r4, r5, r6, pc}
 801098e:	200b      	movs	r0, #11
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	3b9aca00 	.word	0x3b9aca00

08010998 <rcutils_steady_time_now>:
 8010998:	b318      	cbz	r0, 80109e2 <rcutils_steady_time_now+0x4a>
 801099a:	b570      	push	{r4, r5, r6, lr}
 801099c:	b084      	sub	sp, #16
 801099e:	4604      	mov	r4, r0
 80109a0:	4669      	mov	r1, sp
 80109a2:	2000      	movs	r0, #0
 80109a4:	f7f0 fe7c 	bl	80016a0 <clock_gettime>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	db17      	blt.n	80109dc <rcutils_steady_time_now+0x44>
 80109ac:	e9dd 3100 	ldrd	r3, r1, [sp]
 80109b0:	2900      	cmp	r1, #0
 80109b2:	db13      	blt.n	80109dc <rcutils_steady_time_now+0x44>
 80109b4:	9d02      	ldr	r5, [sp, #8]
 80109b6:	2d00      	cmp	r5, #0
 80109b8:	db0d      	blt.n	80109d6 <rcutils_steady_time_now+0x3e>
 80109ba:	4e0b      	ldr	r6, [pc, #44]	@ (80109e8 <rcutils_steady_time_now+0x50>)
 80109bc:	fba3 3206 	umull	r3, r2, r3, r6
 80109c0:	195b      	adds	r3, r3, r5
 80109c2:	fb06 2201 	mla	r2, r6, r1, r2
 80109c6:	f04f 0000 	mov.w	r0, #0
 80109ca:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80109ce:	e9c4 3200 	strd	r3, r2, [r4]
 80109d2:	b004      	add	sp, #16
 80109d4:	bd70      	pop	{r4, r5, r6, pc}
 80109d6:	ea53 0201 	orrs.w	r2, r3, r1
 80109da:	d1ee      	bne.n	80109ba <rcutils_steady_time_now+0x22>
 80109dc:	2002      	movs	r0, #2
 80109de:	b004      	add	sp, #16
 80109e0:	bd70      	pop	{r4, r5, r6, pc}
 80109e2:	200b      	movs	r0, #11
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	3b9aca00 	.word	0x3b9aca00

080109ec <rmw_get_zero_initialized_discovery_options>:
 80109ec:	b510      	push	{r4, lr}
 80109ee:	2220      	movs	r2, #32
 80109f0:	4604      	mov	r4, r0
 80109f2:	2100      	movs	r1, #0
 80109f4:	f002 fb60 	bl	80130b8 <memset>
 80109f8:	4620      	mov	r0, r4
 80109fa:	bd10      	pop	{r4, pc}

080109fc <rmw_discovery_options_init>:
 80109fc:	b328      	cbz	r0, 8010a4a <rmw_discovery_options_init+0x4e>
 80109fe:	b570      	push	{r4, r5, r6, lr}
 8010a00:	4604      	mov	r4, r0
 8010a02:	4610      	mov	r0, r2
 8010a04:	460e      	mov	r6, r1
 8010a06:	4615      	mov	r5, r2
 8010a08:	f7f8 fd54 	bl	80094b4 <rcutils_allocator_is_valid>
 8010a0c:	b1d8      	cbz	r0, 8010a46 <rmw_discovery_options_init+0x4a>
 8010a0e:	68a3      	ldr	r3, [r4, #8]
 8010a10:	b9cb      	cbnz	r3, 8010a46 <rmw_discovery_options_init+0x4a>
 8010a12:	6863      	ldr	r3, [r4, #4]
 8010a14:	b9bb      	cbnz	r3, 8010a46 <rmw_discovery_options_init+0x4a>
 8010a16:	7823      	ldrb	r3, [r4, #0]
 8010a18:	b90b      	cbnz	r3, 8010a1e <rmw_discovery_options_init+0x22>
 8010a1a:	2302      	movs	r3, #2
 8010a1c:	7023      	strb	r3, [r4, #0]
 8010a1e:	b186      	cbz	r6, 8010a42 <rmw_discovery_options_init+0x46>
 8010a20:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8010a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a28:	4630      	mov	r0, r6
 8010a2a:	4798      	blx	r3
 8010a2c:	6060      	str	r0, [r4, #4]
 8010a2e:	b170      	cbz	r0, 8010a4e <rmw_discovery_options_init+0x52>
 8010a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a32:	f104 0c0c 	add.w	ip, r4, #12
 8010a36:	60a6      	str	r6, [r4, #8]
 8010a38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	f8cc 3000 	str.w	r3, [ip]
 8010a42:	2000      	movs	r0, #0
 8010a44:	bd70      	pop	{r4, r5, r6, pc}
 8010a46:	200b      	movs	r0, #11
 8010a48:	bd70      	pop	{r4, r5, r6, pc}
 8010a4a:	200b      	movs	r0, #11
 8010a4c:	4770      	bx	lr
 8010a4e:	200a      	movs	r0, #10
 8010a50:	bd70      	pop	{r4, r5, r6, pc}
 8010a52:	bf00      	nop

08010a54 <rmw_get_zero_initialized_context>:
 8010a54:	b530      	push	{r4, r5, lr}
 8010a56:	b097      	sub	sp, #92	@ 0x5c
 8010a58:	4604      	mov	r4, r0
 8010a5a:	4668      	mov	r0, sp
 8010a5c:	f7f8 fd6c 	bl	8009538 <rmw_get_zero_initialized_init_options>
 8010a60:	2300      	movs	r3, #0
 8010a62:	2200      	movs	r2, #0
 8010a64:	e9c4 2300 	strd	r2, r3, [r4]
 8010a68:	2500      	movs	r5, #0
 8010a6a:	4669      	mov	r1, sp
 8010a6c:	2258      	movs	r2, #88	@ 0x58
 8010a6e:	f104 0010 	add.w	r0, r4, #16
 8010a72:	60a5      	str	r5, [r4, #8]
 8010a74:	f002 fc51 	bl	801331a <memcpy>
 8010a78:	4620      	mov	r0, r4
 8010a7a:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8010a7e:	b017      	add	sp, #92	@ 0x5c
 8010a80:	bd30      	pop	{r4, r5, pc}
 8010a82:	bf00      	nop

08010a84 <rmw_validate_full_topic_name>:
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d049      	beq.n	8010b1c <rmw_validate_full_topic_name+0x98>
 8010a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a8c:	460e      	mov	r6, r1
 8010a8e:	2900      	cmp	r1, #0
 8010a90:	d056      	beq.n	8010b40 <rmw_validate_full_topic_name+0xbc>
 8010a92:	4615      	mov	r5, r2
 8010a94:	4604      	mov	r4, r0
 8010a96:	f7ef fc23 	bl	80002e0 <strlen>
 8010a9a:	b150      	cbz	r0, 8010ab2 <rmw_validate_full_topic_name+0x2e>
 8010a9c:	7823      	ldrb	r3, [r4, #0]
 8010a9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8010aa0:	d00c      	beq.n	8010abc <rmw_validate_full_topic_name+0x38>
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	6033      	str	r3, [r6, #0]
 8010aa6:	b10d      	cbz	r5, 8010aac <rmw_validate_full_topic_name+0x28>
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	602b      	str	r3, [r5, #0]
 8010aac:	2000      	movs	r0, #0
 8010aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	6033      	str	r3, [r6, #0]
 8010ab6:	2d00      	cmp	r5, #0
 8010ab8:	d1f6      	bne.n	8010aa8 <rmw_validate_full_topic_name+0x24>
 8010aba:	e7f7      	b.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010abc:	1e47      	subs	r7, r0, #1
 8010abe:	5de3      	ldrb	r3, [r4, r7]
 8010ac0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ac2:	d03f      	beq.n	8010b44 <rmw_validate_full_topic_name+0xc0>
 8010ac4:	1e63      	subs	r3, r4, #1
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	eb03 0e00 	add.w	lr, r3, r0
 8010acc:	469c      	mov	ip, r3
 8010ace:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010ad2:	2a5f      	cmp	r2, #95	@ 0x5f
 8010ad4:	d006      	beq.n	8010ae4 <rmw_validate_full_topic_name+0x60>
 8010ad6:	d823      	bhi.n	8010b20 <rmw_validate_full_topic_name+0x9c>
 8010ad8:	2a39      	cmp	r2, #57	@ 0x39
 8010ada:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8010ade:	d82b      	bhi.n	8010b38 <rmw_validate_full_topic_name+0xb4>
 8010ae0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010ae2:	d920      	bls.n	8010b26 <rmw_validate_full_topic_name+0xa2>
 8010ae4:	4573      	cmp	r3, lr
 8010ae6:	d1f1      	bne.n	8010acc <rmw_validate_full_topic_name+0x48>
 8010ae8:	4c21      	ldr	r4, [pc, #132]	@ (8010b70 <rmw_validate_full_topic_name+0xec>)
 8010aea:	2300      	movs	r3, #0
 8010aec:	e003      	b.n	8010af6 <rmw_validate_full_topic_name+0x72>
 8010aee:	4298      	cmp	r0, r3
 8010af0:	f101 0101 	add.w	r1, r1, #1
 8010af4:	d02c      	beq.n	8010b50 <rmw_validate_full_topic_name+0xcc>
 8010af6:	429f      	cmp	r7, r3
 8010af8:	f103 0301 	add.w	r3, r3, #1
 8010afc:	d0f7      	beq.n	8010aee <rmw_validate_full_topic_name+0x6a>
 8010afe:	780a      	ldrb	r2, [r1, #0]
 8010b00:	2a2f      	cmp	r2, #47	@ 0x2f
 8010b02:	d1f4      	bne.n	8010aee <rmw_validate_full_topic_name+0x6a>
 8010b04:	784a      	ldrb	r2, [r1, #1]
 8010b06:	2a2f      	cmp	r2, #47	@ 0x2f
 8010b08:	d02d      	beq.n	8010b66 <rmw_validate_full_topic_name+0xe2>
 8010b0a:	5ca2      	ldrb	r2, [r4, r2]
 8010b0c:	0752      	lsls	r2, r2, #29
 8010b0e:	d5ee      	bpl.n	8010aee <rmw_validate_full_topic_name+0x6a>
 8010b10:	2206      	movs	r2, #6
 8010b12:	6032      	str	r2, [r6, #0]
 8010b14:	2d00      	cmp	r5, #0
 8010b16:	d0c9      	beq.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b18:	602b      	str	r3, [r5, #0]
 8010b1a:	e7c7      	b.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b1c:	200b      	movs	r0, #11
 8010b1e:	4770      	bx	lr
 8010b20:	3a61      	subs	r2, #97	@ 0x61
 8010b22:	2a19      	cmp	r2, #25
 8010b24:	d9de      	bls.n	8010ae4 <rmw_validate_full_topic_name+0x60>
 8010b26:	2304      	movs	r3, #4
 8010b28:	6033      	str	r3, [r6, #0]
 8010b2a:	2d00      	cmp	r5, #0
 8010b2c:	d0be      	beq.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b2e:	f1c4 0401 	rsb	r4, r4, #1
 8010b32:	4464      	add	r4, ip
 8010b34:	602c      	str	r4, [r5, #0]
 8010b36:	e7b9      	b.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b38:	f1b8 0f19 	cmp.w	r8, #25
 8010b3c:	d9d2      	bls.n	8010ae4 <rmw_validate_full_topic_name+0x60>
 8010b3e:	e7f2      	b.n	8010b26 <rmw_validate_full_topic_name+0xa2>
 8010b40:	200b      	movs	r0, #11
 8010b42:	e7b4      	b.n	8010aae <rmw_validate_full_topic_name+0x2a>
 8010b44:	2303      	movs	r3, #3
 8010b46:	6033      	str	r3, [r6, #0]
 8010b48:	2d00      	cmp	r5, #0
 8010b4a:	d0af      	beq.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b4c:	602f      	str	r7, [r5, #0]
 8010b4e:	e7ad      	b.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b50:	28f7      	cmp	r0, #247	@ 0xf7
 8010b52:	d802      	bhi.n	8010b5a <rmw_validate_full_topic_name+0xd6>
 8010b54:	2300      	movs	r3, #0
 8010b56:	6033      	str	r3, [r6, #0]
 8010b58:	e7a8      	b.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b5a:	2307      	movs	r3, #7
 8010b5c:	6033      	str	r3, [r6, #0]
 8010b5e:	2d00      	cmp	r5, #0
 8010b60:	d0a4      	beq.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b62:	23f6      	movs	r3, #246	@ 0xf6
 8010b64:	e7d8      	b.n	8010b18 <rmw_validate_full_topic_name+0x94>
 8010b66:	2205      	movs	r2, #5
 8010b68:	6032      	str	r2, [r6, #0]
 8010b6a:	2d00      	cmp	r5, #0
 8010b6c:	d1d4      	bne.n	8010b18 <rmw_validate_full_topic_name+0x94>
 8010b6e:	e79d      	b.n	8010aac <rmw_validate_full_topic_name+0x28>
 8010b70:	08014f22 	.word	0x08014f22

08010b74 <rmw_validate_namespace_with_size>:
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d031      	beq.n	8010bdc <rmw_validate_namespace_with_size+0x68>
 8010b78:	b570      	push	{r4, r5, r6, lr}
 8010b7a:	4614      	mov	r4, r2
 8010b7c:	b0c2      	sub	sp, #264	@ 0x108
 8010b7e:	b1ba      	cbz	r2, 8010bb0 <rmw_validate_namespace_with_size+0x3c>
 8010b80:	2901      	cmp	r1, #1
 8010b82:	460e      	mov	r6, r1
 8010b84:	461d      	mov	r5, r3
 8010b86:	d102      	bne.n	8010b8e <rmw_validate_namespace_with_size+0x1a>
 8010b88:	7803      	ldrb	r3, [r0, #0]
 8010b8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b8c:	d015      	beq.n	8010bba <rmw_validate_namespace_with_size+0x46>
 8010b8e:	aa01      	add	r2, sp, #4
 8010b90:	4669      	mov	r1, sp
 8010b92:	f7ff ff77 	bl	8010a84 <rmw_validate_full_topic_name>
 8010b96:	b960      	cbnz	r0, 8010bb2 <rmw_validate_namespace_with_size+0x3e>
 8010b98:	9b00      	ldr	r3, [sp, #0]
 8010b9a:	b163      	cbz	r3, 8010bb6 <rmw_validate_namespace_with_size+0x42>
 8010b9c:	2b07      	cmp	r3, #7
 8010b9e:	d00a      	beq.n	8010bb6 <rmw_validate_namespace_with_size+0x42>
 8010ba0:	1e5a      	subs	r2, r3, #1
 8010ba2:	2a05      	cmp	r2, #5
 8010ba4:	d81c      	bhi.n	8010be0 <rmw_validate_namespace_with_size+0x6c>
 8010ba6:	e8df f002 	tbb	[pc, r2]
 8010baa:	0c0c      	.short	0x0c0c
 8010bac:	0c0c0c0c 	.word	0x0c0c0c0c
 8010bb0:	200b      	movs	r0, #11
 8010bb2:	b042      	add	sp, #264	@ 0x108
 8010bb4:	bd70      	pop	{r4, r5, r6, pc}
 8010bb6:	2ef5      	cmp	r6, #245	@ 0xf5
 8010bb8:	d809      	bhi.n	8010bce <rmw_validate_namespace_with_size+0x5a>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	e7f7      	b.n	8010bb2 <rmw_validate_namespace_with_size+0x3e>
 8010bc2:	6023      	str	r3, [r4, #0]
 8010bc4:	2d00      	cmp	r5, #0
 8010bc6:	d0fa      	beq.n	8010bbe <rmw_validate_namespace_with_size+0x4a>
 8010bc8:	9b01      	ldr	r3, [sp, #4]
 8010bca:	602b      	str	r3, [r5, #0]
 8010bcc:	e7f7      	b.n	8010bbe <rmw_validate_namespace_with_size+0x4a>
 8010bce:	2307      	movs	r3, #7
 8010bd0:	6023      	str	r3, [r4, #0]
 8010bd2:	2d00      	cmp	r5, #0
 8010bd4:	d0f3      	beq.n	8010bbe <rmw_validate_namespace_with_size+0x4a>
 8010bd6:	23f4      	movs	r3, #244	@ 0xf4
 8010bd8:	602b      	str	r3, [r5, #0]
 8010bda:	e7f0      	b.n	8010bbe <rmw_validate_namespace_with_size+0x4a>
 8010bdc:	200b      	movs	r0, #11
 8010bde:	4770      	bx	lr
 8010be0:	4a03      	ldr	r2, [pc, #12]	@ (8010bf0 <rmw_validate_namespace_with_size+0x7c>)
 8010be2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010be6:	a802      	add	r0, sp, #8
 8010be8:	f7ff fd04 	bl	80105f4 <rcutils_snprintf>
 8010bec:	2001      	movs	r0, #1
 8010bee:	e7e0      	b.n	8010bb2 <rmw_validate_namespace_with_size+0x3e>
 8010bf0:	080148c0 	.word	0x080148c0

08010bf4 <rmw_validate_namespace>:
 8010bf4:	b168      	cbz	r0, 8010c12 <rmw_validate_namespace+0x1e>
 8010bf6:	b570      	push	{r4, r5, r6, lr}
 8010bf8:	460d      	mov	r5, r1
 8010bfa:	4616      	mov	r6, r2
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	f7ef fb6f 	bl	80002e0 <strlen>
 8010c02:	4633      	mov	r3, r6
 8010c04:	4601      	mov	r1, r0
 8010c06:	462a      	mov	r2, r5
 8010c08:	4620      	mov	r0, r4
 8010c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c0e:	f7ff bfb1 	b.w	8010b74 <rmw_validate_namespace_with_size>
 8010c12:	200b      	movs	r0, #11
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop

08010c18 <rmw_namespace_validation_result_string>:
 8010c18:	2807      	cmp	r0, #7
 8010c1a:	bf9a      	itte	ls
 8010c1c:	4b02      	ldrls	r3, [pc, #8]	@ (8010c28 <rmw_namespace_validation_result_string+0x10>)
 8010c1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010c22:	4802      	ldrhi	r0, [pc, #8]	@ (8010c2c <rmw_namespace_validation_result_string+0x14>)
 8010c24:	4770      	bx	lr
 8010c26:	bf00      	nop
 8010c28:	08014ab8 	.word	0x08014ab8
 8010c2c:	08014910 	.word	0x08014910

08010c30 <rmw_validate_node_name>:
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d037      	beq.n	8010ca4 <rmw_validate_node_name+0x74>
 8010c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c36:	460e      	mov	r6, r1
 8010c38:	2900      	cmp	r1, #0
 8010c3a:	d035      	beq.n	8010ca8 <rmw_validate_node_name+0x78>
 8010c3c:	4617      	mov	r7, r2
 8010c3e:	4604      	mov	r4, r0
 8010c40:	f7ef fb4e 	bl	80002e0 <strlen>
 8010c44:	b1d8      	cbz	r0, 8010c7e <rmw_validate_node_name+0x4e>
 8010c46:	1e63      	subs	r3, r4, #1
 8010c48:	1819      	adds	r1, r3, r0
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010c50:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8010c54:	f02e 0c20 	bic.w	ip, lr, #32
 8010c58:	2d09      	cmp	r5, #9
 8010c5a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010c5e:	d915      	bls.n	8010c8c <rmw_validate_node_name+0x5c>
 8010c60:	f1bc 0f19 	cmp.w	ip, #25
 8010c64:	d912      	bls.n	8010c8c <rmw_validate_node_name+0x5c>
 8010c66:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010c6a:	d00f      	beq.n	8010c8c <rmw_validate_node_name+0x5c>
 8010c6c:	2302      	movs	r3, #2
 8010c6e:	6033      	str	r3, [r6, #0]
 8010c70:	b11f      	cbz	r7, 8010c7a <rmw_validate_node_name+0x4a>
 8010c72:	f1c4 0401 	rsb	r4, r4, #1
 8010c76:	4414      	add	r4, r2
 8010c78:	603c      	str	r4, [r7, #0]
 8010c7a:	2000      	movs	r0, #0
 8010c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c7e:	2301      	movs	r3, #1
 8010c80:	6033      	str	r3, [r6, #0]
 8010c82:	2f00      	cmp	r7, #0
 8010c84:	d0f9      	beq.n	8010c7a <rmw_validate_node_name+0x4a>
 8010c86:	2300      	movs	r3, #0
 8010c88:	603b      	str	r3, [r7, #0]
 8010c8a:	e7f6      	b.n	8010c7a <rmw_validate_node_name+0x4a>
 8010c8c:	4299      	cmp	r1, r3
 8010c8e:	d1dc      	bne.n	8010c4a <rmw_validate_node_name+0x1a>
 8010c90:	7823      	ldrb	r3, [r4, #0]
 8010c92:	4a0c      	ldr	r2, [pc, #48]	@ (8010cc4 <rmw_validate_node_name+0x94>)
 8010c94:	5cd3      	ldrb	r3, [r2, r3]
 8010c96:	f013 0304 	ands.w	r3, r3, #4
 8010c9a:	d10e      	bne.n	8010cba <rmw_validate_node_name+0x8a>
 8010c9c:	28ff      	cmp	r0, #255	@ 0xff
 8010c9e:	d805      	bhi.n	8010cac <rmw_validate_node_name+0x7c>
 8010ca0:	6033      	str	r3, [r6, #0]
 8010ca2:	e7ea      	b.n	8010c7a <rmw_validate_node_name+0x4a>
 8010ca4:	200b      	movs	r0, #11
 8010ca6:	4770      	bx	lr
 8010ca8:	200b      	movs	r0, #11
 8010caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cac:	2304      	movs	r3, #4
 8010cae:	6033      	str	r3, [r6, #0]
 8010cb0:	2f00      	cmp	r7, #0
 8010cb2:	d0e2      	beq.n	8010c7a <rmw_validate_node_name+0x4a>
 8010cb4:	23fe      	movs	r3, #254	@ 0xfe
 8010cb6:	603b      	str	r3, [r7, #0]
 8010cb8:	e7df      	b.n	8010c7a <rmw_validate_node_name+0x4a>
 8010cba:	2303      	movs	r3, #3
 8010cbc:	6033      	str	r3, [r6, #0]
 8010cbe:	2f00      	cmp	r7, #0
 8010cc0:	d1e1      	bne.n	8010c86 <rmw_validate_node_name+0x56>
 8010cc2:	e7da      	b.n	8010c7a <rmw_validate_node_name+0x4a>
 8010cc4:	08014f22 	.word	0x08014f22

08010cc8 <rmw_node_name_validation_result_string>:
 8010cc8:	2804      	cmp	r0, #4
 8010cca:	bf9a      	itte	ls
 8010ccc:	4b02      	ldrls	r3, [pc, #8]	@ (8010cd8 <rmw_node_name_validation_result_string+0x10>)
 8010cce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010cd2:	4802      	ldrhi	r0, [pc, #8]	@ (8010cdc <rmw_node_name_validation_result_string+0x14>)
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop
 8010cd8:	08014bc4 	.word	0x08014bc4
 8010cdc:	08014ad8 	.word	0x08014ad8

08010ce0 <on_status>:
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	b002      	add	sp, #8
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <on_topic>:
 8010ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cec:	4a22      	ldr	r2, [pc, #136]	@ (8010d78 <on_topic+0x90>)
 8010cee:	b094      	sub	sp, #80	@ 0x50
 8010cf0:	6812      	ldr	r2, [r2, #0]
 8010cf2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8010cf4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010cf8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8010cfc:	b3c2      	cbz	r2, 8010d70 <on_topic+0x88>
 8010cfe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8010d02:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8010d06:	e001      	b.n	8010d0c <on_topic+0x24>
 8010d08:	6852      	ldr	r2, [r2, #4]
 8010d0a:	b38a      	cbz	r2, 8010d70 <on_topic+0x88>
 8010d0c:	6894      	ldr	r4, [r2, #8]
 8010d0e:	8aa3      	ldrh	r3, [r4, #20]
 8010d10:	428b      	cmp	r3, r1
 8010d12:	d1f9      	bne.n	8010d08 <on_topic+0x20>
 8010d14:	7da3      	ldrb	r3, [r4, #22]
 8010d16:	4283      	cmp	r3, r0
 8010d18:	d1f6      	bne.n	8010d08 <on_topic+0x20>
 8010d1a:	2248      	movs	r2, #72	@ 0x48
 8010d1c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010d20:	4668      	mov	r0, sp
 8010d22:	f002 fafa 	bl	801331a <memcpy>
 8010d26:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8010d2a:	cb0c      	ldmia	r3, {r2, r3}
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f7f9 fbf3 	bl	800a518 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010d32:	4607      	mov	r7, r0
 8010d34:	b1e0      	cbz	r0, 8010d70 <on_topic+0x88>
 8010d36:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8010d3a:	4632      	mov	r2, r6
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	f108 0110 	add.w	r1, r8, #16
 8010d42:	f7fa f81f 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 8010d46:	b930      	cbnz	r0, 8010d56 <on_topic+0x6e>
 8010d48:	480c      	ldr	r0, [pc, #48]	@ (8010d7c <on_topic+0x94>)
 8010d4a:	4639      	mov	r1, r7
 8010d4c:	b014      	add	sp, #80	@ 0x50
 8010d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d52:	f000 b8bd 	b.w	8010ed0 <put_memory>
 8010d56:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8010d5a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8010d5e:	f7f9 f9d9 	bl	800a114 <rmw_uros_epoch_nanos>
 8010d62:	2305      	movs	r3, #5
 8010d64:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8010d68:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010d6c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8010d70:	b014      	add	sp, #80	@ 0x50
 8010d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d76:	bf00      	nop
 8010d78:	2000eaf8 	.word	0x2000eaf8
 8010d7c:	2000e348 	.word	0x2000e348

08010d80 <on_request>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	4823      	ldr	r0, [pc, #140]	@ (8010e14 <on_request+0x94>)
 8010d86:	b094      	sub	sp, #80	@ 0x50
 8010d88:	6800      	ldr	r0, [r0, #0]
 8010d8a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010d8c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010d90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d03b      	beq.n	8010e0e <on_request+0x8e>
 8010d96:	461d      	mov	r5, r3
 8010d98:	e001      	b.n	8010d9e <on_request+0x1e>
 8010d9a:	6840      	ldr	r0, [r0, #4]
 8010d9c:	b3b8      	cbz	r0, 8010e0e <on_request+0x8e>
 8010d9e:	6884      	ldr	r4, [r0, #8]
 8010da0:	8b21      	ldrh	r1, [r4, #24]
 8010da2:	4291      	cmp	r1, r2
 8010da4:	d1f9      	bne.n	8010d9a <on_request+0x1a>
 8010da6:	2248      	movs	r2, #72	@ 0x48
 8010da8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010dac:	4668      	mov	r0, sp
 8010dae:	f002 fab4 	bl	801331a <memcpy>
 8010db2:	f104 0320 	add.w	r3, r4, #32
 8010db6:	cb0c      	ldmia	r3, {r2, r3}
 8010db8:	4620      	mov	r0, r4
 8010dba:	f7f9 fbad 	bl	800a518 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010dbe:	4680      	mov	r8, r0
 8010dc0:	b328      	cbz	r0, 8010e0e <on_request+0x8e>
 8010dc2:	4638      	mov	r0, r7
 8010dc4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010dc8:	4632      	mov	r2, r6
 8010dca:	f107 0110 	add.w	r1, r7, #16
 8010dce:	f7f9 ffd9 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 8010dd2:	b930      	cbnz	r0, 8010de2 <on_request+0x62>
 8010dd4:	4810      	ldr	r0, [pc, #64]	@ (8010e18 <on_request+0x98>)
 8010dd6:	4641      	mov	r1, r8
 8010dd8:	b014      	add	sp, #80	@ 0x50
 8010dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dde:	f000 b877 	b.w	8010ed0 <put_memory>
 8010de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010de4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8010de8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8010dec:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010df0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010df4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010df8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010dfc:	f7f9 f98a 	bl	800a114 <rmw_uros_epoch_nanos>
 8010e00:	2303      	movs	r3, #3
 8010e02:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8010e06:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010e0a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8010e0e:	b014      	add	sp, #80	@ 0x50
 8010e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e14:	2000e6b0 	.word	0x2000e6b0
 8010e18:	2000e348 	.word	0x2000e348

08010e1c <on_reply>:
 8010e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	4821      	ldr	r0, [pc, #132]	@ (8010ea8 <on_reply+0x8c>)
 8010e22:	b094      	sub	sp, #80	@ 0x50
 8010e24:	6800      	ldr	r0, [r0, #0]
 8010e26:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010e28:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010e2c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010e2e:	b3b8      	cbz	r0, 8010ea0 <on_reply+0x84>
 8010e30:	461d      	mov	r5, r3
 8010e32:	e001      	b.n	8010e38 <on_reply+0x1c>
 8010e34:	6840      	ldr	r0, [r0, #4]
 8010e36:	b398      	cbz	r0, 8010ea0 <on_reply+0x84>
 8010e38:	6884      	ldr	r4, [r0, #8]
 8010e3a:	8b21      	ldrh	r1, [r4, #24]
 8010e3c:	4291      	cmp	r1, r2
 8010e3e:	d1f9      	bne.n	8010e34 <on_reply+0x18>
 8010e40:	2248      	movs	r2, #72	@ 0x48
 8010e42:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010e46:	4668      	mov	r0, sp
 8010e48:	f002 fa67 	bl	801331a <memcpy>
 8010e4c:	f104 0320 	add.w	r3, r4, #32
 8010e50:	cb0c      	ldmia	r3, {r2, r3}
 8010e52:	4620      	mov	r0, r4
 8010e54:	f7f9 fb60 	bl	800a518 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010e58:	4680      	mov	r8, r0
 8010e5a:	b308      	cbz	r0, 8010ea0 <on_reply+0x84>
 8010e5c:	4638      	mov	r0, r7
 8010e5e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010e62:	4632      	mov	r2, r6
 8010e64:	f107 0110 	add.w	r1, r7, #16
 8010e68:	f7f9 ff8c 	bl	800ad84 <ucdr_deserialize_array_uint8_t>
 8010e6c:	b930      	cbnz	r0, 8010e7c <on_reply+0x60>
 8010e6e:	480f      	ldr	r0, [pc, #60]	@ (8010eac <on_reply+0x90>)
 8010e70:	4641      	mov	r1, r8
 8010e72:	b014      	add	sp, #80	@ 0x50
 8010e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e78:	f000 b82a 	b.w	8010ed0 <put_memory>
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8010e82:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8010e86:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010e8a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8010e8e:	f7f9 f941 	bl	800a114 <rmw_uros_epoch_nanos>
 8010e92:	2304      	movs	r3, #4
 8010e94:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8010e98:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010e9c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8010ea0:	b014      	add	sp, #80	@ 0x50
 8010ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea6:	bf00      	nop
 8010ea8:	2000e5d8 	.word	0x2000e5d8
 8010eac:	2000e348 	.word	0x2000e348

08010eb0 <get_memory>:
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	6840      	ldr	r0, [r0, #4]
 8010eb4:	b158      	cbz	r0, 8010ece <get_memory+0x1e>
 8010eb6:	6842      	ldr	r2, [r0, #4]
 8010eb8:	605a      	str	r2, [r3, #4]
 8010eba:	b10a      	cbz	r2, 8010ec0 <get_memory+0x10>
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	6011      	str	r1, [r2, #0]
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	6042      	str	r2, [r0, #4]
 8010ec4:	b102      	cbz	r2, 8010ec8 <get_memory+0x18>
 8010ec6:	6010      	str	r0, [r2, #0]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	6002      	str	r2, [r0, #0]
 8010ecc:	6018      	str	r0, [r3, #0]
 8010ece:	4770      	bx	lr

08010ed0 <put_memory>:
 8010ed0:	680b      	ldr	r3, [r1, #0]
 8010ed2:	b10b      	cbz	r3, 8010ed8 <put_memory+0x8>
 8010ed4:	684a      	ldr	r2, [r1, #4]
 8010ed6:	605a      	str	r2, [r3, #4]
 8010ed8:	684a      	ldr	r2, [r1, #4]
 8010eda:	b102      	cbz	r2, 8010ede <put_memory+0xe>
 8010edc:	6013      	str	r3, [r2, #0]
 8010ede:	6803      	ldr	r3, [r0, #0]
 8010ee0:	428b      	cmp	r3, r1
 8010ee2:	6843      	ldr	r3, [r0, #4]
 8010ee4:	bf08      	it	eq
 8010ee6:	6002      	streq	r2, [r0, #0]
 8010ee8:	604b      	str	r3, [r1, #4]
 8010eea:	b103      	cbz	r3, 8010eee <put_memory+0x1e>
 8010eec:	6019      	str	r1, [r3, #0]
 8010eee:	2300      	movs	r3, #0
 8010ef0:	600b      	str	r3, [r1, #0]
 8010ef2:	6041      	str	r1, [r0, #4]
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop

08010ef8 <rmw_destroy_client>:
 8010ef8:	b570      	push	{r4, r5, r6, lr}
 8010efa:	b128      	cbz	r0, 8010f08 <rmw_destroy_client+0x10>
 8010efc:	4604      	mov	r4, r0
 8010efe:	6800      	ldr	r0, [r0, #0]
 8010f00:	460d      	mov	r5, r1
 8010f02:	f7f9 fbe7 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8010f06:	b910      	cbnz	r0, 8010f0e <rmw_destroy_client+0x16>
 8010f08:	2401      	movs	r4, #1
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	bd70      	pop	{r4, r5, r6, pc}
 8010f0e:	6863      	ldr	r3, [r4, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d0f9      	beq.n	8010f08 <rmw_destroy_client+0x10>
 8010f14:	2d00      	cmp	r5, #0
 8010f16:	d0f7      	beq.n	8010f08 <rmw_destroy_client+0x10>
 8010f18:	6828      	ldr	r0, [r5, #0]
 8010f1a:	f7f9 fbdb 	bl	800a6d4 <is_uxrce_rmw_identifier_valid>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d0f2      	beq.n	8010f08 <rmw_destroy_client+0x10>
 8010f22:	686e      	ldr	r6, [r5, #4]
 8010f24:	2e00      	cmp	r6, #0
 8010f26:	d0ef      	beq.n	8010f08 <rmw_destroy_client+0x10>
 8010f28:	6864      	ldr	r4, [r4, #4]
 8010f2a:	6932      	ldr	r2, [r6, #16]
 8010f2c:	6920      	ldr	r0, [r4, #16]
 8010f2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010f32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f36:	6819      	ldr	r1, [r3, #0]
 8010f38:	f7fb fb78 	bl	800c62c <uxr_buffer_cancel_data>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	6920      	ldr	r0, [r4, #16]
 8010f40:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010f44:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010f48:	f7f9 fb3e 	bl	800a5c8 <run_xrce_session>
 8010f4c:	6920      	ldr	r0, [r4, #16]
 8010f4e:	6932      	ldr	r2, [r6, #16]
 8010f50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010f54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f58:	6819      	ldr	r1, [r3, #0]
 8010f5a:	f7fb f935 	bl	800c1c8 <uxr_buffer_delete_entity>
 8010f5e:	4602      	mov	r2, r0
 8010f60:	6920      	ldr	r0, [r4, #16]
 8010f62:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010f66:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010f6a:	f7f9 fb2d 	bl	800a5c8 <run_xrce_session>
 8010f6e:	f080 0401 	eor.w	r4, r0, #1
 8010f72:	b2e4      	uxtb	r4, r4
 8010f74:	4628      	mov	r0, r5
 8010f76:	0064      	lsls	r4, r4, #1
 8010f78:	f7f9 faac 	bl	800a4d4 <rmw_uxrce_fini_client_memory>
 8010f7c:	e7c5      	b.n	8010f0a <rmw_destroy_client+0x12>
 8010f7e:	bf00      	nop

08010f80 <rmw_get_implementation_identifier>:
 8010f80:	4b01      	ldr	r3, [pc, #4]	@ (8010f88 <rmw_get_implementation_identifier+0x8>)
 8010f82:	6818      	ldr	r0, [r3, #0]
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop
 8010f88:	08014bf0 	.word	0x08014bf0

08010f8c <create_topic>:
 8010f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f90:	4604      	mov	r4, r0
 8010f92:	b084      	sub	sp, #16
 8010f94:	4824      	ldr	r0, [pc, #144]	@ (8011028 <create_topic+0x9c>)
 8010f96:	460f      	mov	r7, r1
 8010f98:	4616      	mov	r6, r2
 8010f9a:	f7ff ff89 	bl	8010eb0 <get_memory>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d03c      	beq.n	801101c <create_topic+0x90>
 8010fa2:	6923      	ldr	r3, [r4, #16]
 8010fa4:	6885      	ldr	r5, [r0, #8]
 8010fa6:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8011030 <create_topic+0xa4>
 8010faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010fae:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8010fb2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8010fb6:	1c42      	adds	r2, r0, #1
 8010fb8:	2102      	movs	r1, #2
 8010fba:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8010fbe:	f7fb fb07 	bl	800c5d0 <uxr_object_id>
 8010fc2:	223c      	movs	r2, #60	@ 0x3c
 8010fc4:	6128      	str	r0, [r5, #16]
 8010fc6:	4641      	mov	r1, r8
 8010fc8:	4638      	mov	r0, r7
 8010fca:	f7f9 fb69 	bl	800a6a0 <generate_topic_name>
 8010fce:	b310      	cbz	r0, 8011016 <create_topic+0x8a>
 8010fd0:	4f16      	ldr	r7, [pc, #88]	@ (801102c <create_topic+0xa0>)
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	2264      	movs	r2, #100	@ 0x64
 8010fd6:	4639      	mov	r1, r7
 8010fd8:	f7f9 fb32 	bl	800a640 <generate_type_name>
 8010fdc:	b1d8      	cbz	r0, 8011016 <create_topic+0x8a>
 8010fde:	6920      	ldr	r0, [r4, #16]
 8010fe0:	2306      	movs	r3, #6
 8010fe2:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010fe6:	f8cd 8000 	str.w	r8, [sp]
 8010fea:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010fee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010ff2:	6811      	ldr	r1, [r2, #0]
 8010ff4:	6963      	ldr	r3, [r4, #20]
 8010ff6:	692a      	ldr	r2, [r5, #16]
 8010ff8:	f7fb f962 	bl	800c2c0 <uxr_buffer_create_topic_bin>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	6920      	ldr	r0, [r4, #16]
 8011000:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011004:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011008:	f7f9 fade 	bl	800a5c8 <run_xrce_session>
 801100c:	b118      	cbz	r0, 8011016 <create_topic+0x8a>
 801100e:	4628      	mov	r0, r5
 8011010:	b004      	add	sp, #16
 8011012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011016:	4628      	mov	r0, r5
 8011018:	f7f9 fa72 	bl	800a500 <rmw_uxrce_fini_topic_memory>
 801101c:	2500      	movs	r5, #0
 801101e:	4628      	mov	r0, r5
 8011020:	b004      	add	sp, #16
 8011022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011026:	bf00      	nop
 8011028:	2000e4fc 	.word	0x2000e4fc
 801102c:	20010ab0 	.word	0x20010ab0
 8011030:	20010b14 	.word	0x20010b14

08011034 <destroy_topic>:
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	6984      	ldr	r4, [r0, #24]
 8011038:	b1d4      	cbz	r4, 8011070 <destroy_topic+0x3c>
 801103a:	4605      	mov	r5, r0
 801103c:	6920      	ldr	r0, [r4, #16]
 801103e:	692a      	ldr	r2, [r5, #16]
 8011040:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011044:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011048:	6819      	ldr	r1, [r3, #0]
 801104a:	f7fb f8bd 	bl	800c1c8 <uxr_buffer_delete_entity>
 801104e:	4602      	mov	r2, r0
 8011050:	6920      	ldr	r0, [r4, #16]
 8011052:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011056:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801105a:	f7f9 fab5 	bl	800a5c8 <run_xrce_session>
 801105e:	f080 0401 	eor.w	r4, r0, #1
 8011062:	b2e4      	uxtb	r4, r4
 8011064:	4628      	mov	r0, r5
 8011066:	0064      	lsls	r4, r4, #1
 8011068:	f7f9 fa4a 	bl	800a500 <rmw_uxrce_fini_topic_memory>
 801106c:	4620      	mov	r0, r4
 801106e:	bd38      	pop	{r3, r4, r5, pc}
 8011070:	2401      	movs	r4, #1
 8011072:	4620      	mov	r0, r4
 8011074:	bd38      	pop	{r3, r4, r5, pc}
 8011076:	bf00      	nop

08011078 <std_msgs__msg__Header__get_type_hash>:
 8011078:	4800      	ldr	r0, [pc, #0]	@ (801107c <std_msgs__msg__Header__get_type_hash+0x4>)
 801107a:	4770      	bx	lr
 801107c:	200008b4 	.word	0x200008b4

08011080 <std_msgs__msg__Header__get_type_description>:
 8011080:	b510      	push	{r4, lr}
 8011082:	4c08      	ldr	r4, [pc, #32]	@ (80110a4 <std_msgs__msg__Header__get_type_description+0x24>)
 8011084:	7820      	ldrb	r0, [r4, #0]
 8011086:	b108      	cbz	r0, 801108c <std_msgs__msg__Header__get_type_description+0xc>
 8011088:	4807      	ldr	r0, [pc, #28]	@ (80110a8 <std_msgs__msg__Header__get_type_description+0x28>)
 801108a:	bd10      	pop	{r4, pc}
 801108c:	f7f9 fd0c 	bl	800aaa8 <builtin_interfaces__msg__Time__get_type_description>
 8011090:	300c      	adds	r0, #12
 8011092:	c807      	ldmia	r0, {r0, r1, r2}
 8011094:	4b05      	ldr	r3, [pc, #20]	@ (80110ac <std_msgs__msg__Header__get_type_description+0x2c>)
 8011096:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801109a:	2301      	movs	r3, #1
 801109c:	4802      	ldr	r0, [pc, #8]	@ (80110a8 <std_msgs__msg__Header__get_type_description+0x28>)
 801109e:	7023      	strb	r3, [r4, #0]
 80110a0:	bd10      	pop	{r4, pc}
 80110a2:	bf00      	nop
 80110a4:	20010b99 	.word	0x20010b99
 80110a8:	08014c24 	.word	0x08014c24
 80110ac:	20000a2c 	.word	0x20000a2c

080110b0 <std_msgs__msg__Header__get_individual_type_description_source>:
 80110b0:	4800      	ldr	r0, [pc, #0]	@ (80110b4 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 80110b2:	4770      	bx	lr
 80110b4:	08014c00 	.word	0x08014c00

080110b8 <std_msgs__msg__Header__get_type_description_sources>:
 80110b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ba:	4e0f      	ldr	r6, [pc, #60]	@ (80110f8 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 80110bc:	7837      	ldrb	r7, [r6, #0]
 80110be:	b10f      	cbz	r7, 80110c4 <std_msgs__msg__Header__get_type_description_sources+0xc>
 80110c0:	480e      	ldr	r0, [pc, #56]	@ (80110fc <std_msgs__msg__Header__get_type_description_sources+0x44>)
 80110c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c4:	4d0e      	ldr	r5, [pc, #56]	@ (8011100 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 80110c6:	4c0f      	ldr	r4, [pc, #60]	@ (8011104 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 80110c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110d0:	682b      	ldr	r3, [r5, #0]
 80110d2:	f844 3b04 	str.w	r3, [r4], #4
 80110d6:	4638      	mov	r0, r7
 80110d8:	f7f9 fcf2 	bl	800aac0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80110dc:	2301      	movs	r3, #1
 80110de:	4684      	mov	ip, r0
 80110e0:	7033      	strb	r3, [r6, #0]
 80110e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110ee:	f8dc 3000 	ldr.w	r3, [ip]
 80110f2:	4802      	ldr	r0, [pc, #8]	@ (80110fc <std_msgs__msg__Header__get_type_description_sources+0x44>)
 80110f4:	6023      	str	r3, [r4, #0]
 80110f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f8:	20010b98 	.word	0x20010b98
 80110fc:	08014bf4 	.word	0x08014bf4
 8011100:	08014c00 	.word	0x08014c00
 8011104:	20010b50 	.word	0x20010b50

08011108 <std_msgs__msg__Header__init>:
 8011108:	b1d8      	cbz	r0, 8011142 <std_msgs__msg__Header__init+0x3a>
 801110a:	b538      	push	{r3, r4, r5, lr}
 801110c:	4604      	mov	r4, r0
 801110e:	f000 f827 	bl	8011160 <builtin_interfaces__msg__Time__init>
 8011112:	b130      	cbz	r0, 8011122 <std_msgs__msg__Header__init+0x1a>
 8011114:	f104 0508 	add.w	r5, r4, #8
 8011118:	4628      	mov	r0, r5
 801111a:	f001 faab 	bl	8012674 <rosidl_runtime_c__String__init>
 801111e:	b148      	cbz	r0, 8011134 <std_msgs__msg__Header__init+0x2c>
 8011120:	bd38      	pop	{r3, r4, r5, pc}
 8011122:	4620      	mov	r0, r4
 8011124:	f000 f820 	bl	8011168 <builtin_interfaces__msg__Time__fini>
 8011128:	f104 0008 	add.w	r0, r4, #8
 801112c:	f001 fabc 	bl	80126a8 <rosidl_runtime_c__String__fini>
 8011130:	2000      	movs	r0, #0
 8011132:	bd38      	pop	{r3, r4, r5, pc}
 8011134:	4620      	mov	r0, r4
 8011136:	f000 f817 	bl	8011168 <builtin_interfaces__msg__Time__fini>
 801113a:	4628      	mov	r0, r5
 801113c:	f001 fab4 	bl	80126a8 <rosidl_runtime_c__String__fini>
 8011140:	e7f6      	b.n	8011130 <std_msgs__msg__Header__init+0x28>
 8011142:	2000      	movs	r0, #0
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop

08011148 <std_msgs__msg__Header__fini>:
 8011148:	b148      	cbz	r0, 801115e <std_msgs__msg__Header__fini+0x16>
 801114a:	b510      	push	{r4, lr}
 801114c:	4604      	mov	r4, r0
 801114e:	f000 f80b 	bl	8011168 <builtin_interfaces__msg__Time__fini>
 8011152:	f104 0008 	add.w	r0, r4, #8
 8011156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801115a:	f001 baa5 	b.w	80126a8 <rosidl_runtime_c__String__fini>
 801115e:	4770      	bx	lr

08011160 <builtin_interfaces__msg__Time__init>:
 8011160:	3800      	subs	r0, #0
 8011162:	bf18      	it	ne
 8011164:	2001      	movne	r0, #1
 8011166:	4770      	bx	lr

08011168 <builtin_interfaces__msg__Time__fini>:
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <ucdr_serialize_string>:
 801116c:	b538      	push	{r3, r4, r5, lr}
 801116e:	4605      	mov	r5, r0
 8011170:	4608      	mov	r0, r1
 8011172:	460c      	mov	r4, r1
 8011174:	f7ef f8b4 	bl	80002e0 <strlen>
 8011178:	4621      	mov	r1, r4
 801117a:	1c42      	adds	r2, r0, #1
 801117c:	4628      	mov	r0, r5
 801117e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011182:	f7f7 be3f 	b.w	8008e04 <ucdr_serialize_sequence_char>
 8011186:	bf00      	nop

08011188 <ucdr_deserialize_string>:
 8011188:	b500      	push	{lr}
 801118a:	b083      	sub	sp, #12
 801118c:	ab01      	add	r3, sp, #4
 801118e:	f7f7 fe4b 	bl	8008e28 <ucdr_deserialize_sequence_char>
 8011192:	b003      	add	sp, #12
 8011194:	f85d fb04 	ldr.w	pc, [sp], #4

08011198 <uxr_init_input_best_effort_stream>:
 8011198:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801119c:	8003      	strh	r3, [r0, #0]
 801119e:	4770      	bx	lr

080111a0 <uxr_reset_input_best_effort_stream>:
 80111a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80111a4:	8003      	strh	r3, [r0, #0]
 80111a6:	4770      	bx	lr

080111a8 <uxr_receive_best_effort_message>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4604      	mov	r4, r0
 80111ac:	8800      	ldrh	r0, [r0, #0]
 80111ae:	460d      	mov	r5, r1
 80111b0:	f000 fd28 	bl	8011c04 <uxr_seq_num_cmp>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80111bc:	bfb8      	it	lt
 80111be:	8025      	strhlt	r5, [r4, #0]
 80111c0:	bd38      	pop	{r3, r4, r5, pc}
 80111c2:	bf00      	nop

080111c4 <on_full_input_buffer>:
 80111c4:	b570      	push	{r4, r5, r6, lr}
 80111c6:	4605      	mov	r5, r0
 80111c8:	460c      	mov	r4, r1
 80111ca:	682b      	ldr	r3, [r5, #0]
 80111cc:	6809      	ldr	r1, [r1, #0]
 80111ce:	8920      	ldrh	r0, [r4, #8]
 80111d0:	6862      	ldr	r2, [r4, #4]
 80111d2:	fbb2 f2f0 	udiv	r2, r2, r0
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80111dc:	3301      	adds	r3, #1
 80111de:	b29b      	uxth	r3, r3
 80111e0:	fbb3 f6f0 	udiv	r6, r3, r0
 80111e4:	fb00 3316 	mls	r3, r0, r6, r3
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	fb02 f303 	mul.w	r3, r2, r3
 80111ee:	1d18      	adds	r0, r3, #4
 80111f0:	4408      	add	r0, r1
 80111f2:	7d26      	ldrb	r6, [r4, #20]
 80111f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80111f8:	b116      	cbz	r6, 8011200 <on_full_input_buffer+0x3c>
 80111fa:	2600      	movs	r6, #0
 80111fc:	f840 6c04 	str.w	r6, [r0, #-4]
 8011200:	2a03      	cmp	r2, #3
 8011202:	d801      	bhi.n	8011208 <on_full_input_buffer+0x44>
 8011204:	2001      	movs	r0, #1
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	3308      	adds	r3, #8
 801120a:	4419      	add	r1, r3
 801120c:	4628      	mov	r0, r5
 801120e:	692b      	ldr	r3, [r5, #16]
 8011210:	3a04      	subs	r2, #4
 8011212:	f7f7 fd7f 	bl	8008d14 <ucdr_init_buffer_origin>
 8011216:	4628      	mov	r0, r5
 8011218:	4902      	ldr	r1, [pc, #8]	@ (8011224 <on_full_input_buffer+0x60>)
 801121a:	4622      	mov	r2, r4
 801121c:	f7f7 fd56 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 8011220:	2000      	movs	r0, #0
 8011222:	bd70      	pop	{r4, r5, r6, pc}
 8011224:	080111c5 	.word	0x080111c5

08011228 <uxr_init_input_reliable_stream>:
 8011228:	b500      	push	{lr}
 801122a:	e9c0 1200 	strd	r1, r2, [r0]
 801122e:	f04f 0e00 	mov.w	lr, #0
 8011232:	9a01      	ldr	r2, [sp, #4]
 8011234:	8103      	strh	r3, [r0, #8]
 8011236:	6102      	str	r2, [r0, #16]
 8011238:	f880 e014 	strb.w	lr, [r0, #20]
 801123c:	b1d3      	cbz	r3, 8011274 <uxr_init_input_reliable_stream+0x4c>
 801123e:	f8c1 e000 	str.w	lr, [r1]
 8011242:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011246:	f1bc 0f01 	cmp.w	ip, #1
 801124a:	d913      	bls.n	8011274 <uxr_init_input_reliable_stream+0x4c>
 801124c:	2301      	movs	r3, #1
 801124e:	fbb3 f1fc 	udiv	r1, r3, ip
 8011252:	fb0c 3111 	mls	r1, ip, r1, r3
 8011256:	b289      	uxth	r1, r1
 8011258:	6842      	ldr	r2, [r0, #4]
 801125a:	fbb2 f2fc 	udiv	r2, r2, ip
 801125e:	fb01 f202 	mul.w	r2, r1, r2
 8011262:	6801      	ldr	r1, [r0, #0]
 8011264:	f841 e002 	str.w	lr, [r1, r2]
 8011268:	3301      	adds	r3, #1
 801126a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801126e:	b29b      	uxth	r3, r3
 8011270:	459c      	cmp	ip, r3
 8011272:	d8ec      	bhi.n	801124e <uxr_init_input_reliable_stream+0x26>
 8011274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011278:	60c3      	str	r3, [r0, #12]
 801127a:	f85d fb04 	ldr.w	pc, [sp], #4
 801127e:	bf00      	nop

08011280 <uxr_reset_input_reliable_stream>:
 8011280:	8901      	ldrh	r1, [r0, #8]
 8011282:	b1e9      	cbz	r1, 80112c0 <uxr_reset_input_reliable_stream+0x40>
 8011284:	f04f 0c00 	mov.w	ip, #0
 8011288:	b500      	push	{lr}
 801128a:	4663      	mov	r3, ip
 801128c:	46e6      	mov	lr, ip
 801128e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011292:	fb01 3312 	mls	r3, r1, r2, r3
 8011296:	b29b      	uxth	r3, r3
 8011298:	6842      	ldr	r2, [r0, #4]
 801129a:	fbb2 f2f1 	udiv	r2, r2, r1
 801129e:	fb03 f202 	mul.w	r2, r3, r2
 80112a2:	6803      	ldr	r3, [r0, #0]
 80112a4:	f843 e002 	str.w	lr, [r3, r2]
 80112a8:	f10c 0c01 	add.w	ip, ip, #1
 80112ac:	8901      	ldrh	r1, [r0, #8]
 80112ae:	fa1f f38c 	uxth.w	r3, ip
 80112b2:	4299      	cmp	r1, r3
 80112b4:	d8eb      	bhi.n	801128e <uxr_reset_input_reliable_stream+0xe>
 80112b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80112ba:	60c3      	str	r3, [r0, #12]
 80112bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80112c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80112c4:	60c3      	str	r3, [r0, #12]
 80112c6:	4770      	bx	lr

080112c8 <uxr_receive_reliable_message>:
 80112c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112cc:	4604      	mov	r4, r0
 80112ce:	460d      	mov	r5, r1
 80112d0:	8901      	ldrh	r1, [r0, #8]
 80112d2:	8980      	ldrh	r0, [r0, #12]
 80112d4:	4690      	mov	r8, r2
 80112d6:	461f      	mov	r7, r3
 80112d8:	f000 fc8c 	bl	8011bf4 <uxr_seq_num_add>
 80112dc:	4629      	mov	r1, r5
 80112de:	4606      	mov	r6, r0
 80112e0:	89a0      	ldrh	r0, [r4, #12]
 80112e2:	f000 fc8f 	bl	8011c04 <uxr_seq_num_cmp>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	db0a      	blt.n	8011300 <uxr_receive_reliable_message+0x38>
 80112ea:	2600      	movs	r6, #0
 80112ec:	89e0      	ldrh	r0, [r4, #14]
 80112ee:	4629      	mov	r1, r5
 80112f0:	f000 fc88 	bl	8011c04 <uxr_seq_num_cmp>
 80112f4:	2800      	cmp	r0, #0
 80112f6:	bfb8      	it	lt
 80112f8:	81e5      	strhlt	r5, [r4, #14]
 80112fa:	4630      	mov	r0, r6
 80112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011300:	4630      	mov	r0, r6
 8011302:	4629      	mov	r1, r5
 8011304:	f000 fc7e 	bl	8011c04 <uxr_seq_num_cmp>
 8011308:	2800      	cmp	r0, #0
 801130a:	dbee      	blt.n	80112ea <uxr_receive_reliable_message+0x22>
 801130c:	6923      	ldr	r3, [r4, #16]
 801130e:	4640      	mov	r0, r8
 8011310:	4798      	blx	r3
 8011312:	2101      	movs	r1, #1
 8011314:	4606      	mov	r6, r0
 8011316:	89a0      	ldrh	r0, [r4, #12]
 8011318:	f000 fc6c 	bl	8011bf4 <uxr_seq_num_add>
 801131c:	b90e      	cbnz	r6, 8011322 <uxr_receive_reliable_message+0x5a>
 801131e:	4285      	cmp	r5, r0
 8011320:	d046      	beq.n	80113b0 <uxr_receive_reliable_message+0xe8>
 8011322:	8921      	ldrh	r1, [r4, #8]
 8011324:	fbb5 f2f1 	udiv	r2, r5, r1
 8011328:	fb01 5212 	mls	r2, r1, r2, r5
 801132c:	b292      	uxth	r2, r2
 801132e:	6863      	ldr	r3, [r4, #4]
 8011330:	6820      	ldr	r0, [r4, #0]
 8011332:	fbb3 f3f1 	udiv	r3, r3, r1
 8011336:	fb02 f303 	mul.w	r3, r2, r3
 801133a:	3304      	adds	r3, #4
 801133c:	4418      	add	r0, r3
 801133e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1d1      	bne.n	80112ea <uxr_receive_reliable_message+0x22>
 8011346:	4641      	mov	r1, r8
 8011348:	463a      	mov	r2, r7
 801134a:	f001 ffe6 	bl	801331a <memcpy>
 801134e:	8921      	ldrh	r1, [r4, #8]
 8011350:	fbb5 f2f1 	udiv	r2, r5, r1
 8011354:	fb01 5212 	mls	r2, r1, r2, r5
 8011358:	b292      	uxth	r2, r2
 801135a:	6863      	ldr	r3, [r4, #4]
 801135c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011360:	fb02 f303 	mul.w	r3, r2, r3
 8011364:	6822      	ldr	r2, [r4, #0]
 8011366:	50d7      	str	r7, [r2, r3]
 8011368:	9a06      	ldr	r2, [sp, #24]
 801136a:	2301      	movs	r3, #1
 801136c:	7013      	strb	r3, [r2, #0]
 801136e:	2e00      	cmp	r6, #0
 8011370:	d0bb      	beq.n	80112ea <uxr_receive_reliable_message+0x22>
 8011372:	89a6      	ldrh	r6, [r4, #12]
 8011374:	2101      	movs	r1, #1
 8011376:	4630      	mov	r0, r6
 8011378:	f000 fc3c 	bl	8011bf4 <uxr_seq_num_add>
 801137c:	8921      	ldrh	r1, [r4, #8]
 801137e:	fbb0 f2f1 	udiv	r2, r0, r1
 8011382:	fb01 0212 	mls	r2, r1, r2, r0
 8011386:	b292      	uxth	r2, r2
 8011388:	6863      	ldr	r3, [r4, #4]
 801138a:	fbb3 f3f1 	udiv	r3, r3, r1
 801138e:	4606      	mov	r6, r0
 8011390:	fb02 f303 	mul.w	r3, r2, r3
 8011394:	6820      	ldr	r0, [r4, #0]
 8011396:	3304      	adds	r3, #4
 8011398:	4418      	add	r0, r3
 801139a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d0a3      	beq.n	80112ea <uxr_receive_reliable_message+0x22>
 80113a2:	6923      	ldr	r3, [r4, #16]
 80113a4:	4798      	blx	r3
 80113a6:	2802      	cmp	r0, #2
 80113a8:	d005      	beq.n	80113b6 <uxr_receive_reliable_message+0xee>
 80113aa:	2801      	cmp	r0, #1
 80113ac:	d0e2      	beq.n	8011374 <uxr_receive_reliable_message+0xac>
 80113ae:	e79c      	b.n	80112ea <uxr_receive_reliable_message+0x22>
 80113b0:	9b06      	ldr	r3, [sp, #24]
 80113b2:	81a5      	strh	r5, [r4, #12]
 80113b4:	701e      	strb	r6, [r3, #0]
 80113b6:	2601      	movs	r6, #1
 80113b8:	e798      	b.n	80112ec <uxr_receive_reliable_message+0x24>
 80113ba:	bf00      	nop

080113bc <uxr_next_input_reliable_buffer_available>:
 80113bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c0:	4604      	mov	r4, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	8980      	ldrh	r0, [r0, #12]
 80113c6:	2101      	movs	r1, #1
 80113c8:	4690      	mov	r8, r2
 80113ca:	f000 fc13 	bl	8011bf4 <uxr_seq_num_add>
 80113ce:	8921      	ldrh	r1, [r4, #8]
 80113d0:	fbb0 f2f1 	udiv	r2, r0, r1
 80113d4:	fb01 0212 	mls	r2, r1, r2, r0
 80113d8:	b292      	uxth	r2, r2
 80113da:	6863      	ldr	r3, [r4, #4]
 80113dc:	6826      	ldr	r6, [r4, #0]
 80113de:	fbb3 f3f1 	udiv	r3, r3, r1
 80113e2:	fb02 f303 	mul.w	r3, r2, r3
 80113e6:	3304      	adds	r3, #4
 80113e8:	441e      	add	r6, r3
 80113ea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80113ee:	f1b9 0f00 	cmp.w	r9, #0
 80113f2:	d023      	beq.n	801143c <uxr_next_input_reliable_buffer_available+0x80>
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	4605      	mov	r5, r0
 80113f8:	4630      	mov	r0, r6
 80113fa:	4798      	blx	r3
 80113fc:	4682      	mov	sl, r0
 80113fe:	b300      	cbz	r0, 8011442 <uxr_next_input_reliable_buffer_available+0x86>
 8011400:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011404:	2101      	movs	r1, #1
 8011406:	4650      	mov	r0, sl
 8011408:	f000 fbf4 	bl	8011bf4 <uxr_seq_num_add>
 801140c:	8921      	ldrh	r1, [r4, #8]
 801140e:	fbb0 f2f1 	udiv	r2, r0, r1
 8011412:	4682      	mov	sl, r0
 8011414:	fb01 0212 	mls	r2, r1, r2, r0
 8011418:	e9d4 0300 	ldrd	r0, r3, [r4]
 801141c:	b292      	uxth	r2, r2
 801141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011422:	fb02 f303 	mul.w	r3, r2, r3
 8011426:	3304      	adds	r3, #4
 8011428:	4418      	add	r0, r3
 801142a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801142e:	b12b      	cbz	r3, 801143c <uxr_next_input_reliable_buffer_available+0x80>
 8011430:	6923      	ldr	r3, [r4, #16]
 8011432:	4798      	blx	r3
 8011434:	2802      	cmp	r0, #2
 8011436:	d01b      	beq.n	8011470 <uxr_next_input_reliable_buffer_available+0xb4>
 8011438:	2801      	cmp	r0, #1
 801143a:	d0e3      	beq.n	8011404 <uxr_next_input_reliable_buffer_available+0x48>
 801143c:	2000      	movs	r0, #0
 801143e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011442:	464a      	mov	r2, r9
 8011444:	4631      	mov	r1, r6
 8011446:	4638      	mov	r0, r7
 8011448:	f7f7 fc6c 	bl	8008d24 <ucdr_init_buffer>
 801144c:	8921      	ldrh	r1, [r4, #8]
 801144e:	fbb5 f2f1 	udiv	r2, r5, r1
 8011452:	fb01 5212 	mls	r2, r1, r2, r5
 8011456:	b292      	uxth	r2, r2
 8011458:	6863      	ldr	r3, [r4, #4]
 801145a:	fbb3 f3f1 	udiv	r3, r3, r1
 801145e:	fb02 f303 	mul.w	r3, r2, r3
 8011462:	6822      	ldr	r2, [r4, #0]
 8011464:	f842 a003 	str.w	sl, [r2, r3]
 8011468:	81a5      	strh	r5, [r4, #12]
 801146a:	2001      	movs	r0, #1
 801146c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011470:	eb06 0108 	add.w	r1, r6, r8
 8011474:	8926      	ldrh	r6, [r4, #8]
 8011476:	fbb5 f0f6 	udiv	r0, r5, r6
 801147a:	fb06 5010 	mls	r0, r6, r0, r5
 801147e:	b280      	uxth	r0, r0
 8011480:	6863      	ldr	r3, [r4, #4]
 8011482:	fbb3 f3f6 	udiv	r3, r3, r6
 8011486:	fb00 f303 	mul.w	r3, r0, r3
 801148a:	6820      	ldr	r0, [r4, #0]
 801148c:	2500      	movs	r5, #0
 801148e:	50c5      	str	r5, [r0, r3]
 8011490:	eba9 0208 	sub.w	r2, r9, r8
 8011494:	4638      	mov	r0, r7
 8011496:	f7f7 fc45 	bl	8008d24 <ucdr_init_buffer>
 801149a:	4903      	ldr	r1, [pc, #12]	@ (80114a8 <uxr_next_input_reliable_buffer_available+0xec>)
 801149c:	4622      	mov	r2, r4
 801149e:	4638      	mov	r0, r7
 80114a0:	f7f7 fc14 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 80114a4:	4655      	mov	r5, sl
 80114a6:	e7df      	b.n	8011468 <uxr_next_input_reliable_buffer_available+0xac>
 80114a8:	080111c5 	.word	0x080111c5

080114ac <uxr_process_heartbeat>:
 80114ac:	b538      	push	{r3, r4, r5, lr}
 80114ae:	4611      	mov	r1, r2
 80114b0:	4604      	mov	r4, r0
 80114b2:	89c0      	ldrh	r0, [r0, #14]
 80114b4:	4615      	mov	r5, r2
 80114b6:	f000 fba5 	bl	8011c04 <uxr_seq_num_cmp>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	bfb8      	it	lt
 80114be:	81e5      	strhlt	r5, [r4, #14]
 80114c0:	bd38      	pop	{r3, r4, r5, pc}
 80114c2:	bf00      	nop

080114c4 <uxr_compute_acknack>:
 80114c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c8:	8903      	ldrh	r3, [r0, #8]
 80114ca:	8985      	ldrh	r5, [r0, #12]
 80114cc:	4604      	mov	r4, r0
 80114ce:	460e      	mov	r6, r1
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d048      	beq.n	8011566 <uxr_compute_acknack+0xa2>
 80114d4:	4628      	mov	r0, r5
 80114d6:	2701      	movs	r7, #1
 80114d8:	e003      	b.n	80114e2 <uxr_compute_acknack+0x1e>
 80114da:	4567      	cmp	r7, ip
 80114dc:	d243      	bcs.n	8011566 <uxr_compute_acknack+0xa2>
 80114de:	89a0      	ldrh	r0, [r4, #12]
 80114e0:	3701      	adds	r7, #1
 80114e2:	b2b9      	uxth	r1, r7
 80114e4:	f000 fb86 	bl	8011bf4 <uxr_seq_num_add>
 80114e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80114ec:	fbb0 f2fc 	udiv	r2, r0, ip
 80114f0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80114f4:	fb0c 0212 	mls	r2, ip, r2, r0
 80114f8:	b292      	uxth	r2, r2
 80114fa:	fbb3 f3fc 	udiv	r3, r3, ip
 80114fe:	fb02 f303 	mul.w	r3, r2, r3
 8011502:	58cb      	ldr	r3, [r1, r3]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1e8      	bne.n	80114da <uxr_compute_acknack+0x16>
 8011508:	8030      	strh	r0, [r6, #0]
 801150a:	2101      	movs	r1, #1
 801150c:	89e5      	ldrh	r5, [r4, #14]
 801150e:	f000 fb75 	bl	8011bfc <uxr_seq_num_sub>
 8011512:	4601      	mov	r1, r0
 8011514:	4628      	mov	r0, r5
 8011516:	f000 fb71 	bl	8011bfc <uxr_seq_num_sub>
 801151a:	4605      	mov	r5, r0
 801151c:	4607      	mov	r7, r0
 801151e:	b1f8      	cbz	r0, 8011560 <uxr_compute_acknack+0x9c>
 8011520:	f04f 0900 	mov.w	r9, #0
 8011524:	464d      	mov	r5, r9
 8011526:	f04f 0801 	mov.w	r8, #1
 801152a:	fa1f f189 	uxth.w	r1, r9
 801152e:	8830      	ldrh	r0, [r6, #0]
 8011530:	f000 fb60 	bl	8011bf4 <uxr_seq_num_add>
 8011534:	8921      	ldrh	r1, [r4, #8]
 8011536:	fbb0 f3f1 	udiv	r3, r0, r1
 801153a:	fb03 0011 	mls	r0, r3, r1, r0
 801153e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011542:	b280      	uxth	r0, r0
 8011544:	fbb3 f3f1 	udiv	r3, r3, r1
 8011548:	fb00 f303 	mul.w	r3, r0, r3
 801154c:	fa08 f109 	lsl.w	r1, r8, r9
 8011550:	58d3      	ldr	r3, [r2, r3]
 8011552:	f109 0901 	add.w	r9, r9, #1
 8011556:	b90b      	cbnz	r3, 801155c <uxr_compute_acknack+0x98>
 8011558:	4329      	orrs	r1, r5
 801155a:	b28d      	uxth	r5, r1
 801155c:	454f      	cmp	r7, r9
 801155e:	d1e4      	bne.n	801152a <uxr_compute_acknack+0x66>
 8011560:	4628      	mov	r0, r5
 8011562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011566:	4628      	mov	r0, r5
 8011568:	e7ce      	b.n	8011508 <uxr_compute_acknack+0x44>
 801156a:	bf00      	nop

0801156c <uxr_init_output_best_effort_stream>:
 801156c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8011570:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8011574:	6001      	str	r1, [r0, #0]
 8011576:	7303      	strb	r3, [r0, #12]
 8011578:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801157c:	4770      	bx	lr
 801157e:	bf00      	nop

08011580 <uxr_reset_output_best_effort_stream>:
 8011580:	7b02      	ldrb	r2, [r0, #12]
 8011582:	6042      	str	r2, [r0, #4]
 8011584:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011588:	81c3      	strh	r3, [r0, #14]
 801158a:	4770      	bx	lr

0801158c <uxr_prepare_best_effort_buffer_to_write>:
 801158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801158e:	4604      	mov	r4, r0
 8011590:	b083      	sub	sp, #12
 8011592:	6840      	ldr	r0, [r0, #4]
 8011594:	460d      	mov	r5, r1
 8011596:	4616      	mov	r6, r2
 8011598:	f7fc ff76 	bl	800e488 <uxr_submessage_padding>
 801159c:	6863      	ldr	r3, [r4, #4]
 801159e:	4418      	add	r0, r3
 80115a0:	68a3      	ldr	r3, [r4, #8]
 80115a2:	1942      	adds	r2, r0, r5
 80115a4:	4293      	cmp	r3, r2
 80115a6:	bf2c      	ite	cs
 80115a8:	2701      	movcs	r7, #1
 80115aa:	2700      	movcc	r7, #0
 80115ac:	d202      	bcs.n	80115b4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80115ae:	4638      	mov	r0, r7
 80115b0:	b003      	add	sp, #12
 80115b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115b4:	9000      	str	r0, [sp, #0]
 80115b6:	6821      	ldr	r1, [r4, #0]
 80115b8:	4630      	mov	r0, r6
 80115ba:	2300      	movs	r3, #0
 80115bc:	f7f7 fba0 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 80115c0:	6863      	ldr	r3, [r4, #4]
 80115c2:	4638      	mov	r0, r7
 80115c4:	442b      	add	r3, r5
 80115c6:	6063      	str	r3, [r4, #4]
 80115c8:	b003      	add	sp, #12
 80115ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115cc <uxr_prepare_best_effort_buffer_to_send>:
 80115cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d0:	4604      	mov	r4, r0
 80115d2:	461d      	mov	r5, r3
 80115d4:	6840      	ldr	r0, [r0, #4]
 80115d6:	7b23      	ldrb	r3, [r4, #12]
 80115d8:	4298      	cmp	r0, r3
 80115da:	bf8c      	ite	hi
 80115dc:	2601      	movhi	r6, #1
 80115de:	2600      	movls	r6, #0
 80115e0:	d802      	bhi.n	80115e8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80115e2:	4630      	mov	r0, r6
 80115e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e8:	4688      	mov	r8, r1
 80115ea:	89e0      	ldrh	r0, [r4, #14]
 80115ec:	2101      	movs	r1, #1
 80115ee:	4617      	mov	r7, r2
 80115f0:	f000 fb00 	bl	8011bf4 <uxr_seq_num_add>
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	81e0      	strh	r0, [r4, #14]
 80115f8:	8028      	strh	r0, [r5, #0]
 80115fa:	f8c8 3000 	str.w	r3, [r8]
 80115fe:	6863      	ldr	r3, [r4, #4]
 8011600:	603b      	str	r3, [r7, #0]
 8011602:	7b23      	ldrb	r3, [r4, #12]
 8011604:	6063      	str	r3, [r4, #4]
 8011606:	4630      	mov	r0, r6
 8011608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801160c <on_full_output_buffer>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	460c      	mov	r4, r1
 8011610:	6803      	ldr	r3, [r0, #0]
 8011612:	6809      	ldr	r1, [r1, #0]
 8011614:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011618:	6862      	ldr	r2, [r4, #4]
 801161a:	fbb2 f2fc 	udiv	r2, r2, ip
 801161e:	1a5b      	subs	r3, r3, r1
 8011620:	fbb3 f3f2 	udiv	r3, r3, r2
 8011624:	3301      	adds	r3, #1
 8011626:	b29b      	uxth	r3, r3
 8011628:	fbb3 fefc 	udiv	lr, r3, ip
 801162c:	fb0c 331e 	mls	r3, ip, lr, r3
 8011630:	b29b      	uxth	r3, r3
 8011632:	fb02 f303 	mul.w	r3, r2, r3
 8011636:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801163a:	58ca      	ldr	r2, [r1, r3]
 801163c:	4463      	add	r3, ip
 801163e:	eba2 020c 	sub.w	r2, r2, ip
 8011642:	3308      	adds	r3, #8
 8011644:	4605      	mov	r5, r0
 8011646:	4419      	add	r1, r3
 8011648:	3a04      	subs	r2, #4
 801164a:	6903      	ldr	r3, [r0, #16]
 801164c:	f7f7 fb62 	bl	8008d14 <ucdr_init_buffer_origin>
 8011650:	4628      	mov	r0, r5
 8011652:	4903      	ldr	r1, [pc, #12]	@ (8011660 <on_full_output_buffer+0x54>)
 8011654:	4622      	mov	r2, r4
 8011656:	f7f7 fb39 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 801165a:	2000      	movs	r0, #0
 801165c:	bd38      	pop	{r3, r4, r5, pc}
 801165e:	bf00      	nop
 8011660:	0801160d 	.word	0x0801160d

08011664 <uxr_init_output_reliable_stream>:
 8011664:	b410      	push	{r4}
 8011666:	f89d c004 	ldrb.w	ip, [sp, #4]
 801166a:	8103      	strh	r3, [r0, #8]
 801166c:	e9c0 1200 	strd	r1, r2, [r0]
 8011670:	f880 c00c 	strb.w	ip, [r0, #12]
 8011674:	b1d3      	cbz	r3, 80116ac <uxr_init_output_reliable_stream+0x48>
 8011676:	f8c1 c000 	str.w	ip, [r1]
 801167a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801167e:	f1bc 0f01 	cmp.w	ip, #1
 8011682:	d913      	bls.n	80116ac <uxr_init_output_reliable_stream+0x48>
 8011684:	2301      	movs	r3, #1
 8011686:	fbb3 f1fc 	udiv	r1, r3, ip
 801168a:	fb0c 3111 	mls	r1, ip, r1, r3
 801168e:	b289      	uxth	r1, r1
 8011690:	6842      	ldr	r2, [r0, #4]
 8011692:	6804      	ldr	r4, [r0, #0]
 8011694:	fbb2 f2fc 	udiv	r2, r2, ip
 8011698:	fb01 f202 	mul.w	r2, r1, r2
 801169c:	7b01      	ldrb	r1, [r0, #12]
 801169e:	50a1      	str	r1, [r4, r2]
 80116a0:	3301      	adds	r3, #1
 80116a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	459c      	cmp	ip, r3
 80116aa:	d8ec      	bhi.n	8011686 <uxr_init_output_reliable_stream+0x22>
 80116ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80116b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80116b4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80116b8:	4905      	ldr	r1, [pc, #20]	@ (80116d0 <uxr_init_output_reliable_stream+0x6c>)
 80116ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116be:	f8c0 100e 	str.w	r1, [r0, #14]
 80116c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116c6:	2300      	movs	r3, #0
 80116c8:	8242      	strh	r2, [r0, #18]
 80116ca:	8403      	strh	r3, [r0, #32]
 80116cc:	4770      	bx	lr
 80116ce:	bf00      	nop
 80116d0:	ffff0000 	.word	0xffff0000

080116d4 <uxr_reset_output_reliable_stream>:
 80116d4:	8901      	ldrh	r1, [r0, #8]
 80116d6:	b1b1      	cbz	r1, 8011706 <uxr_reset_output_reliable_stream+0x32>
 80116d8:	f04f 0c00 	mov.w	ip, #0
 80116dc:	4663      	mov	r3, ip
 80116de:	fbb3 f2f1 	udiv	r2, r3, r1
 80116e2:	fb01 3312 	mls	r3, r1, r2, r3
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	6842      	ldr	r2, [r0, #4]
 80116ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80116ee:	6801      	ldr	r1, [r0, #0]
 80116f0:	fb03 f202 	mul.w	r2, r3, r2
 80116f4:	7b03      	ldrb	r3, [r0, #12]
 80116f6:	508b      	str	r3, [r1, r2]
 80116f8:	f10c 0c01 	add.w	ip, ip, #1
 80116fc:	8901      	ldrh	r1, [r0, #8]
 80116fe:	fa1f f38c 	uxth.w	r3, ip
 8011702:	4299      	cmp	r1, r3
 8011704:	d8eb      	bhi.n	80116de <uxr_reset_output_reliable_stream+0xa>
 8011706:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801170a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801170e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011712:	4904      	ldr	r1, [pc, #16]	@ (8011724 <uxr_reset_output_reliable_stream+0x50>)
 8011714:	f8c0 100e 	str.w	r1, [r0, #14]
 8011718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801171c:	2300      	movs	r3, #0
 801171e:	8242      	strh	r2, [r0, #18]
 8011720:	8403      	strh	r3, [r0, #32]
 8011722:	4770      	bx	lr
 8011724:	ffff0000 	.word	0xffff0000

08011728 <uxr_prepare_reliable_buffer_to_write>:
 8011728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801172c:	4604      	mov	r4, r0
 801172e:	b091      	sub	sp, #68	@ 0x44
 8011730:	8900      	ldrh	r0, [r0, #8]
 8011732:	89e7      	ldrh	r7, [r4, #14]
 8011734:	6823      	ldr	r3, [r4, #0]
 8011736:	9204      	str	r2, [sp, #16]
 8011738:	fbb7 f2f0 	udiv	r2, r7, r0
 801173c:	fb00 7212 	mls	r2, r0, r2, r7
 8011740:	b292      	uxth	r2, r2
 8011742:	6865      	ldr	r5, [r4, #4]
 8011744:	fbb5 f5f0 	udiv	r5, r5, r0
 8011748:	fb05 3202 	mla	r2, r5, r2, r3
 801174c:	3204      	adds	r2, #4
 801174e:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8011752:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8011756:	9203      	str	r2, [sp, #12]
 8011758:	4688      	mov	r8, r1
 801175a:	f1a5 0904 	sub.w	r9, r5, #4
 801175e:	2800      	cmp	r0, #0
 8011760:	f000 8143 	beq.w	80119ea <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8011764:	2100      	movs	r1, #0
 8011766:	460e      	mov	r6, r1
 8011768:	b28a      	uxth	r2, r1
 801176a:	fbb2 fcf0 	udiv	ip, r2, r0
 801176e:	fb00 221c 	mls	r2, r0, ip, r2
 8011772:	b292      	uxth	r2, r2
 8011774:	fb05 f202 	mul.w	r2, r5, r2
 8011778:	3101      	adds	r1, #1
 801177a:	589a      	ldr	r2, [r3, r2]
 801177c:	455a      	cmp	r2, fp
 801177e:	bf04      	itt	eq
 8011780:	3601      	addeq	r6, #1
 8011782:	b2b6      	uxtheq	r6, r6
 8011784:	4281      	cmp	r1, r0
 8011786:	d1ef      	bne.n	8011768 <uxr_prepare_reliable_buffer_to_write+0x40>
 8011788:	4650      	mov	r0, sl
 801178a:	2104      	movs	r1, #4
 801178c:	9605      	str	r6, [sp, #20]
 801178e:	f7f7 facd 	bl	8008d2c <ucdr_alignment>
 8011792:	4482      	add	sl, r0
 8011794:	eb0a 0208 	add.w	r2, sl, r8
 8011798:	454a      	cmp	r2, r9
 801179a:	f240 80ca 	bls.w	8011932 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801179e:	7b22      	ldrb	r2, [r4, #12]
 80117a0:	4442      	add	r2, r8
 80117a2:	454a      	cmp	r2, r9
 80117a4:	f240 80b2 	bls.w	801190c <uxr_prepare_reliable_buffer_to_write+0x1e4>
 80117a8:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 80117ac:	32fc      	adds	r2, #252	@ 0xfc
 80117ae:	fa1f f389 	uxth.w	r3, r9
 80117b2:	441a      	add	r2, r3
 80117b4:	b292      	uxth	r2, r2
 80117b6:	fb06 fb02 	mul.w	fp, r6, r2
 80117ba:	45c3      	cmp	fp, r8
 80117bc:	9205      	str	r2, [sp, #20]
 80117be:	9206      	str	r2, [sp, #24]
 80117c0:	f0c0 80b3 	bcc.w	801192a <uxr_prepare_reliable_buffer_to_write+0x202>
 80117c4:	f10a 0204 	add.w	r2, sl, #4
 80117c8:	454a      	cmp	r2, r9
 80117ca:	f080 80db 	bcs.w	8011984 <uxr_prepare_reliable_buffer_to_write+0x25c>
 80117ce:	f1a3 0b04 	sub.w	fp, r3, #4
 80117d2:	ebab 0b0a 	sub.w	fp, fp, sl
 80117d6:	9b05      	ldr	r3, [sp, #20]
 80117d8:	fa1f fb8b 	uxth.w	fp, fp
 80117dc:	eba8 080b 	sub.w	r8, r8, fp
 80117e0:	fbb8 fcf3 	udiv	ip, r8, r3
 80117e4:	fb03 831c 	mls	r3, r3, ip, r8
 80117e8:	fa1f fc8c 	uxth.w	ip, ip
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f040 80c1 	bne.w	8011974 <uxr_prepare_reliable_buffer_to_write+0x24c>
 80117f2:	45b4      	cmp	ip, r6
 80117f4:	f200 8099 	bhi.w	801192a <uxr_prepare_reliable_buffer_to_write+0x202>
 80117f8:	f10d 0820 	add.w	r8, sp, #32
 80117fc:	f1bc 0f00 	cmp.w	ip, #0
 8011800:	d040      	beq.n	8011884 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8011802:	f8cd a01c 	str.w	sl, [sp, #28]
 8011806:	2600      	movs	r6, #0
 8011808:	f8dd a014 	ldr.w	sl, [sp, #20]
 801180c:	9505      	str	r5, [sp, #20]
 801180e:	f10d 0820 	add.w	r8, sp, #32
 8011812:	4665      	mov	r5, ip
 8011814:	e000      	b.n	8011818 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8011816:	46d3      	mov	fp, sl
 8011818:	8921      	ldrh	r1, [r4, #8]
 801181a:	fbb7 f2f1 	udiv	r2, r7, r1
 801181e:	fb01 7212 	mls	r2, r1, r2, r7
 8011822:	b292      	uxth	r2, r2
 8011824:	6863      	ldr	r3, [r4, #4]
 8011826:	fbb3 f3f1 	udiv	r3, r3, r1
 801182a:	6821      	ldr	r1, [r4, #0]
 801182c:	fb02 f303 	mul.w	r3, r2, r3
 8011830:	3304      	adds	r3, #4
 8011832:	4419      	add	r1, r3
 8011834:	4640      	mov	r0, r8
 8011836:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801183a:	9200      	str	r2, [sp, #0]
 801183c:	2300      	movs	r3, #0
 801183e:	464a      	mov	r2, r9
 8011840:	f7f7 fa5e 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 8011844:	465a      	mov	r2, fp
 8011846:	2300      	movs	r3, #0
 8011848:	210d      	movs	r1, #13
 801184a:	4640      	mov	r0, r8
 801184c:	f7fc fddc 	bl	800e408 <uxr_buffer_submessage_header>
 8011850:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011854:	fbb7 f2fc 	udiv	r2, r7, ip
 8011858:	fb0c 7212 	mls	r2, ip, r2, r7
 801185c:	b292      	uxth	r2, r2
 801185e:	6863      	ldr	r3, [r4, #4]
 8011860:	fbb3 f3fc 	udiv	r3, r3, ip
 8011864:	fb02 f303 	mul.w	r3, r2, r3
 8011868:	6822      	ldr	r2, [r4, #0]
 801186a:	4638      	mov	r0, r7
 801186c:	f842 9003 	str.w	r9, [r2, r3]
 8011870:	2101      	movs	r1, #1
 8011872:	f000 f9bf 	bl	8011bf4 <uxr_seq_num_add>
 8011876:	3601      	adds	r6, #1
 8011878:	42ae      	cmp	r6, r5
 801187a:	4607      	mov	r7, r0
 801187c:	d1cb      	bne.n	8011816 <uxr_prepare_reliable_buffer_to_write+0xee>
 801187e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011882:	9d05      	ldr	r5, [sp, #20]
 8011884:	8920      	ldrh	r0, [r4, #8]
 8011886:	fbb7 f1f0 	udiv	r1, r7, r0
 801188a:	fb00 7111 	mls	r1, r0, r1, r7
 801188e:	b289      	uxth	r1, r1
 8011890:	6863      	ldr	r3, [r4, #4]
 8011892:	fbb3 f3f0 	udiv	r3, r3, r0
 8011896:	fb01 f303 	mul.w	r3, r1, r3
 801189a:	6821      	ldr	r1, [r4, #0]
 801189c:	3304      	adds	r3, #4
 801189e:	4419      	add	r1, r3
 80118a0:	464a      	mov	r2, r9
 80118a2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80118a6:	9000      	str	r0, [sp, #0]
 80118a8:	2300      	movs	r3, #0
 80118aa:	4640      	mov	r0, r8
 80118ac:	f7f7 fa28 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 80118b0:	4640      	mov	r0, r8
 80118b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80118b6:	2302      	movs	r3, #2
 80118b8:	fa1f f288 	uxth.w	r2, r8
 80118bc:	210d      	movs	r1, #13
 80118be:	f7fc fda3 	bl	800e408 <uxr_buffer_submessage_header>
 80118c2:	8926      	ldrh	r6, [r4, #8]
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	7b20      	ldrb	r0, [r4, #12]
 80118c8:	f1a5 0208 	sub.w	r2, r5, #8
 80118cc:	f10a 0104 	add.w	r1, sl, #4
 80118d0:	fbb7 f5f6 	udiv	r5, r7, r6
 80118d4:	fb06 7515 	mls	r5, r6, r5, r7
 80118d8:	440b      	add	r3, r1
 80118da:	b2ad      	uxth	r5, r5
 80118dc:	4619      	mov	r1, r3
 80118de:	3004      	adds	r0, #4
 80118e0:	6863      	ldr	r3, [r4, #4]
 80118e2:	fbb3 f3f6 	udiv	r3, r3, r6
 80118e6:	fb05 f303 	mul.w	r3, r5, r3
 80118ea:	6825      	ldr	r5, [r4, #0]
 80118ec:	4440      	add	r0, r8
 80118ee:	50e8      	str	r0, [r5, r3]
 80118f0:	9d04      	ldr	r5, [sp, #16]
 80118f2:	eba2 020a 	sub.w	r2, r2, sl
 80118f6:	4628      	mov	r0, r5
 80118f8:	f7f7 fa14 	bl	8008d24 <ucdr_init_buffer>
 80118fc:	493c      	ldr	r1, [pc, #240]	@ (80119f0 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 80118fe:	4622      	mov	r2, r4
 8011900:	4628      	mov	r0, r5
 8011902:	f7f7 f9e3 	bl	8008ccc <ucdr_set_on_full_buffer_callback>
 8011906:	81e7      	strh	r7, [r4, #14]
 8011908:	2001      	movs	r0, #1
 801190a:	e00f      	b.n	801192c <uxr_prepare_reliable_buffer_to_write+0x204>
 801190c:	2101      	movs	r1, #1
 801190e:	89e0      	ldrh	r0, [r4, #14]
 8011910:	f000 f970 	bl	8011bf4 <uxr_seq_num_add>
 8011914:	8921      	ldrh	r1, [r4, #8]
 8011916:	4605      	mov	r5, r0
 8011918:	8a60      	ldrh	r0, [r4, #18]
 801191a:	f000 f96b 	bl	8011bf4 <uxr_seq_num_add>
 801191e:	4601      	mov	r1, r0
 8011920:	4628      	mov	r0, r5
 8011922:	f000 f96f 	bl	8011c04 <uxr_seq_num_cmp>
 8011926:	2800      	cmp	r0, #0
 8011928:	dd45      	ble.n	80119b6 <uxr_prepare_reliable_buffer_to_write+0x28e>
 801192a:	2000      	movs	r0, #0
 801192c:	b011      	add	sp, #68	@ 0x44
 801192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011932:	8921      	ldrh	r1, [r4, #8]
 8011934:	8a60      	ldrh	r0, [r4, #18]
 8011936:	9205      	str	r2, [sp, #20]
 8011938:	f000 f95c 	bl	8011bf4 <uxr_seq_num_add>
 801193c:	4601      	mov	r1, r0
 801193e:	4638      	mov	r0, r7
 8011940:	f000 f960 	bl	8011c04 <uxr_seq_num_cmp>
 8011944:	2800      	cmp	r0, #0
 8011946:	9a05      	ldr	r2, [sp, #20]
 8011948:	dcef      	bgt.n	801192a <uxr_prepare_reliable_buffer_to_write+0x202>
 801194a:	8926      	ldrh	r6, [r4, #8]
 801194c:	fbb7 f5f6 	udiv	r5, r7, r6
 8011950:	fb06 7515 	mls	r5, r6, r5, r7
 8011954:	b2ad      	uxth	r5, r5
 8011956:	6863      	ldr	r3, [r4, #4]
 8011958:	6824      	ldr	r4, [r4, #0]
 801195a:	fbb3 f3f6 	udiv	r3, r3, r6
 801195e:	fb05 f303 	mul.w	r3, r5, r3
 8011962:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8011966:	50e2      	str	r2, [r4, r3]
 8011968:	2300      	movs	r3, #0
 801196a:	f8cd a000 	str.w	sl, [sp]
 801196e:	f7f7 f9c7 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 8011972:	e7c9      	b.n	8011908 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8011974:	f10c 0c01 	add.w	ip, ip, #1
 8011978:	fa1f fc8c 	uxth.w	ip, ip
 801197c:	45b4      	cmp	ip, r6
 801197e:	9306      	str	r3, [sp, #24]
 8011980:	d8d3      	bhi.n	801192a <uxr_prepare_reliable_buffer_to_write+0x202>
 8011982:	e739      	b.n	80117f8 <uxr_prepare_reliable_buffer_to_write+0xd0>
 8011984:	4638      	mov	r0, r7
 8011986:	2101      	movs	r1, #1
 8011988:	9307      	str	r3, [sp, #28]
 801198a:	f000 f933 	bl	8011bf4 <uxr_seq_num_add>
 801198e:	8921      	ldrh	r1, [r4, #8]
 8011990:	6862      	ldr	r2, [r4, #4]
 8011992:	4607      	mov	r7, r0
 8011994:	fbb0 f0f1 	udiv	r0, r0, r1
 8011998:	fb01 7010 	mls	r0, r1, r0, r7
 801199c:	b280      	uxth	r0, r0
 801199e:	fbb2 f1f1 	udiv	r1, r2, r1
 80119a2:	6822      	ldr	r2, [r4, #0]
 80119a4:	fb00 f101 	mul.w	r1, r0, r1
 80119a8:	3104      	adds	r1, #4
 80119aa:	1853      	adds	r3, r2, r1
 80119ac:	9303      	str	r3, [sp, #12]
 80119ae:	f853 ac04 	ldr.w	sl, [r3, #-4]
 80119b2:	9b07      	ldr	r3, [sp, #28]
 80119b4:	e70b      	b.n	80117ce <uxr_prepare_reliable_buffer_to_write+0xa6>
 80119b6:	8921      	ldrh	r1, [r4, #8]
 80119b8:	fbb5 f2f1 	udiv	r2, r5, r1
 80119bc:	fb01 5212 	mls	r2, r1, r2, r5
 80119c0:	b292      	uxth	r2, r2
 80119c2:	6863      	ldr	r3, [r4, #4]
 80119c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80119c8:	6821      	ldr	r1, [r4, #0]
 80119ca:	9804      	ldr	r0, [sp, #16]
 80119cc:	fb02 f303 	mul.w	r3, r2, r3
 80119d0:	3304      	adds	r3, #4
 80119d2:	7b22      	ldrb	r2, [r4, #12]
 80119d4:	4419      	add	r1, r3
 80119d6:	4442      	add	r2, r8
 80119d8:	f841 2c04 	str.w	r2, [r1, #-4]
 80119dc:	7b23      	ldrb	r3, [r4, #12]
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	2300      	movs	r3, #0
 80119e2:	f7f7 f98d 	bl	8008d00 <ucdr_init_buffer_origin_offset>
 80119e6:	81e5      	strh	r5, [r4, #14]
 80119e8:	e78e      	b.n	8011908 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80119ea:	4606      	mov	r6, r0
 80119ec:	e6cc      	b.n	8011788 <uxr_prepare_reliable_buffer_to_write+0x60>
 80119ee:	bf00      	nop
 80119f0:	0801160d 	.word	0x0801160d

080119f4 <uxr_prepare_next_reliable_buffer_to_send>:
 80119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f6:	4604      	mov	r4, r0
 80119f8:	460f      	mov	r7, r1
 80119fa:	8a00      	ldrh	r0, [r0, #16]
 80119fc:	2101      	movs	r1, #1
 80119fe:	4615      	mov	r5, r2
 8011a00:	461e      	mov	r6, r3
 8011a02:	f000 f8f7 	bl	8011bf4 <uxr_seq_num_add>
 8011a06:	8030      	strh	r0, [r6, #0]
 8011a08:	8922      	ldrh	r2, [r4, #8]
 8011a0a:	fbb0 f3f2 	udiv	r3, r0, r2
 8011a0e:	fb02 0c13 	mls	ip, r2, r3, r0
 8011a12:	fa1f fc8c 	uxth.w	ip, ip
 8011a16:	6863      	ldr	r3, [r4, #4]
 8011a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a1c:	fb0c fc03 	mul.w	ip, ip, r3
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	89e1      	ldrh	r1, [r4, #14]
 8011a24:	f10c 0c04 	add.w	ip, ip, #4
 8011a28:	4463      	add	r3, ip
 8011a2a:	603b      	str	r3, [r7, #0]
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	4463      	add	r3, ip
 8011a30:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011a34:	602b      	str	r3, [r5, #0]
 8011a36:	f000 f8e5 	bl	8011c04 <uxr_seq_num_cmp>
 8011a3a:	2800      	cmp	r0, #0
 8011a3c:	dd01      	ble.n	8011a42 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8011a3e:	2000      	movs	r0, #0
 8011a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a42:	7b23      	ldrb	r3, [r4, #12]
 8011a44:	682a      	ldr	r2, [r5, #0]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d9f9      	bls.n	8011a3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011a4a:	8a61      	ldrh	r1, [r4, #18]
 8011a4c:	8a20      	ldrh	r0, [r4, #16]
 8011a4e:	f000 f8d5 	bl	8011bfc <uxr_seq_num_sub>
 8011a52:	8923      	ldrh	r3, [r4, #8]
 8011a54:	4283      	cmp	r3, r0
 8011a56:	d0f2      	beq.n	8011a3e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011a58:	8830      	ldrh	r0, [r6, #0]
 8011a5a:	89e3      	ldrh	r3, [r4, #14]
 8011a5c:	8220      	strh	r0, [r4, #16]
 8011a5e:	4298      	cmp	r0, r3
 8011a60:	d001      	beq.n	8011a66 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8011a62:	2001      	movs	r0, #1
 8011a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a66:	2101      	movs	r1, #1
 8011a68:	f000 f8c4 	bl	8011bf4 <uxr_seq_num_add>
 8011a6c:	81e0      	strh	r0, [r4, #14]
 8011a6e:	e7f8      	b.n	8011a62 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

08011a70 <uxr_update_output_stream_heartbeat_timestamp>:
 8011a70:	b570      	push	{r4, r5, r6, lr}
 8011a72:	8a01      	ldrh	r1, [r0, #16]
 8011a74:	4604      	mov	r4, r0
 8011a76:	8a40      	ldrh	r0, [r0, #18]
 8011a78:	4615      	mov	r5, r2
 8011a7a:	461e      	mov	r6, r3
 8011a7c:	f000 f8c2 	bl	8011c04 <uxr_seq_num_cmp>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	db07      	blt.n	8011a94 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8011a84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011a88:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8011a8c:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8011a90:	2000      	movs	r0, #0
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	f894 3020 	ldrb.w	r3, [r4, #32]
 8011a98:	b953      	cbnz	r3, 8011ab0 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	f884 3020 	strb.w	r3, [r4, #32]
 8011aa0:	3564      	adds	r5, #100	@ 0x64
 8011aa2:	f04f 0000 	mov.w	r0, #0
 8011aa6:	f146 0600 	adc.w	r6, r6, #0
 8011aaa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8011aae:	bd70      	pop	{r4, r5, r6, pc}
 8011ab0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011ab4:	428d      	cmp	r5, r1
 8011ab6:	eb76 0202 	sbcs.w	r2, r6, r2
 8011aba:	dbf1      	blt.n	8011aa0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8011abc:	3301      	adds	r3, #1
 8011abe:	3564      	adds	r5, #100	@ 0x64
 8011ac0:	f884 3020 	strb.w	r3, [r4, #32]
 8011ac4:	f04f 0001 	mov.w	r0, #1
 8011ac8:	f146 0600 	adc.w	r6, r6, #0
 8011acc:	e7ed      	b.n	8011aaa <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8011ace:	bf00      	nop

08011ad0 <uxr_begin_output_nack_buffer_it>:
 8011ad0:	8a40      	ldrh	r0, [r0, #18]
 8011ad2:	4770      	bx	lr

08011ad4 <uxr_next_reliable_nack_buffer_to_send>:
 8011ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8011adc:	f1b8 0f00 	cmp.w	r8, #0
 8011ae0:	d104      	bne.n	8011aec <uxr_next_reliable_nack_buffer_to_send+0x18>
 8011ae2:	f04f 0800 	mov.w	r8, #0
 8011ae6:	4640      	mov	r0, r8
 8011ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aec:	4604      	mov	r4, r0
 8011aee:	460e      	mov	r6, r1
 8011af0:	8818      	ldrh	r0, [r3, #0]
 8011af2:	4617      	mov	r7, r2
 8011af4:	461d      	mov	r5, r3
 8011af6:	e019      	b.n	8011b2c <uxr_next_reliable_nack_buffer_to_send+0x58>
 8011af8:	8921      	ldrh	r1, [r4, #8]
 8011afa:	8828      	ldrh	r0, [r5, #0]
 8011afc:	fbb0 fcf1 	udiv	ip, r0, r1
 8011b00:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011b04:	fb01 0c1c 	mls	ip, r1, ip, r0
 8011b08:	fa1f fc8c 	uxth.w	ip, ip
 8011b0c:	fbb2 f2f1 	udiv	r2, r2, r1
 8011b10:	fb02 fc0c 	mul.w	ip, r2, ip
 8011b14:	f10c 0c04 	add.w	ip, ip, #4
 8011b18:	4463      	add	r3, ip
 8011b1a:	6033      	str	r3, [r6, #0]
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	4463      	add	r3, ip
 8011b20:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011b24:	603b      	str	r3, [r7, #0]
 8011b26:	7b22      	ldrb	r2, [r4, #12]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	d1dc      	bne.n	8011ae6 <uxr_next_reliable_nack_buffer_to_send+0x12>
 8011b2c:	2101      	movs	r1, #1
 8011b2e:	f000 f861 	bl	8011bf4 <uxr_seq_num_add>
 8011b32:	8028      	strh	r0, [r5, #0]
 8011b34:	8a21      	ldrh	r1, [r4, #16]
 8011b36:	f000 f865 	bl	8011c04 <uxr_seq_num_cmp>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	dddc      	ble.n	8011af8 <uxr_next_reliable_nack_buffer_to_send+0x24>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8011b44:	e7cd      	b.n	8011ae2 <uxr_next_reliable_nack_buffer_to_send+0xe>
 8011b46:	bf00      	nop

08011b48 <uxr_process_acknack>:
 8011b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	460e      	mov	r6, r1
 8011b4e:	4610      	mov	r0, r2
 8011b50:	2101      	movs	r1, #1
 8011b52:	f000 f853 	bl	8011bfc <uxr_seq_num_sub>
 8011b56:	8a61      	ldrh	r1, [r4, #18]
 8011b58:	f000 f850 	bl	8011bfc <uxr_seq_num_sub>
 8011b5c:	b1c0      	cbz	r0, 8011b90 <uxr_process_acknack+0x48>
 8011b5e:	4605      	mov	r5, r0
 8011b60:	2700      	movs	r7, #0
 8011b62:	2101      	movs	r1, #1
 8011b64:	8a60      	ldrh	r0, [r4, #18]
 8011b66:	f000 f845 	bl	8011bf4 <uxr_seq_num_add>
 8011b6a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011b6e:	fbb0 f1fc 	udiv	r1, r0, ip
 8011b72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011b76:	fb0c 0111 	mls	r1, ip, r1, r0
 8011b7a:	b289      	uxth	r1, r1
 8011b7c:	3701      	adds	r7, #1
 8011b7e:	fbb3 f3fc 	udiv	r3, r3, ip
 8011b82:	fb01 f303 	mul.w	r3, r1, r3
 8011b86:	42bd      	cmp	r5, r7
 8011b88:	7b21      	ldrb	r1, [r4, #12]
 8011b8a:	8260      	strh	r0, [r4, #18]
 8011b8c:	50d1      	str	r1, [r2, r3]
 8011b8e:	d1e8      	bne.n	8011b62 <uxr_process_acknack+0x1a>
 8011b90:	3e00      	subs	r6, #0
 8011b92:	f04f 0300 	mov.w	r3, #0
 8011b96:	bf18      	it	ne
 8011b98:	2601      	movne	r6, #1
 8011b9a:	f884 3020 	strb.w	r3, [r4, #32]
 8011b9e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8011ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ba4 <uxr_is_output_up_to_date>:
 8011ba4:	8a01      	ldrh	r1, [r0, #16]
 8011ba6:	8a40      	ldrh	r0, [r0, #18]
 8011ba8:	b508      	push	{r3, lr}
 8011baa:	f000 f82b 	bl	8011c04 <uxr_seq_num_cmp>
 8011bae:	fab0 f080 	clz	r0, r0
 8011bb2:	0940      	lsrs	r0, r0, #5
 8011bb4:	bd08      	pop	{r3, pc}
 8011bb6:	bf00      	nop

08011bb8 <get_available_free_slots>:
 8011bb8:	8901      	ldrh	r1, [r0, #8]
 8011bba:	b1c1      	cbz	r1, 8011bee <get_available_free_slots+0x36>
 8011bbc:	b530      	push	{r4, r5, lr}
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	6843      	ldr	r3, [r0, #4]
 8011bc2:	6805      	ldr	r5, [r0, #0]
 8011bc4:	7b04      	ldrb	r4, [r0, #12]
 8011bc6:	fbb3 fef1 	udiv	lr, r3, r1
 8011bca:	4610      	mov	r0, r2
 8011bcc:	b293      	uxth	r3, r2
 8011bce:	fbb3 fcf1 	udiv	ip, r3, r1
 8011bd2:	fb01 331c 	mls	r3, r1, ip, r3
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	fb0e f303 	mul.w	r3, lr, r3
 8011bdc:	3201      	adds	r2, #1
 8011bde:	58eb      	ldr	r3, [r5, r3]
 8011be0:	429c      	cmp	r4, r3
 8011be2:	bf04      	itt	eq
 8011be4:	3001      	addeq	r0, #1
 8011be6:	b280      	uxtheq	r0, r0
 8011be8:	4291      	cmp	r1, r2
 8011bea:	d1ef      	bne.n	8011bcc <get_available_free_slots+0x14>
 8011bec:	bd30      	pop	{r4, r5, pc}
 8011bee:	4608      	mov	r0, r1
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop

08011bf4 <uxr_seq_num_add>:
 8011bf4:	4408      	add	r0, r1
 8011bf6:	b280      	uxth	r0, r0
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop

08011bfc <uxr_seq_num_sub>:
 8011bfc:	1a40      	subs	r0, r0, r1
 8011bfe:	b280      	uxth	r0, r0
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop

08011c04 <uxr_seq_num_cmp>:
 8011c04:	4288      	cmp	r0, r1
 8011c06:	d010      	beq.n	8011c2a <uxr_seq_num_cmp+0x26>
 8011c08:	d207      	bcs.n	8011c1a <uxr_seq_num_cmp+0x16>
 8011c0a:	1a09      	subs	r1, r1, r0
 8011c0c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8011c10:	bfb4      	ite	lt
 8011c12:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 8011c16:	2001      	movge	r0, #1
 8011c18:	4770      	bx	lr
 8011c1a:	1a41      	subs	r1, r0, r1
 8011c1c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8011c20:	bfcc      	ite	gt
 8011c22:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8011c26:	2001      	movle	r0, #1
 8011c28:	4770      	bx	lr
 8011c2a:	2000      	movs	r0, #0
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop

08011c30 <rcl_get_automatic_discovery_range>:
 8011c30:	b530      	push	{r4, r5, lr}
 8011c32:	b083      	sub	sp, #12
 8011c34:	2300      	movs	r3, #0
 8011c36:	9301      	str	r3, [sp, #4]
 8011c38:	b1c0      	cbz	r0, 8011c6c <rcl_get_automatic_discovery_range+0x3c>
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	a901      	add	r1, sp, #4
 8011c3e:	4818      	ldr	r0, [pc, #96]	@ (8011ca0 <rcl_get_automatic_discovery_range+0x70>)
 8011c40:	f7fe fbbe 	bl	80103c0 <rcutils_get_env>
 8011c44:	b110      	cbz	r0, 8011c4c <rcl_get_automatic_discovery_range+0x1c>
 8011c46:	2001      	movs	r0, #1
 8011c48:	b003      	add	sp, #12
 8011c4a:	bd30      	pop	{r4, r5, pc}
 8011c4c:	9d01      	ldr	r5, [sp, #4]
 8011c4e:	782b      	ldrb	r3, [r5, #0]
 8011c50:	b923      	cbnz	r3, 8011c5c <rcl_get_automatic_discovery_range+0x2c>
 8011c52:	2303      	movs	r3, #3
 8011c54:	7023      	strb	r3, [r4, #0]
 8011c56:	2000      	movs	r0, #0
 8011c58:	b003      	add	sp, #12
 8011c5a:	bd30      	pop	{r4, r5, pc}
 8011c5c:	4911      	ldr	r1, [pc, #68]	@ (8011ca4 <rcl_get_automatic_discovery_range+0x74>)
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f7ee fade 	bl	8000220 <strcmp>
 8011c64:	b928      	cbnz	r0, 8011c72 <rcl_get_automatic_discovery_range+0x42>
 8011c66:	2301      	movs	r3, #1
 8011c68:	7023      	strb	r3, [r4, #0]
 8011c6a:	e7f4      	b.n	8011c56 <rcl_get_automatic_discovery_range+0x26>
 8011c6c:	200b      	movs	r0, #11
 8011c6e:	b003      	add	sp, #12
 8011c70:	bd30      	pop	{r4, r5, pc}
 8011c72:	490d      	ldr	r1, [pc, #52]	@ (8011ca8 <rcl_get_automatic_discovery_range+0x78>)
 8011c74:	4628      	mov	r0, r5
 8011c76:	f7ee fad3 	bl	8000220 <strcmp>
 8011c7a:	b168      	cbz	r0, 8011c98 <rcl_get_automatic_discovery_range+0x68>
 8011c7c:	490b      	ldr	r1, [pc, #44]	@ (8011cac <rcl_get_automatic_discovery_range+0x7c>)
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f7ee face 	bl	8000220 <strcmp>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	d0e4      	beq.n	8011c52 <rcl_get_automatic_discovery_range+0x22>
 8011c88:	4909      	ldr	r1, [pc, #36]	@ (8011cb0 <rcl_get_automatic_discovery_range+0x80>)
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f7ee fac8 	bl	8000220 <strcmp>
 8011c90:	b910      	cbnz	r0, 8011c98 <rcl_get_automatic_discovery_range+0x68>
 8011c92:	2304      	movs	r3, #4
 8011c94:	7023      	strb	r3, [r4, #0]
 8011c96:	e7de      	b.n	8011c56 <rcl_get_automatic_discovery_range+0x26>
 8011c98:	2302      	movs	r3, #2
 8011c9a:	7023      	strb	r3, [r4, #0]
 8011c9c:	e7db      	b.n	8011c56 <rcl_get_automatic_discovery_range+0x26>
 8011c9e:	bf00      	nop
 8011ca0:	08014c48 	.word	0x08014c48
 8011ca4:	08014c68 	.word	0x08014c68
 8011ca8:	08014c6c 	.word	0x08014c6c
 8011cac:	08014c78 	.word	0x08014c78
 8011cb0:	08014c80 	.word	0x08014c80

08011cb4 <rcl_automatic_discovery_range_to_string>:
 8011cb4:	2804      	cmp	r0, #4
 8011cb6:	bf9a      	itte	ls
 8011cb8:	4b02      	ldrls	r3, [pc, #8]	@ (8011cc4 <rcl_automatic_discovery_range_to_string+0x10>)
 8011cba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011cbe:	2000      	movhi	r0, #0
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop
 8011cc4:	08014d70 	.word	0x08014d70

08011cc8 <rcl_get_discovery_static_peers>:
 8011cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ccc:	b08c      	sub	sp, #48	@ 0x30
 8011cce:	2300      	movs	r3, #0
 8011cd0:	9304      	str	r3, [sp, #16]
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d04e      	beq.n	8011d74 <rcl_get_discovery_static_peers+0xac>
 8011cd6:	460d      	mov	r5, r1
 8011cd8:	2900      	cmp	r1, #0
 8011cda:	d04b      	beq.n	8011d74 <rcl_get_discovery_static_peers+0xac>
 8011cdc:	4604      	mov	r4, r0
 8011cde:	a904      	add	r1, sp, #16
 8011ce0:	482d      	ldr	r0, [pc, #180]	@ (8011d98 <rcl_get_discovery_static_peers+0xd0>)
 8011ce2:	f7fe fb6d 	bl	80103c0 <rcutils_get_env>
 8011ce6:	b118      	cbz	r0, 8011cf0 <rcl_get_discovery_static_peers+0x28>
 8011ce8:	2001      	movs	r0, #1
 8011cea:	b00c      	add	sp, #48	@ 0x30
 8011cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf0:	9b04      	ldr	r3, [sp, #16]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d0f8      	beq.n	8011ce8 <rcl_get_discovery_static_peers+0x20>
 8011cf6:	af05      	add	r7, sp, #20
 8011cf8:	4638      	mov	r0, r7
 8011cfa:	f000 fc2d 	bl	8012558 <rcutils_get_zero_initialized_string_array>
 8011cfe:	f105 0308 	add.w	r3, r5, #8
 8011d02:	9703      	str	r7, [sp, #12]
 8011d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d08:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011d0c:	9804      	ldr	r0, [sp, #16]
 8011d0e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011d12:	213b      	movs	r1, #59	@ 0x3b
 8011d14:	f000 fb6e 	bl	80123f4 <rcutils_split>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	d1e5      	bne.n	8011ce8 <rcl_get_discovery_static_peers+0x20>
 8011d1c:	9905      	ldr	r1, [sp, #20]
 8011d1e:	462a      	mov	r2, r5
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7fe fe6b 	bl	80109fc <rmw_discovery_options_init>
 8011d26:	4606      	mov	r6, r0
 8011d28:	bb90      	cbnz	r0, 8011d90 <rcl_get_discovery_static_peers+0xc8>
 8011d2a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011d2e:	f1b9 0f00 	cmp.w	r9, #0
 8011d32:	d026      	beq.n	8011d82 <rcl_get_discovery_static_peers+0xba>
 8011d34:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011d38:	4680      	mov	r8, r0
 8011d3a:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f7ee face 	bl	80002e0 <strlen>
 8011d44:	28ff      	cmp	r0, #255	@ 0xff
 8011d46:	4629      	mov	r1, r5
 8011d48:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8011d4c:	d816      	bhi.n	8011d7c <rcl_get_discovery_static_peers+0xb4>
 8011d4e:	6860      	ldr	r0, [r4, #4]
 8011d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011d54:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8011d58:	f001 f9d5 	bl	8013106 <strncpy>
 8011d5c:	6863      	ldr	r3, [r4, #4]
 8011d5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011d62:	3601      	adds	r6, #1
 8011d64:	442b      	add	r3, r5
 8011d66:	454e      	cmp	r6, r9
 8011d68:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8011d6c:	d209      	bcs.n	8011d82 <rcl_get_discovery_static_peers+0xba>
 8011d6e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8011d72:	e7e2      	b.n	8011d3a <rcl_get_discovery_static_peers+0x72>
 8011d74:	200b      	movs	r0, #11
 8011d76:	b00c      	add	sp, #48	@ 0x30
 8011d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d7c:	3601      	adds	r6, #1
 8011d7e:	454e      	cmp	r6, r9
 8011d80:	d3db      	bcc.n	8011d3a <rcl_get_discovery_static_peers+0x72>
 8011d82:	4638      	mov	r0, r7
 8011d84:	f000 fc28 	bl	80125d8 <rcutils_string_array_fini>
 8011d88:	3800      	subs	r0, #0
 8011d8a:	bf18      	it	ne
 8011d8c:	2001      	movne	r0, #1
 8011d8e:	e7ac      	b.n	8011cea <rcl_get_discovery_static_peers+0x22>
 8011d90:	f7fd fc96 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 8011d94:	e7a9      	b.n	8011cea <rcl_get_discovery_static_peers+0x22>
 8011d96:	bf00      	nop
 8011d98:	08014c90 	.word	0x08014c90

08011d9c <rcl_get_default_domain_id>:
 8011d9c:	b530      	push	{r4, r5, lr}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	2300      	movs	r3, #0
 8011da2:	9300      	str	r3, [sp, #0]
 8011da4:	b1f0      	cbz	r0, 8011de4 <rcl_get_default_domain_id+0x48>
 8011da6:	4604      	mov	r4, r0
 8011da8:	4669      	mov	r1, sp
 8011daa:	4812      	ldr	r0, [pc, #72]	@ (8011df4 <rcl_get_default_domain_id+0x58>)
 8011dac:	f7fe fb08 	bl	80103c0 <rcutils_get_env>
 8011db0:	4602      	mov	r2, r0
 8011db2:	b108      	cbz	r0, 8011db8 <rcl_get_default_domain_id+0x1c>
 8011db4:	2001      	movs	r0, #1
 8011db6:	e004      	b.n	8011dc2 <rcl_get_default_domain_id+0x26>
 8011db8:	9800      	ldr	r0, [sp, #0]
 8011dba:	b108      	cbz	r0, 8011dc0 <rcl_get_default_domain_id+0x24>
 8011dbc:	7803      	ldrb	r3, [r0, #0]
 8011dbe:	b913      	cbnz	r3, 8011dc6 <rcl_get_default_domain_id+0x2a>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	b003      	add	sp, #12
 8011dc4:	bd30      	pop	{r4, r5, pc}
 8011dc6:	a901      	add	r1, sp, #4
 8011dc8:	9201      	str	r2, [sp, #4]
 8011dca:	f000 fef9 	bl	8012bc0 <strtoul>
 8011dce:	4605      	mov	r5, r0
 8011dd0:	b158      	cbz	r0, 8011dea <rcl_get_default_domain_id+0x4e>
 8011dd2:	1c43      	adds	r3, r0, #1
 8011dd4:	d104      	bne.n	8011de0 <rcl_get_default_domain_id+0x44>
 8011dd6:	f001 fa6b 	bl	80132b0 <__errno>
 8011dda:	6803      	ldr	r3, [r0, #0]
 8011ddc:	2b22      	cmp	r3, #34	@ 0x22
 8011dde:	d0e9      	beq.n	8011db4 <rcl_get_default_domain_id+0x18>
 8011de0:	6025      	str	r5, [r4, #0]
 8011de2:	e7ed      	b.n	8011dc0 <rcl_get_default_domain_id+0x24>
 8011de4:	200b      	movs	r0, #11
 8011de6:	b003      	add	sp, #12
 8011de8:	bd30      	pop	{r4, r5, pc}
 8011dea:	9b01      	ldr	r3, [sp, #4]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d0f6      	beq.n	8011de0 <rcl_get_default_domain_id+0x44>
 8011df2:	e7df      	b.n	8011db4 <rcl_get_default_domain_id+0x18>
 8011df4:	08014d84 	.word	0x08014d84

08011df8 <rcl_expand_topic_name>:
 8011df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dfc:	b08b      	sub	sp, #44	@ 0x2c
 8011dfe:	9306      	str	r3, [sp, #24]
 8011e00:	2800      	cmp	r0, #0
 8011e02:	f000 80ad 	beq.w	8011f60 <rcl_expand_topic_name+0x168>
 8011e06:	460e      	mov	r6, r1
 8011e08:	2900      	cmp	r1, #0
 8011e0a:	f000 80a9 	beq.w	8011f60 <rcl_expand_topic_name+0x168>
 8011e0e:	4617      	mov	r7, r2
 8011e10:	2a00      	cmp	r2, #0
 8011e12:	f000 80a5 	beq.w	8011f60 <rcl_expand_topic_name+0x168>
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f000 80a2 	beq.w	8011f60 <rcl_expand_topic_name+0x168>
 8011e1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	f000 809e 	beq.w	8011f60 <rcl_expand_topic_name+0x168>
 8011e24:	2200      	movs	r2, #0
 8011e26:	a909      	add	r1, sp, #36	@ 0x24
 8011e28:	4680      	mov	r8, r0
 8011e2a:	f000 f9f1 	bl	8012210 <rcl_validate_topic_name>
 8011e2e:	4605      	mov	r5, r0
 8011e30:	2800      	cmp	r0, #0
 8011e32:	f040 8096 	bne.w	8011f62 <rcl_expand_topic_name+0x16a>
 8011e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f040 809a 	bne.w	8011f72 <rcl_expand_topic_name+0x17a>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	a909      	add	r1, sp, #36	@ 0x24
 8011e42:	4630      	mov	r0, r6
 8011e44:	f7fe fef4 	bl	8010c30 <rmw_validate_node_name>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f040 808e 	bne.w	8011f6a <rcl_expand_topic_name+0x172>
 8011e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e50:	2a00      	cmp	r2, #0
 8011e52:	f040 8093 	bne.w	8011f7c <rcl_expand_topic_name+0x184>
 8011e56:	a909      	add	r1, sp, #36	@ 0x24
 8011e58:	4638      	mov	r0, r7
 8011e5a:	f7fe fecb 	bl	8010bf4 <rmw_validate_namespace>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	f040 8083 	bne.w	8011f6a <rcl_expand_topic_name+0x172>
 8011e64:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011e66:	2d00      	cmp	r5, #0
 8011e68:	f040 80f4 	bne.w	8012054 <rcl_expand_topic_name+0x25c>
 8011e6c:	217b      	movs	r1, #123	@ 0x7b
 8011e6e:	4640      	mov	r0, r8
 8011e70:	f001 f92a 	bl	80130c8 <strchr>
 8011e74:	f898 3000 	ldrb.w	r3, [r8]
 8011e78:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	f000 809f 	beq.w	8011fbe <rcl_expand_topic_name+0x1c6>
 8011e80:	2b7e      	cmp	r3, #126	@ 0x7e
 8011e82:	f040 80e9 	bne.w	8012058 <rcl_expand_topic_name+0x260>
 8011e86:	4638      	mov	r0, r7
 8011e88:	f7ee fa2a 	bl	80002e0 <strlen>
 8011e8c:	4a82      	ldr	r2, [pc, #520]	@ (8012098 <rcl_expand_topic_name+0x2a0>)
 8011e8e:	4b83      	ldr	r3, [pc, #524]	@ (801209c <rcl_expand_topic_name+0x2a4>)
 8011e90:	2801      	cmp	r0, #1
 8011e92:	bf08      	it	eq
 8011e94:	4613      	moveq	r3, r2
 8011e96:	9302      	str	r3, [sp, #8]
 8011e98:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011e9a:	9300      	str	r3, [sp, #0]
 8011e9c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8011ea0:	f108 0301 	add.w	r3, r8, #1
 8011ea4:	9305      	str	r3, [sp, #20]
 8011ea6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011eaa:	9301      	str	r3, [sp, #4]
 8011eac:	ab14      	add	r3, sp, #80	@ 0x50
 8011eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011eb0:	f7fe faae 	bl	8010410 <rcutils_format_string_limit>
 8011eb4:	4682      	mov	sl, r0
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	f000 80d1 	beq.w	801205e <rcl_expand_topic_name+0x266>
 8011ebc:	2c00      	cmp	r4, #0
 8011ebe:	f000 8085 	beq.w	8011fcc <rcl_expand_topic_name+0x1d4>
 8011ec2:	217b      	movs	r1, #123	@ 0x7b
 8011ec4:	f001 f900 	bl	80130c8 <strchr>
 8011ec8:	46d1      	mov	r9, sl
 8011eca:	4604      	mov	r4, r0
 8011ecc:	9507      	str	r5, [sp, #28]
 8011ece:	464d      	mov	r5, r9
 8011ed0:	2c00      	cmp	r4, #0
 8011ed2:	f000 80a0 	beq.w	8012016 <rcl_expand_topic_name+0x21e>
 8011ed6:	217d      	movs	r1, #125	@ 0x7d
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f001 f8f5 	bl	80130c8 <strchr>
 8011ede:	eba0 0904 	sub.w	r9, r0, r4
 8011ee2:	f109 0b01 	add.w	fp, r9, #1
 8011ee6:	486e      	ldr	r0, [pc, #440]	@ (80120a0 <rcl_expand_topic_name+0x2a8>)
 8011ee8:	465a      	mov	r2, fp
 8011eea:	4621      	mov	r1, r4
 8011eec:	f001 f8f9 	bl	80130e2 <strncmp>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d069      	beq.n	8011fc8 <rcl_expand_topic_name+0x1d0>
 8011ef4:	486b      	ldr	r0, [pc, #428]	@ (80120a4 <rcl_expand_topic_name+0x2ac>)
 8011ef6:	465a      	mov	r2, fp
 8011ef8:	4621      	mov	r1, r4
 8011efa:	f001 f8f2 	bl	80130e2 <strncmp>
 8011efe:	b130      	cbz	r0, 8011f0e <rcl_expand_topic_name+0x116>
 8011f00:	4869      	ldr	r0, [pc, #420]	@ (80120a8 <rcl_expand_topic_name+0x2b0>)
 8011f02:	465a      	mov	r2, fp
 8011f04:	4621      	mov	r1, r4
 8011f06:	f001 f8ec 	bl	80130e2 <strncmp>
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d138      	bne.n	8011f80 <rcl_expand_topic_name+0x188>
 8011f0e:	46b9      	mov	r9, r7
 8011f10:	ab16      	add	r3, sp, #88	@ 0x58
 8011f12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f16:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011f1a:	ab14      	add	r3, sp, #80	@ 0x50
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	cb0c      	ldmia	r3, {r2, r3}
 8011f20:	4659      	mov	r1, fp
 8011f22:	f7fe fbc9 	bl	80106b8 <rcutils_strndup>
 8011f26:	4604      	mov	r4, r0
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	f000 809d 	beq.w	8012068 <rcl_expand_topic_name+0x270>
 8011f2e:	464a      	mov	r2, r9
 8011f30:	4628      	mov	r0, r5
 8011f32:	ab14      	add	r3, sp, #80	@ 0x50
 8011f34:	4621      	mov	r1, r4
 8011f36:	f7fe faa5 	bl	8010484 <rcutils_repl_str>
 8011f3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011f3c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011f3e:	4605      	mov	r5, r0
 8011f40:	4620      	mov	r0, r4
 8011f42:	4798      	blx	r3
 8011f44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011f46:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011f48:	4650      	mov	r0, sl
 8011f4a:	4798      	blx	r3
 8011f4c:	2d00      	cmp	r5, #0
 8011f4e:	f000 8086 	beq.w	801205e <rcl_expand_topic_name+0x266>
 8011f52:	217b      	movs	r1, #123	@ 0x7b
 8011f54:	4628      	mov	r0, r5
 8011f56:	f001 f8b7 	bl	80130c8 <strchr>
 8011f5a:	46aa      	mov	sl, r5
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	e7b7      	b.n	8011ed0 <rcl_expand_topic_name+0xd8>
 8011f60:	250b      	movs	r5, #11
 8011f62:	4628      	mov	r0, r5
 8011f64:	b00b      	add	sp, #44	@ 0x2c
 8011f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f6a:	f7fd fba9 	bl	800f6c0 <rcl_convert_rmw_ret_to_rcl_ret>
 8011f6e:	4605      	mov	r5, r0
 8011f70:	e7f7      	b.n	8011f62 <rcl_expand_topic_name+0x16a>
 8011f72:	2567      	movs	r5, #103	@ 0x67
 8011f74:	4628      	mov	r0, r5
 8011f76:	b00b      	add	sp, #44	@ 0x2c
 8011f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7c:	25c9      	movs	r5, #201	@ 0xc9
 8011f7e:	e7f0      	b.n	8011f62 <rcl_expand_topic_name+0x16a>
 8011f80:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8011f84:	9806      	ldr	r0, [sp, #24]
 8011f86:	1c61      	adds	r1, r4, #1
 8011f88:	f7fe fcb2 	bl	80108f0 <rcutils_string_map_getn>
 8011f8c:	4681      	mov	r9, r0
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d1be      	bne.n	8011f10 <rcl_expand_topic_name+0x118>
 8011f92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011f94:	ab16      	add	r3, sp, #88	@ 0x58
 8011f96:	6010      	str	r0, [r2, #0]
 8011f98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f9c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011fa0:	ab14      	add	r3, sp, #80	@ 0x50
 8011fa2:	cb0c      	ldmia	r3, {r2, r3}
 8011fa4:	4659      	mov	r1, fp
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f7fe fb86 	bl	80106b8 <rcutils_strndup>
 8011fac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011fae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011fb0:	4798      	blx	r3
 8011fb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011fb4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011fb6:	4650      	mov	r0, sl
 8011fb8:	4798      	blx	r3
 8011fba:	2569      	movs	r5, #105	@ 0x69
 8011fbc:	e7d1      	b.n	8011f62 <rcl_expand_topic_name+0x16a>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d059      	beq.n	8012076 <rcl_expand_topic_name+0x27e>
 8011fc2:	46c1      	mov	r9, r8
 8011fc4:	46aa      	mov	sl, r5
 8011fc6:	e781      	b.n	8011ecc <rcl_expand_topic_name+0xd4>
 8011fc8:	46b1      	mov	r9, r6
 8011fca:	e7a1      	b.n	8011f10 <rcl_expand_topic_name+0x118>
 8011fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd0:	2b2f      	cmp	r3, #47	@ 0x2f
 8011fd2:	d01c      	beq.n	801200e <rcl_expand_topic_name+0x216>
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	f7ee f983 	bl	80002e0 <strlen>
 8011fda:	4a34      	ldr	r2, [pc, #208]	@ (80120ac <rcl_expand_topic_name+0x2b4>)
 8011fdc:	4b34      	ldr	r3, [pc, #208]	@ (80120b0 <rcl_expand_topic_name+0x2b8>)
 8011fde:	f8cd a010 	str.w	sl, [sp, #16]
 8011fe2:	2801      	cmp	r0, #1
 8011fe4:	bf18      	it	ne
 8011fe6:	4613      	movne	r3, r2
 8011fe8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011fec:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8011ff0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011ff2:	9703      	str	r7, [sp, #12]
 8011ff4:	9200      	str	r2, [sp, #0]
 8011ff6:	ab14      	add	r3, sp, #80	@ 0x50
 8011ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ffa:	f7fe fa09 	bl	8010410 <rcutils_format_string_limit>
 8011ffe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012000:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012002:	4604      	mov	r4, r0
 8012004:	4650      	mov	r0, sl
 8012006:	4798      	blx	r3
 8012008:	46a2      	mov	sl, r4
 801200a:	4653      	mov	r3, sl
 801200c:	b33b      	cbz	r3, 801205e <rcl_expand_topic_name+0x266>
 801200e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012010:	f8c3 a000 	str.w	sl, [r3]
 8012014:	e7a5      	b.n	8011f62 <rcl_expand_topic_name+0x16a>
 8012016:	4653      	mov	r3, sl
 8012018:	9d07      	ldr	r5, [sp, #28]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d1d6      	bne.n	8011fcc <rcl_expand_topic_name+0x1d4>
 801201e:	f898 3000 	ldrb.w	r3, [r8]
 8012022:	2b2f      	cmp	r3, #47	@ 0x2f
 8012024:	d0f3      	beq.n	801200e <rcl_expand_topic_name+0x216>
 8012026:	4638      	mov	r0, r7
 8012028:	f7ee f95a 	bl	80002e0 <strlen>
 801202c:	4a1f      	ldr	r2, [pc, #124]	@ (80120ac <rcl_expand_topic_name+0x2b4>)
 801202e:	4b20      	ldr	r3, [pc, #128]	@ (80120b0 <rcl_expand_topic_name+0x2b8>)
 8012030:	f8cd 8010 	str.w	r8, [sp, #16]
 8012034:	2801      	cmp	r0, #1
 8012036:	bf18      	it	ne
 8012038:	4613      	movne	r3, r2
 801203a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801203e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012042:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012044:	9703      	str	r7, [sp, #12]
 8012046:	9200      	str	r2, [sp, #0]
 8012048:	ab14      	add	r3, sp, #80	@ 0x50
 801204a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801204c:	f7fe f9e0 	bl	8010410 <rcutils_format_string_limit>
 8012050:	4682      	mov	sl, r0
 8012052:	e7da      	b.n	801200a <rcl_expand_topic_name+0x212>
 8012054:	25ca      	movs	r5, #202	@ 0xca
 8012056:	e784      	b.n	8011f62 <rcl_expand_topic_name+0x16a>
 8012058:	2800      	cmp	r0, #0
 801205a:	d1b2      	bne.n	8011fc2 <rcl_expand_topic_name+0x1ca>
 801205c:	e7e3      	b.n	8012026 <rcl_expand_topic_name+0x22e>
 801205e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012060:	2300      	movs	r3, #0
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	250a      	movs	r5, #10
 8012066:	e77c      	b.n	8011f62 <rcl_expand_topic_name+0x16a>
 8012068:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801206c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801206e:	6014      	str	r4, [r2, #0]
 8012070:	4650      	mov	r0, sl
 8012072:	4798      	blx	r3
 8012074:	e7f6      	b.n	8012064 <rcl_expand_topic_name+0x26c>
 8012076:	ab17      	add	r3, sp, #92	@ 0x5c
 8012078:	e893 0003 	ldmia.w	r3, {r0, r1}
 801207c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012080:	ab14      	add	r3, sp, #80	@ 0x50
 8012082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012084:	4640      	mov	r0, r8
 8012086:	f7fe fae1 	bl	801064c <rcutils_strdup>
 801208a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801208c:	6018      	str	r0, [r3, #0]
 801208e:	2800      	cmp	r0, #0
 8012090:	f47f af67 	bne.w	8011f62 <rcl_expand_topic_name+0x16a>
 8012094:	e7e6      	b.n	8012064 <rcl_expand_topic_name+0x26c>
 8012096:	bf00      	nop
 8012098:	080143c8 	.word	0x080143c8
 801209c:	08014d94 	.word	0x08014d94
 80120a0:	08014d9c 	.word	0x08014d9c
 80120a4:	08014da4 	.word	0x08014da4
 80120a8:	08014dac 	.word	0x08014dac
 80120ac:	080143b4 	.word	0x080143b4
 80120b0:	080143d8 	.word	0x080143d8

080120b4 <rcl_get_default_topic_name_substitutions>:
 80120b4:	2800      	cmp	r0, #0
 80120b6:	bf0c      	ite	eq
 80120b8:	200b      	moveq	r0, #11
 80120ba:	2000      	movne	r0, #0
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop

080120c0 <rcl_get_zero_initialized_guard_condition>:
 80120c0:	4a03      	ldr	r2, [pc, #12]	@ (80120d0 <rcl_get_zero_initialized_guard_condition+0x10>)
 80120c2:	4603      	mov	r3, r0
 80120c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80120cc:	4618      	mov	r0, r3
 80120ce:	4770      	bx	lr
 80120d0:	08014db8 	.word	0x08014db8

080120d4 <rcl_guard_condition_init_from_rmw>:
 80120d4:	b082      	sub	sp, #8
 80120d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80120e0:	4604      	mov	r4, r0
 80120e2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80120e6:	460e      	mov	r6, r1
 80120e8:	4617      	mov	r7, r2
 80120ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80120ee:	f10d 0e04 	add.w	lr, sp, #4
 80120f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80120f6:	f8dc 3000 	ldr.w	r3, [ip]
 80120fa:	f8ce 3000 	str.w	r3, [lr]
 80120fe:	a801      	add	r0, sp, #4
 8012100:	f7f7 f9d8 	bl	80094b4 <rcutils_allocator_is_valid>
 8012104:	b350      	cbz	r0, 801215c <rcl_guard_condition_init_from_rmw+0x88>
 8012106:	b34c      	cbz	r4, 801215c <rcl_guard_condition_init_from_rmw+0x88>
 8012108:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801210c:	f1b8 0f00 	cmp.w	r8, #0
 8012110:	d11e      	bne.n	8012150 <rcl_guard_condition_init_from_rmw+0x7c>
 8012112:	b31f      	cbz	r7, 801215c <rcl_guard_condition_init_from_rmw+0x88>
 8012114:	4638      	mov	r0, r7
 8012116:	f7fd faf3 	bl	800f700 <rcl_context_is_valid>
 801211a:	b328      	cbz	r0, 8012168 <rcl_guard_condition_init_from_rmw+0x94>
 801211c:	9b01      	ldr	r3, [sp, #4]
 801211e:	9905      	ldr	r1, [sp, #20]
 8012120:	201c      	movs	r0, #28
 8012122:	4798      	blx	r3
 8012124:	4605      	mov	r5, r0
 8012126:	6060      	str	r0, [r4, #4]
 8012128:	b358      	cbz	r0, 8012182 <rcl_guard_condition_init_from_rmw+0xae>
 801212a:	b1fe      	cbz	r6, 801216c <rcl_guard_condition_init_from_rmw+0x98>
 801212c:	6006      	str	r6, [r0, #0]
 801212e:	f880 8004 	strb.w	r8, [r0, #4]
 8012132:	ac01      	add	r4, sp, #4
 8012134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012136:	f105 0c08 	add.w	ip, r5, #8
 801213a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801213e:	6823      	ldr	r3, [r4, #0]
 8012140:	f8cc 3000 	str.w	r3, [ip]
 8012144:	2000      	movs	r0, #0
 8012146:	b006      	add	sp, #24
 8012148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801214c:	b002      	add	sp, #8
 801214e:	4770      	bx	lr
 8012150:	2064      	movs	r0, #100	@ 0x64
 8012152:	b006      	add	sp, #24
 8012154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012158:	b002      	add	sp, #8
 801215a:	4770      	bx	lr
 801215c:	200b      	movs	r0, #11
 801215e:	b006      	add	sp, #24
 8012160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012164:	b002      	add	sp, #8
 8012166:	4770      	bx	lr
 8012168:	2065      	movs	r0, #101	@ 0x65
 801216a:	e7f2      	b.n	8012152 <rcl_guard_condition_init_from_rmw+0x7e>
 801216c:	6838      	ldr	r0, [r7, #0]
 801216e:	3028      	adds	r0, #40	@ 0x28
 8012170:	f000 fa58 	bl	8012624 <rmw_create_guard_condition>
 8012174:	6028      	str	r0, [r5, #0]
 8012176:	6865      	ldr	r5, [r4, #4]
 8012178:	682e      	ldr	r6, [r5, #0]
 801217a:	b126      	cbz	r6, 8012186 <rcl_guard_condition_init_from_rmw+0xb2>
 801217c:	2301      	movs	r3, #1
 801217e:	712b      	strb	r3, [r5, #4]
 8012180:	e7d7      	b.n	8012132 <rcl_guard_condition_init_from_rmw+0x5e>
 8012182:	200a      	movs	r0, #10
 8012184:	e7e5      	b.n	8012152 <rcl_guard_condition_init_from_rmw+0x7e>
 8012186:	4628      	mov	r0, r5
 8012188:	9b02      	ldr	r3, [sp, #8]
 801218a:	9905      	ldr	r1, [sp, #20]
 801218c:	4798      	blx	r3
 801218e:	2001      	movs	r0, #1
 8012190:	6066      	str	r6, [r4, #4]
 8012192:	e7de      	b.n	8012152 <rcl_guard_condition_init_from_rmw+0x7e>

08012194 <rcl_guard_condition_fini>:
 8012194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012196:	b1d8      	cbz	r0, 80121d0 <rcl_guard_condition_fini+0x3c>
 8012198:	4604      	mov	r4, r0
 801219a:	6840      	ldr	r0, [r0, #4]
 801219c:	b158      	cbz	r0, 80121b6 <rcl_guard_condition_fini+0x22>
 801219e:	6803      	ldr	r3, [r0, #0]
 80121a0:	68c6      	ldr	r6, [r0, #12]
 80121a2:	6987      	ldr	r7, [r0, #24]
 80121a4:	b153      	cbz	r3, 80121bc <rcl_guard_condition_fini+0x28>
 80121a6:	7905      	ldrb	r5, [r0, #4]
 80121a8:	b955      	cbnz	r5, 80121c0 <rcl_guard_condition_fini+0x2c>
 80121aa:	4639      	mov	r1, r7
 80121ac:	47b0      	blx	r6
 80121ae:	2300      	movs	r3, #0
 80121b0:	6063      	str	r3, [r4, #4]
 80121b2:	4628      	mov	r0, r5
 80121b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121b6:	4605      	mov	r5, r0
 80121b8:	4628      	mov	r0, r5
 80121ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121bc:	461d      	mov	r5, r3
 80121be:	e7f4      	b.n	80121aa <rcl_guard_condition_fini+0x16>
 80121c0:	4618      	mov	r0, r3
 80121c2:	f000 fa43 	bl	801264c <rmw_destroy_guard_condition>
 80121c6:	1e05      	subs	r5, r0, #0
 80121c8:	bf18      	it	ne
 80121ca:	2501      	movne	r5, #1
 80121cc:	6860      	ldr	r0, [r4, #4]
 80121ce:	e7ec      	b.n	80121aa <rcl_guard_condition_fini+0x16>
 80121d0:	250b      	movs	r5, #11
 80121d2:	4628      	mov	r0, r5
 80121d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121d6:	bf00      	nop

080121d8 <rcl_guard_condition_get_default_options>:
 80121d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121da:	b087      	sub	sp, #28
 80121dc:	4606      	mov	r6, r0
 80121de:	4668      	mov	r0, sp
 80121e0:	f7f7 f93c 	bl	800945c <rcutils_get_default_allocator>
 80121e4:	46ee      	mov	lr, sp
 80121e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121ea:	4c08      	ldr	r4, [pc, #32]	@ (801220c <rcl_guard_condition_get_default_options+0x34>)
 80121ec:	46a4      	mov	ip, r4
 80121ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121f2:	4625      	mov	r5, r4
 80121f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121f6:	4634      	mov	r4, r6
 80121f8:	f8de 7000 	ldr.w	r7, [lr]
 80121fc:	f8cc 7000 	str.w	r7, [ip]
 8012200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012202:	4630      	mov	r0, r6
 8012204:	6027      	str	r7, [r4, #0]
 8012206:	b007      	add	sp, #28
 8012208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801220a:	bf00      	nop
 801220c:	20010b9c 	.word	0x20010b9c

08012210 <rcl_validate_topic_name>:
 8012210:	2800      	cmp	r0, #0
 8012212:	d06b      	beq.n	80122ec <rcl_validate_topic_name+0xdc>
 8012214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012218:	460d      	mov	r5, r1
 801221a:	2900      	cmp	r1, #0
 801221c:	d06d      	beq.n	80122fa <rcl_validate_topic_name+0xea>
 801221e:	4616      	mov	r6, r2
 8012220:	4604      	mov	r4, r0
 8012222:	f7ee f85d 	bl	80002e0 <strlen>
 8012226:	b190      	cbz	r0, 801224e <rcl_validate_topic_name+0x3e>
 8012228:	7821      	ldrb	r1, [r4, #0]
 801222a:	4a71      	ldr	r2, [pc, #452]	@ (80123f0 <rcl_validate_topic_name+0x1e0>)
 801222c:	5c53      	ldrb	r3, [r2, r1]
 801222e:	f013 0304 	ands.w	r3, r3, #4
 8012232:	d15d      	bne.n	80122f0 <rcl_validate_topic_name+0xe0>
 8012234:	1e47      	subs	r7, r0, #1
 8012236:	f814 c007 	ldrb.w	ip, [r4, r7]
 801223a:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801223e:	d10d      	bne.n	801225c <rcl_validate_topic_name+0x4c>
 8012240:	2302      	movs	r3, #2
 8012242:	602b      	str	r3, [r5, #0]
 8012244:	b146      	cbz	r6, 8012258 <rcl_validate_topic_name+0x48>
 8012246:	6037      	str	r7, [r6, #0]
 8012248:	2000      	movs	r0, #0
 801224a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801224e:	2301      	movs	r3, #1
 8012250:	602b      	str	r3, [r5, #0]
 8012252:	b10e      	cbz	r6, 8012258 <rcl_validate_topic_name+0x48>
 8012254:	2300      	movs	r3, #0
 8012256:	6033      	str	r3, [r6, #0]
 8012258:	2000      	movs	r0, #0
 801225a:	e7f6      	b.n	801224a <rcl_validate_topic_name+0x3a>
 801225c:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8012260:	469a      	mov	sl, r3
 8012262:	469e      	mov	lr, r3
 8012264:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8012268:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801226c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8012270:	d85b      	bhi.n	801232a <rcl_validate_topic_name+0x11a>
 8012272:	e8df f00c 	tbb	[pc, ip]
 8012276:	4463      	.short	0x4463
 8012278:	44444444 	.word	0x44444444
 801227c:	44444444 	.word	0x44444444
 8012280:	5a5a5a44 	.word	0x5a5a5a44
 8012284:	5a5a5a5a 	.word	0x5a5a5a5a
 8012288:	44444444 	.word	0x44444444
 801228c:	44444444 	.word	0x44444444
 8012290:	44444444 	.word	0x44444444
 8012294:	44444444 	.word	0x44444444
 8012298:	44444444 	.word	0x44444444
 801229c:	44444444 	.word	0x44444444
 80122a0:	5a5a4444 	.word	0x5a5a4444
 80122a4:	5a2e5a5a 	.word	0x5a2e5a5a
 80122a8:	44444444 	.word	0x44444444
 80122ac:	44444444 	.word	0x44444444
 80122b0:	44444444 	.word	0x44444444
 80122b4:	44444444 	.word	0x44444444
 80122b8:	44444444 	.word	0x44444444
 80122bc:	44444444 	.word	0x44444444
 80122c0:	5a284444 	.word	0x5a284444
 80122c4:	6b73      	.short	0x6b73
 80122c6:	f1ba 0f00 	cmp.w	sl, #0
 80122ca:	d13a      	bne.n	8012342 <rcl_validate_topic_name+0x132>
 80122cc:	4673      	mov	r3, lr
 80122ce:	f04f 0a01 	mov.w	sl, #1
 80122d2:	f10e 0e01 	add.w	lr, lr, #1
 80122d6:	4570      	cmp	r0, lr
 80122d8:	d1c4      	bne.n	8012264 <rcl_validate_topic_name+0x54>
 80122da:	f1ba 0f00 	cmp.w	sl, #0
 80122de:	d048      	beq.n	8012372 <rcl_validate_topic_name+0x162>
 80122e0:	2205      	movs	r2, #5
 80122e2:	602a      	str	r2, [r5, #0]
 80122e4:	2e00      	cmp	r6, #0
 80122e6:	d0b7      	beq.n	8012258 <rcl_validate_topic_name+0x48>
 80122e8:	6033      	str	r3, [r6, #0]
 80122ea:	e7b5      	b.n	8012258 <rcl_validate_topic_name+0x48>
 80122ec:	200b      	movs	r0, #11
 80122ee:	4770      	bx	lr
 80122f0:	2304      	movs	r3, #4
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	2e00      	cmp	r6, #0
 80122f6:	d1ad      	bne.n	8012254 <rcl_validate_topic_name+0x44>
 80122f8:	e7ae      	b.n	8012258 <rcl_validate_topic_name+0x48>
 80122fa:	200b      	movs	r0, #11
 80122fc:	e7a5      	b.n	801224a <rcl_validate_topic_name+0x3a>
 80122fe:	f812 c009 	ldrb.w	ip, [r2, r9]
 8012302:	f01c 0f04 	tst.w	ip, #4
 8012306:	d0e4      	beq.n	80122d2 <rcl_validate_topic_name+0xc2>
 8012308:	f1ba 0f00 	cmp.w	sl, #0
 801230c:	d0e1      	beq.n	80122d2 <rcl_validate_topic_name+0xc2>
 801230e:	f1be 0f00 	cmp.w	lr, #0
 8012312:	d0de      	beq.n	80122d2 <rcl_validate_topic_name+0xc2>
 8012314:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 8012318:	4563      	cmp	r3, ip
 801231a:	d1da      	bne.n	80122d2 <rcl_validate_topic_name+0xc2>
 801231c:	2309      	movs	r3, #9
 801231e:	602b      	str	r3, [r5, #0]
 8012320:	2e00      	cmp	r6, #0
 8012322:	d099      	beq.n	8012258 <rcl_validate_topic_name+0x48>
 8012324:	f8c6 e000 	str.w	lr, [r6]
 8012328:	e796      	b.n	8012258 <rcl_validate_topic_name+0x48>
 801232a:	f1ba 0f00 	cmp.w	sl, #0
 801232e:	bf0c      	ite	eq
 8012330:	2303      	moveq	r3, #3
 8012332:	2308      	movne	r3, #8
 8012334:	602b      	str	r3, [r5, #0]
 8012336:	2e00      	cmp	r6, #0
 8012338:	d1f4      	bne.n	8012324 <rcl_validate_topic_name+0x114>
 801233a:	e78d      	b.n	8012258 <rcl_validate_topic_name+0x48>
 801233c:	f1ba 0f00 	cmp.w	sl, #0
 8012340:	d0c7      	beq.n	80122d2 <rcl_validate_topic_name+0xc2>
 8012342:	2308      	movs	r3, #8
 8012344:	602b      	str	r3, [r5, #0]
 8012346:	2e00      	cmp	r6, #0
 8012348:	d1ec      	bne.n	8012324 <rcl_validate_topic_name+0x114>
 801234a:	e785      	b.n	8012258 <rcl_validate_topic_name+0x48>
 801234c:	f1be 0f00 	cmp.w	lr, #0
 8012350:	d0bf      	beq.n	80122d2 <rcl_validate_topic_name+0xc2>
 8012352:	2306      	movs	r3, #6
 8012354:	602b      	str	r3, [r5, #0]
 8012356:	2e00      	cmp	r6, #0
 8012358:	d1e4      	bne.n	8012324 <rcl_validate_topic_name+0x114>
 801235a:	e77d      	b.n	8012258 <rcl_validate_topic_name+0x48>
 801235c:	f1ba 0f00 	cmp.w	sl, #0
 8012360:	d104      	bne.n	801236c <rcl_validate_topic_name+0x15c>
 8012362:	2305      	movs	r3, #5
 8012364:	602b      	str	r3, [r5, #0]
 8012366:	2e00      	cmp	r6, #0
 8012368:	d1dc      	bne.n	8012324 <rcl_validate_topic_name+0x114>
 801236a:	e775      	b.n	8012258 <rcl_validate_topic_name+0x48>
 801236c:	f04f 0a00 	mov.w	sl, #0
 8012370:	e7af      	b.n	80122d2 <rcl_validate_topic_name+0xc2>
 8012372:	297e      	cmp	r1, #126	@ 0x7e
 8012374:	d01d      	beq.n	80123b2 <rcl_validate_topic_name+0x1a2>
 8012376:	2101      	movs	r1, #1
 8012378:	e006      	b.n	8012388 <rcl_validate_topic_name+0x178>
 801237a:	458e      	cmp	lr, r1
 801237c:	f104 0401 	add.w	r4, r4, #1
 8012380:	f101 0301 	add.w	r3, r1, #1
 8012384:	d912      	bls.n	80123ac <rcl_validate_topic_name+0x19c>
 8012386:	4619      	mov	r1, r3
 8012388:	4557      	cmp	r7, sl
 801238a:	f10a 0a01 	add.w	sl, sl, #1
 801238e:	d0f4      	beq.n	801237a <rcl_validate_topic_name+0x16a>
 8012390:	7823      	ldrb	r3, [r4, #0]
 8012392:	2b2f      	cmp	r3, #47	@ 0x2f
 8012394:	d1f1      	bne.n	801237a <rcl_validate_topic_name+0x16a>
 8012396:	7863      	ldrb	r3, [r4, #1]
 8012398:	5cd3      	ldrb	r3, [r2, r3]
 801239a:	075b      	lsls	r3, r3, #29
 801239c:	d5ed      	bpl.n	801237a <rcl_validate_topic_name+0x16a>
 801239e:	2304      	movs	r3, #4
 80123a0:	602b      	str	r3, [r5, #0]
 80123a2:	2e00      	cmp	r6, #0
 80123a4:	f43f af58 	beq.w	8012258 <rcl_validate_topic_name+0x48>
 80123a8:	6031      	str	r1, [r6, #0]
 80123aa:	e755      	b.n	8012258 <rcl_validate_topic_name+0x48>
 80123ac:	2300      	movs	r3, #0
 80123ae:	602b      	str	r3, [r5, #0]
 80123b0:	e752      	b.n	8012258 <rcl_validate_topic_name+0x48>
 80123b2:	4653      	mov	r3, sl
 80123b4:	2101      	movs	r1, #1
 80123b6:	e00a      	b.n	80123ce <rcl_validate_topic_name+0x1be>
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d012      	beq.n	80123e2 <rcl_validate_topic_name+0x1d2>
 80123bc:	458e      	cmp	lr, r1
 80123be:	f103 0301 	add.w	r3, r3, #1
 80123c2:	f104 0401 	add.w	r4, r4, #1
 80123c6:	f101 0001 	add.w	r0, r1, #1
 80123ca:	d9ef      	bls.n	80123ac <rcl_validate_topic_name+0x19c>
 80123cc:	4601      	mov	r1, r0
 80123ce:	429f      	cmp	r7, r3
 80123d0:	d0f4      	beq.n	80123bc <rcl_validate_topic_name+0x1ac>
 80123d2:	7820      	ldrb	r0, [r4, #0]
 80123d4:	282f      	cmp	r0, #47	@ 0x2f
 80123d6:	d1ef      	bne.n	80123b8 <rcl_validate_topic_name+0x1a8>
 80123d8:	7860      	ldrb	r0, [r4, #1]
 80123da:	5c10      	ldrb	r0, [r2, r0]
 80123dc:	0740      	lsls	r0, r0, #29
 80123de:	d5ed      	bpl.n	80123bc <rcl_validate_topic_name+0x1ac>
 80123e0:	e7dd      	b.n	801239e <rcl_validate_topic_name+0x18e>
 80123e2:	2207      	movs	r2, #7
 80123e4:	602a      	str	r2, [r5, #0]
 80123e6:	2e00      	cmp	r6, #0
 80123e8:	f47f af7e 	bne.w	80122e8 <rcl_validate_topic_name+0xd8>
 80123ec:	e734      	b.n	8012258 <rcl_validate_topic_name+0x48>
 80123ee:	bf00      	nop
 80123f0:	08014f22 	.word	0x08014f22

080123f4 <rcutils_split>:
 80123f4:	b082      	sub	sp, #8
 80123f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123fa:	b08b      	sub	sp, #44	@ 0x2c
 80123fc:	ac14      	add	r4, sp, #80	@ 0x50
 80123fe:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8012400:	e884 000c 	stmia.w	r4, {r2, r3}
 8012404:	2f00      	cmp	r7, #0
 8012406:	f000 809f 	beq.w	8012548 <rcutils_split+0x154>
 801240a:	4606      	mov	r6, r0
 801240c:	2800      	cmp	r0, #0
 801240e:	d071      	beq.n	80124f4 <rcutils_split+0x100>
 8012410:	7804      	ldrb	r4, [r0, #0]
 8012412:	2c00      	cmp	r4, #0
 8012414:	d06e      	beq.n	80124f4 <rcutils_split+0x100>
 8012416:	460d      	mov	r5, r1
 8012418:	f7ed ff62 	bl	80002e0 <strlen>
 801241c:	1833      	adds	r3, r6, r0
 801241e:	1b64      	subs	r4, r4, r5
 8012420:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012424:	4680      	mov	r8, r0
 8012426:	fab4 f484 	clz	r4, r4
 801242a:	0964      	lsrs	r4, r4, #5
 801242c:	42ab      	cmp	r3, r5
 801242e:	bf08      	it	eq
 8012430:	f1a8 0801 	subeq.w	r8, r8, #1
 8012434:	4544      	cmp	r4, r8
 8012436:	d278      	bcs.n	801252a <rcutils_split+0x136>
 8012438:	1933      	adds	r3, r6, r4
 801243a:	eb06 0008 	add.w	r0, r6, r8
 801243e:	2101      	movs	r1, #1
 8012440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012444:	42aa      	cmp	r2, r5
 8012446:	bf08      	it	eq
 8012448:	3101      	addeq	r1, #1
 801244a:	4283      	cmp	r3, r0
 801244c:	d1f8      	bne.n	8012440 <rcutils_split+0x4c>
 801244e:	aa14      	add	r2, sp, #80	@ 0x50
 8012450:	4638      	mov	r0, r7
 8012452:	f000 f89f 	bl	8012594 <rcutils_string_array_init>
 8012456:	4681      	mov	r9, r0
 8012458:	2800      	cmp	r0, #0
 801245a:	d159      	bne.n	8012510 <rcutils_split+0x11c>
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	46a2      	mov	sl, r4
 8012460:	e002      	b.n	8012468 <rcutils_split+0x74>
 8012462:	3401      	adds	r4, #1
 8012464:	4544      	cmp	r4, r8
 8012466:	d222      	bcs.n	80124ae <rcutils_split+0xba>
 8012468:	5d33      	ldrb	r3, [r6, r4]
 801246a:	42ab      	cmp	r3, r5
 801246c:	d1f9      	bne.n	8012462 <rcutils_split+0x6e>
 801246e:	4554      	cmp	r4, sl
 8012470:	eba4 0b0a 	sub.w	fp, r4, sl
 8012474:	d037      	beq.n	80124e6 <rcutils_split+0xf2>
 8012476:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012478:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801247a:	9201      	str	r2, [sp, #4]
 801247c:	f10b 0002 	add.w	r0, fp, #2
 8012480:	4798      	blx	r3
 8012482:	9a01      	ldr	r2, [sp, #4]
 8012484:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801248e:	eb06 030a 	add.w	r3, r6, sl
 8012492:	f10b 0101 	add.w	r1, fp, #1
 8012496:	2800      	cmp	r0, #0
 8012498:	d038      	beq.n	801250c <rcutils_split+0x118>
 801249a:	4a2e      	ldr	r2, [pc, #184]	@ (8012554 <rcutils_split+0x160>)
 801249c:	f000 fcc8 	bl	8012e30 <sniprintf>
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	f109 0901 	add.w	r9, r9, #1
 80124a6:	3401      	adds	r4, #1
 80124a8:	4544      	cmp	r4, r8
 80124aa:	46a2      	mov	sl, r4
 80124ac:	d3dc      	bcc.n	8012468 <rcutils_split+0x74>
 80124ae:	4554      	cmp	r4, sl
 80124b0:	d043      	beq.n	801253a <rcutils_split+0x146>
 80124b2:	eba4 040a 	sub.w	r4, r4, sl
 80124b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80124b8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80124ba:	9201      	str	r2, [sp, #4]
 80124bc:	1ca0      	adds	r0, r4, #2
 80124be:	4798      	blx	r3
 80124c0:	9a01      	ldr	r2, [sp, #4]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 80124c8:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80124cc:	b300      	cbz	r0, 8012510 <rcutils_split+0x11c>
 80124ce:	4a21      	ldr	r2, [pc, #132]	@ (8012554 <rcutils_split+0x160>)
 80124d0:	eb06 030a 	add.w	r3, r6, sl
 80124d4:	1c61      	adds	r1, r4, #1
 80124d6:	f000 fcab 	bl	8012e30 <sniprintf>
 80124da:	2000      	movs	r0, #0
 80124dc:	b00b      	add	sp, #44	@ 0x2c
 80124de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e2:	b002      	add	sp, #8
 80124e4:	4770      	bx	lr
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	3b01      	subs	r3, #1
 80124ea:	2100      	movs	r1, #0
 80124ec:	603b      	str	r3, [r7, #0]
 80124ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80124f2:	e7d8      	b.n	80124a6 <rcutils_split+0xb2>
 80124f4:	a802      	add	r0, sp, #8
 80124f6:	ac02      	add	r4, sp, #8
 80124f8:	f000 f82e 	bl	8012558 <rcutils_get_zero_initialized_string_array>
 80124fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012500:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012504:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012508:	2000      	movs	r0, #0
 801250a:	e7e7      	b.n	80124dc <rcutils_split+0xe8>
 801250c:	f8c7 9000 	str.w	r9, [r7]
 8012510:	4638      	mov	r0, r7
 8012512:	f000 f861 	bl	80125d8 <rcutils_string_array_fini>
 8012516:	b928      	cbnz	r0, 8012524 <rcutils_split+0x130>
 8012518:	200a      	movs	r0, #10
 801251a:	b00b      	add	sp, #44	@ 0x2c
 801251c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012520:	b002      	add	sp, #8
 8012522:	4770      	bx	lr
 8012524:	f7f6 ffec 	bl	8009500 <rcutils_reset_error>
 8012528:	e7f6      	b.n	8012518 <rcutils_split+0x124>
 801252a:	aa14      	add	r2, sp, #80	@ 0x50
 801252c:	2101      	movs	r1, #1
 801252e:	4638      	mov	r0, r7
 8012530:	f000 f830 	bl	8012594 <rcutils_string_array_init>
 8012534:	2800      	cmp	r0, #0
 8012536:	d1eb      	bne.n	8012510 <rcutils_split+0x11c>
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	3b01      	subs	r3, #1
 801253e:	2100      	movs	r1, #0
 8012540:	603b      	str	r3, [r7, #0]
 8012542:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8012546:	e7df      	b.n	8012508 <rcutils_split+0x114>
 8012548:	200b      	movs	r0, #11
 801254a:	b00b      	add	sp, #44	@ 0x2c
 801254c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012550:	b002      	add	sp, #8
 8012552:	4770      	bx	lr
 8012554:	080143cc 	.word	0x080143cc

08012558 <rcutils_get_zero_initialized_string_array>:
 8012558:	b570      	push	{r4, r5, r6, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	4606      	mov	r6, r0
 801255e:	4668      	mov	r0, sp
 8012560:	f7f6 ff6e 	bl	8009440 <rcutils_get_zero_initialized_allocator>
 8012564:	46ee      	mov	lr, sp
 8012566:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801256a:	4c09      	ldr	r4, [pc, #36]	@ (8012590 <rcutils_get_zero_initialized_string_array+0x38>)
 801256c:	f104 0508 	add.w	r5, r4, #8
 8012570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012572:	46a4      	mov	ip, r4
 8012574:	f8de 3000 	ldr.w	r3, [lr]
 8012578:	602b      	str	r3, [r5, #0]
 801257a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801257e:	4634      	mov	r4, r6
 8012580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012582:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801258a:	4630      	mov	r0, r6
 801258c:	b006      	add	sp, #24
 801258e:	bd70      	pop	{r4, r5, r6, pc}
 8012590:	20010bb0 	.word	0x20010bb0

08012594 <rcutils_string_array_init>:
 8012594:	b1da      	cbz	r2, 80125ce <rcutils_string_array_init+0x3a>
 8012596:	b570      	push	{r4, r5, r6, lr}
 8012598:	4605      	mov	r5, r0
 801259a:	b1d0      	cbz	r0, 80125d2 <rcutils_string_array_init+0x3e>
 801259c:	460e      	mov	r6, r1
 801259e:	4614      	mov	r4, r2
 80125a0:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 80125a4:	6001      	str	r1, [r0, #0]
 80125a6:	2104      	movs	r1, #4
 80125a8:	4630      	mov	r0, r6
 80125aa:	4798      	blx	r3
 80125ac:	6068      	str	r0, [r5, #4]
 80125ae:	b150      	cbz	r0, 80125c6 <rcutils_string_array_init+0x32>
 80125b0:	46a4      	mov	ip, r4
 80125b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125b6:	f105 0408 	add.w	r4, r5, #8
 80125ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80125bc:	f8dc 3000 	ldr.w	r3, [ip]
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	2000      	movs	r0, #0
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
 80125c6:	2e00      	cmp	r6, #0
 80125c8:	d0f2      	beq.n	80125b0 <rcutils_string_array_init+0x1c>
 80125ca:	200a      	movs	r0, #10
 80125cc:	bd70      	pop	{r4, r5, r6, pc}
 80125ce:	200b      	movs	r0, #11
 80125d0:	4770      	bx	lr
 80125d2:	200b      	movs	r0, #11
 80125d4:	bd70      	pop	{r4, r5, r6, pc}
 80125d6:	bf00      	nop

080125d8 <rcutils_string_array_fini>:
 80125d8:	b310      	cbz	r0, 8012620 <rcutils_string_array_fini+0x48>
 80125da:	6843      	ldr	r3, [r0, #4]
 80125dc:	b570      	push	{r4, r5, r6, lr}
 80125de:	4604      	mov	r4, r0
 80125e0:	b1d3      	cbz	r3, 8012618 <rcutils_string_array_fini+0x40>
 80125e2:	3008      	adds	r0, #8
 80125e4:	f7f6 ff66 	bl	80094b4 <rcutils_allocator_is_valid>
 80125e8:	b1c0      	cbz	r0, 801261c <rcutils_string_array_fini+0x44>
 80125ea:	e9d4 3000 	ldrd	r3, r0, [r4]
 80125ee:	b16b      	cbz	r3, 801260c <rcutils_string_array_fini+0x34>
 80125f0:	2500      	movs	r5, #0
 80125f2:	462e      	mov	r6, r5
 80125f4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80125f8:	68e3      	ldr	r3, [r4, #12]
 80125fa:	69a1      	ldr	r1, [r4, #24]
 80125fc:	4798      	blx	r3
 80125fe:	e9d4 3000 	ldrd	r3, r0, [r4]
 8012602:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8012606:	3501      	adds	r5, #1
 8012608:	42ab      	cmp	r3, r5
 801260a:	d8f3      	bhi.n	80125f4 <rcutils_string_array_fini+0x1c>
 801260c:	68e3      	ldr	r3, [r4, #12]
 801260e:	69a1      	ldr	r1, [r4, #24]
 8012610:	4798      	blx	r3
 8012612:	2300      	movs	r3, #0
 8012614:	e9c4 3300 	strd	r3, r3, [r4]
 8012618:	2000      	movs	r0, #0
 801261a:	bd70      	pop	{r4, r5, r6, pc}
 801261c:	200b      	movs	r0, #11
 801261e:	bd70      	pop	{r4, r5, r6, pc}
 8012620:	200b      	movs	r0, #11
 8012622:	4770      	bx	lr

08012624 <rmw_create_guard_condition>:
 8012624:	b538      	push	{r3, r4, r5, lr}
 8012626:	4605      	mov	r5, r0
 8012628:	4807      	ldr	r0, [pc, #28]	@ (8012648 <rmw_create_guard_condition+0x24>)
 801262a:	f7fe fc41 	bl	8010eb0 <get_memory>
 801262e:	b148      	cbz	r0, 8012644 <rmw_create_guard_condition+0x20>
 8012630:	6884      	ldr	r4, [r0, #8]
 8012632:	2300      	movs	r3, #0
 8012634:	7423      	strb	r3, [r4, #16]
 8012636:	61e5      	str	r5, [r4, #28]
 8012638:	f7fe fca2 	bl	8010f80 <rmw_get_implementation_identifier>
 801263c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012640:	f104 0014 	add.w	r0, r4, #20
 8012644:	bd38      	pop	{r3, r4, r5, pc}
 8012646:	bf00      	nop
 8012648:	2000c120 	.word	0x2000c120

0801264c <rmw_destroy_guard_condition>:
 801264c:	b508      	push	{r3, lr}
 801264e:	4b08      	ldr	r3, [pc, #32]	@ (8012670 <rmw_destroy_guard_condition+0x24>)
 8012650:	6819      	ldr	r1, [r3, #0]
 8012652:	b911      	cbnz	r1, 801265a <rmw_destroy_guard_condition+0xe>
 8012654:	e00a      	b.n	801266c <rmw_destroy_guard_condition+0x20>
 8012656:	6849      	ldr	r1, [r1, #4]
 8012658:	b141      	cbz	r1, 801266c <rmw_destroy_guard_condition+0x20>
 801265a:	688b      	ldr	r3, [r1, #8]
 801265c:	3314      	adds	r3, #20
 801265e:	4298      	cmp	r0, r3
 8012660:	d1f9      	bne.n	8012656 <rmw_destroy_guard_condition+0xa>
 8012662:	4803      	ldr	r0, [pc, #12]	@ (8012670 <rmw_destroy_guard_condition+0x24>)
 8012664:	f7fe fc34 	bl	8010ed0 <put_memory>
 8012668:	2000      	movs	r0, #0
 801266a:	bd08      	pop	{r3, pc}
 801266c:	2001      	movs	r0, #1
 801266e:	bd08      	pop	{r3, pc}
 8012670:	2000c120 	.word	0x2000c120

08012674 <rosidl_runtime_c__String__init>:
 8012674:	b1b0      	cbz	r0, 80126a4 <rosidl_runtime_c__String__init+0x30>
 8012676:	b510      	push	{r4, lr}
 8012678:	b086      	sub	sp, #24
 801267a:	4604      	mov	r4, r0
 801267c:	a801      	add	r0, sp, #4
 801267e:	f7f6 feed 	bl	800945c <rcutils_get_default_allocator>
 8012682:	9b01      	ldr	r3, [sp, #4]
 8012684:	9905      	ldr	r1, [sp, #20]
 8012686:	2001      	movs	r0, #1
 8012688:	4798      	blx	r3
 801268a:	6020      	str	r0, [r4, #0]
 801268c:	b138      	cbz	r0, 801269e <rosidl_runtime_c__String__init+0x2a>
 801268e:	2200      	movs	r2, #0
 8012690:	2301      	movs	r3, #1
 8012692:	7002      	strb	r2, [r0, #0]
 8012694:	4618      	mov	r0, r3
 8012696:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801269a:	b006      	add	sp, #24
 801269c:	bd10      	pop	{r4, pc}
 801269e:	2000      	movs	r0, #0
 80126a0:	b006      	add	sp, #24
 80126a2:	bd10      	pop	{r4, pc}
 80126a4:	2000      	movs	r0, #0
 80126a6:	4770      	bx	lr

080126a8 <rosidl_runtime_c__String__fini>:
 80126a8:	b320      	cbz	r0, 80126f4 <rosidl_runtime_c__String__fini+0x4c>
 80126aa:	b510      	push	{r4, lr}
 80126ac:	6803      	ldr	r3, [r0, #0]
 80126ae:	b086      	sub	sp, #24
 80126b0:	4604      	mov	r4, r0
 80126b2:	b173      	cbz	r3, 80126d2 <rosidl_runtime_c__String__fini+0x2a>
 80126b4:	6883      	ldr	r3, [r0, #8]
 80126b6:	b1f3      	cbz	r3, 80126f6 <rosidl_runtime_c__String__fini+0x4e>
 80126b8:	a801      	add	r0, sp, #4
 80126ba:	f7f6 fecf 	bl	800945c <rcutils_get_default_allocator>
 80126be:	9b02      	ldr	r3, [sp, #8]
 80126c0:	9905      	ldr	r1, [sp, #20]
 80126c2:	6820      	ldr	r0, [r4, #0]
 80126c4:	4798      	blx	r3
 80126c6:	2300      	movs	r3, #0
 80126c8:	e9c4 3300 	strd	r3, r3, [r4]
 80126cc:	60a3      	str	r3, [r4, #8]
 80126ce:	b006      	add	sp, #24
 80126d0:	bd10      	pop	{r4, pc}
 80126d2:	6843      	ldr	r3, [r0, #4]
 80126d4:	b9db      	cbnz	r3, 801270e <rosidl_runtime_c__String__fini+0x66>
 80126d6:	6883      	ldr	r3, [r0, #8]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d0f8      	beq.n	80126ce <rosidl_runtime_c__String__fini+0x26>
 80126dc:	4b12      	ldr	r3, [pc, #72]	@ (8012728 <rosidl_runtime_c__String__fini+0x80>)
 80126de:	4813      	ldr	r0, [pc, #76]	@ (801272c <rosidl_runtime_c__String__fini+0x84>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	2251      	movs	r2, #81	@ 0x51
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	2101      	movs	r1, #1
 80126e8:	f000 fb82 	bl	8012df0 <fwrite>
 80126ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126f0:	f000 f83e 	bl	8012770 <exit>
 80126f4:	4770      	bx	lr
 80126f6:	4b0c      	ldr	r3, [pc, #48]	@ (8012728 <rosidl_runtime_c__String__fini+0x80>)
 80126f8:	480d      	ldr	r0, [pc, #52]	@ (8012730 <rosidl_runtime_c__String__fini+0x88>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	224c      	movs	r2, #76	@ 0x4c
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	2101      	movs	r1, #1
 8012702:	f000 fb75 	bl	8012df0 <fwrite>
 8012706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801270a:	f000 f831 	bl	8012770 <exit>
 801270e:	4b06      	ldr	r3, [pc, #24]	@ (8012728 <rosidl_runtime_c__String__fini+0x80>)
 8012710:	4808      	ldr	r0, [pc, #32]	@ (8012734 <rosidl_runtime_c__String__fini+0x8c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	224e      	movs	r2, #78	@ 0x4e
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	2101      	movs	r1, #1
 801271a:	f000 fb69 	bl	8012df0 <fwrite>
 801271e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012722:	f000 f825 	bl	8012770 <exit>
 8012726:	bf00      	nop
 8012728:	20000b18 	.word	0x20000b18
 801272c:	08014e60 	.word	0x08014e60
 8012730:	08014dc0 	.word	0x08014dc0
 8012734:	08014e10 	.word	0x08014e10

08012738 <calloc>:
 8012738:	4b02      	ldr	r3, [pc, #8]	@ (8012744 <calloc+0xc>)
 801273a:	460a      	mov	r2, r1
 801273c:	4601      	mov	r1, r0
 801273e:	6818      	ldr	r0, [r3, #0]
 8012740:	f000 b802 	b.w	8012748 <_calloc_r>
 8012744:	20000b18 	.word	0x20000b18

08012748 <_calloc_r>:
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	fba1 5402 	umull	r5, r4, r1, r2
 801274e:	b93c      	cbnz	r4, 8012760 <_calloc_r+0x18>
 8012750:	4629      	mov	r1, r5
 8012752:	f000 f899 	bl	8012888 <_malloc_r>
 8012756:	4606      	mov	r6, r0
 8012758:	b928      	cbnz	r0, 8012766 <_calloc_r+0x1e>
 801275a:	2600      	movs	r6, #0
 801275c:	4630      	mov	r0, r6
 801275e:	bd70      	pop	{r4, r5, r6, pc}
 8012760:	220c      	movs	r2, #12
 8012762:	6002      	str	r2, [r0, #0]
 8012764:	e7f9      	b.n	801275a <_calloc_r+0x12>
 8012766:	462a      	mov	r2, r5
 8012768:	4621      	mov	r1, r4
 801276a:	f000 fca5 	bl	80130b8 <memset>
 801276e:	e7f5      	b.n	801275c <_calloc_r+0x14>

08012770 <exit>:
 8012770:	b508      	push	{r3, lr}
 8012772:	4b06      	ldr	r3, [pc, #24]	@ (801278c <exit+0x1c>)
 8012774:	4604      	mov	r4, r0
 8012776:	b113      	cbz	r3, 801277e <exit+0xe>
 8012778:	2100      	movs	r1, #0
 801277a:	f3af 8000 	nop.w
 801277e:	4b04      	ldr	r3, [pc, #16]	@ (8012790 <exit+0x20>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	b103      	cbz	r3, 8012786 <exit+0x16>
 8012784:	4798      	blx	r3
 8012786:	4620      	mov	r0, r4
 8012788:	f7ef f8fc 	bl	8001984 <_exit>
 801278c:	00000000 	.word	0x00000000
 8012790:	20010d0c 	.word	0x20010d0c

08012794 <getenv>:
 8012794:	b507      	push	{r0, r1, r2, lr}
 8012796:	4b04      	ldr	r3, [pc, #16]	@ (80127a8 <getenv+0x14>)
 8012798:	4601      	mov	r1, r0
 801279a:	aa01      	add	r2, sp, #4
 801279c:	6818      	ldr	r0, [r3, #0]
 801279e:	f000 f805 	bl	80127ac <_findenv_r>
 80127a2:	b003      	add	sp, #12
 80127a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80127a8:	20000b18 	.word	0x20000b18

080127ac <_findenv_r>:
 80127ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8012820 <_findenv_r+0x74>
 80127b4:	4606      	mov	r6, r0
 80127b6:	4689      	mov	r9, r1
 80127b8:	4617      	mov	r7, r2
 80127ba:	f000 fddb 	bl	8013374 <__env_lock>
 80127be:	f8da 4000 	ldr.w	r4, [sl]
 80127c2:	b134      	cbz	r4, 80127d2 <_findenv_r+0x26>
 80127c4:	464b      	mov	r3, r9
 80127c6:	4698      	mov	r8, r3
 80127c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127cc:	b13a      	cbz	r2, 80127de <_findenv_r+0x32>
 80127ce:	2a3d      	cmp	r2, #61	@ 0x3d
 80127d0:	d1f9      	bne.n	80127c6 <_findenv_r+0x1a>
 80127d2:	4630      	mov	r0, r6
 80127d4:	f000 fdd4 	bl	8013380 <__env_unlock>
 80127d8:	2000      	movs	r0, #0
 80127da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127de:	eba8 0809 	sub.w	r8, r8, r9
 80127e2:	46a3      	mov	fp, r4
 80127e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d0f2      	beq.n	80127d2 <_findenv_r+0x26>
 80127ec:	4642      	mov	r2, r8
 80127ee:	4649      	mov	r1, r9
 80127f0:	f000 fc77 	bl	80130e2 <strncmp>
 80127f4:	2800      	cmp	r0, #0
 80127f6:	d1f4      	bne.n	80127e2 <_findenv_r+0x36>
 80127f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80127fc:	eb03 0508 	add.w	r5, r3, r8
 8012800:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012804:	2b3d      	cmp	r3, #61	@ 0x3d
 8012806:	d1ec      	bne.n	80127e2 <_findenv_r+0x36>
 8012808:	f8da 3000 	ldr.w	r3, [sl]
 801280c:	ebab 0303 	sub.w	r3, fp, r3
 8012810:	109b      	asrs	r3, r3, #2
 8012812:	4630      	mov	r0, r6
 8012814:	603b      	str	r3, [r7, #0]
 8012816:	f000 fdb3 	bl	8013380 <__env_unlock>
 801281a:	1c68      	adds	r0, r5, #1
 801281c:	e7dd      	b.n	80127da <_findenv_r+0x2e>
 801281e:	bf00      	nop
 8012820:	20000000 	.word	0x20000000

08012824 <malloc>:
 8012824:	4b02      	ldr	r3, [pc, #8]	@ (8012830 <malloc+0xc>)
 8012826:	4601      	mov	r1, r0
 8012828:	6818      	ldr	r0, [r3, #0]
 801282a:	f000 b82d 	b.w	8012888 <_malloc_r>
 801282e:	bf00      	nop
 8012830:	20000b18 	.word	0x20000b18

08012834 <free>:
 8012834:	4b02      	ldr	r3, [pc, #8]	@ (8012840 <free+0xc>)
 8012836:	4601      	mov	r1, r0
 8012838:	6818      	ldr	r0, [r3, #0]
 801283a:	f000 bda7 	b.w	801338c <_free_r>
 801283e:	bf00      	nop
 8012840:	20000b18 	.word	0x20000b18

08012844 <sbrk_aligned>:
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	4e0f      	ldr	r6, [pc, #60]	@ (8012884 <sbrk_aligned+0x40>)
 8012848:	460c      	mov	r4, r1
 801284a:	6831      	ldr	r1, [r6, #0]
 801284c:	4605      	mov	r5, r0
 801284e:	b911      	cbnz	r1, 8012856 <sbrk_aligned+0x12>
 8012850:	f000 fd0c 	bl	801326c <_sbrk_r>
 8012854:	6030      	str	r0, [r6, #0]
 8012856:	4621      	mov	r1, r4
 8012858:	4628      	mov	r0, r5
 801285a:	f000 fd07 	bl	801326c <_sbrk_r>
 801285e:	1c43      	adds	r3, r0, #1
 8012860:	d103      	bne.n	801286a <sbrk_aligned+0x26>
 8012862:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012866:	4620      	mov	r0, r4
 8012868:	bd70      	pop	{r4, r5, r6, pc}
 801286a:	1cc4      	adds	r4, r0, #3
 801286c:	f024 0403 	bic.w	r4, r4, #3
 8012870:	42a0      	cmp	r0, r4
 8012872:	d0f8      	beq.n	8012866 <sbrk_aligned+0x22>
 8012874:	1a21      	subs	r1, r4, r0
 8012876:	4628      	mov	r0, r5
 8012878:	f000 fcf8 	bl	801326c <_sbrk_r>
 801287c:	3001      	adds	r0, #1
 801287e:	d1f2      	bne.n	8012866 <sbrk_aligned+0x22>
 8012880:	e7ef      	b.n	8012862 <sbrk_aligned+0x1e>
 8012882:	bf00      	nop
 8012884:	20010bcc 	.word	0x20010bcc

08012888 <_malloc_r>:
 8012888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801288c:	1ccd      	adds	r5, r1, #3
 801288e:	f025 0503 	bic.w	r5, r5, #3
 8012892:	3508      	adds	r5, #8
 8012894:	2d0c      	cmp	r5, #12
 8012896:	bf38      	it	cc
 8012898:	250c      	movcc	r5, #12
 801289a:	2d00      	cmp	r5, #0
 801289c:	4606      	mov	r6, r0
 801289e:	db01      	blt.n	80128a4 <_malloc_r+0x1c>
 80128a0:	42a9      	cmp	r1, r5
 80128a2:	d904      	bls.n	80128ae <_malloc_r+0x26>
 80128a4:	230c      	movs	r3, #12
 80128a6:	6033      	str	r3, [r6, #0]
 80128a8:	2000      	movs	r0, #0
 80128aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012984 <_malloc_r+0xfc>
 80128b2:	f000 f869 	bl	8012988 <__malloc_lock>
 80128b6:	f8d8 3000 	ldr.w	r3, [r8]
 80128ba:	461c      	mov	r4, r3
 80128bc:	bb44      	cbnz	r4, 8012910 <_malloc_r+0x88>
 80128be:	4629      	mov	r1, r5
 80128c0:	4630      	mov	r0, r6
 80128c2:	f7ff ffbf 	bl	8012844 <sbrk_aligned>
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	4604      	mov	r4, r0
 80128ca:	d158      	bne.n	801297e <_malloc_r+0xf6>
 80128cc:	f8d8 4000 	ldr.w	r4, [r8]
 80128d0:	4627      	mov	r7, r4
 80128d2:	2f00      	cmp	r7, #0
 80128d4:	d143      	bne.n	801295e <_malloc_r+0xd6>
 80128d6:	2c00      	cmp	r4, #0
 80128d8:	d04b      	beq.n	8012972 <_malloc_r+0xea>
 80128da:	6823      	ldr	r3, [r4, #0]
 80128dc:	4639      	mov	r1, r7
 80128de:	4630      	mov	r0, r6
 80128e0:	eb04 0903 	add.w	r9, r4, r3
 80128e4:	f000 fcc2 	bl	801326c <_sbrk_r>
 80128e8:	4581      	cmp	r9, r0
 80128ea:	d142      	bne.n	8012972 <_malloc_r+0xea>
 80128ec:	6821      	ldr	r1, [r4, #0]
 80128ee:	1a6d      	subs	r5, r5, r1
 80128f0:	4629      	mov	r1, r5
 80128f2:	4630      	mov	r0, r6
 80128f4:	f7ff ffa6 	bl	8012844 <sbrk_aligned>
 80128f8:	3001      	adds	r0, #1
 80128fa:	d03a      	beq.n	8012972 <_malloc_r+0xea>
 80128fc:	6823      	ldr	r3, [r4, #0]
 80128fe:	442b      	add	r3, r5
 8012900:	6023      	str	r3, [r4, #0]
 8012902:	f8d8 3000 	ldr.w	r3, [r8]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	bb62      	cbnz	r2, 8012964 <_malloc_r+0xdc>
 801290a:	f8c8 7000 	str.w	r7, [r8]
 801290e:	e00f      	b.n	8012930 <_malloc_r+0xa8>
 8012910:	6822      	ldr	r2, [r4, #0]
 8012912:	1b52      	subs	r2, r2, r5
 8012914:	d420      	bmi.n	8012958 <_malloc_r+0xd0>
 8012916:	2a0b      	cmp	r2, #11
 8012918:	d917      	bls.n	801294a <_malloc_r+0xc2>
 801291a:	1961      	adds	r1, r4, r5
 801291c:	42a3      	cmp	r3, r4
 801291e:	6025      	str	r5, [r4, #0]
 8012920:	bf18      	it	ne
 8012922:	6059      	strne	r1, [r3, #4]
 8012924:	6863      	ldr	r3, [r4, #4]
 8012926:	bf08      	it	eq
 8012928:	f8c8 1000 	streq.w	r1, [r8]
 801292c:	5162      	str	r2, [r4, r5]
 801292e:	604b      	str	r3, [r1, #4]
 8012930:	4630      	mov	r0, r6
 8012932:	f000 f82f 	bl	8012994 <__malloc_unlock>
 8012936:	f104 000b 	add.w	r0, r4, #11
 801293a:	1d23      	adds	r3, r4, #4
 801293c:	f020 0007 	bic.w	r0, r0, #7
 8012940:	1ac2      	subs	r2, r0, r3
 8012942:	bf1c      	itt	ne
 8012944:	1a1b      	subne	r3, r3, r0
 8012946:	50a3      	strne	r3, [r4, r2]
 8012948:	e7af      	b.n	80128aa <_malloc_r+0x22>
 801294a:	6862      	ldr	r2, [r4, #4]
 801294c:	42a3      	cmp	r3, r4
 801294e:	bf0c      	ite	eq
 8012950:	f8c8 2000 	streq.w	r2, [r8]
 8012954:	605a      	strne	r2, [r3, #4]
 8012956:	e7eb      	b.n	8012930 <_malloc_r+0xa8>
 8012958:	4623      	mov	r3, r4
 801295a:	6864      	ldr	r4, [r4, #4]
 801295c:	e7ae      	b.n	80128bc <_malloc_r+0x34>
 801295e:	463c      	mov	r4, r7
 8012960:	687f      	ldr	r7, [r7, #4]
 8012962:	e7b6      	b.n	80128d2 <_malloc_r+0x4a>
 8012964:	461a      	mov	r2, r3
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	42a3      	cmp	r3, r4
 801296a:	d1fb      	bne.n	8012964 <_malloc_r+0xdc>
 801296c:	2300      	movs	r3, #0
 801296e:	6053      	str	r3, [r2, #4]
 8012970:	e7de      	b.n	8012930 <_malloc_r+0xa8>
 8012972:	230c      	movs	r3, #12
 8012974:	6033      	str	r3, [r6, #0]
 8012976:	4630      	mov	r0, r6
 8012978:	f000 f80c 	bl	8012994 <__malloc_unlock>
 801297c:	e794      	b.n	80128a8 <_malloc_r+0x20>
 801297e:	6005      	str	r5, [r0, #0]
 8012980:	e7d6      	b.n	8012930 <_malloc_r+0xa8>
 8012982:	bf00      	nop
 8012984:	20010bd0 	.word	0x20010bd0

08012988 <__malloc_lock>:
 8012988:	4801      	ldr	r0, [pc, #4]	@ (8012990 <__malloc_lock+0x8>)
 801298a:	f000 bcbc 	b.w	8013306 <__retarget_lock_acquire_recursive>
 801298e:	bf00      	nop
 8012990:	20010d15 	.word	0x20010d15

08012994 <__malloc_unlock>:
 8012994:	4801      	ldr	r0, [pc, #4]	@ (801299c <__malloc_unlock+0x8>)
 8012996:	f000 bcb7 	b.w	8013308 <__retarget_lock_release_recursive>
 801299a:	bf00      	nop
 801299c:	20010d15 	.word	0x20010d15

080129a0 <srand>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4b10      	ldr	r3, [pc, #64]	@ (80129e4 <srand+0x44>)
 80129a4:	681d      	ldr	r5, [r3, #0]
 80129a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80129a8:	4604      	mov	r4, r0
 80129aa:	b9b3      	cbnz	r3, 80129da <srand+0x3a>
 80129ac:	2018      	movs	r0, #24
 80129ae:	f7ff ff39 	bl	8012824 <malloc>
 80129b2:	4602      	mov	r2, r0
 80129b4:	6328      	str	r0, [r5, #48]	@ 0x30
 80129b6:	b920      	cbnz	r0, 80129c2 <srand+0x22>
 80129b8:	4b0b      	ldr	r3, [pc, #44]	@ (80129e8 <srand+0x48>)
 80129ba:	480c      	ldr	r0, [pc, #48]	@ (80129ec <srand+0x4c>)
 80129bc:	2146      	movs	r1, #70	@ 0x46
 80129be:	f000 fcbb 	bl	8013338 <__assert_func>
 80129c2:	490b      	ldr	r1, [pc, #44]	@ (80129f0 <srand+0x50>)
 80129c4:	4b0b      	ldr	r3, [pc, #44]	@ (80129f4 <srand+0x54>)
 80129c6:	e9c0 1300 	strd	r1, r3, [r0]
 80129ca:	4b0b      	ldr	r3, [pc, #44]	@ (80129f8 <srand+0x58>)
 80129cc:	6083      	str	r3, [r0, #8]
 80129ce:	230b      	movs	r3, #11
 80129d0:	8183      	strh	r3, [r0, #12]
 80129d2:	2100      	movs	r1, #0
 80129d4:	2001      	movs	r0, #1
 80129d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80129da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80129dc:	2200      	movs	r2, #0
 80129de:	611c      	str	r4, [r3, #16]
 80129e0:	615a      	str	r2, [r3, #20]
 80129e2:	bd38      	pop	{r3, r4, r5, pc}
 80129e4:	20000b18 	.word	0x20000b18
 80129e8:	08014eb2 	.word	0x08014eb2
 80129ec:	08014ec9 	.word	0x08014ec9
 80129f0:	abcd330e 	.word	0xabcd330e
 80129f4:	e66d1234 	.word	0xe66d1234
 80129f8:	0005deec 	.word	0x0005deec

080129fc <rand>:
 80129fc:	4b16      	ldr	r3, [pc, #88]	@ (8012a58 <rand+0x5c>)
 80129fe:	b510      	push	{r4, lr}
 8012a00:	681c      	ldr	r4, [r3, #0]
 8012a02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a04:	b9b3      	cbnz	r3, 8012a34 <rand+0x38>
 8012a06:	2018      	movs	r0, #24
 8012a08:	f7ff ff0c 	bl	8012824 <malloc>
 8012a0c:	4602      	mov	r2, r0
 8012a0e:	6320      	str	r0, [r4, #48]	@ 0x30
 8012a10:	b920      	cbnz	r0, 8012a1c <rand+0x20>
 8012a12:	4b12      	ldr	r3, [pc, #72]	@ (8012a5c <rand+0x60>)
 8012a14:	4812      	ldr	r0, [pc, #72]	@ (8012a60 <rand+0x64>)
 8012a16:	2152      	movs	r1, #82	@ 0x52
 8012a18:	f000 fc8e 	bl	8013338 <__assert_func>
 8012a1c:	4911      	ldr	r1, [pc, #68]	@ (8012a64 <rand+0x68>)
 8012a1e:	4b12      	ldr	r3, [pc, #72]	@ (8012a68 <rand+0x6c>)
 8012a20:	e9c0 1300 	strd	r1, r3, [r0]
 8012a24:	4b11      	ldr	r3, [pc, #68]	@ (8012a6c <rand+0x70>)
 8012a26:	6083      	str	r3, [r0, #8]
 8012a28:	230b      	movs	r3, #11
 8012a2a:	8183      	strh	r3, [r0, #12]
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	2001      	movs	r0, #1
 8012a30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012a34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012a36:	480e      	ldr	r0, [pc, #56]	@ (8012a70 <rand+0x74>)
 8012a38:	690b      	ldr	r3, [r1, #16]
 8012a3a:	694c      	ldr	r4, [r1, #20]
 8012a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8012a74 <rand+0x78>)
 8012a3e:	4358      	muls	r0, r3
 8012a40:	fb02 0004 	mla	r0, r2, r4, r0
 8012a44:	fba3 3202 	umull	r3, r2, r3, r2
 8012a48:	3301      	adds	r3, #1
 8012a4a:	eb40 0002 	adc.w	r0, r0, r2
 8012a4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012a52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012a56:	bd10      	pop	{r4, pc}
 8012a58:	20000b18 	.word	0x20000b18
 8012a5c:	08014eb2 	.word	0x08014eb2
 8012a60:	08014ec9 	.word	0x08014ec9
 8012a64:	abcd330e 	.word	0xabcd330e
 8012a68:	e66d1234 	.word	0xe66d1234
 8012a6c:	0005deec 	.word	0x0005deec
 8012a70:	5851f42d 	.word	0x5851f42d
 8012a74:	4c957f2d 	.word	0x4c957f2d

08012a78 <realloc>:
 8012a78:	4b02      	ldr	r3, [pc, #8]	@ (8012a84 <realloc+0xc>)
 8012a7a:	460a      	mov	r2, r1
 8012a7c:	4601      	mov	r1, r0
 8012a7e:	6818      	ldr	r0, [r3, #0]
 8012a80:	f000 b802 	b.w	8012a88 <_realloc_r>
 8012a84:	20000b18 	.word	0x20000b18

08012a88 <_realloc_r>:
 8012a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8c:	4680      	mov	r8, r0
 8012a8e:	4615      	mov	r5, r2
 8012a90:	460c      	mov	r4, r1
 8012a92:	b921      	cbnz	r1, 8012a9e <_realloc_r+0x16>
 8012a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a98:	4611      	mov	r1, r2
 8012a9a:	f7ff bef5 	b.w	8012888 <_malloc_r>
 8012a9e:	b92a      	cbnz	r2, 8012aac <_realloc_r+0x24>
 8012aa0:	f000 fc74 	bl	801338c <_free_r>
 8012aa4:	2400      	movs	r4, #0
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aac:	f000 fcb8 	bl	8013420 <_malloc_usable_size_r>
 8012ab0:	4285      	cmp	r5, r0
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	d802      	bhi.n	8012abc <_realloc_r+0x34>
 8012ab6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012aba:	d8f4      	bhi.n	8012aa6 <_realloc_r+0x1e>
 8012abc:	4629      	mov	r1, r5
 8012abe:	4640      	mov	r0, r8
 8012ac0:	f7ff fee2 	bl	8012888 <_malloc_r>
 8012ac4:	4607      	mov	r7, r0
 8012ac6:	2800      	cmp	r0, #0
 8012ac8:	d0ec      	beq.n	8012aa4 <_realloc_r+0x1c>
 8012aca:	42b5      	cmp	r5, r6
 8012acc:	462a      	mov	r2, r5
 8012ace:	4621      	mov	r1, r4
 8012ad0:	bf28      	it	cs
 8012ad2:	4632      	movcs	r2, r6
 8012ad4:	f000 fc21 	bl	801331a <memcpy>
 8012ad8:	4621      	mov	r1, r4
 8012ada:	4640      	mov	r0, r8
 8012adc:	f000 fc56 	bl	801338c <_free_r>
 8012ae0:	463c      	mov	r4, r7
 8012ae2:	e7e0      	b.n	8012aa6 <_realloc_r+0x1e>

08012ae4 <_strtoul_l.constprop.0>:
 8012ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ae8:	4e34      	ldr	r6, [pc, #208]	@ (8012bbc <_strtoul_l.constprop.0+0xd8>)
 8012aea:	4686      	mov	lr, r0
 8012aec:	460d      	mov	r5, r1
 8012aee:	4628      	mov	r0, r5
 8012af0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012af4:	5d37      	ldrb	r7, [r6, r4]
 8012af6:	f017 0708 	ands.w	r7, r7, #8
 8012afa:	d1f8      	bne.n	8012aee <_strtoul_l.constprop.0+0xa>
 8012afc:	2c2d      	cmp	r4, #45	@ 0x2d
 8012afe:	d12f      	bne.n	8012b60 <_strtoul_l.constprop.0+0x7c>
 8012b00:	782c      	ldrb	r4, [r5, #0]
 8012b02:	2701      	movs	r7, #1
 8012b04:	1c85      	adds	r5, r0, #2
 8012b06:	f033 0010 	bics.w	r0, r3, #16
 8012b0a:	d109      	bne.n	8012b20 <_strtoul_l.constprop.0+0x3c>
 8012b0c:	2c30      	cmp	r4, #48	@ 0x30
 8012b0e:	d12c      	bne.n	8012b6a <_strtoul_l.constprop.0+0x86>
 8012b10:	7828      	ldrb	r0, [r5, #0]
 8012b12:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012b16:	2858      	cmp	r0, #88	@ 0x58
 8012b18:	d127      	bne.n	8012b6a <_strtoul_l.constprop.0+0x86>
 8012b1a:	786c      	ldrb	r4, [r5, #1]
 8012b1c:	2310      	movs	r3, #16
 8012b1e:	3502      	adds	r5, #2
 8012b20:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012b24:	2600      	movs	r6, #0
 8012b26:	fbb8 f8f3 	udiv	r8, r8, r3
 8012b2a:	fb03 f908 	mul.w	r9, r3, r8
 8012b2e:	ea6f 0909 	mvn.w	r9, r9
 8012b32:	4630      	mov	r0, r6
 8012b34:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012b38:	f1bc 0f09 	cmp.w	ip, #9
 8012b3c:	d81c      	bhi.n	8012b78 <_strtoul_l.constprop.0+0x94>
 8012b3e:	4664      	mov	r4, ip
 8012b40:	42a3      	cmp	r3, r4
 8012b42:	dd2a      	ble.n	8012b9a <_strtoul_l.constprop.0+0xb6>
 8012b44:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8012b48:	d007      	beq.n	8012b5a <_strtoul_l.constprop.0+0x76>
 8012b4a:	4580      	cmp	r8, r0
 8012b4c:	d322      	bcc.n	8012b94 <_strtoul_l.constprop.0+0xb0>
 8012b4e:	d101      	bne.n	8012b54 <_strtoul_l.constprop.0+0x70>
 8012b50:	45a1      	cmp	r9, r4
 8012b52:	db1f      	blt.n	8012b94 <_strtoul_l.constprop.0+0xb0>
 8012b54:	fb00 4003 	mla	r0, r0, r3, r4
 8012b58:	2601      	movs	r6, #1
 8012b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b5e:	e7e9      	b.n	8012b34 <_strtoul_l.constprop.0+0x50>
 8012b60:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b62:	bf04      	itt	eq
 8012b64:	782c      	ldrbeq	r4, [r5, #0]
 8012b66:	1c85      	addeq	r5, r0, #2
 8012b68:	e7cd      	b.n	8012b06 <_strtoul_l.constprop.0+0x22>
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1d8      	bne.n	8012b20 <_strtoul_l.constprop.0+0x3c>
 8012b6e:	2c30      	cmp	r4, #48	@ 0x30
 8012b70:	bf0c      	ite	eq
 8012b72:	2308      	moveq	r3, #8
 8012b74:	230a      	movne	r3, #10
 8012b76:	e7d3      	b.n	8012b20 <_strtoul_l.constprop.0+0x3c>
 8012b78:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012b7c:	f1bc 0f19 	cmp.w	ip, #25
 8012b80:	d801      	bhi.n	8012b86 <_strtoul_l.constprop.0+0xa2>
 8012b82:	3c37      	subs	r4, #55	@ 0x37
 8012b84:	e7dc      	b.n	8012b40 <_strtoul_l.constprop.0+0x5c>
 8012b86:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012b8a:	f1bc 0f19 	cmp.w	ip, #25
 8012b8e:	d804      	bhi.n	8012b9a <_strtoul_l.constprop.0+0xb6>
 8012b90:	3c57      	subs	r4, #87	@ 0x57
 8012b92:	e7d5      	b.n	8012b40 <_strtoul_l.constprop.0+0x5c>
 8012b94:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8012b98:	e7df      	b.n	8012b5a <_strtoul_l.constprop.0+0x76>
 8012b9a:	1c73      	adds	r3, r6, #1
 8012b9c:	d106      	bne.n	8012bac <_strtoul_l.constprop.0+0xc8>
 8012b9e:	2322      	movs	r3, #34	@ 0x22
 8012ba0:	f8ce 3000 	str.w	r3, [lr]
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	b932      	cbnz	r2, 8012bb6 <_strtoul_l.constprop.0+0xd2>
 8012ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bac:	b107      	cbz	r7, 8012bb0 <_strtoul_l.constprop.0+0xcc>
 8012bae:	4240      	negs	r0, r0
 8012bb0:	2a00      	cmp	r2, #0
 8012bb2:	d0f9      	beq.n	8012ba8 <_strtoul_l.constprop.0+0xc4>
 8012bb4:	b106      	cbz	r6, 8012bb8 <_strtoul_l.constprop.0+0xd4>
 8012bb6:	1e69      	subs	r1, r5, #1
 8012bb8:	6011      	str	r1, [r2, #0]
 8012bba:	e7f5      	b.n	8012ba8 <_strtoul_l.constprop.0+0xc4>
 8012bbc:	08014f22 	.word	0x08014f22

08012bc0 <strtoul>:
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	460a      	mov	r2, r1
 8012bc4:	4601      	mov	r1, r0
 8012bc6:	4802      	ldr	r0, [pc, #8]	@ (8012bd0 <strtoul+0x10>)
 8012bc8:	6800      	ldr	r0, [r0, #0]
 8012bca:	f7ff bf8b 	b.w	8012ae4 <_strtoul_l.constprop.0>
 8012bce:	bf00      	nop
 8012bd0:	20000b18 	.word	0x20000b18

08012bd4 <std>:
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	b510      	push	{r4, lr}
 8012bd8:	4604      	mov	r4, r0
 8012bda:	e9c0 3300 	strd	r3, r3, [r0]
 8012bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012be2:	6083      	str	r3, [r0, #8]
 8012be4:	8181      	strh	r1, [r0, #12]
 8012be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8012be8:	81c2      	strh	r2, [r0, #14]
 8012bea:	6183      	str	r3, [r0, #24]
 8012bec:	4619      	mov	r1, r3
 8012bee:	2208      	movs	r2, #8
 8012bf0:	305c      	adds	r0, #92	@ 0x5c
 8012bf2:	f000 fa61 	bl	80130b8 <memset>
 8012bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8012c2c <std+0x58>)
 8012bf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8012bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8012c30 <std+0x5c>)
 8012bfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8012c34 <std+0x60>)
 8012c00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012c02:	4b0d      	ldr	r3, [pc, #52]	@ (8012c38 <std+0x64>)
 8012c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8012c06:	4b0d      	ldr	r3, [pc, #52]	@ (8012c3c <std+0x68>)
 8012c08:	6224      	str	r4, [r4, #32]
 8012c0a:	429c      	cmp	r4, r3
 8012c0c:	d006      	beq.n	8012c1c <std+0x48>
 8012c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012c12:	4294      	cmp	r4, r2
 8012c14:	d002      	beq.n	8012c1c <std+0x48>
 8012c16:	33d0      	adds	r3, #208	@ 0xd0
 8012c18:	429c      	cmp	r4, r3
 8012c1a:	d105      	bne.n	8012c28 <std+0x54>
 8012c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c24:	f000 bb6e 	b.w	8013304 <__retarget_lock_init_recursive>
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	bf00      	nop
 8012c2c:	08012e99 	.word	0x08012e99
 8012c30:	08012ebb 	.word	0x08012ebb
 8012c34:	08012ef3 	.word	0x08012ef3
 8012c38:	08012f17 	.word	0x08012f17
 8012c3c:	20010bd4 	.word	0x20010bd4

08012c40 <stdio_exit_handler>:
 8012c40:	4a02      	ldr	r2, [pc, #8]	@ (8012c4c <stdio_exit_handler+0xc>)
 8012c42:	4903      	ldr	r1, [pc, #12]	@ (8012c50 <stdio_exit_handler+0x10>)
 8012c44:	4803      	ldr	r0, [pc, #12]	@ (8012c54 <stdio_exit_handler+0x14>)
 8012c46:	f000 b869 	b.w	8012d1c <_fwalk_sglue>
 8012c4a:	bf00      	nop
 8012c4c:	20000b0c 	.word	0x20000b0c
 8012c50:	08013d89 	.word	0x08013d89
 8012c54:	20000b1c 	.word	0x20000b1c

08012c58 <cleanup_stdio>:
 8012c58:	6841      	ldr	r1, [r0, #4]
 8012c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8012c8c <cleanup_stdio+0x34>)
 8012c5c:	4299      	cmp	r1, r3
 8012c5e:	b510      	push	{r4, lr}
 8012c60:	4604      	mov	r4, r0
 8012c62:	d001      	beq.n	8012c68 <cleanup_stdio+0x10>
 8012c64:	f001 f890 	bl	8013d88 <_fflush_r>
 8012c68:	68a1      	ldr	r1, [r4, #8]
 8012c6a:	4b09      	ldr	r3, [pc, #36]	@ (8012c90 <cleanup_stdio+0x38>)
 8012c6c:	4299      	cmp	r1, r3
 8012c6e:	d002      	beq.n	8012c76 <cleanup_stdio+0x1e>
 8012c70:	4620      	mov	r0, r4
 8012c72:	f001 f889 	bl	8013d88 <_fflush_r>
 8012c76:	68e1      	ldr	r1, [r4, #12]
 8012c78:	4b06      	ldr	r3, [pc, #24]	@ (8012c94 <cleanup_stdio+0x3c>)
 8012c7a:	4299      	cmp	r1, r3
 8012c7c:	d004      	beq.n	8012c88 <cleanup_stdio+0x30>
 8012c7e:	4620      	mov	r0, r4
 8012c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c84:	f001 b880 	b.w	8013d88 <_fflush_r>
 8012c88:	bd10      	pop	{r4, pc}
 8012c8a:	bf00      	nop
 8012c8c:	20010bd4 	.word	0x20010bd4
 8012c90:	20010c3c 	.word	0x20010c3c
 8012c94:	20010ca4 	.word	0x20010ca4

08012c98 <global_stdio_init.part.0>:
 8012c98:	b510      	push	{r4, lr}
 8012c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8012cc8 <global_stdio_init.part.0+0x30>)
 8012c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8012ccc <global_stdio_init.part.0+0x34>)
 8012c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8012cd0 <global_stdio_init.part.0+0x38>)
 8012ca0:	601a      	str	r2, [r3, #0]
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	2104      	movs	r1, #4
 8012ca8:	f7ff ff94 	bl	8012bd4 <std>
 8012cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	2109      	movs	r1, #9
 8012cb4:	f7ff ff8e 	bl	8012bd4 <std>
 8012cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012cbc:	2202      	movs	r2, #2
 8012cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cc2:	2112      	movs	r1, #18
 8012cc4:	f7ff bf86 	b.w	8012bd4 <std>
 8012cc8:	20010d0c 	.word	0x20010d0c
 8012ccc:	20010bd4 	.word	0x20010bd4
 8012cd0:	08012c41 	.word	0x08012c41

08012cd4 <__sfp_lock_acquire>:
 8012cd4:	4801      	ldr	r0, [pc, #4]	@ (8012cdc <__sfp_lock_acquire+0x8>)
 8012cd6:	f000 bb16 	b.w	8013306 <__retarget_lock_acquire_recursive>
 8012cda:	bf00      	nop
 8012cdc:	20010d16 	.word	0x20010d16

08012ce0 <__sfp_lock_release>:
 8012ce0:	4801      	ldr	r0, [pc, #4]	@ (8012ce8 <__sfp_lock_release+0x8>)
 8012ce2:	f000 bb11 	b.w	8013308 <__retarget_lock_release_recursive>
 8012ce6:	bf00      	nop
 8012ce8:	20010d16 	.word	0x20010d16

08012cec <__sinit>:
 8012cec:	b510      	push	{r4, lr}
 8012cee:	4604      	mov	r4, r0
 8012cf0:	f7ff fff0 	bl	8012cd4 <__sfp_lock_acquire>
 8012cf4:	6a23      	ldr	r3, [r4, #32]
 8012cf6:	b11b      	cbz	r3, 8012d00 <__sinit+0x14>
 8012cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cfc:	f7ff bff0 	b.w	8012ce0 <__sfp_lock_release>
 8012d00:	4b04      	ldr	r3, [pc, #16]	@ (8012d14 <__sinit+0x28>)
 8012d02:	6223      	str	r3, [r4, #32]
 8012d04:	4b04      	ldr	r3, [pc, #16]	@ (8012d18 <__sinit+0x2c>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1f5      	bne.n	8012cf8 <__sinit+0xc>
 8012d0c:	f7ff ffc4 	bl	8012c98 <global_stdio_init.part.0>
 8012d10:	e7f2      	b.n	8012cf8 <__sinit+0xc>
 8012d12:	bf00      	nop
 8012d14:	08012c59 	.word	0x08012c59
 8012d18:	20010d0c 	.word	0x20010d0c

08012d1c <_fwalk_sglue>:
 8012d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d20:	4607      	mov	r7, r0
 8012d22:	4688      	mov	r8, r1
 8012d24:	4614      	mov	r4, r2
 8012d26:	2600      	movs	r6, #0
 8012d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8012d30:	d505      	bpl.n	8012d3e <_fwalk_sglue+0x22>
 8012d32:	6824      	ldr	r4, [r4, #0]
 8012d34:	2c00      	cmp	r4, #0
 8012d36:	d1f7      	bne.n	8012d28 <_fwalk_sglue+0xc>
 8012d38:	4630      	mov	r0, r6
 8012d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d3e:	89ab      	ldrh	r3, [r5, #12]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d907      	bls.n	8012d54 <_fwalk_sglue+0x38>
 8012d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	d003      	beq.n	8012d54 <_fwalk_sglue+0x38>
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	4638      	mov	r0, r7
 8012d50:	47c0      	blx	r8
 8012d52:	4306      	orrs	r6, r0
 8012d54:	3568      	adds	r5, #104	@ 0x68
 8012d56:	e7e9      	b.n	8012d2c <_fwalk_sglue+0x10>

08012d58 <_fwrite_r>:
 8012d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d5c:	9c08      	ldr	r4, [sp, #32]
 8012d5e:	468a      	mov	sl, r1
 8012d60:	4690      	mov	r8, r2
 8012d62:	fb02 f903 	mul.w	r9, r2, r3
 8012d66:	4606      	mov	r6, r0
 8012d68:	b118      	cbz	r0, 8012d72 <_fwrite_r+0x1a>
 8012d6a:	6a03      	ldr	r3, [r0, #32]
 8012d6c:	b90b      	cbnz	r3, 8012d72 <_fwrite_r+0x1a>
 8012d6e:	f7ff ffbd 	bl	8012cec <__sinit>
 8012d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d74:	07dd      	lsls	r5, r3, #31
 8012d76:	d405      	bmi.n	8012d84 <_fwrite_r+0x2c>
 8012d78:	89a3      	ldrh	r3, [r4, #12]
 8012d7a:	0598      	lsls	r0, r3, #22
 8012d7c:	d402      	bmi.n	8012d84 <_fwrite_r+0x2c>
 8012d7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d80:	f000 fac1 	bl	8013306 <__retarget_lock_acquire_recursive>
 8012d84:	89a3      	ldrh	r3, [r4, #12]
 8012d86:	0719      	lsls	r1, r3, #28
 8012d88:	d516      	bpl.n	8012db8 <_fwrite_r+0x60>
 8012d8a:	6923      	ldr	r3, [r4, #16]
 8012d8c:	b1a3      	cbz	r3, 8012db8 <_fwrite_r+0x60>
 8012d8e:	2500      	movs	r5, #0
 8012d90:	454d      	cmp	r5, r9
 8012d92:	d01f      	beq.n	8012dd4 <_fwrite_r+0x7c>
 8012d94:	68a7      	ldr	r7, [r4, #8]
 8012d96:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8012d9a:	3f01      	subs	r7, #1
 8012d9c:	2f00      	cmp	r7, #0
 8012d9e:	60a7      	str	r7, [r4, #8]
 8012da0:	da04      	bge.n	8012dac <_fwrite_r+0x54>
 8012da2:	69a3      	ldr	r3, [r4, #24]
 8012da4:	429f      	cmp	r7, r3
 8012da6:	db0f      	blt.n	8012dc8 <_fwrite_r+0x70>
 8012da8:	290a      	cmp	r1, #10
 8012daa:	d00d      	beq.n	8012dc8 <_fwrite_r+0x70>
 8012dac:	6823      	ldr	r3, [r4, #0]
 8012dae:	1c5a      	adds	r2, r3, #1
 8012db0:	6022      	str	r2, [r4, #0]
 8012db2:	7019      	strb	r1, [r3, #0]
 8012db4:	3501      	adds	r5, #1
 8012db6:	e7eb      	b.n	8012d90 <_fwrite_r+0x38>
 8012db8:	4621      	mov	r1, r4
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f000 f926 	bl	801300c <__swsetup_r>
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d0e4      	beq.n	8012d8e <_fwrite_r+0x36>
 8012dc4:	2500      	movs	r5, #0
 8012dc6:	e005      	b.n	8012dd4 <_fwrite_r+0x7c>
 8012dc8:	4622      	mov	r2, r4
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f000 f8e0 	bl	8012f90 <__swbuf_r>
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	d1ef      	bne.n	8012db4 <_fwrite_r+0x5c>
 8012dd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012dd6:	07da      	lsls	r2, r3, #31
 8012dd8:	d405      	bmi.n	8012de6 <_fwrite_r+0x8e>
 8012dda:	89a3      	ldrh	r3, [r4, #12]
 8012ddc:	059b      	lsls	r3, r3, #22
 8012dde:	d402      	bmi.n	8012de6 <_fwrite_r+0x8e>
 8012de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012de2:	f000 fa91 	bl	8013308 <__retarget_lock_release_recursive>
 8012de6:	fbb5 f0f8 	udiv	r0, r5, r8
 8012dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012df0 <fwrite>:
 8012df0:	b507      	push	{r0, r1, r2, lr}
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	4613      	mov	r3, r2
 8012df6:	460a      	mov	r2, r1
 8012df8:	4601      	mov	r1, r0
 8012dfa:	4803      	ldr	r0, [pc, #12]	@ (8012e08 <fwrite+0x18>)
 8012dfc:	6800      	ldr	r0, [r0, #0]
 8012dfe:	f7ff ffab 	bl	8012d58 <_fwrite_r>
 8012e02:	b003      	add	sp, #12
 8012e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e08:	20000b18 	.word	0x20000b18

08012e0c <iprintf>:
 8012e0c:	b40f      	push	{r0, r1, r2, r3}
 8012e0e:	b507      	push	{r0, r1, r2, lr}
 8012e10:	4906      	ldr	r1, [pc, #24]	@ (8012e2c <iprintf+0x20>)
 8012e12:	ab04      	add	r3, sp, #16
 8012e14:	6808      	ldr	r0, [r1, #0]
 8012e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e1a:	6881      	ldr	r1, [r0, #8]
 8012e1c:	9301      	str	r3, [sp, #4]
 8012e1e:	f000 fc89 	bl	8013734 <_vfiprintf_r>
 8012e22:	b003      	add	sp, #12
 8012e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e28:	b004      	add	sp, #16
 8012e2a:	4770      	bx	lr
 8012e2c:	20000b18 	.word	0x20000b18

08012e30 <sniprintf>:
 8012e30:	b40c      	push	{r2, r3}
 8012e32:	b530      	push	{r4, r5, lr}
 8012e34:	4b17      	ldr	r3, [pc, #92]	@ (8012e94 <sniprintf+0x64>)
 8012e36:	1e0c      	subs	r4, r1, #0
 8012e38:	681d      	ldr	r5, [r3, #0]
 8012e3a:	b09d      	sub	sp, #116	@ 0x74
 8012e3c:	da08      	bge.n	8012e50 <sniprintf+0x20>
 8012e3e:	238b      	movs	r3, #139	@ 0x8b
 8012e40:	602b      	str	r3, [r5, #0]
 8012e42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e46:	b01d      	add	sp, #116	@ 0x74
 8012e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e4c:	b002      	add	sp, #8
 8012e4e:	4770      	bx	lr
 8012e50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012e54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012e58:	bf14      	ite	ne
 8012e5a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012e5e:	4623      	moveq	r3, r4
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	9307      	str	r3, [sp, #28]
 8012e64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e68:	9002      	str	r0, [sp, #8]
 8012e6a:	9006      	str	r0, [sp, #24]
 8012e6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012e70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012e72:	ab21      	add	r3, sp, #132	@ 0x84
 8012e74:	a902      	add	r1, sp, #8
 8012e76:	4628      	mov	r0, r5
 8012e78:	9301      	str	r3, [sp, #4]
 8012e7a:	f000 fb35 	bl	80134e8 <_svfiprintf_r>
 8012e7e:	1c43      	adds	r3, r0, #1
 8012e80:	bfbc      	itt	lt
 8012e82:	238b      	movlt	r3, #139	@ 0x8b
 8012e84:	602b      	strlt	r3, [r5, #0]
 8012e86:	2c00      	cmp	r4, #0
 8012e88:	d0dd      	beq.n	8012e46 <sniprintf+0x16>
 8012e8a:	9b02      	ldr	r3, [sp, #8]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	701a      	strb	r2, [r3, #0]
 8012e90:	e7d9      	b.n	8012e46 <sniprintf+0x16>
 8012e92:	bf00      	nop
 8012e94:	20000b18 	.word	0x20000b18

08012e98 <__sread>:
 8012e98:	b510      	push	{r4, lr}
 8012e9a:	460c      	mov	r4, r1
 8012e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ea0:	f000 f9d2 	bl	8013248 <_read_r>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	bfab      	itete	ge
 8012ea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8012eac:	181b      	addge	r3, r3, r0
 8012eae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012eb2:	bfac      	ite	ge
 8012eb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012eb6:	81a3      	strhlt	r3, [r4, #12]
 8012eb8:	bd10      	pop	{r4, pc}

08012eba <__swrite>:
 8012eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ebe:	461f      	mov	r7, r3
 8012ec0:	898b      	ldrh	r3, [r1, #12]
 8012ec2:	05db      	lsls	r3, r3, #23
 8012ec4:	4605      	mov	r5, r0
 8012ec6:	460c      	mov	r4, r1
 8012ec8:	4616      	mov	r6, r2
 8012eca:	d505      	bpl.n	8012ed8 <__swrite+0x1e>
 8012ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ed0:	2302      	movs	r3, #2
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f000 f9a6 	bl	8013224 <_lseek_r>
 8012ed8:	89a3      	ldrh	r3, [r4, #12]
 8012eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ee2:	81a3      	strh	r3, [r4, #12]
 8012ee4:	4632      	mov	r2, r6
 8012ee6:	463b      	mov	r3, r7
 8012ee8:	4628      	mov	r0, r5
 8012eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eee:	f000 b9cd 	b.w	801328c <_write_r>

08012ef2 <__sseek>:
 8012ef2:	b510      	push	{r4, lr}
 8012ef4:	460c      	mov	r4, r1
 8012ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012efa:	f000 f993 	bl	8013224 <_lseek_r>
 8012efe:	1c43      	adds	r3, r0, #1
 8012f00:	89a3      	ldrh	r3, [r4, #12]
 8012f02:	bf15      	itete	ne
 8012f04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012f06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012f0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012f0e:	81a3      	strheq	r3, [r4, #12]
 8012f10:	bf18      	it	ne
 8012f12:	81a3      	strhne	r3, [r4, #12]
 8012f14:	bd10      	pop	{r4, pc}

08012f16 <__sclose>:
 8012f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f1a:	f000 b91d 	b.w	8013158 <_close_r>

08012f1e <_vsniprintf_r>:
 8012f1e:	b530      	push	{r4, r5, lr}
 8012f20:	4614      	mov	r4, r2
 8012f22:	2c00      	cmp	r4, #0
 8012f24:	b09b      	sub	sp, #108	@ 0x6c
 8012f26:	4605      	mov	r5, r0
 8012f28:	461a      	mov	r2, r3
 8012f2a:	da05      	bge.n	8012f38 <_vsniprintf_r+0x1a>
 8012f2c:	238b      	movs	r3, #139	@ 0x8b
 8012f2e:	6003      	str	r3, [r0, #0]
 8012f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f34:	b01b      	add	sp, #108	@ 0x6c
 8012f36:	bd30      	pop	{r4, r5, pc}
 8012f38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012f3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012f40:	bf14      	ite	ne
 8012f42:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012f46:	4623      	moveq	r3, r4
 8012f48:	9302      	str	r3, [sp, #8]
 8012f4a:	9305      	str	r3, [sp, #20]
 8012f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012f50:	9100      	str	r1, [sp, #0]
 8012f52:	9104      	str	r1, [sp, #16]
 8012f54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012f58:	4669      	mov	r1, sp
 8012f5a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012f5c:	f000 fac4 	bl	80134e8 <_svfiprintf_r>
 8012f60:	1c43      	adds	r3, r0, #1
 8012f62:	bfbc      	itt	lt
 8012f64:	238b      	movlt	r3, #139	@ 0x8b
 8012f66:	602b      	strlt	r3, [r5, #0]
 8012f68:	2c00      	cmp	r4, #0
 8012f6a:	d0e3      	beq.n	8012f34 <_vsniprintf_r+0x16>
 8012f6c:	9b00      	ldr	r3, [sp, #0]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	701a      	strb	r2, [r3, #0]
 8012f72:	e7df      	b.n	8012f34 <_vsniprintf_r+0x16>

08012f74 <vsniprintf>:
 8012f74:	b507      	push	{r0, r1, r2, lr}
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	4613      	mov	r3, r2
 8012f7a:	460a      	mov	r2, r1
 8012f7c:	4601      	mov	r1, r0
 8012f7e:	4803      	ldr	r0, [pc, #12]	@ (8012f8c <vsniprintf+0x18>)
 8012f80:	6800      	ldr	r0, [r0, #0]
 8012f82:	f7ff ffcc 	bl	8012f1e <_vsniprintf_r>
 8012f86:	b003      	add	sp, #12
 8012f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f8c:	20000b18 	.word	0x20000b18

08012f90 <__swbuf_r>:
 8012f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f92:	460e      	mov	r6, r1
 8012f94:	4614      	mov	r4, r2
 8012f96:	4605      	mov	r5, r0
 8012f98:	b118      	cbz	r0, 8012fa2 <__swbuf_r+0x12>
 8012f9a:	6a03      	ldr	r3, [r0, #32]
 8012f9c:	b90b      	cbnz	r3, 8012fa2 <__swbuf_r+0x12>
 8012f9e:	f7ff fea5 	bl	8012cec <__sinit>
 8012fa2:	69a3      	ldr	r3, [r4, #24]
 8012fa4:	60a3      	str	r3, [r4, #8]
 8012fa6:	89a3      	ldrh	r3, [r4, #12]
 8012fa8:	071a      	lsls	r2, r3, #28
 8012faa:	d501      	bpl.n	8012fb0 <__swbuf_r+0x20>
 8012fac:	6923      	ldr	r3, [r4, #16]
 8012fae:	b943      	cbnz	r3, 8012fc2 <__swbuf_r+0x32>
 8012fb0:	4621      	mov	r1, r4
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f000 f82a 	bl	801300c <__swsetup_r>
 8012fb8:	b118      	cbz	r0, 8012fc2 <__swbuf_r+0x32>
 8012fba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	6922      	ldr	r2, [r4, #16]
 8012fc6:	1a98      	subs	r0, r3, r2
 8012fc8:	6963      	ldr	r3, [r4, #20]
 8012fca:	b2f6      	uxtb	r6, r6
 8012fcc:	4283      	cmp	r3, r0
 8012fce:	4637      	mov	r7, r6
 8012fd0:	dc05      	bgt.n	8012fde <__swbuf_r+0x4e>
 8012fd2:	4621      	mov	r1, r4
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f000 fed7 	bl	8013d88 <_fflush_r>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d1ed      	bne.n	8012fba <__swbuf_r+0x2a>
 8012fde:	68a3      	ldr	r3, [r4, #8]
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	60a3      	str	r3, [r4, #8]
 8012fe4:	6823      	ldr	r3, [r4, #0]
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	6022      	str	r2, [r4, #0]
 8012fea:	701e      	strb	r6, [r3, #0]
 8012fec:	6962      	ldr	r2, [r4, #20]
 8012fee:	1c43      	adds	r3, r0, #1
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d004      	beq.n	8012ffe <__swbuf_r+0x6e>
 8012ff4:	89a3      	ldrh	r3, [r4, #12]
 8012ff6:	07db      	lsls	r3, r3, #31
 8012ff8:	d5e1      	bpl.n	8012fbe <__swbuf_r+0x2e>
 8012ffa:	2e0a      	cmp	r6, #10
 8012ffc:	d1df      	bne.n	8012fbe <__swbuf_r+0x2e>
 8012ffe:	4621      	mov	r1, r4
 8013000:	4628      	mov	r0, r5
 8013002:	f000 fec1 	bl	8013d88 <_fflush_r>
 8013006:	2800      	cmp	r0, #0
 8013008:	d0d9      	beq.n	8012fbe <__swbuf_r+0x2e>
 801300a:	e7d6      	b.n	8012fba <__swbuf_r+0x2a>

0801300c <__swsetup_r>:
 801300c:	b538      	push	{r3, r4, r5, lr}
 801300e:	4b29      	ldr	r3, [pc, #164]	@ (80130b4 <__swsetup_r+0xa8>)
 8013010:	4605      	mov	r5, r0
 8013012:	6818      	ldr	r0, [r3, #0]
 8013014:	460c      	mov	r4, r1
 8013016:	b118      	cbz	r0, 8013020 <__swsetup_r+0x14>
 8013018:	6a03      	ldr	r3, [r0, #32]
 801301a:	b90b      	cbnz	r3, 8013020 <__swsetup_r+0x14>
 801301c:	f7ff fe66 	bl	8012cec <__sinit>
 8013020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013024:	0719      	lsls	r1, r3, #28
 8013026:	d422      	bmi.n	801306e <__swsetup_r+0x62>
 8013028:	06da      	lsls	r2, r3, #27
 801302a:	d407      	bmi.n	801303c <__swsetup_r+0x30>
 801302c:	2209      	movs	r2, #9
 801302e:	602a      	str	r2, [r5, #0]
 8013030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013034:	81a3      	strh	r3, [r4, #12]
 8013036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801303a:	e033      	b.n	80130a4 <__swsetup_r+0x98>
 801303c:	0758      	lsls	r0, r3, #29
 801303e:	d512      	bpl.n	8013066 <__swsetup_r+0x5a>
 8013040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013042:	b141      	cbz	r1, 8013056 <__swsetup_r+0x4a>
 8013044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013048:	4299      	cmp	r1, r3
 801304a:	d002      	beq.n	8013052 <__swsetup_r+0x46>
 801304c:	4628      	mov	r0, r5
 801304e:	f000 f99d 	bl	801338c <_free_r>
 8013052:	2300      	movs	r3, #0
 8013054:	6363      	str	r3, [r4, #52]	@ 0x34
 8013056:	89a3      	ldrh	r3, [r4, #12]
 8013058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801305c:	81a3      	strh	r3, [r4, #12]
 801305e:	2300      	movs	r3, #0
 8013060:	6063      	str	r3, [r4, #4]
 8013062:	6923      	ldr	r3, [r4, #16]
 8013064:	6023      	str	r3, [r4, #0]
 8013066:	89a3      	ldrh	r3, [r4, #12]
 8013068:	f043 0308 	orr.w	r3, r3, #8
 801306c:	81a3      	strh	r3, [r4, #12]
 801306e:	6923      	ldr	r3, [r4, #16]
 8013070:	b94b      	cbnz	r3, 8013086 <__swsetup_r+0x7a>
 8013072:	89a3      	ldrh	r3, [r4, #12]
 8013074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801307c:	d003      	beq.n	8013086 <__swsetup_r+0x7a>
 801307e:	4621      	mov	r1, r4
 8013080:	4628      	mov	r0, r5
 8013082:	f000 fee1 	bl	8013e48 <__smakebuf_r>
 8013086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801308a:	f013 0201 	ands.w	r2, r3, #1
 801308e:	d00a      	beq.n	80130a6 <__swsetup_r+0x9a>
 8013090:	2200      	movs	r2, #0
 8013092:	60a2      	str	r2, [r4, #8]
 8013094:	6962      	ldr	r2, [r4, #20]
 8013096:	4252      	negs	r2, r2
 8013098:	61a2      	str	r2, [r4, #24]
 801309a:	6922      	ldr	r2, [r4, #16]
 801309c:	b942      	cbnz	r2, 80130b0 <__swsetup_r+0xa4>
 801309e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80130a2:	d1c5      	bne.n	8013030 <__swsetup_r+0x24>
 80130a4:	bd38      	pop	{r3, r4, r5, pc}
 80130a6:	0799      	lsls	r1, r3, #30
 80130a8:	bf58      	it	pl
 80130aa:	6962      	ldrpl	r2, [r4, #20]
 80130ac:	60a2      	str	r2, [r4, #8]
 80130ae:	e7f4      	b.n	801309a <__swsetup_r+0x8e>
 80130b0:	2000      	movs	r0, #0
 80130b2:	e7f7      	b.n	80130a4 <__swsetup_r+0x98>
 80130b4:	20000b18 	.word	0x20000b18

080130b8 <memset>:
 80130b8:	4402      	add	r2, r0
 80130ba:	4603      	mov	r3, r0
 80130bc:	4293      	cmp	r3, r2
 80130be:	d100      	bne.n	80130c2 <memset+0xa>
 80130c0:	4770      	bx	lr
 80130c2:	f803 1b01 	strb.w	r1, [r3], #1
 80130c6:	e7f9      	b.n	80130bc <memset+0x4>

080130c8 <strchr>:
 80130c8:	b2c9      	uxtb	r1, r1
 80130ca:	4603      	mov	r3, r0
 80130cc:	4618      	mov	r0, r3
 80130ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130d2:	b112      	cbz	r2, 80130da <strchr+0x12>
 80130d4:	428a      	cmp	r2, r1
 80130d6:	d1f9      	bne.n	80130cc <strchr+0x4>
 80130d8:	4770      	bx	lr
 80130da:	2900      	cmp	r1, #0
 80130dc:	bf18      	it	ne
 80130de:	2000      	movne	r0, #0
 80130e0:	4770      	bx	lr

080130e2 <strncmp>:
 80130e2:	b510      	push	{r4, lr}
 80130e4:	b16a      	cbz	r2, 8013102 <strncmp+0x20>
 80130e6:	3901      	subs	r1, #1
 80130e8:	1884      	adds	r4, r0, r2
 80130ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d103      	bne.n	80130fe <strncmp+0x1c>
 80130f6:	42a0      	cmp	r0, r4
 80130f8:	d001      	beq.n	80130fe <strncmp+0x1c>
 80130fa:	2a00      	cmp	r2, #0
 80130fc:	d1f5      	bne.n	80130ea <strncmp+0x8>
 80130fe:	1ad0      	subs	r0, r2, r3
 8013100:	bd10      	pop	{r4, pc}
 8013102:	4610      	mov	r0, r2
 8013104:	e7fc      	b.n	8013100 <strncmp+0x1e>

08013106 <strncpy>:
 8013106:	b510      	push	{r4, lr}
 8013108:	3901      	subs	r1, #1
 801310a:	4603      	mov	r3, r0
 801310c:	b132      	cbz	r2, 801311c <strncpy+0x16>
 801310e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013112:	f803 4b01 	strb.w	r4, [r3], #1
 8013116:	3a01      	subs	r2, #1
 8013118:	2c00      	cmp	r4, #0
 801311a:	d1f7      	bne.n	801310c <strncpy+0x6>
 801311c:	441a      	add	r2, r3
 801311e:	2100      	movs	r1, #0
 8013120:	4293      	cmp	r3, r2
 8013122:	d100      	bne.n	8013126 <strncpy+0x20>
 8013124:	bd10      	pop	{r4, pc}
 8013126:	f803 1b01 	strb.w	r1, [r3], #1
 801312a:	e7f9      	b.n	8013120 <strncpy+0x1a>

0801312c <strstr>:
 801312c:	780a      	ldrb	r2, [r1, #0]
 801312e:	b570      	push	{r4, r5, r6, lr}
 8013130:	b96a      	cbnz	r2, 801314e <strstr+0x22>
 8013132:	bd70      	pop	{r4, r5, r6, pc}
 8013134:	429a      	cmp	r2, r3
 8013136:	d109      	bne.n	801314c <strstr+0x20>
 8013138:	460c      	mov	r4, r1
 801313a:	4605      	mov	r5, r0
 801313c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013140:	2b00      	cmp	r3, #0
 8013142:	d0f6      	beq.n	8013132 <strstr+0x6>
 8013144:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013148:	429e      	cmp	r6, r3
 801314a:	d0f7      	beq.n	801313c <strstr+0x10>
 801314c:	3001      	adds	r0, #1
 801314e:	7803      	ldrb	r3, [r0, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d1ef      	bne.n	8013134 <strstr+0x8>
 8013154:	4618      	mov	r0, r3
 8013156:	e7ec      	b.n	8013132 <strstr+0x6>

08013158 <_close_r>:
 8013158:	b538      	push	{r3, r4, r5, lr}
 801315a:	4d06      	ldr	r5, [pc, #24]	@ (8013174 <_close_r+0x1c>)
 801315c:	2300      	movs	r3, #0
 801315e:	4604      	mov	r4, r0
 8013160:	4608      	mov	r0, r1
 8013162:	602b      	str	r3, [r5, #0]
 8013164:	f7ee fc52 	bl	8001a0c <_close>
 8013168:	1c43      	adds	r3, r0, #1
 801316a:	d102      	bne.n	8013172 <_close_r+0x1a>
 801316c:	682b      	ldr	r3, [r5, #0]
 801316e:	b103      	cbz	r3, 8013172 <_close_r+0x1a>
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	bd38      	pop	{r3, r4, r5, pc}
 8013174:	20010d10 	.word	0x20010d10

08013178 <_reclaim_reent>:
 8013178:	4b29      	ldr	r3, [pc, #164]	@ (8013220 <_reclaim_reent+0xa8>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4283      	cmp	r3, r0
 801317e:	b570      	push	{r4, r5, r6, lr}
 8013180:	4604      	mov	r4, r0
 8013182:	d04b      	beq.n	801321c <_reclaim_reent+0xa4>
 8013184:	69c3      	ldr	r3, [r0, #28]
 8013186:	b1ab      	cbz	r3, 80131b4 <_reclaim_reent+0x3c>
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	b16b      	cbz	r3, 80131a8 <_reclaim_reent+0x30>
 801318c:	2500      	movs	r5, #0
 801318e:	69e3      	ldr	r3, [r4, #28]
 8013190:	68db      	ldr	r3, [r3, #12]
 8013192:	5959      	ldr	r1, [r3, r5]
 8013194:	2900      	cmp	r1, #0
 8013196:	d13b      	bne.n	8013210 <_reclaim_reent+0x98>
 8013198:	3504      	adds	r5, #4
 801319a:	2d80      	cmp	r5, #128	@ 0x80
 801319c:	d1f7      	bne.n	801318e <_reclaim_reent+0x16>
 801319e:	69e3      	ldr	r3, [r4, #28]
 80131a0:	4620      	mov	r0, r4
 80131a2:	68d9      	ldr	r1, [r3, #12]
 80131a4:	f000 f8f2 	bl	801338c <_free_r>
 80131a8:	69e3      	ldr	r3, [r4, #28]
 80131aa:	6819      	ldr	r1, [r3, #0]
 80131ac:	b111      	cbz	r1, 80131b4 <_reclaim_reent+0x3c>
 80131ae:	4620      	mov	r0, r4
 80131b0:	f000 f8ec 	bl	801338c <_free_r>
 80131b4:	6961      	ldr	r1, [r4, #20]
 80131b6:	b111      	cbz	r1, 80131be <_reclaim_reent+0x46>
 80131b8:	4620      	mov	r0, r4
 80131ba:	f000 f8e7 	bl	801338c <_free_r>
 80131be:	69e1      	ldr	r1, [r4, #28]
 80131c0:	b111      	cbz	r1, 80131c8 <_reclaim_reent+0x50>
 80131c2:	4620      	mov	r0, r4
 80131c4:	f000 f8e2 	bl	801338c <_free_r>
 80131c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80131ca:	b111      	cbz	r1, 80131d2 <_reclaim_reent+0x5a>
 80131cc:	4620      	mov	r0, r4
 80131ce:	f000 f8dd 	bl	801338c <_free_r>
 80131d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80131d4:	b111      	cbz	r1, 80131dc <_reclaim_reent+0x64>
 80131d6:	4620      	mov	r0, r4
 80131d8:	f000 f8d8 	bl	801338c <_free_r>
 80131dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80131de:	b111      	cbz	r1, 80131e6 <_reclaim_reent+0x6e>
 80131e0:	4620      	mov	r0, r4
 80131e2:	f000 f8d3 	bl	801338c <_free_r>
 80131e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80131e8:	b111      	cbz	r1, 80131f0 <_reclaim_reent+0x78>
 80131ea:	4620      	mov	r0, r4
 80131ec:	f000 f8ce 	bl	801338c <_free_r>
 80131f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80131f2:	b111      	cbz	r1, 80131fa <_reclaim_reent+0x82>
 80131f4:	4620      	mov	r0, r4
 80131f6:	f000 f8c9 	bl	801338c <_free_r>
 80131fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80131fc:	b111      	cbz	r1, 8013204 <_reclaim_reent+0x8c>
 80131fe:	4620      	mov	r0, r4
 8013200:	f000 f8c4 	bl	801338c <_free_r>
 8013204:	6a23      	ldr	r3, [r4, #32]
 8013206:	b14b      	cbz	r3, 801321c <_reclaim_reent+0xa4>
 8013208:	4620      	mov	r0, r4
 801320a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801320e:	4718      	bx	r3
 8013210:	680e      	ldr	r6, [r1, #0]
 8013212:	4620      	mov	r0, r4
 8013214:	f000 f8ba 	bl	801338c <_free_r>
 8013218:	4631      	mov	r1, r6
 801321a:	e7bb      	b.n	8013194 <_reclaim_reent+0x1c>
 801321c:	bd70      	pop	{r4, r5, r6, pc}
 801321e:	bf00      	nop
 8013220:	20000b18 	.word	0x20000b18

08013224 <_lseek_r>:
 8013224:	b538      	push	{r3, r4, r5, lr}
 8013226:	4d07      	ldr	r5, [pc, #28]	@ (8013244 <_lseek_r+0x20>)
 8013228:	4604      	mov	r4, r0
 801322a:	4608      	mov	r0, r1
 801322c:	4611      	mov	r1, r2
 801322e:	2200      	movs	r2, #0
 8013230:	602a      	str	r2, [r5, #0]
 8013232:	461a      	mov	r2, r3
 8013234:	f7ee fc11 	bl	8001a5a <_lseek>
 8013238:	1c43      	adds	r3, r0, #1
 801323a:	d102      	bne.n	8013242 <_lseek_r+0x1e>
 801323c:	682b      	ldr	r3, [r5, #0]
 801323e:	b103      	cbz	r3, 8013242 <_lseek_r+0x1e>
 8013240:	6023      	str	r3, [r4, #0]
 8013242:	bd38      	pop	{r3, r4, r5, pc}
 8013244:	20010d10 	.word	0x20010d10

08013248 <_read_r>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4d07      	ldr	r5, [pc, #28]	@ (8013268 <_read_r+0x20>)
 801324c:	4604      	mov	r4, r0
 801324e:	4608      	mov	r0, r1
 8013250:	4611      	mov	r1, r2
 8013252:	2200      	movs	r2, #0
 8013254:	602a      	str	r2, [r5, #0]
 8013256:	461a      	mov	r2, r3
 8013258:	f7ee fb9f 	bl	800199a <_read>
 801325c:	1c43      	adds	r3, r0, #1
 801325e:	d102      	bne.n	8013266 <_read_r+0x1e>
 8013260:	682b      	ldr	r3, [r5, #0]
 8013262:	b103      	cbz	r3, 8013266 <_read_r+0x1e>
 8013264:	6023      	str	r3, [r4, #0]
 8013266:	bd38      	pop	{r3, r4, r5, pc}
 8013268:	20010d10 	.word	0x20010d10

0801326c <_sbrk_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	4d06      	ldr	r5, [pc, #24]	@ (8013288 <_sbrk_r+0x1c>)
 8013270:	2300      	movs	r3, #0
 8013272:	4604      	mov	r4, r0
 8013274:	4608      	mov	r0, r1
 8013276:	602b      	str	r3, [r5, #0]
 8013278:	f7ee fbfc 	bl	8001a74 <_sbrk>
 801327c:	1c43      	adds	r3, r0, #1
 801327e:	d102      	bne.n	8013286 <_sbrk_r+0x1a>
 8013280:	682b      	ldr	r3, [r5, #0]
 8013282:	b103      	cbz	r3, 8013286 <_sbrk_r+0x1a>
 8013284:	6023      	str	r3, [r4, #0]
 8013286:	bd38      	pop	{r3, r4, r5, pc}
 8013288:	20010d10 	.word	0x20010d10

0801328c <_write_r>:
 801328c:	b538      	push	{r3, r4, r5, lr}
 801328e:	4d07      	ldr	r5, [pc, #28]	@ (80132ac <_write_r+0x20>)
 8013290:	4604      	mov	r4, r0
 8013292:	4608      	mov	r0, r1
 8013294:	4611      	mov	r1, r2
 8013296:	2200      	movs	r2, #0
 8013298:	602a      	str	r2, [r5, #0]
 801329a:	461a      	mov	r2, r3
 801329c:	f7ee fb9a 	bl	80019d4 <_write>
 80132a0:	1c43      	adds	r3, r0, #1
 80132a2:	d102      	bne.n	80132aa <_write_r+0x1e>
 80132a4:	682b      	ldr	r3, [r5, #0]
 80132a6:	b103      	cbz	r3, 80132aa <_write_r+0x1e>
 80132a8:	6023      	str	r3, [r4, #0]
 80132aa:	bd38      	pop	{r3, r4, r5, pc}
 80132ac:	20010d10 	.word	0x20010d10

080132b0 <__errno>:
 80132b0:	4b01      	ldr	r3, [pc, #4]	@ (80132b8 <__errno+0x8>)
 80132b2:	6818      	ldr	r0, [r3, #0]
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop
 80132b8:	20000b18 	.word	0x20000b18

080132bc <__libc_init_array>:
 80132bc:	b570      	push	{r4, r5, r6, lr}
 80132be:	4d0d      	ldr	r5, [pc, #52]	@ (80132f4 <__libc_init_array+0x38>)
 80132c0:	4c0d      	ldr	r4, [pc, #52]	@ (80132f8 <__libc_init_array+0x3c>)
 80132c2:	1b64      	subs	r4, r4, r5
 80132c4:	10a4      	asrs	r4, r4, #2
 80132c6:	2600      	movs	r6, #0
 80132c8:	42a6      	cmp	r6, r4
 80132ca:	d109      	bne.n	80132e0 <__libc_init_array+0x24>
 80132cc:	4d0b      	ldr	r5, [pc, #44]	@ (80132fc <__libc_init_array+0x40>)
 80132ce:	4c0c      	ldr	r4, [pc, #48]	@ (8013300 <__libc_init_array+0x44>)
 80132d0:	f000 fe7e 	bl	8013fd0 <_init>
 80132d4:	1b64      	subs	r4, r4, r5
 80132d6:	10a4      	asrs	r4, r4, #2
 80132d8:	2600      	movs	r6, #0
 80132da:	42a6      	cmp	r6, r4
 80132dc:	d105      	bne.n	80132ea <__libc_init_array+0x2e>
 80132de:	bd70      	pop	{r4, r5, r6, pc}
 80132e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80132e4:	4798      	blx	r3
 80132e6:	3601      	adds	r6, #1
 80132e8:	e7ee      	b.n	80132c8 <__libc_init_array+0xc>
 80132ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80132ee:	4798      	blx	r3
 80132f0:	3601      	adds	r6, #1
 80132f2:	e7f2      	b.n	80132da <__libc_init_array+0x1e>
 80132f4:	0801509c 	.word	0x0801509c
 80132f8:	0801509c 	.word	0x0801509c
 80132fc:	0801509c 	.word	0x0801509c
 8013300:	080150a4 	.word	0x080150a4

08013304 <__retarget_lock_init_recursive>:
 8013304:	4770      	bx	lr

08013306 <__retarget_lock_acquire_recursive>:
 8013306:	4770      	bx	lr

08013308 <__retarget_lock_release_recursive>:
 8013308:	4770      	bx	lr

0801330a <strcpy>:
 801330a:	4603      	mov	r3, r0
 801330c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013310:	f803 2b01 	strb.w	r2, [r3], #1
 8013314:	2a00      	cmp	r2, #0
 8013316:	d1f9      	bne.n	801330c <strcpy+0x2>
 8013318:	4770      	bx	lr

0801331a <memcpy>:
 801331a:	440a      	add	r2, r1
 801331c:	4291      	cmp	r1, r2
 801331e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013322:	d100      	bne.n	8013326 <memcpy+0xc>
 8013324:	4770      	bx	lr
 8013326:	b510      	push	{r4, lr}
 8013328:	f811 4b01 	ldrb.w	r4, [r1], #1
 801332c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013330:	4291      	cmp	r1, r2
 8013332:	d1f9      	bne.n	8013328 <memcpy+0xe>
 8013334:	bd10      	pop	{r4, pc}
	...

08013338 <__assert_func>:
 8013338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801333a:	4614      	mov	r4, r2
 801333c:	461a      	mov	r2, r3
 801333e:	4b09      	ldr	r3, [pc, #36]	@ (8013364 <__assert_func+0x2c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	4605      	mov	r5, r0
 8013344:	68d8      	ldr	r0, [r3, #12]
 8013346:	b954      	cbnz	r4, 801335e <__assert_func+0x26>
 8013348:	4b07      	ldr	r3, [pc, #28]	@ (8013368 <__assert_func+0x30>)
 801334a:	461c      	mov	r4, r3
 801334c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013350:	9100      	str	r1, [sp, #0]
 8013352:	462b      	mov	r3, r5
 8013354:	4905      	ldr	r1, [pc, #20]	@ (801336c <__assert_func+0x34>)
 8013356:	f000 fd3f 	bl	8013dd8 <fiprintf>
 801335a:	f000 fded 	bl	8013f38 <abort>
 801335e:	4b04      	ldr	r3, [pc, #16]	@ (8013370 <__assert_func+0x38>)
 8013360:	e7f4      	b.n	801334c <__assert_func+0x14>
 8013362:	bf00      	nop
 8013364:	20000b18 	.word	0x20000b18
 8013368:	0801505d 	.word	0x0801505d
 801336c:	0801502f 	.word	0x0801502f
 8013370:	08015022 	.word	0x08015022

08013374 <__env_lock>:
 8013374:	4801      	ldr	r0, [pc, #4]	@ (801337c <__env_lock+0x8>)
 8013376:	f7ff bfc6 	b.w	8013306 <__retarget_lock_acquire_recursive>
 801337a:	bf00      	nop
 801337c:	20010d14 	.word	0x20010d14

08013380 <__env_unlock>:
 8013380:	4801      	ldr	r0, [pc, #4]	@ (8013388 <__env_unlock+0x8>)
 8013382:	f7ff bfc1 	b.w	8013308 <__retarget_lock_release_recursive>
 8013386:	bf00      	nop
 8013388:	20010d14 	.word	0x20010d14

0801338c <_free_r>:
 801338c:	b538      	push	{r3, r4, r5, lr}
 801338e:	4605      	mov	r5, r0
 8013390:	2900      	cmp	r1, #0
 8013392:	d041      	beq.n	8013418 <_free_r+0x8c>
 8013394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013398:	1f0c      	subs	r4, r1, #4
 801339a:	2b00      	cmp	r3, #0
 801339c:	bfb8      	it	lt
 801339e:	18e4      	addlt	r4, r4, r3
 80133a0:	f7ff faf2 	bl	8012988 <__malloc_lock>
 80133a4:	4a1d      	ldr	r2, [pc, #116]	@ (801341c <_free_r+0x90>)
 80133a6:	6813      	ldr	r3, [r2, #0]
 80133a8:	b933      	cbnz	r3, 80133b8 <_free_r+0x2c>
 80133aa:	6063      	str	r3, [r4, #4]
 80133ac:	6014      	str	r4, [r2, #0]
 80133ae:	4628      	mov	r0, r5
 80133b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133b4:	f7ff baee 	b.w	8012994 <__malloc_unlock>
 80133b8:	42a3      	cmp	r3, r4
 80133ba:	d908      	bls.n	80133ce <_free_r+0x42>
 80133bc:	6820      	ldr	r0, [r4, #0]
 80133be:	1821      	adds	r1, r4, r0
 80133c0:	428b      	cmp	r3, r1
 80133c2:	bf01      	itttt	eq
 80133c4:	6819      	ldreq	r1, [r3, #0]
 80133c6:	685b      	ldreq	r3, [r3, #4]
 80133c8:	1809      	addeq	r1, r1, r0
 80133ca:	6021      	streq	r1, [r4, #0]
 80133cc:	e7ed      	b.n	80133aa <_free_r+0x1e>
 80133ce:	461a      	mov	r2, r3
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	b10b      	cbz	r3, 80133d8 <_free_r+0x4c>
 80133d4:	42a3      	cmp	r3, r4
 80133d6:	d9fa      	bls.n	80133ce <_free_r+0x42>
 80133d8:	6811      	ldr	r1, [r2, #0]
 80133da:	1850      	adds	r0, r2, r1
 80133dc:	42a0      	cmp	r0, r4
 80133de:	d10b      	bne.n	80133f8 <_free_r+0x6c>
 80133e0:	6820      	ldr	r0, [r4, #0]
 80133e2:	4401      	add	r1, r0
 80133e4:	1850      	adds	r0, r2, r1
 80133e6:	4283      	cmp	r3, r0
 80133e8:	6011      	str	r1, [r2, #0]
 80133ea:	d1e0      	bne.n	80133ae <_free_r+0x22>
 80133ec:	6818      	ldr	r0, [r3, #0]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	6053      	str	r3, [r2, #4]
 80133f2:	4408      	add	r0, r1
 80133f4:	6010      	str	r0, [r2, #0]
 80133f6:	e7da      	b.n	80133ae <_free_r+0x22>
 80133f8:	d902      	bls.n	8013400 <_free_r+0x74>
 80133fa:	230c      	movs	r3, #12
 80133fc:	602b      	str	r3, [r5, #0]
 80133fe:	e7d6      	b.n	80133ae <_free_r+0x22>
 8013400:	6820      	ldr	r0, [r4, #0]
 8013402:	1821      	adds	r1, r4, r0
 8013404:	428b      	cmp	r3, r1
 8013406:	bf04      	itt	eq
 8013408:	6819      	ldreq	r1, [r3, #0]
 801340a:	685b      	ldreq	r3, [r3, #4]
 801340c:	6063      	str	r3, [r4, #4]
 801340e:	bf04      	itt	eq
 8013410:	1809      	addeq	r1, r1, r0
 8013412:	6021      	streq	r1, [r4, #0]
 8013414:	6054      	str	r4, [r2, #4]
 8013416:	e7ca      	b.n	80133ae <_free_r+0x22>
 8013418:	bd38      	pop	{r3, r4, r5, pc}
 801341a:	bf00      	nop
 801341c:	20010bd0 	.word	0x20010bd0

08013420 <_malloc_usable_size_r>:
 8013420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013424:	1f18      	subs	r0, r3, #4
 8013426:	2b00      	cmp	r3, #0
 8013428:	bfbc      	itt	lt
 801342a:	580b      	ldrlt	r3, [r1, r0]
 801342c:	18c0      	addlt	r0, r0, r3
 801342e:	4770      	bx	lr

08013430 <__ssputs_r>:
 8013430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013434:	688e      	ldr	r6, [r1, #8]
 8013436:	461f      	mov	r7, r3
 8013438:	42be      	cmp	r6, r7
 801343a:	680b      	ldr	r3, [r1, #0]
 801343c:	4682      	mov	sl, r0
 801343e:	460c      	mov	r4, r1
 8013440:	4690      	mov	r8, r2
 8013442:	d82d      	bhi.n	80134a0 <__ssputs_r+0x70>
 8013444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013448:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801344c:	d026      	beq.n	801349c <__ssputs_r+0x6c>
 801344e:	6965      	ldr	r5, [r4, #20]
 8013450:	6909      	ldr	r1, [r1, #16]
 8013452:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013456:	eba3 0901 	sub.w	r9, r3, r1
 801345a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801345e:	1c7b      	adds	r3, r7, #1
 8013460:	444b      	add	r3, r9
 8013462:	106d      	asrs	r5, r5, #1
 8013464:	429d      	cmp	r5, r3
 8013466:	bf38      	it	cc
 8013468:	461d      	movcc	r5, r3
 801346a:	0553      	lsls	r3, r2, #21
 801346c:	d527      	bpl.n	80134be <__ssputs_r+0x8e>
 801346e:	4629      	mov	r1, r5
 8013470:	f7ff fa0a 	bl	8012888 <_malloc_r>
 8013474:	4606      	mov	r6, r0
 8013476:	b360      	cbz	r0, 80134d2 <__ssputs_r+0xa2>
 8013478:	6921      	ldr	r1, [r4, #16]
 801347a:	464a      	mov	r2, r9
 801347c:	f7ff ff4d 	bl	801331a <memcpy>
 8013480:	89a3      	ldrh	r3, [r4, #12]
 8013482:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801348a:	81a3      	strh	r3, [r4, #12]
 801348c:	6126      	str	r6, [r4, #16]
 801348e:	6165      	str	r5, [r4, #20]
 8013490:	444e      	add	r6, r9
 8013492:	eba5 0509 	sub.w	r5, r5, r9
 8013496:	6026      	str	r6, [r4, #0]
 8013498:	60a5      	str	r5, [r4, #8]
 801349a:	463e      	mov	r6, r7
 801349c:	42be      	cmp	r6, r7
 801349e:	d900      	bls.n	80134a2 <__ssputs_r+0x72>
 80134a0:	463e      	mov	r6, r7
 80134a2:	6820      	ldr	r0, [r4, #0]
 80134a4:	4632      	mov	r2, r6
 80134a6:	4641      	mov	r1, r8
 80134a8:	f000 fd0a 	bl	8013ec0 <memmove>
 80134ac:	68a3      	ldr	r3, [r4, #8]
 80134ae:	1b9b      	subs	r3, r3, r6
 80134b0:	60a3      	str	r3, [r4, #8]
 80134b2:	6823      	ldr	r3, [r4, #0]
 80134b4:	4433      	add	r3, r6
 80134b6:	6023      	str	r3, [r4, #0]
 80134b8:	2000      	movs	r0, #0
 80134ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134be:	462a      	mov	r2, r5
 80134c0:	f7ff fae2 	bl	8012a88 <_realloc_r>
 80134c4:	4606      	mov	r6, r0
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d1e0      	bne.n	801348c <__ssputs_r+0x5c>
 80134ca:	6921      	ldr	r1, [r4, #16]
 80134cc:	4650      	mov	r0, sl
 80134ce:	f7ff ff5d 	bl	801338c <_free_r>
 80134d2:	230c      	movs	r3, #12
 80134d4:	f8ca 3000 	str.w	r3, [sl]
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134de:	81a3      	strh	r3, [r4, #12]
 80134e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80134e4:	e7e9      	b.n	80134ba <__ssputs_r+0x8a>
	...

080134e8 <_svfiprintf_r>:
 80134e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	4698      	mov	r8, r3
 80134ee:	898b      	ldrh	r3, [r1, #12]
 80134f0:	061b      	lsls	r3, r3, #24
 80134f2:	b09d      	sub	sp, #116	@ 0x74
 80134f4:	4607      	mov	r7, r0
 80134f6:	460d      	mov	r5, r1
 80134f8:	4614      	mov	r4, r2
 80134fa:	d510      	bpl.n	801351e <_svfiprintf_r+0x36>
 80134fc:	690b      	ldr	r3, [r1, #16]
 80134fe:	b973      	cbnz	r3, 801351e <_svfiprintf_r+0x36>
 8013500:	2140      	movs	r1, #64	@ 0x40
 8013502:	f7ff f9c1 	bl	8012888 <_malloc_r>
 8013506:	6028      	str	r0, [r5, #0]
 8013508:	6128      	str	r0, [r5, #16]
 801350a:	b930      	cbnz	r0, 801351a <_svfiprintf_r+0x32>
 801350c:	230c      	movs	r3, #12
 801350e:	603b      	str	r3, [r7, #0]
 8013510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013514:	b01d      	add	sp, #116	@ 0x74
 8013516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351a:	2340      	movs	r3, #64	@ 0x40
 801351c:	616b      	str	r3, [r5, #20]
 801351e:	2300      	movs	r3, #0
 8013520:	9309      	str	r3, [sp, #36]	@ 0x24
 8013522:	2320      	movs	r3, #32
 8013524:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013528:	f8cd 800c 	str.w	r8, [sp, #12]
 801352c:	2330      	movs	r3, #48	@ 0x30
 801352e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80136cc <_svfiprintf_r+0x1e4>
 8013532:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013536:	f04f 0901 	mov.w	r9, #1
 801353a:	4623      	mov	r3, r4
 801353c:	469a      	mov	sl, r3
 801353e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013542:	b10a      	cbz	r2, 8013548 <_svfiprintf_r+0x60>
 8013544:	2a25      	cmp	r2, #37	@ 0x25
 8013546:	d1f9      	bne.n	801353c <_svfiprintf_r+0x54>
 8013548:	ebba 0b04 	subs.w	fp, sl, r4
 801354c:	d00b      	beq.n	8013566 <_svfiprintf_r+0x7e>
 801354e:	465b      	mov	r3, fp
 8013550:	4622      	mov	r2, r4
 8013552:	4629      	mov	r1, r5
 8013554:	4638      	mov	r0, r7
 8013556:	f7ff ff6b 	bl	8013430 <__ssputs_r>
 801355a:	3001      	adds	r0, #1
 801355c:	f000 80a7 	beq.w	80136ae <_svfiprintf_r+0x1c6>
 8013560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013562:	445a      	add	r2, fp
 8013564:	9209      	str	r2, [sp, #36]	@ 0x24
 8013566:	f89a 3000 	ldrb.w	r3, [sl]
 801356a:	2b00      	cmp	r3, #0
 801356c:	f000 809f 	beq.w	80136ae <_svfiprintf_r+0x1c6>
 8013570:	2300      	movs	r3, #0
 8013572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801357a:	f10a 0a01 	add.w	sl, sl, #1
 801357e:	9304      	str	r3, [sp, #16]
 8013580:	9307      	str	r3, [sp, #28]
 8013582:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013586:	931a      	str	r3, [sp, #104]	@ 0x68
 8013588:	4654      	mov	r4, sl
 801358a:	2205      	movs	r2, #5
 801358c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013590:	484e      	ldr	r0, [pc, #312]	@ (80136cc <_svfiprintf_r+0x1e4>)
 8013592:	f7ec fe55 	bl	8000240 <memchr>
 8013596:	9a04      	ldr	r2, [sp, #16]
 8013598:	b9d8      	cbnz	r0, 80135d2 <_svfiprintf_r+0xea>
 801359a:	06d0      	lsls	r0, r2, #27
 801359c:	bf44      	itt	mi
 801359e:	2320      	movmi	r3, #32
 80135a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135a4:	0711      	lsls	r1, r2, #28
 80135a6:	bf44      	itt	mi
 80135a8:	232b      	movmi	r3, #43	@ 0x2b
 80135aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135ae:	f89a 3000 	ldrb.w	r3, [sl]
 80135b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80135b4:	d015      	beq.n	80135e2 <_svfiprintf_r+0xfa>
 80135b6:	9a07      	ldr	r2, [sp, #28]
 80135b8:	4654      	mov	r4, sl
 80135ba:	2000      	movs	r0, #0
 80135bc:	f04f 0c0a 	mov.w	ip, #10
 80135c0:	4621      	mov	r1, r4
 80135c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135c6:	3b30      	subs	r3, #48	@ 0x30
 80135c8:	2b09      	cmp	r3, #9
 80135ca:	d94b      	bls.n	8013664 <_svfiprintf_r+0x17c>
 80135cc:	b1b0      	cbz	r0, 80135fc <_svfiprintf_r+0x114>
 80135ce:	9207      	str	r2, [sp, #28]
 80135d0:	e014      	b.n	80135fc <_svfiprintf_r+0x114>
 80135d2:	eba0 0308 	sub.w	r3, r0, r8
 80135d6:	fa09 f303 	lsl.w	r3, r9, r3
 80135da:	4313      	orrs	r3, r2
 80135dc:	9304      	str	r3, [sp, #16]
 80135de:	46a2      	mov	sl, r4
 80135e0:	e7d2      	b.n	8013588 <_svfiprintf_r+0xa0>
 80135e2:	9b03      	ldr	r3, [sp, #12]
 80135e4:	1d19      	adds	r1, r3, #4
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	9103      	str	r1, [sp, #12]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	bfbb      	ittet	lt
 80135ee:	425b      	neglt	r3, r3
 80135f0:	f042 0202 	orrlt.w	r2, r2, #2
 80135f4:	9307      	strge	r3, [sp, #28]
 80135f6:	9307      	strlt	r3, [sp, #28]
 80135f8:	bfb8      	it	lt
 80135fa:	9204      	strlt	r2, [sp, #16]
 80135fc:	7823      	ldrb	r3, [r4, #0]
 80135fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8013600:	d10a      	bne.n	8013618 <_svfiprintf_r+0x130>
 8013602:	7863      	ldrb	r3, [r4, #1]
 8013604:	2b2a      	cmp	r3, #42	@ 0x2a
 8013606:	d132      	bne.n	801366e <_svfiprintf_r+0x186>
 8013608:	9b03      	ldr	r3, [sp, #12]
 801360a:	1d1a      	adds	r2, r3, #4
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	9203      	str	r2, [sp, #12]
 8013610:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013614:	3402      	adds	r4, #2
 8013616:	9305      	str	r3, [sp, #20]
 8013618:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80136dc <_svfiprintf_r+0x1f4>
 801361c:	7821      	ldrb	r1, [r4, #0]
 801361e:	2203      	movs	r2, #3
 8013620:	4650      	mov	r0, sl
 8013622:	f7ec fe0d 	bl	8000240 <memchr>
 8013626:	b138      	cbz	r0, 8013638 <_svfiprintf_r+0x150>
 8013628:	9b04      	ldr	r3, [sp, #16]
 801362a:	eba0 000a 	sub.w	r0, r0, sl
 801362e:	2240      	movs	r2, #64	@ 0x40
 8013630:	4082      	lsls	r2, r0
 8013632:	4313      	orrs	r3, r2
 8013634:	3401      	adds	r4, #1
 8013636:	9304      	str	r3, [sp, #16]
 8013638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801363c:	4824      	ldr	r0, [pc, #144]	@ (80136d0 <_svfiprintf_r+0x1e8>)
 801363e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013642:	2206      	movs	r2, #6
 8013644:	f7ec fdfc 	bl	8000240 <memchr>
 8013648:	2800      	cmp	r0, #0
 801364a:	d036      	beq.n	80136ba <_svfiprintf_r+0x1d2>
 801364c:	4b21      	ldr	r3, [pc, #132]	@ (80136d4 <_svfiprintf_r+0x1ec>)
 801364e:	bb1b      	cbnz	r3, 8013698 <_svfiprintf_r+0x1b0>
 8013650:	9b03      	ldr	r3, [sp, #12]
 8013652:	3307      	adds	r3, #7
 8013654:	f023 0307 	bic.w	r3, r3, #7
 8013658:	3308      	adds	r3, #8
 801365a:	9303      	str	r3, [sp, #12]
 801365c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801365e:	4433      	add	r3, r6
 8013660:	9309      	str	r3, [sp, #36]	@ 0x24
 8013662:	e76a      	b.n	801353a <_svfiprintf_r+0x52>
 8013664:	fb0c 3202 	mla	r2, ip, r2, r3
 8013668:	460c      	mov	r4, r1
 801366a:	2001      	movs	r0, #1
 801366c:	e7a8      	b.n	80135c0 <_svfiprintf_r+0xd8>
 801366e:	2300      	movs	r3, #0
 8013670:	3401      	adds	r4, #1
 8013672:	9305      	str	r3, [sp, #20]
 8013674:	4619      	mov	r1, r3
 8013676:	f04f 0c0a 	mov.w	ip, #10
 801367a:	4620      	mov	r0, r4
 801367c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013680:	3a30      	subs	r2, #48	@ 0x30
 8013682:	2a09      	cmp	r2, #9
 8013684:	d903      	bls.n	801368e <_svfiprintf_r+0x1a6>
 8013686:	2b00      	cmp	r3, #0
 8013688:	d0c6      	beq.n	8013618 <_svfiprintf_r+0x130>
 801368a:	9105      	str	r1, [sp, #20]
 801368c:	e7c4      	b.n	8013618 <_svfiprintf_r+0x130>
 801368e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013692:	4604      	mov	r4, r0
 8013694:	2301      	movs	r3, #1
 8013696:	e7f0      	b.n	801367a <_svfiprintf_r+0x192>
 8013698:	ab03      	add	r3, sp, #12
 801369a:	9300      	str	r3, [sp, #0]
 801369c:	462a      	mov	r2, r5
 801369e:	4b0e      	ldr	r3, [pc, #56]	@ (80136d8 <_svfiprintf_r+0x1f0>)
 80136a0:	a904      	add	r1, sp, #16
 80136a2:	4638      	mov	r0, r7
 80136a4:	f3af 8000 	nop.w
 80136a8:	1c42      	adds	r2, r0, #1
 80136aa:	4606      	mov	r6, r0
 80136ac:	d1d6      	bne.n	801365c <_svfiprintf_r+0x174>
 80136ae:	89ab      	ldrh	r3, [r5, #12]
 80136b0:	065b      	lsls	r3, r3, #25
 80136b2:	f53f af2d 	bmi.w	8013510 <_svfiprintf_r+0x28>
 80136b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80136b8:	e72c      	b.n	8013514 <_svfiprintf_r+0x2c>
 80136ba:	ab03      	add	r3, sp, #12
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	462a      	mov	r2, r5
 80136c0:	4b05      	ldr	r3, [pc, #20]	@ (80136d8 <_svfiprintf_r+0x1f0>)
 80136c2:	a904      	add	r1, sp, #16
 80136c4:	4638      	mov	r0, r7
 80136c6:	f000 f9bb 	bl	8013a40 <_printf_i>
 80136ca:	e7ed      	b.n	80136a8 <_svfiprintf_r+0x1c0>
 80136cc:	0801505e 	.word	0x0801505e
 80136d0:	08015068 	.word	0x08015068
 80136d4:	00000000 	.word	0x00000000
 80136d8:	08013431 	.word	0x08013431
 80136dc:	08015064 	.word	0x08015064

080136e0 <__sfputc_r>:
 80136e0:	6893      	ldr	r3, [r2, #8]
 80136e2:	3b01      	subs	r3, #1
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	b410      	push	{r4}
 80136e8:	6093      	str	r3, [r2, #8]
 80136ea:	da08      	bge.n	80136fe <__sfputc_r+0x1e>
 80136ec:	6994      	ldr	r4, [r2, #24]
 80136ee:	42a3      	cmp	r3, r4
 80136f0:	db01      	blt.n	80136f6 <__sfputc_r+0x16>
 80136f2:	290a      	cmp	r1, #10
 80136f4:	d103      	bne.n	80136fe <__sfputc_r+0x1e>
 80136f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136fa:	f7ff bc49 	b.w	8012f90 <__swbuf_r>
 80136fe:	6813      	ldr	r3, [r2, #0]
 8013700:	1c58      	adds	r0, r3, #1
 8013702:	6010      	str	r0, [r2, #0]
 8013704:	7019      	strb	r1, [r3, #0]
 8013706:	4608      	mov	r0, r1
 8013708:	f85d 4b04 	ldr.w	r4, [sp], #4
 801370c:	4770      	bx	lr

0801370e <__sfputs_r>:
 801370e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013710:	4606      	mov	r6, r0
 8013712:	460f      	mov	r7, r1
 8013714:	4614      	mov	r4, r2
 8013716:	18d5      	adds	r5, r2, r3
 8013718:	42ac      	cmp	r4, r5
 801371a:	d101      	bne.n	8013720 <__sfputs_r+0x12>
 801371c:	2000      	movs	r0, #0
 801371e:	e007      	b.n	8013730 <__sfputs_r+0x22>
 8013720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013724:	463a      	mov	r2, r7
 8013726:	4630      	mov	r0, r6
 8013728:	f7ff ffda 	bl	80136e0 <__sfputc_r>
 801372c:	1c43      	adds	r3, r0, #1
 801372e:	d1f3      	bne.n	8013718 <__sfputs_r+0xa>
 8013730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013734 <_vfiprintf_r>:
 8013734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013738:	460d      	mov	r5, r1
 801373a:	b09d      	sub	sp, #116	@ 0x74
 801373c:	4614      	mov	r4, r2
 801373e:	4698      	mov	r8, r3
 8013740:	4606      	mov	r6, r0
 8013742:	b118      	cbz	r0, 801374c <_vfiprintf_r+0x18>
 8013744:	6a03      	ldr	r3, [r0, #32]
 8013746:	b90b      	cbnz	r3, 801374c <_vfiprintf_r+0x18>
 8013748:	f7ff fad0 	bl	8012cec <__sinit>
 801374c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801374e:	07d9      	lsls	r1, r3, #31
 8013750:	d405      	bmi.n	801375e <_vfiprintf_r+0x2a>
 8013752:	89ab      	ldrh	r3, [r5, #12]
 8013754:	059a      	lsls	r2, r3, #22
 8013756:	d402      	bmi.n	801375e <_vfiprintf_r+0x2a>
 8013758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801375a:	f7ff fdd4 	bl	8013306 <__retarget_lock_acquire_recursive>
 801375e:	89ab      	ldrh	r3, [r5, #12]
 8013760:	071b      	lsls	r3, r3, #28
 8013762:	d501      	bpl.n	8013768 <_vfiprintf_r+0x34>
 8013764:	692b      	ldr	r3, [r5, #16]
 8013766:	b99b      	cbnz	r3, 8013790 <_vfiprintf_r+0x5c>
 8013768:	4629      	mov	r1, r5
 801376a:	4630      	mov	r0, r6
 801376c:	f7ff fc4e 	bl	801300c <__swsetup_r>
 8013770:	b170      	cbz	r0, 8013790 <_vfiprintf_r+0x5c>
 8013772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013774:	07dc      	lsls	r4, r3, #31
 8013776:	d504      	bpl.n	8013782 <_vfiprintf_r+0x4e>
 8013778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801377c:	b01d      	add	sp, #116	@ 0x74
 801377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013782:	89ab      	ldrh	r3, [r5, #12]
 8013784:	0598      	lsls	r0, r3, #22
 8013786:	d4f7      	bmi.n	8013778 <_vfiprintf_r+0x44>
 8013788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801378a:	f7ff fdbd 	bl	8013308 <__retarget_lock_release_recursive>
 801378e:	e7f3      	b.n	8013778 <_vfiprintf_r+0x44>
 8013790:	2300      	movs	r3, #0
 8013792:	9309      	str	r3, [sp, #36]	@ 0x24
 8013794:	2320      	movs	r3, #32
 8013796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801379a:	f8cd 800c 	str.w	r8, [sp, #12]
 801379e:	2330      	movs	r3, #48	@ 0x30
 80137a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013950 <_vfiprintf_r+0x21c>
 80137a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80137a8:	f04f 0901 	mov.w	r9, #1
 80137ac:	4623      	mov	r3, r4
 80137ae:	469a      	mov	sl, r3
 80137b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137b4:	b10a      	cbz	r2, 80137ba <_vfiprintf_r+0x86>
 80137b6:	2a25      	cmp	r2, #37	@ 0x25
 80137b8:	d1f9      	bne.n	80137ae <_vfiprintf_r+0x7a>
 80137ba:	ebba 0b04 	subs.w	fp, sl, r4
 80137be:	d00b      	beq.n	80137d8 <_vfiprintf_r+0xa4>
 80137c0:	465b      	mov	r3, fp
 80137c2:	4622      	mov	r2, r4
 80137c4:	4629      	mov	r1, r5
 80137c6:	4630      	mov	r0, r6
 80137c8:	f7ff ffa1 	bl	801370e <__sfputs_r>
 80137cc:	3001      	adds	r0, #1
 80137ce:	f000 80a7 	beq.w	8013920 <_vfiprintf_r+0x1ec>
 80137d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137d4:	445a      	add	r2, fp
 80137d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80137d8:	f89a 3000 	ldrb.w	r3, [sl]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f000 809f 	beq.w	8013920 <_vfiprintf_r+0x1ec>
 80137e2:	2300      	movs	r3, #0
 80137e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80137e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137ec:	f10a 0a01 	add.w	sl, sl, #1
 80137f0:	9304      	str	r3, [sp, #16]
 80137f2:	9307      	str	r3, [sp, #28]
 80137f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80137f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80137fa:	4654      	mov	r4, sl
 80137fc:	2205      	movs	r2, #5
 80137fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013802:	4853      	ldr	r0, [pc, #332]	@ (8013950 <_vfiprintf_r+0x21c>)
 8013804:	f7ec fd1c 	bl	8000240 <memchr>
 8013808:	9a04      	ldr	r2, [sp, #16]
 801380a:	b9d8      	cbnz	r0, 8013844 <_vfiprintf_r+0x110>
 801380c:	06d1      	lsls	r1, r2, #27
 801380e:	bf44      	itt	mi
 8013810:	2320      	movmi	r3, #32
 8013812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013816:	0713      	lsls	r3, r2, #28
 8013818:	bf44      	itt	mi
 801381a:	232b      	movmi	r3, #43	@ 0x2b
 801381c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013820:	f89a 3000 	ldrb.w	r3, [sl]
 8013824:	2b2a      	cmp	r3, #42	@ 0x2a
 8013826:	d015      	beq.n	8013854 <_vfiprintf_r+0x120>
 8013828:	9a07      	ldr	r2, [sp, #28]
 801382a:	4654      	mov	r4, sl
 801382c:	2000      	movs	r0, #0
 801382e:	f04f 0c0a 	mov.w	ip, #10
 8013832:	4621      	mov	r1, r4
 8013834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013838:	3b30      	subs	r3, #48	@ 0x30
 801383a:	2b09      	cmp	r3, #9
 801383c:	d94b      	bls.n	80138d6 <_vfiprintf_r+0x1a2>
 801383e:	b1b0      	cbz	r0, 801386e <_vfiprintf_r+0x13a>
 8013840:	9207      	str	r2, [sp, #28]
 8013842:	e014      	b.n	801386e <_vfiprintf_r+0x13a>
 8013844:	eba0 0308 	sub.w	r3, r0, r8
 8013848:	fa09 f303 	lsl.w	r3, r9, r3
 801384c:	4313      	orrs	r3, r2
 801384e:	9304      	str	r3, [sp, #16]
 8013850:	46a2      	mov	sl, r4
 8013852:	e7d2      	b.n	80137fa <_vfiprintf_r+0xc6>
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	1d19      	adds	r1, r3, #4
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	9103      	str	r1, [sp, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	bfbb      	ittet	lt
 8013860:	425b      	neglt	r3, r3
 8013862:	f042 0202 	orrlt.w	r2, r2, #2
 8013866:	9307      	strge	r3, [sp, #28]
 8013868:	9307      	strlt	r3, [sp, #28]
 801386a:	bfb8      	it	lt
 801386c:	9204      	strlt	r2, [sp, #16]
 801386e:	7823      	ldrb	r3, [r4, #0]
 8013870:	2b2e      	cmp	r3, #46	@ 0x2e
 8013872:	d10a      	bne.n	801388a <_vfiprintf_r+0x156>
 8013874:	7863      	ldrb	r3, [r4, #1]
 8013876:	2b2a      	cmp	r3, #42	@ 0x2a
 8013878:	d132      	bne.n	80138e0 <_vfiprintf_r+0x1ac>
 801387a:	9b03      	ldr	r3, [sp, #12]
 801387c:	1d1a      	adds	r2, r3, #4
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	9203      	str	r2, [sp, #12]
 8013882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013886:	3402      	adds	r4, #2
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013960 <_vfiprintf_r+0x22c>
 801388e:	7821      	ldrb	r1, [r4, #0]
 8013890:	2203      	movs	r2, #3
 8013892:	4650      	mov	r0, sl
 8013894:	f7ec fcd4 	bl	8000240 <memchr>
 8013898:	b138      	cbz	r0, 80138aa <_vfiprintf_r+0x176>
 801389a:	9b04      	ldr	r3, [sp, #16]
 801389c:	eba0 000a 	sub.w	r0, r0, sl
 80138a0:	2240      	movs	r2, #64	@ 0x40
 80138a2:	4082      	lsls	r2, r0
 80138a4:	4313      	orrs	r3, r2
 80138a6:	3401      	adds	r4, #1
 80138a8:	9304      	str	r3, [sp, #16]
 80138aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ae:	4829      	ldr	r0, [pc, #164]	@ (8013954 <_vfiprintf_r+0x220>)
 80138b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80138b4:	2206      	movs	r2, #6
 80138b6:	f7ec fcc3 	bl	8000240 <memchr>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	d03f      	beq.n	801393e <_vfiprintf_r+0x20a>
 80138be:	4b26      	ldr	r3, [pc, #152]	@ (8013958 <_vfiprintf_r+0x224>)
 80138c0:	bb1b      	cbnz	r3, 801390a <_vfiprintf_r+0x1d6>
 80138c2:	9b03      	ldr	r3, [sp, #12]
 80138c4:	3307      	adds	r3, #7
 80138c6:	f023 0307 	bic.w	r3, r3, #7
 80138ca:	3308      	adds	r3, #8
 80138cc:	9303      	str	r3, [sp, #12]
 80138ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138d0:	443b      	add	r3, r7
 80138d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80138d4:	e76a      	b.n	80137ac <_vfiprintf_r+0x78>
 80138d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80138da:	460c      	mov	r4, r1
 80138dc:	2001      	movs	r0, #1
 80138de:	e7a8      	b.n	8013832 <_vfiprintf_r+0xfe>
 80138e0:	2300      	movs	r3, #0
 80138e2:	3401      	adds	r4, #1
 80138e4:	9305      	str	r3, [sp, #20]
 80138e6:	4619      	mov	r1, r3
 80138e8:	f04f 0c0a 	mov.w	ip, #10
 80138ec:	4620      	mov	r0, r4
 80138ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138f2:	3a30      	subs	r2, #48	@ 0x30
 80138f4:	2a09      	cmp	r2, #9
 80138f6:	d903      	bls.n	8013900 <_vfiprintf_r+0x1cc>
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d0c6      	beq.n	801388a <_vfiprintf_r+0x156>
 80138fc:	9105      	str	r1, [sp, #20]
 80138fe:	e7c4      	b.n	801388a <_vfiprintf_r+0x156>
 8013900:	fb0c 2101 	mla	r1, ip, r1, r2
 8013904:	4604      	mov	r4, r0
 8013906:	2301      	movs	r3, #1
 8013908:	e7f0      	b.n	80138ec <_vfiprintf_r+0x1b8>
 801390a:	ab03      	add	r3, sp, #12
 801390c:	9300      	str	r3, [sp, #0]
 801390e:	462a      	mov	r2, r5
 8013910:	4b12      	ldr	r3, [pc, #72]	@ (801395c <_vfiprintf_r+0x228>)
 8013912:	a904      	add	r1, sp, #16
 8013914:	4630      	mov	r0, r6
 8013916:	f3af 8000 	nop.w
 801391a:	4607      	mov	r7, r0
 801391c:	1c78      	adds	r0, r7, #1
 801391e:	d1d6      	bne.n	80138ce <_vfiprintf_r+0x19a>
 8013920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013922:	07d9      	lsls	r1, r3, #31
 8013924:	d405      	bmi.n	8013932 <_vfiprintf_r+0x1fe>
 8013926:	89ab      	ldrh	r3, [r5, #12]
 8013928:	059a      	lsls	r2, r3, #22
 801392a:	d402      	bmi.n	8013932 <_vfiprintf_r+0x1fe>
 801392c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801392e:	f7ff fceb 	bl	8013308 <__retarget_lock_release_recursive>
 8013932:	89ab      	ldrh	r3, [r5, #12]
 8013934:	065b      	lsls	r3, r3, #25
 8013936:	f53f af1f 	bmi.w	8013778 <_vfiprintf_r+0x44>
 801393a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801393c:	e71e      	b.n	801377c <_vfiprintf_r+0x48>
 801393e:	ab03      	add	r3, sp, #12
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	462a      	mov	r2, r5
 8013944:	4b05      	ldr	r3, [pc, #20]	@ (801395c <_vfiprintf_r+0x228>)
 8013946:	a904      	add	r1, sp, #16
 8013948:	4630      	mov	r0, r6
 801394a:	f000 f879 	bl	8013a40 <_printf_i>
 801394e:	e7e4      	b.n	801391a <_vfiprintf_r+0x1e6>
 8013950:	0801505e 	.word	0x0801505e
 8013954:	08015068 	.word	0x08015068
 8013958:	00000000 	.word	0x00000000
 801395c:	0801370f 	.word	0x0801370f
 8013960:	08015064 	.word	0x08015064

08013964 <_printf_common>:
 8013964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013968:	4616      	mov	r6, r2
 801396a:	4698      	mov	r8, r3
 801396c:	688a      	ldr	r2, [r1, #8]
 801396e:	690b      	ldr	r3, [r1, #16]
 8013970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013974:	4293      	cmp	r3, r2
 8013976:	bfb8      	it	lt
 8013978:	4613      	movlt	r3, r2
 801397a:	6033      	str	r3, [r6, #0]
 801397c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013980:	4607      	mov	r7, r0
 8013982:	460c      	mov	r4, r1
 8013984:	b10a      	cbz	r2, 801398a <_printf_common+0x26>
 8013986:	3301      	adds	r3, #1
 8013988:	6033      	str	r3, [r6, #0]
 801398a:	6823      	ldr	r3, [r4, #0]
 801398c:	0699      	lsls	r1, r3, #26
 801398e:	bf42      	ittt	mi
 8013990:	6833      	ldrmi	r3, [r6, #0]
 8013992:	3302      	addmi	r3, #2
 8013994:	6033      	strmi	r3, [r6, #0]
 8013996:	6825      	ldr	r5, [r4, #0]
 8013998:	f015 0506 	ands.w	r5, r5, #6
 801399c:	d106      	bne.n	80139ac <_printf_common+0x48>
 801399e:	f104 0a19 	add.w	sl, r4, #25
 80139a2:	68e3      	ldr	r3, [r4, #12]
 80139a4:	6832      	ldr	r2, [r6, #0]
 80139a6:	1a9b      	subs	r3, r3, r2
 80139a8:	42ab      	cmp	r3, r5
 80139aa:	dc26      	bgt.n	80139fa <_printf_common+0x96>
 80139ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80139b0:	6822      	ldr	r2, [r4, #0]
 80139b2:	3b00      	subs	r3, #0
 80139b4:	bf18      	it	ne
 80139b6:	2301      	movne	r3, #1
 80139b8:	0692      	lsls	r2, r2, #26
 80139ba:	d42b      	bmi.n	8013a14 <_printf_common+0xb0>
 80139bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80139c0:	4641      	mov	r1, r8
 80139c2:	4638      	mov	r0, r7
 80139c4:	47c8      	blx	r9
 80139c6:	3001      	adds	r0, #1
 80139c8:	d01e      	beq.n	8013a08 <_printf_common+0xa4>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	6922      	ldr	r2, [r4, #16]
 80139ce:	f003 0306 	and.w	r3, r3, #6
 80139d2:	2b04      	cmp	r3, #4
 80139d4:	bf02      	ittt	eq
 80139d6:	68e5      	ldreq	r5, [r4, #12]
 80139d8:	6833      	ldreq	r3, [r6, #0]
 80139da:	1aed      	subeq	r5, r5, r3
 80139dc:	68a3      	ldr	r3, [r4, #8]
 80139de:	bf0c      	ite	eq
 80139e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139e4:	2500      	movne	r5, #0
 80139e6:	4293      	cmp	r3, r2
 80139e8:	bfc4      	itt	gt
 80139ea:	1a9b      	subgt	r3, r3, r2
 80139ec:	18ed      	addgt	r5, r5, r3
 80139ee:	2600      	movs	r6, #0
 80139f0:	341a      	adds	r4, #26
 80139f2:	42b5      	cmp	r5, r6
 80139f4:	d11a      	bne.n	8013a2c <_printf_common+0xc8>
 80139f6:	2000      	movs	r0, #0
 80139f8:	e008      	b.n	8013a0c <_printf_common+0xa8>
 80139fa:	2301      	movs	r3, #1
 80139fc:	4652      	mov	r2, sl
 80139fe:	4641      	mov	r1, r8
 8013a00:	4638      	mov	r0, r7
 8013a02:	47c8      	blx	r9
 8013a04:	3001      	adds	r0, #1
 8013a06:	d103      	bne.n	8013a10 <_printf_common+0xac>
 8013a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a10:	3501      	adds	r5, #1
 8013a12:	e7c6      	b.n	80139a2 <_printf_common+0x3e>
 8013a14:	18e1      	adds	r1, r4, r3
 8013a16:	1c5a      	adds	r2, r3, #1
 8013a18:	2030      	movs	r0, #48	@ 0x30
 8013a1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a1e:	4422      	add	r2, r4
 8013a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a28:	3302      	adds	r3, #2
 8013a2a:	e7c7      	b.n	80139bc <_printf_common+0x58>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	4622      	mov	r2, r4
 8013a30:	4641      	mov	r1, r8
 8013a32:	4638      	mov	r0, r7
 8013a34:	47c8      	blx	r9
 8013a36:	3001      	adds	r0, #1
 8013a38:	d0e6      	beq.n	8013a08 <_printf_common+0xa4>
 8013a3a:	3601      	adds	r6, #1
 8013a3c:	e7d9      	b.n	80139f2 <_printf_common+0x8e>
	...

08013a40 <_printf_i>:
 8013a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a44:	7e0f      	ldrb	r7, [r1, #24]
 8013a46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a48:	2f78      	cmp	r7, #120	@ 0x78
 8013a4a:	4691      	mov	r9, r2
 8013a4c:	4680      	mov	r8, r0
 8013a4e:	460c      	mov	r4, r1
 8013a50:	469a      	mov	sl, r3
 8013a52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013a56:	d807      	bhi.n	8013a68 <_printf_i+0x28>
 8013a58:	2f62      	cmp	r7, #98	@ 0x62
 8013a5a:	d80a      	bhi.n	8013a72 <_printf_i+0x32>
 8013a5c:	2f00      	cmp	r7, #0
 8013a5e:	f000 80d2 	beq.w	8013c06 <_printf_i+0x1c6>
 8013a62:	2f58      	cmp	r7, #88	@ 0x58
 8013a64:	f000 80b9 	beq.w	8013bda <_printf_i+0x19a>
 8013a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a70:	e03a      	b.n	8013ae8 <_printf_i+0xa8>
 8013a72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a76:	2b15      	cmp	r3, #21
 8013a78:	d8f6      	bhi.n	8013a68 <_printf_i+0x28>
 8013a7a:	a101      	add	r1, pc, #4	@ (adr r1, 8013a80 <_printf_i+0x40>)
 8013a7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a80:	08013ad9 	.word	0x08013ad9
 8013a84:	08013aed 	.word	0x08013aed
 8013a88:	08013a69 	.word	0x08013a69
 8013a8c:	08013a69 	.word	0x08013a69
 8013a90:	08013a69 	.word	0x08013a69
 8013a94:	08013a69 	.word	0x08013a69
 8013a98:	08013aed 	.word	0x08013aed
 8013a9c:	08013a69 	.word	0x08013a69
 8013aa0:	08013a69 	.word	0x08013a69
 8013aa4:	08013a69 	.word	0x08013a69
 8013aa8:	08013a69 	.word	0x08013a69
 8013aac:	08013bed 	.word	0x08013bed
 8013ab0:	08013b17 	.word	0x08013b17
 8013ab4:	08013ba7 	.word	0x08013ba7
 8013ab8:	08013a69 	.word	0x08013a69
 8013abc:	08013a69 	.word	0x08013a69
 8013ac0:	08013c0f 	.word	0x08013c0f
 8013ac4:	08013a69 	.word	0x08013a69
 8013ac8:	08013b17 	.word	0x08013b17
 8013acc:	08013a69 	.word	0x08013a69
 8013ad0:	08013a69 	.word	0x08013a69
 8013ad4:	08013baf 	.word	0x08013baf
 8013ad8:	6833      	ldr	r3, [r6, #0]
 8013ada:	1d1a      	adds	r2, r3, #4
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	6032      	str	r2, [r6, #0]
 8013ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ae4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e09d      	b.n	8013c28 <_printf_i+0x1e8>
 8013aec:	6833      	ldr	r3, [r6, #0]
 8013aee:	6820      	ldr	r0, [r4, #0]
 8013af0:	1d19      	adds	r1, r3, #4
 8013af2:	6031      	str	r1, [r6, #0]
 8013af4:	0606      	lsls	r6, r0, #24
 8013af6:	d501      	bpl.n	8013afc <_printf_i+0xbc>
 8013af8:	681d      	ldr	r5, [r3, #0]
 8013afa:	e003      	b.n	8013b04 <_printf_i+0xc4>
 8013afc:	0645      	lsls	r5, r0, #25
 8013afe:	d5fb      	bpl.n	8013af8 <_printf_i+0xb8>
 8013b00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013b04:	2d00      	cmp	r5, #0
 8013b06:	da03      	bge.n	8013b10 <_printf_i+0xd0>
 8013b08:	232d      	movs	r3, #45	@ 0x2d
 8013b0a:	426d      	negs	r5, r5
 8013b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b10:	4859      	ldr	r0, [pc, #356]	@ (8013c78 <_printf_i+0x238>)
 8013b12:	230a      	movs	r3, #10
 8013b14:	e011      	b.n	8013b3a <_printf_i+0xfa>
 8013b16:	6821      	ldr	r1, [r4, #0]
 8013b18:	6833      	ldr	r3, [r6, #0]
 8013b1a:	0608      	lsls	r0, r1, #24
 8013b1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b20:	d402      	bmi.n	8013b28 <_printf_i+0xe8>
 8013b22:	0649      	lsls	r1, r1, #25
 8013b24:	bf48      	it	mi
 8013b26:	b2ad      	uxthmi	r5, r5
 8013b28:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b2a:	4853      	ldr	r0, [pc, #332]	@ (8013c78 <_printf_i+0x238>)
 8013b2c:	6033      	str	r3, [r6, #0]
 8013b2e:	bf14      	ite	ne
 8013b30:	230a      	movne	r3, #10
 8013b32:	2308      	moveq	r3, #8
 8013b34:	2100      	movs	r1, #0
 8013b36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b3a:	6866      	ldr	r6, [r4, #4]
 8013b3c:	60a6      	str	r6, [r4, #8]
 8013b3e:	2e00      	cmp	r6, #0
 8013b40:	bfa2      	ittt	ge
 8013b42:	6821      	ldrge	r1, [r4, #0]
 8013b44:	f021 0104 	bicge.w	r1, r1, #4
 8013b48:	6021      	strge	r1, [r4, #0]
 8013b4a:	b90d      	cbnz	r5, 8013b50 <_printf_i+0x110>
 8013b4c:	2e00      	cmp	r6, #0
 8013b4e:	d04b      	beq.n	8013be8 <_printf_i+0x1a8>
 8013b50:	4616      	mov	r6, r2
 8013b52:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b56:	fb03 5711 	mls	r7, r3, r1, r5
 8013b5a:	5dc7      	ldrb	r7, [r0, r7]
 8013b5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b60:	462f      	mov	r7, r5
 8013b62:	42bb      	cmp	r3, r7
 8013b64:	460d      	mov	r5, r1
 8013b66:	d9f4      	bls.n	8013b52 <_printf_i+0x112>
 8013b68:	2b08      	cmp	r3, #8
 8013b6a:	d10b      	bne.n	8013b84 <_printf_i+0x144>
 8013b6c:	6823      	ldr	r3, [r4, #0]
 8013b6e:	07df      	lsls	r7, r3, #31
 8013b70:	d508      	bpl.n	8013b84 <_printf_i+0x144>
 8013b72:	6923      	ldr	r3, [r4, #16]
 8013b74:	6861      	ldr	r1, [r4, #4]
 8013b76:	4299      	cmp	r1, r3
 8013b78:	bfde      	ittt	le
 8013b7a:	2330      	movle	r3, #48	@ 0x30
 8013b7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b80:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013b84:	1b92      	subs	r2, r2, r6
 8013b86:	6122      	str	r2, [r4, #16]
 8013b88:	f8cd a000 	str.w	sl, [sp]
 8013b8c:	464b      	mov	r3, r9
 8013b8e:	aa03      	add	r2, sp, #12
 8013b90:	4621      	mov	r1, r4
 8013b92:	4640      	mov	r0, r8
 8013b94:	f7ff fee6 	bl	8013964 <_printf_common>
 8013b98:	3001      	adds	r0, #1
 8013b9a:	d14a      	bne.n	8013c32 <_printf_i+0x1f2>
 8013b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ba0:	b004      	add	sp, #16
 8013ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	f043 0320 	orr.w	r3, r3, #32
 8013bac:	6023      	str	r3, [r4, #0]
 8013bae:	4833      	ldr	r0, [pc, #204]	@ (8013c7c <_printf_i+0x23c>)
 8013bb0:	2778      	movs	r7, #120	@ 0x78
 8013bb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013bb6:	6823      	ldr	r3, [r4, #0]
 8013bb8:	6831      	ldr	r1, [r6, #0]
 8013bba:	061f      	lsls	r7, r3, #24
 8013bbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8013bc0:	d402      	bmi.n	8013bc8 <_printf_i+0x188>
 8013bc2:	065f      	lsls	r7, r3, #25
 8013bc4:	bf48      	it	mi
 8013bc6:	b2ad      	uxthmi	r5, r5
 8013bc8:	6031      	str	r1, [r6, #0]
 8013bca:	07d9      	lsls	r1, r3, #31
 8013bcc:	bf44      	itt	mi
 8013bce:	f043 0320 	orrmi.w	r3, r3, #32
 8013bd2:	6023      	strmi	r3, [r4, #0]
 8013bd4:	b11d      	cbz	r5, 8013bde <_printf_i+0x19e>
 8013bd6:	2310      	movs	r3, #16
 8013bd8:	e7ac      	b.n	8013b34 <_printf_i+0xf4>
 8013bda:	4827      	ldr	r0, [pc, #156]	@ (8013c78 <_printf_i+0x238>)
 8013bdc:	e7e9      	b.n	8013bb2 <_printf_i+0x172>
 8013bde:	6823      	ldr	r3, [r4, #0]
 8013be0:	f023 0320 	bic.w	r3, r3, #32
 8013be4:	6023      	str	r3, [r4, #0]
 8013be6:	e7f6      	b.n	8013bd6 <_printf_i+0x196>
 8013be8:	4616      	mov	r6, r2
 8013bea:	e7bd      	b.n	8013b68 <_printf_i+0x128>
 8013bec:	6833      	ldr	r3, [r6, #0]
 8013bee:	6825      	ldr	r5, [r4, #0]
 8013bf0:	6961      	ldr	r1, [r4, #20]
 8013bf2:	1d18      	adds	r0, r3, #4
 8013bf4:	6030      	str	r0, [r6, #0]
 8013bf6:	062e      	lsls	r6, r5, #24
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	d501      	bpl.n	8013c00 <_printf_i+0x1c0>
 8013bfc:	6019      	str	r1, [r3, #0]
 8013bfe:	e002      	b.n	8013c06 <_printf_i+0x1c6>
 8013c00:	0668      	lsls	r0, r5, #25
 8013c02:	d5fb      	bpl.n	8013bfc <_printf_i+0x1bc>
 8013c04:	8019      	strh	r1, [r3, #0]
 8013c06:	2300      	movs	r3, #0
 8013c08:	6123      	str	r3, [r4, #16]
 8013c0a:	4616      	mov	r6, r2
 8013c0c:	e7bc      	b.n	8013b88 <_printf_i+0x148>
 8013c0e:	6833      	ldr	r3, [r6, #0]
 8013c10:	1d1a      	adds	r2, r3, #4
 8013c12:	6032      	str	r2, [r6, #0]
 8013c14:	681e      	ldr	r6, [r3, #0]
 8013c16:	6862      	ldr	r2, [r4, #4]
 8013c18:	2100      	movs	r1, #0
 8013c1a:	4630      	mov	r0, r6
 8013c1c:	f7ec fb10 	bl	8000240 <memchr>
 8013c20:	b108      	cbz	r0, 8013c26 <_printf_i+0x1e6>
 8013c22:	1b80      	subs	r0, r0, r6
 8013c24:	6060      	str	r0, [r4, #4]
 8013c26:	6863      	ldr	r3, [r4, #4]
 8013c28:	6123      	str	r3, [r4, #16]
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c30:	e7aa      	b.n	8013b88 <_printf_i+0x148>
 8013c32:	6923      	ldr	r3, [r4, #16]
 8013c34:	4632      	mov	r2, r6
 8013c36:	4649      	mov	r1, r9
 8013c38:	4640      	mov	r0, r8
 8013c3a:	47d0      	blx	sl
 8013c3c:	3001      	adds	r0, #1
 8013c3e:	d0ad      	beq.n	8013b9c <_printf_i+0x15c>
 8013c40:	6823      	ldr	r3, [r4, #0]
 8013c42:	079b      	lsls	r3, r3, #30
 8013c44:	d413      	bmi.n	8013c6e <_printf_i+0x22e>
 8013c46:	68e0      	ldr	r0, [r4, #12]
 8013c48:	9b03      	ldr	r3, [sp, #12]
 8013c4a:	4298      	cmp	r0, r3
 8013c4c:	bfb8      	it	lt
 8013c4e:	4618      	movlt	r0, r3
 8013c50:	e7a6      	b.n	8013ba0 <_printf_i+0x160>
 8013c52:	2301      	movs	r3, #1
 8013c54:	4632      	mov	r2, r6
 8013c56:	4649      	mov	r1, r9
 8013c58:	4640      	mov	r0, r8
 8013c5a:	47d0      	blx	sl
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	d09d      	beq.n	8013b9c <_printf_i+0x15c>
 8013c60:	3501      	adds	r5, #1
 8013c62:	68e3      	ldr	r3, [r4, #12]
 8013c64:	9903      	ldr	r1, [sp, #12]
 8013c66:	1a5b      	subs	r3, r3, r1
 8013c68:	42ab      	cmp	r3, r5
 8013c6a:	dcf2      	bgt.n	8013c52 <_printf_i+0x212>
 8013c6c:	e7eb      	b.n	8013c46 <_printf_i+0x206>
 8013c6e:	2500      	movs	r5, #0
 8013c70:	f104 0619 	add.w	r6, r4, #25
 8013c74:	e7f5      	b.n	8013c62 <_printf_i+0x222>
 8013c76:	bf00      	nop
 8013c78:	0801506f 	.word	0x0801506f
 8013c7c:	08015080 	.word	0x08015080

08013c80 <__sflush_r>:
 8013c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c88:	0716      	lsls	r6, r2, #28
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	460c      	mov	r4, r1
 8013c8e:	d454      	bmi.n	8013d3a <__sflush_r+0xba>
 8013c90:	684b      	ldr	r3, [r1, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	dc02      	bgt.n	8013c9c <__sflush_r+0x1c>
 8013c96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	dd48      	ble.n	8013d2e <__sflush_r+0xae>
 8013c9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c9e:	2e00      	cmp	r6, #0
 8013ca0:	d045      	beq.n	8013d2e <__sflush_r+0xae>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013ca8:	682f      	ldr	r7, [r5, #0]
 8013caa:	6a21      	ldr	r1, [r4, #32]
 8013cac:	602b      	str	r3, [r5, #0]
 8013cae:	d030      	beq.n	8013d12 <__sflush_r+0x92>
 8013cb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013cb2:	89a3      	ldrh	r3, [r4, #12]
 8013cb4:	0759      	lsls	r1, r3, #29
 8013cb6:	d505      	bpl.n	8013cc4 <__sflush_r+0x44>
 8013cb8:	6863      	ldr	r3, [r4, #4]
 8013cba:	1ad2      	subs	r2, r2, r3
 8013cbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013cbe:	b10b      	cbz	r3, 8013cc4 <__sflush_r+0x44>
 8013cc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013cc2:	1ad2      	subs	r2, r2, r3
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cc8:	6a21      	ldr	r1, [r4, #32]
 8013cca:	4628      	mov	r0, r5
 8013ccc:	47b0      	blx	r6
 8013cce:	1c43      	adds	r3, r0, #1
 8013cd0:	89a3      	ldrh	r3, [r4, #12]
 8013cd2:	d106      	bne.n	8013ce2 <__sflush_r+0x62>
 8013cd4:	6829      	ldr	r1, [r5, #0]
 8013cd6:	291d      	cmp	r1, #29
 8013cd8:	d82b      	bhi.n	8013d32 <__sflush_r+0xb2>
 8013cda:	4a2a      	ldr	r2, [pc, #168]	@ (8013d84 <__sflush_r+0x104>)
 8013cdc:	410a      	asrs	r2, r1
 8013cde:	07d6      	lsls	r6, r2, #31
 8013ce0:	d427      	bmi.n	8013d32 <__sflush_r+0xb2>
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	6062      	str	r2, [r4, #4]
 8013ce6:	04d9      	lsls	r1, r3, #19
 8013ce8:	6922      	ldr	r2, [r4, #16]
 8013cea:	6022      	str	r2, [r4, #0]
 8013cec:	d504      	bpl.n	8013cf8 <__sflush_r+0x78>
 8013cee:	1c42      	adds	r2, r0, #1
 8013cf0:	d101      	bne.n	8013cf6 <__sflush_r+0x76>
 8013cf2:	682b      	ldr	r3, [r5, #0]
 8013cf4:	b903      	cbnz	r3, 8013cf8 <__sflush_r+0x78>
 8013cf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8013cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cfa:	602f      	str	r7, [r5, #0]
 8013cfc:	b1b9      	cbz	r1, 8013d2e <__sflush_r+0xae>
 8013cfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d02:	4299      	cmp	r1, r3
 8013d04:	d002      	beq.n	8013d0c <__sflush_r+0x8c>
 8013d06:	4628      	mov	r0, r5
 8013d08:	f7ff fb40 	bl	801338c <_free_r>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d10:	e00d      	b.n	8013d2e <__sflush_r+0xae>
 8013d12:	2301      	movs	r3, #1
 8013d14:	4628      	mov	r0, r5
 8013d16:	47b0      	blx	r6
 8013d18:	4602      	mov	r2, r0
 8013d1a:	1c50      	adds	r0, r2, #1
 8013d1c:	d1c9      	bne.n	8013cb2 <__sflush_r+0x32>
 8013d1e:	682b      	ldr	r3, [r5, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d0c6      	beq.n	8013cb2 <__sflush_r+0x32>
 8013d24:	2b1d      	cmp	r3, #29
 8013d26:	d001      	beq.n	8013d2c <__sflush_r+0xac>
 8013d28:	2b16      	cmp	r3, #22
 8013d2a:	d11e      	bne.n	8013d6a <__sflush_r+0xea>
 8013d2c:	602f      	str	r7, [r5, #0]
 8013d2e:	2000      	movs	r0, #0
 8013d30:	e022      	b.n	8013d78 <__sflush_r+0xf8>
 8013d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d36:	b21b      	sxth	r3, r3
 8013d38:	e01b      	b.n	8013d72 <__sflush_r+0xf2>
 8013d3a:	690f      	ldr	r7, [r1, #16]
 8013d3c:	2f00      	cmp	r7, #0
 8013d3e:	d0f6      	beq.n	8013d2e <__sflush_r+0xae>
 8013d40:	0793      	lsls	r3, r2, #30
 8013d42:	680e      	ldr	r6, [r1, #0]
 8013d44:	bf08      	it	eq
 8013d46:	694b      	ldreq	r3, [r1, #20]
 8013d48:	600f      	str	r7, [r1, #0]
 8013d4a:	bf18      	it	ne
 8013d4c:	2300      	movne	r3, #0
 8013d4e:	eba6 0807 	sub.w	r8, r6, r7
 8013d52:	608b      	str	r3, [r1, #8]
 8013d54:	f1b8 0f00 	cmp.w	r8, #0
 8013d58:	dde9      	ble.n	8013d2e <__sflush_r+0xae>
 8013d5a:	6a21      	ldr	r1, [r4, #32]
 8013d5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d5e:	4643      	mov	r3, r8
 8013d60:	463a      	mov	r2, r7
 8013d62:	4628      	mov	r0, r5
 8013d64:	47b0      	blx	r6
 8013d66:	2800      	cmp	r0, #0
 8013d68:	dc08      	bgt.n	8013d7c <__sflush_r+0xfc>
 8013d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d72:	81a3      	strh	r3, [r4, #12]
 8013d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d7c:	4407      	add	r7, r0
 8013d7e:	eba8 0800 	sub.w	r8, r8, r0
 8013d82:	e7e7      	b.n	8013d54 <__sflush_r+0xd4>
 8013d84:	dfbffffe 	.word	0xdfbffffe

08013d88 <_fflush_r>:
 8013d88:	b538      	push	{r3, r4, r5, lr}
 8013d8a:	690b      	ldr	r3, [r1, #16]
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	460c      	mov	r4, r1
 8013d90:	b913      	cbnz	r3, 8013d98 <_fflush_r+0x10>
 8013d92:	2500      	movs	r5, #0
 8013d94:	4628      	mov	r0, r5
 8013d96:	bd38      	pop	{r3, r4, r5, pc}
 8013d98:	b118      	cbz	r0, 8013da2 <_fflush_r+0x1a>
 8013d9a:	6a03      	ldr	r3, [r0, #32]
 8013d9c:	b90b      	cbnz	r3, 8013da2 <_fflush_r+0x1a>
 8013d9e:	f7fe ffa5 	bl	8012cec <__sinit>
 8013da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d0f3      	beq.n	8013d92 <_fflush_r+0xa>
 8013daa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013dac:	07d0      	lsls	r0, r2, #31
 8013dae:	d404      	bmi.n	8013dba <_fflush_r+0x32>
 8013db0:	0599      	lsls	r1, r3, #22
 8013db2:	d402      	bmi.n	8013dba <_fflush_r+0x32>
 8013db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013db6:	f7ff faa6 	bl	8013306 <__retarget_lock_acquire_recursive>
 8013dba:	4628      	mov	r0, r5
 8013dbc:	4621      	mov	r1, r4
 8013dbe:	f7ff ff5f 	bl	8013c80 <__sflush_r>
 8013dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013dc4:	07da      	lsls	r2, r3, #31
 8013dc6:	4605      	mov	r5, r0
 8013dc8:	d4e4      	bmi.n	8013d94 <_fflush_r+0xc>
 8013dca:	89a3      	ldrh	r3, [r4, #12]
 8013dcc:	059b      	lsls	r3, r3, #22
 8013dce:	d4e1      	bmi.n	8013d94 <_fflush_r+0xc>
 8013dd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dd2:	f7ff fa99 	bl	8013308 <__retarget_lock_release_recursive>
 8013dd6:	e7dd      	b.n	8013d94 <_fflush_r+0xc>

08013dd8 <fiprintf>:
 8013dd8:	b40e      	push	{r1, r2, r3}
 8013dda:	b503      	push	{r0, r1, lr}
 8013ddc:	4601      	mov	r1, r0
 8013dde:	ab03      	add	r3, sp, #12
 8013de0:	4805      	ldr	r0, [pc, #20]	@ (8013df8 <fiprintf+0x20>)
 8013de2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013de6:	6800      	ldr	r0, [r0, #0]
 8013de8:	9301      	str	r3, [sp, #4]
 8013dea:	f7ff fca3 	bl	8013734 <_vfiprintf_r>
 8013dee:	b002      	add	sp, #8
 8013df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013df4:	b003      	add	sp, #12
 8013df6:	4770      	bx	lr
 8013df8:	20000b18 	.word	0x20000b18

08013dfc <__swhatbuf_r>:
 8013dfc:	b570      	push	{r4, r5, r6, lr}
 8013dfe:	460c      	mov	r4, r1
 8013e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e04:	2900      	cmp	r1, #0
 8013e06:	b096      	sub	sp, #88	@ 0x58
 8013e08:	4615      	mov	r5, r2
 8013e0a:	461e      	mov	r6, r3
 8013e0c:	da0d      	bge.n	8013e2a <__swhatbuf_r+0x2e>
 8013e0e:	89a3      	ldrh	r3, [r4, #12]
 8013e10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013e14:	f04f 0100 	mov.w	r1, #0
 8013e18:	bf14      	ite	ne
 8013e1a:	2340      	movne	r3, #64	@ 0x40
 8013e1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013e20:	2000      	movs	r0, #0
 8013e22:	6031      	str	r1, [r6, #0]
 8013e24:	602b      	str	r3, [r5, #0]
 8013e26:	b016      	add	sp, #88	@ 0x58
 8013e28:	bd70      	pop	{r4, r5, r6, pc}
 8013e2a:	466a      	mov	r2, sp
 8013e2c:	f000 f862 	bl	8013ef4 <_fstat_r>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	dbec      	blt.n	8013e0e <__swhatbuf_r+0x12>
 8013e34:	9901      	ldr	r1, [sp, #4]
 8013e36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013e3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013e3e:	4259      	negs	r1, r3
 8013e40:	4159      	adcs	r1, r3
 8013e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013e46:	e7eb      	b.n	8013e20 <__swhatbuf_r+0x24>

08013e48 <__smakebuf_r>:
 8013e48:	898b      	ldrh	r3, [r1, #12]
 8013e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e4c:	079d      	lsls	r5, r3, #30
 8013e4e:	4606      	mov	r6, r0
 8013e50:	460c      	mov	r4, r1
 8013e52:	d507      	bpl.n	8013e64 <__smakebuf_r+0x1c>
 8013e54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	6123      	str	r3, [r4, #16]
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	6163      	str	r3, [r4, #20]
 8013e60:	b003      	add	sp, #12
 8013e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e64:	ab01      	add	r3, sp, #4
 8013e66:	466a      	mov	r2, sp
 8013e68:	f7ff ffc8 	bl	8013dfc <__swhatbuf_r>
 8013e6c:	9f00      	ldr	r7, [sp, #0]
 8013e6e:	4605      	mov	r5, r0
 8013e70:	4639      	mov	r1, r7
 8013e72:	4630      	mov	r0, r6
 8013e74:	f7fe fd08 	bl	8012888 <_malloc_r>
 8013e78:	b948      	cbnz	r0, 8013e8e <__smakebuf_r+0x46>
 8013e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e7e:	059a      	lsls	r2, r3, #22
 8013e80:	d4ee      	bmi.n	8013e60 <__smakebuf_r+0x18>
 8013e82:	f023 0303 	bic.w	r3, r3, #3
 8013e86:	f043 0302 	orr.w	r3, r3, #2
 8013e8a:	81a3      	strh	r3, [r4, #12]
 8013e8c:	e7e2      	b.n	8013e54 <__smakebuf_r+0xc>
 8013e8e:	89a3      	ldrh	r3, [r4, #12]
 8013e90:	6020      	str	r0, [r4, #0]
 8013e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e96:	81a3      	strh	r3, [r4, #12]
 8013e98:	9b01      	ldr	r3, [sp, #4]
 8013e9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013e9e:	b15b      	cbz	r3, 8013eb8 <__smakebuf_r+0x70>
 8013ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ea4:	4630      	mov	r0, r6
 8013ea6:	f000 f837 	bl	8013f18 <_isatty_r>
 8013eaa:	b128      	cbz	r0, 8013eb8 <__smakebuf_r+0x70>
 8013eac:	89a3      	ldrh	r3, [r4, #12]
 8013eae:	f023 0303 	bic.w	r3, r3, #3
 8013eb2:	f043 0301 	orr.w	r3, r3, #1
 8013eb6:	81a3      	strh	r3, [r4, #12]
 8013eb8:	89a3      	ldrh	r3, [r4, #12]
 8013eba:	431d      	orrs	r5, r3
 8013ebc:	81a5      	strh	r5, [r4, #12]
 8013ebe:	e7cf      	b.n	8013e60 <__smakebuf_r+0x18>

08013ec0 <memmove>:
 8013ec0:	4288      	cmp	r0, r1
 8013ec2:	b510      	push	{r4, lr}
 8013ec4:	eb01 0402 	add.w	r4, r1, r2
 8013ec8:	d902      	bls.n	8013ed0 <memmove+0x10>
 8013eca:	4284      	cmp	r4, r0
 8013ecc:	4623      	mov	r3, r4
 8013ece:	d807      	bhi.n	8013ee0 <memmove+0x20>
 8013ed0:	1e43      	subs	r3, r0, #1
 8013ed2:	42a1      	cmp	r1, r4
 8013ed4:	d008      	beq.n	8013ee8 <memmove+0x28>
 8013ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ede:	e7f8      	b.n	8013ed2 <memmove+0x12>
 8013ee0:	4402      	add	r2, r0
 8013ee2:	4601      	mov	r1, r0
 8013ee4:	428a      	cmp	r2, r1
 8013ee6:	d100      	bne.n	8013eea <memmove+0x2a>
 8013ee8:	bd10      	pop	{r4, pc}
 8013eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ef2:	e7f7      	b.n	8013ee4 <memmove+0x24>

08013ef4 <_fstat_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	4d07      	ldr	r5, [pc, #28]	@ (8013f14 <_fstat_r+0x20>)
 8013ef8:	2300      	movs	r3, #0
 8013efa:	4604      	mov	r4, r0
 8013efc:	4608      	mov	r0, r1
 8013efe:	4611      	mov	r1, r2
 8013f00:	602b      	str	r3, [r5, #0]
 8013f02:	f7ed fd8f 	bl	8001a24 <_fstat>
 8013f06:	1c43      	adds	r3, r0, #1
 8013f08:	d102      	bne.n	8013f10 <_fstat_r+0x1c>
 8013f0a:	682b      	ldr	r3, [r5, #0]
 8013f0c:	b103      	cbz	r3, 8013f10 <_fstat_r+0x1c>
 8013f0e:	6023      	str	r3, [r4, #0]
 8013f10:	bd38      	pop	{r3, r4, r5, pc}
 8013f12:	bf00      	nop
 8013f14:	20010d10 	.word	0x20010d10

08013f18 <_isatty_r>:
 8013f18:	b538      	push	{r3, r4, r5, lr}
 8013f1a:	4d06      	ldr	r5, [pc, #24]	@ (8013f34 <_isatty_r+0x1c>)
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	4604      	mov	r4, r0
 8013f20:	4608      	mov	r0, r1
 8013f22:	602b      	str	r3, [r5, #0]
 8013f24:	f7ed fd8e 	bl	8001a44 <_isatty>
 8013f28:	1c43      	adds	r3, r0, #1
 8013f2a:	d102      	bne.n	8013f32 <_isatty_r+0x1a>
 8013f2c:	682b      	ldr	r3, [r5, #0]
 8013f2e:	b103      	cbz	r3, 8013f32 <_isatty_r+0x1a>
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	bd38      	pop	{r3, r4, r5, pc}
 8013f34:	20010d10 	.word	0x20010d10

08013f38 <abort>:
 8013f38:	b508      	push	{r3, lr}
 8013f3a:	2006      	movs	r0, #6
 8013f3c:	f000 f82c 	bl	8013f98 <raise>
 8013f40:	2001      	movs	r0, #1
 8013f42:	f7ed fd1f 	bl	8001984 <_exit>

08013f46 <_raise_r>:
 8013f46:	291f      	cmp	r1, #31
 8013f48:	b538      	push	{r3, r4, r5, lr}
 8013f4a:	4605      	mov	r5, r0
 8013f4c:	460c      	mov	r4, r1
 8013f4e:	d904      	bls.n	8013f5a <_raise_r+0x14>
 8013f50:	2316      	movs	r3, #22
 8013f52:	6003      	str	r3, [r0, #0]
 8013f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f58:	bd38      	pop	{r3, r4, r5, pc}
 8013f5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013f5c:	b112      	cbz	r2, 8013f64 <_raise_r+0x1e>
 8013f5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f62:	b94b      	cbnz	r3, 8013f78 <_raise_r+0x32>
 8013f64:	4628      	mov	r0, r5
 8013f66:	f000 f831 	bl	8013fcc <_getpid_r>
 8013f6a:	4622      	mov	r2, r4
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4628      	mov	r0, r5
 8013f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f74:	f000 b818 	b.w	8013fa8 <_kill_r>
 8013f78:	2b01      	cmp	r3, #1
 8013f7a:	d00a      	beq.n	8013f92 <_raise_r+0x4c>
 8013f7c:	1c59      	adds	r1, r3, #1
 8013f7e:	d103      	bne.n	8013f88 <_raise_r+0x42>
 8013f80:	2316      	movs	r3, #22
 8013f82:	6003      	str	r3, [r0, #0]
 8013f84:	2001      	movs	r0, #1
 8013f86:	e7e7      	b.n	8013f58 <_raise_r+0x12>
 8013f88:	2100      	movs	r1, #0
 8013f8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013f8e:	4620      	mov	r0, r4
 8013f90:	4798      	blx	r3
 8013f92:	2000      	movs	r0, #0
 8013f94:	e7e0      	b.n	8013f58 <_raise_r+0x12>
	...

08013f98 <raise>:
 8013f98:	4b02      	ldr	r3, [pc, #8]	@ (8013fa4 <raise+0xc>)
 8013f9a:	4601      	mov	r1, r0
 8013f9c:	6818      	ldr	r0, [r3, #0]
 8013f9e:	f7ff bfd2 	b.w	8013f46 <_raise_r>
 8013fa2:	bf00      	nop
 8013fa4:	20000b18 	.word	0x20000b18

08013fa8 <_kill_r>:
 8013fa8:	b538      	push	{r3, r4, r5, lr}
 8013faa:	4d07      	ldr	r5, [pc, #28]	@ (8013fc8 <_kill_r+0x20>)
 8013fac:	2300      	movs	r3, #0
 8013fae:	4604      	mov	r4, r0
 8013fb0:	4608      	mov	r0, r1
 8013fb2:	4611      	mov	r1, r2
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	f7ed fcd5 	bl	8001964 <_kill>
 8013fba:	1c43      	adds	r3, r0, #1
 8013fbc:	d102      	bne.n	8013fc4 <_kill_r+0x1c>
 8013fbe:	682b      	ldr	r3, [r5, #0]
 8013fc0:	b103      	cbz	r3, 8013fc4 <_kill_r+0x1c>
 8013fc2:	6023      	str	r3, [r4, #0]
 8013fc4:	bd38      	pop	{r3, r4, r5, pc}
 8013fc6:	bf00      	nop
 8013fc8:	20010d10 	.word	0x20010d10

08013fcc <_getpid_r>:
 8013fcc:	f7ed bcc2 	b.w	8001954 <_getpid>

08013fd0 <_init>:
 8013fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd2:	bf00      	nop
 8013fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fd6:	bc08      	pop	{r3}
 8013fd8:	469e      	mov	lr, r3
 8013fda:	4770      	bx	lr

08013fdc <_fini>:
 8013fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fde:	bf00      	nop
 8013fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fe2:	bc08      	pop	{r3}
 8013fe4:	469e      	mov	lr, r3
 8013fe6:	4770      	bx	lr
