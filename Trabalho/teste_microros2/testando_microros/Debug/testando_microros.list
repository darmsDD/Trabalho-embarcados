
testando_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006970  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006b50  08006b50  00007b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd8  08006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be0  08006be0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006be8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e4c  20000060  08006c48  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005eac  08006c48  00008eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e67b  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec4  00000000  00000000  0002670b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132e  00000000  00000000  0002be88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002874c  00000000  00000000  0002d1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c379  00000000  00000000  00055902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010603a  00000000  00000000  00071c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aec  00000000  00000000  00177cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b5  00000000  00000000  0017e7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006b38 	.word	0x08006b38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08006b38 	.word	0x08006b38

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <MX_FREERTOS_Init+0x18>)
 8000516:	2100      	movs	r1, #0
 8000518:	4804      	ldr	r0, [pc, #16]	@ (800052c <MX_FREERTOS_Init+0x1c>)
 800051a:	f003 fcbd 	bl	8003e98 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a03      	ldr	r2, [pc, #12]	@ (8000530 <MX_FREERTOS_Init+0x20>)
 8000522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08006b74 	.word	0x08006b74
 800052c:	08000535 	.word	0x08000535
 8000530:	2000007c 	.word	0x2000007c

08000534 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f003 fd3d 	bl	8003fbc <osDelay>
 8000542:	e7fb      	b.n	800053c <StartDefaultTask+0x8>

08000544 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	4b38      	ldr	r3, [pc, #224]	@ (800063c <MX_GPIO_Init+0xf8>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	4a37      	ldr	r2, [pc, #220]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000566:	4b35      	ldr	r3, [pc, #212]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	4a31      	ldr	r2, [pc, #196]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057e:	4b2f      	ldr	r3, [pc, #188]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <MX_GPIO_Init+0xf8>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058e:	4a2b      	ldr	r2, [pc, #172]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000596:	4b29      	ldr	r3, [pc, #164]	@ (800063c <MX_GPIO_Init+0xf8>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b26      	ldr	r3, [pc, #152]	@ (800063c <MX_GPIO_Init+0xf8>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a25      	ldr	r2, [pc, #148]	@ (800063c <MX_GPIO_Init+0xf8>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b23      	ldr	r3, [pc, #140]	@ (800063c <MX_GPIO_Init+0xf8>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2120      	movs	r1, #32
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f000 fdc5 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4818      	ldr	r0, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xfc>)
 80005de:	f000 fc35 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80005e2:	230c      	movs	r3, #12
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80005f2:	230c      	movs	r3, #12
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f000 fc24 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000604:	2320      	movs	r3, #32
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061e:	f000 fc15 	bl	8000e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2105      	movs	r1, #5
 8000626:	2028      	movs	r0, #40	@ 0x28
 8000628:	f000 fb28 	bl	8000c7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062c:	2028      	movs	r0, #40	@ 0x28
 800062e:	f000 fb3f 	bl	8000cb0 <HAL_NVIC_EnableIRQ>

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	@ 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fa29 	bl	8000a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f80c 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f7ff ff78 	bl	8000544 <MX_GPIO_Init>
  MX_UART4_Init();
 8000654:	f000 f94c 	bl	80008f0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000658:	f003 fbd4 	bl	8003e04 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800065c:	f7ff ff58 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000660:	f003 fbf4 	bl	8003e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x20>

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2238      	movs	r2, #56	@ 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 f976 	bl	8006968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fd9c 	bl	80011c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2340      	movs	r3, #64	@ 0x40
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006aa:	2355      	movs	r3, #85	@ 0x55
 80006ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fe36 	bl	8001330 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ca:	f000 f82b 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2104      	movs	r1, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 f934 	bl	8001954 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006f2:	f000 f817 	bl	8000724 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000712:	f000 f9dd 	bl	8000ad0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40001000 	.word	0x40001000

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_MspInit+0x50>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800073a:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <HAL_MspInit+0x50>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6613      	str	r3, [r2, #96]	@ 0x60
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <HAL_MspInit+0x50>)
 8000744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <HAL_MspInit+0x50>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000752:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <HAL_MspInit+0x50>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	6593      	str	r3, [r2, #88]	@ 0x58
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_MspInit+0x50>)
 800075c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	210f      	movs	r1, #15
 800076a:	f06f 0001 	mvn.w	r0, #1
 800076e:	f000 fa85 	bl	8000c7c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000772:	f000 fdcd 	bl	8001310 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <HAL_InitTick+0xc4>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000798:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <HAL_InitTick+0xc4>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a0:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <HAL_InitTick+0xc4>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ac:	f107 020c 	add.w	r2, r7, #12
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 faa2 	bl	8001d00 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007bc:	f001 fa74 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 80007c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <HAL_InitTick+0xc8>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0c9b      	lsrs	r3, r3, #18
 80007cc:	3b01      	subs	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <HAL_InitTick+0xcc>)
 80007d2:	4a20      	ldr	r2, [pc, #128]	@ (8000854 <HAL_InitTick+0xd0>)
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <HAL_InitTick+0xcc>)
 80007d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <HAL_InitTick+0xcc>)
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <HAL_InitTick+0xcc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HAL_InitTick+0xcc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80007f0:	4817      	ldr	r0, [pc, #92]	@ (8000850 <HAL_InitTick+0xcc>)
 80007f2:	f001 fd4b 	bl	800228c <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80007fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11b      	bne.n	800083c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000804:	4812      	ldr	r0, [pc, #72]	@ (8000850 <HAL_InitTick+0xcc>)
 8000806:	f001 fda3 	bl	8002350 <HAL_TIM_Base_Start_IT>
 800080a:	4603      	mov	r3, r0
 800080c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000814:	2b00      	cmp	r3, #0
 8000816:	d111      	bne.n	800083c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000818:	2036      	movs	r0, #54	@ 0x36
 800081a:	f000 fa49 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d808      	bhi.n	8000836 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2036      	movs	r0, #54	@ 0x36
 800082a:	f000 fa27 	bl	8000c7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <HAL_InitTick+0xd4>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e002      	b.n	800083c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800083c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000840:	4618      	mov	r0, r3
 8000842:	3730      	adds	r7, #48	@ 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	431bde83 	.word	0x431bde83
 8000850:	20000080 	.word	0x20000080
 8000854:	40001000 	.word	0x40001000
 8000858:	20000004 	.word	0x20000004

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000896:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800089a:	f000 fc71 	bl	8001180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80008a8:	4802      	ldr	r0, [pc, #8]	@ (80008b4 <UART4_IRQHandler+0x10>)
 80008aa:	f002 f88b 	bl	80029c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000cc 	.word	0x200000cc

080008b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <TIM6_DAC_IRQHandler+0x10>)
 80008be:	f001 fdbf 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000080 	.word	0x20000080

080008cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_UART4_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <MX_UART4_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_UART4_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_UART4_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_UART4_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_UART4_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_UART4_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_UART4_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_UART4_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_UART4_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_UART4_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_UART4_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_UART4_Init+0x90>)
 800093a:	f001 fff3 	bl	8002924 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000944:	f7ff feee 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_UART4_Init+0x90>)
 800094c:	f003 f94b 	bl	8003be6 <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000956:	f7ff fee5 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_UART4_Init+0x90>)
 800095e:	f003 f980 	bl	8003c62 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000968:	f7ff fedc 	bl	8000724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_UART4_Init+0x90>)
 800096e:	f003 f901 	bl	8003b74 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000978:	f7ff fed4 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000cc 	.word	0x200000cc
 8000984:	40004c00 	.word	0x40004c00

08000988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09e      	sub	sp, #120	@ 0x78
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2254      	movs	r2, #84	@ 0x54
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f005 ffdd 	bl	8006968 <memset>
  if(uartHandle->Instance==UART4)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a23      	ldr	r2, [pc, #140]	@ (8000a40 <HAL_UART_MspInit+0xb8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d13e      	bne.n	8000a36 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80009b8:	2308      	movs	r3, #8
 80009ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fa13 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d0:	f7ff fea8 	bl	8000724 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009de:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a08:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000a16:	2305      	movs	r3, #5
 8000a18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 8000a22:	f000 fa13 	bl	8000e4c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	2034      	movs	r0, #52	@ 0x34
 8000a2c:	f000 f926 	bl	8000c7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a30:	2034      	movs	r0, #52	@ 0x34
 8000a32:	f000 f93d 	bl	8000cb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3778      	adds	r7, #120	@ 0x78
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40004c00 	.word	0x40004c00
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000800 	.word	0x48000800

08000a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff ff3c 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f005 ffd3 	bl	8006a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7e:	f7ff fde1 	bl	8000644 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a90:	08006be8 	.word	0x08006be8
  ldr r2, =_sbss
 8000a94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a98:	20005eac 	.word	0x20005eac

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>

08000a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f8dc 	bl	8000c66 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f7ff fe68 	bl	8000784 <HAL_InitTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e001      	b.n	8000ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac0:	f7ff fe36 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_IncTick+0x1c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_IncTick+0x20>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a03      	ldr	r2, [pc, #12]	@ (8000aec <HAL_IncTick+0x1c>)
 8000ae0:	6013      	str	r3, [r2, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	20000160 	.word	0x20000160
 8000af0:	20000008 	.word	0x20000008

08000af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return uwTick;
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <HAL_GetTick+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000160 	.word	0x20000160

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	@ (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	@ (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	@ 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff4c 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8a:	f7ff ff63 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	6978      	ldr	r0, [r7, #20]
 8000c96:	f7ff ffb3 	bl	8000c00 <NVIC_EncodePriority>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff82 	bl	8000bac <__NVIC_SetPriority>
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff56 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d005      	beq.n	8000cf0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e037      	b.n	8000d60 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 020e 	bic.w	r2, r2, #14
 8000cfe:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d0e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d3c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00c      	beq.n	8000d60 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d54:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000d5e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d00d      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2204      	movs	r2, #4
 8000d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e047      	b.n	8000e42 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 020e 	bic.w	r2, r2, #14
 8000dc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000de0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	f003 021f 	and.w	r2, r3, #31
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	2101      	movs	r1, #1
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000dfe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00c      	beq.n	8000e22 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	4798      	blx	r3
    }
  }
  return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e5a:	e15a      	b.n	8001112 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 814c 	beq.w	800110c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d017      	beq.n	8000f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80a6 	beq.w	800110c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001130 <HAL_GPIO_Init+0x2e4>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8001130 <HAL_GPIO_Init+0x2e4>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fcc:	4b58      	ldr	r3, [pc, #352]	@ (8001130 <HAL_GPIO_Init+0x2e4>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd8:	4a56      	ldr	r2, [pc, #344]	@ (8001134 <HAL_GPIO_Init+0x2e8>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001002:	d01f      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4c      	ldr	r2, [pc, #304]	@ (8001138 <HAL_GPIO_Init+0x2ec>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d019      	beq.n	8001040 <HAL_GPIO_Init+0x1f4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4b      	ldr	r2, [pc, #300]	@ (800113c <HAL_GPIO_Init+0x2f0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d013      	beq.n	800103c <HAL_GPIO_Init+0x1f0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4a      	ldr	r2, [pc, #296]	@ (8001140 <HAL_GPIO_Init+0x2f4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00d      	beq.n	8001038 <HAL_GPIO_Init+0x1ec>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a49      	ldr	r2, [pc, #292]	@ (8001144 <HAL_GPIO_Init+0x2f8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x1e8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a48      	ldr	r2, [pc, #288]	@ (8001148 <HAL_GPIO_Init+0x2fc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d101      	bne.n	8001030 <HAL_GPIO_Init+0x1e4>
 800102c:	2305      	movs	r3, #5
 800102e:	e00a      	b.n	8001046 <HAL_GPIO_Init+0x1fa>
 8001030:	2306      	movs	r3, #6
 8001032:	e008      	b.n	8001046 <HAL_GPIO_Init+0x1fa>
 8001034:	2304      	movs	r3, #4
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x1fa>
 8001038:	2303      	movs	r3, #3
 800103a:	e004      	b.n	8001046 <HAL_GPIO_Init+0x1fa>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x1fa>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_GPIO_Init+0x1fa>
 8001044:	2300      	movs	r3, #0
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001056:	4937      	ldr	r1, [pc, #220]	@ (8001134 <HAL_GPIO_Init+0x2e8>)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <HAL_GPIO_Init+0x300>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001088:	4a30      	ldr	r2, [pc, #192]	@ (800114c <HAL_GPIO_Init+0x300>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <HAL_GPIO_Init+0x300>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b2:	4a26      	ldr	r2, [pc, #152]	@ (800114c <HAL_GPIO_Init+0x300>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <HAL_GPIO_Init+0x300>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <HAL_GPIO_Init+0x300>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_GPIO_Init+0x300>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001106:	4a11      	ldr	r2, [pc, #68]	@ (800114c <HAL_GPIO_Init+0x300>)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	f47f ae9d 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000
 8001138:	48000400 	.word	0x48000400
 800113c:	48000800 	.word	0x48000800
 8001140:	48000c00 	.word	0x48000c00
 8001144:	48001000 	.word	0x48001000
 8001148:	48001400 	.word	0x48001400
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116c:	e002      	b.n	8001174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f806 	bl	80011b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d141      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e2:	d131      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011e4:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011ea:	4a46      	ldr	r2, [pc, #280]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011fc:	4a41      	ldr	r2, [pc, #260]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001202:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001204:	4b40      	ldr	r3, [pc, #256]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2232      	movs	r2, #50	@ 0x32
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a3f      	ldr	r2, [pc, #252]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121a:	e002      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3b01      	subs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001222:	4b38      	ldr	r3, [pc, #224]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122e:	d102      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f2      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001236:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001242:	d158      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e057      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800124e:	4a2d      	ldr	r2, [pc, #180]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001258:	e04d      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001260:	d141      	bne.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126e:	d131      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001288:	4a1e      	ldr	r2, [pc, #120]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2232      	movs	r2, #50	@ 0x32
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	0c9b      	lsrs	r3, r3, #18
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a6:	e002      	b.n	80012ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ba:	d102      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f2      	bne.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ce:	d112      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e011      	b.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012e4:	e007      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40007000 	.word	0x40007000
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83

08001310 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6093      	str	r3, [r2, #8]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000

08001330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e2fe      	b.n	8001940 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b97      	ldr	r3, [pc, #604]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001358:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x3e>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d002      	beq.n	8001374 <HAL_RCC_OscConfig+0x44>
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b08      	cmp	r3, #8
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b8d      	ldr	r3, [pc, #564]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d05b      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d157      	bne.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e2d9      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x74>
 8001396:	4b85      	ldr	r3, [pc, #532]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a84      	ldr	r2, [pc, #528]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4b7f      	ldr	r3, [pc, #508]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a7e      	ldr	r2, [pc, #504]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b7c      	ldr	r3, [pc, #496]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a7b      	ldr	r2, [pc, #492]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013c8:	4b78      	ldr	r3, [pc, #480]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a77      	ldr	r2, [pc, #476]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a74      	ldr	r2, [pc, #464]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb84 	bl	8000af4 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb80 	bl	8000af4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e29e      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb70 	bl	8000af4 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fb6c 	bl	8000af4 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e28a      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142a:	4b60      	ldr	r3, [pc, #384]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b59      	ldr	r3, [pc, #356]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001450:	4b56      	ldr	r3, [pc, #344]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d102      	bne.n	8001466 <HAL_RCC_OscConfig+0x136>
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d002      	beq.n	800146c <HAL_RCC_OscConfig+0x13c>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d11f      	bne.n	80014ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	4b4f      	ldr	r3, [pc, #316]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x154>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e25d      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b49      	ldr	r3, [pc, #292]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	4946      	ldr	r1, [pc, #280]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001498:	4b45      	ldr	r3, [pc, #276]	@ (80015b0 <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f971 	bl	8000784 <HAL_InitTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d043      	beq.n	8001530 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e249      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d023      	beq.n	80014fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a3c      	ldr	r2, [pc, #240]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb18 	bl	8000af4 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fb14 	bl	8000af4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e232      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	061b      	lsls	r3, r3, #24
 80014f4:	492d      	ldr	r1, [pc, #180]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
 80014fa:	e01a      	b.n	8001532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fc:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a2a      	ldr	r2, [pc, #168]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff faf4 	bl	8000af4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001510:	f7ff faf0 	bl	8000af4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e20e      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x1e0>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d041      	beq.n	80015c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff facd 	bl	8000af4 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fac9 	bl	8000af4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1e7      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ef      	beq.n	800155e <HAL_RCC_OscConfig+0x22e>
 800157e:	e020      	b.n	80015c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fab0 	bl	8000af4 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001596:	e00d      	b.n	80015b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff faac 	bl	8000af4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d906      	bls.n	80015b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1ca      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b8c      	ldr	r3, [pc, #560]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ea      	bne.n	8001598 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015d4:	4b84      	ldr	r3, [pc, #528]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2b4>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x2b6>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00d      	beq.n	8001606 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	4a7e      	ldr	r2, [pc, #504]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015f6:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001602:	2301      	movs	r3, #1
 8001604:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001606:	4b79      	ldr	r3, [pc, #484]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d118      	bne.n	8001644 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001612:	4b76      	ldr	r3, [pc, #472]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161e:	f7ff fa69 	bl	8000af4 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001626:	f7ff fa65 	bl	8000af4 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e183      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	4b6c      	ldr	r3, [pc, #432]	@ (80017ec <HAL_RCC_OscConfig+0x4bc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_RCC_OscConfig+0x32e>
 800164c:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a65      	ldr	r2, [pc, #404]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	e024      	b.n	80016a8 <HAL_RCC_OscConfig+0x378>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d110      	bne.n	8001688 <HAL_RCC_OscConfig+0x358>
 8001666:	4b60      	ldr	r3, [pc, #384]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	4a5e      	ldr	r2, [pc, #376]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	f043 0304 	orr.w	r3, r3, #4
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001676:	4b5c      	ldr	r3, [pc, #368]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167c:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001686:	e00f      	b.n	80016a8 <HAL_RCC_OscConfig+0x378>
 8001688:	4b57      	ldr	r3, [pc, #348]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a56      	ldr	r2, [pc, #344]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	4b53      	ldr	r3, [pc, #332]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169e:	4a52      	ldr	r2, [pc, #328]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d016      	beq.n	80016de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa20 	bl	8000af4 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa1c 	bl	8000af4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e138      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ed      	beq.n	80016b8 <HAL_RCC_OscConfig+0x388>
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa09 	bl	8000af4 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fa05 	bl	8000af4 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e121      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ed      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a34      	ldr	r2, [pc, #208]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01c      	beq.n	800176a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001730:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001736:	4a2c      	ldr	r2, [pc, #176]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff f9d8 	bl	8000af4 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001748:	f7ff f9d4 	bl	8000af4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e0f2      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175a:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800175c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ef      	beq.n	8001748 <HAL_RCC_OscConfig+0x418>
 8001768:	e01b      	b.n	80017a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001770:	4a1d      	ldr	r2, [pc, #116]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff f9bb 	bl	8000af4 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001782:	f7ff f9b7 	bl	8000af4 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0d5      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ef      	bne.n	8001782 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80c9 	beq.w	800193e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	f000 8083 	beq.w	80018c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d15e      	bne.n	8001880 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a08      	ldr	r2, [pc, #32]	@ (80017e8 <HAL_RCC_OscConfig+0x4b8>)
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f991 	bl	8000af4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e00c      	b.n	80017f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f98d 	bl	8000af4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d905      	bls.n	80017f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0ab      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ec      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fc:	4b52      	ldr	r3, [pc, #328]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4b52      	ldr	r3, [pc, #328]	@ (800194c <HAL_RCC_OscConfig+0x61c>)
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6a11      	ldr	r1, [r2, #32]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800180c:	3a01      	subs	r2, #1
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001816:	0212      	lsls	r2, r2, #8
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800181e:	0852      	lsrs	r2, r2, #1
 8001820:	3a01      	subs	r2, #1
 8001822:	0552      	lsls	r2, r2, #21
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800182a:	0852      	lsrs	r2, r2, #1
 800182c:	3a01      	subs	r2, #1
 800182e:	0652      	lsls	r2, r2, #25
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001836:	06d2      	lsls	r2, r2, #27
 8001838:	430a      	orrs	r2, r1
 800183a:	4943      	ldr	r1, [pc, #268]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a40      	ldr	r2, [pc, #256]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800184c:	4b3e      	ldr	r3, [pc, #248]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a3d      	ldr	r2, [pc, #244]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001856:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f94c 	bl	8000af4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f948 	bl	8000af4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e066      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x530>
 800187e:	e05e      	b.n	800193e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a30      	ldr	r2, [pc, #192]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 8001886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f932 	bl	8000af4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f92e 	bl	8000af4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04c      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4924      	ldr	r1, [pc, #144]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018b8:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_RCC_OscConfig+0x620>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
 80018be:	e03e      	b.n	800193e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e039      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <HAL_RCC_OscConfig+0x618>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d12c      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	3b01      	subs	r3, #1
 80018ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d123      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d11b      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d113      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d109      	bne.n	800193a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	019f800c 	.word	0x019f800c
 8001950:	feeefffc 	.word	0xfeeefffc

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e11e      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b91      	ldr	r3, [pc, #580]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d910      	bls.n	800199c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 020f 	bic.w	r2, r3, #15
 8001982:	498c      	ldr	r1, [pc, #560]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e106      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d073      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d129      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b81      	ldr	r3, [pc, #516]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0f4      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019c0:	f000 f9d0 	bl	8001d64 <RCC_GetSysClockFreqFromPLLSource>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4a7c      	ldr	r2, [pc, #496]	@ (8001bbc <HAL_RCC_ClockConfig+0x268>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d93f      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019ce:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d033      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d12f      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ee:	4b72      	ldr	r3, [pc, #456]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019f6:	4a70      	ldr	r2, [pc, #448]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e024      	b.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0c6      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1c:	4b66      	ldr	r3, [pc, #408]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0be      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a2c:	f000 f8ce 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4a61      	ldr	r2, [pc, #388]	@ (8001bbc <HAL_RCC_ClockConfig+0x268>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d909      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a42:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4957      	ldr	r1, [pc, #348]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a60:	f7ff f848 	bl	8000af4 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f844 	bl	8000af4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e095      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d023      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa8:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a42      	ldr	r2, [pc, #264]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ab2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4936      	ldr	r1, [pc, #216]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b80      	cmp	r3, #128	@ 0x80
 8001ae8:	d105      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aea:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4a32      	ldr	r2, [pc, #200]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001af4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af6:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d21d      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 020f 	bic.w	r2, r3, #15
 8001b0c:	4929      	ldr	r1, [pc, #164]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b14:	f7fe ffee 	bl	8000af4 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7fe ffea 	bl	8000af4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e03b      	b.n	8001baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_RCC_ClockConfig+0x260>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ed      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4917      	ldr	r1, [pc, #92]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490f      	ldr	r1, [pc, #60]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b7e:	f000 f825 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_RCC_ClockConfig+0x264>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <HAL_RCC_ClockConfig+0x26c>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_RCC_ClockConfig+0x270>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_RCC_ClockConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fdee 	bl	8000784 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	04c4b400 	.word	0x04c4b400
 8001bc0:	08006b98 	.word	0x08006b98
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e047      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be4:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e03e      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bf6:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d136      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c20:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2a:	68d2      	ldr	r2, [r2, #12]
 8001c2c:	0a12      	lsrs	r2, r2, #8
 8001c2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
      break;
 8001c38:	e00c      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c3a:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c44:	68d2      	ldr	r2, [r2, #12]
 8001c46:	0a12      	lsrs	r2, r2, #8
 8001c48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
      break;
 8001c52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0e5b      	lsrs	r3, r3, #25
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e001      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c74:	693b      	ldr	r3, [r7, #16]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	016e3600 	.word	0x016e3600

08001c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cac:	f7ff fff0 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	4904      	ldr	r1, [pc, #16]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08006ba8 	.word	0x08006ba8

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cd8:	f7ff ffda 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4904      	ldr	r1, [pc, #16]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08006ba8 	.word	0x08006ba8

08001d00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <HAL_RCC_GetClockConfig+0x60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40022000 	.word	0x40022000

08001d64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d10c      	bne.n	8001da2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d92:	68d2      	ldr	r2, [r2, #12]
 8001d94:	0a12      	lsrs	r2, r2, #8
 8001d96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
    break;
 8001da0:	e00c      	b.n	8001dbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4a0e      	ldr	r2, [pc, #56]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	0a12      	lsrs	r2, r2, #8
 8001db0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    break;
 8001dba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0e5b      	lsrs	r3, r3, #25
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dd6:	687b      	ldr	r3, [r7, #4]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	40021000 	.word	0x40021000
 8001de8:	016e3600 	.word	0x016e3600
 8001dec:	00f42400 	.word	0x00f42400

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8098 	beq.w	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b40      	ldr	r3, [pc, #256]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	4a3f      	ldr	r2, [pc, #252]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e46:	f7fe fe55 	bl	8000af4 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7fe fe51 	bl	8000af4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d902      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	74fb      	strb	r3, [r7, #19]
        break;
 8001e60:	e005      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e62:	4b30      	ldr	r3, [pc, #192]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0ef      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e6e:	7cfb      	ldrb	r3, [r7, #19]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d159      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e74:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01e      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d019      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e9c:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eac:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ebc:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7fe fe11 	bl	8000af4 <HAL_GetTick>
 8001ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	e00b      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe fe0d 	bl	8000af4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d902      	bls.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	74fb      	strb	r3, [r7, #19]
            break;
 8001eec:	e006      	b.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ec      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f18:	e008      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	74bb      	strb	r3, [r7, #18]
 8001f1e:	e005      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f2c:	7c7b      	ldrb	r3, [r7, #17]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4ba7      	ldr	r3, [pc, #668]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	4aa6      	ldr	r2, [pc, #664]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f4a:	4ba1      	ldr	r3, [pc, #644]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f50:	f023 0203 	bic.w	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	499d      	ldr	r1, [pc, #628]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f6c:	4b98      	ldr	r3, [pc, #608]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	f023 020c 	bic.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4995      	ldr	r1, [pc, #596]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f8e:	4b90      	ldr	r3, [pc, #576]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	498c      	ldr	r1, [pc, #560]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00a      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb0:	4b87      	ldr	r3, [pc, #540]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4984      	ldr	r1, [pc, #528]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	497b      	ldr	r1, [pc, #492]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ff4:	4b76      	ldr	r3, [pc, #472]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	4973      	ldr	r1, [pc, #460]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002016:	4b6e      	ldr	r3, [pc, #440]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	496a      	ldr	r1, [pc, #424]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002038:	4b65      	ldr	r3, [pc, #404]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800203e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4962      	ldr	r1, [pc, #392]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002060:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	4959      	ldr	r1, [pc, #356]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800207c:	4b54      	ldr	r3, [pc, #336]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	4951      	ldr	r1, [pc, #324]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	4948      	ldr	r1, [pc, #288]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c0:	4b43      	ldr	r3, [pc, #268]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4940      	ldr	r1, [pc, #256]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	4932      	ldr	r1, [pc, #200]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a2c      	ldr	r2, [pc, #176]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002122:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002130:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	4924      	ldr	r1, [pc, #144]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002176:	4916      	ldr	r1, [pc, #88]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002182:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d019      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021be:	d109      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a02      	ldr	r2, [pc, #8]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
 80021cc:	e002      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d015      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021e0:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	4926      	ldr	r1, [pc, #152]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021fe:	d105      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a20      	ldr	r2, [pc, #128]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	4918      	ldr	r1, [pc, #96]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002242:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d015      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	490a      	ldr	r1, [pc, #40]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800226e:	d105      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800227c:	7cbb      	ldrb	r3, [r7, #18]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e049      	b.n	8002332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f841 	bl	800233a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 fa30 	bl	8002730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e054      	b.n	8002412 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <HAL_TIM_Base_Start_IT+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002392:	d01d      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_TIM_Base_Start_IT+0xd4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <HAL_TIM_Base_Start_IT+0xd8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	@ (800242c <HAL_TIM_Base_Start_IT+0xdc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002430 <HAL_TIM_Base_Start_IT+0xe0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <HAL_TIM_Base_Start_IT+0xe4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_TIM_Base_Start_IT+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d115      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b19      	ldr	r3, [pc, #100]	@ (800243c <HAL_TIM_Base_Start_IT+0xec>)
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d015      	beq.n	800240e <HAL_TIM_Base_Start_IT+0xbe>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d011      	beq.n	800240e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e008      	b.n	800240e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e000      	b.n	8002410 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40013400 	.word	0x40013400
 8002434:	40014000 	.word	0x40014000
 8002438:	40015000 	.word	0x40015000
 800243c:	00010007 	.word	0x00010007

08002440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d020      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0202 	mvn.w	r2, #2
 8002474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f931 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f923 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f934 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d020      	beq.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f90b 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8fd 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f90e 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d020      	beq.n	800253c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0208 	mvn.w	r2, #8
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2204      	movs	r2, #4
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8e5 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f8d7 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8e8 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d020      	beq.n	8002588 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01b      	beq.n	8002588 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0210 	mvn.w	r2, #16
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2208      	movs	r2, #8
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f8bf 	bl	80026f2 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8b1 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f8c2 	bl	8002706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f8aa 	bl	8000700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00c      	beq.n	80025da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f969 	bl	80028ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80025f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f961 	bl	80028c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00c      	beq.n	8002622 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800261a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f87c 	bl	800271a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0220 	mvn.w	r2, #32
 800263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f929 	bl	8002898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00c      	beq.n	800266a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f935 	bl	80028d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f92d 	bl	80028e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80026aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f925 	bl	80028fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80026ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f91d 	bl	8002910 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4c      	ldr	r2, [pc, #304]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d017      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274e:	d013      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a49      	ldr	r2, [pc, #292]	@ (8002878 <TIM_Base_SetConfig+0x148>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00f      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a48      	ldr	r2, [pc, #288]	@ (800287c <TIM_Base_SetConfig+0x14c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a47      	ldr	r2, [pc, #284]	@ (8002880 <TIM_Base_SetConfig+0x150>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a46      	ldr	r2, [pc, #280]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x48>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a45      	ldr	r2, [pc, #276]	@ (8002888 <TIM_Base_SetConfig+0x158>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a39      	ldr	r2, [pc, #228]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d023      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002798:	d01f      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a36      	ldr	r2, [pc, #216]	@ (8002878 <TIM_Base_SetConfig+0x148>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01b      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a35      	ldr	r2, [pc, #212]	@ (800287c <TIM_Base_SetConfig+0x14c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d017      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a34      	ldr	r2, [pc, #208]	@ (8002880 <TIM_Base_SetConfig+0x150>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a33      	ldr	r2, [pc, #204]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00f      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a33      	ldr	r2, [pc, #204]	@ (800288c <TIM_Base_SetConfig+0x15c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a32      	ldr	r2, [pc, #200]	@ (8002890 <TIM_Base_SetConfig+0x160>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <TIM_Base_SetConfig+0x164>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0xaa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002888 <TIM_Base_SetConfig+0x158>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <TIM_Base_SetConfig+0x144>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a1a      	ldr	r2, [pc, #104]	@ (8002884 <TIM_Base_SetConfig+0x154>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00f      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <TIM_Base_SetConfig+0x15c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <TIM_Base_SetConfig+0x160>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <TIM_Base_SetConfig+0x164>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0x110>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <TIM_Base_SetConfig+0x158>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
  }
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400
 800287c:	40000800 	.word	0x40000800
 8002880:	40000c00 	.word	0x40000c00
 8002884:	40013400 	.word	0x40013400
 8002888:	40015000 	.word	0x40015000
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e042      	b.n	80029bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7fe f81d 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2224      	movs	r2, #36	@ 0x24
 8002952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fe86 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fb87 	bl	8003088 <UART_SetConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e01b      	b.n	80029bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 ff05 	bl	80037c4 <UART_CheckIdleState>
 80029ba:	4603      	mov	r3, r0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0ba      	sub	sp, #232	@ 0xe8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80029ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80029f2:	4013      	ands	r3, r2
 80029f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80029f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11b      	bne.n	8002a38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8300 	beq.w	800302e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
      }
      return;
 8002a36:	e2fa      	b.n	800302e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8123 	beq.w	8002c88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a46:	4b8d      	ldr	r3, [pc, #564]	@ (8002c7c <HAL_UART_IRQHandler+0x2b8>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a52:	4b8b      	ldr	r3, [pc, #556]	@ (8002c80 <HAL_UART_IRQHandler+0x2bc>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8116 	beq.w	8002c88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d011      	beq.n	8002a8c <HAL_UART_IRQHandler+0xc8>
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <HAL_UART_IRQHandler+0xf8>
 8002a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d011      	beq.n	8002aec <HAL_UART_IRQHandler+0x128>
 8002ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002b08:	4b5c      	ldr	r3, [pc, #368]	@ (8002c7c <HAL_UART_IRQHandler+0x2b8>)
 8002b0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00b      	beq.n	8002b28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2208      	movs	r2, #8
 8002b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1e:	f043 0208 	orr.w	r2, r3, #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_UART_IRQHandler+0x196>
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8266 	beq.w	8003032 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d013      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d005      	beq.n	8002bbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d054      	beq.n	8002c68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 ff17 	bl	80039f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d146      	bne.n	8002c60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1d9      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <HAL_UART_IRQHandler+0x2c0>)
 8002c30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe f8a0 	bl	8000d7e <HAL_DMA_Abort_IT>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d019      	beq.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002c52:	4610      	mov	r0, r2
 8002c54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c56:	e00f      	b.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f9ff 	bl	800305c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5e:	e00b      	b.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f9fb 	bl	800305c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c66:	e007      	b.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f9f7 	bl	800305c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002c76:	e1dc      	b.n	8003032 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	bf00      	nop
    return;
 8002c7a:	e1da      	b.n	8003032 <HAL_UART_IRQHandler+0x66e>
 8002c7c:	10000001 	.word	0x10000001
 8002c80:	04000120 	.word	0x04000120
 8002c84:	08003abf 	.word	0x08003abf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 8170 	bne.w	8002f72 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8169 	beq.w	8002f72 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8162 	beq.w	8002f72 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	f040 80d8 	bne.w	8002e76 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80af 	beq.w	8002e3c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ce4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f080 80a7 	bcs.w	8002e3c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8087 	bne.w	8002e1a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1da      	bne.n	8002d0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e1      	bne.n	8002d56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3308      	adds	r3, #8
 8002d98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3308      	adds	r3, #8
 8002db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002db8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e3      	bne.n	8002d92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de8:	f023 0310 	bic.w	r3, r3, #16
 8002dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e4      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff59 	bl	8000ccc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f91b 	bl	8003070 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002e3a:	e0fc      	b.n	8003036 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f040 80f5 	bne.w	8003036 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	f040 80eb 	bne.w	8003036 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8fe 	bl	8003070 <HAL_UARTEx_RxEventCallback>
      return;
 8002e74:	e0df      	b.n	8003036 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80d1 	beq.w	800303a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80cc 	beq.w	800303a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e4      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3308      	adds	r3, #8
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3308      	adds	r3, #8
 8002efc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f00:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e1      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f023 0310 	bic.w	r3, r3, #16
 8002f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	617b      	str	r3, [r7, #20]
   return(result);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e4      	bne.n	8002f28 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f880 	bl	8003070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f70:	e063      	b.n	800303a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00e      	beq.n	8002f9c <HAL_UART_IRQHandler+0x5d8>
 8002f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fdcf 	bl	8003b38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f9a:	e051      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d014      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d03a      	beq.n	800303e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
    }
    return;
 8002fd0:	e035      	b.n	800303e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x62e>
 8002fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fd79 	bl	8003ae2 <UART_EndTransmit_IT>
    return;
 8002ff0:	e026      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_UART_IRQHandler+0x64e>
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003002:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fda8 	bl	8003b60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003010:	e016      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003016:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_UART_IRQHandler+0x67c>
 800301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003022:	2b00      	cmp	r3, #0
 8003024:	da0c      	bge.n	8003040 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fd90 	bl	8003b4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800302c:	e008      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
      return;
 800302e:	bf00      	nop
 8003030:	e006      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
    return;
 8003032:	bf00      	nop
 8003034:	e004      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
      return;
 8003036:	bf00      	nop
 8003038:	e002      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
      return;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <HAL_UART_IRQHandler+0x67c>
    return;
 800303e:	bf00      	nop
  }
}
 8003040:	37e8      	adds	r7, #232	@ 0xe8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop

08003048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800308c:	b08c      	sub	sp, #48	@ 0x30
 800308e:	af00      	add	r7, sp, #0
 8003090:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4baa      	ldr	r3, [pc, #680]	@ (8003360 <UART_SetConfig+0x2d8>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a9f      	ldr	r2, [pc, #636]	@ (8003364 <UART_SetConfig+0x2dc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d004      	beq.n	80030f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f0:	4313      	orrs	r3, r2
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80030fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	f023 010f 	bic.w	r1, r3, #15
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a90      	ldr	r2, [pc, #576]	@ (8003368 <UART_SetConfig+0x2e0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d125      	bne.n	8003178 <UART_SetConfig+0xf0>
 800312c:	4b8f      	ldr	r3, [pc, #572]	@ (800336c <UART_SetConfig+0x2e4>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b03      	cmp	r3, #3
 8003138:	d81a      	bhi.n	8003170 <UART_SetConfig+0xe8>
 800313a:	a201      	add	r2, pc, #4	@ (adr r2, 8003140 <UART_SetConfig+0xb8>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003151 	.word	0x08003151
 8003144:	08003161 	.word	0x08003161
 8003148:	08003159 	.word	0x08003159
 800314c:	08003169 	.word	0x08003169
 8003150:	2301      	movs	r3, #1
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003156:	e116      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003158:	2302      	movs	r3, #2
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315e:	e112      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003160:	2304      	movs	r3, #4
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	e10e      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003168:	2308      	movs	r3, #8
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316e:	e10a      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003170:	2310      	movs	r3, #16
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003176:	e106      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7c      	ldr	r2, [pc, #496]	@ (8003370 <UART_SetConfig+0x2e8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d138      	bne.n	80031f4 <UART_SetConfig+0x16c>
 8003182:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <UART_SetConfig+0x2e4>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b0c      	cmp	r3, #12
 800318e:	d82d      	bhi.n	80031ec <UART_SetConfig+0x164>
 8003190:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <UART_SetConfig+0x110>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080031ed 	.word	0x080031ed
 80031a4:	080031ed 	.word	0x080031ed
 80031a8:	080031dd 	.word	0x080031dd
 80031ac:	080031ed 	.word	0x080031ed
 80031b0:	080031ed 	.word	0x080031ed
 80031b4:	080031ed 	.word	0x080031ed
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	080031ed 	.word	0x080031ed
 80031c0:	080031ed 	.word	0x080031ed
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031e5 	.word	0x080031e5
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d2:	e0d8      	b.n	8003386 <UART_SetConfig+0x2fe>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031da:	e0d4      	b.n	8003386 <UART_SetConfig+0x2fe>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e2:	e0d0      	b.n	8003386 <UART_SetConfig+0x2fe>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ea:	e0cc      	b.n	8003386 <UART_SetConfig+0x2fe>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f2:	e0c8      	b.n	8003386 <UART_SetConfig+0x2fe>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003374 <UART_SetConfig+0x2ec>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d125      	bne.n	800324a <UART_SetConfig+0x1c2>
 80031fe:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <UART_SetConfig+0x2e4>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003204:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003208:	2b30      	cmp	r3, #48	@ 0x30
 800320a:	d016      	beq.n	800323a <UART_SetConfig+0x1b2>
 800320c:	2b30      	cmp	r3, #48	@ 0x30
 800320e:	d818      	bhi.n	8003242 <UART_SetConfig+0x1ba>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d00a      	beq.n	800322a <UART_SetConfig+0x1a2>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d814      	bhi.n	8003242 <UART_SetConfig+0x1ba>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <UART_SetConfig+0x19a>
 800321c:	2b10      	cmp	r3, #16
 800321e:	d008      	beq.n	8003232 <UART_SetConfig+0x1aa>
 8003220:	e00f      	b.n	8003242 <UART_SetConfig+0x1ba>
 8003222:	2300      	movs	r3, #0
 8003224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003228:	e0ad      	b.n	8003386 <UART_SetConfig+0x2fe>
 800322a:	2302      	movs	r3, #2
 800322c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003230:	e0a9      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003232:	2304      	movs	r3, #4
 8003234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003238:	e0a5      	b.n	8003386 <UART_SetConfig+0x2fe>
 800323a:	2308      	movs	r3, #8
 800323c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003240:	e0a1      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003242:	2310      	movs	r3, #16
 8003244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003248:	e09d      	b.n	8003386 <UART_SetConfig+0x2fe>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a4a      	ldr	r2, [pc, #296]	@ (8003378 <UART_SetConfig+0x2f0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d125      	bne.n	80032a0 <UART_SetConfig+0x218>
 8003254:	4b45      	ldr	r3, [pc, #276]	@ (800336c <UART_SetConfig+0x2e4>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800325e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003260:	d016      	beq.n	8003290 <UART_SetConfig+0x208>
 8003262:	2bc0      	cmp	r3, #192	@ 0xc0
 8003264:	d818      	bhi.n	8003298 <UART_SetConfig+0x210>
 8003266:	2b80      	cmp	r3, #128	@ 0x80
 8003268:	d00a      	beq.n	8003280 <UART_SetConfig+0x1f8>
 800326a:	2b80      	cmp	r3, #128	@ 0x80
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x210>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <UART_SetConfig+0x1f0>
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d008      	beq.n	8003288 <UART_SetConfig+0x200>
 8003276:	e00f      	b.n	8003298 <UART_SetConfig+0x210>
 8003278:	2300      	movs	r3, #0
 800327a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327e:	e082      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003280:	2302      	movs	r3, #2
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003286:	e07e      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003288:	2304      	movs	r3, #4
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328e:	e07a      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003290:	2308      	movs	r3, #8
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003296:	e076      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003298:	2310      	movs	r3, #16
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329e:	e072      	b.n	8003386 <UART_SetConfig+0x2fe>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a35      	ldr	r2, [pc, #212]	@ (800337c <UART_SetConfig+0x2f4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d12a      	bne.n	8003300 <UART_SetConfig+0x278>
 80032aa:	4b30      	ldr	r3, [pc, #192]	@ (800336c <UART_SetConfig+0x2e4>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b8:	d01a      	beq.n	80032f0 <UART_SetConfig+0x268>
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0x270>
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c4:	d00c      	beq.n	80032e0 <UART_SetConfig+0x258>
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ca:	d815      	bhi.n	80032f8 <UART_SetConfig+0x270>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <UART_SetConfig+0x250>
 80032d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d4:	d008      	beq.n	80032e8 <UART_SetConfig+0x260>
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x270>
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032de:	e052      	b.n	8003386 <UART_SetConfig+0x2fe>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e6:	e04e      	b.n	8003386 <UART_SetConfig+0x2fe>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e04a      	b.n	8003386 <UART_SetConfig+0x2fe>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f6:	e046      	b.n	8003386 <UART_SetConfig+0x2fe>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032fe:	e042      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <UART_SetConfig+0x2dc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d13a      	bne.n	8003380 <UART_SetConfig+0x2f8>
 800330a:	4b18      	ldr	r3, [pc, #96]	@ (800336c <UART_SetConfig+0x2e4>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003318:	d01a      	beq.n	8003350 <UART_SetConfig+0x2c8>
 800331a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800331e:	d81b      	bhi.n	8003358 <UART_SetConfig+0x2d0>
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003324:	d00c      	beq.n	8003340 <UART_SetConfig+0x2b8>
 8003326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800332a:	d815      	bhi.n	8003358 <UART_SetConfig+0x2d0>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <UART_SetConfig+0x2b0>
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003334:	d008      	beq.n	8003348 <UART_SetConfig+0x2c0>
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x2d0>
 8003338:	2300      	movs	r3, #0
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e022      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e01e      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e01a      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003356:	e016      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800335e:	e012      	b.n	8003386 <UART_SetConfig+0x2fe>
 8003360:	cfff69f3 	.word	0xcfff69f3
 8003364:	40008000 	.word	0x40008000
 8003368:	40013800 	.word	0x40013800
 800336c:	40021000 	.word	0x40021000
 8003370:	40004400 	.word	0x40004400
 8003374:	40004800 	.word	0x40004800
 8003378:	40004c00 	.word	0x40004c00
 800337c:	40005000 	.word	0x40005000
 8003380:	2310      	movs	r3, #16
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4aae      	ldr	r2, [pc, #696]	@ (8003644 <UART_SetConfig+0x5bc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	f040 8097 	bne.w	80034c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003396:	2b08      	cmp	r3, #8
 8003398:	d823      	bhi.n	80033e2 <UART_SetConfig+0x35a>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <UART_SetConfig+0x318>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033e3 	.word	0x080033e3
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033e3 	.word	0x080033e3
 80033b0:	080033d3 	.word	0x080033d3
 80033b4:	080033e3 	.word	0x080033e3
 80033b8:	080033e3 	.word	0x080033e3
 80033bc:	080033e3 	.word	0x080033e3
 80033c0:	080033db 	.word	0x080033db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c4:	f7fe fc70 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 80033c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ca:	e010      	b.n	80033ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033cc:	4b9e      	ldr	r3, [pc, #632]	@ (8003648 <UART_SetConfig+0x5c0>)
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033d0:	e00d      	b.n	80033ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d2:	f7fe fbfb 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 80033d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033d8:	e009      	b.n	80033ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e0:	e005      	b.n	80033ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8130 	beq.w	8003656 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	4a94      	ldr	r2, [pc, #592]	@ (800364c <UART_SetConfig+0x5c4>)
 80033fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003400:	461a      	mov	r2, r3
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	fbb3 f3f2 	udiv	r3, r3, r2
 8003408:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	429a      	cmp	r2, r3
 8003418:	d305      	bcc.n	8003426 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	429a      	cmp	r2, r3
 8003424:	d903      	bls.n	800342e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800342c:	e113      	b.n	8003656 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	2200      	movs	r2, #0
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	60fa      	str	r2, [r7, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	4a84      	ldr	r2, [pc, #528]	@ (800364c <UART_SetConfig+0x5c4>)
 800343c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003440:	b29b      	uxth	r3, r3
 8003442:	2200      	movs	r2, #0
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800344c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003450:	f7fc fee6 	bl	8000220 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	020b      	lsls	r3, r1, #8
 8003466:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800346a:	0202      	lsls	r2, r0, #8
 800346c:	6979      	ldr	r1, [r7, #20]
 800346e:	6849      	ldr	r1, [r1, #4]
 8003470:	0849      	lsrs	r1, r1, #1
 8003472:	2000      	movs	r0, #0
 8003474:	460c      	mov	r4, r1
 8003476:	4605      	mov	r5, r0
 8003478:	eb12 0804 	adds.w	r8, r2, r4
 800347c:	eb43 0905 	adc.w	r9, r3, r5
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	469a      	mov	sl, r3
 8003488:	4693      	mov	fp, r2
 800348a:	4652      	mov	r2, sl
 800348c:	465b      	mov	r3, fp
 800348e:	4640      	mov	r0, r8
 8003490:	4649      	mov	r1, r9
 8003492:	f7fc fec5 	bl	8000220 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4613      	mov	r3, r2
 800349c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a4:	d308      	bcc.n	80034b8 <UART_SetConfig+0x430>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ac:	d204      	bcs.n	80034b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a3a      	ldr	r2, [r7, #32]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	e0ce      	b.n	8003656 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034be:	e0ca      	b.n	8003656 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c8:	d166      	bne.n	8003598 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80034ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d827      	bhi.n	8003522 <UART_SetConfig+0x49a>
 80034d2:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <UART_SetConfig+0x450>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	08003505 	.word	0x08003505
 80034e0:	0800350d 	.word	0x0800350d
 80034e4:	08003523 	.word	0x08003523
 80034e8:	08003513 	.word	0x08003513
 80034ec:	08003523 	.word	0x08003523
 80034f0:	08003523 	.word	0x08003523
 80034f4:	08003523 	.word	0x08003523
 80034f8:	0800351b 	.word	0x0800351b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7fe fbd4 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8003500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003502:	e014      	b.n	800352e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003504:	f7fe fbe6 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8003508:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800350a:	e010      	b.n	800352e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800350c:	4b4e      	ldr	r3, [pc, #312]	@ (8003648 <UART_SetConfig+0x5c0>)
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003510:	e00d      	b.n	800352e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003512:	f7fe fb5b 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8003516:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003518:	e009      	b.n	800352e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003520:	e005      	b.n	800352e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800352c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8090 	beq.w	8003656 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	4a44      	ldr	r2, [pc, #272]	@ (800364c <UART_SetConfig+0x5c4>)
 800353c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003540:	461a      	mov	r2, r3
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	fbb3 f3f2 	udiv	r3, r3, r2
 8003548:	005a      	lsls	r2, r3, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	441a      	add	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	d916      	bls.n	8003590 <UART_SetConfig+0x508>
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d212      	bcs.n	8003590 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f023 030f 	bic.w	r3, r3, #15
 8003572:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	b29b      	uxth	r3, r3
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	b29a      	uxth	r2, r3
 8003580:	8bfb      	ldrh	r3, [r7, #30]
 8003582:	4313      	orrs	r3, r2
 8003584:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	8bfa      	ldrh	r2, [r7, #30]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e062      	b.n	8003656 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003596:	e05e      	b.n	8003656 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003598:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800359c:	2b08      	cmp	r3, #8
 800359e:	d828      	bhi.n	80035f2 <UART_SetConfig+0x56a>
 80035a0:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <UART_SetConfig+0x520>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035cd 	.word	0x080035cd
 80035ac:	080035d5 	.word	0x080035d5
 80035b0:	080035dd 	.word	0x080035dd
 80035b4:	080035f3 	.word	0x080035f3
 80035b8:	080035e3 	.word	0x080035e3
 80035bc:	080035f3 	.word	0x080035f3
 80035c0:	080035f3 	.word	0x080035f3
 80035c4:	080035f3 	.word	0x080035f3
 80035c8:	080035eb 	.word	0x080035eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035cc:	f7fe fb6c 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 80035d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035d2:	e014      	b.n	80035fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe fb7e 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 80035d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035da:	e010      	b.n	80035fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <UART_SetConfig+0x5c0>)
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035e0:	e00d      	b.n	80035fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e2:	f7fe faf3 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 80035e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035e8:	e009      	b.n	80035fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035f0:	e005      	b.n	80035fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035fc:	bf00      	nop
    }

    if (pclk != 0U)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d028      	beq.n	8003656 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	4a10      	ldr	r2, [pc, #64]	@ (800364c <UART_SetConfig+0x5c4>)
 800360a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800360e:	461a      	mov	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	fbb3 f2f2 	udiv	r2, r3, r2
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	441a      	add	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	d910      	bls.n	8003650 <UART_SetConfig+0x5c8>
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003634:	d20c      	bcs.n	8003650 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	b29a      	uxth	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	e009      	b.n	8003656 <UART_SetConfig+0x5ce>
 8003642:	bf00      	nop
 8003644:	40008000 	.word	0x40008000
 8003648:	00f42400 	.word	0x00f42400
 800364c:	08006bb0 	.word	0x08006bb0
      }
      else
      {
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2201      	movs	r2, #1
 800365a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2201      	movs	r2, #1
 8003662:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2200      	movs	r2, #0
 8003670:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003672:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003676:	4618      	mov	r0, r3
 8003678:	3730      	adds	r7, #48	@ 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800377e:	d10a      	bne.n	8003796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b098      	sub	sp, #96	@ 0x60
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d4:	f7fd f98e 	bl	8000af4 <HAL_GetTick>
 80037d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d12f      	bne.n	8003848 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f88e 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d022      	beq.n	8003848 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003816:	653b      	str	r3, [r7, #80]	@ 0x50
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
 8003822:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800382e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e063      	b.n	8003910 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d149      	bne.n	80038ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003856:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385e:	2200      	movs	r2, #0
 8003860:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f857 	bl	8003918 <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03c      	beq.n	80038ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	623b      	str	r3, [r7, #32]
   return(result);
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800388e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003890:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e6      	bne.n	8003870 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038c2:	61fa      	str	r2, [r7, #28]
 80038c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	69b9      	ldr	r1, [r7, #24]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	617b      	str	r3, [r7, #20]
   return(result);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e012      	b.n	8003910 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3758      	adds	r7, #88	@ 0x58
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003928:	e04f      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003930:	d04b      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fd f8df 	bl	8000af4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <UART_WaitOnFlagUntilTimeout+0x30>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e04e      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d037      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b80      	cmp	r3, #128	@ 0x80
 800395e:	d034      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b40      	cmp	r3, #64	@ 0x40
 8003964:	d031      	beq.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d110      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2208      	movs	r2, #8
 800397a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f838 	bl	80039f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2208      	movs	r2, #8
 8003986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e029      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a4:	d111      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f81e 	bl	80039f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e00f      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4013      	ands	r3, r2
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d0a0      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b095      	sub	sp, #84	@ 0x54
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e3      	bne.n	8003a2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d118      	bne.n	8003a9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f023 0310 	bic.w	r3, r3, #16
 8003a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6979      	ldr	r1, [r7, #20]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	613b      	str	r3, [r7, #16]
   return(result);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e6      	bne.n	8003a6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003ab2:	bf00      	nop
 8003ab4:	3754      	adds	r7, #84	@ 0x54
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fac1 	bl	800305c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b088      	sub	sp, #32
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	613b      	str	r3, [r7, #16]
   return(result);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fa8c 	bl	8003048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e027      	b.n	8003bda <HAL_UARTEx_DisableFifoMode+0x66>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	@ 0x24
 8003b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e02d      	b.n	8003c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2224      	movs	r2, #36	@ 0x24
 8003c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f850 	bl	8003ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e02d      	b.n	8003cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	@ 0x24
 8003c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f812 	bl	8003ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d108      	bne.n	8003d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d00:	e031      	b.n	8003d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d02:	2308      	movs	r3, #8
 8003d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d06:	2308      	movs	r3, #8
 8003d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	0e5b      	lsrs	r3, r3, #25
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	0f5b      	lsrs	r3, r3, #29
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d2a:	7bbb      	ldrb	r3, [r7, #14]
 8003d2c:	7b3a      	ldrb	r2, [r7, #12]
 8003d2e:	4911      	ldr	r1, [pc, #68]	@ (8003d74 <UARTEx_SetNbDataToProcess+0x94>)
 8003d30:	5c8a      	ldrb	r2, [r1, r2]
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d36:	7b3a      	ldrb	r2, [r7, #12]
 8003d38:	490f      	ldr	r1, [pc, #60]	@ (8003d78 <UARTEx_SetNbDataToProcess+0x98>)
 8003d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	7b7a      	ldrb	r2, [r7, #13]
 8003d4c:	4909      	ldr	r1, [pc, #36]	@ (8003d74 <UARTEx_SetNbDataToProcess+0x94>)
 8003d4e:	5c8a      	ldrb	r2, [r1, r2]
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d54:	7b7a      	ldrb	r2, [r7, #13]
 8003d56:	4908      	ldr	r1, [pc, #32]	@ (8003d78 <UARTEx_SetNbDataToProcess+0x98>)
 8003d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	08006bc8 	.word	0x08006bc8
 8003d78:	08006bd0 	.word	0x08006bd0

08003d7c <__NVIC_SetPriority>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	6039      	str	r1, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	db0a      	blt.n	8003da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	490c      	ldr	r1, [pc, #48]	@ (8003dc8 <__NVIC_SetPriority+0x4c>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003da4:	e00a      	b.n	8003dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4908      	ldr	r1, [pc, #32]	@ (8003dcc <__NVIC_SetPriority+0x50>)
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3b04      	subs	r3, #4
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	440b      	add	r3, r1
 8003dba:	761a      	strb	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000e100 	.word	0xe000e100
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <SysTick_Handler+0x1c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003dd8:	f001 fd46 	bl	8005868 <xTaskGetSchedulerState>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003de2:	f002 fb41 	bl	8006468 <xPortSysTickHandler>
  }
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003df4:	2100      	movs	r1, #0
 8003df6:	f06f 0004 	mvn.w	r0, #4
 8003dfa:	f7ff ffbf 	bl	8003d7c <__NVIC_SetPriority>
#endif
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e0a:	f3ef 8305 	mrs	r3, IPSR
 8003e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e16:	f06f 0305 	mvn.w	r3, #5
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	e00c      	b.n	8003e38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <osKernelInitialize+0x44>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <osKernelInitialize+0x44>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	e002      	b.n	8003e38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000164 	.word	0x20000164

08003e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e52:	f3ef 8305 	mrs	r3, IPSR
 8003e56:	603b      	str	r3, [r7, #0]
  return(result);
 8003e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e5e:	f06f 0305 	mvn.w	r3, #5
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	e010      	b.n	8003e88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <osKernelStart+0x48>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d109      	bne.n	8003e82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e6e:	f7ff ffbf 	bl	8003df0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e72:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <osKernelStart+0x48>)
 8003e74:	2202      	movs	r2, #2
 8003e76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e78:	f001 f892 	bl	8004fa0 <vTaskStartScheduler>
      stat = osOK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	e002      	b.n	8003e88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e88:	687b      	ldr	r3, [r7, #4]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000164 	.word	0x20000164

08003e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	@ 0x38
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ea8:	f3ef 8305 	mrs	r3, IPSR
 8003eac:	617b      	str	r3, [r7, #20]
  return(result);
 8003eae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d17e      	bne.n	8003fb2 <osThreadNew+0x11a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d07b      	beq.n	8003fb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ebe:	2318      	movs	r3, #24
 8003ec0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003eca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d045      	beq.n	8003f5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <osThreadNew+0x48>
        name = attr->name;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <osThreadNew+0x6e>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b38      	cmp	r3, #56	@ 0x38
 8003ef8:	d805      	bhi.n	8003f06 <osThreadNew+0x6e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <osThreadNew+0x72>
        return (NULL);
 8003f06:	2300      	movs	r3, #0
 8003f08:	e054      	b.n	8003fb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <osThreadNew+0xa8>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2ba7      	cmp	r3, #167	@ 0xa7
 8003f28:	d90a      	bls.n	8003f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <osThreadNew+0xa8>
        mem = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e010      	b.n	8003f62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10c      	bne.n	8003f62 <osThreadNew+0xca>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d108      	bne.n	8003f62 <osThreadNew+0xca>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d104      	bne.n	8003f62 <osThreadNew+0xca>
          mem = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e001      	b.n	8003f62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d110      	bne.n	8003f8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f70:	9202      	str	r2, [sp, #8]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fe1a 	bl	8004bb8 <xTaskCreateStatic>
 8003f84:	4603      	mov	r3, r0
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e013      	b.n	8003fb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d110      	bne.n	8003fb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fe68 	bl	8004c78 <xTaskCreate>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <osThreadNew+0x11a>
            hTask = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fb2:	693b      	ldr	r3, [r7, #16]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3728      	adds	r7, #40	@ 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc4:	f3ef 8305 	mrs	r3, IPSR
 8003fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <osDelay+0x1c>
    stat = osErrorISR;
 8003fd0:	f06f 0305 	mvn.w	r3, #5
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e007      	b.n	8003fe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 ffa6 	bl	8004f34 <vTaskDelay>
    }
  }

  return (stat);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a07      	ldr	r2, [pc, #28]	@ (8004020 <vApplicationGetIdleTaskMemory+0x2c>)
 8004004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a06      	ldr	r2, [pc, #24]	@ (8004024 <vApplicationGetIdleTaskMemory+0x30>)
 800400a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2280      	movs	r2, #128	@ 0x80
 8004010:	601a      	str	r2, [r3, #0]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000168 	.word	0x20000168
 8004024:	20000210 	.word	0x20000210

08004028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a07      	ldr	r2, [pc, #28]	@ (8004054 <vApplicationGetTimerTaskMemory+0x2c>)
 8004038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a06      	ldr	r2, [pc, #24]	@ (8004058 <vApplicationGetTimerTaskMemory+0x30>)
 800403e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004046:	601a      	str	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20000410 	.word	0x20000410
 8004058:	200004b8 	.word	0x200004b8

0800405c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f103 0208 	add.w	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f103 0208 	add.w	r2, r3, #8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f103 0208 	add.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004114:	d103      	bne.n	800411e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e00c      	b.n	8004138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3308      	adds	r3, #8
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e002      	b.n	800412c <vListInsert+0x2e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d2f6      	bcs.n	8004126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6852      	ldr	r2, [r2, #4]
 8004190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d103      	bne.n	80041a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1e5a      	subs	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041f0:	f002 f8aa 	bl	8006348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	68f9      	ldr	r1, [r7, #12]
 80041fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	441a      	add	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	3b01      	subs	r3, #1
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	22ff      	movs	r2, #255	@ 0xff
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	22ff      	movs	r2, #255	@ 0xff
 800423c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d114      	bne.n	8004270 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01a      	beq.n	8004284 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3310      	adds	r3, #16
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f942 	bl	80054dc <xTaskRemoveFromEventList>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d012      	beq.n	8004284 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <xQueueGenericReset+0xd0>)
 8004260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	e009      	b.n	8004284 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3310      	adds	r3, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fef1 	bl	800405c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3324      	adds	r3, #36	@ 0x24
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff feec 	bl	800405c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004284:	f002 f892 	bl	80063ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004288:	2301      	movs	r3, #1
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08e      	sub	sp, #56	@ 0x38
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <xQueueGenericCreateStatic+0x56>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <xQueueGenericCreateStatic+0x5a>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <xQueueGenericCreateStatic+0x5c>
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	623b      	str	r3, [r7, #32]
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <xQueueGenericCreateStatic+0x84>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <xQueueGenericCreateStatic+0x88>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <xQueueGenericCreateStatic+0x8a>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61fb      	str	r3, [r7, #28]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800433e:	2350      	movs	r3, #80	@ 0x50
 8004340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b50      	cmp	r3, #80	@ 0x50
 8004346:	d00b      	beq.n	8004360 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	61bb      	str	r3, [r7, #24]
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004360:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004374:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f805 	bl	8004392 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800438a:	4618      	mov	r0, r3
 800438c:	3730      	adds	r7, #48	@ 0x30
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e002      	b.n	80043b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043c0:	2101      	movs	r1, #1
 80043c2:	69b8      	ldr	r0, [r7, #24]
 80043c4:	f7ff fefe 	bl	80041c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08e      	sub	sp, #56	@ 0x38
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xQueueGenericSend+0x34>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d103      	bne.n	800441a <xQueueGenericSend+0x42>
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <xQueueGenericSend+0x46>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericSend+0x48>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <xQueueGenericSend+0x64>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d103      	bne.n	800444a <xQueueGenericSend+0x72>
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <xQueueGenericSend+0x76>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSend+0x78>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <xQueueGenericSend+0x94>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	623b      	str	r3, [r7, #32]
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	e7fd      	b.n	8004468 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800446c:	f001 f9fc 	bl	8005868 <xTaskGetSchedulerState>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <xQueueGenericSend+0xa4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <xQueueGenericSend+0xa8>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <xQueueGenericSend+0xaa>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <xQueueGenericSend+0xc6>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	61fb      	str	r3, [r7, #28]
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	e7fd      	b.n	800449a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800449e:	f001 ff53 	bl	8006348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <xQueueGenericSend+0xdc>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d129      	bne.n	8004508 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044ba:	f000 fa0f 	bl	80048dc <prvCopyDataToQueue>
 80044be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d010      	beq.n	80044ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ca:	3324      	adds	r3, #36	@ 0x24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f001 f805 	bl	80054dc <xTaskRemoveFromEventList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d013      	beq.n	8004500 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044d8:	4b3f      	ldr	r3, [pc, #252]	@ (80045d8 <xQueueGenericSend+0x200>)
 80044da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	e00a      	b.n	8004500 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044f0:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <xQueueGenericSend+0x200>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004500:	f001 ff54 	bl	80063ac <vPortExitCritical>
				return pdPASS;
 8004504:	2301      	movs	r3, #1
 8004506:	e063      	b.n	80045d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800450e:	f001 ff4d 	bl	80063ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004512:	2300      	movs	r3, #0
 8004514:	e05c      	b.n	80045d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d106      	bne.n	800452a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	4618      	mov	r0, r3
 8004522:	f001 f83f 	bl	80055a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004526:	2301      	movs	r3, #1
 8004528:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800452a:	f001 ff3f 	bl	80063ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800452e:	f000 fda7 	bl	8005080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004532:	f001 ff09 	bl	8006348 <vPortEnterCritical>
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800453c:	b25b      	sxtb	r3, r3
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004542:	d103      	bne.n	800454c <xQueueGenericSend+0x174>
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004552:	b25b      	sxtb	r3, r3
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004558:	d103      	bne.n	8004562 <xQueueGenericSend+0x18a>
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004562:	f001 ff23 	bl	80063ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004566:	1d3a      	adds	r2, r7, #4
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f001 f82e 	bl	80055d0 <xTaskCheckForTimeOut>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d124      	bne.n	80045c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800457a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800457c:	f000 faa6 	bl	8004acc <prvIsQueueFull>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	3310      	adds	r3, #16
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f000 ff52 	bl	8005438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004596:	f000 fa31 	bl	80049fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800459a:	f000 fd7f 	bl	800509c <xTaskResumeAll>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f47f af7c 	bne.w	800449e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80045a6:	4b0c      	ldr	r3, [pc, #48]	@ (80045d8 <xQueueGenericSend+0x200>)
 80045a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	e772      	b.n	800449e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ba:	f000 fa1f 	bl	80049fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045be:	f000 fd6d 	bl	800509c <xTaskResumeAll>
 80045c2:	e76c      	b.n	800449e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045c6:	f000 fa19 	bl	80049fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ca:	f000 fd67 	bl	800509c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3738      	adds	r7, #56	@ 0x38
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	e000ed04 	.word	0xe000ed04

080045dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b090      	sub	sp, #64	@ 0x40
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueGenericSendFromISR+0x3e>
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xQueueGenericSendFromISR+0x42>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericSendFromISR+0x44>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d103      	bne.n	800464a <xQueueGenericSendFromISR+0x6e>
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <xQueueGenericSendFromISR+0x72>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <xQueueGenericSendFromISR+0x74>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	623b      	str	r3, [r7, #32]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800466c:	f001 ff4c 	bl	8006508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004670:	f3ef 8211 	mrs	r2, BASEPRI
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004688:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800468a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	429a      	cmp	r2, r3
 8004696:	d302      	bcc.n	800469e <xQueueGenericSendFromISR+0xc2>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d12f      	bne.n	80046fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80046b4:	f000 f912 	bl	80048dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046c0:	d112      	bne.n	80046e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d016      	beq.n	80046f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	3324      	adds	r3, #36	@ 0x24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ff04 	bl	80054dc <xTaskRemoveFromEventList>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00e      	beq.n	80046f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e007      	b.n	80046f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80046ec:	3301      	adds	r3, #1
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	b25a      	sxtb	r2, r3
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80046f8:	2301      	movs	r3, #1
 80046fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80046fc:	e001      	b.n	8004702 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004704:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800470c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004710:	4618      	mov	r0, r3
 8004712:	3740      	adds	r7, #64	@ 0x40
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	@ 0x30
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <xQueueReceive+0x32>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	623b      	str	r3, [r7, #32]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <xQueueReceive+0x40>
 8004750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <xQueueReceive+0x44>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <xQueueReceive+0x46>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <xQueueReceive+0x62>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	61fb      	str	r3, [r7, #28]
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800477a:	f001 f875 	bl	8005868 <xTaskGetSchedulerState>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <xQueueReceive+0x72>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <xQueueReceive+0x76>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <xQueueReceive+0x78>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <xQueueReceive+0x94>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	61bb      	str	r3, [r7, #24]
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ac:	f001 fdcc 	bl	8006348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047c0:	f000 f8f6 	bl	80049b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	3310      	adds	r3, #16
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fe7f 	bl	80054dc <xTaskRemoveFromEventList>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047e4:	4b3c      	ldr	r3, [pc, #240]	@ (80048d8 <xQueueReceive+0x1c0>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047f4:	f001 fdda 	bl	80063ac <vPortExitCritical>
				return pdPASS;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e069      	b.n	80048d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004802:	f001 fdd3 	bl	80063ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004806:	2300      	movs	r3, #0
 8004808:	e062      	b.n	80048d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fec5 	bl	80055a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800481e:	f001 fdc5 	bl	80063ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004822:	f000 fc2d 	bl	8005080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004826:	f001 fd8f 	bl	8006348 <vPortEnterCritical>
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004830:	b25b      	sxtb	r3, r3
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004836:	d103      	bne.n	8004840 <xQueueReceive+0x128>
 8004838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004846:	b25b      	sxtb	r3, r3
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800484c:	d103      	bne.n	8004856 <xQueueReceive+0x13e>
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004856:	f001 fda9 	bl	80063ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800485a:	1d3a      	adds	r2, r7, #4
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 feb4 	bl	80055d0 <xTaskCheckForTimeOut>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d123      	bne.n	80048b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800486e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004870:	f000 f916 	bl	8004aa0 <prvIsQueueEmpty>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	3324      	adds	r3, #36	@ 0x24
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fdd8 	bl	8005438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800488a:	f000 f8b7 	bl	80049fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800488e:	f000 fc05 	bl	800509c <xTaskResumeAll>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d189      	bne.n	80047ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004898:	4b0f      	ldr	r3, [pc, #60]	@ (80048d8 <xQueueReceive+0x1c0>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	e780      	b.n	80047ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ac:	f000 f8a6 	bl	80049fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b0:	f000 fbf4 	bl	800509c <xTaskResumeAll>
 80048b4:	e77a      	b.n	80047ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b8:	f000 f8a0 	bl	80049fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048bc:	f000 fbee 	bl	800509c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048c2:	f000 f8ed 	bl	8004aa0 <prvIsQueueEmpty>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f43f af6f 	beq.w	80047ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3730      	adds	r7, #48	@ 0x30
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d14d      	bne.n	800499e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 ffcc 	bl	80058a4 <xTaskPriorityDisinherit>
 800490c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	e043      	b.n	800499e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d119      	bne.n	8004950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6858      	ldr	r0, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	461a      	mov	r2, r3
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	f002 f8a2 	bl	8006a70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	441a      	add	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	d32b      	bcc.n	800499e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	e026      	b.n	800499e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68d8      	ldr	r0, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	461a      	mov	r2, r3
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	f002 f888 	bl	8006a70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	425b      	negs	r3, r3
 800496a:	441a      	add	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d207      	bcs.n	800498c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	425b      	negs	r3, r3
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d105      	bne.n	800499e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3b01      	subs	r3, #1
 800499c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80049a6:	697b      	ldr	r3, [r7, #20]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d303      	bcc.n	80049e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68d9      	ldr	r1, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	461a      	mov	r2, r3
 80049ee:	6838      	ldr	r0, [r7, #0]
 80049f0:	f002 f83e 	bl	8006a70 <memcpy>
	}
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a04:	f001 fca0 	bl	8006348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a10:	e011      	b.n	8004a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3324      	adds	r3, #36	@ 0x24
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fd5c 	bl	80054dc <xTaskRemoveFromEventList>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a2a:	f000 fe35 	bl	8005698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dce9      	bgt.n	8004a12 <prvUnlockQueue+0x16>
 8004a3e:	e000      	b.n	8004a42 <prvUnlockQueue+0x46>
					break;
 8004a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	22ff      	movs	r2, #255	@ 0xff
 8004a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a4a:	f001 fcaf 	bl	80063ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a4e:	f001 fc7b 	bl	8006348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a5a:	e011      	b.n	8004a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3310      	adds	r3, #16
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fd37 	bl	80054dc <xTaskRemoveFromEventList>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a74:	f000 fe10 	bl	8005698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dce9      	bgt.n	8004a5c <prvUnlockQueue+0x60>
 8004a88:	e000      	b.n	8004a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	22ff      	movs	r2, #255	@ 0xff
 8004a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a94:	f001 fc8a 	bl	80063ac <vPortExitCritical>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa8:	f001 fc4e 	bl	8006348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e001      	b.n	8004abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004abe:	f001 fc75 	bl	80063ac <vPortExitCritical>

	return xReturn;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ad4:	f001 fc38 	bl	8006348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d102      	bne.n	8004aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e001      	b.n	8004aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aee:	f001 fc5d 	bl	80063ac <vPortExitCritical>

	return xReturn;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e014      	b.n	8004b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004b4c <vQueueAddToRegistry+0x50>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10b      	bne.n	8004b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b18:	490c      	ldr	r1, [pc, #48]	@ (8004b4c <vQueueAddToRegistry+0x50>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b22:	4a0a      	ldr	r2, [pc, #40]	@ (8004b4c <vQueueAddToRegistry+0x50>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b2e:	e006      	b.n	8004b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b07      	cmp	r3, #7
 8004b3a:	d9e7      	bls.n	8004b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	200008b8 	.word	0x200008b8

08004b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b60:	f001 fbf2 	bl	8006348 <vPortEnterCritical>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b70:	d103      	bne.n	8004b7a <vQueueWaitForMessageRestricted+0x2a>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b86:	d103      	bne.n	8004b90 <vQueueWaitForMessageRestricted+0x40>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b90:	f001 fc0c 	bl	80063ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	3324      	adds	r3, #36	@ 0x24
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fc6d 	bl	8005484 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f7ff ff26 	bl	80049fc <prvUnlockQueue>
	}
 8004bb0:	bf00      	nop
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	@ 0x38
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10b      	bne.n	8004c02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	61fb      	str	r3, [r7, #28]
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	e7fd      	b.n	8004bfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c02:	23a8      	movs	r3, #168	@ 0xa8
 8004c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c0a:	d00b      	beq.n	8004c24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	61bb      	str	r3, [r7, #24]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01e      	beq.n	8004c6a <xTaskCreateStatic+0xb2>
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c44:	2300      	movs	r3, #0
 8004c46:	9303      	str	r3, [sp, #12]
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	9302      	str	r3, [sp, #8]
 8004c4c:	f107 0314 	add.w	r3, r7, #20
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f851 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c64:	f000 f8f6 	bl	8004e54 <prvAddNewTaskToReadyList>
 8004c68:	e001      	b.n	8004c6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c6e:	697b      	ldr	r3, [r7, #20]
	}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	@ 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	@ 0x30
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fc7d 	bl	800658c <pvPortMalloc>
 8004c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c9a:	20a8      	movs	r0, #168	@ 0xa8
 8004c9c:	f001 fc76 	bl	800658c <pvPortMalloc>
 8004ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cae:	e005      	b.n	8004cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cb0:	6978      	ldr	r0, [r7, #20]
 8004cb2:	f001 fd39 	bl	8006728 <vPortFree>
 8004cb6:	e001      	b.n	8004cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d017      	beq.n	8004cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	9302      	str	r3, [sp, #8]
 8004cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f80f 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce6:	69f8      	ldr	r0, [r7, #28]
 8004ce8:	f000 f8b4 	bl	8004e54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cec:	2301      	movs	r3, #1
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e002      	b.n	8004cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	21a5      	movs	r1, #165	@ 0xa5
 8004d1e:	f001 fe23 	bl	8006968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	617b      	str	r3, [r7, #20]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01f      	beq.n	8004da4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e012      	b.n	8004d90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	7819      	ldrb	r1, [r3, #0]
 8004d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	3334      	adds	r3, #52	@ 0x34
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b0f      	cmp	r3, #15
 8004d94:	d9e9      	bls.n	8004d6a <prvInitialiseNewTask+0x66>
 8004d96:	e000      	b.n	8004d9a <prvInitialiseNewTask+0x96>
			{
				break;
 8004d98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004da2:	e003      	b.n	8004dac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	2b37      	cmp	r3, #55	@ 0x37
 8004db0:	d901      	bls.n	8004db6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004db2:	2337      	movs	r3, #55	@ 0x37
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff f965 	bl	800409c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff f960 	bl	800409c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	3354      	adds	r3, #84	@ 0x54
 8004e06:	224c      	movs	r2, #76	@ 0x4c
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fdac 	bl	8006968 <memset>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	4a0d      	ldr	r2, [pc, #52]	@ (8004e48 <prvInitialiseNewTask+0x144>)
 8004e14:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	4a0c      	ldr	r2, [pc, #48]	@ (8004e4c <prvInitialiseNewTask+0x148>)
 8004e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e50 <prvInitialiseNewTask+0x14c>)
 8004e20:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	68f9      	ldr	r1, [r7, #12]
 8004e26:	69b8      	ldr	r0, [r7, #24]
 8004e28:	f001 f95a 	bl	80060e0 <pxPortInitialiseStack>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e3e:	bf00      	nop
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20005d6c 	.word	0x20005d6c
 8004e4c:	20005dd4 	.word	0x20005dd4
 8004e50:	20005e3c 	.word	0x20005e3c

08004e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e5c:	f001 fa74 	bl	8006348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e60:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <prvAddNewTaskToReadyList+0xc4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3301      	adds	r3, #1
 8004e66:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <prvAddNewTaskToReadyList+0xc4>)
 8004e68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e72:	4a2a      	ldr	r2, [pc, #168]	@ (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e78:	4b27      	ldr	r3, [pc, #156]	@ (8004f18 <prvAddNewTaskToReadyList+0xc4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d110      	bne.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e80:	f000 fc2e 	bl	80056e0 <prvInitialiseTaskLists>
 8004e84:	e00d      	b.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e86:	4b26      	ldr	r3, [pc, #152]	@ (8004f20 <prvAddNewTaskToReadyList+0xcc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e8e:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d802      	bhi.n	8004ea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <prvAddNewTaskToReadyList+0xd0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <prvAddNewTaskToReadyList+0xd0>)
 8004eaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <prvAddNewTaskToReadyList+0xd0>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f28 <prvAddNewTaskToReadyList+0xd4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d903      	bls.n	8004ec8 <prvAddNewTaskToReadyList+0x74>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4a18      	ldr	r2, [pc, #96]	@ (8004f28 <prvAddNewTaskToReadyList+0xd4>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <prvAddNewTaskToReadyList+0xd8>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7ff f8e9 	bl	80040b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ee4:	f001 fa62 	bl	80063ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f20 <prvAddNewTaskToReadyList+0xcc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <prvAddNewTaskToReadyList+0xc8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d207      	bcs.n	8004f0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004efe:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <prvAddNewTaskToReadyList+0xdc>)
 8004f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000dcc 	.word	0x20000dcc
 8004f1c:	200008f8 	.word	0x200008f8
 8004f20:	20000dd8 	.word	0x20000dd8
 8004f24:	20000de8 	.word	0x20000de8
 8004f28:	20000dd4 	.word	0x20000dd4
 8004f2c:	200008fc 	.word	0x200008fc
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d018      	beq.n	8004f78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f46:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <vTaskDelay+0x64>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <vTaskDelay+0x32>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	60bb      	str	r3, [r7, #8]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f66:	f000 f88b 	bl	8005080 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fd09 	bl	8005984 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f72:	f000 f893 	bl	800509c <xTaskResumeAll>
 8004f76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f7e:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <vTaskDelay+0x68>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000df4 	.word	0x20000df4
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	@ 0x28
 8004fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fae:	463a      	mov	r2, r7
 8004fb0:	1d39      	adds	r1, r7, #4
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff f81c 	bl	8003ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fbc:	6839      	ldr	r1, [r7, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	9202      	str	r2, [sp, #8]
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	460a      	mov	r2, r1
 8004fce:	4924      	ldr	r1, [pc, #144]	@ (8005060 <vTaskStartScheduler+0xc0>)
 8004fd0:	4824      	ldr	r0, [pc, #144]	@ (8005064 <vTaskStartScheduler+0xc4>)
 8004fd2:	f7ff fdf1 	bl	8004bb8 <xTaskCreateStatic>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4a23      	ldr	r2, [pc, #140]	@ (8005068 <vTaskStartScheduler+0xc8>)
 8004fda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fdc:	4b22      	ldr	r3, [pc, #136]	@ (8005068 <vTaskStartScheduler+0xc8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e001      	b.n	8004fee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ff4:	f000 fd1a 	bl	8005a2c <xTimerCreateTimerTask>
 8004ff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d11b      	bne.n	8005038 <vTaskStartScheduler+0x98>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	613b      	str	r3, [r7, #16]
}
 8005012:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005014:	4b15      	ldr	r3, [pc, #84]	@ (800506c <vTaskStartScheduler+0xcc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3354      	adds	r3, #84	@ 0x54
 800501a:	4a15      	ldr	r2, [pc, #84]	@ (8005070 <vTaskStartScheduler+0xd0>)
 800501c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <vTaskStartScheduler+0xd4>)
 8005020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005024:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <vTaskStartScheduler+0xd8>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800502c:	4b13      	ldr	r3, [pc, #76]	@ (800507c <vTaskStartScheduler+0xdc>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005032:	f001 f8e5 	bl	8006200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005036:	e00f      	b.n	8005058 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503e:	d10b      	bne.n	8005058 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <vTaskStartScheduler+0xb4>
}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	08006b5c 	.word	0x08006b5c
 8005064:	080056b1 	.word	0x080056b1
 8005068:	20000df0 	.word	0x20000df0
 800506c:	200008f8 	.word	0x200008f8
 8005070:	20000010 	.word	0x20000010
 8005074:	20000dec 	.word	0x20000dec
 8005078:	20000dd8 	.word	0x20000dd8
 800507c:	20000dd0 	.word	0x20000dd0

08005080 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005084:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <vTaskSuspendAll+0x18>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	4a03      	ldr	r2, [pc, #12]	@ (8005098 <vTaskSuspendAll+0x18>)
 800508c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800508e:	bf00      	nop
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20000df4 	.word	0x20000df4

0800509c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050aa:	4b42      	ldr	r3, [pc, #264]	@ (80051b4 <xTaskResumeAll+0x118>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <xTaskResumeAll+0x2e>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	603b      	str	r3, [r7, #0]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050ca:	f001 f93d 	bl	8006348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050ce:	4b39      	ldr	r3, [pc, #228]	@ (80051b4 <xTaskResumeAll+0x118>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	4a37      	ldr	r2, [pc, #220]	@ (80051b4 <xTaskResumeAll+0x118>)
 80050d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d8:	4b36      	ldr	r3, [pc, #216]	@ (80051b4 <xTaskResumeAll+0x118>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d162      	bne.n	80051a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050e0:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <xTaskResumeAll+0x11c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d05e      	beq.n	80051a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050e8:	e02f      	b.n	800514a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ea:	4b34      	ldr	r3, [pc, #208]	@ (80051bc <xTaskResumeAll+0x120>)
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3318      	adds	r3, #24
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff f83a 	bl	8004170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3304      	adds	r3, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f835 	bl	8004170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <xTaskResumeAll+0x124>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d903      	bls.n	800511a <xTaskResumeAll+0x7e>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <xTaskResumeAll+0x124>)
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4a27      	ldr	r2, [pc, #156]	@ (80051c4 <xTaskResumeAll+0x128>)
 8005128:	441a      	add	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fe ffc0 	bl	80040b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513a:	4b23      	ldr	r3, [pc, #140]	@ (80051c8 <xTaskResumeAll+0x12c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005144:	4b21      	ldr	r3, [pc, #132]	@ (80051cc <xTaskResumeAll+0x130>)
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800514a:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <xTaskResumeAll+0x120>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1cb      	bne.n	80050ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005158:	f000 fb66 	bl	8005828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800515c:	4b1c      	ldr	r3, [pc, #112]	@ (80051d0 <xTaskResumeAll+0x134>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005168:	f000 f846 	bl	80051f8 <xTaskIncrementTick>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005172:	4b16      	ldr	r3, [pc, #88]	@ (80051cc <xTaskResumeAll+0x130>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3b01      	subs	r3, #1
 800517c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f1      	bne.n	8005168 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005184:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <xTaskResumeAll+0x134>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800518a:	4b10      	ldr	r3, [pc, #64]	@ (80051cc <xTaskResumeAll+0x130>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005196:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <xTaskResumeAll+0x138>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f001 f901 	bl	80063ac <vPortExitCritical>

	return xAlreadyYielded;
 80051aa:	68bb      	ldr	r3, [r7, #8]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000df4 	.word	0x20000df4
 80051b8:	20000dcc 	.word	0x20000dcc
 80051bc:	20000d8c 	.word	0x20000d8c
 80051c0:	20000dd4 	.word	0x20000dd4
 80051c4:	200008fc 	.word	0x200008fc
 80051c8:	200008f8 	.word	0x200008f8
 80051cc:	20000de0 	.word	0x20000de0
 80051d0:	20000ddc 	.word	0x20000ddc
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80051de:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <xTaskGetTickCount+0x1c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051e4:	687b      	ldr	r3, [r7, #4]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000dd0 	.word	0x20000dd0

080051f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005202:	4b4f      	ldr	r3, [pc, #316]	@ (8005340 <xTaskIncrementTick+0x148>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 8090 	bne.w	800532c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800520c:	4b4d      	ldr	r3, [pc, #308]	@ (8005344 <xTaskIncrementTick+0x14c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005214:	4a4b      	ldr	r2, [pc, #300]	@ (8005344 <xTaskIncrementTick+0x14c>)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d121      	bne.n	8005264 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005220:	4b49      	ldr	r3, [pc, #292]	@ (8005348 <xTaskIncrementTick+0x150>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <xTaskIncrementTick+0x4a>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	603b      	str	r3, [r7, #0]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <xTaskIncrementTick+0x46>
 8005242:	4b41      	ldr	r3, [pc, #260]	@ (8005348 <xTaskIncrementTick+0x150>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	4b40      	ldr	r3, [pc, #256]	@ (800534c <xTaskIncrementTick+0x154>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3e      	ldr	r2, [pc, #248]	@ (8005348 <xTaskIncrementTick+0x150>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4a3e      	ldr	r2, [pc, #248]	@ (800534c <xTaskIncrementTick+0x154>)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <xTaskIncrementTick+0x158>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	4a3c      	ldr	r2, [pc, #240]	@ (8005350 <xTaskIncrementTick+0x158>)
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	f000 fae2 	bl	8005828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005264:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <xTaskIncrementTick+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	429a      	cmp	r2, r3
 800526c:	d349      	bcc.n	8005302 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800526e:	4b36      	ldr	r3, [pc, #216]	@ (8005348 <xTaskIncrementTick+0x150>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <xTaskIncrementTick+0x15c>)
 800527a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800527e:	601a      	str	r2, [r3, #0]
					break;
 8005280:	e03f      	b.n	8005302 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <xTaskIncrementTick+0x150>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d203      	bcs.n	80052a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800529a:	4a2e      	ldr	r2, [pc, #184]	@ (8005354 <xTaskIncrementTick+0x15c>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052a0:	e02f      	b.n	8005302 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	3304      	adds	r3, #4
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe ff62 	bl	8004170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3318      	adds	r3, #24
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fe ff59 	bl	8004170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c2:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <xTaskIncrementTick+0x160>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d903      	bls.n	80052d2 <xTaskIncrementTick+0xda>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	4a22      	ldr	r2, [pc, #136]	@ (8005358 <xTaskIncrementTick+0x160>)
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <xTaskIncrementTick+0x164>)
 80052e0:	441a      	add	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe fee4 	bl	80040b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005360 <xTaskIncrementTick+0x168>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3b8      	bcc.n	800526e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005300:	e7b5      	b.n	800526e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005302:	4b17      	ldr	r3, [pc, #92]	@ (8005360 <xTaskIncrementTick+0x168>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005308:	4914      	ldr	r1, [pc, #80]	@ (800535c <xTaskIncrementTick+0x164>)
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d901      	bls.n	800531e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800531a:	2301      	movs	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800531e:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <xTaskIncrementTick+0x16c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e004      	b.n	8005336 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800532c:	4b0e      	ldr	r3, [pc, #56]	@ (8005368 <xTaskIncrementTick+0x170>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	4a0d      	ldr	r2, [pc, #52]	@ (8005368 <xTaskIncrementTick+0x170>)
 8005334:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005336:	697b      	ldr	r3, [r7, #20]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000df4 	.word	0x20000df4
 8005344:	20000dd0 	.word	0x20000dd0
 8005348:	20000d84 	.word	0x20000d84
 800534c:	20000d88 	.word	0x20000d88
 8005350:	20000de4 	.word	0x20000de4
 8005354:	20000dec 	.word	0x20000dec
 8005358:	20000dd4 	.word	0x20000dd4
 800535c:	200008fc 	.word	0x200008fc
 8005360:	200008f8 	.word	0x200008f8
 8005364:	20000de0 	.word	0x20000de0
 8005368:	20000ddc 	.word	0x20000ddc

0800536c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005372:	4b2b      	ldr	r3, [pc, #172]	@ (8005420 <vTaskSwitchContext+0xb4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800537a:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <vTaskSwitchContext+0xb8>)
 800537c:	2201      	movs	r2, #1
 800537e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005380:	e047      	b.n	8005412 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005382:	4b28      	ldr	r3, [pc, #160]	@ (8005424 <vTaskSwitchContext+0xb8>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005388:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <vTaskSwitchContext+0xbc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e011      	b.n	80053b4 <vTaskSwitchContext+0x48>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <vTaskSwitchContext+0x42>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	607b      	str	r3, [r7, #4]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <vTaskSwitchContext+0x3e>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	491d      	ldr	r1, [pc, #116]	@ (800542c <vTaskSwitchContext+0xc0>)
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0e3      	beq.n	8005390 <vTaskSwitchContext+0x24>
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4a16      	ldr	r2, [pc, #88]	@ (800542c <vTaskSwitchContext+0xc0>)
 80053d4:	4413      	add	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	3308      	adds	r3, #8
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d104      	bne.n	80053f8 <vTaskSwitchContext+0x8c>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005430 <vTaskSwitchContext+0xc4>)
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <vTaskSwitchContext+0xbc>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005408:	4b09      	ldr	r3, [pc, #36]	@ (8005430 <vTaskSwitchContext+0xc4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3354      	adds	r3, #84	@ 0x54
 800540e:	4a09      	ldr	r2, [pc, #36]	@ (8005434 <vTaskSwitchContext+0xc8>)
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000df4 	.word	0x20000df4
 8005424:	20000de0 	.word	0x20000de0
 8005428:	20000dd4 	.word	0x20000dd4
 800542c:	200008fc 	.word	0x200008fc
 8005430:	200008f8 	.word	0x200008f8
 8005434:	20000010 	.word	0x20000010

08005438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60fb      	str	r3, [r7, #12]
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005460:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <vTaskPlaceOnEventList+0x48>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3318      	adds	r3, #24
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fe fe48 	bl	80040fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800546e:	2101      	movs	r1, #1
 8005470:	6838      	ldr	r0, [r7, #0]
 8005472:	f000 fa87 	bl	8005984 <prvAddCurrentTaskToDelayedList>
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200008f8 	.word	0x200008f8

08005484 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	617b      	str	r3, [r7, #20]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054ae:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3318      	adds	r3, #24
 80054b4:	4619      	mov	r1, r3
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7fe fdfd 	bl	80040b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f000 fa5a 	bl	8005984 <prvAddCurrentTaskToDelayedList>
	}
 80054d0:	bf00      	nop
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	200008f8 	.word	0x200008f8

080054dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3318      	adds	r3, #24
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fe2e 	bl	8004170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005514:	4b1d      	ldr	r3, [pc, #116]	@ (800558c <xTaskRemoveFromEventList+0xb0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11d      	bne.n	8005558 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fe25 	bl	8004170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	4b19      	ldr	r3, [pc, #100]	@ (8005590 <xTaskRemoveFromEventList+0xb4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d903      	bls.n	800553a <xTaskRemoveFromEventList+0x5e>
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	4a16      	ldr	r2, [pc, #88]	@ (8005590 <xTaskRemoveFromEventList+0xb4>)
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a13      	ldr	r2, [pc, #76]	@ (8005594 <xTaskRemoveFromEventList+0xb8>)
 8005548:	441a      	add	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fe fdb0 	bl	80040b6 <vListInsertEnd>
 8005556:	e005      	b.n	8005564 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	3318      	adds	r3, #24
 800555c:	4619      	mov	r1, r3
 800555e:	480e      	ldr	r0, [pc, #56]	@ (8005598 <xTaskRemoveFromEventList+0xbc>)
 8005560:	f7fe fda9 	bl	80040b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <xTaskRemoveFromEventList+0xc0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	429a      	cmp	r2, r3
 8005570:	d905      	bls.n	800557e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005576:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <xTaskRemoveFromEventList+0xc4>)
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e001      	b.n	8005582 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005582:	697b      	ldr	r3, [r7, #20]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000df4 	.word	0x20000df4
 8005590:	20000dd4 	.word	0x20000dd4
 8005594:	200008fc 	.word	0x200008fc
 8005598:	20000d8c 	.word	0x20000d8c
 800559c:	200008f8 	.word	0x200008f8
 80055a0:	20000de0 	.word	0x20000de0

080055a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <vTaskInternalSetTimeOutState+0x24>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055b4:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <vTaskInternalSetTimeOutState+0x28>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000de4 	.word	0x20000de4
 80055cc:	20000dd0 	.word	0x20000dd0

080055d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	613b      	str	r3, [r7, #16]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60fb      	str	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005616:	f000 fe97 	bl	8006348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800561a:	4b1d      	ldr	r3, [pc, #116]	@ (8005690 <xTaskCheckForTimeOut+0xc0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005632:	d102      	bne.n	800563a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e023      	b.n	8005682 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b15      	ldr	r3, [pc, #84]	@ (8005694 <xTaskCheckForTimeOut+0xc4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d007      	beq.n	8005656 <xTaskCheckForTimeOut+0x86>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	e015      	b.n	8005682 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d20b      	bcs.n	8005678 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff ff99 	bl	80055a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	e004      	b.n	8005682 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800567e:	2301      	movs	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005682:	f000 fe93 	bl	80063ac <vPortExitCritical>

	return xReturn;
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000dd0 	.word	0x20000dd0
 8005694:	20000de4 	.word	0x20000de4

08005698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800569c:	4b03      	ldr	r3, [pc, #12]	@ (80056ac <vTaskMissedYield+0x14>)
 800569e:	2201      	movs	r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000de0 	.word	0x20000de0

080056b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056b8:	f000 f852 	bl	8005760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <prvIdleTask+0x28>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d9f9      	bls.n	80056b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056c4:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <prvIdleTask+0x2c>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056d4:	e7f0      	b.n	80056b8 <prvIdleTask+0x8>
 80056d6:	bf00      	nop
 80056d8:	200008fc 	.word	0x200008fc
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	e00c      	b.n	8005706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4a12      	ldr	r2, [pc, #72]	@ (8005740 <prvInitialiseTaskLists+0x60>)
 80056f8:	4413      	add	r3, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fcae 	bl	800405c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3301      	adds	r3, #1
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b37      	cmp	r3, #55	@ 0x37
 800570a:	d9ef      	bls.n	80056ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800570c:	480d      	ldr	r0, [pc, #52]	@ (8005744 <prvInitialiseTaskLists+0x64>)
 800570e:	f7fe fca5 	bl	800405c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005712:	480d      	ldr	r0, [pc, #52]	@ (8005748 <prvInitialiseTaskLists+0x68>)
 8005714:	f7fe fca2 	bl	800405c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005718:	480c      	ldr	r0, [pc, #48]	@ (800574c <prvInitialiseTaskLists+0x6c>)
 800571a:	f7fe fc9f 	bl	800405c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800571e:	480c      	ldr	r0, [pc, #48]	@ (8005750 <prvInitialiseTaskLists+0x70>)
 8005720:	f7fe fc9c 	bl	800405c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005724:	480b      	ldr	r0, [pc, #44]	@ (8005754 <prvInitialiseTaskLists+0x74>)
 8005726:	f7fe fc99 	bl	800405c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800572a:	4b0b      	ldr	r3, [pc, #44]	@ (8005758 <prvInitialiseTaskLists+0x78>)
 800572c:	4a05      	ldr	r2, [pc, #20]	@ (8005744 <prvInitialiseTaskLists+0x64>)
 800572e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005730:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <prvInitialiseTaskLists+0x7c>)
 8005732:	4a05      	ldr	r2, [pc, #20]	@ (8005748 <prvInitialiseTaskLists+0x68>)
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200008fc 	.word	0x200008fc
 8005744:	20000d5c 	.word	0x20000d5c
 8005748:	20000d70 	.word	0x20000d70
 800574c:	20000d8c 	.word	0x20000d8c
 8005750:	20000da0 	.word	0x20000da0
 8005754:	20000db8 	.word	0x20000db8
 8005758:	20000d84 	.word	0x20000d84
 800575c:	20000d88 	.word	0x20000d88

08005760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005766:	e019      	b.n	800579c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005768:	f000 fdee 	bl	8006348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576c:	4b10      	ldr	r3, [pc, #64]	@ (80057b0 <prvCheckTasksWaitingTermination+0x50>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fcf9 	bl	8004170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	4a0b      	ldr	r2, [pc, #44]	@ (80057b4 <prvCheckTasksWaitingTermination+0x54>)
 8005786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <prvCheckTasksWaitingTermination+0x58>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <prvCheckTasksWaitingTermination+0x58>)
 8005790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005792:	f000 fe0b 	bl	80063ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f810 	bl	80057bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800579c:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <prvCheckTasksWaitingTermination+0x58>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e1      	bne.n	8005768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000da0 	.word	0x20000da0
 80057b4:	20000dcc 	.word	0x20000dcc
 80057b8:	20000db4 	.word	0x20000db4

080057bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3354      	adds	r3, #84	@ 0x54
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f8d5 	bl	8006978 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 ffa3 	bl	8006728 <vPortFree>
				vPortFree( pxTCB );
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 ffa0 	bl	8006728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057e8:	e019      	b.n	800581e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d103      	bne.n	80057fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 ff97 	bl	8006728 <vPortFree>
	}
 80057fa:	e010      	b.n	800581e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005802:	2b02      	cmp	r3, #2
 8005804:	d00b      	beq.n	800581e <prvDeleteTCB+0x62>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	60fb      	str	r3, [r7, #12]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <prvDeleteTCB+0x5e>
	}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582e:	4b0c      	ldr	r3, [pc, #48]	@ (8005860 <prvResetNextTaskUnblockTime+0x38>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005838:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <prvResetNextTaskUnblockTime+0x3c>)
 800583a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800583e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005840:	e008      	b.n	8005854 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005842:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <prvResetNextTaskUnblockTime+0x38>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a04      	ldr	r2, [pc, #16]	@ (8005864 <prvResetNextTaskUnblockTime+0x3c>)
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000d84 	.word	0x20000d84
 8005864:	20000dec 	.word	0x20000dec

08005868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800586e:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <xTaskGetSchedulerState+0x34>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d102      	bne.n	800587c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005876:	2301      	movs	r3, #1
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	e008      	b.n	800588e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800587c:	4b08      	ldr	r3, [pc, #32]	@ (80058a0 <xTaskGetSchedulerState+0x38>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005884:	2302      	movs	r3, #2
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e001      	b.n	800588e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800588a:	2300      	movs	r3, #0
 800588c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800588e:	687b      	ldr	r3, [r7, #4]
	}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000dd8 	.word	0x20000dd8
 80058a0:	20000df4 	.word	0x20000df4

080058a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d058      	beq.n	800596c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005978 <xTaskPriorityDisinherit+0xd4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d00b      	beq.n	80058dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60fb      	str	r3, [r7, #12]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60bb      	str	r3, [r7, #8]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005900:	1e5a      	subs	r2, r3, #1
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800590e:	429a      	cmp	r2, r3
 8005910:	d02c      	beq.n	800596c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005916:	2b00      	cmp	r3, #0
 8005918:	d128      	bne.n	800596c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	3304      	adds	r3, #4
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fc26 	bl	8004170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593c:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <xTaskPriorityDisinherit+0xd8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d903      	bls.n	800594c <xTaskPriorityDisinherit+0xa8>
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	4a0c      	ldr	r2, [pc, #48]	@ (800597c <xTaskPriorityDisinherit+0xd8>)
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4a09      	ldr	r2, [pc, #36]	@ (8005980 <xTaskPriorityDisinherit+0xdc>)
 800595a:	441a      	add	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7fe fba7 	bl	80040b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800596c:	697b      	ldr	r3, [r7, #20]
	}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200008f8 	.word	0x200008f8
 800597c:	20000dd4 	.word	0x20000dd4
 8005980:	200008fc 	.word	0x200008fc

08005984 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800598e:	4b21      	ldr	r3, [pc, #132]	@ (8005a14 <prvAddCurrentTaskToDelayedList+0x90>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005994:	4b20      	ldr	r3, [pc, #128]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fbe8 	bl	8004170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a6:	d10a      	bne.n	80059be <prvAddCurrentTaskToDelayedList+0x3a>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4819      	ldr	r0, [pc, #100]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0x98>)
 80059b8:	f7fe fb7d 	bl	80040b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059bc:	e026      	b.n	8005a0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4413      	add	r3, r2
 80059c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059c6:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d209      	bcs.n	80059ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059d6:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b0f      	ldr	r3, [pc, #60]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe fb8b 	bl	80040fe <vListInsert>
}
 80059e8:	e010      	b.n	8005a0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f7fe fb81 	bl	80040fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d202      	bcs.n	8005a0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a06:	4a08      	ldr	r2, [pc, #32]	@ (8005a28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6013      	str	r3, [r2, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000dd0 	.word	0x20000dd0
 8005a18:	200008f8 	.word	0x200008f8
 8005a1c:	20000db8 	.word	0x20000db8
 8005a20:	20000d88 	.word	0x20000d88
 8005a24:	20000d84 	.word	0x20000d84
 8005a28:	20000dec 	.word	0x20000dec

08005a2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	@ 0x28
 8005a30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a36:	f000 fb13 	bl	8006060 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab0 <xTimerCreateTimerTask+0x84>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d021      	beq.n	8005a86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a4a:	1d3a      	adds	r2, r7, #4
 8005a4c:	f107 0108 	add.w	r1, r7, #8
 8005a50:	f107 030c 	add.w	r3, r7, #12
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fae7 	bl	8004028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	9202      	str	r2, [sp, #8]
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	2302      	movs	r3, #2
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	4911      	ldr	r1, [pc, #68]	@ (8005ab4 <xTimerCreateTimerTask+0x88>)
 8005a6e:	4812      	ldr	r0, [pc, #72]	@ (8005ab8 <xTimerCreateTimerTask+0x8c>)
 8005a70:	f7ff f8a2 	bl	8004bb8 <xTaskCreateStatic>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <xTimerCreateTimerTask+0x90>)
 8005a78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a7a:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <xTimerCreateTimerTask+0x90>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	613b      	str	r3, [r7, #16]
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	e7fd      	b.n	8005aa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005aa4:	697b      	ldr	r3, [r7, #20]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000e28 	.word	0x20000e28
 8005ab4:	08006b64 	.word	0x08006b64
 8005ab8:	08005bf9 	.word	0x08005bf9
 8005abc:	20000e2c 	.word	0x20000e2c

08005ac0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b08a      	sub	sp, #40	@ 0x28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	623b      	str	r3, [r7, #32]
}
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	e7fd      	b.n	8005aec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005af0:	4b19      	ldr	r3, [pc, #100]	@ (8005b58 <xTimerGenericCommand+0x98>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02a      	beq.n	8005b4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	dc18      	bgt.n	8005b3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b0a:	f7ff fead 	bl	8005868 <xTaskGetSchedulerState>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d109      	bne.n	8005b28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b14:	4b10      	ldr	r3, [pc, #64]	@ (8005b58 <xTimerGenericCommand+0x98>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	f107 0110 	add.w	r1, r7, #16
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b20:	f7fe fc5a 	bl	80043d8 <xQueueGenericSend>
 8005b24:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b26:	e012      	b.n	8005b4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b28:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <xTimerGenericCommand+0x98>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	f107 0110 	add.w	r1, r7, #16
 8005b30:	2300      	movs	r3, #0
 8005b32:	2200      	movs	r2, #0
 8005b34:	f7fe fc50 	bl	80043d8 <xQueueGenericSend>
 8005b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b3a:	e008      	b.n	8005b4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <xTimerGenericCommand+0x98>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	f107 0110 	add.w	r1, r7, #16
 8005b44:	2300      	movs	r3, #0
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	f7fe fd48 	bl	80045dc <xQueueGenericSendFromISR>
 8005b4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3728      	adds	r7, #40	@ 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000e28 	.word	0x20000e28

08005b5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b66:	4b23      	ldr	r3, [pc, #140]	@ (8005bf4 <prvProcessExpiredTimer+0x98>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe fafb 	bl	8004170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d023      	beq.n	8005bd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	18d1      	adds	r1, r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	6978      	ldr	r0, [r7, #20]
 8005b96:	f000 f8d5 	bl	8005d44 <prvInsertTimerInActiveList>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d020      	beq.n	8005be2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	f7ff ff88 	bl	8005ac0 <xTimerGenericCommand>
 8005bb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d114      	bne.n	8005be2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	60fb      	str	r3, [r7, #12]
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	e7fd      	b.n	8005bcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	4798      	blx	r3
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000e20 	.word	0x20000e20

08005bf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c00:	f107 0308 	add.w	r3, r7, #8
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f859 	bl	8005cbc <prvGetNextExpireTime>
 8005c0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f805 	bl	8005c20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c16:	f000 f8d7 	bl	8005dc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c1a:	bf00      	nop
 8005c1c:	e7f0      	b.n	8005c00 <prvTimerTask+0x8>
	...

08005c20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c2a:	f7ff fa29 	bl	8005080 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f866 	bl	8005d04 <prvSampleTimeNow>
 8005c38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d130      	bne.n	8005ca2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <prvProcessTimerOrBlockTask+0x3c>
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d806      	bhi.n	8005c5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c4e:	f7ff fa25 	bl	800509c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c52:	68f9      	ldr	r1, [r7, #12]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff ff81 	bl	8005b5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c5a:	e024      	b.n	8005ca6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c62:	4b13      	ldr	r3, [pc, #76]	@ (8005cb0 <prvProcessTimerOrBlockTask+0x90>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <prvProcessTimerOrBlockTask+0x50>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <prvProcessTimerOrBlockTask+0x52>
 8005c70:	2300      	movs	r3, #0
 8005c72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c74:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <prvProcessTimerOrBlockTask+0x94>)
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fe ff65 	bl	8004b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c86:	f7ff fa09 	bl	800509c <xTaskResumeAll>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c90:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <prvProcessTimerOrBlockTask+0x98>)
 8005c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	f3bf 8f6f 	isb	sy
}
 8005ca0:	e001      	b.n	8005ca6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ca2:	f7ff f9fb 	bl	800509c <xTaskResumeAll>
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000e24 	.word	0x20000e24
 8005cb4:	20000e28 	.word	0x20000e28
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <prvGetNextExpireTime+0x44>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <prvGetNextExpireTime+0x16>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	e000      	b.n	8005cd4 <prvGetNextExpireTime+0x18>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ce0:	4b07      	ldr	r3, [pc, #28]	@ (8005d00 <prvGetNextExpireTime+0x44>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e001      	b.n	8005cf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000e20 	.word	0x20000e20

08005d04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d0c:	f7ff fa64 	bl	80051d8 <xTaskGetTickCount>
 8005d10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d12:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <prvSampleTimeNow+0x3c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d205      	bcs.n	8005d28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d1c:	f000 f93a 	bl	8005f94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d2e:	4a04      	ldr	r2, [pc, #16]	@ (8005d40 <prvSampleTimeNow+0x3c>)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d34:	68fb      	ldr	r3, [r7, #12]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000e30 	.word	0x20000e30

08005d44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d812      	bhi.n	8005d90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d302      	bcc.n	8005d7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e01b      	b.n	8005db6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d7e:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <prvInsertTimerInActiveList+0x7c>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f7fe f9b8 	bl	80040fe <vListInsert>
 8005d8e:	e012      	b.n	8005db6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d206      	bcs.n	8005da6 <prvInsertTimerInActiveList+0x62>
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e007      	b.n	8005db6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005da6:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <prvInsertTimerInActiveList+0x80>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fe f9a4 	bl	80040fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005db6:	697b      	ldr	r3, [r7, #20]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	20000e24 	.word	0x20000e24
 8005dc4:	20000e20 	.word	0x20000e20

08005dc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08e      	sub	sp, #56	@ 0x38
 8005dcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dce:	e0ce      	b.n	8005f6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da19      	bge.n	8005e0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	3304      	adds	r3, #4
 8005dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	61fb      	str	r3, [r7, #28]
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	e7fd      	b.n	8005df6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e00:	6850      	ldr	r0, [r2, #4]
 8005e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e04:	6892      	ldr	r2, [r2, #8]
 8005e06:	4611      	mov	r1, r2
 8005e08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f2c0 80ae 	blt.w	8005f6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe f9a4 	bl	8004170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e28:	463b      	mov	r3, r7
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff ff6a 	bl	8005d04 <prvSampleTimeNow>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	f200 8097 	bhi.w	8005f68 <prvProcessReceivedCommands+0x1a0>
 8005e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e40 <prvProcessReceivedCommands+0x78>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e69 	.word	0x08005e69
 8005e4c:	08005edf 	.word	0x08005edf
 8005e50:	08005ef3 	.word	0x08005ef3
 8005e54:	08005f3f 	.word	0x08005f3f
 8005e58:	08005e69 	.word	0x08005e69
 8005e5c:	08005e69 	.word	0x08005e69
 8005e60:	08005edf 	.word	0x08005edf
 8005e64:	08005ef3 	.word	0x08005ef3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	18d1      	adds	r1, r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e88:	f7ff ff5c 	bl	8005d44 <prvInsertTimerInActiveList>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d06c      	beq.n	8005f6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d061      	beq.n	8005f6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	441a      	add	r2, r3
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eba:	f7ff fe01 	bl	8005ac0 <xTimerGenericCommand>
 8005ebe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d152      	bne.n	8005f6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	61bb      	str	r3, [r7, #24]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ef0:	e03d      	b.n	8005f6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	617b      	str	r3, [r7, #20]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	18d1      	adds	r1, r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f38:	f7ff ff04 	bl	8005d44 <prvInsertTimerInActiveList>
					break;
 8005f3c:	e017      	b.n	8005f6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d103      	bne.n	8005f54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f4e:	f000 fbeb 	bl	8006728 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f52:	e00c      	b.n	8005f6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f5a:	f023 0301 	bic.w	r3, r3, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f66:	e002      	b.n	8005f6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <prvProcessReceivedCommands+0x1a6>
					break;
 8005f6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f6e:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <prvProcessReceivedCommands+0x1c8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	1d39      	adds	r1, r7, #4
 8005f74:	2200      	movs	r2, #0
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fbce 	bl	8004718 <xQueueReceive>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f47f af26 	bne.w	8005dd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	3730      	adds	r7, #48	@ 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000e28 	.word	0x20000e28

08005f94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f9a:	e049      	b.n	8006030 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006058 <prvSwitchTimerLists+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8006058 <prvSwitchTimerLists+0xc4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fe f8db 	bl	8004170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02f      	beq.n	8006030 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d90e      	bls.n	8006000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fee:	4b1a      	ldr	r3, [pc, #104]	@ (8006058 <prvSwitchTimerLists+0xc4>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe f880 	bl	80040fe <vListInsert>
 8005ffe:	e017      	b.n	8006030 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006000:	2300      	movs	r3, #0
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2300      	movs	r3, #0
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	2100      	movs	r1, #0
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff fd58 	bl	8005ac0 <xTimerGenericCommand>
 8006010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	603b      	str	r3, [r7, #0]
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006030:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <prvSwitchTimerLists+0xc4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1b0      	bne.n	8005f9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800603a:	4b07      	ldr	r3, [pc, #28]	@ (8006058 <prvSwitchTimerLists+0xc4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006040:	4b06      	ldr	r3, [pc, #24]	@ (800605c <prvSwitchTimerLists+0xc8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a04      	ldr	r2, [pc, #16]	@ (8006058 <prvSwitchTimerLists+0xc4>)
 8006046:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006048:	4a04      	ldr	r2, [pc, #16]	@ (800605c <prvSwitchTimerLists+0xc8>)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6013      	str	r3, [r2, #0]
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000e20 	.word	0x20000e20
 800605c:	20000e24 	.word	0x20000e24

08006060 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006066:	f000 f96f 	bl	8006348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800606a:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <prvCheckForValidListAndQueue+0x60>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d120      	bne.n	80060b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006072:	4814      	ldr	r0, [pc, #80]	@ (80060c4 <prvCheckForValidListAndQueue+0x64>)
 8006074:	f7fd fff2 	bl	800405c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006078:	4813      	ldr	r0, [pc, #76]	@ (80060c8 <prvCheckForValidListAndQueue+0x68>)
 800607a:	f7fd ffef 	bl	800405c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800607e:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <prvCheckForValidListAndQueue+0x6c>)
 8006080:	4a10      	ldr	r2, [pc, #64]	@ (80060c4 <prvCheckForValidListAndQueue+0x64>)
 8006082:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006084:	4b12      	ldr	r3, [pc, #72]	@ (80060d0 <prvCheckForValidListAndQueue+0x70>)
 8006086:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <prvCheckForValidListAndQueue+0x68>)
 8006088:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800608a:	2300      	movs	r3, #0
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4b11      	ldr	r3, [pc, #68]	@ (80060d4 <prvCheckForValidListAndQueue+0x74>)
 8006090:	4a11      	ldr	r2, [pc, #68]	@ (80060d8 <prvCheckForValidListAndQueue+0x78>)
 8006092:	2110      	movs	r1, #16
 8006094:	200a      	movs	r0, #10
 8006096:	f7fe f8ff 	bl	8004298 <xQueueGenericCreateStatic>
 800609a:	4603      	mov	r3, r0
 800609c:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <prvCheckForValidListAndQueue+0x60>)
 800609e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <prvCheckForValidListAndQueue+0x60>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060a8:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <prvCheckForValidListAndQueue+0x60>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	490b      	ldr	r1, [pc, #44]	@ (80060dc <prvCheckForValidListAndQueue+0x7c>)
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fd24 	bl	8004afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060b4:	f000 f97a 	bl	80063ac <vPortExitCritical>
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000e28 	.word	0x20000e28
 80060c4:	20000df8 	.word	0x20000df8
 80060c8:	20000e0c 	.word	0x20000e0c
 80060cc:	20000e20 	.word	0x20000e20
 80060d0:	20000e24 	.word	0x20000e24
 80060d4:	20000ed4 	.word	0x20000ed4
 80060d8:	20000e34 	.word	0x20000e34
 80060dc:	08006b6c 	.word	0x08006b6c

080060e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3b04      	subs	r3, #4
 80060f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3b04      	subs	r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f023 0201 	bic.w	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3b04      	subs	r3, #4
 800610e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006110:	4a0c      	ldr	r2, [pc, #48]	@ (8006144 <pxPortInitialiseStack+0x64>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b14      	subs	r3, #20
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b04      	subs	r3, #4
 8006126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f06f 0202 	mvn.w	r2, #2
 800612e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3b20      	subs	r3, #32
 8006134:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006136:	68fb      	ldr	r3, [r7, #12]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	08006149 	.word	0x08006149

08006148 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006152:	4b13      	ldr	r3, [pc, #76]	@ (80061a0 <prvTaskExitError+0x58>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800615a:	d00b      	beq.n	8006174 <prvTaskExitError+0x2c>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	60fb      	str	r3, [r7, #12]
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	e7fd      	b.n	8006170 <prvTaskExitError+0x28>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60bb      	str	r3, [r7, #8]
}
 8006186:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006188:	bf00      	nop
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0fc      	beq.n	800618a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	2000000c 	.word	0x2000000c
	...

080061b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <pxCurrentTCBConst2>)
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	6808      	ldr	r0, [r1, #0]
 80061b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ba:	f380 8809 	msr	PSP, r0
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8811 	msr	BASEPRI, r0
 80061ca:	4770      	bx	lr
 80061cc:	f3af 8000 	nop.w

080061d0 <pxCurrentTCBConst2>:
 80061d0:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061d8:	4808      	ldr	r0, [pc, #32]	@ (80061fc <prvPortStartFirstTask+0x24>)
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	f380 8808 	msr	MSP, r0
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8814 	msr	CONTROL, r0
 80061ea:	b662      	cpsie	i
 80061ec:	b661      	cpsie	f
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	df00      	svc	0
 80061f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061fa:	bf00      	nop
 80061fc:	e000ed08 	.word	0xe000ed08

08006200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006206:	4b47      	ldr	r3, [pc, #284]	@ (8006324 <xPortStartScheduler+0x124>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a47      	ldr	r2, [pc, #284]	@ (8006328 <xPortStartScheduler+0x128>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10b      	bne.n	8006228 <xPortStartScheduler+0x28>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006228:	4b3e      	ldr	r3, [pc, #248]	@ (8006324 <xPortStartScheduler+0x124>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a3f      	ldr	r2, [pc, #252]	@ (800632c <xPortStartScheduler+0x12c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10b      	bne.n	800624a <xPortStartScheduler+0x4a>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60fb      	str	r3, [r7, #12]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800624a:	4b39      	ldr	r3, [pc, #228]	@ (8006330 <xPortStartScheduler+0x130>)
 800624c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	22ff      	movs	r2, #255	@ 0xff
 800625a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800626c:	b2da      	uxtb	r2, r3
 800626e:	4b31      	ldr	r3, [pc, #196]	@ (8006334 <xPortStartScheduler+0x134>)
 8006270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006272:	4b31      	ldr	r3, [pc, #196]	@ (8006338 <xPortStartScheduler+0x138>)
 8006274:	2207      	movs	r2, #7
 8006276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006278:	e009      	b.n	800628e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800627a:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <xPortStartScheduler+0x138>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3b01      	subs	r3, #1
 8006280:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <xPortStartScheduler+0x138>)
 8006282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	b2db      	uxtb	r3, r3
 800628c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006296:	2b80      	cmp	r3, #128	@ 0x80
 8006298:	d0ef      	beq.n	800627a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800629a:	4b27      	ldr	r3, [pc, #156]	@ (8006338 <xPortStartScheduler+0x138>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f1c3 0307 	rsb	r3, r3, #7
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d00b      	beq.n	80062be <xPortStartScheduler+0xbe>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	60bb      	str	r3, [r7, #8]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062be:	4b1e      	ldr	r3, [pc, #120]	@ (8006338 <xPortStartScheduler+0x138>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006338 <xPortStartScheduler+0x138>)
 80062c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006338 <xPortStartScheduler+0x138>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062d0:	4a19      	ldr	r2, [pc, #100]	@ (8006338 <xPortStartScheduler+0x138>)
 80062d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062dc:	4b17      	ldr	r3, [pc, #92]	@ (800633c <xPortStartScheduler+0x13c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a16      	ldr	r2, [pc, #88]	@ (800633c <xPortStartScheduler+0x13c>)
 80062e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062e8:	4b14      	ldr	r3, [pc, #80]	@ (800633c <xPortStartScheduler+0x13c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a13      	ldr	r2, [pc, #76]	@ (800633c <xPortStartScheduler+0x13c>)
 80062ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062f4:	f000 f8da 	bl	80064ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062f8:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <xPortStartScheduler+0x140>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062fe:	f000 f8f9 	bl	80064f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006302:	4b10      	ldr	r3, [pc, #64]	@ (8006344 <xPortStartScheduler+0x144>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a0f      	ldr	r2, [pc, #60]	@ (8006344 <xPortStartScheduler+0x144>)
 8006308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800630c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800630e:	f7ff ff63 	bl	80061d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006312:	f7ff f82b 	bl	800536c <vTaskSwitchContext>
	prvTaskExitError();
 8006316:	f7ff ff17 	bl	8006148 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	e000ed00 	.word	0xe000ed00
 8006328:	410fc271 	.word	0x410fc271
 800632c:	410fc270 	.word	0x410fc270
 8006330:	e000e400 	.word	0xe000e400
 8006334:	20000f24 	.word	0x20000f24
 8006338:	20000f28 	.word	0x20000f28
 800633c:	e000ed20 	.word	0xe000ed20
 8006340:	2000000c 	.word	0x2000000c
 8006344:	e000ef34 	.word	0xe000ef34

08006348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006362:	4b10      	ldr	r3, [pc, #64]	@ (80063a4 <vPortEnterCritical+0x5c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	4a0e      	ldr	r2, [pc, #56]	@ (80063a4 <vPortEnterCritical+0x5c>)
 800636a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800636c:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <vPortEnterCritical+0x5c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d110      	bne.n	8006396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006374:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <vPortEnterCritical+0x60>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <vPortEnterCritical+0x4e>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	603b      	str	r3, [r7, #0]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <vPortEnterCritical+0x4a>
	}
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	2000000c 	.word	0x2000000c
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <vPortExitCritical+0x50>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <vPortExitCritical+0x26>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	607b      	str	r3, [r7, #4]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063d2:	4b0a      	ldr	r3, [pc, #40]	@ (80063fc <vPortExitCritical+0x50>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	4a08      	ldr	r2, [pc, #32]	@ (80063fc <vPortExitCritical+0x50>)
 80063da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063dc:	4b07      	ldr	r3, [pc, #28]	@ (80063fc <vPortExitCritical+0x50>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <vPortExitCritical+0x44>
 80063e4:	2300      	movs	r3, #0
 80063e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f383 8811 	msr	BASEPRI, r3
}
 80063ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	2000000c 	.word	0x2000000c

08006400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006400:	f3ef 8009 	mrs	r0, PSP
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4b15      	ldr	r3, [pc, #84]	@ (8006460 <pxCurrentTCBConst>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f01e 0f10 	tst.w	lr, #16
 8006410:	bf08      	it	eq
 8006412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	6010      	str	r0, [r2, #0]
 800641c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006424:	f380 8811 	msr	BASEPRI, r0
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f7fe ff9c 	bl	800536c <vTaskSwitchContext>
 8006434:	f04f 0000 	mov.w	r0, #0
 8006438:	f380 8811 	msr	BASEPRI, r0
 800643c:	bc09      	pop	{r0, r3}
 800643e:	6819      	ldr	r1, [r3, #0]
 8006440:	6808      	ldr	r0, [r1, #0]
 8006442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006446:	f01e 0f10 	tst.w	lr, #16
 800644a:	bf08      	it	eq
 800644c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006450:	f380 8809 	msr	PSP, r0
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	f3af 8000 	nop.w

08006460 <pxCurrentTCBConst>:
 8006460:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop

08006468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006482:	f7fe feb9 	bl	80051f8 <xTaskIncrementTick>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800648c:	4b06      	ldr	r3, [pc, #24]	@ (80064a8 <xPortSysTickHandler+0x40>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f383 8811 	msr	BASEPRI, r3
}
 800649e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <vPortSetupTimerInterrupt+0x34>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <vPortSetupTimerInterrupt+0x38>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <vPortSetupTimerInterrupt+0x3c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	@ (80064ec <vPortSetupTimerInterrupt+0x40>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	099b      	lsrs	r3, r3, #6
 80064c8:	4a09      	ldr	r2, [pc, #36]	@ (80064f0 <vPortSetupTimerInterrupt+0x44>)
 80064ca:	3b01      	subs	r3, #1
 80064cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ce:	4b04      	ldr	r3, [pc, #16]	@ (80064e0 <vPortSetupTimerInterrupt+0x34>)
 80064d0:	2207      	movs	r2, #7
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	e000e010 	.word	0xe000e010
 80064e4:	e000e018 	.word	0xe000e018
 80064e8:	20000000 	.word	0x20000000
 80064ec:	10624dd3 	.word	0x10624dd3
 80064f0:	e000e014 	.word	0xe000e014

080064f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006504 <vPortEnableVFP+0x10>
 80064f8:	6801      	ldr	r1, [r0, #0]
 80064fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064fe:	6001      	str	r1, [r0, #0]
 8006500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006502:	bf00      	nop
 8006504:	e000ed88 	.word	0xe000ed88

08006508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	d915      	bls.n	8006546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800651a:	4a18      	ldr	r2, [pc, #96]	@ (800657c <vPortValidateInterruptPriority+0x74>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006524:	4b16      	ldr	r3, [pc, #88]	@ (8006580 <vPortValidateInterruptPriority+0x78>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	7afa      	ldrb	r2, [r7, #11]
 800652a:	429a      	cmp	r2, r3
 800652c:	d20b      	bcs.n	8006546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006546:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <vPortValidateInterruptPriority+0x7c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800654e:	4b0e      	ldr	r3, [pc, #56]	@ (8006588 <vPortValidateInterruptPriority+0x80>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d90b      	bls.n	800656e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	603b      	str	r3, [r7, #0]
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	e7fd      	b.n	800656a <vPortValidateInterruptPriority+0x62>
	}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	e000e3f0 	.word	0xe000e3f0
 8006580:	20000f24 	.word	0x20000f24
 8006584:	e000ed0c 	.word	0xe000ed0c
 8006588:	20000f28 	.word	0x20000f28

0800658c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	@ 0x28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006598:	f7fe fd72 	bl	8005080 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800659c:	4b5c      	ldr	r3, [pc, #368]	@ (8006710 <pvPortMalloc+0x184>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065a4:	f000 f924 	bl	80067f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006714 <pvPortMalloc+0x188>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 8095 	bne.w	80066e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01e      	beq.n	80065fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80065bc:	2208      	movs	r2, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4413      	add	r3, r2
 80065c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d015      	beq.n	80065fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	3308      	adds	r3, #8
 80065d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <pvPortMalloc+0x6e>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	617b      	str	r3, [r7, #20]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d06f      	beq.n	80066e0 <pvPortMalloc+0x154>
 8006600:	4b45      	ldr	r3, [pc, #276]	@ (8006718 <pvPortMalloc+0x18c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	429a      	cmp	r2, r3
 8006608:	d86a      	bhi.n	80066e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800660a:	4b44      	ldr	r3, [pc, #272]	@ (800671c <pvPortMalloc+0x190>)
 800660c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800660e:	4b43      	ldr	r3, [pc, #268]	@ (800671c <pvPortMalloc+0x190>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006614:	e004      	b.n	8006620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d903      	bls.n	8006632 <pvPortMalloc+0xa6>
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f1      	bne.n	8006616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006632:	4b37      	ldr	r3, [pc, #220]	@ (8006710 <pvPortMalloc+0x184>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006638:	429a      	cmp	r2, r3
 800663a:	d051      	beq.n	80066e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2208      	movs	r2, #8
 8006642:	4413      	add	r3, r2
 8006644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	1ad2      	subs	r2, r2, r3
 8006656:	2308      	movs	r3, #8
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	429a      	cmp	r2, r3
 800665c:	d920      	bls.n	80066a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800665e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4413      	add	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <pvPortMalloc+0xfc>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	613b      	str	r3, [r7, #16]
}
 8006682:	bf00      	nop
 8006684:	bf00      	nop
 8006686:	e7fd      	b.n	8006684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800669a:	69b8      	ldr	r0, [r7, #24]
 800669c:	f000 f90a 	bl	80068b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006718 <pvPortMalloc+0x18c>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006718 <pvPortMalloc+0x18c>)
 80066ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006718 <pvPortMalloc+0x18c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006720 <pvPortMalloc+0x194>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d203      	bcs.n	80066c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066ba:	4b17      	ldr	r3, [pc, #92]	@ (8006718 <pvPortMalloc+0x18c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a18      	ldr	r2, [pc, #96]	@ (8006720 <pvPortMalloc+0x194>)
 80066c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	4b13      	ldr	r3, [pc, #76]	@ (8006714 <pvPortMalloc+0x188>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066d6:	4b13      	ldr	r3, [pc, #76]	@ (8006724 <pvPortMalloc+0x198>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	4a11      	ldr	r2, [pc, #68]	@ (8006724 <pvPortMalloc+0x198>)
 80066de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066e0:	f7fe fcdc 	bl	800509c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <pvPortMalloc+0x17a>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <pvPortMalloc+0x176>
	return pvReturn;
 8006706:	69fb      	ldr	r3, [r7, #28]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3728      	adds	r7, #40	@ 0x28
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20005d54 	.word	0x20005d54
 8006714:	20005d68 	.word	0x20005d68
 8006718:	20005d58 	.word	0x20005d58
 800671c:	20005d4c 	.word	0x20005d4c
 8006720:	20005d5c 	.word	0x20005d5c
 8006724:	20005d60 	.word	0x20005d60

08006728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d04f      	beq.n	80067da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800673a:	2308      	movs	r3, #8
 800673c:	425b      	negs	r3, r3
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4413      	add	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	4b25      	ldr	r3, [pc, #148]	@ (80067e4 <vPortFree+0xbc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4013      	ands	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10b      	bne.n	800676e <vPortFree+0x46>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	60fb      	str	r3, [r7, #12]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <vPortFree+0x66>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60bb      	str	r3, [r7, #8]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	4b14      	ldr	r3, [pc, #80]	@ (80067e4 <vPortFree+0xbc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01e      	beq.n	80067da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d11a      	bne.n	80067da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	4b0e      	ldr	r3, [pc, #56]	@ (80067e4 <vPortFree+0xbc>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	43db      	mvns	r3, r3
 80067ae:	401a      	ands	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067b4:	f7fe fc64 	bl	8005080 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <vPortFree+0xc0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4413      	add	r3, r2
 80067c2:	4a09      	ldr	r2, [pc, #36]	@ (80067e8 <vPortFree+0xc0>)
 80067c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067c6:	6938      	ldr	r0, [r7, #16]
 80067c8:	f000 f874 	bl	80068b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067cc:	4b07      	ldr	r3, [pc, #28]	@ (80067ec <vPortFree+0xc4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a06      	ldr	r2, [pc, #24]	@ (80067ec <vPortFree+0xc4>)
 80067d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067d6:	f7fe fc61 	bl	800509c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067da:	bf00      	nop
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20005d68 	.word	0x20005d68
 80067e8:	20005d58 	.word	0x20005d58
 80067ec:	20005d64 	.word	0x20005d64

080067f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80067fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067fc:	4b27      	ldr	r3, [pc, #156]	@ (800689c <prvHeapInit+0xac>)
 80067fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00c      	beq.n	8006824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3307      	adds	r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0307 	bic.w	r3, r3, #7
 8006816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	4a1f      	ldr	r2, [pc, #124]	@ (800689c <prvHeapInit+0xac>)
 8006820:	4413      	add	r3, r2
 8006822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006828:	4a1d      	ldr	r2, [pc, #116]	@ (80068a0 <prvHeapInit+0xb0>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800682e:	4b1c      	ldr	r3, [pc, #112]	@ (80068a0 <prvHeapInit+0xb0>)
 8006830:	2200      	movs	r2, #0
 8006832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4413      	add	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800683c:	2208      	movs	r2, #8
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0307 	bic.w	r3, r3, #7
 800684a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a15      	ldr	r2, [pc, #84]	@ (80068a4 <prvHeapInit+0xb4>)
 8006850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006852:	4b14      	ldr	r3, [pc, #80]	@ (80068a4 <prvHeapInit+0xb4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800685a:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <prvHeapInit+0xb4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006870:	4b0c      	ldr	r3, [pc, #48]	@ (80068a4 <prvHeapInit+0xb4>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	4a0a      	ldr	r2, [pc, #40]	@ (80068a8 <prvHeapInit+0xb8>)
 800687e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4a09      	ldr	r2, [pc, #36]	@ (80068ac <prvHeapInit+0xbc>)
 8006886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <prvHeapInit+0xc0>)
 800688a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800688e:	601a      	str	r2, [r3, #0]
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	20000f2c 	.word	0x20000f2c
 80068a0:	20005d4c 	.word	0x20005d4c
 80068a4:	20005d54 	.word	0x20005d54
 80068a8:	20005d5c 	.word	0x20005d5c
 80068ac:	20005d58 	.word	0x20005d58
 80068b0:	20005d68 	.word	0x20005d68

080068b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068bc:	4b28      	ldr	r3, [pc, #160]	@ (8006960 <prvInsertBlockIntoFreeList+0xac>)
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e002      	b.n	80068c8 <prvInsertBlockIntoFreeList+0x14>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d8f7      	bhi.n	80068c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	4413      	add	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d108      	bne.n	80068f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	441a      	add	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	441a      	add	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d118      	bne.n	800693c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <prvInsertBlockIntoFreeList+0xb0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d00d      	beq.n	8006932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	441a      	add	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e008      	b.n	8006944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <prvInsertBlockIntoFreeList+0xb0>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e003      	b.n	8006944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d002      	beq.n	8006952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20005d4c 	.word	0x20005d4c
 8006964:	20005d54 	.word	0x20005d54

08006968 <memset>:
 8006968:	4402      	add	r2, r0
 800696a:	4603      	mov	r3, r0
 800696c:	4293      	cmp	r3, r2
 800696e:	d100      	bne.n	8006972 <memset+0xa>
 8006970:	4770      	bx	lr
 8006972:	f803 1b01 	strb.w	r1, [r3], #1
 8006976:	e7f9      	b.n	800696c <memset+0x4>

08006978 <_reclaim_reent>:
 8006978:	4b29      	ldr	r3, [pc, #164]	@ (8006a20 <_reclaim_reent+0xa8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4283      	cmp	r3, r0
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	4604      	mov	r4, r0
 8006982:	d04b      	beq.n	8006a1c <_reclaim_reent+0xa4>
 8006984:	69c3      	ldr	r3, [r0, #28]
 8006986:	b1ab      	cbz	r3, 80069b4 <_reclaim_reent+0x3c>
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	b16b      	cbz	r3, 80069a8 <_reclaim_reent+0x30>
 800698c:	2500      	movs	r5, #0
 800698e:	69e3      	ldr	r3, [r4, #28]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	5959      	ldr	r1, [r3, r5]
 8006994:	2900      	cmp	r1, #0
 8006996:	d13b      	bne.n	8006a10 <_reclaim_reent+0x98>
 8006998:	3504      	adds	r5, #4
 800699a:	2d80      	cmp	r5, #128	@ 0x80
 800699c:	d1f7      	bne.n	800698e <_reclaim_reent+0x16>
 800699e:	69e3      	ldr	r3, [r4, #28]
 80069a0:	4620      	mov	r0, r4
 80069a2:	68d9      	ldr	r1, [r3, #12]
 80069a4:	f000 f872 	bl	8006a8c <_free_r>
 80069a8:	69e3      	ldr	r3, [r4, #28]
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	b111      	cbz	r1, 80069b4 <_reclaim_reent+0x3c>
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f86c 	bl	8006a8c <_free_r>
 80069b4:	6961      	ldr	r1, [r4, #20]
 80069b6:	b111      	cbz	r1, 80069be <_reclaim_reent+0x46>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f867 	bl	8006a8c <_free_r>
 80069be:	69e1      	ldr	r1, [r4, #28]
 80069c0:	b111      	cbz	r1, 80069c8 <_reclaim_reent+0x50>
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 f862 	bl	8006a8c <_free_r>
 80069c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80069ca:	b111      	cbz	r1, 80069d2 <_reclaim_reent+0x5a>
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 f85d 	bl	8006a8c <_free_r>
 80069d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069d4:	b111      	cbz	r1, 80069dc <_reclaim_reent+0x64>
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 f858 	bl	8006a8c <_free_r>
 80069dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80069de:	b111      	cbz	r1, 80069e6 <_reclaim_reent+0x6e>
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 f853 	bl	8006a8c <_free_r>
 80069e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80069e8:	b111      	cbz	r1, 80069f0 <_reclaim_reent+0x78>
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f84e 	bl	8006a8c <_free_r>
 80069f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80069f2:	b111      	cbz	r1, 80069fa <_reclaim_reent+0x82>
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 f849 	bl	8006a8c <_free_r>
 80069fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80069fc:	b111      	cbz	r1, 8006a04 <_reclaim_reent+0x8c>
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 f844 	bl	8006a8c <_free_r>
 8006a04:	6a23      	ldr	r3, [r4, #32]
 8006a06:	b14b      	cbz	r3, 8006a1c <_reclaim_reent+0xa4>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a0e:	4718      	bx	r3
 8006a10:	680e      	ldr	r6, [r1, #0]
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f83a 	bl	8006a8c <_free_r>
 8006a18:	4631      	mov	r1, r6
 8006a1a:	e7bb      	b.n	8006994 <_reclaim_reent+0x1c>
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000010 	.word	0x20000010

08006a24 <__libc_init_array>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4d0d      	ldr	r5, [pc, #52]	@ (8006a5c <__libc_init_array+0x38>)
 8006a28:	4c0d      	ldr	r4, [pc, #52]	@ (8006a60 <__libc_init_array+0x3c>)
 8006a2a:	1b64      	subs	r4, r4, r5
 8006a2c:	10a4      	asrs	r4, r4, #2
 8006a2e:	2600      	movs	r6, #0
 8006a30:	42a6      	cmp	r6, r4
 8006a32:	d109      	bne.n	8006a48 <__libc_init_array+0x24>
 8006a34:	4d0b      	ldr	r5, [pc, #44]	@ (8006a64 <__libc_init_array+0x40>)
 8006a36:	4c0c      	ldr	r4, [pc, #48]	@ (8006a68 <__libc_init_array+0x44>)
 8006a38:	f000 f87e 	bl	8006b38 <_init>
 8006a3c:	1b64      	subs	r4, r4, r5
 8006a3e:	10a4      	asrs	r4, r4, #2
 8006a40:	2600      	movs	r6, #0
 8006a42:	42a6      	cmp	r6, r4
 8006a44:	d105      	bne.n	8006a52 <__libc_init_array+0x2e>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4c:	4798      	blx	r3
 8006a4e:	3601      	adds	r6, #1
 8006a50:	e7ee      	b.n	8006a30 <__libc_init_array+0xc>
 8006a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a56:	4798      	blx	r3
 8006a58:	3601      	adds	r6, #1
 8006a5a:	e7f2      	b.n	8006a42 <__libc_init_array+0x1e>
 8006a5c:	08006be0 	.word	0x08006be0
 8006a60:	08006be0 	.word	0x08006be0
 8006a64:	08006be0 	.word	0x08006be0
 8006a68:	08006be4 	.word	0x08006be4

08006a6c <__retarget_lock_acquire_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <__retarget_lock_release_recursive>:
 8006a6e:	4770      	bx	lr

08006a70 <memcpy>:
 8006a70:	440a      	add	r2, r1
 8006a72:	4291      	cmp	r1, r2
 8006a74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a78:	d100      	bne.n	8006a7c <memcpy+0xc>
 8006a7a:	4770      	bx	lr
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a86:	4291      	cmp	r1, r2
 8006a88:	d1f9      	bne.n	8006a7e <memcpy+0xe>
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <_free_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4605      	mov	r5, r0
 8006a90:	2900      	cmp	r1, #0
 8006a92:	d041      	beq.n	8006b18 <_free_r+0x8c>
 8006a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a98:	1f0c      	subs	r4, r1, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfb8      	it	lt
 8006a9e:	18e4      	addlt	r4, r4, r3
 8006aa0:	f000 f83e 	bl	8006b20 <__malloc_lock>
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b1c <_free_r+0x90>)
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	b933      	cbnz	r3, 8006ab8 <_free_r+0x2c>
 8006aaa:	6063      	str	r3, [r4, #4]
 8006aac:	6014      	str	r4, [r2, #0]
 8006aae:	4628      	mov	r0, r5
 8006ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ab4:	f000 b83a 	b.w	8006b2c <__malloc_unlock>
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d908      	bls.n	8006ace <_free_r+0x42>
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	1821      	adds	r1, r4, r0
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	bf01      	itttt	eq
 8006ac4:	6819      	ldreq	r1, [r3, #0]
 8006ac6:	685b      	ldreq	r3, [r3, #4]
 8006ac8:	1809      	addeq	r1, r1, r0
 8006aca:	6021      	streq	r1, [r4, #0]
 8006acc:	e7ed      	b.n	8006aaa <_free_r+0x1e>
 8006ace:	461a      	mov	r2, r3
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	b10b      	cbz	r3, 8006ad8 <_free_r+0x4c>
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d9fa      	bls.n	8006ace <_free_r+0x42>
 8006ad8:	6811      	ldr	r1, [r2, #0]
 8006ada:	1850      	adds	r0, r2, r1
 8006adc:	42a0      	cmp	r0, r4
 8006ade:	d10b      	bne.n	8006af8 <_free_r+0x6c>
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	1850      	adds	r0, r2, r1
 8006ae6:	4283      	cmp	r3, r0
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	d1e0      	bne.n	8006aae <_free_r+0x22>
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	6053      	str	r3, [r2, #4]
 8006af2:	4408      	add	r0, r1
 8006af4:	6010      	str	r0, [r2, #0]
 8006af6:	e7da      	b.n	8006aae <_free_r+0x22>
 8006af8:	d902      	bls.n	8006b00 <_free_r+0x74>
 8006afa:	230c      	movs	r3, #12
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	e7d6      	b.n	8006aae <_free_r+0x22>
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	1821      	adds	r1, r4, r0
 8006b04:	428b      	cmp	r3, r1
 8006b06:	bf04      	itt	eq
 8006b08:	6819      	ldreq	r1, [r3, #0]
 8006b0a:	685b      	ldreq	r3, [r3, #4]
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	bf04      	itt	eq
 8006b10:	1809      	addeq	r1, r1, r0
 8006b12:	6021      	streq	r1, [r4, #0]
 8006b14:	6054      	str	r4, [r2, #4]
 8006b16:	e7ca      	b.n	8006aae <_free_r+0x22>
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20005ea8 	.word	0x20005ea8

08006b20 <__malloc_lock>:
 8006b20:	4801      	ldr	r0, [pc, #4]	@ (8006b28 <__malloc_lock+0x8>)
 8006b22:	f7ff bfa3 	b.w	8006a6c <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20005ea4 	.word	0x20005ea4

08006b2c <__malloc_unlock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__malloc_unlock+0x8>)
 8006b2e:	f7ff bf9e 	b.w	8006a6e <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20005ea4 	.word	0x20005ea4

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
