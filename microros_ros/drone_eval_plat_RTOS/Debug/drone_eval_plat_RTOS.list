
drone_eval_plat_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd28  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a30  0801ff08  0801ff08  00020f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021938  08021938  00024c58  2**0
                  CONTENTS
  4 .ARM          00000008  08021938  08021938  00022938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021940  08021940  00024c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08021940  08021940  00022940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802194c  0802194c  0002294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001c58  20000000  08021950  00023000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001dcd0  20001c58  080235a8  00024c58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001f928  080235a8  00025928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024c58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bed7  00000000  00000000  00024c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e19  00000000  00000000  00050b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  00056978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018d0  00000000  00000000  000589a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f78a  00000000  00000000  0005a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e5bc  00000000  00000000  000899fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bf08  00000000  00000000  000b7fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001d3ebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009970  00000000  00000000  001d3f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001dd898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001c58 	.word	0x20001c58
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801fef0 	.word	0x0801fef0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001c5c 	.word	0x20001c5c
 800021c:	0801fef0 	.word	0x0801fef0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <CalculateAccAngle>:
#include "CalculateAngle.h"

Struct_Angle Angle;

void CalculateAccAngle(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 8000ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  Angle->acc_roll  = atan(-MPU6050->acc_x / sqrt(pow(MPU6050->acc_y,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	edd3 7a04 	vldr	s15, [r3, #16]
 800100a:	eef1 7a67 	vneg.f32	s15, s15
 800100e:	ee17 3a90 	vmov	r3, s15
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fad0 	bl	80005b8 <__aeabi_f2d>
 8001018:	4604      	mov	r4, r0
 800101a:	460d      	mov	r5, r1
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fac9 	bl	80005b8 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 8001188 <CalculateAccAngle+0x190>
 800102e:	ec43 2b10 	vmov	d0, r2, r3
 8001032:	f01d fe37 	bl	801eca4 <pow>
 8001036:	ec59 8b10 	vmov	r8, r9, d0
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff faba 	bl	80005b8 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001188 <CalculateAccAngle+0x190>
 800104c:	ec43 2b10 	vmov	d0, r2, r3
 8001050:	f01d fe28 	bl	801eca4 <pow>
 8001054:	ec53 2b10 	vmov	r2, r3, d0
 8001058:	4640      	mov	r0, r8
 800105a:	4649      	mov	r1, r9
 800105c:	f7ff f94e 	bl	80002fc <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	ec43 2b17 	vmov	d7, r2, r3
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	f01d fe88 	bl	801ed84 <sqrt>
 8001074:	ec53 2b10 	vmov	r2, r3, d0
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff fc1e 	bl	80008bc <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	ec43 2b17 	vmov	d7, r2, r3
 8001088:	eeb0 0a47 	vmov.f32	s0, s14
 800108c:	eef0 0a67 	vmov.f32	s1, s15
 8001090:	f01d fea6 	bl	801ede0 <atan>
 8001094:	ec51 0b10 	vmov	r0, r1, d0
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <CalculateAccAngle+0x1a0>)
 800109e:	f7ff fae3 	bl	8000668 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	a339      	add	r3, pc, #228	@ (adr r3, 8001190 <CalculateAccAngle+0x198>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fc04 	bl	80008bc <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd84 	bl	8000bc8 <__aeabi_d2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
  Angle->acc_pitch = atan(MPU6050->acc_y / sqrt(pow(MPU6050->acc_x,2) + pow(MPU6050->acc_z,2))) * RADIAN_TO_DEGREE;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa74 	bl	80005b8 <__aeabi_f2d>
 80010d0:	4604      	mov	r4, r0
 80010d2:	460d      	mov	r5, r1
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa6d 	bl	80005b8 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8001188 <CalculateAccAngle+0x190>
 80010e6:	ec43 2b10 	vmov	d0, r2, r3
 80010ea:	f01d fddb 	bl	801eca4 <pow>
 80010ee:	ec59 8b10 	vmov	r8, r9, d0
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa5e 	bl	80005b8 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8001188 <CalculateAccAngle+0x190>
 8001104:	ec43 2b10 	vmov	d0, r2, r3
 8001108:	f01d fdcc 	bl	801eca4 <pow>
 800110c:	ec53 2b10 	vmov	r2, r3, d0
 8001110:	4640      	mov	r0, r8
 8001112:	4649      	mov	r1, r9
 8001114:	f7ff f8f2 	bl	80002fc <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	ec43 2b17 	vmov	d7, r2, r3
 8001120:	eeb0 0a47 	vmov.f32	s0, s14
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	f01d fe2c 	bl	801ed84 <sqrt>
 800112c:	ec53 2b10 	vmov	r2, r3, d0
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fbc2 	bl	80008bc <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b17 	vmov	d7, r2, r3
 8001140:	eeb0 0a47 	vmov.f32	s0, s14
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	f01d fe4a 	bl	801ede0 <atan>
 800114c:	ec51 0b10 	vmov	r0, r1, d0
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <CalculateAccAngle+0x1a0>)
 8001156:	f7ff fa87 	bl	8000668 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	a30b      	add	r3, pc, #44	@ (adr r3, 8001190 <CalculateAccAngle+0x198>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fba8 	bl	80008bc <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd28 	bl	8000bc8 <__aeabi_d2f>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	605a      	str	r2, [r3, #4]
  //  Angle->acc_yaw = atan(sqrt(pow(MPU6050->acc_x, 2) + pow(MPU6050->acc_y, 2)) / MPU6050->acc_z) * RADIAN_TO_DEGREE;
  //Can't use Angle->acc_yaw there is no reliability. It's based on my personal experimental view.
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001188:	00000000 	.word	0x00000000
 800118c:	40000000 	.word	0x40000000
 8001190:	00000000 	.word	0x00000000
 8001194:	400921fb 	.word	0x400921fb
 8001198:	40668000 	.word	0x40668000

0800119c <CalculateCompliFilter>:
  Angle->gyro_pitch += MPU6050->gyro_x * dt;
  Angle->gyro_yaw   += MPU6050->gyro_z * dt;
}

void CalculateCompliFilter(Struct_Angle* Angle, Struct_MPU6050* MPU6050)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  CalculateAccAngle(Angle, MPU6050); //Prepare Acc Angle before using Complimentary Filter.
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff25 	bl	8000ff8 <CalculateAccAngle>

  static float alpha = 0.96f;
  Angle->ComFilt_roll  = alpha*(MPU6050->gyro_y * dt + Angle->ComFilt_roll) + (1-alpha) * Angle->acc_roll;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001264 <CalculateCompliFilter+0xc8>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c8:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <CalculateCompliFilter+0xcc>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <CalculateCompliFilter+0xcc>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a06 	vstr	s15, [r3, #24]
  Angle->ComFilt_pitch = alpha*(MPU6050->gyro_x * dt + Angle->ComFilt_pitch) + (1-alpha) * Angle->acc_pitch;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <CalculateCompliFilter+0xc8>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a07 	vldr	s15, [r3, #28]
 800120a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <CalculateCompliFilter+0xcc>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <CalculateCompliFilter+0xcc>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001222:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 7a01 	vldr	s15, [r3, #4]
 800122c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edc3 7a07 	vstr	s15, [r3, #28]
  Angle->ComFilt_yaw   = Angle->ComFilt_yaw + MPU6050->gyro_z * dt;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <CalculateCompliFilter+0xc8>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29a      	uxth	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2301      	movs	r3, #1
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	21d0      	movs	r1, #208	@ 0xd0
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MPU6050_Writebyte+0x34>)
 8001292:	f003 fc77 	bl	8004b84 <HAL_I2C_Mem_Write>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000f5ec 	.word	0x2000f5ec

080012a4 <MPU6050_Readbyte>:
{
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af04      	add	r7, sp, #16
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	21d0      	movs	r1, #208	@ 0xd0
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MPU6050_Readbyte+0x30>)
 80012c6:	f003 fd71 	bl	8004dac <HAL_I2C_Mem_Read>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000f5ec 	.word	0x2000f5ec

080012d8 <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
 80012de:	4603      	mov	r3, r0
 80012e0:	603a      	str	r2, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	460b      	mov	r3, r1
 80012e6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2101      	movs	r1, #1
 80012f2:	9102      	str	r1, [sp, #8]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	21d0      	movs	r1, #208	@ 0xd0
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <MPU6050_Readbytes+0x34>)
 8001300:	f003 fd54 	bl	8004dac <HAL_I2C_Mem_Read>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000f5ec 	.word	0x2000f5ec

08001310 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  osDelay(50);
 8001316:	2032      	movs	r0, #50	@ 0x32
 8001318:	f008 fefd 	bl	800a116 <osDelay>
  uint8_t who_am_i = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	707b      	strb	r3, [r7, #1]
  printf("Checking MPU6050...\n");
 8001320:	4843      	ldr	r0, [pc, #268]	@ (8001430 <MPU6050_Initialization+0x120>)
 8001322:	f01c fbd7 	bl	801dad4 <puts>

  MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 8001326:	1c7b      	adds	r3, r7, #1
 8001328:	4619      	mov	r1, r3
 800132a:	2075      	movs	r0, #117	@ 0x75
 800132c:	f7ff ffba 	bl	80012a4 <MPU6050_Readbyte>
  if(who_am_i == 0x68)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b68      	cmp	r3, #104	@ 0x68
 8001334:	d105      	bne.n	8001342 <MPU6050_Initialization+0x32>
  {
    printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 8001336:	787b      	ldrb	r3, [r7, #1]
 8001338:	4619      	mov	r1, r3
 800133a:	483e      	ldr	r0, [pc, #248]	@ (8001434 <MPU6050_Initialization+0x124>)
 800133c:	f01c fb62 	bl	801da04 <iprintf>
 8001340:	e00f      	b.n	8001362 <MPU6050_Initialization+0x52>
  }
  else
  {
    printf("ERROR!\n");
 8001342:	483d      	ldr	r0, [pc, #244]	@ (8001438 <MPU6050_Initialization+0x128>)
 8001344:	f01c fbc6 	bl	801dad4 <puts>
    printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	4619      	mov	r1, r3
 800134c:	483b      	ldr	r0, [pc, #236]	@ (800143c <MPU6050_Initialization+0x12c>)
 800134e:	f01c fb59 	bl	801da04 <iprintf>
    while(1)
    {
      printf("who am i error. Can not recognize mpu6050\n");
 8001352:	483b      	ldr	r0, [pc, #236]	@ (8001440 <MPU6050_Initialization+0x130>)
 8001354:	f01c fbbe 	bl	801dad4 <puts>
      osDelay(100);
 8001358:	2064      	movs	r0, #100	@ 0x64
 800135a:	f008 fedc 	bl	800a116 <osDelay>
      printf("who am i error. Can not recognize mpu6050\n");
 800135e:	bf00      	nop
 8001360:	e7f7      	b.n	8001352 <MPU6050_Initialization+0x42>
    }
  }

  //Reset the whole module before initialization
  MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	206b      	movs	r0, #107	@ 0x6b
 8001366:	f7ff ff81 	bl	800126c <MPU6050_Writebyte>
  osDelay(100);
 800136a:	2064      	movs	r0, #100	@ 0x64
 800136c:	f008 fed3 	bl	800a116 <osDelay>

  //Power Management setting
  /* Default is sleep mode
   * necessary to wake up MPU6050*/
  MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8001370:	2100      	movs	r1, #0
 8001372:	206b      	movs	r0, #107	@ 0x6b
 8001374:	f7ff ff7a 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001378:	2032      	movs	r0, #50	@ 0x32
 800137a:	f008 fecc 	bl	800a116 <osDelay>

  //Sample rate divider
  /*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
  //  MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
  MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 800137e:	2127      	movs	r1, #39	@ 0x27
 8001380:	2019      	movs	r0, #25
 8001382:	f7ff ff73 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001386:	2032      	movs	r0, #50	@ 0x32
 8001388:	f008 fec5 	bl	800a116 <osDelay>

  //FSYNC and DLPF setting
  /*DLPF is set to 0*/
  MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 800138c:	2100      	movs	r1, #0
 800138e:	201a      	movs	r0, #26
 8001390:	f7ff ff6c 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001394:	2032      	movs	r0, #50	@ 0x32
 8001396:	f008 febe 	bl	800a116 <osDelay>
  /*FS_SEL  Full Scale Range
    0     +-250 degree/s
    1   +-500 degree/s
    2   +-1000 degree/s
    3   +-2000 degree/s */
  uint8_t FS_SCALE_GYRO = 0x0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
  MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	201b      	movs	r0, #27
 80013a8:	f7ff ff60 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 80013ac:	2032      	movs	r0, #50	@ 0x32
 80013ae:	f008 feb2 	bl	800a116 <osDelay>
  /*FS_SEL  Full Scale Range
    0     +-2g
    1   +-4g
    2   +-8g
    3   +-16g */
  uint8_t FS_SCALE_ACC = 0x0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	71bb      	strb	r3, [r7, #6]
  MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	201c      	movs	r0, #28
 80013c0:	f7ff ff54 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 80013c4:	2032      	movs	r0, #50	@ 0x32
 80013c6:	f008 fea6 	bl	800a116 <osDelay>

  MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f887 	bl	80014e4 <MPU6050_Get_LSB_Sensitivity>
//  printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);

  //Interrupt PIN setting
  uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 80013d6:	2300      	movs	r3, #0
 80013d8:	717b      	strb	r3, [r7, #5]
  uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 80013da:	2300      	movs	r3, #0
 80013dc:	713b      	strb	r3, [r7, #4]
  uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 80013de:	2301      	movs	r3, #1
 80013e0:	70fb      	strb	r3, [r7, #3]
  MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	01db      	lsls	r3, r3, #7
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	015b      	lsls	r3, r3, #5
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	2037      	movs	r0, #55	@ 0x37
 8001402:	f7ff ff33 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 8001406:	2032      	movs	r0, #50	@ 0x32
 8001408:	f008 fe85 	bl	800a116 <osDelay>

  //Interrupt enable setting
  uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 800140c:	2301      	movs	r3, #1
 800140e:	70bb      	strb	r3, [r7, #2]
  MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	4619      	mov	r1, r3
 8001414:	2038      	movs	r0, #56	@ 0x38
 8001416:	f7ff ff29 	bl	800126c <MPU6050_Writebyte>
  osDelay(50);
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f008 fe7b 	bl	800a116 <osDelay>

  printf("MPU6050 setting is finished\n");
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MPU6050_Initialization+0x134>)
 8001422:	f01c fb57 	bl	801dad4 <puts>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	0801ff08 	.word	0x0801ff08
 8001434:	0801ff1c 	.word	0x0801ff1c
 8001438:	0801ff3c 	.word	0x0801ff3c
 800143c:	0801ff44 	.word	0x0801ff44
 8001440:	0801ff70 	.word	0x0801ff70
 8001444:	0801ff9c 	.word	0x0801ff9c

08001448 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint8_t data[14];
  MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	461a      	mov	r2, r3
 8001456:	210e      	movs	r1, #14
 8001458:	203b      	movs	r0, #59	@ 0x3b
 800145a:	f7ff ff3d 	bl	80012d8 <MPU6050_Readbytes>

  mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 800145e:	7a3b      	ldrb	r3, [r7, #8]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	7a7b      	ldrb	r3, [r7, #9]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	801a      	strh	r2, [r3, #0]
  mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001470:	7abb      	ldrb	r3, [r7, #10]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	805a      	strh	r2, [r3, #2]
  mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8001482:	7b3b      	ldrb	r3, [r7, #12]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	809a      	strh	r2, [r3, #4]

  mpu6050->temperature_raw = (data[6] << 8) | data[7];
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	80da      	strh	r2, [r3, #6]

  mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 80014a6:	7c3b      	ldrb	r3, [r7, #16]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	7c7b      	ldrb	r3, [r7, #17]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	811a      	strh	r2, [r3, #8]
  mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 80014b8:	7cbb      	ldrb	r3, [r7, #18]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	815a      	strh	r2, [r3, #10]
  mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80014ca:	7d3b      	ldrb	r3, [r7, #20]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	819a      	strh	r2, [r3, #12]
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  switch(FS_SCALE_GYRO)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d81a      	bhi.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
 80014fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001500 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001519 	.word	0x08001519
 8001508:	08001521 	.word	0x08001521
 800150c:	08001529 	.word	0x08001529
  {
  case 0:
    LSB_Sensitivity_GYRO = 131.f;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 8001514:	601a      	str	r2, [r3, #0]
    break;
 8001516:	e00b      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 1:
    LSB_Sensitivity_GYRO = 65.5f;
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800151a:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 800151c:	601a      	str	r2, [r3, #0]
    break;
 800151e:	e007      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 2:
    LSB_Sensitivity_GYRO = 32.8f;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001522:	4a1a      	ldr	r2, [pc, #104]	@ (800158c <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8001524:	601a      	str	r2, [r3, #0]
    break;
 8001526:	e003      	b.n	8001530 <MPU6050_Get_LSB_Sensitivity+0x4c>
  case 3:
    LSB_Sensitivity_GYRO = 16.4f;
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <MPU6050_Get_LSB_Sensitivity+0xac>)
 800152c:	601a      	str	r2, [r3, #0]
    break;
 800152e:	bf00      	nop
  }
  switch(FS_SCALE_ACC)
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d81e      	bhi.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
 8001536:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <MPU6050_Get_LSB_Sensitivity+0x58>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001557 	.word	0x08001557
 8001544:	08001561 	.word	0x08001561
 8001548:	0800156b 	.word	0x0800156b
  {
  case 0:
    LSB_Sensitivity_ACC = 16384.f;
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800154e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001552:	601a      	str	r2, [r3, #0]
    break;
 8001554:	e00e      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 1:
    LSB_Sensitivity_ACC = 8192.f;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001558:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800155c:	601a      	str	r2, [r3, #0]
    break;
 800155e:	e009      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 2:
    LSB_Sensitivity_ACC = 4096.f;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001562:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001566:	601a      	str	r2, [r3, #0]
    break;
 8001568:	e004      	b.n	8001574 <MPU6050_Get_LSB_Sensitivity+0x90>
  case 3:
    LSB_Sensitivity_ACC = 2048.f;
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800156c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001570:	601a      	str	r2, [r3, #0]
    break;
 8001572:	bf00      	nop
  }
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20001cc8 	.word	0x20001cc8
 8001584:	43030000 	.word	0x43030000
 8001588:	42830000 	.word	0x42830000
 800158c:	42033333 	.word	0x42033333
 8001590:	41833333 	.word	0x41833333
 8001594:	20001cc4 	.word	0x20001cc4

08001598 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  //printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
  mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a04 	vstr	s15, [r3, #16]
  mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a05 	vstr	s15, [r3, #20]
  mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <MPU6050_DataConvert+0x108>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edc3 7a06 	vstr	s15, [r3, #24]

  mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80016a4 <MPU6050_DataConvert+0x10c>
 800160c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001610:	ee16 0a90 	vmov	r0, s13
 8001614:	f7fe ffd0 	bl	80005b8 <__aeabi_f2d>
 8001618:	a31f      	add	r3, pc, #124	@ (adr r3, 8001698 <MPU6050_DataConvert+0x100>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fe6d 	bl	80002fc <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff facd 	bl	8000bc8 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	61da      	str	r2, [r3, #28]

  mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001642:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001644:	ed93 7a00 	vldr	s14, [r3]
 8001648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	edc3 7a08 	vstr	s15, [r3, #32]
  mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MPU6050_DataConvert+0x110>)
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	0a3d70a4 	.word	0x0a3d70a4
 800169c:	404243d7 	.word	0x404243d7
 80016a0:	20001cc4 	.word	0x20001cc4
 80016a4:	43aa0000 	.word	0x43aa0000
 80016a8:	20001cc8 	.word	0x20001cc8

080016ac <MPU6050_ProcessData>:
   */
  return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
}

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  MPU6050_Get6AxisRawData(mpu6050);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fec7 	bl	8001448 <MPU6050_Get6AxisRawData>
  MPU6050_DataConvert(mpu6050);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff6c 	bl	8001598 <MPU6050_DataConvert>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of IMUshouldUpdate */
  IMUshouldUpdateHandle = osSemaphoreNew(1, 1, &IMUshouldUpdate_attributes);
 80016cc:	4a45      	ldr	r2, [pc, #276]	@ (80017e4 <MX_FREERTOS_Init+0x11c>)
 80016ce:	2101      	movs	r1, #1
 80016d0:	2001      	movs	r0, #1
 80016d2:	f008 fe22 	bl	800a31a <osSemaphoreNew>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a43      	ldr	r2, [pc, #268]	@ (80017e8 <MX_FREERTOS_Init+0x120>)
 80016da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  HAL_TIM_Base_Start(&htim1);
 80016dc:	4843      	ldr	r0, [pc, #268]	@ (80017ec <MX_FREERTOS_Init+0x124>)
 80016de:	f005 f893 	bl	8006808 <HAL_TIM_Base_Start>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printfQueue */
  printfQueueHandle = osMessageQueueNew (128, sizeof(xPrintfMessage), &printfQueue_attributes);
 80016e2:	4a43      	ldr	r2, [pc, #268]	@ (80017f0 <MX_FREERTOS_Init+0x128>)
 80016e4:	2124      	movs	r1, #36	@ 0x24
 80016e6:	2080      	movs	r0, #128	@ 0x80
 80016e8:	f008 fef2 	bl	800a4d0 <osMessageQueueNew>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a41      	ldr	r2, [pc, #260]	@ (80017f4 <MX_FREERTOS_Init+0x12c>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* creation of yawMotorNewAngle */
  yawMotorNewAngleHandle = osMessageQueueNew (16, sizeof(float), &yawMotorNewAngle_attributes);
 80016f2:	4a41      	ldr	r2, [pc, #260]	@ (80017f8 <MX_FREERTOS_Init+0x130>)
 80016f4:	2104      	movs	r1, #4
 80016f6:	2010      	movs	r0, #16
 80016f8:	f008 feea 	bl	800a4d0 <osMessageQueueNew>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <MX_FREERTOS_Init+0x134>)
 8001700:	6013      	str	r3, [r2, #0]

  /* creation of rollMotorNewAngle */
  rollMotorNewAngleHandle = osMessageQueueNew (16, sizeof(float), &rollMotorNewAngle_attributes);
 8001702:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <MX_FREERTOS_Init+0x138>)
 8001704:	2104      	movs	r1, #4
 8001706:	2010      	movs	r0, #16
 8001708:	f008 fee2 	bl	800a4d0 <osMessageQueueNew>
 800170c:	4603      	mov	r3, r0
 800170e:	4a3d      	ldr	r2, [pc, #244]	@ (8001804 <MX_FREERTOS_Init+0x13c>)
 8001710:	6013      	str	r3, [r2, #0]

  /* creation of IMUdata */
  IMUdataHandle = osMessageQueueNew (4, sizeof(xIMUData), &IMUdata_attributes);
 8001712:	4a3d      	ldr	r2, [pc, #244]	@ (8001808 <MX_FREERTOS_Init+0x140>)
 8001714:	210c      	movs	r1, #12
 8001716:	2004      	movs	r0, #4
 8001718:	f008 feda 	bl	800a4d0 <osMessageQueueNew>
 800171c:	4603      	mov	r3, r0
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <MX_FREERTOS_Init+0x144>)
 8001720:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(defaultTaskFunc, NULL, &defaultTask_attributes);
 8001722:	4a3b      	ldr	r2, [pc, #236]	@ (8001810 <MX_FREERTOS_Init+0x148>)
 8001724:	2100      	movs	r1, #0
 8001726:	483b      	ldr	r0, [pc, #236]	@ (8001814 <MX_FREERTOS_Init+0x14c>)
 8001728:	f008 fb94 	bl	8009e54 <osThreadNew>
 800172c:	4603      	mov	r3, r0
 800172e:	4a3a      	ldr	r2, [pc, #232]	@ (8001818 <MX_FREERTOS_Init+0x150>)
 8001730:	6013      	str	r3, [r2, #0]

  /* creation of BT_uart */
  BT_uartHandle = osThreadNew(BT_uart_func, NULL, &BT_uart_attributes);
 8001732:	4a3a      	ldr	r2, [pc, #232]	@ (800181c <MX_FREERTOS_Init+0x154>)
 8001734:	2100      	movs	r1, #0
 8001736:	483a      	ldr	r0, [pc, #232]	@ (8001820 <MX_FREERTOS_Init+0x158>)
 8001738:	f008 fb8c 	bl	8009e54 <osThreadNew>
 800173c:	4603      	mov	r3, r0
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <MX_FREERTOS_Init+0x15c>)
 8001740:	6013      	str	r3, [r2, #0]

  /* creation of printGateKeeper */
  printGateKeeperHandle = osThreadNew(printGateKeeperFunc, NULL, &printGateKeeper_attributes);
 8001742:	4a39      	ldr	r2, [pc, #228]	@ (8001828 <MX_FREERTOS_Init+0x160>)
 8001744:	2100      	movs	r1, #0
 8001746:	4839      	ldr	r0, [pc, #228]	@ (800182c <MX_FREERTOS_Init+0x164>)
 8001748:	f008 fb84 	bl	8009e54 <osThreadNew>
 800174c:	4603      	mov	r3, r0
 800174e:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <MX_FREERTOS_Init+0x168>)
 8001750:	6013      	str	r3, [r2, #0]

  /* creation of writeSetpoint */
  writeSetpointHandle = osThreadNew(writeSetpointFunc, NULL, &writeSetpoint_attributes);
 8001752:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <MX_FREERTOS_Init+0x16c>)
 8001754:	2100      	movs	r1, #0
 8001756:	4838      	ldr	r0, [pc, #224]	@ (8001838 <MX_FREERTOS_Init+0x170>)
 8001758:	f008 fb7c 	bl	8009e54 <osThreadNew>
 800175c:	4603      	mov	r3, r0
 800175e:	4a37      	ldr	r2, [pc, #220]	@ (800183c <MX_FREERTOS_Init+0x174>)
 8001760:	6013      	str	r3, [r2, #0]

  /* creation of readFromHost */
  readFromHostHandle = osThreadNew(readFromHostFunc, NULL, &readFromHost_attributes);
 8001762:	4a37      	ldr	r2, [pc, #220]	@ (8001840 <MX_FREERTOS_Init+0x178>)
 8001764:	2100      	movs	r1, #0
 8001766:	4837      	ldr	r0, [pc, #220]	@ (8001844 <MX_FREERTOS_Init+0x17c>)
 8001768:	f008 fb74 	bl	8009e54 <osThreadNew>
 800176c:	4603      	mov	r3, r0
 800176e:	4a36      	ldr	r2, [pc, #216]	@ (8001848 <MX_FREERTOS_Init+0x180>)
 8001770:	6013      	str	r3, [r2, #0]

  /* creation of readFromIMU */
  readFromIMUHandle = osThreadNew(readFromIMUFunc, NULL, &readFromIMU_attributes);
 8001772:	4a36      	ldr	r2, [pc, #216]	@ (800184c <MX_FREERTOS_Init+0x184>)
 8001774:	2100      	movs	r1, #0
 8001776:	4836      	ldr	r0, [pc, #216]	@ (8001850 <MX_FREERTOS_Init+0x188>)
 8001778:	f008 fb6c 	bl	8009e54 <osThreadNew>
 800177c:	4603      	mov	r3, r0
 800177e:	4a35      	ldr	r2, [pc, #212]	@ (8001854 <MX_FREERTOS_Init+0x18c>)
 8001780:	6013      	str	r3, [r2, #0]

  /* creation of updateControl */
  updateControlHandle = osThreadNew(updateControlFunc, NULL, &updateControl_attributes);
 8001782:	4a35      	ldr	r2, [pc, #212]	@ (8001858 <MX_FREERTOS_Init+0x190>)
 8001784:	2100      	movs	r1, #0
 8001786:	4835      	ldr	r0, [pc, #212]	@ (800185c <MX_FREERTOS_Init+0x194>)
 8001788:	f008 fb64 	bl	8009e54 <osThreadNew>
 800178c:	4603      	mov	r3, r0
 800178e:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <MX_FREERTOS_Init+0x198>)
 8001790:	6013      	str	r3, [r2, #0]

  /* creation of convertSetpoint */
  convertSetpointHandle = osThreadNew(convertSetpointToStepsFunc, NULL, &convertSetpoint_attributes);
 8001792:	4a34      	ldr	r2, [pc, #208]	@ (8001864 <MX_FREERTOS_Init+0x19c>)
 8001794:	2100      	movs	r1, #0
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <MX_FREERTOS_Init+0x1a0>)
 8001798:	f008 fb5c 	bl	8009e54 <osThreadNew>
 800179c:	4603      	mov	r3, r0
 800179e:	4a33      	ldr	r2, [pc, #204]	@ (800186c <MX_FREERTOS_Init+0x1a4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* creation of sendToHost */
  sendToHostHandle = osThreadNew(sendToHostFunc, NULL, &sendToHost_attributes);
 80017a2:	4a33      	ldr	r2, [pc, #204]	@ (8001870 <MX_FREERTOS_Init+0x1a8>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4833      	ldr	r0, [pc, #204]	@ (8001874 <MX_FREERTOS_Init+0x1ac>)
 80017a8:	f008 fb54 	bl	8009e54 <osThreadNew>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <MX_FREERTOS_Init+0x1b0>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* creation of moveYawMotor */
  moveYawMotorHandle = osThreadNew(moveYawMotorFunc, NULL, &moveYawMotor_attributes);
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <MX_FREERTOS_Init+0x1b4>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4832      	ldr	r0, [pc, #200]	@ (8001880 <MX_FREERTOS_Init+0x1b8>)
 80017b8:	f008 fb4c 	bl	8009e54 <osThreadNew>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a31      	ldr	r2, [pc, #196]	@ (8001884 <MX_FREERTOS_Init+0x1bc>)
 80017c0:	6013      	str	r3, [r2, #0]

  /* creation of moveRollMotor */
  moveRollMotorHandle = osThreadNew(moveRollMotorFunc, NULL, &moveRollMotor_attributes);
 80017c2:	4a31      	ldr	r2, [pc, #196]	@ (8001888 <MX_FREERTOS_Init+0x1c0>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4831      	ldr	r0, [pc, #196]	@ (800188c <MX_FREERTOS_Init+0x1c4>)
 80017c8:	f008 fb44 	bl	8009e54 <osThreadNew>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a30      	ldr	r2, [pc, #192]	@ (8001890 <MX_FREERTOS_Init+0x1c8>)
 80017d0:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of hostImuEvent */
  hostImuEventHandle = osEventFlagsNew(&hostImuEvent_attributes);
 80017d2:	4830      	ldr	r0, [pc, #192]	@ (8001894 <MX_FREERTOS_Init+0x1cc>)
 80017d4:	f008 fcba 	bl	800a14c <osEventFlagsNew>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a2f      	ldr	r2, [pc, #188]	@ (8001898 <MX_FREERTOS_Init+0x1d0>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	080203ac 	.word	0x080203ac
 80017e8:	20004dc4 	.word	0x20004dc4
 80017ec:	2000f908 	.word	0x2000f908
 80017f0:	0802034c 	.word	0x0802034c
 80017f4:	20004db4 	.word	0x20004db4
 80017f8:	08020364 	.word	0x08020364
 80017fc:	20004db8 	.word	0x20004db8
 8001800:	0802037c 	.word	0x0802037c
 8001804:	20004dbc 	.word	0x20004dbc
 8001808:	08020394 	.word	0x08020394
 800180c:	20004dc0 	.word	0x20004dc0
 8001810:	080201c0 	.word	0x080201c0
 8001814:	0800189d 	.word	0x0800189d
 8001818:	20001e00 	.word	0x20001e00
 800181c:	080201e4 	.word	0x080201e4
 8001820:	080018b5 	.word	0x080018b5
 8001824:	20004d8c 	.word	0x20004d8c
 8001828:	08020208 	.word	0x08020208
 800182c:	08001955 	.word	0x08001955
 8001830:	20004d90 	.word	0x20004d90
 8001834:	0802022c 	.word	0x0802022c
 8001838:	080019a1 	.word	0x080019a1
 800183c:	20004d94 	.word	0x20004d94
 8001840:	08020250 	.word	0x08020250
 8001844:	08001a19 	.word	0x08001a19
 8001848:	20004d98 	.word	0x20004d98
 800184c:	08020274 	.word	0x08020274
 8001850:	08001a71 	.word	0x08001a71
 8001854:	20004d9c 	.word	0x20004d9c
 8001858:	08020298 	.word	0x08020298
 800185c:	08001ab1 	.word	0x08001ab1
 8001860:	20004da0 	.word	0x20004da0
 8001864:	080202bc 	.word	0x080202bc
 8001868:	08001d35 	.word	0x08001d35
 800186c:	20004da4 	.word	0x20004da4
 8001870:	080202e0 	.word	0x080202e0
 8001874:	08001e01 	.word	0x08001e01
 8001878:	20004da8 	.word	0x20004da8
 800187c:	08020304 	.word	0x08020304
 8001880:	08001e1d 	.word	0x08001e1d
 8001884:	20004dac 	.word	0x20004dac
 8001888:	08020328 	.word	0x08020328
 800188c:	08001e7d 	.word	0x08001e7d
 8001890:	20004db0 	.word	0x20004db0
 8001894:	080203bc 	.word	0x080203bc
 8001898:	20004dc8 	.word	0x20004dc8

0800189c <defaultTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTaskFunc */
void defaultTaskFunc(void *argument)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//uint32_t valor_flag = osThreadFlagsSet(readFromHostHandle, 0x01);
	//osEventFlagsSet(hostImuEventHandle,0x01);
    vMyMicroros();
 80018a4:	f001 fae8 	bl	8002e78 <vMyMicroros>
    osDelay(1000);
 80018a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ac:	f008 fc33 	bl	800a116 <osDelay>
    vMyMicroros();
 80018b0:	bf00      	nop
 80018b2:	e7f7      	b.n	80018a4 <defaultTaskFunc+0x8>

080018b4 <BT_uart_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BT_uart_func */
void BT_uart_func(void *argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BT_uart_func */

  /* Infinite loop */
  printf("\r\nbluetooth IS on\r\n");
 80018bc:	481c      	ldr	r0, [pc, #112]	@ (8001930 <BT_uart_func+0x7c>)
 80018be:	f01c f909 	bl	801dad4 <puts>
  for(;;)
  {
    HAL_UART_Receive_IT(&huart5, &ucUartInputChar, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	491b      	ldr	r1, [pc, #108]	@ (8001934 <BT_uart_func+0x80>)
 80018c6:	481c      	ldr	r0, [pc, #112]	@ (8001938 <BT_uart_func+0x84>)
 80018c8:	f005 fe1e 	bl	8007508 <HAL_UART_Receive_IT>

    // If buffer size differs from printed amount, print until they match
    while ( usLastPrintedIndex != usBufferIndex ){
 80018cc:	e025      	b.n	800191a <BT_uart_func+0x66>

      printf("bluetooth int: ");
 80018ce:	481b      	ldr	r0, [pc, #108]	@ (800193c <BT_uart_func+0x88>)
 80018d0:	f01c f898 	bl	801da04 <iprintf>
      if ( ucUartInputBuffer[usLastPrintedIndex] == '0')
 80018d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001940 <BT_uart_func+0x8c>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <BT_uart_func+0x90>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	2b30      	cmp	r3, #48	@ 0x30
 80018e0:	d103      	bne.n	80018ea <BT_uart_func+0x36>
        printf("KEY_RELEASED");
 80018e2:	4819      	ldr	r0, [pc, #100]	@ (8001948 <BT_uart_func+0x94>)
 80018e4:	f01c f88e 	bl	801da04 <iprintf>
 80018e8:	e007      	b.n	80018fa <BT_uart_func+0x46>
      else
        printf((char *) &( ucUartInputBuffer[usLastPrintedIndex] ));
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <BT_uart_func+0x8c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <BT_uart_func+0x90>)
 80018f2:	4413      	add	r3, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f01c f885 	bl	801da04 <iprintf>
      usLastPrintedIndex++;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <BT_uart_func+0x8c>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <BT_uart_func+0x8c>)
 8001904:	801a      	strh	r2, [r3, #0]


      printf("\r\n");
 8001906:	4811      	ldr	r0, [pc, #68]	@ (800194c <BT_uart_func+0x98>)
 8001908:	f01c f8e4 	bl	801dad4 <puts>
      if (usLastPrintedIndex >  UART_BUFFER_SIZE - 1)
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <BT_uart_func+0x8c>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	2bff      	cmp	r3, #255	@ 0xff
 8001912:	d902      	bls.n	800191a <BT_uart_func+0x66>
        usLastPrintedIndex = 0;
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <BT_uart_func+0x8c>)
 8001916:	2200      	movs	r2, #0
 8001918:	801a      	strh	r2, [r3, #0]
    while ( usLastPrintedIndex != usBufferIndex ){
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <BT_uart_func+0x8c>)
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <BT_uart_func+0x9c>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d1d3      	bne.n	80018ce <BT_uart_func+0x1a>
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001926:	2004      	movs	r0, #4
 8001928:	f008 fbf5 	bl	800a116 <osDelay>
    HAL_UART_Receive_IT(&huart5, &ucUartInputChar, 1);
 800192c:	e7c9      	b.n	80018c2 <BT_uart_func+0xe>
 800192e:	bf00      	nop
 8001930:	080200b0 	.word	0x080200b0
 8001934:	20001cf8 	.word	0x20001cf8
 8001938:	2000fa7c 	.word	0x2000fa7c
 800193c:	080200c4 	.word	0x080200c4
 8001940:	20001dfc 	.word	0x20001dfc
 8001944:	20001cfc 	.word	0x20001cfc
 8001948:	080200d4 	.word	0x080200d4
 800194c:	080200e4 	.word	0x080200e4
 8001950:	20001cfa 	.word	0x20001cfa

08001954 <printGateKeeperFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printGateKeeperFunc */
void printGateKeeperFunc(void *argument)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	@ 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  xPrintfMessage xIncommingMessage;
  /* Infinite loop */
  for(;;)
  {

    if (osMessageQueueGet(printfQueueHandle, &xIncommingMessage, 0x0, 10) == osOK){
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <printGateKeeperFunc+0x44>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	f107 010c 	add.w	r1, r7, #12
 8001964:	230a      	movs	r3, #10
 8001966:	2200      	movs	r2, #0
 8001968:	f008 fe86 	bl	800a678 <osMessageQueueGet>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <printGateKeeperFunc+0x3a>
    	if(HAL_UART_Transmit(&huart3,(uint8_t *)xIncommingMessage.pMessageBuffer, xIncommingMessage.iMessageLen, 100) != HAL_OK){
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	b29a      	uxth	r2, r3
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	1d19      	adds	r1, r3, #4
 800197c:	2364      	movs	r3, #100	@ 0x64
 800197e:	4807      	ldr	r0, [pc, #28]	@ (800199c <printGateKeeperFunc+0x48>)
 8001980:	f005 fd34 	bl	80073ec <HAL_UART_Transmit>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <printGateKeeperFunc+0x3a>
      //if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)xIncommingMessage.pMessageBuffer, xIncommingMessage.iMessageLen, 100) != HAL_OK){
        Error_Handler();
 800198a:	f001 f82f 	bl	80029ec <Error_Handler>
      }
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 800198e:	2004      	movs	r0, #4
 8001990:	f008 fbc1 	bl	800a116 <osDelay>
    if (osMessageQueueGet(printfQueueHandle, &xIncommingMessage, 0x0, 10) == osOK){
 8001994:	e7e2      	b.n	800195c <printGateKeeperFunc+0x8>
 8001996:	bf00      	nop
 8001998:	20004db4 	.word	0x20004db4
 800199c:	2000fb10 	.word	0x2000fb10

080019a0 <writeSetpointFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_writeSetpointFunc */
void writeSetpointFunc(void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN writeSetpointFunc */
  uint32_t uiThreadFlagsReturn = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    // wait for writeSetpointFunc task flag to be different from 0
    uiThreadFlagsReturn = osThreadFlagsWait(0x1, 0x11, 1000);
 80019ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b0:	2111      	movs	r1, #17
 80019b2:	2001      	movs	r0, #1
 80019b4:	f008 fb2e 	bl	800a014 <osThreadFlagsWait>
 80019b8:	60f8      	str	r0, [r7, #12]
    // if return is 0x1, read data from joystick
    // if return is 0x10, read data from host
    // else we loop and wait for the flag to be set
    if (uiThreadFlagsReturn == 0x1){
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10f      	bne.n	80019e0 <writeSetpointFunc+0x40>
      // read data from joystick
      xSetpointData.iDataFromJoystick = 1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	60da      	str	r2, [r3, #12]
      xSetpointData.fYaw = xJoystickDataIncoming.fYaw;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <writeSetpointFunc+0x70>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019cc:	6013      	str	r3, [r2, #0]
      xSetpointData.fRoll = xJoystickDataIncoming.fRoll;
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <writeSetpointFunc+0x70>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019d4:	6053      	str	r3, [r2, #4]
      xSetpointData.fPitch = xJoystickDataIncoming.fPitch;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <writeSetpointFunc+0x70>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019dc:	6093      	str	r3, [r2, #8]
 80019de:	e011      	b.n	8001a04 <writeSetpointFunc+0x64>
      
    }
    else if (uiThreadFlagsReturn == 0x10){
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d10e      	bne.n	8001a04 <writeSetpointFunc+0x64>
      // read data from host
      xSetpointData.iDataFromJoystick = 0;
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
      xSetpointData.fYaw = xHostData.fYaw;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <writeSetpointFunc+0x74>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019f2:	6013      	str	r3, [r2, #0]
      xSetpointData.fRoll = xHostData.fRoll;
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <writeSetpointFunc+0x74>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <writeSetpointFunc+0x6c>)
 80019fa:	6053      	str	r3, [r2, #4]
      xSetpointData.fPitch = xHostData.fPitch;      
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <writeSetpointFunc+0x74>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a02      	ldr	r2, [pc, #8]	@ (8001a0c <writeSetpointFunc+0x6c>)
 8001a02:	6093      	str	r3, [r2, #8]
    }
    osDelay(4);
 8001a04:	2004      	movs	r0, #4
 8001a06:	f008 fb86 	bl	800a116 <osDelay>
    uiThreadFlagsReturn = osThreadFlagsWait(0x1, 0x11, 1000);
 8001a0a:	e7cf      	b.n	80019ac <writeSetpointFunc+0xc>
 8001a0c:	20001ccc 	.word	0x20001ccc
 8001a10:	20001cec 	.word	0x20001cec
 8001a14:	20001cdc 	.word	0x20001cdc

08001a18 <readFromHostFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readFromHostFunc */
void readFromHostFunc(void *argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readFromHostFunc */
    // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
	xSetpoint angles;

	int i=0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
	osEventFlagsWait(hostImuEventHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <readFromHostFunc+0x4c>)
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2101      	movs	r1, #1
 8001a30:	f008 fc0e 	bl	800a250 <osEventFlagsWait>

	//vSetActuatorMsg(a_velocity);
//	xHostData.fYaw = angles.x;
//	xHostData.fRoll = angles.z;
//	xHostData.fPitch = angles.y;
	xHostData.fYaw = angles.fYaw;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <readFromHostFunc+0x50>)
 8001a38:	6013      	str	r3, [r2, #0]
	xHostData.fRoll = angles.fRoll;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <readFromHostFunc+0x50>)
 8001a3e:	6053      	str	r3, [r2, #4]
	xHostData.fPitch = angles.fPitch;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <readFromHostFunc+0x50>)
 8001a44:	6093      	str	r3, [r2, #8]
	xHostData.iDataFromJoystick = 0x10;
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <readFromHostFunc+0x50>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	60da      	str	r2, [r3, #12]
	osThreadFlagsSet(writeSetpointHandle, 0x10);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <readFromHostFunc+0x54>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2110      	movs	r1, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f008 fa90 	bl	8009f78 <osThreadFlagsSet>
	osDelay(DEFAULT_OSDELAY_LOOP);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f008 fb5c 	bl	800a116 <osDelay>
	osEventFlagsWait(hostImuEventHandle, 0x01, osFlagsWaitAll, osWaitForever);
 8001a5e:	bf00      	nop
 8001a60:	e7e0      	b.n	8001a24 <readFromHostFunc+0xc>
 8001a62:	bf00      	nop
 8001a64:	20004dc8 	.word	0x20004dc8
 8001a68:	20001cdc 	.word	0x20001cdc
 8001a6c:	20004d94 	.word	0x20004d94

08001a70 <readFromIMUFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readFromIMUFunc */
void readFromIMUFunc(void *argument)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readFromIMUFunc */
  
  MPU6050_Initialization();
 8001a78:	f7ff fc4a 	bl	8001310 <MPU6050_Initialization>
  /* Infinite loop */
  for(;;)
  {
    // IMUshouldUpdate semaphore is set to 1 when the IMU has new data
    if (osSemaphoreAcquire(IMUshouldUpdateHandle, 0) == osOK){
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <readFromIMUFunc+0x34>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f008 fcd2 	bl	800a42c <osSemaphoreAcquire>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <readFromIMUFunc+0x2c>
      MPU6050_ProcessData(&MPU6050);
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <readFromIMUFunc+0x38>)
 8001a90:	f7ff fe0c 	bl	80016ac <MPU6050_ProcessData>
      CalculateCompliFilter(&Angle, &MPU6050);
 8001a94:	4904      	ldr	r1, [pc, #16]	@ (8001aa8 <readFromIMUFunc+0x38>)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <readFromIMUFunc+0x3c>)
 8001a98:	f7ff fb80 	bl	800119c <CalculateCompliFilter>
      // printf("%f, %f, %f\r\n", Angle.ComFilt_roll,Angle.ComFilt_pitch,Angle.ComFilt_yaw);
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001a9c:	2004      	movs	r0, #4
 8001a9e:	f008 fb3a 	bl	800a116 <osDelay>
    if (osSemaphoreAcquire(IMUshouldUpdateHandle, 0) == osOK){
 8001aa2:	e7eb      	b.n	8001a7c <readFromIMUFunc+0xc>
 8001aa4:	20004dc4 	.word	0x20004dc4
 8001aa8:	20001c98 	.word	0x20001c98
 8001aac:	20001c74 	.word	0x20001c74

08001ab0 <updateControlFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlFunc */
void updateControlFunc(void *argument)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b0a2      	sub	sp, #136	@ 0x88
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateControlFunc */
  xIMUData xIMUDataIncoming = {0, 0, 0};
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  float xError[] = {0, 0, 0};
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	67bb      	str	r3, [r7, #120]	@ 0x78
  xIMUData xIMUDataPrevious = {0, 0, 0};
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  xIMUData xIMUDataErrorAccumulated = {0, 0, 0};
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	663b      	str	r3, [r7, #96]	@ 0x60
  float fMotorSpeedsDiff[4] = {0, 0, 0, 0};
 8001b04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]

  // we need a matrix to map the error to the motor speeds
  float fStateToMotorSpeedMatrix[4][3] = {
 8001b12:	4b80      	ldr	r3, [pc, #512]	@ (8001d14 <updateControlFunc+0x264>)
 8001b14:	f107 0418 	add.w	r4, r7, #24
 8001b18:	461d      	mov	r5, r3
 8001b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {1, 1, 1},
    {1, -1, -1},
    {-1, -1, 1},
    {-1, 1, -1}
  };
  float a_velocity[] = {500,500,500,500};
 8001b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d18 <updateControlFunc+0x268>)
 8001b2c:	f107 0408 	add.w	r4, r7, #8
 8001b30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vSetActuatorMsg(a_velocity);
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 f8c0 	bl	8002cc0 <vSetActuatorMsg>
  /* Infinite loop */
  for(;;)
  {

    if (osMessageQueueGet(IMUdataHandle, &xIMUDataIncoming, 0x0, 100) == osOK){
 8001b40:	4b76      	ldr	r3, [pc, #472]	@ (8001d1c <updateControlFunc+0x26c>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f008 fd94 	bl	800a678 <osMessageQueueGet>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 80d9 	bne.w	8001d0a <updateControlFunc+0x25a>
      xError[0] = xSetpointData.fYaw - xIMUDataIncoming.fYaw;
 8001b58:	4b71      	ldr	r3, [pc, #452]	@ (8001d20 <updateControlFunc+0x270>)
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
      xError[1] = xSetpointData.fRoll - xIMUDataIncoming.fRoll;
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <updateControlFunc+0x270>)
 8001b6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b70:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
      xError[2] = xSetpointData.fPitch - xIMUDataIncoming.fPitch;
 8001b7c:	4b68      	ldr	r3, [pc, #416]	@ (8001d20 <updateControlFunc+0x270>)
 8001b7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b82:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

      xIMUDataErrorAccumulated.fYaw += xError[0];
 8001b8e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001b92:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      xIMUDataErrorAccumulated.fRoll += xError[1];
 8001b9e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001ba2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      xIMUDataErrorAccumulated.fPitch += xError[2];
 8001bae:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001bb2:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

      MATRIX_MULTIPLICATION(fMotorSpeedsDiff, fStateToMotorSpeedMatrix, xError);
 8001bbe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bc2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bce:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bda:	edd7 6a08 	vldr	s13, [r7, #32]
 8001bde:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 8001bee:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bf2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001bfe:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001c0e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8001c1e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001c22:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001c2e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001c3e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8001c4e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001c52:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5a:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001c5e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6a:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001c6e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      fMotorSpeeds[0] = fMotorSpeeds[0] + fMotorSpeedsDiff[0];
 8001c7e:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <updateControlFunc+0x274>)
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	4b25      	ldr	r3, [pc, #148]	@ (8001d24 <updateControlFunc+0x274>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
      fMotorSpeeds[1] = fMotorSpeeds[1] + fMotorSpeedsDiff[1];
 8001c92:	4b24      	ldr	r3, [pc, #144]	@ (8001d24 <updateControlFunc+0x274>)
 8001c94:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c98:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <updateControlFunc+0x274>)
 8001ca2:	edc3 7a01 	vstr	s15, [r3, #4]
      fMotorSpeeds[2] = fMotorSpeeds[2] + fMotorSpeedsDiff[2];
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <updateControlFunc+0x274>)
 8001ca8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cac:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <updateControlFunc+0x274>)
 8001cb6:	edc3 7a02 	vstr	s15, [r3, #8]
      fMotorSpeeds[3] = fMotorSpeeds[3] + fMotorSpeedsDiff[3];
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <updateControlFunc+0x274>)
 8001cbc:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cc0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <updateControlFunc+0x274>)
 8001cca:	edc3 7a03 	vstr	s15, [r3, #12]

      // we need to update the real motor angles that will move the IMU
      osMessageQueuePut(yawMotorNewAngleHandle, & xIMUDataIncoming.fYaw, 0, 1);
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <updateControlFunc+0x278>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f008 fc6d 	bl	800a5b8 <osMessageQueuePut>
      osMessageQueuePut(rollMotorNewAngleHandle, & xIMUDataIncoming.fRoll, 0, 1);
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <updateControlFunc+0x27c>)
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ce6:	1d19      	adds	r1, r3, #4
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2200      	movs	r2, #0
 8001cec:	f008 fc64 	bl	800a5b8 <osMessageQueuePut>

      // we need to update the motor speeds to micro
      osThreadFlagsSet(sendToHostHandle, 0x1);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d30 <updateControlFunc+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f008 f93e 	bl	8009f78 <osThreadFlagsSet>

      xIMUDataPrevious = xIMUDataIncoming;
 8001cfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d00:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001d04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      (void) xIMUDataPrevious; // just use to avoid warning, but would be necessary at PID
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001d0a:	2004      	movs	r0, #4
 8001d0c:	f008 fa03 	bl	800a116 <osDelay>
    if (osMessageQueueGet(IMUdataHandle, &xIMUDataIncoming, 0x0, 100) == osOK){
 8001d10:	e716      	b.n	8001b40 <updateControlFunc+0x90>
 8001d12:	bf00      	nop
 8001d14:	080200e8 	.word	0x080200e8
 8001d18:	08020118 	.word	0x08020118
 8001d1c:	20004dc0 	.word	0x20004dc0
 8001d20:	20001ccc 	.word	0x20001ccc
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20004db8 	.word	0x20004db8
 8001d2c:	20004dbc 	.word	0x20004dbc
 8001d30:	20004da8 	.word	0x20004da8

08001d34 <convertSetpointToStepsFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_convertSetpointToStepsFunc */
void convertSetpointToStepsFunc(void *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN convertSetpointToStepsFunc */
  // we know that  25 steps equals 45 degrees of the motor
  // a full rotation is 45 degrees * 8 = 360 degrees
  // but the gear diameter ratio is 1.5cm at motor to 8cm at IMU
  float fGearDiameterRatio = 8/1.5;
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <convertSetpointToStepsFunc+0xbc>)
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  float fMotorStepsToIMUFullRotation = 25 * fGearDiameterRatio;
 8001d40:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d44:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4c:	edc7 7a08 	vstr	s15, [r7, #32]
  xIMUData xIMUDataPrevious = {0, 0, 0};
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  float fNewAngleYaw = 0;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  float fNewAngleRoll = 0;
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    // wait thread flag to be set to 1
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001d6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d72:	2111      	movs	r1, #17
 8001d74:	2001      	movs	r0, #1
 8001d76:	f008 f94d 	bl	800a014 <osThreadFlagsWait>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d132      	bne.n	8001de6 <convertSetpointToStepsFunc+0xb2>
      // amount of steps to move the motor is the difference between the new angle and the previous angle
      // divided by the amount of steps to move the IMU a full rotation
      // we add to rollMotorNewAngleHandle and yawMotorNewAngleHandle
      fNewAngleYaw = (xSetpointData.fYaw - xIMUDataPrevious.fYaw) / fMotorStepsToIMUFullRotation;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <convertSetpointToStepsFunc+0xc0>)
 8001d82:	ed93 7a00 	vldr	s14, [r3]
 8001d86:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d96:	edc7 7a04 	vstr	s15, [r7, #16]
      fNewAngleRoll = (xSetpointData.fRoll - xIMUDataPrevious.fRoll) / fMotorStepsToIMUFullRotation;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <convertSetpointToStepsFunc+0xc0>)
 8001d9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001da0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001da8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db0:	edc7 7a03 	vstr	s15, [r7, #12]
      osMessageQueuePut(yawMotorNewAngleHandle, & fNewAngleYaw, 0, 100);
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <convertSetpointToStepsFunc+0xc4>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f107 0110 	add.w	r1, r7, #16
 8001dbc:	2364      	movs	r3, #100	@ 0x64
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f008 fbfa 	bl	800a5b8 <osMessageQueuePut>
      osMessageQueuePut(rollMotorNewAngleHandle, & fNewAngleRoll, 0, 100);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <convertSetpointToStepsFunc+0xc8>)
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	f107 010c 	add.w	r1, r7, #12
 8001dcc:	2364      	movs	r3, #100	@ 0x64
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f008 fbf2 	bl	800a5b8 <osMessageQueuePut>

      xIMUDataPrevious.fYaw = xSetpointData.fYaw;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <convertSetpointToStepsFunc+0xc0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	617b      	str	r3, [r7, #20]
      xIMUDataPrevious.fRoll = xSetpointData.fRoll;
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <convertSetpointToStepsFunc+0xc0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
      xIMUDataPrevious.fPitch = xSetpointData.fPitch;
 8001de0:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <convertSetpointToStepsFunc+0xc0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	61fb      	str	r3, [r7, #28]
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001de6:	2004      	movs	r0, #4
 8001de8:	f008 f995 	bl	800a116 <osDelay>
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001dec:	e7bf      	b.n	8001d6e <convertSetpointToStepsFunc+0x3a>
 8001dee:	bf00      	nop
 8001df0:	40aaaaab 	.word	0x40aaaaab
 8001df4:	20001ccc 	.word	0x20001ccc
 8001df8:	20004db8 	.word	0x20004db8
 8001dfc:	20004dbc 	.word	0x20004dbc

08001e00 <sendToHostFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendToHostFunc */
void sendToHostFunc(void *argument)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
/* Infinite loop */
  for(;;)
  {
    // if thread flag is set to 1, send data to host
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001e08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e0c:	2111      	movs	r1, #17
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f008 f900 	bl	800a014 <osThreadFlagsWait>
      // IVAN CODE HERE <--------------------------------------------------------------------------------------------------------
    }
    osDelay(DEFAULT_OSDELAY_LOOP);
 8001e14:	2004      	movs	r0, #4
 8001e16:	f008 f97e 	bl	800a116 <osDelay>
    if (osThreadFlagsWait(0x1, 0x11, 1000) == 0x1){
 8001e1a:	e7f5      	b.n	8001e08 <sendToHostFunc+0x8>

08001e1c <moveYawMotorFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveYawMotorFunc */
void moveYawMotorFunc(void *argument)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveYawMotorFunc */
  float fNewSteps;
  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(yawMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001e24:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <moveYawMotorFunc+0x5c>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f107 010c 	add.w	r1, r7, #12
 8001e2c:	2364      	movs	r3, #100	@ 0x64
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f008 fc22 	bl	800a678 <osMessageQueueGet>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <moveYawMotorFunc+0x52>
      step(fNewSteps, fNewSteps>0?1:0, STEP_MOTOR_MICRODELAY, M2_pin2_GPIO_Port, M2_pin2_Pin);
 8001e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001e42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	bfcc      	ite	gt
 8001e50:	2301      	movgt	r3, #1
 8001e52:	2300      	movle	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e66:	ee17 0a10 	vmov	r0, s14
 8001e6a:	f000 f85f 	bl	8001f2c <step>
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001e6e:	2004      	movs	r0, #4
 8001e70:	f008 f951 	bl	800a116 <osDelay>
    if (osMessageQueueGet(yawMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001e74:	e7d6      	b.n	8001e24 <moveYawMotorFunc+0x8>
 8001e76:	bf00      	nop
 8001e78:	20004db8 	.word	0x20004db8

08001e7c <moveRollMotorFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_moveRollMotorFunc */
void moveRollMotorFunc(void *argument)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN moveRollMotorFunc */
  float fNewSteps;
  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(rollMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <moveRollMotorFunc+0x58>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	f107 010c 	add.w	r1, r7, #12
 8001e8c:	2364      	movs	r3, #100	@ 0x64
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f008 fbf2 	bl	800a678 <osMessageQueueGet>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d117      	bne.n	8001eca <moveRollMotorFunc+0x4e>
      step(fNewSteps, fNewSteps>0?1:0, STEP_MOTOR_MICRODELAY, M1_pin2_GPIO_Port, M1_pin2_Pin);
 8001e9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001ea2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	bfcc      	ite	gt
 8001eb0:	2301      	movgt	r3, #1
 8001eb2:	2300      	movle	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2320      	movs	r3, #32
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <moveRollMotorFunc+0x5c>)
 8001ebe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ec2:	ee17 0a10 	vmov	r0, s14
 8001ec6:	f000 f831 	bl	8001f2c <step>
    }

    osDelay(DEFAULT_OSDELAY_LOOP);
 8001eca:	2004      	movs	r0, #4
 8001ecc:	f008 f923 	bl	800a116 <osDelay>
    if (osMessageQueueGet(rollMotorNewAngleHandle, &fNewSteps, 0x0, 100) == osOK){
 8001ed0:	e7d8      	b.n	8001e84 <moveRollMotorFunc+0x8>
 8001ed2:	bf00      	nop
 8001ed4:	20004dbc 	.word	0x20004dbc
 8001ed8:	48000400 	.word	0x48000400

08001edc <HAL_UART_RxCpltCallback>:
//                      The specific uart that              //
//                      triggered the interrupt.            //
// Output params:       n/a                                 //
// *****************************************************    //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if (huart == &huart5){
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_UART_RxCpltCallback+0x40>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_UART_RxCpltCallback+0x34>
    ucUartInputBuffer[usBufferIndex++] = ucUartInputChar;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <HAL_UART_RxCpltCallback+0x44>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	b291      	uxth	r1, r2
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_UART_RxCpltCallback+0x44>)
 8001ef6:	8011      	strh	r1, [r2, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_UART_RxCpltCallback+0x48>)
 8001efc:	7819      	ldrb	r1, [r3, #0]
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_UART_RxCpltCallback+0x4c>)
 8001f00:	5499      	strb	r1, [r3, r2]
    if(usBufferIndex > UART_BUFFER_SIZE - 1)
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_UART_RxCpltCallback+0x44>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2bff      	cmp	r3, #255	@ 0xff
 8001f08:	d902      	bls.n	8001f10 <HAL_UART_RxCpltCallback+0x34>
      usBufferIndex = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_UART_RxCpltCallback+0x44>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	801a      	strh	r2, [r3, #0]
  }
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	2000fa7c 	.word	0x2000fa7c
 8001f20:	20001cfa 	.word	0x20001cfa
 8001f24:	20001cf8 	.word	0x20001cf8
 8001f28:	20001cfc 	.word	0x20001cfc

08001f2c <step>:
//                      GPIO_Pin                            //
//                      The GPIO pin of the motor.          //
// Output params:       n/a                                 //
// *********************************************************//
void step(int steps, uint8_t direction, uint16_t delay, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	72fb      	strb	r3, [r7, #11]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	813b      	strh	r3, [r7, #8]
  int x;

  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, !direction);
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf0c      	ite	eq
 8001f44:	2301      	moveq	r3, #1
 8001f46:	2300      	movne	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	8c3b      	ldrh	r3, [r7, #32]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f002 fd27 	bl	80049a4 <HAL_GPIO_WritePin>
  for(x=0; x<steps; x=x+1)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e016      	b.n	8001f8a <step+0x5e>
  {
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 8001f5c:	8c3b      	ldrh	r3, [r7, #32]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f002 fd1e 	bl	80049a4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8001f68:	893b      	ldrh	r3, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f816 	bl	8001f9c <microDelay>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 8001f70:	8c3b      	ldrh	r3, [r7, #32]
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f002 fd14 	bl	80049a4 <HAL_GPIO_WritePin>
    microDelay(delay);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f80c 	bl	8001f9c <microDelay>
  for(x=0; x<steps; x=x+1)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dbe4      	blt.n	8001f5c <step+0x30>
  }
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <microDelay>:
// Input params:        delay                               //
//                      The delay in microseconds.          //
// Output params:       n/a                                 //
// *********************************************************//
void microDelay (uint16_t delay)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
  int a = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <microDelay+0x34>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  do{
    a = __HAL_TIM_GET_COUNTER(&htim1);
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <microDelay+0x34>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	60fb      	str	r3, [r7, #12]
  }while (a < delay);
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbf7      	blt.n	8001fb2 <microDelay+0x16>
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	2000f908 	.word	0x2000f908

08001fd4 <_write>:
//                      The length of the message.          //
// Output params:       len                                 //
//                      The length of the message.          //
// *********************************************************//
int _write(int file, char *ptr, int len)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	@ 0x38
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  xPrintfMessage xIncommingMessage;

  len = MIN(len, MAX_MESSAGE_LEN)+1; //+1 to '\0'
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	bfa8      	it	ge
 8001fe6:	2320      	movge	r3, #32
 8001fe8:	3301      	adds	r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
  xIncommingMessage.iMessageLen = len;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	617b      	str	r3, [r7, #20]
  strncpy(xIncommingMessage.pMessageBuffer, ptr, len);
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f01b ff07 	bl	801de0e <strncpy>
  xIncommingMessage.pMessageBuffer[len] = '\0';
 8002000:	f107 0218 	add.w	r2, r7, #24
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  osMessageQueuePut(printfQueueHandle, &xIncommingMessage, 0x0, 100);
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <_write+0x54>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	f107 0114 	add.w	r1, r7, #20
 8002014:	2364      	movs	r3, #100	@ 0x64
 8002016:	2200      	movs	r2, #0
 8002018:	f008 face 	bl	800a5b8 <osMessageQueuePut>
  return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3738      	adds	r7, #56	@ 0x38
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20004db4 	.word	0x20004db4

0800202c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002038:	f00a f85a 	bl	800c0f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800203c:	4b5a      	ldr	r3, [pc, #360]	@ (80021a8 <pvPortMallocMicroROS+0x17c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002044:	f000 f986 	bl	8002354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002048:	4b58      	ldr	r3, [pc, #352]	@ (80021ac <pvPortMallocMicroROS+0x180>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8090 	bne.w	8002176 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01e      	beq.n	800209a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800205c:	2208      	movs	r2, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f023 0307 	bic.w	r3, r3, #7
 8002074:	3308      	adds	r3, #8
 8002076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	e7fd      	b.n	8002096 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d06a      	beq.n	8002176 <pvPortMallocMicroROS+0x14a>
 80020a0:	4b43      	ldr	r3, [pc, #268]	@ (80021b0 <pvPortMallocMicroROS+0x184>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d865      	bhi.n	8002176 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020aa:	4b42      	ldr	r3, [pc, #264]	@ (80021b4 <pvPortMallocMicroROS+0x188>)
 80020ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020ae:	4b41      	ldr	r3, [pc, #260]	@ (80021b4 <pvPortMallocMicroROS+0x188>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020b4:	e004      	b.n	80020c0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d903      	bls.n	80020d2 <pvPortMallocMicroROS+0xa6>
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f1      	bne.n	80020b6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80020d2:	4b35      	ldr	r3, [pc, #212]	@ (80021a8 <pvPortMallocMicroROS+0x17c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d8:	429a      	cmp	r2, r3
 80020da:	d04c      	beq.n	8002176 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2208      	movs	r2, #8
 80020e2:	4413      	add	r3, r2
 80020e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	2308      	movs	r3, #8
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d920      	bls.n	8002140 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80020fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	613b      	str	r3, [r7, #16]
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800213a:	69b8      	ldr	r0, [r7, #24]
 800213c:	f000 f96c 	bl	8002418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <pvPortMallocMicroROS+0x184>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <pvPortMallocMicroROS+0x184>)
 800214c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800214e:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <pvPortMallocMicroROS+0x184>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <pvPortMallocMicroROS+0x18c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d203      	bcs.n	8002162 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <pvPortMallocMicroROS+0x184>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	@ (80021b8 <pvPortMallocMicroROS+0x18c>)
 8002160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <pvPortMallocMicroROS+0x180>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	431a      	orrs	r2, r3
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002176:	f009 ffc9 	bl	800c10c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	60fb      	str	r3, [r7, #12]
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800219c:	69fb      	ldr	r3, [r7, #28]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3728      	adds	r7, #40	@ 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000edd4 	.word	0x2000edd4
 80021ac:	2000ede0 	.word	0x2000ede0
 80021b0:	2000edd8 	.word	0x2000edd8
 80021b4:	2000edcc 	.word	0x2000edcc
 80021b8:	2000eddc 	.word	0x2000eddc

080021bc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04a      	beq.n	8002264 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80021ce:	2308      	movs	r3, #8
 80021d0:	425b      	negs	r3, r3
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4b22      	ldr	r3, [pc, #136]	@ (800226c <vPortFreeMicroROS+0xb0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <vPortFreeMicroROS+0x46>
	__asm volatile
 80021ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	60fb      	str	r3, [r7, #12]
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	e7fd      	b.n	80021fe <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <vPortFreeMicroROS+0x66>
	__asm volatile
 800220a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	60bb      	str	r3, [r7, #8]
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	e7fd      	b.n	800221e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <vPortFreeMicroROS+0xb0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d019      	beq.n	8002264 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d115      	bne.n	8002264 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <vPortFreeMicroROS+0xb0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	43db      	mvns	r3, r3
 8002242:	401a      	ands	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002248:	f009 ff52 	bl	800c0f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <vPortFreeMicroROS+0xb4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4413      	add	r3, r2
 8002256:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <vPortFreeMicroROS+0xb4>)
 8002258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800225a:	6938      	ldr	r0, [r7, #16]
 800225c:	f000 f8dc 	bl	8002418 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002260:	f009 ff54 	bl	800c10c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000ede0 	.word	0x2000ede0
 8002270:	2000edd8 	.word	0x2000edd8

08002274 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002280:	2308      	movs	r3, #8
 8002282:	425b      	negs	r3, r3
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4413      	add	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <getBlockSize+0x38>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	43db      	mvns	r3, r3
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

	return count;
 800229c:	68fb      	ldr	r3, [r7, #12]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	2000ede0 	.word	0x2000ede0

080022b0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80022ba:	f009 ff19 	bl	800c0f0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80022be:	6838      	ldr	r0, [r7, #0]
 80022c0:	f7ff feb4 	bl	800202c <pvPortMallocMicroROS>
 80022c4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d017      	beq.n	80022fc <pvPortReallocMicroROS+0x4c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d014      	beq.n	80022fc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffce 	bl	8002274 <getBlockSize>
 80022d8:	4603      	mov	r3, r0
 80022da:	2208      	movs	r2, #8
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d201      	bcs.n	80022ec <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f01b fe96 	bl	801e022 <memcpy>

		vPortFreeMicroROS(pv);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff60 	bl	80021bc <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80022fc:	f009 ff06 	bl	800c10c <xTaskResumeAll>

	return newmem;
 8002300:	68bb      	ldr	r3, [r7, #8]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002314:	f009 feec 	bl	800c0f0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f7ff fe82 	bl	800202c <pvPortMallocMicroROS>
 8002328:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800232e:	e004      	b.n	800233a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	613a      	str	r2, [r7, #16]
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	617a      	str	r2, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f5      	bne.n	8002330 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002344:	f009 fee2 	bl	800c10c <xTaskResumeAll>
  	return mem;
 8002348:	68fb      	ldr	r3, [r7, #12]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800235a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800235e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002360:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <prvHeapInit+0xac>)
 8002362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3307      	adds	r3, #7
 8002372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <prvHeapInit+0xac>)
 8002384:	4413      	add	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800238c:	4a1d      	ldr	r2, [pc, #116]	@ (8002404 <prvHeapInit+0xb0>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <prvHeapInit+0xb0>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80023a0:	2208      	movs	r2, #8
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0307 	bic.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a15      	ldr	r2, [pc, #84]	@ (8002408 <prvHeapInit+0xb4>)
 80023b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80023b6:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <prvHeapInit+0xb4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023be:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <prvHeapInit+0xb4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	1ad2      	subs	r2, r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <prvHeapInit+0xb4>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <prvHeapInit+0xb8>)
 80023e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a09      	ldr	r2, [pc, #36]	@ (8002410 <prvHeapInit+0xbc>)
 80023ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <prvHeapInit+0xc0>)
 80023ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20004dcc 	.word	0x20004dcc
 8002404:	2000edcc 	.word	0x2000edcc
 8002408:	2000edd4 	.word	0x2000edd4
 800240c:	2000eddc 	.word	0x2000eddc
 8002410:	2000edd8 	.word	0x2000edd8
 8002414:	2000ede0 	.word	0x2000ede0

08002418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <prvInsertBlockIntoFreeList+0xac>)
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e002      	b.n	800242c <prvInsertBlockIntoFreeList+0x14>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	d8f7      	bhi.n	8002426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d108      	bne.n	800245a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	441a      	add	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	441a      	add	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d118      	bne.n	80024a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <prvInsertBlockIntoFreeList+0xb0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d00d      	beq.n	8002496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	441a      	add	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e008      	b.n	80024a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <prvInsertBlockIntoFreeList+0xb0>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e003      	b.n	80024a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d002      	beq.n	80024b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	2000edcc 	.word	0x2000edcc
 80024c8:	2000edd4 	.word	0x2000edd4

080024cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <MX_DMA_Init+0x60>)
 80024d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d6:	4a15      	ldr	r2, [pc, #84]	@ (800252c <MX_DMA_Init+0x60>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <MX_DMA_Init+0x60>)
 80024e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <MX_DMA_Init+0x60>)
 80024ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ee:	4a0f      	ldr	r2, [pc, #60]	@ (800252c <MX_DMA_Init+0x60>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <MX_DMA_Init+0x60>)
 80024f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	200b      	movs	r0, #11
 8002508:	f001 fd64 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800250c:	200b      	movs	r0, #11
 800250e:	f001 fd7b 	bl	8004008 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2105      	movs	r1, #5
 8002516:	200c      	movs	r0, #12
 8002518:	f001 fd5c 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800251c:	200c      	movs	r0, #12
 800251e:	f001 fd73 	bl	8004008 <HAL_NVIC_EnableIRQ>

}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800253e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002540:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002544:	4904      	ldr	r1, [pc, #16]	@ (8002558 <cubemx_transport_open+0x28>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f005 f8aa 	bl	80076a0 <HAL_UART_Receive_DMA>
    return true;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000ede4 	.word	0x2000ede4

0800255c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800256a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f005 f8e3 	bl	8007738 <HAL_UART_DMAStop>
    return true;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002590:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	2b20      	cmp	r3, #32
 800259a:	d11b      	bne.n	80025d4 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	6978      	ldr	r0, [r7, #20]
 80025a6:	f004 fffb 	bl	80075a0 <HAL_UART_Transmit_DMA>
 80025aa:	4603      	mov	r3, r0
 80025ac:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025ae:	e002      	b.n	80025b6 <cubemx_transport_write+0x3a>
            osDelay(1);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f007 fdb0 	bl	800a116 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d104      	bne.n	80025c6 <cubemx_transport_write+0x4a>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d1f4      	bne.n	80025b0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <cubemx_transport_write+0x54>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	e002      	b.n	80025d6 <cubemx_transport_write+0x5a>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80025d4:	2300      	movs	r3, #0
    }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80025f4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025fa:	b672      	cpsid	i
}
 80025fc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <cubemx_transport_read+0x9c>)
 800260e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002610:	b662      	cpsie	i
}
 8002612:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	3301      	adds	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800261a:	2001      	movs	r0, #1
 800261c:	f007 fd7b 	bl	800a116 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <cubemx_transport_read+0xa0>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b15      	ldr	r3, [pc, #84]	@ (800267c <cubemx_transport_read+0x9c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d103      	bne.n	8002634 <cubemx_transport_read+0x54>
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbe2      	blt.n	80025fa <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002638:	e011      	b.n	800265e <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <cubemx_transport_read+0xa0>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	440b      	add	r3, r1
 8002644:	490f      	ldr	r1, [pc, #60]	@ (8002684 <cubemx_transport_read+0xa4>)
 8002646:	5c8a      	ldrb	r2, [r1, r2]
 8002648:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800264a:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <cubemx_transport_read+0xa0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002654:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <cubemx_transport_read+0xa0>)
 8002656:	6013      	str	r3, [r2, #0]
        wrote++;
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	3301      	adds	r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <cubemx_transport_read+0xa0>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <cubemx_transport_read+0x9c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d003      	beq.n	8002672 <cubemx_transport_read+0x92>
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3e3      	bcc.n	800263a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002672:	69bb      	ldr	r3, [r7, #24]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000f5e8 	.word	0x2000f5e8
 8002680:	2000f5e4 	.word	0x2000f5e4
 8002684:	2000ede4 	.word	0x2000ede4

08002688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	@ 0x28
 800268c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	4a45      	ldr	r2, [pc, #276]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026aa:	4b43      	ldr	r3, [pc, #268]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b6:	4b40      	ldr	r3, [pc, #256]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ba:	4a3f      	ldr	r2, [pc, #252]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c2:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	4b3a      	ldr	r3, [pc, #232]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	4a39      	ldr	r2, [pc, #228]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026da:	4b37      	ldr	r3, [pc, #220]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ea:	4a33      	ldr	r2, [pc, #204]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f2:	4b31      	ldr	r3, [pc, #196]	@ (80027b8 <MX_GPIO_Init+0x130>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <MX_GPIO_Init+0x130>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <MX_GPIO_Init+0x130>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270a:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <MX_GPIO_Init+0x130>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|M2_pin2_Pin, GPIO_PIN_RESET);
 8002716:	2200      	movs	r2, #0
 8002718:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800271c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002720:	f002 f940 	bl	80049a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_pin1_Pin|M1_pin1_Pin|M1_pin2_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2138      	movs	r1, #56	@ 0x38
 8002728:	4824      	ldr	r0, [pc, #144]	@ (80027bc <MX_GPIO_Init+0x134>)
 800272a:	f002 f93b 	bl	80049a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800272e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002734:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	481e      	ldr	r0, [pc, #120]	@ (80027c0 <MX_GPIO_Init+0x138>)
 8002746:	f001 ffab 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|M2_pin2_Pin;
 800274a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002766:	f001 ff9b 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800276a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	480f      	ldr	r0, [pc, #60]	@ (80027bc <MX_GPIO_Init+0x134>)
 8002780:	f001 ff8e 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M2_pin1_Pin|M1_pin1_Pin|M1_pin2_Pin;
 8002784:	2338      	movs	r3, #56	@ 0x38
 8002786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002788:	2301      	movs	r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	4808      	ldr	r0, [pc, #32]	@ (80027bc <MX_GPIO_Init+0x134>)
 800279c:	f001 ff80 	bl	80046a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2105      	movs	r1, #5
 80027a4:	2028      	movs	r0, #40	@ 0x28
 80027a6:	f001 fc15 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027aa:	2028      	movs	r0, #40	@ 0x28
 80027ac:	f001 fc2c 	bl	8004008 <HAL_NVIC_EnableIRQ>

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	@ 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400
 80027c0:	48000800 	.word	0x48000800

080027c4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027ca:	4a1c      	ldr	r2, [pc, #112]	@ (800283c <MX_I2C2_Init+0x78>)
 80027cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10903294;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002840 <MX_I2C2_Init+0x7c>)
 80027d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80027d4:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027da:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027dc:	2201      	movs	r2, #1
 80027de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027e0:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027ec:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <MX_I2C2_Init+0x74>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027fe:	480e      	ldr	r0, [pc, #56]	@ (8002838 <MX_I2C2_Init+0x74>)
 8002800:	f002 f925 	bl	8004a4e <HAL_I2C_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800280a:	f000 f8ef 	bl	80029ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800280e:	2100      	movs	r1, #0
 8002810:	4809      	ldr	r0, [pc, #36]	@ (8002838 <MX_I2C2_Init+0x74>)
 8002812:	f002 fea7 	bl	8005564 <HAL_I2CEx_ConfigAnalogFilter>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800281c:	f000 f8e6 	bl	80029ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002820:	2100      	movs	r1, #0
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_I2C2_Init+0x74>)
 8002824:	f002 fee9 	bl	80055fa <HAL_I2CEx_ConfigDigitalFilter>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800282e:	f000 f8dd 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000f5ec 	.word	0x2000f5ec
 800283c:	40005800 	.word	0x40005800
 8002840:	10903294 	.word	0x10903294

08002844 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b09e      	sub	sp, #120	@ 0x78
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	2254      	movs	r2, #84	@ 0x54
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f01b faab 	bl	801ddc0 <memset>
  if(i2cHandle->Instance==I2C2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <HAL_I2C_MspInit+0xa8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d137      	bne.n	80028e4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fd1b 	bl	80062bc <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800288c:	f000 f8ae 	bl	80029ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <HAL_I2C_MspInit+0xac>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002894:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <HAL_I2C_MspInit+0xac>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <HAL_I2C_MspInit+0xac>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ae:	2312      	movs	r3, #18
 80028b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028ba:	2304      	movs	r3, #4
 80028bc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028c2:	4619      	mov	r1, r3
 80028c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028c8:	f001 feea 	bl	80046a0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_I2C_MspInit+0xac>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	4a07      	ldr	r2, [pc, #28]	@ (80028f0 <HAL_I2C_MspInit+0xac>)
 80028d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_I2C_MspInit+0xac>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80028e4:	bf00      	nop
 80028e6:	3778      	adds	r7, #120	@ 0x78
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40005800 	.word	0x40005800
 80028f0:	40021000 	.word	0x40021000

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f8:	f001 fa7d 	bl	8003df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fc:	f000 f818 	bl	8002930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002900:	f7ff fec2 	bl	8002688 <MX_GPIO_Init>
  MX_DMA_Init();
 8002904:	f7ff fde2 	bl	80024cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002908:	f000 ff60 	bl	80037cc <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 800290c:	f7ff ff5a 	bl	80027c4 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8002910:	f001 f83e 	bl	8003990 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002914:	f000 fee6 	bl	80036e4 <MX_TIM1_Init>
  MX_UART5_Init();
 8002918:	f000 ffee 	bl	80038f8 <MX_UART5_Init>
  MX_UART4_Init();
 800291c:	f000 ffa0 	bl	8003860 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002920:	f007 fa4e 	bl	8009dc0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002924:	f7fe fed0 	bl	80016c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002928:	f007 fa6e 	bl	8009e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <main+0x38>

08002930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b094      	sub	sp, #80	@ 0x50
 8002934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002936:	f107 0318 	add.w	r3, r7, #24
 800293a:	2238      	movs	r2, #56	@ 0x38
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f01b fa3e 	bl	801ddc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002952:	2000      	movs	r0, #0
 8002954:	f002 fe9e 	bl	8005694 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002958:	2302      	movs	r3, #2
 800295a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800295c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002962:	2340      	movs	r3, #64	@ 0x40
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002966:	2302      	movs	r3, #2
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800296a:	2302      	movs	r3, #2
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800296e:	2304      	movs	r3, #4
 8002970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002972:	2355      	movs	r3, #85	@ 0x55
 8002974:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002976:	2302      	movs	r3, #2
 8002978:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800297a:	2302      	movs	r3, #2
 800297c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800297e:	2302      	movs	r3, #2
 8002980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002982:	f107 0318 	add.w	r3, r7, #24
 8002986:	4618      	mov	r0, r3
 8002988:	f002 ff38 	bl	80057fc <HAL_RCC_OscConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002992:	f000 f82b 	bl	80029ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002996:	230f      	movs	r3, #15
 8002998:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299a:	2303      	movs	r3, #3
 800299c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2104      	movs	r1, #4
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fa36 	bl	8005e20 <HAL_RCC_ClockConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029ba:	f000 f817 	bl	80029ec <Error_Handler>
  }
}
 80029be:	bf00      	nop
 80029c0:	3750      	adds	r7, #80	@ 0x50
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029da:	f001 fa25 	bl	8003e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40001000 	.word	0x40001000

080029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f4:	bf00      	nop
 80029f6:	e7fd      	b.n	80029f4 <Error_Handler+0x8>

080029f8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <microros_allocate+0x3c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <microros_allocate+0x3c>)
 8002a10:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <microros_allocate+0x40>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <microros_allocate+0x40>)
 8002a20:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fb02 	bl	800202c <pvPortMallocMicroROS>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000f640 	.word	0x2000f640
 8002a38:	2000f644 	.word	0x2000f644

08002a3c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00c      	beq.n	8002a66 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fc11 	bl	8002274 <getBlockSize>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <microros_deallocate+0x34>)
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <microros_deallocate+0x34>)
 8002a5e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fbab 	bl	80021bc <vPortFreeMicroROS>
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000f644 	.word	0x2000f644

08002a74 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <microros_reallocate+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <microros_reallocate+0x64>)
 8002a8e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <microros_reallocate+0x68>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4413      	add	r3, r2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <microros_reallocate+0x68>)
 8002a9e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002aa6:	68b8      	ldr	r0, [r7, #8]
 8002aa8:	f7ff fac0 	bl	800202c <pvPortMallocMicroROS>
 8002aac:	4603      	mov	r3, r0
 8002aae:	e00e      	b.n	8002ace <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fbdf 	bl	8002274 <getBlockSize>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <microros_reallocate+0x68>)
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <microros_reallocate+0x68>)
 8002ac2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff fbf2 	bl	80022b0 <pvPortReallocMicroROS>
 8002acc:	4603      	mov	r3, r0
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000f640 	.word	0x2000f640
 8002adc:	2000f644 	.word	0x2000f644

08002ae0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a0c      	ldr	r2, [pc, #48]	@ (8002b28 <microros_zero_allocate+0x48>)
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <microros_zero_allocate+0x48>)
 8002afe:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a08      	ldr	r2, [pc, #32]	@ (8002b2c <microros_zero_allocate+0x4c>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <microros_zero_allocate+0x4c>)
 8002b12:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fbf7 	bl	800230a <pvPortCallocMicroROS>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	2000f640 	.word	0x2000f640
 8002b2c:	2000f644 	.word	0x2000f644

08002b30 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002b42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b46:	a320      	add	r3, pc, #128	@ (adr r3, 8002bc8 <UTILS_NanosecondsToTimespec+0x98>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fe f88c 	bl	8000c68 <__aeabi_ldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b5e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002bc8 <UTILS_NanosecondsToTimespec+0x98>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fe f880 	bl	8000c68 <__aeabi_ldivmod>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	da20      	bge.n	8002bb6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a11      	ldr	r2, [pc, #68]	@ (8002bc0 <UTILS_NanosecondsToTimespec+0x90>)
 8002b7a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7e:	1712      	asrs	r2, r2, #28
 8002b80:	17db      	asrs	r3, r3, #31
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	6979      	ldr	r1, [r7, #20]
 8002b90:	17c8      	asrs	r0, r1, #31
 8002b92:	460c      	mov	r4, r1
 8002b94:	4605      	mov	r5, r0
 8002b96:	ebb2 0804 	subs.w	r8, r2, r4
 8002b9a:	eb63 0905 	sbc.w	r9, r3, r5
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4906      	ldr	r1, [pc, #24]	@ (8002bc4 <UTILS_NanosecondsToTimespec+0x94>)
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
    }
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bc0:	44b82fa1 	.word	0x44b82fa1
 8002bc4:	3b9aca00 	.word	0x3b9aca00
 8002bc8:	3b9aca00 	.word	0x3b9aca00
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd4:	b08e      	sub	sp, #56	@ 0x38
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002bda:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002bdc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002be0:	2300      	movs	r3, #0
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f009 fdae 	bl	800c758 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfe:	17da      	asrs	r2, r3, #31
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	61fa      	str	r2, [r7, #28]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	000b      	movs	r3, r1
 8002c10:	2200      	movs	r2, #0
 8002c12:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	461c      	mov	r4, r3
 8002c1c:	4615      	mov	r5, r2
 8002c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c22:	1911      	adds	r1, r2, r4
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	416b      	adcs	r3, r5
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c2e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002c32:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	f04f 0400 	mov.w	r4, #0
 8002c3e:	f04f 0500 	mov.w	r5, #0
 8002c42:	015d      	lsls	r5, r3, #5
 8002c44:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002c48:	0154      	lsls	r4, r2, #5
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	ebb2 0800 	subs.w	r8, r2, r0
 8002c52:	eb63 0901 	sbc.w	r9, r3, r1
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002c62:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002c66:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002c6a:	4690      	mov	r8, r2
 8002c6c:	4699      	mov	r9, r3
 8002c6e:	eb18 0a00 	adds.w	sl, r8, r0
 8002c72:	eb49 0b01 	adc.w	fp, r9, r1
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c82:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c86:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c8a:	ebb2 040a 	subs.w	r4, r2, sl
 8002c8e:	603c      	str	r4, [r7, #0]
 8002c90:	eb63 030b 	sbc.w	r3, r3, fp
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	181b      	adds	r3, r3, r0
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	eb41 0303 	adc.w	r3, r1, r3
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cae:	f7ff ff3f 	bl	8002b30 <UTILS_NanosecondsToTimespec>

    return 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3738      	adds	r7, #56	@ 0x38
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002cc0 <vSetActuatorMsg>:
	 * velocity: []
	 * normalized: []

*************************************************************************/

void vSetActuatorMsg(float *fpVelocity){
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	velocity_msg.velocity.data[0] = fpVelocity[0];
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8002d4c <vSetActuatorMsg+0x8c>)
 8002cce:	6a14      	ldr	r4, [r2, #32]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc71 	bl	80005b8 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[1] = fpVelocity[1];
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <vSetActuatorMsg+0x8c>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f103 0408 	add.w	r4, r3, #8
 8002cec:	4610      	mov	r0, r2
 8002cee:	f7fd fc63 	bl	80005b8 <__aeabi_f2d>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[2] = fpVelocity[2];
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <vSetActuatorMsg+0x8c>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f103 0410 	add.w	r4, r3, #16
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7fd fc55 	bl	80005b8 <__aeabi_f2d>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[3] = fpVelocity[3];
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <vSetActuatorMsg+0x8c>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f103 0418 	add.w	r4, r3, #24
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fd fc47 	bl	80005b8 <__aeabi_f2d>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[4] = imu_msg.linear_acceleration.z;
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <vSetActuatorMsg+0x8c>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f103 0120 	add.w	r1, r3, #32
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <vSetActuatorMsg+0x90>)
 8002d3c:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002d40:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}
 8002d4c:	2000f654 	.word	0x2000f654
 8002d50:	2000f690 	.word	0x2000f690

08002d54 <vFirstSetActuatorMsg>:
   	   	   	   	   	   	memory with every message sent, at some point we will
   	   	   	   	   	   	run out of memory.

*************************************************************************/

void vFirstSetActuatorMsg(float *fpVelocity){
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	velocity_msg.header.frame_id.capacity = 20;
 8002d5c:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d5e:	2214      	movs	r2, #20
 8002d60:	611a      	str	r2, [r3, #16]
	velocity_msg.header.frame_id.data = (char*) pvPortMalloc(velocity_msg.header.frame_id.capacity  * sizeof(char));
 8002d62:	4b30      	ldr	r3, [pc, #192]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f00b f850 	bl	800de0c <pvPortMalloc>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d70:	6093      	str	r3, [r2, #8]
	velocity_msg.header.frame_id.size = strlen(velocity_msg.header.frame_id.data);
 8002d72:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fab2 	bl	80002e0 <strlen>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a29      	ldr	r2, [pc, #164]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d80:	60d3      	str	r3, [r2, #12]

	velocity_msg.velocity.capacity = 5;
 8002d82:	4b28      	ldr	r3, [pc, #160]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d84:	2205      	movs	r2, #5
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
	velocity_msg.velocity.data = (double*) pvPortMalloc(velocity_msg.velocity.capacity * sizeof(double));
 8002d88:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00b f83c 	bl	800de0c <pvPortMalloc>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a23      	ldr	r2, [pc, #140]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002d98:	6213      	str	r3, [r2, #32]
	velocity_msg.velocity.data[0] = fpVelocity[0];
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002da0:	6a14      	ldr	r4, [r2, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fc08 	bl	80005b8 <__aeabi_f2d>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[1] = fpVelocity[1];
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f103 0408 	add.w	r4, r3, #8
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f7fd fbfa 	bl	80005b8 <__aeabi_f2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[2] = fpVelocity[2];
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3308      	adds	r3, #8
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f103 0410 	add.w	r4, r3, #16
 8002dda:	4610      	mov	r0, r2
 8002ddc:	f7fd fbec 	bl	80005b8 <__aeabi_f2d>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[3] = fpVelocity[3];
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	330c      	adds	r3, #12
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f103 0418 	add.w	r4, r3, #24
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fd fbde 	bl	80005b8 <__aeabi_f2d>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	e9c4 2300 	strd	r2, r3, [r4]
	velocity_msg.velocity.data[4] = imu_msg.linear_acceleration.z;
 8002e04:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f103 0120 	add.w	r1, r3, #32
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <vFirstSetActuatorMsg+0xd4>)
 8002e0e:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8002e12:	e9c1 2300 	strd	r2, r3, [r1]
	velocity_msg.velocity.size = 5;
 8002e16:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <vFirstSetActuatorMsg+0xd0>)
 8002e18:	2205      	movs	r2, #5
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	2000f654 	.word	0x2000f654
 8002e28:	2000f690 	.word	0x2000f690

08002e2c <vSendActuatorMsg>:
	Output params:       n/a

	Extra:

*************************************************************************/
void vSendActuatorMsg(){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	i32PubMessageState = rcl_publish(&velocity_pub, &velocity_msg, NULL);
 8002e30:	2200      	movs	r2, #0
 8002e32:	4904      	ldr	r1, [pc, #16]	@ (8002e44 <vSendActuatorMsg+0x18>)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <vSendActuatorMsg+0x1c>)
 8002e36:	f00c f8e9 	bl	800f00c <rcl_publish>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a03      	ldr	r2, [pc, #12]	@ (8002e4c <vSendActuatorMsg+0x20>)
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	2000f654 	.word	0x2000f654
 8002e48:	2000f64c 	.word	0x2000f64c
 8002e4c:	2000f8b0 	.word	0x2000f8b0

08002e50 <vImuCallback>:
//		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
//	}
//
//}
void vImuCallback(const void * msgin)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	//const sensor_msgs__msg__Imu * minha_msg;
	if (msgin != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <vImuCallback+0x1a>
	{
		// Indica que houve leitura da IMU para a tarefa escrever setpoint
		osEventFlagsSet(hostImuEventHandle,0x01);
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <vImuCallback+0x24>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f007 f9b1 	bl	800a1cc <osEventFlagsSet>
		//float a_velocity[] = {5,10,100,500};
		//vSetActuatorMsg(a_velocity);
		//HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
	}

}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20004dc8 	.word	0x20004dc8

08002e78 <vMyMicroros>:
	Output params:       n/a

	Extra:

*************************************************************************/
void vMyMicroros(){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
	if(i32MicrorosConfiguration()==RCL_RET_OK && i32CreateNode()==RCL_RET_OK && rmw_uros_sync_session(1000) == RMW_RET_OK &&
 8002e7e:	f000 f893 	bl	8002fa8 <i32MicrorosConfiguration>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d13c      	bne.n	8002f02 <vMyMicroros+0x8a>
 8002e88:	f000 f956 	bl	8003138 <i32CreateNode>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d137      	bne.n	8002f02 <vMyMicroros+0x8a>
 8002e92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e96:	f00e ffe7 	bl	8011e68 <rmw_uros_sync_session>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d130      	bne.n	8002f02 <vMyMicroros+0x8a>
			i32CreatePublisher()==RCL_RET_OK && i32CreateSubscriber()==RCL_RET_OK && i32CreateExecutor()==RCL_RET_OK){
 8002ea0:	f000 f97a 	bl	8003198 <i32CreatePublisher>
 8002ea4:	4603      	mov	r3, r0
	if(i32MicrorosConfiguration()==RCL_RET_OK && i32CreateNode()==RCL_RET_OK && rmw_uros_sync_session(1000) == RMW_RET_OK &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d12b      	bne.n	8002f02 <vMyMicroros+0x8a>
			i32CreatePublisher()==RCL_RET_OK && i32CreateSubscriber()==RCL_RET_OK && i32CreateExecutor()==RCL_RET_OK){
 8002eaa:	f000 f9a3 	bl	80031f4 <i32CreateSubscriber>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d126      	bne.n	8002f02 <vMyMicroros+0x8a>
 8002eb4:	f000 f9cc 	bl	8003250 <i32CreateExecutor>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d121      	bne.n	8002f02 <vMyMicroros+0x8a>

		float a_velocity[] = {0,0,0,0};
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
		vFirstSetActuatorMsg(a_velocity);
 8002eca:	463b      	mov	r3, r7
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff41 	bl	8002d54 <vFirstSetActuatorMsg>
		 * is configured to be one second.
		 * https://micro.ros.org/docs/tutorials/programming_rcl_rclc/executor/
		 */

		// Run executor
		rcl_ret_t ret = rclc_executor_spin_some(&executor,1000*(1000*1000));
 8002ed2:	a32b      	add	r3, pc, #172	@ (adr r3, 8002f80 <vMyMicroros+0x108>)
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	482b      	ldr	r0, [pc, #172]	@ (8002f88 <vMyMicroros+0x110>)
 8002eda:	f00d f999 	bl	8010210 <rclc_executor_spin_some>
 8002ede:	6178      	str	r0, [r7, #20]
		//rclc_executor_spin(&executor);
		while(RCL_RET_OK==ret){
 8002ee0:	e00a      	b.n	8002ef8 <vMyMicroros+0x80>

			if(i32PubMessageState!=RCL_RET_OK){
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f8c <vMyMicroros+0x114>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <vMyMicroros+0x88>
				break;
			}
			ret = rclc_executor_spin_some(&executor,1000*(1000*1000));
 8002eea:	a325      	add	r3, pc, #148	@ (adr r3, 8002f80 <vMyMicroros+0x108>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	4825      	ldr	r0, [pc, #148]	@ (8002f88 <vMyMicroros+0x110>)
 8002ef2:	f00d f98d 	bl	8010210 <rclc_executor_spin_some>
 8002ef6:	6178      	str	r0, [r7, #20]
		while(RCL_RET_OK==ret){
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f1      	beq.n	8002ee2 <vMyMicroros+0x6a>
 8002efe:	e000      	b.n	8002f02 <vMyMicroros+0x8a>
				break;
 8002f00:	bf00      	nop
		}

	}
	rcl_ret_t rc;
	rc = rclc_executor_fini(&executor);
 8002f02:	4821      	ldr	r0, [pc, #132]	@ (8002f88 <vMyMicroros+0x110>)
 8002f04:	f00d f8ac 	bl	8010060 <rclc_executor_fini>
 8002f08:	6138      	str	r0, [r7, #16]
	rc += rcl_publisher_fini(&velocity_pub, &node);
 8002f0a:	4921      	ldr	r1, [pc, #132]	@ (8002f90 <vMyMicroros+0x118>)
 8002f0c:	4821      	ldr	r0, [pc, #132]	@ (8002f94 <vMyMicroros+0x11c>)
 8002f0e:	f00c f817 	bl	800ef40 <rcl_publisher_fini>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
	rc += rcl_timer_fini(&timer);
 8002f1a:	481f      	ldr	r0, [pc, #124]	@ (8002f98 <vMyMicroros+0x120>)
 8002f1c:	f00c fbaa 	bl	800f674 <rcl_timer_fini>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
	rc += rcl_subscription_fini(&imu_sub, &node);
 8002f28:	4919      	ldr	r1, [pc, #100]	@ (8002f90 <vMyMicroros+0x118>)
 8002f2a:	481c      	ldr	r0, [pc, #112]	@ (8002f9c <vMyMicroros+0x124>)
 8002f2c:	f00c f962 	bl	800f1f4 <rcl_subscription_fini>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
	rc += rcl_node_fini(&node);
 8002f38:	4815      	ldr	r0, [pc, #84]	@ (8002f90 <vMyMicroros+0x118>)
 8002f3a:	f00b fea1 	bl	800ec80 <rcl_node_fini>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
	rc += rclc_support_fini(&support);
 8002f46:	4816      	ldr	r0, [pc, #88]	@ (8002fa0 <vMyMicroros+0x128>)
 8002f48:	f00d fafc 	bl	8010544 <rclc_support_fini>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
	i32PubMessageState=RCL_RET_OK;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <vMyMicroros+0x114>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
	vPortFree((void *)velocity_msg.header.frame_id.data); // Necessary to avoid running out of memory.
 8002f5a:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <vMyMicroros+0x12c>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f00b f822 	bl	800dfa8 <vPortFree>
	vPortFree((void *)velocity_msg.velocity.data);	// Necessary to avoid running out of memory.
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <vMyMicroros+0x12c>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00b f81d 	bl	800dfa8 <vPortFree>
	vFastBlinkOnError();
 8002f6e:	f000 f9f7 	bl	8003360 <vFastBlinkOnError>
	return;
 8002f72:	bf00      	nop
}
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	f3af 8000 	nop.w
 8002f80:	3b9aca00 	.word	0x3b9aca00
 8002f84:	00000000 	.word	0x00000000
 8002f88:	2000f820 	.word	0x2000f820
 8002f8c:	2000f8b0 	.word	0x2000f8b0
 8002f90:	2000f818 	.word	0x2000f818
 8002f94:	2000f64c 	.word	0x2000f64c
 8002f98:	2000f650 	.word	0x2000f650
 8002f9c:	2000f648 	.word	0x2000f648
 8002fa0:	2000f7e4 	.word	0x2000f7e4
 8002fa4:	2000f654 	.word	0x2000f654

08002fa8 <i32MicrorosConfiguration>:
   	   	   	   	   	   	If ret is RCL_RET_OK, this method was successful.

	Extra:

*************************************************************************/
rcl_ret_t i32MicrorosConfiguration(){
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b090      	sub	sp, #64	@ 0x40
 8002fac:	af02      	add	r7, sp, #8
	rmw_uros_set_custom_transport(
 8002fae:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <i32MicrorosConfiguration+0x160>)
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	4b56      	ldr	r3, [pc, #344]	@ (800310c <i32MicrorosConfiguration+0x164>)
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4b56      	ldr	r3, [pc, #344]	@ (8003110 <i32MicrorosConfiguration+0x168>)
 8002fb8:	4a56      	ldr	r2, [pc, #344]	@ (8003114 <i32MicrorosConfiguration+0x16c>)
 8002fba:	4957      	ldr	r1, [pc, #348]	@ (8003118 <i32MicrorosConfiguration+0x170>)
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f00d ffe3 	bl	8010f88 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f00d fbc4 	bl	8010754 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002fcc:	4b53      	ldr	r3, [pc, #332]	@ (800311c <i32MicrorosConfiguration+0x174>)
 8002fce:	61fb      	str	r3, [r7, #28]
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002fd0:	4b53      	ldr	r3, [pc, #332]	@ (8003120 <i32MicrorosConfiguration+0x178>)
 8002fd2:	623b      	str	r3, [r7, #32]
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002fd4:	4b53      	ldr	r3, [pc, #332]	@ (8003124 <i32MicrorosConfiguration+0x17c>)
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <i32MicrorosConfiguration+0x180>)
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00d fbd3 	bl	801078c <rcutils_set_default_allocator>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f083 0301 	eor.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <i32MicrorosConfiguration+0x54>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 8002ff2:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8002ff6:	484d      	ldr	r0, [pc, #308]	@ (800312c <i32MicrorosConfiguration+0x184>)
 8002ff8:	f01a fd04 	bl	801da04 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8002ffc:	4c4c      	ldr	r4, [pc, #304]	@ (8003130 <i32MicrorosConfiguration+0x188>)
 8002ffe:	463b      	mov	r3, r7
 8003000:	4618      	mov	r0, r3
 8003002:	f00d fbb5 	bl	8010770 <rcutils_get_default_allocator>
 8003006:	4625      	mov	r5, r4
 8003008:	463c      	mov	r4, r7
 800300a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	602b      	str	r3, [r5, #0]
	// Initialize and modify options (Set DOMAIN ID to 25)
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8003012:	f00b fbe9 	bl	800e7e8 <rcl_get_zero_initialized_init_options>
 8003016:	4603      	mov	r3, r0
 8003018:	61bb      	str	r3, [r7, #24]

	int i=0;
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
	rcl_ret_t ret;
	ret = rcl_init_options_init(&init_options, allocator);
 800301e:	4b44      	ldr	r3, [pc, #272]	@ (8003130 <i32MicrorosConfiguration+0x188>)
 8003020:	f107 0418 	add.w	r4, r7, #24
 8003024:	466d      	mov	r5, sp
 8003026:	f103 020c 	add.w	r2, r3, #12
 800302a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800302e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003034:	4620      	mov	r0, r4
 8003036:	f00b fbd9 	bl	800e7ec <rcl_init_options_init>
 800303a:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 800303c:	e011      	b.n	8003062 <i32MicrorosConfiguration+0xba>
		ret = rcl_init_options_init(&init_options, allocator);
 800303e:	4b3c      	ldr	r3, [pc, #240]	@ (8003130 <i32MicrorosConfiguration+0x188>)
 8003040:	f107 0418 	add.w	r4, r7, #24
 8003044:	466d      	mov	r5, sp
 8003046:	f103 020c 	add.w	r2, r3, #12
 800304a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800304e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003054:	4620      	mov	r0, r4
 8003056:	f00b fbc9 	bl	800e7ec <rcl_init_options_init>
 800305a:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	3301      	adds	r3, #1
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <i32MicrorosConfiguration+0xc8>
 8003068:	2201      	movs	r2, #1
 800306a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306c:	4293      	cmp	r3, r2
 800306e:	dbe6      	blt.n	800303e <i32MicrorosConfiguration+0x96>
	}
	if(ret != RCL_RET_OK){return ret;}
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <i32MicrorosConfiguration+0xd2>
 8003076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003078:	e041      	b.n	80030fe <i32MicrorosConfiguration+0x156>


	i=0;
 800307a:	2300      	movs	r3, #0
 800307c:	637b      	str	r3, [r7, #52]	@ 0x34
	ret = rcl_init_options_set_domain_id(&init_options, 25);
 800307e:	f107 0318 	add.w	r3, r7, #24
 8003082:	2119      	movs	r1, #25
 8003084:	4618      	mov	r0, r3
 8003086:	f00b fc93 	bl	800e9b0 <rcl_init_options_set_domain_id>
 800308a:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 800308c:	e009      	b.n	80030a2 <i32MicrorosConfiguration+0xfa>
		ret = rcl_init_options_set_domain_id(&init_options, 25);
 800308e:	f107 0318 	add.w	r3, r7, #24
 8003092:	2119      	movs	r1, #25
 8003094:	4618      	mov	r0, r3
 8003096:	f00b fc8b 	bl	800e9b0 <rcl_init_options_set_domain_id>
 800309a:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	3301      	adds	r3, #1
 80030a0:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <i32MicrorosConfiguration+0x108>
 80030a8:	2201      	movs	r2, #1
 80030aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ac:	4293      	cmp	r3, r2
 80030ae:	dbee      	blt.n	800308e <i32MicrorosConfiguration+0xe6>
	}
	if(ret != RCL_RET_OK){return ret;}
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <i32MicrorosConfiguration+0x112>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	e021      	b.n	80030fe <i32MicrorosConfiguration+0x156>

	// Initialize rclc support object with custom options
	i=0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
	ret = rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80030be:	f107 0318 	add.w	r3, r7, #24
 80030c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003130 <i32MicrorosConfiguration+0x188>)
 80030c4:	9200      	str	r2, [sp, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	481a      	ldr	r0, [pc, #104]	@ (8003134 <i32MicrorosConfiguration+0x18c>)
 80030cc:	f00d fa06 	bl	80104dc <rclc_support_init_with_options>
 80030d0:	6338      	str	r0, [r7, #48]	@ 0x30
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80030d2:	e00c      	b.n	80030ee <i32MicrorosConfiguration+0x146>
		ret = rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80030d4:	f107 0318 	add.w	r3, r7, #24
 80030d8:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <i32MicrorosConfiguration+0x188>)
 80030da:	9200      	str	r2, [sp, #0]
 80030dc:	2200      	movs	r2, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	4814      	ldr	r0, [pc, #80]	@ (8003134 <i32MicrorosConfiguration+0x18c>)
 80030e2:	f00d f9fb 	bl	80104dc <rclc_support_init_with_options>
 80030e6:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 80030e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ea:	3301      	adds	r3, #1
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80030ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <i32MicrorosConfiguration+0x154>
 80030f4:	2201      	movs	r2, #1
 80030f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dbeb      	blt.n	80030d4 <i32MicrorosConfiguration+0x12c>
	};


	return ret;
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3738      	adds	r7, #56	@ 0x38
 8003102:	46bd      	mov	sp, r7
 8003104:	bdb0      	pop	{r4, r5, r7, pc}
 8003106:	bf00      	nop
 8003108:	080025e1 	.word	0x080025e1
 800310c:	0800257d 	.word	0x0800257d
 8003110:	0800255d 	.word	0x0800255d
 8003114:	08002531 	.word	0x08002531
 8003118:	2000f954 	.word	0x2000f954
 800311c:	080029f9 	.word	0x080029f9
 8003120:	08002a3d 	.word	0x08002a3d
 8003124:	08002a75 	.word	0x08002a75
 8003128:	08002ae1 	.word	0x08002ae1
 800312c:	08020128 	.word	0x08020128
 8003130:	2000f7d0 	.word	0x2000f7d0
 8003134:	2000f7e4 	.word	0x2000f7e4

08003138 <i32CreateNode>:
   	   	   	   	   	    If rc2 is RCL_RET_OK, this method was successful.

	Extra:

*************************************************************************/
rcl_ret_t i32CreateNode(){
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
	// Create node object

	const char * node_name = "test_node";
 800313e:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <i32CreateNode+0x50>)
 8003140:	607b      	str	r3, [r7, #4]
	// Node namespace (Can remain empty "")
	const char * namespace = "";
 8003142:	4b12      	ldr	r3, [pc, #72]	@ (800318c <i32CreateNode+0x54>)
 8003144:	603b      	str	r3, [r7, #0]
	int i=0;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
	// Init node with configured support object
	rcl_ret_t rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 800314a:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <i32CreateNode+0x58>)
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4810      	ldr	r0, [pc, #64]	@ (8003194 <i32CreateNode+0x5c>)
 8003152:	f00d fa21 	bl	8010598 <rclc_node_init_default>
 8003156:	60b8      	str	r0, [r7, #8]
	while(rc2 != RCL_RET_OK && i<iNumberOfTries){
 8003158:	e009      	b.n	800316e <i32CreateNode+0x36>
		rc2 = rclc_node_init_default(&node, node_name, namespace, &support);
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <i32CreateNode+0x58>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	480c      	ldr	r0, [pc, #48]	@ (8003194 <i32CreateNode+0x5c>)
 8003162:	f00d fa19 	bl	8010598 <rclc_node_init_default>
 8003166:	60b8      	str	r0, [r7, #8]
		i++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
	while(rc2 != RCL_RET_OK && i<iNumberOfTries){
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <i32CreateNode+0x44>
 8003174:	2201      	movs	r2, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4293      	cmp	r3, r2
 800317a:	dbee      	blt.n	800315a <i32CreateNode+0x22>
	}
	return rc2;
 800317c:	68bb      	ldr	r3, [r7, #8]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	08020150 	.word	0x08020150
 800318c:	0802015c 	.word	0x0802015c
 8003190:	2000f7e4 	.word	0x2000f7e4
 8003194:	2000f818 	.word	0x2000f818

08003198 <i32CreatePublisher>:

	Extra:				/X3/gazebo/command/motor_speed is the topic
						generated by gazebo for the drone motors. We use
						this topic to write the speed of the motors.
*************************************************************************/
rcl_ret_t i32CreatePublisher(){
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
	rcl_ret_t ret = rclc_publisher_init_default(
 800319e:	f00b f823 	bl	800e1e8 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <i32CreatePublisher+0x50>)
 80031a6:	4911      	ldr	r1, [pc, #68]	@ (80031ec <i32CreatePublisher+0x54>)
 80031a8:	4811      	ldr	r0, [pc, #68]	@ (80031f0 <i32CreatePublisher+0x58>)
 80031aa:	f00d fa31 	bl	8010610 <rclc_publisher_init_default>
 80031ae:	6078      	str	r0, [r7, #4]
			&velocity_pub,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_msgs,msg,Actuators),
			"/X3/gazebo/command/motor_speed"
		);
	int i=0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	603b      	str	r3, [r7, #0]
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80031b4:	e00b      	b.n	80031ce <i32CreatePublisher+0x36>
		ret = rclc_publisher_init_default(
 80031b6:	f00b f817 	bl	800e1e8 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <i32CreatePublisher+0x50>)
 80031be:	490b      	ldr	r1, [pc, #44]	@ (80031ec <i32CreatePublisher+0x54>)
 80031c0:	480b      	ldr	r0, [pc, #44]	@ (80031f0 <i32CreatePublisher+0x58>)
 80031c2:	f00d fa25 	bl	8010610 <rclc_publisher_init_default>
 80031c6:	6078      	str	r0, [r7, #4]
					&velocity_pub,
					&node,
					ROSIDL_GET_MSG_TYPE_SUPPORT(actuator_msgs,msg,Actuators),
					"/X3/gazebo/command/motor_speed"
			   );
		i++;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	603b      	str	r3, [r7, #0]
	while (ret != RCL_RET_OK && i<iNumberOfTries){
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <i32CreatePublisher+0x44>
 80031d4:	2201      	movs	r2, #1
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	4293      	cmp	r3, r2
 80031da:	dbec      	blt.n	80031b6 <i32CreatePublisher+0x1e>
	};

	 return ret;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	08020160 	.word	0x08020160
 80031ec:	2000f818 	.word	0x2000f818
 80031f0:	2000f64c 	.word	0x2000f64c

080031f4 <i32CreateSubscriber>:

	Extra:				/drone/imu is the topic generated by gazebo for
						the imu . We use this topic to read information
						about the drone imu.
*************************************************************************/
rcl_ret_t i32CreateSubscriber(){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
	 const char * imu_topic_name = "/drone/imu";
 80031fa:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <i32CreateSubscriber+0x50>)
 80031fc:	607b      	str	r3, [r7, #4]
	// Get message type support
	const rosidl_message_type_support_t * imu_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs,msg,Imu);
 80031fe:	f00f fa23 	bl	8012648 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8003202:	6038      	str	r0, [r7, #0]
	// Initialize a reliable subscriber
	rcl_ret_t rc_imu = rclc_subscription_init_default(
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	490f      	ldr	r1, [pc, #60]	@ (8003248 <i32CreateSubscriber+0x54>)
 800320a:	4810      	ldr	r0, [pc, #64]	@ (800324c <i32CreateSubscriber+0x58>)
 800320c:	f00d fa34 	bl	8010678 <rclc_subscription_init_default>
 8003210:	60f8      	str	r0, [r7, #12]
			&imu_sub, &node,
			imu_type_support, imu_topic_name
		);
	int i=0;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
	while(RCL_RET_OK != rc_imu && i<iNumberOfTries){
 8003216:	e009      	b.n	800322c <i32CreateSubscriber+0x38>
		rc_imu = rclc_subscription_init_default(
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	490a      	ldr	r1, [pc, #40]	@ (8003248 <i32CreateSubscriber+0x54>)
 800321e:	480b      	ldr	r0, [pc, #44]	@ (800324c <i32CreateSubscriber+0x58>)
 8003220:	f00d fa2a 	bl	8010678 <rclc_subscription_init_default>
 8003224:	60f8      	str	r0, [r7, #12]
			&imu_sub, &node,
			imu_type_support, imu_topic_name
		);
		i++;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3301      	adds	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
	while(RCL_RET_OK != rc_imu && i<iNumberOfTries){
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <i32CreateSubscriber+0x46>
 8003232:	2201      	movs	r2, #1
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4293      	cmp	r3, r2
 8003238:	dbee      	blt.n	8003218 <i32CreateSubscriber+0x24>

	}
	return rc_imu;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	08020180 	.word	0x08020180
 8003248:	2000f818 	.word	0x2000f818
 800324c:	2000f648 	.word	0x2000f648

08003250 <i32CreateExecutor>:
	Output params:      rcl_ret_t ret
   	   	   	   	   	    If ret is RCL_RET_OK, this method was successful.

	Extra:
*************************************************************************/
rcl_ret_t i32CreateExecutor(){
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b088      	sub	sp, #32
 8003256:	af02      	add	r7, sp, #8
	 // Create a timer
	const unsigned int timer_timeout = 1000;
 8003258:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800325c:	617c      	str	r4, [r7, #20]
	rcl_ret_t ret;
	ret = rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(timer_timeout), vSendActuatorMsg,true);
 800325e:	697c      	ldr	r4, [r7, #20]
 8003260:	2500      	movs	r5, #0
 8003262:	46a0      	mov	r8, r4
 8003264:	46a9      	mov	r9, r5
 8003266:	4644      	mov	r4, r8
 8003268:	464d      	mov	r5, r9
 800326a:	f04f 0a00 	mov.w	sl, #0
 800326e:	f04f 0b00 	mov.w	fp, #0
 8003272:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 8003276:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 800327a:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 800327e:	4654      	mov	r4, sl
 8003280:	465d      	mov	r5, fp
 8003282:	ebb4 0208 	subs.w	r2, r4, r8
 8003286:	eb65 0309 	sbc.w	r3, r5, r9
 800328a:	f04f 0400 	mov.w	r4, #0
 800328e:	f04f 0500 	mov.w	r5, #0
 8003292:	025d      	lsls	r5, r3, #9
 8003294:	ea45 55d2 	orr.w	r5, r5, r2, lsr #23
 8003298:	0254      	lsls	r4, r2, #9
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	eb12 0008 	adds.w	r0, r2, r8
 80032a2:	eb43 0109 	adc.w	r1, r3, r9
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	018b      	lsls	r3, r1, #6
 80032b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032b4:	0182      	lsls	r2, r0, #6
 80032b6:	1a14      	subs	r4, r2, r0
 80032b8:	603c      	str	r4, [r7, #0]
 80032ba:	eb63 0301 	sbc.w	r3, r3, r1
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80032c4:	460b      	mov	r3, r1
 80032c6:	eb13 0308 	adds.w	r3, r3, r8
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	4613      	mov	r3, r2
 80032ce:	eb43 0309 	adc.w	r3, r3, r9
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d8:	2101      	movs	r1, #1
 80032da:	9101      	str	r1, [sp, #4]
 80032dc:	4918      	ldr	r1, [pc, #96]	@ (8003340 <i32CreateExecutor+0xf0>)
 80032de:	9100      	str	r1, [sp, #0]
 80032e0:	4918      	ldr	r1, [pc, #96]	@ (8003344 <i32CreateExecutor+0xf4>)
 80032e2:	4819      	ldr	r0, [pc, #100]	@ (8003348 <i32CreateExecutor+0xf8>)
 80032e4:	f00d f9fc 	bl	80106e0 <rclc_timer_init_default2>
 80032e8:	6138      	str	r0, [r7, #16]
	if(ret != RCL_RET_OK){ return ret;}
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <i32CreateExecutor+0xa4>
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	e01f      	b.n	8003334 <i32CreateExecutor+0xe4>

	// Create executor
	ret = rclc_executor_init(&executor, &support.context, 2, &allocator);
 80032f4:	4b15      	ldr	r3, [pc, #84]	@ (800334c <i32CreateExecutor+0xfc>)
 80032f6:	2202      	movs	r2, #2
 80032f8:	4912      	ldr	r1, [pc, #72]	@ (8003344 <i32CreateExecutor+0xf4>)
 80032fa:	4815      	ldr	r0, [pc, #84]	@ (8003350 <i32CreateExecutor+0x100>)
 80032fc:	f00c fe44 	bl	800ff88 <rclc_executor_init>
 8003300:	6138      	str	r0, [r7, #16]
	if(ret != RCL_RET_OK){ return ret;}
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <i32CreateExecutor+0xbc>
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	e013      	b.n	8003334 <i32CreateExecutor+0xe4>

	ret = rclc_executor_add_subscription(&executor, &imu_sub, &imu_msg,
 800330c:	2300      	movs	r3, #0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <i32CreateExecutor+0x104>)
 8003312:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <i32CreateExecutor+0x108>)
 8003314:	4911      	ldr	r1, [pc, #68]	@ (800335c <i32CreateExecutor+0x10c>)
 8003316:	480e      	ldr	r0, [pc, #56]	@ (8003350 <i32CreateExecutor+0x100>)
 8003318:	f00c fed2 	bl	80100c0 <rclc_executor_add_subscription>
 800331c:	6138      	str	r0, [r7, #16]
			  &vImuCallback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	if(ret != RCL_RET_OK){ return ret;}
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <i32CreateExecutor+0xd8>
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	e005      	b.n	8003334 <i32CreateExecutor+0xe4>


	ret = rclc_executor_add_timer(&executor, &timer);
 8003328:	4907      	ldr	r1, [pc, #28]	@ (8003348 <i32CreateExecutor+0xf8>)
 800332a:	4809      	ldr	r0, [pc, #36]	@ (8003350 <i32CreateExecutor+0x100>)
 800332c:	f00c fefc 	bl	8010128 <rclc_executor_add_timer>
 8003330:	6138      	str	r0, [r7, #16]

	return ret;
 8003332:	693b      	ldr	r3, [r7, #16]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333e:	bf00      	nop
 8003340:	08002e2d 	.word	0x08002e2d
 8003344:	2000f7e4 	.word	0x2000f7e4
 8003348:	2000f650 	.word	0x2000f650
 800334c:	2000f7d0 	.word	0x2000f7d0
 8003350:	2000f820 	.word	0x2000f820
 8003354:	08002e51 	.word	0x08002e51
 8003358:	2000f690 	.word	0x2000f690
 800335c:	2000f648 	.word	0x2000f648

08003360 <vFastBlinkOnError>:
	Output params:      n/a

	Extra:

*************************************************************************/
void vFastBlinkOnError(){
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
	for(int i=0;i<50;i++){
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	e00a      	b.n	8003382 <vFastBlinkOnError+0x22>
		HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 800336c:	2120      	movs	r1, #32
 800336e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003372:	f001 fb2f 	bl	80049d4 <HAL_GPIO_TogglePin>
		osDelay(100);
 8003376:	2064      	movs	r0, #100	@ 0x64
 8003378:	f006 fecd 	bl	800a116 <osDelay>
	for(int i=0;i<50;i++){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b31      	cmp	r3, #49	@ 0x31
 8003386:	ddf1      	ble.n	800336c <vFastBlinkOnError+0xc>
	}
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_MspInit+0x50>)
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	4a11      	ldr	r2, [pc, #68]	@ (80033e4 <HAL_MspInit+0x50>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80033a6:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <HAL_MspInit+0x50>)
 80033a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <HAL_MspInit+0x50>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <HAL_MspInit+0x50>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033be:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_MspInit+0x50>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	210f      	movs	r1, #15
 80033ce:	f06f 0001 	mvn.w	r0, #1
 80033d2:	f000 fdff 	bl	8003fd4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033d6:	f002 fa01 	bl	80057dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000

080033e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	@ 0x30
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033f8:	4b2c      	ldr	r3, [pc, #176]	@ (80034ac <HAL_InitTick+0xc4>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	4a2b      	ldr	r2, [pc, #172]	@ (80034ac <HAL_InitTick+0xc4>)
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	6593      	str	r3, [r2, #88]	@ 0x58
 8003404:	4b29      	ldr	r3, [pc, #164]	@ (80034ac <HAL_InitTick+0xc4>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003410:	f107 020c 	add.w	r2, r7, #12
 8003414:	f107 0310 	add.w	r3, r7, #16
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fed6 	bl	80061cc <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003420:	f002 fea8 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 8003424:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003428:	4a21      	ldr	r2, [pc, #132]	@ (80034b0 <HAL_InitTick+0xc8>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0c9b      	lsrs	r3, r3, #18
 8003430:	3b01      	subs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003434:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <HAL_InitTick+0xcc>)
 8003436:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <HAL_InitTick+0xd0>)
 8003438:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800343a:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HAL_InitTick+0xcc>)
 800343c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003440:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003442:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <HAL_InitTick+0xcc>)
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003448:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <HAL_InitTick+0xcc>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344e:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <HAL_InitTick+0xcc>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003454:	4817      	ldr	r0, [pc, #92]	@ (80034b4 <HAL_InitTick+0xcc>)
 8003456:	f003 f97f 	bl	8006758 <HAL_TIM_Base_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11b      	bne.n	80034a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003468:	4812      	ldr	r0, [pc, #72]	@ (80034b4 <HAL_InitTick+0xcc>)
 800346a:	f003 fa3d 	bl	80068e8 <HAL_TIM_Base_Start_IT>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003474:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800347c:	2036      	movs	r0, #54	@ 0x36
 800347e:	f000 fdc3 	bl	8004008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b0f      	cmp	r3, #15
 8003486:	d808      	bhi.n	800349a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003488:	2200      	movs	r2, #0
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	2036      	movs	r0, #54	@ 0x36
 800348e:	f000 fda1 	bl	8003fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <HAL_InitTick+0xd4>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e002      	b.n	80034a0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3730      	adds	r7, #48	@ 0x30
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	2000f8b4 	.word	0x2000f8b4
 80034b8:	40001000 	.word	0x40001000
 80034bc:	20000020 	.word	0x20000020

080034c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <NMI_Handler+0x4>

080034c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <HardFault_Handler+0x4>

080034d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <MemManage_Handler+0x4>

080034d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <BusFault_Handler+0x4>

080034e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <UsageFault_Handler+0x4>

080034e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80034fc:	4802      	ldr	r0, [pc, #8]	@ (8003508 <DMA1_Channel1_IRQHandler+0x10>)
 80034fe:	f000 ff74 	bl	80043ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000fba4 	.word	0x2000fba4

0800350c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <DMA1_Channel2_IRQHandler+0x10>)
 8003512:	f000 ff6a 	bl	80043ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2000fc04 	.word	0x2000fc04

08003520 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003524:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003528:	f001 fa6e 	bl	8004a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}

08003530 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003534:	4802      	ldr	r0, [pc, #8]	@ (8003540 <UART5_IRQHandler+0x10>)
 8003536:	f004 f995 	bl	8007864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000fa7c 	.word	0x2000fa7c

08003544 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003548:	4802      	ldr	r0, [pc, #8]	@ (8003554 <TIM6_DAC_IRQHandler+0x10>)
 800354a:	f003 fa45 	bl	80069d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	2000f8b4 	.word	0x2000f8b4

08003558 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800355c:	4802      	ldr	r0, [pc, #8]	@ (8003568 <LPUART1_IRQHandler+0x10>)
 800355e:	f004 f981 	bl	8007864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000f954 	.word	0x2000f954

0800356c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return 1;
 8003570:	2301      	movs	r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_kill>:

int _kill(int pid, int sig)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003586:	f01a fd17 	bl	801dfb8 <__errno>
 800358a:	4603      	mov	r3, r0
 800358c:	2216      	movs	r2, #22
 800358e:	601a      	str	r2, [r3, #0]
  return -1;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_exit>:

void _exit (int status)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ffe7 	bl	800357c <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ae:	bf00      	nop
 80035b0:	e7fd      	b.n	80035ae <_exit+0x12>

080035b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e00a      	b.n	80035da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035c4:	f3af 8000 	nop.w
 80035c8:	4601      	mov	r1, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	60ba      	str	r2, [r7, #8]
 80035d0:	b2ca      	uxtb	r2, r1
 80035d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	3301      	adds	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	dbf0      	blt.n	80035c4 <_read+0x12>
  }

  return len;
 80035e2:	687b      	ldr	r3, [r7, #4]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003614:	605a      	str	r2, [r3, #4]
  return 0;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_isatty>:

int _isatty(int file)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800362c:	2301      	movs	r3, #1
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800363a:	b480      	push	{r7}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800365c:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <_sbrk+0x5c>)
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <_sbrk+0x60>)
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003668:	4b13      	ldr	r3, [pc, #76]	@ (80036b8 <_sbrk+0x64>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <_sbrk+0x64>)
 8003672:	4a12      	ldr	r2, [pc, #72]	@ (80036bc <_sbrk+0x68>)
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003676:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	429a      	cmp	r2, r3
 8003682:	d207      	bcs.n	8003694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003684:	f01a fc98 	bl	801dfb8 <__errno>
 8003688:	4603      	mov	r3, r0
 800368a:	220c      	movs	r2, #12
 800368c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003692:	e009      	b.n	80036a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003694:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <_sbrk+0x64>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800369a:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <_sbrk+0x64>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	4a05      	ldr	r2, [pc, #20]	@ (80036b8 <_sbrk+0x64>)
 80036a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036a6:	68fb      	ldr	r3, [r7, #12]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20020000 	.word	0x20020000
 80036b4:	00000400 	.word	0x00000400
 80036b8:	2000f904 	.word	0x2000f904
 80036bc:	2001f928 	.word	0x2001f928

080036c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <SystemInit+0x20>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	4a05      	ldr	r2, [pc, #20]	@ (80036e0 <SystemInit+0x20>)
 80036cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ea:	f107 0310 	add.w	r3, r7, #16
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003702:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <MX_TIM1_Init+0xa0>)
 8003704:	4a20      	ldr	r2, [pc, #128]	@ (8003788 <MX_TIM1_Init+0xa4>)
 8003706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003708:	4b1e      	ldr	r3, [pc, #120]	@ (8003784 <MX_TIM1_Init+0xa0>)
 800370a:	2200      	movs	r2, #0
 800370c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800370e:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <MX_TIM1_Init+0xa0>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003714:	4b1b      	ldr	r3, [pc, #108]	@ (8003784 <MX_TIM1_Init+0xa0>)
 8003716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800371a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <MX_TIM1_Init+0xa0>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003722:	4b18      	ldr	r3, [pc, #96]	@ (8003784 <MX_TIM1_Init+0xa0>)
 8003724:	2200      	movs	r2, #0
 8003726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003728:	4b16      	ldr	r3, [pc, #88]	@ (8003784 <MX_TIM1_Init+0xa0>)
 800372a:	2200      	movs	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800372e:	4815      	ldr	r0, [pc, #84]	@ (8003784 <MX_TIM1_Init+0xa0>)
 8003730:	f003 f812 	bl	8006758 <HAL_TIM_Base_Init>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800373a:	f7ff f957 	bl	80029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800373e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003744:	f107 0310 	add.w	r3, r7, #16
 8003748:	4619      	mov	r1, r3
 800374a:	480e      	ldr	r0, [pc, #56]	@ (8003784 <MX_TIM1_Init+0xa0>)
 800374c:	f003 fa94 	bl	8006c78 <HAL_TIM_ConfigClockSource>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003756:	f7ff f949 	bl	80029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4806      	ldr	r0, [pc, #24]	@ (8003784 <MX_TIM1_Init+0xa0>)
 800376c:	f003 fd12 	bl	8007194 <HAL_TIMEx_MasterConfigSynchronization>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003776:	f7ff f939 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000f908 	.word	0x2000f908
 8003788:	40012c00 	.word	0x40012c00

0800378c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <HAL_TIM_Base_MspInit+0x38>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10b      	bne.n	80037b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800379e:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <HAL_TIM_Base_MspInit+0x3c>)
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_TIM_Base_MspInit+0x3c>)
 80037a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80037aa:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <HAL_TIM_Base_MspInit+0x3c>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40021000 	.word	0x40021000

080037cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80037d0:	4b21      	ldr	r3, [pc, #132]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037d2:	4a22      	ldr	r2, [pc, #136]	@ (800385c <MX_LPUART1_UART_Init+0x90>)
 80037d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037de:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80037e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80037ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037f2:	220c      	movs	r2, #12
 80037f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f6:	4b18      	ldr	r3, [pc, #96]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037fc:	4b16      	ldr	r3, [pc, #88]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 8003804:	2200      	movs	r2, #0
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800380e:	4812      	ldr	r0, [pc, #72]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 8003810:	f003 fd9c 	bl	800734c <HAL_UART_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800381a:	f7ff f8e7 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800381e:	2100      	movs	r1, #0
 8003820:	480d      	ldr	r0, [pc, #52]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 8003822:	f006 f9be 	bl	8009ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800382c:	f7ff f8de 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003830:	2100      	movs	r1, #0
 8003832:	4809      	ldr	r0, [pc, #36]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 8003834:	f006 f9f3 	bl	8009c1e <HAL_UARTEx_SetRxFifoThreshold>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800383e:	f7ff f8d5 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003842:	4805      	ldr	r0, [pc, #20]	@ (8003858 <MX_LPUART1_UART_Init+0x8c>)
 8003844:	f006 f974 	bl	8009b30 <HAL_UARTEx_DisableFifoMode>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800384e:	f7ff f8cd 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	2000f954 	.word	0x2000f954
 800385c:	40008000 	.word	0x40008000

08003860 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003864:	4b22      	ldr	r3, [pc, #136]	@ (80038f0 <MX_UART4_Init+0x90>)
 8003866:	4a23      	ldr	r2, [pc, #140]	@ (80038f4 <MX_UART4_Init+0x94>)
 8003868:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800386a:	4b21      	ldr	r3, [pc, #132]	@ (80038f0 <MX_UART4_Init+0x90>)
 800386c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003870:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003872:	4b1f      	ldr	r3, [pc, #124]	@ (80038f0 <MX_UART4_Init+0x90>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003878:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <MX_UART4_Init+0x90>)
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800387e:	4b1c      	ldr	r3, [pc, #112]	@ (80038f0 <MX_UART4_Init+0x90>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003884:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <MX_UART4_Init+0x90>)
 8003886:	220c      	movs	r2, #12
 8003888:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388a:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <MX_UART4_Init+0x90>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003890:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <MX_UART4_Init+0x90>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003896:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <MX_UART4_Init+0x90>)
 8003898:	2200      	movs	r2, #0
 800389a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <MX_UART4_Init+0x90>)
 800389e:	2200      	movs	r2, #0
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038a2:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <MX_UART4_Init+0x90>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80038a8:	4811      	ldr	r0, [pc, #68]	@ (80038f0 <MX_UART4_Init+0x90>)
 80038aa:	f003 fd4f 	bl	800734c <HAL_UART_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80038b4:	f7ff f89a 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038b8:	2100      	movs	r1, #0
 80038ba:	480d      	ldr	r0, [pc, #52]	@ (80038f0 <MX_UART4_Init+0x90>)
 80038bc:	f006 f971 	bl	8009ba2 <HAL_UARTEx_SetTxFifoThreshold>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80038c6:	f7ff f891 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038ca:	2100      	movs	r1, #0
 80038cc:	4808      	ldr	r0, [pc, #32]	@ (80038f0 <MX_UART4_Init+0x90>)
 80038ce:	f006 f9a6 	bl	8009c1e <HAL_UARTEx_SetRxFifoThreshold>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80038d8:	f7ff f888 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80038dc:	4804      	ldr	r0, [pc, #16]	@ (80038f0 <MX_UART4_Init+0x90>)
 80038de:	f006 f927 	bl	8009b30 <HAL_UARTEx_DisableFifoMode>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80038e8:	f7ff f880 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	2000f9e8 	.word	0x2000f9e8
 80038f4:	40004c00 	.word	0x40004c00

080038f8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80038fc:	4b22      	ldr	r3, [pc, #136]	@ (8003988 <MX_UART5_Init+0x90>)
 80038fe:	4a23      	ldr	r2, [pc, #140]	@ (800398c <MX_UART5_Init+0x94>)
 8003900:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003902:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <MX_UART5_Init+0x90>)
 8003904:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003908:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800390a:	4b1f      	ldr	r3, [pc, #124]	@ (8003988 <MX_UART5_Init+0x90>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <MX_UART5_Init+0x90>)
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003916:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <MX_UART5_Init+0x90>)
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <MX_UART5_Init+0x90>)
 800391e:	220c      	movs	r2, #12
 8003920:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003922:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <MX_UART5_Init+0x90>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003928:	4b17      	ldr	r3, [pc, #92]	@ (8003988 <MX_UART5_Init+0x90>)
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800392e:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <MX_UART5_Init+0x90>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003934:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <MX_UART5_Init+0x90>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <MX_UART5_Init+0x90>)
 800393c:	2200      	movs	r2, #0
 800393e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003940:	4811      	ldr	r0, [pc, #68]	@ (8003988 <MX_UART5_Init+0x90>)
 8003942:	f003 fd03 	bl	800734c <HAL_UART_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800394c:	f7ff f84e 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003950:	2100      	movs	r1, #0
 8003952:	480d      	ldr	r0, [pc, #52]	@ (8003988 <MX_UART5_Init+0x90>)
 8003954:	f006 f925 	bl	8009ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800395e:	f7ff f845 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003962:	2100      	movs	r1, #0
 8003964:	4808      	ldr	r0, [pc, #32]	@ (8003988 <MX_UART5_Init+0x90>)
 8003966:	f006 f95a 	bl	8009c1e <HAL_UARTEx_SetRxFifoThreshold>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003970:	f7ff f83c 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003974:	4804      	ldr	r0, [pc, #16]	@ (8003988 <MX_UART5_Init+0x90>)
 8003976:	f006 f8db 	bl	8009b30 <HAL_UARTEx_DisableFifoMode>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003980:	f7ff f834 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000fa7c 	.word	0x2000fa7c
 800398c:	40005000 	.word	0x40005000

08003990 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003994:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 8003996:	4a23      	ldr	r2, [pc, #140]	@ (8003a24 <MX_USART3_UART_Init+0x94>)
 8003998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800399a:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 800399c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039b6:	220c      	movs	r2, #12
 80039b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ba:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039bc:	2200      	movs	r2, #0
 80039be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c0:	4b17      	ldr	r3, [pc, #92]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039c6:	4b16      	ldr	r3, [pc, #88]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039d2:	4b13      	ldr	r3, [pc, #76]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039d8:	4811      	ldr	r0, [pc, #68]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039da:	f003 fcb7 	bl	800734c <HAL_UART_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80039e4:	f7ff f802 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039e8:	2100      	movs	r1, #0
 80039ea:	480d      	ldr	r0, [pc, #52]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039ec:	f006 f8d9 	bl	8009ba2 <HAL_UARTEx_SetTxFifoThreshold>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80039f6:	f7fe fff9 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039fa:	2100      	movs	r1, #0
 80039fc:	4808      	ldr	r0, [pc, #32]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 80039fe:	f006 f90e 	bl	8009c1e <HAL_UARTEx_SetRxFifoThreshold>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003a08:	f7fe fff0 	bl	80029ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003a0c:	4804      	ldr	r0, [pc, #16]	@ (8003a20 <MX_USART3_UART_Init+0x90>)
 8003a0e:	f006 f88f 	bl	8009b30 <HAL_UARTEx_DisableFifoMode>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003a18:	f7fe ffe8 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	2000fb10 	.word	0x2000fb10
 8003a24:	40004800 	.word	0x40004800

08003a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b0a6      	sub	sp, #152	@ 0x98
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a30:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a44:	2254      	movs	r2, #84	@ 0x54
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f01a f9b9 	bl	801ddc0 <memset>
  if(uartHandle->Instance==LPUART1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4aa4      	ldr	r2, [pc, #656]	@ (8003ce4 <HAL_UART_MspInit+0x2bc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	f040 8098 	bne.w	8003b8a <HAL_UART_MspInit+0x162>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a66:	4618      	mov	r0, r3
 8003a68:	f002 fc28 	bl	80062bc <HAL_RCCEx_PeriphCLKConfig>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a72:	f7fe ffbb 	bl	80029ec <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a76:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	4a9b      	ldr	r2, [pc, #620]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003a82:	4b99      	ldr	r3, [pc, #612]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	4b96      	ldr	r3, [pc, #600]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	4a95      	ldr	r2, [pc, #596]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a9a:	4b93      	ldr	r3, [pc, #588]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003abe:	230c      	movs	r3, #12
 8003ac0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ace:	f000 fde7 	bl	80046a0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003ad2:	4b86      	ldr	r3, [pc, #536]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003ad4:	4a86      	ldr	r2, [pc, #536]	@ (8003cf0 <HAL_UART_MspInit+0x2c8>)
 8003ad6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003ad8:	4b84      	ldr	r3, [pc, #528]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003ada:	2222      	movs	r2, #34	@ 0x22
 8003adc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ade:	4b83      	ldr	r3, [pc, #524]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae4:	4b81      	ldr	r3, [pc, #516]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aea:	4b80      	ldr	r3, [pc, #512]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003aec:	2280      	movs	r2, #128	@ 0x80
 8003aee:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003af0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af6:	4b7d      	ldr	r3, [pc, #500]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003afc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003afe:	2220      	movs	r2, #32
 8003b00:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b02:	4b7a      	ldr	r3, [pc, #488]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003b08:	4878      	ldr	r0, [pc, #480]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003b0a:	f000 fa8b 	bl	8004024 <HAL_DMA_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003b14:	f7fe ff6a 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a74      	ldr	r2, [pc, #464]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003b1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003b20:	4a72      	ldr	r2, [pc, #456]	@ (8003cec <HAL_UART_MspInit+0x2c4>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003b26:	4b73      	ldr	r3, [pc, #460]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b28:	4a73      	ldr	r2, [pc, #460]	@ (8003cf8 <HAL_UART_MspInit+0x2d0>)
 8003b2a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003b2c:	4b71      	ldr	r3, [pc, #452]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b2e:	2223      	movs	r2, #35	@ 0x23
 8003b30:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b32:	4b70      	ldr	r3, [pc, #448]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b34:	2210      	movs	r2, #16
 8003b36:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b38:	4b6e      	ldr	r3, [pc, #440]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b44:	4b6b      	ldr	r3, [pc, #428]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003b50:	4b68      	ldr	r3, [pc, #416]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b56:	4b67      	ldr	r3, [pc, #412]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003b5c:	4865      	ldr	r0, [pc, #404]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b5e:	f000 fa61 	bl	8004024 <HAL_DMA_Init>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8003b68:	f7fe ff40 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a61      	ldr	r2, [pc, #388]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b70:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003b72:	4a60      	ldr	r2, [pc, #384]	@ (8003cf4 <HAL_UART_MspInit+0x2cc>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2105      	movs	r1, #5
 8003b7c:	205b      	movs	r0, #91	@ 0x5b
 8003b7e:	f000 fa29 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003b82:	205b      	movs	r0, #91	@ 0x5b
 8003b84:	f000 fa40 	bl	8004008 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b88:	e101      	b.n	8003d8e <HAL_UART_MspInit+0x366>
  else if(uartHandle->Instance==UART4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003cfc <HAL_UART_MspInit+0x2d4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d13c      	bne.n	8003c0e <HAL_UART_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003b94:	2308      	movs	r3, #8
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fb8b 	bl	80062bc <HAL_RCCEx_PeriphCLKConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8003bac:	f7fe ff1e 	bl	80029ec <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003bb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc8:	4b47      	ldr	r3, [pc, #284]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bcc:	4a46      	ldr	r2, [pc, #280]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd4:	4b44      	ldr	r3, [pc, #272]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	623b      	str	r3, [r7, #32]
 8003bde:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003be0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be8:	2302      	movs	r3, #2
 8003bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c00:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003c04:	4619      	mov	r1, r3
 8003c06:	483e      	ldr	r0, [pc, #248]	@ (8003d00 <HAL_UART_MspInit+0x2d8>)
 8003c08:	f000 fd4a 	bl	80046a0 <HAL_GPIO_Init>
}
 8003c0c:	e0bf      	b.n	8003d8e <HAL_UART_MspInit+0x366>
  else if(uartHandle->Instance==UART5)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a3c      	ldr	r2, [pc, #240]	@ (8003d04 <HAL_UART_MspInit+0x2dc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d179      	bne.n	8003d0c <HAL_UART_MspInit+0x2e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003c18:	2310      	movs	r3, #16
 8003c1a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 fb49 	bl	80062bc <HAL_RCCEx_PeriphCLKConfig>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8003c30:	f7fe fedc 	bl	80029ec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c38:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c40:	4b29      	ldr	r3, [pc, #164]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c50:	4a25      	ldr	r2, [pc, #148]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c58:	4b23      	ldr	r3, [pc, #140]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c64:	4b20      	ldr	r3, [pc, #128]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c6a:	f043 0308 	orr.w	r3, r3, #8
 8003c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce8 <HAL_UART_MspInit+0x2c0>)
 8003c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin;
 8003c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003c96:	2305      	movs	r3, #5
 8003c98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8003c9c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4817      	ldr	r0, [pc, #92]	@ (8003d00 <HAL_UART_MspInit+0x2d8>)
 8003ca4:	f000 fcfc 	bl	80046a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin;
 8003ca8:	2304      	movs	r3, #4
 8003caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 8003cc6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003cca:	4619      	mov	r1, r3
 8003ccc:	480e      	ldr	r0, [pc, #56]	@ (8003d08 <HAL_UART_MspInit+0x2e0>)
 8003cce:	f000 fce7 	bl	80046a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2105      	movs	r1, #5
 8003cd6:	2035      	movs	r0, #53	@ 0x35
 8003cd8:	f000 f97c 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003cdc:	2035      	movs	r0, #53	@ 0x35
 8003cde:	f000 f993 	bl	8004008 <HAL_NVIC_EnableIRQ>
}
 8003ce2:	e054      	b.n	8003d8e <HAL_UART_MspInit+0x366>
 8003ce4:	40008000 	.word	0x40008000
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	2000fba4 	.word	0x2000fba4
 8003cf0:	40020008 	.word	0x40020008
 8003cf4:	2000fc04 	.word	0x2000fc04
 8003cf8:	4002001c 	.word	0x4002001c
 8003cfc:	40004c00 	.word	0x40004c00
 8003d00:	48000800 	.word	0x48000800
 8003d04:	40005000 	.word	0x40005000
 8003d08:	48000c00 	.word	0x48000c00
  else if(uartHandle->Instance==USART3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a21      	ldr	r2, [pc, #132]	@ (8003d98 <HAL_UART_MspInit+0x370>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d13b      	bne.n	8003d8e <HAL_UART_MspInit+0x366>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d16:	2304      	movs	r3, #4
 8003d18:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 faca 	bl	80062bc <HAL_RCCEx_PeriphCLKConfig>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_UART_MspInit+0x30a>
      Error_Handler();
 8003d2e:	f7fe fe5d 	bl	80029ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d32:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <HAL_UART_MspInit+0x374>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <HAL_UART_MspInit+0x374>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d3e:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <HAL_UART_MspInit+0x374>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <HAL_UART_MspInit+0x374>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	4a13      	ldr	r2, [pc, #76]	@ (8003d9c <HAL_UART_MspInit+0x374>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_UART_MspInit+0x374>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 8003d62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d82:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003d86:	4619      	mov	r1, r3
 8003d88:	4805      	ldr	r0, [pc, #20]	@ (8003da0 <HAL_UART_MspInit+0x378>)
 8003d8a:	f000 fc89 	bl	80046a0 <HAL_GPIO_Init>
}
 8003d8e:	bf00      	nop
 8003d90:	3798      	adds	r7, #152	@ 0x98
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	48000400 	.word	0x48000400

08003da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003da4:	480d      	ldr	r0, [pc, #52]	@ (8003ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003da6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003da8:	f7ff fc8a 	bl	80036c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dac:	480c      	ldr	r0, [pc, #48]	@ (8003de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dae:	490d      	ldr	r1, [pc, #52]	@ (8003de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003db0:	4a0d      	ldr	r2, [pc, #52]	@ (8003de8 <LoopForever+0xe>)
  movs r3, #0
 8003db2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003db4:	e002      	b.n	8003dbc <LoopCopyDataInit>

08003db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dba:	3304      	adds	r3, #4

08003dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc0:	d3f9      	bcc.n	8003db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003df0 <LoopForever+0x16>)
  movs r3, #0
 8003dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc8:	e001      	b.n	8003dce <LoopFillZerobss>

08003dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dcc:	3204      	adds	r2, #4

08003dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd0:	d3fb      	bcc.n	8003dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dd2:	f01a f8f7 	bl	801dfc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003dd6:	f7fe fd8d 	bl	80028f4 <main>

08003dda <LoopForever>:

LoopForever:
    b LoopForever
 8003dda:	e7fe      	b.n	8003dda <LoopForever>
  ldr   r0, =_estack
 8003ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de4:	20001c58 	.word	0x20001c58
  ldr r2, =_sidata
 8003de8:	08021950 	.word	0x08021950
  ldr r2, =_sbss
 8003dec:	20001c58 	.word	0x20001c58
  ldr r4, =_ebss
 8003df0:	2001f928 	.word	0x2001f928

08003df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003df4:	e7fe      	b.n	8003df4 <ADC1_2_IRQHandler>

08003df6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e00:	2003      	movs	r0, #3
 8003e02:	f000 f8dc 	bl	8003fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e06:	200f      	movs	r0, #15
 8003e08:	f7ff faee 	bl	80033e8 <HAL_InitTick>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	71fb      	strb	r3, [r7, #7]
 8003e16:	e001      	b.n	8003e1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e18:	f7ff fabc 	bl	8003394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e1c:	79fb      	ldrb	r3, [r7, #7]

}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_IncTick+0x1c>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <HAL_IncTick+0x20>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a03      	ldr	r2, [pc, #12]	@ (8003e44 <HAL_IncTick+0x1c>)
 8003e38:	6013      	str	r3, [r2, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	2000fc64 	.word	0x2000fc64
 8003e48:	20000024 	.word	0x20000024

08003e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e50:	4b03      	ldr	r3, [pc, #12]	@ (8003e60 <HAL_GetTick+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	2000fc64 	.word	0x2000fc64

08003e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e80:	4013      	ands	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e96:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	60d3      	str	r3, [r2, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb0:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 0307 	and.w	r3, r3, #7
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	db0b      	blt.n	8003ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4907      	ldr	r1, [pc, #28]	@ (8003f00 <__NVIC_EnableIRQ+0x38>)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2001      	movs	r0, #1
 8003eea:	fa00 f202 	lsl.w	r2, r0, r2
 8003eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e100 	.word	0xe000e100

08003f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	db0a      	blt.n	8003f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	490c      	ldr	r1, [pc, #48]	@ (8003f50 <__NVIC_SetPriority+0x4c>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	440b      	add	r3, r1
 8003f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f2c:	e00a      	b.n	8003f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	4908      	ldr	r1, [pc, #32]	@ (8003f54 <__NVIC_SetPriority+0x50>)
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	3b04      	subs	r3, #4
 8003f3c:	0112      	lsls	r2, r2, #4
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	440b      	add	r3, r1
 8003f42:	761a      	strb	r2, [r3, #24]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000e100 	.word	0xe000e100
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	@ 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f1c3 0307 	rsb	r3, r3, #7
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	bf28      	it	cs
 8003f76:	2304      	movcs	r3, #4
 8003f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d902      	bls.n	8003f88 <NVIC_EncodePriority+0x30>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3b03      	subs	r3, #3
 8003f86:	e000      	b.n	8003f8a <NVIC_EncodePriority+0x32>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43da      	mvns	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb0:	4313      	orrs	r3, r2
         );
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3724      	adds	r7, #36	@ 0x24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ff4c 	bl	8003e64 <__NVIC_SetPriorityGrouping>
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe2:	f7ff ff63 	bl	8003eac <__NVIC_GetPriorityGrouping>
 8003fe6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f7ff ffb3 	bl	8003f58 <NVIC_EncodePriority>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff82 	bl	8003f04 <__NVIC_SetPriority>
}
 8004000:	bf00      	nop
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff56 	bl	8003ec8 <__NVIC_EnableIRQ>
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e08d      	b.n	8004152 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_DMA_Init+0x138>)
 800403e:	429a      	cmp	r2, r3
 8004040:	d80f      	bhi.n	8004062 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <HAL_DMA_Init+0x13c>)
 800404a:	4413      	add	r3, r2
 800404c:	4a45      	ldr	r2, [pc, #276]	@ (8004164 <HAL_DMA_Init+0x140>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	009a      	lsls	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a42      	ldr	r2, [pc, #264]	@ (8004168 <HAL_DMA_Init+0x144>)
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004060:	e00e      	b.n	8004080 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4b40      	ldr	r3, [pc, #256]	@ (800416c <HAL_DMA_Init+0x148>)
 800406a:	4413      	add	r3, r2
 800406c:	4a3d      	ldr	r2, [pc, #244]	@ (8004164 <HAL_DMA_Init+0x140>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	009a      	lsls	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a3c      	ldr	r2, [pc, #240]	@ (8004170 <HAL_DMA_Init+0x14c>)
 800407e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa82 	bl	80045dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e0:	d102      	bne.n	80040e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <HAL_DMA_Init+0x104>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d80c      	bhi.n	8004128 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 faa2 	bl	8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	e008      	b.n	800413a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40020407 	.word	0x40020407
 8004160:	bffdfff8 	.word	0xbffdfff8
 8004164:	cccccccd 	.word	0xcccccccd
 8004168:	40020000 	.word	0x40020000
 800416c:	bffdfbf8 	.word	0xbffdfbf8
 8004170:	40020400 	.word	0x40020400

08004174 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_DMA_Start_IT+0x20>
 8004190:	2302      	movs	r3, #2
 8004192:	e066      	b.n	8004262 <HAL_DMA_Start_IT+0xee>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d155      	bne.n	8004254 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f9c7 	bl	8004560 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 020e 	orr.w	r2, r2, #14
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e00f      	b.n	800420c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 020a 	orr.w	r2, r2, #10
 800420a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004224:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004228:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e005      	b.n	8004260 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800425c:	2302      	movs	r3, #2
 800425e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d005      	beq.n	800428e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e037      	b.n	80042fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 020e 	bic.w	r2, r2, #14
 800429c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	f003 021f 	and.w	r2, r3, #31
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d00d      	beq.n	8004350 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	e047      	b.n	80043e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 020e 	bic.w	r2, r2, #14
 800435e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800437e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004384:	f003 021f 	and.w	r2, r3, #31
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f202 	lsl.w	r2, r1, r2
 8004392:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800439c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00c      	beq.n	80043c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
    }
  }
  return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2204      	movs	r2, #4
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d026      	beq.n	8004464 <HAL_DMA_IRQHandler+0x7a>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d021      	beq.n	8004464 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0204 	bic.w	r2, r2, #4
 800443c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	f003 021f 	and.w	r2, r3, #31
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2104      	movs	r1, #4
 800444c:	fa01 f202 	lsl.w	r2, r1, r2
 8004450:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	2b00      	cmp	r3, #0
 8004458:	d071      	beq.n	800453e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004462:	e06c      	b.n	800453e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2202      	movs	r2, #2
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02e      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d029      	beq.n	80044d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 020a 	bic.w	r2, r2, #10
 800449e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2102      	movs	r1, #2
 80044b6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d038      	beq.n	800453e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044d4:	e033      	b.n	800453e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2208      	movs	r2, #8
 80044e0:	409a      	lsls	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02a      	beq.n	8004540 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d025      	beq.n	8004540 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004508:	f003 021f 	and.w	r2, r3, #31
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	2101      	movs	r1, #1
 8004512:	fa01 f202 	lsl.w	r2, r1, r2
 8004516:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800453e:	bf00      	nop
 8004540:	bf00      	nop
}
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004576:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	f003 021f 	and.w	r2, r3, #31
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f202 	lsl.w	r2, r1, r2
 800459c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d108      	bne.n	80045c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045be:	e007      	b.n	80045d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d802      	bhi.n	80045f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045f0:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e001      	b.n	80045fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80045f6:	4b15      	ldr	r3, [pc, #84]	@ (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	3b08      	subs	r3, #8
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	009a      	lsls	r2, r3, #2
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a0b      	ldr	r2, [pc, #44]	@ (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004626:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2201      	movs	r2, #1
 8004630:	409a      	lsls	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40020407 	.word	0x40020407
 8004648:	40020800 	.word	0x40020800
 800464c:	40020820 	.word	0x40020820
 8004650:	cccccccd 	.word	0xcccccccd
 8004654:	40020880 	.word	0x40020880

08004658 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a08      	ldr	r2, [pc, #32]	@ (800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800467a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3b01      	subs	r3, #1
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2201      	movs	r2, #1
 8004686:	409a      	lsls	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	1000823f 	.word	0x1000823f
 800469c:	40020940 	.word	0x40020940

080046a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ae:	e15a      	b.n	8004966 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2101      	movs	r1, #1
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 814c 	beq.w	8004960 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d005      	beq.n	80046e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d130      	bne.n	8004742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004716:	2201      	movs	r2, #1
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 0201 	and.w	r2, r3, #1
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d017      	beq.n	800477e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	2203      	movs	r2, #3
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43db      	mvns	r3, r3
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4013      	ands	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d123      	bne.n	80047d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	08da      	lsrs	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3208      	adds	r2, #8
 8004792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	220f      	movs	r2, #15
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	6939      	ldr	r1, [r7, #16]
 80047ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4013      	ands	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 0203 	and.w	r2, r3, #3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80a6 	beq.w	8004960 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004814:	4b5b      	ldr	r3, [pc, #364]	@ (8004984 <HAL_GPIO_Init+0x2e4>)
 8004816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004818:	4a5a      	ldr	r2, [pc, #360]	@ (8004984 <HAL_GPIO_Init+0x2e4>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004820:	4b58      	ldr	r3, [pc, #352]	@ (8004984 <HAL_GPIO_Init+0x2e4>)
 8004822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482c:	4a56      	ldr	r2, [pc, #344]	@ (8004988 <HAL_GPIO_Init+0x2e8>)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	3302      	adds	r3, #2
 8004834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4013      	ands	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004856:	d01f      	beq.n	8004898 <HAL_GPIO_Init+0x1f8>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a4c      	ldr	r2, [pc, #304]	@ (800498c <HAL_GPIO_Init+0x2ec>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d019      	beq.n	8004894 <HAL_GPIO_Init+0x1f4>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a4b      	ldr	r2, [pc, #300]	@ (8004990 <HAL_GPIO_Init+0x2f0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_GPIO_Init+0x1f0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a4a      	ldr	r2, [pc, #296]	@ (8004994 <HAL_GPIO_Init+0x2f4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00d      	beq.n	800488c <HAL_GPIO_Init+0x1ec>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a49      	ldr	r2, [pc, #292]	@ (8004998 <HAL_GPIO_Init+0x2f8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <HAL_GPIO_Init+0x1e8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a48      	ldr	r2, [pc, #288]	@ (800499c <HAL_GPIO_Init+0x2fc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_GPIO_Init+0x1e4>
 8004880:	2305      	movs	r3, #5
 8004882:	e00a      	b.n	800489a <HAL_GPIO_Init+0x1fa>
 8004884:	2306      	movs	r3, #6
 8004886:	e008      	b.n	800489a <HAL_GPIO_Init+0x1fa>
 8004888:	2304      	movs	r3, #4
 800488a:	e006      	b.n	800489a <HAL_GPIO_Init+0x1fa>
 800488c:	2303      	movs	r3, #3
 800488e:	e004      	b.n	800489a <HAL_GPIO_Init+0x1fa>
 8004890:	2302      	movs	r3, #2
 8004892:	e002      	b.n	800489a <HAL_GPIO_Init+0x1fa>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_GPIO_Init+0x1fa>
 8004898:	2300      	movs	r3, #0
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	f002 0203 	and.w	r2, r2, #3
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	4093      	lsls	r3, r2
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048aa:	4937      	ldr	r1, [pc, #220]	@ (8004988 <HAL_GPIO_Init+0x2e8>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	3302      	adds	r3, #2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048b8:	4b39      	ldr	r3, [pc, #228]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4013      	ands	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048dc:	4a30      	ldr	r2, [pc, #192]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048e2:	4b2f      	ldr	r3, [pc, #188]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004906:	4a26      	ldr	r2, [pc, #152]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800490c:	4b24      	ldr	r3, [pc, #144]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	43db      	mvns	r3, r3
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4013      	ands	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004930:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004936:	4b1a      	ldr	r3, [pc, #104]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	43db      	mvns	r3, r3
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4013      	ands	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800495a:	4a11      	ldr	r2, [pc, #68]	@ (80049a0 <HAL_GPIO_Init+0x300>)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3301      	adds	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	f47f ae9d 	bne.w	80046b0 <HAL_GPIO_Init+0x10>
  }
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40021000 	.word	0x40021000
 8004988:	40010000 	.word	0x40010000
 800498c:	48000400 	.word	0x48000400
 8004990:	48000800 	.word	0x48000800
 8004994:	48000c00 	.word	0x48000c00
 8004998:	48001000 	.word	0x48001000
 800499c:	48001400 	.word	0x48001400
 80049a0:	40010400 	.word	0x40010400

080049a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]
 80049b0:	4613      	mov	r3, r2
 80049b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049b4:	787b      	ldrb	r3, [r7, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049c0:	e002      	b.n	80049c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	041a      	lsls	r2, r3, #16
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	43d9      	mvns	r1, r3
 80049f2:	887b      	ldrh	r3, [r7, #2]
 80049f4:	400b      	ands	r3, r1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a12:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a1e:	4a05      	ldr	r2, [pc, #20]	@ (8004a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f806 	bl	8004a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40010400 	.word	0x40010400

08004a38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e08d      	b.n	8004b7c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fd fee5 	bl	8002844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2224      	movs	r2, #36	@ 0x24
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004aae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac4:	609a      	str	r2, [r3, #8]
 8004ac6:	e006      	b.n	8004ad6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d108      	bne.n	8004af0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	e007      	b.n	8004b00 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004afe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b12:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69d9      	ldr	r1, [r3, #28]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	460b      	mov	r3, r1
 8004b98:	813b      	strh	r3, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	f040 80f9 	bne.w	8004d9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x34>
 8004bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0ed      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2C_Mem_Write+0x4e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e0e6      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bda:	f7ff f937 	bl	8003e4c <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2319      	movs	r3, #25
 8004be6:	2201      	movs	r2, #1
 8004be8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fac3 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e0d1      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2221      	movs	r2, #33	@ 0x21
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2240      	movs	r2, #64	@ 0x40
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c24:	88f8      	ldrh	r0, [r7, #6]
 8004c26:	893a      	ldrh	r2, [r7, #8]
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	4603      	mov	r3, r0
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f9d3 	bl	8004fe0 <I2C_RequestMemoryWrite>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0a9      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2bff      	cmp	r3, #255	@ 0xff
 8004c54:	d90e      	bls.n	8004c74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	22ff      	movs	r2, #255	@ 0xff
 8004c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	8979      	ldrh	r1, [r7, #10]
 8004c64:	2300      	movs	r3, #0
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fc47 	bl	8005500 <I2C_TransferConfig>
 8004c72:	e00f      	b.n	8004c94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	8979      	ldrh	r1, [r7, #10]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fc36 	bl	8005500 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fac6 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e07b      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d034      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x1c8>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d130      	bne.n	8004d4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2180      	movs	r1, #128	@ 0x80
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fa3f 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e04d      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2bff      	cmp	r3, #255	@ 0xff
 8004d0c:	d90e      	bls.n	8004d2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	22ff      	movs	r2, #255	@ 0xff
 8004d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	8979      	ldrh	r1, [r7, #10]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 fbeb 	bl	8005500 <I2C_TransferConfig>
 8004d2a:	e00f      	b.n	8004d4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	8979      	ldrh	r1, [r7, #10]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fbda 	bl	8005500 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d19e      	bne.n	8004c94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 faac 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e01a      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004da8 <HAL_I2C_Mem_Write+0x224>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	fe00e800 	.word	0xfe00e800

08004dac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	4608      	mov	r0, r1
 8004db6:	4611      	mov	r1, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	817b      	strh	r3, [r7, #10]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	813b      	strh	r3, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	f040 80fd 	bne.w	8004fce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x34>
 8004dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0f1      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_I2C_Mem_Read+0x4e>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e0ea      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e02:	f7ff f823 	bl	8003e4c <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	2319      	movs	r3, #25
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f9af 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0d5      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2222      	movs	r2, #34	@ 0x22
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2240      	movs	r2, #64	@ 0x40
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e4c:	88f8      	ldrh	r0, [r7, #6]
 8004e4e:	893a      	ldrh	r2, [r7, #8]
 8004e50:	8979      	ldrh	r1, [r7, #10]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f913 	bl	8005088 <I2C_RequestMemoryRead>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0ad      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2bff      	cmp	r3, #255	@ 0xff
 8004e7c:	d90e      	bls.n	8004e9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	22ff      	movs	r2, #255	@ 0xff
 8004e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	8979      	ldrh	r1, [r7, #10]
 8004e8c:	4b52      	ldr	r3, [pc, #328]	@ (8004fd8 <HAL_I2C_Mem_Read+0x22c>)
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fb33 	bl	8005500 <I2C_TransferConfig>
 8004e9a:	e00f      	b.n	8004ebc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	8979      	ldrh	r1, [r7, #10]
 8004eae:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd8 <HAL_I2C_Mem_Read+0x22c>)
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fb22 	bl	8005500 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f956 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e07c      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d034      	beq.n	8004f7c <HAL_I2C_Mem_Read+0x1d0>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d130      	bne.n	8004f7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	2200      	movs	r2, #0
 8004f22:	2180      	movs	r1, #128	@ 0x80
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f927 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e04d      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2bff      	cmp	r3, #255	@ 0xff
 8004f3c:	d90e      	bls.n	8004f5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	22ff      	movs	r2, #255	@ 0xff
 8004f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	8979      	ldrh	r1, [r7, #10]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fad3 	bl	8005500 <I2C_TransferConfig>
 8004f5a:	e00f      	b.n	8004f7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	8979      	ldrh	r1, [r7, #10]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fac2 	bl	8005500 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d19a      	bne.n	8004ebc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f994 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e01a      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_I2C_Mem_Read+0x230>)
 8004fae:	400b      	ands	r3, r1
 8004fb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	80002400 	.word	0x80002400
 8004fdc:	fe00e800 	.word	0xfe00e800

08004fe0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	461a      	mov	r2, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	817b      	strh	r3, [r7, #10]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	813b      	strh	r3, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	8979      	ldrh	r1, [r7, #10]
 8005000:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <I2C_RequestMemoryWrite+0xa4>)
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fa79 	bl	8005500 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	69b9      	ldr	r1, [r7, #24]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f909 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e02c      	b.n	800507c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d105      	bne.n	8005034 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005028:	893b      	ldrh	r3, [r7, #8]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	629a      	str	r2, [r3, #40]	@ 0x28
 8005032:	e015      	b.n	8005060 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	b29b      	uxth	r3, r3
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	69b9      	ldr	r1, [r7, #24]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f8ef 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e012      	b.n	800507c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005056:	893b      	ldrh	r3, [r7, #8]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2200      	movs	r2, #0
 8005068:	2180      	movs	r1, #128	@ 0x80
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f884 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	80002000 	.word	0x80002000

08005088 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	461a      	mov	r2, r3
 8005096:	4603      	mov	r3, r0
 8005098:	817b      	strh	r3, [r7, #10]
 800509a:	460b      	mov	r3, r1
 800509c:	813b      	strh	r3, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	8979      	ldrh	r1, [r7, #10]
 80050a8:	4b20      	ldr	r3, [pc, #128]	@ (800512c <I2C_RequestMemoryRead+0xa4>)
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fa26 	bl	8005500 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	69b9      	ldr	r1, [r7, #24]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f8b6 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e02c      	b.n	8005122 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050ce:	893b      	ldrh	r3, [r7, #8]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050d8:	e015      	b.n	8005106 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050da:	893b      	ldrh	r3, [r7, #8]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	b29b      	uxth	r3, r3
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f89c 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e012      	b.n	8005122 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050fc:	893b      	ldrh	r3, [r7, #8]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2200      	movs	r2, #0
 800510e:	2140      	movs	r1, #64	@ 0x40
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f831 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	80002000 	.word	0x80002000

08005130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	d103      	bne.n	800514e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d007      	beq.n	800516c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	619a      	str	r2, [r3, #24]
  }
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005188:	e03b      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f8d6 	bl	8005340 <I2C_IsErrorOccurred>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e041      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a4:	d02d      	beq.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fe fe51 	bl	8003e4c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d122      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d113      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0b4      	beq.n	800518a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005236:	e033      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f87f 	bl	8005340 <I2C_IsErrorOccurred>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e031      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005252:	d025      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fe fdfa 	bl	8003e4c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11a      	bne.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d013      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d1c4      	bne.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c4:	e02f      	b.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f838 	bl	8005340 <I2C_IsErrorOccurred>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02d      	b.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe fdb7 	bl	8003e4c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11a      	bne.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d013      	beq.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e007      	b.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b20      	cmp	r3, #32
 8005332:	d1c8      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	@ 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d068      	beq.n	800543e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2210      	movs	r2, #16
 8005372:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005374:	e049      	b.n	800540a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800537c:	d045      	beq.n	800540a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fe fd65 	bl	8003e4c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_IsErrorOccurred+0x54>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d13a      	bne.n	800540a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800539e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053b6:	d121      	bne.n	80053fc <I2C_IsErrorOccurred+0xbc>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053be:	d01d      	beq.n	80053fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d01a      	beq.n	80053fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80053d6:	f7fe fd39 	bl	8003e4c <HAL_GetTick>
 80053da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053dc:	e00e      	b.n	80053fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053de:	f7fe fd35 	bl	8003e4c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b19      	cmp	r3, #25
 80053ea:	d907      	bls.n	80053fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f043 0320 	orr.w	r3, r3, #32
 80053f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053fa:	e006      	b.n	800540a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b20      	cmp	r3, #32
 8005408:	d1e9      	bne.n	80053de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d003      	beq.n	8005420 <I2C_IsErrorOccurred+0xe0>
 8005418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0aa      	beq.n	8005376 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2220      	movs	r2, #32
 800542e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f043 0308 	orr.w	r3, r3, #8
 8005478:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f043 0302 	orr.w	r3, r3, #2
 800549a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01c      	beq.n	80054ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fe3b 	bl	8005130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <I2C_IsErrorOccurred+0x1bc>)
 80054c6:	400b      	ands	r3, r1
 80054c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80054ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3728      	adds	r7, #40	@ 0x28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	fe00e800 	.word	0xfe00e800

08005500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	4613      	mov	r3, r2
 8005510:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005512:	897b      	ldrh	r3, [r7, #10]
 8005514:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005518:	7a7b      	ldrb	r3, [r7, #9]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005520:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	4313      	orrs	r3, r2
 800552a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800552e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	0d5b      	lsrs	r3, r3, #21
 800553a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <I2C_TransferConfig+0x60>)
 8005540:	430b      	orrs	r3, r1
 8005542:	43db      	mvns	r3, r3
 8005544:	ea02 0103 	and.w	r1, r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	03ff63ff 	.word	0x03ff63ff

08005564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b20      	cmp	r3, #32
 8005578:	d138      	bne.n	80055ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005584:	2302      	movs	r3, #2
 8005586:	e032      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	@ 0x24
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d139      	bne.n	8005684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800561a:	2302      	movs	r3, #2
 800561c:	e033      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	@ 0x24
 800562a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800564c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d141      	bne.n	8005726 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056a2:	4b4b      	ldr	r3, [pc, #300]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ae:	d131      	bne.n	8005714 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056b0:	4b47      	ldr	r3, [pc, #284]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056b6:	4a46      	ldr	r2, [pc, #280]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056c0:	4b43      	ldr	r3, [pc, #268]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056c8:	4a41      	ldr	r2, [pc, #260]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056d0:	4b40      	ldr	r3, [pc, #256]	@ (80057d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2232      	movs	r2, #50	@ 0x32
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	4a3f      	ldr	r2, [pc, #252]	@ (80057d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	0c9b      	lsrs	r3, r3, #18
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e6:	e002      	b.n	80056ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ee:	4b38      	ldr	r3, [pc, #224]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fa:	d102      	bne.n	8005702 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f2      	bne.n	80056e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005702:	4b33      	ldr	r3, [pc, #204]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570e:	d158      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e057      	b.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005714:	4b2e      	ldr	r3, [pc, #184]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571a:	4a2d      	ldr	r2, [pc, #180]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800571c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005724:	e04d      	b.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572c:	d141      	bne.n	80057b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800572e:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800573a:	d131      	bne.n	80057a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800573c:	4b24      	ldr	r3, [pc, #144]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005742:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005754:	4a1e      	ldr	r2, [pc, #120]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800575a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2232      	movs	r2, #50	@ 0x32
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005768:	fba2 2303 	umull	r2, r3, r2, r3
 800576c:	0c9b      	lsrs	r3, r3, #18
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005772:	e002      	b.n	800577a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800577a:	4b15      	ldr	r3, [pc, #84]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005786:	d102      	bne.n	800578e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f2      	bne.n	8005774 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800578e:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d112      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e011      	b.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057a0:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a6:	4a0a      	ldr	r2, [pc, #40]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057b0:	e007      	b.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057ba:	4a05      	ldr	r2, [pc, #20]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40007000 	.word	0x40007000
 80057d4:	2000001c 	.word	0x2000001c
 80057d8:	431bde83 	.word	0x431bde83

080057dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057ea:	6093      	str	r3, [r2, #8]
}
 80057ec:	bf00      	nop
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40007000 	.word	0x40007000

080057fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e2fe      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d075      	beq.n	8005906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581a:	4b97      	ldr	r3, [pc, #604]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005824:	4b94      	ldr	r3, [pc, #592]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d102      	bne.n	800583a <HAL_RCC_OscConfig+0x3e>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b03      	cmp	r3, #3
 8005838:	d002      	beq.n	8005840 <HAL_RCC_OscConfig+0x44>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d10b      	bne.n	8005858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005840:	4b8d      	ldr	r3, [pc, #564]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05b      	beq.n	8005904 <HAL_RCC_OscConfig+0x108>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d157      	bne.n	8005904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e2d9      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d106      	bne.n	8005870 <HAL_RCC_OscConfig+0x74>
 8005862:	4b85      	ldr	r3, [pc, #532]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a84      	ldr	r2, [pc, #528]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e01d      	b.n	80058ac <HAL_RCC_OscConfig+0xb0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005878:	d10c      	bne.n	8005894 <HAL_RCC_OscConfig+0x98>
 800587a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	4b7c      	ldr	r3, [pc, #496]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e00b      	b.n	80058ac <HAL_RCC_OscConfig+0xb0>
 8005894:	4b78      	ldr	r3, [pc, #480]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a77      	ldr	r2, [pc, #476]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800589a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b75      	ldr	r3, [pc, #468]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a74      	ldr	r2, [pc, #464]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d013      	beq.n	80058dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fe faca 	bl	8003e4c <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058bc:	f7fe fac6 	bl	8003e4c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	@ 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e29e      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0xc0>
 80058da:	e014      	b.n	8005906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe fab6 	bl	8003e4c <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fe fab2 	bl	8003e4c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	@ 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e28a      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058f6:	4b60      	ldr	r3, [pc, #384]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0xe8>
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d075      	beq.n	80059fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591c:	4b56      	ldr	r3, [pc, #344]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d102      	bne.n	8005932 <HAL_RCC_OscConfig+0x136>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d002      	beq.n	8005938 <HAL_RCC_OscConfig+0x13c>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d11f      	bne.n	8005978 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005938:	4b4f      	ldr	r3, [pc, #316]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_OscConfig+0x154>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e25d      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005950:	4b49      	ldr	r3, [pc, #292]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	4946      	ldr	r1, [pc, #280]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005960:	4313      	orrs	r3, r2
 8005962:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005964:	4b45      	ldr	r3, [pc, #276]	@ (8005a7c <HAL_RCC_OscConfig+0x280>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7fd fd3d 	bl	80033e8 <HAL_InitTick>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d043      	beq.n	80059fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e249      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d023      	beq.n	80059c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005980:	4b3d      	ldr	r3, [pc, #244]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a3c      	ldr	r2, [pc, #240]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fe fa5e 	bl	8003e4c <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005994:	f7fe fa5a 	bl	8003e4c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e232      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059a6:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	492d      	ldr	r1, [pc, #180]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	604b      	str	r3, [r1, #4]
 80059c6:	e01a      	b.n	80059fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fa3a 	bl	8003e4c <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fe fa36 	bl	8003e4c <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e20e      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059ee:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x1e0>
 80059fa:	e000      	b.n	80059fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d041      	beq.n	8005a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01c      	beq.n	8005a4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a12:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a18:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a22:	f7fe fa13 	bl	8003e4c <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fe fa0f 	bl	8003e4c <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1e7      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ef      	beq.n	8005a2a <HAL_RCC_OscConfig+0x22e>
 8005a4a:	e020      	b.n	8005a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a52:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_RCC_OscConfig+0x27c>)
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fe f9f6 	bl	8003e4c <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a62:	e00d      	b.n	8005a80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a64:	f7fe f9f2 	bl	8003e4c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d906      	bls.n	8005a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e1ca      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a80:	4b8c      	ldr	r3, [pc, #560]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ea      	bne.n	8005a64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80a6 	beq.w	8005be8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005aa0:	4b84      	ldr	r3, [pc, #528]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x2b4>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_RCC_OscConfig+0x2b6>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aba:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad2:	4b79      	ldr	r3, [pc, #484]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d118      	bne.n	8005b10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ade:	4b76      	ldr	r3, [pc, #472]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a75      	ldr	r2, [pc, #468]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aea:	f7fe f9af 	bl	8003e4c <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fe f9ab 	bl	8003e4c <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e183      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b04:	4b6c      	ldr	r3, [pc, #432]	@ (8005cb8 <HAL_RCC_OscConfig+0x4bc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d108      	bne.n	8005b2a <HAL_RCC_OscConfig+0x32e>
 8005b18:	4b66      	ldr	r3, [pc, #408]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1e:	4a65      	ldr	r2, [pc, #404]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b28:	e024      	b.n	8005b74 <HAL_RCC_OscConfig+0x378>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d110      	bne.n	8005b54 <HAL_RCC_OscConfig+0x358>
 8005b32:	4b60      	ldr	r3, [pc, #384]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b38:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	f043 0304 	orr.w	r3, r3, #4
 8005b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b42:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b48:	4a5a      	ldr	r2, [pc, #360]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b52:	e00f      	b.n	8005b74 <HAL_RCC_OscConfig+0x378>
 8005b54:	4b57      	ldr	r3, [pc, #348]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5a:	4a56      	ldr	r2, [pc, #344]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b64:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	4a52      	ldr	r2, [pc, #328]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d016      	beq.n	8005baa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fe f966 	bl	8003e4c <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b82:	e00a      	b.n	8005b9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b84:	f7fe f962 	bl	8003e4c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e138      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b9a:	4b46      	ldr	r3, [pc, #280]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0ed      	beq.n	8005b84 <HAL_RCC_OscConfig+0x388>
 8005ba8:	e015      	b.n	8005bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005baa:	f7fe f94f 	bl	8003e4c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fe f94b 	bl	8003e4c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e121      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1ed      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d105      	bne.n	8005be8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bdc:	4b35      	ldr	r3, [pc, #212]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be0:	4a34      	ldr	r2, [pc, #208]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d03c      	beq.n	8005c6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01c      	beq.n	8005c36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c02:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fe f91e 	bl	8003e4c <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c14:	f7fe f91a 	bl	8003e4c <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0f2      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c26:	4b23      	ldr	r3, [pc, #140]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0ef      	beq.n	8005c14 <HAL_RCC_OscConfig+0x418>
 8005c34:	e01b      	b.n	8005c6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c36:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c46:	f7fe f901 	bl	8003e4c <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c4e:	f7fe f8fd 	bl	8003e4c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e0d5      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c60:	4b14      	ldr	r3, [pc, #80]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ef      	bne.n	8005c4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80c9 	beq.w	8005e0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c78:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 030c 	and.w	r3, r3, #12
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	f000 8083 	beq.w	8005d8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d15e      	bne.n	8005d4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a08      	ldr	r2, [pc, #32]	@ (8005cb4 <HAL_RCC_OscConfig+0x4b8>)
 8005c94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9a:	f7fe f8d7 	bl	8003e4c <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca0:	e00c      	b.n	8005cbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca2:	f7fe f8d3 	bl	8003e4c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d905      	bls.n	8005cbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0ab      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cbc:	4b55      	ldr	r3, [pc, #340]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ec      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc8:	4b52      	ldr	r3, [pc, #328]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	4b52      	ldr	r3, [pc, #328]	@ (8005e18 <HAL_RCC_OscConfig+0x61c>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6a11      	ldr	r1, [r2, #32]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	0112      	lsls	r2, r2, #4
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ce2:	0212      	lsls	r2, r2, #8
 8005ce4:	4311      	orrs	r1, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cea:	0852      	lsrs	r2, r2, #1
 8005cec:	3a01      	subs	r2, #1
 8005cee:	0552      	lsls	r2, r2, #21
 8005cf0:	4311      	orrs	r1, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cf6:	0852      	lsrs	r2, r2, #1
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0652      	lsls	r2, r2, #25
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d02:	06d2      	lsls	r2, r2, #27
 8005d04:	430a      	orrs	r2, r1
 8005d06:	4943      	ldr	r1, [pc, #268]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0c:	4b41      	ldr	r3, [pc, #260]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a40      	ldr	r2, [pc, #256]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d18:	4b3e      	ldr	r3, [pc, #248]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fe f892 	bl	8003e4c <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fe f88e 	bl	8003e4c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e066      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3e:	4b35      	ldr	r3, [pc, #212]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x530>
 8005d4a:	e05e      	b.n	8005e0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4c:	4b31      	ldr	r3, [pc, #196]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a30      	ldr	r2, [pc, #192]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fe f878 	bl	8003e4c <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d60:	f7fe f874 	bl	8003e4c <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e04c      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d72:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d7e:	4b25      	ldr	r3, [pc, #148]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	4924      	ldr	r1, [pc, #144]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d84:	4b25      	ldr	r3, [pc, #148]	@ (8005e1c <HAL_RCC_OscConfig+0x620>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	60cb      	str	r3, [r1, #12]
 8005d8a:	e03e      	b.n	8005e0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e039      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	@ (8005e14 <HAL_RCC_OscConfig+0x618>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0203 	and.w	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d12c      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	3b01      	subs	r3, #1
 8005db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d123      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d11b      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d113      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	3b01      	subs	r3, #1
 8005dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	019f800c 	.word	0x019f800c
 8005e1c:	feeefffc 	.word	0xfeeefffc

08005e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e11e      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e38:	4b91      	ldr	r3, [pc, #580]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d910      	bls.n	8005e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	4b8e      	ldr	r3, [pc, #568]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 020f 	bic.w	r2, r3, #15
 8005e4e:	498c      	ldr	r1, [pc, #560]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e56:	4b8a      	ldr	r3, [pc, #552]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d001      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e106      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d073      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d129      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7c:	4b81      	ldr	r3, [pc, #516]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0f4      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e8c:	f000 f9d0 	bl	8006230 <RCC_GetSysClockFreqFromPLLSource>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4a7c      	ldr	r2, [pc, #496]	@ (8006088 <HAL_RCC_ClockConfig+0x268>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d93f      	bls.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d033      	beq.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d12f      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eba:	4b72      	ldr	r3, [pc, #456]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ec2:	4a70      	ldr	r2, [pc, #448]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005eca:	2380      	movs	r3, #128	@ 0x80
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e024      	b.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d107      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0c6      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee8:	4b66      	ldr	r3, [pc, #408]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0be      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ef8:	f000 f8ce 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4a61      	ldr	r2, [pc, #388]	@ (8006088 <HAL_RCC_ClockConfig+0x268>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d909      	bls.n	8005f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f06:	4b5f      	ldr	r3, [pc, #380]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f16:	2380      	movs	r3, #128	@ 0x80
 8005f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f023 0203 	bic.w	r2, r3, #3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4957      	ldr	r1, [pc, #348]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2c:	f7fd ff8e 	bl	8003e4c <HAL_GetTick>
 8005f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f32:	e00a      	b.n	8005f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f34:	f7fd ff8a 	bl	8003e4c <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e095      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 020c 	and.w	r2, r3, #12
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d1eb      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d023      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f74:	4b43      	ldr	r3, [pc, #268]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a42      	ldr	r2, [pc, #264]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f94:	4a3b      	ldr	r2, [pc, #236]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9c:	4b39      	ldr	r3, [pc, #228]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4936      	ldr	r1, [pc, #216]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b80      	cmp	r3, #128	@ 0x80
 8005fb4:	d105      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fb6:	4b33      	ldr	r3, [pc, #204]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4a32      	ldr	r2, [pc, #200]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d21d      	bcs.n	800600c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 020f 	bic.w	r2, r3, #15
 8005fd8:	4929      	ldr	r1, [pc, #164]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fe0:	f7fd ff34 	bl	8003e4c <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe8:	f7fd ff30 	bl	8003e4c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e03b      	b.n	8006076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b20      	ldr	r3, [pc, #128]	@ (8006080 <HAL_RCC_ClockConfig+0x260>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d1ed      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006018:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4917      	ldr	r1, [pc, #92]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006036:	4b13      	ldr	r3, [pc, #76]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	490f      	ldr	r1, [pc, #60]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800604a:	f000 f825 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800604e:	4602      	mov	r2, r0
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <HAL_RCC_ClockConfig+0x264>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	490c      	ldr	r1, [pc, #48]	@ (800608c <HAL_RCC_ClockConfig+0x26c>)
 800605c:	5ccb      	ldrb	r3, [r1, r3]
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	fa22 f303 	lsr.w	r3, r2, r3
 8006066:	4a0a      	ldr	r2, [pc, #40]	@ (8006090 <HAL_RCC_ClockConfig+0x270>)
 8006068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800606a:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <HAL_RCC_ClockConfig+0x274>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fd f9ba 	bl	80033e8 <HAL_InitTick>
 8006074:	4603      	mov	r3, r0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40022000 	.word	0x40022000
 8006084:	40021000 	.word	0x40021000
 8006088:	04c4b400 	.word	0x04c4b400
 800608c:	080203cc 	.word	0x080203cc
 8006090:	2000001c 	.word	0x2000001c
 8006094:	20000020 	.word	0x20000020

08006098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800609e:	4b2c      	ldr	r3, [pc, #176]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d102      	bne.n	80060b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	e047      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060b0:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 030c 	and.w	r3, r3, #12
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d102      	bne.n	80060c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060bc:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	e03e      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060c2:	4b23      	ldr	r3, [pc, #140]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d136      	bne.n	800613c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ce:	4b20      	ldr	r3, [pc, #128]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	091b      	lsrs	r3, r3, #4
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	3301      	adds	r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d10c      	bne.n	8006106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060f6:	68d2      	ldr	r2, [r2, #12]
 80060f8:	0a12      	lsrs	r2, r2, #8
 80060fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	617b      	str	r3, [r7, #20]
      break;
 8006104:	e00c      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006106:	4a13      	ldr	r2, [pc, #76]	@ (8006154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	fbb2 f3f3 	udiv	r3, r2, r3
 800610e:	4a10      	ldr	r2, [pc, #64]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	0a12      	lsrs	r2, r2, #8
 8006114:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006118:	fb02 f303 	mul.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]
      break;
 800611e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	0e5b      	lsrs	r3, r3, #25
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	e001      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006140:	693b      	ldr	r3, [r7, #16]
}
 8006142:	4618      	mov	r0, r3
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40021000 	.word	0x40021000
 8006154:	00f42400 	.word	0x00f42400
 8006158:	016e3600 	.word	0x016e3600

0800615c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006160:	4b03      	ldr	r3, [pc, #12]	@ (8006170 <HAL_RCC_GetHCLKFreq+0x14>)
 8006162:	681b      	ldr	r3, [r3, #0]
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	2000001c 	.word	0x2000001c

08006174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006178:	f7ff fff0 	bl	800615c <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4904      	ldr	r1, [pc, #16]	@ (800619c <HAL_RCC_GetPCLK1Freq+0x28>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40021000 	.word	0x40021000
 800619c:	080203dc 	.word	0x080203dc

080061a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061a4:	f7ff ffda 	bl	800615c <HAL_RCC_GetHCLKFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b06      	ldr	r3, [pc, #24]	@ (80061c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	0adb      	lsrs	r3, r3, #11
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	4904      	ldr	r1, [pc, #16]	@ (80061c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061b6:	5ccb      	ldrb	r3, [r1, r3]
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40021000 	.word	0x40021000
 80061c8:	080203dc 	.word	0x080203dc

080061cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	220f      	movs	r2, #15
 80061da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80061dc:	4b12      	ldr	r3, [pc, #72]	@ (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0203 	and.w	r2, r3, #3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80061e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80061f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006200:	4b09      	ldr	r3, [pc, #36]	@ (8006228 <HAL_RCC_GetClockConfig+0x5c>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800620e:	4b07      	ldr	r3, [pc, #28]	@ (800622c <HAL_RCC_GetClockConfig+0x60>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	601a      	str	r2, [r3, #0]
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40021000 	.word	0x40021000
 800622c:	40022000 	.word	0x40022000

08006230 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006236:	4b1e      	ldr	r3, [pc, #120]	@ (80062b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006240:	4b1b      	ldr	r3, [pc, #108]	@ (80062b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d10c      	bne.n	800626e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006254:	4a17      	ldr	r2, [pc, #92]	@ (80062b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	4a14      	ldr	r2, [pc, #80]	@ (80062b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800625e:	68d2      	ldr	r2, [r2, #12]
 8006260:	0a12      	lsrs	r2, r2, #8
 8006262:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	617b      	str	r3, [r7, #20]
    break;
 800626c:	e00c      	b.n	8006288 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800626e:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	4a0e      	ldr	r2, [pc, #56]	@ (80062b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006278:	68d2      	ldr	r2, [r2, #12]
 800627a:	0a12      	lsrs	r2, r2, #8
 800627c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006280:	fb02 f303 	mul.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
    break;
 8006286:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006288:	4b09      	ldr	r3, [pc, #36]	@ (80062b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	0e5b      	lsrs	r3, r3, #25
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	3301      	adds	r3, #1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80062a2:	687b      	ldr	r3, [r7, #4]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40021000 	.word	0x40021000
 80062b4:	016e3600 	.word	0x016e3600
 80062b8:	00f42400 	.word	0x00f42400

080062bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062c4:	2300      	movs	r3, #0
 80062c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062c8:	2300      	movs	r3, #0
 80062ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8098 	beq.w	800640a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062de:	4b43      	ldr	r3, [pc, #268]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10d      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ea:	4b40      	ldr	r3, [pc, #256]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ee:	4a3f      	ldr	r2, [pc, #252]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f6:	4b3d      	ldr	r3, [pc, #244]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	60bb      	str	r3, [r7, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006302:	2301      	movs	r3, #1
 8006304:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006306:	4b3a      	ldr	r3, [pc, #232]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a39      	ldr	r2, [pc, #228]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800630c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006310:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006312:	f7fd fd9b 	bl	8003e4c <HAL_GetTick>
 8006316:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006318:	e009      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631a:	f7fd fd97 	bl	8003e4c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d902      	bls.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	74fb      	strb	r3, [r7, #19]
        break;
 800632c:	e005      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800632e:	4b30      	ldr	r3, [pc, #192]	@ (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0ef      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800633a:	7cfb      	ldrb	r3, [r7, #19]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d159      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006340:	4b2a      	ldr	r3, [pc, #168]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01e      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d019      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800635c:	4b23      	ldr	r3, [pc, #140]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006368:	4b20      	ldr	r3, [pc, #128]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636e:	4a1f      	ldr	r2, [pc, #124]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006378:	4b1c      	ldr	r3, [pc, #112]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637e:	4a1b      	ldr	r2, [pc, #108]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006388:	4a18      	ldr	r2, [pc, #96]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639a:	f7fd fd57 	bl	8003e4c <HAL_GetTick>
 800639e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a0:	e00b      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a2:	f7fd fd53 	bl	8003e4c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d902      	bls.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	74fb      	strb	r3, [r7, #19]
            break;
 80063b8:	e006      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ba:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0ec      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063c8:	7cfb      	ldrb	r3, [r7, #19]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063ce:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063dc:	4903      	ldr	r1, [pc, #12]	@ (80063ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063e4:	e008      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063e6:	7cfb      	ldrb	r3, [r7, #19]
 80063e8:	74bb      	strb	r3, [r7, #18]
 80063ea:	e005      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063ec:	40021000 	.word	0x40021000
 80063f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
 80063f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063f8:	7c7b      	ldrb	r3, [r7, #17]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063fe:	4ba7      	ldr	r3, [pc, #668]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006402:	4aa6      	ldr	r2, [pc, #664]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006408:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006416:	4ba1      	ldr	r3, [pc, #644]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641c:	f023 0203 	bic.w	r2, r3, #3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	499d      	ldr	r1, [pc, #628]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006438:	4b98      	ldr	r3, [pc, #608]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	f023 020c 	bic.w	r2, r3, #12
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4995      	ldr	r1, [pc, #596]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800645a:	4b90      	ldr	r3, [pc, #576]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006460:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	498c      	ldr	r1, [pc, #560]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800647c:	4b87      	ldr	r3, [pc, #540]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006482:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	4984      	ldr	r1, [pc, #528]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800649e:	4b7f      	ldr	r3, [pc, #508]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	497b      	ldr	r1, [pc, #492]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c0:	4b76      	ldr	r3, [pc, #472]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	4973      	ldr	r1, [pc, #460]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064e2:	4b6e      	ldr	r3, [pc, #440]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	496a      	ldr	r1, [pc, #424]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006504:	4b65      	ldr	r3, [pc, #404]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	4962      	ldr	r1, [pc, #392]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006526:	4b5d      	ldr	r3, [pc, #372]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800652c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	4959      	ldr	r1, [pc, #356]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006548:	4b54      	ldr	r3, [pc, #336]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800654a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	4951      	ldr	r1, [pc, #324]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800656a:	4b4c      	ldr	r3, [pc, #304]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006570:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	4948      	ldr	r1, [pc, #288]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d015      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800658c:	4b43      	ldr	r3, [pc, #268]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	4940      	ldr	r1, [pc, #256]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065aa:	d105      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ac:	4b3b      	ldr	r3, [pc, #236]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4a3a      	ldr	r2, [pc, #232]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d015      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065c4:	4b35      	ldr	r3, [pc, #212]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d2:	4932      	ldr	r1, [pc, #200]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065e2:	d105      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e4:	4b2d      	ldr	r3, [pc, #180]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4a2c      	ldr	r2, [pc, #176]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d015      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065fc:	4b27      	ldr	r3, [pc, #156]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006602:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	4924      	ldr	r1, [pc, #144]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800661a:	d105      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800661c:	4b1f      	ldr	r3, [pc, #124]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4a1e      	ldr	r2, [pc, #120]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006626:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d015      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006634:	4b19      	ldr	r3, [pc, #100]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006642:	4916      	ldr	r1, [pc, #88]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006654:	4b11      	ldr	r3, [pc, #68]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4a10      	ldr	r2, [pc, #64]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800665e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d019      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800666c:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006672:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	4908      	ldr	r1, [pc, #32]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800668a:	d109      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4a02      	ldr	r2, [pc, #8]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006696:	60d3      	str	r3, [r2, #12]
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d015      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066ac:	4b29      	ldr	r3, [pc, #164]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ba:	4926      	ldr	r1, [pc, #152]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ca:	d105      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066cc:	4b21      	ldr	r3, [pc, #132]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4a20      	ldr	r2, [pc, #128]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d015      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80066e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f2:	4918      	ldr	r1, [pc, #96]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006702:	d105      	bne.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006704:	4b13      	ldr	r3, [pc, #76]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4a12      	ldr	r2, [pc, #72]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800670a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800670e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d015      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800671c:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800671e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006722:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800672a:	490a      	ldr	r1, [pc, #40]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800673a:	d105      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800673c:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	4a04      	ldr	r2, [pc, #16]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006746:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006748:	7cbb      	ldrb	r3, [r7, #18]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e049      	b.n	80067fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d106      	bne.n	8006784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fd f804 	bl	800378c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f000 fbac 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	d001      	beq.n	8006820 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e04c      	b.n	80068ba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a26      	ldr	r2, [pc, #152]	@ (80068c8 <HAL_TIM_Base_Start+0xc0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d022      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683a:	d01d      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a22      	ldr	r2, [pc, #136]	@ (80068cc <HAL_TIM_Base_Start+0xc4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d018      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a21      	ldr	r2, [pc, #132]	@ (80068d0 <HAL_TIM_Base_Start+0xc8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d013      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1f      	ldr	r2, [pc, #124]	@ (80068d4 <HAL_TIM_Base_Start+0xcc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00e      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1e      	ldr	r2, [pc, #120]	@ (80068d8 <HAL_TIM_Base_Start+0xd0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d009      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1c      	ldr	r2, [pc, #112]	@ (80068dc <HAL_TIM_Base_Start+0xd4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d004      	beq.n	8006878 <HAL_TIM_Base_Start+0x70>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <HAL_TIM_Base_Start+0xd8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d115      	bne.n	80068a4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	4b19      	ldr	r3, [pc, #100]	@ (80068e4 <HAL_TIM_Base_Start+0xdc>)
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b06      	cmp	r3, #6
 8006888:	d015      	beq.n	80068b6 <HAL_TIM_Base_Start+0xae>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	d011      	beq.n	80068b6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a2:	e008      	b.n	80068b6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	e000      	b.n	80068b8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40012c00 	.word	0x40012c00
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40013400 	.word	0x40013400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40015000 	.word	0x40015000
 80068e4:	00010007 	.word	0x00010007

080068e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e054      	b.n	80069aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a26      	ldr	r2, [pc, #152]	@ (80069b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d022      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692a:	d01d      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a22      	ldr	r2, [pc, #136]	@ (80069bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d018      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a21      	ldr	r2, [pc, #132]	@ (80069c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d013      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00e      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1e      	ldr	r2, [pc, #120]	@ (80069c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d009      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1c      	ldr	r2, [pc, #112]	@ (80069cc <HAL_TIM_Base_Start_IT+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x80>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1b      	ldr	r2, [pc, #108]	@ (80069d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d115      	bne.n	8006994 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <HAL_TIM_Base_Start_IT+0xec>)
 8006970:	4013      	ands	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b06      	cmp	r3, #6
 8006978:	d015      	beq.n	80069a6 <HAL_TIM_Base_Start_IT+0xbe>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006980:	d011      	beq.n	80069a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0201 	orr.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006992:	e008      	b.n	80069a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e000      	b.n	80069a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40013400 	.word	0x40013400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40015000 	.word	0x40015000
 80069d4:	00010007 	.word	0x00010007

080069d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0202 	mvn.w	r2, #2
 8006a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa48 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa3a 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa4b 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d020      	beq.n	8006a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01b      	beq.n	8006a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0204 	mvn.w	r2, #4
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa22 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa14 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa25 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d020      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01b      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0208 	mvn.w	r2, #8
 8006aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2204      	movs	r2, #4
 8006aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f9fc 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006ac0:	e005      	b.n	8006ace <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9ee 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f9ff 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d020      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01b      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0210 	mvn.w	r2, #16
 8006af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2208      	movs	r2, #8
 8006af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f9d6 	bl	8006eb8 <HAL_TIM_IC_CaptureCallback>
 8006b0c:	e005      	b.n	8006b1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f9c8 	bl	8006ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f9d9 	bl	8006ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00c      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d007      	beq.n	8006b44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0201 	mvn.w	r2, #1
 8006b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fb ff42 	bl	80029c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00c      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fbb1 	bl	80072d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fba9 	bl	80072e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00c      	beq.n	8006bba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f993 	bl	8006ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f06f 0220 	mvn.w	r2, #32
 8006bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fb71 	bl	80072c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fb7d 	bl	80072fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fb75 	bl	8007310 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fb6d 	bl	8007324 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00c      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb65 	bl	8007338 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIM_ConfigClockSource+0x1c>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e0f6      	b.n	8006e82 <HAL_TIM_ConfigClockSource+0x20a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006cb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6f      	ldr	r2, [pc, #444]	@ (8006e8c <HAL_TIM_ConfigClockSource+0x214>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	f000 80c1 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8006e8c <HAL_TIM_ConfigClockSource+0x214>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f200 80c6 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cdc:	4a6c      	ldr	r2, [pc, #432]	@ (8006e90 <HAL_TIM_ConfigClockSource+0x218>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	f000 80b9 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006ce4:	4a6a      	ldr	r2, [pc, #424]	@ (8006e90 <HAL_TIM_ConfigClockSource+0x218>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	f200 80be 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cec:	4a69      	ldr	r2, [pc, #420]	@ (8006e94 <HAL_TIM_ConfigClockSource+0x21c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	f000 80b1 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006cf4:	4a67      	ldr	r2, [pc, #412]	@ (8006e94 <HAL_TIM_ConfigClockSource+0x21c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	f200 80b6 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cfc:	4a66      	ldr	r2, [pc, #408]	@ (8006e98 <HAL_TIM_ConfigClockSource+0x220>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	f000 80a9 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d04:	4a64      	ldr	r2, [pc, #400]	@ (8006e98 <HAL_TIM_ConfigClockSource+0x220>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	f200 80ae 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d0c:	4a63      	ldr	r2, [pc, #396]	@ (8006e9c <HAL_TIM_ConfigClockSource+0x224>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f000 80a1 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d14:	4a61      	ldr	r2, [pc, #388]	@ (8006e9c <HAL_TIM_ConfigClockSource+0x224>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	f200 80a6 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d1c:	4a60      	ldr	r2, [pc, #384]	@ (8006ea0 <HAL_TIM_ConfigClockSource+0x228>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f000 8099 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d24:	4a5e      	ldr	r2, [pc, #376]	@ (8006ea0 <HAL_TIM_ConfigClockSource+0x228>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	f200 809e 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d30:	f000 8091 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d38:	f200 8096 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d40:	f000 8089 	beq.w	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d48:	f200 808e 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d50:	d03e      	beq.n	8006dd0 <HAL_TIM_ConfigClockSource+0x158>
 8006d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d56:	f200 8087 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5e:	f000 8086 	beq.w	8006e6e <HAL_TIM_ConfigClockSource+0x1f6>
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d66:	d87f      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d68:	2b70      	cmp	r3, #112	@ 0x70
 8006d6a:	d01a      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x12a>
 8006d6c:	2b70      	cmp	r3, #112	@ 0x70
 8006d6e:	d87b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d70:	2b60      	cmp	r3, #96	@ 0x60
 8006d72:	d050      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x19e>
 8006d74:	2b60      	cmp	r3, #96	@ 0x60
 8006d76:	d877      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d78:	2b50      	cmp	r3, #80	@ 0x50
 8006d7a:	d03c      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x17e>
 8006d7c:	2b50      	cmp	r3, #80	@ 0x50
 8006d7e:	d873      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d80:	2b40      	cmp	r3, #64	@ 0x40
 8006d82:	d058      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x1be>
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	d86f      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d88:	2b30      	cmp	r3, #48	@ 0x30
 8006d8a:	d064      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d8c:	2b30      	cmp	r3, #48	@ 0x30
 8006d8e:	d86b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d060      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d867      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05c      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d05a      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	e062      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	f000 f9cf 	bl	8007154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	609a      	str	r2, [r3, #8]
      break;
 8006dce:	e04f      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	f000 f9b8 	bl	8007154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df2:	609a      	str	r2, [r3, #8]
      break;
 8006df4:	e03c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e02:	461a      	mov	r2, r3
 8006e04:	f000 f92a 	bl	800705c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2150      	movs	r1, #80	@ 0x50
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f983 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006e14:	e02c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e22:	461a      	mov	r2, r3
 8006e24:	f000 f949 	bl	80070ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2160      	movs	r1, #96	@ 0x60
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f973 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006e34:	e01c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e42:	461a      	mov	r2, r3
 8006e44:	f000 f90a 	bl	800705c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2140      	movs	r1, #64	@ 0x40
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f963 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006e54:	e00c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f000 f95a 	bl	800711a <TIM_ITRx_SetConfig>
      break;
 8006e66:	e003      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e000      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	00100070 	.word	0x00100070
 8006e90:	00100060 	.word	0x00100060
 8006e94:	00100050 	.word	0x00100050
 8006e98:	00100040 	.word	0x00100040
 8006e9c:	00100030 	.word	0x00100030
 8006ea0:	00100020 	.word	0x00100020

08006ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a4c      	ldr	r2, [pc, #304]	@ (8007038 <TIM_Base_SetConfig+0x144>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d017      	beq.n	8006f3c <TIM_Base_SetConfig+0x48>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f12:	d013      	beq.n	8006f3c <TIM_Base_SetConfig+0x48>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a49      	ldr	r2, [pc, #292]	@ (800703c <TIM_Base_SetConfig+0x148>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00f      	beq.n	8006f3c <TIM_Base_SetConfig+0x48>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a48      	ldr	r2, [pc, #288]	@ (8007040 <TIM_Base_SetConfig+0x14c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <TIM_Base_SetConfig+0x48>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a47      	ldr	r2, [pc, #284]	@ (8007044 <TIM_Base_SetConfig+0x150>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_Base_SetConfig+0x48>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a46      	ldr	r2, [pc, #280]	@ (8007048 <TIM_Base_SetConfig+0x154>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0x48>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a45      	ldr	r2, [pc, #276]	@ (800704c <TIM_Base_SetConfig+0x158>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d108      	bne.n	8006f4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a39      	ldr	r2, [pc, #228]	@ (8007038 <TIM_Base_SetConfig+0x144>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d023      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5c:	d01f      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a36      	ldr	r2, [pc, #216]	@ (800703c <TIM_Base_SetConfig+0x148>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01b      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a35      	ldr	r2, [pc, #212]	@ (8007040 <TIM_Base_SetConfig+0x14c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d017      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a34      	ldr	r2, [pc, #208]	@ (8007044 <TIM_Base_SetConfig+0x150>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a33      	ldr	r2, [pc, #204]	@ (8007048 <TIM_Base_SetConfig+0x154>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00f      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a33      	ldr	r2, [pc, #204]	@ (8007050 <TIM_Base_SetConfig+0x15c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00b      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a32      	ldr	r2, [pc, #200]	@ (8007054 <TIM_Base_SetConfig+0x160>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a31      	ldr	r2, [pc, #196]	@ (8007058 <TIM_Base_SetConfig+0x164>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_Base_SetConfig+0xaa>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2c      	ldr	r2, [pc, #176]	@ (800704c <TIM_Base_SetConfig+0x158>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d108      	bne.n	8006fb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <TIM_Base_SetConfig+0x144>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <TIM_Base_SetConfig+0x110>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1a      	ldr	r2, [pc, #104]	@ (8007048 <TIM_Base_SetConfig+0x154>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00f      	beq.n	8007004 <TIM_Base_SetConfig+0x110>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8007050 <TIM_Base_SetConfig+0x15c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00b      	beq.n	8007004 <TIM_Base_SetConfig+0x110>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a19      	ldr	r2, [pc, #100]	@ (8007054 <TIM_Base_SetConfig+0x160>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_Base_SetConfig+0x110>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a18      	ldr	r2, [pc, #96]	@ (8007058 <TIM_Base_SetConfig+0x164>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_Base_SetConfig+0x110>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a13      	ldr	r2, [pc, #76]	@ (800704c <TIM_Base_SetConfig+0x158>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d103      	bne.n	800700c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f023 0201 	bic.w	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	611a      	str	r2, [r3, #16]
  }
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40013400 	.word	0x40013400
 800704c:	40015000 	.word	0x40015000
 8007050:	40014000 	.word	0x40014000
 8007054:	40014400 	.word	0x40014400
 8007058:	40014800 	.word	0x40014800

0800705c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0201 	bic.w	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f023 030a 	bic.w	r3, r3, #10
 8007098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b087      	sub	sp, #28
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f023 0210 	bic.w	r2, r3, #16
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	031b      	lsls	r3, r3, #12
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	621a      	str	r2, [r3, #32]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	f043 0307 	orr.w	r3, r3, #7
 8007140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	609a      	str	r2, [r3, #8]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800716e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	021a      	lsls	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	431a      	orrs	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4313      	orrs	r3, r2
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e074      	b.n	8007296 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a34      	ldr	r2, [pc, #208]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d009      	beq.n	80071ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a33      	ldr	r2, [pc, #204]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a31      	ldr	r2, [pc, #196]	@ (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d108      	bne.n	80071fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a21      	ldr	r2, [pc, #132]	@ (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d022      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722c:	d01d      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1f      	ldr	r2, [pc, #124]	@ (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d018      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1d      	ldr	r2, [pc, #116]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1c      	ldr	r2, [pc, #112]	@ (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00e      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d009      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a18      	ldr	r2, [pc, #96]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d004      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a11      	ldr	r2, [pc, #68]	@ (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10c      	bne.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4313      	orrs	r3, r2
 800727a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40013400 	.word	0x40013400
 80072ac:	40015000 	.word	0x40015000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40014000 	.word	0x40014000

080072c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e042      	b.n	80073e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fc fb59 	bl	8003a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2224      	movs	r2, #36	@ 0x24
 800737a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f8d6 	bl	8008548 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fdd7 	bl	8007f50 <UART_SetConfig>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e01b      	b.n	80073e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f955 	bl	800868c <UART_CheckIdleState>
 80073e2:	4603      	mov	r3, r0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	2b20      	cmp	r3, #32
 8007404:	d17b      	bne.n	80074fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_UART_Transmit+0x26>
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e074      	b.n	8007500 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2221      	movs	r2, #33	@ 0x21
 8007422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007426:	f7fc fd11 	bl	8003e4c <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007460:	e030      	b.n	80074c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f001 f9b7 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e03d      	b.n	8007500 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3302      	adds	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1c8      	bne.n	8007462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2140      	movs	r1, #64	@ 0x40
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 f980 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d005      	beq.n	80074f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e006      	b.n	8007500 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	@ 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751c:	2b20      	cmp	r3, #32
 800751e:	d137      	bne.n	8007590 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_UART_Receive_IT+0x24>
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e030      	b.n	8007592 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a18      	ldr	r2, [pc, #96]	@ (800759c <HAL_UART_Receive_IT+0x94>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01f      	beq.n	8007580 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d018      	beq.n	8007580 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	613b      	str	r3, [r7, #16]
   return(result);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	623b      	str	r3, [r7, #32]
 800756e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69f9      	ldr	r1, [r7, #28]
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	61bb      	str	r3, [r7, #24]
   return(result);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	461a      	mov	r2, r3
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 f998 	bl	80088bc <UART_Start_Receive_IT>
 800758c:	4603      	mov	r3, r0
 800758e:	e000      	b.n	8007592 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3728      	adds	r7, #40	@ 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40008000 	.word	0x40008000

080075a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	@ 0x28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d167      	bne.n	8007688 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_UART_Transmit_DMA+0x24>
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e060      	b.n	800768a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	88fa      	ldrh	r2, [r7, #6]
 80075da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2221      	movs	r2, #33	@ 0x21
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d028      	beq.n	8007648 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075fa:	4a26      	ldr	r2, [pc, #152]	@ (8007694 <HAL_UART_Transmit_DMA+0xf4>)
 80075fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007602:	4a25      	ldr	r2, [pc, #148]	@ (8007698 <HAL_UART_Transmit_DMA+0xf8>)
 8007604:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800760a:	4a24      	ldr	r2, [pc, #144]	@ (800769c <HAL_UART_Transmit_DMA+0xfc>)
 800760c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007612:	2200      	movs	r2, #0
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800761e:	4619      	mov	r1, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3328      	adds	r3, #40	@ 0x28
 8007626:	461a      	mov	r2, r3
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	f7fc fda3 	bl	8004174 <HAL_DMA_Start_IT>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2210      	movs	r2, #16
 8007638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e020      	b.n	800768a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2240      	movs	r2, #64	@ 0x40
 800764e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007670:	623a      	str	r2, [r7, #32]
 8007672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	e000      	b.n	800768a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  }
}
 800768a:	4618      	mov	r0, r3
 800768c:	3728      	adds	r7, #40	@ 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08008d9b 	.word	0x08008d9b
 8007698:	08008e35 	.word	0x08008e35
 800769c:	08008fbb 	.word	0x08008fbb

080076a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	@ 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d137      	bne.n	8007728 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_UART_Receive_DMA+0x24>
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e030      	b.n	800772a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a18      	ldr	r2, [pc, #96]	@ (8007734 <HAL_UART_Receive_DMA+0x94>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d01f      	beq.n	8007718 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d018      	beq.n	8007718 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	613b      	str	r3, [r7, #16]
   return(result);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	623b      	str	r3, [r7, #32]
 8007706:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	69f9      	ldr	r1, [r7, #28]
 800770a:	6a3a      	ldr	r2, [r7, #32]
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	61bb      	str	r3, [r7, #24]
   return(result);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e6      	bne.n	80076e6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	461a      	mov	r2, r3
 800771c:	68b9      	ldr	r1, [r7, #8]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f001 f9ee 	bl	8008b00 <UART_Start_Receive_DMA>
 8007724:	4603      	mov	r3, r0
 8007726:	e000      	b.n	800772a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007728:	2302      	movs	r3, #2
  }
}
 800772a:	4618      	mov	r0, r3
 800772c:	3728      	adds	r7, #40	@ 0x28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	40008000 	.word	0x40008000

08007738 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b090      	sub	sp, #64	@ 0x40
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800774e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800775a:	2b80      	cmp	r3, #128	@ 0x80
 800775c:	d139      	bne.n	80077d2 <HAL_UART_DMAStop+0x9a>
 800775e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007760:	2b21      	cmp	r3, #33	@ 0x21
 8007762:	d136      	bne.n	80077d2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	61fb      	str	r3, [r7, #28]
   return(result);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800777a:	637b      	str	r3, [r7, #52]	@ 0x34
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3308      	adds	r3, #8
 8007782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800778a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d015      	beq.n	80077cc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fc fd60 	bl	800426a <HAL_DMA_Abort>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00d      	beq.n	80077cc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fc fec7 	bl	8004548 <HAL_DMA_GetError>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d105      	bne.n	80077cc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2210      	movs	r2, #16
 80077c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e047      	b.n	800785c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fa3d 	bl	8008c4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077dc:	2b40      	cmp	r3, #64	@ 0x40
 80077de:	d13c      	bne.n	800785a <HAL_UART_DMAStop+0x122>
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	2b22      	cmp	r3, #34	@ 0x22
 80077e4:	d139      	bne.n	800785a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007806:	61ba      	str	r2, [r7, #24]
 8007808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d017      	beq.n	8007854 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800782a:	4618      	mov	r0, r3
 800782c:	f7fc fd1d 	bl	800426a <HAL_DMA_Abort>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800783c:	4618      	mov	r0, r3
 800783e:	f7fc fe83 	bl	8004548 <HAL_DMA_GetError>
 8007842:	4603      	mov	r3, r0
 8007844:	2b20      	cmp	r3, #32
 8007846:	d105      	bne.n	8007854 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2210      	movs	r2, #16
 800784c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e003      	b.n	800785c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fa3a 	bl	8008cce <UART_EndRxTransfer>
  }

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3740      	adds	r7, #64	@ 0x40
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b0ba      	sub	sp, #232	@ 0xe8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800788a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800788e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007892:	4013      	ands	r3, r2
 8007894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d11b      	bne.n	80078d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d015      	beq.n	80078d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 8300 	beq.w	8007ece <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
      }
      return;
 80078d6:	e2fa      	b.n	8007ece <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8123 	beq.w	8007b28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078e6:	4b8d      	ldr	r3, [pc, #564]	@ (8007b1c <HAL_UART_IRQHandler+0x2b8>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078f2:	4b8b      	ldr	r3, [pc, #556]	@ (8007b20 <HAL_UART_IRQHandler+0x2bc>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8116 	beq.w	8007b28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d011      	beq.n	800792c <HAL_UART_IRQHandler+0xc8>
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2201      	movs	r2, #1
 800791a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f043 0201 	orr.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d011      	beq.n	800795c <HAL_UART_IRQHandler+0xf8>
 8007938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2202      	movs	r2, #2
 800794a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007952:	f043 0204 	orr.w	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d011      	beq.n	800798c <HAL_UART_IRQHandler+0x128>
 8007968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2204      	movs	r2, #4
 800797a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007982:	f043 0202 	orr.w	r2, r3, #2
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d017      	beq.n	80079c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079a8:	4b5c      	ldr	r3, [pc, #368]	@ (8007b1c <HAL_UART_IRQHandler+0x2b8>)
 80079aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079be:	f043 0208 	orr.w	r2, r3, #8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d012      	beq.n	80079fa <HAL_UART_IRQHandler+0x196>
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00c      	beq.n	80079fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f0:	f043 0220 	orr.w	r2, r3, #32
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8266 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d013      	beq.n	8007a3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d105      	bne.n	8007a2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4e:	2b40      	cmp	r3, #64	@ 0x40
 8007a50:	d005      	beq.n	8007a5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d054      	beq.n	8007b08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 f935 	bl	8008cce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a6e:	2b40      	cmp	r3, #64	@ 0x40
 8007a70:	d146      	bne.n	8007b00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1d9      	bne.n	8007a72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d017      	beq.n	8007af8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ace:	4a15      	ldr	r2, [pc, #84]	@ (8007b24 <HAL_UART_IRQHandler+0x2c0>)
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fc fc1f 	bl	800431c <HAL_DMA_Abort_IT>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d019      	beq.n	8007b18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007af2:	4610      	mov	r0, r2
 8007af4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af6:	e00f      	b.n	8007b18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fa13 	bl	8007f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afe:	e00b      	b.n	8007b18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fa0f 	bl	8007f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b06:	e007      	b.n	8007b18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fa0b 	bl	8007f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b16:	e1dc      	b.n	8007ed2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b18:	bf00      	nop
    return;
 8007b1a:	e1da      	b.n	8007ed2 <HAL_UART_IRQHandler+0x66e>
 8007b1c:	10000001 	.word	0x10000001
 8007b20:	04000120 	.word	0x04000120
 8007b24:	0800903b 	.word	0x0800903b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	f040 8170 	bne.w	8007e12 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8169 	beq.w	8007e12 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8162 	beq.w	8007e12 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2210      	movs	r2, #16
 8007b54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b60:	2b40      	cmp	r3, #64	@ 0x40
 8007b62:	f040 80d8 	bne.w	8007d16 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80af 	beq.w	8007cdc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	f080 80a7 	bcs.w	8007cdc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f040 8087 	bne.w	8007cba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1da      	bne.n	8007bac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e1      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e3      	bne.n	8007c32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c88:	f023 0310 	bic.w	r3, r3, #16
 8007c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e4      	bne.n	8007c78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fc fad8 	bl	800426a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f92f 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cda:	e0fc      	b.n	8007ed6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	f040 80f5 	bne.w	8007ed6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	f040 80eb 	bne.w	8007ed6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f912 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
      return;
 8007d14:	e0df      	b.n	8007ed6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80d1 	beq.w	8007eda <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80cc 	beq.w	8007eda <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e4      	bne.n	8007d42 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	623b      	str	r3, [r7, #32]
   return(result);
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007da0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e1      	bne.n	8007d78 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f023 0310 	bic.w	r3, r3, #16
 8007ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	69b9      	ldr	r1, [r7, #24]
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	617b      	str	r3, [r7, #20]
   return(result);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e4      	bne.n	8007dc8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f894 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e10:	e063      	b.n	8007eda <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <HAL_UART_IRQHandler+0x5d8>
 8007e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fe5d 	bl	8009af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e3a:	e051      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d014      	beq.n	8007e72 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d03a      	beq.n	8007ede <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
    }
    return;
 8007e70:	e035      	b.n	8007ede <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_UART_IRQHandler+0x62e>
 8007e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f8e7 	bl	800905e <UART_EndTransmit_IT>
    return;
 8007e90:	e026      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x64e>
 8007e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 fe36 	bl	8009b1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eb0:	e016      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d010      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
 8007ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da0c      	bge.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 fe1e 	bl	8009b08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ecc:	e008      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ece:	bf00      	nop
 8007ed0:	e006      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
    return;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
      return;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
      return;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <HAL_UART_IRQHandler+0x67c>
    return;
 8007ede:	bf00      	nop
  }
}
 8007ee0:	37e8      	adds	r7, #232	@ 0xe8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop

08007ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f54:	b08c      	sub	sp, #48	@ 0x30
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4baa      	ldr	r3, [pc, #680]	@ (8008228 <UART_SetConfig+0x2d8>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a9f      	ldr	r2, [pc, #636]	@ (800822c <UART_SetConfig+0x2dc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fc6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fda:	f023 010f 	bic.w	r1, r3, #15
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a90      	ldr	r2, [pc, #576]	@ (8008230 <UART_SetConfig+0x2e0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d125      	bne.n	8008040 <UART_SetConfig+0xf0>
 8007ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8008234 <UART_SetConfig+0x2e4>)
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d81a      	bhi.n	8008038 <UART_SetConfig+0xe8>
 8008002:	a201      	add	r2, pc, #4	@ (adr r2, 8008008 <UART_SetConfig+0xb8>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	08008019 	.word	0x08008019
 800800c:	08008029 	.word	0x08008029
 8008010:	08008021 	.word	0x08008021
 8008014:	08008031 	.word	0x08008031
 8008018:	2301      	movs	r3, #1
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e116      	b.n	800824e <UART_SetConfig+0x2fe>
 8008020:	2302      	movs	r3, #2
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008026:	e112      	b.n	800824e <UART_SetConfig+0x2fe>
 8008028:	2304      	movs	r3, #4
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802e:	e10e      	b.n	800824e <UART_SetConfig+0x2fe>
 8008030:	2308      	movs	r3, #8
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008036:	e10a      	b.n	800824e <UART_SetConfig+0x2fe>
 8008038:	2310      	movs	r3, #16
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803e:	e106      	b.n	800824e <UART_SetConfig+0x2fe>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a7c      	ldr	r2, [pc, #496]	@ (8008238 <UART_SetConfig+0x2e8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d138      	bne.n	80080bc <UART_SetConfig+0x16c>
 800804a:	4b7a      	ldr	r3, [pc, #488]	@ (8008234 <UART_SetConfig+0x2e4>)
 800804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008050:	f003 030c 	and.w	r3, r3, #12
 8008054:	2b0c      	cmp	r3, #12
 8008056:	d82d      	bhi.n	80080b4 <UART_SetConfig+0x164>
 8008058:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <UART_SetConfig+0x110>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008095 	.word	0x08008095
 8008064:	080080b5 	.word	0x080080b5
 8008068:	080080b5 	.word	0x080080b5
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080a5 	.word	0x080080a5
 8008074:	080080b5 	.word	0x080080b5
 8008078:	080080b5 	.word	0x080080b5
 800807c:	080080b5 	.word	0x080080b5
 8008080:	0800809d 	.word	0x0800809d
 8008084:	080080b5 	.word	0x080080b5
 8008088:	080080b5 	.word	0x080080b5
 800808c:	080080b5 	.word	0x080080b5
 8008090:	080080ad 	.word	0x080080ad
 8008094:	2300      	movs	r3, #0
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809a:	e0d8      	b.n	800824e <UART_SetConfig+0x2fe>
 800809c:	2302      	movs	r3, #2
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e0d4      	b.n	800824e <UART_SetConfig+0x2fe>
 80080a4:	2304      	movs	r3, #4
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	e0d0      	b.n	800824e <UART_SetConfig+0x2fe>
 80080ac:	2308      	movs	r3, #8
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b2:	e0cc      	b.n	800824e <UART_SetConfig+0x2fe>
 80080b4:	2310      	movs	r3, #16
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ba:	e0c8      	b.n	800824e <UART_SetConfig+0x2fe>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a5e      	ldr	r2, [pc, #376]	@ (800823c <UART_SetConfig+0x2ec>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d125      	bne.n	8008112 <UART_SetConfig+0x1c2>
 80080c6:	4b5b      	ldr	r3, [pc, #364]	@ (8008234 <UART_SetConfig+0x2e4>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80080d0:	2b30      	cmp	r3, #48	@ 0x30
 80080d2:	d016      	beq.n	8008102 <UART_SetConfig+0x1b2>
 80080d4:	2b30      	cmp	r3, #48	@ 0x30
 80080d6:	d818      	bhi.n	800810a <UART_SetConfig+0x1ba>
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d00a      	beq.n	80080f2 <UART_SetConfig+0x1a2>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d814      	bhi.n	800810a <UART_SetConfig+0x1ba>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <UART_SetConfig+0x19a>
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d008      	beq.n	80080fa <UART_SetConfig+0x1aa>
 80080e8:	e00f      	b.n	800810a <UART_SetConfig+0x1ba>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f0:	e0ad      	b.n	800824e <UART_SetConfig+0x2fe>
 80080f2:	2302      	movs	r3, #2
 80080f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f8:	e0a9      	b.n	800824e <UART_SetConfig+0x2fe>
 80080fa:	2304      	movs	r3, #4
 80080fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008100:	e0a5      	b.n	800824e <UART_SetConfig+0x2fe>
 8008102:	2308      	movs	r3, #8
 8008104:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008108:	e0a1      	b.n	800824e <UART_SetConfig+0x2fe>
 800810a:	2310      	movs	r3, #16
 800810c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008110:	e09d      	b.n	800824e <UART_SetConfig+0x2fe>
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a4a      	ldr	r2, [pc, #296]	@ (8008240 <UART_SetConfig+0x2f0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d125      	bne.n	8008168 <UART_SetConfig+0x218>
 800811c:	4b45      	ldr	r3, [pc, #276]	@ (8008234 <UART_SetConfig+0x2e4>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008122:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008126:	2bc0      	cmp	r3, #192	@ 0xc0
 8008128:	d016      	beq.n	8008158 <UART_SetConfig+0x208>
 800812a:	2bc0      	cmp	r3, #192	@ 0xc0
 800812c:	d818      	bhi.n	8008160 <UART_SetConfig+0x210>
 800812e:	2b80      	cmp	r3, #128	@ 0x80
 8008130:	d00a      	beq.n	8008148 <UART_SetConfig+0x1f8>
 8008132:	2b80      	cmp	r3, #128	@ 0x80
 8008134:	d814      	bhi.n	8008160 <UART_SetConfig+0x210>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <UART_SetConfig+0x1f0>
 800813a:	2b40      	cmp	r3, #64	@ 0x40
 800813c:	d008      	beq.n	8008150 <UART_SetConfig+0x200>
 800813e:	e00f      	b.n	8008160 <UART_SetConfig+0x210>
 8008140:	2300      	movs	r3, #0
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008146:	e082      	b.n	800824e <UART_SetConfig+0x2fe>
 8008148:	2302      	movs	r3, #2
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800814e:	e07e      	b.n	800824e <UART_SetConfig+0x2fe>
 8008150:	2304      	movs	r3, #4
 8008152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008156:	e07a      	b.n	800824e <UART_SetConfig+0x2fe>
 8008158:	2308      	movs	r3, #8
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800815e:	e076      	b.n	800824e <UART_SetConfig+0x2fe>
 8008160:	2310      	movs	r3, #16
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008166:	e072      	b.n	800824e <UART_SetConfig+0x2fe>
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a35      	ldr	r2, [pc, #212]	@ (8008244 <UART_SetConfig+0x2f4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d12a      	bne.n	80081c8 <UART_SetConfig+0x278>
 8008172:	4b30      	ldr	r3, [pc, #192]	@ (8008234 <UART_SetConfig+0x2e4>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800817c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008180:	d01a      	beq.n	80081b8 <UART_SetConfig+0x268>
 8008182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008186:	d81b      	bhi.n	80081c0 <UART_SetConfig+0x270>
 8008188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818c:	d00c      	beq.n	80081a8 <UART_SetConfig+0x258>
 800818e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008192:	d815      	bhi.n	80081c0 <UART_SetConfig+0x270>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <UART_SetConfig+0x250>
 8008198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800819c:	d008      	beq.n	80081b0 <UART_SetConfig+0x260>
 800819e:	e00f      	b.n	80081c0 <UART_SetConfig+0x270>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a6:	e052      	b.n	800824e <UART_SetConfig+0x2fe>
 80081a8:	2302      	movs	r3, #2
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ae:	e04e      	b.n	800824e <UART_SetConfig+0x2fe>
 80081b0:	2304      	movs	r3, #4
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081b6:	e04a      	b.n	800824e <UART_SetConfig+0x2fe>
 80081b8:	2308      	movs	r3, #8
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081be:	e046      	b.n	800824e <UART_SetConfig+0x2fe>
 80081c0:	2310      	movs	r3, #16
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081c6:	e042      	b.n	800824e <UART_SetConfig+0x2fe>
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a17      	ldr	r2, [pc, #92]	@ (800822c <UART_SetConfig+0x2dc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d13a      	bne.n	8008248 <UART_SetConfig+0x2f8>
 80081d2:	4b18      	ldr	r3, [pc, #96]	@ (8008234 <UART_SetConfig+0x2e4>)
 80081d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80081dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081e0:	d01a      	beq.n	8008218 <UART_SetConfig+0x2c8>
 80081e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081e6:	d81b      	bhi.n	8008220 <UART_SetConfig+0x2d0>
 80081e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ec:	d00c      	beq.n	8008208 <UART_SetConfig+0x2b8>
 80081ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f2:	d815      	bhi.n	8008220 <UART_SetConfig+0x2d0>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <UART_SetConfig+0x2b0>
 80081f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081fc:	d008      	beq.n	8008210 <UART_SetConfig+0x2c0>
 80081fe:	e00f      	b.n	8008220 <UART_SetConfig+0x2d0>
 8008200:	2300      	movs	r3, #0
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008206:	e022      	b.n	800824e <UART_SetConfig+0x2fe>
 8008208:	2302      	movs	r3, #2
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800820e:	e01e      	b.n	800824e <UART_SetConfig+0x2fe>
 8008210:	2304      	movs	r3, #4
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008216:	e01a      	b.n	800824e <UART_SetConfig+0x2fe>
 8008218:	2308      	movs	r3, #8
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800821e:	e016      	b.n	800824e <UART_SetConfig+0x2fe>
 8008220:	2310      	movs	r3, #16
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008226:	e012      	b.n	800824e <UART_SetConfig+0x2fe>
 8008228:	cfff69f3 	.word	0xcfff69f3
 800822c:	40008000 	.word	0x40008000
 8008230:	40013800 	.word	0x40013800
 8008234:	40021000 	.word	0x40021000
 8008238:	40004400 	.word	0x40004400
 800823c:	40004800 	.word	0x40004800
 8008240:	40004c00 	.word	0x40004c00
 8008244:	40005000 	.word	0x40005000
 8008248:	2310      	movs	r3, #16
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4aae      	ldr	r2, [pc, #696]	@ (800850c <UART_SetConfig+0x5bc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	f040 8097 	bne.w	8008388 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800825a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800825e:	2b08      	cmp	r3, #8
 8008260:	d823      	bhi.n	80082aa <UART_SetConfig+0x35a>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <UART_SetConfig+0x318>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	0800828d 	.word	0x0800828d
 800826c:	080082ab 	.word	0x080082ab
 8008270:	08008295 	.word	0x08008295
 8008274:	080082ab 	.word	0x080082ab
 8008278:	0800829b 	.word	0x0800829b
 800827c:	080082ab 	.word	0x080082ab
 8008280:	080082ab 	.word	0x080082ab
 8008284:	080082ab 	.word	0x080082ab
 8008288:	080082a3 	.word	0x080082a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800828c:	f7fd ff72 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 8008290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008292:	e010      	b.n	80082b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008294:	4b9e      	ldr	r3, [pc, #632]	@ (8008510 <UART_SetConfig+0x5c0>)
 8008296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008298:	e00d      	b.n	80082b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829a:	f7fd fefd 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 800829e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082a0:	e009      	b.n	80082b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082a8:	e005      	b.n	80082b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8130 	beq.w	800851e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	4a94      	ldr	r2, [pc, #592]	@ (8008514 <UART_SetConfig+0x5c4>)
 80082c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d305      	bcc.n	80082ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d903      	bls.n	80082f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082f4:	e113      	b.n	800851e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	2200      	movs	r2, #0
 80082fa:	60bb      	str	r3, [r7, #8]
 80082fc:	60fa      	str	r2, [r7, #12]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008302:	4a84      	ldr	r2, [pc, #528]	@ (8008514 <UART_SetConfig+0x5c4>)
 8008304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008308:	b29b      	uxth	r3, r3
 800830a:	2200      	movs	r2, #0
 800830c:	603b      	str	r3, [r7, #0]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008314:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008318:	f7f8 fcf6 	bl	8000d08 <__aeabi_uldivmod>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4610      	mov	r0, r2
 8008322:	4619      	mov	r1, r3
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	020b      	lsls	r3, r1, #8
 800832e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008332:	0202      	lsls	r2, r0, #8
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	6849      	ldr	r1, [r1, #4]
 8008338:	0849      	lsrs	r1, r1, #1
 800833a:	2000      	movs	r0, #0
 800833c:	460c      	mov	r4, r1
 800833e:	4605      	mov	r5, r0
 8008340:	eb12 0804 	adds.w	r8, r2, r4
 8008344:	eb43 0905 	adc.w	r9, r3, r5
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	469a      	mov	sl, r3
 8008350:	4693      	mov	fp, r2
 8008352:	4652      	mov	r2, sl
 8008354:	465b      	mov	r3, fp
 8008356:	4640      	mov	r0, r8
 8008358:	4649      	mov	r1, r9
 800835a:	f7f8 fcd5 	bl	8000d08 <__aeabi_uldivmod>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4613      	mov	r3, r2
 8008364:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800836c:	d308      	bcc.n	8008380 <UART_SetConfig+0x430>
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008374:	d204      	bcs.n	8008380 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a3a      	ldr	r2, [r7, #32]
 800837c:	60da      	str	r2, [r3, #12]
 800837e:	e0ce      	b.n	800851e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008386:	e0ca      	b.n	800851e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008390:	d166      	bne.n	8008460 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008396:	2b08      	cmp	r3, #8
 8008398:	d827      	bhi.n	80083ea <UART_SetConfig+0x49a>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0x450>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	080083eb 	.word	0x080083eb
 80083b0:	080083db 	.word	0x080083db
 80083b4:	080083eb 	.word	0x080083eb
 80083b8:	080083eb 	.word	0x080083eb
 80083bc:	080083eb 	.word	0x080083eb
 80083c0:	080083e3 	.word	0x080083e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c4:	f7fd fed6 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 80083c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ca:	e014      	b.n	80083f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083cc:	f7fd fee8 	bl	80061a0 <HAL_RCC_GetPCLK2Freq>
 80083d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083d2:	e010      	b.n	80083f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d4:	4b4e      	ldr	r3, [pc, #312]	@ (8008510 <UART_SetConfig+0x5c0>)
 80083d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083d8:	e00d      	b.n	80083f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083da:	f7fd fe5d 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80083de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083e0:	e009      	b.n	80083f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083e8:	e005      	b.n	80083f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8090 	beq.w	800851e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008402:	4a44      	ldr	r2, [pc, #272]	@ (8008514 <UART_SetConfig+0x5c4>)
 8008404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008408:	461a      	mov	r2, r3
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008410:	005a      	lsls	r2, r3, #1
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	085b      	lsrs	r3, r3, #1
 8008418:	441a      	add	r2, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008422:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	2b0f      	cmp	r3, #15
 8008428:	d916      	bls.n	8008458 <UART_SetConfig+0x508>
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008430:	d212      	bcs.n	8008458 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f023 030f 	bic.w	r3, r3, #15
 800843a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	b29b      	uxth	r3, r3
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	b29a      	uxth	r2, r3
 8008448:	8bfb      	ldrh	r3, [r7, #30]
 800844a:	4313      	orrs	r3, r2
 800844c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	8bfa      	ldrh	r2, [r7, #30]
 8008454:	60da      	str	r2, [r3, #12]
 8008456:	e062      	b.n	800851e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800845e:	e05e      	b.n	800851e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008460:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008464:	2b08      	cmp	r3, #8
 8008466:	d828      	bhi.n	80084ba <UART_SetConfig+0x56a>
 8008468:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <UART_SetConfig+0x520>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008495 	.word	0x08008495
 8008474:	0800849d 	.word	0x0800849d
 8008478:	080084a5 	.word	0x080084a5
 800847c:	080084bb 	.word	0x080084bb
 8008480:	080084ab 	.word	0x080084ab
 8008484:	080084bb 	.word	0x080084bb
 8008488:	080084bb 	.word	0x080084bb
 800848c:	080084bb 	.word	0x080084bb
 8008490:	080084b3 	.word	0x080084b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008494:	f7fd fe6e 	bl	8006174 <HAL_RCC_GetPCLK1Freq>
 8008498:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800849a:	e014      	b.n	80084c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800849c:	f7fd fe80 	bl	80061a0 <HAL_RCC_GetPCLK2Freq>
 80084a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084a2:	e010      	b.n	80084c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008510 <UART_SetConfig+0x5c0>)
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084a8:	e00d      	b.n	80084c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084aa:	f7fd fdf5 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 80084ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084b0:	e009      	b.n	80084c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084b8:	e005      	b.n	80084c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084c4:	bf00      	nop
    }

    if (pclk != 0U)
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d028      	beq.n	800851e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	4a10      	ldr	r2, [pc, #64]	@ (8008514 <UART_SetConfig+0x5c4>)
 80084d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d6:	461a      	mov	r2, r3
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	fbb3 f2f2 	udiv	r2, r3, r2
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	085b      	lsrs	r3, r3, #1
 80084e4:	441a      	add	r2, r3
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	2b0f      	cmp	r3, #15
 80084f4:	d910      	bls.n	8008518 <UART_SetConfig+0x5c8>
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fc:	d20c      	bcs.n	8008518 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	b29a      	uxth	r2, r3
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60da      	str	r2, [r3, #12]
 8008508:	e009      	b.n	800851e <UART_SetConfig+0x5ce>
 800850a:	bf00      	nop
 800850c:	40008000 	.word	0x40008000
 8008510:	00f42400 	.word	0x00f42400
 8008514:	080203e4 	.word	0x080203e4
      }
      else
      {
        ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2201      	movs	r2, #1
 8008522:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2201      	movs	r2, #1
 800852a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2200      	movs	r2, #0
 8008532:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2200      	movs	r2, #0
 8008538:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800853a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800853e:	4618      	mov	r0, r3
 8008540:	3730      	adds	r7, #48	@ 0x30
 8008542:	46bd      	mov	sp, r7
 8008544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008642:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008646:	d10a      	bne.n	800865e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b098      	sub	sp, #96	@ 0x60
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800869c:	f7fb fbd6 	bl	8003e4c <HAL_GetTick>
 80086a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d12f      	bne.n	8008710 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086b8:	2200      	movs	r2, #0
 80086ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f88e 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d022      	beq.n	8008710 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086de:	653b      	str	r3, [r7, #80]	@ 0x50
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e063      	b.n	80087d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b04      	cmp	r3, #4
 800871c:	d149      	bne.n	80087b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008726:	2200      	movs	r2, #0
 8008728:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f857 	bl	80087e0 <UART_WaitOnFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d03c      	beq.n	80087b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	623b      	str	r3, [r7, #32]
   return(result);
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800874c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008756:	633b      	str	r3, [r7, #48]	@ 0x30
 8008758:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800875c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e6      	bne.n	8008738 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3308      	adds	r3, #8
 8008770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	60fb      	str	r3, [r7, #12]
   return(result);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3308      	adds	r3, #8
 8008788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800878a:	61fa      	str	r2, [r7, #28]
 800878c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	69b9      	ldr	r1, [r7, #24]
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	617b      	str	r3, [r7, #20]
   return(result);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e5      	bne.n	800876a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e012      	b.n	80087d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3758      	adds	r7, #88	@ 0x58
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f0:	e04f      	b.n	8008892 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087f8:	d04b      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7fb fb27 	bl	8003e4c <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <UART_WaitOnFlagUntilTimeout+0x30>
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e04e      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d037      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b80      	cmp	r3, #128	@ 0x80
 8008826:	d034      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b40      	cmp	r3, #64	@ 0x40
 800882c:	d031      	beq.n	8008892 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b08      	cmp	r3, #8
 800883a:	d110      	bne.n	800885e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2208      	movs	r2, #8
 8008842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fa42 	bl	8008cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2208      	movs	r2, #8
 800884e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e029      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800886c:	d111      	bne.n	8008892 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fa28 	bl	8008cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e00f      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69da      	ldr	r2, [r3, #28]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4013      	ands	r3, r2
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	bf0c      	ite	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	2300      	movne	r3, #0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d0a0      	beq.n	80087f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088bc:	b480      	push	{r7}
 80088be:	b0a3      	sub	sp, #140	@ 0x8c
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	88fa      	ldrh	r2, [r7, #6]
 80088d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	88fa      	ldrh	r2, [r7, #6]
 80088dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ee:	d10e      	bne.n	800890e <UART_Start_Receive_IT+0x52>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d105      	bne.n	8008904 <UART_Start_Receive_IT+0x48>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008902:	e02d      	b.n	8008960 <UART_Start_Receive_IT+0xa4>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	22ff      	movs	r2, #255	@ 0xff
 8008908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800890c:	e028      	b.n	8008960 <UART_Start_Receive_IT+0xa4>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10d      	bne.n	8008932 <UART_Start_Receive_IT+0x76>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d104      	bne.n	8008928 <UART_Start_Receive_IT+0x6c>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	22ff      	movs	r2, #255	@ 0xff
 8008922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008926:	e01b      	b.n	8008960 <UART_Start_Receive_IT+0xa4>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	227f      	movs	r2, #127	@ 0x7f
 800892c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008930:	e016      	b.n	8008960 <UART_Start_Receive_IT+0xa4>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800893a:	d10d      	bne.n	8008958 <UART_Start_Receive_IT+0x9c>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <UART_Start_Receive_IT+0x92>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	227f      	movs	r2, #127	@ 0x7f
 8008948:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800894c:	e008      	b.n	8008960 <UART_Start_Receive_IT+0xa4>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	223f      	movs	r2, #63	@ 0x3f
 8008952:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008956:	e003      	b.n	8008960 <UART_Start_Receive_IT+0xa4>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2222      	movs	r2, #34	@ 0x22
 800896c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008994:	673a      	str	r2, [r7, #112]	@ 0x70
 8008996:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800899a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80089a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e3      	bne.n	8008970 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b0:	d14f      	bne.n	8008a52 <UART_Start_Receive_IT+0x196>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089b8:	88fa      	ldrh	r2, [r7, #6]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d349      	bcc.n	8008a52 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c6:	d107      	bne.n	80089d8 <UART_Start_Receive_IT+0x11c>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a47      	ldr	r2, [pc, #284]	@ (8008af0 <UART_Start_Receive_IT+0x234>)
 80089d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80089d6:	e002      	b.n	80089de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a46      	ldr	r2, [pc, #280]	@ (8008af4 <UART_Start_Receive_IT+0x238>)
 80089dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01a      	beq.n	8008a1c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a0a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e4      	bne.n	80089e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3308      	adds	r3, #8
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a3c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e5      	bne.n	8008a1c <UART_Start_Receive_IT+0x160>
 8008a50:	e046      	b.n	8008ae0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5a:	d107      	bne.n	8008a6c <UART_Start_Receive_IT+0x1b0>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4a24      	ldr	r2, [pc, #144]	@ (8008af8 <UART_Start_Receive_IT+0x23c>)
 8008a68:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a6a:	e002      	b.n	8008a72 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a23      	ldr	r2, [pc, #140]	@ (8008afc <UART_Start_Receive_IT+0x240>)
 8008a70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d019      	beq.n	8008aae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e6      	bne.n	8008a7a <UART_Start_Receive_IT+0x1be>
 8008aac:	e018      	b.n	8008ae0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	613b      	str	r3, [r7, #16]
   return(result);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f043 0320 	orr.w	r3, r3, #32
 8008ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008acc:	623b      	str	r3, [r7, #32]
 8008ace:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	69f9      	ldr	r1, [r7, #28]
 8008ad2:	6a3a      	ldr	r2, [r7, #32]
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	378c      	adds	r7, #140	@ 0x8c
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	08009789 	.word	0x08009789
 8008af4:	08009425 	.word	0x08009425
 8008af8:	0800926d 	.word	0x0800926d
 8008afc:	080090b5 	.word	0x080090b5

08008b00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b096      	sub	sp, #88	@ 0x58
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	88fa      	ldrh	r2, [r7, #6]
 8008b18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2222      	movs	r2, #34	@ 0x22
 8008b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d02d      	beq.n	8008b92 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b3c:	4a40      	ldr	r2, [pc, #256]	@ (8008c40 <UART_Start_Receive_DMA+0x140>)
 8008b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b46:	4a3f      	ldr	r2, [pc, #252]	@ (8008c44 <UART_Start_Receive_DMA+0x144>)
 8008b48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b50:	4a3d      	ldr	r2, [pc, #244]	@ (8008c48 <UART_Start_Receive_DMA+0x148>)
 8008b52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3324      	adds	r3, #36	@ 0x24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b70:	461a      	mov	r2, r3
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	f7fb fafe 	bl	8004174 <HAL_DMA_Start_IT>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d009      	beq.n	8008b92 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2210      	movs	r2, #16
 8008b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e051      	b.n	8008c36 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d018      	beq.n	8008bcc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e6      	bne.n	8008b9a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bec:	637a      	str	r2, [r7, #52]	@ 0x34
 8008bee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008bf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c20:	623a      	str	r2, [r7, #32]
 8008c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	69f9      	ldr	r1, [r7, #28]
 8008c26:	6a3a      	ldr	r2, [r7, #32]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e5      	bne.n	8008c00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3758      	adds	r7, #88	@ 0x58
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08008e51 	.word	0x08008e51
 8008c44:	08008f7d 	.word	0x08008f7d
 8008c48:	08008fbb 	.word	0x08008fbb

08008c4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b08f      	sub	sp, #60	@ 0x3c
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c74:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1e6      	bne.n	8008c54 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ca6:	61ba      	str	r2, [r7, #24]
 8008ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e5      	bne.n	8008c86 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008cc2:	bf00      	nop
 8008cc4:	373c      	adds	r7, #60	@ 0x3c
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b095      	sub	sp, #84	@ 0x54
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e6      	bne.n	8008cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d1e:	f023 0301 	bic.w	r3, r3, #1
 8008d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d34:	e841 2300 	strex	r3, r2, [r1]
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e3      	bne.n	8008d08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d118      	bne.n	8008d7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f023 0310 	bic.w	r3, r3, #16
 8008d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d66:	61bb      	str	r3, [r7, #24]
 8008d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6979      	ldr	r1, [r7, #20]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	613b      	str	r3, [r7, #16]
   return(result);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e6      	bne.n	8008d48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d8e:	bf00      	nop
 8008d90:	3754      	adds	r7, #84	@ 0x54
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b090      	sub	sp, #64	@ 0x40
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d137      	bne.n	8008e26 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3308      	adds	r3, #8
 8008ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dde:	633a      	str	r2, [r7, #48]	@ 0x30
 8008de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008de4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e5      	bne.n	8008dbe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	69b9      	ldr	r1, [r7, #24]
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e24:	e002      	b.n	8008e2c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e26:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008e28:	f7ff f85e 	bl	8007ee8 <HAL_UART_TxCpltCallback>
}
 8008e2c:	bf00      	nop
 8008e2e:	3740      	adds	r7, #64	@ 0x40
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e40:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff f85a 	bl	8007efc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b09c      	sub	sp, #112	@ 0x70
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d171      	bne.n	8008f50 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008ec6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ec8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ecc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008efa:	633a      	str	r2, [r7, #48]	@ 0x30
 8008efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e5      	bne.n	8008eda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f10:	2220      	movs	r2, #32
 8008f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d118      	bne.n	8008f50 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0310 	bic.w	r3, r3, #16
 8008f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f3c:	61fb      	str	r3, [r7, #28]
 8008f3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	69b9      	ldr	r1, [r7, #24]
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	617b      	str	r3, [r7, #20]
   return(result);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e6      	bne.n	8008f1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f52:	2200      	movs	r2, #0
 8008f54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d107      	bne.n	8008f6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f64:	4619      	mov	r1, r3
 8008f66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f68:	f7fe ffe6 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f6c:	e002      	b.n	8008f74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f70:	f7f8 ffb4 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 8008f74:	bf00      	nop
 8008f76:	3770      	adds	r7, #112	@ 0x70
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d109      	bne.n	8008fac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f9e:	085b      	lsrs	r3, r3, #1
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7fe ffc7 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008faa:	e002      	b.n	8008fb2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7fe ffaf 	bl	8007f10 <HAL_UART_RxHalfCpltCallback>
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe2:	2b80      	cmp	r3, #128	@ 0x80
 8008fe4:	d109      	bne.n	8008ffa <UART_DMAError+0x40>
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b21      	cmp	r3, #33	@ 0x21
 8008fea:	d106      	bne.n	8008ffa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008ff4:	6978      	ldr	r0, [r7, #20]
 8008ff6:	f7ff fe29 	bl	8008c4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009004:	2b40      	cmp	r3, #64	@ 0x40
 8009006:	d109      	bne.n	800901c <UART_DMAError+0x62>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b22      	cmp	r3, #34	@ 0x22
 800900c:	d106      	bne.n	800901c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2200      	movs	r2, #0
 8009012:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009016:	6978      	ldr	r0, [r7, #20]
 8009018:	f7ff fe59 	bl	8008cce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009022:	f043 0210 	orr.w	r2, r3, #16
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800902c:	6978      	ldr	r0, [r7, #20]
 800902e:	f7fe ff79 	bl	8007f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009032:	bf00      	nop
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7fe ff67 	bl	8007f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	60bb      	str	r3, [r7, #8]
   return(result);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	61bb      	str	r3, [r7, #24]
 8009086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6979      	ldr	r1, [r7, #20]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	613b      	str	r3, [r7, #16]
   return(result);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e6      	bne.n	8009066 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2220      	movs	r2, #32
 800909c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fe ff1e 	bl	8007ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ac:	bf00      	nop
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b09c      	sub	sp, #112	@ 0x70
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090cc:	2b22      	cmp	r3, #34	@ 0x22
 80090ce:	f040 80be 	bne.w	800924e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80090e0:	b2d9      	uxtb	r1, r3
 80090e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ec:	400a      	ands	r2, r1
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009102:	b29b      	uxth	r3, r3
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 80a1 	bne.w	800925e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800912a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800912c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800913a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800913c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009140:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e6      	bne.n	800911c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800915e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009160:	f023 0301 	bic.w	r3, r3, #1
 8009164:	667b      	str	r3, [r7, #100]	@ 0x64
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800916e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800917c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e5      	bne.n	800914e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a33      	ldr	r2, [pc, #204]	@ (8009268 <UART_RxISR_8BIT+0x1b4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d01f      	beq.n	80091e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d018      	beq.n	80091e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	623b      	str	r3, [r7, #32]
   return(result);
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	461a      	mov	r2, r3
 80091ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80091ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e6      	bne.n	80091ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d12e      	bne.n	8009246 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	617b      	str	r3, [r7, #20]
   return(result);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e6      	bne.n	80091ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f003 0310 	and.w	r3, r3, #16
 800922a:	2b10      	cmp	r3, #16
 800922c:	d103      	bne.n	8009236 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2210      	movs	r2, #16
 8009234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fe fe7a 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009244:	e00b      	b.n	800925e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7f8 fe48 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 800924c:	e007      	b.n	800925e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	699a      	ldr	r2, [r3, #24]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f042 0208 	orr.w	r2, r2, #8
 800925c:	619a      	str	r2, [r3, #24]
}
 800925e:	bf00      	nop
 8009260:	3770      	adds	r7, #112	@ 0x70
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40008000 	.word	0x40008000

0800926c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b09c      	sub	sp, #112	@ 0x70
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800927a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009284:	2b22      	cmp	r3, #34	@ 0x22
 8009286:	f040 80be 	bne.w	8009406 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009290:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009298:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800929a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800929e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80092a2:	4013      	ands	r3, r2
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ae:	1c9a      	adds	r2, r3, #2
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f040 80a1 	bne.w	8009416 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80092e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80092f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e6      	bne.n	80092d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	663b      	str	r3, [r7, #96]	@ 0x60
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009326:	643a      	str	r2, [r7, #64]	@ 0x40
 8009328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800932c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e5      	bne.n	8009306 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2220      	movs	r2, #32
 800933e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a33      	ldr	r2, [pc, #204]	@ (8009420 <UART_RxISR_16BIT+0x1b4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d01f      	beq.n	8009398 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d018      	beq.n	8009398 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	61fb      	str	r3, [r7, #28]
   return(result);
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800937a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009386:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800938a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e6      	bne.n	8009366 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d12e      	bne.n	80093fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f023 0310 	bic.w	r3, r3, #16
 80093ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093c4:	61bb      	str	r3, [r7, #24]
 80093c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6979      	ldr	r1, [r7, #20]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	613b      	str	r3, [r7, #16]
   return(result);
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e6      	bne.n	80093a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d103      	bne.n	80093ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2210      	movs	r2, #16
 80093ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7fe fd9e 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093fc:	e00b      	b.n	8009416 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7f8 fd6c 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 8009404:	e007      	b.n	8009416 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0208 	orr.w	r2, r2, #8
 8009414:	619a      	str	r2, [r3, #24]
}
 8009416:	bf00      	nop
 8009418:	3770      	adds	r7, #112	@ 0x70
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40008000 	.word	0x40008000

08009424 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b0ac      	sub	sp, #176	@ 0xb0
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009432:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800945a:	2b22      	cmp	r3, #34	@ 0x22
 800945c:	f040 8183 	bne.w	8009766 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009466:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800946a:	e126      	b.n	80096ba <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009472:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009476:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800947a:	b2d9      	uxtb	r1, r3
 800947c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009480:	b2da      	uxtb	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009486:	400a      	ands	r2, r1
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d053      	beq.n	8009566 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d011      	beq.n	80094ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80094ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00b      	beq.n	80094ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2201      	movs	r2, #1
 80094dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e4:	f043 0201 	orr.w	r2, r3, #1
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d011      	beq.n	800951e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80094fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00b      	beq.n	800951e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2202      	movs	r2, #2
 800950c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009514:	f043 0204 	orr.w	r2, r3, #4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800951e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	d011      	beq.n	800954e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800952a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2204      	movs	r2, #4
 800953c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009544:	f043 0202 	orr.w	r2, r3, #2
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009554:	2b00      	cmp	r3, #0
 8009556:	d006      	beq.n	8009566 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7fe fce3 	bl	8007f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	f040 80a3 	bne.w	80096ba <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800957c:	e853 3f00 	ldrex	r3, [r3]
 8009580:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009598:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800959c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80095a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e4      	bne.n	8009574 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3308      	adds	r3, #8
 80095b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095b4:	e853 3f00 	ldrex	r3, [r3]
 80095b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80095ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095c0:	f023 0301 	bic.w	r3, r3, #1
 80095c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3308      	adds	r3, #8
 80095ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80095d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80095d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80095d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80095e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e1      	bne.n	80095aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a60      	ldr	r2, [pc, #384]	@ (8009780 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d021      	beq.n	8009648 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01a      	beq.n	8009648 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009622:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009626:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009634:	657b      	str	r3, [r7, #84]	@ 0x54
 8009636:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800963a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e4      	bne.n	8009612 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800964c:	2b01      	cmp	r3, #1
 800964e:	d130      	bne.n	80096b2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	f023 0310 	bic.w	r3, r3, #16
 800966a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009678:	643b      	str	r3, [r7, #64]	@ 0x40
 800967a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800967e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e4      	bne.n	8009656 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	f003 0310 	and.w	r3, r3, #16
 8009696:	2b10      	cmp	r3, #16
 8009698:	d103      	bne.n	80096a2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2210      	movs	r2, #16
 80096a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fe fc44 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80096b0:	e00e      	b.n	80096d0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7f8 fc12 	bl	8001edc <HAL_UART_RxCpltCallback>
        break;
 80096b8:	e00a      	b.n	80096d0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096ba:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d006      	beq.n	80096d0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80096c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f47f aece 	bne.w	800946c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096d6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d049      	beq.n	8009776 <UART_RxISR_8BIT_FIFOEN+0x352>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80096e8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d242      	bcs.n	8009776 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009706:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009714:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009716:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800971a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e3      	bne.n	80096f0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a16      	ldr	r2, [pc, #88]	@ (8009784 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800972c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	60bb      	str	r3, [r7, #8]
   return(result);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f043 0320 	orr.w	r3, r3, #32
 8009742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009750:	61bb      	str	r3, [r7, #24]
 8009752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6979      	ldr	r1, [r7, #20]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	613b      	str	r3, [r7, #16]
   return(result);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009764:	e007      	b.n	8009776 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	699a      	ldr	r2, [r3, #24]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0208 	orr.w	r2, r2, #8
 8009774:	619a      	str	r2, [r3, #24]
}
 8009776:	bf00      	nop
 8009778:	37b0      	adds	r7, #176	@ 0xb0
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40008000 	.word	0x40008000
 8009784:	080090b5 	.word	0x080090b5

08009788 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b0ae      	sub	sp, #184	@ 0xb8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009796:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097be:	2b22      	cmp	r3, #34	@ 0x22
 80097c0:	f040 8187 	bne.w	8009ad2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ce:	e12a      	b.n	8009a26 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80097e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80097e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80097ea:	4013      	ands	r3, r2
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f8:	1c9a      	adds	r2, r3, #2
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800981a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800981e:	f003 0307 	and.w	r3, r3, #7
 8009822:	2b00      	cmp	r3, #0
 8009824:	d053      	beq.n	80098ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d011      	beq.n	8009856 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00b      	beq.n	8009856 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2201      	movs	r2, #1
 8009844:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800984c:	f043 0201 	orr.w	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2202      	movs	r2, #2
 8009874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800987c:	f043 0204 	orr.w	r2, r3, #4
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2204      	movs	r2, #4
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ac:	f043 0202 	orr.w	r2, r3, #2
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d006      	beq.n	80098ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fe fb2f 	bl	8007f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 80a5 	bne.w	8009a26 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009902:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009906:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e2      	bne.n	80098dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3308      	adds	r3, #8
 800991c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800993e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800994c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e1      	bne.n	8009916 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a60      	ldr	r2, [pc, #384]	@ (8009aec <UART_RxISR_16BIT_FIFOEN+0x364>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d021      	beq.n	80099b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01a      	beq.n	80099b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800998c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800998e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80099a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e4      	bne.n	800997e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d130      	bne.n	8009a1e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d2:	f023 0310 	bic.w	r3, r3, #16
 80099d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099ec:	e841 2300 	strex	r3, r2, [r1]
 80099f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e4      	bne.n	80099c2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	f003 0310 	and.w	r3, r3, #16
 8009a02:	2b10      	cmp	r3, #16
 8009a04:	d103      	bne.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2210      	movs	r2, #16
 8009a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7fe fa8e 	bl	8007f38 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a1c:	e00e      	b.n	8009a3c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7f8 fa5c 	bl	8001edc <HAL_UART_RxCpltCallback>
        break;
 8009a24:	e00a      	b.n	8009a3c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a26:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d006      	beq.n	8009a3c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009a2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f47f aeca 	bne.w	80097d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a42:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d049      	beq.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a54:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d242      	bcs.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009a80:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e3      	bne.n	8009a5c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a16      	ldr	r2, [pc, #88]	@ (8009af0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009a98:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f043 0320 	orr.w	r3, r3, #32
 8009aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009abc:	61fb      	str	r3, [r7, #28]
 8009abe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	69b9      	ldr	r1, [r7, #24]
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e4      	bne.n	8009a9a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad0:	e007      	b.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	619a      	str	r2, [r3, #24]
}
 8009ae2:	bf00      	nop
 8009ae4:	37b8      	adds	r7, #184	@ 0xb8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40008000 	.word	0x40008000
 8009af0:	0800926d 	.word	0x0800926d

08009af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e027      	b.n	8009b96 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2224      	movs	r2, #36	@ 0x24
 8009b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 0201 	bic.w	r2, r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e02d      	b.n	8009c16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2224      	movs	r2, #36	@ 0x24
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f850 	bl	8009c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e02d      	b.n	8009c92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2224      	movs	r2, #36	@ 0x24
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f812 	bl	8009c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d108      	bne.n	8009cbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cbc:	e031      	b.n	8009d22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	0e5b      	lsrs	r3, r3, #25
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	0f5b      	lsrs	r3, r3, #29
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	7b3a      	ldrb	r2, [r7, #12]
 8009cea:	4911      	ldr	r1, [pc, #68]	@ (8009d30 <UARTEx_SetNbDataToProcess+0x94>)
 8009cec:	5c8a      	ldrb	r2, [r1, r2]
 8009cee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cf2:	7b3a      	ldrb	r2, [r7, #12]
 8009cf4:	490f      	ldr	r1, [pc, #60]	@ (8009d34 <UARTEx_SetNbDataToProcess+0x98>)
 8009cf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
 8009d06:	7b7a      	ldrb	r2, [r7, #13]
 8009d08:	4909      	ldr	r1, [pc, #36]	@ (8009d30 <UARTEx_SetNbDataToProcess+0x94>)
 8009d0a:	5c8a      	ldrb	r2, [r1, r2]
 8009d0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d10:	7b7a      	ldrb	r2, [r7, #13]
 8009d12:	4908      	ldr	r1, [pc, #32]	@ (8009d34 <UARTEx_SetNbDataToProcess+0x98>)
 8009d14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d22:	bf00      	nop
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	080203fc 	.word	0x080203fc
 8009d34:	08020404 	.word	0x08020404

08009d38 <__NVIC_SetPriority>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	4603      	mov	r3, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db0a      	blt.n	8009d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	490c      	ldr	r1, [pc, #48]	@ (8009d84 <__NVIC_SetPriority+0x4c>)
 8009d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d56:	0112      	lsls	r2, r2, #4
 8009d58:	b2d2      	uxtb	r2, r2
 8009d5a:	440b      	add	r3, r1
 8009d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d60:	e00a      	b.n	8009d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	4908      	ldr	r1, [pc, #32]	@ (8009d88 <__NVIC_SetPriority+0x50>)
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	f003 030f 	and.w	r3, r3, #15
 8009d6e:	3b04      	subs	r3, #4
 8009d70:	0112      	lsls	r2, r2, #4
 8009d72:	b2d2      	uxtb	r2, r2
 8009d74:	440b      	add	r3, r1
 8009d76:	761a      	strb	r2, [r3, #24]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	e000e100 	.word	0xe000e100
 8009d88:	e000ed00 	.word	0xe000ed00

08009d8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d90:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <SysTick_Handler+0x1c>)
 8009d92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d94:	f002 fe6a 	bl	800ca6c <xTaskGetSchedulerState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d9e:	f003 ffa3 	bl	800dce8 <xPortSysTickHandler>
  }
}
 8009da2:	bf00      	nop
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	e000e010 	.word	0xe000e010

08009dac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009dac:	b580      	push	{r7, lr}
 8009dae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009db0:	2100      	movs	r1, #0
 8009db2:	f06f 0004 	mvn.w	r0, #4
 8009db6:	f7ff ffbf 	bl	8009d38 <__NVIC_SetPriority>
#endif
}
 8009dba:	bf00      	nop
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc6:	f3ef 8305 	mrs	r3, IPSR
 8009dca:	603b      	str	r3, [r7, #0]
  return(result);
 8009dcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009dd2:	f06f 0305 	mvn.w	r3, #5
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	e00c      	b.n	8009df4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dda:	4b0a      	ldr	r3, [pc, #40]	@ (8009e04 <osKernelInitialize+0x44>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009de2:	4b08      	ldr	r3, [pc, #32]	@ (8009e04 <osKernelInitialize+0x44>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	607b      	str	r3, [r7, #4]
 8009dec:	e002      	b.n	8009df4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009df2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009df4:	687b      	ldr	r3, [r7, #4]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	2000fc68 	.word	0x2000fc68

08009e08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e0e:	f3ef 8305 	mrs	r3, IPSR
 8009e12:	603b      	str	r3, [r7, #0]
  return(result);
 8009e14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e1a:	f06f 0305 	mvn.w	r3, #5
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	e010      	b.n	8009e44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e22:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <osKernelStart+0x48>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d109      	bne.n	8009e3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e2a:	f7ff ffbf 	bl	8009dac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e2e:	4b08      	ldr	r3, [pc, #32]	@ (8009e50 <osKernelStart+0x48>)
 8009e30:	2202      	movs	r2, #2
 8009e32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e34:	f002 f8ec 	bl	800c010 <vTaskStartScheduler>
      stat = osOK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	e002      	b.n	8009e44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e44:	687b      	ldr	r3, [r7, #4]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000fc68 	.word	0x2000fc68

08009e54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08e      	sub	sp, #56	@ 0x38
 8009e58:	af04      	add	r7, sp, #16
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e64:	f3ef 8305 	mrs	r3, IPSR
 8009e68:	617b      	str	r3, [r7, #20]
  return(result);
 8009e6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d17e      	bne.n	8009f6e <osThreadNew+0x11a>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d07b      	beq.n	8009f6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e76:	2380      	movs	r3, #128	@ 0x80
 8009e78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e7a:	2318      	movs	r3, #24
 8009e7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d045      	beq.n	8009f1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <osThreadNew+0x48>
        name = attr->name;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <osThreadNew+0x6e>
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	2b38      	cmp	r3, #56	@ 0x38
 8009eb4:	d805      	bhi.n	8009ec2 <osThreadNew+0x6e>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <osThreadNew+0x72>
        return (NULL);
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e054      	b.n	8009f70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	695b      	ldr	r3, [r3, #20]
 8009ed2:	089b      	lsrs	r3, r3, #2
 8009ed4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00e      	beq.n	8009efc <osThreadNew+0xa8>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	2ba7      	cmp	r3, #167	@ 0xa7
 8009ee4:	d90a      	bls.n	8009efc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <osThreadNew+0xa8>
        mem = 1;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	e010      	b.n	8009f1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10c      	bne.n	8009f1e <osThreadNew+0xca>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d108      	bne.n	8009f1e <osThreadNew+0xca>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <osThreadNew+0xca>
          mem = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	e001      	b.n	8009f1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d110      	bne.n	8009f46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f2c:	9202      	str	r2, [sp, #8]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6a3a      	ldr	r2, [r7, #32]
 8009f38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f001 fe74 	bl	800bc28 <xTaskCreateStatic>
 8009f40:	4603      	mov	r3, r0
 8009f42:	613b      	str	r3, [r7, #16]
 8009f44:	e013      	b.n	8009f6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d110      	bne.n	8009f6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	f107 0310 	add.w	r3, r7, #16
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f001 fec2 	bl	800bce8 <xTaskCreate>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d001      	beq.n	8009f6e <osThreadNew+0x11a>
            hTask = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f6e:	693b      	ldr	r3, [r7, #16]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3728      	adds	r7, #40	@ 0x28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <osThreadFlagsSet+0x1a>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da03      	bge.n	8009f9a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8009f92:	f06f 0303 	mvn.w	r3, #3
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	e035      	b.n	800a006 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8009f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fa0:	f3ef 8305 	mrs	r3, IPSR
 8009fa4:	613b      	str	r3, [r7, #16]
  return(result);
 8009fa6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d01f      	beq.n	8009fec <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2201      	movs	r2, #1
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6978      	ldr	r0, [r7, #20]
 8009fbe:	f003 f81d 	bl	800cffc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8009fc2:	f107 030c 	add.w	r3, r7, #12
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	9200      	str	r2, [sp, #0]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	2100      	movs	r1, #0
 8009fce:	6978      	ldr	r0, [r7, #20]
 8009fd0:	f003 f814 	bl	800cffc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d015      	beq.n	800a006 <osThreadFlagsSet+0x8e>
 8009fda:	4b0d      	ldr	r3, [pc, #52]	@ (800a010 <osThreadFlagsSet+0x98>)
 8009fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	e00c      	b.n	800a006 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009fec:	2300      	movs	r3, #0
 8009fee:	2201      	movs	r2, #1
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f002 ff40 	bl	800ce78 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8009ff8:	f107 030c 	add.w	r3, r7, #12
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	6978      	ldr	r0, [r7, #20]
 800a002:	f002 ff39 	bl	800ce78 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a006:	68fb      	ldr	r3, [r7, #12]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a014:	b580      	push	{r7, lr}
 800a016:	b08c      	sub	sp, #48	@ 0x30
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a020:	f3ef 8305 	mrs	r3, IPSR
 800a024:	617b      	str	r3, [r7, #20]
  return(result);
 800a026:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a02c:	f06f 0305 	mvn.w	r3, #5
 800a030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a032:	e06b      	b.n	800a10c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	da03      	bge.n	800a042 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a03a:	f06f 0303 	mvn.w	r3, #3
 800a03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a040:	e064      	b.n	800a10c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a050:	e001      	b.n	800a056 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800a05e:	f002 f8f3 	bl	800c248 <xTaskGetTickCount>
 800a062:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a064:	f107 0210 	add.w	r2, r7, #16
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a06c:	2000      	movs	r0, #0
 800a06e:	f002 fea3 	bl	800cdb8 <xTaskNotifyWait>
 800a072:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d137      	bne.n	800a0ea <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4013      	ands	r3, r2
 800a080:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a086:	4313      	orrs	r3, r2
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00c      	beq.n	800a0ae <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a098:	4013      	ands	r3, r2
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d032      	beq.n	800a106 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10f      	bne.n	800a0c6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a0a6:	f06f 0302 	mvn.w	r3, #2
 800a0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a0ac:	e02e      	b.n	800a10c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d128      	bne.n	800a10a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d103      	bne.n	800a0c6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a0be:	f06f 0302 	mvn.w	r3, #2
 800a0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800a0c4:	e022      	b.n	800a10c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a0c6:	f002 f8bf 	bl	800c248 <xTaskGetTickCount>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d902      	bls.n	800a0e0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0de:	e00e      	b.n	800a0fe <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a0e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e8:	e009      	b.n	800a0fe <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d103      	bne.n	800a0f8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a0f0:	f06f 0302 	mvn.w	r3, #2
 800a0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0f6:	e002      	b.n	800a0fe <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a0f8:	f06f 0301 	mvn.w	r3, #1
 800a0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1af      	bne.n	800a064 <osThreadFlagsWait+0x50>
 800a104:	e002      	b.n	800a10c <osThreadFlagsWait+0xf8>
            break;
 800a106:	bf00      	nop
 800a108:	e000      	b.n	800a10c <osThreadFlagsWait+0xf8>
            break;
 800a10a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3730      	adds	r7, #48	@ 0x30
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a11e:	f3ef 8305 	mrs	r3, IPSR
 800a122:	60bb      	str	r3, [r7, #8]
  return(result);
 800a124:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <osDelay+0x1c>
    stat = osErrorISR;
 800a12a:	f06f 0305 	mvn.w	r3, #5
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	e007      	b.n	800a142 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f001 ff31 	bl	800bfa4 <vTaskDelay>
    }
  }

  return (stat);
 800a142:	68fb      	ldr	r3, [r7, #12]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a158:	f3ef 8305 	mrs	r3, IPSR
 800a15c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a15e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800a160:	2b00      	cmp	r3, #0
 800a162:	d12d      	bne.n	800a1c0 <osEventFlagsNew+0x74>
    mem = -1;
 800a164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a168:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d015      	beq.n	800a19c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d006      	beq.n	800a186 <osEventFlagsNew+0x3a>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b1f      	cmp	r3, #31
 800a17e:	d902      	bls.n	800a186 <osEventFlagsNew+0x3a>
        mem = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	613b      	str	r3, [r7, #16]
 800a184:	e00c      	b.n	800a1a0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d108      	bne.n	800a1a0 <osEventFlagsNew+0x54>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d104      	bne.n	800a1a0 <osEventFlagsNew+0x54>
          mem = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	613b      	str	r3, [r7, #16]
 800a19a:	e001      	b.n	800a1a0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d106      	bne.n	800a1b4 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 faf6 	bl	800a79c <xEventGroupCreateStatic>
 800a1b0:	6178      	str	r0, [r7, #20]
 800a1b2:	e005      	b.n	800a1c0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d102      	bne.n	800a1c0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800a1ba:	f000 fb28 	bl	800a80e <xEventGroupCreate>
 800a1be:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800a1c0:	697b      	ldr	r3, [r7, #20]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <osEventFlagsSet+0x1c>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1e6:	d303      	bcc.n	800a1f0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800a1e8:	f06f 0303 	mvn.w	r3, #3
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e028      	b.n	800a242 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f0:	f3ef 8305 	mrs	r3, IPSR
 800a1f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01d      	beq.n	800a238 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800a200:	f107 0308 	add.w	r3, r7, #8
 800a204:	461a      	mov	r2, r3
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6938      	ldr	r0, [r7, #16]
 800a20a:	f000 fca9 	bl	800ab60 <xEventGroupSetBitsFromISR>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800a214:	f06f 0302 	mvn.w	r3, #2
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	e012      	b.n	800a242 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <osEventFlagsSet+0x76>
 800a226:	4b09      	ldr	r3, [pc, #36]	@ (800a24c <osEventFlagsSet+0x80>)
 800a228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	e004      	b.n	800a242 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6938      	ldr	r0, [r7, #16]
 800a23c:	f000 fbd4 	bl	800a9e8 <xEventGroupSetBits>
 800a240:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800a242:	697b      	ldr	r3, [r7, #20]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800a250:	b580      	push	{r7, lr}
 800a252:	b08c      	sub	sp, #48	@ 0x30
 800a254:	af02      	add	r7, sp, #8
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <osEventFlagsWait+0x20>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a26e:	d303      	bcc.n	800a278 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800a270:	f06f 0303 	mvn.w	r3, #3
 800a274:	61fb      	str	r3, [r7, #28]
 800a276:	e04b      	b.n	800a310 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a278:	f3ef 8305 	mrs	r3, IPSR
 800a27c:	617b      	str	r3, [r7, #20]
  return(result);
 800a27e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800a284:	f06f 0305 	mvn.w	r3, #5
 800a288:	61fb      	str	r3, [r7, #28]
 800a28a:	e041      	b.n	800a310 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800a296:	2301      	movs	r3, #1
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
 800a29a:	e001      	b.n	800a2a0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	623b      	str	r3, [r7, #32]
 800a2ae:	e001      	b.n	800a2b4 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ba:	6a3a      	ldr	r2, [r7, #32]
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	69b8      	ldr	r0, [r7, #24]
 800a2c0:	f000 fac0 	bl	800a844 <xEventGroupWaitBits>
 800a2c4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f003 0301 	and.w	r3, r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d010      	beq.n	800a2f2 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d019      	beq.n	800a310 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800a2e2:	f06f 0301 	mvn.w	r3, #1
 800a2e6:	61fb      	str	r3, [r7, #28]
 800a2e8:	e012      	b.n	800a310 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a2ea:	f06f 0302 	mvn.w	r3, #2
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	e00e      	b.n	800a310 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800a302:	f06f 0301 	mvn.w	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	e002      	b.n	800a310 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a30a:	f06f 0302 	mvn.w	r3, #2
 800a30e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800a310:	69fb      	ldr	r3, [r7, #28]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3728      	adds	r7, #40	@ 0x28
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b08a      	sub	sp, #40	@ 0x28
 800a31e:	af02      	add	r7, sp, #8
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a32a:	f3ef 8305 	mrs	r3, IPSR
 800a32e:	613b      	str	r3, [r7, #16]
  return(result);
 800a330:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a332:	2b00      	cmp	r3, #0
 800a334:	d175      	bne.n	800a422 <osSemaphoreNew+0x108>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d072      	beq.n	800a422 <osSemaphoreNew+0x108>
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	429a      	cmp	r2, r3
 800a342:	d86e      	bhi.n	800a422 <osSemaphoreNew+0x108>
    mem = -1;
 800a344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a348:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d015      	beq.n	800a37c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d006      	beq.n	800a366 <osSemaphoreNew+0x4c>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	2b4f      	cmp	r3, #79	@ 0x4f
 800a35e:	d902      	bls.n	800a366 <osSemaphoreNew+0x4c>
        mem = 1;
 800a360:	2301      	movs	r3, #1
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	e00c      	b.n	800a380 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d108      	bne.n	800a380 <osSemaphoreNew+0x66>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <osSemaphoreNew+0x66>
          mem = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	61bb      	str	r3, [r7, #24]
 800a37a:	e001      	b.n	800a380 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a386:	d04c      	beq.n	800a422 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d128      	bne.n	800a3e0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d10a      	bne.n	800a3aa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2203      	movs	r2, #3
 800a39a:	9200      	str	r2, [sp, #0]
 800a39c:	2200      	movs	r2, #0
 800a39e:	2100      	movs	r1, #0
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f000 fd0f 	bl	800adc4 <xQueueGenericCreateStatic>
 800a3a6:	61f8      	str	r0, [r7, #28]
 800a3a8:	e005      	b.n	800a3b6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a3aa:	2203      	movs	r2, #3
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	f000 fd85 	bl	800aebe <xQueueGenericCreate>
 800a3b4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d022      	beq.n	800a402 <osSemaphoreNew+0xe8>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01f      	beq.n	800a402 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	69f8      	ldr	r0, [r7, #28]
 800a3ca:	f000 fe45 	bl	800b058 <xQueueGenericSend>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d016      	beq.n	800a402 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a3d4:	69f8      	ldr	r0, [r7, #28]
 800a3d6:	f001 fa53 	bl	800b880 <vQueueDelete>
            hSemaphore = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
 800a3de:	e010      	b.n	800a402 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d108      	bne.n	800a3f8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	68b9      	ldr	r1, [r7, #8]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fdc3 	bl	800af7a <xQueueCreateCountingSemaphoreStatic>
 800a3f4:	61f8      	str	r0, [r7, #28]
 800a3f6:	e004      	b.n	800a402 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a3f8:	68b9      	ldr	r1, [r7, #8]
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 fdf6 	bl	800afec <xQueueCreateCountingSemaphore>
 800a400:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00c      	beq.n	800a422 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e001      	b.n	800a41a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a416:	2300      	movs	r3, #0
 800a418:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a41a:	6979      	ldr	r1, [r7, #20]
 800a41c:	69f8      	ldr	r0, [r7, #28]
 800a41e:	f001 fb7b 	bl	800bb18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a422:	69fb      	ldr	r3, [r7, #28]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3720      	adds	r7, #32
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a444:	f06f 0303 	mvn.w	r3, #3
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	e039      	b.n	800a4c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a44c:	f3ef 8305 	mrs	r3, IPSR
 800a450:	60fb      	str	r3, [r7, #12]
  return(result);
 800a452:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a454:	2b00      	cmp	r3, #0
 800a456:	d022      	beq.n	800a49e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a45e:	f06f 0303 	mvn.w	r3, #3
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e02c      	b.n	800a4c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a46a:	f107 0308 	add.w	r3, r7, #8
 800a46e:	461a      	mov	r2, r3
 800a470:	2100      	movs	r1, #0
 800a472:	6938      	ldr	r0, [r7, #16]
 800a474:	f001 f982 	bl	800b77c <xQueueReceiveFromISR>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d003      	beq.n	800a486 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a47e:	f06f 0302 	mvn.w	r3, #2
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	e01c      	b.n	800a4c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d019      	beq.n	800a4c0 <osSemaphoreAcquire+0x94>
 800a48c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4cc <osSemaphoreAcquire+0xa0>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	e010      	b.n	800a4c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6938      	ldr	r0, [r7, #16]
 800a4a2:	f001 f85b 	bl	800b55c <xQueueSemaphoreTake>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d009      	beq.n	800a4c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a4b2:	f06f 0301 	mvn.w	r3, #1
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	e002      	b.n	800a4c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a4ba:	f06f 0302 	mvn.w	r3, #2
 800a4be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a4c0:	697b      	ldr	r3, [r7, #20]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	@ 0x28
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4e0:	f3ef 8305 	mrs	r3, IPSR
 800a4e4:	613b      	str	r3, [r7, #16]
  return(result);
 800a4e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d15f      	bne.n	800a5ac <osMessageQueueNew+0xdc>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d05c      	beq.n	800a5ac <osMessageQueueNew+0xdc>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d059      	beq.n	800a5ac <osMessageQueueNew+0xdc>
    mem = -1;
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d029      	beq.n	800a558 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d012      	beq.n	800a532 <osMessageQueueNew+0x62>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	2b4f      	cmp	r3, #79	@ 0x4f
 800a512:	d90e      	bls.n	800a532 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00a      	beq.n	800a532 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	695a      	ldr	r2, [r3, #20]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	fb01 f303 	mul.w	r3, r1, r3
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <osMessageQueueNew+0x62>
        mem = 1;
 800a52c:	2301      	movs	r3, #1
 800a52e:	61bb      	str	r3, [r7, #24]
 800a530:	e014      	b.n	800a55c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d110      	bne.n	800a55c <osMessageQueueNew+0x8c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10c      	bne.n	800a55c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a546:	2b00      	cmp	r3, #0
 800a548:	d108      	bne.n	800a55c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d104      	bne.n	800a55c <osMessageQueueNew+0x8c>
          mem = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
 800a556:	e001      	b.n	800a55c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d10b      	bne.n	800a57a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691a      	ldr	r2, [r3, #16]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	2100      	movs	r1, #0
 800a56c:	9100      	str	r1, [sp, #0]
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 fc27 	bl	800adc4 <xQueueGenericCreateStatic>
 800a576:	61f8      	str	r0, [r7, #28]
 800a578:	e008      	b.n	800a58c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d105      	bne.n	800a58c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a580:	2200      	movs	r2, #0
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fc9a 	bl	800aebe <xQueueGenericCreate>
 800a58a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00c      	beq.n	800a5ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e001      	b.n	800a5a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a5a4:	6979      	ldr	r1, [r7, #20]
 800a5a6:	69f8      	ldr	r0, [r7, #28]
 800a5a8:	f001 fab6 	bl	800bb18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a5ac:	69fb      	ldr	r3, [r7, #28]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3720      	adds	r7, #32
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b088      	sub	sp, #32
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d0:	f3ef 8305 	mrs	r3, IPSR
 800a5d4:	617b      	str	r3, [r7, #20]
  return(result);
 800a5d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d028      	beq.n	800a62e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d005      	beq.n	800a5ee <osMessageQueuePut+0x36>
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <osMessageQueuePut+0x36>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d003      	beq.n	800a5f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a5ee:	f06f 0303 	mvn.w	r3, #3
 800a5f2:	61fb      	str	r3, [r7, #28]
 800a5f4:	e038      	b.n	800a668 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a5fa:	f107 0210 	add.w	r2, r7, #16
 800a5fe:	2300      	movs	r3, #0
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	69b8      	ldr	r0, [r7, #24]
 800a604:	f000 fe2a 	bl	800b25c <xQueueGenericSendFromISR>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d003      	beq.n	800a616 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a60e:	f06f 0302 	mvn.w	r3, #2
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	e028      	b.n	800a668 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d025      	beq.n	800a668 <osMessageQueuePut+0xb0>
 800a61c:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <osMessageQueuePut+0xbc>)
 800a61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	e01c      	b.n	800a668 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <osMessageQueuePut+0x82>
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d103      	bne.n	800a642 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a63a:	f06f 0303 	mvn.w	r3, #3
 800a63e:	61fb      	str	r3, [r7, #28]
 800a640:	e012      	b.n	800a668 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a642:	2300      	movs	r3, #0
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	69b8      	ldr	r0, [r7, #24]
 800a64a:	f000 fd05 	bl	800b058 <xQueueGenericSend>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b01      	cmp	r3, #1
 800a652:	d009      	beq.n	800a668 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a65a:	f06f 0301 	mvn.w	r3, #1
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e002      	b.n	800a668 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a662:	f06f 0302 	mvn.w	r3, #2
 800a666:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a668:	69fb      	ldr	r3, [r7, #28]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a68e:	f3ef 8305 	mrs	r3, IPSR
 800a692:	617b      	str	r3, [r7, #20]
  return(result);
 800a694:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a696:	2b00      	cmp	r3, #0
 800a698:	d028      	beq.n	800a6ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <osMessageQueueGet+0x34>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <osMessageQueueGet+0x34>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d003      	beq.n	800a6b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a6ac:	f06f 0303 	mvn.w	r3, #3
 800a6b0:	61fb      	str	r3, [r7, #28]
 800a6b2:	e037      	b.n	800a724 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a6b8:	f107 0310 	add.w	r3, r7, #16
 800a6bc:	461a      	mov	r2, r3
 800a6be:	68b9      	ldr	r1, [r7, #8]
 800a6c0:	69b8      	ldr	r0, [r7, #24]
 800a6c2:	f001 f85b 	bl	800b77c <xQueueReceiveFromISR>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d003      	beq.n	800a6d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a6cc:	f06f 0302 	mvn.w	r3, #2
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	e027      	b.n	800a724 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d024      	beq.n	800a724 <osMessageQueueGet+0xac>
 800a6da:	4b15      	ldr	r3, [pc, #84]	@ (800a730 <osMessageQueueGet+0xb8>)
 800a6dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	e01b      	b.n	800a724 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <osMessageQueueGet+0x80>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d103      	bne.n	800a700 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a6f8:	f06f 0303 	mvn.w	r3, #3
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	e011      	b.n	800a724 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	68b9      	ldr	r1, [r7, #8]
 800a704:	69b8      	ldr	r0, [r7, #24]
 800a706:	f000 fe47 	bl	800b398 <xQueueReceive>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d009      	beq.n	800a724 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a716:	f06f 0301 	mvn.w	r3, #1
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	e002      	b.n	800a724 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a71e:	f06f 0302 	mvn.w	r3, #2
 800a722:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a724:	69fb      	ldr	r3, [r7, #28]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3720      	adds	r7, #32
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a07      	ldr	r2, [pc, #28]	@ (800a760 <vApplicationGetIdleTaskMemory+0x2c>)
 800a744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4a06      	ldr	r2, [pc, #24]	@ (800a764 <vApplicationGetIdleTaskMemory+0x30>)
 800a74a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2280      	movs	r2, #128	@ 0x80
 800a750:	601a      	str	r2, [r3, #0]
}
 800a752:	bf00      	nop
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	2000fc6c 	.word	0x2000fc6c
 800a764:	2000fd14 	.word	0x2000fd14

0800a768 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4a07      	ldr	r2, [pc, #28]	@ (800a794 <vApplicationGetTimerTaskMemory+0x2c>)
 800a778:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4a06      	ldr	r2, [pc, #24]	@ (800a798 <vApplicationGetTimerTaskMemory+0x30>)
 800a77e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a786:	601a      	str	r2, [r3, #0]
}
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	2000ff14 	.word	0x2000ff14
 800a798:	2000ffbc 	.word	0x2000ffbc

0800a79c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10b      	bne.n	800a7c2 <xEventGroupCreateStatic+0x26>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ae:	f383 8811 	msr	BASEPRI, r3
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	f3bf 8f4f 	dsb	sy
 800a7ba:	613b      	str	r3, [r7, #16]
}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	e7fd      	b.n	800a7be <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a7c2:	2320      	movs	r3, #32
 800a7c4:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	d00b      	beq.n	800a7e4 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	60fb      	str	r3, [r7, #12]
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	e7fd      	b.n	800a7e0 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00a      	beq.n	800a804 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f9c5 	bl	800ab88 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2201      	movs	r2, #1
 800a802:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a804:	697b      	ldr	r3, [r7, #20]
	}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a814:	2020      	movs	r0, #32
 800a816:	f003 faf9 	bl	800de0c <pvPortMalloc>
 800a81a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 f9ab 	bl	800ab88 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a838:	687b      	ldr	r3, [r7, #4]
	}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
	...

0800a844 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b090      	sub	sp, #64	@ 0x40
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a85a:	2300      	movs	r3, #0
 800a85c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10b      	bne.n	800a87c <xEventGroupWaitBits+0x38>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	623b      	str	r3, [r7, #32]
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	e7fd      	b.n	800a878 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a882:	d30b      	bcc.n	800a89c <xEventGroupWaitBits+0x58>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	61fb      	str	r3, [r7, #28]
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <xEventGroupWaitBits+0x76>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	61bb      	str	r3, [r7, #24]
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop
 800a8b8:	e7fd      	b.n	800a8b6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ba:	f002 f8d7 	bl	800ca6c <xTaskGetSchedulerState>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <xEventGroupWaitBits+0x86>
 800a8c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <xEventGroupWaitBits+0x8a>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e000      	b.n	800a8d0 <xEventGroupWaitBits+0x8c>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10b      	bne.n	800a8ec <xEventGroupWaitBits+0xa8>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	617b      	str	r3, [r7, #20]
}
 800a8e6:	bf00      	nop
 800a8e8:	bf00      	nop
 800a8ea:	e7fd      	b.n	800a8e8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800a8ec:	f001 fc00 	bl	800c0f0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8fc:	f000 f90d 	bl	800ab1a <prvTestWaitCondition>
 800a900:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800a902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00e      	beq.n	800a926 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d028      	beq.n	800a968 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	43db      	mvns	r3, r3
 800a91e:	401a      	ands	r2, r3
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	e020      	b.n	800a968 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	633b      	str	r3, [r7, #48]	@ 0x30
 800a934:	e018      	b.n	800a968 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a942:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a950:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a954:	1d18      	adds	r0, r3, #4
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95a:	4313      	orrs	r3, r2
 800a95c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a95e:	4619      	mov	r1, r3
 800a960:	f001 fdc8 	bl	800c4f4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a968:	f001 fbd0 	bl	800c10c <xTaskResumeAll>
 800a96c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a970:	2b00      	cmp	r3, #0
 800a972:	d031      	beq.n	800a9d8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	2b00      	cmp	r3, #0
 800a978:	d107      	bne.n	800a98a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800a97a:	4b1a      	ldr	r3, [pc, #104]	@ (800a9e4 <xEventGroupWaitBits+0x1a0>)
 800a97c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a98a:	f002 f9e9 	bl	800cd60 <uxTaskResetEventItemValue>
 800a98e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d11a      	bne.n	800a9d0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800a99a:	f003 f915 	bl	800dbc8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a9aa:	f000 f8b6 	bl	800ab1a <prvTestWaitCondition>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d009      	beq.n	800a9c8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d006      	beq.n	800a9c8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	43db      	mvns	r3, r3
 800a9c2:	401a      	ands	r2, r3
 800a9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800a9cc:	f003 f92e 	bl	800dc2c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3740      	adds	r7, #64	@ 0x40
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08e      	sub	sp, #56	@ 0x38
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10b      	bne.n	800aa1c <xEventGroupSetBits+0x34>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	613b      	str	r3, [r7, #16]
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	e7fd      	b.n	800aa18 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa22:	d30b      	bcc.n	800aa3c <xEventGroupSetBits+0x54>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	60fb      	str	r3, [r7, #12]
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	3304      	adds	r3, #4
 800aa40:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa44:	3308      	adds	r3, #8
 800aa46:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800aa48:	f001 fb52 	bl	800c0f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800aa52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	431a      	orrs	r2, r3
 800aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800aa5e:	e03c      	b.n	800aada <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800aa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800aa66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800aa76:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800aa7e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d108      	bne.n	800aa9c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800aa8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	4013      	ands	r3, r2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800aa96:	2301      	movs	r3, #1
 800aa98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa9a:	e008      	b.n	800aaae <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	69ba      	ldr	r2, [r7, #24]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d101      	bne.n	800aaae <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800aaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d010      	beq.n	800aad6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800aabe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800aac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aace:	4619      	mov	r1, r3
 800aad0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800aad2:	f001 fddd 	bl	800c690 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800aada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d1be      	bne.n	800aa60 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800aae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	43db      	mvns	r3, r3
 800aaea:	401a      	ands	r2, r3
 800aaec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaee:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800aaf0:	f001 fb0c 	bl	800c10c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800aaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf6:	681b      	ldr	r3, [r3, #0]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3738      	adds	r7, #56	@ 0x38
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff ff6b 	bl	800a9e8 <xEventGroupSetBits>
}
 800ab12:	bf00      	nop
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b087      	sub	sp, #28
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	60b9      	str	r1, [r7, #8]
 800ab24:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d107      	bne.n	800ab40 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	4013      	ands	r3, r2
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00a      	beq.n	800ab50 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	617b      	str	r3, [r7, #20]
 800ab3e:	e007      	b.n	800ab50 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	4013      	ands	r3, r2
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d101      	bne.n	800ab50 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800ab50:	697b      	ldr	r3, [r7, #20]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	371c      	adds	r7, #28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	68f9      	ldr	r1, [r7, #12]
 800ab72:	4804      	ldr	r0, [pc, #16]	@ (800ab84 <xEventGroupSetBitsFromISR+0x24>)
 800ab74:	f002 fed6 	bl	800d924 <xTimerPendFunctionCallFromISR>
 800ab78:	6178      	str	r0, [r7, #20]

		return xReturn;
 800ab7a:	697b      	ldr	r3, [r7, #20]
	}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	0800ab01 	.word	0x0800ab01

0800ab88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f103 0208 	add.w	r2, r3, #8
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f103 0208 	add.w	r2, r3, #8
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f103 0208 	add.w	r2, r3, #8
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abe2:	b480      	push	{r7}
 800abe4:	b085      	sub	sp, #20
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	601a      	str	r2, [r3, #0]
}
 800ac1e:	bf00      	nop
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac40:	d103      	bne.n	800ac4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	e00c      	b.n	800ac64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	e002      	b.n	800ac58 <vListInsert+0x2e>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d2f6      	bcs.n	800ac52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	1c5a      	adds	r2, r3, #1
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	601a      	str	r2, [r3, #0]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	6892      	ldr	r2, [r2, #8]
 800acb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6852      	ldr	r2, [r2, #4]
 800acbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d103      	bne.n	800acd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	1e5a      	subs	r2, r3, #1
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <xQueueGenericReset+0x2c>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	60bb      	str	r3, [r7, #8]
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad1c:	f002 ff54 	bl	800dbc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad28:	68f9      	ldr	r1, [r7, #12]
 800ad2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad2c:	fb01 f303 	mul.w	r3, r1, r3
 800ad30:	441a      	add	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad52:	fb01 f303 	mul.w	r3, r1, r3
 800ad56:	441a      	add	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	22ff      	movs	r2, #255	@ 0xff
 800ad60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	22ff      	movs	r2, #255	@ 0xff
 800ad68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d114      	bne.n	800ad9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01a      	beq.n	800adb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3310      	adds	r3, #16
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 fc22 	bl	800c5c8 <xTaskRemoveFromEventList>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d012      	beq.n	800adb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	@ (800adc0 <xQueueGenericReset+0xd0>)
 800ad8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	e009      	b.n	800adb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3310      	adds	r3, #16
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff fef1 	bl	800ab88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3324      	adds	r3, #36	@ 0x24
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff feec 	bl	800ab88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adb0:	f002 ff3c 	bl	800dc2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800adb4:	2301      	movs	r3, #1
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	e000ed04 	.word	0xe000ed04

0800adc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08e      	sub	sp, #56	@ 0x38
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10b      	bne.n	800adf0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adea:	bf00      	nop
 800adec:	bf00      	nop
 800adee:	e7fd      	b.n	800adec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10b      	bne.n	800ae0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <xQueueGenericCreateStatic+0x56>
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <xQueueGenericCreateStatic+0x5a>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <xQueueGenericCreateStatic+0x5c>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10b      	bne.n	800ae3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	623b      	str	r3, [r7, #32]
}
 800ae36:	bf00      	nop
 800ae38:	bf00      	nop
 800ae3a:	e7fd      	b.n	800ae38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <xQueueGenericCreateStatic+0x84>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <xQueueGenericCreateStatic+0x88>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e000      	b.n	800ae4e <xQueueGenericCreateStatic+0x8a>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10b      	bne.n	800ae6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	61fb      	str	r3, [r7, #28]
}
 800ae64:	bf00      	nop
 800ae66:	bf00      	nop
 800ae68:	e7fd      	b.n	800ae66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae6a:	2350      	movs	r3, #80	@ 0x50
 800ae6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b50      	cmp	r3, #80	@ 0x50
 800ae72:	d00b      	beq.n	800ae8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	61bb      	str	r3, [r7, #24]
}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	e7fd      	b.n	800ae88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00d      	beq.n	800aeb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aea0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 f840 	bl	800af34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aeb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3730      	adds	r7, #48	@ 0x30
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b08a      	sub	sp, #40	@ 0x28
 800aec2:	af02      	add	r7, sp, #8
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	4613      	mov	r3, r2
 800aeca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10b      	bne.n	800aeea <xQueueGenericCreate+0x2c>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	613b      	str	r3, [r7, #16]
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop
 800aee8:	e7fd      	b.n	800aee6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	fb02 f303 	mul.w	r3, r2, r3
 800aef2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	3350      	adds	r3, #80	@ 0x50
 800aef8:	4618      	mov	r0, r3
 800aefa:	f002 ff87 	bl	800de0c <pvPortMalloc>
 800aefe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d011      	beq.n	800af2a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	3350      	adds	r3, #80	@ 0x50
 800af0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af18:	79fa      	ldrb	r2, [r7, #7]
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	4613      	mov	r3, r2
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	68b9      	ldr	r1, [r7, #8]
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 f805 	bl	800af34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af2a:	69bb      	ldr	r3, [r7, #24]
	}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3720      	adds	r7, #32
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d103      	bne.n	800af50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	e002      	b.n	800af56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af62:	2101      	movs	r1, #1
 800af64:	69b8      	ldr	r0, [r7, #24]
 800af66:	f7ff fec3 	bl	800acf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af72:	bf00      	nop
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b08a      	sub	sp, #40	@ 0x28
 800af7e:	af02      	add	r7, sp, #8
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10b      	bne.n	800afa4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	61bb      	str	r3, [r7, #24]
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	e7fd      	b.n	800afa0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d90b      	bls.n	800afc4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	617b      	str	r3, [r7, #20]
}
 800afbe:	bf00      	nop
 800afc0:	bf00      	nop
 800afc2:	e7fd      	b.n	800afc0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800afc4:	2302      	movs	r3, #2
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff fef8 	bl	800adc4 <xQueueGenericCreateStatic>
 800afd4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800afe2:	69fb      	ldr	r3, [r7, #28]
	}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3720      	adds	r7, #32
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10b      	bne.n	800b014 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	613b      	str	r3, [r7, #16]
}
 800b00e:	bf00      	nop
 800b010:	bf00      	nop
 800b012:	e7fd      	b.n	800b010 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d90b      	bls.n	800b034 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	60fb      	str	r3, [r7, #12]
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b034:	2202      	movs	r2, #2
 800b036:	2100      	movs	r1, #0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ff40 	bl	800aebe <xQueueGenericCreate>
 800b03e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b04c:	697b      	ldr	r3, [r7, #20]
	}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08e      	sub	sp, #56	@ 0x38
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b066:	2300      	movs	r3, #0
 800b068:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10b      	bne.n	800b08c <xQueueGenericSend+0x34>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b086:	bf00      	nop
 800b088:	bf00      	nop
 800b08a:	e7fd      	b.n	800b088 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <xQueueGenericSend+0x42>
 800b092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <xQueueGenericSend+0x46>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <xQueueGenericSend+0x48>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10b      	bne.n	800b0bc <xQueueGenericSend+0x64>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b0b6:	bf00      	nop
 800b0b8:	bf00      	nop
 800b0ba:	e7fd      	b.n	800b0b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d103      	bne.n	800b0ca <xQueueGenericSend+0x72>
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d101      	bne.n	800b0ce <xQueueGenericSend+0x76>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e000      	b.n	800b0d0 <xQueueGenericSend+0x78>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10b      	bne.n	800b0ec <xQueueGenericSend+0x94>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	623b      	str	r3, [r7, #32]
}
 800b0e6:	bf00      	nop
 800b0e8:	bf00      	nop
 800b0ea:	e7fd      	b.n	800b0e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0ec:	f001 fcbe 	bl	800ca6c <xTaskGetSchedulerState>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d102      	bne.n	800b0fc <xQueueGenericSend+0xa4>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <xQueueGenericSend+0xa8>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e000      	b.n	800b102 <xQueueGenericSend+0xaa>
 800b100:	2300      	movs	r3, #0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <xQueueGenericSend+0xc6>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	61fb      	str	r3, [r7, #28]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b11e:	f002 fd53 	bl	800dbc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d302      	bcc.n	800b134 <xQueueGenericSend+0xdc>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b02      	cmp	r3, #2
 800b132:	d129      	bne.n	800b188 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	68b9      	ldr	r1, [r7, #8]
 800b138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b13a:	f000 fbdd 	bl	800b8f8 <prvCopyDataToQueue>
 800b13e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	d010      	beq.n	800b16a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	3324      	adds	r3, #36	@ 0x24
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 fa3b 	bl	800c5c8 <xTaskRemoveFromEventList>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d013      	beq.n	800b180 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b158:	4b3f      	ldr	r3, [pc, #252]	@ (800b258 <xQueueGenericSend+0x200>)
 800b15a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	e00a      	b.n	800b180 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d007      	beq.n	800b180 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b170:	4b39      	ldr	r3, [pc, #228]	@ (800b258 <xQueueGenericSend+0x200>)
 800b172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b176:	601a      	str	r2, [r3, #0]
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b180:	f002 fd54 	bl	800dc2c <vPortExitCritical>
				return pdPASS;
 800b184:	2301      	movs	r3, #1
 800b186:	e063      	b.n	800b250 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d103      	bne.n	800b196 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b18e:	f002 fd4d 	bl	800dc2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b192:	2300      	movs	r3, #0
 800b194:	e05c      	b.n	800b250 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d106      	bne.n	800b1aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b19c:	f107 0314 	add.w	r3, r7, #20
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f001 fb01 	bl	800c7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1aa:	f002 fd3f 	bl	800dc2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1ae:	f000 ff9f 	bl	800c0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1b2:	f002 fd09 	bl	800dbc8 <vPortEnterCritical>
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1bc:	b25b      	sxtb	r3, r3
 800b1be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1c2:	d103      	bne.n	800b1cc <xQueueGenericSend+0x174>
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1d2:	b25b      	sxtb	r3, r3
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d8:	d103      	bne.n	800b1e2 <xQueueGenericSend+0x18a>
 800b1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1e2:	f002 fd23 	bl	800dc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1e6:	1d3a      	adds	r2, r7, #4
 800b1e8:	f107 0314 	add.w	r3, r7, #20
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 faf0 	bl	800c7d4 <xTaskCheckForTimeOut>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d124      	bne.n	800b244 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1fc:	f000 fc74 	bl	800bae8 <prvIsQueueFull>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d018      	beq.n	800b238 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	3310      	adds	r3, #16
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f001 f94a 	bl	800c4a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b216:	f000 fbff 	bl	800ba18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b21a:	f000 ff77 	bl	800c10c <xTaskResumeAll>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	f47f af7c 	bne.w	800b11e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b226:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <xQueueGenericSend+0x200>)
 800b228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	e772      	b.n	800b11e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b23a:	f000 fbed 	bl	800ba18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b23e:	f000 ff65 	bl	800c10c <xTaskResumeAll>
 800b242:	e76c      	b.n	800b11e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b246:	f000 fbe7 	bl	800ba18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b24a:	f000 ff5f 	bl	800c10c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b24e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b250:	4618      	mov	r0, r3
 800b252:	3738      	adds	r7, #56	@ 0x38
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b090      	sub	sp, #64	@ 0x40
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10b      	bne.n	800b28c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	e7fd      	b.n	800b288 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d103      	bne.n	800b29a <xQueueGenericSendFromISR+0x3e>
 800b292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <xQueueGenericSendFromISR+0x42>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e000      	b.n	800b2a0 <xQueueGenericSendFromISR+0x44>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	e7fd      	b.n	800b2b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d103      	bne.n	800b2ca <xQueueGenericSendFromISR+0x6e>
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <xQueueGenericSendFromISR+0x72>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e000      	b.n	800b2d0 <xQueueGenericSendFromISR+0x74>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10b      	bne.n	800b2ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d8:	f383 8811 	msr	BASEPRI, r3
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	623b      	str	r3, [r7, #32]
}
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	e7fd      	b.n	800b2e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2ec:	f002 fd4c 	bl	800dd88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2f0:	f3ef 8211 	mrs	r2, BASEPRI
 800b2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	61fa      	str	r2, [r7, #28]
 800b306:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b308:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b30a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b314:	429a      	cmp	r2, r3
 800b316:	d302      	bcc.n	800b31e <xQueueGenericSendFromISR+0xc2>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d12f      	bne.n	800b37e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b324:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	68b9      	ldr	r1, [r7, #8]
 800b332:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b334:	f000 fae0 	bl	800b8f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b338:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b33c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b340:	d112      	bne.n	800b368 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b346:	2b00      	cmp	r3, #0
 800b348:	d016      	beq.n	800b378 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34c:	3324      	adds	r3, #36	@ 0x24
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 f93a 	bl	800c5c8 <xTaskRemoveFromEventList>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00e      	beq.n	800b378 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	e007      	b.n	800b378 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b368:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b36c:	3301      	adds	r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	b25a      	sxtb	r2, r3
 800b372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b378:	2301      	movs	r3, #1
 800b37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b37c:	e001      	b.n	800b382 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b384:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b38c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b390:	4618      	mov	r0, r3
 800b392:	3740      	adds	r7, #64	@ 0x40
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08c      	sub	sp, #48	@ 0x30
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10b      	bne.n	800b3ca <xQueueReceive+0x32>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	623b      	str	r3, [r7, #32]
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop
 800b3c8:	e7fd      	b.n	800b3c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d103      	bne.n	800b3d8 <xQueueReceive+0x40>
 800b3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <xQueueReceive+0x44>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e000      	b.n	800b3de <xQueueReceive+0x46>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10b      	bne.n	800b3fa <xQueueReceive+0x62>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	61fb      	str	r3, [r7, #28]
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	e7fd      	b.n	800b3f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3fa:	f001 fb37 	bl	800ca6c <xTaskGetSchedulerState>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <xQueueReceive+0x72>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <xQueueReceive+0x76>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <xQueueReceive+0x78>
 800b40e:	2300      	movs	r3, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10b      	bne.n	800b42c <xQueueReceive+0x94>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	61bb      	str	r3, [r7, #24]
}
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	e7fd      	b.n	800b428 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b42c:	f002 fbcc 	bl	800dbc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b434:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d01f      	beq.n	800b47c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b43c:	68b9      	ldr	r1, [r7, #8]
 800b43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b440:	f000 fac4 	bl	800b9cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	1e5a      	subs	r2, r3, #1
 800b448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00f      	beq.n	800b474 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b456:	3310      	adds	r3, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	f001 f8b5 	bl	800c5c8 <xTaskRemoveFromEventList>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b464:	4b3c      	ldr	r3, [pc, #240]	@ (800b558 <xQueueReceive+0x1c0>)
 800b466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b474:	f002 fbda 	bl	800dc2c <vPortExitCritical>
				return pdPASS;
 800b478:	2301      	movs	r3, #1
 800b47a:	e069      	b.n	800b550 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d103      	bne.n	800b48a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b482:	f002 fbd3 	bl	800dc2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b486:	2300      	movs	r3, #0
 800b488:	e062      	b.n	800b550 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d106      	bne.n	800b49e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b490:	f107 0310 	add.w	r3, r7, #16
 800b494:	4618      	mov	r0, r3
 800b496:	f001 f987 	bl	800c7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b49a:	2301      	movs	r3, #1
 800b49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b49e:	f002 fbc5 	bl	800dc2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4a2:	f000 fe25 	bl	800c0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4a6:	f002 fb8f 	bl	800dbc8 <vPortEnterCritical>
 800b4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4b0:	b25b      	sxtb	r3, r3
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4b6:	d103      	bne.n	800b4c0 <xQueueReceive+0x128>
 800b4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4c6:	b25b      	sxtb	r3, r3
 800b4c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4cc:	d103      	bne.n	800b4d6 <xQueueReceive+0x13e>
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4d6:	f002 fba9 	bl	800dc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4da:	1d3a      	adds	r2, r7, #4
 800b4dc:	f107 0310 	add.w	r3, r7, #16
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f001 f976 	bl	800c7d4 <xTaskCheckForTimeOut>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d123      	bne.n	800b536 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4f0:	f000 fae4 	bl	800babc <prvIsQueueEmpty>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d017      	beq.n	800b52a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fc:	3324      	adds	r3, #36	@ 0x24
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	4611      	mov	r1, r2
 800b502:	4618      	mov	r0, r3
 800b504:	f000 ffd0 	bl	800c4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b50a:	f000 fa85 	bl	800ba18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b50e:	f000 fdfd 	bl	800c10c <xTaskResumeAll>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d189      	bne.n	800b42c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b518:	4b0f      	ldr	r3, [pc, #60]	@ (800b558 <xQueueReceive+0x1c0>)
 800b51a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b51e:	601a      	str	r2, [r3, #0]
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	e780      	b.n	800b42c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b52a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b52c:	f000 fa74 	bl	800ba18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b530:	f000 fdec 	bl	800c10c <xTaskResumeAll>
 800b534:	e77a      	b.n	800b42c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b538:	f000 fa6e 	bl	800ba18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b53c:	f000 fde6 	bl	800c10c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b542:	f000 fabb 	bl	800babc <prvIsQueueEmpty>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f43f af6f 	beq.w	800b42c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b54e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b550:	4618      	mov	r0, r3
 800b552:	3730      	adds	r7, #48	@ 0x30
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08e      	sub	sp, #56	@ 0x38
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b566:	2300      	movs	r3, #0
 800b568:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b56e:	2300      	movs	r3, #0
 800b570:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10b      	bne.n	800b590 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	623b      	str	r3, [r7, #32]
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	e7fd      	b.n	800b58c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00b      	beq.n	800b5b0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	61fb      	str	r3, [r7, #28]
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	e7fd      	b.n	800b5ac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5b0:	f001 fa5c 	bl	800ca6c <xTaskGetSchedulerState>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d102      	bne.n	800b5c0 <xQueueSemaphoreTake+0x64>
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <xQueueSemaphoreTake+0x68>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e000      	b.n	800b5c6 <xQueueSemaphoreTake+0x6a>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10b      	bne.n	800b5e2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	61bb      	str	r3, [r7, #24]
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	e7fd      	b.n	800b5de <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5e2:	f002 faf1 	bl	800dbc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d024      	beq.n	800b63c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f4:	1e5a      	subs	r2, r3, #1
 800b5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b602:	f001 fbc5 	bl	800cd90 <pvTaskIncrementMutexHeldCount>
 800b606:	4602      	mov	r2, r0
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00f      	beq.n	800b634 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	3310      	adds	r3, #16
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 ffd5 	bl	800c5c8 <xTaskRemoveFromEventList>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d007      	beq.n	800b634 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b624:	4b54      	ldr	r3, [pc, #336]	@ (800b778 <xQueueSemaphoreTake+0x21c>)
 800b626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b634:	f002 fafa 	bl	800dc2c <vPortExitCritical>
				return pdPASS;
 800b638:	2301      	movs	r3, #1
 800b63a:	e098      	b.n	800b76e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d112      	bne.n	800b668 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	617b      	str	r3, [r7, #20]
}
 800b65a:	bf00      	nop
 800b65c:	bf00      	nop
 800b65e:	e7fd      	b.n	800b65c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b660:	f002 fae4 	bl	800dc2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b664:	2300      	movs	r3, #0
 800b666:	e082      	b.n	800b76e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b66e:	f107 030c 	add.w	r3, r7, #12
 800b672:	4618      	mov	r0, r3
 800b674:	f001 f898 	bl	800c7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b678:	2301      	movs	r3, #1
 800b67a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b67c:	f002 fad6 	bl	800dc2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b680:	f000 fd36 	bl	800c0f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b684:	f002 faa0 	bl	800dbc8 <vPortEnterCritical>
 800b688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b68e:	b25b      	sxtb	r3, r3
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b694:	d103      	bne.n	800b69e <xQueueSemaphoreTake+0x142>
 800b696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6a4:	b25b      	sxtb	r3, r3
 800b6a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6aa:	d103      	bne.n	800b6b4 <xQueueSemaphoreTake+0x158>
 800b6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6b4:	f002 faba 	bl	800dc2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6b8:	463a      	mov	r2, r7
 800b6ba:	f107 030c 	add.w	r3, r7, #12
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 f887 	bl	800c7d4 <xTaskCheckForTimeOut>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d132      	bne.n	800b732 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b6ce:	f000 f9f5 	bl	800babc <prvIsQueueEmpty>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d026      	beq.n	800b726 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d109      	bne.n	800b6f4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b6e0:	f002 fa72 	bl	800dbc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f9dd 	bl	800caa8 <xTaskPriorityInherit>
 800b6ee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b6f0:	f002 fa9c 	bl	800dc2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f6:	3324      	adds	r3, #36	@ 0x24
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fed3 	bl	800c4a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b704:	f000 f988 	bl	800ba18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b708:	f000 fd00 	bl	800c10c <xTaskResumeAll>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f47f af67 	bne.w	800b5e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b714:	4b18      	ldr	r3, [pc, #96]	@ (800b778 <xQueueSemaphoreTake+0x21c>)
 800b716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	f3bf 8f6f 	isb	sy
 800b724:	e75d      	b.n	800b5e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b728:	f000 f976 	bl	800ba18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b72c:	f000 fcee 	bl	800c10c <xTaskResumeAll>
 800b730:	e757      	b.n	800b5e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b734:	f000 f970 	bl	800ba18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b738:	f000 fce8 	bl	800c10c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b73c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b73e:	f000 f9bd 	bl	800babc <prvIsQueueEmpty>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	f43f af4c 	beq.w	800b5e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00d      	beq.n	800b76c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b750:	f002 fa3a 	bl	800dbc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b756:	f000 f8b7 	bl	800b8c8 <prvGetDisinheritPriorityAfterTimeout>
 800b75a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b762:	4618      	mov	r0, r3
 800b764:	f001 fa78 	bl	800cc58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b768:	f002 fa60 	bl	800dc2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b76c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3738      	adds	r7, #56	@ 0x38
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	e000ed04 	.word	0xe000ed04

0800b77c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08e      	sub	sp, #56	@ 0x38
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10b      	bne.n	800b7aa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	623b      	str	r3, [r7, #32]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d103      	bne.n	800b7b8 <xQueueReceiveFromISR+0x3c>
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <xQueueReceiveFromISR+0x40>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e000      	b.n	800b7be <xQueueReceiveFromISR+0x42>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10b      	bne.n	800b7da <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	61fb      	str	r3, [r7, #28]
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	e7fd      	b.n	800b7d6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7da:	f002 fad5 	bl	800dd88 <vPortValidateInterruptPriority>
	__asm volatile
 800b7de:	f3ef 8211 	mrs	r2, BASEPRI
 800b7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	61ba      	str	r2, [r7, #24]
 800b7f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b7f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b802:	2b00      	cmp	r3, #0
 800b804:	d02f      	beq.n	800b866 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b80c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b810:	68b9      	ldr	r1, [r7, #8]
 800b812:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b814:	f000 f8da 	bl	800b9cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81a:	1e5a      	subs	r2, r3, #1
 800b81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b820:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b828:	d112      	bne.n	800b850 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d016      	beq.n	800b860 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b834:	3310      	adds	r3, #16
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fec6 	bl	800c5c8 <xTaskRemoveFromEventList>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00e      	beq.n	800b860 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	e007      	b.n	800b860 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b854:	3301      	adds	r3, #1
 800b856:	b2db      	uxtb	r3, r3
 800b858:	b25a      	sxtb	r2, r3
 800b85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b85c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	637b      	str	r3, [r7, #52]	@ 0x34
 800b864:	e001      	b.n	800b86a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b866:	2300      	movs	r3, #0
 800b868:	637b      	str	r3, [r7, #52]	@ 0x34
 800b86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b86c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f383 8811 	msr	BASEPRI, r3
}
 800b874:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3738      	adds	r7, #56	@ 0x38
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10b      	bne.n	800b8aa <vQueueDelete+0x2a>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	60bb      	str	r3, [r7, #8]
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	e7fd      	b.n	800b8a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f000 f95e 	bl	800bb6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d102      	bne.n	800b8c0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f002 fb74 	bl	800dfa8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b8c0:	bf00      	nop
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d006      	beq.n	800b8e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e001      	b.n	800b8ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b904:	2300      	movs	r3, #0
 800b906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b90c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10d      	bne.n	800b932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d14d      	bne.n	800b9ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	4618      	mov	r0, r3
 800b924:	f001 f928 	bl	800cb78 <xTaskPriorityDisinherit>
 800b928:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	609a      	str	r2, [r3, #8]
 800b930:	e043      	b.n	800b9ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d119      	bne.n	800b96c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6858      	ldr	r0, [r3, #4]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b940:	461a      	mov	r2, r3
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	f012 fb6d 	bl	801e022 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b950:	441a      	add	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d32b      	bcc.n	800b9ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	605a      	str	r2, [r3, #4]
 800b96a:	e026      	b.n	800b9ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68d8      	ldr	r0, [r3, #12]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b974:	461a      	mov	r2, r3
 800b976:	68b9      	ldr	r1, [r7, #8]
 800b978:	f012 fb53 	bl	801e022 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	68da      	ldr	r2, [r3, #12]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b984:	425b      	negs	r3, r3
 800b986:	441a      	add	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d207      	bcs.n	800b9a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	689a      	ldr	r2, [r3, #8]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a0:	425b      	negs	r3, r3
 800b9a2:	441a      	add	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d105      	bne.n	800b9ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b9c2:	697b      	ldr	r3, [r7, #20]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d018      	beq.n	800ba10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e6:	441a      	add	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d303      	bcc.n	800ba00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68d9      	ldr	r1, [r3, #12]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba08:	461a      	mov	r2, r3
 800ba0a:	6838      	ldr	r0, [r7, #0]
 800ba0c:	f012 fb09 	bl	801e022 <memcpy>
	}
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba20:	f002 f8d2 	bl	800dbc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba2c:	e011      	b.n	800ba52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d012      	beq.n	800ba5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3324      	adds	r3, #36	@ 0x24
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 fdc4 	bl	800c5c8 <xTaskRemoveFromEventList>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba46:	f000 ff29 	bl	800c89c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dce9      	bgt.n	800ba2e <prvUnlockQueue+0x16>
 800ba5a:	e000      	b.n	800ba5e <prvUnlockQueue+0x46>
					break;
 800ba5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	22ff      	movs	r2, #255	@ 0xff
 800ba62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ba66:	f002 f8e1 	bl	800dc2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba6a:	f002 f8ad 	bl	800dbc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba76:	e011      	b.n	800ba9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d012      	beq.n	800baa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3310      	adds	r3, #16
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 fd9f 	bl	800c5c8 <xTaskRemoveFromEventList>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba90:	f000 ff04 	bl	800c89c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	dce9      	bgt.n	800ba78 <prvUnlockQueue+0x60>
 800baa4:	e000      	b.n	800baa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800baa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	22ff      	movs	r2, #255	@ 0xff
 800baac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bab0:	f002 f8bc 	bl	800dc2c <vPortExitCritical>
}
 800bab4:	bf00      	nop
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bac4:	f002 f880 	bl	800dbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	e001      	b.n	800bada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bada:	f002 f8a7 	bl	800dc2c <vPortExitCritical>

	return xReturn;
 800bade:	68fb      	ldr	r3, [r7, #12]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800baf0:	f002 f86a 	bl	800dbc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d102      	bne.n	800bb06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb00:	2301      	movs	r3, #1
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e001      	b.n	800bb0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb0a:	f002 f88f 	bl	800dc2c <vPortExitCritical>

	return xReturn;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	e014      	b.n	800bb52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb28:	4a0f      	ldr	r2, [pc, #60]	@ (800bb68 <vQueueAddToRegistry+0x50>)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10b      	bne.n	800bb4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb34:	490c      	ldr	r1, [pc, #48]	@ (800bb68 <vQueueAddToRegistry+0x50>)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb3e:	4a0a      	ldr	r2, [pc, #40]	@ (800bb68 <vQueueAddToRegistry+0x50>)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	00db      	lsls	r3, r3, #3
 800bb44:	4413      	add	r3, r2
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb4a:	e006      	b.n	800bb5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b07      	cmp	r3, #7
 800bb56:	d9e7      	bls.n	800bb28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb58:	bf00      	nop
 800bb5a:	bf00      	nop
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	200103bc 	.word	0x200103bc

0800bb6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb74:	2300      	movs	r3, #0
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	e016      	b.n	800bba8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bb7a:	4a10      	ldr	r2, [pc, #64]	@ (800bbbc <vQueueUnregisterQueue+0x50>)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	4413      	add	r3, r2
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d10b      	bne.n	800bba2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bb8a:	4a0c      	ldr	r2, [pc, #48]	@ (800bbbc <vQueueUnregisterQueue+0x50>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2100      	movs	r1, #0
 800bb90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bb94:	4a09      	ldr	r2, [pc, #36]	@ (800bbbc <vQueueUnregisterQueue+0x50>)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	00db      	lsls	r3, r3, #3
 800bb9a:	4413      	add	r3, r2
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	605a      	str	r2, [r3, #4]
				break;
 800bba0:	e006      	b.n	800bbb0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b07      	cmp	r3, #7
 800bbac:	d9e5      	bls.n	800bb7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bbae:	bf00      	nop
 800bbb0:	bf00      	nop
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	200103bc 	.word	0x200103bc

0800bbc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bbd0:	f001 fffa 	bl	800dbc8 <vPortEnterCritical>
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbda:	b25b      	sxtb	r3, r3
 800bbdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbe0:	d103      	bne.n	800bbea <vQueueWaitForMessageRestricted+0x2a>
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbf0:	b25b      	sxtb	r3, r3
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbf6:	d103      	bne.n	800bc00 <vQueueWaitForMessageRestricted+0x40>
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc00:	f002 f814 	bl	800dc2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d106      	bne.n	800bc1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	3324      	adds	r3, #36	@ 0x24
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 fcab 	bl	800c570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc1a:	6978      	ldr	r0, [r7, #20]
 800bc1c:	f7ff fefc 	bl	800ba18 <prvUnlockQueue>
	}
 800bc20:	bf00      	nop
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08e      	sub	sp, #56	@ 0x38
 800bc2c:	af04      	add	r7, sp, #16
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10b      	bne.n	800bc54 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	623b      	str	r3, [r7, #32]
}
 800bc4e:	bf00      	nop
 800bc50:	bf00      	nop
 800bc52:	e7fd      	b.n	800bc50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10b      	bne.n	800bc72 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	61fb      	str	r3, [r7, #28]
}
 800bc6c:	bf00      	nop
 800bc6e:	bf00      	nop
 800bc70:	e7fd      	b.n	800bc6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc72:	23a8      	movs	r3, #168	@ 0xa8
 800bc74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	2ba8      	cmp	r3, #168	@ 0xa8
 800bc7a:	d00b      	beq.n	800bc94 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	61bb      	str	r3, [r7, #24]
}
 800bc8e:	bf00      	nop
 800bc90:	bf00      	nop
 800bc92:	e7fd      	b.n	800bc90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01e      	beq.n	800bcda <xTaskCreateStatic+0xb2>
 800bc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d01b      	beq.n	800bcda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcae:	2202      	movs	r2, #2
 800bcb0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9303      	str	r3, [sp, #12]
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	9302      	str	r3, [sp, #8]
 800bcbc:	f107 0314 	add.w	r3, r7, #20
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	68b9      	ldr	r1, [r7, #8]
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 f851 	bl	800bd74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcd4:	f000 f8f6 	bl	800bec4 <prvAddNewTaskToReadyList>
 800bcd8:	e001      	b.n	800bcde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bcde:	697b      	ldr	r3, [r7, #20]
	}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3728      	adds	r7, #40	@ 0x28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08c      	sub	sp, #48	@ 0x30
 800bcec:	af04      	add	r7, sp, #16
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcf8:	88fb      	ldrh	r3, [r7, #6]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f002 f885 	bl	800de0c <pvPortMalloc>
 800bd02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00e      	beq.n	800bd28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd0a:	20a8      	movs	r0, #168	@ 0xa8
 800bd0c:	f002 f87e 	bl	800de0c <pvPortMalloc>
 800bd10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd1e:	e005      	b.n	800bd2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd20:	6978      	ldr	r0, [r7, #20]
 800bd22:	f002 f941 	bl	800dfa8 <vPortFree>
 800bd26:	e001      	b.n	800bd2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d017      	beq.n	800bd62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd3a:	88fa      	ldrh	r2, [r7, #6]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	9302      	str	r3, [sp, #8]
 800bd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd46:	9301      	str	r3, [sp, #4]
 800bd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f80f 	bl	800bd74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd56:	69f8      	ldr	r0, [r7, #28]
 800bd58:	f000 f8b4 	bl	800bec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	61bb      	str	r3, [r7, #24]
 800bd60:	e002      	b.n	800bd68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd68:	69bb      	ldr	r3, [r7, #24]
	}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3720      	adds	r7, #32
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	21a5      	movs	r1, #165	@ 0xa5
 800bd8e:	f012 f817 	bl	801ddc0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	f003 0307 	and.w	r3, r3, #7
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00b      	beq.n	800bdce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	617b      	str	r3, [r7, #20]
}
 800bdc8:	bf00      	nop
 800bdca:	bf00      	nop
 800bdcc:	e7fd      	b.n	800bdca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d01f      	beq.n	800be14 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
 800bdd8:	e012      	b.n	800be00 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	4413      	add	r3, r2
 800bde0:	7819      	ldrb	r1, [r3, #0]
 800bde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	4413      	add	r3, r2
 800bde8:	3334      	adds	r3, #52	@ 0x34
 800bdea:	460a      	mov	r2, r1
 800bdec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d006      	beq.n	800be08 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	2b0f      	cmp	r3, #15
 800be04:	d9e9      	bls.n	800bdda <prvInitialiseNewTask+0x66>
 800be06:	e000      	b.n	800be0a <prvInitialiseNewTask+0x96>
			{
				break;
 800be08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be12:	e003      	b.n	800be1c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1e:	2b37      	cmp	r3, #55	@ 0x37
 800be20:	d901      	bls.n	800be26 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be22:	2337      	movs	r3, #55	@ 0x37
 800be24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be30:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be34:	2200      	movs	r2, #0
 800be36:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3a:	3304      	adds	r3, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe fec3 	bl	800abc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	3318      	adds	r3, #24
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe febe 	bl	800abc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be64:	2200      	movs	r2, #0
 800be66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be74:	3354      	adds	r3, #84	@ 0x54
 800be76:	224c      	movs	r2, #76	@ 0x4c
 800be78:	2100      	movs	r1, #0
 800be7a:	4618      	mov	r0, r3
 800be7c:	f011 ffa0 	bl	801ddc0 <memset>
 800be80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be82:	4a0d      	ldr	r2, [pc, #52]	@ (800beb8 <prvInitialiseNewTask+0x144>)
 800be84:	659a      	str	r2, [r3, #88]	@ 0x58
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	4a0c      	ldr	r2, [pc, #48]	@ (800bebc <prvInitialiseNewTask+0x148>)
 800be8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800be8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bec0 <prvInitialiseNewTask+0x14c>)
 800be90:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	68f9      	ldr	r1, [r7, #12]
 800be96:	69b8      	ldr	r0, [r7, #24]
 800be98:	f001 fd64 	bl	800d964 <pxPortInitialiseStack>
 800be9c:	4602      	mov	r2, r0
 800be9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beae:	bf00      	nop
 800beb0:	3720      	adds	r7, #32
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	2001f7e4 	.word	0x2001f7e4
 800bebc:	2001f84c 	.word	0x2001f84c
 800bec0:	2001f8b4 	.word	0x2001f8b4

0800bec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800becc:	f001 fe7c 	bl	800dbc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bed0:	4b2d      	ldr	r3, [pc, #180]	@ (800bf88 <prvAddNewTaskToReadyList+0xc4>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3301      	adds	r3, #1
 800bed6:	4a2c      	ldr	r2, [pc, #176]	@ (800bf88 <prvAddNewTaskToReadyList+0xc4>)
 800bed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800beda:	4b2c      	ldr	r3, [pc, #176]	@ (800bf8c <prvAddNewTaskToReadyList+0xc8>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d109      	bne.n	800bef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bee2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf8c <prvAddNewTaskToReadyList+0xc8>)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bee8:	4b27      	ldr	r3, [pc, #156]	@ (800bf88 <prvAddNewTaskToReadyList+0xc4>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d110      	bne.n	800bf12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bef0:	f000 fcf8 	bl	800c8e4 <prvInitialiseTaskLists>
 800bef4:	e00d      	b.n	800bf12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bef6:	4b26      	ldr	r3, [pc, #152]	@ (800bf90 <prvAddNewTaskToReadyList+0xcc>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800befe:	4b23      	ldr	r3, [pc, #140]	@ (800bf8c <prvAddNewTaskToReadyList+0xc8>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d802      	bhi.n	800bf12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf0c:	4a1f      	ldr	r2, [pc, #124]	@ (800bf8c <prvAddNewTaskToReadyList+0xc8>)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf12:	4b20      	ldr	r3, [pc, #128]	@ (800bf94 <prvAddNewTaskToReadyList+0xd0>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3301      	adds	r3, #1
 800bf18:	4a1e      	ldr	r2, [pc, #120]	@ (800bf94 <prvAddNewTaskToReadyList+0xd0>)
 800bf1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf1c:	4b1d      	ldr	r3, [pc, #116]	@ (800bf94 <prvAddNewTaskToReadyList+0xd0>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf28:	4b1b      	ldr	r3, [pc, #108]	@ (800bf98 <prvAddNewTaskToReadyList+0xd4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d903      	bls.n	800bf38 <prvAddNewTaskToReadyList+0x74>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf34:	4a18      	ldr	r2, [pc, #96]	@ (800bf98 <prvAddNewTaskToReadyList+0xd4>)
 800bf36:	6013      	str	r3, [r2, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4a15      	ldr	r2, [pc, #84]	@ (800bf9c <prvAddNewTaskToReadyList+0xd8>)
 800bf46:	441a      	add	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4610      	mov	r0, r2
 800bf50:	f7fe fe47 	bl	800abe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf54:	f001 fe6a 	bl	800dc2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf58:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <prvAddNewTaskToReadyList+0xcc>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00e      	beq.n	800bf7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf60:	4b0a      	ldr	r3, [pc, #40]	@ (800bf8c <prvAddNewTaskToReadyList+0xc8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d207      	bcs.n	800bf7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa0 <prvAddNewTaskToReadyList+0xdc>)
 800bf70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	200108d0 	.word	0x200108d0
 800bf8c:	200103fc 	.word	0x200103fc
 800bf90:	200108dc 	.word	0x200108dc
 800bf94:	200108ec 	.word	0x200108ec
 800bf98:	200108d8 	.word	0x200108d8
 800bf9c:	20010400 	.word	0x20010400
 800bfa0:	e000ed04 	.word	0xe000ed04

0800bfa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d018      	beq.n	800bfe8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bfb6:	4b14      	ldr	r3, [pc, #80]	@ (800c008 <vTaskDelay+0x64>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00b      	beq.n	800bfd6 <vTaskDelay+0x32>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	60bb      	str	r3, [r7, #8]
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	e7fd      	b.n	800bfd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bfd6:	f000 f88b 	bl	800c0f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bfda:	2100      	movs	r1, #0
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 f8f3 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bfe2:	f000 f893 	bl	800c10c <xTaskResumeAll>
 800bfe6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d107      	bne.n	800bffe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bfee:	4b07      	ldr	r3, [pc, #28]	@ (800c00c <vTaskDelay+0x68>)
 800bff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bff4:	601a      	str	r2, [r3, #0]
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bffe:	bf00      	nop
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200108f8 	.word	0x200108f8
 800c00c:	e000ed04 	.word	0xe000ed04

0800c010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08a      	sub	sp, #40	@ 0x28
 800c014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c016:	2300      	movs	r3, #0
 800c018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c01e:	463a      	mov	r2, r7
 800c020:	1d39      	adds	r1, r7, #4
 800c022:	f107 0308 	add.w	r3, r7, #8
 800c026:	4618      	mov	r0, r3
 800c028:	f7fe fb84 	bl	800a734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	9202      	str	r2, [sp, #8]
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	2300      	movs	r3, #0
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	2300      	movs	r3, #0
 800c03c:	460a      	mov	r2, r1
 800c03e:	4924      	ldr	r1, [pc, #144]	@ (800c0d0 <vTaskStartScheduler+0xc0>)
 800c040:	4824      	ldr	r0, [pc, #144]	@ (800c0d4 <vTaskStartScheduler+0xc4>)
 800c042:	f7ff fdf1 	bl	800bc28 <xTaskCreateStatic>
 800c046:	4603      	mov	r3, r0
 800c048:	4a23      	ldr	r2, [pc, #140]	@ (800c0d8 <vTaskStartScheduler+0xc8>)
 800c04a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c04c:	4b22      	ldr	r3, [pc, #136]	@ (800c0d8 <vTaskStartScheduler+0xc8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c054:	2301      	movs	r3, #1
 800c056:	617b      	str	r3, [r7, #20]
 800c058:	e001      	b.n	800c05e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d102      	bne.n	800c06a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c064:	f001 f904 	bl	800d270 <xTimerCreateTimerTask>
 800c068:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d11b      	bne.n	800c0a8 <vTaskStartScheduler+0x98>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	613b      	str	r3, [r7, #16]
}
 800c082:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c084:	4b15      	ldr	r3, [pc, #84]	@ (800c0dc <vTaskStartScheduler+0xcc>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3354      	adds	r3, #84	@ 0x54
 800c08a:	4a15      	ldr	r2, [pc, #84]	@ (800c0e0 <vTaskStartScheduler+0xd0>)
 800c08c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c08e:	4b15      	ldr	r3, [pc, #84]	@ (800c0e4 <vTaskStartScheduler+0xd4>)
 800c090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c094:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c096:	4b14      	ldr	r3, [pc, #80]	@ (800c0e8 <vTaskStartScheduler+0xd8>)
 800c098:	2201      	movs	r2, #1
 800c09a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c09c:	4b13      	ldr	r3, [pc, #76]	@ (800c0ec <vTaskStartScheduler+0xdc>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0a2:	f001 fced 	bl	800da80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0a6:	e00f      	b.n	800c0c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0ae:	d10b      	bne.n	800c0c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	60fb      	str	r3, [r7, #12]
}
 800c0c2:	bf00      	nop
 800c0c4:	bf00      	nop
 800c0c6:	e7fd      	b.n	800c0c4 <vTaskStartScheduler+0xb4>
}
 800c0c8:	bf00      	nop
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	0802018c 	.word	0x0802018c
 800c0d4:	0800c8b5 	.word	0x0800c8b5
 800c0d8:	200108f4 	.word	0x200108f4
 800c0dc:	200103fc 	.word	0x200103fc
 800c0e0:	20001bf4 	.word	0x20001bf4
 800c0e4:	200108f0 	.word	0x200108f0
 800c0e8:	200108dc 	.word	0x200108dc
 800c0ec:	200108d4 	.word	0x200108d4

0800c0f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c0f4:	4b04      	ldr	r3, [pc, #16]	@ (800c108 <vTaskSuspendAll+0x18>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	4a03      	ldr	r2, [pc, #12]	@ (800c108 <vTaskSuspendAll+0x18>)
 800c0fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c0fe:	bf00      	nop
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	200108f8 	.word	0x200108f8

0800c10c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c116:	2300      	movs	r3, #0
 800c118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c11a:	4b42      	ldr	r3, [pc, #264]	@ (800c224 <xTaskResumeAll+0x118>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10b      	bne.n	800c13a <xTaskResumeAll+0x2e>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	603b      	str	r3, [r7, #0]
}
 800c134:	bf00      	nop
 800c136:	bf00      	nop
 800c138:	e7fd      	b.n	800c136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c13a:	f001 fd45 	bl	800dbc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c13e:	4b39      	ldr	r3, [pc, #228]	@ (800c224 <xTaskResumeAll+0x118>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3b01      	subs	r3, #1
 800c144:	4a37      	ldr	r2, [pc, #220]	@ (800c224 <xTaskResumeAll+0x118>)
 800c146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c148:	4b36      	ldr	r3, [pc, #216]	@ (800c224 <xTaskResumeAll+0x118>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d162      	bne.n	800c216 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c150:	4b35      	ldr	r3, [pc, #212]	@ (800c228 <xTaskResumeAll+0x11c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d05e      	beq.n	800c216 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c158:	e02f      	b.n	800c1ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c15a:	4b34      	ldr	r3, [pc, #208]	@ (800c22c <xTaskResumeAll+0x120>)
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3318      	adds	r3, #24
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fd98 	bl	800ac9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3304      	adds	r3, #4
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fd93 	bl	800ac9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c17a:	4b2d      	ldr	r3, [pc, #180]	@ (800c230 <xTaskResumeAll+0x124>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d903      	bls.n	800c18a <xTaskResumeAll+0x7e>
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c186:	4a2a      	ldr	r2, [pc, #168]	@ (800c230 <xTaskResumeAll+0x124>)
 800c188:	6013      	str	r3, [r2, #0]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4a27      	ldr	r2, [pc, #156]	@ (800c234 <xTaskResumeAll+0x128>)
 800c198:	441a      	add	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	3304      	adds	r3, #4
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f7fe fd1e 	bl	800abe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1aa:	4b23      	ldr	r3, [pc, #140]	@ (800c238 <xTaskResumeAll+0x12c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d302      	bcc.n	800c1ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c1b4:	4b21      	ldr	r3, [pc, #132]	@ (800c23c <xTaskResumeAll+0x130>)
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800c22c <xTaskResumeAll+0x120>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1cb      	bne.n	800c15a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c1c8:	f000 fc30 	bl	800ca2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c1cc:	4b1c      	ldr	r3, [pc, #112]	@ (800c240 <xTaskResumeAll+0x134>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d010      	beq.n	800c1fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c1d8:	f000 f846 	bl	800c268 <xTaskIncrementTick>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c1e2:	4b16      	ldr	r3, [pc, #88]	@ (800c23c <xTaskResumeAll+0x130>)
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1f1      	bne.n	800c1d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c1f4:	4b12      	ldr	r3, [pc, #72]	@ (800c240 <xTaskResumeAll+0x134>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c1fa:	4b10      	ldr	r3, [pc, #64]	@ (800c23c <xTaskResumeAll+0x130>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c202:	2301      	movs	r3, #1
 800c204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c206:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <xTaskResumeAll+0x138>)
 800c208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c216:	f001 fd09 	bl	800dc2c <vPortExitCritical>

	return xAlreadyYielded;
 800c21a:	68bb      	ldr	r3, [r7, #8]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	200108f8 	.word	0x200108f8
 800c228:	200108d0 	.word	0x200108d0
 800c22c:	20010890 	.word	0x20010890
 800c230:	200108d8 	.word	0x200108d8
 800c234:	20010400 	.word	0x20010400
 800c238:	200103fc 	.word	0x200103fc
 800c23c:	200108e4 	.word	0x200108e4
 800c240:	200108e0 	.word	0x200108e0
 800c244:	e000ed04 	.word	0xe000ed04

0800c248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c24e:	4b05      	ldr	r3, [pc, #20]	@ (800c264 <xTaskGetTickCount+0x1c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c254:	687b      	ldr	r3, [r7, #4]
}
 800c256:	4618      	mov	r0, r3
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	200108d4 	.word	0x200108d4

0800c268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c26e:	2300      	movs	r3, #0
 800c270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c272:	4b4f      	ldr	r3, [pc, #316]	@ (800c3b0 <xTaskIncrementTick+0x148>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	f040 8090 	bne.w	800c39c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c27c:	4b4d      	ldr	r3, [pc, #308]	@ (800c3b4 <xTaskIncrementTick+0x14c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c284:	4a4b      	ldr	r2, [pc, #300]	@ (800c3b4 <xTaskIncrementTick+0x14c>)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d121      	bne.n	800c2d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c290:	4b49      	ldr	r3, [pc, #292]	@ (800c3b8 <xTaskIncrementTick+0x150>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	603b      	str	r3, [r7, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	e7fd      	b.n	800c2ae <xTaskIncrementTick+0x46>
 800c2b2:	4b41      	ldr	r3, [pc, #260]	@ (800c3b8 <xTaskIncrementTick+0x150>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	4b40      	ldr	r3, [pc, #256]	@ (800c3bc <xTaskIncrementTick+0x154>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a3e      	ldr	r2, [pc, #248]	@ (800c3b8 <xTaskIncrementTick+0x150>)
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	4a3e      	ldr	r2, [pc, #248]	@ (800c3bc <xTaskIncrementTick+0x154>)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	4b3e      	ldr	r3, [pc, #248]	@ (800c3c0 <xTaskIncrementTick+0x158>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	4a3c      	ldr	r2, [pc, #240]	@ (800c3c0 <xTaskIncrementTick+0x158>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	f000 fbac 	bl	800ca2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c2d4:	4b3b      	ldr	r3, [pc, #236]	@ (800c3c4 <xTaskIncrementTick+0x15c>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d349      	bcc.n	800c372 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2de:	4b36      	ldr	r3, [pc, #216]	@ (800c3b8 <xTaskIncrementTick+0x150>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d104      	bne.n	800c2f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2e8:	4b36      	ldr	r3, [pc, #216]	@ (800c3c4 <xTaskIncrementTick+0x15c>)
 800c2ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2ee:	601a      	str	r2, [r3, #0]
					break;
 800c2f0:	e03f      	b.n	800c372 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f2:	4b31      	ldr	r3, [pc, #196]	@ (800c3b8 <xTaskIncrementTick+0x150>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	429a      	cmp	r2, r3
 800c308:	d203      	bcs.n	800c312 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c30a:	4a2e      	ldr	r2, [pc, #184]	@ (800c3c4 <xTaskIncrementTick+0x15c>)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c310:	e02f      	b.n	800c372 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	3304      	adds	r3, #4
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe fcc0 	bl	800ac9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c320:	2b00      	cmp	r3, #0
 800c322:	d004      	beq.n	800c32e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	3318      	adds	r3, #24
 800c328:	4618      	mov	r0, r3
 800c32a:	f7fe fcb7 	bl	800ac9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c332:	4b25      	ldr	r3, [pc, #148]	@ (800c3c8 <xTaskIncrementTick+0x160>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d903      	bls.n	800c342 <xTaskIncrementTick+0xda>
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33e:	4a22      	ldr	r2, [pc, #136]	@ (800c3c8 <xTaskIncrementTick+0x160>)
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4a1f      	ldr	r2, [pc, #124]	@ (800c3cc <xTaskIncrementTick+0x164>)
 800c350:	441a      	add	r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	3304      	adds	r3, #4
 800c356:	4619      	mov	r1, r3
 800c358:	4610      	mov	r0, r2
 800c35a:	f7fe fc42 	bl	800abe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c362:	4b1b      	ldr	r3, [pc, #108]	@ (800c3d0 <xTaskIncrementTick+0x168>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c368:	429a      	cmp	r2, r3
 800c36a:	d3b8      	bcc.n	800c2de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c36c:	2301      	movs	r3, #1
 800c36e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c370:	e7b5      	b.n	800c2de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c372:	4b17      	ldr	r3, [pc, #92]	@ (800c3d0 <xTaskIncrementTick+0x168>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c378:	4914      	ldr	r1, [pc, #80]	@ (800c3cc <xTaskIncrementTick+0x164>)
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	440b      	add	r3, r1
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d901      	bls.n	800c38e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c38a:	2301      	movs	r3, #1
 800c38c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c38e:	4b11      	ldr	r3, [pc, #68]	@ (800c3d4 <xTaskIncrementTick+0x16c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d007      	beq.n	800c3a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c396:	2301      	movs	r3, #1
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	e004      	b.n	800c3a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c39c:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d8 <xTaskIncrementTick+0x170>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	4a0d      	ldr	r2, [pc, #52]	@ (800c3d8 <xTaskIncrementTick+0x170>)
 800c3a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c3a6:	697b      	ldr	r3, [r7, #20]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200108f8 	.word	0x200108f8
 800c3b4:	200108d4 	.word	0x200108d4
 800c3b8:	20010888 	.word	0x20010888
 800c3bc:	2001088c 	.word	0x2001088c
 800c3c0:	200108e8 	.word	0x200108e8
 800c3c4:	200108f0 	.word	0x200108f0
 800c3c8:	200108d8 	.word	0x200108d8
 800c3cc:	20010400 	.word	0x20010400
 800c3d0:	200103fc 	.word	0x200103fc
 800c3d4:	200108e4 	.word	0x200108e4
 800c3d8:	200108e0 	.word	0x200108e0

0800c3dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3e2:	4b2b      	ldr	r3, [pc, #172]	@ (800c490 <vTaskSwitchContext+0xb4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3ea:	4b2a      	ldr	r3, [pc, #168]	@ (800c494 <vTaskSwitchContext+0xb8>)
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3f0:	e047      	b.n	800c482 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c3f2:	4b28      	ldr	r3, [pc, #160]	@ (800c494 <vTaskSwitchContext+0xb8>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f8:	4b27      	ldr	r3, [pc, #156]	@ (800c498 <vTaskSwitchContext+0xbc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e011      	b.n	800c424 <vTaskSwitchContext+0x48>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d10b      	bne.n	800c41e <vTaskSwitchContext+0x42>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	607b      	str	r3, [r7, #4]
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	e7fd      	b.n	800c41a <vTaskSwitchContext+0x3e>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3b01      	subs	r3, #1
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	491d      	ldr	r1, [pc, #116]	@ (800c49c <vTaskSwitchContext+0xc0>)
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	4613      	mov	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4413      	add	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	440b      	add	r3, r1
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d0e3      	beq.n	800c400 <vTaskSwitchContext+0x24>
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4613      	mov	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4a16      	ldr	r2, [pc, #88]	@ (800c49c <vTaskSwitchContext+0xc0>)
 800c444:	4413      	add	r3, r2
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	605a      	str	r2, [r3, #4]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	3308      	adds	r3, #8
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d104      	bne.n	800c468 <vTaskSwitchContext+0x8c>
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	605a      	str	r2, [r3, #4]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a0 <vTaskSwitchContext+0xc4>)
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	4a09      	ldr	r2, [pc, #36]	@ (800c498 <vTaskSwitchContext+0xbc>)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c478:	4b09      	ldr	r3, [pc, #36]	@ (800c4a0 <vTaskSwitchContext+0xc4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3354      	adds	r3, #84	@ 0x54
 800c47e:	4a09      	ldr	r2, [pc, #36]	@ (800c4a4 <vTaskSwitchContext+0xc8>)
 800c480:	6013      	str	r3, [r2, #0]
}
 800c482:	bf00      	nop
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	200108f8 	.word	0x200108f8
 800c494:	200108e4 	.word	0x200108e4
 800c498:	200108d8 	.word	0x200108d8
 800c49c:	20010400 	.word	0x20010400
 800c4a0:	200103fc 	.word	0x200103fc
 800c4a4:	20001bf4 	.word	0x20001bf4

0800c4a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d10b      	bne.n	800c4d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4bc:	f383 8811 	msr	BASEPRI, r3
 800c4c0:	f3bf 8f6f 	isb	sy
 800c4c4:	f3bf 8f4f 	dsb	sy
 800c4c8:	60fb      	str	r3, [r7, #12]
}
 800c4ca:	bf00      	nop
 800c4cc:	bf00      	nop
 800c4ce:	e7fd      	b.n	800c4cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4d0:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <vTaskPlaceOnEventList+0x48>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3318      	adds	r3, #24
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7fe fba6 	bl	800ac2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4de:	2101      	movs	r1, #1
 800c4e0:	6838      	ldr	r0, [r7, #0]
 800c4e2:	f000 fe71 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
}
 800c4e6:	bf00      	nop
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	200103fc 	.word	0x200103fc

0800c4f4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10b      	bne.n	800c51e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	617b      	str	r3, [r7, #20]
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c51e:	4b12      	ldr	r3, [pc, #72]	@ (800c568 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10b      	bne.n	800c53e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	613b      	str	r3, [r7, #16]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c53e:	4b0b      	ldr	r3, [pc, #44]	@ (800c56c <vTaskPlaceOnUnorderedEventList+0x78>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c548:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c54a:	4b08      	ldr	r3, [pc, #32]	@ (800c56c <vTaskPlaceOnUnorderedEventList+0x78>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3318      	adds	r3, #24
 800c550:	4619      	mov	r1, r3
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7fe fb45 	bl	800abe2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c558:	2101      	movs	r1, #1
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 fe34 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
}
 800c560:	bf00      	nop
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	200108f8 	.word	0x200108f8
 800c56c:	200103fc 	.word	0x200103fc

0800c570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10b      	bne.n	800c59a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	617b      	str	r3, [r7, #20]
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop
 800c598:	e7fd      	b.n	800c596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c59a:	4b0a      	ldr	r3, [pc, #40]	@ (800c5c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3318      	adds	r3, #24
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7fe fb1d 	bl	800abe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c5ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	68b8      	ldr	r0, [r7, #8]
 800c5b8:	f000 fe06 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>
	}
 800c5bc:	bf00      	nop
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	200103fc 	.word	0x200103fc

0800c5c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10b      	bne.n	800c5f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	60fb      	str	r3, [r7, #12]
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	e7fd      	b.n	800c5f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	3318      	adds	r3, #24
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe fb4e 	bl	800ac9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c600:	4b1d      	ldr	r3, [pc, #116]	@ (800c678 <xTaskRemoveFromEventList+0xb0>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d11d      	bne.n	800c644 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3304      	adds	r3, #4
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe fb45 	bl	800ac9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c616:	4b19      	ldr	r3, [pc, #100]	@ (800c67c <xTaskRemoveFromEventList+0xb4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d903      	bls.n	800c626 <xTaskRemoveFromEventList+0x5e>
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c622:	4a16      	ldr	r2, [pc, #88]	@ (800c67c <xTaskRemoveFromEventList+0xb4>)
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4a13      	ldr	r2, [pc, #76]	@ (800c680 <xTaskRemoveFromEventList+0xb8>)
 800c634:	441a      	add	r2, r3
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	3304      	adds	r3, #4
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7fe fad0 	bl	800abe2 <vListInsertEnd>
 800c642:	e005      	b.n	800c650 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	3318      	adds	r3, #24
 800c648:	4619      	mov	r1, r3
 800c64a:	480e      	ldr	r0, [pc, #56]	@ (800c684 <xTaskRemoveFromEventList+0xbc>)
 800c64c:	f7fe fac9 	bl	800abe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c654:	4b0c      	ldr	r3, [pc, #48]	@ (800c688 <xTaskRemoveFromEventList+0xc0>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d905      	bls.n	800c66a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c65e:	2301      	movs	r3, #1
 800c660:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c662:	4b0a      	ldr	r3, [pc, #40]	@ (800c68c <xTaskRemoveFromEventList+0xc4>)
 800c664:	2201      	movs	r2, #1
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	e001      	b.n	800c66e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c66a:	2300      	movs	r3, #0
 800c66c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c66e:	697b      	ldr	r3, [r7, #20]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	200108f8 	.word	0x200108f8
 800c67c:	200108d8 	.word	0x200108d8
 800c680:	20010400 	.word	0x20010400
 800c684:	20010890 	.word	0x20010890
 800c688:	200103fc 	.word	0x200103fc
 800c68c:	200108e4 	.word	0x200108e4

0800c690 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800c69a:	4b2a      	ldr	r3, [pc, #168]	@ (800c744 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10b      	bne.n	800c6ba <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	613b      	str	r3, [r7, #16]
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	e7fd      	b.n	800c6b6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10b      	bne.n	800c6e8 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	e7fd      	b.n	800c6e4 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7fe fad7 	bl	800ac9c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe fad2 	bl	800ac9c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fc:	4b12      	ldr	r3, [pc, #72]	@ (800c748 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	429a      	cmp	r2, r3
 800c702:	d903      	bls.n	800c70c <vTaskRemoveFromUnorderedEventList+0x7c>
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c708:	4a0f      	ldr	r2, [pc, #60]	@ (800c748 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c710:	4613      	mov	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4a0c      	ldr	r2, [pc, #48]	@ (800c74c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c71a:	441a      	add	r2, r3
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	3304      	adds	r3, #4
 800c720:	4619      	mov	r1, r3
 800c722:	4610      	mov	r0, r2
 800c724:	f7fe fa5d 	bl	800abe2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c72c:	4b08      	ldr	r3, [pc, #32]	@ (800c750 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c732:	429a      	cmp	r2, r3
 800c734:	d902      	bls.n	800c73c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800c736:	4b07      	ldr	r3, [pc, #28]	@ (800c754 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800c738:	2201      	movs	r2, #1
 800c73a:	601a      	str	r2, [r3, #0]
	}
}
 800c73c:	bf00      	nop
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	200108f8 	.word	0x200108f8
 800c748:	200108d8 	.word	0x200108d8
 800c74c:	20010400 	.word	0x20010400
 800c750:	200103fc 	.word	0x200103fc
 800c754:	200108e4 	.word	0x200108e4

0800c758 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10b      	bne.n	800c77e <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	60fb      	str	r3, [r7, #12]
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	e7fd      	b.n	800c77a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c77e:	f001 fa23 	bl	800dbc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c782:	4b07      	ldr	r3, [pc, #28]	@ (800c7a0 <vTaskSetTimeOutState+0x48>)
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c78a:	4b06      	ldr	r3, [pc, #24]	@ (800c7a4 <vTaskSetTimeOutState+0x4c>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c792:	f001 fa4b 	bl	800dc2c <vPortExitCritical>
}
 800c796:	bf00      	nop
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	200108e8 	.word	0x200108e8
 800c7a4:	200108d4 	.word	0x200108d4

0800c7a8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7b0:	4b06      	ldr	r3, [pc, #24]	@ (800c7cc <vTaskInternalSetTimeOutState+0x24>)
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c7b8:	4b05      	ldr	r3, [pc, #20]	@ (800c7d0 <vTaskInternalSetTimeOutState+0x28>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	605a      	str	r2, [r3, #4]
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	200108e8 	.word	0x200108e8
 800c7d0:	200108d4 	.word	0x200108d4

0800c7d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	613b      	str	r3, [r7, #16]
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	e7fd      	b.n	800c7f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	60fb      	str	r3, [r7, #12]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c81a:	f001 f9d5 	bl	800dbc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c81e:	4b1d      	ldr	r3, [pc, #116]	@ (800c894 <xTaskCheckForTimeOut+0xc0>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	69ba      	ldr	r2, [r7, #24]
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c836:	d102      	bne.n	800c83e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c838:	2300      	movs	r3, #0
 800c83a:	61fb      	str	r3, [r7, #28]
 800c83c:	e023      	b.n	800c886 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	4b15      	ldr	r3, [pc, #84]	@ (800c898 <xTaskCheckForTimeOut+0xc4>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d007      	beq.n	800c85a <xTaskCheckForTimeOut+0x86>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	429a      	cmp	r2, r3
 800c852:	d302      	bcc.n	800c85a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c854:	2301      	movs	r3, #1
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	e015      	b.n	800c886 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	429a      	cmp	r2, r3
 800c862:	d20b      	bcs.n	800c87c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	1ad2      	subs	r2, r2, r3
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff ff99 	bl	800c7a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c876:	2300      	movs	r3, #0
 800c878:	61fb      	str	r3, [r7, #28]
 800c87a:	e004      	b.n	800c886 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2200      	movs	r2, #0
 800c880:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c882:	2301      	movs	r3, #1
 800c884:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c886:	f001 f9d1 	bl	800dc2c <vPortExitCritical>

	return xReturn;
 800c88a:	69fb      	ldr	r3, [r7, #28]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3720      	adds	r7, #32
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	200108d4 	.word	0x200108d4
 800c898:	200108e8 	.word	0x200108e8

0800c89c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c89c:	b480      	push	{r7}
 800c89e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8a0:	4b03      	ldr	r3, [pc, #12]	@ (800c8b0 <vTaskMissedYield+0x14>)
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	601a      	str	r2, [r3, #0]
}
 800c8a6:	bf00      	nop
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	200108e4 	.word	0x200108e4

0800c8b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8bc:	f000 f852 	bl	800c964 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8c0:	4b06      	ldr	r3, [pc, #24]	@ (800c8dc <prvIdleTask+0x28>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d9f9      	bls.n	800c8bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8c8:	4b05      	ldr	r3, [pc, #20]	@ (800c8e0 <prvIdleTask+0x2c>)
 800c8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ce:	601a      	str	r2, [r3, #0]
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8d8:	e7f0      	b.n	800c8bc <prvIdleTask+0x8>
 800c8da:	bf00      	nop
 800c8dc:	20010400 	.word	0x20010400
 800c8e0:	e000ed04 	.word	0xe000ed04

0800c8e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	607b      	str	r3, [r7, #4]
 800c8ee:	e00c      	b.n	800c90a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4a12      	ldr	r2, [pc, #72]	@ (800c944 <prvInitialiseTaskLists+0x60>)
 800c8fc:	4413      	add	r3, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe f942 	bl	800ab88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3301      	adds	r3, #1
 800c908:	607b      	str	r3, [r7, #4]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b37      	cmp	r3, #55	@ 0x37
 800c90e:	d9ef      	bls.n	800c8f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c910:	480d      	ldr	r0, [pc, #52]	@ (800c948 <prvInitialiseTaskLists+0x64>)
 800c912:	f7fe f939 	bl	800ab88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c916:	480d      	ldr	r0, [pc, #52]	@ (800c94c <prvInitialiseTaskLists+0x68>)
 800c918:	f7fe f936 	bl	800ab88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c91c:	480c      	ldr	r0, [pc, #48]	@ (800c950 <prvInitialiseTaskLists+0x6c>)
 800c91e:	f7fe f933 	bl	800ab88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c922:	480c      	ldr	r0, [pc, #48]	@ (800c954 <prvInitialiseTaskLists+0x70>)
 800c924:	f7fe f930 	bl	800ab88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c928:	480b      	ldr	r0, [pc, #44]	@ (800c958 <prvInitialiseTaskLists+0x74>)
 800c92a:	f7fe f92d 	bl	800ab88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c92e:	4b0b      	ldr	r3, [pc, #44]	@ (800c95c <prvInitialiseTaskLists+0x78>)
 800c930:	4a05      	ldr	r2, [pc, #20]	@ (800c948 <prvInitialiseTaskLists+0x64>)
 800c932:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c934:	4b0a      	ldr	r3, [pc, #40]	@ (800c960 <prvInitialiseTaskLists+0x7c>)
 800c936:	4a05      	ldr	r2, [pc, #20]	@ (800c94c <prvInitialiseTaskLists+0x68>)
 800c938:	601a      	str	r2, [r3, #0]
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	20010400 	.word	0x20010400
 800c948:	20010860 	.word	0x20010860
 800c94c:	20010874 	.word	0x20010874
 800c950:	20010890 	.word	0x20010890
 800c954:	200108a4 	.word	0x200108a4
 800c958:	200108bc 	.word	0x200108bc
 800c95c:	20010888 	.word	0x20010888
 800c960:	2001088c 	.word	0x2001088c

0800c964 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c96a:	e019      	b.n	800c9a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c96c:	f001 f92c 	bl	800dbc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c970:	4b10      	ldr	r3, [pc, #64]	@ (800c9b4 <prvCheckTasksWaitingTermination+0x50>)
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3304      	adds	r3, #4
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7fe f98d 	bl	800ac9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <prvCheckTasksWaitingTermination+0x54>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3b01      	subs	r3, #1
 800c988:	4a0b      	ldr	r2, [pc, #44]	@ (800c9b8 <prvCheckTasksWaitingTermination+0x54>)
 800c98a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c98c:	4b0b      	ldr	r3, [pc, #44]	@ (800c9bc <prvCheckTasksWaitingTermination+0x58>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	3b01      	subs	r3, #1
 800c992:	4a0a      	ldr	r2, [pc, #40]	@ (800c9bc <prvCheckTasksWaitingTermination+0x58>)
 800c994:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c996:	f001 f949 	bl	800dc2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f810 	bl	800c9c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9a0:	4b06      	ldr	r3, [pc, #24]	@ (800c9bc <prvCheckTasksWaitingTermination+0x58>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e1      	bne.n	800c96c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	200108a4 	.word	0x200108a4
 800c9b8:	200108d0 	.word	0x200108d0
 800c9bc:	200108b8 	.word	0x200108b8

0800c9c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3354      	adds	r3, #84	@ 0x54
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f011 fa57 	bl	801de80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d108      	bne.n	800c9ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f001 fae1 	bl	800dfa8 <vPortFree>
				vPortFree( pxTCB );
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f001 fade 	bl	800dfa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9ec:	e019      	b.n	800ca22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d103      	bne.n	800ca00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 fad5 	bl	800dfa8 <vPortFree>
	}
 800c9fe:	e010      	b.n	800ca22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d00b      	beq.n	800ca22 <prvDeleteTCB+0x62>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	60fb      	str	r3, [r7, #12]
}
 800ca1c:	bf00      	nop
 800ca1e:	bf00      	nop
 800ca20:	e7fd      	b.n	800ca1e <prvDeleteTCB+0x5e>
	}
 800ca22:	bf00      	nop
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca32:	4b0c      	ldr	r3, [pc, #48]	@ (800ca64 <prvResetNextTaskUnblockTime+0x38>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d104      	bne.n	800ca46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca68 <prvResetNextTaskUnblockTime+0x3c>)
 800ca3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca44:	e008      	b.n	800ca58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca46:	4b07      	ldr	r3, [pc, #28]	@ (800ca64 <prvResetNextTaskUnblockTime+0x38>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	4a04      	ldr	r2, [pc, #16]	@ (800ca68 <prvResetNextTaskUnblockTime+0x3c>)
 800ca56:	6013      	str	r3, [r2, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	20010888 	.word	0x20010888
 800ca68:	200108f0 	.word	0x200108f0

0800ca6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca72:	4b0b      	ldr	r3, [pc, #44]	@ (800caa0 <xTaskGetSchedulerState+0x34>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	607b      	str	r3, [r7, #4]
 800ca7e:	e008      	b.n	800ca92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca80:	4b08      	ldr	r3, [pc, #32]	@ (800caa4 <xTaskGetSchedulerState+0x38>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca88:	2302      	movs	r3, #2
 800ca8a:	607b      	str	r3, [r7, #4]
 800ca8c:	e001      	b.n	800ca92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca92:	687b      	ldr	r3, [r7, #4]
	}
 800ca94:	4618      	mov	r0, r3
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr
 800caa0:	200108dc 	.word	0x200108dc
 800caa4:	200108f8 	.word	0x200108f8

0800caa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cab4:	2300      	movs	r3, #0
 800cab6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d051      	beq.n	800cb62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac2:	4b2a      	ldr	r3, [pc, #168]	@ (800cb6c <xTaskPriorityInherit+0xc4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac8:	429a      	cmp	r2, r3
 800caca:	d241      	bcs.n	800cb50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	db06      	blt.n	800cae2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad4:	4b25      	ldr	r3, [pc, #148]	@ (800cb6c <xTaskPriorityInherit+0xc4>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cada:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	6959      	ldr	r1, [r3, #20]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4a1f      	ldr	r2, [pc, #124]	@ (800cb70 <xTaskPriorityInherit+0xc8>)
 800caf4:	4413      	add	r3, r2
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d122      	bne.n	800cb40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	3304      	adds	r3, #4
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe f8cc 	bl	800ac9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb04:	4b19      	ldr	r3, [pc, #100]	@ (800cb6c <xTaskPriorityInherit+0xc4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb12:	4b18      	ldr	r3, [pc, #96]	@ (800cb74 <xTaskPriorityInherit+0xcc>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d903      	bls.n	800cb22 <xTaskPriorityInherit+0x7a>
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb1e:	4a15      	ldr	r2, [pc, #84]	@ (800cb74 <xTaskPriorityInherit+0xcc>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4a10      	ldr	r2, [pc, #64]	@ (800cb70 <xTaskPriorityInherit+0xc8>)
 800cb30:	441a      	add	r2, r3
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	3304      	adds	r3, #4
 800cb36:	4619      	mov	r1, r3
 800cb38:	4610      	mov	r0, r2
 800cb3a:	f7fe f852 	bl	800abe2 <vListInsertEnd>
 800cb3e:	e004      	b.n	800cb4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb40:	4b0a      	ldr	r3, [pc, #40]	@ (800cb6c <xTaskPriorityInherit+0xc4>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	60fb      	str	r3, [r7, #12]
 800cb4e:	e008      	b.n	800cb62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb54:	4b05      	ldr	r3, [pc, #20]	@ (800cb6c <xTaskPriorityInherit+0xc4>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d201      	bcs.n	800cb62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb62:	68fb      	ldr	r3, [r7, #12]
	}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	200103fc 	.word	0x200103fc
 800cb70:	20010400 	.word	0x20010400
 800cb74:	200108d8 	.word	0x200108d8

0800cb78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb84:	2300      	movs	r3, #0
 800cb86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d058      	beq.n	800cc40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb8e:	4b2f      	ldr	r3, [pc, #188]	@ (800cc4c <xTaskPriorityDisinherit+0xd4>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d00b      	beq.n	800cbb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	60fb      	str	r3, [r7, #12]
}
 800cbaa:	bf00      	nop
 800cbac:	bf00      	nop
 800cbae:	e7fd      	b.n	800cbac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10b      	bne.n	800cbd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	60bb      	str	r3, [r7, #8]
}
 800cbca:	bf00      	nop
 800cbcc:	bf00      	nop
 800cbce:	e7fd      	b.n	800cbcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbd4:	1e5a      	subs	r2, r3, #1
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d02c      	beq.n	800cc40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d128      	bne.n	800cc40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fe f852 	bl	800ac9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc10:	4b0f      	ldr	r3, [pc, #60]	@ (800cc50 <xTaskPriorityDisinherit+0xd8>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d903      	bls.n	800cc20 <xTaskPriorityDisinherit+0xa8>
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc1c:	4a0c      	ldr	r2, [pc, #48]	@ (800cc50 <xTaskPriorityDisinherit+0xd8>)
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4a09      	ldr	r2, [pc, #36]	@ (800cc54 <xTaskPriorityDisinherit+0xdc>)
 800cc2e:	441a      	add	r2, r3
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	3304      	adds	r3, #4
 800cc34:	4619      	mov	r1, r3
 800cc36:	4610      	mov	r0, r2
 800cc38:	f7fd ffd3 	bl	800abe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc40:	697b      	ldr	r3, [r7, #20]
	}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	200103fc 	.word	0x200103fc
 800cc50:	200108d8 	.word	0x200108d8
 800cc54:	20010400 	.word	0x20010400

0800cc58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d06c      	beq.n	800cd4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10b      	bne.n	800cc90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	60fb      	str	r3, [r7, #12]
}
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
 800cc8e:	e7fd      	b.n	800cc8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc94:	683a      	ldr	r2, [r7, #0]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d902      	bls.n	800cca0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	61fb      	str	r3, [r7, #28]
 800cc9e:	e002      	b.n	800cca6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cca4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d04c      	beq.n	800cd4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d147      	bne.n	800cd4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ccba:	4b26      	ldr	r3, [pc, #152]	@ (800cd54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d10b      	bne.n	800ccdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	60bb      	str	r3, [r7, #8]
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	e7fd      	b.n	800ccd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	69fa      	ldr	r2, [r7, #28]
 800cce6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	db04      	blt.n	800ccfa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	6959      	ldr	r1, [r3, #20]
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	4613      	mov	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4413      	add	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4a13      	ldr	r2, [pc, #76]	@ (800cd58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cd0a:	4413      	add	r3, r2
 800cd0c:	4299      	cmp	r1, r3
 800cd0e:	d11c      	bne.n	800cd4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fd ffc1 	bl	800ac9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d903      	bls.n	800cd2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4a07      	ldr	r2, [pc, #28]	@ (800cd58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cd3c:	441a      	add	r2, r3
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4619      	mov	r1, r3
 800cd44:	4610      	mov	r0, r2
 800cd46:	f7fd ff4c 	bl	800abe2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd4a:	bf00      	nop
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	200103fc 	.word	0x200103fc
 800cd58:	20010400 	.word	0x20010400
 800cd5c:	200108d8 	.word	0x200108d8

0800cd60 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800cd66:	4b09      	ldr	r3, [pc, #36]	@ (800cd8c <uxTaskResetEventItemValue+0x2c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd6e:	4b07      	ldr	r3, [pc, #28]	@ (800cd8c <uxTaskResetEventItemValue+0x2c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd74:	4b05      	ldr	r3, [pc, #20]	@ (800cd8c <uxTaskResetEventItemValue+0x2c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cd7c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800cd7e:	687b      	ldr	r3, [r7, #4]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	200103fc 	.word	0x200103fc

0800cd90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd94:	4b07      	ldr	r3, [pc, #28]	@ (800cdb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd9c:	4b05      	ldr	r3, [pc, #20]	@ (800cdb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cda2:	3201      	adds	r2, #1
 800cda4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cda6:	4b03      	ldr	r3, [pc, #12]	@ (800cdb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cda8:	681b      	ldr	r3, [r3, #0]
	}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	200103fc 	.word	0x200103fc

0800cdb8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cdc6:	f000 feff 	bl	800dbc8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cdca:	4b29      	ldr	r3, [pc, #164]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d01c      	beq.n	800ce12 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cdd8:	4b25      	ldr	r3, [pc, #148]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	43d2      	mvns	r2, r2
 800cde4:	400a      	ands	r2, r1
 800cde6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cdea:	4b21      	ldr	r3, [pc, #132]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00b      	beq.n	800ce12 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	6838      	ldr	r0, [r7, #0]
 800cdfe:	f000 f9e3 	bl	800d1c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ce02:	4b1c      	ldr	r3, [pc, #112]	@ (800ce74 <xTaskNotifyWait+0xbc>)
 800ce04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ce12:	f000 ff0b 	bl	800dc2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ce16:	f000 fed7 	bl	800dbc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ce20:	4b13      	ldr	r3, [pc, #76]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ce2c:	4b10      	ldr	r3, [pc, #64]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d002      	beq.n	800ce40 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	617b      	str	r3, [r7, #20]
 800ce3e:	e00a      	b.n	800ce56 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ce40:	4b0b      	ldr	r3, [pc, #44]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	43d2      	mvns	r2, r2
 800ce4c:	400a      	ands	r2, r1
 800ce4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce56:	4b06      	ldr	r3, [pc, #24]	@ (800ce70 <xTaskNotifyWait+0xb8>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ce60:	f000 fee4 	bl	800dc2c <vPortExitCritical>

		return xReturn;
 800ce64:	697b      	ldr	r3, [r7, #20]
	}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	200103fc 	.word	0x200103fc
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08a      	sub	sp, #40	@ 0x28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	4613      	mov	r3, r2
 800ce86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10b      	bne.n	800ceaa <xTaskGenericNotify+0x32>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	61bb      	str	r3, [r7, #24]
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	e7fd      	b.n	800cea6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ceae:	f000 fe8b 	bl	800dbc8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d004      	beq.n	800cec2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cec8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	2202      	movs	r2, #2
 800cece:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800ced2:	79fb      	ldrb	r3, [r7, #7]
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	d82e      	bhi.n	800cf36 <xTaskGenericNotify+0xbe>
 800ced8:	a201      	add	r2, pc, #4	@ (adr r2, 800cee0 <xTaskGenericNotify+0x68>)
 800ceda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cede:	bf00      	nop
 800cee0:	0800cf5b 	.word	0x0800cf5b
 800cee4:	0800cef5 	.word	0x0800cef5
 800cee8:	0800cf07 	.word	0x0800cf07
 800ceec:	0800cf17 	.word	0x0800cf17
 800cef0:	0800cf21 	.word	0x0800cf21
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	431a      	orrs	r2, r3
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cf04:	e02c      	b.n	800cf60 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cf0c:	1c5a      	adds	r2, r3, #1
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cf14:	e024      	b.n	800cf60 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800cf1e:	e01f      	b.n	800cf60 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cf20:	7ffb      	ldrb	r3, [r7, #31]
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d004      	beq.n	800cf30 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cf2e:	e017      	b.n	800cf60 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800cf34:	e014      	b.n	800cf60 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf40:	d00d      	beq.n	800cf5e <xTaskGenericNotify+0xe6>
	__asm volatile
 800cf42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	617b      	str	r3, [r7, #20]
}
 800cf54:	bf00      	nop
 800cf56:	bf00      	nop
 800cf58:	e7fd      	b.n	800cf56 <xTaskGenericNotify+0xde>
					break;
 800cf5a:	bf00      	nop
 800cf5c:	e000      	b.n	800cf60 <xTaskGenericNotify+0xe8>

					break;
 800cf5e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cf60:	7ffb      	ldrb	r3, [r7, #31]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d13b      	bne.n	800cfde <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	3304      	adds	r3, #4
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fd fe96 	bl	800ac9c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cf70:	6a3b      	ldr	r3, [r7, #32]
 800cf72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf74:	4b1d      	ldr	r3, [pc, #116]	@ (800cfec <xTaskGenericNotify+0x174>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d903      	bls.n	800cf84 <xTaskGenericNotify+0x10c>
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf80:	4a1a      	ldr	r2, [pc, #104]	@ (800cfec <xTaskGenericNotify+0x174>)
 800cf82:	6013      	str	r3, [r2, #0]
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4a17      	ldr	r2, [pc, #92]	@ (800cff0 <xTaskGenericNotify+0x178>)
 800cf92:	441a      	add	r2, r3
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	f7fd fe21 	bl	800abe2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <xTaskGenericNotify+0x148>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	613b      	str	r3, [r7, #16]
}
 800cfba:	bf00      	nop
 800cfbc:	bf00      	nop
 800cfbe:	e7fd      	b.n	800cfbc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800cff4 <xTaskGenericNotify+0x17c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d907      	bls.n	800cfde <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cfce:	4b0a      	ldr	r3, [pc, #40]	@ (800cff8 <xTaskGenericNotify+0x180>)
 800cfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cfde:	f000 fe25 	bl	800dc2c <vPortExitCritical>

		return xReturn;
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3728      	adds	r7, #40	@ 0x28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	200108d8 	.word	0x200108d8
 800cff0:	20010400 	.word	0x20010400
 800cff4:	200103fc 	.word	0x200103fc
 800cff8:	e000ed04 	.word	0xe000ed04

0800cffc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b08e      	sub	sp, #56	@ 0x38
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	4613      	mov	r3, r2
 800d00a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d00c:	2301      	movs	r3, #1
 800d00e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10b      	bne.n	800d02e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d02e:	f000 feab 	bl	800dd88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800d036:	f3ef 8211 	mrs	r2, BASEPRI
 800d03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	623a      	str	r2, [r7, #32]
 800d04c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d04e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d050:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d004      	beq.n	800d062 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d064:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06e:	2202      	movs	r2, #2
 800d070:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	2b04      	cmp	r3, #4
 800d078:	d82e      	bhi.n	800d0d8 <xTaskGenericNotifyFromISR+0xdc>
 800d07a:	a201      	add	r2, pc, #4	@ (adr r2, 800d080 <xTaskGenericNotifyFromISR+0x84>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d0fd 	.word	0x0800d0fd
 800d084:	0800d095 	.word	0x0800d095
 800d088:	0800d0a7 	.word	0x0800d0a7
 800d08c:	0800d0b7 	.word	0x0800d0b7
 800d090:	0800d0c1 	.word	0x0800d0c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d096:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	431a      	orrs	r2, r3
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d0a4:	e02d      	b.n	800d102 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d0b4:	e025      	b.n	800d102 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800d0be:	e020      	b.n	800d102 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d0c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d004      	beq.n	800d0d2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d0d0:	e017      	b.n	800d102 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800d0d6:	e014      	b.n	800d102 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d0de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0e2:	d00d      	beq.n	800d100 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	61bb      	str	r3, [r7, #24]
}
 800d0f6:	bf00      	nop
 800d0f8:	bf00      	nop
 800d0fa:	e7fd      	b.n	800d0f8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d0fc:	bf00      	nop
 800d0fe:	e000      	b.n	800d102 <xTaskGenericNotifyFromISR+0x106>
					break;
 800d100:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d102:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d106:	2b01      	cmp	r3, #1
 800d108:	d147      	bne.n	800d19a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00b      	beq.n	800d12a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	617b      	str	r3, [r7, #20]
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop
 800d128:	e7fd      	b.n	800d126 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d12a:	4b21      	ldr	r3, [pc, #132]	@ (800d1b0 <xTaskGenericNotifyFromISR+0x1b4>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d11d      	bne.n	800d16e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fd fdb0 	bl	800ac9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d140:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b4 <xTaskGenericNotifyFromISR+0x1b8>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	429a      	cmp	r2, r3
 800d146:	d903      	bls.n	800d150 <xTaskGenericNotifyFromISR+0x154>
 800d148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14c:	4a19      	ldr	r2, [pc, #100]	@ (800d1b4 <xTaskGenericNotifyFromISR+0x1b8>)
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d154:	4613      	mov	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4a16      	ldr	r2, [pc, #88]	@ (800d1b8 <xTaskGenericNotifyFromISR+0x1bc>)
 800d15e:	441a      	add	r2, r3
 800d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d162:	3304      	adds	r3, #4
 800d164:	4619      	mov	r1, r3
 800d166:	4610      	mov	r0, r2
 800d168:	f7fd fd3b 	bl	800abe2 <vListInsertEnd>
 800d16c:	e005      	b.n	800d17a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d170:	3318      	adds	r3, #24
 800d172:	4619      	mov	r1, r3
 800d174:	4811      	ldr	r0, [pc, #68]	@ (800d1bc <xTaskGenericNotifyFromISR+0x1c0>)
 800d176:	f7fd fd34 	bl	800abe2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d17e:	4b10      	ldr	r3, [pc, #64]	@ (800d1c0 <xTaskGenericNotifyFromISR+0x1c4>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d184:	429a      	cmp	r2, r3
 800d186:	d908      	bls.n	800d19a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d18e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d190:	2201      	movs	r2, #1
 800d192:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d194:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c4 <xTaskGenericNotifyFromISR+0x1c8>)
 800d196:	2201      	movs	r2, #1
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	f383 8811 	msr	BASEPRI, r3
}
 800d1a4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3738      	adds	r7, #56	@ 0x38
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	200108f8 	.word	0x200108f8
 800d1b4:	200108d8 	.word	0x200108d8
 800d1b8:	20010400 	.word	0x20010400
 800d1bc:	20010890 	.word	0x20010890
 800d1c0:	200103fc 	.word	0x200103fc
 800d1c4:	200108e4 	.word	0x200108e4

0800d1c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1d2:	4b21      	ldr	r3, [pc, #132]	@ (800d258 <prvAddCurrentTaskToDelayedList+0x90>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1d8:	4b20      	ldr	r3, [pc, #128]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fd fd5c 	bl	800ac9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1ea:	d10a      	bne.n	800d202 <prvAddCurrentTaskToDelayedList+0x3a>
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d007      	beq.n	800d202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4819      	ldr	r0, [pc, #100]	@ (800d260 <prvAddCurrentTaskToDelayedList+0x98>)
 800d1fc:	f7fd fcf1 	bl	800abe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d200:	e026      	b.n	800d250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4413      	add	r3, r2
 800d208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d20a:	4b14      	ldr	r3, [pc, #80]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	429a      	cmp	r2, r3
 800d218:	d209      	bcs.n	800d22e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d21a:	4b12      	ldr	r3, [pc, #72]	@ (800d264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	4b0f      	ldr	r3, [pc, #60]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3304      	adds	r3, #4
 800d224:	4619      	mov	r1, r3
 800d226:	4610      	mov	r0, r2
 800d228:	f7fd fcff 	bl	800ac2a <vListInsert>
}
 800d22c:	e010      	b.n	800d250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d22e:	4b0e      	ldr	r3, [pc, #56]	@ (800d268 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b0a      	ldr	r3, [pc, #40]	@ (800d25c <prvAddCurrentTaskToDelayedList+0x94>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	3304      	adds	r3, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f7fd fcf5 	bl	800ac2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d240:	4b0a      	ldr	r3, [pc, #40]	@ (800d26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68ba      	ldr	r2, [r7, #8]
 800d246:	429a      	cmp	r2, r3
 800d248:	d202      	bcs.n	800d250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d24a:	4a08      	ldr	r2, [pc, #32]	@ (800d26c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	6013      	str	r3, [r2, #0]
}
 800d250:	bf00      	nop
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	200108d4 	.word	0x200108d4
 800d25c:	200103fc 	.word	0x200103fc
 800d260:	200108bc 	.word	0x200108bc
 800d264:	2001088c 	.word	0x2001088c
 800d268:	20010888 	.word	0x20010888
 800d26c:	200108f0 	.word	0x200108f0

0800d270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	@ 0x28
 800d274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d276:	2300      	movs	r3, #0
 800d278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d27a:	f000 fb13 	bl	800d8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d27e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2f4 <xTimerCreateTimerTask+0x84>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d021      	beq.n	800d2ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d28e:	1d3a      	adds	r2, r7, #4
 800d290:	f107 0108 	add.w	r1, r7, #8
 800d294:	f107 030c 	add.w	r3, r7, #12
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fd fa65 	bl	800a768 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	9202      	str	r2, [sp, #8]
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	460a      	mov	r2, r1
 800d2b0:	4911      	ldr	r1, [pc, #68]	@ (800d2f8 <xTimerCreateTimerTask+0x88>)
 800d2b2:	4812      	ldr	r0, [pc, #72]	@ (800d2fc <xTimerCreateTimerTask+0x8c>)
 800d2b4:	f7fe fcb8 	bl	800bc28 <xTaskCreateStatic>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	4a11      	ldr	r2, [pc, #68]	@ (800d300 <xTimerCreateTimerTask+0x90>)
 800d2bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2be:	4b10      	ldr	r3, [pc, #64]	@ (800d300 <xTimerCreateTimerTask+0x90>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10b      	bne.n	800d2e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	613b      	str	r3, [r7, #16]
}
 800d2e2:	bf00      	nop
 800d2e4:	bf00      	nop
 800d2e6:	e7fd      	b.n	800d2e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d2e8:	697b      	ldr	r3, [r7, #20]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	2001092c 	.word	0x2001092c
 800d2f8:	08020194 	.word	0x08020194
 800d2fc:	0800d43d 	.word	0x0800d43d
 800d300:	20010930 	.word	0x20010930

0800d304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	@ 0x28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d312:	2300      	movs	r3, #0
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10b      	bne.n	800d334 <xTimerGenericCommand+0x30>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d334:	4b19      	ldr	r3, [pc, #100]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d02a      	beq.n	800d392 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b05      	cmp	r3, #5
 800d34c:	dc18      	bgt.n	800d380 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d34e:	f7ff fb8d 	bl	800ca6c <xTaskGetSchedulerState>
 800d352:	4603      	mov	r3, r0
 800d354:	2b02      	cmp	r3, #2
 800d356:	d109      	bne.n	800d36c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d358:	4b10      	ldr	r3, [pc, #64]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	f107 0110 	add.w	r1, r7, #16
 800d360:	2300      	movs	r3, #0
 800d362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d364:	f7fd fe78 	bl	800b058 <xQueueGenericSend>
 800d368:	6278      	str	r0, [r7, #36]	@ 0x24
 800d36a:	e012      	b.n	800d392 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d36c:	4b0b      	ldr	r3, [pc, #44]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d36e:	6818      	ldr	r0, [r3, #0]
 800d370:	f107 0110 	add.w	r1, r7, #16
 800d374:	2300      	movs	r3, #0
 800d376:	2200      	movs	r2, #0
 800d378:	f7fd fe6e 	bl	800b058 <xQueueGenericSend>
 800d37c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d37e:	e008      	b.n	800d392 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d380:	4b06      	ldr	r3, [pc, #24]	@ (800d39c <xTimerGenericCommand+0x98>)
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	f107 0110 	add.w	r1, r7, #16
 800d388:	2300      	movs	r3, #0
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	f7fd ff66 	bl	800b25c <xQueueGenericSendFromISR>
 800d390:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d394:	4618      	mov	r0, r3
 800d396:	3728      	adds	r7, #40	@ 0x28
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	2001092c 	.word	0x2001092c

0800d3a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af02      	add	r7, sp, #8
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3aa:	4b23      	ldr	r3, [pc, #140]	@ (800d438 <prvProcessExpiredTimer+0x98>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fd fc6f 	bl	800ac9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d023      	beq.n	800d414 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	18d1      	adds	r1, r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	6978      	ldr	r0, [r7, #20]
 800d3da:	f000 f8d5 	bl	800d588 <prvInsertTimerInActiveList>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d020      	beq.n	800d426 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	6978      	ldr	r0, [r7, #20]
 800d3f0:	f7ff ff88 	bl	800d304 <xTimerGenericCommand>
 800d3f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d114      	bne.n	800d426 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	60fb      	str	r3, [r7, #12]
}
 800d40e:	bf00      	nop
 800d410:	bf00      	nop
 800d412:	e7fd      	b.n	800d410 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d41a:	f023 0301 	bic.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	6978      	ldr	r0, [r7, #20]
 800d42c:	4798      	blx	r3
}
 800d42e:	bf00      	nop
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	20010924 	.word	0x20010924

0800d43c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d444:	f107 0308 	add.w	r3, r7, #8
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 f859 	bl	800d500 <prvGetNextExpireTime>
 800d44e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	4619      	mov	r1, r3
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f805 	bl	800d464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d45a:	f000 f8d7 	bl	800d60c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d45e:	bf00      	nop
 800d460:	e7f0      	b.n	800d444 <prvTimerTask+0x8>
	...

0800d464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d46e:	f7fe fe3f 	bl	800c0f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4618      	mov	r0, r3
 800d478:	f000 f866 	bl	800d548 <prvSampleTimeNow>
 800d47c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d130      	bne.n	800d4e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10a      	bne.n	800d4a0 <prvProcessTimerOrBlockTask+0x3c>
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d806      	bhi.n	800d4a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d492:	f7fe fe3b 	bl	800c10c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d496:	68f9      	ldr	r1, [r7, #12]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff ff81 	bl	800d3a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d49e:	e024      	b.n	800d4ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d008      	beq.n	800d4b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4a6:	4b13      	ldr	r3, [pc, #76]	@ (800d4f4 <prvProcessTimerOrBlockTask+0x90>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <prvProcessTimerOrBlockTask+0x50>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e000      	b.n	800d4b6 <prvProcessTimerOrBlockTask+0x52>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d4f8 <prvProcessTimerOrBlockTask+0x94>)
 800d4ba:	6818      	ldr	r0, [r3, #0]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	f7fe fb7b 	bl	800bbc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4ca:	f7fe fe1f 	bl	800c10c <xTaskResumeAll>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10a      	bne.n	800d4ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4d4:	4b09      	ldr	r3, [pc, #36]	@ (800d4fc <prvProcessTimerOrBlockTask+0x98>)
 800d4d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	f3bf 8f6f 	isb	sy
}
 800d4e4:	e001      	b.n	800d4ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d4e6:	f7fe fe11 	bl	800c10c <xTaskResumeAll>
}
 800d4ea:	bf00      	nop
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	20010928 	.word	0x20010928
 800d4f8:	2001092c 	.word	0x2001092c
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d508:	4b0e      	ldr	r3, [pc, #56]	@ (800d544 <prvGetNextExpireTime+0x44>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <prvGetNextExpireTime+0x16>
 800d512:	2201      	movs	r2, #1
 800d514:	e000      	b.n	800d518 <prvGetNextExpireTime+0x18>
 800d516:	2200      	movs	r2, #0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d105      	bne.n	800d530 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d524:	4b07      	ldr	r3, [pc, #28]	@ (800d544 <prvGetNextExpireTime+0x44>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	60fb      	str	r3, [r7, #12]
 800d52e:	e001      	b.n	800d534 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d534:	68fb      	ldr	r3, [r7, #12]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	20010924 	.word	0x20010924

0800d548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d550:	f7fe fe7a 	bl	800c248 <xTaskGetTickCount>
 800d554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d556:	4b0b      	ldr	r3, [pc, #44]	@ (800d584 <prvSampleTimeNow+0x3c>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68fa      	ldr	r2, [r7, #12]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d205      	bcs.n	800d56c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d560:	f000 f93a 	bl	800d7d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	e002      	b.n	800d572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d572:	4a04      	ldr	r2, [pc, #16]	@ (800d584 <prvSampleTimeNow+0x3c>)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d578:	68fb      	ldr	r3, [r7, #12]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	20010934 	.word	0x20010934

0800d588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b086      	sub	sp, #24
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d596:	2300      	movs	r3, #0
 800d598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d812      	bhi.n	800d5d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	1ad2      	subs	r2, r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	699b      	ldr	r3, [r3, #24]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d302      	bcc.n	800d5c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	617b      	str	r3, [r7, #20]
 800d5c0:	e01b      	b.n	800d5fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5c2:	4b10      	ldr	r3, [pc, #64]	@ (800d604 <prvInsertTimerInActiveList+0x7c>)
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f7fd fb2c 	bl	800ac2a <vListInsert>
 800d5d2:	e012      	b.n	800d5fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d206      	bcs.n	800d5ea <prvInsertTimerInActiveList+0x62>
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d302      	bcc.n	800d5ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	617b      	str	r3, [r7, #20]
 800d5e8:	e007      	b.n	800d5fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5ea:	4b07      	ldr	r3, [pc, #28]	@ (800d608 <prvInsertTimerInActiveList+0x80>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	f7fd fb18 	bl	800ac2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d5fa:	697b      	ldr	r3, [r7, #20]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3718      	adds	r7, #24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	20010928 	.word	0x20010928
 800d608:	20010924 	.word	0x20010924

0800d60c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b08e      	sub	sp, #56	@ 0x38
 800d610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d612:	e0ce      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	da19      	bge.n	800d64e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	3304      	adds	r3, #4
 800d61e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10b      	bne.n	800d63e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	61fb      	str	r3, [r7, #28]
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	e7fd      	b.n	800d63a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d644:	6850      	ldr	r0, [r2, #4]
 800d646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d648:	6892      	ldr	r2, [r2, #8]
 800d64a:	4611      	mov	r1, r2
 800d64c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	f2c0 80ae 	blt.w	800d7b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d004      	beq.n	800d66c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d664:	3304      	adds	r3, #4
 800d666:	4618      	mov	r0, r3
 800d668:	f7fd fb18 	bl	800ac9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d66c:	463b      	mov	r3, r7
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff ff6a 	bl	800d548 <prvSampleTimeNow>
 800d674:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b09      	cmp	r3, #9
 800d67a:	f200 8097 	bhi.w	800d7ac <prvProcessReceivedCommands+0x1a0>
 800d67e:	a201      	add	r2, pc, #4	@ (adr r2, 800d684 <prvProcessReceivedCommands+0x78>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d6ad 	.word	0x0800d6ad
 800d688:	0800d6ad 	.word	0x0800d6ad
 800d68c:	0800d6ad 	.word	0x0800d6ad
 800d690:	0800d723 	.word	0x0800d723
 800d694:	0800d737 	.word	0x0800d737
 800d698:	0800d783 	.word	0x0800d783
 800d69c:	0800d6ad 	.word	0x0800d6ad
 800d6a0:	0800d6ad 	.word	0x0800d6ad
 800d6a4:	0800d723 	.word	0x0800d723
 800d6a8:	0800d737 	.word	0x0800d737
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6b2:	f043 0301 	orr.w	r3, r3, #1
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	18d1      	adds	r1, r2, r3
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6cc:	f7ff ff5c 	bl	800d588 <prvInsertTimerInActiveList>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d06c      	beq.n	800d7b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d061      	beq.n	800d7b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6fe:	f7ff fe01 	bl	800d304 <xTimerGenericCommand>
 800d702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d152      	bne.n	800d7b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	61bb      	str	r3, [r7, #24]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d728:	f023 0301 	bic.w	r3, r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d734:	e03d      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d73c:	f043 0301 	orr.w	r3, r3, #1
 800d740:	b2da      	uxtb	r2, r3
 800d742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d748:	68ba      	ldr	r2, [r7, #8]
 800d74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10b      	bne.n	800d76e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	617b      	str	r3, [r7, #20]
}
 800d768:	bf00      	nop
 800d76a:	bf00      	nop
 800d76c:	e7fd      	b.n	800d76a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	699a      	ldr	r2, [r3, #24]
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	18d1      	adds	r1, r2, r3
 800d776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d77a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d77c:	f7ff ff04 	bl	800d588 <prvInsertTimerInActiveList>
					break;
 800d780:	e017      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d788:	f003 0302 	and.w	r3, r3, #2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d103      	bne.n	800d798 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d792:	f000 fc09 	bl	800dfa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d796:	e00c      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d79e:	f023 0301 	bic.w	r3, r3, #1
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d7aa:	e002      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d7ac:	bf00      	nop
 800d7ae:	e000      	b.n	800d7b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d7b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7b2:	4b08      	ldr	r3, [pc, #32]	@ (800d7d4 <prvProcessReceivedCommands+0x1c8>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	1d39      	adds	r1, r7, #4
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fd fdec 	bl	800b398 <xQueueReceive>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af26 	bne.w	800d614 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3730      	adds	r7, #48	@ 0x30
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	2001092c 	.word	0x2001092c

0800d7d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7de:	e049      	b.n	800d874 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ea:	4b2c      	ldr	r3, [pc, #176]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fd fa4f 	bl	800ac9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	2b00      	cmp	r3, #0
 800d812:	d02f      	beq.n	800d874 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	4413      	add	r3, r2
 800d81c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	d90e      	bls.n	800d844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d832:	4b1a      	ldr	r3, [pc, #104]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3304      	adds	r3, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	f7fd f9f4 	bl	800ac2a <vListInsert>
 800d842:	e017      	b.n	800d874 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d844:	2300      	movs	r3, #0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	2300      	movs	r3, #0
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fd58 	bl	800d304 <xTimerGenericCommand>
 800d854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10b      	bne.n	800d874 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	603b      	str	r3, [r7, #0]
}
 800d86e:	bf00      	nop
 800d870:	bf00      	nop
 800d872:	e7fd      	b.n	800d870 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d874:	4b09      	ldr	r3, [pc, #36]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1b0      	bne.n	800d7e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d87e:	4b07      	ldr	r3, [pc, #28]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d884:	4b06      	ldr	r3, [pc, #24]	@ (800d8a0 <prvSwitchTimerLists+0xc8>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a04      	ldr	r2, [pc, #16]	@ (800d89c <prvSwitchTimerLists+0xc4>)
 800d88a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d88c:	4a04      	ldr	r2, [pc, #16]	@ (800d8a0 <prvSwitchTimerLists+0xc8>)
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	6013      	str	r3, [r2, #0]
}
 800d892:	bf00      	nop
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	20010924 	.word	0x20010924
 800d8a0:	20010928 	.word	0x20010928

0800d8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8aa:	f000 f98d 	bl	800dbc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8ae:	4b15      	ldr	r3, [pc, #84]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d120      	bne.n	800d8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8b6:	4814      	ldr	r0, [pc, #80]	@ (800d908 <prvCheckForValidListAndQueue+0x64>)
 800d8b8:	f7fd f966 	bl	800ab88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8bc:	4813      	ldr	r0, [pc, #76]	@ (800d90c <prvCheckForValidListAndQueue+0x68>)
 800d8be:	f7fd f963 	bl	800ab88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8c2:	4b13      	ldr	r3, [pc, #76]	@ (800d910 <prvCheckForValidListAndQueue+0x6c>)
 800d8c4:	4a10      	ldr	r2, [pc, #64]	@ (800d908 <prvCheckForValidListAndQueue+0x64>)
 800d8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8c8:	4b12      	ldr	r3, [pc, #72]	@ (800d914 <prvCheckForValidListAndQueue+0x70>)
 800d8ca:	4a10      	ldr	r2, [pc, #64]	@ (800d90c <prvCheckForValidListAndQueue+0x68>)
 800d8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	4b11      	ldr	r3, [pc, #68]	@ (800d918 <prvCheckForValidListAndQueue+0x74>)
 800d8d4:	4a11      	ldr	r2, [pc, #68]	@ (800d91c <prvCheckForValidListAndQueue+0x78>)
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	200a      	movs	r0, #10
 800d8da:	f7fd fa73 	bl	800adc4 <xQueueGenericCreateStatic>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	4a08      	ldr	r2, [pc, #32]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d8e4:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d005      	beq.n	800d8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8ec:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	490b      	ldr	r1, [pc, #44]	@ (800d920 <prvCheckForValidListAndQueue+0x7c>)
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe f910 	bl	800bb18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8f8:	f000 f998 	bl	800dc2c <vPortExitCritical>
}
 800d8fc:	bf00      	nop
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	2001092c 	.word	0x2001092c
 800d908:	200108fc 	.word	0x200108fc
 800d90c:	20010910 	.word	0x20010910
 800d910:	20010924 	.word	0x20010924
 800d914:	20010928 	.word	0x20010928
 800d918:	200109d8 	.word	0x200109d8
 800d91c:	20010938 	.word	0x20010938
 800d920:	0802019c 	.word	0x0802019c

0800d924 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d924:	b580      	push	{r7, lr}
 800d926:	b08a      	sub	sp, #40	@ 0x28
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
 800d930:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800d932:	f06f 0301 	mvn.w	r3, #1
 800d936:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d944:	4b06      	ldr	r3, [pc, #24]	@ (800d960 <xTimerPendFunctionCallFromISR+0x3c>)
 800d946:	6818      	ldr	r0, [r3, #0]
 800d948:	f107 0114 	add.w	r1, r7, #20
 800d94c:	2300      	movs	r3, #0
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	f7fd fc84 	bl	800b25c <xQueueGenericSendFromISR>
 800d954:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800d956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d958:	4618      	mov	r0, r3
 800d95a:	3728      	adds	r7, #40	@ 0x28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	2001092c 	.word	0x2001092c

0800d964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	3b04      	subs	r3, #4
 800d974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d97c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3b04      	subs	r3, #4
 800d982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	f023 0201 	bic.w	r2, r3, #1
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3b04      	subs	r3, #4
 800d992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d994:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c8 <pxPortInitialiseStack+0x64>)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3b14      	subs	r3, #20
 800d99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3b04      	subs	r3, #4
 800d9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f06f 0202 	mvn.w	r2, #2
 800d9b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	3b20      	subs	r3, #32
 800d9b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	0800d9cd 	.word	0x0800d9cd

0800d9cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9d6:	4b13      	ldr	r3, [pc, #76]	@ (800da24 <prvTaskExitError+0x58>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9de:	d00b      	beq.n	800d9f8 <prvTaskExitError+0x2c>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	60fb      	str	r3, [r7, #12]
}
 800d9f2:	bf00      	nop
 800d9f4:	bf00      	nop
 800d9f6:	e7fd      	b.n	800d9f4 <prvTaskExitError+0x28>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	60bb      	str	r3, [r7, #8]
}
 800da0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da0c:	bf00      	nop
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d0fc      	beq.n	800da0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000028 	.word	0x20000028
	...

0800da30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da30:	4b07      	ldr	r3, [pc, #28]	@ (800da50 <pxCurrentTCBConst2>)
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	6808      	ldr	r0, [r1, #0]
 800da36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3a:	f380 8809 	msr	PSP, r0
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f04f 0000 	mov.w	r0, #0
 800da46:	f380 8811 	msr	BASEPRI, r0
 800da4a:	4770      	bx	lr
 800da4c:	f3af 8000 	nop.w

0800da50 <pxCurrentTCBConst2>:
 800da50:	200103fc 	.word	0x200103fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop

0800da58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da58:	4808      	ldr	r0, [pc, #32]	@ (800da7c <prvPortStartFirstTask+0x24>)
 800da5a:	6800      	ldr	r0, [r0, #0]
 800da5c:	6800      	ldr	r0, [r0, #0]
 800da5e:	f380 8808 	msr	MSP, r0
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8814 	msr	CONTROL, r0
 800da6a:	b662      	cpsie	i
 800da6c:	b661      	cpsie	f
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	df00      	svc	0
 800da78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da7a:	bf00      	nop
 800da7c:	e000ed08 	.word	0xe000ed08

0800da80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da86:	4b47      	ldr	r3, [pc, #284]	@ (800dba4 <xPortStartScheduler+0x124>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a47      	ldr	r2, [pc, #284]	@ (800dba8 <xPortStartScheduler+0x128>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d10b      	bne.n	800daa8 <xPortStartScheduler+0x28>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da94:	f383 8811 	msr	BASEPRI, r3
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	613b      	str	r3, [r7, #16]
}
 800daa2:	bf00      	nop
 800daa4:	bf00      	nop
 800daa6:	e7fd      	b.n	800daa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800daa8:	4b3e      	ldr	r3, [pc, #248]	@ (800dba4 <xPortStartScheduler+0x124>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a3f      	ldr	r2, [pc, #252]	@ (800dbac <xPortStartScheduler+0x12c>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d10b      	bne.n	800daca <xPortStartScheduler+0x4a>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60fb      	str	r3, [r7, #12]
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop
 800dac8:	e7fd      	b.n	800dac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800daca:	4b39      	ldr	r3, [pc, #228]	@ (800dbb0 <xPortStartScheduler+0x130>)
 800dacc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	22ff      	movs	r2, #255	@ 0xff
 800dada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800daec:	b2da      	uxtb	r2, r3
 800daee:	4b31      	ldr	r3, [pc, #196]	@ (800dbb4 <xPortStartScheduler+0x134>)
 800daf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800daf2:	4b31      	ldr	r3, [pc, #196]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800daf4:	2207      	movs	r2, #7
 800daf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daf8:	e009      	b.n	800db0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dafa:	4b2f      	ldr	r3, [pc, #188]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3b01      	subs	r3, #1
 800db00:	4a2d      	ldr	r2, [pc, #180]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db04:	78fb      	ldrb	r3, [r7, #3]
 800db06:	b2db      	uxtb	r3, r3
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db0e:	78fb      	ldrb	r3, [r7, #3]
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db16:	2b80      	cmp	r3, #128	@ 0x80
 800db18:	d0ef      	beq.n	800dafa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db1a:	4b27      	ldr	r3, [pc, #156]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f1c3 0307 	rsb	r3, r3, #7
 800db22:	2b04      	cmp	r3, #4
 800db24:	d00b      	beq.n	800db3e <xPortStartScheduler+0xbe>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	f383 8811 	msr	BASEPRI, r3
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	f3bf 8f4f 	dsb	sy
 800db36:	60bb      	str	r3, [r7, #8]
}
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db3e:	4b1e      	ldr	r3, [pc, #120]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	021b      	lsls	r3, r3, #8
 800db44:	4a1c      	ldr	r2, [pc, #112]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db48:	4b1b      	ldr	r3, [pc, #108]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800db50:	4a19      	ldr	r2, [pc, #100]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	b2da      	uxtb	r2, r3
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db5c:	4b17      	ldr	r3, [pc, #92]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a16      	ldr	r2, [pc, #88]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800db66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db68:	4b14      	ldr	r3, [pc, #80]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a13      	ldr	r2, [pc, #76]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800db72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db74:	f000 f8da 	bl	800dd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db78:	4b11      	ldr	r3, [pc, #68]	@ (800dbc0 <xPortStartScheduler+0x140>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db7e:	f000 f8f9 	bl	800dd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db82:	4b10      	ldr	r3, [pc, #64]	@ (800dbc4 <xPortStartScheduler+0x144>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a0f      	ldr	r2, [pc, #60]	@ (800dbc4 <xPortStartScheduler+0x144>)
 800db88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800db8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db8e:	f7ff ff63 	bl	800da58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db92:	f7fe fc23 	bl	800c3dc <vTaskSwitchContext>
	prvTaskExitError();
 800db96:	f7ff ff19 	bl	800d9cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	e000ed00 	.word	0xe000ed00
 800dba8:	410fc271 	.word	0x410fc271
 800dbac:	410fc270 	.word	0x410fc270
 800dbb0:	e000e400 	.word	0xe000e400
 800dbb4:	20010a28 	.word	0x20010a28
 800dbb8:	20010a2c 	.word	0x20010a2c
 800dbbc:	e000ed20 	.word	0xe000ed20
 800dbc0:	20000028 	.word	0x20000028
 800dbc4:	e000ef34 	.word	0xe000ef34

0800dbc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	607b      	str	r3, [r7, #4]
}
 800dbe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbe2:	4b10      	ldr	r3, [pc, #64]	@ (800dc24 <vPortEnterCritical+0x5c>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	4a0e      	ldr	r2, [pc, #56]	@ (800dc24 <vPortEnterCritical+0x5c>)
 800dbea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbec:	4b0d      	ldr	r3, [pc, #52]	@ (800dc24 <vPortEnterCritical+0x5c>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d110      	bne.n	800dc16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <vPortEnterCritical+0x60>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00b      	beq.n	800dc16 <vPortEnterCritical+0x4e>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	603b      	str	r3, [r7, #0]
}
 800dc10:	bf00      	nop
 800dc12:	bf00      	nop
 800dc14:	e7fd      	b.n	800dc12 <vPortEnterCritical+0x4a>
	}
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	20000028 	.word	0x20000028
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc32:	4b12      	ldr	r3, [pc, #72]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10b      	bne.n	800dc52 <vPortExitCritical+0x26>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	607b      	str	r3, [r7, #4]
}
 800dc4c:	bf00      	nop
 800dc4e:	bf00      	nop
 800dc50:	e7fd      	b.n	800dc4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc52:	4b0a      	ldr	r3, [pc, #40]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3b01      	subs	r3, #1
 800dc58:	4a08      	ldr	r2, [pc, #32]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc5c:	4b07      	ldr	r3, [pc, #28]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d105      	bne.n	800dc70 <vPortExitCritical+0x44>
 800dc64:	2300      	movs	r3, #0
 800dc66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	f383 8811 	msr	BASEPRI, r3
}
 800dc6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	20000028 	.word	0x20000028

0800dc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc80:	f3ef 8009 	mrs	r0, PSP
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4b15      	ldr	r3, [pc, #84]	@ (800dce0 <pxCurrentTCBConst>)
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	f01e 0f10 	tst.w	lr, #16
 800dc90:	bf08      	it	eq
 800dc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	6010      	str	r0, [r2, #0]
 800dc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dca4:	f380 8811 	msr	BASEPRI, r0
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f7fe fb94 	bl	800c3dc <vTaskSwitchContext>
 800dcb4:	f04f 0000 	mov.w	r0, #0
 800dcb8:	f380 8811 	msr	BASEPRI, r0
 800dcbc:	bc09      	pop	{r0, r3}
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	6808      	ldr	r0, [r1, #0]
 800dcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc6:	f01e 0f10 	tst.w	lr, #16
 800dcca:	bf08      	it	eq
 800dccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dcd0:	f380 8809 	msr	PSP, r0
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	f3af 8000 	nop.w

0800dce0 <pxCurrentTCBConst>:
 800dce0:	200103fc 	.word	0x200103fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop

0800dce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	607b      	str	r3, [r7, #4]
}
 800dd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd02:	f7fe fab1 	bl	800c268 <xTaskIncrementTick>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd0c:	4b06      	ldr	r3, [pc, #24]	@ (800dd28 <xPortSysTickHandler+0x40>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	2300      	movs	r3, #0
 800dd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
}
 800dd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	e000ed04 	.word	0xe000ed04

0800dd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd30:	4b0b      	ldr	r3, [pc, #44]	@ (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd36:	4b0b      	ldr	r3, [pc, #44]	@ (800dd64 <vPortSetupTimerInterrupt+0x38>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd68 <vPortSetupTimerInterrupt+0x3c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a0a      	ldr	r2, [pc, #40]	@ (800dd6c <vPortSetupTimerInterrupt+0x40>)
 800dd42:	fba2 2303 	umull	r2, r3, r2, r3
 800dd46:	099b      	lsrs	r3, r3, #6
 800dd48:	4a09      	ldr	r2, [pc, #36]	@ (800dd70 <vPortSetupTimerInterrupt+0x44>)
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd4e:	4b04      	ldr	r3, [pc, #16]	@ (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd50:	2207      	movs	r2, #7
 800dd52:	601a      	str	r2, [r3, #0]
}
 800dd54:	bf00      	nop
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	e000e010 	.word	0xe000e010
 800dd64:	e000e018 	.word	0xe000e018
 800dd68:	2000001c 	.word	0x2000001c
 800dd6c:	10624dd3 	.word	0x10624dd3
 800dd70:	e000e014 	.word	0xe000e014

0800dd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dd84 <vPortEnableVFP+0x10>
 800dd78:	6801      	ldr	r1, [r0, #0]
 800dd7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dd7e:	6001      	str	r1, [r0, #0]
 800dd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd82:	bf00      	nop
 800dd84:	e000ed88 	.word	0xe000ed88

0800dd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd8e:	f3ef 8305 	mrs	r3, IPSR
 800dd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b0f      	cmp	r3, #15
 800dd98:	d915      	bls.n	800ddc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd9a:	4a18      	ldr	r2, [pc, #96]	@ (800ddfc <vPortValidateInterruptPriority+0x74>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4413      	add	r3, r2
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dda4:	4b16      	ldr	r3, [pc, #88]	@ (800de00 <vPortValidateInterruptPriority+0x78>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	7afa      	ldrb	r2, [r7, #11]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d20b      	bcs.n	800ddc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	607b      	str	r3, [r7, #4]
}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	e7fd      	b.n	800ddc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ddc6:	4b0f      	ldr	r3, [pc, #60]	@ (800de04 <vPortValidateInterruptPriority+0x7c>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ddce:	4b0e      	ldr	r3, [pc, #56]	@ (800de08 <vPortValidateInterruptPriority+0x80>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d90b      	bls.n	800ddee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	603b      	str	r3, [r7, #0]
}
 800dde8:	bf00      	nop
 800ddea:	bf00      	nop
 800ddec:	e7fd      	b.n	800ddea <vPortValidateInterruptPriority+0x62>
	}
 800ddee:	bf00      	nop
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	e000e3f0 	.word	0xe000e3f0
 800de00:	20010a28 	.word	0x20010a28
 800de04:	e000ed0c 	.word	0xe000ed0c
 800de08:	20010a2c 	.word	0x20010a2c

0800de0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b08a      	sub	sp, #40	@ 0x28
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de14:	2300      	movs	r3, #0
 800de16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de18:	f7fe f96a 	bl	800c0f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de1c:	4b5c      	ldr	r3, [pc, #368]	@ (800df90 <pvPortMalloc+0x184>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de24:	f000 f924 	bl	800e070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de28:	4b5a      	ldr	r3, [pc, #360]	@ (800df94 <pvPortMalloc+0x188>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4013      	ands	r3, r2
 800de30:	2b00      	cmp	r3, #0
 800de32:	f040 8095 	bne.w	800df60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01e      	beq.n	800de7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800de3c:	2208      	movs	r2, #8
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4413      	add	r3, r2
 800de42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f003 0307 	and.w	r3, r3, #7
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d015      	beq.n	800de7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f023 0307 	bic.w	r3, r3, #7
 800de54:	3308      	adds	r3, #8
 800de56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f003 0307 	and.w	r3, r3, #7
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00b      	beq.n	800de7a <pvPortMalloc+0x6e>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	617b      	str	r3, [r7, #20]
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	e7fd      	b.n	800de76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d06f      	beq.n	800df60 <pvPortMalloc+0x154>
 800de80:	4b45      	ldr	r3, [pc, #276]	@ (800df98 <pvPortMalloc+0x18c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	429a      	cmp	r2, r3
 800de88:	d86a      	bhi.n	800df60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de8a:	4b44      	ldr	r3, [pc, #272]	@ (800df9c <pvPortMalloc+0x190>)
 800de8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de8e:	4b43      	ldr	r3, [pc, #268]	@ (800df9c <pvPortMalloc+0x190>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de94:	e004      	b.n	800dea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800de96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d903      	bls.n	800deb2 <pvPortMalloc+0xa6>
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1f1      	bne.n	800de96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800deb2:	4b37      	ldr	r3, [pc, #220]	@ (800df90 <pvPortMalloc+0x184>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb8:	429a      	cmp	r2, r3
 800deba:	d051      	beq.n	800df60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2208      	movs	r2, #8
 800dec2:	4413      	add	r3, r2
 800dec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	6a3b      	ldr	r3, [r7, #32]
 800decc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	1ad2      	subs	r2, r2, r3
 800ded6:	2308      	movs	r3, #8
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	429a      	cmp	r2, r3
 800dedc:	d920      	bls.n	800df20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4413      	add	r3, r2
 800dee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00b      	beq.n	800df08 <pvPortMalloc+0xfc>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	613b      	str	r3, [r7, #16]
}
 800df02:	bf00      	nop
 800df04:	bf00      	nop
 800df06:	e7fd      	b.n	800df04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	1ad2      	subs	r2, r2, r3
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df1a:	69b8      	ldr	r0, [r7, #24]
 800df1c:	f000 f90a 	bl	800e134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df20:	4b1d      	ldr	r3, [pc, #116]	@ (800df98 <pvPortMalloc+0x18c>)
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	4a1b      	ldr	r2, [pc, #108]	@ (800df98 <pvPortMalloc+0x18c>)
 800df2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df2e:	4b1a      	ldr	r3, [pc, #104]	@ (800df98 <pvPortMalloc+0x18c>)
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa0 <pvPortMalloc+0x194>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d203      	bcs.n	800df42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df3a:	4b17      	ldr	r3, [pc, #92]	@ (800df98 <pvPortMalloc+0x18c>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a18      	ldr	r2, [pc, #96]	@ (800dfa0 <pvPortMalloc+0x194>)
 800df40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df44:	685a      	ldr	r2, [r3, #4]
 800df46:	4b13      	ldr	r3, [pc, #76]	@ (800df94 <pvPortMalloc+0x188>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	431a      	orrs	r2, r3
 800df4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df56:	4b13      	ldr	r3, [pc, #76]	@ (800dfa4 <pvPortMalloc+0x198>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3301      	adds	r3, #1
 800df5c:	4a11      	ldr	r2, [pc, #68]	@ (800dfa4 <pvPortMalloc+0x198>)
 800df5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df60:	f7fe f8d4 	bl	800c10c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f003 0307 	and.w	r3, r3, #7
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00b      	beq.n	800df86 <pvPortMalloc+0x17a>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	60fb      	str	r3, [r7, #12]
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	e7fd      	b.n	800df82 <pvPortMalloc+0x176>
	return pvReturn;
 800df86:	69fb      	ldr	r3, [r7, #28]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3728      	adds	r7, #40	@ 0x28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	2001aa38 	.word	0x2001aa38
 800df94:	2001aa4c 	.word	0x2001aa4c
 800df98:	2001aa3c 	.word	0x2001aa3c
 800df9c:	2001aa30 	.word	0x2001aa30
 800dfa0:	2001aa40 	.word	0x2001aa40
 800dfa4:	2001aa44 	.word	0x2001aa44

0800dfa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d04f      	beq.n	800e05a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfba:	2308      	movs	r3, #8
 800dfbc:	425b      	negs	r3, r3
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	4b25      	ldr	r3, [pc, #148]	@ (800e064 <vPortFree+0xbc>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10b      	bne.n	800dfee <vPortFree+0x46>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	60fb      	str	r3, [r7, #12]
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00b      	beq.n	800e00e <vPortFree+0x66>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	60bb      	str	r3, [r7, #8]
}
 800e008:	bf00      	nop
 800e00a:	bf00      	nop
 800e00c:	e7fd      	b.n	800e00a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	685a      	ldr	r2, [r3, #4]
 800e012:	4b14      	ldr	r3, [pc, #80]	@ (800e064 <vPortFree+0xbc>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4013      	ands	r3, r2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01e      	beq.n	800e05a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d11a      	bne.n	800e05a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	4b0e      	ldr	r3, [pc, #56]	@ (800e064 <vPortFree+0xbc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	43db      	mvns	r3, r3
 800e02e:	401a      	ands	r2, r3
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e034:	f7fe f85c 	bl	800c0f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	4b0a      	ldr	r3, [pc, #40]	@ (800e068 <vPortFree+0xc0>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4413      	add	r3, r2
 800e042:	4a09      	ldr	r2, [pc, #36]	@ (800e068 <vPortFree+0xc0>)
 800e044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e046:	6938      	ldr	r0, [r7, #16]
 800e048:	f000 f874 	bl	800e134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e04c:	4b07      	ldr	r3, [pc, #28]	@ (800e06c <vPortFree+0xc4>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	4a06      	ldr	r2, [pc, #24]	@ (800e06c <vPortFree+0xc4>)
 800e054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e056:	f7fe f859 	bl	800c10c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e05a:	bf00      	nop
 800e05c:	3718      	adds	r7, #24
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	2001aa4c 	.word	0x2001aa4c
 800e068:	2001aa3c 	.word	0x2001aa3c
 800e06c:	2001aa48 	.word	0x2001aa48

0800e070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e076:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800e07a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e07c:	4b27      	ldr	r3, [pc, #156]	@ (800e11c <prvHeapInit+0xac>)
 800e07e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f003 0307 	and.w	r3, r3, #7
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00c      	beq.n	800e0a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	3307      	adds	r3, #7
 800e08e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f023 0307 	bic.w	r3, r3, #7
 800e096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	4a1f      	ldr	r2, [pc, #124]	@ (800e11c <prvHeapInit+0xac>)
 800e0a0:	4413      	add	r3, r2
 800e0a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e120 <prvHeapInit+0xb0>)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e120 <prvHeapInit+0xb0>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e0bc:	2208      	movs	r2, #8
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	1a9b      	subs	r3, r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f023 0307 	bic.w	r3, r3, #7
 800e0ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4a15      	ldr	r2, [pc, #84]	@ (800e124 <prvHeapInit+0xb4>)
 800e0d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0d2:	4b14      	ldr	r3, [pc, #80]	@ (800e124 <prvHeapInit+0xb4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0da:	4b12      	ldr	r3, [pc, #72]	@ (800e124 <prvHeapInit+0xb4>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	1ad2      	subs	r2, r2, r3
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e124 <prvHeapInit+0xb4>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	4a0a      	ldr	r2, [pc, #40]	@ (800e128 <prvHeapInit+0xb8>)
 800e0fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	4a09      	ldr	r2, [pc, #36]	@ (800e12c <prvHeapInit+0xbc>)
 800e106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e108:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <prvHeapInit+0xc0>)
 800e10a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e10e:	601a      	str	r2, [r3, #0]
}
 800e110:	bf00      	nop
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	20010a30 	.word	0x20010a30
 800e120:	2001aa30 	.word	0x2001aa30
 800e124:	2001aa38 	.word	0x2001aa38
 800e128:	2001aa40 	.word	0x2001aa40
 800e12c:	2001aa3c 	.word	0x2001aa3c
 800e130:	2001aa4c 	.word	0x2001aa4c

0800e134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e13c:	4b28      	ldr	r3, [pc, #160]	@ (800e1e0 <prvInsertBlockIntoFreeList+0xac>)
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e002      	b.n	800e148 <prvInsertBlockIntoFreeList+0x14>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d8f7      	bhi.n	800e142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	4413      	add	r3, r2
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d108      	bne.n	800e176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	441a      	add	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	441a      	add	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	429a      	cmp	r2, r3
 800e188:	d118      	bne.n	800e1bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	4b15      	ldr	r3, [pc, #84]	@ (800e1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	429a      	cmp	r2, r3
 800e194:	d00d      	beq.n	800e1b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	441a      	add	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	e008      	b.n	800e1c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	e003      	b.n	800e1c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d002      	beq.n	800e1d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1d2:	bf00      	nop
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	2001aa30 	.word	0x2001aa30
 800e1e4:	2001aa38 	.word	0x2001aa38

0800e1e8 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e1e8:	4b04      	ldr	r3, [pc, #16]	@ (800e1fc <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	b10a      	cbz	r2, 800e1f2 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xa>
 800e1ee:	4803      	ldr	r0, [pc, #12]	@ (800e1fc <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e1f0:	4770      	bx	lr
 800e1f2:	4a03      	ldr	r2, [pc, #12]	@ (800e200 <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x18>)
 800e1f4:	4801      	ldr	r0, [pc, #4]	@ (800e1fc <rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>)
 800e1f6:	6812      	ldr	r2, [r2, #0]
 800e1f8:	601a      	str	r2, [r3, #0]
 800e1fa:	4770      	bx	lr
 800e1fc:	2000002c 	.word	0x2000002c
 800e200:	2000019c 	.word	0x2000019c

0800e204 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e204:	4a02      	ldr	r2, [pc, #8]	@ (800e210 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0xc>)
 800e206:	4b03      	ldr	r3, [pc, #12]	@ (800e214 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x10>)
 800e208:	6812      	ldr	r2, [r2, #0]
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	2000019c 	.word	0x2000019c
 800e214:	2000002c 	.word	0x2000002c

0800e218 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__position>:
 800e218:	6840      	ldr	r0, [r0, #4]
 800e21a:	4770      	bx	lr

0800e21c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__position>:
 800e21c:	6800      	ldr	r0, [r0, #0]
 800e21e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e222:	4770      	bx	lr

0800e224 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__position>:
 800e224:	6803      	ldr	r3, [r0, #0]
 800e226:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e22a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e22e:	e9c2 0100 	strd	r0, r1, [r2]
 800e232:	4770      	bx	lr

0800e234 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__position>:
 800e234:	6803      	ldr	r3, [r0, #0]
 800e236:	ed92 7b00 	vldr	d7, [r2]
 800e23a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e23e:	ed83 7b00 	vstr	d7, [r3]
 800e242:	4770      	bx	lr

0800e244 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_init_function>:
 800e244:	f004 bc7e 	b.w	8012b44 <actuator_msgs__msg__Actuators__init>

0800e248 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__Actuators_fini_function>:
 800e248:	f004 bccc 	b.w	8012be4 <actuator_msgs__msg__Actuators__fini>

0800e24c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__position>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	4604      	mov	r4, r0
 800e250:	460d      	mov	r5, r1
 800e252:	f004 f9b5 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 800e256:	4629      	mov	r1, r5
 800e258:	4620      	mov	r0, r4
 800e25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e25e:	f004 b995 	b.w	801258c <rosidl_runtime_c__double__Sequence__init>
 800e262:	bf00      	nop

0800e264 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__normalized>:
 800e264:	6840      	ldr	r0, [r0, #4]
 800e266:	4770      	bx	lr

0800e268 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__size_function__Actuators__velocity>:
 800e268:	6840      	ldr	r0, [r0, #4]
 800e26a:	4770      	bx	lr

0800e26c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__velocity>:
 800e26c:	6800      	ldr	r0, [r0, #0]
 800e26e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e272:	4770      	bx	lr

0800e274 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__position>:
 800e274:	6800      	ldr	r0, [r0, #0]
 800e276:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e27a:	4770      	bx	lr

0800e27c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_const_function__Actuators__normalized>:
 800e27c:	6800      	ldr	r0, [r0, #0]
 800e27e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e282:	4770      	bx	lr

0800e284 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__normalized>:
 800e284:	6800      	ldr	r0, [r0, #0]
 800e286:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e28a:	4770      	bx	lr

0800e28c <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__get_function__Actuators__velocity>:
 800e28c:	6800      	ldr	r0, [r0, #0]
 800e28e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e292:	4770      	bx	lr

0800e294 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__normalized>:
 800e294:	6803      	ldr	r3, [r0, #0]
 800e296:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e29a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e29e:	e9c2 0100 	strd	r0, r1, [r2]
 800e2a2:	4770      	bx	lr

0800e2a4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__normalized>:
 800e2a4:	6803      	ldr	r3, [r0, #0]
 800e2a6:	ed92 7b00 	vldr	d7, [r2]
 800e2aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e2ae:	ed83 7b00 	vstr	d7, [r3]
 800e2b2:	4770      	bx	lr

0800e2b4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__fetch_function__Actuators__velocity>:
 800e2b4:	6803      	ldr	r3, [r0, #0]
 800e2b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e2ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2be:	e9c2 0100 	strd	r0, r1, [r2]
 800e2c2:	4770      	bx	lr

0800e2c4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__assign_function__Actuators__velocity>:
 800e2c4:	6803      	ldr	r3, [r0, #0]
 800e2c6:	ed92 7b00 	vldr	d7, [r2]
 800e2ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e2ce:	ed83 7b00 	vstr	d7, [r3]
 800e2d2:	4770      	bx	lr

0800e2d4 <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__normalized>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	460d      	mov	r5, r1
 800e2da:	f004 f971 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 800e2de:	4629      	mov	r1, r5
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e6:	f004 b951 	b.w	801258c <rosidl_runtime_c__double__Sequence__init>
 800e2ea:	bf00      	nop

0800e2ec <actuator_msgs__msg__Actuators__rosidl_typesupport_introspection_c__resize_function__Actuators__velocity>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	f004 f965 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fe:	f004 b945 	b.w	801258c <rosidl_runtime_c__double__Sequence__init>
 800e302:	bf00      	nop

0800e304 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e304:	b508      	push	{r3, lr}
 800e306:	f004 fb17 	bl	8012938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e30a:	4b06      	ldr	r3, [pc, #24]	@ (800e324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e30c:	4906      	ldr	r1, [pc, #24]	@ (800e328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x24>)
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	60c8      	str	r0, [r1, #12]
 800e312:	b10a      	cbz	r2, 800e318 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x14>
 800e314:	4803      	ldr	r0, [pc, #12]	@ (800e324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e316:	bd08      	pop	{r3, pc}
 800e318:	4a04      	ldr	r2, [pc, #16]	@ (800e32c <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x28>)
 800e31a:	4802      	ldr	r0, [pc, #8]	@ (800e324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x20>)
 800e31c:	6812      	ldr	r2, [r2, #0]
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	bd08      	pop	{r3, pc}
 800e322:	bf00      	nop
 800e324:	2000004c 	.word	0x2000004c
 800e328:	20000064 	.word	0x20000064
 800e32c:	200001a0 	.word	0x200001a0

0800e330 <_Actuators__max_serialized_size>:
 800e330:	b500      	push	{lr}
 800e332:	b083      	sub	sp, #12
 800e334:	2301      	movs	r3, #1
 800e336:	2100      	movs	r1, #0
 800e338:	f10d 0007 	add.w	r0, sp, #7
 800e33c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e340:	f004 fb96 	bl	8012a70 <max_serialized_size_std_msgs__msg__Header>
 800e344:	b003      	add	sp, #12
 800e346:	f85d fb04 	ldr.w	pc, [sp], #4
 800e34a:	bf00      	nop

0800e34c <get_serialized_size_actuator_msgs__msg__Actuators>:
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	4606      	mov	r6, r0
 800e352:	b1f8      	cbz	r0, 800e394 <get_serialized_size_actuator_msgs__msg__Actuators+0x48>
 800e354:	460d      	mov	r5, r1
 800e356:	f004 fb13 	bl	8012980 <get_serialized_size_std_msgs__msg__Header>
 800e35a:	182f      	adds	r7, r5, r0
 800e35c:	2104      	movs	r1, #4
 800e35e:	4638      	mov	r0, r7
 800e360:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800e364:	f000 f94a 	bl	800e5fc <ucdr_alignment>
 800e368:	1d04      	adds	r4, r0, #4
 800e36a:	443c      	add	r4, r7
 800e36c:	f1b8 0f00 	cmp.w	r8, #0
 800e370:	d122      	bne.n	800e3b8 <get_serialized_size_actuator_msgs__msg__Actuators+0x6c>
 800e372:	4620      	mov	r0, r4
 800e374:	2104      	movs	r1, #4
 800e376:	6a77      	ldr	r7, [r6, #36]	@ 0x24
 800e378:	f000 f940 	bl	800e5fc <ucdr_alignment>
 800e37c:	4404      	add	r4, r0
 800e37e:	3404      	adds	r4, #4
 800e380:	b997      	cbnz	r7, 800e3a8 <get_serialized_size_actuator_msgs__msg__Actuators+0x5c>
 800e382:	4620      	mov	r0, r4
 800e384:	2104      	movs	r1, #4
 800e386:	6b36      	ldr	r6, [r6, #48]	@ 0x30
 800e388:	f000 f938 	bl	800e5fc <ucdr_alignment>
 800e38c:	4404      	add	r4, r0
 800e38e:	3404      	adds	r4, #4
 800e390:	b916      	cbnz	r6, 800e398 <get_serialized_size_actuator_msgs__msg__Actuators+0x4c>
 800e392:	1b60      	subs	r0, r4, r5
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	4620      	mov	r0, r4
 800e39a:	2108      	movs	r1, #8
 800e39c:	f000 f92e 	bl	800e5fc <ucdr_alignment>
 800e3a0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e3a4:	1984      	adds	r4, r0, r6
 800e3a6:	e7f4      	b.n	800e392 <get_serialized_size_actuator_msgs__msg__Actuators+0x46>
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	2108      	movs	r1, #8
 800e3ac:	f000 f926 	bl	800e5fc <ucdr_alignment>
 800e3b0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 800e3b4:	4404      	add	r4, r0
 800e3b6:	e7e4      	b.n	800e382 <get_serialized_size_actuator_msgs__msg__Actuators+0x36>
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	2108      	movs	r1, #8
 800e3bc:	f000 f91e 	bl	800e5fc <ucdr_alignment>
 800e3c0:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 800e3c4:	4404      	add	r4, r0
 800e3c6:	e7d4      	b.n	800e372 <get_serialized_size_actuator_msgs__msg__Actuators+0x26>

0800e3c8 <_Actuators__cdr_deserialize>:
 800e3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	b083      	sub	sp, #12
 800e3ce:	2900      	cmp	r1, #0
 800e3d0:	d04e      	beq.n	800e470 <_Actuators__cdr_deserialize+0xa8>
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	f004 fb56 	bl	8012a84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e3d8:	6843      	ldr	r3, [r0, #4]
 800e3da:	4621      	mov	r1, r4
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	4628      	mov	r0, r5
 800e3e0:	4798      	blx	r3
 800e3e2:	69e6      	ldr	r6, [r4, #28]
 800e3e4:	6961      	ldr	r1, [r4, #20]
 800e3e6:	ab01      	add	r3, sp, #4
 800e3e8:	4632      	mov	r2, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f000 f9e0 	bl	800e7b0 <ucdr_deserialize_sequence_double>
 800e3f0:	9b01      	ldr	r3, [sp, #4]
 800e3f2:	b9c8      	cbnz	r0, 800e428 <_Actuators__cdr_deserialize+0x60>
 800e3f4:	429e      	cmp	r6, r3
 800e3f6:	d33f      	bcc.n	800e478 <_Actuators__cdr_deserialize+0xb0>
 800e3f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3fa:	6a21      	ldr	r1, [r4, #32]
 800e3fc:	ab01      	add	r3, sp, #4
 800e3fe:	4632      	mov	r2, r6
 800e400:	4628      	mov	r0, r5
 800e402:	f000 f9d5 	bl	800e7b0 <ucdr_deserialize_sequence_double>
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	b310      	cbz	r0, 800e450 <_Actuators__cdr_deserialize+0x88>
 800e40a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e40c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800e40e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e410:	ab01      	add	r3, sp, #4
 800e412:	463a      	mov	r2, r7
 800e414:	4628      	mov	r0, r5
 800e416:	f000 f9cb 	bl	800e7b0 <ucdr_deserialize_sequence_double>
 800e41a:	9b01      	ldr	r3, [sp, #4]
 800e41c:	4606      	mov	r6, r0
 800e41e:	b128      	cbz	r0, 800e42c <_Actuators__cdr_deserialize+0x64>
 800e420:	6323      	str	r3, [r4, #48]	@ 0x30
 800e422:	4630      	mov	r0, r6
 800e424:	b003      	add	sp, #12
 800e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e428:	61a3      	str	r3, [r4, #24]
 800e42a:	e7e5      	b.n	800e3f8 <_Actuators__cdr_deserialize+0x30>
 800e42c:	429f      	cmp	r7, r3
 800e42e:	d2f8      	bcs.n	800e422 <_Actuators__cdr_deserialize+0x5a>
 800e430:	2301      	movs	r3, #1
 800e432:	75a8      	strb	r0, [r5, #22]
 800e434:	756b      	strb	r3, [r5, #21]
 800e436:	2108      	movs	r1, #8
 800e438:	6320      	str	r0, [r4, #48]	@ 0x30
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 f8f4 	bl	800e628 <ucdr_align_to>
 800e440:	9901      	ldr	r1, [sp, #4]
 800e442:	4628      	mov	r0, r5
 800e444:	00c9      	lsls	r1, r1, #3
 800e446:	f000 f925 	bl	800e694 <ucdr_advance_buffer>
 800e44a:	4630      	mov	r0, r6
 800e44c:	b003      	add	sp, #12
 800e44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e450:	429e      	cmp	r6, r3
 800e452:	d2db      	bcs.n	800e40c <_Actuators__cdr_deserialize+0x44>
 800e454:	2301      	movs	r3, #1
 800e456:	75a8      	strb	r0, [r5, #22]
 800e458:	756b      	strb	r3, [r5, #21]
 800e45a:	2108      	movs	r1, #8
 800e45c:	6260      	str	r0, [r4, #36]	@ 0x24
 800e45e:	4628      	mov	r0, r5
 800e460:	f000 f8e2 	bl	800e628 <ucdr_align_to>
 800e464:	9901      	ldr	r1, [sp, #4]
 800e466:	4628      	mov	r0, r5
 800e468:	00c9      	lsls	r1, r1, #3
 800e46a:	f000 f913 	bl	800e694 <ucdr_advance_buffer>
 800e46e:	e7cd      	b.n	800e40c <_Actuators__cdr_deserialize+0x44>
 800e470:	460e      	mov	r6, r1
 800e472:	4630      	mov	r0, r6
 800e474:	b003      	add	sp, #12
 800e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e478:	2301      	movs	r3, #1
 800e47a:	75a8      	strb	r0, [r5, #22]
 800e47c:	756b      	strb	r3, [r5, #21]
 800e47e:	2108      	movs	r1, #8
 800e480:	61a0      	str	r0, [r4, #24]
 800e482:	4628      	mov	r0, r5
 800e484:	f000 f8d0 	bl	800e628 <ucdr_align_to>
 800e488:	9901      	ldr	r1, [sp, #4]
 800e48a:	4628      	mov	r0, r5
 800e48c:	00c9      	lsls	r1, r1, #3
 800e48e:	f000 f901 	bl	800e694 <ucdr_advance_buffer>
 800e492:	e7b1      	b.n	800e3f8 <_Actuators__cdr_deserialize+0x30>

0800e494 <_Actuators__cdr_serialize>:
 800e494:	b1d0      	cbz	r0, 800e4cc <_Actuators__cdr_serialize+0x38>
 800e496:	b538      	push	{r3, r4, r5, lr}
 800e498:	460d      	mov	r5, r1
 800e49a:	4604      	mov	r4, r0
 800e49c:	f004 faf2 	bl	8012a84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e4a0:	6843      	ldr	r3, [r0, #4]
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	4798      	blx	r3
 800e4aa:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f000 f96c 	bl	800e78c <ucdr_serialize_sequence_double>
 800e4b4:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f000 f967 	bl	800e78c <ucdr_serialize_sequence_double>
 800e4be:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4c8:	f000 b960 	b.w	800e78c <ucdr_serialize_sequence_double>
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop

0800e4d0 <_Actuators__get_serialized_size>:
 800e4d0:	b570      	push	{r4, r5, r6, lr}
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	b1d0      	cbz	r0, 800e50c <_Actuators__get_serialized_size+0x3c>
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	f004 fa52 	bl	8012980 <get_serialized_size_std_msgs__msg__Header>
 800e4dc:	2104      	movs	r1, #4
 800e4de:	4604      	mov	r4, r0
 800e4e0:	69ae      	ldr	r6, [r5, #24]
 800e4e2:	f000 f88b 	bl	800e5fc <ucdr_alignment>
 800e4e6:	4404      	add	r4, r0
 800e4e8:	3404      	adds	r4, #4
 800e4ea:	bb16      	cbnz	r6, 800e532 <_Actuators__get_serialized_size+0x62>
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	2104      	movs	r1, #4
 800e4f0:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800e4f2:	f000 f883 	bl	800e5fc <ucdr_alignment>
 800e4f6:	4404      	add	r4, r0
 800e4f8:	3404      	adds	r4, #4
 800e4fa:	b996      	cbnz	r6, 800e522 <_Actuators__get_serialized_size+0x52>
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	2104      	movs	r1, #4
 800e500:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 800e502:	f000 f87b 	bl	800e5fc <ucdr_alignment>
 800e506:	4404      	add	r4, r0
 800e508:	1d25      	adds	r5, r4, #4
 800e50a:	b90e      	cbnz	r6, 800e510 <_Actuators__get_serialized_size+0x40>
 800e50c:	4628      	mov	r0, r5
 800e50e:	bd70      	pop	{r4, r5, r6, pc}
 800e510:	2108      	movs	r1, #8
 800e512:	4628      	mov	r0, r5
 800e514:	f000 f872 	bl	800e5fc <ucdr_alignment>
 800e518:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 800e51c:	4405      	add	r5, r0
 800e51e:	4628      	mov	r0, r5
 800e520:	bd70      	pop	{r4, r5, r6, pc}
 800e522:	4620      	mov	r0, r4
 800e524:	2108      	movs	r1, #8
 800e526:	f000 f869 	bl	800e5fc <ucdr_alignment>
 800e52a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e52e:	4404      	add	r4, r0
 800e530:	e7e4      	b.n	800e4fc <_Actuators__get_serialized_size+0x2c>
 800e532:	4620      	mov	r0, r4
 800e534:	2108      	movs	r1, #8
 800e536:	f000 f861 	bl	800e5fc <ucdr_alignment>
 800e53a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e53e:	4404      	add	r4, r0
 800e540:	e7d4      	b.n	800e4ec <_Actuators__get_serialized_size+0x1c>
 800e542:	bf00      	nop

0800e544 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators>:
 800e544:	4800      	ldr	r0, [pc, #0]	@ (800e548 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__actuator_msgs__msg__Actuators+0x4>)
 800e546:	4770      	bx	lr
 800e548:	20000154 	.word	0x20000154

0800e54c <ucdr_check_buffer_available_for>:
 800e54c:	7d83      	ldrb	r3, [r0, #22]
 800e54e:	b93b      	cbnz	r3, 800e560 <ucdr_check_buffer_available_for+0x14>
 800e550:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e554:	440b      	add	r3, r1
 800e556:	4298      	cmp	r0, r3
 800e558:	bf34      	ite	cc
 800e55a:	2000      	movcc	r0, #0
 800e55c:	2001      	movcs	r0, #1
 800e55e:	4770      	bx	lr
 800e560:	2000      	movs	r0, #0
 800e562:	4770      	bx	lr

0800e564 <ucdr_check_final_buffer_behavior>:
 800e564:	7d83      	ldrb	r3, [r0, #22]
 800e566:	b943      	cbnz	r3, 800e57a <ucdr_check_final_buffer_behavior+0x16>
 800e568:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e56c:	4291      	cmp	r1, r2
 800e56e:	b510      	push	{r4, lr}
 800e570:	4604      	mov	r4, r0
 800e572:	d205      	bcs.n	800e580 <ucdr_check_final_buffer_behavior+0x1c>
 800e574:	2301      	movs	r3, #1
 800e576:	4618      	mov	r0, r3
 800e578:	bd10      	pop	{r4, pc}
 800e57a:	2300      	movs	r3, #0
 800e57c:	4618      	mov	r0, r3
 800e57e:	4770      	bx	lr
 800e580:	6982      	ldr	r2, [r0, #24]
 800e582:	b13a      	cbz	r2, 800e594 <ucdr_check_final_buffer_behavior+0x30>
 800e584:	69c1      	ldr	r1, [r0, #28]
 800e586:	4790      	blx	r2
 800e588:	f080 0301 	eor.w	r3, r0, #1
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	75a0      	strb	r0, [r4, #22]
 800e590:	4618      	mov	r0, r3
 800e592:	bd10      	pop	{r4, pc}
 800e594:	2001      	movs	r0, #1
 800e596:	75a0      	strb	r0, [r4, #22]
 800e598:	e7fa      	b.n	800e590 <ucdr_check_final_buffer_behavior+0x2c>
 800e59a:	bf00      	nop

0800e59c <ucdr_set_on_full_buffer_callback>:
 800e59c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop

0800e5a4 <ucdr_init_buffer_origin_offset_endian>:
 800e5a4:	b410      	push	{r4}
 800e5a6:	9c01      	ldr	r4, [sp, #4]
 800e5a8:	6001      	str	r1, [r0, #0]
 800e5aa:	440a      	add	r2, r1
 800e5ac:	6042      	str	r2, [r0, #4]
 800e5ae:	190a      	adds	r2, r1, r4
 800e5b0:	441c      	add	r4, r3
 800e5b2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e5b6:	6082      	str	r2, [r0, #8]
 800e5b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e5bc:	7503      	strb	r3, [r0, #20]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5c8:	7542      	strb	r2, [r0, #21]
 800e5ca:	7582      	strb	r2, [r0, #22]
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop

0800e5d0 <ucdr_init_buffer_origin_offset>:
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	9c04      	ldr	r4, [sp, #16]
 800e5d6:	9400      	str	r4, [sp, #0]
 800e5d8:	2401      	movs	r4, #1
 800e5da:	9401      	str	r4, [sp, #4]
 800e5dc:	f7ff ffe2 	bl	800e5a4 <ucdr_init_buffer_origin_offset_endian>
 800e5e0:	b002      	add	sp, #8
 800e5e2:	bd10      	pop	{r4, pc}

0800e5e4 <ucdr_init_buffer_origin>:
 800e5e4:	b510      	push	{r4, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	2400      	movs	r4, #0
 800e5ea:	9400      	str	r4, [sp, #0]
 800e5ec:	f7ff fff0 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 800e5f0:	b002      	add	sp, #8
 800e5f2:	bd10      	pop	{r4, pc}

0800e5f4 <ucdr_init_buffer>:
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f7ff bff5 	b.w	800e5e4 <ucdr_init_buffer_origin>
 800e5fa:	bf00      	nop

0800e5fc <ucdr_alignment>:
 800e5fc:	fbb0 f3f1 	udiv	r3, r0, r1
 800e600:	fb03 0011 	mls	r0, r3, r1, r0
 800e604:	1a08      	subs	r0, r1, r0
 800e606:	3901      	subs	r1, #1
 800e608:	4008      	ands	r0, r1
 800e60a:	4770      	bx	lr

0800e60c <ucdr_buffer_alignment>:
 800e60c:	7d43      	ldrb	r3, [r0, #21]
 800e60e:	428b      	cmp	r3, r1
 800e610:	d208      	bcs.n	800e624 <ucdr_buffer_alignment+0x18>
 800e612:	6900      	ldr	r0, [r0, #16]
 800e614:	fbb0 f3f1 	udiv	r3, r0, r1
 800e618:	fb01 0013 	mls	r0, r1, r3, r0
 800e61c:	1a08      	subs	r0, r1, r0
 800e61e:	3901      	subs	r1, #1
 800e620:	4008      	ands	r0, r1
 800e622:	4770      	bx	lr
 800e624:	2000      	movs	r0, #0
 800e626:	4770      	bx	lr

0800e628 <ucdr_align_to>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	460d      	mov	r5, r1
 800e62e:	f7ff ffed 	bl	800e60c <ucdr_buffer_alignment>
 800e632:	68a3      	ldr	r3, [r4, #8]
 800e634:	6861      	ldr	r1, [r4, #4]
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	7565      	strb	r5, [r4, #21]
 800e63a:	4403      	add	r3, r0
 800e63c:	428b      	cmp	r3, r1
 800e63e:	bf28      	it	cs
 800e640:	460b      	movcs	r3, r1
 800e642:	4402      	add	r2, r0
 800e644:	60a3      	str	r3, [r4, #8]
 800e646:	6122      	str	r2, [r4, #16]
 800e648:	bd38      	pop	{r3, r4, r5, pc}
 800e64a:	bf00      	nop

0800e64c <ucdr_buffer_length>:
 800e64c:	6882      	ldr	r2, [r0, #8]
 800e64e:	6800      	ldr	r0, [r0, #0]
 800e650:	1a10      	subs	r0, r2, r0
 800e652:	4770      	bx	lr

0800e654 <ucdr_buffer_remaining>:
 800e654:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e658:	1a10      	subs	r0, r2, r0
 800e65a:	4770      	bx	lr

0800e65c <ucdr_check_final_buffer_behavior_array>:
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	7d83      	ldrb	r3, [r0, #22]
 800e660:	b963      	cbnz	r3, 800e67c <ucdr_check_final_buffer_behavior_array+0x20>
 800e662:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e666:	429a      	cmp	r2, r3
 800e668:	4604      	mov	r4, r0
 800e66a:	460d      	mov	r5, r1
 800e66c:	d308      	bcc.n	800e680 <ucdr_check_final_buffer_behavior_array+0x24>
 800e66e:	b139      	cbz	r1, 800e680 <ucdr_check_final_buffer_behavior_array+0x24>
 800e670:	6983      	ldr	r3, [r0, #24]
 800e672:	b163      	cbz	r3, 800e68e <ucdr_check_final_buffer_behavior_array+0x32>
 800e674:	69c1      	ldr	r1, [r0, #28]
 800e676:	4798      	blx	r3
 800e678:	75a0      	strb	r0, [r4, #22]
 800e67a:	b108      	cbz	r0, 800e680 <ucdr_check_final_buffer_behavior_array+0x24>
 800e67c:	2000      	movs	r0, #0
 800e67e:	bd38      	pop	{r3, r4, r5, pc}
 800e680:	4620      	mov	r0, r4
 800e682:	f7ff ffe7 	bl	800e654 <ucdr_buffer_remaining>
 800e686:	42a8      	cmp	r0, r5
 800e688:	bf28      	it	cs
 800e68a:	4628      	movcs	r0, r5
 800e68c:	bd38      	pop	{r3, r4, r5, pc}
 800e68e:	2301      	movs	r3, #1
 800e690:	7583      	strb	r3, [r0, #22]
 800e692:	e7f3      	b.n	800e67c <ucdr_check_final_buffer_behavior_array+0x20>

0800e694 <ucdr_advance_buffer>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	460d      	mov	r5, r1
 800e69a:	f7ff ff57 	bl	800e54c <ucdr_check_buffer_available_for>
 800e69e:	b178      	cbz	r0, 800e6c0 <ucdr_advance_buffer+0x2c>
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	68a2      	ldr	r2, [r4, #8]
 800e6a4:	442b      	add	r3, r5
 800e6a6:	6123      	str	r3, [r4, #16]
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	442a      	add	r2, r5
 800e6ac:	7563      	strb	r3, [r4, #21]
 800e6ae:	60a2      	str	r2, [r4, #8]
 800e6b0:	bd38      	pop	{r3, r4, r5, pc}
 800e6b2:	68a2      	ldr	r2, [r4, #8]
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	4402      	add	r2, r0
 800e6b8:	4403      	add	r3, r0
 800e6ba:	1a2d      	subs	r5, r5, r0
 800e6bc:	60a2      	str	r2, [r4, #8]
 800e6be:	6123      	str	r3, [r4, #16]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f7ff ffc9 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	d1f1      	bne.n	800e6b2 <ucdr_advance_buffer+0x1e>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	7563      	strb	r3, [r4, #21]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}

0800e6d4 <ucdr_serialize_sequence_char>:
 800e6d4:	b570      	push	{r4, r5, r6, lr}
 800e6d6:	460e      	mov	r6, r1
 800e6d8:	4615      	mov	r5, r2
 800e6da:	7d01      	ldrb	r1, [r0, #20]
 800e6dc:	4604      	mov	r4, r0
 800e6de:	f005 fa0f 	bl	8013b00 <ucdr_serialize_endian_uint32_t>
 800e6e2:	b90d      	cbnz	r5, 800e6e8 <ucdr_serialize_sequence_char+0x14>
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	bd70      	pop	{r4, r5, r6, pc}
 800e6e8:	7d21      	ldrb	r1, [r4, #20]
 800e6ea:	462b      	mov	r3, r5
 800e6ec:	4632      	mov	r2, r6
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6f4:	f004 bca0 	b.w	8013038 <ucdr_serialize_endian_array_char>

0800e6f8 <ucdr_deserialize_sequence_char>:
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	461d      	mov	r5, r3
 800e6fe:	4616      	mov	r6, r2
 800e700:	460f      	mov	r7, r1
 800e702:	461a      	mov	r2, r3
 800e704:	7d01      	ldrb	r1, [r0, #20]
 800e706:	4604      	mov	r4, r0
 800e708:	f005 fb18 	bl	8013d3c <ucdr_deserialize_endian_uint32_t>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	429e      	cmp	r6, r3
 800e710:	d208      	bcs.n	800e724 <ucdr_deserialize_sequence_char+0x2c>
 800e712:	2201      	movs	r2, #1
 800e714:	75a2      	strb	r2, [r4, #22]
 800e716:	7d21      	ldrb	r1, [r4, #20]
 800e718:	463a      	mov	r2, r7
 800e71a:	4620      	mov	r0, r4
 800e71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e720:	f004 bcbc 	b.w	801309c <ucdr_deserialize_endian_array_char>
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1f6      	bne.n	800e716 <ucdr_deserialize_sequence_char+0x1e>
 800e728:	2001      	movs	r0, #1
 800e72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72e:	bf00      	nop

0800e730 <ucdr_serialize_sequence_uint8_t>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	460e      	mov	r6, r1
 800e734:	4615      	mov	r5, r2
 800e736:	7d01      	ldrb	r1, [r0, #20]
 800e738:	4604      	mov	r4, r0
 800e73a:	f005 f9e1 	bl	8013b00 <ucdr_serialize_endian_uint32_t>
 800e73e:	b90d      	cbnz	r5, 800e744 <ucdr_serialize_sequence_uint8_t+0x14>
 800e740:	2001      	movs	r0, #1
 800e742:	bd70      	pop	{r4, r5, r6, pc}
 800e744:	7d21      	ldrb	r1, [r4, #20]
 800e746:	462b      	mov	r3, r5
 800e748:	4632      	mov	r2, r6
 800e74a:	4620      	mov	r0, r4
 800e74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e750:	f004 bd08 	b.w	8013164 <ucdr_serialize_endian_array_uint8_t>

0800e754 <ucdr_deserialize_sequence_uint8_t>:
 800e754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e758:	461d      	mov	r5, r3
 800e75a:	4616      	mov	r6, r2
 800e75c:	460f      	mov	r7, r1
 800e75e:	461a      	mov	r2, r3
 800e760:	7d01      	ldrb	r1, [r0, #20]
 800e762:	4604      	mov	r4, r0
 800e764:	f005 faea 	bl	8013d3c <ucdr_deserialize_endian_uint32_t>
 800e768:	682b      	ldr	r3, [r5, #0]
 800e76a:	429e      	cmp	r6, r3
 800e76c:	d208      	bcs.n	800e780 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800e76e:	2201      	movs	r2, #1
 800e770:	75a2      	strb	r2, [r4, #22]
 800e772:	7d21      	ldrb	r1, [r4, #20]
 800e774:	463a      	mov	r2, r7
 800e776:	4620      	mov	r0, r4
 800e778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e77c:	f004 bd56 	b.w	801322c <ucdr_deserialize_endian_array_uint8_t>
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1f6      	bne.n	800e772 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800e784:	2001      	movs	r0, #1
 800e786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78a:	bf00      	nop

0800e78c <ucdr_serialize_sequence_double>:
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	460e      	mov	r6, r1
 800e790:	4615      	mov	r5, r2
 800e792:	7d01      	ldrb	r1, [r0, #20]
 800e794:	4604      	mov	r4, r0
 800e796:	f005 f9b3 	bl	8013b00 <ucdr_serialize_endian_uint32_t>
 800e79a:	b90d      	cbnz	r5, 800e7a0 <ucdr_serialize_sequence_double+0x14>
 800e79c:	2001      	movs	r0, #1
 800e79e:	bd70      	pop	{r4, r5, r6, pc}
 800e7a0:	7d21      	ldrb	r1, [r4, #20]
 800e7a2:	462b      	mov	r3, r5
 800e7a4:	4632      	mov	r2, r6
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7ac:	f004 bdc4 	b.w	8013338 <ucdr_serialize_endian_array_double>

0800e7b0 <ucdr_deserialize_sequence_double>:
 800e7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b4:	461d      	mov	r5, r3
 800e7b6:	4616      	mov	r6, r2
 800e7b8:	460f      	mov	r7, r1
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	7d01      	ldrb	r1, [r0, #20]
 800e7be:	4604      	mov	r4, r0
 800e7c0:	f005 fabc 	bl	8013d3c <ucdr_deserialize_endian_uint32_t>
 800e7c4:	682b      	ldr	r3, [r5, #0]
 800e7c6:	429e      	cmp	r6, r3
 800e7c8:	d208      	bcs.n	800e7dc <ucdr_deserialize_sequence_double+0x2c>
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	75a2      	strb	r2, [r4, #22]
 800e7ce:	7d21      	ldrb	r1, [r4, #20]
 800e7d0:	463a      	mov	r2, r7
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d8:	f004 be58 	b.w	801348c <ucdr_deserialize_endian_array_double>
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d1f6      	bne.n	800e7ce <ucdr_deserialize_sequence_double+0x1e>
 800e7e0:	2001      	movs	r0, #1
 800e7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e6:	bf00      	nop

0800e7e8 <rcl_get_zero_initialized_init_options>:
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	4770      	bx	lr

0800e7ec <rcl_init_options_init>:
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	b570      	push	{r4, r5, r6, lr}
 800e7f0:	b09e      	sub	sp, #120	@ 0x78
 800e7f2:	ad23      	add	r5, sp, #140	@ 0x8c
 800e7f4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d046      	beq.n	800e88a <rcl_init_options_init+0x9e>
 800e7fc:	6803      	ldr	r3, [r0, #0]
 800e7fe:	4604      	mov	r4, r0
 800e800:	b133      	cbz	r3, 800e810 <rcl_init_options_init+0x24>
 800e802:	2564      	movs	r5, #100	@ 0x64
 800e804:	4628      	mov	r0, r5
 800e806:	b01e      	add	sp, #120	@ 0x78
 800e808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e80c:	b004      	add	sp, #16
 800e80e:	4770      	bx	lr
 800e810:	4628      	mov	r0, r5
 800e812:	f001 ffd9 	bl	80107c8 <rcutils_allocator_is_valid>
 800e816:	2800      	cmp	r0, #0
 800e818:	d037      	beq.n	800e88a <rcl_init_options_init+0x9e>
 800e81a:	46ae      	mov	lr, r5
 800e81c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e820:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e828:	f8de 3000 	ldr.w	r3, [lr]
 800e82c:	f8cc 3000 	str.w	r3, [ip]
 800e830:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e832:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e834:	2070      	movs	r0, #112	@ 0x70
 800e836:	4798      	blx	r3
 800e838:	4606      	mov	r6, r0
 800e83a:	6020      	str	r0, [r4, #0]
 800e83c:	b338      	cbz	r0, 800e88e <rcl_init_options_init+0xa2>
 800e83e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e842:	4686      	mov	lr, r0
 800e844:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e848:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e84c:	f8dc 3000 	ldr.w	r3, [ip]
 800e850:	f8ce 3000 	str.w	r3, [lr]
 800e854:	a802      	add	r0, sp, #8
 800e856:	f002 fa89 	bl	8010d6c <rmw_get_zero_initialized_init_options>
 800e85a:	2258      	movs	r2, #88	@ 0x58
 800e85c:	a902      	add	r1, sp, #8
 800e85e:	f106 0018 	add.w	r0, r6, #24
 800e862:	f00f fbde 	bl	801e022 <memcpy>
 800e866:	ab26      	add	r3, sp, #152	@ 0x98
 800e868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e86c:	6826      	ldr	r6, [r4, #0]
 800e86e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e872:	f106 0018 	add.w	r0, r6, #24
 800e876:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800e87a:	f002 fb9b 	bl	8010fb4 <rmw_init_options_init>
 800e87e:	4605      	mov	r5, r0
 800e880:	b938      	cbnz	r0, 800e892 <rcl_init_options_init+0xa6>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 800e888:	e7bc      	b.n	800e804 <rcl_init_options_init+0x18>
 800e88a:	250b      	movs	r5, #11
 800e88c:	e7ba      	b.n	800e804 <rcl_init_options_init+0x18>
 800e88e:	250a      	movs	r5, #10
 800e890:	e7b8      	b.n	800e804 <rcl_init_options_init+0x18>
 800e892:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e894:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800e896:	6820      	ldr	r0, [r4, #0]
 800e898:	4798      	blx	r3
 800e89a:	4628      	mov	r0, r5
 800e89c:	f009 fe4e 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 800e8a0:	4605      	mov	r5, r0
 800e8a2:	e7af      	b.n	800e804 <rcl_init_options_init+0x18>

0800e8a4 <rcl_init_options_fini>:
 800e8a4:	b530      	push	{r4, r5, lr}
 800e8a6:	b087      	sub	sp, #28
 800e8a8:	b1f0      	cbz	r0, 800e8e8 <rcl_init_options_fini+0x44>
 800e8aa:	6803      	ldr	r3, [r0, #0]
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	b1db      	cbz	r3, 800e8e8 <rcl_init_options_fini+0x44>
 800e8b0:	469c      	mov	ip, r3
 800e8b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8b6:	f10d 0e04 	add.w	lr, sp, #4
 800e8ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8be:	f8dc 3000 	ldr.w	r3, [ip]
 800e8c2:	f8ce 3000 	str.w	r3, [lr]
 800e8c6:	a801      	add	r0, sp, #4
 800e8c8:	f001 ff7e 	bl	80107c8 <rcutils_allocator_is_valid>
 800e8cc:	b160      	cbz	r0, 800e8e8 <rcl_init_options_fini+0x44>
 800e8ce:	6820      	ldr	r0, [r4, #0]
 800e8d0:	3018      	adds	r0, #24
 800e8d2:	f002 fc0b 	bl	80110ec <rmw_init_options_fini>
 800e8d6:	4605      	mov	r5, r0
 800e8d8:	b950      	cbnz	r0, 800e8f0 <rcl_init_options_fini+0x4c>
 800e8da:	6820      	ldr	r0, [r4, #0]
 800e8dc:	9b02      	ldr	r3, [sp, #8]
 800e8de:	9905      	ldr	r1, [sp, #20]
 800e8e0:	4798      	blx	r3
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	b007      	add	sp, #28
 800e8e6:	bd30      	pop	{r4, r5, pc}
 800e8e8:	250b      	movs	r5, #11
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	b007      	add	sp, #28
 800e8ee:	bd30      	pop	{r4, r5, pc}
 800e8f0:	f009 fe24 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	e7f8      	b.n	800e8ea <rcl_init_options_fini+0x46>

0800e8f8 <rcl_init_options_copy>:
 800e8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8fa:	b09d      	sub	sp, #116	@ 0x74
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d04a      	beq.n	800e996 <rcl_init_options_copy+0x9e>
 800e900:	4604      	mov	r4, r0
 800e902:	6800      	ldr	r0, [r0, #0]
 800e904:	2800      	cmp	r0, #0
 800e906:	d046      	beq.n	800e996 <rcl_init_options_copy+0x9e>
 800e908:	460d      	mov	r5, r1
 800e90a:	f001 ff5d 	bl	80107c8 <rcutils_allocator_is_valid>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d041      	beq.n	800e996 <rcl_init_options_copy+0x9e>
 800e912:	2d00      	cmp	r5, #0
 800e914:	d03f      	beq.n	800e996 <rcl_init_options_copy+0x9e>
 800e916:	682b      	ldr	r3, [r5, #0]
 800e918:	b11b      	cbz	r3, 800e922 <rcl_init_options_copy+0x2a>
 800e91a:	2464      	movs	r4, #100	@ 0x64
 800e91c:	4620      	mov	r0, r4
 800e91e:	b01d      	add	sp, #116	@ 0x74
 800e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e922:	6826      	ldr	r6, [r4, #0]
 800e924:	46b6      	mov	lr, r6
 800e926:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e92a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e92e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e932:	f8de 3000 	ldr.w	r3, [lr]
 800e936:	6837      	ldr	r7, [r6, #0]
 800e938:	f8cc 3000 	str.w	r3, [ip]
 800e93c:	4619      	mov	r1, r3
 800e93e:	2070      	movs	r0, #112	@ 0x70
 800e940:	47b8      	blx	r7
 800e942:	4606      	mov	r6, r0
 800e944:	6028      	str	r0, [r5, #0]
 800e946:	b350      	cbz	r0, 800e99e <rcl_init_options_copy+0xa6>
 800e948:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800e94c:	4686      	mov	lr, r0
 800e94e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e952:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e956:	f8dc 3000 	ldr.w	r3, [ip]
 800e95a:	f8ce 3000 	str.w	r3, [lr]
 800e95e:	4668      	mov	r0, sp
 800e960:	f002 fa04 	bl	8010d6c <rmw_get_zero_initialized_init_options>
 800e964:	2258      	movs	r2, #88	@ 0x58
 800e966:	4669      	mov	r1, sp
 800e968:	f106 0018 	add.w	r0, r6, #24
 800e96c:	f00f fb59 	bl	801e022 <memcpy>
 800e970:	6820      	ldr	r0, [r4, #0]
 800e972:	6829      	ldr	r1, [r5, #0]
 800e974:	3018      	adds	r0, #24
 800e976:	3118      	adds	r1, #24
 800e978:	f002 fb84 	bl	8011084 <rmw_init_options_copy>
 800e97c:	4604      	mov	r4, r0
 800e97e:	2800      	cmp	r0, #0
 800e980:	d0cc      	beq.n	800e91c <rcl_init_options_copy+0x24>
 800e982:	f001 ffed 	bl	8010960 <rcutils_get_error_string>
 800e986:	f002 f803 	bl	8010990 <rcutils_reset_error>
 800e98a:	4628      	mov	r0, r5
 800e98c:	f7ff ff8a 	bl	800e8a4 <rcl_init_options_fini>
 800e990:	b138      	cbz	r0, 800e9a2 <rcl_init_options_copy+0xaa>
 800e992:	4604      	mov	r4, r0
 800e994:	e7c2      	b.n	800e91c <rcl_init_options_copy+0x24>
 800e996:	240b      	movs	r4, #11
 800e998:	4620      	mov	r0, r4
 800e99a:	b01d      	add	sp, #116	@ 0x74
 800e99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e99e:	240a      	movs	r4, #10
 800e9a0:	e7bc      	b.n	800e91c <rcl_init_options_copy+0x24>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	b01d      	add	sp, #116	@ 0x74
 800e9a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e9aa:	f009 bdc7 	b.w	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 800e9ae:	bf00      	nop

0800e9b0 <rcl_init_options_set_domain_id>:
 800e9b0:	b120      	cbz	r0, 800e9bc <rcl_init_options_set_domain_id+0xc>
 800e9b2:	6803      	ldr	r3, [r0, #0]
 800e9b4:	b113      	cbz	r3, 800e9bc <rcl_init_options_set_domain_id+0xc>
 800e9b6:	6259      	str	r1, [r3, #36]	@ 0x24
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	4770      	bx	lr
 800e9bc:	200b      	movs	r0, #11
 800e9be:	4770      	bx	lr

0800e9c0 <rcl_get_zero_initialized_node>:
 800e9c0:	4a03      	ldr	r2, [pc, #12]	@ (800e9d0 <rcl_get_zero_initialized_node+0x10>)
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9c8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	4770      	bx	lr
 800e9d0:	080205f0 	.word	0x080205f0

0800e9d4 <rcl_node_init>:
 800e9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d8:	b0ab      	sub	sp, #172	@ 0xac
 800e9da:	4604      	mov	r4, r0
 800e9dc:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800e9de:	a825      	add	r0, sp, #148	@ 0x94
 800e9e0:	4689      	mov	r9, r1
 800e9e2:	4690      	mov	r8, r2
 800e9e4:	461f      	mov	r7, r3
 800e9e6:	f009 ff1b 	bl	8018820 <rcl_guard_condition_get_default_options>
 800e9ea:	2d00      	cmp	r5, #0
 800e9ec:	f000 80d8 	beq.w	800eba0 <rcl_node_init+0x1cc>
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	f001 fee9 	bl	80107c8 <rcutils_allocator_is_valid>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	f000 80d2 	beq.w	800eba0 <rcl_node_init+0x1cc>
 800e9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ea00:	f000 80ce 	beq.w	800eba0 <rcl_node_init+0x1cc>
 800ea04:	f1b8 0f00 	cmp.w	r8, #0
 800ea08:	f000 80ca 	beq.w	800eba0 <rcl_node_init+0x1cc>
 800ea0c:	2c00      	cmp	r4, #0
 800ea0e:	f000 80c7 	beq.w	800eba0 <rcl_node_init+0x1cc>
 800ea12:	6866      	ldr	r6, [r4, #4]
 800ea14:	2e00      	cmp	r6, #0
 800ea16:	f040 80ca 	bne.w	800ebae <rcl_node_init+0x1da>
 800ea1a:	2f00      	cmp	r7, #0
 800ea1c:	f000 80c0 	beq.w	800eba0 <rcl_node_init+0x1cc>
 800ea20:	4638      	mov	r0, r7
 800ea22:	f009 fdab 	bl	801857c <rcl_context_is_valid>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	f000 80bf 	beq.w	800ebaa <rcl_node_init+0x1d6>
 800ea2c:	4632      	mov	r2, r6
 800ea2e:	a924      	add	r1, sp, #144	@ 0x90
 800ea30:	4648      	mov	r0, r9
 800ea32:	9624      	str	r6, [sp, #144]	@ 0x90
 800ea34:	f002 fa50 	bl	8010ed8 <rmw_validate_node_name>
 800ea38:	4606      	mov	r6, r0
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	f040 80b1 	bne.w	800eba2 <rcl_node_init+0x1ce>
 800ea40:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f040 8104 	bne.w	800ec50 <rcl_node_init+0x27c>
 800ea48:	f898 3000 	ldrb.w	r3, [r8]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 80f0 	beq.w	800ec32 <rcl_node_init+0x25e>
 800ea52:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea54:	f000 80b0 	beq.w	800ebb8 <rcl_node_init+0x1e4>
 800ea58:	4b85      	ldr	r3, [pc, #532]	@ (800ec70 <rcl_node_init+0x29c>)
 800ea5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea5e:	9302      	str	r3, [sp, #8]
 800ea60:	692b      	ldr	r3, [r5, #16]
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea68:	9301      	str	r3, [sp, #4]
 800ea6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ea6e:	f001 ffab 	bl	80109c8 <rcutils_format_string_limit>
 800ea72:	4680      	mov	r8, r0
 800ea74:	f1b8 0f00 	cmp.w	r8, #0
 800ea78:	f000 80e8 	beq.w	800ec4c <rcl_node_init+0x278>
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	a924      	add	r1, sp, #144	@ 0x90
 800ea80:	4640      	mov	r0, r8
 800ea82:	9224      	str	r2, [sp, #144]	@ 0x90
 800ea84:	f002 fa0a 	bl	8010e9c <rmw_validate_namespace>
 800ea88:	4606      	mov	r6, r0
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f040 80a4 	bne.w	800ebd8 <rcl_node_init+0x204>
 800ea90:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800ea92:	2800      	cmp	r0, #0
 800ea94:	f040 809d 	bne.w	800ebd2 <rcl_node_init+0x1fe>
 800ea98:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 800ea9c:	2178      	movs	r1, #120	@ 0x78
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	4798      	blx	r3
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	6060      	str	r0, [r4, #4]
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	f000 80d6 	beq.w	800ec58 <rcl_node_init+0x284>
 800eaac:	a80a      	add	r0, sp, #40	@ 0x28
 800eaae:	f000 f961 	bl	800ed74 <rcl_node_get_default_options>
 800eab2:	a90a      	add	r1, sp, #40	@ 0x28
 800eab4:	4630      	mov	r0, r6
 800eab6:	2268      	movs	r2, #104	@ 0x68
 800eab8:	f00f fab3 	bl	801e022 <memcpy>
 800eabc:	6861      	ldr	r1, [r4, #4]
 800eabe:	6027      	str	r7, [r4, #0]
 800eac0:	4628      	mov	r0, r5
 800eac2:	f000 f965 	bl	800ed90 <rcl_node_options_copy>
 800eac6:	4606      	mov	r6, r0
 800eac8:	2800      	cmp	r0, #0
 800eaca:	f040 8085 	bne.w	800ebd8 <rcl_node_init+0x204>
 800eace:	4640      	mov	r0, r8
 800ead0:	f7f1 fc06 	bl	80002e0 <strlen>
 800ead4:	eb08 0300 	add.w	r3, r8, r0
 800ead8:	6866      	ldr	r6, [r4, #4]
 800eada:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eade:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800eae2:	2b2f      	cmp	r3, #47	@ 0x2f
 800eae4:	bf0c      	ite	eq
 800eae6:	4b63      	ldreq	r3, [pc, #396]	@ (800ec74 <rcl_node_init+0x2a0>)
 800eae8:	4b63      	ldrne	r3, [pc, #396]	@ (800ec78 <rcl_node_init+0x2a4>)
 800eaea:	9302      	str	r3, [sp, #8]
 800eaec:	692b      	ldr	r3, [r5, #16]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eaf4:	9301      	str	r3, [sp, #4]
 800eaf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800eafa:	f001 ff65 	bl	80109c8 <rcutils_format_string_limit>
 800eafe:	6863      	ldr	r3, [r4, #4]
 800eb00:	6770      	str	r0, [r6, #116]	@ 0x74
 800eb02:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800eb04:	2a00      	cmp	r2, #0
 800eb06:	f000 80a9 	beq.w	800ec5c <rcl_node_init+0x288>
 800eb0a:	6822      	ldr	r2, [r4, #0]
 800eb0c:	9307      	str	r3, [sp, #28]
 800eb0e:	6810      	ldr	r0, [r2, #0]
 800eb10:	4649      	mov	r1, r9
 800eb12:	3028      	adds	r0, #40	@ 0x28
 800eb14:	4642      	mov	r2, r8
 800eb16:	f002 fd65 	bl	80115e4 <rmw_create_node>
 800eb1a:	9b07      	ldr	r3, [sp, #28]
 800eb1c:	6698      	str	r0, [r3, #104]	@ 0x68
 800eb1e:	6863      	ldr	r3, [r4, #4]
 800eb20:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800eb22:	2800      	cmp	r0, #0
 800eb24:	f000 809d 	beq.w	800ec62 <rcl_node_init+0x28e>
 800eb28:	f002 fdee 	bl	8011708 <rmw_node_get_graph_guard_condition>
 800eb2c:	4681      	mov	r9, r0
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f000 809c 	beq.w	800ec6c <rcl_node_init+0x298>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	6929      	ldr	r1, [r5, #16]
 800eb38:	6866      	ldr	r6, [r4, #4]
 800eb3a:	2008      	movs	r0, #8
 800eb3c:	4798      	blx	r3
 800eb3e:	6863      	ldr	r3, [r4, #4]
 800eb40:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800eb42:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 800eb46:	f1ba 0f00 	cmp.w	sl, #0
 800eb4a:	f000 808d 	beq.w	800ec68 <rcl_node_init+0x294>
 800eb4e:	f10d 0b20 	add.w	fp, sp, #32
 800eb52:	4658      	mov	r0, fp
 800eb54:	f009 fd8c 	bl	8018670 <rcl_get_zero_initialized_guard_condition>
 800eb58:	e89b 0003 	ldmia.w	fp, {r0, r1}
 800eb5c:	6863      	ldr	r3, [r4, #4]
 800eb5e:	46ac      	mov	ip, r5
 800eb60:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800eb64:	e88a 0003 	stmia.w	sl, {r0, r1}
 800eb68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb6c:	ae25      	add	r6, sp, #148	@ 0x94
 800eb6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb70:	f8dc 3000 	ldr.w	r3, [ip]
 800eb74:	6033      	str	r3, [r6, #0]
 800eb76:	ab2a      	add	r3, sp, #168	@ 0xa8
 800eb78:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800eb7c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800eb80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800eb82:	463a      	mov	r2, r7
 800eb84:	4649      	mov	r1, r9
 800eb86:	4670      	mov	r0, lr
 800eb88:	f009 fdc8 	bl	801871c <rcl_guard_condition_init_from_rmw>
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	bb18      	cbnz	r0, 800ebd8 <rcl_node_init+0x204>
 800eb90:	686b      	ldr	r3, [r5, #4]
 800eb92:	6929      	ldr	r1, [r5, #16]
 800eb94:	4798      	blx	r3
 800eb96:	686b      	ldr	r3, [r5, #4]
 800eb98:	6929      	ldr	r1, [r5, #16]
 800eb9a:	4640      	mov	r0, r8
 800eb9c:	4798      	blx	r3
 800eb9e:	e000      	b.n	800eba2 <rcl_node_init+0x1ce>
 800eba0:	260b      	movs	r6, #11
 800eba2:	4630      	mov	r0, r6
 800eba4:	b02b      	add	sp, #172	@ 0xac
 800eba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebaa:	2665      	movs	r6, #101	@ 0x65
 800ebac:	e7f9      	b.n	800eba2 <rcl_node_init+0x1ce>
 800ebae:	2664      	movs	r6, #100	@ 0x64
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	b02b      	add	sp, #172	@ 0xac
 800ebb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb8:	f105 030c 	add.w	r3, r5, #12
 800ebbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ebc0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ebc4:	4640      	mov	r0, r8
 800ebc6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ebca:	f002 f81b 	bl	8010c04 <rcutils_strdup>
 800ebce:	4680      	mov	r8, r0
 800ebd0:	e750      	b.n	800ea74 <rcl_node_init+0xa0>
 800ebd2:	f002 f975 	bl	8010ec0 <rmw_namespace_validation_result_string>
 800ebd6:	26ca      	movs	r6, #202	@ 0xca
 800ebd8:	6863      	ldr	r3, [r4, #4]
 800ebda:	b1f3      	cbz	r3, 800ec1a <rcl_node_init+0x246>
 800ebdc:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ebde:	b138      	cbz	r0, 800ebf0 <rcl_node_init+0x21c>
 800ebe0:	f009 fdfc 	bl	80187dc <rcl_guard_condition_fini>
 800ebe4:	6863      	ldr	r3, [r4, #4]
 800ebe6:	6929      	ldr	r1, [r5, #16]
 800ebe8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ebea:	686b      	ldr	r3, [r5, #4]
 800ebec:	4798      	blx	r3
 800ebee:	6863      	ldr	r3, [r4, #4]
 800ebf0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ebf2:	b110      	cbz	r0, 800ebfa <rcl_node_init+0x226>
 800ebf4:	f002 fd0c 	bl	8011610 <rmw_destroy_node>
 800ebf8:	6863      	ldr	r3, [r4, #4]
 800ebfa:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ebfc:	6929      	ldr	r1, [r5, #16]
 800ebfe:	686b      	ldr	r3, [r5, #4]
 800ec00:	4798      	blx	r3
 800ec02:	6863      	ldr	r3, [r4, #4]
 800ec04:	6929      	ldr	r1, [r5, #16]
 800ec06:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ec08:	686b      	ldr	r3, [r5, #4]
 800ec0a:	4798      	blx	r3
 800ec0c:	6860      	ldr	r0, [r4, #4]
 800ec0e:	f000 f8dd 	bl	800edcc <rcl_node_options_fini>
 800ec12:	686b      	ldr	r3, [r5, #4]
 800ec14:	6929      	ldr	r1, [r5, #16]
 800ec16:	6860      	ldr	r0, [r4, #4]
 800ec18:	4798      	blx	r3
 800ec1a:	686b      	ldr	r3, [r5, #4]
 800ec1c:	6929      	ldr	r1, [r5, #16]
 800ec1e:	2000      	movs	r0, #0
 800ec20:	4798      	blx	r3
 800ec22:	686b      	ldr	r3, [r5, #4]
 800ec24:	6929      	ldr	r1, [r5, #16]
 800ec26:	4640      	mov	r0, r8
 800ec28:	4798      	blx	r3
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e9c4 3300 	strd	r3, r3, [r4]
 800ec30:	e7b7      	b.n	800eba2 <rcl_node_init+0x1ce>
 800ec32:	f105 030c 	add.w	r3, r5, #12
 800ec36:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ec3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ec3e:	480f      	ldr	r0, [pc, #60]	@ (800ec7c <rcl_node_init+0x2a8>)
 800ec40:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800ec44:	f001 ffde 	bl	8010c04 <rcutils_strdup>
 800ec48:	4680      	mov	r8, r0
 800ec4a:	e713      	b.n	800ea74 <rcl_node_init+0xa0>
 800ec4c:	260a      	movs	r6, #10
 800ec4e:	e7a8      	b.n	800eba2 <rcl_node_init+0x1ce>
 800ec50:	f002 f98e 	bl	8010f70 <rmw_node_name_validation_result_string>
 800ec54:	26c9      	movs	r6, #201	@ 0xc9
 800ec56:	e7a4      	b.n	800eba2 <rcl_node_init+0x1ce>
 800ec58:	260a      	movs	r6, #10
 800ec5a:	e7de      	b.n	800ec1a <rcl_node_init+0x246>
 800ec5c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec5e:	260a      	movs	r6, #10
 800ec60:	e7bd      	b.n	800ebde <rcl_node_init+0x20a>
 800ec62:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec64:	2601      	movs	r6, #1
 800ec66:	e7ba      	b.n	800ebde <rcl_node_init+0x20a>
 800ec68:	260a      	movs	r6, #10
 800ec6a:	e7c1      	b.n	800ebf0 <rcl_node_init+0x21c>
 800ec6c:	2601      	movs	r6, #1
 800ec6e:	e7b3      	b.n	800ebd8 <rcl_node_init+0x204>
 800ec70:	080205c0 	.word	0x080205c0
 800ec74:	080205c4 	.word	0x080205c4
 800ec78:	080205cc 	.word	0x080205cc
 800ec7c:	080205bc 	.word	0x080205bc

0800ec80 <rcl_node_fini>:
 800ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec82:	b318      	cbz	r0, 800eccc <rcl_node_fini+0x4c>
 800ec84:	6845      	ldr	r5, [r0, #4]
 800ec86:	4604      	mov	r4, r0
 800ec88:	b1f5      	cbz	r5, 800ecc8 <rcl_node_fini+0x48>
 800ec8a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800ec8c:	686e      	ldr	r6, [r5, #4]
 800ec8e:	692f      	ldr	r7, [r5, #16]
 800ec90:	f002 fcbe 	bl	8011610 <rmw_destroy_node>
 800ec94:	6863      	ldr	r3, [r4, #4]
 800ec96:	4605      	mov	r5, r0
 800ec98:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec9a:	f009 fd9f 	bl	80187dc <rcl_guard_condition_fini>
 800ec9e:	6863      	ldr	r3, [r4, #4]
 800eca0:	4305      	orrs	r5, r0
 800eca2:	4639      	mov	r1, r7
 800eca4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eca6:	bf14      	ite	ne
 800eca8:	2501      	movne	r5, #1
 800ecaa:	2500      	moveq	r5, #0
 800ecac:	47b0      	blx	r6
 800ecae:	6863      	ldr	r3, [r4, #4]
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ecb4:	47b0      	blx	r6
 800ecb6:	6863      	ldr	r3, [r4, #4]
 800ecb8:	4639      	mov	r1, r7
 800ecba:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ecbc:	47b0      	blx	r6
 800ecbe:	6860      	ldr	r0, [r4, #4]
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	47b0      	blx	r6
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	6063      	str	r3, [r4, #4]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eccc:	25c8      	movs	r5, #200	@ 0xc8
 800ecce:	4628      	mov	r0, r5
 800ecd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd2:	bf00      	nop

0800ecd4 <rcl_node_is_valid_except_context>:
 800ecd4:	b128      	cbz	r0, 800ece2 <rcl_node_is_valid_except_context+0xe>
 800ecd6:	6840      	ldr	r0, [r0, #4]
 800ecd8:	b118      	cbz	r0, 800ece2 <rcl_node_is_valid_except_context+0xe>
 800ecda:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ecdc:	3800      	subs	r0, #0
 800ecde:	bf18      	it	ne
 800ece0:	2001      	movne	r0, #1
 800ece2:	4770      	bx	lr

0800ece4 <rcl_node_is_valid>:
 800ece4:	b130      	cbz	r0, 800ecf4 <rcl_node_is_valid+0x10>
 800ece6:	6843      	ldr	r3, [r0, #4]
 800ece8:	b123      	cbz	r3, 800ecf4 <rcl_node_is_valid+0x10>
 800ecea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ecec:	b113      	cbz	r3, 800ecf4 <rcl_node_is_valid+0x10>
 800ecee:	6800      	ldr	r0, [r0, #0]
 800ecf0:	f009 bc44 	b.w	801857c <rcl_context_is_valid>
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	4770      	bx	lr

0800ecf8 <rcl_node_get_name>:
 800ecf8:	b120      	cbz	r0, 800ed04 <rcl_node_get_name+0xc>
 800ecfa:	6840      	ldr	r0, [r0, #4]
 800ecfc:	b110      	cbz	r0, 800ed04 <rcl_node_get_name+0xc>
 800ecfe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ed00:	b100      	cbz	r0, 800ed04 <rcl_node_get_name+0xc>
 800ed02:	6880      	ldr	r0, [r0, #8]
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop

0800ed08 <rcl_node_get_namespace>:
 800ed08:	b120      	cbz	r0, 800ed14 <rcl_node_get_namespace+0xc>
 800ed0a:	6840      	ldr	r0, [r0, #4]
 800ed0c:	b110      	cbz	r0, 800ed14 <rcl_node_get_namespace+0xc>
 800ed0e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ed10:	b100      	cbz	r0, 800ed14 <rcl_node_get_namespace+0xc>
 800ed12:	68c0      	ldr	r0, [r0, #12]
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop

0800ed18 <rcl_node_get_options>:
 800ed18:	b128      	cbz	r0, 800ed26 <rcl_node_get_options+0xe>
 800ed1a:	6840      	ldr	r0, [r0, #4]
 800ed1c:	b118      	cbz	r0, 800ed26 <rcl_node_get_options+0xe>
 800ed1e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	bf08      	it	eq
 800ed24:	2000      	moveq	r0, #0
 800ed26:	4770      	bx	lr

0800ed28 <rcl_node_get_rmw_handle>:
 800ed28:	b110      	cbz	r0, 800ed30 <rcl_node_get_rmw_handle+0x8>
 800ed2a:	6840      	ldr	r0, [r0, #4]
 800ed2c:	b100      	cbz	r0, 800ed30 <rcl_node_get_rmw_handle+0x8>
 800ed2e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop

0800ed34 <rcl_get_disable_loaned_message>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	2300      	movs	r3, #0
 800ed3a:	9301      	str	r3, [sp, #4]
 800ed3c:	b1a0      	cbz	r0, 800ed68 <rcl_get_disable_loaned_message+0x34>
 800ed3e:	4604      	mov	r4, r0
 800ed40:	a901      	add	r1, sp, #4
 800ed42:	480b      	ldr	r0, [pc, #44]	@ (800ed70 <rcl_get_disable_loaned_message+0x3c>)
 800ed44:	f001 fdf4 	bl	8010930 <rcutils_get_env>
 800ed48:	b110      	cbz	r0, 800ed50 <rcl_get_disable_loaned_message+0x1c>
 800ed4a:	2001      	movs	r0, #1
 800ed4c:	b002      	add	sp, #8
 800ed4e:	bd10      	pop	{r4, pc}
 800ed50:	9a01      	ldr	r2, [sp, #4]
 800ed52:	7813      	ldrb	r3, [r2, #0]
 800ed54:	3b31      	subs	r3, #49	@ 0x31
 800ed56:	bf08      	it	eq
 800ed58:	7853      	ldrbeq	r3, [r2, #1]
 800ed5a:	fab3 f383 	clz	r3, r3
 800ed5e:	095b      	lsrs	r3, r3, #5
 800ed60:	2000      	movs	r0, #0
 800ed62:	7023      	strb	r3, [r4, #0]
 800ed64:	b002      	add	sp, #8
 800ed66:	bd10      	pop	{r4, pc}
 800ed68:	200b      	movs	r0, #11
 800ed6a:	b002      	add	sp, #8
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	bf00      	nop
 800ed70:	080205d4 	.word	0x080205d4

0800ed74 <rcl_node_get_default_options>:
 800ed74:	b510      	push	{r4, lr}
 800ed76:	2253      	movs	r2, #83	@ 0x53
 800ed78:	4604      	mov	r4, r0
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	3015      	adds	r0, #21
 800ed7e:	f00f f81f 	bl	801ddc0 <memset>
 800ed82:	4620      	mov	r0, r4
 800ed84:	f001 fcf4 	bl	8010770 <rcutils_get_default_allocator>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	7523      	strb	r3, [r4, #20]
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	bd10      	pop	{r4, pc}

0800ed90 <rcl_node_options_copy>:
 800ed90:	b1d0      	cbz	r0, 800edc8 <rcl_node_options_copy+0x38>
 800ed92:	b570      	push	{r4, r5, r6, lr}
 800ed94:	460c      	mov	r4, r1
 800ed96:	b1a9      	cbz	r1, 800edc4 <rcl_node_options_copy+0x34>
 800ed98:	4288      	cmp	r0, r1
 800ed9a:	4684      	mov	ip, r0
 800ed9c:	d012      	beq.n	800edc4 <rcl_node_options_copy+0x34>
 800ed9e:	4605      	mov	r5, r0
 800eda0:	8a86      	ldrh	r6, [r0, #20]
 800eda2:	468e      	mov	lr, r1
 800eda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eda6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edaa:	682b      	ldr	r3, [r5, #0]
 800edac:	f8ce 3000 	str.w	r3, [lr]
 800edb0:	f10c 0118 	add.w	r1, ip, #24
 800edb4:	2250      	movs	r2, #80	@ 0x50
 800edb6:	82a6      	strh	r6, [r4, #20]
 800edb8:	f104 0018 	add.w	r0, r4, #24
 800edbc:	f00f f931 	bl	801e022 <memcpy>
 800edc0:	2000      	movs	r0, #0
 800edc2:	bd70      	pop	{r4, r5, r6, pc}
 800edc4:	200b      	movs	r0, #11
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
 800edc8:	200b      	movs	r0, #11
 800edca:	4770      	bx	lr

0800edcc <rcl_node_options_fini>:
 800edcc:	b1c0      	cbz	r0, 800ee00 <rcl_node_options_fini+0x34>
 800edce:	b500      	push	{lr}
 800edd0:	4684      	mov	ip, r0
 800edd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edd6:	b087      	sub	sp, #28
 800edd8:	f10d 0e04 	add.w	lr, sp, #4
 800eddc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ede0:	f8dc 3000 	ldr.w	r3, [ip]
 800ede4:	f8ce 3000 	str.w	r3, [lr]
 800ede8:	a801      	add	r0, sp, #4
 800edea:	f001 fced 	bl	80107c8 <rcutils_allocator_is_valid>
 800edee:	b118      	cbz	r0, 800edf8 <rcl_node_options_fini+0x2c>
 800edf0:	2000      	movs	r0, #0
 800edf2:	b007      	add	sp, #28
 800edf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800edf8:	200b      	movs	r0, #11
 800edfa:	b007      	add	sp, #28
 800edfc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee00:	200b      	movs	r0, #11
 800ee02:	4770      	bx	lr

0800ee04 <rcl_get_zero_initialized_publisher>:
 800ee04:	4b01      	ldr	r3, [pc, #4]	@ (800ee0c <rcl_get_zero_initialized_publisher+0x8>)
 800ee06:	6818      	ldr	r0, [r3, #0]
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	080205f8 	.word	0x080205f8

0800ee10 <rcl_publisher_init>:
 800ee10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee14:	b088      	sub	sp, #32
 800ee16:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ee18:	2d00      	cmp	r5, #0
 800ee1a:	d06a      	beq.n	800eef2 <rcl_publisher_init+0xe2>
 800ee1c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ee20:	4604      	mov	r4, r0
 800ee22:	4648      	mov	r0, r9
 800ee24:	460e      	mov	r6, r1
 800ee26:	4690      	mov	r8, r2
 800ee28:	461f      	mov	r7, r3
 800ee2a:	f001 fccd 	bl	80107c8 <rcutils_allocator_is_valid>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d05f      	beq.n	800eef2 <rcl_publisher_init+0xe2>
 800ee32:	2c00      	cmp	r4, #0
 800ee34:	d05d      	beq.n	800eef2 <rcl_publisher_init+0xe2>
 800ee36:	f8d4 a000 	ldr.w	sl, [r4]
 800ee3a:	f1ba 0f00 	cmp.w	sl, #0
 800ee3e:	d004      	beq.n	800ee4a <rcl_publisher_init+0x3a>
 800ee40:	2764      	movs	r7, #100	@ 0x64
 800ee42:	4638      	mov	r0, r7
 800ee44:	b008      	add	sp, #32
 800ee46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f7ff ff4a 	bl	800ece4 <rcl_node_is_valid>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d053      	beq.n	800eefc <rcl_publisher_init+0xec>
 800ee54:	f1b8 0f00 	cmp.w	r8, #0
 800ee58:	d04b      	beq.n	800eef2 <rcl_publisher_init+0xe2>
 800ee5a:	2f00      	cmp	r7, #0
 800ee5c:	d049      	beq.n	800eef2 <rcl_publisher_init+0xe2>
 800ee5e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ee62:	aa07      	add	r2, sp, #28
 800ee64:	9205      	str	r2, [sp, #20]
 800ee66:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ee6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ee72:	f8cd a01c 	str.w	sl, [sp, #28]
 800ee76:	4639      	mov	r1, r7
 800ee78:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f009 fe7b 	bl	8018b78 <rcl_node_resolve_name>
 800ee82:	4607      	mov	r7, r0
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d150      	bne.n	800ef2a <rcl_publisher_init+0x11a>
 800ee88:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800ee8c:	21c8      	movs	r1, #200	@ 0xc8
 800ee8e:	2001      	movs	r0, #1
 800ee90:	4798      	blx	r3
 800ee92:	6020      	str	r0, [r4, #0]
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d04e      	beq.n	800ef36 <rcl_publisher_init+0x126>
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7ff ff45 	bl	800ed28 <rcl_node_get_rmw_handle>
 800ee9e:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	9a07      	ldr	r2, [sp, #28]
 800eea6:	6827      	ldr	r7, [r4, #0]
 800eea8:	462b      	mov	r3, r5
 800eeaa:	4641      	mov	r1, r8
 800eeac:	f002 fc96 	bl	80117dc <rmw_create_publisher>
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800eeb6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eeba:	b370      	cbz	r0, 800ef1a <rcl_publisher_init+0x10a>
 800eebc:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800eec0:	f002 fd68 	bl	8011994 <rmw_publisher_get_actual_qos>
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	4607      	mov	r7, r0
 800eec8:	b9d0      	cbnz	r0, 800ef00 <rcl_publisher_init+0xf0>
 800eeca:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800eece:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800eed2:	4629      	mov	r1, r5
 800eed4:	2270      	movs	r2, #112	@ 0x70
 800eed6:	4618      	mov	r0, r3
 800eed8:	f00f f8a3 	bl	801e022 <memcpy>
 800eedc:	6832      	ldr	r2, [r6, #0]
 800eede:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800eee2:	9807      	ldr	r0, [sp, #28]
 800eee4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800eee6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800eee8:	4798      	blx	r3
 800eeea:	4638      	mov	r0, r7
 800eeec:	b008      	add	sp, #32
 800eeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef2:	270b      	movs	r7, #11
 800eef4:	4638      	mov	r0, r7
 800eef6:	b008      	add	sp, #32
 800eef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eefc:	27c8      	movs	r7, #200	@ 0xc8
 800eefe:	e7a0      	b.n	800ee42 <rcl_publisher_init+0x32>
 800ef00:	b18b      	cbz	r3, 800ef26 <rcl_publisher_init+0x116>
 800ef02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ef06:	b142      	cbz	r2, 800ef1a <rcl_publisher_init+0x10a>
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f7ff ff0d 	bl	800ed28 <rcl_node_get_rmw_handle>
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ef14:	f002 fd4c 	bl	80119b0 <rmw_destroy_publisher>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ef1c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ef1e:	4618      	mov	r0, r3
 800ef20:	4790      	blx	r2
 800ef22:	2300      	movs	r3, #0
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	2701      	movs	r7, #1
 800ef28:	e7db      	b.n	800eee2 <rcl_publisher_init+0xd2>
 800ef2a:	2867      	cmp	r0, #103	@ 0x67
 800ef2c:	d0d9      	beq.n	800eee2 <rcl_publisher_init+0xd2>
 800ef2e:	2869      	cmp	r0, #105	@ 0x69
 800ef30:	d003      	beq.n	800ef3a <rcl_publisher_init+0x12a>
 800ef32:	280a      	cmp	r0, #10
 800ef34:	d1f7      	bne.n	800ef26 <rcl_publisher_init+0x116>
 800ef36:	270a      	movs	r7, #10
 800ef38:	e7d3      	b.n	800eee2 <rcl_publisher_init+0xd2>
 800ef3a:	2767      	movs	r7, #103	@ 0x67
 800ef3c:	e7d1      	b.n	800eee2 <rcl_publisher_init+0xd2>
 800ef3e:	bf00      	nop

0800ef40 <rcl_publisher_fini>:
 800ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef42:	b1f8      	cbz	r0, 800ef84 <rcl_publisher_fini+0x44>
 800ef44:	4604      	mov	r4, r0
 800ef46:	4608      	mov	r0, r1
 800ef48:	460d      	mov	r5, r1
 800ef4a:	f7ff fec3 	bl	800ecd4 <rcl_node_is_valid_except_context>
 800ef4e:	b1e8      	cbz	r0, 800ef8c <rcl_publisher_fini+0x4c>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	b1a3      	cbz	r3, 800ef7e <rcl_publisher_fini+0x3e>
 800ef54:	4628      	mov	r0, r5
 800ef56:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800ef58:	6e1f      	ldr	r7, [r3, #96]	@ 0x60
 800ef5a:	f7ff fee5 	bl	800ed28 <rcl_node_get_rmw_handle>
 800ef5e:	b1c0      	cbz	r0, 800ef92 <rcl_publisher_fini+0x52>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ef66:	f002 fd23 	bl	80119b0 <rmw_destroy_publisher>
 800ef6a:	4639      	mov	r1, r7
 800ef6c:	1e05      	subs	r5, r0, #0
 800ef6e:	6820      	ldr	r0, [r4, #0]
 800ef70:	bf18      	it	ne
 800ef72:	2501      	movne	r5, #1
 800ef74:	47b0      	blx	r6
 800ef76:	2300      	movs	r3, #0
 800ef78:	6023      	str	r3, [r4, #0]
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7e:	461d      	mov	r5, r3
 800ef80:	4628      	mov	r0, r5
 800ef82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef84:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800ef88:	4628      	mov	r0, r5
 800ef8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef8c:	25c8      	movs	r5, #200	@ 0xc8
 800ef8e:	4628      	mov	r0, r5
 800ef90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef92:	250b      	movs	r5, #11
 800ef94:	e7f1      	b.n	800ef7a <rcl_publisher_fini+0x3a>
 800ef96:	bf00      	nop

0800ef98 <rcl_publisher_get_default_options>:
 800ef98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef9a:	4919      	ldr	r1, [pc, #100]	@ (800f000 <rcl_publisher_get_default_options+0x68>)
 800ef9c:	4c19      	ldr	r4, [pc, #100]	@ (800f004 <rcl_publisher_get_default_options+0x6c>)
 800ef9e:	b08b      	sub	sp, #44	@ 0x2c
 800efa0:	2250      	movs	r2, #80	@ 0x50
 800efa2:	4605      	mov	r5, r0
 800efa4:	4818      	ldr	r0, [pc, #96]	@ (800f008 <rcl_publisher_get_default_options+0x70>)
 800efa6:	f00f f83c 	bl	801e022 <memcpy>
 800efaa:	a802      	add	r0, sp, #8
 800efac:	f001 fbe0 	bl	8010770 <rcutils_get_default_allocator>
 800efb0:	f10d 0c08 	add.w	ip, sp, #8
 800efb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efba:	466f      	mov	r7, sp
 800efbc:	f8dc 3000 	ldr.w	r3, [ip]
 800efc0:	f844 3b04 	str.w	r3, [r4], #4
 800efc4:	4638      	mov	r0, r7
 800efc6:	f001 fef9 	bl	8010dbc <rmw_get_default_publisher_options>
 800efca:	e897 0003 	ldmia.w	r7, {r0, r1}
 800efce:	2600      	movs	r6, #0
 800efd0:	e884 0003 	stmia.w	r4, {r0, r1}
 800efd4:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800efd8:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800efdc:	f7ff feaa 	bl	800ed34 <rcl_get_disable_loaned_message>
 800efe0:	b958      	cbnz	r0, 800effa <rcl_publisher_get_default_options+0x62>
 800efe2:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800efe6:	4908      	ldr	r1, [pc, #32]	@ (800f008 <rcl_publisher_get_default_options+0x70>)
 800efe8:	2270      	movs	r2, #112	@ 0x70
 800efea:	4628      	mov	r0, r5
 800efec:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800eff0:	f00f f817 	bl	801e022 <memcpy>
 800eff4:	4628      	mov	r0, r5
 800eff6:	b00b      	add	sp, #44	@ 0x2c
 800eff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800effa:	f001 fcc9 	bl	8010990 <rcutils_reset_error>
 800effe:	e7f2      	b.n	800efe6 <rcl_publisher_get_default_options+0x4e>
 800f000:	08020600 	.word	0x08020600
 800f004:	2001aaa0 	.word	0x2001aaa0
 800f008:	2001aa50 	.word	0x2001aa50

0800f00c <rcl_publish>:
 800f00c:	b1f8      	cbz	r0, 800f04e <rcl_publish+0x42>
 800f00e:	6803      	ldr	r3, [r0, #0]
 800f010:	b570      	push	{r4, r5, r6, lr}
 800f012:	4604      	mov	r4, r0
 800f014:	b1b3      	cbz	r3, 800f044 <rcl_publish+0x38>
 800f016:	4616      	mov	r6, r2
 800f018:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f01c:	b192      	cbz	r2, 800f044 <rcl_publish+0x38>
 800f01e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800f022:	460d      	mov	r5, r1
 800f024:	f009 faaa 	bl	801857c <rcl_context_is_valid>
 800f028:	b160      	cbz	r0, 800f044 <rcl_publish+0x38>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f030:	b140      	cbz	r0, 800f044 <rcl_publish+0x38>
 800f032:	b155      	cbz	r5, 800f04a <rcl_publish+0x3e>
 800f034:	4632      	mov	r2, r6
 800f036:	4629      	mov	r1, r5
 800f038:	f002 fb70 	bl	801171c <rmw_publish>
 800f03c:	3800      	subs	r0, #0
 800f03e:	bf18      	it	ne
 800f040:	2001      	movne	r0, #1
 800f042:	bd70      	pop	{r4, r5, r6, pc}
 800f044:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800f048:	bd70      	pop	{r4, r5, r6, pc}
 800f04a:	200b      	movs	r0, #11
 800f04c:	bd70      	pop	{r4, r5, r6, pc}
 800f04e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800f052:	4770      	bx	lr

0800f054 <rcl_publisher_is_valid>:
 800f054:	b1a0      	cbz	r0, 800f080 <rcl_publisher_is_valid+0x2c>
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	b510      	push	{r4, lr}
 800f05a:	4604      	mov	r4, r0
 800f05c:	b173      	cbz	r3, 800f07c <rcl_publisher_is_valid+0x28>
 800f05e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800f062:	b15a      	cbz	r2, 800f07c <rcl_publisher_is_valid+0x28>
 800f064:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800f068:	f009 fa88 	bl	801857c <rcl_context_is_valid>
 800f06c:	b130      	cbz	r0, 800f07c <rcl_publisher_is_valid+0x28>
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800f074:	3800      	subs	r0, #0
 800f076:	bf18      	it	ne
 800f078:	2001      	movne	r0, #1
 800f07a:	bd10      	pop	{r4, pc}
 800f07c:	2000      	movs	r0, #0
 800f07e:	bd10      	pop	{r4, pc}
 800f080:	2000      	movs	r0, #0
 800f082:	4770      	bx	lr

0800f084 <rcl_publisher_is_valid_except_context>:
 800f084:	b130      	cbz	r0, 800f094 <rcl_publisher_is_valid_except_context+0x10>
 800f086:	6800      	ldr	r0, [r0, #0]
 800f088:	b120      	cbz	r0, 800f094 <rcl_publisher_is_valid_except_context+0x10>
 800f08a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800f08e:	3800      	subs	r0, #0
 800f090:	bf18      	it	ne
 800f092:	2001      	movne	r0, #1
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop

0800f098 <rcl_get_zero_initialized_subscription>:
 800f098:	4b01      	ldr	r3, [pc, #4]	@ (800f0a0 <rcl_get_zero_initialized_subscription+0x8>)
 800f09a:	6818      	ldr	r0, [r3, #0]
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	08020650 	.word	0x08020650

0800f0a4 <rcl_subscription_init>:
 800f0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0a8:	b089      	sub	sp, #36	@ 0x24
 800f0aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800f0ac:	b1d6      	cbz	r6, 800f0e4 <rcl_subscription_init+0x40>
 800f0ae:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	4648      	mov	r0, r9
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	4690      	mov	r8, r2
 800f0ba:	461f      	mov	r7, r3
 800f0bc:	f001 fb84 	bl	80107c8 <rcutils_allocator_is_valid>
 800f0c0:	b180      	cbz	r0, 800f0e4 <rcl_subscription_init+0x40>
 800f0c2:	b17c      	cbz	r4, 800f0e4 <rcl_subscription_init+0x40>
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	f7ff fe0d 	bl	800ece4 <rcl_node_is_valid>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d054      	beq.n	800f178 <rcl_subscription_init+0xd4>
 800f0ce:	f1b8 0f00 	cmp.w	r8, #0
 800f0d2:	d007      	beq.n	800f0e4 <rcl_subscription_init+0x40>
 800f0d4:	b137      	cbz	r7, 800f0e4 <rcl_subscription_init+0x40>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	b14b      	cbz	r3, 800f0ee <rcl_subscription_init+0x4a>
 800f0da:	2764      	movs	r7, #100	@ 0x64
 800f0dc:	4638      	mov	r0, r7
 800f0de:	b009      	add	sp, #36	@ 0x24
 800f0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0e4:	270b      	movs	r7, #11
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	b009      	add	sp, #36	@ 0x24
 800f0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f0f2:	aa07      	add	r2, sp, #28
 800f0f4:	9205      	str	r2, [sp, #20]
 800f0f6:	9307      	str	r3, [sp, #28]
 800f0f8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800f0fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f100:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f104:	4639      	mov	r1, r7
 800f106:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f10a:	4628      	mov	r0, r5
 800f10c:	f009 fd34 	bl	8018b78 <rcl_node_resolve_name>
 800f110:	4607      	mov	r7, r0
 800f112:	2800      	cmp	r0, #0
 800f114:	d15f      	bne.n	800f1d6 <rcl_subscription_init+0x132>
 800f116:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800f11a:	21d0      	movs	r1, #208	@ 0xd0
 800f11c:	2001      	movs	r0, #1
 800f11e:	4798      	blx	r3
 800f120:	6020      	str	r0, [r4, #0]
 800f122:	2800      	cmp	r0, #0
 800f124:	d05d      	beq.n	800f1e2 <rcl_subscription_init+0x13e>
 800f126:	4628      	mov	r0, r5
 800f128:	f7ff fdfe 	bl	800ed28 <rcl_node_get_rmw_handle>
 800f12c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	9a07      	ldr	r2, [sp, #28]
 800f134:	6827      	ldr	r7, [r4, #0]
 800f136:	4641      	mov	r1, r8
 800f138:	4633      	mov	r3, r6
 800f13a:	f002 fccf 	bl	8011adc <rmw_create_subscription>
 800f13e:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 800f142:	6827      	ldr	r7, [r4, #0]
 800f144:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800f148:	b358      	cbz	r0, 800f1a2 <rcl_subscription_init+0xfe>
 800f14a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800f14e:	f002 fda5 	bl	8011c9c <rmw_subscription_get_actual_qos>
 800f152:	4607      	mov	r7, r0
 800f154:	b9a8      	cbnz	r0, 800f182 <rcl_subscription_init+0xde>
 800f156:	6820      	ldr	r0, [r4, #0]
 800f158:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f15c:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
 800f160:	2278      	movs	r2, #120	@ 0x78
 800f162:	4631      	mov	r1, r6
 800f164:	f00e ff5d 	bl	801e022 <memcpy>
 800f168:	9807      	ldr	r0, [sp, #28]
 800f16a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f16c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f16e:	4798      	blx	r3
 800f170:	4638      	mov	r0, r7
 800f172:	b009      	add	sp, #36	@ 0x24
 800f174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f178:	27c8      	movs	r7, #200	@ 0xc8
 800f17a:	4638      	mov	r0, r7
 800f17c:	b009      	add	sp, #36	@ 0x24
 800f17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f182:	6827      	ldr	r7, [r4, #0]
 800f184:	b32f      	cbz	r7, 800f1d2 <rcl_subscription_init+0x12e>
 800f186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f18a:	b153      	cbz	r3, 800f1a2 <rcl_subscription_init+0xfe>
 800f18c:	4628      	mov	r0, r5
 800f18e:	f7ff fdcb 	bl	800ed28 <rcl_node_get_rmw_handle>
 800f192:	6823      	ldr	r3, [r4, #0]
 800f194:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f198:	f002 fd8e 	bl	8011cb8 <rmw_destroy_subscription>
 800f19c:	6827      	ldr	r7, [r4, #0]
 800f19e:	4638      	mov	r0, r7
 800f1a0:	b197      	cbz	r7, 800f1c8 <rcl_subscription_init+0x124>
 800f1a2:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f001 fb0e 	bl	80107c8 <rcutils_allocator_is_valid>
 800f1ac:	b1e8      	cbz	r0, 800f1ea <rcl_subscription_init+0x146>
 800f1ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f1b0:	b1d8      	cbz	r0, 800f1ea <rcl_subscription_init+0x146>
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	f001 fe0a 	bl	8010dcc <rmw_subscription_content_filter_options_fini>
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	b9a0      	cbnz	r0, 800f1e6 <rcl_subscription_init+0x142>
 800f1bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1c0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f1c2:	4798      	blx	r3
 800f1c4:	6820      	ldr	r0, [r4, #0]
 800f1c6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800f1c8:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f1ca:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f1cc:	4798      	blx	r3
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	2701      	movs	r7, #1
 800f1d4:	e7c8      	b.n	800f168 <rcl_subscription_init+0xc4>
 800f1d6:	2867      	cmp	r0, #103	@ 0x67
 800f1d8:	d0c6      	beq.n	800f168 <rcl_subscription_init+0xc4>
 800f1da:	2869      	cmp	r0, #105	@ 0x69
 800f1dc:	d007      	beq.n	800f1ee <rcl_subscription_init+0x14a>
 800f1de:	280a      	cmp	r0, #10
 800f1e0:	d1f7      	bne.n	800f1d2 <rcl_subscription_init+0x12e>
 800f1e2:	270a      	movs	r7, #10
 800f1e4:	e7c0      	b.n	800f168 <rcl_subscription_init+0xc4>
 800f1e6:	f009 f9a9 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 800f1ea:	6820      	ldr	r0, [r4, #0]
 800f1ec:	e7ec      	b.n	800f1c8 <rcl_subscription_init+0x124>
 800f1ee:	2767      	movs	r7, #103	@ 0x67
 800f1f0:	e7ba      	b.n	800f168 <rcl_subscription_init+0xc4>
 800f1f2:	bf00      	nop

0800f1f4 <rcl_subscription_fini>:
 800f1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d03a      	beq.n	800f272 <rcl_subscription_fini+0x7e>
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4608      	mov	r0, r1
 800f200:	460d      	mov	r5, r1
 800f202:	f7ff fd67 	bl	800ecd4 <rcl_node_is_valid_except_context>
 800f206:	2800      	cmp	r0, #0
 800f208:	d038      	beq.n	800f27c <rcl_subscription_fini+0x88>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	b36b      	cbz	r3, 800f26a <rcl_subscription_fini+0x76>
 800f20e:	4628      	mov	r0, r5
 800f210:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800f212:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800f216:	f7ff fd87 	bl	800ed28 <rcl_node_get_rmw_handle>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d039      	beq.n	800f292 <rcl_subscription_fini+0x9e>
 800f21e:	6823      	ldr	r3, [r4, #0]
 800f220:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800f224:	f002 fd48 	bl	8011cb8 <rmw_destroy_subscription>
 800f228:	6826      	ldr	r6, [r4, #0]
 800f22a:	1e05      	subs	r5, r0, #0
 800f22c:	bf18      	it	ne
 800f22e:	2501      	movne	r5, #1
 800f230:	b36e      	cbz	r6, 800f28e <rcl_subscription_fini+0x9a>
 800f232:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f236:	4648      	mov	r0, r9
 800f238:	f001 fac6 	bl	80107c8 <rcutils_allocator_is_valid>
 800f23c:	b358      	cbz	r0, 800f296 <rcl_subscription_fini+0xa2>
 800f23e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f240:	b150      	cbz	r0, 800f258 <rcl_subscription_fini+0x64>
 800f242:	4649      	mov	r1, r9
 800f244:	f001 fdc2 	bl	8010dcc <rmw_subscription_content_filter_options_fini>
 800f248:	4681      	mov	r9, r0
 800f24a:	b9d8      	cbnz	r0, 800f284 <rcl_subscription_fini+0x90>
 800f24c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f24e:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f250:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f252:	4798      	blx	r3
 800f254:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800f258:	6826      	ldr	r6, [r4, #0]
 800f25a:	4630      	mov	r0, r6
 800f25c:	4641      	mov	r1, r8
 800f25e:	47b8      	blx	r7
 800f260:	2300      	movs	r3, #0
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	4628      	mov	r0, r5
 800f266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f26a:	461d      	mov	r5, r3
 800f26c:	4628      	mov	r0, r5
 800f26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f272:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800f276:	4628      	mov	r0, r5
 800f278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f27c:	25c8      	movs	r5, #200	@ 0xc8
 800f27e:	4628      	mov	r0, r5
 800f280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f284:	f009 f95a 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 800f288:	6826      	ldr	r6, [r4, #0]
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d0e5      	beq.n	800f25a <rcl_subscription_fini+0x66>
 800f28e:	2501      	movs	r5, #1
 800f290:	e7e3      	b.n	800f25a <rcl_subscription_fini+0x66>
 800f292:	250b      	movs	r5, #11
 800f294:	e7ea      	b.n	800f26c <rcl_subscription_fini+0x78>
 800f296:	6826      	ldr	r6, [r4, #0]
 800f298:	2501      	movs	r5, #1
 800f29a:	e7de      	b.n	800f25a <rcl_subscription_fini+0x66>

0800f29c <rcl_subscription_get_default_options>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	4d14      	ldr	r5, [pc, #80]	@ (800f2f0 <rcl_subscription_get_default_options+0x54>)
 800f2a0:	4914      	ldr	r1, [pc, #80]	@ (800f2f4 <rcl_subscription_get_default_options+0x58>)
 800f2a2:	b08a      	sub	sp, #40	@ 0x28
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	2250      	movs	r2, #80	@ 0x50
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f00e feba 	bl	801e022 <memcpy>
 800f2ae:	a804      	add	r0, sp, #16
 800f2b0:	f001 fa5e 	bl	8010770 <rcutils_get_default_allocator>
 800f2b4:	f10d 0c10 	add.w	ip, sp, #16
 800f2b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2bc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800f2c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2c4:	466e      	mov	r6, sp
 800f2c6:	f8dc 3000 	ldr.w	r3, [ip]
 800f2ca:	f8ce 3000 	str.w	r3, [lr]
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f001 fd96 	bl	8010e00 <rmw_get_default_subscription_options>
 800f2d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f2d8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f2dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f2e0:	2278      	movs	r2, #120	@ 0x78
 800f2e2:	4629      	mov	r1, r5
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f00e fe9c 	bl	801e022 <memcpy>
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	b00a      	add	sp, #40	@ 0x28
 800f2ee:	bd70      	pop	{r4, r5, r6, pc}
 800f2f0:	2001aac0 	.word	0x2001aac0
 800f2f4:	08020658 	.word	0x08020658

0800f2f8 <rcl_take>:
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d04b      	beq.n	800f394 <rcl_take+0x9c>
 800f2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f300:	4615      	mov	r5, r2
 800f302:	6802      	ldr	r2, [r0, #0]
 800f304:	b0a0      	sub	sp, #128	@ 0x80
 800f306:	4604      	mov	r4, r0
 800f308:	2a00      	cmp	r2, #0
 800f30a:	d03b      	beq.n	800f384 <rcl_take+0x8c>
 800f30c:	461f      	mov	r7, r3
 800f30e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 800f312:	2b00      	cmp	r3, #0
 800f314:	d036      	beq.n	800f384 <rcl_take+0x8c>
 800f316:	460e      	mov	r6, r1
 800f318:	2900      	cmp	r1, #0
 800f31a:	d039      	beq.n	800f390 <rcl_take+0x98>
 800f31c:	2d00      	cmp	r5, #0
 800f31e:	d03d      	beq.n	800f39c <rcl_take+0xa4>
 800f320:	a802      	add	r0, sp, #8
 800f322:	f001 fd73 	bl	8010e0c <rmw_get_zero_initialized_message_info>
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	f10d 0c08 	add.w	ip, sp, #8
 800f32c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 800f330:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f334:	46ae      	mov	lr, r5
 800f336:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f33a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f33e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f346:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f34a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f34e:	462b      	mov	r3, r5
 800f350:	e88e 0003 	stmia.w	lr, {r0, r1}
 800f354:	f04f 0800 	mov.w	r8, #0
 800f358:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 800f35c:	4631      	mov	r1, r6
 800f35e:	4620      	mov	r0, r4
 800f360:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 800f364:	9700      	str	r7, [sp, #0]
 800f366:	f002 fd07 	bl	8011d78 <rmw_take_with_info>
 800f36a:	4603      	mov	r3, r0
 800f36c:	b9c0      	cbnz	r0, 800f3a0 <rcl_take+0xa8>
 800f36e:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 800f372:	f240 1291 	movw	r2, #401	@ 0x191
 800f376:	2900      	cmp	r1, #0
 800f378:	bf08      	it	eq
 800f37a:	4613      	moveq	r3, r2
 800f37c:	4618      	mov	r0, r3
 800f37e:	b020      	add	sp, #128	@ 0x80
 800f380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f384:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f388:	4618      	mov	r0, r3
 800f38a:	b020      	add	sp, #128	@ 0x80
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	230b      	movs	r3, #11
 800f392:	e7f3      	b.n	800f37c <rcl_take+0x84>
 800f394:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f398:	4618      	mov	r0, r3
 800f39a:	4770      	bx	lr
 800f39c:	ad12      	add	r5, sp, #72	@ 0x48
 800f39e:	e7bf      	b.n	800f320 <rcl_take+0x28>
 800f3a0:	f009 f8cc 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	e7e9      	b.n	800f37c <rcl_take+0x84>

0800f3a8 <rcl_subscription_get_rmw_handle>:
 800f3a8:	b118      	cbz	r0, 800f3b2 <rcl_subscription_get_rmw_handle+0xa>
 800f3aa:	6800      	ldr	r0, [r0, #0]
 800f3ac:	b108      	cbz	r0, 800f3b2 <rcl_subscription_get_rmw_handle+0xa>
 800f3ae:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f3b2:	4770      	bx	lr

0800f3b4 <rcl_subscription_is_valid>:
 800f3b4:	b130      	cbz	r0, 800f3c4 <rcl_subscription_is_valid+0x10>
 800f3b6:	6800      	ldr	r0, [r0, #0]
 800f3b8:	b120      	cbz	r0, 800f3c4 <rcl_subscription_is_valid+0x10>
 800f3ba:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 800f3be:	3800      	subs	r0, #0
 800f3c0:	bf18      	it	ne
 800f3c2:	2001      	movne	r0, #1
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <_rcl_timer_time_jump>:
 800f3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	b131      	cbz	r1, 800f3e2 <_rcl_timer_time_jump+0x1a>
 800f3d4:	7803      	ldrb	r3, [r0, #0]
 800f3d6:	3b02      	subs	r3, #2
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d93f      	bls.n	800f45c <_rcl_timer_time_jump+0x94>
 800f3dc:	b004      	add	sp, #16
 800f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e2:	6813      	ldr	r3, [r2, #0]
 800f3e4:	a902      	add	r1, sp, #8
 800f3e6:	6818      	ldr	r0, [r3, #0]
 800f3e8:	f009 ff34 	bl	8019254 <rcl_clock_get_now>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d1f5      	bne.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f3f0:	6820      	ldr	r0, [r4, #0]
 800f3f2:	2105      	movs	r1, #5
 800f3f4:	3020      	adds	r0, #32
 800f3f6:	f001 f9f5 	bl	80107e4 <__atomic_load_8>
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	4681      	mov	r9, r0
 800f3fe:	460f      	mov	r7, r1
 800f400:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800f404:	2105      	movs	r1, #5
 800f406:	f001 f9ed 	bl	80107e4 <__atomic_load_8>
 800f40a:	4680      	mov	r8, r0
 800f40c:	6820      	ldr	r0, [r4, #0]
 800f40e:	460e      	mov	r6, r1
 800f410:	3018      	adds	r0, #24
 800f412:	2105      	movs	r1, #5
 800f414:	f001 f9e6 	bl	80107e4 <__atomic_load_8>
 800f418:	782b      	ldrb	r3, [r5, #0]
 800f41a:	3b02      	subs	r3, #2
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	460d      	mov	r5, r1
 800f420:	4682      	mov	sl, r0
 800f422:	d939      	bls.n	800f498 <_rcl_timer_time_jump+0xd0>
 800f424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f428:	4542      	cmp	r2, r8
 800f42a:	eb73 0606 	sbcs.w	r6, r3, r6
 800f42e:	da61      	bge.n	800f4f4 <_rcl_timer_time_jump+0x12c>
 800f430:	454a      	cmp	r2, r9
 800f432:	eb73 0707 	sbcs.w	r7, r3, r7
 800f436:	dad1      	bge.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f438:	1882      	adds	r2, r0, r2
 800f43a:	6820      	ldr	r0, [r4, #0]
 800f43c:	f04f 0505 	mov.w	r5, #5
 800f440:	eb43 0301 	adc.w	r3, r3, r1
 800f444:	9500      	str	r5, [sp, #0]
 800f446:	3028      	adds	r0, #40	@ 0x28
 800f448:	f001 fa02 	bl	8010850 <__atomic_store_8>
 800f44c:	6820      	ldr	r0, [r4, #0]
 800f44e:	9500      	str	r5, [sp, #0]
 800f450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f454:	3020      	adds	r0, #32
 800f456:	f001 f9fb 	bl	8010850 <__atomic_store_8>
 800f45a:	e7bf      	b.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f45c:	6813      	ldr	r3, [r2, #0]
 800f45e:	a902      	add	r1, sp, #8
 800f460:	6818      	ldr	r0, [r3, #0]
 800f462:	f009 fef7 	bl	8019254 <rcl_clock_get_now>
 800f466:	2800      	cmp	r0, #0
 800f468:	d1b8      	bne.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f46a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f46e:	4313      	orrs	r3, r2
 800f470:	d0b4      	beq.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f472:	6820      	ldr	r0, [r4, #0]
 800f474:	2105      	movs	r1, #5
 800f476:	3028      	adds	r0, #40	@ 0x28
 800f478:	f001 f9b4 	bl	80107e4 <__atomic_load_8>
 800f47c:	9d02      	ldr	r5, [sp, #8]
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	4602      	mov	r2, r0
 800f482:	6820      	ldr	r0, [r4, #0]
 800f484:	1b52      	subs	r2, r2, r5
 800f486:	f04f 0405 	mov.w	r4, #5
 800f48a:	9400      	str	r4, [sp, #0]
 800f48c:	eb61 0303 	sbc.w	r3, r1, r3
 800f490:	3030      	adds	r0, #48	@ 0x30
 800f492:	f001 f9dd 	bl	8010850 <__atomic_store_8>
 800f496:	e7a1      	b.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f498:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f49c:	4313      	orrs	r3, r2
 800f49e:	d09d      	beq.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f4a0:	6820      	ldr	r0, [r4, #0]
 800f4a2:	f04f 0805 	mov.w	r8, #5
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f8cd 8000 	str.w	r8, [sp]
 800f4ac:	3030      	adds	r0, #48	@ 0x30
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f001 fa04 	bl	80108bc <__atomic_exchange_8>
 800f4b4:	ea51 0300 	orrs.w	r3, r1, r0
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	d08e      	beq.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f4be:	9a02      	ldr	r2, [sp, #8]
 800f4c0:	9b03      	ldr	r3, [sp, #12]
 800f4c2:	f8cd 8000 	str.w	r8, [sp]
 800f4c6:	1a12      	subs	r2, r2, r0
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	eb63 0301 	sbc.w	r3, r3, r1
 800f4ce:	eb12 020a 	adds.w	r2, r2, sl
 800f4d2:	eb43 0305 	adc.w	r3, r3, r5
 800f4d6:	3028      	adds	r0, #40	@ 0x28
 800f4d8:	f001 f9ba 	bl	8010850 <__atomic_store_8>
 800f4dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4e0:	f8cd 8000 	str.w	r8, [sp]
 800f4e4:	6820      	ldr	r0, [r4, #0]
 800f4e6:	1b92      	subs	r2, r2, r6
 800f4e8:	eb63 0307 	sbc.w	r3, r3, r7
 800f4ec:	3020      	adds	r0, #32
 800f4ee:	f001 f9af 	bl	8010850 <__atomic_store_8>
 800f4f2:	e773      	b.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f4f4:	6820      	ldr	r0, [r4, #0]
 800f4f6:	3008      	adds	r0, #8
 800f4f8:	f009 f9ae 	bl	8018858 <rcl_trigger_guard_condition>
 800f4fc:	e76e      	b.n	800f3dc <_rcl_timer_time_jump+0x14>
 800f4fe:	bf00      	nop

0800f500 <rcl_get_zero_initialized_timer>:
 800f500:	4b01      	ldr	r3, [pc, #4]	@ (800f508 <rcl_get_zero_initialized_timer+0x8>)
 800f502:	6818      	ldr	r0, [r3, #0]
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop
 800f508:	080206a8 	.word	0x080206a8
 800f50c:	00000000 	.word	0x00000000

0800f510 <rcl_timer_init2>:
 800f510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f514:	b0ae      	sub	sp, #184	@ 0xb8
 800f516:	4604      	mov	r4, r0
 800f518:	a839      	add	r0, sp, #228	@ 0xe4
 800f51a:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 800f51e:	460d      	mov	r5, r1
 800f520:	4691      	mov	r9, r2
 800f522:	f001 f951 	bl	80107c8 <rcutils_allocator_is_valid>
 800f526:	2800      	cmp	r0, #0
 800f528:	d06a      	beq.n	800f600 <rcl_timer_init2+0xf0>
 800f52a:	2c00      	cmp	r4, #0
 800f52c:	d068      	beq.n	800f600 <rcl_timer_init2+0xf0>
 800f52e:	2d00      	cmp	r5, #0
 800f530:	d066      	beq.n	800f600 <rcl_timer_init2+0xf0>
 800f532:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800f534:	2b00      	cmp	r3, #0
 800f536:	db63      	blt.n	800f600 <rcl_timer_init2+0xf0>
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	b123      	cbz	r3, 800f546 <rcl_timer_init2+0x36>
 800f53c:	2664      	movs	r6, #100	@ 0x64
 800f53e:	4630      	mov	r0, r6
 800f540:	b02e      	add	sp, #184	@ 0xb8
 800f542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f546:	a908      	add	r1, sp, #32
 800f548:	4628      	mov	r0, r5
 800f54a:	f009 fe83 	bl	8019254 <rcl_clock_get_now>
 800f54e:	4606      	mov	r6, r0
 800f550:	2800      	cmp	r0, #0
 800f552:	d1f4      	bne.n	800f53e <rcl_timer_init2+0x2e>
 800f554:	ae06      	add	r6, sp, #24
 800f556:	4630      	mov	r0, r6
 800f558:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 800f55c:	f009 f888 	bl	8018670 <rcl_get_zero_initialized_guard_condition>
 800f560:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f564:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 800f568:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f56a:	e88a 0003 	stmia.w	sl, {r0, r1}
 800f56e:	4630      	mov	r0, r6
 800f570:	f009 f956 	bl	8018820 <rcl_guard_condition_get_default_options>
 800f574:	ab0d      	add	r3, sp, #52	@ 0x34
 800f576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f57a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f57e:	4649      	mov	r1, r9
 800f580:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f584:	4650      	mov	r0, sl
 800f586:	f009 f87d 	bl	8018684 <rcl_guard_condition_init>
 800f58a:	4606      	mov	r6, r0
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d1d6      	bne.n	800f53e <rcl_timer_init2+0x2e>
 800f590:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d038      	beq.n	800f60a <rcl_timer_init2+0xfa>
 800f598:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800f59a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f59c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 800f5a0:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 800f5aa:	932c      	str	r3, [sp, #176]	@ 0xb0
 800f5ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5b0:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 800f5b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800f668 <rcl_timer_init2+0x158>
 800f5b6:	19d0      	adds	r0, r2, r7
 800f5b8:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 800f5ba:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 800f5be:	eb43 0107 	adc.w	r1, r3, r7
 800f5c2:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800f5c6:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800f5ca:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800f5ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5d2:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 800f5d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5da:	f8dc 3000 	ldr.w	r3, [ip]
 800f5de:	f8ce 3000 	str.w	r3, [lr]
 800f5e2:	f088 0801 	eor.w	r8, r8, #1
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 800f5ec:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f5ee:	2060      	movs	r0, #96	@ 0x60
 800f5f0:	4798      	blx	r3
 800f5f2:	6020      	str	r0, [r4, #0]
 800f5f4:	b358      	cbz	r0, 800f64e <rcl_timer_init2+0x13e>
 800f5f6:	2260      	movs	r2, #96	@ 0x60
 800f5f8:	a916      	add	r1, sp, #88	@ 0x58
 800f5fa:	f00e fd12 	bl	801e022 <memcpy>
 800f5fe:	e79e      	b.n	800f53e <rcl_timer_init2+0x2e>
 800f600:	260b      	movs	r6, #11
 800f602:	4630      	mov	r0, r6
 800f604:	b02e      	add	sp, #184	@ 0xb8
 800f606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60a:	2001      	movs	r0, #1
 800f60c:	2100      	movs	r1, #0
 800f60e:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800f612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f616:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f61a:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800f61e:	4a14      	ldr	r2, [pc, #80]	@ (800f670 <rcl_timer_init2+0x160>)
 800f620:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f624:	9405      	str	r4, [sp, #20]
 800f626:	9204      	str	r2, [sp, #16]
 800f628:	ab12      	add	r3, sp, #72	@ 0x48
 800f62a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f62c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f630:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f634:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800f638:	4628      	mov	r0, r5
 800f63a:	f009 fe27 	bl	801928c <rcl_clock_add_jump_callback>
 800f63e:	4681      	mov	r9, r0
 800f640:	2800      	cmp	r0, #0
 800f642:	d0a9      	beq.n	800f598 <rcl_timer_init2+0x88>
 800f644:	4650      	mov	r0, sl
 800f646:	f009 f8c9 	bl	80187dc <rcl_guard_condition_fini>
 800f64a:	464e      	mov	r6, r9
 800f64c:	e777      	b.n	800f53e <rcl_timer_init2+0x2e>
 800f64e:	4650      	mov	r0, sl
 800f650:	f009 f8c4 	bl	80187dc <rcl_guard_condition_fini>
 800f654:	4906      	ldr	r1, [pc, #24]	@ (800f670 <rcl_timer_init2+0x160>)
 800f656:	4622      	mov	r2, r4
 800f658:	4628      	mov	r0, r5
 800f65a:	f009 fe79 	bl	8019350 <rcl_clock_remove_jump_callback>
 800f65e:	260a      	movs	r6, #10
 800f660:	e76d      	b.n	800f53e <rcl_timer_init2+0x2e>
 800f662:	bf00      	nop
 800f664:	f3af 8000 	nop.w
	...
 800f670:	0800f3c9 	.word	0x0800f3c9

0800f674 <rcl_timer_fini>:
 800f674:	b310      	cbz	r0, 800f6bc <rcl_timer_fini+0x48>
 800f676:	6803      	ldr	r3, [r0, #0]
 800f678:	b570      	push	{r4, r5, r6, lr}
 800f67a:	4604      	mov	r4, r0
 800f67c:	b1b3      	cbz	r3, 800f6ac <rcl_timer_fini+0x38>
 800f67e:	f3bf 8f5b 	dmb	ish
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f688:	f3bf 8f5b 	dmb	ish
 800f68c:	6803      	ldr	r3, [r0, #0]
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f692:	7802      	ldrb	r2, [r0, #0]
 800f694:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800f696:	2a01      	cmp	r2, #1
 800f698:	d00a      	beq.n	800f6b0 <rcl_timer_fini+0x3c>
 800f69a:	f103 0008 	add.w	r0, r3, #8
 800f69e:	f009 f89d 	bl	80187dc <rcl_guard_condition_fini>
 800f6a2:	6820      	ldr	r0, [r4, #0]
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	47a8      	blx	r5
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	6023      	str	r3, [r4, #0]
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	bd70      	pop	{r4, r5, r6, pc}
 800f6b0:	4903      	ldr	r1, [pc, #12]	@ (800f6c0 <rcl_timer_fini+0x4c>)
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	f009 fe4c 	bl	8019350 <rcl_clock_remove_jump_callback>
 800f6b8:	6823      	ldr	r3, [r4, #0]
 800f6ba:	e7ee      	b.n	800f69a <rcl_timer_fini+0x26>
 800f6bc:	2000      	movs	r0, #0
 800f6be:	4770      	bx	lr
 800f6c0:	0800f3c9 	.word	0x0800f3c9

0800f6c4 <rcl_timer_clock>:
 800f6c4:	b130      	cbz	r0, 800f6d4 <rcl_timer_clock+0x10>
 800f6c6:	b129      	cbz	r1, 800f6d4 <rcl_timer_clock+0x10>
 800f6c8:	6803      	ldr	r3, [r0, #0]
 800f6ca:	b12b      	cbz	r3, 800f6d8 <rcl_timer_clock+0x14>
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	600b      	str	r3, [r1, #0]
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	4770      	bx	lr
 800f6d4:	200b      	movs	r0, #11
 800f6d6:	4770      	bx	lr
 800f6d8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop

0800f6e0 <rcl_timer_call>:
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	b087      	sub	sp, #28
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d067      	beq.n	800f7ba <rcl_timer_call+0xda>
 800f6ea:	6803      	ldr	r3, [r0, #0]
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d068      	beq.n	800f7c4 <rcl_timer_call+0xe4>
 800f6f2:	f3bf 8f5b 	dmb	ish
 800f6f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f6fa:	f3bf 8f5b 	dmb	ish
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d150      	bne.n	800f7a4 <rcl_timer_call+0xc4>
 800f702:	6803      	ldr	r3, [r0, #0]
 800f704:	a904      	add	r1, sp, #16
 800f706:	6818      	ldr	r0, [r3, #0]
 800f708:	f009 fda4 	bl	8019254 <rcl_clock_get_now>
 800f70c:	4605      	mov	r5, r0
 800f70e:	2800      	cmp	r0, #0
 800f710:	d144      	bne.n	800f79c <rcl_timer_call+0xbc>
 800f712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f716:	2b00      	cmp	r3, #0
 800f718:	db4a      	blt.n	800f7b0 <rcl_timer_call+0xd0>
 800f71a:	6820      	ldr	r0, [r4, #0]
 800f71c:	f04f 0a05 	mov.w	sl, #5
 800f720:	f8cd a000 	str.w	sl, [sp]
 800f724:	3020      	adds	r0, #32
 800f726:	f001 f8c9 	bl	80108bc <__atomic_exchange_8>
 800f72a:	6823      	ldr	r3, [r4, #0]
 800f72c:	f3bf 8f5b 	dmb	ish
 800f730:	4680      	mov	r8, r0
 800f732:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f736:	f3bf 8f5b 	dmb	ish
 800f73a:	6820      	ldr	r0, [r4, #0]
 800f73c:	4689      	mov	r9, r1
 800f73e:	3028      	adds	r0, #40	@ 0x28
 800f740:	4651      	mov	r1, sl
 800f742:	f001 f84f 	bl	80107e4 <__atomic_load_8>
 800f746:	4606      	mov	r6, r0
 800f748:	6820      	ldr	r0, [r4, #0]
 800f74a:	460f      	mov	r7, r1
 800f74c:	3018      	adds	r0, #24
 800f74e:	4651      	mov	r1, sl
 800f750:	f001 f848 	bl	80107e4 <__atomic_load_8>
 800f754:	1836      	adds	r6, r6, r0
 800f756:	eb41 0707 	adc.w	r7, r1, r7
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	4682      	mov	sl, r0
 800f760:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f764:	42b0      	cmp	r0, r6
 800f766:	eb71 0c07 	sbcs.w	ip, r1, r7
 800f76a:	db04      	blt.n	800f776 <rcl_timer_call+0x96>
 800f76c:	ea53 0c02 	orrs.w	ip, r3, r2
 800f770:	d12b      	bne.n	800f7ca <rcl_timer_call+0xea>
 800f772:	4606      	mov	r6, r0
 800f774:	460f      	mov	r7, r1
 800f776:	6820      	ldr	r0, [r4, #0]
 800f778:	2105      	movs	r1, #5
 800f77a:	4632      	mov	r2, r6
 800f77c:	463b      	mov	r3, r7
 800f77e:	3028      	adds	r0, #40	@ 0x28
 800f780:	9100      	str	r1, [sp, #0]
 800f782:	f001 f865 	bl	8010850 <__atomic_store_8>
 800f786:	f1bb 0f00 	cmp.w	fp, #0
 800f78a:	d007      	beq.n	800f79c <rcl_timer_call+0xbc>
 800f78c:	9a04      	ldr	r2, [sp, #16]
 800f78e:	9b05      	ldr	r3, [sp, #20]
 800f790:	ebb2 0208 	subs.w	r2, r2, r8
 800f794:	4620      	mov	r0, r4
 800f796:	eb63 0309 	sbc.w	r3, r3, r9
 800f79a:	47d8      	blx	fp
 800f79c:	4628      	mov	r0, r5
 800f79e:	b007      	add	sp, #28
 800f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a4:	f240 3521 	movw	r5, #801	@ 0x321
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	b007      	add	sp, #28
 800f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b0:	2501      	movs	r5, #1
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	b007      	add	sp, #28
 800f7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ba:	250b      	movs	r5, #11
 800f7bc:	4628      	mov	r0, r5
 800f7be:	b007      	add	sp, #28
 800f7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f7c8:	e7e8      	b.n	800f79c <rcl_timer_call+0xbc>
 800f7ca:	1b80      	subs	r0, r0, r6
 800f7cc:	eb61 0107 	sbc.w	r1, r1, r7
 800f7d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f7d4:	f7f1 fa48 	bl	8000c68 <__aeabi_ldivmod>
 800f7d8:	9b02      	ldr	r3, [sp, #8]
 800f7da:	3001      	adds	r0, #1
 800f7dc:	f141 0100 	adc.w	r1, r1, #0
 800f7e0:	fb00 f303 	mul.w	r3, r0, r3
 800f7e4:	fb01 330a 	mla	r3, r1, sl, r3
 800f7e8:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f7ec:	1830      	adds	r0, r6, r0
 800f7ee:	4453      	add	r3, sl
 800f7f0:	eb43 0707 	adc.w	r7, r3, r7
 800f7f4:	4606      	mov	r6, r0
 800f7f6:	e7be      	b.n	800f776 <rcl_timer_call+0x96>

0800f7f8 <rcl_timer_is_ready>:
 800f7f8:	b398      	cbz	r0, 800f862 <rcl_timer_is_ready+0x6a>
 800f7fa:	b530      	push	{r4, r5, lr}
 800f7fc:	6803      	ldr	r3, [r0, #0]
 800f7fe:	b083      	sub	sp, #12
 800f800:	4604      	mov	r4, r0
 800f802:	b383      	cbz	r3, 800f866 <rcl_timer_is_ready+0x6e>
 800f804:	460d      	mov	r5, r1
 800f806:	b349      	cbz	r1, 800f85c <rcl_timer_is_ready+0x64>
 800f808:	f3bf 8f5b 	dmb	ish
 800f80c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f810:	f3bf 8f5b 	dmb	ish
 800f814:	b9fb      	cbnz	r3, 800f856 <rcl_timer_is_ready+0x5e>
 800f816:	6803      	ldr	r3, [r0, #0]
 800f818:	4669      	mov	r1, sp
 800f81a:	6818      	ldr	r0, [r3, #0]
 800f81c:	f009 fd1a 	bl	8019254 <rcl_clock_get_now>
 800f820:	b128      	cbz	r0, 800f82e <rcl_timer_is_ready+0x36>
 800f822:	f240 3321 	movw	r3, #801	@ 0x321
 800f826:	4298      	cmp	r0, r3
 800f828:	d015      	beq.n	800f856 <rcl_timer_is_ready+0x5e>
 800f82a:	b003      	add	sp, #12
 800f82c:	bd30      	pop	{r4, r5, pc}
 800f82e:	6820      	ldr	r0, [r4, #0]
 800f830:	2105      	movs	r1, #5
 800f832:	3028      	adds	r0, #40	@ 0x28
 800f834:	f000 ffd6 	bl	80107e4 <__atomic_load_8>
 800f838:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f83c:	1ac0      	subs	r0, r0, r3
 800f83e:	eb61 0102 	sbc.w	r1, r1, r2
 800f842:	2801      	cmp	r0, #1
 800f844:	f171 0100 	sbcs.w	r1, r1, #0
 800f848:	bfb4      	ite	lt
 800f84a:	2301      	movlt	r3, #1
 800f84c:	2300      	movge	r3, #0
 800f84e:	702b      	strb	r3, [r5, #0]
 800f850:	2000      	movs	r0, #0
 800f852:	b003      	add	sp, #12
 800f854:	bd30      	pop	{r4, r5, pc}
 800f856:	2300      	movs	r3, #0
 800f858:	702b      	strb	r3, [r5, #0]
 800f85a:	e7f9      	b.n	800f850 <rcl_timer_is_ready+0x58>
 800f85c:	200b      	movs	r0, #11
 800f85e:	b003      	add	sp, #12
 800f860:	bd30      	pop	{r4, r5, pc}
 800f862:	200b      	movs	r0, #11
 800f864:	4770      	bx	lr
 800f866:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800f86a:	e7de      	b.n	800f82a <rcl_timer_is_ready+0x32>

0800f86c <rcl_timer_get_next_call_time>:
 800f86c:	b1d8      	cbz	r0, 800f8a6 <rcl_timer_get_next_call_time+0x3a>
 800f86e:	b538      	push	{r3, r4, r5, lr}
 800f870:	6803      	ldr	r3, [r0, #0]
 800f872:	b1d3      	cbz	r3, 800f8aa <rcl_timer_get_next_call_time+0x3e>
 800f874:	460c      	mov	r4, r1
 800f876:	b1a1      	cbz	r1, 800f8a2 <rcl_timer_get_next_call_time+0x36>
 800f878:	f3bf 8f5b 	dmb	ish
 800f87c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f880:	f3bf 8f5b 	dmb	ish
 800f884:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800f888:	b943      	cbnz	r3, 800f89c <rcl_timer_get_next_call_time+0x30>
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	2105      	movs	r1, #5
 800f88e:	3028      	adds	r0, #40	@ 0x28
 800f890:	f000 ffa8 	bl	80107e4 <__atomic_load_8>
 800f894:	e9c4 0100 	strd	r0, r1, [r4]
 800f898:	4628      	mov	r0, r5
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	f240 3021 	movw	r0, #801	@ 0x321
 800f8a0:	bd38      	pop	{r3, r4, r5, pc}
 800f8a2:	200b      	movs	r0, #11
 800f8a4:	bd38      	pop	{r3, r4, r5, pc}
 800f8a6:	200b      	movs	r0, #11
 800f8a8:	4770      	bx	lr
 800f8aa:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800f8ae:	bd38      	pop	{r3, r4, r5, pc}

0800f8b0 <rcl_timer_get_guard_condition>:
 800f8b0:	b130      	cbz	r0, 800f8c0 <rcl_timer_get_guard_condition+0x10>
 800f8b2:	6800      	ldr	r0, [r0, #0]
 800f8b4:	b120      	cbz	r0, 800f8c0 <rcl_timer_get_guard_condition+0x10>
 800f8b6:	68c3      	ldr	r3, [r0, #12]
 800f8b8:	b10b      	cbz	r3, 800f8be <rcl_timer_get_guard_condition+0xe>
 800f8ba:	3008      	adds	r0, #8
 800f8bc:	4770      	bx	lr
 800f8be:	4618      	mov	r0, r3
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop

0800f8c4 <_rclc_check_for_new_data>:
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d046      	beq.n	800f956 <_rclc_check_for_new_data+0x92>
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	7802      	ldrb	r2, [r0, #0]
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2a0a      	cmp	r2, #10
 800f8d2:	d842      	bhi.n	800f95a <_rclc_check_for_new_data+0x96>
 800f8d4:	e8df f002 	tbb	[pc, r2]
 800f8d8:	14181212 	.word	0x14181212
 800f8dc:	06060614 	.word	0x06060614
 800f8e0:	2e1a      	.short	0x2e1a
 800f8e2:	16          	.byte	0x16
 800f8e3:	00          	.byte	0x00
 800f8e4:	6a0a      	ldr	r2, [r1, #32]
 800f8e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f8e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f8ec:	3a00      	subs	r2, #0
 800f8ee:	bf18      	it	ne
 800f8f0:	2201      	movne	r2, #1
 800f8f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	b004      	add	sp, #16
 800f8fa:	bd10      	pop	{r4, pc}
 800f8fc:	680a      	ldr	r2, [r1, #0]
 800f8fe:	e7f2      	b.n	800f8e6 <_rclc_check_for_new_data+0x22>
 800f900:	698a      	ldr	r2, [r1, #24]
 800f902:	e7f0      	b.n	800f8e6 <_rclc_check_for_new_data+0x22>
 800f904:	688a      	ldr	r2, [r1, #8]
 800f906:	e7ee      	b.n	800f8e6 <_rclc_check_for_new_data+0x22>
 800f908:	690a      	ldr	r2, [r1, #16]
 800f90a:	e7ec      	b.n	800f8e6 <_rclc_check_for_new_data+0x22>
 800f90c:	685c      	ldr	r4, [r3, #4]
 800f90e:	4608      	mov	r0, r1
 800f910:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f914:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f918:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f91c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f926:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f92a:	f104 0110 	add.w	r1, r4, #16
 800f92e:	f00a fdaf 	bl	801a490 <rcl_action_client_wait_set_get_entities_ready>
 800f932:	e7e1      	b.n	800f8f8 <_rclc_check_for_new_data+0x34>
 800f934:	685c      	ldr	r4, [r3, #4]
 800f936:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f93a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f93e:	e9cd 3200 	strd	r3, r2, [sp]
 800f942:	4608      	mov	r0, r1
 800f944:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f948:	f104 0220 	add.w	r2, r4, #32
 800f94c:	f104 0110 	add.w	r1, r4, #16
 800f950:	f00a ffa4 	bl	801a89c <rcl_action_server_wait_set_get_entities_ready>
 800f954:	e7d0      	b.n	800f8f8 <_rclc_check_for_new_data+0x34>
 800f956:	200b      	movs	r0, #11
 800f958:	4770      	bx	lr
 800f95a:	2001      	movs	r0, #1
 800f95c:	e7cc      	b.n	800f8f8 <_rclc_check_for_new_data+0x34>
 800f95e:	bf00      	nop

0800f960 <_rclc_take_new_data>:
 800f960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f962:	b099      	sub	sp, #100	@ 0x64
 800f964:	2800      	cmp	r0, #0
 800f966:	f000 8082 	beq.w	800fa6e <_rclc_take_new_data+0x10e>
 800f96a:	7803      	ldrb	r3, [r0, #0]
 800f96c:	4604      	mov	r4, r0
 800f96e:	2b0a      	cmp	r3, #10
 800f970:	f200 815d 	bhi.w	800fc2e <_rclc_take_new_data+0x2ce>
 800f974:	e8df f003 	tbb	[pc, r3]
 800f978:	31531f1f 	.word	0x31531f1f
 800f97c:	06060631 	.word	0x06060631
 800f980:	4555      	.short	0x4555
 800f982:	53          	.byte	0x53
 800f983:	00          	.byte	0x00
 800f984:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f986:	6a0b      	ldr	r3, [r1, #32]
 800f988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d046      	beq.n	800fa1e <_rclc_take_new_data+0xbe>
 800f990:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f994:	f104 0110 	add.w	r1, r4, #16
 800f998:	f009 fa88 	bl	8018eac <rcl_take_request>
 800f99c:	4605      	mov	r5, r0
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d03d      	beq.n	800fa1e <_rclc_take_new_data+0xbe>
 800f9a2:	f240 2359 	movw	r3, #601	@ 0x259
 800f9a6:	4298      	cmp	r0, r3
 800f9a8:	d128      	bne.n	800f9fc <_rclc_take_new_data+0x9c>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	b019      	add	sp, #100	@ 0x64
 800f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f9b8:	680b      	ldr	r3, [r1, #0]
 800f9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9be:	b373      	cbz	r3, 800fa1e <_rclc_take_new_data+0xbe>
 800f9c0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	aa0a      	add	r2, sp, #40	@ 0x28
 800f9c8:	f7ff fc96 	bl	800f2f8 <rcl_take>
 800f9cc:	4605      	mov	r5, r0
 800f9ce:	b330      	cbz	r0, 800fa1e <_rclc_take_new_data+0xbe>
 800f9d0:	f240 1391 	movw	r3, #401	@ 0x191
 800f9d4:	4298      	cmp	r0, r3
 800f9d6:	d0e8      	beq.n	800f9aa <_rclc_take_new_data+0x4a>
 800f9d8:	e010      	b.n	800f9fc <_rclc_take_new_data+0x9c>
 800f9da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f9dc:	698b      	ldr	r3, [r1, #24]
 800f9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e2:	b1e3      	cbz	r3, 800fa1e <_rclc_take_new_data+0xbe>
 800f9e4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f9e8:	f104 0110 	add.w	r1, r4, #16
 800f9ec:	f008 fd30 	bl	8018450 <rcl_take_response>
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	b1a0      	cbz	r0, 800fa1e <_rclc_take_new_data+0xbe>
 800f9f4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f9f8:	4298      	cmp	r0, r3
 800f9fa:	d0d9      	beq.n	800f9b0 <_rclc_take_new_data+0x50>
 800f9fc:	f000 ffc8 	bl	8010990 <rcutils_reset_error>
 800fa00:	e7d6      	b.n	800f9b0 <_rclc_take_new_data+0x50>
 800fa02:	6840      	ldr	r0, [r0, #4]
 800fa04:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d15f      	bne.n	800facc <_rclc_take_new_data+0x16c>
 800fa0c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d179      	bne.n	800fb08 <_rclc_take_new_data+0x1a8>
 800fa14:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	f040 8096 	bne.w	800fb4a <_rclc_take_new_data+0x1ea>
 800fa1e:	2500      	movs	r5, #0
 800fa20:	e7c6      	b.n	800f9b0 <_rclc_take_new_data+0x50>
 800fa22:	6840      	ldr	r0, [r0, #4]
 800fa24:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d138      	bne.n	800fa9e <_rclc_take_new_data+0x13e>
 800fa2c:	69c3      	ldr	r3, [r0, #28]
 800fa2e:	b113      	cbz	r3, 800fa36 <_rclc_take_new_data+0xd6>
 800fa30:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fa34:	b9fb      	cbnz	r3, 800fa76 <_rclc_take_new_data+0x116>
 800fa36:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f040 80a8 	bne.w	800fb90 <_rclc_take_new_data+0x230>
 800fa40:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d0ea      	beq.n	800fa1e <_rclc_take_new_data+0xbe>
 800fa48:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800fa4a:	a90a      	add	r1, sp, #40	@ 0x28
 800fa4c:	3010      	adds	r0, #16
 800fa4e:	f00a fc03 	bl	801a258 <rcl_action_take_result_response>
 800fa52:	4605      	mov	r5, r0
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d1d1      	bne.n	800f9fc <_rclc_take_new_data+0x9c>
 800fa58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa5c:	6860      	ldr	r0, [r4, #4]
 800fa5e:	f00b f843 	bl	801aae8 <rclc_action_find_handle_by_result_request_sequence_number>
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d0db      	beq.n	800fa1e <_rclc_take_new_data+0xbe>
 800fa66:	2301      	movs	r3, #1
 800fa68:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800fa6c:	e7d7      	b.n	800fa1e <_rclc_take_new_data+0xbe>
 800fa6e:	250b      	movs	r5, #11
 800fa70:	4628      	mov	r0, r5
 800fa72:	b019      	add	sp, #100	@ 0x64
 800fa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa76:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fa78:	3010      	adds	r0, #16
 800fa7a:	f00a fc69 	bl	801a350 <rcl_action_take_feedback>
 800fa7e:	4605      	mov	r5, r0
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d1bb      	bne.n	800f9fc <_rclc_take_new_data+0x9c>
 800fa84:	6860      	ldr	r0, [r4, #4]
 800fa86:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fa88:	f00a ffec 	bl	801aa64 <rclc_action_find_goal_handle_by_uuid>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	f000 80c4 	beq.w	800fc1c <_rclc_take_new_data+0x2bc>
 800fa94:	2201      	movs	r2, #1
 800fa96:	6860      	ldr	r0, [r4, #4]
 800fa98:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800fa9c:	e7cb      	b.n	800fa36 <_rclc_take_new_data+0xd6>
 800fa9e:	aa04      	add	r2, sp, #16
 800faa0:	a90a      	add	r1, sp, #40	@ 0x28
 800faa2:	3010      	adds	r0, #16
 800faa4:	f00a fb68 	bl	801a178 <rcl_action_take_goal_response>
 800faa8:	4605      	mov	r5, r0
 800faaa:	2800      	cmp	r0, #0
 800faac:	d1a6      	bne.n	800f9fc <_rclc_take_new_data+0x9c>
 800faae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fab2:	6860      	ldr	r0, [r4, #4]
 800fab4:	f00b f806 	bl	801aac4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fab8:	b130      	cbz	r0, 800fac8 <_rclc_take_new_data+0x168>
 800faba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fabe:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fac2:	2201      	movs	r2, #1
 800fac4:	f880 2020 	strb.w	r2, [r0, #32]
 800fac8:	6860      	ldr	r0, [r4, #4]
 800faca:	e7af      	b.n	800fa2c <_rclc_take_new_data+0xcc>
 800facc:	f00a ffa4 	bl	801aa18 <rclc_action_take_goal_handle>
 800fad0:	4606      	mov	r6, r0
 800fad2:	6860      	ldr	r0, [r4, #4]
 800fad4:	2e00      	cmp	r6, #0
 800fad6:	d099      	beq.n	800fa0c <_rclc_take_new_data+0xac>
 800fad8:	6070      	str	r0, [r6, #4]
 800fada:	69f2      	ldr	r2, [r6, #28]
 800fadc:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fae0:	3010      	adds	r0, #16
 800fae2:	f00a fd65 	bl	801a5b0 <rcl_action_take_goal_request>
 800fae6:	4605      	mov	r5, r0
 800fae8:	2800      	cmp	r0, #0
 800faea:	f040 8099 	bne.w	800fc20 <_rclc_take_new_data+0x2c0>
 800faee:	69f7      	ldr	r7, [r6, #28]
 800faf0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800faf2:	7235      	strb	r5, [r6, #8]
 800faf4:	f8c6 0009 	str.w	r0, [r6, #9]
 800faf8:	f8c6 100d 	str.w	r1, [r6, #13]
 800fafc:	6860      	ldr	r0, [r4, #4]
 800fafe:	f8c6 2011 	str.w	r2, [r6, #17]
 800fb02:	f8c6 3015 	str.w	r3, [r6, #21]
 800fb06:	e781      	b.n	800fa0c <_rclc_take_new_data+0xac>
 800fb08:	aa04      	add	r2, sp, #16
 800fb0a:	3010      	adds	r0, #16
 800fb0c:	a90a      	add	r1, sp, #40	@ 0x28
 800fb0e:	f00a fdbf 	bl	801a690 <rcl_action_take_result_request>
 800fb12:	4605      	mov	r5, r0
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f47f af71 	bne.w	800f9fc <_rclc_take_new_data+0x9c>
 800fb1a:	6860      	ldr	r0, [r4, #4]
 800fb1c:	a904      	add	r1, sp, #16
 800fb1e:	f00a ffa1 	bl	801aa64 <rclc_action_find_goal_handle_by_uuid>
 800fb22:	4607      	mov	r7, r0
 800fb24:	b160      	cbz	r0, 800fb40 <_rclc_take_new_data+0x1e0>
 800fb26:	ad0a      	add	r5, sp, #40	@ 0x28
 800fb28:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800fb2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb2e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fb30:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb34:	f04f 0c02 	mov.w	ip, #2
 800fb38:	e886 0003 	stmia.w	r6, {r0, r1}
 800fb3c:	f887 c008 	strb.w	ip, [r7, #8]
 800fb40:	6860      	ldr	r0, [r4, #4]
 800fb42:	2300      	movs	r3, #0
 800fb44:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800fb48:	e764      	b.n	800fa14 <_rclc_take_new_data+0xb4>
 800fb4a:	ae04      	add	r6, sp, #16
 800fb4c:	aa0a      	add	r2, sp, #40	@ 0x28
 800fb4e:	3010      	adds	r0, #16
 800fb50:	4631      	mov	r1, r6
 800fb52:	f00a fddb 	bl	801a70c <rcl_action_take_cancel_request>
 800fb56:	4605      	mov	r5, r0
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	f47f af4f 	bne.w	800f9fc <_rclc_take_new_data+0x9c>
 800fb5e:	6860      	ldr	r0, [r4, #4]
 800fb60:	a90a      	add	r1, sp, #40	@ 0x28
 800fb62:	f00a ff7f 	bl	801aa64 <rclc_action_find_goal_handle_by_uuid>
 800fb66:	4605      	mov	r5, r0
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d04c      	beq.n	800fc06 <_rclc_take_new_data+0x2a6>
 800fb6c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800fb70:	2101      	movs	r1, #1
 800fb72:	f00a feff 	bl	801a974 <rcl_action_transition_goal_state>
 800fb76:	2803      	cmp	r0, #3
 800fb78:	4607      	mov	r7, r0
 800fb7a:	d139      	bne.n	800fbf0 <_rclc_take_new_data+0x290>
 800fb7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fb7e:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800fb82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb84:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fb88:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb8c:	722f      	strb	r7, [r5, #8]
 800fb8e:	e746      	b.n	800fa1e <_rclc_take_new_data+0xbe>
 800fb90:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800fb94:	a90a      	add	r1, sp, #40	@ 0x28
 800fb96:	3010      	adds	r0, #16
 800fb98:	f00a fb9c 	bl	801a2d4 <rcl_action_take_cancel_response>
 800fb9c:	4605      	mov	r5, r0
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	f47f af2c 	bne.w	800f9fc <_rclc_take_new_data+0x9c>
 800fba4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fba8:	6860      	ldr	r0, [r4, #4]
 800fbaa:	f00a ffaf 	bl	801ab0c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800fbae:	4606      	mov	r6, r0
 800fbb0:	6860      	ldr	r0, [r4, #4]
 800fbb2:	2e00      	cmp	r6, #0
 800fbb4:	f43f af44 	beq.w	800fa40 <_rclc_take_new_data+0xe0>
 800fbb8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fbba:	2701      	movs	r7, #1
 800fbbc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f43f af3e 	beq.w	800fa40 <_rclc_take_new_data+0xe0>
 800fbc4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fbc6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fbca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fbce:	f00a ff49 	bl	801aa64 <rclc_action_find_goal_handle_by_uuid>
 800fbd2:	b138      	cbz	r0, 800fbe4 <_rclc_take_new_data+0x284>
 800fbd4:	6860      	ldr	r0, [r4, #4]
 800fbd6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fbd8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800fbdc:	3501      	adds	r5, #1
 800fbde:	42ab      	cmp	r3, r5
 800fbe0:	d8f0      	bhi.n	800fbc4 <_rclc_take_new_data+0x264>
 800fbe2:	e72d      	b.n	800fa40 <_rclc_take_new_data+0xe0>
 800fbe4:	6860      	ldr	r0, [r4, #4]
 800fbe6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fbe8:	3501      	adds	r5, #1
 800fbea:	42ab      	cmp	r3, r5
 800fbec:	d8ea      	bhi.n	800fbc4 <_rclc_take_new_data+0x264>
 800fbee:	e727      	b.n	800fa40 <_rclc_take_new_data+0xe0>
 800fbf0:	ab06      	add	r3, sp, #24
 800fbf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbf4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fbf8:	2103      	movs	r1, #3
 800fbfa:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fbfe:	6860      	ldr	r0, [r4, #4]
 800fc00:	f00a fffa 	bl	801abf8 <rclc_action_server_goal_cancel_reject>
 800fc04:	e70b      	b.n	800fa1e <_rclc_take_new_data+0xbe>
 800fc06:	ab06      	add	r3, sp, #24
 800fc08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc0a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc0e:	2102      	movs	r1, #2
 800fc10:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fc14:	6860      	ldr	r0, [r4, #4]
 800fc16:	f00a ffef 	bl	801abf8 <rclc_action_server_goal_cancel_reject>
 800fc1a:	e700      	b.n	800fa1e <_rclc_take_new_data+0xbe>
 800fc1c:	6860      	ldr	r0, [r4, #4]
 800fc1e:	e70a      	b.n	800fa36 <_rclc_take_new_data+0xd6>
 800fc20:	6860      	ldr	r0, [r4, #4]
 800fc22:	4631      	mov	r1, r6
 800fc24:	f00a ff08 	bl	801aa38 <rclc_action_remove_used_goal_handle>
 800fc28:	f000 feb2 	bl	8010990 <rcutils_reset_error>
 800fc2c:	e6c0      	b.n	800f9b0 <_rclc_take_new_data+0x50>
 800fc2e:	2501      	movs	r5, #1
 800fc30:	e6be      	b.n	800f9b0 <_rclc_take_new_data+0x50>
 800fc32:	bf00      	nop

0800fc34 <rclc_executor_trigger_any>:
 800fc34:	4603      	mov	r3, r0
 800fc36:	b370      	cbz	r0, 800fc96 <rclc_executor_trigger_any+0x62>
 800fc38:	b379      	cbz	r1, 800fc9a <rclc_executor_trigger_any+0x66>
 800fc3a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800fc3e:	2200      	movs	r2, #0
 800fc40:	b350      	cbz	r0, 800fc98 <rclc_executor_trigger_any+0x64>
 800fc42:	b430      	push	{r4, r5}
 800fc44:	f893 c000 	ldrb.w	ip, [r3]
 800fc48:	f1bc 0f08 	cmp.w	ip, #8
 800fc4c:	d017      	beq.n	800fc7e <rclc_executor_trigger_any+0x4a>
 800fc4e:	f1bc 0f09 	cmp.w	ip, #9
 800fc52:	d00d      	beq.n	800fc70 <rclc_executor_trigger_any+0x3c>
 800fc54:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800fc58:	b940      	cbnz	r0, 800fc6c <rclc_executor_trigger_any+0x38>
 800fc5a:	3201      	adds	r2, #1
 800fc5c:	4291      	cmp	r1, r2
 800fc5e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fc62:	d003      	beq.n	800fc6c <rclc_executor_trigger_any+0x38>
 800fc64:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	d1eb      	bne.n	800fc44 <rclc_executor_trigger_any+0x10>
 800fc6c:	bc30      	pop	{r4, r5}
 800fc6e:	4770      	bx	lr
 800fc70:	685c      	ldr	r4, [r3, #4]
 800fc72:	6a25      	ldr	r5, [r4, #32]
 800fc74:	2d00      	cmp	r5, #0
 800fc76:	d1f9      	bne.n	800fc6c <rclc_executor_trigger_any+0x38>
 800fc78:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800fc7c:	e7ec      	b.n	800fc58 <rclc_executor_trigger_any+0x24>
 800fc7e:	685c      	ldr	r4, [r3, #4]
 800fc80:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800fc82:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800fc86:	d1f1      	bne.n	800fc6c <rclc_executor_trigger_any+0x38>
 800fc88:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d1ed      	bne.n	800fc6c <rclc_executor_trigger_any+0x38>
 800fc90:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800fc94:	e7e0      	b.n	800fc58 <rclc_executor_trigger_any+0x24>
 800fc96:	4770      	bx	lr
 800fc98:	4770      	bx	lr
 800fc9a:	4608      	mov	r0, r1
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop

0800fca0 <_rclc_execute>:
 800fca0:	2800      	cmp	r0, #0
 800fca2:	f000 80da 	beq.w	800fe5a <_rclc_execute+0x1ba>
 800fca6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca8:	7843      	ldrb	r3, [r0, #1]
 800fcaa:	b087      	sub	sp, #28
 800fcac:	4604      	mov	r4, r0
 800fcae:	b123      	cbz	r3, 800fcba <_rclc_execute+0x1a>
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d01c      	beq.n	800fcee <_rclc_execute+0x4e>
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	b007      	add	sp, #28
 800fcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcba:	7803      	ldrb	r3, [r0, #0]
 800fcbc:	2b08      	cmp	r3, #8
 800fcbe:	f000 809e 	beq.w	800fdfe <_rclc_execute+0x15e>
 800fcc2:	2b09      	cmp	r3, #9
 800fcc4:	d024      	beq.n	800fd10 <_rclc_execute+0x70>
 800fcc6:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d0f2      	beq.n	800fcb4 <_rclc_execute+0x14>
 800fcce:	2b0a      	cmp	r3, #10
 800fcd0:	f200 8158 	bhi.w	800ff84 <_rclc_execute+0x2e4>
 800fcd4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fcd8:	008c0071 	.word	0x008c0071
 800fcdc:	0071007e 	.word	0x0071007e
 800fce0:	00590075 	.word	0x00590075
 800fce4:	00590059 	.word	0x00590059
 800fce8:	01560156 	.word	0x01560156
 800fcec:	007b      	.short	0x007b
 800fcee:	7803      	ldrb	r3, [r0, #0]
 800fcf0:	2b0a      	cmp	r3, #10
 800fcf2:	f200 8147 	bhi.w	800ff84 <_rclc_execute+0x2e4>
 800fcf6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fcfa:	00f7      	.short	0x00f7
 800fcfc:	006d0079 	.word	0x006d0079
 800fd00:	00640060 	.word	0x00640060
 800fd04:	00480048 	.word	0x00480048
 800fd08:	00fe0048 	.word	0x00fe0048
 800fd0c:	006a0100 	.word	0x006a0100
 800fd10:	6840      	ldr	r0, [r0, #4]
 800fd12:	6a02      	ldr	r2, [r0, #32]
 800fd14:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fd18:	2a00      	cmp	r2, #0
 800fd1a:	f040 80f1 	bne.w	800ff00 <_rclc_execute+0x260>
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d0c8      	beq.n	800fcb4 <_rclc_execute+0x14>
 800fd22:	e003      	b.n	800fd2c <_rclc_execute+0x8c>
 800fd24:	6858      	ldr	r0, [r3, #4]
 800fd26:	f00a fe87 	bl	801aa38 <rclc_action_remove_used_goal_handle>
 800fd2a:	6860      	ldr	r0, [r4, #4]
 800fd2c:	f00a febe 	bl	801aaac <rclc_action_find_first_terminated_handle>
 800fd30:	4603      	mov	r3, r0
 800fd32:	4601      	mov	r1, r0
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d1f5      	bne.n	800fd24 <_rclc_execute+0x84>
 800fd38:	6860      	ldr	r0, [r4, #4]
 800fd3a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800fd3e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 80e9 	beq.w	800ff1a <_rclc_execute+0x27a>
 800fd48:	f640 0634 	movw	r6, #2100	@ 0x834
 800fd4c:	2701      	movs	r7, #1
 800fd4e:	e007      	b.n	800fd60 <_rclc_execute+0xc0>
 800fd50:	4628      	mov	r0, r5
 800fd52:	f00a ff05 	bl	801ab60 <rclc_action_server_response_goal_request>
 800fd56:	6860      	ldr	r0, [r4, #4]
 800fd58:	4629      	mov	r1, r5
 800fd5a:	f00a fe6d 	bl	801aa38 <rclc_action_remove_used_goal_handle>
 800fd5e:	6860      	ldr	r0, [r4, #4]
 800fd60:	2100      	movs	r1, #0
 800fd62:	f00a fe97 	bl	801aa94 <rclc_action_find_first_handle_by_status>
 800fd66:	4605      	mov	r5, r0
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	f000 80d3 	beq.w	800ff14 <_rclc_execute+0x274>
 800fd6e:	6863      	ldr	r3, [r4, #4]
 800fd70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fd72:	699b      	ldr	r3, [r3, #24]
 800fd74:	4798      	blx	r3
 800fd76:	42b0      	cmp	r0, r6
 800fd78:	f04f 0100 	mov.w	r1, #0
 800fd7c:	d1e8      	bne.n	800fd50 <_rclc_execute+0xb0>
 800fd7e:	2101      	movs	r1, #1
 800fd80:	4628      	mov	r0, r5
 800fd82:	f00a feed 	bl	801ab60 <rclc_action_server_response_goal_request>
 800fd86:	722f      	strb	r7, [r5, #8]
 800fd88:	e7e9      	b.n	800fd5e <_rclc_execute+0xbe>
 800fd8a:	2b06      	cmp	r3, #6
 800fd8c:	68a0      	ldr	r0, [r4, #8]
 800fd8e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fd90:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800fd92:	f000 80b9 	beq.w	800ff08 <_rclc_execute+0x268>
 800fd96:	2b07      	cmp	r3, #7
 800fd98:	f000 80ef 	beq.w	800ff7a <_rclc_execute+0x2da>
 800fd9c:	47b0      	blx	r6
 800fd9e:	f104 0510 	add.w	r5, r4, #16
 800fda2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fda4:	6860      	ldr	r0, [r4, #4]
 800fda6:	4629      	mov	r1, r5
 800fda8:	f009 f8d0 	bl	8018f4c <rcl_send_response>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d082      	beq.n	800fcb6 <_rclc_execute+0x16>
 800fdb0:	9005      	str	r0, [sp, #20]
 800fdb2:	f000 fded 	bl	8010990 <rcutils_reset_error>
 800fdb6:	9805      	ldr	r0, [sp, #20]
 800fdb8:	e77d      	b.n	800fcb6 <_rclc_execute+0x16>
 800fdba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fdbc:	68a0      	ldr	r0, [r4, #8]
 800fdbe:	4798      	blx	r3
 800fdc0:	e778      	b.n	800fcb4 <_rclc_execute+0x14>
 800fdc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fdc4:	68a0      	ldr	r0, [r4, #8]
 800fdc6:	f104 0110 	add.w	r1, r4, #16
 800fdca:	4798      	blx	r3
 800fdcc:	e772      	b.n	800fcb4 <_rclc_execute+0x14>
 800fdce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fdd0:	4798      	blx	r3
 800fdd2:	e76f      	b.n	800fcb4 <_rclc_execute+0x14>
 800fdd4:	6860      	ldr	r0, [r4, #4]
 800fdd6:	f7ff fc83 	bl	800f6e0 <rcl_timer_call>
 800fdda:	f240 3321 	movw	r3, #801	@ 0x321
 800fdde:	4298      	cmp	r0, r3
 800fde0:	f43f af68 	beq.w	800fcb4 <_rclc_execute+0x14>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	f43f af66 	beq.w	800fcb6 <_rclc_execute+0x16>
 800fdea:	e7e1      	b.n	800fdb0 <_rclc_execute+0x110>
 800fdec:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800fdf0:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	d0e8      	beq.n	800fdca <_rclc_execute+0x12a>
 800fdf8:	68a0      	ldr	r0, [r4, #8]
 800fdfa:	4798      	blx	r3
 800fdfc:	e75a      	b.n	800fcb4 <_rclc_execute+0x14>
 800fdfe:	6840      	ldr	r0, [r0, #4]
 800fe00:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800fe02:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800fe06:	d107      	bne.n	800fe18 <_rclc_execute+0x178>
 800fe08:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fe0c:	b923      	cbnz	r3, 800fe18 <_rclc_execute+0x178>
 800fe0e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	f43f af4e 	beq.w	800fcb4 <_rclc_execute+0x14>
 800fe18:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fe1c:	b303      	cbz	r3, 800fe60 <_rclc_execute+0x1c0>
 800fe1e:	2600      	movs	r6, #0
 800fe20:	2701      	movs	r7, #1
 800fe22:	e004      	b.n	800fe2e <_rclc_execute+0x18e>
 800fe24:	f00a fdd2 	bl	801a9cc <rclc_action_send_result_request>
 800fe28:	b990      	cbnz	r0, 800fe50 <_rclc_execute+0x1b0>
 800fe2a:	722f      	strb	r7, [r5, #8]
 800fe2c:	6860      	ldr	r0, [r4, #4]
 800fe2e:	f00a fe7f 	bl	801ab30 <rclc_action_find_first_handle_with_goal_response>
 800fe32:	4605      	mov	r5, r0
 800fe34:	b198      	cbz	r0, 800fe5e <_rclc_execute+0x1be>
 800fe36:	6863      	ldr	r3, [r4, #4]
 800fe38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800fe40:	f885 6020 	strb.w	r6, [r5, #32]
 800fe44:	4798      	blx	r3
 800fe46:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1e9      	bne.n	800fe24 <_rclc_execute+0x184>
 800fe50:	6860      	ldr	r0, [r4, #4]
 800fe52:	4629      	mov	r1, r5
 800fe54:	f00a fdf0 	bl	801aa38 <rclc_action_remove_used_goal_handle>
 800fe58:	e7e8      	b.n	800fe2c <_rclc_execute+0x18c>
 800fe5a:	200b      	movs	r0, #11
 800fe5c:	4770      	bx	lr
 800fe5e:	6860      	ldr	r0, [r4, #4]
 800fe60:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fe64:	b18b      	cbz	r3, 800fe8a <_rclc_execute+0x1ea>
 800fe66:	68c5      	ldr	r5, [r0, #12]
 800fe68:	b32d      	cbz	r5, 800feb6 <_rclc_execute+0x216>
 800fe6a:	2600      	movs	r6, #0
 800fe6c:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800fe70:	b143      	cbz	r3, 800fe84 <_rclc_execute+0x1e4>
 800fe72:	69c3      	ldr	r3, [r0, #28]
 800fe74:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800fe78:	b123      	cbz	r3, 800fe84 <_rclc_execute+0x1e4>
 800fe7a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fe7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe7e:	4628      	mov	r0, r5
 800fe80:	4798      	blx	r3
 800fe82:	6860      	ldr	r0, [r4, #4]
 800fe84:	682d      	ldr	r5, [r5, #0]
 800fe86:	2d00      	cmp	r5, #0
 800fe88:	d1f0      	bne.n	800fe6c <_rclc_execute+0x1cc>
 800fe8a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fe8e:	b193      	cbz	r3, 800feb6 <_rclc_execute+0x216>
 800fe90:	68c5      	ldr	r5, [r0, #12]
 800fe92:	b185      	cbz	r5, 800feb6 <_rclc_execute+0x216>
 800fe94:	2600      	movs	r6, #0
 800fe96:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800fe9a:	b14b      	cbz	r3, 800feb0 <_rclc_execute+0x210>
 800fe9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fe9e:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800fea2:	b12b      	cbz	r3, 800feb0 <_rclc_execute+0x210>
 800fea4:	4628      	mov	r0, r5
 800fea6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fea8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800feac:	4798      	blx	r3
 800feae:	6860      	ldr	r0, [r4, #4]
 800feb0:	682d      	ldr	r5, [r5, #0]
 800feb2:	2d00      	cmp	r5, #0
 800feb4:	d1ef      	bne.n	800fe96 <_rclc_execute+0x1f6>
 800feb6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800feba:	2b00      	cmp	r3, #0
 800febc:	f43f aefa 	beq.w	800fcb4 <_rclc_execute+0x14>
 800fec0:	2700      	movs	r7, #0
 800fec2:	e00b      	b.n	800fedc <_rclc_execute+0x23c>
 800fec4:	6863      	ldr	r3, [r4, #4]
 800fec6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fec8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800feca:	6a1e      	ldr	r6, [r3, #32]
 800fecc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800fed0:	47b0      	blx	r6
 800fed2:	6860      	ldr	r0, [r4, #4]
 800fed4:	4629      	mov	r1, r5
 800fed6:	f00a fdaf 	bl	801aa38 <rclc_action_remove_used_goal_handle>
 800feda:	6860      	ldr	r0, [r4, #4]
 800fedc:	f00a fe34 	bl	801ab48 <rclc_action_find_first_handle_with_result_response>
 800fee0:	4605      	mov	r5, r0
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d1ee      	bne.n	800fec4 <_rclc_execute+0x224>
 800fee6:	e6e5      	b.n	800fcb4 <_rclc_execute+0x14>
 800fee8:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800feec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800feee:	2800      	cmp	r0, #0
 800fef0:	f43f af65 	beq.w	800fdbe <_rclc_execute+0x11e>
 800fef4:	e762      	b.n	800fdbc <_rclc_execute+0x11c>
 800fef6:	6840      	ldr	r0, [r0, #4]
 800fef8:	e78e      	b.n	800fe18 <_rclc_execute+0x178>
 800fefa:	6840      	ldr	r0, [r0, #4]
 800fefc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f43f af1c 	beq.w	800fd3e <_rclc_execute+0x9e>
 800ff06:	e711      	b.n	800fd2c <_rclc_execute+0x8c>
 800ff08:	f104 0510 	add.w	r5, r4, #16
 800ff0c:	460a      	mov	r2, r1
 800ff0e:	4629      	mov	r1, r5
 800ff10:	47b0      	blx	r6
 800ff12:	e746      	b.n	800fda2 <_rclc_execute+0x102>
 800ff14:	6860      	ldr	r0, [r4, #4]
 800ff16:	f880 5020 	strb.w	r5, [r0, #32]
 800ff1a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f43f aec8 	beq.w	800fcb4 <_rclc_execute+0x14>
 800ff24:	68c5      	ldr	r5, [r0, #12]
 800ff26:	b325      	cbz	r5, 800ff72 <_rclc_execute+0x2d2>
 800ff28:	2602      	movs	r6, #2
 800ff2a:	e001      	b.n	800ff30 <_rclc_execute+0x290>
 800ff2c:	682d      	ldr	r5, [r5, #0]
 800ff2e:	b305      	cbz	r5, 800ff72 <_rclc_execute+0x2d2>
 800ff30:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ff34:	2b03      	cmp	r3, #3
 800ff36:	d1f9      	bne.n	800ff2c <_rclc_execute+0x28c>
 800ff38:	69c3      	ldr	r3, [r0, #28]
 800ff3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	4798      	blx	r3
 800ff40:	4603      	mov	r3, r0
 800ff42:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ff46:	4628      	mov	r0, r5
 800ff48:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ff4c:	b11b      	cbz	r3, 800ff56 <_rclc_execute+0x2b6>
 800ff4e:	f00a fe27 	bl	801aba0 <rclc_action_server_goal_cancel_accept>
 800ff52:	6860      	ldr	r0, [r4, #4]
 800ff54:	e7ea      	b.n	800ff2c <_rclc_execute+0x28c>
 800ff56:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ff58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff5c:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ff60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff64:	6860      	ldr	r0, [r4, #4]
 800ff66:	2101      	movs	r1, #1
 800ff68:	f00a fe46 	bl	801abf8 <rclc_action_server_goal_cancel_reject>
 800ff6c:	722e      	strb	r6, [r5, #8]
 800ff6e:	6860      	ldr	r0, [r4, #4]
 800ff70:	e7dc      	b.n	800ff2c <_rclc_execute+0x28c>
 800ff72:	2300      	movs	r3, #0
 800ff74:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ff78:	e69c      	b.n	800fcb4 <_rclc_execute+0x14>
 800ff7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ff7c:	47b0      	blx	r6
 800ff7e:	f104 0510 	add.w	r5, r4, #16
 800ff82:	e70e      	b.n	800fda2 <_rclc_execute+0x102>
 800ff84:	2001      	movs	r0, #1
 800ff86:	e696      	b.n	800fcb6 <_rclc_execute+0x16>

0800ff88 <rclc_executor_init>:
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d05a      	beq.n	8010042 <rclc_executor_init+0xba>
 800ff8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff90:	460d      	mov	r5, r1
 800ff92:	b0b2      	sub	sp, #200	@ 0xc8
 800ff94:	2900      	cmp	r1, #0
 800ff96:	d050      	beq.n	801003a <rclc_executor_init+0xb2>
 800ff98:	4604      	mov	r4, r0
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	4616      	mov	r6, r2
 800ff9e:	461f      	mov	r7, r3
 800ffa0:	f000 fc12 	bl	80107c8 <rcutils_allocator_is_valid>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d048      	beq.n	801003a <rclc_executor_init+0xb2>
 800ffa8:	2e00      	cmp	r6, #0
 800ffaa:	d046      	beq.n	801003a <rclc_executor_init+0xb2>
 800ffac:	492a      	ldr	r1, [pc, #168]	@ (8010058 <rclc_executor_init+0xd0>)
 800ffae:	2290      	movs	r2, #144	@ 0x90
 800ffb0:	a80e      	add	r0, sp, #56	@ 0x38
 800ffb2:	f00e f836 	bl	801e022 <memcpy>
 800ffb6:	a90e      	add	r1, sp, #56	@ 0x38
 800ffb8:	2290      	movs	r2, #144	@ 0x90
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f00e f831 	bl	801e022 <memcpy>
 800ffc0:	6065      	str	r5, [r4, #4]
 800ffc2:	4668      	mov	r0, sp
 800ffc4:	60e6      	str	r6, [r4, #12]
 800ffc6:	466d      	mov	r5, sp
 800ffc8:	f009 fa80 	bl	80194cc <rcl_get_zero_initialized_wait_set>
 800ffcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffce:	f104 0c18 	add.w	ip, r4, #24
 800ffd2:	f8d7 8000 	ldr.w	r8, [r7]
 800ffd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffe6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8010050 <rclc_executor_init+0xc8>
 800ffea:	682b      	ldr	r3, [r5, #0]
 800ffec:	f8cc 3000 	str.w	r3, [ip]
 800fff0:	6939      	ldr	r1, [r7, #16]
 800fff2:	6167      	str	r7, [r4, #20]
 800fff4:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800fff8:	01b0      	lsls	r0, r6, #6
 800fffa:	47c0      	blx	r8
 800fffc:	60a0      	str	r0, [r4, #8]
 800fffe:	b310      	cbz	r0, 8010046 <rclc_executor_init+0xbe>
 8010000:	2500      	movs	r5, #0
 8010002:	e000      	b.n	8010006 <rclc_executor_init+0x7e>
 8010004:	68a0      	ldr	r0, [r4, #8]
 8010006:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 801000a:	4631      	mov	r1, r6
 801000c:	3501      	adds	r5, #1
 801000e:	f000 fa55 	bl	80104bc <rclc_executor_handle_init>
 8010012:	42ae      	cmp	r6, r5
 8010014:	d1f6      	bne.n	8010004 <rclc_executor_init+0x7c>
 8010016:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801001a:	f000 fa45 	bl	80104a8 <rclc_executor_handle_counters_zero_init>
 801001e:	490f      	ldr	r1, [pc, #60]	@ (801005c <rclc_executor_init+0xd4>)
 8010020:	68a2      	ldr	r2, [r4, #8]
 8010022:	2300      	movs	r3, #0
 8010024:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 8010028:	b12a      	cbz	r2, 8010036 <rclc_executor_init+0xae>
 801002a:	6962      	ldr	r2, [r4, #20]
 801002c:	b11a      	cbz	r2, 8010036 <rclc_executor_init+0xae>
 801002e:	68e2      	ldr	r2, [r4, #12]
 8010030:	b10a      	cbz	r2, 8010036 <rclc_executor_init+0xae>
 8010032:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8010036:	2000      	movs	r0, #0
 8010038:	e000      	b.n	801003c <rclc_executor_init+0xb4>
 801003a:	200b      	movs	r0, #11
 801003c:	b032      	add	sp, #200	@ 0xc8
 801003e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010042:	200b      	movs	r0, #11
 8010044:	4770      	bx	lr
 8010046:	200a      	movs	r0, #10
 8010048:	e7f8      	b.n	801003c <rclc_executor_init+0xb4>
 801004a:	bf00      	nop
 801004c:	f3af 8000 	nop.w
 8010050:	3b9aca00 	.word	0x3b9aca00
 8010054:	00000000 	.word	0x00000000
 8010058:	080206b0 	.word	0x080206b0
 801005c:	0800fc35 	.word	0x0800fc35

08010060 <rclc_executor_fini>:
 8010060:	b1f8      	cbz	r0, 80100a2 <rclc_executor_fini+0x42>
 8010062:	b538      	push	{r3, r4, r5, lr}
 8010064:	4604      	mov	r4, r0
 8010066:	6880      	ldr	r0, [r0, #8]
 8010068:	b1c8      	cbz	r0, 801009e <rclc_executor_fini+0x3e>
 801006a:	6963      	ldr	r3, [r4, #20]
 801006c:	b1bb      	cbz	r3, 801009e <rclc_executor_fini+0x3e>
 801006e:	68e2      	ldr	r2, [r4, #12]
 8010070:	b1aa      	cbz	r2, 801009e <rclc_executor_fini+0x3e>
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	6919      	ldr	r1, [r3, #16]
 8010076:	4790      	blx	r2
 8010078:	2300      	movs	r3, #0
 801007a:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801007e:	6123      	str	r3, [r4, #16]
 8010080:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8010084:	f104 0518 	add.w	r5, r4, #24
 8010088:	f000 fa0e 	bl	80104a8 <rclc_executor_handle_counters_zero_init>
 801008c:	4628      	mov	r0, r5
 801008e:	f009 fa31 	bl	80194f4 <rcl_wait_set_is_valid>
 8010092:	b940      	cbnz	r0, 80100a6 <rclc_executor_fini+0x46>
 8010094:	a308      	add	r3, pc, #32	@ (adr r3, 80100b8 <rclc_executor_fini+0x58>)
 8010096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009a:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
 801009e:	2000      	movs	r0, #0
 80100a0:	bd38      	pop	{r3, r4, r5, pc}
 80100a2:	2000      	movs	r0, #0
 80100a4:	4770      	bx	lr
 80100a6:	4628      	mov	r0, r5
 80100a8:	f009 fa2a 	bl	8019500 <rcl_wait_set_fini>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	d0f1      	beq.n	8010094 <rclc_executor_fini+0x34>
 80100b0:	f000 fc6e 	bl	8010990 <rcutils_reset_error>
 80100b4:	e7ee      	b.n	8010094 <rclc_executor_fini+0x34>
 80100b6:	bf00      	nop
 80100b8:	3b9aca00 	.word	0x3b9aca00
 80100bc:	00000000 	.word	0x00000000

080100c0 <rclc_executor_add_subscription>:
 80100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c2:	f89d e018 	ldrb.w	lr, [sp, #24]
 80100c6:	b338      	cbz	r0, 8010118 <rclc_executor_add_subscription+0x58>
 80100c8:	b331      	cbz	r1, 8010118 <rclc_executor_add_subscription+0x58>
 80100ca:	b32a      	cbz	r2, 8010118 <rclc_executor_add_subscription+0x58>
 80100cc:	b323      	cbz	r3, 8010118 <rclc_executor_add_subscription+0x58>
 80100ce:	4604      	mov	r4, r0
 80100d0:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 80100d4:	42a8      	cmp	r0, r5
 80100d6:	d301      	bcc.n	80100dc <rclc_executor_add_subscription+0x1c>
 80100d8:	2001      	movs	r0, #1
 80100da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100dc:	68a6      	ldr	r6, [r4, #8]
 80100de:	0187      	lsls	r7, r0, #6
 80100e0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 80100e4:	2500      	movs	r5, #0
 80100e6:	55f5      	strb	r5, [r6, r7]
 80100e8:	3001      	adds	r0, #1
 80100ea:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 80100ee:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 80100f2:	2301      	movs	r3, #1
 80100f4:	f104 0518 	add.w	r5, r4, #24
 80100f8:	e9cc 1201 	strd	r1, r2, [ip, #4]
 80100fc:	f88c e001 	strb.w	lr, [ip, #1]
 8010100:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8010104:	6120      	str	r0, [r4, #16]
 8010106:	4628      	mov	r0, r5
 8010108:	f009 f9f4 	bl	80194f4 <rcl_wait_set_is_valid>
 801010c:	b930      	cbnz	r0, 801011c <rclc_executor_add_subscription+0x5c>
 801010e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010110:	3301      	adds	r3, #1
 8010112:	2000      	movs	r0, #0
 8010114:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8010116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010118:	200b      	movs	r0, #11
 801011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801011c:	4628      	mov	r0, r5
 801011e:	f009 f9ef 	bl	8019500 <rcl_wait_set_fini>
 8010122:	2800      	cmp	r0, #0
 8010124:	d0f3      	beq.n	801010e <rclc_executor_add_subscription+0x4e>
 8010126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010128 <rclc_executor_add_timer>:
 8010128:	b300      	cbz	r0, 801016c <rclc_executor_add_timer+0x44>
 801012a:	b1f9      	cbz	r1, 801016c <rclc_executor_add_timer+0x44>
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010132:	4293      	cmp	r3, r2
 8010134:	4604      	mov	r4, r0
 8010136:	d301      	bcc.n	801013c <rclc_executor_add_timer+0x14>
 8010138:	2001      	movs	r0, #1
 801013a:	bd38      	pop	{r3, r4, r5, pc}
 801013c:	6880      	ldr	r0, [r0, #8]
 801013e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8010142:	019d      	lsls	r5, r3, #6
 8010144:	6051      	str	r1, [r2, #4]
 8010146:	2102      	movs	r1, #2
 8010148:	5341      	strh	r1, [r0, r5]
 801014a:	3301      	adds	r3, #1
 801014c:	2000      	movs	r0, #0
 801014e:	2101      	movs	r1, #1
 8010150:	f104 0518 	add.w	r5, r4, #24
 8010154:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8010156:	8711      	strh	r1, [r2, #56]	@ 0x38
 8010158:	4628      	mov	r0, r5
 801015a:	6123      	str	r3, [r4, #16]
 801015c:	f009 f9ca 	bl	80194f4 <rcl_wait_set_is_valid>
 8010160:	b930      	cbnz	r0, 8010170 <rclc_executor_add_timer+0x48>
 8010162:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010164:	3301      	adds	r3, #1
 8010166:	2000      	movs	r0, #0
 8010168:	6523      	str	r3, [r4, #80]	@ 0x50
 801016a:	bd38      	pop	{r3, r4, r5, pc}
 801016c:	200b      	movs	r0, #11
 801016e:	4770      	bx	lr
 8010170:	4628      	mov	r0, r5
 8010172:	f009 f9c5 	bl	8019500 <rcl_wait_set_fini>
 8010176:	2800      	cmp	r0, #0
 8010178:	d0f3      	beq.n	8010162 <rclc_executor_add_timer+0x3a>
 801017a:	bd38      	pop	{r3, r4, r5, pc}

0801017c <rclc_executor_prepare>:
 801017c:	2800      	cmp	r0, #0
 801017e:	d044      	beq.n	801020a <rclc_executor_prepare+0x8e>
 8010180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010182:	f100 0518 	add.w	r5, r0, #24
 8010186:	b09b      	sub	sp, #108	@ 0x6c
 8010188:	4604      	mov	r4, r0
 801018a:	4628      	mov	r0, r5
 801018c:	f009 f9b2 	bl	80194f4 <rcl_wait_set_is_valid>
 8010190:	b110      	cbz	r0, 8010198 <rclc_executor_prepare+0x1c>
 8010192:	2000      	movs	r0, #0
 8010194:	b01b      	add	sp, #108	@ 0x6c
 8010196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010198:	4628      	mov	r0, r5
 801019a:	f009 f9b1 	bl	8019500 <rcl_wait_set_fini>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d130      	bne.n	8010204 <rclc_executor_prepare+0x88>
 80101a2:	a80c      	add	r0, sp, #48	@ 0x30
 80101a4:	f009 f992 	bl	80194cc <rcl_get_zero_initialized_wait_set>
 80101a8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80101ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101b0:	46ae      	mov	lr, r5
 80101b2:	6967      	ldr	r7, [r4, #20]
 80101b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101c8:	f8dc 3000 	ldr.w	r3, [ip]
 80101cc:	f8ce 3000 	str.w	r3, [lr]
 80101d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80101d2:	ae04      	add	r6, sp, #16
 80101d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	6862      	ldr	r2, [r4, #4]
 80101da:	6033      	str	r3, [r6, #0]
 80101dc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80101de:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80101e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80101e4:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 80101e8:	e9cd 2100 	strd	r2, r1, [sp]
 80101ec:	4628      	mov	r0, r5
 80101ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80101f0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80101f2:	f009 fca1 	bl	8019b38 <rcl_wait_set_init>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	d0cc      	beq.n	8010194 <rclc_executor_prepare+0x18>
 80101fa:	900b      	str	r0, [sp, #44]	@ 0x2c
 80101fc:	f000 fbc8 	bl	8010990 <rcutils_reset_error>
 8010200:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010202:	e7c7      	b.n	8010194 <rclc_executor_prepare+0x18>
 8010204:	f000 fbc4 	bl	8010990 <rcutils_reset_error>
 8010208:	e7cb      	b.n	80101a2 <rclc_executor_prepare+0x26>
 801020a:	200b      	movs	r0, #11
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop

08010210 <rclc_executor_spin_some>:
 8010210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	b083      	sub	sp, #12
 8010216:	2800      	cmp	r0, #0
 8010218:	f000 8091 	beq.w	801033e <rclc_executor_spin_some+0x12e>
 801021c:	4604      	mov	r4, r0
 801021e:	6840      	ldr	r0, [r0, #4]
 8010220:	4690      	mov	r8, r2
 8010222:	4699      	mov	r9, r3
 8010224:	f008 f9aa 	bl	801857c <rcl_context_is_valid>
 8010228:	2800      	cmp	r0, #0
 801022a:	d037      	beq.n	801029c <rclc_executor_spin_some+0x8c>
 801022c:	4620      	mov	r0, r4
 801022e:	f104 0718 	add.w	r7, r4, #24
 8010232:	f7ff ffa3 	bl	801017c <rclc_executor_prepare>
 8010236:	4638      	mov	r0, r7
 8010238:	f009 fa32 	bl	80196a0 <rcl_wait_set_clear>
 801023c:	4606      	mov	r6, r0
 801023e:	2800      	cmp	r0, #0
 8010240:	d177      	bne.n	8010332 <rclc_executor_spin_some+0x122>
 8010242:	68e3      	ldr	r3, [r4, #12]
 8010244:	4605      	mov	r5, r0
 8010246:	b1eb      	cbz	r3, 8010284 <rclc_executor_spin_some+0x74>
 8010248:	68a1      	ldr	r1, [r4, #8]
 801024a:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 801024e:	01aa      	lsls	r2, r5, #6
 8010250:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8010254:	b1b3      	cbz	r3, 8010284 <rclc_executor_spin_some+0x74>
 8010256:	5c8b      	ldrb	r3, [r1, r2]
 8010258:	2b0a      	cmp	r3, #10
 801025a:	d81f      	bhi.n	801029c <rclc_executor_spin_some+0x8c>
 801025c:	e8df f003 	tbb	[pc, r3]
 8010260:	253e3434 	.word	0x253e3434
 8010264:	06060625 	.word	0x06060625
 8010268:	525d      	.short	0x525d
 801026a:	48          	.byte	0x48
 801026b:	00          	.byte	0x00
 801026c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010270:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010274:	4638      	mov	r0, r7
 8010276:	f009 fd73 	bl	8019d60 <rcl_wait_set_add_service>
 801027a:	b9f8      	cbnz	r0, 80102bc <rclc_executor_spin_some+0xac>
 801027c:	68e3      	ldr	r3, [r4, #12]
 801027e:	3501      	adds	r5, #1
 8010280:	42ab      	cmp	r3, r5
 8010282:	d8e1      	bhi.n	8010248 <rclc_executor_spin_some+0x38>
 8010284:	4642      	mov	r2, r8
 8010286:	464b      	mov	r3, r9
 8010288:	4638      	mov	r0, r7
 801028a:	f009 fd95 	bl	8019db8 <rcl_wait>
 801028e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 8010292:	2d00      	cmp	r5, #0
 8010294:	f000 80ab 	beq.w	80103ee <rclc_executor_spin_some+0x1de>
 8010298:	2d01      	cmp	r5, #1
 801029a:	d055      	beq.n	8010348 <rclc_executor_spin_some+0x138>
 801029c:	f000 fb78 	bl	8010990 <rcutils_reset_error>
 80102a0:	2601      	movs	r6, #1
 80102a2:	4630      	mov	r0, r6
 80102a4:	b003      	add	sp, #12
 80102a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102ae:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102b2:	4638      	mov	r0, r7
 80102b4:	f009 fd28 	bl	8019d08 <rcl_wait_set_add_client>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d0df      	beq.n	801027c <rclc_executor_spin_some+0x6c>
 80102bc:	9001      	str	r0, [sp, #4]
 80102be:	f000 fb67 	bl	8010990 <rcutils_reset_error>
 80102c2:	9801      	ldr	r0, [sp, #4]
 80102c4:	4606      	mov	r6, r0
 80102c6:	e7ec      	b.n	80102a2 <rclc_executor_spin_some+0x92>
 80102c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102d0:	4638      	mov	r0, r7
 80102d2:	f009 f9b9 	bl	8019648 <rcl_wait_set_add_subscription>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d0d0      	beq.n	801027c <rclc_executor_spin_some+0x6c>
 80102da:	e7ef      	b.n	80102bc <rclc_executor_spin_some+0xac>
 80102dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102e0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102e4:	4638      	mov	r0, r7
 80102e6:	f009 fcdf 	bl	8019ca8 <rcl_wait_set_add_timer>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d0c6      	beq.n	801027c <rclc_executor_spin_some+0x6c>
 80102ee:	e7e5      	b.n	80102bc <rclc_executor_spin_some+0xac>
 80102f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102f8:	4638      	mov	r0, r7
 80102fa:	f009 fca9 	bl	8019c50 <rcl_wait_set_add_guard_condition>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d0bc      	beq.n	801027c <rclc_executor_spin_some+0x6c>
 8010302:	e7db      	b.n	80102bc <rclc_executor_spin_some+0xac>
 8010304:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010308:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801030c:	3110      	adds	r1, #16
 801030e:	4638      	mov	r0, r7
 8010310:	f00a fa70 	bl	801a7f4 <rcl_action_wait_set_add_action_server>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0b1      	beq.n	801027c <rclc_executor_spin_some+0x6c>
 8010318:	e7d0      	b.n	80102bc <rclc_executor_spin_some+0xac>
 801031a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801031e:	2300      	movs	r3, #0
 8010320:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010324:	3110      	adds	r1, #16
 8010326:	4638      	mov	r0, r7
 8010328:	f00a f852 	bl	801a3d0 <rcl_action_wait_set_add_action_client>
 801032c:	2800      	cmp	r0, #0
 801032e:	d0a5      	beq.n	801027c <rclc_executor_spin_some+0x6c>
 8010330:	e7c4      	b.n	80102bc <rclc_executor_spin_some+0xac>
 8010332:	f000 fb2d 	bl	8010990 <rcutils_reset_error>
 8010336:	4630      	mov	r0, r6
 8010338:	b003      	add	sp, #12
 801033a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033e:	260b      	movs	r6, #11
 8010340:	4630      	mov	r0, r6
 8010342:	b003      	add	sp, #12
 8010344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010348:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 801034c:	4663      	mov	r3, ip
 801034e:	4615      	mov	r5, r2
 8010350:	b1ca      	cbz	r2, 8010386 <rclc_executor_spin_some+0x176>
 8010352:	2500      	movs	r5, #0
 8010354:	46a8      	mov	r8, r5
 8010356:	f240 1991 	movw	r9, #401	@ 0x191
 801035a:	e00c      	b.n	8010376 <rclc_executor_spin_some+0x166>
 801035c:	f7ff fab2 	bl	800f8c4 <_rclc_check_for_new_data>
 8010360:	f108 0801 	add.w	r8, r8, #1
 8010364:	4605      	mov	r5, r0
 8010366:	b108      	cbz	r0, 801036c <rclc_executor_spin_some+0x15c>
 8010368:	4548      	cmp	r0, r9
 801036a:	d13e      	bne.n	80103ea <rclc_executor_spin_some+0x1da>
 801036c:	68e2      	ldr	r2, [r4, #12]
 801036e:	4590      	cmp	r8, r2
 8010370:	f080 808b 	bcs.w	801048a <rclc_executor_spin_some+0x27a>
 8010374:	68a3      	ldr	r3, [r4, #8]
 8010376:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 801037a:	469c      	mov	ip, r3
 801037c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010380:	4639      	mov	r1, r7
 8010382:	2b00      	cmp	r3, #0
 8010384:	d1ea      	bne.n	801035c <rclc_executor_spin_some+0x14c>
 8010386:	4611      	mov	r1, r2
 8010388:	4660      	mov	r0, ip
 801038a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 801038e:	4798      	blx	r3
 8010390:	b358      	cbz	r0, 80103ea <rclc_executor_spin_some+0x1da>
 8010392:	68e3      	ldr	r3, [r4, #12]
 8010394:	b34b      	cbz	r3, 80103ea <rclc_executor_spin_some+0x1da>
 8010396:	f04f 0800 	mov.w	r8, #0
 801039a:	f240 1991 	movw	r9, #401	@ 0x191
 801039e:	e00a      	b.n	80103b6 <rclc_executor_spin_some+0x1a6>
 80103a0:	f7ff fade 	bl	800f960 <_rclc_take_new_data>
 80103a4:	f108 0801 	add.w	r8, r8, #1
 80103a8:	4605      	mov	r5, r0
 80103aa:	b108      	cbz	r0, 80103b0 <rclc_executor_spin_some+0x1a0>
 80103ac:	4548      	cmp	r0, r9
 80103ae:	d11c      	bne.n	80103ea <rclc_executor_spin_some+0x1da>
 80103b0:	68e3      	ldr	r3, [r4, #12]
 80103b2:	4598      	cmp	r8, r3
 80103b4:	d26f      	bcs.n	8010496 <rclc_executor_spin_some+0x286>
 80103b6:	68a3      	ldr	r3, [r4, #8]
 80103b8:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 80103bc:	4639      	mov	r1, r7
 80103be:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	d1ec      	bne.n	80103a0 <rclc_executor_spin_some+0x190>
 80103c6:	2700      	movs	r7, #0
 80103c8:	e009      	b.n	80103de <rclc_executor_spin_some+0x1ce>
 80103ca:	f7ff fc69 	bl	800fca0 <_rclc_execute>
 80103ce:	3701      	adds	r7, #1
 80103d0:	4605      	mov	r5, r0
 80103d2:	b950      	cbnz	r0, 80103ea <rclc_executor_spin_some+0x1da>
 80103d4:	68e3      	ldr	r3, [r4, #12]
 80103d6:	429f      	cmp	r7, r3
 80103d8:	f4bf af63 	bcs.w	80102a2 <rclc_executor_spin_some+0x92>
 80103dc:	68a3      	ldr	r3, [r4, #8]
 80103de:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 80103e2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1ef      	bne.n	80103ca <rclc_executor_spin_some+0x1ba>
 80103ea:	462e      	mov	r6, r5
 80103ec:	e759      	b.n	80102a2 <rclc_executor_spin_some+0x92>
 80103ee:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 80103f2:	4663      	mov	r3, ip
 80103f4:	2a00      	cmp	r2, #0
 80103f6:	d054      	beq.n	80104a2 <rclc_executor_spin_some+0x292>
 80103f8:	46a8      	mov	r8, r5
 80103fa:	f240 1991 	movw	r9, #401	@ 0x191
 80103fe:	e00b      	b.n	8010418 <rclc_executor_spin_some+0x208>
 8010400:	f7ff fa60 	bl	800f8c4 <_rclc_check_for_new_data>
 8010404:	f108 0801 	add.w	r8, r8, #1
 8010408:	4605      	mov	r5, r0
 801040a:	b108      	cbz	r0, 8010410 <rclc_executor_spin_some+0x200>
 801040c:	4548      	cmp	r0, r9
 801040e:	d1ec      	bne.n	80103ea <rclc_executor_spin_some+0x1da>
 8010410:	68e2      	ldr	r2, [r4, #12]
 8010412:	4590      	cmp	r8, r2
 8010414:	d23c      	bcs.n	8010490 <rclc_executor_spin_some+0x280>
 8010416:	68a3      	ldr	r3, [r4, #8]
 8010418:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 801041c:	469c      	mov	ip, r3
 801041e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8010422:	4639      	mov	r1, r7
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1eb      	bne.n	8010400 <rclc_executor_spin_some+0x1f0>
 8010428:	4611      	mov	r1, r2
 801042a:	4660      	mov	r0, ip
 801042c:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8010430:	4798      	blx	r3
 8010432:	2800      	cmp	r0, #0
 8010434:	d0d9      	beq.n	80103ea <rclc_executor_spin_some+0x1da>
 8010436:	68e3      	ldr	r3, [r4, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d0d6      	beq.n	80103ea <rclc_executor_spin_some+0x1da>
 801043c:	f04f 0a00 	mov.w	sl, #0
 8010440:	f240 1891 	movw	r8, #401	@ 0x191
 8010444:	f240 2959 	movw	r9, #601	@ 0x259
 8010448:	e013      	b.n	8010472 <rclc_executor_spin_some+0x262>
 801044a:	f7ff fa89 	bl	800f960 <_rclc_take_new_data>
 801044e:	b118      	cbz	r0, 8010458 <rclc_executor_spin_some+0x248>
 8010450:	4540      	cmp	r0, r8
 8010452:	d001      	beq.n	8010458 <rclc_executor_spin_some+0x248>
 8010454:	4548      	cmp	r0, r9
 8010456:	d122      	bne.n	801049e <rclc_executor_spin_some+0x28e>
 8010458:	68a0      	ldr	r0, [r4, #8]
 801045a:	4458      	add	r0, fp
 801045c:	f7ff fc20 	bl	800fca0 <_rclc_execute>
 8010460:	f10a 0a01 	add.w	sl, sl, #1
 8010464:	4605      	mov	r5, r0
 8010466:	2800      	cmp	r0, #0
 8010468:	d1bf      	bne.n	80103ea <rclc_executor_spin_some+0x1da>
 801046a:	68e3      	ldr	r3, [r4, #12]
 801046c:	459a      	cmp	sl, r3
 801046e:	f4bf af18 	bcs.w	80102a2 <rclc_executor_spin_some+0x92>
 8010472:	68a0      	ldr	r0, [r4, #8]
 8010474:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8010478:	4639      	mov	r1, r7
 801047a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801047e:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1e1      	bne.n	801044a <rclc_executor_spin_some+0x23a>
 8010486:	462e      	mov	r6, r5
 8010488:	e70b      	b.n	80102a2 <rclc_executor_spin_some+0x92>
 801048a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801048e:	e77a      	b.n	8010386 <rclc_executor_spin_some+0x176>
 8010490:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8010494:	e7c8      	b.n	8010428 <rclc_executor_spin_some+0x218>
 8010496:	2b00      	cmp	r3, #0
 8010498:	d0a7      	beq.n	80103ea <rclc_executor_spin_some+0x1da>
 801049a:	68a3      	ldr	r3, [r4, #8]
 801049c:	e793      	b.n	80103c6 <rclc_executor_spin_some+0x1b6>
 801049e:	4606      	mov	r6, r0
 80104a0:	e6ff      	b.n	80102a2 <rclc_executor_spin_some+0x92>
 80104a2:	4615      	mov	r5, r2
 80104a4:	e7c0      	b.n	8010428 <rclc_executor_spin_some+0x218>
 80104a6:	bf00      	nop

080104a8 <rclc_executor_handle_counters_zero_init>:
 80104a8:	b130      	cbz	r0, 80104b8 <rclc_executor_handle_counters_zero_init+0x10>
 80104aa:	b508      	push	{r3, lr}
 80104ac:	2220      	movs	r2, #32
 80104ae:	2100      	movs	r1, #0
 80104b0:	f00d fc86 	bl	801ddc0 <memset>
 80104b4:	2000      	movs	r0, #0
 80104b6:	bd08      	pop	{r3, pc}
 80104b8:	200b      	movs	r0, #11
 80104ba:	4770      	bx	lr

080104bc <rclc_executor_handle_init>:
 80104bc:	b158      	cbz	r0, 80104d6 <rclc_executor_handle_init+0x1a>
 80104be:	2300      	movs	r3, #0
 80104c0:	220b      	movs	r2, #11
 80104c2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80104c6:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80104ca:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80104ce:	8002      	strh	r2, [r0, #0]
 80104d0:	8703      	strh	r3, [r0, #56]	@ 0x38
 80104d2:	4618      	mov	r0, r3
 80104d4:	4770      	bx	lr
 80104d6:	200b      	movs	r0, #11
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop

080104dc <rclc_support_init_with_options>:
 80104dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104e0:	b083      	sub	sp, #12
 80104e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80104e4:	b340      	cbz	r0, 8010538 <rclc_support_init_with_options+0x5c>
 80104e6:	461d      	mov	r5, r3
 80104e8:	b333      	cbz	r3, 8010538 <rclc_support_init_with_options+0x5c>
 80104ea:	b32e      	cbz	r6, 8010538 <rclc_support_init_with_options+0x5c>
 80104ec:	46e9      	mov	r9, sp
 80104ee:	4604      	mov	r4, r0
 80104f0:	4648      	mov	r0, r9
 80104f2:	460f      	mov	r7, r1
 80104f4:	4690      	mov	r8, r2
 80104f6:	f008 f837 	bl	8018568 <rcl_get_zero_initialized_context>
 80104fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80104fe:	462a      	mov	r2, r5
 8010500:	e884 0003 	stmia.w	r4, {r0, r1}
 8010504:	4623      	mov	r3, r4
 8010506:	4641      	mov	r1, r8
 8010508:	4638      	mov	r0, r7
 801050a:	f008 f9bb 	bl	8018884 <rcl_init>
 801050e:	4605      	mov	r5, r0
 8010510:	b960      	cbnz	r0, 801052c <rclc_support_init_with_options+0x50>
 8010512:	60a6      	str	r6, [r4, #8]
 8010514:	4632      	mov	r2, r6
 8010516:	f104 010c 	add.w	r1, r4, #12
 801051a:	2003      	movs	r0, #3
 801051c:	f008 fdfc 	bl	8019118 <rcl_clock_init>
 8010520:	4605      	mov	r5, r0
 8010522:	b918      	cbnz	r0, 801052c <rclc_support_init_with_options+0x50>
 8010524:	4628      	mov	r0, r5
 8010526:	b003      	add	sp, #12
 8010528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801052c:	f000 fa30 	bl	8010990 <rcutils_reset_error>
 8010530:	4628      	mov	r0, r5
 8010532:	b003      	add	sp, #12
 8010534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010538:	250b      	movs	r5, #11
 801053a:	4628      	mov	r0, r5
 801053c:	b003      	add	sp, #12
 801053e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010542:	bf00      	nop

08010544 <rclc_support_fini>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	b320      	cbz	r0, 8010592 <rclc_support_fini+0x4e>
 8010548:	4604      	mov	r4, r0
 801054a:	300c      	adds	r0, #12
 801054c:	f008 fe52 	bl	80191f4 <rcl_clock_fini>
 8010550:	4605      	mov	r5, r0
 8010552:	b948      	cbnz	r0, 8010568 <rclc_support_fini+0x24>
 8010554:	4620      	mov	r0, r4
 8010556:	f008 facf 	bl	8018af8 <rcl_shutdown>
 801055a:	b968      	cbnz	r0, 8010578 <rclc_support_fini+0x34>
 801055c:	4620      	mov	r0, r4
 801055e:	f008 f873 	bl	8018648 <rcl_context_fini>
 8010562:	b988      	cbnz	r0, 8010588 <rclc_support_fini+0x44>
 8010564:	4628      	mov	r0, r5
 8010566:	bd38      	pop	{r3, r4, r5, pc}
 8010568:	f000 fa12 	bl	8010990 <rcutils_reset_error>
 801056c:	4620      	mov	r0, r4
 801056e:	2501      	movs	r5, #1
 8010570:	f008 fac2 	bl	8018af8 <rcl_shutdown>
 8010574:	2800      	cmp	r0, #0
 8010576:	d0f1      	beq.n	801055c <rclc_support_fini+0x18>
 8010578:	f000 fa0a 	bl	8010990 <rcutils_reset_error>
 801057c:	4620      	mov	r0, r4
 801057e:	2501      	movs	r5, #1
 8010580:	f008 f862 	bl	8018648 <rcl_context_fini>
 8010584:	2800      	cmp	r0, #0
 8010586:	d0ed      	beq.n	8010564 <rclc_support_fini+0x20>
 8010588:	2501      	movs	r5, #1
 801058a:	f000 fa01 	bl	8010990 <rcutils_reset_error>
 801058e:	4628      	mov	r0, r5
 8010590:	bd38      	pop	{r3, r4, r5, pc}
 8010592:	250b      	movs	r5, #11
 8010594:	4628      	mov	r0, r5
 8010596:	bd38      	pop	{r3, r4, r5, pc}

08010598 <rclc_node_init_default>:
 8010598:	b3b8      	cbz	r0, 801060a <rclc_node_init_default+0x72>
 801059a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801059e:	460d      	mov	r5, r1
 80105a0:	b0a1      	sub	sp, #132	@ 0x84
 80105a2:	b329      	cbz	r1, 80105f0 <rclc_node_init_default+0x58>
 80105a4:	4616      	mov	r6, r2
 80105a6:	b31a      	cbz	r2, 80105f0 <rclc_node_init_default+0x58>
 80105a8:	461f      	mov	r7, r3
 80105aa:	b30b      	cbz	r3, 80105f0 <rclc_node_init_default+0x58>
 80105ac:	f10d 0810 	add.w	r8, sp, #16
 80105b0:	4604      	mov	r4, r0
 80105b2:	4640      	mov	r0, r8
 80105b4:	f7fe fa04 	bl	800e9c0 <rcl_get_zero_initialized_node>
 80105b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80105bc:	f10d 0918 	add.w	r9, sp, #24
 80105c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80105c4:	4648      	mov	r0, r9
 80105c6:	f7fe fbd5 	bl	800ed74 <rcl_node_get_default_options>
 80105ca:	4640      	mov	r0, r8
 80105cc:	f7fe f9f8 	bl	800e9c0 <rcl_get_zero_initialized_node>
 80105d0:	f8cd 9000 	str.w	r9, [sp]
 80105d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80105d8:	463b      	mov	r3, r7
 80105da:	e884 0003 	stmia.w	r4, {r0, r1}
 80105de:	4632      	mov	r2, r6
 80105e0:	4629      	mov	r1, r5
 80105e2:	4620      	mov	r0, r4
 80105e4:	f7fe f9f6 	bl	800e9d4 <rcl_node_init>
 80105e8:	b930      	cbnz	r0, 80105f8 <rclc_node_init_default+0x60>
 80105ea:	b021      	add	sp, #132	@ 0x84
 80105ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105f0:	200b      	movs	r0, #11
 80105f2:	b021      	add	sp, #132	@ 0x84
 80105f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105f8:	9003      	str	r0, [sp, #12]
 80105fa:	f000 f9c9 	bl	8010990 <rcutils_reset_error>
 80105fe:	f000 f9c7 	bl	8010990 <rcutils_reset_error>
 8010602:	9803      	ldr	r0, [sp, #12]
 8010604:	b021      	add	sp, #132	@ 0x84
 8010606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801060a:	200b      	movs	r0, #11
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop

08010610 <rclc_publisher_init_default>:
 8010610:	b368      	cbz	r0, 801066e <rclc_publisher_init_default+0x5e>
 8010612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010616:	460d      	mov	r5, r1
 8010618:	b0a0      	sub	sp, #128	@ 0x80
 801061a:	b321      	cbz	r1, 8010666 <rclc_publisher_init_default+0x56>
 801061c:	4616      	mov	r6, r2
 801061e:	b312      	cbz	r2, 8010666 <rclc_publisher_init_default+0x56>
 8010620:	461f      	mov	r7, r3
 8010622:	b303      	cbz	r3, 8010666 <rclc_publisher_init_default+0x56>
 8010624:	4604      	mov	r4, r0
 8010626:	f7fe fbed 	bl	800ee04 <rcl_get_zero_initialized_publisher>
 801062a:	f10d 0810 	add.w	r8, sp, #16
 801062e:	6020      	str	r0, [r4, #0]
 8010630:	4640      	mov	r0, r8
 8010632:	f7fe fcb1 	bl	800ef98 <rcl_publisher_get_default_options>
 8010636:	490f      	ldr	r1, [pc, #60]	@ (8010674 <rclc_publisher_init_default+0x64>)
 8010638:	2250      	movs	r2, #80	@ 0x50
 801063a:	4640      	mov	r0, r8
 801063c:	f00d fcf1 	bl	801e022 <memcpy>
 8010640:	f8cd 8000 	str.w	r8, [sp]
 8010644:	463b      	mov	r3, r7
 8010646:	4632      	mov	r2, r6
 8010648:	4629      	mov	r1, r5
 801064a:	4620      	mov	r0, r4
 801064c:	f7fe fbe0 	bl	800ee10 <rcl_publisher_init>
 8010650:	b910      	cbnz	r0, 8010658 <rclc_publisher_init_default+0x48>
 8010652:	b020      	add	sp, #128	@ 0x80
 8010654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010658:	9003      	str	r0, [sp, #12]
 801065a:	f000 f999 	bl	8010990 <rcutils_reset_error>
 801065e:	9803      	ldr	r0, [sp, #12]
 8010660:	b020      	add	sp, #128	@ 0x80
 8010662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010666:	200b      	movs	r0, #11
 8010668:	b020      	add	sp, #128	@ 0x80
 801066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801066e:	200b      	movs	r0, #11
 8010670:	4770      	bx	lr
 8010672:	bf00      	nop
 8010674:	08020740 	.word	0x08020740

08010678 <rclc_subscription_init_default>:
 8010678:	b368      	cbz	r0, 80106d6 <rclc_subscription_init_default+0x5e>
 801067a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801067e:	460d      	mov	r5, r1
 8010680:	b0a2      	sub	sp, #136	@ 0x88
 8010682:	b321      	cbz	r1, 80106ce <rclc_subscription_init_default+0x56>
 8010684:	4616      	mov	r6, r2
 8010686:	b312      	cbz	r2, 80106ce <rclc_subscription_init_default+0x56>
 8010688:	461f      	mov	r7, r3
 801068a:	b303      	cbz	r3, 80106ce <rclc_subscription_init_default+0x56>
 801068c:	4604      	mov	r4, r0
 801068e:	f7fe fd03 	bl	800f098 <rcl_get_zero_initialized_subscription>
 8010692:	f10d 0810 	add.w	r8, sp, #16
 8010696:	6020      	str	r0, [r4, #0]
 8010698:	4640      	mov	r0, r8
 801069a:	f7fe fdff 	bl	800f29c <rcl_subscription_get_default_options>
 801069e:	490f      	ldr	r1, [pc, #60]	@ (80106dc <rclc_subscription_init_default+0x64>)
 80106a0:	2250      	movs	r2, #80	@ 0x50
 80106a2:	4640      	mov	r0, r8
 80106a4:	f00d fcbd 	bl	801e022 <memcpy>
 80106a8:	f8cd 8000 	str.w	r8, [sp]
 80106ac:	463b      	mov	r3, r7
 80106ae:	4632      	mov	r2, r6
 80106b0:	4629      	mov	r1, r5
 80106b2:	4620      	mov	r0, r4
 80106b4:	f7fe fcf6 	bl	800f0a4 <rcl_subscription_init>
 80106b8:	b910      	cbnz	r0, 80106c0 <rclc_subscription_init_default+0x48>
 80106ba:	b022      	add	sp, #136	@ 0x88
 80106bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c0:	9003      	str	r0, [sp, #12]
 80106c2:	f000 f965 	bl	8010990 <rcutils_reset_error>
 80106c6:	9803      	ldr	r0, [sp, #12]
 80106c8:	b022      	add	sp, #136	@ 0x88
 80106ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ce:	200b      	movs	r0, #11
 80106d0:	b022      	add	sp, #136	@ 0x88
 80106d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d6:	200b      	movs	r0, #11
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	08020790 	.word	0x08020790

080106e0 <rclc_timer_init_default2>:
 80106e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e4:	b08c      	sub	sp, #48	@ 0x30
 80106e6:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80106ea:	b330      	cbz	r0, 801073a <rclc_timer_init_default2+0x5a>
 80106ec:	460e      	mov	r6, r1
 80106ee:	b321      	cbz	r1, 801073a <rclc_timer_init_default2+0x5a>
 80106f0:	4690      	mov	r8, r2
 80106f2:	461f      	mov	r7, r3
 80106f4:	4605      	mov	r5, r0
 80106f6:	f7fe ff03 	bl	800f500 <rcl_get_zero_initialized_timer>
 80106fa:	9408      	str	r4, [sp, #32]
 80106fc:	68b4      	ldr	r4, [r6, #8]
 80106fe:	6028      	str	r0, [r5, #0]
 8010700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010702:	f10d 0c0c 	add.w	ip, sp, #12
 8010706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801070a:	6823      	ldr	r3, [r4, #0]
 801070c:	f8cc 3000 	str.w	r3, [ip]
 8010710:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010712:	9302      	str	r3, [sp, #8]
 8010714:	e9cd 8700 	strd	r8, r7, [sp]
 8010718:	4628      	mov	r0, r5
 801071a:	4632      	mov	r2, r6
 801071c:	f106 010c 	add.w	r1, r6, #12
 8010720:	f7fe fef6 	bl	800f510 <rcl_timer_init2>
 8010724:	b910      	cbnz	r0, 801072c <rclc_timer_init_default2+0x4c>
 8010726:	b00c      	add	sp, #48	@ 0x30
 8010728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801072c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801072e:	f000 f92f 	bl	8010990 <rcutils_reset_error>
 8010732:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010734:	b00c      	add	sp, #48	@ 0x30
 8010736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801073a:	200b      	movs	r0, #11
 801073c:	b00c      	add	sp, #48	@ 0x30
 801073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010742:	bf00      	nop

08010744 <__default_zero_allocate>:
 8010744:	f00c bdf4 	b.w	801d330 <calloc>

08010748 <__default_reallocate>:
 8010748:	f00c bf92 	b.w	801d670 <realloc>

0801074c <__default_deallocate>:
 801074c:	f00c be6e 	b.w	801d42c <free>

08010750 <__default_allocate>:
 8010750:	f00c be64 	b.w	801d41c <malloc>

08010754 <rcutils_get_zero_initialized_allocator>:
 8010754:	b510      	push	{r4, lr}
 8010756:	4c05      	ldr	r4, [pc, #20]	@ (801076c <rcutils_get_zero_initialized_allocator+0x18>)
 8010758:	4686      	mov	lr, r0
 801075a:	4684      	mov	ip, r0
 801075c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801075e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	f8cc 3000 	str.w	r3, [ip]
 8010768:	4670      	mov	r0, lr
 801076a:	bd10      	pop	{r4, pc}
 801076c:	080207e0 	.word	0x080207e0

08010770 <rcutils_get_default_allocator>:
 8010770:	b510      	push	{r4, lr}
 8010772:	4c05      	ldr	r4, [pc, #20]	@ (8010788 <rcutils_get_default_allocator+0x18>)
 8010774:	4686      	mov	lr, r0
 8010776:	4684      	mov	ip, r0
 8010778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801077a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801077e:	6823      	ldr	r3, [r4, #0]
 8010780:	f8cc 3000 	str.w	r3, [ip]
 8010784:	4670      	mov	r0, lr
 8010786:	bd10      	pop	{r4, pc}
 8010788:	20000188 	.word	0x20000188

0801078c <rcutils_set_default_allocator>:
 801078c:	b1a8      	cbz	r0, 80107ba <rcutils_set_default_allocator+0x2e>
 801078e:	6802      	ldr	r2, [r0, #0]
 8010790:	b1a2      	cbz	r2, 80107bc <rcutils_set_default_allocator+0x30>
 8010792:	6841      	ldr	r1, [r0, #4]
 8010794:	b1a1      	cbz	r1, 80107c0 <rcutils_set_default_allocator+0x34>
 8010796:	b410      	push	{r4}
 8010798:	68c4      	ldr	r4, [r0, #12]
 801079a:	b164      	cbz	r4, 80107b6 <rcutils_set_default_allocator+0x2a>
 801079c:	6880      	ldr	r0, [r0, #8]
 801079e:	b138      	cbz	r0, 80107b0 <rcutils_set_default_allocator+0x24>
 80107a0:	4b08      	ldr	r3, [pc, #32]	@ (80107c4 <rcutils_set_default_allocator+0x38>)
 80107a2:	601a      	str	r2, [r3, #0]
 80107a4:	2200      	movs	r2, #0
 80107a6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80107aa:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80107ae:	2001      	movs	r0, #1
 80107b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107b4:	4770      	bx	lr
 80107b6:	4620      	mov	r0, r4
 80107b8:	e7fa      	b.n	80107b0 <rcutils_set_default_allocator+0x24>
 80107ba:	4770      	bx	lr
 80107bc:	4610      	mov	r0, r2
 80107be:	4770      	bx	lr
 80107c0:	4608      	mov	r0, r1
 80107c2:	4770      	bx	lr
 80107c4:	20000188 	.word	0x20000188

080107c8 <rcutils_allocator_is_valid>:
 80107c8:	b158      	cbz	r0, 80107e2 <rcutils_allocator_is_valid+0x1a>
 80107ca:	6803      	ldr	r3, [r0, #0]
 80107cc:	b143      	cbz	r3, 80107e0 <rcutils_allocator_is_valid+0x18>
 80107ce:	6843      	ldr	r3, [r0, #4]
 80107d0:	b133      	cbz	r3, 80107e0 <rcutils_allocator_is_valid+0x18>
 80107d2:	68c3      	ldr	r3, [r0, #12]
 80107d4:	b123      	cbz	r3, 80107e0 <rcutils_allocator_is_valid+0x18>
 80107d6:	6880      	ldr	r0, [r0, #8]
 80107d8:	3800      	subs	r0, #0
 80107da:	bf18      	it	ne
 80107dc:	2001      	movne	r0, #1
 80107de:	4770      	bx	lr
 80107e0:	4618      	mov	r0, r3
 80107e2:	4770      	bx	lr

080107e4 <__atomic_load_8>:
 80107e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80107e8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80107ec:	4a15      	ldr	r2, [pc, #84]	@ (8010844 <__atomic_load_8+0x60>)
 80107ee:	4b16      	ldr	r3, [pc, #88]	@ (8010848 <__atomic_load_8+0x64>)
 80107f0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80107f4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80107f8:	fb02 f101 	mul.w	r1, r2, r1
 80107fc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010800:	fba3 2301 	umull	r2, r3, r3, r1
 8010804:	091b      	lsrs	r3, r3, #4
 8010806:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801080a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801080e:	b4f0      	push	{r4, r5, r6, r7}
 8010810:	4d0e      	ldr	r5, [pc, #56]	@ (801084c <__atomic_load_8+0x68>)
 8010812:	1ac9      	subs	r1, r1, r3
 8010814:	194a      	adds	r2, r1, r5
 8010816:	f04f 0c01 	mov.w	ip, #1
 801081a:	e8d2 3f4f 	ldrexb	r3, [r2]
 801081e:	e8c2 cf44 	strexb	r4, ip, [r2]
 8010822:	2c00      	cmp	r4, #0
 8010824:	d1f9      	bne.n	801081a <__atomic_load_8+0x36>
 8010826:	f3bf 8f5b 	dmb	ish
 801082a:	b2dc      	uxtb	r4, r3
 801082c:	2c00      	cmp	r4, #0
 801082e:	d1f4      	bne.n	801081a <__atomic_load_8+0x36>
 8010830:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010834:	f3bf 8f5b 	dmb	ish
 8010838:	546b      	strb	r3, [r5, r1]
 801083a:	4630      	mov	r0, r6
 801083c:	4639      	mov	r1, r7
 801083e:	bcf0      	pop	{r4, r5, r6, r7}
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop
 8010844:	27d4eb2d 	.word	0x27d4eb2d
 8010848:	b21642c9 	.word	0xb21642c9
 801084c:	2001ab38 	.word	0x2001ab38

08010850 <__atomic_store_8>:
 8010850:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010854:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801085e:	4c14      	ldr	r4, [pc, #80]	@ (80108b0 <__atomic_store_8+0x60>)
 8010860:	4e14      	ldr	r6, [pc, #80]	@ (80108b4 <__atomic_store_8+0x64>)
 8010862:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010866:	fb04 f101 	mul.w	r1, r4, r1
 801086a:	4c13      	ldr	r4, [pc, #76]	@ (80108b8 <__atomic_store_8+0x68>)
 801086c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010870:	fba4 5401 	umull	r5, r4, r4, r1
 8010874:	0924      	lsrs	r4, r4, #4
 8010876:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801087a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801087e:	eba1 0e04 	sub.w	lr, r1, r4
 8010882:	f04f 0501 	mov.w	r5, #1
 8010886:	eb0e 0c06 	add.w	ip, lr, r6
 801088a:	e8dc 1f4f 	ldrexb	r1, [ip]
 801088e:	e8cc 5f44 	strexb	r4, r5, [ip]
 8010892:	2c00      	cmp	r4, #0
 8010894:	d1f9      	bne.n	801088a <__atomic_store_8+0x3a>
 8010896:	f3bf 8f5b 	dmb	ish
 801089a:	b2cc      	uxtb	r4, r1
 801089c:	2c00      	cmp	r4, #0
 801089e:	d1f4      	bne.n	801088a <__atomic_store_8+0x3a>
 80108a0:	e9c0 2300 	strd	r2, r3, [r0]
 80108a4:	f3bf 8f5b 	dmb	ish
 80108a8:	f806 100e 	strb.w	r1, [r6, lr]
 80108ac:	bd70      	pop	{r4, r5, r6, pc}
 80108ae:	bf00      	nop
 80108b0:	27d4eb2d 	.word	0x27d4eb2d
 80108b4:	2001ab38 	.word	0x2001ab38
 80108b8:	b21642c9 	.word	0xb21642c9

080108bc <__atomic_exchange_8>:
 80108bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108be:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80108c2:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80108c6:	4917      	ldr	r1, [pc, #92]	@ (8010924 <__atomic_exchange_8+0x68>)
 80108c8:	4f17      	ldr	r7, [pc, #92]	@ (8010928 <__atomic_exchange_8+0x6c>)
 80108ca:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80108ce:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80108d2:	fb01 fe0e 	mul.w	lr, r1, lr
 80108d6:	4915      	ldr	r1, [pc, #84]	@ (801092c <__atomic_exchange_8+0x70>)
 80108d8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80108dc:	4606      	mov	r6, r0
 80108de:	fba1 010e 	umull	r0, r1, r1, lr
 80108e2:	0909      	lsrs	r1, r1, #4
 80108e4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80108e8:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80108ec:	ebae 0e01 	sub.w	lr, lr, r1
 80108f0:	f04f 0501 	mov.w	r5, #1
 80108f4:	eb0e 0107 	add.w	r1, lr, r7
 80108f8:	e8d1 cf4f 	ldrexb	ip, [r1]
 80108fc:	e8c1 5f40 	strexb	r0, r5, [r1]
 8010900:	2800      	cmp	r0, #0
 8010902:	d1f9      	bne.n	80108f8 <__atomic_exchange_8+0x3c>
 8010904:	f3bf 8f5b 	dmb	ish
 8010908:	fa5f f48c 	uxtb.w	r4, ip
 801090c:	2c00      	cmp	r4, #0
 801090e:	d1f3      	bne.n	80108f8 <__atomic_exchange_8+0x3c>
 8010910:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010914:	e9c6 2300 	strd	r2, r3, [r6]
 8010918:	f3bf 8f5b 	dmb	ish
 801091c:	f807 c00e 	strb.w	ip, [r7, lr]
 8010920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010922:	bf00      	nop
 8010924:	27d4eb2d 	.word	0x27d4eb2d
 8010928:	2001ab38 	.word	0x2001ab38
 801092c:	b21642c9 	.word	0xb21642c9

08010930 <rcutils_get_env>:
 8010930:	b150      	cbz	r0, 8010948 <rcutils_get_env+0x18>
 8010932:	b510      	push	{r4, lr}
 8010934:	460c      	mov	r4, r1
 8010936:	b909      	cbnz	r1, 801093c <rcutils_get_env+0xc>
 8010938:	4806      	ldr	r0, [pc, #24]	@ (8010954 <rcutils_get_env+0x24>)
 801093a:	bd10      	pop	{r4, pc}
 801093c:	f00c fd26 	bl	801d38c <getenv>
 8010940:	b120      	cbz	r0, 801094c <rcutils_get_env+0x1c>
 8010942:	6020      	str	r0, [r4, #0]
 8010944:	2000      	movs	r0, #0
 8010946:	bd10      	pop	{r4, pc}
 8010948:	4803      	ldr	r0, [pc, #12]	@ (8010958 <rcutils_get_env+0x28>)
 801094a:	4770      	bx	lr
 801094c:	4b03      	ldr	r3, [pc, #12]	@ (801095c <rcutils_get_env+0x2c>)
 801094e:	6023      	str	r3, [r4, #0]
 8010950:	e7f8      	b.n	8010944 <rcutils_get_env+0x14>
 8010952:	bf00      	nop
 8010954:	08020810 	.word	0x08020810
 8010958:	080207f4 	.word	0x080207f4
 801095c:	0802163c 	.word	0x0802163c

08010960 <rcutils_get_error_string>:
 8010960:	4b06      	ldr	r3, [pc, #24]	@ (801097c <rcutils_get_error_string+0x1c>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	b13b      	cbz	r3, 8010976 <rcutils_get_error_string+0x16>
 8010966:	4b06      	ldr	r3, [pc, #24]	@ (8010980 <rcutils_get_error_string+0x20>)
 8010968:	781a      	ldrb	r2, [r3, #0]
 801096a:	b90a      	cbnz	r2, 8010970 <rcutils_get_error_string+0x10>
 801096c:	2201      	movs	r2, #1
 801096e:	701a      	strb	r2, [r3, #0]
 8010970:	4b04      	ldr	r3, [pc, #16]	@ (8010984 <rcutils_get_error_string+0x24>)
 8010972:	7818      	ldrb	r0, [r3, #0]
 8010974:	4770      	bx	lr
 8010976:	4b04      	ldr	r3, [pc, #16]	@ (8010988 <rcutils_get_error_string+0x28>)
 8010978:	7818      	ldrb	r0, [r3, #0]
 801097a:	4770      	bx	lr
 801097c:	2001ab4f 	.word	0x2001ab4f
 8010980:	2001ab51 	.word	0x2001ab51
 8010984:	2001ab50 	.word	0x2001ab50
 8010988:	0802082c 	.word	0x0802082c
 801098c:	00000000 	.word	0x00000000

08010990 <rcutils_reset_error>:
 8010990:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80109b0 <rcutils_reset_error+0x20>
 8010994:	4a08      	ldr	r2, [pc, #32]	@ (80109b8 <rcutils_reset_error+0x28>)
 8010996:	4809      	ldr	r0, [pc, #36]	@ (80109bc <rcutils_reset_error+0x2c>)
 8010998:	4909      	ldr	r1, [pc, #36]	@ (80109c0 <rcutils_reset_error+0x30>)
 801099a:	2300      	movs	r3, #0
 801099c:	8013      	strh	r3, [r2, #0]
 801099e:	ed82 7b02 	vstr	d7, [r2, #8]
 80109a2:	4a08      	ldr	r2, [pc, #32]	@ (80109c4 <rcutils_reset_error+0x34>)
 80109a4:	7003      	strb	r3, [r0, #0]
 80109a6:	700b      	strb	r3, [r1, #0]
 80109a8:	7013      	strb	r3, [r2, #0]
 80109aa:	4770      	bx	lr
 80109ac:	f3af 8000 	nop.w
	...
 80109b8:	2001ab58 	.word	0x2001ab58
 80109bc:	2001ab51 	.word	0x2001ab51
 80109c0:	2001ab50 	.word	0x2001ab50
 80109c4:	2001ab4f 	.word	0x2001ab4f

080109c8 <rcutils_format_string_limit>:
 80109c8:	b40f      	push	{r0, r1, r2, r3}
 80109ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109cc:	b083      	sub	sp, #12
 80109ce:	ac08      	add	r4, sp, #32
 80109d0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80109d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80109d6:	b376      	cbz	r6, 8010a36 <rcutils_format_string_limit+0x6e>
 80109d8:	4620      	mov	r0, r4
 80109da:	f7ff fef5 	bl	80107c8 <rcutils_allocator_is_valid>
 80109de:	b350      	cbz	r0, 8010a36 <rcutils_format_string_limit+0x6e>
 80109e0:	2100      	movs	r1, #0
 80109e2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80109e4:	4632      	mov	r2, r6
 80109e6:	4608      	mov	r0, r1
 80109e8:	e9cd 3300 	strd	r3, r3, [sp]
 80109ec:	f000 f8f8 	bl	8010be0 <rcutils_vsnprintf>
 80109f0:	1c43      	adds	r3, r0, #1
 80109f2:	4605      	mov	r5, r0
 80109f4:	d01f      	beq.n	8010a36 <rcutils_format_string_limit+0x6e>
 80109f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80109fa:	1c47      	adds	r7, r0, #1
 80109fc:	429f      	cmp	r7, r3
 80109fe:	bf84      	itt	hi
 8010a00:	461f      	movhi	r7, r3
 8010a02:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8010a06:	4638      	mov	r0, r7
 8010a08:	9b08      	ldr	r3, [sp, #32]
 8010a0a:	4798      	blx	r3
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	b190      	cbz	r0, 8010a36 <rcutils_format_string_limit+0x6e>
 8010a10:	9b01      	ldr	r3, [sp, #4]
 8010a12:	4632      	mov	r2, r6
 8010a14:	4639      	mov	r1, r7
 8010a16:	f000 f8e3 	bl	8010be0 <rcutils_vsnprintf>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	db07      	blt.n	8010a2e <rcutils_format_string_limit+0x66>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	5563      	strb	r3, [r4, r5]
 8010a22:	4620      	mov	r0, r4
 8010a24:	b003      	add	sp, #12
 8010a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010a2a:	b004      	add	sp, #16
 8010a2c:	4770      	bx	lr
 8010a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010a32:	4620      	mov	r0, r4
 8010a34:	4798      	blx	r3
 8010a36:	2400      	movs	r4, #0
 8010a38:	e7f3      	b.n	8010a22 <rcutils_format_string_limit+0x5a>
 8010a3a:	bf00      	nop

08010a3c <rcutils_repl_str>:
 8010a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a40:	4699      	mov	r9, r3
 8010a42:	b089      	sub	sp, #36	@ 0x24
 8010a44:	4603      	mov	r3, r0
 8010a46:	4648      	mov	r0, r9
 8010a48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010a4c:	4698      	mov	r8, r3
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	460c      	mov	r4, r1
 8010a52:	f7ff feb9 	bl	80107c8 <rcutils_allocator_is_valid>
 8010a56:	2800      	cmp	r0, #0
 8010a58:	f000 80a3 	beq.w	8010ba2 <rcutils_repl_str+0x166>
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f7ef fc3f 	bl	80002e0 <strlen>
 8010a62:	f04f 0a00 	mov.w	sl, #0
 8010a66:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8010a6a:	9001      	str	r0, [sp, #4]
 8010a6c:	4657      	mov	r7, sl
 8010a6e:	4655      	mov	r5, sl
 8010a70:	2610      	movs	r6, #16
 8010a72:	e01e      	b.n	8010ab2 <rcutils_repl_str+0x76>
 8010a74:	3501      	adds	r5, #1
 8010a76:	45aa      	cmp	sl, r5
 8010a78:	d212      	bcs.n	8010aa0 <rcutils_repl_str+0x64>
 8010a7a:	44b2      	add	sl, r6
 8010a7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010a80:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8010a84:	4798      	blx	r3
 8010a86:	2800      	cmp	r0, #0
 8010a88:	f000 8088 	beq.w	8010b9c <rcutils_repl_str+0x160>
 8010a8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8010a90:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8010a94:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8010a98:	4607      	mov	r7, r0
 8010a9a:	bf28      	it	cs
 8010a9c:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8010aa0:	9a00      	ldr	r2, [sp, #0]
 8010aa2:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8010aa6:	1aa2      	subs	r2, r4, r2
 8010aa8:	f843 2c04 	str.w	r2, [r3, #-4]
 8010aac:	9b01      	ldr	r3, [sp, #4]
 8010aae:	eb04 0803 	add.w	r8, r4, r3
 8010ab2:	9902      	ldr	r1, [sp, #8]
 8010ab4:	4640      	mov	r0, r8
 8010ab6:	f00d f9bd 	bl	801de34 <strstr>
 8010aba:	4604      	mov	r4, r0
 8010abc:	465a      	mov	r2, fp
 8010abe:	4638      	mov	r0, r7
 8010ac0:	2c00      	cmp	r4, #0
 8010ac2:	d1d7      	bne.n	8010a74 <rcutils_repl_str+0x38>
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	f7ef fc0b 	bl	80002e0 <strlen>
 8010aca:	9b00      	ldr	r3, [sp, #0]
 8010acc:	eba8 0803 	sub.w	r8, r8, r3
 8010ad0:	eb08 0300 	add.w	r3, r8, r0
 8010ad4:	9304      	str	r3, [sp, #16]
 8010ad6:	f8d9 8000 	ldr.w	r8, [r9]
 8010ada:	2d00      	cmp	r5, #0
 8010adc:	d03f      	beq.n	8010b5e <rcutils_repl_str+0x122>
 8010ade:	9803      	ldr	r0, [sp, #12]
 8010ae0:	f7ef fbfe 	bl	80002e0 <strlen>
 8010ae4:	4606      	mov	r6, r0
 8010ae6:	9801      	ldr	r0, [sp, #4]
 8010ae8:	9a04      	ldr	r2, [sp, #16]
 8010aea:	1a33      	subs	r3, r6, r0
 8010aec:	fb05 2a03 	mla	sl, r5, r3, r2
 8010af0:	4659      	mov	r1, fp
 8010af2:	f10a 0001 	add.w	r0, sl, #1
 8010af6:	47c0      	blx	r8
 8010af8:	4683      	mov	fp, r0
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d04e      	beq.n	8010b9c <rcutils_repl_str+0x160>
 8010afe:	683a      	ldr	r2, [r7, #0]
 8010b00:	9900      	ldr	r1, [sp, #0]
 8010b02:	f00d fa8e 	bl	801e022 <memcpy>
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	9706      	str	r7, [sp, #24]
 8010b0a:	1e6a      	subs	r2, r5, #1
 8010b0c:	445b      	add	r3, fp
 8010b0e:	46a8      	mov	r8, r5
 8010b10:	9202      	str	r2, [sp, #8]
 8010b12:	4625      	mov	r5, r4
 8010b14:	f8cd 901c 	str.w	r9, [sp, #28]
 8010b18:	461c      	mov	r4, r3
 8010b1a:	9903      	ldr	r1, [sp, #12]
 8010b1c:	4632      	mov	r2, r6
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f00d fa7f 	bl	801e022 <memcpy>
 8010b24:	9b01      	ldr	r3, [sp, #4]
 8010b26:	f857 2b04 	ldr.w	r2, [r7], #4
 8010b2a:	eb02 0c03 	add.w	ip, r2, r3
 8010b2e:	9b00      	ldr	r3, [sp, #0]
 8010b30:	eb03 010c 	add.w	r1, r3, ip
 8010b34:	9b02      	ldr	r3, [sp, #8]
 8010b36:	4434      	add	r4, r6
 8010b38:	429d      	cmp	r5, r3
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	d022      	beq.n	8010b84 <rcutils_repl_str+0x148>
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	eba2 090c 	sub.w	r9, r2, ip
 8010b44:	464a      	mov	r2, r9
 8010b46:	3501      	adds	r5, #1
 8010b48:	f00d fa6b 	bl	801e022 <memcpy>
 8010b4c:	45a8      	cmp	r8, r5
 8010b4e:	444c      	add	r4, r9
 8010b50:	d1e3      	bne.n	8010b1a <rcutils_repl_str+0xde>
 8010b52:	2300      	movs	r3, #0
 8010b54:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8010b58:	f80b 300a 	strb.w	r3, [fp, sl]
 8010b5c:	e008      	b.n	8010b70 <rcutils_repl_str+0x134>
 8010b5e:	4618      	mov	r0, r3
 8010b60:	4659      	mov	r1, fp
 8010b62:	3001      	adds	r0, #1
 8010b64:	47c0      	blx	r8
 8010b66:	4683      	mov	fp, r0
 8010b68:	b110      	cbz	r0, 8010b70 <rcutils_repl_str+0x134>
 8010b6a:	9900      	ldr	r1, [sp, #0]
 8010b6c:	f00d fa51 	bl	801e012 <strcpy>
 8010b70:	4638      	mov	r0, r7
 8010b72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010b76:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010b7a:	4798      	blx	r3
 8010b7c:	4658      	mov	r0, fp
 8010b7e:	b009      	add	sp, #36	@ 0x24
 8010b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b84:	9b04      	ldr	r3, [sp, #16]
 8010b86:	eba3 020c 	sub.w	r2, r3, ip
 8010b8a:	9205      	str	r2, [sp, #20]
 8010b8c:	3501      	adds	r5, #1
 8010b8e:	f00d fa48 	bl	801e022 <memcpy>
 8010b92:	9a05      	ldr	r2, [sp, #20]
 8010b94:	45a8      	cmp	r8, r5
 8010b96:	4414      	add	r4, r2
 8010b98:	d1bf      	bne.n	8010b1a <rcutils_repl_str+0xde>
 8010b9a:	e7da      	b.n	8010b52 <rcutils_repl_str+0x116>
 8010b9c:	f04f 0b00 	mov.w	fp, #0
 8010ba0:	e7e6      	b.n	8010b70 <rcutils_repl_str+0x134>
 8010ba2:	4683      	mov	fp, r0
 8010ba4:	4658      	mov	r0, fp
 8010ba6:	b009      	add	sp, #36	@ 0x24
 8010ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bac <rcutils_snprintf>:
 8010bac:	b40c      	push	{r2, r3}
 8010bae:	b530      	push	{r4, r5, lr}
 8010bb0:	b083      	sub	sp, #12
 8010bb2:	ab06      	add	r3, sp, #24
 8010bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb8:	9301      	str	r3, [sp, #4]
 8010bba:	b152      	cbz	r2, 8010bd2 <rcutils_snprintf+0x26>
 8010bbc:	b138      	cbz	r0, 8010bce <rcutils_snprintf+0x22>
 8010bbe:	b141      	cbz	r1, 8010bd2 <rcutils_snprintf+0x26>
 8010bc0:	f00d f832 	bl	801dc28 <vsniprintf>
 8010bc4:	b003      	add	sp, #12
 8010bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bca:	b002      	add	sp, #8
 8010bcc:	4770      	bx	lr
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	d0f6      	beq.n	8010bc0 <rcutils_snprintf+0x14>
 8010bd2:	f00d f9f1 	bl	801dfb8 <__errno>
 8010bd6:	2316      	movs	r3, #22
 8010bd8:	6003      	str	r3, [r0, #0]
 8010bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bde:	e7f1      	b.n	8010bc4 <rcutils_snprintf+0x18>

08010be0 <rcutils_vsnprintf>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	b13a      	cbz	r2, 8010bf4 <rcutils_vsnprintf+0x14>
 8010be4:	b120      	cbz	r0, 8010bf0 <rcutils_vsnprintf+0x10>
 8010be6:	b129      	cbz	r1, 8010bf4 <rcutils_vsnprintf+0x14>
 8010be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bec:	f00d b81c 	b.w	801dc28 <vsniprintf>
 8010bf0:	2900      	cmp	r1, #0
 8010bf2:	d0f9      	beq.n	8010be8 <rcutils_vsnprintf+0x8>
 8010bf4:	f00d f9e0 	bl	801dfb8 <__errno>
 8010bf8:	2316      	movs	r3, #22
 8010bfa:	6003      	str	r3, [r0, #0]
 8010bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c00:	bd70      	pop	{r4, r5, r6, pc}
 8010c02:	bf00      	nop

08010c04 <rcutils_strdup>:
 8010c04:	b084      	sub	sp, #16
 8010c06:	b570      	push	{r4, r5, r6, lr}
 8010c08:	b086      	sub	sp, #24
 8010c0a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8010c0e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8010c12:	4604      	mov	r4, r0
 8010c14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c18:	f10d 0e04 	add.w	lr, sp, #4
 8010c1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c20:	f8dc 3000 	ldr.w	r3, [ip]
 8010c24:	f8ce 3000 	str.w	r3, [lr]
 8010c28:	b304      	cbz	r4, 8010c6c <rcutils_strdup+0x68>
 8010c2a:	a801      	add	r0, sp, #4
 8010c2c:	f7ff fdcc 	bl	80107c8 <rcutils_allocator_is_valid>
 8010c30:	b1e0      	cbz	r0, 8010c6c <rcutils_strdup+0x68>
 8010c32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c36:	2100      	movs	r1, #0
 8010c38:	4620      	mov	r0, r4
 8010c3a:	f7ef fb01 	bl	8000240 <memchr>
 8010c3e:	b190      	cbz	r0, 8010c66 <rcutils_strdup+0x62>
 8010c40:	1b06      	subs	r6, r0, r4
 8010c42:	1c70      	adds	r0, r6, #1
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	9905      	ldr	r1, [sp, #20]
 8010c48:	4798      	blx	r3
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	b128      	cbz	r0, 8010c5a <rcutils_strdup+0x56>
 8010c4e:	4632      	mov	r2, r6
 8010c50:	4621      	mov	r1, r4
 8010c52:	f00d f9e6 	bl	801e022 <memcpy>
 8010c56:	2300      	movs	r3, #0
 8010c58:	55ab      	strb	r3, [r5, r6]
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	b006      	add	sp, #24
 8010c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c62:	b004      	add	sp, #16
 8010c64:	4770      	bx	lr
 8010c66:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010c6a:	e7eb      	b.n	8010c44 <rcutils_strdup+0x40>
 8010c6c:	2500      	movs	r5, #0
 8010c6e:	e7f4      	b.n	8010c5a <rcutils_strdup+0x56>

08010c70 <rcutils_strndup>:
 8010c70:	b082      	sub	sp, #8
 8010c72:	b570      	push	{r4, r5, r6, lr}
 8010c74:	ac04      	add	r4, sp, #16
 8010c76:	e884 000c 	stmia.w	r4, {r2, r3}
 8010c7a:	b1e8      	cbz	r0, 8010cb8 <rcutils_strndup+0x48>
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	a804      	add	r0, sp, #16
 8010c80:	460c      	mov	r4, r1
 8010c82:	f7ff fda1 	bl	80107c8 <rcutils_allocator_is_valid>
 8010c86:	b1b8      	cbz	r0, 8010cb8 <rcutils_strndup+0x48>
 8010c88:	4622      	mov	r2, r4
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f7ef fad7 	bl	8000240 <memchr>
 8010c92:	b100      	cbz	r0, 8010c96 <rcutils_strndup+0x26>
 8010c94:	1b44      	subs	r4, r0, r5
 8010c96:	9b04      	ldr	r3, [sp, #16]
 8010c98:	9908      	ldr	r1, [sp, #32]
 8010c9a:	1c60      	adds	r0, r4, #1
 8010c9c:	4798      	blx	r3
 8010c9e:	4606      	mov	r6, r0
 8010ca0:	b128      	cbz	r0, 8010cae <rcutils_strndup+0x3e>
 8010ca2:	4622      	mov	r2, r4
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f00d f9bc 	bl	801e022 <memcpy>
 8010caa:	2300      	movs	r3, #0
 8010cac:	5533      	strb	r3, [r6, r4]
 8010cae:	4630      	mov	r0, r6
 8010cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cb4:	b002      	add	sp, #8
 8010cb6:	4770      	bx	lr
 8010cb8:	2600      	movs	r6, #0
 8010cba:	4630      	mov	r0, r6
 8010cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cc0:	b002      	add	sp, #8
 8010cc2:	4770      	bx	lr

08010cc4 <rcutils_system_time_now>:
 8010cc4:	b318      	cbz	r0, 8010d0e <rcutils_system_time_now+0x4a>
 8010cc6:	b570      	push	{r4, r5, r6, lr}
 8010cc8:	b084      	sub	sp, #16
 8010cca:	4604      	mov	r4, r0
 8010ccc:	4669      	mov	r1, sp
 8010cce:	2001      	movs	r0, #1
 8010cd0:	f7f1 ff7e 	bl	8002bd0 <clock_gettime>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	db17      	blt.n	8010d08 <rcutils_system_time_now+0x44>
 8010cd8:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010cdc:	2900      	cmp	r1, #0
 8010cde:	db13      	blt.n	8010d08 <rcutils_system_time_now+0x44>
 8010ce0:	9d02      	ldr	r5, [sp, #8]
 8010ce2:	2d00      	cmp	r5, #0
 8010ce4:	db0d      	blt.n	8010d02 <rcutils_system_time_now+0x3e>
 8010ce6:	4e0b      	ldr	r6, [pc, #44]	@ (8010d14 <rcutils_system_time_now+0x50>)
 8010ce8:	fba3 3206 	umull	r3, r2, r3, r6
 8010cec:	195b      	adds	r3, r3, r5
 8010cee:	fb06 2201 	mla	r2, r6, r1, r2
 8010cf2:	f04f 0000 	mov.w	r0, #0
 8010cf6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010cfa:	e9c4 3200 	strd	r3, r2, [r4]
 8010cfe:	b004      	add	sp, #16
 8010d00:	bd70      	pop	{r4, r5, r6, pc}
 8010d02:	ea53 0201 	orrs.w	r2, r3, r1
 8010d06:	d1ee      	bne.n	8010ce6 <rcutils_system_time_now+0x22>
 8010d08:	2002      	movs	r0, #2
 8010d0a:	b004      	add	sp, #16
 8010d0c:	bd70      	pop	{r4, r5, r6, pc}
 8010d0e:	200b      	movs	r0, #11
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop
 8010d14:	3b9aca00 	.word	0x3b9aca00

08010d18 <rcutils_steady_time_now>:
 8010d18:	b318      	cbz	r0, 8010d62 <rcutils_steady_time_now+0x4a>
 8010d1a:	b570      	push	{r4, r5, r6, lr}
 8010d1c:	b084      	sub	sp, #16
 8010d1e:	4604      	mov	r4, r0
 8010d20:	4669      	mov	r1, sp
 8010d22:	2000      	movs	r0, #0
 8010d24:	f7f1 ff54 	bl	8002bd0 <clock_gettime>
 8010d28:	2800      	cmp	r0, #0
 8010d2a:	db17      	blt.n	8010d5c <rcutils_steady_time_now+0x44>
 8010d2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010d30:	2900      	cmp	r1, #0
 8010d32:	db13      	blt.n	8010d5c <rcutils_steady_time_now+0x44>
 8010d34:	9d02      	ldr	r5, [sp, #8]
 8010d36:	2d00      	cmp	r5, #0
 8010d38:	db0d      	blt.n	8010d56 <rcutils_steady_time_now+0x3e>
 8010d3a:	4e0b      	ldr	r6, [pc, #44]	@ (8010d68 <rcutils_steady_time_now+0x50>)
 8010d3c:	fba3 3206 	umull	r3, r2, r3, r6
 8010d40:	195b      	adds	r3, r3, r5
 8010d42:	fb06 2201 	mla	r2, r6, r1, r2
 8010d46:	f04f 0000 	mov.w	r0, #0
 8010d4a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010d4e:	e9c4 3200 	strd	r3, r2, [r4]
 8010d52:	b004      	add	sp, #16
 8010d54:	bd70      	pop	{r4, r5, r6, pc}
 8010d56:	ea53 0201 	orrs.w	r2, r3, r1
 8010d5a:	d1ee      	bne.n	8010d3a <rcutils_steady_time_now+0x22>
 8010d5c:	2002      	movs	r0, #2
 8010d5e:	b004      	add	sp, #16
 8010d60:	bd70      	pop	{r4, r5, r6, pc}
 8010d62:	200b      	movs	r0, #11
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	3b9aca00 	.word	0x3b9aca00

08010d6c <rmw_get_zero_initialized_init_options>:
 8010d6c:	b530      	push	{r4, r5, lr}
 8010d6e:	b08b      	sub	sp, #44	@ 0x2c
 8010d70:	466d      	mov	r5, sp
 8010d72:	4604      	mov	r4, r0
 8010d74:	4628      	mov	r0, r5
 8010d76:	f000 f825 	bl	8010dc4 <rmw_get_default_security_options>
 8010d7a:	a802      	add	r0, sp, #8
 8010d7c:	f00a f8ee 	bl	801af5c <rmw_get_zero_initialized_discovery_options>
 8010d80:	2258      	movs	r2, #88	@ 0x58
 8010d82:	2100      	movs	r1, #0
 8010d84:	4620      	mov	r0, r4
 8010d86:	f00d f81b 	bl	801ddc0 <memset>
 8010d8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010d8e:	f104 0310 	add.w	r3, r4, #16
 8010d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010d96:	f10d 0c08 	add.w	ip, sp, #8
 8010d9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8010d9e:	60e2      	str	r2, [r4, #12]
 8010da0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010da4:	f104 0e1c 	add.w	lr, r4, #28
 8010da8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010db0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010db4:	4620      	mov	r0, r4
 8010db6:	b00b      	add	sp, #44	@ 0x2c
 8010db8:	bd30      	pop	{r4, r5, pc}
 8010dba:	bf00      	nop

08010dbc <rmw_get_default_publisher_options>:
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	6002      	str	r2, [r0, #0]
 8010dc0:	7102      	strb	r2, [r0, #4]
 8010dc2:	4770      	bx	lr

08010dc4 <rmw_get_default_security_options>:
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	7002      	strb	r2, [r0, #0]
 8010dc8:	6042      	str	r2, [r0, #4]
 8010dca:	4770      	bx	lr

08010dcc <rmw_subscription_content_filter_options_fini>:
 8010dcc:	b1b0      	cbz	r0, 8010dfc <rmw_subscription_content_filter_options_fini+0x30>
 8010dce:	b538      	push	{r3, r4, r5, lr}
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	4608      	mov	r0, r1
 8010dd4:	460d      	mov	r5, r1
 8010dd6:	f7ff fcf7 	bl	80107c8 <rcutils_allocator_is_valid>
 8010dda:	b168      	cbz	r0, 8010df8 <rmw_subscription_content_filter_options_fini+0x2c>
 8010ddc:	6820      	ldr	r0, [r4, #0]
 8010dde:	b120      	cbz	r0, 8010dea <rmw_subscription_content_filter_options_fini+0x1e>
 8010de0:	686b      	ldr	r3, [r5, #4]
 8010de2:	6929      	ldr	r1, [r5, #16]
 8010de4:	4798      	blx	r3
 8010de6:	2300      	movs	r3, #0
 8010de8:	6023      	str	r3, [r4, #0]
 8010dea:	1d20      	adds	r0, r4, #4
 8010dec:	f009 ff74 	bl	801acd8 <rcutils_string_array_fini>
 8010df0:	3800      	subs	r0, #0
 8010df2:	bf18      	it	ne
 8010df4:	2001      	movne	r0, #1
 8010df6:	bd38      	pop	{r3, r4, r5, pc}
 8010df8:	200b      	movs	r0, #11
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	200b      	movs	r0, #11
 8010dfe:	4770      	bx	lr

08010e00 <rmw_get_default_subscription_options>:
 8010e00:	2200      	movs	r2, #0
 8010e02:	e9c0 2200 	strd	r2, r2, [r0]
 8010e06:	6082      	str	r2, [r0, #8]
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop

08010e0c <rmw_get_zero_initialized_message_info>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	2238      	movs	r2, #56	@ 0x38
 8010e10:	4604      	mov	r4, r0
 8010e12:	2100      	movs	r1, #0
 8010e14:	f00c ffd4 	bl	801ddc0 <memset>
 8010e18:	4620      	mov	r0, r4
 8010e1a:	bd10      	pop	{r4, pc}

08010e1c <rmw_validate_namespace_with_size>:
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d031      	beq.n	8010e84 <rmw_validate_namespace_with_size+0x68>
 8010e20:	b570      	push	{r4, r5, r6, lr}
 8010e22:	4614      	mov	r4, r2
 8010e24:	b0c2      	sub	sp, #264	@ 0x108
 8010e26:	b1ba      	cbz	r2, 8010e58 <rmw_validate_namespace_with_size+0x3c>
 8010e28:	2901      	cmp	r1, #1
 8010e2a:	460e      	mov	r6, r1
 8010e2c:	461d      	mov	r5, r3
 8010e2e:	d102      	bne.n	8010e36 <rmw_validate_namespace_with_size+0x1a>
 8010e30:	7803      	ldrb	r3, [r0, #0]
 8010e32:	2b2f      	cmp	r3, #47	@ 0x2f
 8010e34:	d015      	beq.n	8010e62 <rmw_validate_namespace_with_size+0x46>
 8010e36:	aa01      	add	r2, sp, #4
 8010e38:	4669      	mov	r1, sp
 8010e3a:	f00a f961 	bl	801b100 <rmw_validate_full_topic_name>
 8010e3e:	b960      	cbnz	r0, 8010e5a <rmw_validate_namespace_with_size+0x3e>
 8010e40:	9b00      	ldr	r3, [sp, #0]
 8010e42:	b163      	cbz	r3, 8010e5e <rmw_validate_namespace_with_size+0x42>
 8010e44:	2b07      	cmp	r3, #7
 8010e46:	d00a      	beq.n	8010e5e <rmw_validate_namespace_with_size+0x42>
 8010e48:	1e5a      	subs	r2, r3, #1
 8010e4a:	2a05      	cmp	r2, #5
 8010e4c:	d81c      	bhi.n	8010e88 <rmw_validate_namespace_with_size+0x6c>
 8010e4e:	e8df f002 	tbb	[pc, r2]
 8010e52:	0c0c      	.short	0x0c0c
 8010e54:	0c0c0c0c 	.word	0x0c0c0c0c
 8010e58:	200b      	movs	r0, #11
 8010e5a:	b042      	add	sp, #264	@ 0x108
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
 8010e5e:	2ef5      	cmp	r6, #245	@ 0xf5
 8010e60:	d809      	bhi.n	8010e76 <rmw_validate_namespace_with_size+0x5a>
 8010e62:	2300      	movs	r3, #0
 8010e64:	6023      	str	r3, [r4, #0]
 8010e66:	2000      	movs	r0, #0
 8010e68:	e7f7      	b.n	8010e5a <rmw_validate_namespace_with_size+0x3e>
 8010e6a:	6023      	str	r3, [r4, #0]
 8010e6c:	2d00      	cmp	r5, #0
 8010e6e:	d0fa      	beq.n	8010e66 <rmw_validate_namespace_with_size+0x4a>
 8010e70:	9b01      	ldr	r3, [sp, #4]
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	e7f7      	b.n	8010e66 <rmw_validate_namespace_with_size+0x4a>
 8010e76:	2307      	movs	r3, #7
 8010e78:	6023      	str	r3, [r4, #0]
 8010e7a:	2d00      	cmp	r5, #0
 8010e7c:	d0f3      	beq.n	8010e66 <rmw_validate_namespace_with_size+0x4a>
 8010e7e:	23f4      	movs	r3, #244	@ 0xf4
 8010e80:	602b      	str	r3, [r5, #0]
 8010e82:	e7f0      	b.n	8010e66 <rmw_validate_namespace_with_size+0x4a>
 8010e84:	200b      	movs	r0, #11
 8010e86:	4770      	bx	lr
 8010e88:	4a03      	ldr	r2, [pc, #12]	@ (8010e98 <rmw_validate_namespace_with_size+0x7c>)
 8010e8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e8e:	a802      	add	r0, sp, #8
 8010e90:	f7ff fe8c 	bl	8010bac <rcutils_snprintf>
 8010e94:	2001      	movs	r0, #1
 8010e96:	e7e0      	b.n	8010e5a <rmw_validate_namespace_with_size+0x3e>
 8010e98:	08020830 	.word	0x08020830

08010e9c <rmw_validate_namespace>:
 8010e9c:	b168      	cbz	r0, 8010eba <rmw_validate_namespace+0x1e>
 8010e9e:	b570      	push	{r4, r5, r6, lr}
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	4616      	mov	r6, r2
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	f7ef fa1b 	bl	80002e0 <strlen>
 8010eaa:	4633      	mov	r3, r6
 8010eac:	4601      	mov	r1, r0
 8010eae:	462a      	mov	r2, r5
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eb6:	f7ff bfb1 	b.w	8010e1c <rmw_validate_namespace_with_size>
 8010eba:	200b      	movs	r0, #11
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <rmw_namespace_validation_result_string>:
 8010ec0:	2807      	cmp	r0, #7
 8010ec2:	bf9a      	itte	ls
 8010ec4:	4b02      	ldrls	r3, [pc, #8]	@ (8010ed0 <rmw_namespace_validation_result_string+0x10>)
 8010ec6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010eca:	4802      	ldrhi	r0, [pc, #8]	@ (8010ed4 <rmw_namespace_validation_result_string+0x14>)
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	08020a28 	.word	0x08020a28
 8010ed4:	08020880 	.word	0x08020880

08010ed8 <rmw_validate_node_name>:
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d037      	beq.n	8010f4c <rmw_validate_node_name+0x74>
 8010edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ede:	460e      	mov	r6, r1
 8010ee0:	2900      	cmp	r1, #0
 8010ee2:	d035      	beq.n	8010f50 <rmw_validate_node_name+0x78>
 8010ee4:	4617      	mov	r7, r2
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	f7ef f9fa 	bl	80002e0 <strlen>
 8010eec:	b1d8      	cbz	r0, 8010f26 <rmw_validate_node_name+0x4e>
 8010eee:	1e63      	subs	r3, r4, #1
 8010ef0:	1819      	adds	r1, r3, r0
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010ef8:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8010efc:	f02e 0c20 	bic.w	ip, lr, #32
 8010f00:	2d09      	cmp	r5, #9
 8010f02:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010f06:	d915      	bls.n	8010f34 <rmw_validate_node_name+0x5c>
 8010f08:	f1bc 0f19 	cmp.w	ip, #25
 8010f0c:	d912      	bls.n	8010f34 <rmw_validate_node_name+0x5c>
 8010f0e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010f12:	d00f      	beq.n	8010f34 <rmw_validate_node_name+0x5c>
 8010f14:	2302      	movs	r3, #2
 8010f16:	6033      	str	r3, [r6, #0]
 8010f18:	b11f      	cbz	r7, 8010f22 <rmw_validate_node_name+0x4a>
 8010f1a:	f1c4 0401 	rsb	r4, r4, #1
 8010f1e:	4414      	add	r4, r2
 8010f20:	603c      	str	r4, [r7, #0]
 8010f22:	2000      	movs	r0, #0
 8010f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f26:	2301      	movs	r3, #1
 8010f28:	6033      	str	r3, [r6, #0]
 8010f2a:	2f00      	cmp	r7, #0
 8010f2c:	d0f9      	beq.n	8010f22 <rmw_validate_node_name+0x4a>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	603b      	str	r3, [r7, #0]
 8010f32:	e7f6      	b.n	8010f22 <rmw_validate_node_name+0x4a>
 8010f34:	4299      	cmp	r1, r3
 8010f36:	d1dc      	bne.n	8010ef2 <rmw_validate_node_name+0x1a>
 8010f38:	7823      	ldrb	r3, [r4, #0]
 8010f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8010f6c <rmw_validate_node_name+0x94>)
 8010f3c:	5cd3      	ldrb	r3, [r2, r3]
 8010f3e:	f013 0304 	ands.w	r3, r3, #4
 8010f42:	d10e      	bne.n	8010f62 <rmw_validate_node_name+0x8a>
 8010f44:	28ff      	cmp	r0, #255	@ 0xff
 8010f46:	d805      	bhi.n	8010f54 <rmw_validate_node_name+0x7c>
 8010f48:	6033      	str	r3, [r6, #0]
 8010f4a:	e7ea      	b.n	8010f22 <rmw_validate_node_name+0x4a>
 8010f4c:	200b      	movs	r0, #11
 8010f4e:	4770      	bx	lr
 8010f50:	200b      	movs	r0, #11
 8010f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f54:	2304      	movs	r3, #4
 8010f56:	6033      	str	r3, [r6, #0]
 8010f58:	2f00      	cmp	r7, #0
 8010f5a:	d0e2      	beq.n	8010f22 <rmw_validate_node_name+0x4a>
 8010f5c:	23fe      	movs	r3, #254	@ 0xfe
 8010f5e:	603b      	str	r3, [r7, #0]
 8010f60:	e7df      	b.n	8010f22 <rmw_validate_node_name+0x4a>
 8010f62:	2303      	movs	r3, #3
 8010f64:	6033      	str	r3, [r6, #0]
 8010f66:	2f00      	cmp	r7, #0
 8010f68:	d1e1      	bne.n	8010f2e <rmw_validate_node_name+0x56>
 8010f6a:	e7da      	b.n	8010f22 <rmw_validate_node_name+0x4a>
 8010f6c:	08021752 	.word	0x08021752

08010f70 <rmw_node_name_validation_result_string>:
 8010f70:	2804      	cmp	r0, #4
 8010f72:	bf9a      	itte	ls
 8010f74:	4b02      	ldrls	r3, [pc, #8]	@ (8010f80 <rmw_node_name_validation_result_string+0x10>)
 8010f76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010f7a:	4802      	ldrhi	r0, [pc, #8]	@ (8010f84 <rmw_node_name_validation_result_string+0x14>)
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	08020b34 	.word	0x08020b34
 8010f84:	08020a48 	.word	0x08020a48

08010f88 <rmw_uros_set_custom_transport>:
 8010f88:	b470      	push	{r4, r5, r6}
 8010f8a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010f8e:	b162      	cbz	r2, 8010faa <rmw_uros_set_custom_transport+0x22>
 8010f90:	b15b      	cbz	r3, 8010faa <rmw_uros_set_custom_transport+0x22>
 8010f92:	b155      	cbz	r5, 8010faa <rmw_uros_set_custom_transport+0x22>
 8010f94:	b14e      	cbz	r6, 8010faa <rmw_uros_set_custom_transport+0x22>
 8010f96:	4c06      	ldr	r4, [pc, #24]	@ (8010fb0 <rmw_uros_set_custom_transport+0x28>)
 8010f98:	7020      	strb	r0, [r4, #0]
 8010f9a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010f9e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010fa2:	6166      	str	r6, [r4, #20]
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	bc70      	pop	{r4, r5, r6}
 8010fa8:	4770      	bx	lr
 8010faa:	200b      	movs	r0, #11
 8010fac:	bc70      	pop	{r4, r5, r6}
 8010fae:	4770      	bx	lr
 8010fb0:	2001ab68 	.word	0x2001ab68

08010fb4 <rmw_init_options_init>:
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fb8:	b083      	sub	sp, #12
 8010fba:	ad09      	add	r5, sp, #36	@ 0x24
 8010fbc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010fc0:	b130      	cbz	r0, 8010fd0 <rmw_init_options_init+0x1c>
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	f7ff fbff 	bl	80107c8 <rcutils_allocator_is_valid>
 8010fca:	b108      	cbz	r0, 8010fd0 <rmw_init_options_init+0x1c>
 8010fcc:	68a6      	ldr	r6, [r4, #8]
 8010fce:	b12e      	cbz	r6, 8010fdc <rmw_init_options_init+0x28>
 8010fd0:	200b      	movs	r0, #11
 8010fd2:	b003      	add	sp, #12
 8010fd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fd8:	b004      	add	sp, #16
 8010fda:	4770      	bx	lr
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2300      	movs	r3, #0
 8010fe0:	e9c4 2300 	strd	r2, r3, [r4]
 8010fe4:	4b22      	ldr	r3, [pc, #136]	@ (8011070 <rmw_init_options_init+0xbc>)
 8010fe6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8011080 <rmw_init_options_init+0xcc>
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	60a3      	str	r3, [r4, #8]
 8010fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ff0:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8010ff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ff8:	466f      	mov	r7, sp
 8010ffa:	682b      	ldr	r3, [r5, #0]
 8010ffc:	f8cc 3000 	str.w	r3, [ip]
 8011000:	4638      	mov	r0, r7
 8011002:	f8c4 e03c 	str.w	lr, [r4, #60]	@ 0x3c
 8011006:	60e6      	str	r6, [r4, #12]
 8011008:	f7ff fedc 	bl	8010dc4 <rmw_get_default_security_options>
 801100c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011010:	f104 0310 	add.w	r3, r4, #16
 8011014:	e883 0003 	stmia.w	r3, {r0, r1}
 8011018:	2203      	movs	r2, #3
 801101a:	4816      	ldr	r0, [pc, #88]	@ (8011074 <rmw_init_options_init+0xc0>)
 801101c:	4916      	ldr	r1, [pc, #88]	@ (8011078 <rmw_init_options_init+0xc4>)
 801101e:	7626      	strb	r6, [r4, #24]
 8011020:	f001 f834 	bl	801208c <rmw_uxrce_init_init_options_impl_memory>
 8011024:	4813      	ldr	r0, [pc, #76]	@ (8011074 <rmw_init_options_init+0xc0>)
 8011026:	f00a f9cb 	bl	801b3c0 <get_memory>
 801102a:	b1f0      	cbz	r0, 801106a <rmw_init_options_init+0xb6>
 801102c:	4a13      	ldr	r2, [pc, #76]	@ (801107c <rmw_init_options_init+0xc8>)
 801102e:	6883      	ldr	r3, [r0, #8]
 8011030:	6851      	ldr	r1, [r2, #4]
 8011032:	7810      	ldrb	r0, [r2, #0]
 8011034:	6563      	str	r3, [r4, #84]	@ 0x54
 8011036:	7418      	strb	r0, [r3, #16]
 8011038:	6159      	str	r1, [r3, #20]
 801103a:	68d1      	ldr	r1, [r2, #12]
 801103c:	61d9      	str	r1, [r3, #28]
 801103e:	6911      	ldr	r1, [r2, #16]
 8011040:	6219      	str	r1, [r3, #32]
 8011042:	6951      	ldr	r1, [r2, #20]
 8011044:	6892      	ldr	r2, [r2, #8]
 8011046:	619a      	str	r2, [r3, #24]
 8011048:	6259      	str	r1, [r3, #36]	@ 0x24
 801104a:	f005 ff99 	bl	8016f80 <uxr_nanos>
 801104e:	f00c faa3 	bl	801d598 <srand>
 8011052:	f00c facf 	bl	801d5f4 <rand>
 8011056:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011058:	6298      	str	r0, [r3, #40]	@ 0x28
 801105a:	2800      	cmp	r0, #0
 801105c:	d0f9      	beq.n	8011052 <rmw_init_options_init+0x9e>
 801105e:	2000      	movs	r0, #0
 8011060:	b003      	add	sp, #12
 8011062:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011066:	b004      	add	sp, #16
 8011068:	4770      	bx	lr
 801106a:	2001      	movs	r0, #1
 801106c:	e7b1      	b.n	8010fd2 <rmw_init_options_init+0x1e>
 801106e:	bf00      	nop
 8011070:	0802132c 	.word	0x0802132c
 8011074:	2001ad54 	.word	0x2001ad54
 8011078:	2001acd0 	.word	0x2001acd0
 801107c:	2001ab68 	.word	0x2001ab68
 8011080:	080205bc 	.word	0x080205bc

08011084 <rmw_init_options_copy>:
 8011084:	b570      	push	{r4, r5, r6, lr}
 8011086:	b158      	cbz	r0, 80110a0 <rmw_init_options_copy+0x1c>
 8011088:	460d      	mov	r5, r1
 801108a:	b149      	cbz	r1, 80110a0 <rmw_init_options_copy+0x1c>
 801108c:	4604      	mov	r4, r0
 801108e:	6880      	ldr	r0, [r0, #8]
 8011090:	b120      	cbz	r0, 801109c <rmw_init_options_copy+0x18>
 8011092:	4b14      	ldr	r3, [pc, #80]	@ (80110e4 <rmw_init_options_copy+0x60>)
 8011094:	6819      	ldr	r1, [r3, #0]
 8011096:	f7ef f8c3 	bl	8000220 <strcmp>
 801109a:	b9e8      	cbnz	r0, 80110d8 <rmw_init_options_copy+0x54>
 801109c:	68ae      	ldr	r6, [r5, #8]
 801109e:	b116      	cbz	r6, 80110a6 <rmw_init_options_copy+0x22>
 80110a0:	260b      	movs	r6, #11
 80110a2:	4630      	mov	r0, r6
 80110a4:	bd70      	pop	{r4, r5, r6, pc}
 80110a6:	2258      	movs	r2, #88	@ 0x58
 80110a8:	4621      	mov	r1, r4
 80110aa:	4628      	mov	r0, r5
 80110ac:	f00c ffb9 	bl	801e022 <memcpy>
 80110b0:	480d      	ldr	r0, [pc, #52]	@ (80110e8 <rmw_init_options_copy+0x64>)
 80110b2:	f00a f985 	bl	801b3c0 <get_memory>
 80110b6:	b190      	cbz	r0, 80110de <rmw_init_options_copy+0x5a>
 80110b8:	6883      	ldr	r3, [r0, #8]
 80110ba:	656b      	str	r3, [r5, #84]	@ 0x54
 80110bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110be:	f102 0c10 	add.w	ip, r2, #16
 80110c2:	f103 0510 	add.w	r5, r3, #16
 80110c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80110d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80110d4:	4630      	mov	r0, r6
 80110d6:	bd70      	pop	{r4, r5, r6, pc}
 80110d8:	260c      	movs	r6, #12
 80110da:	4630      	mov	r0, r6
 80110dc:	bd70      	pop	{r4, r5, r6, pc}
 80110de:	2601      	movs	r6, #1
 80110e0:	e7df      	b.n	80110a2 <rmw_init_options_copy+0x1e>
 80110e2:	bf00      	nop
 80110e4:	0802132c 	.word	0x0802132c
 80110e8:	2001ad54 	.word	0x2001ad54

080110ec <rmw_init_options_fini>:
 80110ec:	b368      	cbz	r0, 801114a <rmw_init_options_fini+0x5e>
 80110ee:	b510      	push	{r4, lr}
 80110f0:	4604      	mov	r4, r0
 80110f2:	b096      	sub	sp, #88	@ 0x58
 80110f4:	3040      	adds	r0, #64	@ 0x40
 80110f6:	f7ff fb67 	bl	80107c8 <rcutils_allocator_is_valid>
 80110fa:	b1f0      	cbz	r0, 801113a <rmw_init_options_fini+0x4e>
 80110fc:	68a0      	ldr	r0, [r4, #8]
 80110fe:	b120      	cbz	r0, 801110a <rmw_init_options_fini+0x1e>
 8011100:	4b13      	ldr	r3, [pc, #76]	@ (8011150 <rmw_init_options_fini+0x64>)
 8011102:	6819      	ldr	r1, [r3, #0]
 8011104:	f7ef f88c 	bl	8000220 <strcmp>
 8011108:	b9e8      	cbnz	r0, 8011146 <rmw_init_options_fini+0x5a>
 801110a:	4b12      	ldr	r3, [pc, #72]	@ (8011154 <rmw_init_options_fini+0x68>)
 801110c:	6819      	ldr	r1, [r3, #0]
 801110e:	b1b9      	cbz	r1, 8011140 <rmw_init_options_fini+0x54>
 8011110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011112:	e001      	b.n	8011118 <rmw_init_options_fini+0x2c>
 8011114:	6849      	ldr	r1, [r1, #4]
 8011116:	b199      	cbz	r1, 8011140 <rmw_init_options_fini+0x54>
 8011118:	688b      	ldr	r3, [r1, #8]
 801111a:	429a      	cmp	r2, r3
 801111c:	d1fa      	bne.n	8011114 <rmw_init_options_fini+0x28>
 801111e:	480d      	ldr	r0, [pc, #52]	@ (8011154 <rmw_init_options_fini+0x68>)
 8011120:	f00a f95e 	bl	801b3e0 <put_memory>
 8011124:	4668      	mov	r0, sp
 8011126:	f7ff fe21 	bl	8010d6c <rmw_get_zero_initialized_init_options>
 801112a:	2258      	movs	r2, #88	@ 0x58
 801112c:	4669      	mov	r1, sp
 801112e:	4620      	mov	r0, r4
 8011130:	f00c ff77 	bl	801e022 <memcpy>
 8011134:	2000      	movs	r0, #0
 8011136:	b016      	add	sp, #88	@ 0x58
 8011138:	bd10      	pop	{r4, pc}
 801113a:	200b      	movs	r0, #11
 801113c:	b016      	add	sp, #88	@ 0x58
 801113e:	bd10      	pop	{r4, pc}
 8011140:	2001      	movs	r0, #1
 8011142:	b016      	add	sp, #88	@ 0x58
 8011144:	bd10      	pop	{r4, pc}
 8011146:	200c      	movs	r0, #12
 8011148:	e7f5      	b.n	8011136 <rmw_init_options_fini+0x4a>
 801114a:	200b      	movs	r0, #11
 801114c:	4770      	bx	lr
 801114e:	bf00      	nop
 8011150:	0802132c 	.word	0x0802132c
 8011154:	2001ad54 	.word	0x2001ad54

08011158 <rmw_init>:
 8011158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801115c:	b083      	sub	sp, #12
 801115e:	2800      	cmp	r0, #0
 8011160:	f000 80d4 	beq.w	801130c <rmw_init+0x1b4>
 8011164:	460e      	mov	r6, r1
 8011166:	2900      	cmp	r1, #0
 8011168:	f000 80d0 	beq.w	801130c <rmw_init+0x1b4>
 801116c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801116e:	4605      	mov	r5, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 80cb 	beq.w	801130c <rmw_init+0x1b4>
 8011176:	4b77      	ldr	r3, [pc, #476]	@ (8011354 <rmw_init+0x1fc>)
 8011178:	6880      	ldr	r0, [r0, #8]
 801117a:	681f      	ldr	r7, [r3, #0]
 801117c:	b128      	cbz	r0, 801118a <rmw_init+0x32>
 801117e:	4639      	mov	r1, r7
 8011180:	f7ef f84e 	bl	8000220 <strcmp>
 8011184:	2800      	cmp	r0, #0
 8011186:	f040 80d3 	bne.w	8011330 <rmw_init+0x1d8>
 801118a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801118e:	4c72      	ldr	r4, [pc, #456]	@ (8011358 <rmw_init+0x200>)
 8011190:	4972      	ldr	r1, [pc, #456]	@ (801135c <rmw_init+0x204>)
 8011192:	4873      	ldr	r0, [pc, #460]	@ (8011360 <rmw_init+0x208>)
 8011194:	60b7      	str	r7, [r6, #8]
 8011196:	e9c6 2300 	strd	r2, r3, [r6]
 801119a:	68eb      	ldr	r3, [r5, #12]
 801119c:	66b3      	str	r3, [r6, #104]	@ 0x68
 801119e:	2201      	movs	r2, #1
 80111a0:	f000 ff14 	bl	8011fcc <rmw_uxrce_init_session_memory>
 80111a4:	4620      	mov	r0, r4
 80111a6:	496f      	ldr	r1, [pc, #444]	@ (8011364 <rmw_init+0x20c>)
 80111a8:	2204      	movs	r2, #4
 80111aa:	f000 ff4f 	bl	801204c <rmw_uxrce_init_static_input_buffer_memory>
 80111ae:	f04f 0800 	mov.w	r8, #0
 80111b2:	486b      	ldr	r0, [pc, #428]	@ (8011360 <rmw_init+0x208>)
 80111b4:	f884 800d 	strb.w	r8, [r4, #13]
 80111b8:	f00a f902 	bl	801b3c0 <get_memory>
 80111bc:	2800      	cmp	r0, #0
 80111be:	f000 80b2 	beq.w	8011326 <rmw_init+0x1ce>
 80111c2:	6884      	ldr	r4, [r0, #8]
 80111c4:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80111c6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80111c8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80111cc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80111d0:	9101      	str	r1, [sp, #4]
 80111d2:	6a00      	ldr	r0, [r0, #32]
 80111d4:	9000      	str	r0, [sp, #0]
 80111d6:	f104 0910 	add.w	r9, r4, #16
 80111da:	4661      	mov	r1, ip
 80111dc:	4648      	mov	r0, r9
 80111de:	f003 fe99 	bl	8014f14 <uxr_set_custom_transport_callbacks>
 80111e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80111e6:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 80111ea:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80111ee:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80111f2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80111f6:	495c      	ldr	r1, [pc, #368]	@ (8011368 <rmw_init+0x210>)
 80111f8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80111fc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8011200:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011204:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011208:	4858      	ldr	r0, [pc, #352]	@ (801136c <rmw_init+0x214>)
 801120a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801120e:	2201      	movs	r2, #1
 8011210:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8011212:	f000 febb 	bl	8011f8c <rmw_uxrce_init_node_memory>
 8011216:	4956      	ldr	r1, [pc, #344]	@ (8011370 <rmw_init+0x218>)
 8011218:	4856      	ldr	r0, [pc, #344]	@ (8011374 <rmw_init+0x21c>)
 801121a:	2205      	movs	r2, #5
 801121c:	f000 fe96 	bl	8011f4c <rmw_uxrce_init_subscription_memory>
 8011220:	4955      	ldr	r1, [pc, #340]	@ (8011378 <rmw_init+0x220>)
 8011222:	4856      	ldr	r0, [pc, #344]	@ (801137c <rmw_init+0x224>)
 8011224:	220a      	movs	r2, #10
 8011226:	f000 fe71 	bl	8011f0c <rmw_uxrce_init_publisher_memory>
 801122a:	4955      	ldr	r1, [pc, #340]	@ (8011380 <rmw_init+0x228>)
 801122c:	4855      	ldr	r0, [pc, #340]	@ (8011384 <rmw_init+0x22c>)
 801122e:	2201      	movs	r2, #1
 8011230:	f000 fe2c 	bl	8011e8c <rmw_uxrce_init_service_memory>
 8011234:	4954      	ldr	r1, [pc, #336]	@ (8011388 <rmw_init+0x230>)
 8011236:	4855      	ldr	r0, [pc, #340]	@ (801138c <rmw_init+0x234>)
 8011238:	2201      	movs	r2, #1
 801123a:	f000 fe47 	bl	8011ecc <rmw_uxrce_init_client_memory>
 801123e:	4954      	ldr	r1, [pc, #336]	@ (8011390 <rmw_init+0x238>)
 8011240:	4854      	ldr	r0, [pc, #336]	@ (8011394 <rmw_init+0x23c>)
 8011242:	220f      	movs	r2, #15
 8011244:	f000 fee2 	bl	801200c <rmw_uxrce_init_topic_memory>
 8011248:	4953      	ldr	r1, [pc, #332]	@ (8011398 <rmw_init+0x240>)
 801124a:	4854      	ldr	r0, [pc, #336]	@ (801139c <rmw_init+0x244>)
 801124c:	2203      	movs	r2, #3
 801124e:	f000 ff1d 	bl	801208c <rmw_uxrce_init_init_options_impl_memory>
 8011252:	4953      	ldr	r1, [pc, #332]	@ (80113a0 <rmw_init+0x248>)
 8011254:	4853      	ldr	r0, [pc, #332]	@ (80113a4 <rmw_init+0x24c>)
 8011256:	2204      	movs	r2, #4
 8011258:	f000 ff38 	bl	80120cc <rmw_uxrce_init_wait_set_memory>
 801125c:	4952      	ldr	r1, [pc, #328]	@ (80113a8 <rmw_init+0x250>)
 801125e:	4853      	ldr	r0, [pc, #332]	@ (80113ac <rmw_init+0x254>)
 8011260:	2204      	movs	r2, #4
 8011262:	f000 ff53 	bl	801210c <rmw_uxrce_init_guard_condition_memory>
 8011266:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8011268:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 801126a:	4642      	mov	r2, r8
 801126c:	f000 fdd6 	bl	8011e1c <rmw_uxrce_transport_init>
 8011270:	4607      	mov	r7, r0
 8011272:	2800      	cmp	r0, #0
 8011274:	d161      	bne.n	801133a <rmw_init+0x1e2>
 8011276:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8011278:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801127c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801127e:	4628      	mov	r0, r5
 8011280:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8011284:	f004 f880 	bl	8015388 <uxr_init_session>
 8011288:	4628      	mov	r0, r5
 801128a:	4949      	ldr	r1, [pc, #292]	@ (80113b0 <rmw_init+0x258>)
 801128c:	4622      	mov	r2, r4
 801128e:	f004 f89f 	bl	80153d0 <uxr_set_topic_callback>
 8011292:	4628      	mov	r0, r5
 8011294:	4947      	ldr	r1, [pc, #284]	@ (80113b4 <rmw_init+0x25c>)
 8011296:	463a      	mov	r2, r7
 8011298:	f004 f896 	bl	80153c8 <uxr_set_status_callback>
 801129c:	4628      	mov	r0, r5
 801129e:	4946      	ldr	r1, [pc, #280]	@ (80113b8 <rmw_init+0x260>)
 80112a0:	463a      	mov	r2, r7
 80112a2:	f004 f899 	bl	80153d8 <uxr_set_request_callback>
 80112a6:	4628      	mov	r0, r5
 80112a8:	4944      	ldr	r1, [pc, #272]	@ (80113bc <rmw_init+0x264>)
 80112aa:	463a      	mov	r2, r7
 80112ac:	f004 f898 	bl	80153e0 <uxr_set_reply_callback>
 80112b0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80112b4:	2304      	movs	r3, #4
 80112b6:	0092      	lsls	r2, r2, #2
 80112b8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80112bc:	4628      	mov	r0, r5
 80112be:	f004 f8bd 	bl	801543c <uxr_create_input_reliable_stream>
 80112c2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80112c6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80112ca:	2304      	movs	r3, #4
 80112cc:	0092      	lsls	r2, r2, #2
 80112ce:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80112d2:	4628      	mov	r0, r5
 80112d4:	f004 f89a 	bl	801540c <uxr_create_output_reliable_stream>
 80112d8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80112dc:	4628      	mov	r0, r5
 80112de:	f004 f8a7 	bl	8015430 <uxr_create_input_best_effort_stream>
 80112e2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80112e6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80112ea:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80112ee:	3114      	adds	r1, #20
 80112f0:	4628      	mov	r0, r5
 80112f2:	f004 f879 	bl	80153e8 <uxr_create_output_best_effort_stream>
 80112f6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80112fa:	4628      	mov	r0, r5
 80112fc:	f004 fe10 	bl	8015f20 <uxr_create_session>
 8011300:	4605      	mov	r5, r0
 8011302:	b140      	cbz	r0, 8011316 <rmw_init+0x1be>
 8011304:	4638      	mov	r0, r7
 8011306:	b003      	add	sp, #12
 8011308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801130c:	270b      	movs	r7, #11
 801130e:	4638      	mov	r0, r7
 8011310:	b003      	add	sp, #12
 8011312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011316:	4648      	mov	r0, r9
 8011318:	f003 fe3e 	bl	8014f98 <uxr_close_custom_transport>
 801131c:	4810      	ldr	r0, [pc, #64]	@ (8011360 <rmw_init+0x208>)
 801131e:	4621      	mov	r1, r4
 8011320:	f00a f85e 	bl	801b3e0 <put_memory>
 8011324:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8011326:	2701      	movs	r7, #1
 8011328:	4638      	mov	r0, r7
 801132a:	b003      	add	sp, #12
 801132c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011330:	270c      	movs	r7, #12
 8011332:	4638      	mov	r0, r7
 8011334:	b003      	add	sp, #12
 8011336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801133a:	4648      	mov	r0, r9
 801133c:	f003 fe2c 	bl	8014f98 <uxr_close_custom_transport>
 8011340:	4807      	ldr	r0, [pc, #28]	@ (8011360 <rmw_init+0x208>)
 8011342:	4621      	mov	r1, r4
 8011344:	f00a f84c 	bl	801b3e0 <put_memory>
 8011348:	4638      	mov	r0, r7
 801134a:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 801134e:	b003      	add	sp, #12
 8011350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011354:	0802132c 	.word	0x0802132c
 8011358:	2001ce68 	.word	0x2001ce68
 801135c:	2001df60 	.word	0x2001df60
 8011360:	2001f508 	.word	0x2001f508
 8011364:	2001ad68 	.word	0x2001ad68
 8011368:	2001dea8 	.word	0x2001dea8
 801136c:	2001df4c 	.word	0x2001df4c
 8011370:	2001d1e0 	.word	0x2001d1e0
 8011374:	2001d618 	.word	0x2001d618
 8011378:	2001d628 	.word	0x2001d628
 801137c:	2001de98 	.word	0x2001de98
 8011380:	2001d108 	.word	0x2001d108
 8011384:	2001d1d0 	.word	0x2001d1d0
 8011388:	2001d030 	.word	0x2001d030
 801138c:	2001d0f8 	.word	0x2001d0f8
 8011390:	2001ce78 	.word	0x2001ce78
 8011394:	2001d01c 	.word	0x2001d01c
 8011398:	2001acd0 	.word	0x2001acd0
 801139c:	2001ad54 	.word	0x2001ad54
 80113a0:	2001ac50 	.word	0x2001ac50
 80113a4:	2001acc0 	.word	0x2001acc0
 80113a8:	2001abc0 	.word	0x2001abc0
 80113ac:	2001ac40 	.word	0x2001ac40
 80113b0:	0801b1f9 	.word	0x0801b1f9
 80113b4:	0801b1f1 	.word	0x0801b1f1
 80113b8:	0801b291 	.word	0x0801b291
 80113bc:	0801b32d 	.word	0x0801b32d

080113c0 <rmw_shutdown>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	b09c      	sub	sp, #112	@ 0x70
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d051      	beq.n	801146c <rmw_shutdown+0xac>
 80113c8:	4605      	mov	r5, r0
 80113ca:	6880      	ldr	r0, [r0, #8]
 80113cc:	b128      	cbz	r0, 80113da <rmw_shutdown+0x1a>
 80113ce:	4b2b      	ldr	r3, [pc, #172]	@ (801147c <rmw_shutdown+0xbc>)
 80113d0:	6819      	ldr	r1, [r3, #0]
 80113d2:	f7ee ff25 	bl	8000220 <strcmp>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d144      	bne.n	8011464 <rmw_shutdown+0xa4>
 80113da:	4b29      	ldr	r3, [pc, #164]	@ (8011480 <rmw_shutdown+0xc0>)
 80113dc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80113de:	681c      	ldr	r4, [r3, #0]
 80113e0:	2c00      	cmp	r4, #0
 80113e2:	d047      	beq.n	8011474 <rmw_shutdown+0xb4>
 80113e4:	2600      	movs	r6, #0
 80113e6:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 80113ea:	691a      	ldr	r2, [r3, #16]
 80113ec:	4282      	cmp	r2, r0
 80113ee:	d024      	beq.n	801143a <rmw_shutdown+0x7a>
 80113f0:	2c00      	cmp	r4, #0
 80113f2:	d1f8      	bne.n	80113e6 <rmw_shutdown+0x26>
 80113f4:	b188      	cbz	r0, 801141a <rmw_shutdown+0x5a>
 80113f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80113fa:	789b      	ldrb	r3, [r3, #2]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	bf14      	ite	ne
 8011400:	210a      	movne	r1, #10
 8011402:	2100      	moveq	r1, #0
 8011404:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011408:	f004 fd62 	bl	8015ed0 <uxr_delete_session_retries>
 801140c:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801140e:	f000 fe9d 	bl	801214c <rmw_uxrce_fini_session_memory>
 8011412:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011414:	3010      	adds	r0, #16
 8011416:	f003 fdbf 	bl	8014f98 <uxr_close_custom_transport>
 801141a:	2300      	movs	r3, #0
 801141c:	66eb      	str	r3, [r5, #108]	@ 0x6c
 801141e:	b1be      	cbz	r6, 8011450 <rmw_shutdown+0x90>
 8011420:	4d18      	ldr	r5, [pc, #96]	@ (8011484 <rmw_shutdown+0xc4>)
 8011422:	682c      	ldr	r4, [r5, #0]
 8011424:	b134      	cbz	r4, 8011434 <rmw_shutdown+0x74>
 8011426:	4621      	mov	r1, r4
 8011428:	6864      	ldr	r4, [r4, #4]
 801142a:	4628      	mov	r0, r5
 801142c:	f009 ffd8 	bl	801b3e0 <put_memory>
 8011430:	2c00      	cmp	r4, #0
 8011432:	d1f8      	bne.n	8011426 <rmw_shutdown+0x66>
 8011434:	4630      	mov	r0, r6
 8011436:	b01c      	add	sp, #112	@ 0x70
 8011438:	bd70      	pop	{r4, r5, r6, pc}
 801143a:	f103 0018 	add.w	r0, r3, #24
 801143e:	f000 f8e7 	bl	8011610 <rmw_destroy_node>
 8011442:	4606      	mov	r6, r0
 8011444:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8011446:	2c00      	cmp	r4, #0
 8011448:	d1cd      	bne.n	80113e6 <rmw_shutdown+0x26>
 801144a:	2800      	cmp	r0, #0
 801144c:	d1d3      	bne.n	80113f6 <rmw_shutdown+0x36>
 801144e:	e7e4      	b.n	801141a <rmw_shutdown+0x5a>
 8011450:	4668      	mov	r0, sp
 8011452:	f009 fdb7 	bl	801afc4 <rmw_get_zero_initialized_context>
 8011456:	2270      	movs	r2, #112	@ 0x70
 8011458:	4669      	mov	r1, sp
 801145a:	4628      	mov	r0, r5
 801145c:	f00c fde1 	bl	801e022 <memcpy>
 8011460:	2600      	movs	r6, #0
 8011462:	e7dd      	b.n	8011420 <rmw_shutdown+0x60>
 8011464:	260c      	movs	r6, #12
 8011466:	4630      	mov	r0, r6
 8011468:	b01c      	add	sp, #112	@ 0x70
 801146a:	bd70      	pop	{r4, r5, r6, pc}
 801146c:	260b      	movs	r6, #11
 801146e:	4630      	mov	r0, r6
 8011470:	b01c      	add	sp, #112	@ 0x70
 8011472:	bd70      	pop	{r4, r5, r6, pc}
 8011474:	2800      	cmp	r0, #0
 8011476:	d0eb      	beq.n	8011450 <rmw_shutdown+0x90>
 8011478:	4626      	mov	r6, r4
 801147a:	e7bc      	b.n	80113f6 <rmw_shutdown+0x36>
 801147c:	0802132c 	.word	0x0802132c
 8011480:	2001df4c 	.word	0x2001df4c
 8011484:	2001ce68 	.word	0x2001ce68

08011488 <rmw_context_fini>:
 8011488:	4b17      	ldr	r3, [pc, #92]	@ (80114e8 <rmw_context_fini+0x60>)
 801148a:	b570      	push	{r4, r5, r6, lr}
 801148c:	681c      	ldr	r4, [r3, #0]
 801148e:	4605      	mov	r5, r0
 8011490:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8011492:	b33c      	cbz	r4, 80114e4 <rmw_context_fini+0x5c>
 8011494:	2600      	movs	r6, #0
 8011496:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801149a:	691a      	ldr	r2, [r3, #16]
 801149c:	4282      	cmp	r2, r0
 801149e:	d018      	beq.n	80114d2 <rmw_context_fini+0x4a>
 80114a0:	2c00      	cmp	r4, #0
 80114a2:	d1f8      	bne.n	8011496 <rmw_context_fini+0xe>
 80114a4:	b188      	cbz	r0, 80114ca <rmw_context_fini+0x42>
 80114a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80114aa:	789b      	ldrb	r3, [r3, #2]
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	bf14      	ite	ne
 80114b0:	210a      	movne	r1, #10
 80114b2:	2100      	moveq	r1, #0
 80114b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114b8:	f004 fd0a 	bl	8015ed0 <uxr_delete_session_retries>
 80114bc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80114be:	f000 fe45 	bl	801214c <rmw_uxrce_fini_session_memory>
 80114c2:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80114c4:	3010      	adds	r0, #16
 80114c6:	f003 fd67 	bl	8014f98 <uxr_close_custom_transport>
 80114ca:	2300      	movs	r3, #0
 80114cc:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80114ce:	4630      	mov	r0, r6
 80114d0:	bd70      	pop	{r4, r5, r6, pc}
 80114d2:	f103 0018 	add.w	r0, r3, #24
 80114d6:	f000 f89b 	bl	8011610 <rmw_destroy_node>
 80114da:	4606      	mov	r6, r0
 80114dc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80114de:	2c00      	cmp	r4, #0
 80114e0:	d1d9      	bne.n	8011496 <rmw_context_fini+0xe>
 80114e2:	e7df      	b.n	80114a4 <rmw_context_fini+0x1c>
 80114e4:	4626      	mov	r6, r4
 80114e6:	e7dd      	b.n	80114a4 <rmw_context_fini+0x1c>
 80114e8:	2001df4c 	.word	0x2001df4c

080114ec <create_node>:
 80114ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114f0:	b083      	sub	sp, #12
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d063      	beq.n	80115be <create_node+0xd2>
 80114f6:	4606      	mov	r6, r0
 80114f8:	4836      	ldr	r0, [pc, #216]	@ (80115d4 <create_node+0xe8>)
 80114fa:	460f      	mov	r7, r1
 80114fc:	4690      	mov	r8, r2
 80114fe:	461d      	mov	r5, r3
 8011500:	f009 ff5e 	bl	801b3c0 <get_memory>
 8011504:	2800      	cmp	r0, #0
 8011506:	d05a      	beq.n	80115be <create_node+0xd2>
 8011508:	6884      	ldr	r4, [r0, #8]
 801150a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 801150c:	6123      	str	r3, [r4, #16]
 801150e:	f009 ffdd 	bl	801b4cc <rmw_get_implementation_identifier>
 8011512:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8011516:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801151a:	f8c4 9020 	str.w	r9, [r4, #32]
 801151e:	4630      	mov	r0, r6
 8011520:	f7ee fede 	bl	80002e0 <strlen>
 8011524:	1c42      	adds	r2, r0, #1
 8011526:	2a3c      	cmp	r2, #60	@ 0x3c
 8011528:	f104 0518 	add.w	r5, r4, #24
 801152c:	d844      	bhi.n	80115b8 <create_node+0xcc>
 801152e:	4648      	mov	r0, r9
 8011530:	4631      	mov	r1, r6
 8011532:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011536:	f00c fd74 	bl	801e022 <memcpy>
 801153a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801153e:	4638      	mov	r0, r7
 8011540:	f7ee fece 	bl	80002e0 <strlen>
 8011544:	1c42      	adds	r2, r0, #1
 8011546:	2a3c      	cmp	r2, #60	@ 0x3c
 8011548:	d836      	bhi.n	80115b8 <create_node+0xcc>
 801154a:	4639      	mov	r1, r7
 801154c:	4648      	mov	r0, r9
 801154e:	f00c fd68 	bl	801e022 <memcpy>
 8011552:	6923      	ldr	r3, [r4, #16]
 8011554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011558:	2101      	movs	r1, #1
 801155a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801155e:	1842      	adds	r2, r0, r1
 8011560:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011564:	f003 fd1c 	bl	8014fa0 <uxr_object_id>
 8011568:	6160      	str	r0, [r4, #20]
 801156a:	783b      	ldrb	r3, [r7, #0]
 801156c:	2b2f      	cmp	r3, #47	@ 0x2f
 801156e:	d128      	bne.n	80115c2 <create_node+0xd6>
 8011570:	787b      	ldrb	r3, [r7, #1]
 8011572:	bb33      	cbnz	r3, 80115c2 <create_node+0xd6>
 8011574:	4a18      	ldr	r2, [pc, #96]	@ (80115d8 <create_node+0xec>)
 8011576:	4819      	ldr	r0, [pc, #100]	@ (80115dc <create_node+0xf0>)
 8011578:	4633      	mov	r3, r6
 801157a:	213c      	movs	r1, #60	@ 0x3c
 801157c:	f00c fab2 	bl	801dae4 <sniprintf>
 8011580:	6920      	ldr	r0, [r4, #16]
 8011582:	4916      	ldr	r1, [pc, #88]	@ (80115dc <create_node+0xf0>)
 8011584:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011588:	9100      	str	r1, [sp, #0]
 801158a:	2106      	movs	r1, #6
 801158c:	9101      	str	r1, [sp, #4]
 801158e:	6811      	ldr	r1, [r2, #0]
 8011590:	6962      	ldr	r2, [r4, #20]
 8011592:	fa1f f388 	uxth.w	r3, r8
 8011596:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801159a:	f003 fab1 	bl	8014b00 <uxr_buffer_create_participant_bin>
 801159e:	4602      	mov	r2, r0
 80115a0:	6920      	ldr	r0, [r4, #16]
 80115a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80115a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80115aa:	f000 ff4f 	bl	801244c <run_xrce_session>
 80115ae:	b118      	cbz	r0, 80115b8 <create_node+0xcc>
 80115b0:	4628      	mov	r0, r5
 80115b2:	b003      	add	sp, #12
 80115b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115b8:	4628      	mov	r0, r5
 80115ba:	f000 fdcd 	bl	8012158 <rmw_uxrce_fini_node_memory>
 80115be:	2500      	movs	r5, #0
 80115c0:	e7f6      	b.n	80115b0 <create_node+0xc4>
 80115c2:	4a07      	ldr	r2, [pc, #28]	@ (80115e0 <create_node+0xf4>)
 80115c4:	9600      	str	r6, [sp, #0]
 80115c6:	463b      	mov	r3, r7
 80115c8:	213c      	movs	r1, #60	@ 0x3c
 80115ca:	4804      	ldr	r0, [pc, #16]	@ (80115dc <create_node+0xf0>)
 80115cc:	f00c fa8a 	bl	801dae4 <sniprintf>
 80115d0:	e7d6      	b.n	8011580 <create_node+0x94>
 80115d2:	bf00      	nop
 80115d4:	2001df4c 	.word	0x2001df4c
 80115d8:	08020b58 	.word	0x08020b58
 80115dc:	2001ab84 	.word	0x2001ab84
 80115e0:	080205cc 	.word	0x080205cc

080115e4 <rmw_create_node>:
 80115e4:	b191      	cbz	r1, 801160c <rmw_create_node+0x28>
 80115e6:	b410      	push	{r4}
 80115e8:	4614      	mov	r4, r2
 80115ea:	780a      	ldrb	r2, [r1, #0]
 80115ec:	4603      	mov	r3, r0
 80115ee:	4608      	mov	r0, r1
 80115f0:	b142      	cbz	r2, 8011604 <rmw_create_node+0x20>
 80115f2:	b13c      	cbz	r4, 8011604 <rmw_create_node+0x20>
 80115f4:	7822      	ldrb	r2, [r4, #0]
 80115f6:	b12a      	cbz	r2, 8011604 <rmw_create_node+0x20>
 80115f8:	4621      	mov	r1, r4
 80115fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80115fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011600:	f7ff bf74 	b.w	80114ec <create_node>
 8011604:	2000      	movs	r0, #0
 8011606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801160a:	4770      	bx	lr
 801160c:	2000      	movs	r0, #0
 801160e:	4770      	bx	lr

08011610 <rmw_destroy_node>:
 8011610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011612:	b328      	cbz	r0, 8011660 <rmw_destroy_node+0x50>
 8011614:	4607      	mov	r7, r0
 8011616:	6800      	ldr	r0, [r0, #0]
 8011618:	b120      	cbz	r0, 8011624 <rmw_destroy_node+0x14>
 801161a:	4b36      	ldr	r3, [pc, #216]	@ (80116f4 <rmw_destroy_node+0xe4>)
 801161c:	6819      	ldr	r1, [r3, #0]
 801161e:	f7ee fdff 	bl	8000220 <strcmp>
 8011622:	b9e8      	cbnz	r0, 8011660 <rmw_destroy_node+0x50>
 8011624:	687d      	ldr	r5, [r7, #4]
 8011626:	b1dd      	cbz	r5, 8011660 <rmw_destroy_node+0x50>
 8011628:	4b33      	ldr	r3, [pc, #204]	@ (80116f8 <rmw_destroy_node+0xe8>)
 801162a:	681c      	ldr	r4, [r3, #0]
 801162c:	2c00      	cmp	r4, #0
 801162e:	d05f      	beq.n	80116f0 <rmw_destroy_node+0xe0>
 8011630:	2600      	movs	r6, #0
 8011632:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011636:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801163a:	429d      	cmp	r5, r3
 801163c:	d013      	beq.n	8011666 <rmw_destroy_node+0x56>
 801163e:	2c00      	cmp	r4, #0
 8011640:	d1f7      	bne.n	8011632 <rmw_destroy_node+0x22>
 8011642:	4b2e      	ldr	r3, [pc, #184]	@ (80116fc <rmw_destroy_node+0xec>)
 8011644:	681c      	ldr	r4, [r3, #0]
 8011646:	b1c4      	cbz	r4, 801167a <rmw_destroy_node+0x6a>
 8011648:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801164c:	6a0b      	ldr	r3, [r1, #32]
 801164e:	429d      	cmp	r5, r3
 8011650:	d1f9      	bne.n	8011646 <rmw_destroy_node+0x36>
 8011652:	317c      	adds	r1, #124	@ 0x7c
 8011654:	4638      	mov	r0, r7
 8011656:	f000 fb2f 	bl	8011cb8 <rmw_destroy_subscription>
 801165a:	2801      	cmp	r0, #1
 801165c:	4606      	mov	r6, r0
 801165e:	d1f2      	bne.n	8011646 <rmw_destroy_node+0x36>
 8011660:	2601      	movs	r6, #1
 8011662:	4630      	mov	r0, r6
 8011664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011666:	3184      	adds	r1, #132	@ 0x84
 8011668:	4638      	mov	r0, r7
 801166a:	f000 f9a1 	bl	80119b0 <rmw_destroy_publisher>
 801166e:	2801      	cmp	r0, #1
 8011670:	4606      	mov	r6, r0
 8011672:	d0f5      	beq.n	8011660 <rmw_destroy_node+0x50>
 8011674:	2c00      	cmp	r4, #0
 8011676:	d1dc      	bne.n	8011632 <rmw_destroy_node+0x22>
 8011678:	e7e3      	b.n	8011642 <rmw_destroy_node+0x32>
 801167a:	4b21      	ldr	r3, [pc, #132]	@ (8011700 <rmw_destroy_node+0xf0>)
 801167c:	681c      	ldr	r4, [r3, #0]
 801167e:	b16c      	cbz	r4, 801169c <rmw_destroy_node+0x8c>
 8011680:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011684:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011686:	429d      	cmp	r5, r3
 8011688:	d1f9      	bne.n	801167e <rmw_destroy_node+0x6e>
 801168a:	317c      	adds	r1, #124	@ 0x7c
 801168c:	4638      	mov	r0, r7
 801168e:	f000 f9e1 	bl	8011a54 <rmw_destroy_service>
 8011692:	2801      	cmp	r0, #1
 8011694:	4606      	mov	r6, r0
 8011696:	d0e3      	beq.n	8011660 <rmw_destroy_node+0x50>
 8011698:	2c00      	cmp	r4, #0
 801169a:	d1f1      	bne.n	8011680 <rmw_destroy_node+0x70>
 801169c:	4b19      	ldr	r3, [pc, #100]	@ (8011704 <rmw_destroy_node+0xf4>)
 801169e:	681c      	ldr	r4, [r3, #0]
 80116a0:	b16c      	cbz	r4, 80116be <rmw_destroy_node+0xae>
 80116a2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80116a6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80116a8:	429d      	cmp	r5, r3
 80116aa:	d1f9      	bne.n	80116a0 <rmw_destroy_node+0x90>
 80116ac:	317c      	adds	r1, #124	@ 0x7c
 80116ae:	4638      	mov	r0, r7
 80116b0:	f009 feaa 	bl	801b408 <rmw_destroy_client>
 80116b4:	2801      	cmp	r0, #1
 80116b6:	4606      	mov	r6, r0
 80116b8:	d0d2      	beq.n	8011660 <rmw_destroy_node+0x50>
 80116ba:	2c00      	cmp	r4, #0
 80116bc:	d1f1      	bne.n	80116a2 <rmw_destroy_node+0x92>
 80116be:	6928      	ldr	r0, [r5, #16]
 80116c0:	696a      	ldr	r2, [r5, #20]
 80116c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80116c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116ca:	6819      	ldr	r1, [r3, #0]
 80116cc:	f003 f9ce 	bl	8014a6c <uxr_buffer_delete_entity>
 80116d0:	4602      	mov	r2, r0
 80116d2:	6928      	ldr	r0, [r5, #16]
 80116d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80116d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80116dc:	f000 feb6 	bl	801244c <run_xrce_session>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	bf08      	it	eq
 80116e4:	2602      	moveq	r6, #2
 80116e6:	4638      	mov	r0, r7
 80116e8:	f000 fd36 	bl	8012158 <rmw_uxrce_fini_node_memory>
 80116ec:	4630      	mov	r0, r6
 80116ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116f0:	4626      	mov	r6, r4
 80116f2:	e7a6      	b.n	8011642 <rmw_destroy_node+0x32>
 80116f4:	0802132c 	.word	0x0802132c
 80116f8:	2001de98 	.word	0x2001de98
 80116fc:	2001d618 	.word	0x2001d618
 8011700:	2001d1d0 	.word	0x2001d1d0
 8011704:	2001d0f8 	.word	0x2001d0f8

08011708 <rmw_node_get_graph_guard_condition>:
 8011708:	6843      	ldr	r3, [r0, #4]
 801170a:	6918      	ldr	r0, [r3, #16]
 801170c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop

08011714 <flush_session>:
 8011714:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8011716:	f004 ba3f 	b.w	8015b98 <uxr_run_session_until_confirm_delivery>
 801171a:	bf00      	nop

0801171c <rmw_publish>:
 801171c:	2800      	cmp	r0, #0
 801171e:	d053      	beq.n	80117c8 <rmw_publish+0xac>
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	460d      	mov	r5, r1
 8011724:	b08e      	sub	sp, #56	@ 0x38
 8011726:	2900      	cmp	r1, #0
 8011728:	d04b      	beq.n	80117c2 <rmw_publish+0xa6>
 801172a:	4604      	mov	r4, r0
 801172c:	6800      	ldr	r0, [r0, #0]
 801172e:	f000 ff13 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 8011732:	2800      	cmp	r0, #0
 8011734:	d045      	beq.n	80117c2 <rmw_publish+0xa6>
 8011736:	6866      	ldr	r6, [r4, #4]
 8011738:	2e00      	cmp	r6, #0
 801173a:	d042      	beq.n	80117c2 <rmw_publish+0xa6>
 801173c:	69b4      	ldr	r4, [r6, #24]
 801173e:	4628      	mov	r0, r5
 8011740:	6923      	ldr	r3, [r4, #16]
 8011742:	4798      	blx	r3
 8011744:	69f3      	ldr	r3, [r6, #28]
 8011746:	9005      	str	r0, [sp, #20]
 8011748:	b113      	cbz	r3, 8011750 <rmw_publish+0x34>
 801174a:	a805      	add	r0, sp, #20
 801174c:	4798      	blx	r3
 801174e:	9805      	ldr	r0, [sp, #20]
 8011750:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	9000      	str	r0, [sp, #0]
 8011758:	6972      	ldr	r2, [r6, #20]
 801175a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801175c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011760:	ab06      	add	r3, sp, #24
 8011762:	f005 fcaf 	bl	80170c4 <uxr_prepare_output_stream>
 8011766:	b1d8      	cbz	r0, 80117a0 <rmw_publish+0x84>
 8011768:	68a3      	ldr	r3, [r4, #8]
 801176a:	a906      	add	r1, sp, #24
 801176c:	4628      	mov	r0, r5
 801176e:	4798      	blx	r3
 8011770:	6a33      	ldr	r3, [r6, #32]
 8011772:	4604      	mov	r4, r0
 8011774:	b10b      	cbz	r3, 801177a <rmw_publish+0x5e>
 8011776:	a806      	add	r0, sp, #24
 8011778:	4798      	blx	r3
 801177a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801177e:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 8011782:	2b01      	cmp	r3, #1
 8011784:	6910      	ldr	r0, [r2, #16]
 8011786:	d021      	beq.n	80117cc <rmw_publish+0xb0>
 8011788:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801178a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801178e:	f004 fa03 	bl	8015b98 <uxr_run_session_until_confirm_delivery>
 8011792:	4004      	ands	r4, r0
 8011794:	b2e4      	uxtb	r4, r4
 8011796:	f084 0001 	eor.w	r0, r4, #1
 801179a:	b2c0      	uxtb	r0, r0
 801179c:	b00e      	add	sp, #56	@ 0x38
 801179e:	bd70      	pop	{r4, r5, r6, pc}
 80117a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80117a4:	6918      	ldr	r0, [r3, #16]
 80117a6:	4b0c      	ldr	r3, [pc, #48]	@ (80117d8 <rmw_publish+0xbc>)
 80117a8:	9301      	str	r3, [sp, #4]
 80117aa:	9b05      	ldr	r3, [sp, #20]
 80117ac:	9300      	str	r3, [sp, #0]
 80117ae:	9602      	str	r6, [sp, #8]
 80117b0:	6972      	ldr	r2, [r6, #20]
 80117b2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80117b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80117b8:	ab06      	add	r3, sp, #24
 80117ba:	f005 fcb3 	bl	8017124 <uxr_prepare_output_stream_fragmented>
 80117be:	2800      	cmp	r0, #0
 80117c0:	d1d2      	bne.n	8011768 <rmw_publish+0x4c>
 80117c2:	2001      	movs	r0, #1
 80117c4:	b00e      	add	sp, #56	@ 0x38
 80117c6:	bd70      	pop	{r4, r5, r6, pc}
 80117c8:	2001      	movs	r0, #1
 80117ca:	4770      	bx	lr
 80117cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80117d0:	f003 fe4a 	bl	8015468 <uxr_flash_output_streams>
 80117d4:	e7df      	b.n	8011796 <rmw_publish+0x7a>
 80117d6:	bf00      	nop
 80117d8:	08011715 	.word	0x08011715

080117dc <rmw_create_publisher>:
 80117dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e0:	b087      	sub	sp, #28
 80117e2:	2800      	cmp	r0, #0
 80117e4:	f000 80c9 	beq.w	801197a <rmw_create_publisher+0x19e>
 80117e8:	460f      	mov	r7, r1
 80117ea:	2900      	cmp	r1, #0
 80117ec:	f000 80c5 	beq.w	801197a <rmw_create_publisher+0x19e>
 80117f0:	4604      	mov	r4, r0
 80117f2:	6800      	ldr	r0, [r0, #0]
 80117f4:	4615      	mov	r5, r2
 80117f6:	461e      	mov	r6, r3
 80117f8:	f000 feae 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f000 80bc 	beq.w	801197a <rmw_create_publisher+0x19e>
 8011802:	2d00      	cmp	r5, #0
 8011804:	f000 80b9 	beq.w	801197a <rmw_create_publisher+0x19e>
 8011808:	782b      	ldrb	r3, [r5, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 80b5 	beq.w	801197a <rmw_create_publisher+0x19e>
 8011810:	2e00      	cmp	r6, #0
 8011812:	f000 80b2 	beq.w	801197a <rmw_create_publisher+0x19e>
 8011816:	485c      	ldr	r0, [pc, #368]	@ (8011988 <rmw_create_publisher+0x1ac>)
 8011818:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801181c:	f009 fdd0 	bl	801b3c0 <get_memory>
 8011820:	2800      	cmp	r0, #0
 8011822:	f000 80aa 	beq.w	801197a <rmw_create_publisher+0x19e>
 8011826:	6884      	ldr	r4, [r0, #8]
 8011828:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 801182c:	f009 fe4e 	bl	801b4cc <rmw_get_implementation_identifier>
 8011830:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8011834:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8011838:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 801183c:	4628      	mov	r0, r5
 801183e:	f7ee fd4f 	bl	80002e0 <strlen>
 8011842:	3001      	adds	r0, #1
 8011844:	283c      	cmp	r0, #60	@ 0x3c
 8011846:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801184a:	f200 808f 	bhi.w	801196c <rmw_create_publisher+0x190>
 801184e:	4a4f      	ldr	r2, [pc, #316]	@ (801198c <rmw_create_publisher+0x1b0>)
 8011850:	462b      	mov	r3, r5
 8011852:	213c      	movs	r1, #60	@ 0x3c
 8011854:	4650      	mov	r0, sl
 8011856:	f00c f945 	bl	801dae4 <sniprintf>
 801185a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801185e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8011860:	4631      	mov	r1, r6
 8011862:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8011866:	2250      	movs	r2, #80	@ 0x50
 8011868:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801186c:	f00c fbd9 	bl	801e022 <memcpy>
 8011870:	7a33      	ldrb	r3, [r6, #8]
 8011872:	4947      	ldr	r1, [pc, #284]	@ (8011990 <rmw_create_publisher+0x1b4>)
 8011874:	2b02      	cmp	r3, #2
 8011876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801187a:	bf0c      	ite	eq
 801187c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8011880:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8011884:	67a3      	str	r3, [r4, #120]	@ 0x78
 8011886:	2300      	movs	r3, #0
 8011888:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801188c:	4638      	mov	r0, r7
 801188e:	f000 fe71 	bl	8012574 <get_message_typesupport_handle>
 8011892:	2800      	cmp	r0, #0
 8011894:	d06a      	beq.n	801196c <rmw_create_publisher+0x190>
 8011896:	6842      	ldr	r2, [r0, #4]
 8011898:	61a2      	str	r2, [r4, #24]
 801189a:	2a00      	cmp	r2, #0
 801189c:	d066      	beq.n	801196c <rmw_create_publisher+0x190>
 801189e:	4629      	mov	r1, r5
 80118a0:	4633      	mov	r3, r6
 80118a2:	4648      	mov	r0, r9
 80118a4:	f009 fe40 	bl	801b528 <create_topic>
 80118a8:	6260      	str	r0, [r4, #36]	@ 0x24
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d062      	beq.n	8011974 <rmw_create_publisher+0x198>
 80118ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80118b6:	2103      	movs	r1, #3
 80118b8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80118bc:	1c42      	adds	r2, r0, #1
 80118be:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80118c2:	f003 fb6d 	bl	8014fa0 <uxr_object_id>
 80118c6:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80118ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118ce:	6120      	str	r0, [r4, #16]
 80118d0:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80118d4:	6910      	ldr	r0, [r2, #16]
 80118d6:	2506      	movs	r5, #6
 80118d8:	9500      	str	r5, [sp, #0]
 80118da:	6819      	ldr	r1, [r3, #0]
 80118dc:	6922      	ldr	r2, [r4, #16]
 80118de:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80118e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80118e6:	f003 f971 	bl	8014bcc <uxr_buffer_create_publisher_bin>
 80118ea:	4602      	mov	r2, r0
 80118ec:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80118f0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80118f4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80118f8:	f000 fda8 	bl	801244c <run_xrce_session>
 80118fc:	b3b0      	cbz	r0, 801196c <rmw_create_publisher+0x190>
 80118fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011906:	2105      	movs	r1, #5
 8011908:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801190c:	1c42      	adds	r2, r0, #1
 801190e:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8011912:	f003 fb45 	bl	8014fa0 <uxr_object_id>
 8011916:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801191a:	6160      	str	r0, [r4, #20]
 801191c:	4631      	mov	r1, r6
 801191e:	af04      	add	r7, sp, #16
 8011920:	691e      	ldr	r6, [r3, #16]
 8011922:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011926:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801192a:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 801192e:	4638      	mov	r0, r7
 8011930:	f000 fdac 	bl	801248c <convert_qos_profile>
 8011934:	9503      	str	r5, [sp, #12]
 8011936:	e897 0003 	ldmia.w	r7, {r0, r1}
 801193a:	9001      	str	r0, [sp, #4]
 801193c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011940:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011944:	9300      	str	r3, [sp, #0]
 8011946:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801194a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801194e:	f8da 1000 	ldr.w	r1, [sl]
 8011952:	4630      	mov	r0, r6
 8011954:	f003 f998 	bl	8014c88 <uxr_buffer_create_datawriter_bin>
 8011958:	4602      	mov	r2, r0
 801195a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801195e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011962:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011966:	f000 fd71 	bl	801244c <run_xrce_session>
 801196a:	b940      	cbnz	r0, 801197e <rmw_create_publisher+0x1a2>
 801196c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801196e:	b108      	cbz	r0, 8011974 <rmw_create_publisher+0x198>
 8011970:	f000 fc62 	bl	8012238 <rmw_uxrce_fini_topic_memory>
 8011974:	4640      	mov	r0, r8
 8011976:	f000 fc07 	bl	8012188 <rmw_uxrce_fini_publisher_memory>
 801197a:	f04f 0800 	mov.w	r8, #0
 801197e:	4640      	mov	r0, r8
 8011980:	b007      	add	sp, #28
 8011982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011986:	bf00      	nop
 8011988:	2001de98 	.word	0x2001de98
 801198c:	08020b58 	.word	0x08020b58
 8011990:	08020508 	.word	0x08020508

08011994 <rmw_publisher_get_actual_qos>:
 8011994:	b508      	push	{r3, lr}
 8011996:	4603      	mov	r3, r0
 8011998:	b140      	cbz	r0, 80119ac <rmw_publisher_get_actual_qos+0x18>
 801199a:	4608      	mov	r0, r1
 801199c:	b131      	cbz	r1, 80119ac <rmw_publisher_get_actual_qos+0x18>
 801199e:	6859      	ldr	r1, [r3, #4]
 80119a0:	2250      	movs	r2, #80	@ 0x50
 80119a2:	3128      	adds	r1, #40	@ 0x28
 80119a4:	f00c fb3d 	bl	801e022 <memcpy>
 80119a8:	2000      	movs	r0, #0
 80119aa:	bd08      	pop	{r3, pc}
 80119ac:	200b      	movs	r0, #11
 80119ae:	bd08      	pop	{r3, pc}

080119b0 <rmw_destroy_publisher>:
 80119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b4:	b128      	cbz	r0, 80119c2 <rmw_destroy_publisher+0x12>
 80119b6:	4604      	mov	r4, r0
 80119b8:	6800      	ldr	r0, [r0, #0]
 80119ba:	460d      	mov	r5, r1
 80119bc:	f000 fdcc 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 80119c0:	b918      	cbnz	r0, 80119ca <rmw_destroy_publisher+0x1a>
 80119c2:	2401      	movs	r4, #1
 80119c4:	4620      	mov	r0, r4
 80119c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119ca:	6863      	ldr	r3, [r4, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d0f8      	beq.n	80119c2 <rmw_destroy_publisher+0x12>
 80119d0:	2d00      	cmp	r5, #0
 80119d2:	d0f6      	beq.n	80119c2 <rmw_destroy_publisher+0x12>
 80119d4:	6828      	ldr	r0, [r5, #0]
 80119d6:	f000 fdbf 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 80119da:	2800      	cmp	r0, #0
 80119dc:	d0f1      	beq.n	80119c2 <rmw_destroy_publisher+0x12>
 80119de:	686c      	ldr	r4, [r5, #4]
 80119e0:	2c00      	cmp	r4, #0
 80119e2:	d0ee      	beq.n	80119c2 <rmw_destroy_publisher+0x12>
 80119e4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80119e6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 80119ea:	f009 fdf1 	bl	801b5d0 <destroy_topic>
 80119ee:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80119f2:	6962      	ldr	r2, [r4, #20]
 80119f4:	6918      	ldr	r0, [r3, #16]
 80119f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119fe:	6819      	ldr	r1, [r3, #0]
 8011a00:	f003 f834 	bl	8014a6c <uxr_buffer_delete_entity>
 8011a04:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011a08:	6922      	ldr	r2, [r4, #16]
 8011a0a:	4680      	mov	r8, r0
 8011a0c:	6918      	ldr	r0, [r3, #16]
 8011a0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011a12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011a16:	6819      	ldr	r1, [r3, #0]
 8011a18:	f003 f828 	bl	8014a6c <uxr_buffer_delete_entity>
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	6938      	ldr	r0, [r7, #16]
 8011a20:	4642      	mov	r2, r8
 8011a22:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011a26:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011a2a:	f000 fd0f 	bl	801244c <run_xrce_session>
 8011a2e:	4604      	mov	r4, r0
 8011a30:	6938      	ldr	r0, [r7, #16]
 8011a32:	4632      	mov	r2, r6
 8011a34:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011a38:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011a3c:	f000 fd06 	bl	801244c <run_xrce_session>
 8011a40:	4004      	ands	r4, r0
 8011a42:	f084 0401 	eor.w	r4, r4, #1
 8011a46:	b2e4      	uxtb	r4, r4
 8011a48:	4628      	mov	r0, r5
 8011a4a:	0064      	lsls	r4, r4, #1
 8011a4c:	f000 fb9c 	bl	8012188 <rmw_uxrce_fini_publisher_memory>
 8011a50:	e7b8      	b.n	80119c4 <rmw_destroy_publisher+0x14>
 8011a52:	bf00      	nop

08011a54 <rmw_destroy_service>:
 8011a54:	b570      	push	{r4, r5, r6, lr}
 8011a56:	b128      	cbz	r0, 8011a64 <rmw_destroy_service+0x10>
 8011a58:	4604      	mov	r4, r0
 8011a5a:	6800      	ldr	r0, [r0, #0]
 8011a5c:	460d      	mov	r5, r1
 8011a5e:	f000 fd7b 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 8011a62:	b910      	cbnz	r0, 8011a6a <rmw_destroy_service+0x16>
 8011a64:	2401      	movs	r4, #1
 8011a66:	4620      	mov	r0, r4
 8011a68:	bd70      	pop	{r4, r5, r6, pc}
 8011a6a:	6863      	ldr	r3, [r4, #4]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d0f9      	beq.n	8011a64 <rmw_destroy_service+0x10>
 8011a70:	2d00      	cmp	r5, #0
 8011a72:	d0f7      	beq.n	8011a64 <rmw_destroy_service+0x10>
 8011a74:	6828      	ldr	r0, [r5, #0]
 8011a76:	f000 fd6f 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d0f2      	beq.n	8011a64 <rmw_destroy_service+0x10>
 8011a7e:	686e      	ldr	r6, [r5, #4]
 8011a80:	2e00      	cmp	r6, #0
 8011a82:	d0ef      	beq.n	8011a64 <rmw_destroy_service+0x10>
 8011a84:	6864      	ldr	r4, [r4, #4]
 8011a86:	6932      	ldr	r2, [r6, #16]
 8011a88:	6920      	ldr	r0, [r4, #16]
 8011a8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011a8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011a92:	6819      	ldr	r1, [r3, #0]
 8011a94:	f003 faea 	bl	801506c <uxr_buffer_cancel_data>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	6920      	ldr	r0, [r4, #16]
 8011a9c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011aa0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011aa4:	f000 fcd2 	bl	801244c <run_xrce_session>
 8011aa8:	6920      	ldr	r0, [r4, #16]
 8011aaa:	6932      	ldr	r2, [r6, #16]
 8011aac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011ab0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ab4:	6819      	ldr	r1, [r3, #0]
 8011ab6:	f002 ffd9 	bl	8014a6c <uxr_buffer_delete_entity>
 8011aba:	4602      	mov	r2, r0
 8011abc:	6920      	ldr	r0, [r4, #16]
 8011abe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011ac2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011ac6:	f000 fcc1 	bl	801244c <run_xrce_session>
 8011aca:	f080 0401 	eor.w	r4, r0, #1
 8011ace:	b2e4      	uxtb	r4, r4
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	0064      	lsls	r4, r4, #1
 8011ad4:	f000 fb84 	bl	80121e0 <rmw_uxrce_fini_service_memory>
 8011ad8:	e7c5      	b.n	8011a66 <rmw_destroy_service+0x12>
 8011ada:	bf00      	nop

08011adc <rmw_create_subscription>:
 8011adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae0:	b08d      	sub	sp, #52	@ 0x34
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	f000 80d1 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011ae8:	460f      	mov	r7, r1
 8011aea:	2900      	cmp	r1, #0
 8011aec:	f000 80cd 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011af0:	4604      	mov	r4, r0
 8011af2:	6800      	ldr	r0, [r0, #0]
 8011af4:	4615      	mov	r5, r2
 8011af6:	461e      	mov	r6, r3
 8011af8:	f000 fd2e 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f000 80c4 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011b02:	2d00      	cmp	r5, #0
 8011b04:	f000 80c1 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011b08:	782b      	ldrb	r3, [r5, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f000 80bd 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011b10:	2e00      	cmp	r6, #0
 8011b12:	f000 80ba 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011b16:	485e      	ldr	r0, [pc, #376]	@ (8011c90 <rmw_create_subscription+0x1b4>)
 8011b18:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011b1c:	f009 fc50 	bl	801b3c0 <get_memory>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	f000 80b2 	beq.w	8011c8a <rmw_create_subscription+0x1ae>
 8011b26:	6884      	ldr	r4, [r0, #8]
 8011b28:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8011b2c:	f009 fcce 	bl	801b4cc <rmw_get_implementation_identifier>
 8011b30:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8011b34:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8011b36:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f7ee fbd0 	bl	80002e0 <strlen>
 8011b40:	3001      	adds	r0, #1
 8011b42:	283c      	cmp	r0, #60	@ 0x3c
 8011b44:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8011b48:	f200 8098 	bhi.w	8011c7c <rmw_create_subscription+0x1a0>
 8011b4c:	4a51      	ldr	r2, [pc, #324]	@ (8011c94 <rmw_create_subscription+0x1b8>)
 8011b4e:	462b      	mov	r3, r5
 8011b50:	213c      	movs	r1, #60	@ 0x3c
 8011b52:	4650      	mov	r0, sl
 8011b54:	f00b ffc6 	bl	801dae4 <sniprintf>
 8011b58:	4631      	mov	r1, r6
 8011b5a:	f8c4 9020 	str.w	r9, [r4, #32]
 8011b5e:	2250      	movs	r2, #80	@ 0x50
 8011b60:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011b64:	f00c fa5d 	bl	801e022 <memcpy>
 8011b68:	494b      	ldr	r1, [pc, #300]	@ (8011c98 <rmw_create_subscription+0x1bc>)
 8011b6a:	4638      	mov	r0, r7
 8011b6c:	f000 fd02 	bl	8012574 <get_message_typesupport_handle>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	f000 8083 	beq.w	8011c7c <rmw_create_subscription+0x1a0>
 8011b76:	6842      	ldr	r2, [r0, #4]
 8011b78:	61a2      	str	r2, [r4, #24]
 8011b7a:	2a00      	cmp	r2, #0
 8011b7c:	d07e      	beq.n	8011c7c <rmw_create_subscription+0x1a0>
 8011b7e:	4629      	mov	r1, r5
 8011b80:	4633      	mov	r3, r6
 8011b82:	4648      	mov	r0, r9
 8011b84:	f009 fcd0 	bl	801b528 <create_topic>
 8011b88:	61e0      	str	r0, [r4, #28]
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d07a      	beq.n	8011c84 <rmw_create_subscription+0x1a8>
 8011b8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011b96:	2104      	movs	r1, #4
 8011b98:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8011b9c:	1c42      	adds	r2, r0, #1
 8011b9e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011ba2:	f003 f9fd 	bl	8014fa0 <uxr_object_id>
 8011ba6:	6120      	str	r0, [r4, #16]
 8011ba8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011bac:	2506      	movs	r5, #6
 8011bae:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011bb2:	9500      	str	r5, [sp, #0]
 8011bb4:	6819      	ldr	r1, [r3, #0]
 8011bb6:	6922      	ldr	r2, [r4, #16]
 8011bb8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011bbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011bc0:	f003 f832 	bl	8014c28 <uxr_buffer_create_subscriber_bin>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011bca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011bce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011bd2:	f000 fc3b 	bl	801244c <run_xrce_session>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d050      	beq.n	8011c7c <rmw_create_subscription+0x1a0>
 8011bda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011be2:	4629      	mov	r1, r5
 8011be4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011be8:	1c42      	adds	r2, r0, #1
 8011bea:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8011bee:	f003 f9d7 	bl	8014fa0 <uxr_object_id>
 8011bf2:	af08      	add	r7, sp, #32
 8011bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011bf8:	69e3      	ldr	r3, [r4, #28]
 8011bfa:	6160      	str	r0, [r4, #20]
 8011bfc:	4631      	mov	r1, r6
 8011bfe:	4638      	mov	r0, r7
 8011c00:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011c04:	9305      	str	r3, [sp, #20]
 8011c06:	f000 fc41 	bl	801248c <convert_qos_profile>
 8011c0a:	9503      	str	r5, [sp, #12]
 8011c0c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011c10:	9b05      	ldr	r3, [sp, #20]
 8011c12:	9001      	str	r0, [sp, #4]
 8011c14:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011c18:	691b      	ldr	r3, [r3, #16]
 8011c1a:	9300      	str	r3, [sp, #0]
 8011c1c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011c20:	f8db 1000 	ldr.w	r1, [fp]
 8011c24:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8011c28:	f003 f892 	bl	8014d50 <uxr_buffer_create_datareader_bin>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011c32:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011c36:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011c3a:	f000 fc07 	bl	801244c <run_xrce_session>
 8011c3e:	b1e8      	cbz	r0, 8011c7c <rmw_create_subscription+0x1a0>
 8011c40:	7a33      	ldrb	r3, [r6, #8]
 8011c42:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011c46:	2b02      	cmp	r3, #2
 8011c48:	bf0c      	ite	eq
 8011c4a:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8011c4e:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8011c52:	9307      	str	r3, [sp, #28]
 8011c54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011c58:	2200      	movs	r2, #0
 8011c5a:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8011c5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c60:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011c64:	9300      	str	r3, [sp, #0]
 8011c66:	6962      	ldr	r2, [r4, #20]
 8011c68:	9b07      	ldr	r3, [sp, #28]
 8011c6a:	6809      	ldr	r1, [r1, #0]
 8011c6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c70:	f003 f9c4 	bl	8014ffc <uxr_buffer_request_data>
 8011c74:	4640      	mov	r0, r8
 8011c76:	b00d      	add	sp, #52	@ 0x34
 8011c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c7c:	69e0      	ldr	r0, [r4, #28]
 8011c7e:	b108      	cbz	r0, 8011c84 <rmw_create_subscription+0x1a8>
 8011c80:	f000 fada 	bl	8012238 <rmw_uxrce_fini_topic_memory>
 8011c84:	4640      	mov	r0, r8
 8011c86:	f000 fa95 	bl	80121b4 <rmw_uxrce_fini_subscription_memory>
 8011c8a:	f04f 0800 	mov.w	r8, #0
 8011c8e:	e7f1      	b.n	8011c74 <rmw_create_subscription+0x198>
 8011c90:	2001d618 	.word	0x2001d618
 8011c94:	08020b58 	.word	0x08020b58
 8011c98:	08020508 	.word	0x08020508

08011c9c <rmw_subscription_get_actual_qos>:
 8011c9c:	b508      	push	{r3, lr}
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	b140      	cbz	r0, 8011cb4 <rmw_subscription_get_actual_qos+0x18>
 8011ca2:	4608      	mov	r0, r1
 8011ca4:	b131      	cbz	r1, 8011cb4 <rmw_subscription_get_actual_qos+0x18>
 8011ca6:	6859      	ldr	r1, [r3, #4]
 8011ca8:	2250      	movs	r2, #80	@ 0x50
 8011caa:	3128      	adds	r1, #40	@ 0x28
 8011cac:	f00c f9b9 	bl	801e022 <memcpy>
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	bd08      	pop	{r3, pc}
 8011cb4:	200b      	movs	r0, #11
 8011cb6:	bd08      	pop	{r3, pc}

08011cb8 <rmw_destroy_subscription>:
 8011cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbc:	b128      	cbz	r0, 8011cca <rmw_destroy_subscription+0x12>
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	6800      	ldr	r0, [r0, #0]
 8011cc2:	460d      	mov	r5, r1
 8011cc4:	f000 fc48 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 8011cc8:	b918      	cbnz	r0, 8011cd2 <rmw_destroy_subscription+0x1a>
 8011cca:	2401      	movs	r4, #1
 8011ccc:	4620      	mov	r0, r4
 8011cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd2:	6863      	ldr	r3, [r4, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d0f8      	beq.n	8011cca <rmw_destroy_subscription+0x12>
 8011cd8:	2d00      	cmp	r5, #0
 8011cda:	d0f6      	beq.n	8011cca <rmw_destroy_subscription+0x12>
 8011cdc:	6828      	ldr	r0, [r5, #0]
 8011cde:	f000 fc3b 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d0f1      	beq.n	8011cca <rmw_destroy_subscription+0x12>
 8011ce6:	686c      	ldr	r4, [r5, #4]
 8011ce8:	2c00      	cmp	r4, #0
 8011cea:	d0ee      	beq.n	8011cca <rmw_destroy_subscription+0x12>
 8011cec:	6a26      	ldr	r6, [r4, #32]
 8011cee:	6962      	ldr	r2, [r4, #20]
 8011cf0:	6930      	ldr	r0, [r6, #16]
 8011cf2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011cf6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011cfa:	6819      	ldr	r1, [r3, #0]
 8011cfc:	f003 f9b6 	bl	801506c <uxr_buffer_cancel_data>
 8011d00:	4602      	mov	r2, r0
 8011d02:	6930      	ldr	r0, [r6, #16]
 8011d04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011d08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011d0c:	f000 fb9e 	bl	801244c <run_xrce_session>
 8011d10:	69e0      	ldr	r0, [r4, #28]
 8011d12:	f009 fc5d 	bl	801b5d0 <destroy_topic>
 8011d16:	6a23      	ldr	r3, [r4, #32]
 8011d18:	6962      	ldr	r2, [r4, #20]
 8011d1a:	6918      	ldr	r0, [r3, #16]
 8011d1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011d20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d24:	6819      	ldr	r1, [r3, #0]
 8011d26:	f002 fea1 	bl	8014a6c <uxr_buffer_delete_entity>
 8011d2a:	6a23      	ldr	r3, [r4, #32]
 8011d2c:	6922      	ldr	r2, [r4, #16]
 8011d2e:	4680      	mov	r8, r0
 8011d30:	6918      	ldr	r0, [r3, #16]
 8011d32:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011d36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d3a:	6819      	ldr	r1, [r3, #0]
 8011d3c:	f002 fe96 	bl	8014a6c <uxr_buffer_delete_entity>
 8011d40:	4607      	mov	r7, r0
 8011d42:	6930      	ldr	r0, [r6, #16]
 8011d44:	4642      	mov	r2, r8
 8011d46:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011d4a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011d4e:	f000 fb7d 	bl	801244c <run_xrce_session>
 8011d52:	4604      	mov	r4, r0
 8011d54:	6930      	ldr	r0, [r6, #16]
 8011d56:	463a      	mov	r2, r7
 8011d58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011d5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011d60:	f000 fb74 	bl	801244c <run_xrce_session>
 8011d64:	4004      	ands	r4, r0
 8011d66:	f084 0401 	eor.w	r4, r4, #1
 8011d6a:	b2e4      	uxtb	r4, r4
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	0064      	lsls	r4, r4, #1
 8011d70:	f000 fa20 	bl	80121b4 <rmw_uxrce_fini_subscription_memory>
 8011d74:	e7aa      	b.n	8011ccc <rmw_destroy_subscription+0x14>
 8011d76:	bf00      	nop

08011d78 <rmw_take_with_info>:
 8011d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	6800      	ldr	r0, [r0, #0]
 8011d7e:	b089      	sub	sp, #36	@ 0x24
 8011d80:	460f      	mov	r7, r1
 8011d82:	4615      	mov	r5, r2
 8011d84:	b128      	cbz	r0, 8011d92 <rmw_take_with_info+0x1a>
 8011d86:	4b23      	ldr	r3, [pc, #140]	@ (8011e14 <rmw_take_with_info+0x9c>)
 8011d88:	6819      	ldr	r1, [r3, #0]
 8011d8a:	f7ee fa49 	bl	8000220 <strcmp>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d13d      	bne.n	8011e0e <rmw_take_with_info+0x96>
 8011d92:	6864      	ldr	r4, [r4, #4]
 8011d94:	b1fd      	cbz	r5, 8011dd6 <rmw_take_with_info+0x5e>
 8011d96:	2300      	movs	r3, #0
 8011d98:	702b      	strb	r3, [r5, #0]
 8011d9a:	f000 fad9 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 faae 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011da4:	4606      	mov	r6, r0
 8011da6:	b1e8      	cbz	r0, 8011de4 <rmw_take_with_info+0x6c>
 8011da8:	6881      	ldr	r1, [r0, #8]
 8011daa:	4668      	mov	r0, sp
 8011dac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011db0:	3110      	adds	r1, #16
 8011db2:	f7fc fc1f 	bl	800e5f4 <ucdr_init_buffer>
 8011db6:	69a3      	ldr	r3, [r4, #24]
 8011db8:	4639      	mov	r1, r7
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	4668      	mov	r0, sp
 8011dbe:	4798      	blx	r3
 8011dc0:	4631      	mov	r1, r6
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	4814      	ldr	r0, [pc, #80]	@ (8011e18 <rmw_take_with_info+0xa0>)
 8011dc6:	f009 fb0b 	bl	801b3e0 <put_memory>
 8011dca:	702c      	strb	r4, [r5, #0]
 8011dcc:	f084 0001 	eor.w	r0, r4, #1
 8011dd0:	b2c0      	uxtb	r0, r0
 8011dd2:	b009      	add	sp, #36	@ 0x24
 8011dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dd6:	f000 fabb 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f000 fa90 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011de0:	4605      	mov	r5, r0
 8011de2:	b910      	cbnz	r0, 8011dea <rmw_take_with_info+0x72>
 8011de4:	2001      	movs	r0, #1
 8011de6:	b009      	add	sp, #36	@ 0x24
 8011de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dea:	68a9      	ldr	r1, [r5, #8]
 8011dec:	4668      	mov	r0, sp
 8011dee:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011df2:	3110      	adds	r1, #16
 8011df4:	f7fc fbfe 	bl	800e5f4 <ucdr_init_buffer>
 8011df8:	69a3      	ldr	r3, [r4, #24]
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	4668      	mov	r0, sp
 8011e00:	4798      	blx	r3
 8011e02:	4629      	mov	r1, r5
 8011e04:	4604      	mov	r4, r0
 8011e06:	4804      	ldr	r0, [pc, #16]	@ (8011e18 <rmw_take_with_info+0xa0>)
 8011e08:	f009 faea 	bl	801b3e0 <put_memory>
 8011e0c:	e7de      	b.n	8011dcc <rmw_take_with_info+0x54>
 8011e0e:	200c      	movs	r0, #12
 8011e10:	b009      	add	sp, #36	@ 0x24
 8011e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e14:	0802132c 	.word	0x0802132c
 8011e18:	2001ce68 	.word	0x2001ce68

08011e1c <rmw_uxrce_transport_init>:
 8011e1c:	b508      	push	{r3, lr}
 8011e1e:	b108      	cbz	r0, 8011e24 <rmw_uxrce_transport_init+0x8>
 8011e20:	f100 0210 	add.w	r2, r0, #16
 8011e24:	b139      	cbz	r1, 8011e36 <rmw_uxrce_transport_init+0x1a>
 8011e26:	6949      	ldr	r1, [r1, #20]
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f003 f881 	bl	8014f30 <uxr_init_custom_transport>
 8011e2e:	f080 0001 	eor.w	r0, r0, #1
 8011e32:	b2c0      	uxtb	r0, r0
 8011e34:	bd08      	pop	{r3, pc}
 8011e36:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <rmw_uxrce_transport_init+0x2c>)
 8011e38:	4610      	mov	r0, r2
 8011e3a:	6859      	ldr	r1, [r3, #4]
 8011e3c:	f003 f878 	bl	8014f30 <uxr_init_custom_transport>
 8011e40:	f080 0001 	eor.w	r0, r0, #1
 8011e44:	b2c0      	uxtb	r0, r0
 8011e46:	bd08      	pop	{r3, pc}
 8011e48:	2001ab68 	.word	0x2001ab68

08011e4c <rmw_uros_epoch_nanos>:
 8011e4c:	4b05      	ldr	r3, [pc, #20]	@ (8011e64 <rmw_uros_epoch_nanos+0x18>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	b123      	cbz	r3, 8011e5c <rmw_uros_epoch_nanos+0x10>
 8011e52:	6898      	ldr	r0, [r3, #8]
 8011e54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e58:	f003 bafc 	b.w	8015454 <uxr_epoch_nanos>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	2100      	movs	r1, #0
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	2001f508 	.word	0x2001f508

08011e68 <rmw_uros_sync_session>:
 8011e68:	b508      	push	{r3, lr}
 8011e6a:	4b07      	ldr	r3, [pc, #28]	@ (8011e88 <rmw_uros_sync_session+0x20>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	b14b      	cbz	r3, 8011e84 <rmw_uros_sync_session+0x1c>
 8011e70:	4601      	mov	r1, r0
 8011e72:	6898      	ldr	r0, [r3, #8]
 8011e74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e78:	f003 ff0a 	bl	8015c90 <uxr_sync_session>
 8011e7c:	f080 0001 	eor.w	r0, r0, #1
 8011e80:	b2c0      	uxtb	r0, r0
 8011e82:	bd08      	pop	{r3, pc}
 8011e84:	2001      	movs	r0, #1
 8011e86:	bd08      	pop	{r3, pc}
 8011e88:	2001f508 	.word	0x2001f508

08011e8c <rmw_uxrce_init_service_memory>:
 8011e8c:	b1e2      	cbz	r2, 8011ec8 <rmw_uxrce_init_service_memory+0x3c>
 8011e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e92:	7b05      	ldrb	r5, [r0, #12]
 8011e94:	4606      	mov	r6, r0
 8011e96:	b9ad      	cbnz	r5, 8011ec4 <rmw_uxrce_init_service_memory+0x38>
 8011e98:	23c8      	movs	r3, #200	@ 0xc8
 8011e9a:	e9c0 5500 	strd	r5, r5, [r0]
 8011e9e:	6083      	str	r3, [r0, #8]
 8011ea0:	f240 1301 	movw	r3, #257	@ 0x101
 8011ea4:	4617      	mov	r7, r2
 8011ea6:	8183      	strh	r3, [r0, #12]
 8011ea8:	460c      	mov	r4, r1
 8011eaa:	46a8      	mov	r8, r5
 8011eac:	4621      	mov	r1, r4
 8011eae:	4630      	mov	r0, r6
 8011eb0:	3501      	adds	r5, #1
 8011eb2:	f009 fa95 	bl	801b3e0 <put_memory>
 8011eb6:	42af      	cmp	r7, r5
 8011eb8:	60a4      	str	r4, [r4, #8]
 8011eba:	f884 800c 	strb.w	r8, [r4, #12]
 8011ebe:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011ec2:	d1f3      	bne.n	8011eac <rmw_uxrce_init_service_memory+0x20>
 8011ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop

08011ecc <rmw_uxrce_init_client_memory>:
 8011ecc:	b1e2      	cbz	r2, 8011f08 <rmw_uxrce_init_client_memory+0x3c>
 8011ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed2:	7b05      	ldrb	r5, [r0, #12]
 8011ed4:	4606      	mov	r6, r0
 8011ed6:	b9ad      	cbnz	r5, 8011f04 <rmw_uxrce_init_client_memory+0x38>
 8011ed8:	23c8      	movs	r3, #200	@ 0xc8
 8011eda:	e9c0 5500 	strd	r5, r5, [r0]
 8011ede:	6083      	str	r3, [r0, #8]
 8011ee0:	f240 1301 	movw	r3, #257	@ 0x101
 8011ee4:	4617      	mov	r7, r2
 8011ee6:	8183      	strh	r3, [r0, #12]
 8011ee8:	460c      	mov	r4, r1
 8011eea:	46a8      	mov	r8, r5
 8011eec:	4621      	mov	r1, r4
 8011eee:	4630      	mov	r0, r6
 8011ef0:	3501      	adds	r5, #1
 8011ef2:	f009 fa75 	bl	801b3e0 <put_memory>
 8011ef6:	42af      	cmp	r7, r5
 8011ef8:	60a4      	str	r4, [r4, #8]
 8011efa:	f884 800c 	strb.w	r8, [r4, #12]
 8011efe:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011f02:	d1f3      	bne.n	8011eec <rmw_uxrce_init_client_memory+0x20>
 8011f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop

08011f0c <rmw_uxrce_init_publisher_memory>:
 8011f0c:	b1e2      	cbz	r2, 8011f48 <rmw_uxrce_init_publisher_memory+0x3c>
 8011f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f12:	7b05      	ldrb	r5, [r0, #12]
 8011f14:	4606      	mov	r6, r0
 8011f16:	b9ad      	cbnz	r5, 8011f44 <rmw_uxrce_init_publisher_memory+0x38>
 8011f18:	23d8      	movs	r3, #216	@ 0xd8
 8011f1a:	e9c0 5500 	strd	r5, r5, [r0]
 8011f1e:	6083      	str	r3, [r0, #8]
 8011f20:	f240 1301 	movw	r3, #257	@ 0x101
 8011f24:	4617      	mov	r7, r2
 8011f26:	8183      	strh	r3, [r0, #12]
 8011f28:	460c      	mov	r4, r1
 8011f2a:	46a8      	mov	r8, r5
 8011f2c:	4621      	mov	r1, r4
 8011f2e:	4630      	mov	r0, r6
 8011f30:	3501      	adds	r5, #1
 8011f32:	f009 fa55 	bl	801b3e0 <put_memory>
 8011f36:	42af      	cmp	r7, r5
 8011f38:	60a4      	str	r4, [r4, #8]
 8011f3a:	f884 800c 	strb.w	r8, [r4, #12]
 8011f3e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011f42:	d1f3      	bne.n	8011f2c <rmw_uxrce_init_publisher_memory+0x20>
 8011f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop

08011f4c <rmw_uxrce_init_subscription_memory>:
 8011f4c:	b1e2      	cbz	r2, 8011f88 <rmw_uxrce_init_subscription_memory+0x3c>
 8011f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f52:	7b05      	ldrb	r5, [r0, #12]
 8011f54:	4606      	mov	r6, r0
 8011f56:	b9ad      	cbnz	r5, 8011f84 <rmw_uxrce_init_subscription_memory+0x38>
 8011f58:	23d8      	movs	r3, #216	@ 0xd8
 8011f5a:	e9c0 5500 	strd	r5, r5, [r0]
 8011f5e:	6083      	str	r3, [r0, #8]
 8011f60:	f240 1301 	movw	r3, #257	@ 0x101
 8011f64:	4617      	mov	r7, r2
 8011f66:	8183      	strh	r3, [r0, #12]
 8011f68:	460c      	mov	r4, r1
 8011f6a:	46a8      	mov	r8, r5
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4630      	mov	r0, r6
 8011f70:	3501      	adds	r5, #1
 8011f72:	f009 fa35 	bl	801b3e0 <put_memory>
 8011f76:	42af      	cmp	r7, r5
 8011f78:	60a4      	str	r4, [r4, #8]
 8011f7a:	f884 800c 	strb.w	r8, [r4, #12]
 8011f7e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011f82:	d1f3      	bne.n	8011f6c <rmw_uxrce_init_subscription_memory+0x20>
 8011f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop

08011f8c <rmw_uxrce_init_node_memory>:
 8011f8c:	b1e2      	cbz	r2, 8011fc8 <rmw_uxrce_init_node_memory+0x3c>
 8011f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f92:	7b05      	ldrb	r5, [r0, #12]
 8011f94:	4606      	mov	r6, r0
 8011f96:	b9ad      	cbnz	r5, 8011fc4 <rmw_uxrce_init_node_memory+0x38>
 8011f98:	23a4      	movs	r3, #164	@ 0xa4
 8011f9a:	e9c0 5500 	strd	r5, r5, [r0]
 8011f9e:	6083      	str	r3, [r0, #8]
 8011fa0:	f240 1301 	movw	r3, #257	@ 0x101
 8011fa4:	4617      	mov	r7, r2
 8011fa6:	8183      	strh	r3, [r0, #12]
 8011fa8:	460c      	mov	r4, r1
 8011faa:	46a8      	mov	r8, r5
 8011fac:	4621      	mov	r1, r4
 8011fae:	4630      	mov	r0, r6
 8011fb0:	3501      	adds	r5, #1
 8011fb2:	f009 fa15 	bl	801b3e0 <put_memory>
 8011fb6:	42af      	cmp	r7, r5
 8011fb8:	60a4      	str	r4, [r4, #8]
 8011fba:	f884 800c 	strb.w	r8, [r4, #12]
 8011fbe:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011fc2:	d1f3      	bne.n	8011fac <rmw_uxrce_init_node_memory+0x20>
 8011fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop

08011fcc <rmw_uxrce_init_session_memory>:
 8011fcc:	b1ea      	cbz	r2, 801200a <rmw_uxrce_init_session_memory+0x3e>
 8011fce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fd2:	7b05      	ldrb	r5, [r0, #12]
 8011fd4:	4606      	mov	r6, r0
 8011fd6:	b9b5      	cbnz	r5, 8012006 <rmw_uxrce_init_session_memory+0x3a>
 8011fd8:	e9c0 5500 	strd	r5, r5, [r0]
 8011fdc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011fe0:	f240 1301 	movw	r3, #257	@ 0x101
 8011fe4:	4617      	mov	r7, r2
 8011fe6:	f8c0 8008 	str.w	r8, [r0, #8]
 8011fea:	460c      	mov	r4, r1
 8011fec:	8183      	strh	r3, [r0, #12]
 8011fee:	46a9      	mov	r9, r5
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	4630      	mov	r0, r6
 8011ff4:	3501      	adds	r5, #1
 8011ff6:	f009 f9f3 	bl	801b3e0 <put_memory>
 8011ffa:	42af      	cmp	r7, r5
 8011ffc:	60a4      	str	r4, [r4, #8]
 8011ffe:	f884 900c 	strb.w	r9, [r4, #12]
 8012002:	4444      	add	r4, r8
 8012004:	d1f4      	bne.n	8011ff0 <rmw_uxrce_init_session_memory+0x24>
 8012006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801200a:	4770      	bx	lr

0801200c <rmw_uxrce_init_topic_memory>:
 801200c:	b1e2      	cbz	r2, 8012048 <rmw_uxrce_init_topic_memory+0x3c>
 801200e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012012:	7b05      	ldrb	r5, [r0, #12]
 8012014:	4606      	mov	r6, r0
 8012016:	b9ad      	cbnz	r5, 8012044 <rmw_uxrce_init_topic_memory+0x38>
 8012018:	231c      	movs	r3, #28
 801201a:	e9c0 5500 	strd	r5, r5, [r0]
 801201e:	6083      	str	r3, [r0, #8]
 8012020:	f240 1301 	movw	r3, #257	@ 0x101
 8012024:	4617      	mov	r7, r2
 8012026:	8183      	strh	r3, [r0, #12]
 8012028:	460c      	mov	r4, r1
 801202a:	46a8      	mov	r8, r5
 801202c:	4621      	mov	r1, r4
 801202e:	4630      	mov	r0, r6
 8012030:	3501      	adds	r5, #1
 8012032:	f009 f9d5 	bl	801b3e0 <put_memory>
 8012036:	42af      	cmp	r7, r5
 8012038:	60a4      	str	r4, [r4, #8]
 801203a:	f884 800c 	strb.w	r8, [r4, #12]
 801203e:	f104 041c 	add.w	r4, r4, #28
 8012042:	d1f3      	bne.n	801202c <rmw_uxrce_init_topic_memory+0x20>
 8012044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop

0801204c <rmw_uxrce_init_static_input_buffer_memory>:
 801204c:	b1ea      	cbz	r2, 801208a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801204e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012052:	7b05      	ldrb	r5, [r0, #12]
 8012054:	4606      	mov	r6, r0
 8012056:	b9b5      	cbnz	r5, 8012086 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8012058:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 801205c:	e9c0 5500 	strd	r5, r5, [r0]
 8012060:	6083      	str	r3, [r0, #8]
 8012062:	f240 1301 	movw	r3, #257	@ 0x101
 8012066:	4617      	mov	r7, r2
 8012068:	8183      	strh	r3, [r0, #12]
 801206a:	460c      	mov	r4, r1
 801206c:	46a8      	mov	r8, r5
 801206e:	4621      	mov	r1, r4
 8012070:	4630      	mov	r0, r6
 8012072:	3501      	adds	r5, #1
 8012074:	f009 f9b4 	bl	801b3e0 <put_memory>
 8012078:	42af      	cmp	r7, r5
 801207a:	60a4      	str	r4, [r4, #8]
 801207c:	f884 800c 	strb.w	r8, [r4, #12]
 8012080:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8012084:	d1f3      	bne.n	801206e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8012086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208a:	4770      	bx	lr

0801208c <rmw_uxrce_init_init_options_impl_memory>:
 801208c:	b1e2      	cbz	r2, 80120c8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801208e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012092:	7b05      	ldrb	r5, [r0, #12]
 8012094:	4606      	mov	r6, r0
 8012096:	b9ad      	cbnz	r5, 80120c4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8012098:	232c      	movs	r3, #44	@ 0x2c
 801209a:	e9c0 5500 	strd	r5, r5, [r0]
 801209e:	6083      	str	r3, [r0, #8]
 80120a0:	f240 1301 	movw	r3, #257	@ 0x101
 80120a4:	4617      	mov	r7, r2
 80120a6:	8183      	strh	r3, [r0, #12]
 80120a8:	460c      	mov	r4, r1
 80120aa:	46a8      	mov	r8, r5
 80120ac:	4621      	mov	r1, r4
 80120ae:	4630      	mov	r0, r6
 80120b0:	3501      	adds	r5, #1
 80120b2:	f009 f995 	bl	801b3e0 <put_memory>
 80120b6:	42af      	cmp	r7, r5
 80120b8:	60a4      	str	r4, [r4, #8]
 80120ba:	f884 800c 	strb.w	r8, [r4, #12]
 80120be:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80120c2:	d1f3      	bne.n	80120ac <rmw_uxrce_init_init_options_impl_memory+0x20>
 80120c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop

080120cc <rmw_uxrce_init_wait_set_memory>:
 80120cc:	b1e2      	cbz	r2, 8012108 <rmw_uxrce_init_wait_set_memory+0x3c>
 80120ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d2:	7b05      	ldrb	r5, [r0, #12]
 80120d4:	4606      	mov	r6, r0
 80120d6:	b9ad      	cbnz	r5, 8012104 <rmw_uxrce_init_wait_set_memory+0x38>
 80120d8:	231c      	movs	r3, #28
 80120da:	e9c0 5500 	strd	r5, r5, [r0]
 80120de:	6083      	str	r3, [r0, #8]
 80120e0:	f240 1301 	movw	r3, #257	@ 0x101
 80120e4:	4617      	mov	r7, r2
 80120e6:	8183      	strh	r3, [r0, #12]
 80120e8:	460c      	mov	r4, r1
 80120ea:	46a8      	mov	r8, r5
 80120ec:	4621      	mov	r1, r4
 80120ee:	4630      	mov	r0, r6
 80120f0:	3501      	adds	r5, #1
 80120f2:	f009 f975 	bl	801b3e0 <put_memory>
 80120f6:	42af      	cmp	r7, r5
 80120f8:	60a4      	str	r4, [r4, #8]
 80120fa:	f884 800c 	strb.w	r8, [r4, #12]
 80120fe:	f104 041c 	add.w	r4, r4, #28
 8012102:	d1f3      	bne.n	80120ec <rmw_uxrce_init_wait_set_memory+0x20>
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop

0801210c <rmw_uxrce_init_guard_condition_memory>:
 801210c:	b1e2      	cbz	r2, 8012148 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801210e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012112:	7b05      	ldrb	r5, [r0, #12]
 8012114:	4606      	mov	r6, r0
 8012116:	b9ad      	cbnz	r5, 8012144 <rmw_uxrce_init_guard_condition_memory+0x38>
 8012118:	2320      	movs	r3, #32
 801211a:	e9c0 5500 	strd	r5, r5, [r0]
 801211e:	6083      	str	r3, [r0, #8]
 8012120:	f240 1301 	movw	r3, #257	@ 0x101
 8012124:	4617      	mov	r7, r2
 8012126:	8183      	strh	r3, [r0, #12]
 8012128:	460c      	mov	r4, r1
 801212a:	46a8      	mov	r8, r5
 801212c:	4621      	mov	r1, r4
 801212e:	4630      	mov	r0, r6
 8012130:	3501      	adds	r5, #1
 8012132:	f009 f955 	bl	801b3e0 <put_memory>
 8012136:	42af      	cmp	r7, r5
 8012138:	60a4      	str	r4, [r4, #8]
 801213a:	f884 800c 	strb.w	r8, [r4, #12]
 801213e:	f104 0420 	add.w	r4, r4, #32
 8012142:	d1f3      	bne.n	801212c <rmw_uxrce_init_guard_condition_memory+0x20>
 8012144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop

0801214c <rmw_uxrce_fini_session_memory>:
 801214c:	4601      	mov	r1, r0
 801214e:	4801      	ldr	r0, [pc, #4]	@ (8012154 <rmw_uxrce_fini_session_memory+0x8>)
 8012150:	f009 b946 	b.w	801b3e0 <put_memory>
 8012154:	2001f508 	.word	0x2001f508

08012158 <rmw_uxrce_fini_node_memory>:
 8012158:	b538      	push	{r3, r4, r5, lr}
 801215a:	4604      	mov	r4, r0
 801215c:	6800      	ldr	r0, [r0, #0]
 801215e:	b128      	cbz	r0, 801216c <rmw_uxrce_fini_node_memory+0x14>
 8012160:	4b07      	ldr	r3, [pc, #28]	@ (8012180 <rmw_uxrce_fini_node_memory+0x28>)
 8012162:	6819      	ldr	r1, [r3, #0]
 8012164:	f7ee f85c 	bl	8000220 <strcmp>
 8012168:	b940      	cbnz	r0, 801217c <rmw_uxrce_fini_node_memory+0x24>
 801216a:	6020      	str	r0, [r4, #0]
 801216c:	6861      	ldr	r1, [r4, #4]
 801216e:	b129      	cbz	r1, 801217c <rmw_uxrce_fini_node_memory+0x24>
 8012170:	2500      	movs	r5, #0
 8012172:	4804      	ldr	r0, [pc, #16]	@ (8012184 <rmw_uxrce_fini_node_memory+0x2c>)
 8012174:	610d      	str	r5, [r1, #16]
 8012176:	f009 f933 	bl	801b3e0 <put_memory>
 801217a:	6065      	str	r5, [r4, #4]
 801217c:	bd38      	pop	{r3, r4, r5, pc}
 801217e:	bf00      	nop
 8012180:	0802132c 	.word	0x0802132c
 8012184:	2001df4c 	.word	0x2001df4c

08012188 <rmw_uxrce_fini_publisher_memory>:
 8012188:	b510      	push	{r4, lr}
 801218a:	4604      	mov	r4, r0
 801218c:	6800      	ldr	r0, [r0, #0]
 801218e:	b128      	cbz	r0, 801219c <rmw_uxrce_fini_publisher_memory+0x14>
 8012190:	4b06      	ldr	r3, [pc, #24]	@ (80121ac <rmw_uxrce_fini_publisher_memory+0x24>)
 8012192:	6819      	ldr	r1, [r3, #0]
 8012194:	f7ee f844 	bl	8000220 <strcmp>
 8012198:	b938      	cbnz	r0, 80121aa <rmw_uxrce_fini_publisher_memory+0x22>
 801219a:	6020      	str	r0, [r4, #0]
 801219c:	6861      	ldr	r1, [r4, #4]
 801219e:	b121      	cbz	r1, 80121aa <rmw_uxrce_fini_publisher_memory+0x22>
 80121a0:	4803      	ldr	r0, [pc, #12]	@ (80121b0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80121a2:	f009 f91d 	bl	801b3e0 <put_memory>
 80121a6:	2300      	movs	r3, #0
 80121a8:	6063      	str	r3, [r4, #4]
 80121aa:	bd10      	pop	{r4, pc}
 80121ac:	0802132c 	.word	0x0802132c
 80121b0:	2001de98 	.word	0x2001de98

080121b4 <rmw_uxrce_fini_subscription_memory>:
 80121b4:	b510      	push	{r4, lr}
 80121b6:	4604      	mov	r4, r0
 80121b8:	6800      	ldr	r0, [r0, #0]
 80121ba:	b128      	cbz	r0, 80121c8 <rmw_uxrce_fini_subscription_memory+0x14>
 80121bc:	4b06      	ldr	r3, [pc, #24]	@ (80121d8 <rmw_uxrce_fini_subscription_memory+0x24>)
 80121be:	6819      	ldr	r1, [r3, #0]
 80121c0:	f7ee f82e 	bl	8000220 <strcmp>
 80121c4:	b938      	cbnz	r0, 80121d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80121c6:	6020      	str	r0, [r4, #0]
 80121c8:	6861      	ldr	r1, [r4, #4]
 80121ca:	b121      	cbz	r1, 80121d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80121cc:	4803      	ldr	r0, [pc, #12]	@ (80121dc <rmw_uxrce_fini_subscription_memory+0x28>)
 80121ce:	f009 f907 	bl	801b3e0 <put_memory>
 80121d2:	2300      	movs	r3, #0
 80121d4:	6063      	str	r3, [r4, #4]
 80121d6:	bd10      	pop	{r4, pc}
 80121d8:	0802132c 	.word	0x0802132c
 80121dc:	2001d618 	.word	0x2001d618

080121e0 <rmw_uxrce_fini_service_memory>:
 80121e0:	b510      	push	{r4, lr}
 80121e2:	4604      	mov	r4, r0
 80121e4:	6800      	ldr	r0, [r0, #0]
 80121e6:	b128      	cbz	r0, 80121f4 <rmw_uxrce_fini_service_memory+0x14>
 80121e8:	4b06      	ldr	r3, [pc, #24]	@ (8012204 <rmw_uxrce_fini_service_memory+0x24>)
 80121ea:	6819      	ldr	r1, [r3, #0]
 80121ec:	f7ee f818 	bl	8000220 <strcmp>
 80121f0:	b938      	cbnz	r0, 8012202 <rmw_uxrce_fini_service_memory+0x22>
 80121f2:	6020      	str	r0, [r4, #0]
 80121f4:	6861      	ldr	r1, [r4, #4]
 80121f6:	b121      	cbz	r1, 8012202 <rmw_uxrce_fini_service_memory+0x22>
 80121f8:	4803      	ldr	r0, [pc, #12]	@ (8012208 <rmw_uxrce_fini_service_memory+0x28>)
 80121fa:	f009 f8f1 	bl	801b3e0 <put_memory>
 80121fe:	2300      	movs	r3, #0
 8012200:	6063      	str	r3, [r4, #4]
 8012202:	bd10      	pop	{r4, pc}
 8012204:	0802132c 	.word	0x0802132c
 8012208:	2001d1d0 	.word	0x2001d1d0

0801220c <rmw_uxrce_fini_client_memory>:
 801220c:	b510      	push	{r4, lr}
 801220e:	4604      	mov	r4, r0
 8012210:	6800      	ldr	r0, [r0, #0]
 8012212:	b128      	cbz	r0, 8012220 <rmw_uxrce_fini_client_memory+0x14>
 8012214:	4b06      	ldr	r3, [pc, #24]	@ (8012230 <rmw_uxrce_fini_client_memory+0x24>)
 8012216:	6819      	ldr	r1, [r3, #0]
 8012218:	f7ee f802 	bl	8000220 <strcmp>
 801221c:	b938      	cbnz	r0, 801222e <rmw_uxrce_fini_client_memory+0x22>
 801221e:	6020      	str	r0, [r4, #0]
 8012220:	6861      	ldr	r1, [r4, #4]
 8012222:	b121      	cbz	r1, 801222e <rmw_uxrce_fini_client_memory+0x22>
 8012224:	4803      	ldr	r0, [pc, #12]	@ (8012234 <rmw_uxrce_fini_client_memory+0x28>)
 8012226:	f009 f8db 	bl	801b3e0 <put_memory>
 801222a:	2300      	movs	r3, #0
 801222c:	6063      	str	r3, [r4, #4]
 801222e:	bd10      	pop	{r4, pc}
 8012230:	0802132c 	.word	0x0802132c
 8012234:	2001d0f8 	.word	0x2001d0f8

08012238 <rmw_uxrce_fini_topic_memory>:
 8012238:	b510      	push	{r4, lr}
 801223a:	4604      	mov	r4, r0
 801223c:	4621      	mov	r1, r4
 801223e:	4803      	ldr	r0, [pc, #12]	@ (801224c <rmw_uxrce_fini_topic_memory+0x14>)
 8012240:	f009 f8ce 	bl	801b3e0 <put_memory>
 8012244:	2300      	movs	r3, #0
 8012246:	61a3      	str	r3, [r4, #24]
 8012248:	bd10      	pop	{r4, pc}
 801224a:	bf00      	nop
 801224c:	2001d01c 	.word	0x2001d01c

08012250 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8012250:	b082      	sub	sp, #8
 8012252:	b530      	push	{r4, r5, lr}
 8012254:	4929      	ldr	r1, [pc, #164]	@ (80122fc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 8012256:	ac03      	add	r4, sp, #12
 8012258:	e884 000c 	stmia.w	r4, {r2, r3}
 801225c:	680c      	ldr	r4, [r1, #0]
 801225e:	461d      	mov	r5, r3
 8012260:	4602      	mov	r2, r0
 8012262:	2c00      	cmp	r4, #0
 8012264:	d043      	beq.n	80122ee <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 8012266:	4620      	mov	r0, r4
 8012268:	2100      	movs	r1, #0
 801226a:	6883      	ldr	r3, [r0, #8]
 801226c:	6840      	ldr	r0, [r0, #4]
 801226e:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 8012272:	429a      	cmp	r2, r3
 8012274:	bf08      	it	eq
 8012276:	3101      	addeq	r1, #1
 8012278:	2800      	cmp	r0, #0
 801227a:	d1f6      	bne.n	801226a <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 801227c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012280:	2b02      	cmp	r3, #2
 8012282:	d027      	beq.n	80122d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 8012284:	d906      	bls.n	8012294 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8012286:	2b03      	cmp	r3, #3
 8012288:	d004      	beq.n	8012294 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801228a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801228e:	2000      	movs	r0, #0
 8012290:	b002      	add	sp, #8
 8012292:	4770      	bx	lr
 8012294:	b1fd      	cbz	r5, 80122d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012296:	428d      	cmp	r5, r1
 8012298:	d81d      	bhi.n	80122d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801229a:	2c00      	cmp	r4, #0
 801229c:	d0f5      	beq.n	801228a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801229e:	2000      	movs	r0, #0
 80122a0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80122a4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80122a8:	e001      	b.n	80122ae <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80122aa:	6864      	ldr	r4, [r4, #4]
 80122ac:	b1dc      	cbz	r4, 80122e6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80122ae:	68a3      	ldr	r3, [r4, #8]
 80122b0:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80122b4:	428a      	cmp	r2, r1
 80122b6:	d1f8      	bne.n	80122aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80122b8:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80122bc:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80122c0:	4561      	cmp	r1, ip
 80122c2:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80122c6:	eb73 0e05 	sbcs.w	lr, r3, r5
 80122ca:	daee      	bge.n	80122aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80122cc:	468c      	mov	ip, r1
 80122ce:	461d      	mov	r5, r3
 80122d0:	4620      	mov	r0, r4
 80122d2:	e7ea      	b.n	80122aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80122d4:	b92d      	cbnz	r5, 80122e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 80122d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122da:	4808      	ldr	r0, [pc, #32]	@ (80122fc <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 80122dc:	b002      	add	sp, #8
 80122de:	f009 b86f 	b.w	801b3c0 <get_memory>
 80122e2:	428d      	cmp	r5, r1
 80122e4:	d8f7      	bhi.n	80122d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80122e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122ea:	b002      	add	sp, #8
 80122ec:	4770      	bx	lr
 80122ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d0ef      	beq.n	80122d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80122f6:	d9ee      	bls.n	80122d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80122f8:	4621      	mov	r1, r4
 80122fa:	e7c4      	b.n	8012286 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 80122fc:	2001ce68 	.word	0x2001ce68

08012300 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8012300:	4b11      	ldr	r3, [pc, #68]	@ (8012348 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	b1eb      	cbz	r3, 8012342 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8012306:	b530      	push	{r4, r5, lr}
 8012308:	4684      	mov	ip, r0
 801230a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801230e:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 8012312:	2000      	movs	r0, #0
 8012314:	e001      	b.n	801231a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	b193      	cbz	r3, 8012340 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 801231a:	689a      	ldr	r2, [r3, #8]
 801231c:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8012320:	458c      	cmp	ip, r1
 8012322:	d1f8      	bne.n	8012316 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8012324:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8012328:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 801232c:	42a1      	cmp	r1, r4
 801232e:	eb72 050e 	sbcs.w	r5, r2, lr
 8012332:	daf0      	bge.n	8012316 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8012334:	4618      	mov	r0, r3
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	460c      	mov	r4, r1
 801233a:	4696      	mov	lr, r2
 801233c:	2b00      	cmp	r3, #0
 801233e:	d1ec      	bne.n	801231a <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8012340:	bd30      	pop	{r4, r5, pc}
 8012342:	4618      	mov	r0, r3
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	2001ce68 	.word	0x2001ce68
 801234c:	00000000 	.word	0x00000000

08012350 <rmw_uxrce_clean_expired_static_input_buffer>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	4b3c      	ldr	r3, [pc, #240]	@ (8012448 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012356:	ed2d 8b06 	vpush	{d8-d10}
 801235a:	f8d3 8000 	ldr.w	r8, [r3]
 801235e:	b08d      	sub	sp, #52	@ 0x34
 8012360:	f7ff fd74 	bl	8011e4c <rmw_uros_epoch_nanos>
 8012364:	f1b8 0f00 	cmp.w	r8, #0
 8012368:	d05c      	beq.n	8012424 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 801236a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801236e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012372:	2b04      	cmp	r3, #4
 8012374:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 8012430 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8012378:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 8012438 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 801237c:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 8012440 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8012380:	4683      	mov	fp, r0
 8012382:	ac04      	add	r4, sp, #16
 8012384:	468a      	mov	sl, r1
 8012386:	d03f      	beq.n	8012408 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8012388:	2b05      	cmp	r3, #5
 801238a:	d044      	beq.n	8012416 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 801238c:	2b03      	cmp	r3, #3
 801238e:	d03b      	beq.n	8012408 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 8012390:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012394:	ed8d ab06 	vstr	d10, [sp, #24]
 8012398:	ed8d 8b08 	vstr	d8, [sp, #32]
 801239c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80123a0:	ab08      	add	r3, sp, #32
 80123a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80123a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80123ac:	f008 fe22 	bl	801aff4 <rmw_time_equal>
 80123b0:	b118      	cbz	r0, 80123ba <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 80123b2:	ed8d 9b04 	vstr	d9, [sp, #16]
 80123b6:	ed8d 8b06 	vstr	d8, [sp, #24]
 80123ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80123be:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 80123c2:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 80123c6:	f8d8 9004 	ldr.w	r9, [r8, #4]
 80123ca:	f008 fe67 	bl	801b09c <rmw_time_total_nsec>
 80123ce:	183f      	adds	r7, r7, r0
 80123d0:	eb46 0601 	adc.w	r6, r6, r1
 80123d4:	455f      	cmp	r7, fp
 80123d6:	eb76 060a 	sbcs.w	r6, r6, sl
 80123da:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80123de:	db05      	blt.n	80123ec <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 80123e0:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80123e4:	4593      	cmp	fp, r2
 80123e6:	eb7a 0303 	sbcs.w	r3, sl, r3
 80123ea:	da03      	bge.n	80123f4 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 80123ec:	4816      	ldr	r0, [pc, #88]	@ (8012448 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80123ee:	4641      	mov	r1, r8
 80123f0:	f008 fff6 	bl	801b3e0 <put_memory>
 80123f4:	f1b9 0f00 	cmp.w	r9, #0
 80123f8:	d014      	beq.n	8012424 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 80123fa:	46c8      	mov	r8, r9
 80123fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012400:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012404:	2b04      	cmp	r3, #4
 8012406:	d1bf      	bne.n	8012388 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 8012408:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801240c:	3340      	adds	r3, #64	@ 0x40
 801240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012414:	e7c0      	b.n	8012398 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 8012416:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801241a:	3348      	adds	r3, #72	@ 0x48
 801241c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801241e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012422:	e7b9      	b.n	8012398 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 8012424:	b00d      	add	sp, #52	@ 0x34
 8012426:	ecbd 8b06 	vpop	{d8-d10}
 801242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242e:	bf00      	nop
	...
 8012438:	00000001 	.word	0x00000001
 801243c:	00000000 	.word	0x00000000
 8012440:	0000001e 	.word	0x0000001e
 8012444:	00000000 	.word	0x00000000
 8012448:	2001ce68 	.word	0x2001ce68

0801244c <run_xrce_session>:
 801244c:	b500      	push	{lr}
 801244e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8012452:	b087      	sub	sp, #28
 8012454:	f1bc 0f01 	cmp.w	ip, #1
 8012458:	f8ad 200e 	strh.w	r2, [sp, #14]
 801245c:	d00f      	beq.n	801247e <run_xrce_session+0x32>
 801245e:	4619      	mov	r1, r3
 8012460:	2301      	movs	r3, #1
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	f10d 020e 	add.w	r2, sp, #14
 8012468:	f10d 0317 	add.w	r3, sp, #23
 801246c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012470:	f003 fbb8 	bl	8015be4 <uxr_run_session_until_all_status>
 8012474:	b100      	cbz	r0, 8012478 <run_xrce_session+0x2c>
 8012476:	2001      	movs	r0, #1
 8012478:	b007      	add	sp, #28
 801247a:	f85d fb04 	ldr.w	pc, [sp], #4
 801247e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012482:	f002 fff1 	bl	8015468 <uxr_flash_output_streams>
 8012486:	2001      	movs	r0, #1
 8012488:	e7f6      	b.n	8012478 <run_xrce_session+0x2c>
 801248a:	bf00      	nop

0801248c <convert_qos_profile>:
 801248c:	780a      	ldrb	r2, [r1, #0]
 801248e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012492:	f1a2 0202 	sub.w	r2, r2, #2
 8012496:	fab2 f282 	clz	r2, r2
 801249a:	0952      	lsrs	r2, r2, #5
 801249c:	7082      	strb	r2, [r0, #2]
 801249e:	7a4a      	ldrb	r2, [r1, #9]
 80124a0:	8889      	ldrh	r1, [r1, #4]
 80124a2:	8081      	strh	r1, [r0, #4]
 80124a4:	f1a2 0202 	sub.w	r2, r2, #2
 80124a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80124ac:	fab2 f282 	clz	r2, r2
 80124b0:	fabc fc8c 	clz	ip, ip
 80124b4:	0952      	lsrs	r2, r2, #5
 80124b6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80124ba:	0052      	lsls	r2, r2, #1
 80124bc:	f880 c001 	strb.w	ip, [r0, #1]
 80124c0:	7002      	strb	r2, [r0, #0]
 80124c2:	4770      	bx	lr

080124c4 <generate_type_name>:
 80124c4:	b530      	push	{r4, r5, lr}
 80124c6:	2300      	movs	r3, #0
 80124c8:	700b      	strb	r3, [r1, #0]
 80124ca:	6803      	ldr	r3, [r0, #0]
 80124cc:	b087      	sub	sp, #28
 80124ce:	4614      	mov	r4, r2
 80124d0:	b1d3      	cbz	r3, 8012508 <generate_type_name+0x44>
 80124d2:	4a0f      	ldr	r2, [pc, #60]	@ (8012510 <generate_type_name+0x4c>)
 80124d4:	4615      	mov	r5, r2
 80124d6:	9203      	str	r2, [sp, #12]
 80124d8:	9500      	str	r5, [sp, #0]
 80124da:	6842      	ldr	r2, [r0, #4]
 80124dc:	480d      	ldr	r0, [pc, #52]	@ (8012514 <generate_type_name+0x50>)
 80124de:	9001      	str	r0, [sp, #4]
 80124e0:	4608      	mov	r0, r1
 80124e2:	490d      	ldr	r1, [pc, #52]	@ (8012518 <generate_type_name+0x54>)
 80124e4:	9204      	str	r2, [sp, #16]
 80124e6:	9105      	str	r1, [sp, #20]
 80124e8:	9102      	str	r1, [sp, #8]
 80124ea:	4a0c      	ldr	r2, [pc, #48]	@ (801251c <generate_type_name+0x58>)
 80124ec:	4621      	mov	r1, r4
 80124ee:	f00b faf9 	bl	801dae4 <sniprintf>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	db05      	blt.n	8012502 <generate_type_name+0x3e>
 80124f6:	4284      	cmp	r4, r0
 80124f8:	bfd4      	ite	le
 80124fa:	2000      	movle	r0, #0
 80124fc:	2001      	movgt	r0, #1
 80124fe:	b007      	add	sp, #28
 8012500:	bd30      	pop	{r4, r5, pc}
 8012502:	2000      	movs	r0, #0
 8012504:	b007      	add	sp, #28
 8012506:	bd30      	pop	{r4, r5, pc}
 8012508:	4b05      	ldr	r3, [pc, #20]	@ (8012520 <generate_type_name+0x5c>)
 801250a:	4a01      	ldr	r2, [pc, #4]	@ (8012510 <generate_type_name+0x4c>)
 801250c:	461d      	mov	r5, r3
 801250e:	e7e2      	b.n	80124d6 <generate_type_name+0x12>
 8012510:	08020b48 	.word	0x08020b48
 8012514:	08020b60 	.word	0x08020b60
 8012518:	08020b5c 	.word	0x08020b5c
 801251c:	08020b4c 	.word	0x08020b4c
 8012520:	0802163c 	.word	0x0802163c

08012524 <generate_topic_name>:
 8012524:	b510      	push	{r4, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	4614      	mov	r4, r2
 801252a:	9000      	str	r0, [sp, #0]
 801252c:	4b08      	ldr	r3, [pc, #32]	@ (8012550 <generate_topic_name+0x2c>)
 801252e:	4a09      	ldr	r2, [pc, #36]	@ (8012554 <generate_topic_name+0x30>)
 8012530:	4608      	mov	r0, r1
 8012532:	4621      	mov	r1, r4
 8012534:	f00b fad6 	bl	801dae4 <sniprintf>
 8012538:	2800      	cmp	r0, #0
 801253a:	db05      	blt.n	8012548 <generate_topic_name+0x24>
 801253c:	4284      	cmp	r4, r0
 801253e:	bfd4      	ite	le
 8012540:	2000      	movle	r0, #0
 8012542:	2001      	movgt	r0, #1
 8012544:	b002      	add	sp, #8
 8012546:	bd10      	pop	{r4, pc}
 8012548:	2000      	movs	r0, #0
 801254a:	b002      	add	sp, #8
 801254c:	bd10      	pop	{r4, pc}
 801254e:	bf00      	nop
 8012550:	08020b64 	.word	0x08020b64
 8012554:	080205c4 	.word	0x080205c4

08012558 <is_uxrce_rmw_identifier_valid>:
 8012558:	b510      	push	{r4, lr}
 801255a:	4604      	mov	r4, r0
 801255c:	b140      	cbz	r0, 8012570 <is_uxrce_rmw_identifier_valid+0x18>
 801255e:	f008 ffb5 	bl	801b4cc <rmw_get_implementation_identifier>
 8012562:	4601      	mov	r1, r0
 8012564:	4620      	mov	r0, r4
 8012566:	f7ed fe5b 	bl	8000220 <strcmp>
 801256a:	fab0 f080 	clz	r0, r0
 801256e:	0940      	lsrs	r0, r0, #5
 8012570:	bd10      	pop	{r4, pc}
 8012572:	bf00      	nop

08012574 <get_message_typesupport_handle>:
 8012574:	6883      	ldr	r3, [r0, #8]
 8012576:	4718      	bx	r3

08012578 <get_message_typesupport_handle_function>:
 8012578:	b510      	push	{r4, lr}
 801257a:	4604      	mov	r4, r0
 801257c:	6800      	ldr	r0, [r0, #0]
 801257e:	f7ed fe4f 	bl	8000220 <strcmp>
 8012582:	2800      	cmp	r0, #0
 8012584:	bf0c      	ite	eq
 8012586:	4620      	moveq	r0, r4
 8012588:	2000      	movne	r0, #0
 801258a:	bd10      	pop	{r4, pc}

0801258c <rosidl_runtime_c__double__Sequence__init>:
 801258c:	b1b0      	cbz	r0, 80125bc <rosidl_runtime_c__double__Sequence__init+0x30>
 801258e:	b530      	push	{r4, r5, lr}
 8012590:	460d      	mov	r5, r1
 8012592:	b087      	sub	sp, #28
 8012594:	4604      	mov	r4, r0
 8012596:	b931      	cbnz	r1, 80125a6 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8012598:	4608      	mov	r0, r1
 801259a:	e9c4 0500 	strd	r0, r5, [r4]
 801259e:	60a5      	str	r5, [r4, #8]
 80125a0:	2001      	movs	r0, #1
 80125a2:	b007      	add	sp, #28
 80125a4:	bd30      	pop	{r4, r5, pc}
 80125a6:	a801      	add	r0, sp, #4
 80125a8:	f7fe f8e2 	bl	8010770 <rcutils_get_default_allocator>
 80125ac:	9b01      	ldr	r3, [sp, #4]
 80125ae:	9905      	ldr	r1, [sp, #20]
 80125b0:	00e8      	lsls	r0, r5, #3
 80125b2:	4798      	blx	r3
 80125b4:	2800      	cmp	r0, #0
 80125b6:	d1f0      	bne.n	801259a <rosidl_runtime_c__double__Sequence__init+0xe>
 80125b8:	2000      	movs	r0, #0
 80125ba:	e7f2      	b.n	80125a2 <rosidl_runtime_c__double__Sequence__init+0x16>
 80125bc:	2000      	movs	r0, #0
 80125be:	4770      	bx	lr

080125c0 <rosidl_runtime_c__double__Sequence__fini>:
 80125c0:	b188      	cbz	r0, 80125e6 <rosidl_runtime_c__double__Sequence__fini+0x26>
 80125c2:	b510      	push	{r4, lr}
 80125c4:	6803      	ldr	r3, [r0, #0]
 80125c6:	b086      	sub	sp, #24
 80125c8:	4604      	mov	r4, r0
 80125ca:	b153      	cbz	r3, 80125e2 <rosidl_runtime_c__double__Sequence__fini+0x22>
 80125cc:	a801      	add	r0, sp, #4
 80125ce:	f7fe f8cf 	bl	8010770 <rcutils_get_default_allocator>
 80125d2:	9b02      	ldr	r3, [sp, #8]
 80125d4:	9905      	ldr	r1, [sp, #20]
 80125d6:	6820      	ldr	r0, [r4, #0]
 80125d8:	4798      	blx	r3
 80125da:	2300      	movs	r3, #0
 80125dc:	e9c4 3300 	strd	r3, r3, [r4]
 80125e0:	60a3      	str	r3, [r4, #8]
 80125e2:	b006      	add	sp, #24
 80125e4:	bd10      	pop	{r4, pc}
 80125e6:	4770      	bx	lr

080125e8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80125e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ec:	6805      	ldr	r5, [r0, #0]
 80125ee:	4604      	mov	r4, r0
 80125f0:	4628      	mov	r0, r5
 80125f2:	460e      	mov	r6, r1
 80125f4:	f7ed fe14 	bl	8000220 <strcmp>
 80125f8:	b308      	cbz	r0, 801263e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 80125fa:	4b12      	ldr	r3, [pc, #72]	@ (8012644 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 80125fc:	4628      	mov	r0, r5
 80125fe:	6819      	ldr	r1, [r3, #0]
 8012600:	f7ed fe0e 	bl	8000220 <strcmp>
 8012604:	4605      	mov	r5, r0
 8012606:	b980      	cbnz	r0, 801262a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8012608:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801260c:	f8d8 4000 	ldr.w	r4, [r8]
 8012610:	b1ac      	cbz	r4, 801263e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8012612:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012616:	3f04      	subs	r7, #4
 8012618:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801261c:	4631      	mov	r1, r6
 801261e:	f7ed fdff 	bl	8000220 <strcmp>
 8012622:	b128      	cbz	r0, 8012630 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8012624:	3501      	adds	r5, #1
 8012626:	42a5      	cmp	r5, r4
 8012628:	d1f6      	bne.n	8012618 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 801262a:	2000      	movs	r0, #0
 801262c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012630:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012634:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	4718      	bx	r3
 801263e:	4620      	mov	r0, r4
 8012640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012644:	2000019c 	.word	0x2000019c

08012648 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012648:	4b04      	ldr	r3, [pc, #16]	@ (801265c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	b10a      	cbz	r2, 8012652 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 801264e:	4803      	ldr	r0, [pc, #12]	@ (801265c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8012650:	4770      	bx	lr
 8012652:	4a03      	ldr	r2, [pc, #12]	@ (8012660 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8012654:	4801      	ldr	r0, [pc, #4]	@ (801265c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8012656:	6812      	ldr	r2, [r2, #0]
 8012658:	601a      	str	r2, [r3, #0]
 801265a:	4770      	bx	lr
 801265c:	200001a4 	.word	0x200001a4
 8012660:	2000019c 	.word	0x2000019c

08012664 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012664:	4a02      	ldr	r2, [pc, #8]	@ (8012670 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 8012666:	4b03      	ldr	r3, [pc, #12]	@ (8012674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 8012668:	6812      	ldr	r2, [r2, #0]
 801266a:	601a      	str	r2, [r3, #0]
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop
 8012670:	2000019c 	.word	0x2000019c
 8012674:	200001a4 	.word	0x200001a4

08012678 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 8012678:	2009      	movs	r0, #9
 801267a:	4770      	bx	lr

0801267c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 801267c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop

08012684 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8012684:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012688:	e9d0 0100 	ldrd	r0, r1, [r0]
 801268c:	e9c2 0100 	strd	r0, r1, [r2]
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop

08012694 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8012694:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012698:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801269c:	e9c0 2300 	strd	r2, r3, [r0]
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop

080126a4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 80126a4:	f009 bb3c 	b.w	801bd20 <sensor_msgs__msg__Imu__init>

080126a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 80126a8:	f009 bb86 	b.w	801bdb8 <sensor_msgs__msg__Imu__fini>

080126ac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 80126ac:	2009      	movs	r0, #9
 80126ae:	4770      	bx	lr

080126b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 80126b0:	2009      	movs	r0, #9
 80126b2:	4770      	bx	lr

080126b4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 80126b4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop

080126bc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80126bc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126c0:	4770      	bx	lr
 80126c2:	bf00      	nop

080126c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80126c4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop

080126cc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80126cc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop

080126d4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80126d4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop

080126dc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80126dc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126e0:	e9d0 0100 	ldrd	r0, r1, [r0]
 80126e4:	e9c2 0100 	strd	r0, r1, [r2]
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop

080126ec <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 80126ec:	e9d2 2300 	ldrd	r2, r3, [r2]
 80126f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80126f4:	e9c0 2300 	strd	r2, r3, [r0]
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop

080126fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 80126fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012700:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012704:	e9c2 0100 	strd	r0, r1, [r2]
 8012708:	4770      	bx	lr
 801270a:	bf00      	nop

0801270c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 801270c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012714:	e9c0 2300 	strd	r2, r3, [r0]
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop

0801271c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801271c:	b510      	push	{r4, lr}
 801271e:	f000 f90b 	bl	8012938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012722:	4c0b      	ldr	r4, [pc, #44]	@ (8012750 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8012724:	60e0      	str	r0, [r4, #12]
 8012726:	f000 fb1f 	bl	8012d68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801272a:	64a0      	str	r0, [r4, #72]	@ 0x48
 801272c:	f000 fb2e 	bl	8012d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012730:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8012734:	f000 fb2a 	bl	8012d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012738:	4b06      	ldr	r3, [pc, #24]	@ (8012754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801273a:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	b10a      	cbz	r2, 8012746 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8012742:	4804      	ldr	r0, [pc, #16]	@ (8012754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8012744:	bd10      	pop	{r4, pc}
 8012746:	4a04      	ldr	r2, [pc, #16]	@ (8012758 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 8012748:	4802      	ldr	r0, [pc, #8]	@ (8012754 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801274a:	6812      	ldr	r2, [r2, #0]
 801274c:	601a      	str	r2, [r3, #0]
 801274e:	bd10      	pop	{r4, pc}
 8012750:	200001dc 	.word	0x200001dc
 8012754:	200001c4 	.word	0x200001c4
 8012758:	200001a0 	.word	0x200001a0

0801275c <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 801275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801275e:	4607      	mov	r7, r0
 8012760:	460e      	mov	r6, r1
 8012762:	f000 f90d 	bl	8012980 <get_serialized_size_std_msgs__msg__Header>
 8012766:	1834      	adds	r4, r6, r0
 8012768:	4621      	mov	r1, r4
 801276a:	f107 0018 	add.w	r0, r7, #24
 801276e:	f000 fb1b 	bl	8012da8 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8012772:	4404      	add	r4, r0
 8012774:	2108      	movs	r1, #8
 8012776:	4620      	mov	r0, r4
 8012778:	f7fb ff40 	bl	800e5fc <ucdr_alignment>
 801277c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 8012780:	4425      	add	r5, r4
 8012782:	4629      	mov	r1, r5
 8012784:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012788:	f000 fbc6 	bl	8012f18 <get_serialized_size_geometry_msgs__msg__Vector3>
 801278c:	4405      	add	r5, r0
 801278e:	2108      	movs	r1, #8
 8012790:	4628      	mov	r0, r5
 8012792:	f7fb ff33 	bl	800e5fc <ucdr_alignment>
 8012796:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 801279a:	442c      	add	r4, r5
 801279c:	4621      	mov	r1, r4
 801279e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80127a2:	f000 fbb9 	bl	8012f18 <get_serialized_size_geometry_msgs__msg__Vector3>
 80127a6:	4404      	add	r4, r0
 80127a8:	2108      	movs	r1, #8
 80127aa:	4620      	mov	r0, r4
 80127ac:	f7fb ff26 	bl	800e5fc <ucdr_alignment>
 80127b0:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 80127b4:	4430      	add	r0, r6
 80127b6:	4420      	add	r0, r4
 80127b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ba:	bf00      	nop

080127bc <get_serialized_size_sensor_msgs__msg__Imu>:
 80127bc:	b108      	cbz	r0, 80127c2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 80127be:	f7ff bfcd 	b.w	801275c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80127c2:	4770      	bx	lr

080127c4 <_Imu__get_serialized_size>:
 80127c4:	b110      	cbz	r0, 80127cc <_Imu__get_serialized_size+0x8>
 80127c6:	2100      	movs	r1, #0
 80127c8:	f7ff bfc8 	b.w	801275c <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop

080127d0 <_Imu__cdr_deserialize>:
 80127d0:	b538      	push	{r3, r4, r5, lr}
 80127d2:	460c      	mov	r4, r1
 80127d4:	b399      	cbz	r1, 801283e <_Imu__cdr_deserialize+0x6e>
 80127d6:	4605      	mov	r5, r0
 80127d8:	f000 f954 	bl	8012a84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80127dc:	6843      	ldr	r3, [r0, #4]
 80127de:	4621      	mov	r1, r4
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	4628      	mov	r0, r5
 80127e4:	4798      	blx	r3
 80127e6:	f000 fb93 	bl	8012f10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80127ea:	6843      	ldr	r3, [r0, #4]
 80127ec:	f104 0118 	add.w	r1, r4, #24
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	4628      	mov	r0, r5
 80127f4:	4798      	blx	r3
 80127f6:	2209      	movs	r2, #9
 80127f8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80127fc:	4628      	mov	r0, r5
 80127fe:	f000 fdef 	bl	80133e0 <ucdr_deserialize_array_double>
 8012802:	f000 fc15 	bl	8013030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012806:	6843      	ldr	r3, [r0, #4]
 8012808:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	4628      	mov	r0, r5
 8012810:	4798      	blx	r3
 8012812:	2209      	movs	r2, #9
 8012814:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8012818:	4628      	mov	r0, r5
 801281a:	f000 fde1 	bl	80133e0 <ucdr_deserialize_array_double>
 801281e:	f000 fc07 	bl	8013030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012822:	6843      	ldr	r3, [r0, #4]
 8012824:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	4628      	mov	r0, r5
 801282c:	4798      	blx	r3
 801282e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8012832:	4628      	mov	r0, r5
 8012834:	2209      	movs	r2, #9
 8012836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801283a:	f000 bdd1 	b.w	80133e0 <ucdr_deserialize_array_double>
 801283e:	4608      	mov	r0, r1
 8012840:	bd38      	pop	{r3, r4, r5, pc}
 8012842:	bf00      	nop

08012844 <_Imu__cdr_serialize>:
 8012844:	2800      	cmp	r0, #0
 8012846:	d035      	beq.n	80128b4 <_Imu__cdr_serialize+0x70>
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4604      	mov	r4, r0
 801284c:	460d      	mov	r5, r1
 801284e:	f000 f919 	bl	8012a84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8012852:	6843      	ldr	r3, [r0, #4]
 8012854:	4629      	mov	r1, r5
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	4620      	mov	r0, r4
 801285a:	4798      	blx	r3
 801285c:	f000 fb58 	bl	8012f10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8012860:	6843      	ldr	r3, [r0, #4]
 8012862:	4629      	mov	r1, r5
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	f104 0018 	add.w	r0, r4, #24
 801286a:	4798      	blx	r3
 801286c:	2209      	movs	r2, #9
 801286e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012872:	4628      	mov	r0, r5
 8012874:	f000 fd0c 	bl	8013290 <ucdr_serialize_array_double>
 8012878:	f000 fbda 	bl	8013030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801287c:	6843      	ldr	r3, [r0, #4]
 801287e:	4629      	mov	r1, r5
 8012880:	689b      	ldr	r3, [r3, #8]
 8012882:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8012886:	4798      	blx	r3
 8012888:	2209      	movs	r2, #9
 801288a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 801288e:	4628      	mov	r0, r5
 8012890:	f000 fcfe 	bl	8013290 <ucdr_serialize_array_double>
 8012894:	f000 fbcc 	bl	8013030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8012898:	6843      	ldr	r3, [r0, #4]
 801289a:	4629      	mov	r1, r5
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80128a2:	4798      	blx	r3
 80128a4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80128a8:	4628      	mov	r0, r5
 80128aa:	2209      	movs	r2, #9
 80128ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128b0:	f000 bcee 	b.w	8013290 <ucdr_serialize_array_double>
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop

080128b8 <max_serialized_size_sensor_msgs__msg__Imu>:
 80128b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ba:	2301      	movs	r3, #1
 80128bc:	7003      	strb	r3, [r0, #0]
 80128be:	4607      	mov	r7, r0
 80128c0:	460e      	mov	r6, r1
 80128c2:	f000 f8d5 	bl	8012a70 <max_serialized_size_std_msgs__msg__Header>
 80128c6:	1834      	adds	r4, r6, r0
 80128c8:	4621      	mov	r1, r4
 80128ca:	4638      	mov	r0, r7
 80128cc:	f000 fafe 	bl	8012ecc <max_serialized_size_geometry_msgs__msg__Quaternion>
 80128d0:	4404      	add	r4, r0
 80128d2:	2108      	movs	r1, #8
 80128d4:	4620      	mov	r0, r4
 80128d6:	f7fb fe91 	bl	800e5fc <ucdr_alignment>
 80128da:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 80128de:	4425      	add	r5, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	4638      	mov	r0, r7
 80128e4:	f000 fb8a 	bl	8012ffc <max_serialized_size_geometry_msgs__msg__Vector3>
 80128e8:	4405      	add	r5, r0
 80128ea:	2108      	movs	r1, #8
 80128ec:	4628      	mov	r0, r5
 80128ee:	f7fb fe85 	bl	800e5fc <ucdr_alignment>
 80128f2:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 80128f6:	442c      	add	r4, r5
 80128f8:	4621      	mov	r1, r4
 80128fa:	4638      	mov	r0, r7
 80128fc:	f000 fb7e 	bl	8012ffc <max_serialized_size_geometry_msgs__msg__Vector3>
 8012900:	4404      	add	r4, r0
 8012902:	2108      	movs	r1, #8
 8012904:	4620      	mov	r0, r4
 8012906:	f7fb fe79 	bl	800e5fc <ucdr_alignment>
 801290a:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 801290e:	4430      	add	r0, r6
 8012910:	4420      	add	r0, r4
 8012912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012914 <_Imu__max_serialized_size>:
 8012914:	b500      	push	{lr}
 8012916:	b083      	sub	sp, #12
 8012918:	2100      	movs	r1, #0
 801291a:	f10d 0007 	add.w	r0, sp, #7
 801291e:	f7ff ffcb 	bl	80128b8 <max_serialized_size_sensor_msgs__msg__Imu>
 8012922:	b003      	add	sp, #12
 8012924:	f85d fb04 	ldr.w	pc, [sp], #4

08012928 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8012928:	4800      	ldr	r0, [pc, #0]	@ (801292c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 801292a:	4770      	bx	lr
 801292c:	20000380 	.word	0x20000380

08012930 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8012930:	f009 ba9e 	b.w	801be70 <std_msgs__msg__Header__init>

08012934 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012934:	f009 babc 	b.w	801beb0 <std_msgs__msg__Header__fini>

08012938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012938:	b508      	push	{r3, lr}
 801293a:	f000 f99b 	bl	8012c74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801293e:	4b06      	ldr	r3, [pc, #24]	@ (8012958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012940:	4906      	ldr	r1, [pc, #24]	@ (801295c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	60c8      	str	r0, [r1, #12]
 8012946:	b10a      	cbz	r2, 801294c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8012948:	4803      	ldr	r0, [pc, #12]	@ (8012958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801294a:	bd08      	pop	{r3, pc}
 801294c:	4a04      	ldr	r2, [pc, #16]	@ (8012960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 801294e:	4802      	ldr	r0, [pc, #8]	@ (8012958 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012950:	6812      	ldr	r2, [r2, #0]
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	bd08      	pop	{r3, pc}
 8012956:	bf00      	nop
 8012958:	200003b4 	.word	0x200003b4
 801295c:	200003cc 	.word	0x200003cc
 8012960:	200001a0 	.word	0x200001a0

08012964 <_Header__max_serialized_size>:
 8012964:	b500      	push	{lr}
 8012966:	b083      	sub	sp, #12
 8012968:	2301      	movs	r3, #1
 801296a:	2100      	movs	r1, #0
 801296c:	f10d 0007 	add.w	r0, sp, #7
 8012970:	f88d 3007 	strb.w	r3, [sp, #7]
 8012974:	f000 f9dc 	bl	8012d30 <max_serialized_size_builtin_interfaces__msg__Time>
 8012978:	b003      	add	sp, #12
 801297a:	f85d fb04 	ldr.w	pc, [sp], #4
 801297e:	bf00      	nop

08012980 <get_serialized_size_std_msgs__msg__Header>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4605      	mov	r5, r0
 8012984:	b168      	cbz	r0, 80129a2 <get_serialized_size_std_msgs__msg__Header+0x22>
 8012986:	460c      	mov	r4, r1
 8012988:	f000 f982 	bl	8012c90 <get_serialized_size_builtin_interfaces__msg__Time>
 801298c:	1826      	adds	r6, r4, r0
 801298e:	2104      	movs	r1, #4
 8012990:	4630      	mov	r0, r6
 8012992:	f7fb fe33 	bl	800e5fc <ucdr_alignment>
 8012996:	68eb      	ldr	r3, [r5, #12]
 8012998:	f1c4 0405 	rsb	r4, r4, #5
 801299c:	441c      	add	r4, r3
 801299e:	4404      	add	r4, r0
 80129a0:	19a0      	adds	r0, r4, r6
 80129a2:	bd70      	pop	{r4, r5, r6, pc}

080129a4 <_Header__cdr_deserialize>:
 80129a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a6:	460c      	mov	r4, r1
 80129a8:	b083      	sub	sp, #12
 80129aa:	b1e1      	cbz	r1, 80129e6 <_Header__cdr_deserialize+0x42>
 80129ac:	4606      	mov	r6, r0
 80129ae:	f000 f9d3 	bl	8012d58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80129b2:	6843      	ldr	r3, [r0, #4]
 80129b4:	4621      	mov	r1, r4
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	4630      	mov	r0, r6
 80129ba:	4798      	blx	r3
 80129bc:	6927      	ldr	r7, [r4, #16]
 80129be:	68a1      	ldr	r1, [r4, #8]
 80129c0:	ab01      	add	r3, sp, #4
 80129c2:	463a      	mov	r2, r7
 80129c4:	4630      	mov	r0, r6
 80129c6:	f7fb fe97 	bl	800e6f8 <ucdr_deserialize_sequence_char>
 80129ca:	9b01      	ldr	r3, [sp, #4]
 80129cc:	4605      	mov	r5, r0
 80129ce:	b920      	cbnz	r0, 80129da <_Header__cdr_deserialize+0x36>
 80129d0:	429f      	cmp	r7, r3
 80129d2:	d30c      	bcc.n	80129ee <_Header__cdr_deserialize+0x4a>
 80129d4:	4628      	mov	r0, r5
 80129d6:	b003      	add	sp, #12
 80129d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129da:	b103      	cbz	r3, 80129de <_Header__cdr_deserialize+0x3a>
 80129dc:	3b01      	subs	r3, #1
 80129de:	4628      	mov	r0, r5
 80129e0:	60e3      	str	r3, [r4, #12]
 80129e2:	b003      	add	sp, #12
 80129e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129e6:	460d      	mov	r5, r1
 80129e8:	4628      	mov	r0, r5
 80129ea:	b003      	add	sp, #12
 80129ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ee:	2101      	movs	r1, #1
 80129f0:	75b0      	strb	r0, [r6, #22]
 80129f2:	7571      	strb	r1, [r6, #21]
 80129f4:	60e0      	str	r0, [r4, #12]
 80129f6:	4630      	mov	r0, r6
 80129f8:	f7fb fe16 	bl	800e628 <ucdr_align_to>
 80129fc:	4630      	mov	r0, r6
 80129fe:	9901      	ldr	r1, [sp, #4]
 8012a00:	f7fb fe48 	bl	800e694 <ucdr_advance_buffer>
 8012a04:	4628      	mov	r0, r5
 8012a06:	b003      	add	sp, #12
 8012a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a0a:	bf00      	nop

08012a0c <_Header__cdr_serialize>:
 8012a0c:	b1f8      	cbz	r0, 8012a4e <_Header__cdr_serialize+0x42>
 8012a0e:	b570      	push	{r4, r5, r6, lr}
 8012a10:	4604      	mov	r4, r0
 8012a12:	460d      	mov	r5, r1
 8012a14:	f000 f9a0 	bl	8012d58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012a18:	6843      	ldr	r3, [r0, #4]
 8012a1a:	4629      	mov	r1, r5
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	4620      	mov	r0, r4
 8012a20:	4798      	blx	r3
 8012a22:	68a6      	ldr	r6, [r4, #8]
 8012a24:	b156      	cbz	r6, 8012a3c <_Header__cdr_serialize+0x30>
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7ed fc5a 	bl	80002e0 <strlen>
 8012a2c:	4631      	mov	r1, r6
 8012a2e:	60e0      	str	r0, [r4, #12]
 8012a30:	1c42      	adds	r2, r0, #1
 8012a32:	4628      	mov	r0, r5
 8012a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a38:	f7fb be4c 	b.w	800e6d4 <ucdr_serialize_sequence_char>
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	60e0      	str	r0, [r4, #12]
 8012a40:	4632      	mov	r2, r6
 8012a42:	4631      	mov	r1, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a4a:	f7fb be43 	b.w	800e6d4 <ucdr_serialize_sequence_char>
 8012a4e:	4770      	bx	lr

08012a50 <_Header__get_serialized_size>:
 8012a50:	b538      	push	{r3, r4, r5, lr}
 8012a52:	4604      	mov	r4, r0
 8012a54:	b150      	cbz	r0, 8012a6c <_Header__get_serialized_size+0x1c>
 8012a56:	2100      	movs	r1, #0
 8012a58:	f000 f91a 	bl	8012c90 <get_serialized_size_builtin_interfaces__msg__Time>
 8012a5c:	2104      	movs	r1, #4
 8012a5e:	4605      	mov	r5, r0
 8012a60:	f7fb fdcc 	bl	800e5fc <ucdr_alignment>
 8012a64:	68e4      	ldr	r4, [r4, #12]
 8012a66:	3405      	adds	r4, #5
 8012a68:	442c      	add	r4, r5
 8012a6a:	4420      	add	r0, r4
 8012a6c:	bd38      	pop	{r3, r4, r5, pc}
 8012a6e:	bf00      	nop

08012a70 <max_serialized_size_std_msgs__msg__Header>:
 8012a70:	b510      	push	{r4, lr}
 8012a72:	2301      	movs	r3, #1
 8012a74:	4604      	mov	r4, r0
 8012a76:	7003      	strb	r3, [r0, #0]
 8012a78:	f000 f95a 	bl	8012d30 <max_serialized_size_builtin_interfaces__msg__Time>
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	7023      	strb	r3, [r4, #0]
 8012a80:	bd10      	pop	{r4, pc}
 8012a82:	bf00      	nop

08012a84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012a84:	4800      	ldr	r0, [pc, #0]	@ (8012a88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8012a86:	4770      	bx	lr
 8012a88:	20000444 	.word	0x20000444

08012a8c <actuator_msgs__msg__Actuators__get_type_hash>:
 8012a8c:	4800      	ldr	r0, [pc, #0]	@ (8012a90 <actuator_msgs__msg__Actuators__get_type_hash+0x4>)
 8012a8e:	4770      	bx	lr
 8012a90:	20000478 	.word	0x20000478

08012a94 <actuator_msgs__msg__Actuators__get_type_description>:
 8012a94:	b570      	push	{r4, r5, r6, lr}
 8012a96:	4e0c      	ldr	r6, [pc, #48]	@ (8012ac8 <actuator_msgs__msg__Actuators__get_type_description+0x34>)
 8012a98:	7835      	ldrb	r5, [r6, #0]
 8012a9a:	b10d      	cbz	r5, 8012aa0 <actuator_msgs__msg__Actuators__get_type_description+0xc>
 8012a9c:	480b      	ldr	r0, [pc, #44]	@ (8012acc <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 8012a9e:	bd70      	pop	{r4, r5, r6, pc}
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	f000 f8b7 	bl	8012c14 <builtin_interfaces__msg__Time__get_type_description>
 8012aa6:	300c      	adds	r0, #12
 8012aa8:	c807      	ldmia	r0, {r0, r1, r2}
 8012aaa:	4c09      	ldr	r4, [pc, #36]	@ (8012ad0 <actuator_msgs__msg__Actuators__get_type_description+0x3c>)
 8012aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	f009 f999 	bl	801bde8 <std_msgs__msg__Header__get_type_description>
 8012ab6:	300c      	adds	r0, #12
 8012ab8:	c807      	ldmia	r0, {r0, r1, r2}
 8012aba:	3418      	adds	r4, #24
 8012abc:	2301      	movs	r3, #1
 8012abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012ac2:	7033      	strb	r3, [r6, #0]
 8012ac4:	4801      	ldr	r0, [pc, #4]	@ (8012acc <actuator_msgs__msg__Actuators__get_type_description+0x38>)
 8012ac6:	bd70      	pop	{r4, r5, r6, pc}
 8012ac8:	2001f585 	.word	0x2001f585
 8012acc:	08020dc8 	.word	0x08020dc8
 8012ad0:	20000680 	.word	0x20000680

08012ad4 <actuator_msgs__msg__Actuators__get_type_description_sources>:
 8012ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad6:	4e17      	ldr	r6, [pc, #92]	@ (8012b34 <actuator_msgs__msg__Actuators__get_type_description_sources+0x60>)
 8012ad8:	7837      	ldrb	r7, [r6, #0]
 8012ada:	b10f      	cbz	r7, 8012ae0 <actuator_msgs__msg__Actuators__get_type_description_sources+0xc>
 8012adc:	4816      	ldr	r0, [pc, #88]	@ (8012b38 <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 8012ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ae0:	4d16      	ldr	r5, [pc, #88]	@ (8012b3c <actuator_msgs__msg__Actuators__get_type_description_sources+0x68>)
 8012ae2:	4c17      	ldr	r4, [pc, #92]	@ (8012b40 <actuator_msgs__msg__Actuators__get_type_description_sources+0x6c>)
 8012ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012aec:	682b      	ldr	r3, [r5, #0]
 8012aee:	4625      	mov	r5, r4
 8012af0:	4638      	mov	r0, r7
 8012af2:	f845 3b04 	str.w	r3, [r5], #4
 8012af6:	f000 f899 	bl	8012c2c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8012afa:	4684      	mov	ip, r0
 8012afc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b08:	4638      	mov	r0, r7
 8012b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8012b0e:	602b      	str	r3, [r5, #0]
 8012b10:	f009 f982 	bl	801be18 <std_msgs__msg__Header__get_individual_type_description_source>
 8012b14:	2301      	movs	r3, #1
 8012b16:	4684      	mov	ip, r0
 8012b18:	7033      	strb	r3, [r6, #0]
 8012b1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b1e:	3428      	adds	r4, #40	@ 0x28
 8012b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b28:	f8dc 3000 	ldr.w	r3, [ip]
 8012b2c:	4802      	ldr	r0, [pc, #8]	@ (8012b38 <actuator_msgs__msg__Actuators__get_type_description_sources+0x64>)
 8012b2e:	6023      	str	r3, [r4, #0]
 8012b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b32:	bf00      	nop
 8012b34:	2001f584 	.word	0x2001f584
 8012b38:	08020d98 	.word	0x08020d98
 8012b3c:	08020da4 	.word	0x08020da4
 8012b40:	2001f518 	.word	0x2001f518

08012b44 <actuator_msgs__msg__Actuators__init>:
 8012b44:	b3f0      	cbz	r0, 8012bc4 <actuator_msgs__msg__Actuators__init+0x80>
 8012b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b48:	4604      	mov	r4, r0
 8012b4a:	f009 f991 	bl	801be70 <std_msgs__msg__Header__init>
 8012b4e:	b1a8      	cbz	r0, 8012b7c <actuator_msgs__msg__Actuators__init+0x38>
 8012b50:	f104 0514 	add.w	r5, r4, #20
 8012b54:	2100      	movs	r1, #0
 8012b56:	4628      	mov	r0, r5
 8012b58:	f7ff fd18 	bl	801258c <rosidl_runtime_c__double__Sequence__init>
 8012b5c:	b368      	cbz	r0, 8012bba <actuator_msgs__msg__Actuators__init+0x76>
 8012b5e:	f104 0620 	add.w	r6, r4, #32
 8012b62:	2100      	movs	r1, #0
 8012b64:	4630      	mov	r0, r6
 8012b66:	f7ff fd11 	bl	801258c <rosidl_runtime_c__double__Sequence__init>
 8012b6a:	b1c0      	cbz	r0, 8012b9e <actuator_msgs__msg__Actuators__init+0x5a>
 8012b6c:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 8012b70:	2100      	movs	r1, #0
 8012b72:	4638      	mov	r0, r7
 8012b74:	f7ff fd0a 	bl	801258c <rosidl_runtime_c__double__Sequence__init>
 8012b78:	b330      	cbz	r0, 8012bc8 <actuator_msgs__msg__Actuators__init+0x84>
 8012b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f009 f997 	bl	801beb0 <std_msgs__msg__Header__fini>
 8012b82:	f104 0014 	add.w	r0, r4, #20
 8012b86:	f7ff fd1b 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012b8a:	f104 0020 	add.w	r0, r4, #32
 8012b8e:	f7ff fd17 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012b92:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012b96:	f7ff fd13 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012b9a:	2000      	movs	r0, #0
 8012b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f009 f986 	bl	801beb0 <std_msgs__msg__Header__fini>
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f7ff fd0b 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012baa:	4630      	mov	r0, r6
 8012bac:	f7ff fd08 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012bb0:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012bb4:	f7ff fd04 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012bb8:	e7ef      	b.n	8012b9a <actuator_msgs__msg__Actuators__init+0x56>
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f009 f978 	bl	801beb0 <std_msgs__msg__Header__fini>
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	e7e0      	b.n	8012b86 <actuator_msgs__msg__Actuators__init+0x42>
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	4770      	bx	lr
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f009 f971 	bl	801beb0 <std_msgs__msg__Header__fini>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f7ff fcf6 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f7ff fcf3 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012bda:	4638      	mov	r0, r7
 8012bdc:	f7ff fcf0 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012be0:	e7db      	b.n	8012b9a <actuator_msgs__msg__Actuators__init+0x56>
 8012be2:	bf00      	nop

08012be4 <actuator_msgs__msg__Actuators__fini>:
 8012be4:	b188      	cbz	r0, 8012c0a <actuator_msgs__msg__Actuators__fini+0x26>
 8012be6:	b510      	push	{r4, lr}
 8012be8:	4604      	mov	r4, r0
 8012bea:	f009 f961 	bl	801beb0 <std_msgs__msg__Header__fini>
 8012bee:	f104 0014 	add.w	r0, r4, #20
 8012bf2:	f7ff fce5 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012bf6:	f104 0020 	add.w	r0, r4, #32
 8012bfa:	f7ff fce1 	bl	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012bfe:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8012c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c06:	f7ff bcdb 	b.w	80125c0 <rosidl_runtime_c__double__Sequence__fini>
 8012c0a:	4770      	bx	lr

08012c0c <builtin_interfaces__msg__Time__get_type_hash>:
 8012c0c:	4800      	ldr	r0, [pc, #0]	@ (8012c10 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8012c0e:	4770      	bx	lr
 8012c10:	20000840 	.word	0x20000840

08012c14 <builtin_interfaces__msg__Time__get_type_description>:
 8012c14:	4b03      	ldr	r3, [pc, #12]	@ (8012c24 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8012c16:	781a      	ldrb	r2, [r3, #0]
 8012c18:	b90a      	cbnz	r2, 8012c1e <builtin_interfaces__msg__Time__get_type_description+0xa>
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	701a      	strb	r2, [r3, #0]
 8012c1e:	4802      	ldr	r0, [pc, #8]	@ (8012c28 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8012c20:	4770      	bx	lr
 8012c22:	bf00      	nop
 8012c24:	2001f5ad 	.word	0x2001f5ad
 8012c28:	08020e1c 	.word	0x08020e1c

08012c2c <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8012c2c:	4800      	ldr	r0, [pc, #0]	@ (8012c30 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8012c2e:	4770      	bx	lr
 8012c30:	08020df8 	.word	0x08020df8

08012c34 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8012c34:	4b09      	ldr	r3, [pc, #36]	@ (8012c5c <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8012c36:	781a      	ldrb	r2, [r3, #0]
 8012c38:	b96a      	cbnz	r2, 8012c56 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8012c3a:	b430      	push	{r4, r5}
 8012c3c:	4d08      	ldr	r5, [pc, #32]	@ (8012c60 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8012c3e:	4c09      	ldr	r4, [pc, #36]	@ (8012c64 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8012c40:	2201      	movs	r2, #1
 8012c42:	701a      	strb	r2, [r3, #0]
 8012c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c4c:	682b      	ldr	r3, [r5, #0]
 8012c4e:	4806      	ldr	r0, [pc, #24]	@ (8012c68 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	bc30      	pop	{r4, r5}
 8012c54:	4770      	bx	lr
 8012c56:	4804      	ldr	r0, [pc, #16]	@ (8012c68 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8012c58:	4770      	bx	lr
 8012c5a:	bf00      	nop
 8012c5c:	2001f5ac 	.word	0x2001f5ac
 8012c60:	08020df8 	.word	0x08020df8
 8012c64:	2001f588 	.word	0x2001f588
 8012c68:	08020dec 	.word	0x08020dec

08012c6c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012c6c:	f009 b92c 	b.w	801bec8 <builtin_interfaces__msg__Time__init>

08012c70 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012c70:	f009 b92e 	b.w	801bed0 <builtin_interfaces__msg__Time__fini>

08012c74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012c74:	4b04      	ldr	r3, [pc, #16]	@ (8012c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	b10a      	cbz	r2, 8012c7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012c7a:	4803      	ldr	r0, [pc, #12]	@ (8012c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012c7c:	4770      	bx	lr
 8012c7e:	4a03      	ldr	r2, [pc, #12]	@ (8012c8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012c80:	4801      	ldr	r0, [pc, #4]	@ (8012c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012c82:	6812      	ldr	r2, [r2, #0]
 8012c84:	601a      	str	r2, [r3, #0]
 8012c86:	4770      	bx	lr
 8012c88:	20000a18 	.word	0x20000a18
 8012c8c:	200001a0 	.word	0x200001a0

08012c90 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012c90:	b180      	cbz	r0, 8012cb4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012c92:	b538      	push	{r3, r4, r5, lr}
 8012c94:	460d      	mov	r5, r1
 8012c96:	4628      	mov	r0, r5
 8012c98:	2104      	movs	r1, #4
 8012c9a:	f7fb fcaf 	bl	800e5fc <ucdr_alignment>
 8012c9e:	2104      	movs	r1, #4
 8012ca0:	186c      	adds	r4, r5, r1
 8012ca2:	4404      	add	r4, r0
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f7fb fca9 	bl	800e5fc <ucdr_alignment>
 8012caa:	f1c5 0504 	rsb	r5, r5, #4
 8012cae:	4405      	add	r5, r0
 8012cb0:	1928      	adds	r0, r5, r4
 8012cb2:	bd38      	pop	{r3, r4, r5, pc}
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop

08012cb8 <_Time__cdr_deserialize>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	460c      	mov	r4, r1
 8012cbc:	b141      	cbz	r1, 8012cd0 <_Time__cdr_deserialize+0x18>
 8012cbe:	4605      	mov	r5, r0
 8012cc0:	f001 fb30 	bl	8014324 <ucdr_deserialize_int32_t>
 8012cc4:	1d21      	adds	r1, r4, #4
 8012cc6:	4628      	mov	r0, r5
 8012cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ccc:	f000 bfa8 	b.w	8013c20 <ucdr_deserialize_uint32_t>
 8012cd0:	4608      	mov	r0, r1
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}

08012cd4 <_Time__cdr_serialize>:
 8012cd4:	b160      	cbz	r0, 8012cf0 <_Time__cdr_serialize+0x1c>
 8012cd6:	b538      	push	{r3, r4, r5, lr}
 8012cd8:	460d      	mov	r5, r1
 8012cda:	4604      	mov	r4, r0
 8012cdc:	6801      	ldr	r1, [r0, #0]
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f001 fa86 	bl	80141f0 <ucdr_serialize_int32_t>
 8012ce4:	6861      	ldr	r1, [r4, #4]
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cec:	f000 be6e 	b.w	80139cc <ucdr_serialize_uint32_t>
 8012cf0:	4770      	bx	lr
 8012cf2:	bf00      	nop

08012cf4 <_Time__get_serialized_size>:
 8012cf4:	b160      	cbz	r0, 8012d10 <_Time__get_serialized_size+0x1c>
 8012cf6:	b510      	push	{r4, lr}
 8012cf8:	2104      	movs	r1, #4
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	f7fb fc7e 	bl	800e5fc <ucdr_alignment>
 8012d00:	1d04      	adds	r4, r0, #4
 8012d02:	2104      	movs	r1, #4
 8012d04:	4620      	mov	r0, r4
 8012d06:	f7fb fc79 	bl	800e5fc <ucdr_alignment>
 8012d0a:	3004      	adds	r0, #4
 8012d0c:	4420      	add	r0, r4
 8012d0e:	bd10      	pop	{r4, pc}
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop

08012d14 <_Time__max_serialized_size>:
 8012d14:	b510      	push	{r4, lr}
 8012d16:	2104      	movs	r1, #4
 8012d18:	2000      	movs	r0, #0
 8012d1a:	f7fb fc6f 	bl	800e5fc <ucdr_alignment>
 8012d1e:	1d04      	adds	r4, r0, #4
 8012d20:	2104      	movs	r1, #4
 8012d22:	4620      	mov	r0, r4
 8012d24:	f7fb fc6a 	bl	800e5fc <ucdr_alignment>
 8012d28:	3004      	adds	r0, #4
 8012d2a:	4420      	add	r0, r4
 8012d2c:	bd10      	pop	{r4, pc}
 8012d2e:	bf00      	nop

08012d30 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012d30:	b538      	push	{r3, r4, r5, lr}
 8012d32:	460c      	mov	r4, r1
 8012d34:	2301      	movs	r3, #1
 8012d36:	7003      	strb	r3, [r0, #0]
 8012d38:	2104      	movs	r1, #4
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f7fb fc5e 	bl	800e5fc <ucdr_alignment>
 8012d40:	2104      	movs	r1, #4
 8012d42:	1863      	adds	r3, r4, r1
 8012d44:	18c5      	adds	r5, r0, r3
 8012d46:	4628      	mov	r0, r5
 8012d48:	f7fb fc58 	bl	800e5fc <ucdr_alignment>
 8012d4c:	f1c4 0404 	rsb	r4, r4, #4
 8012d50:	4420      	add	r0, r4
 8012d52:	4428      	add	r0, r5
 8012d54:	bd38      	pop	{r3, r4, r5, pc}
 8012d56:	bf00      	nop

08012d58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012d58:	4800      	ldr	r0, [pc, #0]	@ (8012d5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012d5a:	4770      	bx	lr
 8012d5c:	20000aa8 	.word	0x20000aa8

08012d60 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8012d60:	f009 b8ea 	b.w	801bf38 <geometry_msgs__msg__Quaternion__init>

08012d64 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8012d64:	f009 b8fc 	b.w	801bf60 <geometry_msgs__msg__Quaternion__fini>

08012d68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8012d68:	4b04      	ldr	r3, [pc, #16]	@ (8012d7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8012d6a:	681a      	ldr	r2, [r3, #0]
 8012d6c:	b10a      	cbz	r2, 8012d72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8012d6e:	4803      	ldr	r0, [pc, #12]	@ (8012d7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8012d70:	4770      	bx	lr
 8012d72:	4a03      	ldr	r2, [pc, #12]	@ (8012d80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8012d74:	4801      	ldr	r0, [pc, #4]	@ (8012d7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8012d76:	6812      	ldr	r2, [r2, #0]
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	4770      	bx	lr
 8012d7c:	20000adc 	.word	0x20000adc
 8012d80:	200001a0 	.word	0x200001a0

08012d84 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8012d84:	f009 b91e 	b.w	801bfc4 <geometry_msgs__msg__Vector3__init>

08012d88 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8012d88:	f009 b920 	b.w	801bfcc <geometry_msgs__msg__Vector3__fini>

08012d8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8012d8c:	4b04      	ldr	r3, [pc, #16]	@ (8012da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	b10a      	cbz	r2, 8012d96 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8012d92:	4803      	ldr	r0, [pc, #12]	@ (8012da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012d94:	4770      	bx	lr
 8012d96:	4a03      	ldr	r2, [pc, #12]	@ (8012da4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8012d98:	4801      	ldr	r0, [pc, #4]	@ (8012da0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8012d9a:	6812      	ldr	r2, [r2, #0]
 8012d9c:	601a      	str	r2, [r3, #0]
 8012d9e:	4770      	bx	lr
 8012da0:	20000be4 	.word	0x20000be4
 8012da4:	200001a0 	.word	0x200001a0

08012da8 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8012da8:	b1f0      	cbz	r0, 8012de8 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8012daa:	b570      	push	{r4, r5, r6, lr}
 8012dac:	460d      	mov	r5, r1
 8012dae:	4628      	mov	r0, r5
 8012db0:	2108      	movs	r1, #8
 8012db2:	f7fb fc23 	bl	800e5fc <ucdr_alignment>
 8012db6:	2108      	movs	r1, #8
 8012db8:	186c      	adds	r4, r5, r1
 8012dba:	4404      	add	r4, r0
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f7fb fc1d 	bl	800e5fc <ucdr_alignment>
 8012dc2:	f100 0608 	add.w	r6, r0, #8
 8012dc6:	4426      	add	r6, r4
 8012dc8:	2108      	movs	r1, #8
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f7fb fc16 	bl	800e5fc <ucdr_alignment>
 8012dd0:	f100 0408 	add.w	r4, r0, #8
 8012dd4:	4434      	add	r4, r6
 8012dd6:	2108      	movs	r1, #8
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f7fb fc0f 	bl	800e5fc <ucdr_alignment>
 8012dde:	f1c5 0508 	rsb	r5, r5, #8
 8012de2:	4405      	add	r5, r0
 8012de4:	1928      	adds	r0, r5, r4
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop

08012dec <_Quaternion__cdr_deserialize>:
 8012dec:	b538      	push	{r3, r4, r5, lr}
 8012dee:	460c      	mov	r4, r1
 8012df0:	b199      	cbz	r1, 8012e1a <_Quaternion__cdr_deserialize+0x2e>
 8012df2:	4605      	mov	r5, r0
 8012df4:	f001 fcb4 	bl	8014760 <ucdr_deserialize_double>
 8012df8:	f104 0108 	add.w	r1, r4, #8
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f001 fcaf 	bl	8014760 <ucdr_deserialize_double>
 8012e02:	f104 0110 	add.w	r1, r4, #16
 8012e06:	4628      	mov	r0, r5
 8012e08:	f001 fcaa 	bl	8014760 <ucdr_deserialize_double>
 8012e0c:	f104 0118 	add.w	r1, r4, #24
 8012e10:	4628      	mov	r0, r5
 8012e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e16:	f001 bca3 	b.w	8014760 <ucdr_deserialize_double>
 8012e1a:	4608      	mov	r0, r1
 8012e1c:	bd38      	pop	{r3, r4, r5, pc}
 8012e1e:	bf00      	nop

08012e20 <_Quaternion__cdr_serialize>:
 8012e20:	b1c0      	cbz	r0, 8012e54 <_Quaternion__cdr_serialize+0x34>
 8012e22:	b538      	push	{r3, r4, r5, lr}
 8012e24:	ed90 0b00 	vldr	d0, [r0]
 8012e28:	460d      	mov	r5, r1
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	4608      	mov	r0, r1
 8012e2e:	f001 fb07 	bl	8014440 <ucdr_serialize_double>
 8012e32:	ed94 0b02 	vldr	d0, [r4, #8]
 8012e36:	4628      	mov	r0, r5
 8012e38:	f001 fb02 	bl	8014440 <ucdr_serialize_double>
 8012e3c:	ed94 0b04 	vldr	d0, [r4, #16]
 8012e40:	4628      	mov	r0, r5
 8012e42:	f001 fafd 	bl	8014440 <ucdr_serialize_double>
 8012e46:	ed94 0b06 	vldr	d0, [r4, #24]
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e50:	f001 baf6 	b.w	8014440 <ucdr_serialize_double>
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop

08012e58 <_Quaternion__get_serialized_size>:
 8012e58:	b1d8      	cbz	r0, 8012e92 <_Quaternion__get_serialized_size+0x3a>
 8012e5a:	b538      	push	{r3, r4, r5, lr}
 8012e5c:	2108      	movs	r1, #8
 8012e5e:	2000      	movs	r0, #0
 8012e60:	f7fb fbcc 	bl	800e5fc <ucdr_alignment>
 8012e64:	f100 0408 	add.w	r4, r0, #8
 8012e68:	2108      	movs	r1, #8
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f7fb fbc6 	bl	800e5fc <ucdr_alignment>
 8012e70:	f100 0508 	add.w	r5, r0, #8
 8012e74:	4425      	add	r5, r4
 8012e76:	2108      	movs	r1, #8
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f7fb fbbf 	bl	800e5fc <ucdr_alignment>
 8012e7e:	f100 0408 	add.w	r4, r0, #8
 8012e82:	442c      	add	r4, r5
 8012e84:	2108      	movs	r1, #8
 8012e86:	4620      	mov	r0, r4
 8012e88:	f7fb fbb8 	bl	800e5fc <ucdr_alignment>
 8012e8c:	3008      	adds	r0, #8
 8012e8e:	4420      	add	r0, r4
 8012e90:	bd38      	pop	{r3, r4, r5, pc}
 8012e92:	4770      	bx	lr

08012e94 <_Quaternion__max_serialized_size>:
 8012e94:	b538      	push	{r3, r4, r5, lr}
 8012e96:	2108      	movs	r1, #8
 8012e98:	2000      	movs	r0, #0
 8012e9a:	f7fb fbaf 	bl	800e5fc <ucdr_alignment>
 8012e9e:	f100 0408 	add.w	r4, r0, #8
 8012ea2:	2108      	movs	r1, #8
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f7fb fba9 	bl	800e5fc <ucdr_alignment>
 8012eaa:	f100 0508 	add.w	r5, r0, #8
 8012eae:	4425      	add	r5, r4
 8012eb0:	2108      	movs	r1, #8
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	f7fb fba2 	bl	800e5fc <ucdr_alignment>
 8012eb8:	f100 0408 	add.w	r4, r0, #8
 8012ebc:	442c      	add	r4, r5
 8012ebe:	2108      	movs	r1, #8
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f7fb fb9b 	bl	800e5fc <ucdr_alignment>
 8012ec6:	3008      	adds	r0, #8
 8012ec8:	4420      	add	r0, r4
 8012eca:	bd38      	pop	{r3, r4, r5, pc}

08012ecc <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8012ecc:	b570      	push	{r4, r5, r6, lr}
 8012ece:	2301      	movs	r3, #1
 8012ed0:	460c      	mov	r4, r1
 8012ed2:	7003      	strb	r3, [r0, #0]
 8012ed4:	2108      	movs	r1, #8
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f7fb fb90 	bl	800e5fc <ucdr_alignment>
 8012edc:	2108      	movs	r1, #8
 8012ede:	1863      	adds	r3, r4, r1
 8012ee0:	18c5      	adds	r5, r0, r3
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f7fb fb8a 	bl	800e5fc <ucdr_alignment>
 8012ee8:	f100 0608 	add.w	r6, r0, #8
 8012eec:	442e      	add	r6, r5
 8012eee:	2108      	movs	r1, #8
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	f7fb fb83 	bl	800e5fc <ucdr_alignment>
 8012ef6:	f100 0508 	add.w	r5, r0, #8
 8012efa:	4435      	add	r5, r6
 8012efc:	2108      	movs	r1, #8
 8012efe:	4628      	mov	r0, r5
 8012f00:	f7fb fb7c 	bl	800e5fc <ucdr_alignment>
 8012f04:	f1c4 0408 	rsb	r4, r4, #8
 8012f08:	4420      	add	r0, r4
 8012f0a:	4428      	add	r0, r5
 8012f0c:	bd70      	pop	{r4, r5, r6, pc}
 8012f0e:	bf00      	nop

08012f10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8012f10:	4800      	ldr	r0, [pc, #0]	@ (8012f14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8012f12:	4770      	bx	lr
 8012f14:	20000cb0 	.word	0x20000cb0

08012f18 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8012f18:	b1b8      	cbz	r0, 8012f4a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8012f1a:	b570      	push	{r4, r5, r6, lr}
 8012f1c:	460d      	mov	r5, r1
 8012f1e:	4628      	mov	r0, r5
 8012f20:	2108      	movs	r1, #8
 8012f22:	f7fb fb6b 	bl	800e5fc <ucdr_alignment>
 8012f26:	2108      	movs	r1, #8
 8012f28:	186e      	adds	r6, r5, r1
 8012f2a:	4406      	add	r6, r0
 8012f2c:	4630      	mov	r0, r6
 8012f2e:	f7fb fb65 	bl	800e5fc <ucdr_alignment>
 8012f32:	f100 0408 	add.w	r4, r0, #8
 8012f36:	4434      	add	r4, r6
 8012f38:	2108      	movs	r1, #8
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	f7fb fb5e 	bl	800e5fc <ucdr_alignment>
 8012f40:	f1c5 0508 	rsb	r5, r5, #8
 8012f44:	4405      	add	r5, r0
 8012f46:	1928      	adds	r0, r5, r4
 8012f48:	bd70      	pop	{r4, r5, r6, pc}
 8012f4a:	4770      	bx	lr

08012f4c <_Vector3__cdr_deserialize>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	460c      	mov	r4, r1
 8012f50:	b171      	cbz	r1, 8012f70 <_Vector3__cdr_deserialize+0x24>
 8012f52:	4605      	mov	r5, r0
 8012f54:	f001 fc04 	bl	8014760 <ucdr_deserialize_double>
 8012f58:	f104 0108 	add.w	r1, r4, #8
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f001 fbff 	bl	8014760 <ucdr_deserialize_double>
 8012f62:	f104 0110 	add.w	r1, r4, #16
 8012f66:	4628      	mov	r0, r5
 8012f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f6c:	f001 bbf8 	b.w	8014760 <ucdr_deserialize_double>
 8012f70:	4608      	mov	r0, r1
 8012f72:	bd38      	pop	{r3, r4, r5, pc}

08012f74 <_Vector3__cdr_serialize>:
 8012f74:	b198      	cbz	r0, 8012f9e <_Vector3__cdr_serialize+0x2a>
 8012f76:	b538      	push	{r3, r4, r5, lr}
 8012f78:	ed90 0b00 	vldr	d0, [r0]
 8012f7c:	460d      	mov	r5, r1
 8012f7e:	4604      	mov	r4, r0
 8012f80:	4608      	mov	r0, r1
 8012f82:	f001 fa5d 	bl	8014440 <ucdr_serialize_double>
 8012f86:	ed94 0b02 	vldr	d0, [r4, #8]
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f001 fa58 	bl	8014440 <ucdr_serialize_double>
 8012f90:	ed94 0b04 	vldr	d0, [r4, #16]
 8012f94:	4628      	mov	r0, r5
 8012f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f9a:	f001 ba51 	b.w	8014440 <ucdr_serialize_double>
 8012f9e:	4770      	bx	lr

08012fa0 <_Vector3__get_serialized_size>:
 8012fa0:	b1a0      	cbz	r0, 8012fcc <_Vector3__get_serialized_size+0x2c>
 8012fa2:	b538      	push	{r3, r4, r5, lr}
 8012fa4:	2108      	movs	r1, #8
 8012fa6:	2000      	movs	r0, #0
 8012fa8:	f7fb fb28 	bl	800e5fc <ucdr_alignment>
 8012fac:	f100 0508 	add.w	r5, r0, #8
 8012fb0:	2108      	movs	r1, #8
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f7fb fb22 	bl	800e5fc <ucdr_alignment>
 8012fb8:	f100 0408 	add.w	r4, r0, #8
 8012fbc:	442c      	add	r4, r5
 8012fbe:	2108      	movs	r1, #8
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f7fb fb1b 	bl	800e5fc <ucdr_alignment>
 8012fc6:	3008      	adds	r0, #8
 8012fc8:	4420      	add	r0, r4
 8012fca:	bd38      	pop	{r3, r4, r5, pc}
 8012fcc:	4770      	bx	lr
 8012fce:	bf00      	nop

08012fd0 <_Vector3__max_serialized_size>:
 8012fd0:	b538      	push	{r3, r4, r5, lr}
 8012fd2:	2108      	movs	r1, #8
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	f7fb fb11 	bl	800e5fc <ucdr_alignment>
 8012fda:	f100 0508 	add.w	r5, r0, #8
 8012fde:	2108      	movs	r1, #8
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	f7fb fb0b 	bl	800e5fc <ucdr_alignment>
 8012fe6:	f100 0408 	add.w	r4, r0, #8
 8012fea:	442c      	add	r4, r5
 8012fec:	2108      	movs	r1, #8
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f7fb fb04 	bl	800e5fc <ucdr_alignment>
 8012ff4:	3008      	adds	r0, #8
 8012ff6:	4420      	add	r0, r4
 8012ff8:	bd38      	pop	{r3, r4, r5, pc}
 8012ffa:	bf00      	nop

08012ffc <max_serialized_size_geometry_msgs__msg__Vector3>:
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	2301      	movs	r3, #1
 8013000:	460c      	mov	r4, r1
 8013002:	7003      	strb	r3, [r0, #0]
 8013004:	2108      	movs	r1, #8
 8013006:	4620      	mov	r0, r4
 8013008:	f7fb faf8 	bl	800e5fc <ucdr_alignment>
 801300c:	2108      	movs	r1, #8
 801300e:	1863      	adds	r3, r4, r1
 8013010:	18c6      	adds	r6, r0, r3
 8013012:	4630      	mov	r0, r6
 8013014:	f7fb faf2 	bl	800e5fc <ucdr_alignment>
 8013018:	f100 0508 	add.w	r5, r0, #8
 801301c:	4435      	add	r5, r6
 801301e:	2108      	movs	r1, #8
 8013020:	4628      	mov	r0, r5
 8013022:	f7fb faeb 	bl	800e5fc <ucdr_alignment>
 8013026:	f1c4 0408 	rsb	r4, r4, #8
 801302a:	4420      	add	r0, r4
 801302c:	4428      	add	r0, r5
 801302e:	bd70      	pop	{r4, r5, r6, pc}

08013030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8013030:	4800      	ldr	r0, [pc, #0]	@ (8013034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8013032:	4770      	bx	lr
 8013034:	20000ce4 	.word	0x20000ce4

08013038 <ucdr_serialize_endian_array_char>:
 8013038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303c:	4619      	mov	r1, r3
 801303e:	461f      	mov	r7, r3
 8013040:	4605      	mov	r5, r0
 8013042:	4690      	mov	r8, r2
 8013044:	f7fb fa82 	bl	800e54c <ucdr_check_buffer_available_for>
 8013048:	b9e0      	cbnz	r0, 8013084 <ucdr_serialize_endian_array_char+0x4c>
 801304a:	463e      	mov	r6, r7
 801304c:	e009      	b.n	8013062 <ucdr_serialize_endian_array_char+0x2a>
 801304e:	68a8      	ldr	r0, [r5, #8]
 8013050:	f00a ffe7 	bl	801e022 <memcpy>
 8013054:	68ab      	ldr	r3, [r5, #8]
 8013056:	6928      	ldr	r0, [r5, #16]
 8013058:	4423      	add	r3, r4
 801305a:	4420      	add	r0, r4
 801305c:	1b36      	subs	r6, r6, r4
 801305e:	60ab      	str	r3, [r5, #8]
 8013060:	6128      	str	r0, [r5, #16]
 8013062:	2201      	movs	r2, #1
 8013064:	4631      	mov	r1, r6
 8013066:	4628      	mov	r0, r5
 8013068:	f7fb faf8 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 801306c:	1bb9      	subs	r1, r7, r6
 801306e:	4604      	mov	r4, r0
 8013070:	4602      	mov	r2, r0
 8013072:	4441      	add	r1, r8
 8013074:	2800      	cmp	r0, #0
 8013076:	d1ea      	bne.n	801304e <ucdr_serialize_endian_array_char+0x16>
 8013078:	2301      	movs	r3, #1
 801307a:	7da8      	ldrb	r0, [r5, #22]
 801307c:	756b      	strb	r3, [r5, #21]
 801307e:	4058      	eors	r0, r3
 8013080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013084:	463a      	mov	r2, r7
 8013086:	68a8      	ldr	r0, [r5, #8]
 8013088:	4641      	mov	r1, r8
 801308a:	f00a ffca 	bl	801e022 <memcpy>
 801308e:	68aa      	ldr	r2, [r5, #8]
 8013090:	692b      	ldr	r3, [r5, #16]
 8013092:	443a      	add	r2, r7
 8013094:	443b      	add	r3, r7
 8013096:	60aa      	str	r2, [r5, #8]
 8013098:	612b      	str	r3, [r5, #16]
 801309a:	e7ed      	b.n	8013078 <ucdr_serialize_endian_array_char+0x40>

0801309c <ucdr_deserialize_endian_array_char>:
 801309c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a0:	4619      	mov	r1, r3
 80130a2:	461f      	mov	r7, r3
 80130a4:	4605      	mov	r5, r0
 80130a6:	4690      	mov	r8, r2
 80130a8:	f7fb fa50 	bl	800e54c <ucdr_check_buffer_available_for>
 80130ac:	b9e0      	cbnz	r0, 80130e8 <ucdr_deserialize_endian_array_char+0x4c>
 80130ae:	463e      	mov	r6, r7
 80130b0:	e009      	b.n	80130c6 <ucdr_deserialize_endian_array_char+0x2a>
 80130b2:	68a9      	ldr	r1, [r5, #8]
 80130b4:	f00a ffb5 	bl	801e022 <memcpy>
 80130b8:	68aa      	ldr	r2, [r5, #8]
 80130ba:	692b      	ldr	r3, [r5, #16]
 80130bc:	4422      	add	r2, r4
 80130be:	4423      	add	r3, r4
 80130c0:	1b36      	subs	r6, r6, r4
 80130c2:	60aa      	str	r2, [r5, #8]
 80130c4:	612b      	str	r3, [r5, #16]
 80130c6:	2201      	movs	r2, #1
 80130c8:	4631      	mov	r1, r6
 80130ca:	4628      	mov	r0, r5
 80130cc:	f7fb fac6 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 80130d0:	4604      	mov	r4, r0
 80130d2:	1bb8      	subs	r0, r7, r6
 80130d4:	4622      	mov	r2, r4
 80130d6:	4440      	add	r0, r8
 80130d8:	2c00      	cmp	r4, #0
 80130da:	d1ea      	bne.n	80130b2 <ucdr_deserialize_endian_array_char+0x16>
 80130dc:	2301      	movs	r3, #1
 80130de:	7da8      	ldrb	r0, [r5, #22]
 80130e0:	756b      	strb	r3, [r5, #21]
 80130e2:	4058      	eors	r0, r3
 80130e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e8:	463a      	mov	r2, r7
 80130ea:	68a9      	ldr	r1, [r5, #8]
 80130ec:	4640      	mov	r0, r8
 80130ee:	f00a ff98 	bl	801e022 <memcpy>
 80130f2:	68aa      	ldr	r2, [r5, #8]
 80130f4:	692b      	ldr	r3, [r5, #16]
 80130f6:	443a      	add	r2, r7
 80130f8:	443b      	add	r3, r7
 80130fa:	60aa      	str	r2, [r5, #8]
 80130fc:	612b      	str	r3, [r5, #16]
 80130fe:	e7ed      	b.n	80130dc <ucdr_deserialize_endian_array_char+0x40>

08013100 <ucdr_serialize_array_uint8_t>:
 8013100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013104:	4688      	mov	r8, r1
 8013106:	4611      	mov	r1, r2
 8013108:	4617      	mov	r7, r2
 801310a:	4605      	mov	r5, r0
 801310c:	f7fb fa1e 	bl	800e54c <ucdr_check_buffer_available_for>
 8013110:	b9e0      	cbnz	r0, 801314c <ucdr_serialize_array_uint8_t+0x4c>
 8013112:	463e      	mov	r6, r7
 8013114:	e009      	b.n	801312a <ucdr_serialize_array_uint8_t+0x2a>
 8013116:	68a8      	ldr	r0, [r5, #8]
 8013118:	f00a ff83 	bl	801e022 <memcpy>
 801311c:	68aa      	ldr	r2, [r5, #8]
 801311e:	692b      	ldr	r3, [r5, #16]
 8013120:	4422      	add	r2, r4
 8013122:	4423      	add	r3, r4
 8013124:	1b36      	subs	r6, r6, r4
 8013126:	60aa      	str	r2, [r5, #8]
 8013128:	612b      	str	r3, [r5, #16]
 801312a:	2201      	movs	r2, #1
 801312c:	4631      	mov	r1, r6
 801312e:	4628      	mov	r0, r5
 8013130:	f7fb fa94 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 8013134:	1bb9      	subs	r1, r7, r6
 8013136:	4604      	mov	r4, r0
 8013138:	4602      	mov	r2, r0
 801313a:	4441      	add	r1, r8
 801313c:	2800      	cmp	r0, #0
 801313e:	d1ea      	bne.n	8013116 <ucdr_serialize_array_uint8_t+0x16>
 8013140:	2301      	movs	r3, #1
 8013142:	7da8      	ldrb	r0, [r5, #22]
 8013144:	756b      	strb	r3, [r5, #21]
 8013146:	4058      	eors	r0, r3
 8013148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801314c:	463a      	mov	r2, r7
 801314e:	68a8      	ldr	r0, [r5, #8]
 8013150:	4641      	mov	r1, r8
 8013152:	f00a ff66 	bl	801e022 <memcpy>
 8013156:	68aa      	ldr	r2, [r5, #8]
 8013158:	692b      	ldr	r3, [r5, #16]
 801315a:	443a      	add	r2, r7
 801315c:	443b      	add	r3, r7
 801315e:	60aa      	str	r2, [r5, #8]
 8013160:	612b      	str	r3, [r5, #16]
 8013162:	e7ed      	b.n	8013140 <ucdr_serialize_array_uint8_t+0x40>

08013164 <ucdr_serialize_endian_array_uint8_t>:
 8013164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013168:	4619      	mov	r1, r3
 801316a:	461f      	mov	r7, r3
 801316c:	4605      	mov	r5, r0
 801316e:	4690      	mov	r8, r2
 8013170:	f7fb f9ec 	bl	800e54c <ucdr_check_buffer_available_for>
 8013174:	b9e0      	cbnz	r0, 80131b0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013176:	463e      	mov	r6, r7
 8013178:	e009      	b.n	801318e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801317a:	68a8      	ldr	r0, [r5, #8]
 801317c:	f00a ff51 	bl	801e022 <memcpy>
 8013180:	68ab      	ldr	r3, [r5, #8]
 8013182:	6928      	ldr	r0, [r5, #16]
 8013184:	4423      	add	r3, r4
 8013186:	4420      	add	r0, r4
 8013188:	1b36      	subs	r6, r6, r4
 801318a:	60ab      	str	r3, [r5, #8]
 801318c:	6128      	str	r0, [r5, #16]
 801318e:	2201      	movs	r2, #1
 8013190:	4631      	mov	r1, r6
 8013192:	4628      	mov	r0, r5
 8013194:	f7fb fa62 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 8013198:	1bb9      	subs	r1, r7, r6
 801319a:	4604      	mov	r4, r0
 801319c:	4602      	mov	r2, r0
 801319e:	4441      	add	r1, r8
 80131a0:	2800      	cmp	r0, #0
 80131a2:	d1ea      	bne.n	801317a <ucdr_serialize_endian_array_uint8_t+0x16>
 80131a4:	2301      	movs	r3, #1
 80131a6:	7da8      	ldrb	r0, [r5, #22]
 80131a8:	756b      	strb	r3, [r5, #21]
 80131aa:	4058      	eors	r0, r3
 80131ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b0:	463a      	mov	r2, r7
 80131b2:	68a8      	ldr	r0, [r5, #8]
 80131b4:	4641      	mov	r1, r8
 80131b6:	f00a ff34 	bl	801e022 <memcpy>
 80131ba:	68aa      	ldr	r2, [r5, #8]
 80131bc:	692b      	ldr	r3, [r5, #16]
 80131be:	443a      	add	r2, r7
 80131c0:	443b      	add	r3, r7
 80131c2:	60aa      	str	r2, [r5, #8]
 80131c4:	612b      	str	r3, [r5, #16]
 80131c6:	e7ed      	b.n	80131a4 <ucdr_serialize_endian_array_uint8_t+0x40>

080131c8 <ucdr_deserialize_array_uint8_t>:
 80131c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131cc:	4688      	mov	r8, r1
 80131ce:	4611      	mov	r1, r2
 80131d0:	4617      	mov	r7, r2
 80131d2:	4605      	mov	r5, r0
 80131d4:	f7fb f9ba 	bl	800e54c <ucdr_check_buffer_available_for>
 80131d8:	b9e0      	cbnz	r0, 8013214 <ucdr_deserialize_array_uint8_t+0x4c>
 80131da:	463e      	mov	r6, r7
 80131dc:	e009      	b.n	80131f2 <ucdr_deserialize_array_uint8_t+0x2a>
 80131de:	68a9      	ldr	r1, [r5, #8]
 80131e0:	f00a ff1f 	bl	801e022 <memcpy>
 80131e4:	68aa      	ldr	r2, [r5, #8]
 80131e6:	692b      	ldr	r3, [r5, #16]
 80131e8:	4422      	add	r2, r4
 80131ea:	4423      	add	r3, r4
 80131ec:	1b36      	subs	r6, r6, r4
 80131ee:	60aa      	str	r2, [r5, #8]
 80131f0:	612b      	str	r3, [r5, #16]
 80131f2:	2201      	movs	r2, #1
 80131f4:	4631      	mov	r1, r6
 80131f6:	4628      	mov	r0, r5
 80131f8:	f7fb fa30 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 80131fc:	4604      	mov	r4, r0
 80131fe:	1bb8      	subs	r0, r7, r6
 8013200:	4622      	mov	r2, r4
 8013202:	4440      	add	r0, r8
 8013204:	2c00      	cmp	r4, #0
 8013206:	d1ea      	bne.n	80131de <ucdr_deserialize_array_uint8_t+0x16>
 8013208:	2301      	movs	r3, #1
 801320a:	7da8      	ldrb	r0, [r5, #22]
 801320c:	756b      	strb	r3, [r5, #21]
 801320e:	4058      	eors	r0, r3
 8013210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013214:	463a      	mov	r2, r7
 8013216:	68a9      	ldr	r1, [r5, #8]
 8013218:	4640      	mov	r0, r8
 801321a:	f00a ff02 	bl	801e022 <memcpy>
 801321e:	68aa      	ldr	r2, [r5, #8]
 8013220:	692b      	ldr	r3, [r5, #16]
 8013222:	443a      	add	r2, r7
 8013224:	443b      	add	r3, r7
 8013226:	60aa      	str	r2, [r5, #8]
 8013228:	612b      	str	r3, [r5, #16]
 801322a:	e7ed      	b.n	8013208 <ucdr_deserialize_array_uint8_t+0x40>

0801322c <ucdr_deserialize_endian_array_uint8_t>:
 801322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013230:	4619      	mov	r1, r3
 8013232:	461f      	mov	r7, r3
 8013234:	4605      	mov	r5, r0
 8013236:	4690      	mov	r8, r2
 8013238:	f7fb f988 	bl	800e54c <ucdr_check_buffer_available_for>
 801323c:	b9e0      	cbnz	r0, 8013278 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801323e:	463e      	mov	r6, r7
 8013240:	e009      	b.n	8013256 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013242:	68a9      	ldr	r1, [r5, #8]
 8013244:	f00a feed 	bl	801e022 <memcpy>
 8013248:	68aa      	ldr	r2, [r5, #8]
 801324a:	692b      	ldr	r3, [r5, #16]
 801324c:	4422      	add	r2, r4
 801324e:	4423      	add	r3, r4
 8013250:	1b36      	subs	r6, r6, r4
 8013252:	60aa      	str	r2, [r5, #8]
 8013254:	612b      	str	r3, [r5, #16]
 8013256:	2201      	movs	r2, #1
 8013258:	4631      	mov	r1, r6
 801325a:	4628      	mov	r0, r5
 801325c:	f7fb f9fe 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 8013260:	4604      	mov	r4, r0
 8013262:	1bb8      	subs	r0, r7, r6
 8013264:	4622      	mov	r2, r4
 8013266:	4440      	add	r0, r8
 8013268:	2c00      	cmp	r4, #0
 801326a:	d1ea      	bne.n	8013242 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801326c:	2301      	movs	r3, #1
 801326e:	7da8      	ldrb	r0, [r5, #22]
 8013270:	756b      	strb	r3, [r5, #21]
 8013272:	4058      	eors	r0, r3
 8013274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013278:	463a      	mov	r2, r7
 801327a:	68a9      	ldr	r1, [r5, #8]
 801327c:	4640      	mov	r0, r8
 801327e:	f00a fed0 	bl	801e022 <memcpy>
 8013282:	68aa      	ldr	r2, [r5, #8]
 8013284:	692b      	ldr	r3, [r5, #16]
 8013286:	443a      	add	r2, r7
 8013288:	443b      	add	r3, r7
 801328a:	60aa      	str	r2, [r5, #8]
 801328c:	612b      	str	r3, [r5, #16]
 801328e:	e7ed      	b.n	801326c <ucdr_deserialize_endian_array_uint8_t+0x40>

08013290 <ucdr_serialize_array_double>:
 8013290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013294:	460e      	mov	r6, r1
 8013296:	2108      	movs	r1, #8
 8013298:	4604      	mov	r4, r0
 801329a:	4617      	mov	r7, r2
 801329c:	f7fb f9b6 	bl	800e60c <ucdr_buffer_alignment>
 80132a0:	4601      	mov	r1, r0
 80132a2:	4620      	mov	r0, r4
 80132a4:	7d65      	ldrb	r5, [r4, #21]
 80132a6:	f7fb f9f5 	bl	800e694 <ucdr_advance_buffer>
 80132aa:	7d21      	ldrb	r1, [r4, #20]
 80132ac:	7565      	strb	r5, [r4, #21]
 80132ae:	2901      	cmp	r1, #1
 80132b0:	d010      	beq.n	80132d4 <ucdr_serialize_array_double+0x44>
 80132b2:	b157      	cbz	r7, 80132ca <ucdr_serialize_array_double+0x3a>
 80132b4:	2500      	movs	r5, #0
 80132b6:	e000      	b.n	80132ba <ucdr_serialize_array_double+0x2a>
 80132b8:	7d21      	ldrb	r1, [r4, #20]
 80132ba:	ecb6 0b02 	vldmia	r6!, {d0}
 80132be:	4620      	mov	r0, r4
 80132c0:	3501      	adds	r5, #1
 80132c2:	f001 f985 	bl	80145d0 <ucdr_serialize_endian_double>
 80132c6:	42af      	cmp	r7, r5
 80132c8:	d1f6      	bne.n	80132b8 <ucdr_serialize_array_double+0x28>
 80132ca:	7da0      	ldrb	r0, [r4, #22]
 80132cc:	f080 0001 	eor.w	r0, r0, #1
 80132d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d4:	00ff      	lsls	r7, r7, #3
 80132d6:	4639      	mov	r1, r7
 80132d8:	4620      	mov	r0, r4
 80132da:	f7fb f937 	bl	800e54c <ucdr_check_buffer_available_for>
 80132de:	b9f8      	cbnz	r0, 8013320 <ucdr_serialize_array_double+0x90>
 80132e0:	46b8      	mov	r8, r7
 80132e2:	e00a      	b.n	80132fa <ucdr_serialize_array_double+0x6a>
 80132e4:	68a0      	ldr	r0, [r4, #8]
 80132e6:	f00a fe9c 	bl	801e022 <memcpy>
 80132ea:	68a2      	ldr	r2, [r4, #8]
 80132ec:	6923      	ldr	r3, [r4, #16]
 80132ee:	442a      	add	r2, r5
 80132f0:	442b      	add	r3, r5
 80132f2:	eba8 0805 	sub.w	r8, r8, r5
 80132f6:	60a2      	str	r2, [r4, #8]
 80132f8:	6123      	str	r3, [r4, #16]
 80132fa:	2208      	movs	r2, #8
 80132fc:	4641      	mov	r1, r8
 80132fe:	4620      	mov	r0, r4
 8013300:	f7fb f9ac 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 8013304:	eba7 0108 	sub.w	r1, r7, r8
 8013308:	4605      	mov	r5, r0
 801330a:	4602      	mov	r2, r0
 801330c:	4431      	add	r1, r6
 801330e:	2800      	cmp	r0, #0
 8013310:	d1e8      	bne.n	80132e4 <ucdr_serialize_array_double+0x54>
 8013312:	7da0      	ldrb	r0, [r4, #22]
 8013314:	2308      	movs	r3, #8
 8013316:	7563      	strb	r3, [r4, #21]
 8013318:	f080 0001 	eor.w	r0, r0, #1
 801331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013320:	463a      	mov	r2, r7
 8013322:	68a0      	ldr	r0, [r4, #8]
 8013324:	4631      	mov	r1, r6
 8013326:	f00a fe7c 	bl	801e022 <memcpy>
 801332a:	68a2      	ldr	r2, [r4, #8]
 801332c:	6923      	ldr	r3, [r4, #16]
 801332e:	443a      	add	r2, r7
 8013330:	443b      	add	r3, r7
 8013332:	60a2      	str	r2, [r4, #8]
 8013334:	6123      	str	r3, [r4, #16]
 8013336:	e7ec      	b.n	8013312 <ucdr_serialize_array_double+0x82>

08013338 <ucdr_serialize_endian_array_double>:
 8013338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801333c:	4688      	mov	r8, r1
 801333e:	2108      	movs	r1, #8
 8013340:	4604      	mov	r4, r0
 8013342:	4616      	mov	r6, r2
 8013344:	461f      	mov	r7, r3
 8013346:	f7fb f961 	bl	800e60c <ucdr_buffer_alignment>
 801334a:	4601      	mov	r1, r0
 801334c:	4620      	mov	r0, r4
 801334e:	7d65      	ldrb	r5, [r4, #21]
 8013350:	f7fb f9a0 	bl	800e694 <ucdr_advance_buffer>
 8013354:	f1b8 0f01 	cmp.w	r8, #1
 8013358:	7565      	strb	r5, [r4, #21]
 801335a:	d00f      	beq.n	801337c <ucdr_serialize_endian_array_double+0x44>
 801335c:	2500      	movs	r5, #0
 801335e:	b147      	cbz	r7, 8013372 <ucdr_serialize_endian_array_double+0x3a>
 8013360:	ecb6 0b02 	vldmia	r6!, {d0}
 8013364:	4641      	mov	r1, r8
 8013366:	4620      	mov	r0, r4
 8013368:	3501      	adds	r5, #1
 801336a:	f001 f931 	bl	80145d0 <ucdr_serialize_endian_double>
 801336e:	42af      	cmp	r7, r5
 8013370:	d1f6      	bne.n	8013360 <ucdr_serialize_endian_array_double+0x28>
 8013372:	7da0      	ldrb	r0, [r4, #22]
 8013374:	f080 0001 	eor.w	r0, r0, #1
 8013378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337c:	00ff      	lsls	r7, r7, #3
 801337e:	4639      	mov	r1, r7
 8013380:	4620      	mov	r0, r4
 8013382:	f7fb f8e3 	bl	800e54c <ucdr_check_buffer_available_for>
 8013386:	b9f8      	cbnz	r0, 80133c8 <ucdr_serialize_endian_array_double+0x90>
 8013388:	46b8      	mov	r8, r7
 801338a:	e00a      	b.n	80133a2 <ucdr_serialize_endian_array_double+0x6a>
 801338c:	68a0      	ldr	r0, [r4, #8]
 801338e:	f00a fe48 	bl	801e022 <memcpy>
 8013392:	68a2      	ldr	r2, [r4, #8]
 8013394:	6923      	ldr	r3, [r4, #16]
 8013396:	442a      	add	r2, r5
 8013398:	442b      	add	r3, r5
 801339a:	eba8 0805 	sub.w	r8, r8, r5
 801339e:	60a2      	str	r2, [r4, #8]
 80133a0:	6123      	str	r3, [r4, #16]
 80133a2:	2208      	movs	r2, #8
 80133a4:	4641      	mov	r1, r8
 80133a6:	4620      	mov	r0, r4
 80133a8:	f7fb f958 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 80133ac:	eba7 0108 	sub.w	r1, r7, r8
 80133b0:	4605      	mov	r5, r0
 80133b2:	4602      	mov	r2, r0
 80133b4:	4431      	add	r1, r6
 80133b6:	2800      	cmp	r0, #0
 80133b8:	d1e8      	bne.n	801338c <ucdr_serialize_endian_array_double+0x54>
 80133ba:	7da0      	ldrb	r0, [r4, #22]
 80133bc:	2308      	movs	r3, #8
 80133be:	7563      	strb	r3, [r4, #21]
 80133c0:	f080 0001 	eor.w	r0, r0, #1
 80133c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133c8:	463a      	mov	r2, r7
 80133ca:	68a0      	ldr	r0, [r4, #8]
 80133cc:	4631      	mov	r1, r6
 80133ce:	f00a fe28 	bl	801e022 <memcpy>
 80133d2:	68a2      	ldr	r2, [r4, #8]
 80133d4:	6923      	ldr	r3, [r4, #16]
 80133d6:	443a      	add	r2, r7
 80133d8:	443b      	add	r3, r7
 80133da:	60a2      	str	r2, [r4, #8]
 80133dc:	6123      	str	r3, [r4, #16]
 80133de:	e7ec      	b.n	80133ba <ucdr_serialize_endian_array_double+0x82>

080133e0 <ucdr_deserialize_array_double>:
 80133e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e4:	460e      	mov	r6, r1
 80133e6:	2108      	movs	r1, #8
 80133e8:	4604      	mov	r4, r0
 80133ea:	4617      	mov	r7, r2
 80133ec:	f7fb f90e 	bl	800e60c <ucdr_buffer_alignment>
 80133f0:	4601      	mov	r1, r0
 80133f2:	4620      	mov	r0, r4
 80133f4:	7d65      	ldrb	r5, [r4, #21]
 80133f6:	f7fb f94d 	bl	800e694 <ucdr_advance_buffer>
 80133fa:	7d21      	ldrb	r1, [r4, #20]
 80133fc:	7565      	strb	r5, [r4, #21]
 80133fe:	2901      	cmp	r1, #1
 8013400:	d011      	beq.n	8013426 <ucdr_deserialize_array_double+0x46>
 8013402:	b15f      	cbz	r7, 801341c <ucdr_deserialize_array_double+0x3c>
 8013404:	2500      	movs	r5, #0
 8013406:	e000      	b.n	801340a <ucdr_deserialize_array_double+0x2a>
 8013408:	7d21      	ldrb	r1, [r4, #20]
 801340a:	4632      	mov	r2, r6
 801340c:	4620      	mov	r0, r4
 801340e:	3501      	adds	r5, #1
 8013410:	f001 fa64 	bl	80148dc <ucdr_deserialize_endian_double>
 8013414:	42af      	cmp	r7, r5
 8013416:	f106 0608 	add.w	r6, r6, #8
 801341a:	d1f5      	bne.n	8013408 <ucdr_deserialize_array_double+0x28>
 801341c:	7da0      	ldrb	r0, [r4, #22]
 801341e:	f080 0001 	eor.w	r0, r0, #1
 8013422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013426:	00ff      	lsls	r7, r7, #3
 8013428:	4639      	mov	r1, r7
 801342a:	4620      	mov	r0, r4
 801342c:	f7fb f88e 	bl	800e54c <ucdr_check_buffer_available_for>
 8013430:	b9f8      	cbnz	r0, 8013472 <ucdr_deserialize_array_double+0x92>
 8013432:	46b8      	mov	r8, r7
 8013434:	e00a      	b.n	801344c <ucdr_deserialize_array_double+0x6c>
 8013436:	68a1      	ldr	r1, [r4, #8]
 8013438:	f00a fdf3 	bl	801e022 <memcpy>
 801343c:	68a2      	ldr	r2, [r4, #8]
 801343e:	6923      	ldr	r3, [r4, #16]
 8013440:	442a      	add	r2, r5
 8013442:	442b      	add	r3, r5
 8013444:	eba8 0805 	sub.w	r8, r8, r5
 8013448:	60a2      	str	r2, [r4, #8]
 801344a:	6123      	str	r3, [r4, #16]
 801344c:	2208      	movs	r2, #8
 801344e:	4641      	mov	r1, r8
 8013450:	4620      	mov	r0, r4
 8013452:	f7fb f903 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 8013456:	4605      	mov	r5, r0
 8013458:	eba7 0008 	sub.w	r0, r7, r8
 801345c:	462a      	mov	r2, r5
 801345e:	4430      	add	r0, r6
 8013460:	2d00      	cmp	r5, #0
 8013462:	d1e8      	bne.n	8013436 <ucdr_deserialize_array_double+0x56>
 8013464:	7da0      	ldrb	r0, [r4, #22]
 8013466:	2308      	movs	r3, #8
 8013468:	7563      	strb	r3, [r4, #21]
 801346a:	f080 0001 	eor.w	r0, r0, #1
 801346e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013472:	463a      	mov	r2, r7
 8013474:	68a1      	ldr	r1, [r4, #8]
 8013476:	4630      	mov	r0, r6
 8013478:	f00a fdd3 	bl	801e022 <memcpy>
 801347c:	68a2      	ldr	r2, [r4, #8]
 801347e:	6923      	ldr	r3, [r4, #16]
 8013480:	443a      	add	r2, r7
 8013482:	443b      	add	r3, r7
 8013484:	60a2      	str	r2, [r4, #8]
 8013486:	6123      	str	r3, [r4, #16]
 8013488:	e7ec      	b.n	8013464 <ucdr_deserialize_array_double+0x84>
 801348a:	bf00      	nop

0801348c <ucdr_deserialize_endian_array_double>:
 801348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013490:	4688      	mov	r8, r1
 8013492:	2108      	movs	r1, #8
 8013494:	4605      	mov	r5, r0
 8013496:	4614      	mov	r4, r2
 8013498:	461f      	mov	r7, r3
 801349a:	f7fb f8b7 	bl	800e60c <ucdr_buffer_alignment>
 801349e:	4601      	mov	r1, r0
 80134a0:	4628      	mov	r0, r5
 80134a2:	7d6e      	ldrb	r6, [r5, #21]
 80134a4:	f7fb f8f6 	bl	800e694 <ucdr_advance_buffer>
 80134a8:	f1b8 0f01 	cmp.w	r8, #1
 80134ac:	756e      	strb	r6, [r5, #21]
 80134ae:	d010      	beq.n	80134d2 <ucdr_deserialize_endian_array_double+0x46>
 80134b0:	2600      	movs	r6, #0
 80134b2:	b14f      	cbz	r7, 80134c8 <ucdr_deserialize_endian_array_double+0x3c>
 80134b4:	4622      	mov	r2, r4
 80134b6:	4641      	mov	r1, r8
 80134b8:	4628      	mov	r0, r5
 80134ba:	3601      	adds	r6, #1
 80134bc:	f001 fa0e 	bl	80148dc <ucdr_deserialize_endian_double>
 80134c0:	42b7      	cmp	r7, r6
 80134c2:	f104 0408 	add.w	r4, r4, #8
 80134c6:	d1f5      	bne.n	80134b4 <ucdr_deserialize_endian_array_double+0x28>
 80134c8:	7da8      	ldrb	r0, [r5, #22]
 80134ca:	f080 0001 	eor.w	r0, r0, #1
 80134ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d2:	00ff      	lsls	r7, r7, #3
 80134d4:	4639      	mov	r1, r7
 80134d6:	4628      	mov	r0, r5
 80134d8:	f7fb f838 	bl	800e54c <ucdr_check_buffer_available_for>
 80134dc:	b9f8      	cbnz	r0, 801351e <ucdr_deserialize_endian_array_double+0x92>
 80134de:	46b8      	mov	r8, r7
 80134e0:	e00a      	b.n	80134f8 <ucdr_deserialize_endian_array_double+0x6c>
 80134e2:	68a9      	ldr	r1, [r5, #8]
 80134e4:	f00a fd9d 	bl	801e022 <memcpy>
 80134e8:	68aa      	ldr	r2, [r5, #8]
 80134ea:	692b      	ldr	r3, [r5, #16]
 80134ec:	4432      	add	r2, r6
 80134ee:	4433      	add	r3, r6
 80134f0:	eba8 0806 	sub.w	r8, r8, r6
 80134f4:	60aa      	str	r2, [r5, #8]
 80134f6:	612b      	str	r3, [r5, #16]
 80134f8:	2208      	movs	r2, #8
 80134fa:	4641      	mov	r1, r8
 80134fc:	4628      	mov	r0, r5
 80134fe:	f7fb f8ad 	bl	800e65c <ucdr_check_final_buffer_behavior_array>
 8013502:	4606      	mov	r6, r0
 8013504:	eba7 0008 	sub.w	r0, r7, r8
 8013508:	4632      	mov	r2, r6
 801350a:	4420      	add	r0, r4
 801350c:	2e00      	cmp	r6, #0
 801350e:	d1e8      	bne.n	80134e2 <ucdr_deserialize_endian_array_double+0x56>
 8013510:	7da8      	ldrb	r0, [r5, #22]
 8013512:	2308      	movs	r3, #8
 8013514:	756b      	strb	r3, [r5, #21]
 8013516:	f080 0001 	eor.w	r0, r0, #1
 801351a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801351e:	463a      	mov	r2, r7
 8013520:	68a9      	ldr	r1, [r5, #8]
 8013522:	4620      	mov	r0, r4
 8013524:	f00a fd7d 	bl	801e022 <memcpy>
 8013528:	68aa      	ldr	r2, [r5, #8]
 801352a:	692b      	ldr	r3, [r5, #16]
 801352c:	443a      	add	r2, r7
 801352e:	443b      	add	r3, r7
 8013530:	60aa      	str	r2, [r5, #8]
 8013532:	612b      	str	r3, [r5, #16]
 8013534:	e7ec      	b.n	8013510 <ucdr_deserialize_endian_array_double+0x84>
 8013536:	bf00      	nop

08013538 <ucdr_serialize_bool>:
 8013538:	b538      	push	{r3, r4, r5, lr}
 801353a:	460d      	mov	r5, r1
 801353c:	2101      	movs	r1, #1
 801353e:	4604      	mov	r4, r0
 8013540:	f7fb f810 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013544:	b148      	cbz	r0, 801355a <ucdr_serialize_bool+0x22>
 8013546:	68a3      	ldr	r3, [r4, #8]
 8013548:	701d      	strb	r5, [r3, #0]
 801354a:	68a2      	ldr	r2, [r4, #8]
 801354c:	6923      	ldr	r3, [r4, #16]
 801354e:	2101      	movs	r1, #1
 8013550:	440a      	add	r2, r1
 8013552:	440b      	add	r3, r1
 8013554:	60a2      	str	r2, [r4, #8]
 8013556:	6123      	str	r3, [r4, #16]
 8013558:	7561      	strb	r1, [r4, #21]
 801355a:	7da0      	ldrb	r0, [r4, #22]
 801355c:	f080 0001 	eor.w	r0, r0, #1
 8013560:	bd38      	pop	{r3, r4, r5, pc}
 8013562:	bf00      	nop

08013564 <ucdr_deserialize_bool>:
 8013564:	b538      	push	{r3, r4, r5, lr}
 8013566:	460d      	mov	r5, r1
 8013568:	2101      	movs	r1, #1
 801356a:	4604      	mov	r4, r0
 801356c:	f7fa fffa 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013570:	b160      	cbz	r0, 801358c <ucdr_deserialize_bool+0x28>
 8013572:	68a2      	ldr	r2, [r4, #8]
 8013574:	6923      	ldr	r3, [r4, #16]
 8013576:	f812 1b01 	ldrb.w	r1, [r2], #1
 801357a:	3900      	subs	r1, #0
 801357c:	bf18      	it	ne
 801357e:	2101      	movne	r1, #1
 8013580:	7029      	strb	r1, [r5, #0]
 8013582:	3301      	adds	r3, #1
 8013584:	2101      	movs	r1, #1
 8013586:	60a2      	str	r2, [r4, #8]
 8013588:	6123      	str	r3, [r4, #16]
 801358a:	7561      	strb	r1, [r4, #21]
 801358c:	7da0      	ldrb	r0, [r4, #22]
 801358e:	f080 0001 	eor.w	r0, r0, #1
 8013592:	bd38      	pop	{r3, r4, r5, pc}

08013594 <ucdr_serialize_uint8_t>:
 8013594:	b538      	push	{r3, r4, r5, lr}
 8013596:	460d      	mov	r5, r1
 8013598:	2101      	movs	r1, #1
 801359a:	4604      	mov	r4, r0
 801359c:	f7fa ffe2 	bl	800e564 <ucdr_check_final_buffer_behavior>
 80135a0:	b148      	cbz	r0, 80135b6 <ucdr_serialize_uint8_t+0x22>
 80135a2:	68a3      	ldr	r3, [r4, #8]
 80135a4:	701d      	strb	r5, [r3, #0]
 80135a6:	68a2      	ldr	r2, [r4, #8]
 80135a8:	6923      	ldr	r3, [r4, #16]
 80135aa:	2101      	movs	r1, #1
 80135ac:	440a      	add	r2, r1
 80135ae:	440b      	add	r3, r1
 80135b0:	60a2      	str	r2, [r4, #8]
 80135b2:	6123      	str	r3, [r4, #16]
 80135b4:	7561      	strb	r1, [r4, #21]
 80135b6:	7da0      	ldrb	r0, [r4, #22]
 80135b8:	f080 0001 	eor.w	r0, r0, #1
 80135bc:	bd38      	pop	{r3, r4, r5, pc}
 80135be:	bf00      	nop

080135c0 <ucdr_deserialize_uint8_t>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	460d      	mov	r5, r1
 80135c4:	2101      	movs	r1, #1
 80135c6:	4604      	mov	r4, r0
 80135c8:	f7fa ffcc 	bl	800e564 <ucdr_check_final_buffer_behavior>
 80135cc:	b150      	cbz	r0, 80135e4 <ucdr_deserialize_uint8_t+0x24>
 80135ce:	68a3      	ldr	r3, [r4, #8]
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	702b      	strb	r3, [r5, #0]
 80135d4:	68a2      	ldr	r2, [r4, #8]
 80135d6:	6923      	ldr	r3, [r4, #16]
 80135d8:	2101      	movs	r1, #1
 80135da:	440a      	add	r2, r1
 80135dc:	440b      	add	r3, r1
 80135de:	60a2      	str	r2, [r4, #8]
 80135e0:	6123      	str	r3, [r4, #16]
 80135e2:	7561      	strb	r1, [r4, #21]
 80135e4:	7da0      	ldrb	r0, [r4, #22]
 80135e6:	f080 0001 	eor.w	r0, r0, #1
 80135ea:	bd38      	pop	{r3, r4, r5, pc}

080135ec <ucdr_serialize_uint16_t>:
 80135ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135f0:	b082      	sub	sp, #8
 80135f2:	460b      	mov	r3, r1
 80135f4:	2102      	movs	r1, #2
 80135f6:	4604      	mov	r4, r0
 80135f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80135fc:	f7fb f806 	bl	800e60c <ucdr_buffer_alignment>
 8013600:	4601      	mov	r1, r0
 8013602:	4620      	mov	r0, r4
 8013604:	7d67      	ldrb	r7, [r4, #21]
 8013606:	f7fb f845 	bl	800e694 <ucdr_advance_buffer>
 801360a:	2102      	movs	r1, #2
 801360c:	4620      	mov	r0, r4
 801360e:	f7fa ff9d 	bl	800e54c <ucdr_check_buffer_available_for>
 8013612:	b1c0      	cbz	r0, 8013646 <ucdr_serialize_uint16_t+0x5a>
 8013614:	7d22      	ldrb	r2, [r4, #20]
 8013616:	68a3      	ldr	r3, [r4, #8]
 8013618:	2a01      	cmp	r2, #1
 801361a:	d04e      	beq.n	80136ba <ucdr_serialize_uint16_t+0xce>
 801361c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013620:	701a      	strb	r2, [r3, #0]
 8013622:	68a3      	ldr	r3, [r4, #8]
 8013624:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013628:	705a      	strb	r2, [r3, #1]
 801362a:	68a2      	ldr	r2, [r4, #8]
 801362c:	6923      	ldr	r3, [r4, #16]
 801362e:	3202      	adds	r2, #2
 8013630:	3302      	adds	r3, #2
 8013632:	2102      	movs	r1, #2
 8013634:	60a2      	str	r2, [r4, #8]
 8013636:	6123      	str	r3, [r4, #16]
 8013638:	7561      	strb	r1, [r4, #21]
 801363a:	7da0      	ldrb	r0, [r4, #22]
 801363c:	f080 0001 	eor.w	r0, r0, #1
 8013640:	b002      	add	sp, #8
 8013642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013646:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801364a:	42ab      	cmp	r3, r5
 801364c:	d923      	bls.n	8013696 <ucdr_serialize_uint16_t+0xaa>
 801364e:	1b5e      	subs	r6, r3, r5
 8013650:	60a3      	str	r3, [r4, #8]
 8013652:	6923      	ldr	r3, [r4, #16]
 8013654:	f1c6 0802 	rsb	r8, r6, #2
 8013658:	4433      	add	r3, r6
 801365a:	6123      	str	r3, [r4, #16]
 801365c:	4641      	mov	r1, r8
 801365e:	4620      	mov	r0, r4
 8013660:	f7fa ff80 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013664:	b368      	cbz	r0, 80136c2 <ucdr_serialize_uint16_t+0xd6>
 8013666:	7d23      	ldrb	r3, [r4, #20]
 8013668:	2b01      	cmp	r3, #1
 801366a:	d03b      	beq.n	80136e4 <ucdr_serialize_uint16_t+0xf8>
 801366c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013670:	702b      	strb	r3, [r5, #0]
 8013672:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013676:	706b      	strb	r3, [r5, #1]
 8013678:	6923      	ldr	r3, [r4, #16]
 801367a:	68a2      	ldr	r2, [r4, #8]
 801367c:	7da0      	ldrb	r0, [r4, #22]
 801367e:	3302      	adds	r3, #2
 8013680:	4442      	add	r2, r8
 8013682:	1b9b      	subs	r3, r3, r6
 8013684:	2102      	movs	r1, #2
 8013686:	f080 0001 	eor.w	r0, r0, #1
 801368a:	60a2      	str	r2, [r4, #8]
 801368c:	6123      	str	r3, [r4, #16]
 801368e:	7561      	strb	r1, [r4, #21]
 8013690:	b002      	add	sp, #8
 8013692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013696:	2102      	movs	r1, #2
 8013698:	4620      	mov	r0, r4
 801369a:	f7fa ff63 	bl	800e564 <ucdr_check_final_buffer_behavior>
 801369e:	2800      	cmp	r0, #0
 80136a0:	d0cb      	beq.n	801363a <ucdr_serialize_uint16_t+0x4e>
 80136a2:	7d23      	ldrb	r3, [r4, #20]
 80136a4:	68a2      	ldr	r2, [r4, #8]
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d018      	beq.n	80136dc <ucdr_serialize_uint16_t+0xf0>
 80136aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80136ae:	7013      	strb	r3, [r2, #0]
 80136b0:	68a3      	ldr	r3, [r4, #8]
 80136b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136b6:	705a      	strb	r2, [r3, #1]
 80136b8:	e7b7      	b.n	801362a <ucdr_serialize_uint16_t+0x3e>
 80136ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80136be:	801a      	strh	r2, [r3, #0]
 80136c0:	e7b3      	b.n	801362a <ucdr_serialize_uint16_t+0x3e>
 80136c2:	68a2      	ldr	r2, [r4, #8]
 80136c4:	6923      	ldr	r3, [r4, #16]
 80136c6:	7da0      	ldrb	r0, [r4, #22]
 80136c8:	7567      	strb	r7, [r4, #21]
 80136ca:	1b92      	subs	r2, r2, r6
 80136cc:	1b9b      	subs	r3, r3, r6
 80136ce:	f080 0001 	eor.w	r0, r0, #1
 80136d2:	60a2      	str	r2, [r4, #8]
 80136d4:	6123      	str	r3, [r4, #16]
 80136d6:	b002      	add	sp, #8
 80136d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80136e0:	8013      	strh	r3, [r2, #0]
 80136e2:	e7a2      	b.n	801362a <ucdr_serialize_uint16_t+0x3e>
 80136e4:	4628      	mov	r0, r5
 80136e6:	f10d 0506 	add.w	r5, sp, #6
 80136ea:	4632      	mov	r2, r6
 80136ec:	4629      	mov	r1, r5
 80136ee:	f00a fc98 	bl	801e022 <memcpy>
 80136f2:	68a0      	ldr	r0, [r4, #8]
 80136f4:	4642      	mov	r2, r8
 80136f6:	19a9      	adds	r1, r5, r6
 80136f8:	f00a fc93 	bl	801e022 <memcpy>
 80136fc:	e7bc      	b.n	8013678 <ucdr_serialize_uint16_t+0x8c>
 80136fe:	bf00      	nop

08013700 <ucdr_serialize_endian_uint16_t>:
 8013700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013704:	b083      	sub	sp, #12
 8013706:	460d      	mov	r5, r1
 8013708:	2102      	movs	r1, #2
 801370a:	4604      	mov	r4, r0
 801370c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013710:	f7fa ff7c 	bl	800e60c <ucdr_buffer_alignment>
 8013714:	4601      	mov	r1, r0
 8013716:	4620      	mov	r0, r4
 8013718:	f894 8015 	ldrb.w	r8, [r4, #21]
 801371c:	f7fa ffba 	bl	800e694 <ucdr_advance_buffer>
 8013720:	2102      	movs	r1, #2
 8013722:	4620      	mov	r0, r4
 8013724:	f7fa ff12 	bl	800e54c <ucdr_check_buffer_available_for>
 8013728:	bb60      	cbnz	r0, 8013784 <ucdr_serialize_endian_uint16_t+0x84>
 801372a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801372e:	42be      	cmp	r6, r7
 8013730:	d923      	bls.n	801377a <ucdr_serialize_endian_uint16_t+0x7a>
 8013732:	6923      	ldr	r3, [r4, #16]
 8013734:	60a6      	str	r6, [r4, #8]
 8013736:	1bf6      	subs	r6, r6, r7
 8013738:	4433      	add	r3, r6
 801373a:	f1c6 0902 	rsb	r9, r6, #2
 801373e:	6123      	str	r3, [r4, #16]
 8013740:	4649      	mov	r1, r9
 8013742:	4620      	mov	r0, r4
 8013744:	f7fa ff0e 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013748:	2800      	cmp	r0, #0
 801374a:	d037      	beq.n	80137bc <ucdr_serialize_endian_uint16_t+0xbc>
 801374c:	2d01      	cmp	r5, #1
 801374e:	d043      	beq.n	80137d8 <ucdr_serialize_endian_uint16_t+0xd8>
 8013750:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013754:	703b      	strb	r3, [r7, #0]
 8013756:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801375a:	707b      	strb	r3, [r7, #1]
 801375c:	6923      	ldr	r3, [r4, #16]
 801375e:	68a2      	ldr	r2, [r4, #8]
 8013760:	7da0      	ldrb	r0, [r4, #22]
 8013762:	3302      	adds	r3, #2
 8013764:	444a      	add	r2, r9
 8013766:	1b9b      	subs	r3, r3, r6
 8013768:	2102      	movs	r1, #2
 801376a:	f080 0001 	eor.w	r0, r0, #1
 801376e:	60a2      	str	r2, [r4, #8]
 8013770:	6123      	str	r3, [r4, #16]
 8013772:	7561      	strb	r1, [r4, #21]
 8013774:	b003      	add	sp, #12
 8013776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801377a:	2102      	movs	r1, #2
 801377c:	4620      	mov	r0, r4
 801377e:	f7fa fef1 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013782:	b188      	cbz	r0, 80137a8 <ucdr_serialize_endian_uint16_t+0xa8>
 8013784:	2d01      	cmp	r5, #1
 8013786:	68a3      	ldr	r3, [r4, #8]
 8013788:	d014      	beq.n	80137b4 <ucdr_serialize_endian_uint16_t+0xb4>
 801378a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801378e:	701a      	strb	r2, [r3, #0]
 8013790:	68a3      	ldr	r3, [r4, #8]
 8013792:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013796:	705a      	strb	r2, [r3, #1]
 8013798:	68a2      	ldr	r2, [r4, #8]
 801379a:	6923      	ldr	r3, [r4, #16]
 801379c:	3202      	adds	r2, #2
 801379e:	3302      	adds	r3, #2
 80137a0:	2102      	movs	r1, #2
 80137a2:	60a2      	str	r2, [r4, #8]
 80137a4:	6123      	str	r3, [r4, #16]
 80137a6:	7561      	strb	r1, [r4, #21]
 80137a8:	7da0      	ldrb	r0, [r4, #22]
 80137aa:	f080 0001 	eor.w	r0, r0, #1
 80137ae:	b003      	add	sp, #12
 80137b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80137b8:	801a      	strh	r2, [r3, #0]
 80137ba:	e7ed      	b.n	8013798 <ucdr_serialize_endian_uint16_t+0x98>
 80137bc:	68a2      	ldr	r2, [r4, #8]
 80137be:	6923      	ldr	r3, [r4, #16]
 80137c0:	7da0      	ldrb	r0, [r4, #22]
 80137c2:	f884 8015 	strb.w	r8, [r4, #21]
 80137c6:	1b92      	subs	r2, r2, r6
 80137c8:	1b9b      	subs	r3, r3, r6
 80137ca:	f080 0001 	eor.w	r0, r0, #1
 80137ce:	60a2      	str	r2, [r4, #8]
 80137d0:	6123      	str	r3, [r4, #16]
 80137d2:	b003      	add	sp, #12
 80137d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d8:	f10d 0506 	add.w	r5, sp, #6
 80137dc:	4632      	mov	r2, r6
 80137de:	4629      	mov	r1, r5
 80137e0:	4638      	mov	r0, r7
 80137e2:	f00a fc1e 	bl	801e022 <memcpy>
 80137e6:	68a0      	ldr	r0, [r4, #8]
 80137e8:	464a      	mov	r2, r9
 80137ea:	19a9      	adds	r1, r5, r6
 80137ec:	f00a fc19 	bl	801e022 <memcpy>
 80137f0:	e7b4      	b.n	801375c <ucdr_serialize_endian_uint16_t+0x5c>
 80137f2:	bf00      	nop

080137f4 <ucdr_deserialize_uint16_t>:
 80137f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137f8:	460d      	mov	r5, r1
 80137fa:	2102      	movs	r1, #2
 80137fc:	4604      	mov	r4, r0
 80137fe:	f7fa ff05 	bl	800e60c <ucdr_buffer_alignment>
 8013802:	4601      	mov	r1, r0
 8013804:	4620      	mov	r0, r4
 8013806:	f894 8015 	ldrb.w	r8, [r4, #21]
 801380a:	f7fa ff43 	bl	800e694 <ucdr_advance_buffer>
 801380e:	2102      	movs	r1, #2
 8013810:	4620      	mov	r0, r4
 8013812:	f7fa fe9b 	bl	800e54c <ucdr_check_buffer_available_for>
 8013816:	b1a8      	cbz	r0, 8013844 <ucdr_deserialize_uint16_t+0x50>
 8013818:	7d22      	ldrb	r2, [r4, #20]
 801381a:	68a3      	ldr	r3, [r4, #8]
 801381c:	2a01      	cmp	r2, #1
 801381e:	d046      	beq.n	80138ae <ucdr_deserialize_uint16_t+0xba>
 8013820:	785b      	ldrb	r3, [r3, #1]
 8013822:	702b      	strb	r3, [r5, #0]
 8013824:	68a3      	ldr	r3, [r4, #8]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	706b      	strb	r3, [r5, #1]
 801382a:	68a2      	ldr	r2, [r4, #8]
 801382c:	6923      	ldr	r3, [r4, #16]
 801382e:	3202      	adds	r2, #2
 8013830:	3302      	adds	r3, #2
 8013832:	2102      	movs	r1, #2
 8013834:	60a2      	str	r2, [r4, #8]
 8013836:	6123      	str	r3, [r4, #16]
 8013838:	7561      	strb	r1, [r4, #21]
 801383a:	7da0      	ldrb	r0, [r4, #22]
 801383c:	f080 0001 	eor.w	r0, r0, #1
 8013840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013844:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013848:	42be      	cmp	r6, r7
 801384a:	d920      	bls.n	801388e <ucdr_deserialize_uint16_t+0x9a>
 801384c:	6923      	ldr	r3, [r4, #16]
 801384e:	60a6      	str	r6, [r4, #8]
 8013850:	1bf6      	subs	r6, r6, r7
 8013852:	4433      	add	r3, r6
 8013854:	f1c6 0902 	rsb	r9, r6, #2
 8013858:	6123      	str	r3, [r4, #16]
 801385a:	4649      	mov	r1, r9
 801385c:	4620      	mov	r0, r4
 801385e:	f7fa fe81 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013862:	b338      	cbz	r0, 80138b4 <ucdr_deserialize_uint16_t+0xc0>
 8013864:	7d23      	ldrb	r3, [r4, #20]
 8013866:	2b01      	cmp	r3, #1
 8013868:	d034      	beq.n	80138d4 <ucdr_deserialize_uint16_t+0xe0>
 801386a:	787b      	ldrb	r3, [r7, #1]
 801386c:	702b      	strb	r3, [r5, #0]
 801386e:	783b      	ldrb	r3, [r7, #0]
 8013870:	706b      	strb	r3, [r5, #1]
 8013872:	6923      	ldr	r3, [r4, #16]
 8013874:	68a2      	ldr	r2, [r4, #8]
 8013876:	7da0      	ldrb	r0, [r4, #22]
 8013878:	2102      	movs	r1, #2
 801387a:	3302      	adds	r3, #2
 801387c:	444a      	add	r2, r9
 801387e:	1b9b      	subs	r3, r3, r6
 8013880:	7561      	strb	r1, [r4, #21]
 8013882:	60a2      	str	r2, [r4, #8]
 8013884:	6123      	str	r3, [r4, #16]
 8013886:	f080 0001 	eor.w	r0, r0, #1
 801388a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801388e:	2102      	movs	r1, #2
 8013890:	4620      	mov	r0, r4
 8013892:	f7fa fe67 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013896:	2800      	cmp	r0, #0
 8013898:	d0cf      	beq.n	801383a <ucdr_deserialize_uint16_t+0x46>
 801389a:	7d23      	ldrb	r3, [r4, #20]
 801389c:	68a2      	ldr	r2, [r4, #8]
 801389e:	2b01      	cmp	r3, #1
 80138a0:	d015      	beq.n	80138ce <ucdr_deserialize_uint16_t+0xda>
 80138a2:	7853      	ldrb	r3, [r2, #1]
 80138a4:	702b      	strb	r3, [r5, #0]
 80138a6:	68a3      	ldr	r3, [r4, #8]
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	706b      	strb	r3, [r5, #1]
 80138ac:	e7bd      	b.n	801382a <ucdr_deserialize_uint16_t+0x36>
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	802b      	strh	r3, [r5, #0]
 80138b2:	e7ba      	b.n	801382a <ucdr_deserialize_uint16_t+0x36>
 80138b4:	68a2      	ldr	r2, [r4, #8]
 80138b6:	6923      	ldr	r3, [r4, #16]
 80138b8:	7da0      	ldrb	r0, [r4, #22]
 80138ba:	f884 8015 	strb.w	r8, [r4, #21]
 80138be:	1b92      	subs	r2, r2, r6
 80138c0:	1b9b      	subs	r3, r3, r6
 80138c2:	60a2      	str	r2, [r4, #8]
 80138c4:	6123      	str	r3, [r4, #16]
 80138c6:	f080 0001 	eor.w	r0, r0, #1
 80138ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ce:	8813      	ldrh	r3, [r2, #0]
 80138d0:	802b      	strh	r3, [r5, #0]
 80138d2:	e7aa      	b.n	801382a <ucdr_deserialize_uint16_t+0x36>
 80138d4:	4639      	mov	r1, r7
 80138d6:	4632      	mov	r2, r6
 80138d8:	4628      	mov	r0, r5
 80138da:	f00a fba2 	bl	801e022 <memcpy>
 80138de:	68a1      	ldr	r1, [r4, #8]
 80138e0:	464a      	mov	r2, r9
 80138e2:	19a8      	adds	r0, r5, r6
 80138e4:	f00a fb9d 	bl	801e022 <memcpy>
 80138e8:	e7c3      	b.n	8013872 <ucdr_deserialize_uint16_t+0x7e>
 80138ea:	bf00      	nop

080138ec <ucdr_deserialize_endian_uint16_t>:
 80138ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138f0:	460e      	mov	r6, r1
 80138f2:	2102      	movs	r1, #2
 80138f4:	4604      	mov	r4, r0
 80138f6:	4615      	mov	r5, r2
 80138f8:	f7fa fe88 	bl	800e60c <ucdr_buffer_alignment>
 80138fc:	4601      	mov	r1, r0
 80138fe:	4620      	mov	r0, r4
 8013900:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013904:	f7fa fec6 	bl	800e694 <ucdr_advance_buffer>
 8013908:	2102      	movs	r1, #2
 801390a:	4620      	mov	r0, r4
 801390c:	f7fa fe1e 	bl	800e54c <ucdr_check_buffer_available_for>
 8013910:	bb60      	cbnz	r0, 801396c <ucdr_deserialize_endian_uint16_t+0x80>
 8013912:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8013916:	4547      	cmp	r7, r8
 8013918:	d923      	bls.n	8013962 <ucdr_deserialize_endian_uint16_t+0x76>
 801391a:	6923      	ldr	r3, [r4, #16]
 801391c:	60a7      	str	r7, [r4, #8]
 801391e:	eba7 0708 	sub.w	r7, r7, r8
 8013922:	443b      	add	r3, r7
 8013924:	f1c7 0a02 	rsb	sl, r7, #2
 8013928:	6123      	str	r3, [r4, #16]
 801392a:	4651      	mov	r1, sl
 801392c:	4620      	mov	r0, r4
 801392e:	f7fa fe19 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013932:	2800      	cmp	r0, #0
 8013934:	d032      	beq.n	801399c <ucdr_deserialize_endian_uint16_t+0xb0>
 8013936:	2e01      	cmp	r6, #1
 8013938:	d03d      	beq.n	80139b6 <ucdr_deserialize_endian_uint16_t+0xca>
 801393a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801393e:	702b      	strb	r3, [r5, #0]
 8013940:	f898 3000 	ldrb.w	r3, [r8]
 8013944:	706b      	strb	r3, [r5, #1]
 8013946:	6923      	ldr	r3, [r4, #16]
 8013948:	68a2      	ldr	r2, [r4, #8]
 801394a:	7da0      	ldrb	r0, [r4, #22]
 801394c:	2102      	movs	r1, #2
 801394e:	3302      	adds	r3, #2
 8013950:	4452      	add	r2, sl
 8013952:	1bdb      	subs	r3, r3, r7
 8013954:	7561      	strb	r1, [r4, #21]
 8013956:	60a2      	str	r2, [r4, #8]
 8013958:	6123      	str	r3, [r4, #16]
 801395a:	f080 0001 	eor.w	r0, r0, #1
 801395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013962:	2102      	movs	r1, #2
 8013964:	4620      	mov	r0, r4
 8013966:	f7fa fdfd 	bl	800e564 <ucdr_check_final_buffer_behavior>
 801396a:	b178      	cbz	r0, 801398c <ucdr_deserialize_endian_uint16_t+0xa0>
 801396c:	2e01      	cmp	r6, #1
 801396e:	68a3      	ldr	r3, [r4, #8]
 8013970:	d011      	beq.n	8013996 <ucdr_deserialize_endian_uint16_t+0xaa>
 8013972:	785b      	ldrb	r3, [r3, #1]
 8013974:	702b      	strb	r3, [r5, #0]
 8013976:	68a3      	ldr	r3, [r4, #8]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	706b      	strb	r3, [r5, #1]
 801397c:	68a2      	ldr	r2, [r4, #8]
 801397e:	6923      	ldr	r3, [r4, #16]
 8013980:	3202      	adds	r2, #2
 8013982:	3302      	adds	r3, #2
 8013984:	2102      	movs	r1, #2
 8013986:	60a2      	str	r2, [r4, #8]
 8013988:	6123      	str	r3, [r4, #16]
 801398a:	7561      	strb	r1, [r4, #21]
 801398c:	7da0      	ldrb	r0, [r4, #22]
 801398e:	f080 0001 	eor.w	r0, r0, #1
 8013992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013996:	881b      	ldrh	r3, [r3, #0]
 8013998:	802b      	strh	r3, [r5, #0]
 801399a:	e7ef      	b.n	801397c <ucdr_deserialize_endian_uint16_t+0x90>
 801399c:	68a2      	ldr	r2, [r4, #8]
 801399e:	6923      	ldr	r3, [r4, #16]
 80139a0:	7da0      	ldrb	r0, [r4, #22]
 80139a2:	f884 9015 	strb.w	r9, [r4, #21]
 80139a6:	1bd2      	subs	r2, r2, r7
 80139a8:	1bdb      	subs	r3, r3, r7
 80139aa:	60a2      	str	r2, [r4, #8]
 80139ac:	6123      	str	r3, [r4, #16]
 80139ae:	f080 0001 	eor.w	r0, r0, #1
 80139b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139b6:	4641      	mov	r1, r8
 80139b8:	463a      	mov	r2, r7
 80139ba:	4628      	mov	r0, r5
 80139bc:	f00a fb31 	bl	801e022 <memcpy>
 80139c0:	68a1      	ldr	r1, [r4, #8]
 80139c2:	4652      	mov	r2, sl
 80139c4:	19e8      	adds	r0, r5, r7
 80139c6:	f00a fb2c 	bl	801e022 <memcpy>
 80139ca:	e7bc      	b.n	8013946 <ucdr_deserialize_endian_uint16_t+0x5a>

080139cc <ucdr_serialize_uint32_t>:
 80139cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d0:	b082      	sub	sp, #8
 80139d2:	4604      	mov	r4, r0
 80139d4:	9101      	str	r1, [sp, #4]
 80139d6:	2104      	movs	r1, #4
 80139d8:	f7fa fe18 	bl	800e60c <ucdr_buffer_alignment>
 80139dc:	4601      	mov	r1, r0
 80139de:	4620      	mov	r0, r4
 80139e0:	7d67      	ldrb	r7, [r4, #21]
 80139e2:	f7fa fe57 	bl	800e694 <ucdr_advance_buffer>
 80139e6:	2104      	movs	r1, #4
 80139e8:	4620      	mov	r0, r4
 80139ea:	f7fa fdaf 	bl	800e54c <ucdr_check_buffer_available_for>
 80139ee:	b300      	cbz	r0, 8013a32 <ucdr_serialize_uint32_t+0x66>
 80139f0:	7d22      	ldrb	r2, [r4, #20]
 80139f2:	68a3      	ldr	r3, [r4, #8]
 80139f4:	2a01      	cmp	r2, #1
 80139f6:	d05d      	beq.n	8013ab4 <ucdr_serialize_uint32_t+0xe8>
 80139f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80139fc:	701a      	strb	r2, [r3, #0]
 80139fe:	68a3      	ldr	r3, [r4, #8]
 8013a00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013a04:	705a      	strb	r2, [r3, #1]
 8013a06:	68a3      	ldr	r3, [r4, #8]
 8013a08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013a0c:	709a      	strb	r2, [r3, #2]
 8013a0e:	68a3      	ldr	r3, [r4, #8]
 8013a10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013a14:	70da      	strb	r2, [r3, #3]
 8013a16:	68a2      	ldr	r2, [r4, #8]
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	3204      	adds	r2, #4
 8013a1c:	3304      	adds	r3, #4
 8013a1e:	2104      	movs	r1, #4
 8013a20:	60a2      	str	r2, [r4, #8]
 8013a22:	6123      	str	r3, [r4, #16]
 8013a24:	7561      	strb	r1, [r4, #21]
 8013a26:	7da0      	ldrb	r0, [r4, #22]
 8013a28:	f080 0001 	eor.w	r0, r0, #1
 8013a2c:	b002      	add	sp, #8
 8013a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013a36:	42ab      	cmp	r3, r5
 8013a38:	d92e      	bls.n	8013a98 <ucdr_serialize_uint32_t+0xcc>
 8013a3a:	1b5e      	subs	r6, r3, r5
 8013a3c:	60a3      	str	r3, [r4, #8]
 8013a3e:	6923      	ldr	r3, [r4, #16]
 8013a40:	f1c6 0804 	rsb	r8, r6, #4
 8013a44:	4433      	add	r3, r6
 8013a46:	6123      	str	r3, [r4, #16]
 8013a48:	4641      	mov	r1, r8
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f7fa fd8a 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013a50:	b398      	cbz	r0, 8013aba <ucdr_serialize_uint32_t+0xee>
 8013a52:	7d23      	ldrb	r3, [r4, #20]
 8013a54:	2b01      	cmp	r3, #1
 8013a56:	d046      	beq.n	8013ae6 <ucdr_serialize_uint32_t+0x11a>
 8013a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013a5c:	702b      	strb	r3, [r5, #0]
 8013a5e:	2e01      	cmp	r6, #1
 8013a60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013a64:	706b      	strb	r3, [r5, #1]
 8013a66:	d035      	beq.n	8013ad4 <ucdr_serialize_uint32_t+0x108>
 8013a68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013a6c:	70ab      	strb	r3, [r5, #2]
 8013a6e:	2e02      	cmp	r6, #2
 8013a70:	d034      	beq.n	8013adc <ucdr_serialize_uint32_t+0x110>
 8013a72:	3503      	adds	r5, #3
 8013a74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013a78:	702b      	strb	r3, [r5, #0]
 8013a7a:	6923      	ldr	r3, [r4, #16]
 8013a7c:	68a2      	ldr	r2, [r4, #8]
 8013a7e:	7da0      	ldrb	r0, [r4, #22]
 8013a80:	3304      	adds	r3, #4
 8013a82:	4442      	add	r2, r8
 8013a84:	1b9b      	subs	r3, r3, r6
 8013a86:	2104      	movs	r1, #4
 8013a88:	f080 0001 	eor.w	r0, r0, #1
 8013a8c:	60a2      	str	r2, [r4, #8]
 8013a8e:	6123      	str	r3, [r4, #16]
 8013a90:	7561      	strb	r1, [r4, #21]
 8013a92:	b002      	add	sp, #8
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	2104      	movs	r1, #4
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f7fa fd62 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d0c0      	beq.n	8013a26 <ucdr_serialize_uint32_t+0x5a>
 8013aa4:	7d23      	ldrb	r3, [r4, #20]
 8013aa6:	68a2      	ldr	r2, [r4, #8]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d019      	beq.n	8013ae0 <ucdr_serialize_uint32_t+0x114>
 8013aac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ab0:	7013      	strb	r3, [r2, #0]
 8013ab2:	e7a4      	b.n	80139fe <ucdr_serialize_uint32_t+0x32>
 8013ab4:	9a01      	ldr	r2, [sp, #4]
 8013ab6:	601a      	str	r2, [r3, #0]
 8013ab8:	e7ad      	b.n	8013a16 <ucdr_serialize_uint32_t+0x4a>
 8013aba:	68a2      	ldr	r2, [r4, #8]
 8013abc:	6923      	ldr	r3, [r4, #16]
 8013abe:	7da0      	ldrb	r0, [r4, #22]
 8013ac0:	7567      	strb	r7, [r4, #21]
 8013ac2:	1b92      	subs	r2, r2, r6
 8013ac4:	1b9b      	subs	r3, r3, r6
 8013ac6:	f080 0001 	eor.w	r0, r0, #1
 8013aca:	60a2      	str	r2, [r4, #8]
 8013acc:	6123      	str	r3, [r4, #16]
 8013ace:	b002      	add	sp, #8
 8013ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad4:	68a3      	ldr	r3, [r4, #8]
 8013ad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013ada:	701a      	strb	r2, [r3, #0]
 8013adc:	68a5      	ldr	r5, [r4, #8]
 8013ade:	e7c9      	b.n	8013a74 <ucdr_serialize_uint32_t+0xa8>
 8013ae0:	9b01      	ldr	r3, [sp, #4]
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	e797      	b.n	8013a16 <ucdr_serialize_uint32_t+0x4a>
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	ad01      	add	r5, sp, #4
 8013aea:	4632      	mov	r2, r6
 8013aec:	4629      	mov	r1, r5
 8013aee:	f00a fa98 	bl	801e022 <memcpy>
 8013af2:	68a0      	ldr	r0, [r4, #8]
 8013af4:	4642      	mov	r2, r8
 8013af6:	19a9      	adds	r1, r5, r6
 8013af8:	f00a fa93 	bl	801e022 <memcpy>
 8013afc:	e7bd      	b.n	8013a7a <ucdr_serialize_uint32_t+0xae>
 8013afe:	bf00      	nop

08013b00 <ucdr_serialize_endian_uint32_t>:
 8013b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b04:	b083      	sub	sp, #12
 8013b06:	460d      	mov	r5, r1
 8013b08:	2104      	movs	r1, #4
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	9201      	str	r2, [sp, #4]
 8013b0e:	f7fa fd7d 	bl	800e60c <ucdr_buffer_alignment>
 8013b12:	4601      	mov	r1, r0
 8013b14:	4620      	mov	r0, r4
 8013b16:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013b1a:	f7fa fdbb 	bl	800e694 <ucdr_advance_buffer>
 8013b1e:	2104      	movs	r1, #4
 8013b20:	4620      	mov	r0, r4
 8013b22:	f7fa fd13 	bl	800e54c <ucdr_check_buffer_available_for>
 8013b26:	2800      	cmp	r0, #0
 8013b28:	d137      	bne.n	8013b9a <ucdr_serialize_endian_uint32_t+0x9a>
 8013b2a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013b2e:	42b7      	cmp	r7, r6
 8013b30:	d92e      	bls.n	8013b90 <ucdr_serialize_endian_uint32_t+0x90>
 8013b32:	6923      	ldr	r3, [r4, #16]
 8013b34:	60a7      	str	r7, [r4, #8]
 8013b36:	1bbf      	subs	r7, r7, r6
 8013b38:	443b      	add	r3, r7
 8013b3a:	f1c7 0904 	rsb	r9, r7, #4
 8013b3e:	6123      	str	r3, [r4, #16]
 8013b40:	4649      	mov	r1, r9
 8013b42:	4620      	mov	r0, r4
 8013b44:	f7fa fd0e 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d049      	beq.n	8013be0 <ucdr_serialize_endian_uint32_t+0xe0>
 8013b4c:	2d01      	cmp	r5, #1
 8013b4e:	d05b      	beq.n	8013c08 <ucdr_serialize_endian_uint32_t+0x108>
 8013b50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013b54:	7033      	strb	r3, [r6, #0]
 8013b56:	2f01      	cmp	r7, #1
 8013b58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013b5c:	7073      	strb	r3, [r6, #1]
 8013b5e:	d04d      	beq.n	8013bfc <ucdr_serialize_endian_uint32_t+0xfc>
 8013b60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013b64:	70b3      	strb	r3, [r6, #2]
 8013b66:	2f02      	cmp	r7, #2
 8013b68:	d04c      	beq.n	8013c04 <ucdr_serialize_endian_uint32_t+0x104>
 8013b6a:	3603      	adds	r6, #3
 8013b6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013b70:	7033      	strb	r3, [r6, #0]
 8013b72:	6923      	ldr	r3, [r4, #16]
 8013b74:	68a2      	ldr	r2, [r4, #8]
 8013b76:	7da0      	ldrb	r0, [r4, #22]
 8013b78:	3304      	adds	r3, #4
 8013b7a:	444a      	add	r2, r9
 8013b7c:	1bdb      	subs	r3, r3, r7
 8013b7e:	2104      	movs	r1, #4
 8013b80:	f080 0001 	eor.w	r0, r0, #1
 8013b84:	60a2      	str	r2, [r4, #8]
 8013b86:	6123      	str	r3, [r4, #16]
 8013b88:	7561      	strb	r1, [r4, #21]
 8013b8a:	b003      	add	sp, #12
 8013b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b90:	2104      	movs	r1, #4
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7fa fce6 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013b98:	b1c8      	cbz	r0, 8013bce <ucdr_serialize_endian_uint32_t+0xce>
 8013b9a:	2d01      	cmp	r5, #1
 8013b9c:	68a3      	ldr	r3, [r4, #8]
 8013b9e:	d01c      	beq.n	8013bda <ucdr_serialize_endian_uint32_t+0xda>
 8013ba0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ba4:	701a      	strb	r2, [r3, #0]
 8013ba6:	68a3      	ldr	r3, [r4, #8]
 8013ba8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013bac:	705a      	strb	r2, [r3, #1]
 8013bae:	68a3      	ldr	r3, [r4, #8]
 8013bb0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013bb4:	709a      	strb	r2, [r3, #2]
 8013bb6:	68a3      	ldr	r3, [r4, #8]
 8013bb8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013bbc:	70da      	strb	r2, [r3, #3]
 8013bbe:	68a2      	ldr	r2, [r4, #8]
 8013bc0:	6923      	ldr	r3, [r4, #16]
 8013bc2:	3204      	adds	r2, #4
 8013bc4:	3304      	adds	r3, #4
 8013bc6:	2104      	movs	r1, #4
 8013bc8:	60a2      	str	r2, [r4, #8]
 8013bca:	6123      	str	r3, [r4, #16]
 8013bcc:	7561      	strb	r1, [r4, #21]
 8013bce:	7da0      	ldrb	r0, [r4, #22]
 8013bd0:	f080 0001 	eor.w	r0, r0, #1
 8013bd4:	b003      	add	sp, #12
 8013bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bda:	9a01      	ldr	r2, [sp, #4]
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	e7ee      	b.n	8013bbe <ucdr_serialize_endian_uint32_t+0xbe>
 8013be0:	68a2      	ldr	r2, [r4, #8]
 8013be2:	6923      	ldr	r3, [r4, #16]
 8013be4:	7da0      	ldrb	r0, [r4, #22]
 8013be6:	f884 8015 	strb.w	r8, [r4, #21]
 8013bea:	1bd2      	subs	r2, r2, r7
 8013bec:	1bdb      	subs	r3, r3, r7
 8013bee:	f080 0001 	eor.w	r0, r0, #1
 8013bf2:	60a2      	str	r2, [r4, #8]
 8013bf4:	6123      	str	r3, [r4, #16]
 8013bf6:	b003      	add	sp, #12
 8013bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bfc:	68a3      	ldr	r3, [r4, #8]
 8013bfe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013c02:	701a      	strb	r2, [r3, #0]
 8013c04:	68a6      	ldr	r6, [r4, #8]
 8013c06:	e7b1      	b.n	8013b6c <ucdr_serialize_endian_uint32_t+0x6c>
 8013c08:	ad01      	add	r5, sp, #4
 8013c0a:	463a      	mov	r2, r7
 8013c0c:	4629      	mov	r1, r5
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f00a fa07 	bl	801e022 <memcpy>
 8013c14:	68a0      	ldr	r0, [r4, #8]
 8013c16:	464a      	mov	r2, r9
 8013c18:	19e9      	adds	r1, r5, r7
 8013c1a:	f00a fa02 	bl	801e022 <memcpy>
 8013c1e:	e7a8      	b.n	8013b72 <ucdr_serialize_endian_uint32_t+0x72>

08013c20 <ucdr_deserialize_uint32_t>:
 8013c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c24:	460d      	mov	r5, r1
 8013c26:	2104      	movs	r1, #4
 8013c28:	4604      	mov	r4, r0
 8013c2a:	f7fa fcef 	bl	800e60c <ucdr_buffer_alignment>
 8013c2e:	4601      	mov	r1, r0
 8013c30:	4620      	mov	r0, r4
 8013c32:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013c36:	f7fa fd2d 	bl	800e694 <ucdr_advance_buffer>
 8013c3a:	2104      	movs	r1, #4
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f7fa fc85 	bl	800e54c <ucdr_check_buffer_available_for>
 8013c42:	b1d8      	cbz	r0, 8013c7c <ucdr_deserialize_uint32_t+0x5c>
 8013c44:	7d22      	ldrb	r2, [r4, #20]
 8013c46:	68a3      	ldr	r3, [r4, #8]
 8013c48:	2a01      	cmp	r2, #1
 8013c4a:	d052      	beq.n	8013cf2 <ucdr_deserialize_uint32_t+0xd2>
 8013c4c:	78db      	ldrb	r3, [r3, #3]
 8013c4e:	702b      	strb	r3, [r5, #0]
 8013c50:	68a3      	ldr	r3, [r4, #8]
 8013c52:	789b      	ldrb	r3, [r3, #2]
 8013c54:	706b      	strb	r3, [r5, #1]
 8013c56:	68a3      	ldr	r3, [r4, #8]
 8013c58:	785b      	ldrb	r3, [r3, #1]
 8013c5a:	70ab      	strb	r3, [r5, #2]
 8013c5c:	68a3      	ldr	r3, [r4, #8]
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	70eb      	strb	r3, [r5, #3]
 8013c62:	68a2      	ldr	r2, [r4, #8]
 8013c64:	6923      	ldr	r3, [r4, #16]
 8013c66:	3204      	adds	r2, #4
 8013c68:	3304      	adds	r3, #4
 8013c6a:	2104      	movs	r1, #4
 8013c6c:	60a2      	str	r2, [r4, #8]
 8013c6e:	6123      	str	r3, [r4, #16]
 8013c70:	7561      	strb	r1, [r4, #21]
 8013c72:	7da0      	ldrb	r0, [r4, #22]
 8013c74:	f080 0001 	eor.w	r0, r0, #1
 8013c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c7c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013c80:	42b7      	cmp	r7, r6
 8013c82:	d92a      	bls.n	8013cda <ucdr_deserialize_uint32_t+0xba>
 8013c84:	6923      	ldr	r3, [r4, #16]
 8013c86:	60a7      	str	r7, [r4, #8]
 8013c88:	1bbf      	subs	r7, r7, r6
 8013c8a:	443b      	add	r3, r7
 8013c8c:	f1c7 0904 	rsb	r9, r7, #4
 8013c90:	6123      	str	r3, [r4, #16]
 8013c92:	4649      	mov	r1, r9
 8013c94:	4620      	mov	r0, r4
 8013c96:	f7fa fc65 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013c9a:	b368      	cbz	r0, 8013cf8 <ucdr_deserialize_uint32_t+0xd8>
 8013c9c:	7d23      	ldrb	r3, [r4, #20]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	d040      	beq.n	8013d24 <ucdr_deserialize_uint32_t+0x104>
 8013ca2:	78f3      	ldrb	r3, [r6, #3]
 8013ca4:	702b      	strb	r3, [r5, #0]
 8013ca6:	78b3      	ldrb	r3, [r6, #2]
 8013ca8:	706b      	strb	r3, [r5, #1]
 8013caa:	2f01      	cmp	r7, #1
 8013cac:	d031      	beq.n	8013d12 <ucdr_deserialize_uint32_t+0xf2>
 8013cae:	7873      	ldrb	r3, [r6, #1]
 8013cb0:	70ab      	strb	r3, [r5, #2]
 8013cb2:	2f02      	cmp	r7, #2
 8013cb4:	f105 0503 	add.w	r5, r5, #3
 8013cb8:	d02f      	beq.n	8013d1a <ucdr_deserialize_uint32_t+0xfa>
 8013cba:	7833      	ldrb	r3, [r6, #0]
 8013cbc:	702b      	strb	r3, [r5, #0]
 8013cbe:	6923      	ldr	r3, [r4, #16]
 8013cc0:	68a2      	ldr	r2, [r4, #8]
 8013cc2:	7da0      	ldrb	r0, [r4, #22]
 8013cc4:	2104      	movs	r1, #4
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	444a      	add	r2, r9
 8013cca:	1bdb      	subs	r3, r3, r7
 8013ccc:	7561      	strb	r1, [r4, #21]
 8013cce:	60a2      	str	r2, [r4, #8]
 8013cd0:	6123      	str	r3, [r4, #16]
 8013cd2:	f080 0001 	eor.w	r0, r0, #1
 8013cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cda:	2104      	movs	r1, #4
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f7fa fc41 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	d0c5      	beq.n	8013c72 <ucdr_deserialize_uint32_t+0x52>
 8013ce6:	7d23      	ldrb	r3, [r4, #20]
 8013ce8:	68a2      	ldr	r2, [r4, #8]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d017      	beq.n	8013d1e <ucdr_deserialize_uint32_t+0xfe>
 8013cee:	78d3      	ldrb	r3, [r2, #3]
 8013cf0:	e7ad      	b.n	8013c4e <ucdr_deserialize_uint32_t+0x2e>
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	602b      	str	r3, [r5, #0]
 8013cf6:	e7b4      	b.n	8013c62 <ucdr_deserialize_uint32_t+0x42>
 8013cf8:	68a2      	ldr	r2, [r4, #8]
 8013cfa:	6923      	ldr	r3, [r4, #16]
 8013cfc:	7da0      	ldrb	r0, [r4, #22]
 8013cfe:	f884 8015 	strb.w	r8, [r4, #21]
 8013d02:	1bd2      	subs	r2, r2, r7
 8013d04:	1bdb      	subs	r3, r3, r7
 8013d06:	60a2      	str	r2, [r4, #8]
 8013d08:	6123      	str	r3, [r4, #16]
 8013d0a:	f080 0001 	eor.w	r0, r0, #1
 8013d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d12:	68a3      	ldr	r3, [r4, #8]
 8013d14:	785b      	ldrb	r3, [r3, #1]
 8013d16:	70ab      	strb	r3, [r5, #2]
 8013d18:	3503      	adds	r5, #3
 8013d1a:	68a6      	ldr	r6, [r4, #8]
 8013d1c:	e7cd      	b.n	8013cba <ucdr_deserialize_uint32_t+0x9a>
 8013d1e:	6813      	ldr	r3, [r2, #0]
 8013d20:	602b      	str	r3, [r5, #0]
 8013d22:	e79e      	b.n	8013c62 <ucdr_deserialize_uint32_t+0x42>
 8013d24:	4631      	mov	r1, r6
 8013d26:	463a      	mov	r2, r7
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f00a f97a 	bl	801e022 <memcpy>
 8013d2e:	68a1      	ldr	r1, [r4, #8]
 8013d30:	464a      	mov	r2, r9
 8013d32:	19e8      	adds	r0, r5, r7
 8013d34:	f00a f975 	bl	801e022 <memcpy>
 8013d38:	e7c1      	b.n	8013cbe <ucdr_deserialize_uint32_t+0x9e>
 8013d3a:	bf00      	nop

08013d3c <ucdr_deserialize_endian_uint32_t>:
 8013d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d40:	460e      	mov	r6, r1
 8013d42:	2104      	movs	r1, #4
 8013d44:	4604      	mov	r4, r0
 8013d46:	4615      	mov	r5, r2
 8013d48:	f7fa fc60 	bl	800e60c <ucdr_buffer_alignment>
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013d54:	f7fa fc9e 	bl	800e694 <ucdr_advance_buffer>
 8013d58:	2104      	movs	r1, #4
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f7fa fbf6 	bl	800e54c <ucdr_check_buffer_available_for>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d137      	bne.n	8013dd4 <ucdr_deserialize_endian_uint32_t+0x98>
 8013d64:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013d68:	42bb      	cmp	r3, r7
 8013d6a:	d92e      	bls.n	8013dca <ucdr_deserialize_endian_uint32_t+0x8e>
 8013d6c:	eba3 0807 	sub.w	r8, r3, r7
 8013d70:	60a3      	str	r3, [r4, #8]
 8013d72:	6923      	ldr	r3, [r4, #16]
 8013d74:	f1c8 0a04 	rsb	sl, r8, #4
 8013d78:	4443      	add	r3, r8
 8013d7a:	6123      	str	r3, [r4, #16]
 8013d7c:	4651      	mov	r1, sl
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f7fa fbf0 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d043      	beq.n	8013e10 <ucdr_deserialize_endian_uint32_t+0xd4>
 8013d88:	2e01      	cmp	r6, #1
 8013d8a:	d056      	beq.n	8013e3a <ucdr_deserialize_endian_uint32_t+0xfe>
 8013d8c:	78fb      	ldrb	r3, [r7, #3]
 8013d8e:	702b      	strb	r3, [r5, #0]
 8013d90:	78bb      	ldrb	r3, [r7, #2]
 8013d92:	706b      	strb	r3, [r5, #1]
 8013d94:	f1b8 0f01 	cmp.w	r8, #1
 8013d98:	d049      	beq.n	8013e2e <ucdr_deserialize_endian_uint32_t+0xf2>
 8013d9a:	787b      	ldrb	r3, [r7, #1]
 8013d9c:	70ab      	strb	r3, [r5, #2]
 8013d9e:	f1b8 0f02 	cmp.w	r8, #2
 8013da2:	f105 0503 	add.w	r5, r5, #3
 8013da6:	d046      	beq.n	8013e36 <ucdr_deserialize_endian_uint32_t+0xfa>
 8013da8:	783b      	ldrb	r3, [r7, #0]
 8013daa:	702b      	strb	r3, [r5, #0]
 8013dac:	6923      	ldr	r3, [r4, #16]
 8013dae:	68a2      	ldr	r2, [r4, #8]
 8013db0:	7da0      	ldrb	r0, [r4, #22]
 8013db2:	2104      	movs	r1, #4
 8013db4:	3304      	adds	r3, #4
 8013db6:	4452      	add	r2, sl
 8013db8:	eba3 0308 	sub.w	r3, r3, r8
 8013dbc:	7561      	strb	r1, [r4, #21]
 8013dbe:	60a2      	str	r2, [r4, #8]
 8013dc0:	6123      	str	r3, [r4, #16]
 8013dc2:	f080 0001 	eor.w	r0, r0, #1
 8013dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dca:	2104      	movs	r1, #4
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f7fa fbc9 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013dd2:	b1a8      	cbz	r0, 8013e00 <ucdr_deserialize_endian_uint32_t+0xc4>
 8013dd4:	2e01      	cmp	r6, #1
 8013dd6:	68a3      	ldr	r3, [r4, #8]
 8013dd8:	d017      	beq.n	8013e0a <ucdr_deserialize_endian_uint32_t+0xce>
 8013dda:	78db      	ldrb	r3, [r3, #3]
 8013ddc:	702b      	strb	r3, [r5, #0]
 8013dde:	68a3      	ldr	r3, [r4, #8]
 8013de0:	789b      	ldrb	r3, [r3, #2]
 8013de2:	706b      	strb	r3, [r5, #1]
 8013de4:	68a3      	ldr	r3, [r4, #8]
 8013de6:	785b      	ldrb	r3, [r3, #1]
 8013de8:	70ab      	strb	r3, [r5, #2]
 8013dea:	68a3      	ldr	r3, [r4, #8]
 8013dec:	781b      	ldrb	r3, [r3, #0]
 8013dee:	70eb      	strb	r3, [r5, #3]
 8013df0:	68a2      	ldr	r2, [r4, #8]
 8013df2:	6923      	ldr	r3, [r4, #16]
 8013df4:	3204      	adds	r2, #4
 8013df6:	3304      	adds	r3, #4
 8013df8:	2104      	movs	r1, #4
 8013dfa:	60a2      	str	r2, [r4, #8]
 8013dfc:	6123      	str	r3, [r4, #16]
 8013dfe:	7561      	strb	r1, [r4, #21]
 8013e00:	7da0      	ldrb	r0, [r4, #22]
 8013e02:	f080 0001 	eor.w	r0, r0, #1
 8013e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	602b      	str	r3, [r5, #0]
 8013e0e:	e7ef      	b.n	8013df0 <ucdr_deserialize_endian_uint32_t+0xb4>
 8013e10:	68a2      	ldr	r2, [r4, #8]
 8013e12:	6923      	ldr	r3, [r4, #16]
 8013e14:	7da0      	ldrb	r0, [r4, #22]
 8013e16:	f884 9015 	strb.w	r9, [r4, #21]
 8013e1a:	eba2 0208 	sub.w	r2, r2, r8
 8013e1e:	eba3 0308 	sub.w	r3, r3, r8
 8013e22:	60a2      	str	r2, [r4, #8]
 8013e24:	6123      	str	r3, [r4, #16]
 8013e26:	f080 0001 	eor.w	r0, r0, #1
 8013e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2e:	68a3      	ldr	r3, [r4, #8]
 8013e30:	785b      	ldrb	r3, [r3, #1]
 8013e32:	70ab      	strb	r3, [r5, #2]
 8013e34:	3503      	adds	r5, #3
 8013e36:	68a7      	ldr	r7, [r4, #8]
 8013e38:	e7b6      	b.n	8013da8 <ucdr_deserialize_endian_uint32_t+0x6c>
 8013e3a:	4639      	mov	r1, r7
 8013e3c:	4642      	mov	r2, r8
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f00a f8ef 	bl	801e022 <memcpy>
 8013e44:	68a1      	ldr	r1, [r4, #8]
 8013e46:	4652      	mov	r2, sl
 8013e48:	eb05 0008 	add.w	r0, r5, r8
 8013e4c:	f00a f8e9 	bl	801e022 <memcpy>
 8013e50:	e7ac      	b.n	8013dac <ucdr_deserialize_endian_uint32_t+0x70>
 8013e52:	bf00      	nop

08013e54 <ucdr_serialize_uint64_t>:
 8013e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	2108      	movs	r1, #8
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8013e62:	f7fa fbd3 	bl	800e60c <ucdr_buffer_alignment>
 8013e66:	4601      	mov	r1, r0
 8013e68:	4620      	mov	r0, r4
 8013e6a:	7d67      	ldrb	r7, [r4, #21]
 8013e6c:	f7fa fc12 	bl	800e694 <ucdr_advance_buffer>
 8013e70:	2108      	movs	r1, #8
 8013e72:	4620      	mov	r0, r4
 8013e74:	f7fa fb6a 	bl	800e54c <ucdr_check_buffer_available_for>
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d14d      	bne.n	8013f18 <ucdr_serialize_uint64_t+0xc4>
 8013e7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013e80:	42ab      	cmp	r3, r5
 8013e82:	d944      	bls.n	8013f0e <ucdr_serialize_uint64_t+0xba>
 8013e84:	1b5e      	subs	r6, r3, r5
 8013e86:	60a3      	str	r3, [r4, #8]
 8013e88:	6923      	ldr	r3, [r4, #16]
 8013e8a:	f1c6 0808 	rsb	r8, r6, #8
 8013e8e:	4433      	add	r3, r6
 8013e90:	6123      	str	r3, [r4, #16]
 8013e92:	4641      	mov	r1, r8
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7fa fb65 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d072      	beq.n	8013f84 <ucdr_serialize_uint64_t+0x130>
 8013e9e:	7d23      	ldrb	r3, [r4, #20]
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	f000 8092 	beq.w	8013fca <ucdr_serialize_uint64_t+0x176>
 8013ea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013eaa:	702b      	strb	r3, [r5, #0]
 8013eac:	2e01      	cmp	r6, #1
 8013eae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013eb2:	706b      	strb	r3, [r5, #1]
 8013eb4:	d073      	beq.n	8013f9e <ucdr_serialize_uint64_t+0x14a>
 8013eb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013eba:	70ab      	strb	r3, [r5, #2]
 8013ebc:	2e02      	cmp	r6, #2
 8013ebe:	d072      	beq.n	8013fa6 <ucdr_serialize_uint64_t+0x152>
 8013ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013ec4:	70eb      	strb	r3, [r5, #3]
 8013ec6:	2e03      	cmp	r6, #3
 8013ec8:	d071      	beq.n	8013fae <ucdr_serialize_uint64_t+0x15a>
 8013eca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013ece:	712b      	strb	r3, [r5, #4]
 8013ed0:	2e04      	cmp	r6, #4
 8013ed2:	d070      	beq.n	8013fb6 <ucdr_serialize_uint64_t+0x162>
 8013ed4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013ed8:	716b      	strb	r3, [r5, #5]
 8013eda:	2e05      	cmp	r6, #5
 8013edc:	d06f      	beq.n	8013fbe <ucdr_serialize_uint64_t+0x16a>
 8013ede:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013ee2:	71ab      	strb	r3, [r5, #6]
 8013ee4:	2e06      	cmp	r6, #6
 8013ee6:	d06e      	beq.n	8013fc6 <ucdr_serialize_uint64_t+0x172>
 8013ee8:	3507      	adds	r5, #7
 8013eea:	f89d 3000 	ldrb.w	r3, [sp]
 8013eee:	702b      	strb	r3, [r5, #0]
 8013ef0:	6923      	ldr	r3, [r4, #16]
 8013ef2:	68a2      	ldr	r2, [r4, #8]
 8013ef4:	7da0      	ldrb	r0, [r4, #22]
 8013ef6:	3308      	adds	r3, #8
 8013ef8:	4442      	add	r2, r8
 8013efa:	1b9b      	subs	r3, r3, r6
 8013efc:	2108      	movs	r1, #8
 8013efe:	f080 0001 	eor.w	r0, r0, #1
 8013f02:	60a2      	str	r2, [r4, #8]
 8013f04:	6123      	str	r3, [r4, #16]
 8013f06:	7561      	strb	r1, [r4, #21]
 8013f08:	b002      	add	sp, #8
 8013f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0e:	2108      	movs	r1, #8
 8013f10:	4620      	mov	r0, r4
 8013f12:	f7fa fb27 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8013f16:	b350      	cbz	r0, 8013f6e <ucdr_serialize_uint64_t+0x11a>
 8013f18:	7d22      	ldrb	r2, [r4, #20]
 8013f1a:	68a3      	ldr	r3, [r4, #8]
 8013f1c:	2a01      	cmp	r2, #1
 8013f1e:	d02c      	beq.n	8013f7a <ucdr_serialize_uint64_t+0x126>
 8013f20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013f24:	701a      	strb	r2, [r3, #0]
 8013f26:	68a3      	ldr	r3, [r4, #8]
 8013f28:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013f2c:	705a      	strb	r2, [r3, #1]
 8013f2e:	68a3      	ldr	r3, [r4, #8]
 8013f30:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f34:	709a      	strb	r2, [r3, #2]
 8013f36:	68a3      	ldr	r3, [r4, #8]
 8013f38:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f3c:	70da      	strb	r2, [r3, #3]
 8013f3e:	68a3      	ldr	r3, [r4, #8]
 8013f40:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013f44:	711a      	strb	r2, [r3, #4]
 8013f46:	68a3      	ldr	r3, [r4, #8]
 8013f48:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013f4c:	715a      	strb	r2, [r3, #5]
 8013f4e:	68a3      	ldr	r3, [r4, #8]
 8013f50:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013f54:	719a      	strb	r2, [r3, #6]
 8013f56:	68a3      	ldr	r3, [r4, #8]
 8013f58:	f89d 2000 	ldrb.w	r2, [sp]
 8013f5c:	71da      	strb	r2, [r3, #7]
 8013f5e:	68a2      	ldr	r2, [r4, #8]
 8013f60:	6923      	ldr	r3, [r4, #16]
 8013f62:	3208      	adds	r2, #8
 8013f64:	3308      	adds	r3, #8
 8013f66:	2108      	movs	r1, #8
 8013f68:	60a2      	str	r2, [r4, #8]
 8013f6a:	6123      	str	r3, [r4, #16]
 8013f6c:	7561      	strb	r1, [r4, #21]
 8013f6e:	7da0      	ldrb	r0, [r4, #22]
 8013f70:	f080 0001 	eor.w	r0, r0, #1
 8013f74:	b002      	add	sp, #8
 8013f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013f7e:	6019      	str	r1, [r3, #0]
 8013f80:	605a      	str	r2, [r3, #4]
 8013f82:	e7ec      	b.n	8013f5e <ucdr_serialize_uint64_t+0x10a>
 8013f84:	68a2      	ldr	r2, [r4, #8]
 8013f86:	6923      	ldr	r3, [r4, #16]
 8013f88:	7da0      	ldrb	r0, [r4, #22]
 8013f8a:	7567      	strb	r7, [r4, #21]
 8013f8c:	1b92      	subs	r2, r2, r6
 8013f8e:	1b9b      	subs	r3, r3, r6
 8013f90:	f080 0001 	eor.w	r0, r0, #1
 8013f94:	60a2      	str	r2, [r4, #8]
 8013f96:	6123      	str	r3, [r4, #16]
 8013f98:	b002      	add	sp, #8
 8013f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f9e:	68a3      	ldr	r3, [r4, #8]
 8013fa0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013fa4:	701a      	strb	r2, [r3, #0]
 8013fa6:	68a3      	ldr	r3, [r4, #8]
 8013fa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013fac:	701a      	strb	r2, [r3, #0]
 8013fae:	68a3      	ldr	r3, [r4, #8]
 8013fb0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013fb4:	701a      	strb	r2, [r3, #0]
 8013fb6:	68a3      	ldr	r3, [r4, #8]
 8013fb8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	68a3      	ldr	r3, [r4, #8]
 8013fc0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013fc4:	701a      	strb	r2, [r3, #0]
 8013fc6:	68a5      	ldr	r5, [r4, #8]
 8013fc8:	e78f      	b.n	8013eea <ucdr_serialize_uint64_t+0x96>
 8013fca:	4628      	mov	r0, r5
 8013fcc:	466d      	mov	r5, sp
 8013fce:	4632      	mov	r2, r6
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	f00a f826 	bl	801e022 <memcpy>
 8013fd6:	68a0      	ldr	r0, [r4, #8]
 8013fd8:	4642      	mov	r2, r8
 8013fda:	19a9      	adds	r1, r5, r6
 8013fdc:	f00a f821 	bl	801e022 <memcpy>
 8013fe0:	e786      	b.n	8013ef0 <ucdr_serialize_uint64_t+0x9c>
 8013fe2:	bf00      	nop

08013fe4 <ucdr_serialize_int16_t>:
 8013fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe8:	b082      	sub	sp, #8
 8013fea:	460b      	mov	r3, r1
 8013fec:	2102      	movs	r1, #2
 8013fee:	4604      	mov	r4, r0
 8013ff0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013ff4:	f7fa fb0a 	bl	800e60c <ucdr_buffer_alignment>
 8013ff8:	4601      	mov	r1, r0
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	7d67      	ldrb	r7, [r4, #21]
 8013ffe:	f7fa fb49 	bl	800e694 <ucdr_advance_buffer>
 8014002:	2102      	movs	r1, #2
 8014004:	4620      	mov	r0, r4
 8014006:	f7fa faa1 	bl	800e54c <ucdr_check_buffer_available_for>
 801400a:	b1c0      	cbz	r0, 801403e <ucdr_serialize_int16_t+0x5a>
 801400c:	7d22      	ldrb	r2, [r4, #20]
 801400e:	68a3      	ldr	r3, [r4, #8]
 8014010:	2a01      	cmp	r2, #1
 8014012:	d04e      	beq.n	80140b2 <ucdr_serialize_int16_t+0xce>
 8014014:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014018:	701a      	strb	r2, [r3, #0]
 801401a:	68a3      	ldr	r3, [r4, #8]
 801401c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014020:	705a      	strb	r2, [r3, #1]
 8014022:	68a2      	ldr	r2, [r4, #8]
 8014024:	6923      	ldr	r3, [r4, #16]
 8014026:	3202      	adds	r2, #2
 8014028:	3302      	adds	r3, #2
 801402a:	2102      	movs	r1, #2
 801402c:	60a2      	str	r2, [r4, #8]
 801402e:	6123      	str	r3, [r4, #16]
 8014030:	7561      	strb	r1, [r4, #21]
 8014032:	7da0      	ldrb	r0, [r4, #22]
 8014034:	f080 0001 	eor.w	r0, r0, #1
 8014038:	b002      	add	sp, #8
 801403a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801403e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8014042:	42ab      	cmp	r3, r5
 8014044:	d923      	bls.n	801408e <ucdr_serialize_int16_t+0xaa>
 8014046:	1b5e      	subs	r6, r3, r5
 8014048:	60a3      	str	r3, [r4, #8]
 801404a:	6923      	ldr	r3, [r4, #16]
 801404c:	f1c6 0802 	rsb	r8, r6, #2
 8014050:	4433      	add	r3, r6
 8014052:	6123      	str	r3, [r4, #16]
 8014054:	4641      	mov	r1, r8
 8014056:	4620      	mov	r0, r4
 8014058:	f7fa fa84 	bl	800e564 <ucdr_check_final_buffer_behavior>
 801405c:	b368      	cbz	r0, 80140ba <ucdr_serialize_int16_t+0xd6>
 801405e:	7d23      	ldrb	r3, [r4, #20]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d03b      	beq.n	80140dc <ucdr_serialize_int16_t+0xf8>
 8014064:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014068:	702b      	strb	r3, [r5, #0]
 801406a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801406e:	706b      	strb	r3, [r5, #1]
 8014070:	6923      	ldr	r3, [r4, #16]
 8014072:	68a2      	ldr	r2, [r4, #8]
 8014074:	7da0      	ldrb	r0, [r4, #22]
 8014076:	3302      	adds	r3, #2
 8014078:	4442      	add	r2, r8
 801407a:	1b9b      	subs	r3, r3, r6
 801407c:	2102      	movs	r1, #2
 801407e:	f080 0001 	eor.w	r0, r0, #1
 8014082:	60a2      	str	r2, [r4, #8]
 8014084:	6123      	str	r3, [r4, #16]
 8014086:	7561      	strb	r1, [r4, #21]
 8014088:	b002      	add	sp, #8
 801408a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801408e:	2102      	movs	r1, #2
 8014090:	4620      	mov	r0, r4
 8014092:	f7fa fa67 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014096:	2800      	cmp	r0, #0
 8014098:	d0cb      	beq.n	8014032 <ucdr_serialize_int16_t+0x4e>
 801409a:	7d23      	ldrb	r3, [r4, #20]
 801409c:	68a2      	ldr	r2, [r4, #8]
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d018      	beq.n	80140d4 <ucdr_serialize_int16_t+0xf0>
 80140a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80140a6:	7013      	strb	r3, [r2, #0]
 80140a8:	68a3      	ldr	r3, [r4, #8]
 80140aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80140ae:	705a      	strb	r2, [r3, #1]
 80140b0:	e7b7      	b.n	8014022 <ucdr_serialize_int16_t+0x3e>
 80140b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80140b6:	801a      	strh	r2, [r3, #0]
 80140b8:	e7b3      	b.n	8014022 <ucdr_serialize_int16_t+0x3e>
 80140ba:	68a2      	ldr	r2, [r4, #8]
 80140bc:	6923      	ldr	r3, [r4, #16]
 80140be:	7da0      	ldrb	r0, [r4, #22]
 80140c0:	7567      	strb	r7, [r4, #21]
 80140c2:	1b92      	subs	r2, r2, r6
 80140c4:	1b9b      	subs	r3, r3, r6
 80140c6:	f080 0001 	eor.w	r0, r0, #1
 80140ca:	60a2      	str	r2, [r4, #8]
 80140cc:	6123      	str	r3, [r4, #16]
 80140ce:	b002      	add	sp, #8
 80140d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80140d8:	8013      	strh	r3, [r2, #0]
 80140da:	e7a2      	b.n	8014022 <ucdr_serialize_int16_t+0x3e>
 80140dc:	4628      	mov	r0, r5
 80140de:	f10d 0506 	add.w	r5, sp, #6
 80140e2:	4632      	mov	r2, r6
 80140e4:	4629      	mov	r1, r5
 80140e6:	f009 ff9c 	bl	801e022 <memcpy>
 80140ea:	68a0      	ldr	r0, [r4, #8]
 80140ec:	4642      	mov	r2, r8
 80140ee:	19a9      	adds	r1, r5, r6
 80140f0:	f009 ff97 	bl	801e022 <memcpy>
 80140f4:	e7bc      	b.n	8014070 <ucdr_serialize_int16_t+0x8c>
 80140f6:	bf00      	nop

080140f8 <ucdr_deserialize_int16_t>:
 80140f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140fc:	460d      	mov	r5, r1
 80140fe:	2102      	movs	r1, #2
 8014100:	4604      	mov	r4, r0
 8014102:	f7fa fa83 	bl	800e60c <ucdr_buffer_alignment>
 8014106:	4601      	mov	r1, r0
 8014108:	4620      	mov	r0, r4
 801410a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801410e:	f7fa fac1 	bl	800e694 <ucdr_advance_buffer>
 8014112:	2102      	movs	r1, #2
 8014114:	4620      	mov	r0, r4
 8014116:	f7fa fa19 	bl	800e54c <ucdr_check_buffer_available_for>
 801411a:	b1a8      	cbz	r0, 8014148 <ucdr_deserialize_int16_t+0x50>
 801411c:	7d22      	ldrb	r2, [r4, #20]
 801411e:	68a3      	ldr	r3, [r4, #8]
 8014120:	2a01      	cmp	r2, #1
 8014122:	d046      	beq.n	80141b2 <ucdr_deserialize_int16_t+0xba>
 8014124:	785b      	ldrb	r3, [r3, #1]
 8014126:	702b      	strb	r3, [r5, #0]
 8014128:	68a3      	ldr	r3, [r4, #8]
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	706b      	strb	r3, [r5, #1]
 801412e:	68a2      	ldr	r2, [r4, #8]
 8014130:	6923      	ldr	r3, [r4, #16]
 8014132:	3202      	adds	r2, #2
 8014134:	3302      	adds	r3, #2
 8014136:	2102      	movs	r1, #2
 8014138:	60a2      	str	r2, [r4, #8]
 801413a:	6123      	str	r3, [r4, #16]
 801413c:	7561      	strb	r1, [r4, #21]
 801413e:	7da0      	ldrb	r0, [r4, #22]
 8014140:	f080 0001 	eor.w	r0, r0, #1
 8014144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014148:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801414c:	42be      	cmp	r6, r7
 801414e:	d920      	bls.n	8014192 <ucdr_deserialize_int16_t+0x9a>
 8014150:	6923      	ldr	r3, [r4, #16]
 8014152:	60a6      	str	r6, [r4, #8]
 8014154:	1bf6      	subs	r6, r6, r7
 8014156:	4433      	add	r3, r6
 8014158:	f1c6 0902 	rsb	r9, r6, #2
 801415c:	6123      	str	r3, [r4, #16]
 801415e:	4649      	mov	r1, r9
 8014160:	4620      	mov	r0, r4
 8014162:	f7fa f9ff 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014166:	b338      	cbz	r0, 80141b8 <ucdr_deserialize_int16_t+0xc0>
 8014168:	7d23      	ldrb	r3, [r4, #20]
 801416a:	2b01      	cmp	r3, #1
 801416c:	d034      	beq.n	80141d8 <ucdr_deserialize_int16_t+0xe0>
 801416e:	787b      	ldrb	r3, [r7, #1]
 8014170:	702b      	strb	r3, [r5, #0]
 8014172:	783b      	ldrb	r3, [r7, #0]
 8014174:	706b      	strb	r3, [r5, #1]
 8014176:	6923      	ldr	r3, [r4, #16]
 8014178:	68a2      	ldr	r2, [r4, #8]
 801417a:	7da0      	ldrb	r0, [r4, #22]
 801417c:	2102      	movs	r1, #2
 801417e:	3302      	adds	r3, #2
 8014180:	444a      	add	r2, r9
 8014182:	1b9b      	subs	r3, r3, r6
 8014184:	7561      	strb	r1, [r4, #21]
 8014186:	60a2      	str	r2, [r4, #8]
 8014188:	6123      	str	r3, [r4, #16]
 801418a:	f080 0001 	eor.w	r0, r0, #1
 801418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014192:	2102      	movs	r1, #2
 8014194:	4620      	mov	r0, r4
 8014196:	f7fa f9e5 	bl	800e564 <ucdr_check_final_buffer_behavior>
 801419a:	2800      	cmp	r0, #0
 801419c:	d0cf      	beq.n	801413e <ucdr_deserialize_int16_t+0x46>
 801419e:	7d23      	ldrb	r3, [r4, #20]
 80141a0:	68a2      	ldr	r2, [r4, #8]
 80141a2:	2b01      	cmp	r3, #1
 80141a4:	d015      	beq.n	80141d2 <ucdr_deserialize_int16_t+0xda>
 80141a6:	7853      	ldrb	r3, [r2, #1]
 80141a8:	702b      	strb	r3, [r5, #0]
 80141aa:	68a3      	ldr	r3, [r4, #8]
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	706b      	strb	r3, [r5, #1]
 80141b0:	e7bd      	b.n	801412e <ucdr_deserialize_int16_t+0x36>
 80141b2:	881b      	ldrh	r3, [r3, #0]
 80141b4:	802b      	strh	r3, [r5, #0]
 80141b6:	e7ba      	b.n	801412e <ucdr_deserialize_int16_t+0x36>
 80141b8:	68a2      	ldr	r2, [r4, #8]
 80141ba:	6923      	ldr	r3, [r4, #16]
 80141bc:	7da0      	ldrb	r0, [r4, #22]
 80141be:	f884 8015 	strb.w	r8, [r4, #21]
 80141c2:	1b92      	subs	r2, r2, r6
 80141c4:	1b9b      	subs	r3, r3, r6
 80141c6:	60a2      	str	r2, [r4, #8]
 80141c8:	6123      	str	r3, [r4, #16]
 80141ca:	f080 0001 	eor.w	r0, r0, #1
 80141ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141d2:	8813      	ldrh	r3, [r2, #0]
 80141d4:	802b      	strh	r3, [r5, #0]
 80141d6:	e7aa      	b.n	801412e <ucdr_deserialize_int16_t+0x36>
 80141d8:	4639      	mov	r1, r7
 80141da:	4632      	mov	r2, r6
 80141dc:	4628      	mov	r0, r5
 80141de:	f009 ff20 	bl	801e022 <memcpy>
 80141e2:	68a1      	ldr	r1, [r4, #8]
 80141e4:	464a      	mov	r2, r9
 80141e6:	19a8      	adds	r0, r5, r6
 80141e8:	f009 ff1b 	bl	801e022 <memcpy>
 80141ec:	e7c3      	b.n	8014176 <ucdr_deserialize_int16_t+0x7e>
 80141ee:	bf00      	nop

080141f0 <ucdr_serialize_int32_t>:
 80141f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141f4:	b082      	sub	sp, #8
 80141f6:	4604      	mov	r4, r0
 80141f8:	9101      	str	r1, [sp, #4]
 80141fa:	2104      	movs	r1, #4
 80141fc:	f7fa fa06 	bl	800e60c <ucdr_buffer_alignment>
 8014200:	4601      	mov	r1, r0
 8014202:	4620      	mov	r0, r4
 8014204:	7d67      	ldrb	r7, [r4, #21]
 8014206:	f7fa fa45 	bl	800e694 <ucdr_advance_buffer>
 801420a:	2104      	movs	r1, #4
 801420c:	4620      	mov	r0, r4
 801420e:	f7fa f99d 	bl	800e54c <ucdr_check_buffer_available_for>
 8014212:	b300      	cbz	r0, 8014256 <ucdr_serialize_int32_t+0x66>
 8014214:	7d22      	ldrb	r2, [r4, #20]
 8014216:	68a3      	ldr	r3, [r4, #8]
 8014218:	2a01      	cmp	r2, #1
 801421a:	d05d      	beq.n	80142d8 <ucdr_serialize_int32_t+0xe8>
 801421c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014220:	701a      	strb	r2, [r3, #0]
 8014222:	68a3      	ldr	r3, [r4, #8]
 8014224:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014228:	705a      	strb	r2, [r3, #1]
 801422a:	68a3      	ldr	r3, [r4, #8]
 801422c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014230:	709a      	strb	r2, [r3, #2]
 8014232:	68a3      	ldr	r3, [r4, #8]
 8014234:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014238:	70da      	strb	r2, [r3, #3]
 801423a:	68a2      	ldr	r2, [r4, #8]
 801423c:	6923      	ldr	r3, [r4, #16]
 801423e:	3204      	adds	r2, #4
 8014240:	3304      	adds	r3, #4
 8014242:	2104      	movs	r1, #4
 8014244:	60a2      	str	r2, [r4, #8]
 8014246:	6123      	str	r3, [r4, #16]
 8014248:	7561      	strb	r1, [r4, #21]
 801424a:	7da0      	ldrb	r0, [r4, #22]
 801424c:	f080 0001 	eor.w	r0, r0, #1
 8014250:	b002      	add	sp, #8
 8014252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014256:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801425a:	42ab      	cmp	r3, r5
 801425c:	d92e      	bls.n	80142bc <ucdr_serialize_int32_t+0xcc>
 801425e:	1b5e      	subs	r6, r3, r5
 8014260:	60a3      	str	r3, [r4, #8]
 8014262:	6923      	ldr	r3, [r4, #16]
 8014264:	f1c6 0804 	rsb	r8, r6, #4
 8014268:	4433      	add	r3, r6
 801426a:	6123      	str	r3, [r4, #16]
 801426c:	4641      	mov	r1, r8
 801426e:	4620      	mov	r0, r4
 8014270:	f7fa f978 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014274:	b398      	cbz	r0, 80142de <ucdr_serialize_int32_t+0xee>
 8014276:	7d23      	ldrb	r3, [r4, #20]
 8014278:	2b01      	cmp	r3, #1
 801427a:	d046      	beq.n	801430a <ucdr_serialize_int32_t+0x11a>
 801427c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014280:	702b      	strb	r3, [r5, #0]
 8014282:	2e01      	cmp	r6, #1
 8014284:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014288:	706b      	strb	r3, [r5, #1]
 801428a:	d035      	beq.n	80142f8 <ucdr_serialize_int32_t+0x108>
 801428c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014290:	70ab      	strb	r3, [r5, #2]
 8014292:	2e02      	cmp	r6, #2
 8014294:	d034      	beq.n	8014300 <ucdr_serialize_int32_t+0x110>
 8014296:	3503      	adds	r5, #3
 8014298:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801429c:	702b      	strb	r3, [r5, #0]
 801429e:	6923      	ldr	r3, [r4, #16]
 80142a0:	68a2      	ldr	r2, [r4, #8]
 80142a2:	7da0      	ldrb	r0, [r4, #22]
 80142a4:	3304      	adds	r3, #4
 80142a6:	4442      	add	r2, r8
 80142a8:	1b9b      	subs	r3, r3, r6
 80142aa:	2104      	movs	r1, #4
 80142ac:	f080 0001 	eor.w	r0, r0, #1
 80142b0:	60a2      	str	r2, [r4, #8]
 80142b2:	6123      	str	r3, [r4, #16]
 80142b4:	7561      	strb	r1, [r4, #21]
 80142b6:	b002      	add	sp, #8
 80142b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142bc:	2104      	movs	r1, #4
 80142be:	4620      	mov	r0, r4
 80142c0:	f7fa f950 	bl	800e564 <ucdr_check_final_buffer_behavior>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d0c0      	beq.n	801424a <ucdr_serialize_int32_t+0x5a>
 80142c8:	7d23      	ldrb	r3, [r4, #20]
 80142ca:	68a2      	ldr	r2, [r4, #8]
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d019      	beq.n	8014304 <ucdr_serialize_int32_t+0x114>
 80142d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80142d4:	7013      	strb	r3, [r2, #0]
 80142d6:	e7a4      	b.n	8014222 <ucdr_serialize_int32_t+0x32>
 80142d8:	9a01      	ldr	r2, [sp, #4]
 80142da:	601a      	str	r2, [r3, #0]
 80142dc:	e7ad      	b.n	801423a <ucdr_serialize_int32_t+0x4a>
 80142de:	68a2      	ldr	r2, [r4, #8]
 80142e0:	6923      	ldr	r3, [r4, #16]
 80142e2:	7da0      	ldrb	r0, [r4, #22]
 80142e4:	7567      	strb	r7, [r4, #21]
 80142e6:	1b92      	subs	r2, r2, r6
 80142e8:	1b9b      	subs	r3, r3, r6
 80142ea:	f080 0001 	eor.w	r0, r0, #1
 80142ee:	60a2      	str	r2, [r4, #8]
 80142f0:	6123      	str	r3, [r4, #16]
 80142f2:	b002      	add	sp, #8
 80142f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142f8:	68a3      	ldr	r3, [r4, #8]
 80142fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80142fe:	701a      	strb	r2, [r3, #0]
 8014300:	68a5      	ldr	r5, [r4, #8]
 8014302:	e7c9      	b.n	8014298 <ucdr_serialize_int32_t+0xa8>
 8014304:	9b01      	ldr	r3, [sp, #4]
 8014306:	6013      	str	r3, [r2, #0]
 8014308:	e797      	b.n	801423a <ucdr_serialize_int32_t+0x4a>
 801430a:	4628      	mov	r0, r5
 801430c:	ad01      	add	r5, sp, #4
 801430e:	4632      	mov	r2, r6
 8014310:	4629      	mov	r1, r5
 8014312:	f009 fe86 	bl	801e022 <memcpy>
 8014316:	68a0      	ldr	r0, [r4, #8]
 8014318:	4642      	mov	r2, r8
 801431a:	19a9      	adds	r1, r5, r6
 801431c:	f009 fe81 	bl	801e022 <memcpy>
 8014320:	e7bd      	b.n	801429e <ucdr_serialize_int32_t+0xae>
 8014322:	bf00      	nop

08014324 <ucdr_deserialize_int32_t>:
 8014324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014328:	460d      	mov	r5, r1
 801432a:	2104      	movs	r1, #4
 801432c:	4604      	mov	r4, r0
 801432e:	f7fa f96d 	bl	800e60c <ucdr_buffer_alignment>
 8014332:	4601      	mov	r1, r0
 8014334:	4620      	mov	r0, r4
 8014336:	f894 8015 	ldrb.w	r8, [r4, #21]
 801433a:	f7fa f9ab 	bl	800e694 <ucdr_advance_buffer>
 801433e:	2104      	movs	r1, #4
 8014340:	4620      	mov	r0, r4
 8014342:	f7fa f903 	bl	800e54c <ucdr_check_buffer_available_for>
 8014346:	b1d8      	cbz	r0, 8014380 <ucdr_deserialize_int32_t+0x5c>
 8014348:	7d22      	ldrb	r2, [r4, #20]
 801434a:	68a3      	ldr	r3, [r4, #8]
 801434c:	2a01      	cmp	r2, #1
 801434e:	d052      	beq.n	80143f6 <ucdr_deserialize_int32_t+0xd2>
 8014350:	78db      	ldrb	r3, [r3, #3]
 8014352:	702b      	strb	r3, [r5, #0]
 8014354:	68a3      	ldr	r3, [r4, #8]
 8014356:	789b      	ldrb	r3, [r3, #2]
 8014358:	706b      	strb	r3, [r5, #1]
 801435a:	68a3      	ldr	r3, [r4, #8]
 801435c:	785b      	ldrb	r3, [r3, #1]
 801435e:	70ab      	strb	r3, [r5, #2]
 8014360:	68a3      	ldr	r3, [r4, #8]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	70eb      	strb	r3, [r5, #3]
 8014366:	68a2      	ldr	r2, [r4, #8]
 8014368:	6923      	ldr	r3, [r4, #16]
 801436a:	3204      	adds	r2, #4
 801436c:	3304      	adds	r3, #4
 801436e:	2104      	movs	r1, #4
 8014370:	60a2      	str	r2, [r4, #8]
 8014372:	6123      	str	r3, [r4, #16]
 8014374:	7561      	strb	r1, [r4, #21]
 8014376:	7da0      	ldrb	r0, [r4, #22]
 8014378:	f080 0001 	eor.w	r0, r0, #1
 801437c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014380:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014384:	42b7      	cmp	r7, r6
 8014386:	d92a      	bls.n	80143de <ucdr_deserialize_int32_t+0xba>
 8014388:	6923      	ldr	r3, [r4, #16]
 801438a:	60a7      	str	r7, [r4, #8]
 801438c:	1bbf      	subs	r7, r7, r6
 801438e:	443b      	add	r3, r7
 8014390:	f1c7 0904 	rsb	r9, r7, #4
 8014394:	6123      	str	r3, [r4, #16]
 8014396:	4649      	mov	r1, r9
 8014398:	4620      	mov	r0, r4
 801439a:	f7fa f8e3 	bl	800e564 <ucdr_check_final_buffer_behavior>
 801439e:	b368      	cbz	r0, 80143fc <ucdr_deserialize_int32_t+0xd8>
 80143a0:	7d23      	ldrb	r3, [r4, #20]
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d040      	beq.n	8014428 <ucdr_deserialize_int32_t+0x104>
 80143a6:	78f3      	ldrb	r3, [r6, #3]
 80143a8:	702b      	strb	r3, [r5, #0]
 80143aa:	78b3      	ldrb	r3, [r6, #2]
 80143ac:	706b      	strb	r3, [r5, #1]
 80143ae:	2f01      	cmp	r7, #1
 80143b0:	d031      	beq.n	8014416 <ucdr_deserialize_int32_t+0xf2>
 80143b2:	7873      	ldrb	r3, [r6, #1]
 80143b4:	70ab      	strb	r3, [r5, #2]
 80143b6:	2f02      	cmp	r7, #2
 80143b8:	f105 0503 	add.w	r5, r5, #3
 80143bc:	d02f      	beq.n	801441e <ucdr_deserialize_int32_t+0xfa>
 80143be:	7833      	ldrb	r3, [r6, #0]
 80143c0:	702b      	strb	r3, [r5, #0]
 80143c2:	6923      	ldr	r3, [r4, #16]
 80143c4:	68a2      	ldr	r2, [r4, #8]
 80143c6:	7da0      	ldrb	r0, [r4, #22]
 80143c8:	2104      	movs	r1, #4
 80143ca:	3304      	adds	r3, #4
 80143cc:	444a      	add	r2, r9
 80143ce:	1bdb      	subs	r3, r3, r7
 80143d0:	7561      	strb	r1, [r4, #21]
 80143d2:	60a2      	str	r2, [r4, #8]
 80143d4:	6123      	str	r3, [r4, #16]
 80143d6:	f080 0001 	eor.w	r0, r0, #1
 80143da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143de:	2104      	movs	r1, #4
 80143e0:	4620      	mov	r0, r4
 80143e2:	f7fa f8bf 	bl	800e564 <ucdr_check_final_buffer_behavior>
 80143e6:	2800      	cmp	r0, #0
 80143e8:	d0c5      	beq.n	8014376 <ucdr_deserialize_int32_t+0x52>
 80143ea:	7d23      	ldrb	r3, [r4, #20]
 80143ec:	68a2      	ldr	r2, [r4, #8]
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d017      	beq.n	8014422 <ucdr_deserialize_int32_t+0xfe>
 80143f2:	78d3      	ldrb	r3, [r2, #3]
 80143f4:	e7ad      	b.n	8014352 <ucdr_deserialize_int32_t+0x2e>
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	602b      	str	r3, [r5, #0]
 80143fa:	e7b4      	b.n	8014366 <ucdr_deserialize_int32_t+0x42>
 80143fc:	68a2      	ldr	r2, [r4, #8]
 80143fe:	6923      	ldr	r3, [r4, #16]
 8014400:	7da0      	ldrb	r0, [r4, #22]
 8014402:	f884 8015 	strb.w	r8, [r4, #21]
 8014406:	1bd2      	subs	r2, r2, r7
 8014408:	1bdb      	subs	r3, r3, r7
 801440a:	60a2      	str	r2, [r4, #8]
 801440c:	6123      	str	r3, [r4, #16]
 801440e:	f080 0001 	eor.w	r0, r0, #1
 8014412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014416:	68a3      	ldr	r3, [r4, #8]
 8014418:	785b      	ldrb	r3, [r3, #1]
 801441a:	70ab      	strb	r3, [r5, #2]
 801441c:	3503      	adds	r5, #3
 801441e:	68a6      	ldr	r6, [r4, #8]
 8014420:	e7cd      	b.n	80143be <ucdr_deserialize_int32_t+0x9a>
 8014422:	6813      	ldr	r3, [r2, #0]
 8014424:	602b      	str	r3, [r5, #0]
 8014426:	e79e      	b.n	8014366 <ucdr_deserialize_int32_t+0x42>
 8014428:	4631      	mov	r1, r6
 801442a:	463a      	mov	r2, r7
 801442c:	4628      	mov	r0, r5
 801442e:	f009 fdf8 	bl	801e022 <memcpy>
 8014432:	68a1      	ldr	r1, [r4, #8]
 8014434:	464a      	mov	r2, r9
 8014436:	19e8      	adds	r0, r5, r7
 8014438:	f009 fdf3 	bl	801e022 <memcpy>
 801443c:	e7c1      	b.n	80143c2 <ucdr_deserialize_int32_t+0x9e>
 801443e:	bf00      	nop

08014440 <ucdr_serialize_double>:
 8014440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014444:	2108      	movs	r1, #8
 8014446:	b082      	sub	sp, #8
 8014448:	4604      	mov	r4, r0
 801444a:	ed8d 0b00 	vstr	d0, [sp]
 801444e:	f7fa f8dd 	bl	800e60c <ucdr_buffer_alignment>
 8014452:	4601      	mov	r1, r0
 8014454:	4620      	mov	r0, r4
 8014456:	7d67      	ldrb	r7, [r4, #21]
 8014458:	f7fa f91c 	bl	800e694 <ucdr_advance_buffer>
 801445c:	2108      	movs	r1, #8
 801445e:	4620      	mov	r0, r4
 8014460:	f7fa f874 	bl	800e54c <ucdr_check_buffer_available_for>
 8014464:	2800      	cmp	r0, #0
 8014466:	d14d      	bne.n	8014504 <ucdr_serialize_double+0xc4>
 8014468:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801446c:	42ab      	cmp	r3, r5
 801446e:	d944      	bls.n	80144fa <ucdr_serialize_double+0xba>
 8014470:	1b5e      	subs	r6, r3, r5
 8014472:	60a3      	str	r3, [r4, #8]
 8014474:	6923      	ldr	r3, [r4, #16]
 8014476:	f1c6 0808 	rsb	r8, r6, #8
 801447a:	4433      	add	r3, r6
 801447c:	6123      	str	r3, [r4, #16]
 801447e:	4641      	mov	r1, r8
 8014480:	4620      	mov	r0, r4
 8014482:	f7fa f86f 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014486:	2800      	cmp	r0, #0
 8014488:	d072      	beq.n	8014570 <ucdr_serialize_double+0x130>
 801448a:	7d23      	ldrb	r3, [r4, #20]
 801448c:	2b01      	cmp	r3, #1
 801448e:	f000 8092 	beq.w	80145b6 <ucdr_serialize_double+0x176>
 8014492:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014496:	702b      	strb	r3, [r5, #0]
 8014498:	2e01      	cmp	r6, #1
 801449a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801449e:	706b      	strb	r3, [r5, #1]
 80144a0:	d073      	beq.n	801458a <ucdr_serialize_double+0x14a>
 80144a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80144a6:	70ab      	strb	r3, [r5, #2]
 80144a8:	2e02      	cmp	r6, #2
 80144aa:	d072      	beq.n	8014592 <ucdr_serialize_double+0x152>
 80144ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80144b0:	70eb      	strb	r3, [r5, #3]
 80144b2:	2e03      	cmp	r6, #3
 80144b4:	d071      	beq.n	801459a <ucdr_serialize_double+0x15a>
 80144b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80144ba:	712b      	strb	r3, [r5, #4]
 80144bc:	2e04      	cmp	r6, #4
 80144be:	d070      	beq.n	80145a2 <ucdr_serialize_double+0x162>
 80144c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80144c4:	716b      	strb	r3, [r5, #5]
 80144c6:	2e05      	cmp	r6, #5
 80144c8:	d06f      	beq.n	80145aa <ucdr_serialize_double+0x16a>
 80144ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80144ce:	71ab      	strb	r3, [r5, #6]
 80144d0:	2e06      	cmp	r6, #6
 80144d2:	d06e      	beq.n	80145b2 <ucdr_serialize_double+0x172>
 80144d4:	3507      	adds	r5, #7
 80144d6:	f89d 3000 	ldrb.w	r3, [sp]
 80144da:	702b      	strb	r3, [r5, #0]
 80144dc:	6923      	ldr	r3, [r4, #16]
 80144de:	68a2      	ldr	r2, [r4, #8]
 80144e0:	7da0      	ldrb	r0, [r4, #22]
 80144e2:	3308      	adds	r3, #8
 80144e4:	4442      	add	r2, r8
 80144e6:	1b9b      	subs	r3, r3, r6
 80144e8:	2108      	movs	r1, #8
 80144ea:	f080 0001 	eor.w	r0, r0, #1
 80144ee:	60a2      	str	r2, [r4, #8]
 80144f0:	6123      	str	r3, [r4, #16]
 80144f2:	7561      	strb	r1, [r4, #21]
 80144f4:	b002      	add	sp, #8
 80144f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144fa:	2108      	movs	r1, #8
 80144fc:	4620      	mov	r0, r4
 80144fe:	f7fa f831 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014502:	b350      	cbz	r0, 801455a <ucdr_serialize_double+0x11a>
 8014504:	7d22      	ldrb	r2, [r4, #20]
 8014506:	68a3      	ldr	r3, [r4, #8]
 8014508:	2a01      	cmp	r2, #1
 801450a:	d02c      	beq.n	8014566 <ucdr_serialize_double+0x126>
 801450c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014510:	701a      	strb	r2, [r3, #0]
 8014512:	68a3      	ldr	r3, [r4, #8]
 8014514:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014518:	705a      	strb	r2, [r3, #1]
 801451a:	68a3      	ldr	r3, [r4, #8]
 801451c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014520:	709a      	strb	r2, [r3, #2]
 8014522:	68a3      	ldr	r3, [r4, #8]
 8014524:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014528:	70da      	strb	r2, [r3, #3]
 801452a:	68a3      	ldr	r3, [r4, #8]
 801452c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014530:	711a      	strb	r2, [r3, #4]
 8014532:	68a3      	ldr	r3, [r4, #8]
 8014534:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014538:	715a      	strb	r2, [r3, #5]
 801453a:	68a3      	ldr	r3, [r4, #8]
 801453c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014540:	719a      	strb	r2, [r3, #6]
 8014542:	68a3      	ldr	r3, [r4, #8]
 8014544:	f89d 2000 	ldrb.w	r2, [sp]
 8014548:	71da      	strb	r2, [r3, #7]
 801454a:	68a2      	ldr	r2, [r4, #8]
 801454c:	6923      	ldr	r3, [r4, #16]
 801454e:	3208      	adds	r2, #8
 8014550:	3308      	adds	r3, #8
 8014552:	2108      	movs	r1, #8
 8014554:	60a2      	str	r2, [r4, #8]
 8014556:	6123      	str	r3, [r4, #16]
 8014558:	7561      	strb	r1, [r4, #21]
 801455a:	7da0      	ldrb	r0, [r4, #22]
 801455c:	f080 0001 	eor.w	r0, r0, #1
 8014560:	b002      	add	sp, #8
 8014562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014566:	e9dd 1200 	ldrd	r1, r2, [sp]
 801456a:	6019      	str	r1, [r3, #0]
 801456c:	605a      	str	r2, [r3, #4]
 801456e:	e7ec      	b.n	801454a <ucdr_serialize_double+0x10a>
 8014570:	68a2      	ldr	r2, [r4, #8]
 8014572:	6923      	ldr	r3, [r4, #16]
 8014574:	7da0      	ldrb	r0, [r4, #22]
 8014576:	7567      	strb	r7, [r4, #21]
 8014578:	1b92      	subs	r2, r2, r6
 801457a:	1b9b      	subs	r3, r3, r6
 801457c:	f080 0001 	eor.w	r0, r0, #1
 8014580:	60a2      	str	r2, [r4, #8]
 8014582:	6123      	str	r3, [r4, #16]
 8014584:	b002      	add	sp, #8
 8014586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801458a:	68a3      	ldr	r3, [r4, #8]
 801458c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014590:	701a      	strb	r2, [r3, #0]
 8014592:	68a3      	ldr	r3, [r4, #8]
 8014594:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014598:	701a      	strb	r2, [r3, #0]
 801459a:	68a3      	ldr	r3, [r4, #8]
 801459c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80145a0:	701a      	strb	r2, [r3, #0]
 80145a2:	68a3      	ldr	r3, [r4, #8]
 80145a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80145a8:	701a      	strb	r2, [r3, #0]
 80145aa:	68a3      	ldr	r3, [r4, #8]
 80145ac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80145b0:	701a      	strb	r2, [r3, #0]
 80145b2:	68a5      	ldr	r5, [r4, #8]
 80145b4:	e78f      	b.n	80144d6 <ucdr_serialize_double+0x96>
 80145b6:	4628      	mov	r0, r5
 80145b8:	466d      	mov	r5, sp
 80145ba:	4632      	mov	r2, r6
 80145bc:	4629      	mov	r1, r5
 80145be:	f009 fd30 	bl	801e022 <memcpy>
 80145c2:	68a0      	ldr	r0, [r4, #8]
 80145c4:	4642      	mov	r2, r8
 80145c6:	19a9      	adds	r1, r5, r6
 80145c8:	f009 fd2b 	bl	801e022 <memcpy>
 80145cc:	e786      	b.n	80144dc <ucdr_serialize_double+0x9c>
 80145ce:	bf00      	nop

080145d0 <ucdr_serialize_endian_double>:
 80145d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145d4:	460e      	mov	r6, r1
 80145d6:	b083      	sub	sp, #12
 80145d8:	2108      	movs	r1, #8
 80145da:	4604      	mov	r4, r0
 80145dc:	ed8d 0b00 	vstr	d0, [sp]
 80145e0:	f7fa f814 	bl	800e60c <ucdr_buffer_alignment>
 80145e4:	4601      	mov	r1, r0
 80145e6:	4620      	mov	r0, r4
 80145e8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80145ec:	f7fa f852 	bl	800e694 <ucdr_advance_buffer>
 80145f0:	2108      	movs	r1, #8
 80145f2:	4620      	mov	r0, r4
 80145f4:	f7f9 ffaa 	bl	800e54c <ucdr_check_buffer_available_for>
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d14c      	bne.n	8014696 <ucdr_serialize_endian_double+0xc6>
 80145fc:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8014600:	42bd      	cmp	r5, r7
 8014602:	d943      	bls.n	801468c <ucdr_serialize_endian_double+0xbc>
 8014604:	6923      	ldr	r3, [r4, #16]
 8014606:	60a5      	str	r5, [r4, #8]
 8014608:	1bed      	subs	r5, r5, r7
 801460a:	442b      	add	r3, r5
 801460c:	f1c5 0908 	rsb	r9, r5, #8
 8014610:	6123      	str	r3, [r4, #16]
 8014612:	4649      	mov	r1, r9
 8014614:	4620      	mov	r0, r4
 8014616:	f7f9 ffa5 	bl	800e564 <ucdr_check_final_buffer_behavior>
 801461a:	2800      	cmp	r0, #0
 801461c:	d070      	beq.n	8014700 <ucdr_serialize_endian_double+0x130>
 801461e:	2e01      	cmp	r6, #1
 8014620:	f000 8092 	beq.w	8014748 <ucdr_serialize_endian_double+0x178>
 8014624:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014628:	703b      	strb	r3, [r7, #0]
 801462a:	2d01      	cmp	r5, #1
 801462c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014630:	707b      	strb	r3, [r7, #1]
 8014632:	d073      	beq.n	801471c <ucdr_serialize_endian_double+0x14c>
 8014634:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014638:	70bb      	strb	r3, [r7, #2]
 801463a:	2d02      	cmp	r5, #2
 801463c:	d072      	beq.n	8014724 <ucdr_serialize_endian_double+0x154>
 801463e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014642:	70fb      	strb	r3, [r7, #3]
 8014644:	2d03      	cmp	r5, #3
 8014646:	d071      	beq.n	801472c <ucdr_serialize_endian_double+0x15c>
 8014648:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801464c:	713b      	strb	r3, [r7, #4]
 801464e:	2d04      	cmp	r5, #4
 8014650:	d070      	beq.n	8014734 <ucdr_serialize_endian_double+0x164>
 8014652:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014656:	717b      	strb	r3, [r7, #5]
 8014658:	2d05      	cmp	r5, #5
 801465a:	d06f      	beq.n	801473c <ucdr_serialize_endian_double+0x16c>
 801465c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014660:	71bb      	strb	r3, [r7, #6]
 8014662:	2d06      	cmp	r5, #6
 8014664:	d06e      	beq.n	8014744 <ucdr_serialize_endian_double+0x174>
 8014666:	3707      	adds	r7, #7
 8014668:	f89d 3000 	ldrb.w	r3, [sp]
 801466c:	703b      	strb	r3, [r7, #0]
 801466e:	6923      	ldr	r3, [r4, #16]
 8014670:	68a2      	ldr	r2, [r4, #8]
 8014672:	7da0      	ldrb	r0, [r4, #22]
 8014674:	3308      	adds	r3, #8
 8014676:	444a      	add	r2, r9
 8014678:	1b5b      	subs	r3, r3, r5
 801467a:	2108      	movs	r1, #8
 801467c:	f080 0001 	eor.w	r0, r0, #1
 8014680:	60a2      	str	r2, [r4, #8]
 8014682:	6123      	str	r3, [r4, #16]
 8014684:	7561      	strb	r1, [r4, #21]
 8014686:	b003      	add	sp, #12
 8014688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801468c:	2108      	movs	r1, #8
 801468e:	4620      	mov	r0, r4
 8014690:	f7f9 ff68 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014694:	b348      	cbz	r0, 80146ea <ucdr_serialize_endian_double+0x11a>
 8014696:	2e01      	cmp	r6, #1
 8014698:	68a3      	ldr	r3, [r4, #8]
 801469a:	d02c      	beq.n	80146f6 <ucdr_serialize_endian_double+0x126>
 801469c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80146a0:	701a      	strb	r2, [r3, #0]
 80146a2:	68a3      	ldr	r3, [r4, #8]
 80146a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80146a8:	705a      	strb	r2, [r3, #1]
 80146aa:	68a3      	ldr	r3, [r4, #8]
 80146ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80146b0:	709a      	strb	r2, [r3, #2]
 80146b2:	68a3      	ldr	r3, [r4, #8]
 80146b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80146b8:	70da      	strb	r2, [r3, #3]
 80146ba:	68a3      	ldr	r3, [r4, #8]
 80146bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80146c0:	711a      	strb	r2, [r3, #4]
 80146c2:	68a3      	ldr	r3, [r4, #8]
 80146c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80146c8:	715a      	strb	r2, [r3, #5]
 80146ca:	68a3      	ldr	r3, [r4, #8]
 80146cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80146d0:	719a      	strb	r2, [r3, #6]
 80146d2:	68a3      	ldr	r3, [r4, #8]
 80146d4:	f89d 2000 	ldrb.w	r2, [sp]
 80146d8:	71da      	strb	r2, [r3, #7]
 80146da:	68a2      	ldr	r2, [r4, #8]
 80146dc:	6923      	ldr	r3, [r4, #16]
 80146de:	3208      	adds	r2, #8
 80146e0:	3308      	adds	r3, #8
 80146e2:	2108      	movs	r1, #8
 80146e4:	60a2      	str	r2, [r4, #8]
 80146e6:	6123      	str	r3, [r4, #16]
 80146e8:	7561      	strb	r1, [r4, #21]
 80146ea:	7da0      	ldrb	r0, [r4, #22]
 80146ec:	f080 0001 	eor.w	r0, r0, #1
 80146f0:	b003      	add	sp, #12
 80146f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80146fa:	6019      	str	r1, [r3, #0]
 80146fc:	605a      	str	r2, [r3, #4]
 80146fe:	e7ec      	b.n	80146da <ucdr_serialize_endian_double+0x10a>
 8014700:	68a2      	ldr	r2, [r4, #8]
 8014702:	6923      	ldr	r3, [r4, #16]
 8014704:	7da0      	ldrb	r0, [r4, #22]
 8014706:	f884 8015 	strb.w	r8, [r4, #21]
 801470a:	1b52      	subs	r2, r2, r5
 801470c:	1b5b      	subs	r3, r3, r5
 801470e:	f080 0001 	eor.w	r0, r0, #1
 8014712:	60a2      	str	r2, [r4, #8]
 8014714:	6123      	str	r3, [r4, #16]
 8014716:	b003      	add	sp, #12
 8014718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801471c:	68a3      	ldr	r3, [r4, #8]
 801471e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014722:	701a      	strb	r2, [r3, #0]
 8014724:	68a3      	ldr	r3, [r4, #8]
 8014726:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801472a:	701a      	strb	r2, [r3, #0]
 801472c:	68a3      	ldr	r3, [r4, #8]
 801472e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014732:	701a      	strb	r2, [r3, #0]
 8014734:	68a3      	ldr	r3, [r4, #8]
 8014736:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801473a:	701a      	strb	r2, [r3, #0]
 801473c:	68a3      	ldr	r3, [r4, #8]
 801473e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014742:	701a      	strb	r2, [r3, #0]
 8014744:	68a7      	ldr	r7, [r4, #8]
 8014746:	e78f      	b.n	8014668 <ucdr_serialize_endian_double+0x98>
 8014748:	466e      	mov	r6, sp
 801474a:	462a      	mov	r2, r5
 801474c:	4631      	mov	r1, r6
 801474e:	4638      	mov	r0, r7
 8014750:	f009 fc67 	bl	801e022 <memcpy>
 8014754:	68a0      	ldr	r0, [r4, #8]
 8014756:	464a      	mov	r2, r9
 8014758:	1971      	adds	r1, r6, r5
 801475a:	f009 fc62 	bl	801e022 <memcpy>
 801475e:	e786      	b.n	801466e <ucdr_serialize_endian_double+0x9e>

08014760 <ucdr_deserialize_double>:
 8014760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014764:	460d      	mov	r5, r1
 8014766:	2108      	movs	r1, #8
 8014768:	4604      	mov	r4, r0
 801476a:	f7f9 ff4f 	bl	800e60c <ucdr_buffer_alignment>
 801476e:	4601      	mov	r1, r0
 8014770:	4620      	mov	r0, r4
 8014772:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014776:	f7f9 ff8d 	bl	800e694 <ucdr_advance_buffer>
 801477a:	2108      	movs	r1, #8
 801477c:	4620      	mov	r0, r4
 801477e:	f7f9 fee5 	bl	800e54c <ucdr_check_buffer_available_for>
 8014782:	2800      	cmp	r0, #0
 8014784:	d147      	bne.n	8014816 <ucdr_deserialize_double+0xb6>
 8014786:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801478a:	42be      	cmp	r6, r7
 801478c:	d93e      	bls.n	801480c <ucdr_deserialize_double+0xac>
 801478e:	6923      	ldr	r3, [r4, #16]
 8014790:	60a6      	str	r6, [r4, #8]
 8014792:	1bf6      	subs	r6, r6, r7
 8014794:	4433      	add	r3, r6
 8014796:	f1c6 0908 	rsb	r9, r6, #8
 801479a:	6123      	str	r3, [r4, #16]
 801479c:	4649      	mov	r1, r9
 801479e:	4620      	mov	r0, r4
 80147a0:	f7f9 fee0 	bl	800e564 <ucdr_check_final_buffer_behavior>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d063      	beq.n	8014870 <ucdr_deserialize_double+0x110>
 80147a8:	7d23      	ldrb	r3, [r4, #20]
 80147aa:	2b01      	cmp	r3, #1
 80147ac:	f000 8083 	beq.w	80148b6 <ucdr_deserialize_double+0x156>
 80147b0:	79fb      	ldrb	r3, [r7, #7]
 80147b2:	702b      	strb	r3, [r5, #0]
 80147b4:	79bb      	ldrb	r3, [r7, #6]
 80147b6:	706b      	strb	r3, [r5, #1]
 80147b8:	2e01      	cmp	r6, #1
 80147ba:	d066      	beq.n	801488a <ucdr_deserialize_double+0x12a>
 80147bc:	797b      	ldrb	r3, [r7, #5]
 80147be:	70ab      	strb	r3, [r5, #2]
 80147c0:	2e02      	cmp	r6, #2
 80147c2:	f000 8089 	beq.w	80148d8 <ucdr_deserialize_double+0x178>
 80147c6:	793b      	ldrb	r3, [r7, #4]
 80147c8:	70eb      	strb	r3, [r5, #3]
 80147ca:	2e03      	cmp	r6, #3
 80147cc:	f000 8082 	beq.w	80148d4 <ucdr_deserialize_double+0x174>
 80147d0:	78fb      	ldrb	r3, [r7, #3]
 80147d2:	712b      	strb	r3, [r5, #4]
 80147d4:	2e04      	cmp	r6, #4
 80147d6:	d07b      	beq.n	80148d0 <ucdr_deserialize_double+0x170>
 80147d8:	78bb      	ldrb	r3, [r7, #2]
 80147da:	716b      	strb	r3, [r5, #5]
 80147dc:	2e05      	cmp	r6, #5
 80147de:	d075      	beq.n	80148cc <ucdr_deserialize_double+0x16c>
 80147e0:	787b      	ldrb	r3, [r7, #1]
 80147e2:	71ab      	strb	r3, [r5, #6]
 80147e4:	2e06      	cmp	r6, #6
 80147e6:	f105 0507 	add.w	r5, r5, #7
 80147ea:	d062      	beq.n	80148b2 <ucdr_deserialize_double+0x152>
 80147ec:	783b      	ldrb	r3, [r7, #0]
 80147ee:	702b      	strb	r3, [r5, #0]
 80147f0:	6923      	ldr	r3, [r4, #16]
 80147f2:	68a2      	ldr	r2, [r4, #8]
 80147f4:	7da0      	ldrb	r0, [r4, #22]
 80147f6:	2108      	movs	r1, #8
 80147f8:	3308      	adds	r3, #8
 80147fa:	444a      	add	r2, r9
 80147fc:	1b9b      	subs	r3, r3, r6
 80147fe:	7561      	strb	r1, [r4, #21]
 8014800:	60a2      	str	r2, [r4, #8]
 8014802:	6123      	str	r3, [r4, #16]
 8014804:	f080 0001 	eor.w	r0, r0, #1
 8014808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801480c:	2108      	movs	r1, #8
 801480e:	4620      	mov	r0, r4
 8014810:	f7f9 fea8 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014814:	b310      	cbz	r0, 801485c <ucdr_deserialize_double+0xfc>
 8014816:	7d22      	ldrb	r2, [r4, #20]
 8014818:	68a3      	ldr	r3, [r4, #8]
 801481a:	2a01      	cmp	r2, #1
 801481c:	d023      	beq.n	8014866 <ucdr_deserialize_double+0x106>
 801481e:	79db      	ldrb	r3, [r3, #7]
 8014820:	702b      	strb	r3, [r5, #0]
 8014822:	68a3      	ldr	r3, [r4, #8]
 8014824:	799b      	ldrb	r3, [r3, #6]
 8014826:	706b      	strb	r3, [r5, #1]
 8014828:	68a3      	ldr	r3, [r4, #8]
 801482a:	795b      	ldrb	r3, [r3, #5]
 801482c:	70ab      	strb	r3, [r5, #2]
 801482e:	68a3      	ldr	r3, [r4, #8]
 8014830:	791b      	ldrb	r3, [r3, #4]
 8014832:	70eb      	strb	r3, [r5, #3]
 8014834:	68a3      	ldr	r3, [r4, #8]
 8014836:	78db      	ldrb	r3, [r3, #3]
 8014838:	712b      	strb	r3, [r5, #4]
 801483a:	68a3      	ldr	r3, [r4, #8]
 801483c:	789b      	ldrb	r3, [r3, #2]
 801483e:	716b      	strb	r3, [r5, #5]
 8014840:	68a3      	ldr	r3, [r4, #8]
 8014842:	785b      	ldrb	r3, [r3, #1]
 8014844:	71ab      	strb	r3, [r5, #6]
 8014846:	68a3      	ldr	r3, [r4, #8]
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	71eb      	strb	r3, [r5, #7]
 801484c:	68a2      	ldr	r2, [r4, #8]
 801484e:	6923      	ldr	r3, [r4, #16]
 8014850:	3208      	adds	r2, #8
 8014852:	3308      	adds	r3, #8
 8014854:	2108      	movs	r1, #8
 8014856:	60a2      	str	r2, [r4, #8]
 8014858:	6123      	str	r3, [r4, #16]
 801485a:	7561      	strb	r1, [r4, #21]
 801485c:	7da0      	ldrb	r0, [r4, #22]
 801485e:	f080 0001 	eor.w	r0, r0, #1
 8014862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014866:	681a      	ldr	r2, [r3, #0]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	606b      	str	r3, [r5, #4]
 801486c:	602a      	str	r2, [r5, #0]
 801486e:	e7ed      	b.n	801484c <ucdr_deserialize_double+0xec>
 8014870:	68a2      	ldr	r2, [r4, #8]
 8014872:	6923      	ldr	r3, [r4, #16]
 8014874:	7da0      	ldrb	r0, [r4, #22]
 8014876:	f884 8015 	strb.w	r8, [r4, #21]
 801487a:	1b92      	subs	r2, r2, r6
 801487c:	1b9b      	subs	r3, r3, r6
 801487e:	60a2      	str	r2, [r4, #8]
 8014880:	6123      	str	r3, [r4, #16]
 8014882:	f080 0001 	eor.w	r0, r0, #1
 8014886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801488a:	68a3      	ldr	r3, [r4, #8]
 801488c:	795b      	ldrb	r3, [r3, #5]
 801488e:	70ab      	strb	r3, [r5, #2]
 8014890:	3503      	adds	r5, #3
 8014892:	68a3      	ldr	r3, [r4, #8]
 8014894:	791b      	ldrb	r3, [r3, #4]
 8014896:	f805 3b01 	strb.w	r3, [r5], #1
 801489a:	68a3      	ldr	r3, [r4, #8]
 801489c:	78db      	ldrb	r3, [r3, #3]
 801489e:	f805 3b01 	strb.w	r3, [r5], #1
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	789b      	ldrb	r3, [r3, #2]
 80148a6:	f805 3b01 	strb.w	r3, [r5], #1
 80148aa:	68a3      	ldr	r3, [r4, #8]
 80148ac:	785b      	ldrb	r3, [r3, #1]
 80148ae:	f805 3b01 	strb.w	r3, [r5], #1
 80148b2:	68a7      	ldr	r7, [r4, #8]
 80148b4:	e79a      	b.n	80147ec <ucdr_deserialize_double+0x8c>
 80148b6:	4639      	mov	r1, r7
 80148b8:	4632      	mov	r2, r6
 80148ba:	4628      	mov	r0, r5
 80148bc:	f009 fbb1 	bl	801e022 <memcpy>
 80148c0:	68a1      	ldr	r1, [r4, #8]
 80148c2:	464a      	mov	r2, r9
 80148c4:	19a8      	adds	r0, r5, r6
 80148c6:	f009 fbac 	bl	801e022 <memcpy>
 80148ca:	e791      	b.n	80147f0 <ucdr_deserialize_double+0x90>
 80148cc:	3506      	adds	r5, #6
 80148ce:	e7ec      	b.n	80148aa <ucdr_deserialize_double+0x14a>
 80148d0:	3505      	adds	r5, #5
 80148d2:	e7e6      	b.n	80148a2 <ucdr_deserialize_double+0x142>
 80148d4:	3504      	adds	r5, #4
 80148d6:	e7e0      	b.n	801489a <ucdr_deserialize_double+0x13a>
 80148d8:	3503      	adds	r5, #3
 80148da:	e7da      	b.n	8014892 <ucdr_deserialize_double+0x132>

080148dc <ucdr_deserialize_endian_double>:
 80148dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e0:	460f      	mov	r7, r1
 80148e2:	2108      	movs	r1, #8
 80148e4:	4604      	mov	r4, r0
 80148e6:	4615      	mov	r5, r2
 80148e8:	f7f9 fe90 	bl	800e60c <ucdr_buffer_alignment>
 80148ec:	4601      	mov	r1, r0
 80148ee:	4620      	mov	r0, r4
 80148f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80148f4:	f7f9 fece 	bl	800e694 <ucdr_advance_buffer>
 80148f8:	2108      	movs	r1, #8
 80148fa:	4620      	mov	r0, r4
 80148fc:	f7f9 fe26 	bl	800e54c <ucdr_check_buffer_available_for>
 8014900:	2800      	cmp	r0, #0
 8014902:	d14f      	bne.n	80149a4 <ucdr_deserialize_endian_double+0xc8>
 8014904:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8014908:	4546      	cmp	r6, r8
 801490a:	d946      	bls.n	801499a <ucdr_deserialize_endian_double+0xbe>
 801490c:	6923      	ldr	r3, [r4, #16]
 801490e:	60a6      	str	r6, [r4, #8]
 8014910:	eba6 0608 	sub.w	r6, r6, r8
 8014914:	4433      	add	r3, r6
 8014916:	f1c6 0a08 	rsb	sl, r6, #8
 801491a:	6123      	str	r3, [r4, #16]
 801491c:	4651      	mov	r1, sl
 801491e:	4620      	mov	r0, r4
 8014920:	f7f9 fe20 	bl	800e564 <ucdr_check_final_buffer_behavior>
 8014924:	2800      	cmp	r0, #0
 8014926:	d069      	beq.n	80149fc <ucdr_deserialize_endian_double+0x120>
 8014928:	2f01      	cmp	r7, #1
 801492a:	f000 808b 	beq.w	8014a44 <ucdr_deserialize_endian_double+0x168>
 801492e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8014932:	702b      	strb	r3, [r5, #0]
 8014934:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014938:	706b      	strb	r3, [r5, #1]
 801493a:	2e01      	cmp	r6, #1
 801493c:	d06b      	beq.n	8014a16 <ucdr_deserialize_endian_double+0x13a>
 801493e:	f898 3005 	ldrb.w	r3, [r8, #5]
 8014942:	70ab      	strb	r3, [r5, #2]
 8014944:	2e02      	cmp	r6, #2
 8014946:	f000 808e 	beq.w	8014a66 <ucdr_deserialize_endian_double+0x18a>
 801494a:	f898 3004 	ldrb.w	r3, [r8, #4]
 801494e:	70eb      	strb	r3, [r5, #3]
 8014950:	2e03      	cmp	r6, #3
 8014952:	f000 8086 	beq.w	8014a62 <ucdr_deserialize_endian_double+0x186>
 8014956:	f898 3003 	ldrb.w	r3, [r8, #3]
 801495a:	712b      	strb	r3, [r5, #4]
 801495c:	2e04      	cmp	r6, #4
 801495e:	d07e      	beq.n	8014a5e <ucdr_deserialize_endian_double+0x182>
 8014960:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014964:	716b      	strb	r3, [r5, #5]
 8014966:	2e05      	cmp	r6, #5
 8014968:	d077      	beq.n	8014a5a <ucdr_deserialize_endian_double+0x17e>
 801496a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801496e:	71ab      	strb	r3, [r5, #6]
 8014970:	2e06      	cmp	r6, #6
 8014972:	f105 0507 	add.w	r5, r5, #7
 8014976:	d062      	beq.n	8014a3e <ucdr_deserialize_endian_double+0x162>
 8014978:	f898 3000 	ldrb.w	r3, [r8]
 801497c:	702b      	strb	r3, [r5, #0]
 801497e:	6923      	ldr	r3, [r4, #16]
 8014980:	68a2      	ldr	r2, [r4, #8]
 8014982:	7da0      	ldrb	r0, [r4, #22]
 8014984:	2108      	movs	r1, #8
 8014986:	3308      	adds	r3, #8
 8014988:	4452      	add	r2, sl
 801498a:	1b9b      	subs	r3, r3, r6
 801498c:	7561      	strb	r1, [r4, #21]
 801498e:	60a2      	str	r2, [r4, #8]
 8014990:	6123      	str	r3, [r4, #16]
 8014992:	f080 0001 	eor.w	r0, r0, #1
 8014996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801499a:	2108      	movs	r1, #8
 801499c:	4620      	mov	r0, r4
 801499e:	f7f9 fde1 	bl	800e564 <ucdr_check_final_buffer_behavior>
 80149a2:	b308      	cbz	r0, 80149e8 <ucdr_deserialize_endian_double+0x10c>
 80149a4:	2f01      	cmp	r7, #1
 80149a6:	68a3      	ldr	r3, [r4, #8]
 80149a8:	d023      	beq.n	80149f2 <ucdr_deserialize_endian_double+0x116>
 80149aa:	79db      	ldrb	r3, [r3, #7]
 80149ac:	702b      	strb	r3, [r5, #0]
 80149ae:	68a3      	ldr	r3, [r4, #8]
 80149b0:	799b      	ldrb	r3, [r3, #6]
 80149b2:	706b      	strb	r3, [r5, #1]
 80149b4:	68a3      	ldr	r3, [r4, #8]
 80149b6:	795b      	ldrb	r3, [r3, #5]
 80149b8:	70ab      	strb	r3, [r5, #2]
 80149ba:	68a3      	ldr	r3, [r4, #8]
 80149bc:	791b      	ldrb	r3, [r3, #4]
 80149be:	70eb      	strb	r3, [r5, #3]
 80149c0:	68a3      	ldr	r3, [r4, #8]
 80149c2:	78db      	ldrb	r3, [r3, #3]
 80149c4:	712b      	strb	r3, [r5, #4]
 80149c6:	68a3      	ldr	r3, [r4, #8]
 80149c8:	789b      	ldrb	r3, [r3, #2]
 80149ca:	716b      	strb	r3, [r5, #5]
 80149cc:	68a3      	ldr	r3, [r4, #8]
 80149ce:	785b      	ldrb	r3, [r3, #1]
 80149d0:	71ab      	strb	r3, [r5, #6]
 80149d2:	68a3      	ldr	r3, [r4, #8]
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	71eb      	strb	r3, [r5, #7]
 80149d8:	68a2      	ldr	r2, [r4, #8]
 80149da:	6923      	ldr	r3, [r4, #16]
 80149dc:	3208      	adds	r2, #8
 80149de:	3308      	adds	r3, #8
 80149e0:	2108      	movs	r1, #8
 80149e2:	60a2      	str	r2, [r4, #8]
 80149e4:	6123      	str	r3, [r4, #16]
 80149e6:	7561      	strb	r1, [r4, #21]
 80149e8:	7da0      	ldrb	r0, [r4, #22]
 80149ea:	f080 0001 	eor.w	r0, r0, #1
 80149ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	606b      	str	r3, [r5, #4]
 80149f8:	602a      	str	r2, [r5, #0]
 80149fa:	e7ed      	b.n	80149d8 <ucdr_deserialize_endian_double+0xfc>
 80149fc:	68a2      	ldr	r2, [r4, #8]
 80149fe:	6923      	ldr	r3, [r4, #16]
 8014a00:	7da0      	ldrb	r0, [r4, #22]
 8014a02:	f884 9015 	strb.w	r9, [r4, #21]
 8014a06:	1b92      	subs	r2, r2, r6
 8014a08:	1b9b      	subs	r3, r3, r6
 8014a0a:	60a2      	str	r2, [r4, #8]
 8014a0c:	6123      	str	r3, [r4, #16]
 8014a0e:	f080 0001 	eor.w	r0, r0, #1
 8014a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a16:	68a3      	ldr	r3, [r4, #8]
 8014a18:	795b      	ldrb	r3, [r3, #5]
 8014a1a:	70ab      	strb	r3, [r5, #2]
 8014a1c:	3503      	adds	r5, #3
 8014a1e:	68a3      	ldr	r3, [r4, #8]
 8014a20:	791b      	ldrb	r3, [r3, #4]
 8014a22:	f805 3b01 	strb.w	r3, [r5], #1
 8014a26:	68a3      	ldr	r3, [r4, #8]
 8014a28:	78db      	ldrb	r3, [r3, #3]
 8014a2a:	f805 3b01 	strb.w	r3, [r5], #1
 8014a2e:	68a3      	ldr	r3, [r4, #8]
 8014a30:	789b      	ldrb	r3, [r3, #2]
 8014a32:	f805 3b01 	strb.w	r3, [r5], #1
 8014a36:	68a3      	ldr	r3, [r4, #8]
 8014a38:	785b      	ldrb	r3, [r3, #1]
 8014a3a:	f805 3b01 	strb.w	r3, [r5], #1
 8014a3e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8014a42:	e799      	b.n	8014978 <ucdr_deserialize_endian_double+0x9c>
 8014a44:	4641      	mov	r1, r8
 8014a46:	4632      	mov	r2, r6
 8014a48:	4628      	mov	r0, r5
 8014a4a:	f009 faea 	bl	801e022 <memcpy>
 8014a4e:	68a1      	ldr	r1, [r4, #8]
 8014a50:	4652      	mov	r2, sl
 8014a52:	19a8      	adds	r0, r5, r6
 8014a54:	f009 fae5 	bl	801e022 <memcpy>
 8014a58:	e791      	b.n	801497e <ucdr_deserialize_endian_double+0xa2>
 8014a5a:	3506      	adds	r5, #6
 8014a5c:	e7eb      	b.n	8014a36 <ucdr_deserialize_endian_double+0x15a>
 8014a5e:	3505      	adds	r5, #5
 8014a60:	e7e5      	b.n	8014a2e <ucdr_deserialize_endian_double+0x152>
 8014a62:	3504      	adds	r5, #4
 8014a64:	e7df      	b.n	8014a26 <ucdr_deserialize_endian_double+0x14a>
 8014a66:	3503      	adds	r5, #3
 8014a68:	e7d9      	b.n	8014a1e <ucdr_deserialize_endian_double+0x142>
 8014a6a:	bf00      	nop

08014a6c <uxr_buffer_delete_entity>:
 8014a6c:	b510      	push	{r4, lr}
 8014a6e:	2300      	movs	r3, #0
 8014a70:	b08e      	sub	sp, #56	@ 0x38
 8014a72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014a76:	2303      	movs	r3, #3
 8014a78:	9300      	str	r3, [sp, #0]
 8014a7a:	2204      	movs	r2, #4
 8014a7c:	ab06      	add	r3, sp, #24
 8014a7e:	4604      	mov	r4, r0
 8014a80:	f001 fb34 	bl	80160ec <uxr_prepare_stream_to_write_submessage>
 8014a84:	b918      	cbnz	r0, 8014a8e <uxr_buffer_delete_entity+0x22>
 8014a86:	4604      	mov	r4, r0
 8014a88:	4620      	mov	r0, r4
 8014a8a:	b00e      	add	sp, #56	@ 0x38
 8014a8c:	bd10      	pop	{r4, pc}
 8014a8e:	9902      	ldr	r1, [sp, #8]
 8014a90:	aa05      	add	r2, sp, #20
 8014a92:	4620      	mov	r0, r4
 8014a94:	f001 fc64 	bl	8016360 <uxr_init_base_object_request>
 8014a98:	a905      	add	r1, sp, #20
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	a806      	add	r0, sp, #24
 8014a9e:	f003 fad7 	bl	8018050 <uxr_serialize_DELETE_Payload>
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	b00e      	add	sp, #56	@ 0x38
 8014aa6:	bd10      	pop	{r4, pc}

08014aa8 <uxr_common_create_entity>:
 8014aa8:	b510      	push	{r4, lr}
 8014aaa:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014aae:	b08c      	sub	sp, #48	@ 0x30
 8014ab0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014ab4:	f1bc 0f01 	cmp.w	ip, #1
 8014ab8:	bf08      	it	eq
 8014aba:	f003 0201 	andeq.w	r2, r3, #1
 8014abe:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8014ac2:	bf18      	it	ne
 8014ac4:	2200      	movne	r2, #0
 8014ac6:	330e      	adds	r3, #14
 8014ac8:	441a      	add	r2, r3
 8014aca:	2301      	movs	r3, #1
 8014acc:	e9cd 3100 	strd	r3, r1, [sp]
 8014ad0:	b292      	uxth	r2, r2
 8014ad2:	9903      	ldr	r1, [sp, #12]
 8014ad4:	ab04      	add	r3, sp, #16
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	f001 fb08 	bl	80160ec <uxr_prepare_stream_to_write_submessage>
 8014adc:	b918      	cbnz	r0, 8014ae6 <uxr_common_create_entity+0x3e>
 8014ade:	4604      	mov	r4, r0
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	b00c      	add	sp, #48	@ 0x30
 8014ae4:	bd10      	pop	{r4, pc}
 8014ae6:	9902      	ldr	r1, [sp, #8]
 8014ae8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014aea:	4620      	mov	r0, r4
 8014aec:	f001 fc38 	bl	8016360 <uxr_init_base_object_request>
 8014af0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014af2:	4604      	mov	r4, r0
 8014af4:	a804      	add	r0, sp, #16
 8014af6:	f003 fa09 	bl	8017f0c <uxr_serialize_CREATE_Payload>
 8014afa:	4620      	mov	r0, r4
 8014afc:	b00c      	add	sp, #48	@ 0x30
 8014afe:	bd10      	pop	{r4, pc}

08014b00 <uxr_buffer_create_participant_bin>:
 8014b00:	b570      	push	{r4, r5, r6, lr}
 8014b02:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8014b06:	ac11      	add	r4, sp, #68	@ 0x44
 8014b08:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8014b0c:	2303      	movs	r3, #3
 8014b0e:	7223      	strb	r3, [r4, #8]
 8014b10:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8014b12:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8014b16:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	2100      	movs	r1, #0
 8014b1e:	4605      	mov	r5, r0
 8014b20:	7122      	strb	r2, [r4, #4]
 8014b22:	f88d 1014 	strb.w	r1, [sp, #20]
 8014b26:	b1cb      	cbz	r3, 8014b5c <uxr_buffer_create_participant_bin+0x5c>
 8014b28:	f88d 201c 	strb.w	r2, [sp, #28]
 8014b2c:	9308      	str	r3, [sp, #32]
 8014b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b32:	a915      	add	r1, sp, #84	@ 0x54
 8014b34:	a809      	add	r0, sp, #36	@ 0x24
 8014b36:	f7f9 fd5d 	bl	800e5f4 <ucdr_init_buffer>
 8014b3a:	a905      	add	r1, sp, #20
 8014b3c:	a809      	add	r0, sp, #36	@ 0x24
 8014b3e:	f002 fded 	bl	801771c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8014b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b44:	9600      	str	r6, [sp, #0]
 8014b46:	9401      	str	r4, [sp, #4]
 8014b48:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014b4c:	60e3      	str	r3, [r4, #12]
 8014b4e:	4628      	mov	r0, r5
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	f7ff ffa9 	bl	8014aa8 <uxr_common_create_entity>
 8014b56:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8014b5a:	bd70      	pop	{r4, r5, r6, pc}
 8014b5c:	f88d 301c 	strb.w	r3, [sp, #28]
 8014b60:	e7e5      	b.n	8014b2e <uxr_buffer_create_participant_bin+0x2e>
 8014b62:	bf00      	nop

08014b64 <uxr_buffer_create_topic_bin>:
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8014b6a:	4605      	mov	r5, r0
 8014b6c:	9105      	str	r1, [sp, #20]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	a997      	add	r1, sp, #604	@ 0x25c
 8014b72:	2302      	movs	r3, #2
 8014b74:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8014b78:	9204      	str	r2, [sp, #16]
 8014b7a:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8014b7e:	f000 fa31 	bl	8014fe4 <uxr_object_id_to_raw>
 8014b82:	2303      	movs	r3, #3
 8014b84:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8014b88:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8014b8a:	9306      	str	r3, [sp, #24]
 8014b8c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8014b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b90:	2301      	movs	r3, #1
 8014b92:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8014b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	a917      	add	r1, sp, #92	@ 0x5c
 8014b9e:	a80b      	add	r0, sp, #44	@ 0x2c
 8014ba0:	f88d 301c 	strb.w	r3, [sp, #28]
 8014ba4:	f7f9 fd26 	bl	800e5f4 <ucdr_init_buffer>
 8014ba8:	a906      	add	r1, sp, #24
 8014baa:	a80b      	add	r0, sp, #44	@ 0x2c
 8014bac:	f002 fdd8 	bl	8017760 <uxr_serialize_OBJK_Topic_Binary>
 8014bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bb2:	9316      	str	r3, [sp, #88]	@ 0x58
 8014bb4:	ac13      	add	r4, sp, #76	@ 0x4c
 8014bb6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014bba:	9600      	str	r6, [sp, #0]
 8014bbc:	9401      	str	r4, [sp, #4]
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	f7ff ff71 	bl	8014aa8 <uxr_common_create_entity>
 8014bc6:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8014bca:	bd70      	pop	{r4, r5, r6, pc}

08014bcc <uxr_buffer_create_publisher_bin>:
 8014bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bce:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8014bd2:	4605      	mov	r5, r0
 8014bd4:	9105      	str	r1, [sp, #20]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	2603      	movs	r6, #3
 8014bda:	a992      	add	r1, sp, #584	@ 0x248
 8014bdc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8014be0:	9204      	str	r2, [sp, #16]
 8014be2:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8014be6:	f000 f9fd 	bl	8014fe4 <uxr_object_id_to_raw>
 8014bea:	2300      	movs	r3, #0
 8014bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014bf0:	a912      	add	r1, sp, #72	@ 0x48
 8014bf2:	a806      	add	r0, sp, #24
 8014bf4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014bf8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014bfc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8014c00:	f7f9 fcf8 	bl	800e5f4 <ucdr_init_buffer>
 8014c04:	a993      	add	r1, sp, #588	@ 0x24c
 8014c06:	a806      	add	r0, sp, #24
 8014c08:	f002 fe60 	bl	80178cc <uxr_serialize_OBJK_Publisher_Binary>
 8014c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c0e:	9311      	str	r3, [sp, #68]	@ 0x44
 8014c10:	ac0e      	add	r4, sp, #56	@ 0x38
 8014c12:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014c16:	9700      	str	r7, [sp, #0]
 8014c18:	9401      	str	r4, [sp, #4]
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	f7ff ff43 	bl	8014aa8 <uxr_common_create_entity>
 8014c22:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8014c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c28 <uxr_buffer_create_subscriber_bin>:
 8014c28:	b570      	push	{r4, r5, r6, lr}
 8014c2a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8014c2e:	4605      	mov	r5, r0
 8014c30:	9105      	str	r1, [sp, #20]
 8014c32:	4618      	mov	r0, r3
 8014c34:	a992      	add	r1, sp, #584	@ 0x248
 8014c36:	2304      	movs	r3, #4
 8014c38:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8014c3c:	9204      	str	r2, [sp, #16]
 8014c3e:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8014c42:	f000 f9cf 	bl	8014fe4 <uxr_object_id_to_raw>
 8014c46:	2203      	movs	r2, #3
 8014c48:	2300      	movs	r3, #0
 8014c4a:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 8014c4e:	a912      	add	r1, sp, #72	@ 0x48
 8014c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c54:	a806      	add	r0, sp, #24
 8014c56:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8014c5a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8014c5e:	f7f9 fcc9 	bl	800e5f4 <ucdr_init_buffer>
 8014c62:	a993      	add	r1, sp, #588	@ 0x24c
 8014c64:	a806      	add	r0, sp, #24
 8014c66:	f002 fee3 	bl	8017a30 <uxr_serialize_OBJK_Subscriber_Binary>
 8014c6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8014c6e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014c70:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014c74:	9600      	str	r6, [sp, #0]
 8014c76:	9401      	str	r4, [sp, #4]
 8014c78:	b29b      	uxth	r3, r3
 8014c7a:	4628      	mov	r0, r5
 8014c7c:	f7ff ff14 	bl	8014aa8 <uxr_common_create_entity>
 8014c80:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8014c84:	bd70      	pop	{r4, r5, r6, pc}
 8014c86:	bf00      	nop

08014c88 <uxr_buffer_create_datawriter_bin>:
 8014c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c8a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8014c8e:	ac1d      	add	r4, sp, #116	@ 0x74
 8014c90:	9105      	str	r1, [sp, #20]
 8014c92:	4605      	mov	r5, r0
 8014c94:	a9a1      	add	r1, sp, #644	@ 0x284
 8014c96:	4618      	mov	r0, r3
 8014c98:	2305      	movs	r3, #5
 8014c9a:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8014c9e:	9204      	str	r2, [sp, #16]
 8014ca0:	7123      	strb	r3, [r4, #4]
 8014ca2:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8014ca6:	f000 f99d 	bl	8014fe4 <uxr_object_id_to_raw>
 8014caa:	2303      	movs	r3, #3
 8014cac:	a90e      	add	r1, sp, #56	@ 0x38
 8014cae:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8014cb0:	7223      	strb	r3, [r4, #8]
 8014cb2:	f000 f997 	bl	8014fe4 <uxr_object_id_to_raw>
 8014cb6:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 8014cba:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	3f00      	subs	r7, #0
 8014cc2:	fab3 f383 	clz	r3, r3
 8014cc6:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 8014cca:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8014cce:	bf18      	it	ne
 8014cd0:	2701      	movne	r7, #1
 8014cd2:	095b      	lsrs	r3, r3, #5
 8014cd4:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8014cd8:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8014cdc:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8014ce6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014cea:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8014cee:	b919      	cbnz	r1, 8014cf8 <uxr_buffer_create_datawriter_bin+0x70>
 8014cf0:	f043 0302 	orr.w	r3, r3, #2
 8014cf4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014cf8:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8014cfc:	2a01      	cmp	r2, #1
 8014cfe:	d022      	beq.n	8014d46 <uxr_buffer_create_datawriter_bin+0xbe>
 8014d00:	2a03      	cmp	r2, #3
 8014d02:	d01b      	beq.n	8014d3c <uxr_buffer_create_datawriter_bin+0xb4>
 8014d04:	b91a      	cbnz	r2, 8014d0e <uxr_buffer_create_datawriter_bin+0x86>
 8014d06:	f043 0308 	orr.w	r3, r3, #8
 8014d0a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014d0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d12:	a921      	add	r1, sp, #132	@ 0x84
 8014d14:	a806      	add	r0, sp, #24
 8014d16:	f7f9 fc6d 	bl	800e5f4 <ucdr_init_buffer>
 8014d1a:	a90e      	add	r1, sp, #56	@ 0x38
 8014d1c:	a806      	add	r0, sp, #24
 8014d1e:	f002 ff29 	bl	8017b74 <uxr_serialize_OBJK_DataWriter_Binary>
 8014d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d24:	9600      	str	r6, [sp, #0]
 8014d26:	9401      	str	r4, [sp, #4]
 8014d28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014d2c:	60e3      	str	r3, [r4, #12]
 8014d2e:	4628      	mov	r0, r5
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	f7ff feb9 	bl	8014aa8 <uxr_common_create_entity>
 8014d36:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8014d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d3c:	f043 0320 	orr.w	r3, r3, #32
 8014d40:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014d44:	e7e3      	b.n	8014d0e <uxr_buffer_create_datawriter_bin+0x86>
 8014d46:	f043 0310 	orr.w	r3, r3, #16
 8014d4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014d4e:	e7de      	b.n	8014d0e <uxr_buffer_create_datawriter_bin+0x86>

08014d50 <uxr_buffer_create_datareader_bin>:
 8014d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d52:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8014d56:	ac1f      	add	r4, sp, #124	@ 0x7c
 8014d58:	9105      	str	r1, [sp, #20]
 8014d5a:	4605      	mov	r5, r0
 8014d5c:	a9a3      	add	r1, sp, #652	@ 0x28c
 8014d5e:	4618      	mov	r0, r3
 8014d60:	2306      	movs	r3, #6
 8014d62:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 8014d66:	9204      	str	r2, [sp, #16]
 8014d68:	7123      	strb	r3, [r4, #4]
 8014d6a:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 8014d6e:	f000 f939 	bl	8014fe4 <uxr_object_id_to_raw>
 8014d72:	2303      	movs	r3, #3
 8014d74:	a90e      	add	r1, sp, #56	@ 0x38
 8014d76:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8014d78:	7223      	strb	r3, [r4, #8]
 8014d7a:	f000 f933 	bl	8014fe4 <uxr_object_id_to_raw>
 8014d7e:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8014d82:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8014d86:	2200      	movs	r2, #0
 8014d88:	3f00      	subs	r7, #0
 8014d8a:	fab3 f383 	clz	r3, r3
 8014d8e:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8014d92:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 8014d96:	bf18      	it	ne
 8014d98:	2701      	movne	r7, #1
 8014d9a:	095b      	lsrs	r3, r3, #5
 8014d9c:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8014da0:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8014da4:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8014da8:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8014dac:	2201      	movs	r2, #1
 8014dae:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8014db2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014db6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8014dba:	b919      	cbnz	r1, 8014dc4 <uxr_buffer_create_datareader_bin+0x74>
 8014dbc:	f043 0302 	orr.w	r3, r3, #2
 8014dc0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014dc4:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 8014dc8:	2a01      	cmp	r2, #1
 8014dca:	d022      	beq.n	8014e12 <uxr_buffer_create_datareader_bin+0xc2>
 8014dcc:	2a03      	cmp	r2, #3
 8014dce:	d01b      	beq.n	8014e08 <uxr_buffer_create_datareader_bin+0xb8>
 8014dd0:	b91a      	cbnz	r2, 8014dda <uxr_buffer_create_datareader_bin+0x8a>
 8014dd2:	f043 0308 	orr.w	r3, r3, #8
 8014dd6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014dde:	a923      	add	r1, sp, #140	@ 0x8c
 8014de0:	a806      	add	r0, sp, #24
 8014de2:	f7f9 fc07 	bl	800e5f4 <ucdr_init_buffer>
 8014de6:	a90e      	add	r1, sp, #56	@ 0x38
 8014de8:	a806      	add	r0, sp, #24
 8014dea:	f002 fe87 	bl	8017afc <uxr_serialize_OBJK_DataReader_Binary>
 8014dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014df0:	9600      	str	r6, [sp, #0]
 8014df2:	9401      	str	r4, [sp, #4]
 8014df4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014df8:	60e3      	str	r3, [r4, #12]
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	f7ff fe53 	bl	8014aa8 <uxr_common_create_entity>
 8014e02:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 8014e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e08:	f043 0320 	orr.w	r3, r3, #32
 8014e0c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014e10:	e7e3      	b.n	8014dda <uxr_buffer_create_datareader_bin+0x8a>
 8014e12:	f043 0310 	orr.w	r3, r3, #16
 8014e16:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8014e1a:	e7de      	b.n	8014dda <uxr_buffer_create_datareader_bin+0x8a>

08014e1c <get_custom_error>:
 8014e1c:	4b01      	ldr	r3, [pc, #4]	@ (8014e24 <get_custom_error+0x8>)
 8014e1e:	7818      	ldrb	r0, [r3, #0]
 8014e20:	4770      	bx	lr
 8014e22:	bf00      	nop
 8014e24:	2001f5ae 	.word	0x2001f5ae

08014e28 <recv_custom_msg>:
 8014e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e2c:	b089      	sub	sp, #36	@ 0x24
 8014e2e:	4693      	mov	fp, r2
 8014e30:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014e34:	9104      	str	r1, [sp, #16]
 8014e36:	2100      	movs	r1, #0
 8014e38:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8014e3c:	9305      	str	r3, [sp, #20]
 8014e3e:	4604      	mov	r4, r0
 8014e40:	f88d 101e 	strb.w	r1, [sp, #30]
 8014e44:	b332      	cbz	r2, 8014e94 <recv_custom_msg+0x6c>
 8014e46:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8014e4a:	f10d 091f 	add.w	r9, sp, #31
 8014e4e:	f10d 0814 	add.w	r8, sp, #20
 8014e52:	f10d 071e 	add.w	r7, sp, #30
 8014e56:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8014e5a:	e004      	b.n	8014e66 <recv_custom_msg+0x3e>
 8014e5c:	9b05      	ldr	r3, [sp, #20]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	dd10      	ble.n	8014e84 <recv_custom_msg+0x5c>
 8014e62:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8014e66:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014e6a:	e9cd 6700 	strd	r6, r7, [sp]
 8014e6e:	4623      	mov	r3, r4
 8014e70:	4622      	mov	r2, r4
 8014e72:	4629      	mov	r1, r5
 8014e74:	4650      	mov	r0, sl
 8014e76:	f001 fc85 	bl	8016784 <uxr_read_framed_msg>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d0ee      	beq.n	8014e5c <recv_custom_msg+0x34>
 8014e7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014e82:	b1a3      	cbz	r3, 8014eae <recv_custom_msg+0x86>
 8014e84:	4b0e      	ldr	r3, [pc, #56]	@ (8014ec0 <recv_custom_msg+0x98>)
 8014e86:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014e8a:	701a      	strb	r2, [r3, #0]
 8014e8c:	2000      	movs	r0, #0
 8014e8e:	b009      	add	sp, #36	@ 0x24
 8014e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e94:	f10d 021f 	add.w	r2, sp, #31
 8014e98:	9200      	str	r2, [sp, #0]
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ea0:	47a8      	blx	r5
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d0ee      	beq.n	8014e84 <recv_custom_msg+0x5c>
 8014ea6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d1ea      	bne.n	8014e84 <recv_custom_msg+0x5c>
 8014eae:	9b04      	ldr	r3, [sp, #16]
 8014eb0:	f8cb 0000 	str.w	r0, [fp]
 8014eb4:	2001      	movs	r0, #1
 8014eb6:	601c      	str	r4, [r3, #0]
 8014eb8:	b009      	add	sp, #36	@ 0x24
 8014eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ebe:	bf00      	nop
 8014ec0:	2001f5ae 	.word	0x2001f5ae

08014ec4 <send_custom_msg>:
 8014ec4:	b570      	push	{r4, r5, r6, lr}
 8014ec6:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8014eca:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014ece:	b086      	sub	sp, #24
 8014ed0:	4616      	mov	r6, r2
 8014ed2:	b965      	cbnz	r5, 8014eee <send_custom_msg+0x2a>
 8014ed4:	f10d 0317 	add.w	r3, sp, #23
 8014ed8:	47a0      	blx	r4
 8014eda:	b108      	cbz	r0, 8014ee0 <send_custom_msg+0x1c>
 8014edc:	42b0      	cmp	r0, r6
 8014ede:	d014      	beq.n	8014f0a <send_custom_msg+0x46>
 8014ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8014f10 <send_custom_msg+0x4c>)
 8014ee2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014ee6:	701a      	strb	r2, [r3, #0]
 8014ee8:	2000      	movs	r0, #0
 8014eea:	b006      	add	sp, #24
 8014eec:	bd70      	pop	{r4, r5, r6, pc}
 8014eee:	f10d 0217 	add.w	r2, sp, #23
 8014ef2:	9202      	str	r2, [sp, #8]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	e9cd 6200 	strd	r6, r2, [sp]
 8014efa:	460b      	mov	r3, r1
 8014efc:	4602      	mov	r2, r0
 8014efe:	4621      	mov	r1, r4
 8014f00:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014f04:	f001 fa60 	bl	80163c8 <uxr_write_framed_msg>
 8014f08:	e7e7      	b.n	8014eda <send_custom_msg+0x16>
 8014f0a:	2001      	movs	r0, #1
 8014f0c:	b006      	add	sp, #24
 8014f0e:	bd70      	pop	{r4, r5, r6, pc}
 8014f10:	2001f5ae 	.word	0x2001f5ae

08014f14 <uxr_set_custom_transport_callbacks>:
 8014f14:	b410      	push	{r4}
 8014f16:	9c01      	ldr	r4, [sp, #4]
 8014f18:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8014f1c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014f20:	9b02      	ldr	r3, [sp, #8]
 8014f22:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f2a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8014f2e:	4770      	bx	lr

08014f30 <uxr_init_custom_transport>:
 8014f30:	b538      	push	{r3, r4, r5, lr}
 8014f32:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014f36:	b303      	cbz	r3, 8014f7a <uxr_init_custom_transport+0x4a>
 8014f38:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	b1e2      	cbz	r2, 8014f7a <uxr_init_custom_transport+0x4a>
 8014f40:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8014f44:	b1ca      	cbz	r2, 8014f7a <uxr_init_custom_transport+0x4a>
 8014f46:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8014f4a:	b1b2      	cbz	r2, 8014f7a <uxr_init_custom_transport+0x4a>
 8014f4c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8014f50:	4798      	blx	r3
 8014f52:	4605      	mov	r5, r0
 8014f54:	b188      	cbz	r0, 8014f7a <uxr_init_custom_transport+0x4a>
 8014f56:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8014f5a:	b98b      	cbnz	r3, 8014f80 <uxr_init_custom_transport+0x50>
 8014f5c:	490b      	ldr	r1, [pc, #44]	@ (8014f8c <uxr_init_custom_transport+0x5c>)
 8014f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8014f90 <uxr_init_custom_transport+0x60>)
 8014f60:	4a0c      	ldr	r2, [pc, #48]	@ (8014f94 <uxr_init_custom_transport+0x64>)
 8014f62:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8014f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014f6a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8014f6e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8014f72:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8014f76:	4628      	mov	r0, r5
 8014f78:	bd38      	pop	{r3, r4, r5, pc}
 8014f7a:	2500      	movs	r5, #0
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	bd38      	pop	{r3, r4, r5, pc}
 8014f80:	2100      	movs	r1, #0
 8014f82:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8014f86:	f001 fa19 	bl	80163bc <uxr_init_framing_io>
 8014f8a:	e7e7      	b.n	8014f5c <uxr_init_custom_transport+0x2c>
 8014f8c:	08014ec5 	.word	0x08014ec5
 8014f90:	08014e29 	.word	0x08014e29
 8014f94:	08014e1d 	.word	0x08014e1d

08014f98 <uxr_close_custom_transport>:
 8014f98:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8014f9c:	4718      	bx	r3
 8014f9e:	bf00      	nop

08014fa0 <uxr_object_id>:
 8014fa0:	b082      	sub	sp, #8
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f88d 1006 	strb.w	r1, [sp, #6]
 8014fa8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014fac:	f360 030f 	bfi	r3, r0, #0, #16
 8014fb0:	f362 431f 	bfi	r3, r2, #16, #16
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	b002      	add	sp, #8
 8014fb8:	4770      	bx	lr
 8014fba:	bf00      	nop

08014fbc <uxr_object_id_from_raw>:
 8014fbc:	7843      	ldrb	r3, [r0, #1]
 8014fbe:	7801      	ldrb	r1, [r0, #0]
 8014fc0:	b082      	sub	sp, #8
 8014fc2:	f003 020f 	and.w	r2, r3, #15
 8014fc6:	f88d 2006 	strb.w	r2, [sp, #6]
 8014fca:	091b      	lsrs	r3, r3, #4
 8014fcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014fd0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	f363 000f 	bfi	r0, r3, #0, #16
 8014fda:	f362 401f 	bfi	r0, r2, #16, #16
 8014fde:	b002      	add	sp, #8
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop

08014fe4 <uxr_object_id_to_raw>:
 8014fe4:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8014fe8:	b082      	sub	sp, #8
 8014fea:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8014fee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8014ff2:	700a      	strb	r2, [r1, #0]
 8014ff4:	704b      	strb	r3, [r1, #1]
 8014ff6:	b002      	add	sp, #8
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop

08014ffc <uxr_buffer_request_data>:
 8014ffc:	b530      	push	{r4, r5, lr}
 8014ffe:	b095      	sub	sp, #84	@ 0x54
 8015000:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8015004:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015006:	f88d 301c 	strb.w	r3, [sp, #28]
 801500a:	2200      	movs	r2, #0
 801500c:	2d00      	cmp	r5, #0
 801500e:	bf14      	ite	ne
 8015010:	2101      	movne	r1, #1
 8015012:	4611      	moveq	r1, r2
 8015014:	4604      	mov	r4, r0
 8015016:	f88d 201d 	strb.w	r2, [sp, #29]
 801501a:	f88d 201e 	strb.w	r2, [sp, #30]
 801501e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8015022:	d021      	beq.n	8015068 <uxr_buffer_request_data+0x6c>
 8015024:	682a      	ldr	r2, [r5, #0]
 8015026:	686b      	ldr	r3, [r5, #4]
 8015028:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801502c:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015030:	2210      	movs	r2, #16
 8015032:	2308      	movs	r3, #8
 8015034:	2100      	movs	r1, #0
 8015036:	e9cd 3100 	strd	r3, r1, [sp]
 801503a:	4620      	mov	r0, r4
 801503c:	9905      	ldr	r1, [sp, #20]
 801503e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015040:	f001 f854 	bl	80160ec <uxr_prepare_stream_to_write_submessage>
 8015044:	b918      	cbnz	r0, 801504e <uxr_buffer_request_data+0x52>
 8015046:	4604      	mov	r4, r0
 8015048:	4620      	mov	r0, r4
 801504a:	b015      	add	sp, #84	@ 0x54
 801504c:	bd30      	pop	{r4, r5, pc}
 801504e:	9904      	ldr	r1, [sp, #16]
 8015050:	aa06      	add	r2, sp, #24
 8015052:	4620      	mov	r0, r4
 8015054:	f001 f984 	bl	8016360 <uxr_init_base_object_request>
 8015058:	a906      	add	r1, sp, #24
 801505a:	4604      	mov	r4, r0
 801505c:	a80c      	add	r0, sp, #48	@ 0x30
 801505e:	f003 f8a1 	bl	80181a4 <uxr_serialize_READ_DATA_Payload>
 8015062:	4620      	mov	r0, r4
 8015064:	b015      	add	sp, #84	@ 0x54
 8015066:	bd30      	pop	{r4, r5, pc}
 8015068:	2208      	movs	r2, #8
 801506a:	e7e2      	b.n	8015032 <uxr_buffer_request_data+0x36>

0801506c <uxr_buffer_cancel_data>:
 801506c:	b510      	push	{r4, lr}
 801506e:	b094      	sub	sp, #80	@ 0x50
 8015070:	2300      	movs	r3, #0
 8015072:	9301      	str	r3, [sp, #4]
 8015074:	9205      	str	r2, [sp, #20]
 8015076:	f8ad 301c 	strh.w	r3, [sp, #28]
 801507a:	2201      	movs	r2, #1
 801507c:	f88d 301e 	strb.w	r3, [sp, #30]
 8015080:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8015084:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8015088:	2308      	movs	r3, #8
 801508a:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	2210      	movs	r2, #16
 8015092:	ab0c      	add	r3, sp, #48	@ 0x30
 8015094:	4604      	mov	r4, r0
 8015096:	f001 f829 	bl	80160ec <uxr_prepare_stream_to_write_submessage>
 801509a:	b918      	cbnz	r0, 80150a4 <uxr_buffer_cancel_data+0x38>
 801509c:	4604      	mov	r4, r0
 801509e:	4620      	mov	r0, r4
 80150a0:	b014      	add	sp, #80	@ 0x50
 80150a2:	bd10      	pop	{r4, pc}
 80150a4:	9905      	ldr	r1, [sp, #20]
 80150a6:	aa06      	add	r2, sp, #24
 80150a8:	4620      	mov	r0, r4
 80150aa:	f001 f959 	bl	8016360 <uxr_init_base_object_request>
 80150ae:	a906      	add	r1, sp, #24
 80150b0:	4604      	mov	r4, r0
 80150b2:	a80c      	add	r0, sp, #48	@ 0x30
 80150b4:	f003 f876 	bl	80181a4 <uxr_serialize_READ_DATA_Payload>
 80150b8:	4620      	mov	r0, r4
 80150ba:	b014      	add	sp, #80	@ 0x50
 80150bc:	bd10      	pop	{r4, pc}
 80150be:	bf00      	nop

080150c0 <read_submessage_format>:
 80150c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150c4:	b095      	sub	sp, #84	@ 0x54
 80150c6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80150ca:	b113      	cbz	r3, 80150d2 <read_submessage_format+0x12>
 80150cc:	b015      	add	sp, #84	@ 0x54
 80150ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150d2:	460c      	mov	r4, r1
 80150d4:	4616      	mov	r6, r2
 80150d6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80150da:	461d      	mov	r5, r3
 80150dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80150de:	9304      	str	r3, [sp, #16]
 80150e0:	1a52      	subs	r2, r2, r1
 80150e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80150e4:	9305      	str	r3, [sp, #20]
 80150e6:	4680      	mov	r8, r0
 80150e8:	a80c      	add	r0, sp, #48	@ 0x30
 80150ea:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80150ee:	f7f9 fa81 	bl	800e5f4 <ucdr_init_buffer>
 80150f2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80150f6:	a80c      	add	r0, sp, #48	@ 0x30
 80150f8:	f7f9 fa50 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 80150fc:	69e3      	ldr	r3, [r4, #28]
 80150fe:	b35b      	cbz	r3, 8015158 <read_submessage_format+0x98>
 8015100:	f1b9 0f07 	cmp.w	r9, #7
 8015104:	751d      	strb	r5, [r3, #20]
 8015106:	d043      	beq.n	8015190 <read_submessage_format+0xd0>
 8015108:	f1b9 0f08 	cmp.w	r9, #8
 801510c:	d032      	beq.n	8015174 <read_submessage_format+0xb4>
 801510e:	f1b9 0f06 	cmp.w	r9, #6
 8015112:	d008      	beq.n	8015126 <read_submessage_format+0x66>
 8015114:	2201      	movs	r2, #1
 8015116:	751a      	strb	r2, [r3, #20]
 8015118:	4631      	mov	r1, r6
 801511a:	4620      	mov	r0, r4
 801511c:	f7f9 faba 	bl	800e694 <ucdr_advance_buffer>
 8015120:	b015      	add	sp, #84	@ 0x54
 8015122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015126:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801512a:	2d00      	cmp	r5, #0
 801512c:	d0f2      	beq.n	8015114 <read_submessage_format+0x54>
 801512e:	ab0c      	add	r3, sp, #48	@ 0x30
 8015130:	e9cd 3600 	strd	r3, r6, [sp]
 8015134:	2306      	movs	r3, #6
 8015136:	f88d 3016 	strb.w	r3, [sp, #22]
 801513a:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801513e:	9302      	str	r3, [sp, #8]
 8015140:	463a      	mov	r2, r7
 8015142:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015146:	4640      	mov	r0, r8
 8015148:	47a8      	blx	r5
 801514a:	69e3      	ldr	r3, [r4, #28]
 801514c:	2201      	movs	r2, #1
 801514e:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8015152:	2b00      	cmp	r3, #0
 8015154:	d1de      	bne.n	8015114 <read_submessage_format+0x54>
 8015156:	e7df      	b.n	8015118 <read_submessage_format+0x58>
 8015158:	f1b9 0f07 	cmp.w	r9, #7
 801515c:	d032      	beq.n	80151c4 <read_submessage_format+0x104>
 801515e:	f1b9 0f08 	cmp.w	r9, #8
 8015162:	d02a      	beq.n	80151ba <read_submessage_format+0xfa>
 8015164:	f1b9 0f06 	cmp.w	r9, #6
 8015168:	d1d6      	bne.n	8015118 <read_submessage_format+0x58>
 801516a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801516e:	2d00      	cmp	r5, #0
 8015170:	d1dd      	bne.n	801512e <read_submessage_format+0x6e>
 8015172:	e7d1      	b.n	8015118 <read_submessage_format+0x58>
 8015174:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8015178:	2a00      	cmp	r2, #0
 801517a:	d0cb      	beq.n	8015114 <read_submessage_format+0x54>
 801517c:	a906      	add	r1, sp, #24
 801517e:	a80c      	add	r0, sp, #48	@ 0x30
 8015180:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8015182:	f003 f8e3 	bl	801834c <uxr_deserialize_SampleIdentity>
 8015186:	bb28      	cbnz	r0, 80151d4 <read_submessage_format+0x114>
 8015188:	69e3      	ldr	r3, [r4, #28]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d1c2      	bne.n	8015114 <read_submessage_format+0x54>
 801518e:	e7c3      	b.n	8015118 <read_submessage_format+0x58>
 8015190:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8015194:	b16a      	cbz	r2, 80151b2 <read_submessage_format+0xf2>
 8015196:	a906      	add	r1, sp, #24
 8015198:	a80c      	add	r0, sp, #48	@ 0x30
 801519a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801519c:	f002 fdb6 	bl	8017d0c <uxr_deserialize_BaseObjectRequest>
 80151a0:	2800      	cmp	r0, #0
 80151a2:	d13a      	bne.n	801521a <read_submessage_format+0x15a>
 80151a4:	68a2      	ldr	r2, [r4, #8]
 80151a6:	69e3      	ldr	r3, [r4, #28]
 80151a8:	4432      	add	r2, r6
 80151aa:	60a2      	str	r2, [r4, #8]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d1b1      	bne.n	8015114 <read_submessage_format+0x54>
 80151b0:	e7b2      	b.n	8015118 <read_submessage_format+0x58>
 80151b2:	68a2      	ldr	r2, [r4, #8]
 80151b4:	4432      	add	r2, r6
 80151b6:	60a2      	str	r2, [r4, #8]
 80151b8:	e7ac      	b.n	8015114 <read_submessage_format+0x54>
 80151ba:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d1dc      	bne.n	801517c <read_submessage_format+0xbc>
 80151c2:	e7a9      	b.n	8015118 <read_submessage_format+0x58>
 80151c4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d1e4      	bne.n	8015196 <read_submessage_format+0xd6>
 80151cc:	68a3      	ldr	r3, [r4, #8]
 80151ce:	4433      	add	r3, r6
 80151d0:	60a3      	str	r3, [r4, #8]
 80151d2:	e7a1      	b.n	8015118 <read_submessage_format+0x58>
 80151d4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80151d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80151da:	1a52      	subs	r2, r2, r1
 80151dc:	1aed      	subs	r5, r5, r3
 80151de:	a80c      	add	r0, sp, #48	@ 0x30
 80151e0:	f7f9 fa08 	bl	800e5f4 <ucdr_init_buffer>
 80151e4:	4435      	add	r5, r6
 80151e6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80151ea:	a80c      	add	r0, sp, #48	@ 0x30
 80151ec:	f7f9 f9d6 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 80151f0:	b2ad      	uxth	r5, r5
 80151f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80151f4:	9300      	str	r3, [sp, #0]
 80151f6:	9501      	str	r5, [sp, #4]
 80151f8:	2108      	movs	r1, #8
 80151fa:	f88d 1016 	strb.w	r1, [sp, #22]
 80151fe:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8015202:	9102      	str	r1, [sp, #8]
 8015204:	ab06      	add	r3, sp, #24
 8015206:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801520a:	9905      	ldr	r1, [sp, #20]
 801520c:	463a      	mov	r2, r7
 801520e:	4640      	mov	r0, r8
 8015210:	47a8      	blx	r5
 8015212:	2301      	movs	r3, #1
 8015214:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015218:	e7b6      	b.n	8015188 <read_submessage_format+0xc8>
 801521a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801521e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015220:	1a52      	subs	r2, r2, r1
 8015222:	1aed      	subs	r5, r5, r3
 8015224:	a80c      	add	r0, sp, #48	@ 0x30
 8015226:	f7f9 f9e5 	bl	800e5f4 <ucdr_init_buffer>
 801522a:	4435      	add	r5, r6
 801522c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8015230:	a80c      	add	r0, sp, #48	@ 0x30
 8015232:	f7f9 f9b3 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 8015236:	b2ad      	uxth	r5, r5
 8015238:	ab0c      	add	r3, sp, #48	@ 0x30
 801523a:	9300      	str	r3, [sp, #0]
 801523c:	9501      	str	r5, [sp, #4]
 801523e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015242:	2107      	movs	r1, #7
 8015244:	f88d 1016 	strb.w	r1, [sp, #22]
 8015248:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 801524c:	9102      	str	r1, [sp, #8]
 801524e:	ba5b      	rev16	r3, r3
 8015250:	b29b      	uxth	r3, r3
 8015252:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8015256:	9905      	ldr	r1, [sp, #20]
 8015258:	463a      	mov	r2, r7
 801525a:	4640      	mov	r0, r8
 801525c:	47a8      	blx	r5
 801525e:	2301      	movs	r3, #1
 8015260:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8015264:	e79e      	b.n	80151a4 <read_submessage_format+0xe4>
 8015266:	bf00      	nop

08015268 <on_get_fragmentation_info>:
 8015268:	b500      	push	{lr}
 801526a:	b08b      	sub	sp, #44	@ 0x2c
 801526c:	4601      	mov	r1, r0
 801526e:	2204      	movs	r2, #4
 8015270:	a802      	add	r0, sp, #8
 8015272:	f7f9 f9bf 	bl	800e5f4 <ucdr_init_buffer>
 8015276:	f10d 0305 	add.w	r3, sp, #5
 801527a:	f10d 0206 	add.w	r2, sp, #6
 801527e:	a901      	add	r1, sp, #4
 8015280:	a802      	add	r0, sp, #8
 8015282:	f001 fe37 	bl	8016ef4 <uxr_read_submessage_header>
 8015286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801528a:	2b0d      	cmp	r3, #13
 801528c:	d003      	beq.n	8015296 <on_get_fragmentation_info+0x2e>
 801528e:	2000      	movs	r0, #0
 8015290:	b00b      	add	sp, #44	@ 0x2c
 8015292:	f85d fb04 	ldr.w	pc, [sp], #4
 8015296:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801529a:	f013 0f02 	tst.w	r3, #2
 801529e:	bf0c      	ite	eq
 80152a0:	2001      	moveq	r0, #1
 80152a2:	2002      	movne	r0, #2
 80152a4:	b00b      	add	sp, #44	@ 0x2c
 80152a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80152aa:	bf00      	nop

080152ac <read_submessage_get_info>:
 80152ac:	b570      	push	{r4, r5, r6, lr}
 80152ae:	2500      	movs	r5, #0
 80152b0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80152b4:	4604      	mov	r4, r0
 80152b6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80152ba:	460e      	mov	r6, r1
 80152bc:	a810      	add	r0, sp, #64	@ 0x40
 80152be:	4629      	mov	r1, r5
 80152c0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80152c4:	f008 fd7c 	bl	801ddc0 <memset>
 80152c8:	a903      	add	r1, sp, #12
 80152ca:	4630      	mov	r0, r6
 80152cc:	f002 feac 	bl	8018028 <uxr_deserialize_GET_INFO_Payload>
 80152d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80152d4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80152d8:	4620      	mov	r0, r4
 80152da:	f001 f839 	bl	8016350 <uxr_session_header_offset>
 80152de:	462b      	mov	r3, r5
 80152e0:	9000      	str	r0, [sp, #0]
 80152e2:	220c      	movs	r2, #12
 80152e4:	a905      	add	r1, sp, #20
 80152e6:	a808      	add	r0, sp, #32
 80152e8:	f7f9 f972 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 80152ec:	a910      	add	r1, sp, #64	@ 0x40
 80152ee:	a808      	add	r0, sp, #32
 80152f0:	f002 ff0c 	bl	801810c <uxr_serialize_INFO_Payload>
 80152f4:	9b08      	ldr	r3, [sp, #32]
 80152f6:	462a      	mov	r2, r5
 80152f8:	4629      	mov	r1, r5
 80152fa:	4620      	mov	r0, r4
 80152fc:	f000 ffd4 	bl	80162a8 <uxr_stamp_session_header>
 8015300:	a808      	add	r0, sp, #32
 8015302:	f7f9 f9a3 	bl	800e64c <ucdr_buffer_length>
 8015306:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015308:	4602      	mov	r2, r0
 801530a:	a905      	add	r1, sp, #20
 801530c:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015310:	47a0      	blx	r4
 8015312:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8015316:	bd70      	pop	{r4, r5, r6, pc}

08015318 <write_submessage_acknack.isra.0>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	b092      	sub	sp, #72	@ 0x48
 801531c:	4605      	mov	r5, r0
 801531e:	460e      	mov	r6, r1
 8015320:	4614      	mov	r4, r2
 8015322:	f001 f815 	bl	8016350 <uxr_session_header_offset>
 8015326:	a905      	add	r1, sp, #20
 8015328:	9000      	str	r0, [sp, #0]
 801532a:	2300      	movs	r3, #0
 801532c:	a80a      	add	r0, sp, #40	@ 0x28
 801532e:	2211      	movs	r2, #17
 8015330:	f7f9 f94e 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 8015334:	2318      	movs	r3, #24
 8015336:	fb03 5404 	mla	r4, r3, r4, r5
 801533a:	2205      	movs	r2, #5
 801533c:	2300      	movs	r3, #0
 801533e:	3450      	adds	r4, #80	@ 0x50
 8015340:	210a      	movs	r1, #10
 8015342:	a80a      	add	r0, sp, #40	@ 0x28
 8015344:	f001 fdbc 	bl	8016ec0 <uxr_buffer_submessage_header>
 8015348:	a903      	add	r1, sp, #12
 801534a:	4620      	mov	r0, r4
 801534c:	f006 ffec 	bl	801c328 <uxr_compute_acknack>
 8015350:	ba40      	rev16	r0, r0
 8015352:	f8ad 000e 	strh.w	r0, [sp, #14]
 8015356:	a903      	add	r1, sp, #12
 8015358:	a80a      	add	r0, sp, #40	@ 0x28
 801535a:	f88d 6010 	strb.w	r6, [sp, #16]
 801535e:	f002 ff45 	bl	80181ec <uxr_serialize_ACKNACK_Payload>
 8015362:	2200      	movs	r2, #0
 8015364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015366:	4611      	mov	r1, r2
 8015368:	4628      	mov	r0, r5
 801536a:	f000 ff9d 	bl	80162a8 <uxr_stamp_session_header>
 801536e:	a80a      	add	r0, sp, #40	@ 0x28
 8015370:	f7f9 f96c 	bl	800e64c <ucdr_buffer_length>
 8015374:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8015376:	4602      	mov	r2, r0
 8015378:	a905      	add	r1, sp, #20
 801537a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801537e:	47a0      	blx	r4
 8015380:	b012      	add	sp, #72	@ 0x48
 8015382:	bd70      	pop	{r4, r5, r6, pc}
 8015384:	0000      	movs	r0, r0
	...

08015388 <uxr_init_session>:
 8015388:	b510      	push	{r4, lr}
 801538a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80153c0 <uxr_init_session+0x38>
 801538e:	2300      	movs	r3, #0
 8015390:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8015394:	4604      	mov	r4, r0
 8015396:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801539a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801539e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80153a2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80153a6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80153aa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80153ae:	2181      	movs	r1, #129	@ 0x81
 80153b0:	f000 fede 	bl	8016170 <uxr_init_session_info>
 80153b4:	f104 0008 	add.w	r0, r4, #8
 80153b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153bc:	f001 bc9c 	b.w	8016cf8 <uxr_init_stream_storage>
	...

080153c8 <uxr_set_status_callback>:
 80153c8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop

080153d0 <uxr_set_topic_callback>:
 80153d0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80153d4:	4770      	bx	lr
 80153d6:	bf00      	nop

080153d8 <uxr_set_request_callback>:
 80153d8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop

080153e0 <uxr_set_reply_callback>:
 80153e0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop

080153e8 <uxr_create_output_best_effort_stream>:
 80153e8:	b570      	push	{r4, r5, r6, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	4604      	mov	r4, r0
 80153ee:	460d      	mov	r5, r1
 80153f0:	4616      	mov	r6, r2
 80153f2:	f000 ffad 	bl	8016350 <uxr_session_header_offset>
 80153f6:	4632      	mov	r2, r6
 80153f8:	4603      	mov	r3, r0
 80153fa:	4629      	mov	r1, r5
 80153fc:	f104 0008 	add.w	r0, r4, #8
 8015400:	b002      	add	sp, #8
 8015402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015406:	f001 bcc1 	b.w	8016d8c <uxr_add_output_best_effort_buffer>
 801540a:	bf00      	nop

0801540c <uxr_create_output_reliable_stream>:
 801540c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801540e:	b085      	sub	sp, #20
 8015410:	4604      	mov	r4, r0
 8015412:	460d      	mov	r5, r1
 8015414:	4616      	mov	r6, r2
 8015416:	461f      	mov	r7, r3
 8015418:	f000 ff9a 	bl	8016350 <uxr_session_header_offset>
 801541c:	463b      	mov	r3, r7
 801541e:	9000      	str	r0, [sp, #0]
 8015420:	4632      	mov	r2, r6
 8015422:	4629      	mov	r1, r5
 8015424:	f104 0008 	add.w	r0, r4, #8
 8015428:	f001 fcc4 	bl	8016db4 <uxr_add_output_reliable_buffer>
 801542c:	b005      	add	sp, #20
 801542e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015430 <uxr_create_input_best_effort_stream>:
 8015430:	b082      	sub	sp, #8
 8015432:	3008      	adds	r0, #8
 8015434:	b002      	add	sp, #8
 8015436:	f001 bcd7 	b.w	8016de8 <uxr_add_input_best_effort_buffer>
 801543a:	bf00      	nop

0801543c <uxr_create_input_reliable_stream>:
 801543c:	b510      	push	{r4, lr}
 801543e:	b084      	sub	sp, #16
 8015440:	4c03      	ldr	r4, [pc, #12]	@ (8015450 <uxr_create_input_reliable_stream+0x14>)
 8015442:	9400      	str	r4, [sp, #0]
 8015444:	3008      	adds	r0, #8
 8015446:	f001 fce5 	bl	8016e14 <uxr_add_input_reliable_buffer>
 801544a:	b004      	add	sp, #16
 801544c:	bd10      	pop	{r4, pc}
 801544e:	bf00      	nop
 8015450:	08015269 	.word	0x08015269

08015454 <uxr_epoch_nanos>:
 8015454:	b510      	push	{r4, lr}
 8015456:	4604      	mov	r4, r0
 8015458:	f001 fd92 	bl	8016f80 <uxr_nanos>
 801545c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8015460:	1ac0      	subs	r0, r0, r3
 8015462:	eb61 0102 	sbc.w	r1, r1, r2
 8015466:	bd10      	pop	{r4, pc}

08015468 <uxr_flash_output_streams>:
 8015468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801546c:	7e03      	ldrb	r3, [r0, #24]
 801546e:	b084      	sub	sp, #16
 8015470:	4604      	mov	r4, r0
 8015472:	b373      	cbz	r3, 80154d2 <uxr_flash_output_streams+0x6a>
 8015474:	2500      	movs	r5, #0
 8015476:	f100 0908 	add.w	r9, r0, #8
 801547a:	f10d 0802 	add.w	r8, sp, #2
 801547e:	4628      	mov	r0, r5
 8015480:	af03      	add	r7, sp, #12
 8015482:	ae02      	add	r6, sp, #8
 8015484:	e006      	b.n	8015494 <uxr_flash_output_streams+0x2c>
 8015486:	7e23      	ldrb	r3, [r4, #24]
 8015488:	3501      	adds	r5, #1
 801548a:	b2e8      	uxtb	r0, r5
 801548c:	4283      	cmp	r3, r0
 801548e:	f109 0910 	add.w	r9, r9, #16
 8015492:	d91e      	bls.n	80154d2 <uxr_flash_output_streams+0x6a>
 8015494:	2201      	movs	r2, #1
 8015496:	4611      	mov	r1, r2
 8015498:	f001 fbf6 	bl	8016c88 <uxr_stream_id>
 801549c:	4643      	mov	r3, r8
 801549e:	4684      	mov	ip, r0
 80154a0:	463a      	mov	r2, r7
 80154a2:	4631      	mov	r1, r6
 80154a4:	4648      	mov	r0, r9
 80154a6:	f8cd c004 	str.w	ip, [sp, #4]
 80154aa:	f006 ffc1 	bl	801c430 <uxr_prepare_best_effort_buffer_to_send>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d0e9      	beq.n	8015486 <uxr_flash_output_streams+0x1e>
 80154b2:	9b02      	ldr	r3, [sp, #8]
 80154b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80154b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80154bc:	4620      	mov	r0, r4
 80154be:	f000 fef3 	bl	80162a8 <uxr_stamp_session_header>
 80154c2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80154c4:	9a03      	ldr	r2, [sp, #12]
 80154c6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80154ca:	9902      	ldr	r1, [sp, #8]
 80154cc:	6818      	ldr	r0, [r3, #0]
 80154ce:	47d0      	blx	sl
 80154d0:	e7d9      	b.n	8015486 <uxr_flash_output_streams+0x1e>
 80154d2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80154d6:	b37b      	cbz	r3, 8015538 <uxr_flash_output_streams+0xd0>
 80154d8:	f04f 0900 	mov.w	r9, #0
 80154dc:	f104 0520 	add.w	r5, r4, #32
 80154e0:	f10d 0802 	add.w	r8, sp, #2
 80154e4:	af03      	add	r7, sp, #12
 80154e6:	ae02      	add	r6, sp, #8
 80154e8:	4648      	mov	r0, r9
 80154ea:	2201      	movs	r2, #1
 80154ec:	2102      	movs	r1, #2
 80154ee:	f001 fbcb 	bl	8016c88 <uxr_stream_id>
 80154f2:	9001      	str	r0, [sp, #4]
 80154f4:	e00e      	b.n	8015514 <uxr_flash_output_streams+0xac>
 80154f6:	9b02      	ldr	r3, [sp, #8]
 80154f8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80154fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015500:	4620      	mov	r0, r4
 8015502:	f000 fed1 	bl	80162a8 <uxr_stamp_session_header>
 8015506:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015508:	9a03      	ldr	r2, [sp, #12]
 801550a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801550e:	9902      	ldr	r1, [sp, #8]
 8015510:	6818      	ldr	r0, [r3, #0]
 8015512:	47d0      	blx	sl
 8015514:	4643      	mov	r3, r8
 8015516:	463a      	mov	r2, r7
 8015518:	4631      	mov	r1, r6
 801551a:	4628      	mov	r0, r5
 801551c:	f007 f99c 	bl	801c858 <uxr_prepare_next_reliable_buffer_to_send>
 8015520:	2800      	cmp	r0, #0
 8015522:	d1e8      	bne.n	80154f6 <uxr_flash_output_streams+0x8e>
 8015524:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015528:	f109 0901 	add.w	r9, r9, #1
 801552c:	fa5f f089 	uxtb.w	r0, r9
 8015530:	4283      	cmp	r3, r0
 8015532:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 8015536:	d8d8      	bhi.n	80154ea <uxr_flash_output_streams+0x82>
 8015538:	b004      	add	sp, #16
 801553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801553e:	bf00      	nop

08015540 <read_submessage_info>:
 8015540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015544:	460d      	mov	r5, r1
 8015546:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801554a:	4669      	mov	r1, sp
 801554c:	4607      	mov	r7, r0
 801554e:	4628      	mov	r0, r5
 8015550:	f002 fc7a 	bl	8017e48 <uxr_deserialize_BaseObjectReply>
 8015554:	a902      	add	r1, sp, #8
 8015556:	4604      	mov	r4, r0
 8015558:	4628      	mov	r0, r5
 801555a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801555e:	f7fe f801 	bl	8013564 <ucdr_deserialize_bool>
 8015562:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8015566:	4004      	ands	r4, r0
 8015568:	b2e4      	uxtb	r4, r4
 801556a:	b95b      	cbnz	r3, 8015584 <read_submessage_info+0x44>
 801556c:	a987      	add	r1, sp, #540	@ 0x21c
 801556e:	4628      	mov	r0, r5
 8015570:	f7fd fff8 	bl	8013564 <ucdr_deserialize_bool>
 8015574:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8015578:	4606      	mov	r6, r0
 801557a:	b94b      	cbnz	r3, 8015590 <read_submessage_info+0x50>
 801557c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8015580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015584:	a903      	add	r1, sp, #12
 8015586:	4628      	mov	r0, r5
 8015588:	f002 fb20 	bl	8017bcc <uxr_deserialize_ObjectVariant>
 801558c:	4004      	ands	r4, r0
 801558e:	e7ed      	b.n	801556c <read_submessage_info+0x2c>
 8015590:	a988      	add	r1, sp, #544	@ 0x220
 8015592:	4628      	mov	r0, r5
 8015594:	f7fe f814 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8015598:	4234      	tst	r4, r6
 801559a:	d0ef      	beq.n	801557c <read_submessage_info+0x3c>
 801559c:	2800      	cmp	r0, #0
 801559e:	d0ed      	beq.n	801557c <read_submessage_info+0x3c>
 80155a0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80155a4:	2b0d      	cmp	r3, #13
 80155a6:	d1e9      	bne.n	801557c <read_submessage_info+0x3c>
 80155a8:	a98a      	add	r1, sp, #552	@ 0x228
 80155aa:	4628      	mov	r0, r5
 80155ac:	f7fe fda4 	bl	80140f8 <ucdr_deserialize_int16_t>
 80155b0:	b140      	cbz	r0, 80155c4 <read_submessage_info+0x84>
 80155b2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	dd07      	ble.n	80155ca <read_submessage_info+0x8a>
 80155ba:	f1b8 0f00 	cmp.w	r8, #0
 80155be:	bf0c      	ite	eq
 80155c0:	2002      	moveq	r0, #2
 80155c2:	2001      	movne	r0, #1
 80155c4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80155c8:	e7d8      	b.n	801557c <read_submessage_info+0x3c>
 80155ca:	2000      	movs	r0, #0
 80155cc:	e7fa      	b.n	80155c4 <read_submessage_info+0x84>
 80155ce:	bf00      	nop

080155d0 <read_submessage_list>:
 80155d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155d4:	b097      	sub	sp, #92	@ 0x5c
 80155d6:	4604      	mov	r4, r0
 80155d8:	460d      	mov	r5, r1
 80155da:	9209      	str	r2, [sp, #36]	@ 0x24
 80155dc:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80155e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80155e2:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80155e6:	4628      	mov	r0, r5
 80155e8:	f001 fc84 	bl	8016ef4 <uxr_read_submessage_header>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	f000 812c 	beq.w	801584a <read_submessage_list+0x27a>
 80155f2:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 80155f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80155f8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 80155fc:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8015600:	3902      	subs	r1, #2
 8015602:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015606:	290d      	cmp	r1, #13
 8015608:	d8e8      	bhi.n	80155dc <read_submessage_list+0xc>
 801560a:	a201      	add	r2, pc, #4	@ (adr r2, 8015610 <read_submessage_list+0x40>)
 801560c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8015610:	08015841 	.word	0x08015841
 8015614:	080155dd 	.word	0x080155dd
 8015618:	08015831 	.word	0x08015831
 801561c:	080157d3 	.word	0x080157d3
 8015620:	080157c9 	.word	0x080157c9
 8015624:	080155dd 	.word	0x080155dd
 8015628:	080155dd 	.word	0x080155dd
 801562c:	0801574d 	.word	0x0801574d
 8015630:	080156e5 	.word	0x080156e5
 8015634:	080156a5 	.word	0x080156a5
 8015638:	080155dd 	.word	0x080155dd
 801563c:	080155dd 	.word	0x080155dd
 8015640:	080155dd 	.word	0x080155dd
 8015644:	08015649 	.word	0x08015649
 8015648:	a910      	add	r1, sp, #64	@ 0x40
 801564a:	4628      	mov	r0, r5
 801564c:	f002 fe2c 	bl	80182a8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8015650:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8015654:	2e00      	cmp	r6, #0
 8015656:	f000 8100 	beq.w	801585a <read_submessage_list+0x28a>
 801565a:	f001 fc91 	bl	8016f80 <uxr_nanos>
 801565e:	f04f 0800 	mov.w	r8, #0
 8015662:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8015664:	4602      	mov	r2, r0
 8015666:	460b      	mov	r3, r1
 8015668:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801566a:	4990      	ldr	r1, [pc, #576]	@ (80158ac <read_submessage_list+0x2dc>)
 801566c:	46c4      	mov	ip, r8
 801566e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8015672:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8015676:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015678:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801567a:	46c6      	mov	lr, r8
 801567c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8015680:	46bc      	mov	ip, r7
 8015682:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8015686:	fbc0 7801 	smlal	r7, r8, r0, r1
 801568a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 801568e:	e9cd 7800 	strd	r7, r8, [sp]
 8015692:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8015696:	9106      	str	r1, [sp, #24]
 8015698:	4620      	mov	r0, r4
 801569a:	47b0      	blx	r6
 801569c:	2301      	movs	r3, #1
 801569e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80156a2:	e79b      	b.n	80155dc <read_submessage_list+0xc>
 80156a4:	a910      	add	r1, sp, #64	@ 0x40
 80156a6:	4628      	mov	r0, r5
 80156a8:	f002 fdde 	bl	8018268 <uxr_deserialize_HEARTBEAT_Payload>
 80156ac:	2100      	movs	r1, #0
 80156ae:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80156b2:	f001 fb05 	bl	8016cc0 <uxr_stream_id_from_raw>
 80156b6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80156ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80156bc:	4631      	mov	r1, r6
 80156be:	f104 0008 	add.w	r0, r4, #8
 80156c2:	f001 fbdd 	bl	8016e80 <uxr_get_input_reliable_stream>
 80156c6:	2800      	cmp	r0, #0
 80156c8:	d088      	beq.n	80155dc <read_submessage_list+0xc>
 80156ca:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80156ce:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80156d2:	f006 fe1d 	bl	801c310 <uxr_process_heartbeat>
 80156d6:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80156da:	4632      	mov	r2, r6
 80156dc:	4620      	mov	r0, r4
 80156de:	f7ff fe1b 	bl	8015318 <write_submessage_acknack.isra.0>
 80156e2:	e77b      	b.n	80155dc <read_submessage_list+0xc>
 80156e4:	a910      	add	r1, sp, #64	@ 0x40
 80156e6:	4628      	mov	r0, r5
 80156e8:	f002 fd96 	bl	8018218 <uxr_deserialize_ACKNACK_Payload>
 80156ec:	2100      	movs	r1, #0
 80156ee:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80156f2:	f001 fae5 	bl	8016cc0 <uxr_stream_id_from_raw>
 80156f6:	900d      	str	r0, [sp, #52]	@ 0x34
 80156f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80156fc:	f104 0008 	add.w	r0, r4, #8
 8015700:	f001 fbaa 	bl	8016e58 <uxr_get_output_reliable_stream>
 8015704:	4606      	mov	r6, r0
 8015706:	2800      	cmp	r0, #0
 8015708:	f43f af68 	beq.w	80155dc <read_submessage_list+0xc>
 801570c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8015710:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015714:	ba49      	rev16	r1, r1
 8015716:	b289      	uxth	r1, r1
 8015718:	f007 f948 	bl	801c9ac <uxr_process_acknack>
 801571c:	4630      	mov	r0, r6
 801571e:	f007 f909 	bl	801c934 <uxr_begin_output_nack_buffer_it>
 8015722:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015726:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801572a:	e005      	b.n	8015738 <read_submessage_list+0x168>
 801572c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801572e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015730:	685f      	ldr	r7, [r3, #4]
 8015732:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015734:	6818      	ldr	r0, [r3, #0]
 8015736:	47b8      	blx	r7
 8015738:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801573c:	aa0f      	add	r2, sp, #60	@ 0x3c
 801573e:	4641      	mov	r1, r8
 8015740:	4630      	mov	r0, r6
 8015742:	f007 f8f9 	bl	801c938 <uxr_next_reliable_nack_buffer_to_send>
 8015746:	2800      	cmp	r0, #0
 8015748:	d1f0      	bne.n	801572c <read_submessage_list+0x15c>
 801574a:	e747      	b.n	80155dc <read_submessage_list+0xc>
 801574c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015750:	4641      	mov	r1, r8
 8015752:	900d      	str	r0, [sp, #52]	@ 0x34
 8015754:	4628      	mov	r0, r5
 8015756:	f002 fad9 	bl	8017d0c <uxr_deserialize_BaseObjectRequest>
 801575a:	3e04      	subs	r6, #4
 801575c:	4640      	mov	r0, r8
 801575e:	a90f      	add	r1, sp, #60	@ 0x3c
 8015760:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8015764:	f000 fe1a 	bl	801639c <uxr_parse_base_object_request>
 8015768:	fa1f f886 	uxth.w	r8, r6
 801576c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8015770:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015772:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8015776:	9110      	str	r1, [sp, #64]	@ 0x40
 8015778:	f007 070e 	and.w	r7, r7, #14
 801577c:	b136      	cbz	r6, 801578c <read_submessage_list+0x1bc>
 801577e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8015782:	9300      	str	r3, [sp, #0]
 8015784:	464a      	mov	r2, r9
 8015786:	2300      	movs	r3, #0
 8015788:	4620      	mov	r0, r4
 801578a:	47b0      	blx	r6
 801578c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 801578e:	b16b      	cbz	r3, 80157ac <read_submessage_list+0x1dc>
 8015790:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015792:	2100      	movs	r1, #0
 8015794:	3802      	subs	r0, #2
 8015796:	e002      	b.n	801579e <read_submessage_list+0x1ce>
 8015798:	3101      	adds	r1, #1
 801579a:	428b      	cmp	r3, r1
 801579c:	d006      	beq.n	80157ac <read_submessage_list+0x1dc>
 801579e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80157a2:	454e      	cmp	r6, r9
 80157a4:	d1f8      	bne.n	8015798 <read_submessage_list+0x1c8>
 80157a6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80157a8:	2200      	movs	r2, #0
 80157aa:	545a      	strb	r2, [r3, r1]
 80157ac:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80157b0:	9102      	str	r1, [sp, #8]
 80157b2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80157b4:	9101      	str	r1, [sp, #4]
 80157b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80157b8:	9100      	str	r1, [sp, #0]
 80157ba:	463b      	mov	r3, r7
 80157bc:	4642      	mov	r2, r8
 80157be:	4629      	mov	r1, r5
 80157c0:	4620      	mov	r0, r4
 80157c2:	f7ff fc7d 	bl	80150c0 <read_submessage_format>
 80157c6:	e709      	b.n	80155dc <read_submessage_list+0xc>
 80157c8:	4629      	mov	r1, r5
 80157ca:	4620      	mov	r0, r4
 80157cc:	f7ff feb8 	bl	8015540 <read_submessage_info>
 80157d0:	e704      	b.n	80155dc <read_submessage_list+0xc>
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d03c      	beq.n	8015850 <read_submessage_list+0x280>
 80157d6:	a910      	add	r1, sp, #64	@ 0x40
 80157d8:	4628      	mov	r0, r5
 80157da:	f002 fc79 	bl	80180d0 <uxr_deserialize_STATUS_Payload>
 80157de:	a90e      	add	r1, sp, #56	@ 0x38
 80157e0:	a810      	add	r0, sp, #64	@ 0x40
 80157e2:	aa0d      	add	r2, sp, #52	@ 0x34
 80157e4:	f000 fdda 	bl	801639c <uxr_parse_base_object_request>
 80157e8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 80157ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80157ee:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 80157f2:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80157f6:	910f      	str	r1, [sp, #60]	@ 0x3c
 80157f8:	b136      	cbz	r6, 8015808 <read_submessage_list+0x238>
 80157fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80157fe:	9300      	str	r3, [sp, #0]
 8015800:	463a      	mov	r2, r7
 8015802:	4643      	mov	r3, r8
 8015804:	4620      	mov	r0, r4
 8015806:	47b0      	blx	r6
 8015808:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801580a:	2a00      	cmp	r2, #0
 801580c:	f43f aee6 	beq.w	80155dc <read_submessage_list+0xc>
 8015810:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8015812:	2100      	movs	r1, #0
 8015814:	3802      	subs	r0, #2
 8015816:	e003      	b.n	8015820 <read_submessage_list+0x250>
 8015818:	3101      	adds	r1, #1
 801581a:	4291      	cmp	r1, r2
 801581c:	f43f aede 	beq.w	80155dc <read_submessage_list+0xc>
 8015820:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8015824:	42be      	cmp	r6, r7
 8015826:	d1f7      	bne.n	8015818 <read_submessage_list+0x248>
 8015828:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801582a:	f803 8001 	strb.w	r8, [r3, r1]
 801582e:	e6d5      	b.n	80155dc <read_submessage_list+0xc>
 8015830:	2b00      	cmp	r3, #0
 8015832:	f47f aed3 	bne.w	80155dc <read_submessage_list+0xc>
 8015836:	4629      	mov	r1, r5
 8015838:	4620      	mov	r0, r4
 801583a:	f000 fcf7 	bl	801622c <uxr_read_create_session_status>
 801583e:	e6cd      	b.n	80155dc <read_submessage_list+0xc>
 8015840:	4629      	mov	r1, r5
 8015842:	4620      	mov	r0, r4
 8015844:	f7ff fd32 	bl	80152ac <read_submessage_get_info>
 8015848:	e6c8      	b.n	80155dc <read_submessage_list+0xc>
 801584a:	b017      	add	sp, #92	@ 0x5c
 801584c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015850:	4629      	mov	r1, r5
 8015852:	4620      	mov	r0, r4
 8015854:	f000 fcf8 	bl	8016248 <uxr_read_delete_session_status>
 8015858:	e6c0      	b.n	80155dc <read_submessage_list+0xc>
 801585a:	f001 fb91 	bl	8016f80 <uxr_nanos>
 801585e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8015862:	f8df c048 	ldr.w	ip, [pc, #72]	@ 80158ac <read_submessage_list+0x2dc>
 8015866:	4633      	mov	r3, r6
 8015868:	fbc7 230c 	smlal	r2, r3, r7, ip
 801586c:	1810      	adds	r0, r2, r0
 801586e:	eb43 0301 	adc.w	r3, r3, r1
 8015872:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8015876:	46b6      	mov	lr, r6
 8015878:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 801587c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8015880:	fbc1 760c 	smlal	r7, r6, r1, ip
 8015884:	19d2      	adds	r2, r2, r7
 8015886:	eb4e 0106 	adc.w	r1, lr, r6
 801588a:	1a80      	subs	r0, r0, r2
 801588c:	eb63 0301 	sbc.w	r3, r3, r1
 8015890:	0fda      	lsrs	r2, r3, #31
 8015892:	1812      	adds	r2, r2, r0
 8015894:	f143 0300 	adc.w	r3, r3, #0
 8015898:	0852      	lsrs	r2, r2, #1
 801589a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801589e:	105b      	asrs	r3, r3, #1
 80158a0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80158a4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80158a8:	e6f8      	b.n	801569c <read_submessage_list+0xcc>
 80158aa:	bf00      	nop
 80158ac:	3b9aca00 	.word	0x3b9aca00

080158b0 <listen_message_reliably>:
 80158b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b4:	f1b1 0b00 	subs.w	fp, r1, #0
 80158b8:	b09f      	sub	sp, #124	@ 0x7c
 80158ba:	4606      	mov	r6, r0
 80158bc:	bfb8      	it	lt
 80158be:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 80158c2:	f001 fb43 	bl	8016f4c <uxr_millis>
 80158c6:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80158ca:	9003      	str	r0, [sp, #12]
 80158cc:	9104      	str	r1, [sp, #16]
 80158ce:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80158d2:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	f000 80a4 	beq.w	8015a24 <listen_message_reliably+0x174>
 80158dc:	2500      	movs	r5, #0
 80158de:	e9cd b806 	strd	fp, r8, [sp, #24]
 80158e2:	f106 0420 	add.w	r4, r6, #32
 80158e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80158ea:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 80158ee:	4628      	mov	r0, r5
 80158f0:	e011      	b.n	8015916 <listen_message_reliably+0x66>
 80158f2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80158f6:	42ba      	cmp	r2, r7
 80158f8:	eb73 0109 	sbcs.w	r1, r3, r9
 80158fc:	bfb8      	it	lt
 80158fe:	4699      	movlt	r9, r3
 8015900:	f105 0501 	add.w	r5, r5, #1
 8015904:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015908:	b2e8      	uxtb	r0, r5
 801590a:	bfb8      	it	lt
 801590c:	4617      	movlt	r7, r2
 801590e:	4283      	cmp	r3, r0
 8015910:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8015914:	d94a      	bls.n	80159ac <listen_message_reliably+0xfc>
 8015916:	2201      	movs	r2, #1
 8015918:	2102      	movs	r1, #2
 801591a:	f001 f9b5 	bl	8016c88 <uxr_stream_id>
 801591e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8015922:	4601      	mov	r1, r0
 8015924:	4620      	mov	r0, r4
 8015926:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015928:	f006 ffd4 	bl	801c8d4 <uxr_update_output_stream_heartbeat_timestamp>
 801592c:	2800      	cmp	r0, #0
 801592e:	d0e0      	beq.n	80158f2 <listen_message_reliably+0x42>
 8015930:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8015934:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8015938:	9305      	str	r3, [sp, #20]
 801593a:	4630      	mov	r0, r6
 801593c:	f000 fd08 	bl	8016350 <uxr_session_header_offset>
 8015940:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8015944:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8015948:	9000      	str	r0, [sp, #0]
 801594a:	a90e      	add	r1, sp, #56	@ 0x38
 801594c:	4640      	mov	r0, r8
 801594e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8015952:	2300      	movs	r3, #0
 8015954:	2211      	movs	r2, #17
 8015956:	f7f8 fe3b 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801595a:	2300      	movs	r3, #0
 801595c:	2205      	movs	r2, #5
 801595e:	210b      	movs	r1, #11
 8015960:	4640      	mov	r0, r8
 8015962:	f001 faad 	bl	8016ec0 <uxr_buffer_submessage_header>
 8015966:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 801596a:	2101      	movs	r1, #1
 801596c:	f007 f874 	bl	801ca58 <uxr_seq_num_add>
 8015970:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8015974:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015978:	4602      	mov	r2, r0
 801597a:	9b05      	ldr	r3, [sp, #20]
 801597c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8015980:	a90c      	add	r1, sp, #48	@ 0x30
 8015982:	4640      	mov	r0, r8
 8015984:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8015988:	f002 fc5a 	bl	8018240 <uxr_serialize_HEARTBEAT_Payload>
 801598c:	2200      	movs	r2, #0
 801598e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015990:	4611      	mov	r1, r2
 8015992:	4630      	mov	r0, r6
 8015994:	f000 fc88 	bl	80162a8 <uxr_stamp_session_header>
 8015998:	4640      	mov	r0, r8
 801599a:	f7f8 fe57 	bl	800e64c <ucdr_buffer_length>
 801599e:	4602      	mov	r2, r0
 80159a0:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 80159a2:	a90e      	add	r1, sp, #56	@ 0x38
 80159a4:	e9d0 0300 	ldrd	r0, r3, [r0]
 80159a8:	4798      	blx	r3
 80159aa:	e7a2      	b.n	80158f2 <listen_message_reliably+0x42>
 80159ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80159b0:	4599      	cmp	r9, r3
 80159b2:	bf08      	it	eq
 80159b4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 80159b8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 80159bc:	d032      	beq.n	8015a24 <listen_message_reliably+0x174>
 80159be:	9b03      	ldr	r3, [sp, #12]
 80159c0:	1aff      	subs	r7, r7, r3
 80159c2:	2f00      	cmp	r7, #0
 80159c4:	bf08      	it	eq
 80159c6:	2701      	moveq	r7, #1
 80159c8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80159ca:	455f      	cmp	r7, fp
 80159cc:	bfa8      	it	ge
 80159ce:	465f      	movge	r7, fp
 80159d0:	689c      	ldr	r4, [r3, #8]
 80159d2:	6818      	ldr	r0, [r3, #0]
 80159d4:	4642      	mov	r2, r8
 80159d6:	463b      	mov	r3, r7
 80159d8:	4651      	mov	r1, sl
 80159da:	47a0      	blx	r4
 80159dc:	ebab 0b07 	sub.w	fp, fp, r7
 80159e0:	b958      	cbnz	r0, 80159fa <listen_message_reliably+0x14a>
 80159e2:	f1bb 0f00 	cmp.w	fp, #0
 80159e6:	dd44      	ble.n	8015a72 <listen_message_reliably+0x1c2>
 80159e8:	f001 fab0 	bl	8016f4c <uxr_millis>
 80159ec:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d03c      	beq.n	8015a6e <listen_message_reliably+0x1be>
 80159f4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80159f8:	e770      	b.n	80158dc <listen_message_reliably+0x2c>
 80159fa:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 80159fe:	4604      	mov	r4, r0
 8015a00:	a80e      	add	r0, sp, #56	@ 0x38
 8015a02:	f7f8 fdf7 	bl	800e5f4 <ucdr_init_buffer>
 8015a06:	2500      	movs	r5, #0
 8015a08:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8015a0c:	aa08      	add	r2, sp, #32
 8015a0e:	a90e      	add	r1, sp, #56	@ 0x38
 8015a10:	4630      	mov	r0, r6
 8015a12:	f88d 5020 	strb.w	r5, [sp, #32]
 8015a16:	f000 fc5d 	bl	80162d4 <uxr_read_session_header>
 8015a1a:	b928      	cbnz	r0, 8015a28 <listen_message_reliably+0x178>
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	b01f      	add	sp, #124	@ 0x7c
 8015a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a24:	465f      	mov	r7, fp
 8015a26:	e7cc      	b.n	80159c2 <listen_message_reliably+0x112>
 8015a28:	4629      	mov	r1, r5
 8015a2a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8015a2e:	f001 f947 	bl	8016cc0 <uxr_stream_id_from_raw>
 8015a32:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015a36:	2f01      	cmp	r7, #1
 8015a38:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8015a3c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8015a40:	fa5f f880 	uxtb.w	r8, r0
 8015a44:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8015a48:	d050      	beq.n	8015aec <listen_message_reliably+0x23c>
 8015a4a:	2f02      	cmp	r7, #2
 8015a4c:	d016      	beq.n	8015a7c <listen_message_reliably+0x1cc>
 8015a4e:	2f00      	cmp	r7, #0
 8015a50:	d1e4      	bne.n	8015a1c <listen_message_reliably+0x16c>
 8015a52:	4639      	mov	r1, r7
 8015a54:	4638      	mov	r0, r7
 8015a56:	f001 f933 	bl	8016cc0 <uxr_stream_id_from_raw>
 8015a5a:	a90e      	add	r1, sp, #56	@ 0x38
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	4630      	mov	r0, r6
 8015a60:	920c      	str	r2, [sp, #48]	@ 0x30
 8015a62:	f7ff fdb5 	bl	80155d0 <read_submessage_list>
 8015a66:	4620      	mov	r0, r4
 8015a68:	b01f      	add	sp, #124	@ 0x7c
 8015a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a6e:	465f      	mov	r7, fp
 8015a70:	e7aa      	b.n	80159c8 <listen_message_reliably+0x118>
 8015a72:	4604      	mov	r4, r0
 8015a74:	4620      	mov	r0, r4
 8015a76:	b01f      	add	sp, #124	@ 0x7c
 8015a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a7c:	4629      	mov	r1, r5
 8015a7e:	f106 0008 	add.w	r0, r6, #8
 8015a82:	f001 f9fd 	bl	8016e80 <uxr_get_input_reliable_stream>
 8015a86:	4681      	mov	r9, r0
 8015a88:	b338      	cbz	r0, 8015ada <listen_message_reliably+0x22a>
 8015a8a:	a80e      	add	r0, sp, #56	@ 0x38
 8015a8c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8015a90:	f7f8 fde0 	bl	800e654 <ucdr_buffer_remaining>
 8015a94:	4603      	mov	r3, r0
 8015a96:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8015a9a:	9000      	str	r0, [sp, #0]
 8015a9c:	465a      	mov	r2, fp
 8015a9e:	4651      	mov	r1, sl
 8015aa0:	4648      	mov	r0, r9
 8015aa2:	f006 fb43 	bl	801c12c <uxr_receive_reliable_message>
 8015aa6:	b1c0      	cbz	r0, 8015ada <listen_message_reliably+0x22a>
 8015aa8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8015aac:	b393      	cbz	r3, 8015b14 <listen_message_reliably+0x264>
 8015aae:	af16      	add	r7, sp, #88	@ 0x58
 8015ab0:	f04f 0a02 	mov.w	sl, #2
 8015ab4:	e00a      	b.n	8015acc <listen_message_reliably+0x21c>
 8015ab6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8015aba:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 8015abe:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 8015ac2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015ac4:	4639      	mov	r1, r7
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	f7ff fd82 	bl	80155d0 <read_submessage_list>
 8015acc:	2204      	movs	r2, #4
 8015ace:	4639      	mov	r1, r7
 8015ad0:	4648      	mov	r0, r9
 8015ad2:	f006 fba5 	bl	801c220 <uxr_next_input_reliable_buffer_available>
 8015ad6:	2800      	cmp	r0, #0
 8015ad8:	d1ed      	bne.n	8015ab6 <listen_message_reliably+0x206>
 8015ada:	4630      	mov	r0, r6
 8015adc:	462a      	mov	r2, r5
 8015ade:	4641      	mov	r1, r8
 8015ae0:	f7ff fc1a 	bl	8015318 <write_submessage_acknack.isra.0>
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	b01f      	add	sp, #124	@ 0x7c
 8015ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aec:	4629      	mov	r1, r5
 8015aee:	f106 0008 	add.w	r0, r6, #8
 8015af2:	f001 f9bb 	bl	8016e6c <uxr_get_input_best_effort_stream>
 8015af6:	2800      	cmp	r0, #0
 8015af8:	d090      	beq.n	8015a1c <listen_message_reliably+0x16c>
 8015afa:	4651      	mov	r1, sl
 8015afc:	f006 fa86 	bl	801c00c <uxr_receive_best_effort_message>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	d08b      	beq.n	8015a1c <listen_message_reliably+0x16c>
 8015b04:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015b08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015b0a:	a90e      	add	r1, sp, #56	@ 0x38
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	f7ff fd5f 	bl	80155d0 <read_submessage_list>
 8015b12:	e783      	b.n	8015a1c <listen_message_reliably+0x16c>
 8015b14:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8015b18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015b1a:	a90e      	add	r1, sp, #56	@ 0x38
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	f7ff fd57 	bl	80155d0 <read_submessage_list>
 8015b22:	e7c4      	b.n	8015aae <listen_message_reliably+0x1fe>

08015b24 <uxr_run_session_timeout>:
 8015b24:	b570      	push	{r4, r5, r6, lr}
 8015b26:	4604      	mov	r4, r0
 8015b28:	460d      	mov	r5, r1
 8015b2a:	f001 fa0f 	bl	8016f4c <uxr_millis>
 8015b2e:	4606      	mov	r6, r0
 8015b30:	4620      	mov	r0, r4
 8015b32:	f7ff fc99 	bl	8015468 <uxr_flash_output_streams>
 8015b36:	4629      	mov	r1, r5
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f7ff feb9 	bl	80158b0 <listen_message_reliably>
 8015b3e:	f001 fa05 	bl	8016f4c <uxr_millis>
 8015b42:	1b81      	subs	r1, r0, r6
 8015b44:	1a69      	subs	r1, r5, r1
 8015b46:	2900      	cmp	r1, #0
 8015b48:	dcf6      	bgt.n	8015b38 <uxr_run_session_timeout+0x14>
 8015b4a:	f104 0008 	add.w	r0, r4, #8
 8015b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b52:	f001 b99f 	b.w	8016e94 <uxr_output_streams_confirmed>
 8015b56:	bf00      	nop

08015b58 <uxr_run_session_until_data>:
 8015b58:	b570      	push	{r4, r5, r6, lr}
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	460d      	mov	r5, r1
 8015b5e:	f001 f9f5 	bl	8016f4c <uxr_millis>
 8015b62:	4606      	mov	r6, r0
 8015b64:	4620      	mov	r0, r4
 8015b66:	f7ff fc7f 	bl	8015468 <uxr_flash_output_streams>
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8015b70:	4629      	mov	r1, r5
 8015b72:	e005      	b.n	8015b80 <uxr_run_session_until_data+0x28>
 8015b74:	f001 f9ea 	bl	8016f4c <uxr_millis>
 8015b78:	1b81      	subs	r1, r0, r6
 8015b7a:	1a69      	subs	r1, r5, r1
 8015b7c:	2900      	cmp	r1, #0
 8015b7e:	dd07      	ble.n	8015b90 <uxr_run_session_until_data+0x38>
 8015b80:	4620      	mov	r0, r4
 8015b82:	f7ff fe95 	bl	80158b0 <listen_message_reliably>
 8015b86:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d0f2      	beq.n	8015b74 <uxr_run_session_until_data+0x1c>
 8015b8e:	bd70      	pop	{r4, r5, r6, pc}
 8015b90:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8015b94:	bd70      	pop	{r4, r5, r6, pc}
 8015b96:	bf00      	nop

08015b98 <uxr_run_session_until_confirm_delivery>:
 8015b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9c:	4606      	mov	r6, r0
 8015b9e:	460d      	mov	r5, r1
 8015ba0:	f001 f9d4 	bl	8016f4c <uxr_millis>
 8015ba4:	4607      	mov	r7, r0
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	f7ff fc5e 	bl	8015468 <uxr_flash_output_streams>
 8015bac:	2d00      	cmp	r5, #0
 8015bae:	db16      	blt.n	8015bde <uxr_run_session_until_confirm_delivery+0x46>
 8015bb0:	462c      	mov	r4, r5
 8015bb2:	f106 0808 	add.w	r8, r6, #8
 8015bb6:	e008      	b.n	8015bca <uxr_run_session_until_confirm_delivery+0x32>
 8015bb8:	4621      	mov	r1, r4
 8015bba:	4630      	mov	r0, r6
 8015bbc:	f7ff fe78 	bl	80158b0 <listen_message_reliably>
 8015bc0:	f001 f9c4 	bl	8016f4c <uxr_millis>
 8015bc4:	1bc1      	subs	r1, r0, r7
 8015bc6:	1a6c      	subs	r4, r5, r1
 8015bc8:	d404      	bmi.n	8015bd4 <uxr_run_session_until_confirm_delivery+0x3c>
 8015bca:	4640      	mov	r0, r8
 8015bcc:	f001 f962 	bl	8016e94 <uxr_output_streams_confirmed>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d0f1      	beq.n	8015bb8 <uxr_run_session_until_confirm_delivery+0x20>
 8015bd4:	4640      	mov	r0, r8
 8015bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bda:	f001 b95b 	b.w	8016e94 <uxr_output_streams_confirmed>
 8015bde:	f106 0808 	add.w	r8, r6, #8
 8015be2:	e7f7      	b.n	8015bd4 <uxr_run_session_until_confirm_delivery+0x3c>

08015be4 <uxr_run_session_until_all_status>:
 8015be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015be8:	9c08      	ldr	r4, [sp, #32]
 8015bea:	4605      	mov	r5, r0
 8015bec:	460f      	mov	r7, r1
 8015bee:	4690      	mov	r8, r2
 8015bf0:	461e      	mov	r6, r3
 8015bf2:	f7ff fc39 	bl	8015468 <uxr_flash_output_streams>
 8015bf6:	b124      	cbz	r4, 8015c02 <uxr_run_session_until_all_status+0x1e>
 8015bf8:	4622      	mov	r2, r4
 8015bfa:	21ff      	movs	r1, #255	@ 0xff
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f008 f8df 	bl	801ddc0 <memset>
 8015c02:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8015c06:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8015c08:	f001 f9a0 	bl	8016f4c <uxr_millis>
 8015c0c:	4639      	mov	r1, r7
 8015c0e:	4681      	mov	r9, r0
 8015c10:	4628      	mov	r0, r5
 8015c12:	f7ff fe4d 	bl	80158b0 <listen_message_reliably>
 8015c16:	f001 f999 	bl	8016f4c <uxr_millis>
 8015c1a:	eba0 0109 	sub.w	r1, r0, r9
 8015c1e:	1a79      	subs	r1, r7, r1
 8015c20:	b36c      	cbz	r4, 8015c7e <uxr_run_session_until_all_status+0x9a>
 8015c22:	1e70      	subs	r0, r6, #1
 8015c24:	46c6      	mov	lr, r8
 8015c26:	1902      	adds	r2, r0, r4
 8015c28:	4684      	mov	ip, r0
 8015c2a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015c2e:	2bff      	cmp	r3, #255	@ 0xff
 8015c30:	d007      	beq.n	8015c42 <uxr_run_session_until_all_status+0x5e>
 8015c32:	4594      	cmp	ip, r2
 8015c34:	d00f      	beq.n	8015c56 <uxr_run_session_until_all_status+0x72>
 8015c36:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8015c3a:	2bff      	cmp	r3, #255	@ 0xff
 8015c3c:	f10e 0e02 	add.w	lr, lr, #2
 8015c40:	d1f7      	bne.n	8015c32 <uxr_run_session_until_all_status+0x4e>
 8015c42:	4594      	cmp	ip, r2
 8015c44:	f8be 3000 	ldrh.w	r3, [lr]
 8015c48:	d014      	beq.n	8015c74 <uxr_run_session_until_all_status+0x90>
 8015c4a:	f10e 0e02 	add.w	lr, lr, #2
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d0eb      	beq.n	8015c2a <uxr_run_session_until_all_status+0x46>
 8015c52:	2900      	cmp	r1, #0
 8015c54:	dcdc      	bgt.n	8015c10 <uxr_run_session_until_all_status+0x2c>
 8015c56:	2300      	movs	r3, #0
 8015c58:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8015c5a:	e001      	b.n	8015c60 <uxr_run_session_until_all_status+0x7c>
 8015c5c:	2b01      	cmp	r3, #1
 8015c5e:	d812      	bhi.n	8015c86 <uxr_run_session_until_all_status+0xa2>
 8015c60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015c64:	4290      	cmp	r0, r2
 8015c66:	d1f9      	bne.n	8015c5c <uxr_run_session_until_all_status+0x78>
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	bf8c      	ite	hi
 8015c6c:	2000      	movhi	r0, #0
 8015c6e:	2001      	movls	r0, #1
 8015c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c74:	2900      	cmp	r1, #0
 8015c76:	ddee      	ble.n	8015c56 <uxr_run_session_until_all_status+0x72>
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d1c9      	bne.n	8015c10 <uxr_run_session_until_all_status+0x2c>
 8015c7c:	e7eb      	b.n	8015c56 <uxr_run_session_until_all_status+0x72>
 8015c7e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8015c80:	2001      	movs	r0, #1
 8015c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c86:	2000      	movs	r0, #0
 8015c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c8c:	0000      	movs	r0, r0
	...

08015c90 <uxr_sync_session>:
 8015c90:	b570      	push	{r4, r5, r6, lr}
 8015c92:	b092      	sub	sp, #72	@ 0x48
 8015c94:	4604      	mov	r4, r0
 8015c96:	460d      	mov	r5, r1
 8015c98:	f000 fb5a 	bl	8016350 <uxr_session_header_offset>
 8015c9c:	2214      	movs	r2, #20
 8015c9e:	eb0d 0102 	add.w	r1, sp, r2
 8015ca2:	9000      	str	r0, [sp, #0]
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	a80a      	add	r0, sp, #40	@ 0x28
 8015ca8:	f7f8 fc92 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 8015cac:	2300      	movs	r3, #0
 8015cae:	2208      	movs	r2, #8
 8015cb0:	210e      	movs	r1, #14
 8015cb2:	a80a      	add	r0, sp, #40	@ 0x28
 8015cb4:	f001 f904 	bl	8016ec0 <uxr_buffer_submessage_header>
 8015cb8:	f001 f962 	bl	8016f80 <uxr_nanos>
 8015cbc:	a318      	add	r3, pc, #96	@ (adr r3, 8015d20 <uxr_sync_session+0x90>)
 8015cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc2:	f7ea ffd1 	bl	8000c68 <__aeabi_ldivmod>
 8015cc6:	a903      	add	r1, sp, #12
 8015cc8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8015ccc:	a80a      	add	r0, sp, #40	@ 0x28
 8015cce:	f002 fadd 	bl	801828c <uxr_serialize_TIMESTAMP_Payload>
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cd8:	4620      	mov	r0, r4
 8015cda:	f000 fae5 	bl	80162a8 <uxr_stamp_session_header>
 8015cde:	a80a      	add	r0, sp, #40	@ 0x28
 8015ce0:	f7f8 fcb4 	bl	800e64c <ucdr_buffer_length>
 8015ce4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015ce6:	4602      	mov	r2, r0
 8015ce8:	a905      	add	r1, sp, #20
 8015cea:	e9d3 0600 	ldrd	r0, r6, [r3]
 8015cee:	47b0      	blx	r6
 8015cf0:	f001 f92c 	bl	8016f4c <uxr_millis>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	4606      	mov	r6, r0
 8015cf8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	e000      	b.n	8015d02 <uxr_sync_session+0x72>
 8015d00:	b950      	cbnz	r0, 8015d18 <uxr_sync_session+0x88>
 8015d02:	4620      	mov	r0, r4
 8015d04:	f7ff fdd4 	bl	80158b0 <listen_message_reliably>
 8015d08:	f001 f920 	bl	8016f4c <uxr_millis>
 8015d0c:	1b81      	subs	r1, r0, r6
 8015d0e:	1a69      	subs	r1, r5, r1
 8015d10:	2900      	cmp	r1, #0
 8015d12:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8015d16:	dcf3      	bgt.n	8015d00 <uxr_sync_session+0x70>
 8015d18:	b012      	add	sp, #72	@ 0x48
 8015d1a:	bd70      	pop	{r4, r5, r6, pc}
 8015d1c:	f3af 8000 	nop.w
 8015d20:	3b9aca00 	.word	0x3b9aca00
 8015d24:	00000000 	.word	0x00000000

08015d28 <wait_session_status>:
 8015d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	20ff      	movs	r0, #255	@ 0xff
 8015d30:	b09f      	sub	sp, #124	@ 0x7c
 8015d32:	7160      	strb	r0, [r4, #5]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	f000 80bb 	beq.w	8015eb0 <wait_session_status+0x188>
 8015d3a:	4692      	mov	sl, r2
 8015d3c:	469b      	mov	fp, r3
 8015d3e:	f04f 0800 	mov.w	r8, #0
 8015d42:	9105      	str	r1, [sp, #20]
 8015d44:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015d46:	9905      	ldr	r1, [sp, #20]
 8015d48:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015d4c:	4652      	mov	r2, sl
 8015d4e:	47a8      	blx	r5
 8015d50:	f001 f8fc 	bl	8016f4c <uxr_millis>
 8015d54:	2700      	movs	r7, #0
 8015d56:	4605      	mov	r5, r0
 8015d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015d5c:	e009      	b.n	8015d72 <wait_session_status+0x4a>
 8015d5e:	f001 f8f5 	bl	8016f4c <uxr_millis>
 8015d62:	1b43      	subs	r3, r0, r5
 8015d64:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	7962      	ldrb	r2, [r4, #5]
 8015d6c:	dd3d      	ble.n	8015dea <wait_session_status+0xc2>
 8015d6e:	2aff      	cmp	r2, #255	@ 0xff
 8015d70:	d13b      	bne.n	8015dea <wait_session_status+0xc2>
 8015d72:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8015d74:	a90a      	add	r1, sp, #40	@ 0x28
 8015d76:	6896      	ldr	r6, [r2, #8]
 8015d78:	6810      	ldr	r0, [r2, #0]
 8015d7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015d7c:	47b0      	blx	r6
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d0ed      	beq.n	8015d5e <wait_session_status+0x36>
 8015d82:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8015d86:	a80e      	add	r0, sp, #56	@ 0x38
 8015d88:	f7f8 fc34 	bl	800e5f4 <ucdr_init_buffer>
 8015d8c:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8015d90:	aa09      	add	r2, sp, #36	@ 0x24
 8015d92:	a90e      	add	r1, sp, #56	@ 0x38
 8015d94:	4620      	mov	r0, r4
 8015d96:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8015d9a:	f000 fa9b 	bl	80162d4 <uxr_read_session_header>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d0dd      	beq.n	8015d5e <wait_session_status+0x36>
 8015da2:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8015da6:	2100      	movs	r1, #0
 8015da8:	f000 ff8a 	bl	8016cc0 <uxr_stream_id_from_raw>
 8015dac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015db0:	9304      	str	r3, [sp, #16]
 8015db2:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8015db6:	b2c3      	uxtb	r3, r0
 8015db8:	f1b9 0f01 	cmp.w	r9, #1
 8015dbc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8015dc0:	9303      	str	r3, [sp, #12]
 8015dc2:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015dc6:	d05d      	beq.n	8015e84 <wait_session_status+0x15c>
 8015dc8:	f1b9 0f02 	cmp.w	r9, #2
 8015dcc:	d01a      	beq.n	8015e04 <wait_session_status+0xdc>
 8015dce:	f1b9 0f00 	cmp.w	r9, #0
 8015dd2:	d1c4      	bne.n	8015d5e <wait_session_status+0x36>
 8015dd4:	4649      	mov	r1, r9
 8015dd6:	4648      	mov	r0, r9
 8015dd8:	f000 ff72 	bl	8016cc0 <uxr_stream_id_from_raw>
 8015ddc:	a90e      	add	r1, sp, #56	@ 0x38
 8015dde:	4602      	mov	r2, r0
 8015de0:	900d      	str	r0, [sp, #52]	@ 0x34
 8015de2:	4620      	mov	r0, r4
 8015de4:	f7ff fbf4 	bl	80155d0 <read_submessage_list>
 8015de8:	e7b9      	b.n	8015d5e <wait_session_status+0x36>
 8015dea:	f108 0801 	add.w	r8, r8, #1
 8015dee:	45c3      	cmp	fp, r8
 8015df0:	d001      	beq.n	8015df6 <wait_session_status+0xce>
 8015df2:	2aff      	cmp	r2, #255	@ 0xff
 8015df4:	d0a6      	beq.n	8015d44 <wait_session_status+0x1c>
 8015df6:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8015dfa:	bf18      	it	ne
 8015dfc:	2001      	movne	r0, #1
 8015dfe:	b01f      	add	sp, #124	@ 0x7c
 8015e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e04:	4631      	mov	r1, r6
 8015e06:	f104 0008 	add.w	r0, r4, #8
 8015e0a:	f001 f839 	bl	8016e80 <uxr_get_input_reliable_stream>
 8015e0e:	9006      	str	r0, [sp, #24]
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d031      	beq.n	8015e78 <wait_session_status+0x150>
 8015e14:	aa0e      	add	r2, sp, #56	@ 0x38
 8015e16:	4610      	mov	r0, r2
 8015e18:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015e1a:	9207      	str	r2, [sp, #28]
 8015e1c:	f7f8 fc1a 	bl	800e654 <ucdr_buffer_remaining>
 8015e20:	4603      	mov	r3, r0
 8015e22:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8015e26:	9000      	str	r0, [sp, #0]
 8015e28:	9a07      	ldr	r2, [sp, #28]
 8015e2a:	9904      	ldr	r1, [sp, #16]
 8015e2c:	9806      	ldr	r0, [sp, #24]
 8015e2e:	f006 f97d 	bl	801c12c <uxr_receive_reliable_message>
 8015e32:	b308      	cbz	r0, 8015e78 <wait_session_status+0x150>
 8015e34:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d041      	beq.n	8015ec0 <wait_session_status+0x198>
 8015e3c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015e40:	9507      	str	r5, [sp, #28]
 8015e42:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015e46:	9d06      	ldr	r5, [sp, #24]
 8015e48:	f04f 0902 	mov.w	r9, #2
 8015e4c:	e00a      	b.n	8015e64 <wait_session_status+0x13c>
 8015e4e:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8015e52:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8015e56:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8015e5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015e5c:	a916      	add	r1, sp, #88	@ 0x58
 8015e5e:	4620      	mov	r0, r4
 8015e60:	f7ff fbb6 	bl	80155d0 <read_submessage_list>
 8015e64:	2204      	movs	r2, #4
 8015e66:	a916      	add	r1, sp, #88	@ 0x58
 8015e68:	4628      	mov	r0, r5
 8015e6a:	f006 f9d9 	bl	801c220 <uxr_next_input_reliable_buffer_available>
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	d1ed      	bne.n	8015e4e <wait_session_status+0x126>
 8015e72:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015e76:	9d07      	ldr	r5, [sp, #28]
 8015e78:	9903      	ldr	r1, [sp, #12]
 8015e7a:	4632      	mov	r2, r6
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f7ff fa4b 	bl	8015318 <write_submessage_acknack.isra.0>
 8015e82:	e76c      	b.n	8015d5e <wait_session_status+0x36>
 8015e84:	4631      	mov	r1, r6
 8015e86:	f104 0008 	add.w	r0, r4, #8
 8015e8a:	f000 ffef 	bl	8016e6c <uxr_get_input_best_effort_stream>
 8015e8e:	2800      	cmp	r0, #0
 8015e90:	f43f af65 	beq.w	8015d5e <wait_session_status+0x36>
 8015e94:	9904      	ldr	r1, [sp, #16]
 8015e96:	f006 f8b9 	bl	801c00c <uxr_receive_best_effort_message>
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	f43f af5f 	beq.w	8015d5e <wait_session_status+0x36>
 8015ea0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8015ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015ea6:	a90e      	add	r1, sp, #56	@ 0x38
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f7ff fb91 	bl	80155d0 <read_submessage_list>
 8015eae:	e756      	b.n	8015d5e <wait_session_status+0x36>
 8015eb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015eb2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015eb6:	47a0      	blx	r4
 8015eb8:	2001      	movs	r0, #1
 8015eba:	b01f      	add	sp, #124	@ 0x7c
 8015ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec0:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8015ec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015ec6:	a90e      	add	r1, sp, #56	@ 0x38
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7ff fb81 	bl	80155d0 <read_submessage_list>
 8015ece:	e7b5      	b.n	8015e3c <wait_session_status+0x114>

08015ed0 <uxr_delete_session_retries>:
 8015ed0:	b530      	push	{r4, r5, lr}
 8015ed2:	b08f      	sub	sp, #60	@ 0x3c
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	460d      	mov	r5, r1
 8015ed8:	f000 fa3a 	bl	8016350 <uxr_session_header_offset>
 8015edc:	2300      	movs	r3, #0
 8015ede:	2210      	movs	r2, #16
 8015ee0:	9000      	str	r0, [sp, #0]
 8015ee2:	a902      	add	r1, sp, #8
 8015ee4:	a806      	add	r0, sp, #24
 8015ee6:	f7f8 fb73 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 8015eea:	a906      	add	r1, sp, #24
 8015eec:	4620      	mov	r0, r4
 8015eee:	f000 f981 	bl	80161f4 <uxr_buffer_delete_session>
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	9b06      	ldr	r3, [sp, #24]
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f000 f9d5 	bl	80162a8 <uxr_stamp_session_header>
 8015efe:	a806      	add	r0, sp, #24
 8015f00:	f7f8 fba4 	bl	800e64c <ucdr_buffer_length>
 8015f04:	462b      	mov	r3, r5
 8015f06:	4602      	mov	r2, r0
 8015f08:	a902      	add	r1, sp, #8
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	f7ff ff0c 	bl	8015d28 <wait_session_status>
 8015f10:	b118      	cbz	r0, 8015f1a <uxr_delete_session_retries+0x4a>
 8015f12:	7960      	ldrb	r0, [r4, #5]
 8015f14:	fab0 f080 	clz	r0, r0
 8015f18:	0940      	lsrs	r0, r0, #5
 8015f1a:	b00f      	add	sp, #60	@ 0x3c
 8015f1c:	bd30      	pop	{r4, r5, pc}
 8015f1e:	bf00      	nop

08015f20 <uxr_create_session>:
 8015f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f24:	f100 0308 	add.w	r3, r0, #8
 8015f28:	b0ab      	sub	sp, #172	@ 0xac
 8015f2a:	4604      	mov	r4, r0
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	9303      	str	r3, [sp, #12]
 8015f30:	f000 feec 	bl	8016d0c <uxr_reset_stream_storage>
 8015f34:	4620      	mov	r0, r4
 8015f36:	f000 fa0b 	bl	8016350 <uxr_session_header_offset>
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	9000      	str	r0, [sp, #0]
 8015f3e:	221c      	movs	r2, #28
 8015f40:	a90b      	add	r1, sp, #44	@ 0x2c
 8015f42:	a812      	add	r0, sp, #72	@ 0x48
 8015f44:	f7f8 fb44 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 8015f48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015f4a:	8a1a      	ldrh	r2, [r3, #16]
 8015f4c:	3a04      	subs	r2, #4
 8015f4e:	b292      	uxth	r2, r2
 8015f50:	a912      	add	r1, sp, #72	@ 0x48
 8015f52:	4620      	mov	r0, r4
 8015f54:	f000 f924 	bl	80161a0 <uxr_buffer_create_session>
 8015f58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f000 f990 	bl	8016280 <uxr_stamp_create_session_header>
 8015f60:	a812      	add	r0, sp, #72	@ 0x48
 8015f62:	f7f8 fb73 	bl	800e64c <ucdr_buffer_length>
 8015f66:	23ff      	movs	r3, #255	@ 0xff
 8015f68:	4683      	mov	fp, r0
 8015f6a:	7163      	strb	r3, [r4, #5]
 8015f6c:	f04f 080a 	mov.w	r8, #10
 8015f70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8015f72:	465a      	mov	r2, fp
 8015f74:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015f78:	a90b      	add	r1, sp, #44	@ 0x2c
 8015f7a:	47a8      	blx	r5
 8015f7c:	f000 ffe6 	bl	8016f4c <uxr_millis>
 8015f80:	2700      	movs	r7, #0
 8015f82:	4605      	mov	r5, r0
 8015f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015f88:	e009      	b.n	8015f9e <uxr_create_session+0x7e>
 8015f8a:	f000 ffdf 	bl	8016f4c <uxr_millis>
 8015f8e:	1b43      	subs	r3, r0, r5
 8015f90:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	7962      	ldrb	r2, [r4, #5]
 8015f98:	dd3d      	ble.n	8016016 <uxr_create_session+0xf6>
 8015f9a:	2aff      	cmp	r2, #255	@ 0xff
 8015f9c:	d13b      	bne.n	8016016 <uxr_create_session+0xf6>
 8015f9e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8015fa0:	a907      	add	r1, sp, #28
 8015fa2:	6896      	ldr	r6, [r2, #8]
 8015fa4:	6810      	ldr	r0, [r2, #0]
 8015fa6:	aa08      	add	r2, sp, #32
 8015fa8:	47b0      	blx	r6
 8015faa:	2800      	cmp	r0, #0
 8015fac:	d0ed      	beq.n	8015f8a <uxr_create_session+0x6a>
 8015fae:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8015fb2:	a81a      	add	r0, sp, #104	@ 0x68
 8015fb4:	f7f8 fb1e 	bl	800e5f4 <ucdr_init_buffer>
 8015fb8:	f10d 031a 	add.w	r3, sp, #26
 8015fbc:	aa06      	add	r2, sp, #24
 8015fbe:	a91a      	add	r1, sp, #104	@ 0x68
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	f88d 7018 	strb.w	r7, [sp, #24]
 8015fc6:	f000 f985 	bl	80162d4 <uxr_read_session_header>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d0dd      	beq.n	8015f8a <uxr_create_session+0x6a>
 8015fce:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	f000 fe74 	bl	8016cc0 <uxr_stream_id_from_raw>
 8015fd8:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8015fdc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8015fe0:	9302      	str	r3, [sp, #8]
 8015fe2:	f1b9 0f01 	cmp.w	r9, #1
 8015fe6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8015fea:	fa5f fa80 	uxtb.w	sl, r0
 8015fee:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8015ff2:	d056      	beq.n	80160a2 <uxr_create_session+0x182>
 8015ff4:	f1b9 0f02 	cmp.w	r9, #2
 8015ff8:	d018      	beq.n	801602c <uxr_create_session+0x10c>
 8015ffa:	f1b9 0f00 	cmp.w	r9, #0
 8015ffe:	d1c4      	bne.n	8015f8a <uxr_create_session+0x6a>
 8016000:	4649      	mov	r1, r9
 8016002:	4648      	mov	r0, r9
 8016004:	f000 fe5c 	bl	8016cc0 <uxr_stream_id_from_raw>
 8016008:	a91a      	add	r1, sp, #104	@ 0x68
 801600a:	4602      	mov	r2, r0
 801600c:	900a      	str	r0, [sp, #40]	@ 0x28
 801600e:	4620      	mov	r0, r4
 8016010:	f7ff fade 	bl	80155d0 <read_submessage_list>
 8016014:	e7b9      	b.n	8015f8a <uxr_create_session+0x6a>
 8016016:	f1b8 0801 	subs.w	r8, r8, #1
 801601a:	d001      	beq.n	8016020 <uxr_create_session+0x100>
 801601c:	2aff      	cmp	r2, #255	@ 0xff
 801601e:	d0a7      	beq.n	8015f70 <uxr_create_session+0x50>
 8016020:	2a00      	cmp	r2, #0
 8016022:	d05b      	beq.n	80160dc <uxr_create_session+0x1bc>
 8016024:	2000      	movs	r0, #0
 8016026:	b02b      	add	sp, #172	@ 0xac
 8016028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801602c:	9803      	ldr	r0, [sp, #12]
 801602e:	4631      	mov	r1, r6
 8016030:	f000 ff26 	bl	8016e80 <uxr_get_input_reliable_stream>
 8016034:	9004      	str	r0, [sp, #16]
 8016036:	b370      	cbz	r0, 8016096 <uxr_create_session+0x176>
 8016038:	aa1a      	add	r2, sp, #104	@ 0x68
 801603a:	4610      	mov	r0, r2
 801603c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801603e:	9205      	str	r2, [sp, #20]
 8016040:	f7f8 fb08 	bl	800e654 <ucdr_buffer_remaining>
 8016044:	4603      	mov	r3, r0
 8016046:	f10d 0019 	add.w	r0, sp, #25
 801604a:	9000      	str	r0, [sp, #0]
 801604c:	9a05      	ldr	r2, [sp, #20]
 801604e:	9902      	ldr	r1, [sp, #8]
 8016050:	9804      	ldr	r0, [sp, #16]
 8016052:	f006 f86b 	bl	801c12c <uxr_receive_reliable_message>
 8016056:	b1f0      	cbz	r0, 8016096 <uxr_create_session+0x176>
 8016058:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d035      	beq.n	80160cc <uxr_create_session+0x1ac>
 8016060:	f8cd b008 	str.w	fp, [sp, #8]
 8016064:	f04f 0902 	mov.w	r9, #2
 8016068:	f8dd b010 	ldr.w	fp, [sp, #16]
 801606c:	e00a      	b.n	8016084 <uxr_create_session+0x164>
 801606e:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8016072:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8016076:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801607a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801607c:	a922      	add	r1, sp, #136	@ 0x88
 801607e:	4620      	mov	r0, r4
 8016080:	f7ff faa6 	bl	80155d0 <read_submessage_list>
 8016084:	2204      	movs	r2, #4
 8016086:	a922      	add	r1, sp, #136	@ 0x88
 8016088:	4658      	mov	r0, fp
 801608a:	f006 f8c9 	bl	801c220 <uxr_next_input_reliable_buffer_available>
 801608e:	2800      	cmp	r0, #0
 8016090:	d1ed      	bne.n	801606e <uxr_create_session+0x14e>
 8016092:	f8dd b008 	ldr.w	fp, [sp, #8]
 8016096:	4632      	mov	r2, r6
 8016098:	4651      	mov	r1, sl
 801609a:	4620      	mov	r0, r4
 801609c:	f7ff f93c 	bl	8015318 <write_submessage_acknack.isra.0>
 80160a0:	e773      	b.n	8015f8a <uxr_create_session+0x6a>
 80160a2:	9803      	ldr	r0, [sp, #12]
 80160a4:	4631      	mov	r1, r6
 80160a6:	f000 fee1 	bl	8016e6c <uxr_get_input_best_effort_stream>
 80160aa:	2800      	cmp	r0, #0
 80160ac:	f43f af6d 	beq.w	8015f8a <uxr_create_session+0x6a>
 80160b0:	9902      	ldr	r1, [sp, #8]
 80160b2:	f005 ffab 	bl	801c00c <uxr_receive_best_effort_message>
 80160b6:	2800      	cmp	r0, #0
 80160b8:	f43f af67 	beq.w	8015f8a <uxr_create_session+0x6a>
 80160bc:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80160c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80160c2:	a91a      	add	r1, sp, #104	@ 0x68
 80160c4:	4620      	mov	r0, r4
 80160c6:	f7ff fa83 	bl	80155d0 <read_submessage_list>
 80160ca:	e75e      	b.n	8015f8a <uxr_create_session+0x6a>
 80160cc:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80160d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80160d2:	a91a      	add	r1, sp, #104	@ 0x68
 80160d4:	4620      	mov	r0, r4
 80160d6:	f7ff fa7b 	bl	80155d0 <read_submessage_list>
 80160da:	e7c1      	b.n	8016060 <uxr_create_session+0x140>
 80160dc:	9803      	ldr	r0, [sp, #12]
 80160de:	f000 fe15 	bl	8016d0c <uxr_reset_stream_storage>
 80160e2:	2001      	movs	r0, #1
 80160e4:	b02b      	add	sp, #172	@ 0xac
 80160e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ea:	bf00      	nop

080160ec <uxr_prepare_stream_to_write_submessage>:
 80160ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160f0:	b082      	sub	sp, #8
 80160f2:	4606      	mov	r6, r0
 80160f4:	4610      	mov	r0, r2
 80160f6:	4614      	mov	r4, r2
 80160f8:	9101      	str	r1, [sp, #4]
 80160fa:	461f      	mov	r7, r3
 80160fc:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8016100:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8016104:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8016108:	f000 ff1a 	bl	8016f40 <uxr_submessage_padding>
 801610c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8016110:	1d21      	adds	r1, r4, #4
 8016112:	2b01      	cmp	r3, #1
 8016114:	eb01 0a00 	add.w	sl, r1, r0
 8016118:	d012      	beq.n	8016140 <uxr_prepare_stream_to_write_submessage+0x54>
 801611a:	2b02      	cmp	r3, #2
 801611c:	d003      	beq.n	8016126 <uxr_prepare_stream_to_write_submessage+0x3a>
 801611e:	2000      	movs	r0, #0
 8016120:	b002      	add	sp, #8
 8016122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016126:	4629      	mov	r1, r5
 8016128:	f106 0008 	add.w	r0, r6, #8
 801612c:	f000 fe94 	bl	8016e58 <uxr_get_output_reliable_stream>
 8016130:	2800      	cmp	r0, #0
 8016132:	d0f4      	beq.n	801611e <uxr_prepare_stream_to_write_submessage+0x32>
 8016134:	4651      	mov	r1, sl
 8016136:	463a      	mov	r2, r7
 8016138:	f006 fa28 	bl	801c58c <uxr_prepare_reliable_buffer_to_write>
 801613c:	b968      	cbnz	r0, 801615a <uxr_prepare_stream_to_write_submessage+0x6e>
 801613e:	e7ee      	b.n	801611e <uxr_prepare_stream_to_write_submessage+0x32>
 8016140:	4629      	mov	r1, r5
 8016142:	f106 0008 	add.w	r0, r6, #8
 8016146:	f000 fe7f 	bl	8016e48 <uxr_get_output_best_effort_stream>
 801614a:	2800      	cmp	r0, #0
 801614c:	d0e7      	beq.n	801611e <uxr_prepare_stream_to_write_submessage+0x32>
 801614e:	4651      	mov	r1, sl
 8016150:	463a      	mov	r2, r7
 8016152:	f006 f94d 	bl	801c3f0 <uxr_prepare_best_effort_buffer_to_write>
 8016156:	2800      	cmp	r0, #0
 8016158:	d0e1      	beq.n	801611e <uxr_prepare_stream_to_write_submessage+0x32>
 801615a:	464b      	mov	r3, r9
 801615c:	b2a2      	uxth	r2, r4
 801615e:	4641      	mov	r1, r8
 8016160:	4638      	mov	r0, r7
 8016162:	f000 fead 	bl	8016ec0 <uxr_buffer_submessage_header>
 8016166:	2001      	movs	r0, #1
 8016168:	b002      	add	sp, #8
 801616a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801616e:	bf00      	nop

08016170 <uxr_init_session_info>:
 8016170:	2300      	movs	r3, #0
 8016172:	f361 0307 	bfi	r3, r1, #0, #8
 8016176:	0e11      	lsrs	r1, r2, #24
 8016178:	f361 230f 	bfi	r3, r1, #8, #8
 801617c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8016180:	f361 4317 	bfi	r3, r1, #16, #8
 8016184:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8016188:	f361 631f 	bfi	r3, r1, #24, #8
 801618c:	f04f 0c09 	mov.w	ip, #9
 8016190:	21ff      	movs	r1, #255	@ 0xff
 8016192:	6003      	str	r3, [r0, #0]
 8016194:	7102      	strb	r2, [r0, #4]
 8016196:	f8a0 c006 	strh.w	ip, [r0, #6]
 801619a:	7141      	strb	r1, [r0, #5]
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop

080161a0 <uxr_buffer_create_session>:
 80161a0:	b530      	push	{r4, r5, lr}
 80161a2:	4d13      	ldr	r5, [pc, #76]	@ (80161f0 <uxr_buffer_create_session+0x50>)
 80161a4:	b089      	sub	sp, #36	@ 0x24
 80161a6:	2300      	movs	r3, #0
 80161a8:	9307      	str	r3, [sp, #28]
 80161aa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80161ae:	682a      	ldr	r2, [r5, #0]
 80161b0:	9200      	str	r2, [sp, #0]
 80161b2:	460c      	mov	r4, r1
 80161b4:	2201      	movs	r2, #1
 80161b6:	88a9      	ldrh	r1, [r5, #4]
 80161b8:	9301      	str	r3, [sp, #4]
 80161ba:	80c2      	strh	r2, [r0, #6]
 80161bc:	f8ad 1006 	strh.w	r1, [sp, #6]
 80161c0:	f8d0 1001 	ldr.w	r1, [r0, #1]
 80161c4:	7800      	ldrb	r0, [r0, #0]
 80161c6:	9303      	str	r3, [sp, #12]
 80161c8:	f88d 2004 	strb.w	r2, [sp, #4]
 80161cc:	9102      	str	r1, [sp, #8]
 80161ce:	2210      	movs	r2, #16
 80161d0:	4619      	mov	r1, r3
 80161d2:	f88d 000c 	strb.w	r0, [sp, #12]
 80161d6:	4620      	mov	r0, r4
 80161d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80161dc:	9306      	str	r3, [sp, #24]
 80161de:	f000 fe6f 	bl	8016ec0 <uxr_buffer_submessage_header>
 80161e2:	4669      	mov	r1, sp
 80161e4:	4620      	mov	r0, r4
 80161e6:	f001 fe8f 	bl	8017f08 <uxr_serialize_CREATE_CLIENT_Payload>
 80161ea:	b009      	add	sp, #36	@ 0x24
 80161ec:	bd30      	pop	{r4, r5, pc}
 80161ee:	bf00      	nop
 80161f0:	080201a4 	.word	0x080201a4

080161f4 <uxr_buffer_delete_session>:
 80161f4:	b510      	push	{r4, lr}
 80161f6:	4a0c      	ldr	r2, [pc, #48]	@ (8016228 <uxr_buffer_delete_session+0x34>)
 80161f8:	b082      	sub	sp, #8
 80161fa:	460c      	mov	r4, r1
 80161fc:	2302      	movs	r3, #2
 80161fe:	8911      	ldrh	r1, [r2, #8]
 8016200:	80c3      	strh	r3, [r0, #6]
 8016202:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8016206:	2300      	movs	r3, #0
 8016208:	2204      	movs	r2, #4
 801620a:	f8ad 1006 	strh.w	r1, [sp, #6]
 801620e:	4620      	mov	r0, r4
 8016210:	2103      	movs	r1, #3
 8016212:	f8ad c004 	strh.w	ip, [sp, #4]
 8016216:	f000 fe53 	bl	8016ec0 <uxr_buffer_submessage_header>
 801621a:	a901      	add	r1, sp, #4
 801621c:	4620      	mov	r0, r4
 801621e:	f001 ff17 	bl	8018050 <uxr_serialize_DELETE_Payload>
 8016222:	b002      	add	sp, #8
 8016224:	bd10      	pop	{r4, pc}
 8016226:	bf00      	nop
 8016228:	080201a4 	.word	0x080201a4

0801622c <uxr_read_create_session_status>:
 801622c:	b510      	push	{r4, lr}
 801622e:	460b      	mov	r3, r1
 8016230:	b088      	sub	sp, #32
 8016232:	4604      	mov	r4, r0
 8016234:	a901      	add	r1, sp, #4
 8016236:	4618      	mov	r0, r3
 8016238:	f001 ff1a 	bl	8018070 <uxr_deserialize_STATUS_AGENT_Payload>
 801623c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016240:	7163      	strb	r3, [r4, #5]
 8016242:	b008      	add	sp, #32
 8016244:	bd10      	pop	{r4, pc}
 8016246:	bf00      	nop

08016248 <uxr_read_delete_session_status>:
 8016248:	b510      	push	{r4, lr}
 801624a:	460b      	mov	r3, r1
 801624c:	b082      	sub	sp, #8
 801624e:	4604      	mov	r4, r0
 8016250:	4669      	mov	r1, sp
 8016252:	4618      	mov	r0, r3
 8016254:	f001 ff3c 	bl	80180d0 <uxr_deserialize_STATUS_Payload>
 8016258:	88e3      	ldrh	r3, [r4, #6]
 801625a:	2b02      	cmp	r3, #2
 801625c:	d001      	beq.n	8016262 <uxr_read_delete_session_status+0x1a>
 801625e:	b002      	add	sp, #8
 8016260:	bd10      	pop	{r4, pc}
 8016262:	f10d 0002 	add.w	r0, sp, #2
 8016266:	f7fe fea9 	bl	8014fbc <uxr_object_id_from_raw>
 801626a:	f8bd 3000 	ldrh.w	r3, [sp]
 801626e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8016272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016276:	bf08      	it	eq
 8016278:	7162      	strbeq	r2, [r4, #5]
 801627a:	b002      	add	sp, #8
 801627c:	bd10      	pop	{r4, pc}
 801627e:	bf00      	nop

08016280 <uxr_stamp_create_session_header>:
 8016280:	b510      	push	{r4, lr}
 8016282:	2208      	movs	r2, #8
 8016284:	b08a      	sub	sp, #40	@ 0x28
 8016286:	4604      	mov	r4, r0
 8016288:	eb0d 0002 	add.w	r0, sp, r2
 801628c:	f7f8 f9b2 	bl	800e5f4 <ucdr_init_buffer>
 8016290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016294:	9400      	str	r4, [sp, #0]
 8016296:	2300      	movs	r3, #0
 8016298:	461a      	mov	r2, r3
 801629a:	a802      	add	r0, sp, #8
 801629c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80162a0:	f001 f80c 	bl	80172bc <uxr_serialize_message_header>
 80162a4:	b00a      	add	sp, #40	@ 0x28
 80162a6:	bd10      	pop	{r4, pc}

080162a8 <uxr_stamp_session_header>:
 80162a8:	b570      	push	{r4, r5, r6, lr}
 80162aa:	4604      	mov	r4, r0
 80162ac:	b08a      	sub	sp, #40	@ 0x28
 80162ae:	4616      	mov	r6, r2
 80162b0:	2208      	movs	r2, #8
 80162b2:	eb0d 0002 	add.w	r0, sp, r2
 80162b6:	460d      	mov	r5, r1
 80162b8:	4619      	mov	r1, r3
 80162ba:	f7f8 f99b 	bl	800e5f4 <ucdr_init_buffer>
 80162be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162c2:	9400      	str	r4, [sp, #0]
 80162c4:	4633      	mov	r3, r6
 80162c6:	462a      	mov	r2, r5
 80162c8:	a802      	add	r0, sp, #8
 80162ca:	f000 fff7 	bl	80172bc <uxr_serialize_message_header>
 80162ce:	b00a      	add	sp, #40	@ 0x28
 80162d0:	bd70      	pop	{r4, r5, r6, pc}
 80162d2:	bf00      	nop

080162d4 <uxr_read_session_header>:
 80162d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d6:	4607      	mov	r7, r0
 80162d8:	b085      	sub	sp, #20
 80162da:	4608      	mov	r0, r1
 80162dc:	460c      	mov	r4, r1
 80162de:	4615      	mov	r5, r2
 80162e0:	461e      	mov	r6, r3
 80162e2:	f7f8 f9b7 	bl	800e654 <ucdr_buffer_remaining>
 80162e6:	2808      	cmp	r0, #8
 80162e8:	d802      	bhi.n	80162f0 <uxr_read_session_header+0x1c>
 80162ea:	2000      	movs	r0, #0
 80162ec:	b005      	add	sp, #20
 80162ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162f0:	ab03      	add	r3, sp, #12
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	462a      	mov	r2, r5
 80162f6:	4633      	mov	r3, r6
 80162f8:	f10d 010b 	add.w	r1, sp, #11
 80162fc:	4620      	mov	r0, r4
 80162fe:	f000 fffb 	bl	80172f8 <uxr_deserialize_message_header>
 8016302:	783a      	ldrb	r2, [r7, #0]
 8016304:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8016308:	4293      	cmp	r3, r2
 801630a:	d1ee      	bne.n	80162ea <uxr_read_session_header+0x16>
 801630c:	061b      	lsls	r3, r3, #24
 801630e:	d41c      	bmi.n	801634a <uxr_read_session_header+0x76>
 8016310:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8016314:	787b      	ldrb	r3, [r7, #1]
 8016316:	429a      	cmp	r2, r3
 8016318:	d003      	beq.n	8016322 <uxr_read_session_header+0x4e>
 801631a:	2001      	movs	r0, #1
 801631c:	f080 0001 	eor.w	r0, r0, #1
 8016320:	e7e4      	b.n	80162ec <uxr_read_session_header+0x18>
 8016322:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8016326:	78bb      	ldrb	r3, [r7, #2]
 8016328:	429a      	cmp	r2, r3
 801632a:	f107 0102 	add.w	r1, r7, #2
 801632e:	d1f4      	bne.n	801631a <uxr_read_session_header+0x46>
 8016330:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8016334:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016338:	429a      	cmp	r2, r3
 801633a:	d1ee      	bne.n	801631a <uxr_read_session_header+0x46>
 801633c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8016340:	784b      	ldrb	r3, [r1, #1]
 8016342:	429a      	cmp	r2, r3
 8016344:	d1e9      	bne.n	801631a <uxr_read_session_header+0x46>
 8016346:	2000      	movs	r0, #0
 8016348:	e7e8      	b.n	801631c <uxr_read_session_header+0x48>
 801634a:	2001      	movs	r0, #1
 801634c:	e7ce      	b.n	80162ec <uxr_read_session_header+0x18>
 801634e:	bf00      	nop

08016350 <uxr_session_header_offset>:
 8016350:	f990 3000 	ldrsb.w	r3, [r0]
 8016354:	2b00      	cmp	r3, #0
 8016356:	bfb4      	ite	lt
 8016358:	2004      	movlt	r0, #4
 801635a:	2008      	movge	r0, #8
 801635c:	4770      	bx	lr
 801635e:	bf00      	nop

08016360 <uxr_init_base_object_request>:
 8016360:	b510      	push	{r4, lr}
 8016362:	88c3      	ldrh	r3, [r0, #6]
 8016364:	b082      	sub	sp, #8
 8016366:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801636a:	9101      	str	r1, [sp, #4]
 801636c:	f1a3 010a 	sub.w	r1, r3, #10
 8016370:	b289      	uxth	r1, r1
 8016372:	42a1      	cmp	r1, r4
 8016374:	d80e      	bhi.n	8016394 <uxr_init_base_object_request+0x34>
 8016376:	3301      	adds	r3, #1
 8016378:	b29c      	uxth	r4, r3
 801637a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801637e:	b2db      	uxtb	r3, r3
 8016380:	80c4      	strh	r4, [r0, #6]
 8016382:	9801      	ldr	r0, [sp, #4]
 8016384:	7011      	strb	r1, [r2, #0]
 8016386:	7053      	strb	r3, [r2, #1]
 8016388:	1c91      	adds	r1, r2, #2
 801638a:	f7fe fe2b 	bl	8014fe4 <uxr_object_id_to_raw>
 801638e:	4620      	mov	r0, r4
 8016390:	b002      	add	sp, #8
 8016392:	bd10      	pop	{r4, pc}
 8016394:	230a      	movs	r3, #10
 8016396:	2100      	movs	r1, #0
 8016398:	461c      	mov	r4, r3
 801639a:	e7f1      	b.n	8016380 <uxr_init_base_object_request+0x20>

0801639c <uxr_parse_base_object_request>:
 801639c:	b570      	push	{r4, r5, r6, lr}
 801639e:	4604      	mov	r4, r0
 80163a0:	3002      	adds	r0, #2
 80163a2:	460d      	mov	r5, r1
 80163a4:	4616      	mov	r6, r2
 80163a6:	f7fe fe09 	bl	8014fbc <uxr_object_id_from_raw>
 80163aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80163ae:	8028      	strh	r0, [r5, #0]
 80163b0:	806b      	strh	r3, [r5, #2]
 80163b2:	8823      	ldrh	r3, [r4, #0]
 80163b4:	ba5b      	rev16	r3, r3
 80163b6:	8033      	strh	r3, [r6, #0]
 80163b8:	bd70      	pop	{r4, r5, r6, pc}
 80163ba:	bf00      	nop

080163bc <uxr_init_framing_io>:
 80163bc:	2300      	movs	r3, #0
 80163be:	7041      	strb	r1, [r0, #1]
 80163c0:	7003      	strb	r3, [r0, #0]
 80163c2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80163c4:	4770      	bx	lr
 80163c6:	bf00      	nop

080163c8 <uxr_write_framed_msg>:
 80163c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163cc:	f890 c001 	ldrb.w	ip, [r0, #1]
 80163d0:	4617      	mov	r7, r2
 80163d2:	227e      	movs	r2, #126	@ 0x7e
 80163d4:	b085      	sub	sp, #20
 80163d6:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 80163da:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 80163de:	2a01      	cmp	r2, #1
 80163e0:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80163e4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80163e8:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80163ec:	4604      	mov	r4, r0
 80163ee:	460e      	mov	r6, r1
 80163f0:	469a      	mov	sl, r3
 80163f2:	f240 812e 	bls.w	8016652 <uxr_write_framed_msg+0x28a>
 80163f6:	2003      	movs	r0, #3
 80163f8:	2102      	movs	r1, #2
 80163fa:	f04f 0905 	mov.w	r9, #5
 80163fe:	2204      	movs	r2, #4
 8016400:	4686      	mov	lr, r0
 8016402:	460b      	mov	r3, r1
 8016404:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 8016408:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 801640c:	f1bc 0f01 	cmp.w	ip, #1
 8016410:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016414:	4421      	add	r1, r4
 8016416:	f240 8110 	bls.w	801663a <uxr_write_framed_msg+0x272>
 801641a:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801641e:	fa5f fc8b 	uxtb.w	ip, fp
 8016422:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8016426:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801642a:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 801642e:	f1be 0f01 	cmp.w	lr, #1
 8016432:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8016436:	b2ed      	uxtb	r5, r5
 8016438:	d94c      	bls.n	80164d4 <uxr_write_framed_msg+0x10c>
 801643a:	4420      	add	r0, r4
 801643c:	2d01      	cmp	r5, #1
 801643e:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8016442:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016446:	d95d      	bls.n	8016504 <uxr_write_framed_msg+0x13c>
 8016448:	18a0      	adds	r0, r4, r2
 801644a:	3201      	adds	r2, #1
 801644c:	b2d2      	uxtb	r2, r2
 801644e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016452:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016456:	f1bb 0f00 	cmp.w	fp, #0
 801645a:	f000 8108 	beq.w	801666e <uxr_write_framed_msg+0x2a6>
 801645e:	f04f 0c00 	mov.w	ip, #0
 8016462:	4661      	mov	r1, ip
 8016464:	46de      	mov	lr, fp
 8016466:	46e3      	mov	fp, ip
 8016468:	46d4      	mov	ip, sl
 801646a:	468a      	mov	sl, r1
 801646c:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 8016678 <uxr_write_framed_msg+0x2b0>
 8016470:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8016474:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8016478:	2901      	cmp	r1, #1
 801647a:	d91b      	bls.n	80164b4 <uxr_write_framed_msg+0xec>
 801647c:	2a29      	cmp	r2, #41	@ 0x29
 801647e:	d84e      	bhi.n	801651e <uxr_write_framed_msg+0x156>
 8016480:	18a1      	adds	r1, r4, r2
 8016482:	3201      	adds	r2, #1
 8016484:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8016488:	b2d2      	uxtb	r2, r2
 801648a:	ea8b 0303 	eor.w	r3, fp, r3
 801648e:	b2db      	uxtb	r3, r3
 8016490:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016494:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8016498:	f10a 0a01 	add.w	sl, sl, #1
 801649c:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 80164a0:	45d6      	cmp	lr, sl
 80164a2:	d95a      	bls.n	801655a <uxr_write_framed_msg+0x192>
 80164a4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80164a8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80164ac:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80164b0:	2901      	cmp	r1, #1
 80164b2:	d8e3      	bhi.n	801647c <uxr_write_framed_msg+0xb4>
 80164b4:	1c51      	adds	r1, r2, #1
 80164b6:	b2c9      	uxtb	r1, r1
 80164b8:	2929      	cmp	r1, #41	@ 0x29
 80164ba:	d830      	bhi.n	801651e <uxr_write_framed_msg+0x156>
 80164bc:	18a1      	adds	r1, r4, r2
 80164be:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 80164c2:	3202      	adds	r2, #2
 80164c4:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80164c8:	f083 0020 	eor.w	r0, r3, #32
 80164cc:	b2d2      	uxtb	r2, r2
 80164ce:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 80164d2:	e7da      	b.n	801648a <uxr_write_framed_msg+0xc2>
 80164d4:	eb04 0e00 	add.w	lr, r4, r0
 80164d8:	f08c 0c20 	eor.w	ip, ip, #32
 80164dc:	1c82      	adds	r2, r0, #2
 80164de:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 80164e2:	b2d2      	uxtb	r2, r2
 80164e4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80164e8:	2d01      	cmp	r5, #1
 80164ea:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 80164ee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80164f2:	d907      	bls.n	8016504 <uxr_write_framed_msg+0x13c>
 80164f4:	4422      	add	r2, r4
 80164f6:	3003      	adds	r0, #3
 80164f8:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 80164fc:	b2c2      	uxtb	r2, r0
 80164fe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8016502:	e7ac      	b.n	801645e <uxr_write_framed_msg+0x96>
 8016504:	18a0      	adds	r0, r4, r2
 8016506:	f081 0120 	eor.w	r1, r1, #32
 801650a:	3202      	adds	r2, #2
 801650c:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8016510:	b2d2      	uxtb	r2, r2
 8016512:	217d      	movs	r1, #125	@ 0x7d
 8016514:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8016518:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801651c:	e79f      	b.n	801645e <uxr_write_framed_msg+0x96>
 801651e:	e9cd ba00 	strd	fp, sl, [sp]
 8016522:	2500      	movs	r5, #0
 8016524:	46e2      	mov	sl, ip
 8016526:	46f3      	mov	fp, lr
 8016528:	e000      	b.n	801652c <uxr_write_framed_msg+0x164>
 801652a:	b190      	cbz	r0, 8016552 <uxr_write_framed_msg+0x18a>
 801652c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8016530:	1b52      	subs	r2, r2, r5
 8016532:	4643      	mov	r3, r8
 8016534:	4421      	add	r1, r4
 8016536:	4638      	mov	r0, r7
 8016538:	47b0      	blx	r6
 801653a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801653e:	4405      	add	r5, r0
 8016540:	4295      	cmp	r5, r2
 8016542:	d3f2      	bcc.n	801652a <uxr_write_framed_msg+0x162>
 8016544:	46d4      	mov	ip, sl
 8016546:	46de      	mov	lr, fp
 8016548:	f8dd a004 	ldr.w	sl, [sp, #4]
 801654c:	f8dd b000 	ldr.w	fp, [sp]
 8016550:	d06f      	beq.n	8016632 <uxr_write_framed_msg+0x26a>
 8016552:	2000      	movs	r0, #0
 8016554:	b005      	add	sp, #20
 8016556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801655a:	46dc      	mov	ip, fp
 801655c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016560:	f8ad c00c 	strh.w	ip, [sp, #12]
 8016564:	46f3      	mov	fp, lr
 8016566:	fa5f fc8c 	uxtb.w	ip, ip
 801656a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 801656e:	2b01      	cmp	r3, #1
 8016570:	f04f 0900 	mov.w	r9, #0
 8016574:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 8016578:	d930      	bls.n	80165dc <uxr_write_framed_msg+0x214>
 801657a:	2a29      	cmp	r2, #41	@ 0x29
 801657c:	d91c      	bls.n	80165b8 <uxr_write_framed_msg+0x1f0>
 801657e:	2500      	movs	r5, #0
 8016580:	e001      	b.n	8016586 <uxr_write_framed_msg+0x1be>
 8016582:	2800      	cmp	r0, #0
 8016584:	d0e5      	beq.n	8016552 <uxr_write_framed_msg+0x18a>
 8016586:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801658a:	1b52      	subs	r2, r2, r5
 801658c:	4643      	mov	r3, r8
 801658e:	4421      	add	r1, r4
 8016590:	4638      	mov	r0, r7
 8016592:	47b0      	blx	r6
 8016594:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8016598:	4405      	add	r5, r0
 801659a:	4295      	cmp	r5, r2
 801659c:	d3f1      	bcc.n	8016582 <uxr_write_framed_msg+0x1ba>
 801659e:	d1d8      	bne.n	8016552 <uxr_write_framed_msg+0x18a>
 80165a0:	f109 0310 	add.w	r3, r9, #16
 80165a4:	446b      	add	r3, sp
 80165a6:	2200      	movs	r2, #0
 80165a8:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 80165ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80165b0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d911      	bls.n	80165dc <uxr_write_framed_msg+0x214>
 80165b8:	18a3      	adds	r3, r4, r2
 80165ba:	3201      	adds	r2, #1
 80165bc:	b2d2      	uxtb	r2, r2
 80165be:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80165c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80165c6:	f1b9 0f00 	cmp.w	r9, #0
 80165ca:	d119      	bne.n	8016600 <uxr_write_framed_msg+0x238>
 80165cc:	f89d c00d 	ldrb.w	ip, [sp, #13]
 80165d0:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	f04f 0901 	mov.w	r9, #1
 80165da:	d8ce      	bhi.n	801657a <uxr_write_framed_msg+0x1b2>
 80165dc:	1c53      	adds	r3, r2, #1
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	2b29      	cmp	r3, #41	@ 0x29
 80165e2:	d8cc      	bhi.n	801657e <uxr_write_framed_msg+0x1b6>
 80165e4:	18a3      	adds	r3, r4, r2
 80165e6:	3202      	adds	r2, #2
 80165e8:	f08c 0c20 	eor.w	ip, ip, #32
 80165ec:	b2d2      	uxtb	r2, r2
 80165ee:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 80165f2:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 80165f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80165fa:	f1b9 0f00 	cmp.w	r9, #0
 80165fe:	d0e5      	beq.n	80165cc <uxr_write_framed_msg+0x204>
 8016600:	2500      	movs	r5, #0
 8016602:	e001      	b.n	8016608 <uxr_write_framed_msg+0x240>
 8016604:	2800      	cmp	r0, #0
 8016606:	d0a4      	beq.n	8016552 <uxr_write_framed_msg+0x18a>
 8016608:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801660c:	1b52      	subs	r2, r2, r5
 801660e:	4643      	mov	r3, r8
 8016610:	4421      	add	r1, r4
 8016612:	4638      	mov	r0, r7
 8016614:	47b0      	blx	r6
 8016616:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801661a:	4405      	add	r5, r0
 801661c:	4295      	cmp	r5, r2
 801661e:	d3f1      	bcc.n	8016604 <uxr_write_framed_msg+0x23c>
 8016620:	d197      	bne.n	8016552 <uxr_write_framed_msg+0x18a>
 8016622:	2300      	movs	r3, #0
 8016624:	fa1f f08b 	uxth.w	r0, fp
 8016628:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801662c:	b005      	add	sp, #20
 801662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016632:	2300      	movs	r3, #0
 8016634:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8016638:	e732      	b.n	80164a0 <uxr_write_framed_msg+0xd8>
 801663a:	44a6      	add	lr, r4
 801663c:	f085 0520 	eor.w	r5, r5, #32
 8016640:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8016644:	4610      	mov	r0, r2
 8016646:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801664a:	464a      	mov	r2, r9
 801664c:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 8016650:	e6e5      	b.n	801641e <uxr_write_framed_msg+0x56>
 8016652:	f08c 0c20 	eor.w	ip, ip, #32
 8016656:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 801665a:	2103      	movs	r1, #3
 801665c:	2004      	movs	r0, #4
 801665e:	f04f 0906 	mov.w	r9, #6
 8016662:	2205      	movs	r2, #5
 8016664:	4686      	mov	lr, r0
 8016666:	460b      	mov	r3, r1
 8016668:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801666c:	e6ca      	b.n	8016404 <uxr_write_framed_msg+0x3c>
 801666e:	f8ad b00c 	strh.w	fp, [sp, #12]
 8016672:	46dc      	mov	ip, fp
 8016674:	e779      	b.n	801656a <uxr_write_framed_msg+0x1a2>
 8016676:	bf00      	nop
 8016678:	08020f2c 	.word	0x08020f2c

0801667c <uxr_framing_read_transport>:
 801667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016680:	4604      	mov	r4, r0
 8016682:	b083      	sub	sp, #12
 8016684:	461f      	mov	r7, r3
 8016686:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801668a:	4689      	mov	r9, r1
 801668c:	4692      	mov	sl, r2
 801668e:	f000 fc5d 	bl	8016f4c <uxr_millis>
 8016692:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016696:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801669a:	42b3      	cmp	r3, r6
 801669c:	4680      	mov	r8, r0
 801669e:	d062      	beq.n	8016766 <uxr_framing_read_transport+0xea>
 80166a0:	d81c      	bhi.n	80166dc <uxr_framing_read_transport+0x60>
 80166a2:	1e75      	subs	r5, r6, #1
 80166a4:	1aed      	subs	r5, r5, r3
 80166a6:	b2ed      	uxtb	r5, r5
 80166a8:	2600      	movs	r6, #0
 80166aa:	455d      	cmp	r5, fp
 80166ac:	d81f      	bhi.n	80166ee <uxr_framing_read_transport+0x72>
 80166ae:	19ab      	adds	r3, r5, r6
 80166b0:	455b      	cmp	r3, fp
 80166b2:	bf84      	itt	hi
 80166b4:	ebab 0b05 	subhi.w	fp, fp, r5
 80166b8:	fa5f f68b 	uxtbhi.w	r6, fp
 80166bc:	b9e5      	cbnz	r5, 80166f8 <uxr_framing_read_transport+0x7c>
 80166be:	f04f 0b00 	mov.w	fp, #0
 80166c2:	f000 fc43 	bl	8016f4c <uxr_millis>
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	eba0 0108 	sub.w	r1, r0, r8
 80166cc:	1a5b      	subs	r3, r3, r1
 80166ce:	4658      	mov	r0, fp
 80166d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166d4:	603b      	str	r3, [r7, #0]
 80166d6:	b003      	add	sp, #12
 80166d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166dc:	2e00      	cmp	r6, #0
 80166de:	d04a      	beq.n	8016776 <uxr_framing_read_transport+0xfa>
 80166e0:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 80166e4:	b2dd      	uxtb	r5, r3
 80166e6:	3e01      	subs	r6, #1
 80166e8:	455d      	cmp	r5, fp
 80166ea:	b2f6      	uxtb	r6, r6
 80166ec:	d9df      	bls.n	80166ae <uxr_framing_read_transport+0x32>
 80166ee:	fa5f f58b 	uxtb.w	r5, fp
 80166f2:	2600      	movs	r6, #0
 80166f4:	2d00      	cmp	r5, #0
 80166f6:	d0e2      	beq.n	80166be <uxr_framing_read_transport+0x42>
 80166f8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80166fc:	3102      	adds	r1, #2
 80166fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	4421      	add	r1, r4
 8016706:	462a      	mov	r2, r5
 8016708:	4650      	mov	r0, sl
 801670a:	47c8      	blx	r9
 801670c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016710:	4a1b      	ldr	r2, [pc, #108]	@ (8016780 <uxr_framing_read_transport+0x104>)
 8016712:	4403      	add	r3, r0
 8016714:	0859      	lsrs	r1, r3, #1
 8016716:	4683      	mov	fp, r0
 8016718:	fba2 0101 	umull	r0, r1, r2, r1
 801671c:	0889      	lsrs	r1, r1, #2
 801671e:	222a      	movs	r2, #42	@ 0x2a
 8016720:	fb02 3111 	mls	r1, r2, r1, r3
 8016724:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8016728:	f1bb 0f00 	cmp.w	fp, #0
 801672c:	d0c7      	beq.n	80166be <uxr_framing_read_transport+0x42>
 801672e:	45ab      	cmp	fp, r5
 8016730:	d1c7      	bne.n	80166c2 <uxr_framing_read_transport+0x46>
 8016732:	2e00      	cmp	r6, #0
 8016734:	d0c5      	beq.n	80166c2 <uxr_framing_read_transport+0x46>
 8016736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016738:	9300      	str	r3, [sp, #0]
 801673a:	3102      	adds	r1, #2
 801673c:	4632      	mov	r2, r6
 801673e:	4421      	add	r1, r4
 8016740:	2300      	movs	r3, #0
 8016742:	4650      	mov	r0, sl
 8016744:	47c8      	blx	r9
 8016746:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801674a:	4a0d      	ldr	r2, [pc, #52]	@ (8016780 <uxr_framing_read_transport+0x104>)
 801674c:	4403      	add	r3, r0
 801674e:	0859      	lsrs	r1, r3, #1
 8016750:	fba2 2101 	umull	r2, r1, r2, r1
 8016754:	0889      	lsrs	r1, r1, #2
 8016756:	222a      	movs	r2, #42	@ 0x2a
 8016758:	fb02 3311 	mls	r3, r2, r1, r3
 801675c:	eb00 0b05 	add.w	fp, r0, r5
 8016760:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016764:	e7ad      	b.n	80166c2 <uxr_framing_read_transport+0x46>
 8016766:	2600      	movs	r6, #0
 8016768:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801676c:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801676e:	d9be      	bls.n	80166ee <uxr_framing_read_transport+0x72>
 8016770:	2529      	movs	r5, #41	@ 0x29
 8016772:	2102      	movs	r1, #2
 8016774:	e7c3      	b.n	80166fe <uxr_framing_read_transport+0x82>
 8016776:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 801677a:	b2dd      	uxtb	r5, r3
 801677c:	e795      	b.n	80166aa <uxr_framing_read_transport+0x2e>
 801677e:	bf00      	nop
 8016780:	30c30c31 	.word	0x30c30c31

08016784 <uxr_read_framed_msg>:
 8016784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016788:	461d      	mov	r5, r3
 801678a:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 801678e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8016792:	b085      	sub	sp, #20
 8016794:	459c      	cmp	ip, r3
 8016796:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 801679a:	4604      	mov	r4, r0
 801679c:	460f      	mov	r7, r1
 801679e:	4616      	mov	r6, r2
 80167a0:	f000 81ae 	beq.w	8016b00 <uxr_read_framed_msg+0x37c>
 80167a4:	2000      	movs	r0, #0
 80167a6:	4639      	mov	r1, r7
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d138      	bne.n	801681e <uxr_read_framed_msg+0x9a>
 80167ac:	468a      	mov	sl, r1
 80167ae:	7823      	ldrb	r3, [r4, #0]
 80167b0:	2b07      	cmp	r3, #7
 80167b2:	d8fd      	bhi.n	80167b0 <uxr_read_framed_msg+0x2c>
 80167b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80167b8:	0116013b 	.word	0x0116013b
 80167bc:	00cd00f0 	.word	0x00cd00f0
 80167c0:	005a00a0 	.word	0x005a00a0
 80167c4:	00080037 	.word	0x00080037
 80167c8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80167cc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80167d0:	4290      	cmp	r0, r2
 80167d2:	f000 8167 	beq.w	8016aa4 <uxr_read_framed_msg+0x320>
 80167d6:	18a3      	adds	r3, r4, r2
 80167d8:	1c57      	adds	r7, r2, #1
 80167da:	49c7      	ldr	r1, [pc, #796]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 80167dc:	f893 c002 	ldrb.w	ip, [r3, #2]
 80167e0:	087b      	lsrs	r3, r7, #1
 80167e2:	fba1 8303 	umull	r8, r3, r1, r3
 80167e6:	089b      	lsrs	r3, r3, #2
 80167e8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80167ec:	fb08 7313 	mls	r3, r8, r3, r7
 80167f0:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80167f4:	b2df      	uxtb	r7, r3
 80167f6:	f000 81b2 	beq.w	8016b5e <uxr_read_framed_msg+0x3da>
 80167fa:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80167fe:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8016802:	f000 8220 	beq.w	8016c46 <uxr_read_framed_msg+0x4c2>
 8016806:	4661      	mov	r1, ip
 8016808:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801680a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801680c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016810:	b29b      	uxth	r3, r3
 8016812:	2100      	movs	r1, #0
 8016814:	429a      	cmp	r2, r3
 8016816:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8016818:	7021      	strb	r1, [r4, #0]
 801681a:	f000 8198 	beq.w	8016b4e <uxr_read_framed_msg+0x3ca>
 801681e:	2000      	movs	r0, #0
 8016820:	b005      	add	sp, #20
 8016822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016826:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801682a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801682e:	4297      	cmp	r7, r2
 8016830:	f000 8148 	beq.w	8016ac4 <uxr_read_framed_msg+0x340>
 8016834:	18a3      	adds	r3, r4, r2
 8016836:	f102 0c01 	add.w	ip, r2, #1
 801683a:	49af      	ldr	r1, [pc, #700]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 801683c:	7898      	ldrb	r0, [r3, #2]
 801683e:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016842:	fba1 8303 	umull	r8, r3, r1, r3
 8016846:	089b      	lsrs	r3, r3, #2
 8016848:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801684c:	fb08 c313 	mls	r3, r8, r3, ip
 8016850:	287d      	cmp	r0, #125	@ 0x7d
 8016852:	fa5f fc83 	uxtb.w	ip, r3
 8016856:	f000 8194 	beq.w	8016b82 <uxr_read_framed_msg+0x3fe>
 801685a:	287e      	cmp	r0, #126	@ 0x7e
 801685c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016860:	f000 8200 	beq.w	8016c64 <uxr_read_framed_msg+0x4e0>
 8016864:	2307      	movs	r3, #7
 8016866:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8016868:	7023      	strb	r3, [r4, #0]
 801686a:	e7a0      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 801686c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801686e:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8016870:	429f      	cmp	r7, r3
 8016872:	f240 8164 	bls.w	8016b3e <uxr_read_framed_msg+0x3ba>
 8016876:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8016af8 <uxr_read_framed_msg+0x374>
 801687a:	f8cd a00c 	str.w	sl, [sp, #12]
 801687e:	212a      	movs	r1, #42	@ 0x2a
 8016880:	e01f      	b.n	80168c2 <uxr_read_framed_msg+0x13e>
 8016882:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016886:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801688a:	f000 80ea 	beq.w	8016a62 <uxr_read_framed_msg+0x2de>
 801688e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016892:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016896:	f000 8142 	beq.w	8016b1e <uxr_read_framed_msg+0x39a>
 801689a:	f805 e003 	strb.w	lr, [r5, r3]
 801689e:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 80168a0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80168a2:	4f96      	ldr	r7, [pc, #600]	@ (8016afc <uxr_read_framed_msg+0x378>)
 80168a4:	ea80 020e 	eor.w	r2, r0, lr
 80168a8:	b2d2      	uxtb	r2, r2
 80168aa:	3301      	adds	r3, #1
 80168ac:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80168b0:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80168b2:	b29b      	uxth	r3, r3
 80168b4:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80168b8:	42bb      	cmp	r3, r7
 80168ba:	8663      	strh	r3, [r4, #50]	@ 0x32
 80168bc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80168be:	f080 80e7 	bcs.w	8016a90 <uxr_read_framed_msg+0x30c>
 80168c2:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80168c6:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80168ca:	f100 0c01 	add.w	ip, r0, #1
 80168ce:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 80168d2:	fba9 e20e 	umull	lr, r2, r9, lr
 80168d6:	0892      	lsrs	r2, r2, #2
 80168d8:	fb01 c212 	mls	r2, r1, r2, ip
 80168dc:	4580      	cmp	r8, r0
 80168de:	eb04 0a00 	add.w	sl, r4, r0
 80168e2:	fa5f fc82 	uxtb.w	ip, r2
 80168e6:	d1cc      	bne.n	8016882 <uxr_read_framed_msg+0xfe>
 80168e8:	42bb      	cmp	r3, r7
 80168ea:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80168ee:	f040 8128 	bne.w	8016b42 <uxr_read_framed_msg+0x3be>
 80168f2:	2306      	movs	r3, #6
 80168f4:	7023      	strb	r3, [r4, #0]
 80168f6:	e75a      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 80168f8:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80168fc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016900:	4297      	cmp	r7, r2
 8016902:	f000 80cf 	beq.w	8016aa4 <uxr_read_framed_msg+0x320>
 8016906:	18a3      	adds	r3, r4, r2
 8016908:	f102 0c01 	add.w	ip, r2, #1
 801690c:	497a      	ldr	r1, [pc, #488]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 801690e:	7898      	ldrb	r0, [r3, #2]
 8016910:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016914:	fba1 8303 	umull	r8, r3, r1, r3
 8016918:	089b      	lsrs	r3, r3, #2
 801691a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 801691e:	fb08 c313 	mls	r3, r8, r3, ip
 8016922:	287d      	cmp	r0, #125	@ 0x7d
 8016924:	fa5f fc83 	uxtb.w	ip, r3
 8016928:	f000 813d 	beq.w	8016ba6 <uxr_read_framed_msg+0x422>
 801692c:	287e      	cmp	r0, #126	@ 0x7e
 801692e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016932:	f000 8188 	beq.w	8016c46 <uxr_read_framed_msg+0x4c2>
 8016936:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8016938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801693a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 801693e:	b29b      	uxth	r3, r3
 8016940:	2200      	movs	r2, #0
 8016942:	428b      	cmp	r3, r1
 8016944:	8623      	strh	r3, [r4, #48]	@ 0x30
 8016946:	8662      	strh	r2, [r4, #50]	@ 0x32
 8016948:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801694a:	f240 80f5 	bls.w	8016b38 <uxr_read_framed_msg+0x3b4>
 801694e:	7022      	strb	r2, [r4, #0]
 8016950:	e765      	b.n	801681e <uxr_read_framed_msg+0x9a>
 8016952:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8016956:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801695a:	4297      	cmp	r7, r2
 801695c:	f000 80b2 	beq.w	8016ac4 <uxr_read_framed_msg+0x340>
 8016960:	18a3      	adds	r3, r4, r2
 8016962:	f102 0c01 	add.w	ip, r2, #1
 8016966:	4964      	ldr	r1, [pc, #400]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 8016968:	7898      	ldrb	r0, [r3, #2]
 801696a:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801696e:	fba1 8303 	umull	r8, r3, r1, r3
 8016972:	089b      	lsrs	r3, r3, #2
 8016974:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016978:	fb08 c313 	mls	r3, r8, r3, ip
 801697c:	287d      	cmp	r0, #125	@ 0x7d
 801697e:	fa5f fc83 	uxtb.w	ip, r3
 8016982:	f000 813b 	beq.w	8016bfc <uxr_read_framed_msg+0x478>
 8016986:	287e      	cmp	r0, #126	@ 0x7e
 8016988:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801698c:	f000 816a 	beq.w	8016c64 <uxr_read_framed_msg+0x4e0>
 8016990:	2304      	movs	r3, #4
 8016992:	8620      	strh	r0, [r4, #48]	@ 0x30
 8016994:	7023      	strb	r3, [r4, #0]
 8016996:	e70a      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 8016998:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801699c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80169a0:	4297      	cmp	r7, r2
 80169a2:	f000 80c4 	beq.w	8016b2e <uxr_read_framed_msg+0x3aa>
 80169a6:	18a3      	adds	r3, r4, r2
 80169a8:	f102 0c01 	add.w	ip, r2, #1
 80169ac:	4952      	ldr	r1, [pc, #328]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 80169ae:	7898      	ldrb	r0, [r3, #2]
 80169b0:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80169b4:	fba1 8303 	umull	r8, r3, r1, r3
 80169b8:	089b      	lsrs	r3, r3, #2
 80169ba:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80169be:	fb08 c313 	mls	r3, r8, r3, ip
 80169c2:	287d      	cmp	r0, #125	@ 0x7d
 80169c4:	fa5f fc83 	uxtb.w	ip, r3
 80169c8:	f000 812b 	beq.w	8016c22 <uxr_read_framed_msg+0x49e>
 80169cc:	287e      	cmp	r0, #126	@ 0x7e
 80169ce:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80169d2:	f000 8155 	beq.w	8016c80 <uxr_read_framed_msg+0x4fc>
 80169d6:	7863      	ldrb	r3, [r4, #1]
 80169d8:	4283      	cmp	r3, r0
 80169da:	bf0c      	ite	eq
 80169dc:	2303      	moveq	r3, #3
 80169de:	2300      	movne	r3, #0
 80169e0:	7023      	strb	r3, [r4, #0]
 80169e2:	e6e4      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 80169e4:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80169e8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80169ec:	2300      	movs	r3, #0
 80169ee:	4290      	cmp	r0, r2
 80169f0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 80169f4:	d06b      	beq.n	8016ace <uxr_read_framed_msg+0x34a>
 80169f6:	18a3      	adds	r3, r4, r2
 80169f8:	f102 0c01 	add.w	ip, r2, #1
 80169fc:	493e      	ldr	r1, [pc, #248]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 80169fe:	789f      	ldrb	r7, [r3, #2]
 8016a00:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8016a04:	fba1 8303 	umull	r8, r3, r1, r3
 8016a08:	089b      	lsrs	r3, r3, #2
 8016a0a:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8016a0e:	fb08 c313 	mls	r3, r8, r3, ip
 8016a12:	2f7d      	cmp	r7, #125	@ 0x7d
 8016a14:	fa5f fc83 	uxtb.w	ip, r3
 8016a18:	f000 80d8 	beq.w	8016bcc <uxr_read_framed_msg+0x448>
 8016a1c:	2f7e      	cmp	r7, #126	@ 0x7e
 8016a1e:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8016a22:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 8016a26:	d052      	beq.n	8016ace <uxr_read_framed_msg+0x34a>
 8016a28:	2302      	movs	r3, #2
 8016a2a:	7023      	strb	r3, [r4, #0]
 8016a2c:	e6bf      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 8016a2e:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8016a32:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8016a36:	4930      	ldr	r1, [pc, #192]	@ (8016af8 <uxr_read_framed_msg+0x374>)
 8016a38:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8016a3c:	e004      	b.n	8016a48 <uxr_read_framed_msg+0x2c4>
 8016a3e:	78bb      	ldrb	r3, [r7, #2]
 8016a40:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016a44:	2b7e      	cmp	r3, #126	@ 0x7e
 8016a46:	d02a      	beq.n	8016a9e <uxr_read_framed_msg+0x31a>
 8016a48:	1c50      	adds	r0, r2, #1
 8016a4a:	0843      	lsrs	r3, r0, #1
 8016a4c:	fba1 e303 	umull	lr, r3, r1, r3
 8016a50:	089b      	lsrs	r3, r3, #2
 8016a52:	fb0c 0013 	mls	r0, ip, r3, r0
 8016a56:	4590      	cmp	r8, r2
 8016a58:	eb04 0702 	add.w	r7, r4, r2
 8016a5c:	b2c2      	uxtb	r2, r0
 8016a5e:	d1ee      	bne.n	8016a3e <uxr_read_framed_msg+0x2ba>
 8016a60:	e6dd      	b.n	801681e <uxr_read_framed_msg+0x9a>
 8016a62:	3002      	adds	r0, #2
 8016a64:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8016a68:	eb04 0a02 	add.w	sl, r4, r2
 8016a6c:	fba9 e20e 	umull	lr, r2, r9, lr
 8016a70:	0892      	lsrs	r2, r2, #2
 8016a72:	45e0      	cmp	r8, ip
 8016a74:	fb01 0012 	mls	r0, r1, r2, r0
 8016a78:	f43f af36 	beq.w	80168e8 <uxr_read_framed_msg+0x164>
 8016a7c:	f89a e002 	ldrb.w	lr, [sl, #2]
 8016a80:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8016a84:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016a88:	d049      	beq.n	8016b1e <uxr_read_framed_msg+0x39a>
 8016a8a:	f08e 0e20 	eor.w	lr, lr, #32
 8016a8e:	e704      	b.n	801689a <uxr_read_framed_msg+0x116>
 8016a90:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016a94:	f43f af2d 	beq.w	80168f2 <uxr_read_framed_msg+0x16e>
 8016a98:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8016a9c:	d151      	bne.n	8016b42 <uxr_read_framed_msg+0x3be>
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	7023      	strb	r3, [r4, #0]
 8016aa2:	e684      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 8016aa4:	4651      	mov	r1, sl
 8016aa6:	f8cd b000 	str.w	fp, [sp]
 8016aaa:	2301      	movs	r3, #1
 8016aac:	9301      	str	r3, [sp, #4]
 8016aae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ab0:	9103      	str	r1, [sp, #12]
 8016ab2:	4632      	mov	r2, r6
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	f7ff fde1 	bl	801667c <uxr_framing_read_transport>
 8016aba:	fab0 f080 	clz	r0, r0
 8016abe:	9903      	ldr	r1, [sp, #12]
 8016ac0:	0940      	lsrs	r0, r0, #5
 8016ac2:	e671      	b.n	80167a8 <uxr_read_framed_msg+0x24>
 8016ac4:	4651      	mov	r1, sl
 8016ac6:	f8cd b000 	str.w	fp, [sp]
 8016aca:	2302      	movs	r3, #2
 8016acc:	e7ee      	b.n	8016aac <uxr_read_framed_msg+0x328>
 8016ace:	2304      	movs	r3, #4
 8016ad0:	9301      	str	r3, [sp, #4]
 8016ad2:	f8cd b000 	str.w	fp, [sp]
 8016ad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ad8:	4632      	mov	r2, r6
 8016ada:	4651      	mov	r1, sl
 8016adc:	4620      	mov	r0, r4
 8016ade:	f7ff fdcd 	bl	801667c <uxr_framing_read_transport>
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	f47f ae63 	bne.w	80167ae <uxr_read_framed_msg+0x2a>
 8016ae8:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8016aec:	387e      	subs	r0, #126	@ 0x7e
 8016aee:	4651      	mov	r1, sl
 8016af0:	bf18      	it	ne
 8016af2:	2001      	movne	r0, #1
 8016af4:	e658      	b.n	80167a8 <uxr_read_framed_msg+0x24>
 8016af6:	bf00      	nop
 8016af8:	30c30c31 	.word	0x30c30c31
 8016afc:	08020f2c 	.word	0x08020f2c
 8016b00:	2305      	movs	r3, #5
 8016b02:	9301      	str	r3, [sp, #4]
 8016b04:	f8cd b000 	str.w	fp, [sp]
 8016b08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b0a:	f7ff fdb7 	bl	801667c <uxr_framing_read_transport>
 8016b0e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8016b12:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8016b16:	429a      	cmp	r2, r3
 8016b18:	f43f ae81 	beq.w	801681e <uxr_read_framed_msg+0x9a>
 8016b1c:	e642      	b.n	80167a4 <uxr_read_framed_msg+0x20>
 8016b1e:	42bb      	cmp	r3, r7
 8016b20:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8016b24:	f43f aee5 	beq.w	80168f2 <uxr_read_framed_msg+0x16e>
 8016b28:	2301      	movs	r3, #1
 8016b2a:	7023      	strb	r3, [r4, #0]
 8016b2c:	e63f      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 8016b2e:	4651      	mov	r1, sl
 8016b30:	f8cd b000 	str.w	fp, [sp]
 8016b34:	2303      	movs	r3, #3
 8016b36:	e7b9      	b.n	8016aac <uxr_read_framed_msg+0x328>
 8016b38:	2305      	movs	r3, #5
 8016b3a:	7023      	strb	r3, [r4, #0]
 8016b3c:	e637      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 8016b3e:	f43f aed8 	beq.w	80168f2 <uxr_read_framed_msg+0x16e>
 8016b42:	1afb      	subs	r3, r7, r3
 8016b44:	3302      	adds	r3, #2
 8016b46:	e9cd b300 	strd	fp, r3, [sp]
 8016b4a:	4651      	mov	r1, sl
 8016b4c:	e7af      	b.n	8016aae <uxr_read_framed_msg+0x32a>
 8016b4e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b50:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8016b54:	7013      	strb	r3, [r2, #0]
 8016b56:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8016b58:	b005      	add	sp, #20
 8016b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5e:	4287      	cmp	r7, r0
 8016b60:	d0a0      	beq.n	8016aa4 <uxr_read_framed_msg+0x320>
 8016b62:	4423      	add	r3, r4
 8016b64:	3202      	adds	r2, #2
 8016b66:	7898      	ldrb	r0, [r3, #2]
 8016b68:	0853      	lsrs	r3, r2, #1
 8016b6a:	fba1 e303 	umull	lr, r3, r1, r3
 8016b6e:	089b      	lsrs	r3, r3, #2
 8016b70:	fb08 2213 	mls	r2, r8, r3, r2
 8016b74:	287e      	cmp	r0, #126	@ 0x7e
 8016b76:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016b7a:	d064      	beq.n	8016c46 <uxr_read_framed_msg+0x4c2>
 8016b7c:	f080 0120 	eor.w	r1, r0, #32
 8016b80:	e642      	b.n	8016808 <uxr_read_framed_msg+0x84>
 8016b82:	45bc      	cmp	ip, r7
 8016b84:	d09e      	beq.n	8016ac4 <uxr_read_framed_msg+0x340>
 8016b86:	4423      	add	r3, r4
 8016b88:	3202      	adds	r2, #2
 8016b8a:	7898      	ldrb	r0, [r3, #2]
 8016b8c:	0853      	lsrs	r3, r2, #1
 8016b8e:	fba1 e303 	umull	lr, r3, r1, r3
 8016b92:	089b      	lsrs	r3, r3, #2
 8016b94:	fb08 2213 	mls	r2, r8, r3, r2
 8016b98:	287e      	cmp	r0, #126	@ 0x7e
 8016b9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016b9e:	d061      	beq.n	8016c64 <uxr_read_framed_msg+0x4e0>
 8016ba0:	f080 0020 	eor.w	r0, r0, #32
 8016ba4:	e65e      	b.n	8016864 <uxr_read_framed_msg+0xe0>
 8016ba6:	4567      	cmp	r7, ip
 8016ba8:	f43f af7c 	beq.w	8016aa4 <uxr_read_framed_msg+0x320>
 8016bac:	4423      	add	r3, r4
 8016bae:	3202      	adds	r2, #2
 8016bb0:	7898      	ldrb	r0, [r3, #2]
 8016bb2:	0853      	lsrs	r3, r2, #1
 8016bb4:	fba1 e303 	umull	lr, r3, r1, r3
 8016bb8:	089b      	lsrs	r3, r3, #2
 8016bba:	fb08 2213 	mls	r2, r8, r3, r2
 8016bbe:	287e      	cmp	r0, #126	@ 0x7e
 8016bc0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016bc4:	d03f      	beq.n	8016c46 <uxr_read_framed_msg+0x4c2>
 8016bc6:	f080 0020 	eor.w	r0, r0, #32
 8016bca:	e6b4      	b.n	8016936 <uxr_read_framed_msg+0x1b2>
 8016bcc:	4560      	cmp	r0, ip
 8016bce:	f43f af7e 	beq.w	8016ace <uxr_read_framed_msg+0x34a>
 8016bd2:	4423      	add	r3, r4
 8016bd4:	3202      	adds	r2, #2
 8016bd6:	7898      	ldrb	r0, [r3, #2]
 8016bd8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016bdc:	0853      	lsrs	r3, r2, #1
 8016bde:	fba1 e303 	umull	lr, r3, r1, r3
 8016be2:	089b      	lsrs	r3, r3, #2
 8016be4:	fb08 2213 	mls	r2, r8, r3, r2
 8016be8:	287e      	cmp	r0, #126	@ 0x7e
 8016bea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016bee:	f43f af6e 	beq.w	8016ace <uxr_read_framed_msg+0x34a>
 8016bf2:	f080 0020 	eor.w	r0, r0, #32
 8016bf6:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8016bfa:	e715      	b.n	8016a28 <uxr_read_framed_msg+0x2a4>
 8016bfc:	4567      	cmp	r7, ip
 8016bfe:	f43f af61 	beq.w	8016ac4 <uxr_read_framed_msg+0x340>
 8016c02:	4423      	add	r3, r4
 8016c04:	3202      	adds	r2, #2
 8016c06:	7898      	ldrb	r0, [r3, #2]
 8016c08:	0853      	lsrs	r3, r2, #1
 8016c0a:	fba1 e303 	umull	lr, r3, r1, r3
 8016c0e:	089b      	lsrs	r3, r3, #2
 8016c10:	fb08 2213 	mls	r2, r8, r3, r2
 8016c14:	287e      	cmp	r0, #126	@ 0x7e
 8016c16:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016c1a:	d023      	beq.n	8016c64 <uxr_read_framed_msg+0x4e0>
 8016c1c:	f080 0020 	eor.w	r0, r0, #32
 8016c20:	e6b6      	b.n	8016990 <uxr_read_framed_msg+0x20c>
 8016c22:	45bc      	cmp	ip, r7
 8016c24:	d083      	beq.n	8016b2e <uxr_read_framed_msg+0x3aa>
 8016c26:	4423      	add	r3, r4
 8016c28:	3202      	adds	r2, #2
 8016c2a:	7898      	ldrb	r0, [r3, #2]
 8016c2c:	0853      	lsrs	r3, r2, #1
 8016c2e:	fba1 e303 	umull	lr, r3, r1, r3
 8016c32:	089b      	lsrs	r3, r3, #2
 8016c34:	fb08 2213 	mls	r2, r8, r3, r2
 8016c38:	287e      	cmp	r0, #126	@ 0x7e
 8016c3a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8016c3e:	d01f      	beq.n	8016c80 <uxr_read_framed_msg+0x4fc>
 8016c40:	f080 0020 	eor.w	r0, r0, #32
 8016c44:	e6c7      	b.n	80169d6 <uxr_read_framed_msg+0x252>
 8016c46:	2701      	movs	r7, #1
 8016c48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016c4a:	f8cd b000 	str.w	fp, [sp]
 8016c4e:	9701      	str	r7, [sp, #4]
 8016c50:	4632      	mov	r2, r6
 8016c52:	4651      	mov	r1, sl
 8016c54:	4620      	mov	r0, r4
 8016c56:	f7ff fd11 	bl	801667c <uxr_framing_read_transport>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	f47f ada7 	bne.w	80167ae <uxr_read_framed_msg+0x2a>
 8016c60:	7027      	strb	r7, [r4, #0]
 8016c62:	e5a4      	b.n	80167ae <uxr_read_framed_msg+0x2a>
 8016c64:	f8cd b000 	str.w	fp, [sp]
 8016c68:	2302      	movs	r3, #2
 8016c6a:	9301      	str	r3, [sp, #4]
 8016c6c:	4632      	mov	r2, r6
 8016c6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016c70:	4651      	mov	r1, sl
 8016c72:	4620      	mov	r0, r4
 8016c74:	f7ff fd02 	bl	801667c <uxr_framing_read_transport>
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	f47f ad98 	bne.w	80167ae <uxr_read_framed_msg+0x2a>
 8016c7e:	e70e      	b.n	8016a9e <uxr_read_framed_msg+0x31a>
 8016c80:	f8cd b000 	str.w	fp, [sp]
 8016c84:	2303      	movs	r3, #3
 8016c86:	e7f0      	b.n	8016c6a <uxr_read_framed_msg+0x4e6>

08016c88 <uxr_stream_id>:
 8016c88:	2901      	cmp	r1, #1
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	d011      	beq.n	8016cb4 <uxr_stream_id+0x2c>
 8016c90:	2902      	cmp	r1, #2
 8016c92:	f04f 0c00 	mov.w	ip, #0
 8016c96:	d00a      	beq.n	8016cae <uxr_stream_id+0x26>
 8016c98:	2000      	movs	r0, #0
 8016c9a:	f36c 0007 	bfi	r0, ip, #0, #8
 8016c9e:	f363 200f 	bfi	r0, r3, #8, #8
 8016ca2:	f361 4017 	bfi	r0, r1, #16, #8
 8016ca6:	f362 601f 	bfi	r0, r2, #24, #8
 8016caa:	b002      	add	sp, #8
 8016cac:	4770      	bx	lr
 8016cae:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8016cb2:	e7f1      	b.n	8016c98 <uxr_stream_id+0x10>
 8016cb4:	f100 0c01 	add.w	ip, r0, #1
 8016cb8:	fa5f fc8c 	uxtb.w	ip, ip
 8016cbc:	e7ec      	b.n	8016c98 <uxr_stream_id+0x10>
 8016cbe:	bf00      	nop

08016cc0 <uxr_stream_id_from_raw>:
 8016cc0:	b082      	sub	sp, #8
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	b130      	cbz	r0, 8016cd4 <uxr_stream_id_from_raw+0x14>
 8016cc6:	0602      	lsls	r2, r0, #24
 8016cc8:	d411      	bmi.n	8016cee <uxr_stream_id_from_raw+0x2e>
 8016cca:	1e42      	subs	r2, r0, #1
 8016ccc:	b2d2      	uxtb	r2, r2
 8016cce:	f04f 0c01 	mov.w	ip, #1
 8016cd2:	e001      	b.n	8016cd8 <uxr_stream_id_from_raw+0x18>
 8016cd4:	4684      	mov	ip, r0
 8016cd6:	4602      	mov	r2, r0
 8016cd8:	2000      	movs	r0, #0
 8016cda:	f363 0007 	bfi	r0, r3, #0, #8
 8016cde:	f362 200f 	bfi	r0, r2, #8, #8
 8016ce2:	f36c 4017 	bfi	r0, ip, #16, #8
 8016ce6:	f361 601f 	bfi	r0, r1, #24, #8
 8016cea:	b002      	add	sp, #8
 8016cec:	4770      	bx	lr
 8016cee:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8016cf2:	f04f 0c02 	mov.w	ip, #2
 8016cf6:	e7ef      	b.n	8016cd8 <uxr_stream_id_from_raw+0x18>

08016cf8 <uxr_init_stream_storage>:
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	7403      	strb	r3, [r0, #16]
 8016cfc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8016d00:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8016d04:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop

08016d0c <uxr_reset_stream_storage>:
 8016d0c:	b570      	push	{r4, r5, r6, lr}
 8016d0e:	7c03      	ldrb	r3, [r0, #16]
 8016d10:	4604      	mov	r4, r0
 8016d12:	b153      	cbz	r3, 8016d2a <uxr_reset_stream_storage+0x1e>
 8016d14:	4606      	mov	r6, r0
 8016d16:	2500      	movs	r5, #0
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f005 fb63 	bl	801c3e4 <uxr_reset_output_best_effort_stream>
 8016d1e:	7c23      	ldrb	r3, [r4, #16]
 8016d20:	3501      	adds	r5, #1
 8016d22:	42ab      	cmp	r3, r5
 8016d24:	f106 0610 	add.w	r6, r6, #16
 8016d28:	d8f6      	bhi.n	8016d18 <uxr_reset_stream_storage+0xc>
 8016d2a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016d2e:	b163      	cbz	r3, 8016d4a <uxr_reset_stream_storage+0x3e>
 8016d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016d34:	2500      	movs	r5, #0
 8016d36:	4630      	mov	r0, r6
 8016d38:	f005 f964 	bl	801c004 <uxr_reset_input_best_effort_stream>
 8016d3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016d40:	3501      	adds	r5, #1
 8016d42:	42ab      	cmp	r3, r5
 8016d44:	f106 0602 	add.w	r6, r6, #2
 8016d48:	d8f5      	bhi.n	8016d36 <uxr_reset_stream_storage+0x2a>
 8016d4a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8016d4e:	b163      	cbz	r3, 8016d6a <uxr_reset_stream_storage+0x5e>
 8016d50:	f104 0618 	add.w	r6, r4, #24
 8016d54:	2500      	movs	r5, #0
 8016d56:	4630      	mov	r0, r6
 8016d58:	f005 fbee 	bl	801c538 <uxr_reset_output_reliable_stream>
 8016d5c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8016d60:	3501      	adds	r5, #1
 8016d62:	42ab      	cmp	r3, r5
 8016d64:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8016d68:	d8f5      	bhi.n	8016d56 <uxr_reset_stream_storage+0x4a>
 8016d6a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8016d6e:	b163      	cbz	r3, 8016d8a <uxr_reset_stream_storage+0x7e>
 8016d70:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8016d74:	2500      	movs	r5, #0
 8016d76:	4630      	mov	r0, r6
 8016d78:	f005 f9b4 	bl	801c0e4 <uxr_reset_input_reliable_stream>
 8016d7c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8016d80:	3501      	adds	r5, #1
 8016d82:	42ab      	cmp	r3, r5
 8016d84:	f106 0618 	add.w	r6, r6, #24
 8016d88:	d8f5      	bhi.n	8016d76 <uxr_reset_stream_storage+0x6a>
 8016d8a:	bd70      	pop	{r4, r5, r6, pc}

08016d8c <uxr_add_output_best_effort_buffer>:
 8016d8c:	b510      	push	{r4, lr}
 8016d8e:	7c04      	ldrb	r4, [r0, #16]
 8016d90:	f104 0c01 	add.w	ip, r4, #1
 8016d94:	b082      	sub	sp, #8
 8016d96:	f880 c010 	strb.w	ip, [r0, #16]
 8016d9a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8016d9e:	f005 fb17 	bl	801c3d0 <uxr_init_output_best_effort_stream>
 8016da2:	2201      	movs	r2, #1
 8016da4:	4611      	mov	r1, r2
 8016da6:	4620      	mov	r0, r4
 8016da8:	b002      	add	sp, #8
 8016daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dae:	f7ff bf6b 	b.w	8016c88 <uxr_stream_id>
 8016db2:	bf00      	nop

08016db4 <uxr_add_output_reliable_buffer>:
 8016db4:	b510      	push	{r4, lr}
 8016db6:	b084      	sub	sp, #16
 8016db8:	4684      	mov	ip, r0
 8016dba:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016dbe:	9000      	str	r0, [sp, #0]
 8016dc0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8016dc4:	2028      	movs	r0, #40	@ 0x28
 8016dc6:	fb00 c004 	mla	r0, r0, r4, ip
 8016dca:	f104 0e01 	add.w	lr, r4, #1
 8016dce:	3018      	adds	r0, #24
 8016dd0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8016dd4:	f005 fb78 	bl	801c4c8 <uxr_init_output_reliable_stream>
 8016dd8:	2201      	movs	r2, #1
 8016dda:	2102      	movs	r1, #2
 8016ddc:	4620      	mov	r0, r4
 8016dde:	b004      	add	sp, #16
 8016de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016de4:	f7ff bf50 	b.w	8016c88 <uxr_stream_id>

08016de8 <uxr_add_input_best_effort_buffer>:
 8016de8:	b510      	push	{r4, lr}
 8016dea:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8016dee:	1c62      	adds	r2, r4, #1
 8016df0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8016df4:	b082      	sub	sp, #8
 8016df6:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8016dfa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016dfe:	f005 f8fd 	bl	801bffc <uxr_init_input_best_effort_stream>
 8016e02:	2200      	movs	r2, #0
 8016e04:	2101      	movs	r1, #1
 8016e06:	4620      	mov	r0, r4
 8016e08:	b002      	add	sp, #8
 8016e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e0e:	f7ff bf3b 	b.w	8016c88 <uxr_stream_id>
 8016e12:	bf00      	nop

08016e14 <uxr_add_input_reliable_buffer>:
 8016e14:	b510      	push	{r4, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	4684      	mov	ip, r0
 8016e1a:	9806      	ldr	r0, [sp, #24]
 8016e1c:	9000      	str	r0, [sp, #0]
 8016e1e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8016e22:	2018      	movs	r0, #24
 8016e24:	fb00 c004 	mla	r0, r0, r4, ip
 8016e28:	f104 0e01 	add.w	lr, r4, #1
 8016e2c:	3048      	adds	r0, #72	@ 0x48
 8016e2e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8016e32:	f005 f92b 	bl	801c08c <uxr_init_input_reliable_stream>
 8016e36:	2200      	movs	r2, #0
 8016e38:	2102      	movs	r1, #2
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	b004      	add	sp, #16
 8016e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e42:	f7ff bf21 	b.w	8016c88 <uxr_stream_id>
 8016e46:	bf00      	nop

08016e48 <uxr_get_output_best_effort_stream>:
 8016e48:	7c03      	ldrb	r3, [r0, #16]
 8016e4a:	428b      	cmp	r3, r1
 8016e4c:	bf8c      	ite	hi
 8016e4e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8016e52:	2000      	movls	r0, #0
 8016e54:	4770      	bx	lr
 8016e56:	bf00      	nop

08016e58 <uxr_get_output_reliable_stream>:
 8016e58:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8016e5c:	428b      	cmp	r3, r1
 8016e5e:	bf83      	ittte	hi
 8016e60:	2328      	movhi	r3, #40	@ 0x28
 8016e62:	fb03 0001 	mlahi	r0, r3, r1, r0
 8016e66:	3018      	addhi	r0, #24
 8016e68:	2000      	movls	r0, #0
 8016e6a:	4770      	bx	lr

08016e6c <uxr_get_input_best_effort_stream>:
 8016e6c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8016e70:	428b      	cmp	r3, r1
 8016e72:	bf86      	itte	hi
 8016e74:	3121      	addhi	r1, #33	@ 0x21
 8016e76:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8016e7a:	2000      	movls	r0, #0
 8016e7c:	4770      	bx	lr
 8016e7e:	bf00      	nop

08016e80 <uxr_get_input_reliable_stream>:
 8016e80:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8016e84:	428b      	cmp	r3, r1
 8016e86:	bf83      	ittte	hi
 8016e88:	2318      	movhi	r3, #24
 8016e8a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8016e8e:	3048      	addhi	r0, #72	@ 0x48
 8016e90:	2000      	movls	r0, #0
 8016e92:	4770      	bx	lr

08016e94 <uxr_output_streams_confirmed>:
 8016e94:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8016e98:	b183      	cbz	r3, 8016ebc <uxr_output_streams_confirmed+0x28>
 8016e9a:	b570      	push	{r4, r5, r6, lr}
 8016e9c:	4606      	mov	r6, r0
 8016e9e:	f100 0518 	add.w	r5, r0, #24
 8016ea2:	2400      	movs	r4, #0
 8016ea4:	e001      	b.n	8016eaa <uxr_output_streams_confirmed+0x16>
 8016ea6:	3528      	adds	r5, #40	@ 0x28
 8016ea8:	b138      	cbz	r0, 8016eba <uxr_output_streams_confirmed+0x26>
 8016eaa:	4628      	mov	r0, r5
 8016eac:	f005 fdac 	bl	801ca08 <uxr_is_output_up_to_date>
 8016eb0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8016eb4:	3401      	adds	r4, #1
 8016eb6:	42a3      	cmp	r3, r4
 8016eb8:	d8f5      	bhi.n	8016ea6 <uxr_output_streams_confirmed+0x12>
 8016eba:	bd70      	pop	{r4, r5, r6, pc}
 8016ebc:	2001      	movs	r0, #1
 8016ebe:	4770      	bx	lr

08016ec0 <uxr_buffer_submessage_header>:
 8016ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ec2:	4604      	mov	r4, r0
 8016ec4:	460e      	mov	r6, r1
 8016ec6:	2104      	movs	r1, #4
 8016ec8:	4615      	mov	r5, r2
 8016eca:	461f      	mov	r7, r3
 8016ecc:	f7f7 fbac 	bl	800e628 <ucdr_align_to>
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	7523      	strb	r3, [r4, #20]
 8016ed4:	f047 0201 	orr.w	r2, r7, #1
 8016ed8:	462b      	mov	r3, r5
 8016eda:	4631      	mov	r1, r6
 8016edc:	4620      	mov	r0, r4
 8016ede:	f000 fa2b 	bl	8017338 <uxr_serialize_submessage_header>
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f7f7 fbb6 	bl	800e654 <ucdr_buffer_remaining>
 8016ee8:	42a8      	cmp	r0, r5
 8016eea:	bf34      	ite	cc
 8016eec:	2000      	movcc	r0, #0
 8016eee:	2001      	movcs	r0, #1
 8016ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ef2:	bf00      	nop

08016ef4 <uxr_read_submessage_header>:
 8016ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef8:	4604      	mov	r4, r0
 8016efa:	460d      	mov	r5, r1
 8016efc:	2104      	movs	r1, #4
 8016efe:	4616      	mov	r6, r2
 8016f00:	4698      	mov	r8, r3
 8016f02:	f7f7 fb91 	bl	800e628 <ucdr_align_to>
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7f7 fba4 	bl	800e654 <ucdr_buffer_remaining>
 8016f0c:	2803      	cmp	r0, #3
 8016f0e:	bf8c      	ite	hi
 8016f10:	2701      	movhi	r7, #1
 8016f12:	2700      	movls	r7, #0
 8016f14:	d802      	bhi.n	8016f1c <uxr_read_submessage_header+0x28>
 8016f16:	4638      	mov	r0, r7
 8016f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f1c:	4633      	mov	r3, r6
 8016f1e:	4642      	mov	r2, r8
 8016f20:	4620      	mov	r0, r4
 8016f22:	4629      	mov	r1, r5
 8016f24:	f000 fa1a 	bl	801735c <uxr_deserialize_submessage_header>
 8016f28:	f898 3000 	ldrb.w	r3, [r8]
 8016f2c:	f003 0201 	and.w	r2, r3, #1
 8016f30:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8016f34:	f888 3000 	strb.w	r3, [r8]
 8016f38:	7522      	strb	r2, [r4, #20]
 8016f3a:	4638      	mov	r0, r7
 8016f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f40 <uxr_submessage_padding>:
 8016f40:	f010 0003 	ands.w	r0, r0, #3
 8016f44:	bf18      	it	ne
 8016f46:	f1c0 0004 	rsbne	r0, r0, #4
 8016f4a:	4770      	bx	lr

08016f4c <uxr_millis>:
 8016f4c:	b510      	push	{r4, lr}
 8016f4e:	b084      	sub	sp, #16
 8016f50:	4669      	mov	r1, sp
 8016f52:	2001      	movs	r0, #1
 8016f54:	f7eb fe3c 	bl	8002bd0 <clock_gettime>
 8016f58:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8016f5c:	4b06      	ldr	r3, [pc, #24]	@ (8016f78 <uxr_millis+0x2c>)
 8016f5e:	fba0 0103 	umull	r0, r1, r0, r3
 8016f62:	1900      	adds	r0, r0, r4
 8016f64:	fb03 1102 	mla	r1, r3, r2, r1
 8016f68:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8016f6c:	4a03      	ldr	r2, [pc, #12]	@ (8016f7c <uxr_millis+0x30>)
 8016f6e:	2300      	movs	r3, #0
 8016f70:	f7e9 fe7a 	bl	8000c68 <__aeabi_ldivmod>
 8016f74:	b004      	add	sp, #16
 8016f76:	bd10      	pop	{r4, pc}
 8016f78:	3b9aca00 	.word	0x3b9aca00
 8016f7c:	000f4240 	.word	0x000f4240

08016f80 <uxr_nanos>:
 8016f80:	b510      	push	{r4, lr}
 8016f82:	b084      	sub	sp, #16
 8016f84:	4669      	mov	r1, sp
 8016f86:	2001      	movs	r0, #1
 8016f88:	f7eb fe22 	bl	8002bd0 <clock_gettime>
 8016f8c:	4a06      	ldr	r2, [pc, #24]	@ (8016fa8 <uxr_nanos+0x28>)
 8016f8e:	9800      	ldr	r0, [sp, #0]
 8016f90:	9902      	ldr	r1, [sp, #8]
 8016f92:	9c01      	ldr	r4, [sp, #4]
 8016f94:	fba0 0302 	umull	r0, r3, r0, r2
 8016f98:	1840      	adds	r0, r0, r1
 8016f9a:	fb02 3304 	mla	r3, r2, r4, r3
 8016f9e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8016fa2:	b004      	add	sp, #16
 8016fa4:	bd10      	pop	{r4, pc}
 8016fa6:	bf00      	nop
 8016fa8:	3b9aca00 	.word	0x3b9aca00

08016fac <on_full_output_buffer_fragmented>:
 8016fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	b08a      	sub	sp, #40	@ 0x28
 8016fb4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8016fb8:	4606      	mov	r6, r0
 8016fba:	f104 0008 	add.w	r0, r4, #8
 8016fbe:	f7ff ff4b 	bl	8016e58 <uxr_get_output_reliable_stream>
 8016fc2:	4605      	mov	r5, r0
 8016fc4:	f005 fd2a 	bl	801ca1c <get_available_free_slots>
 8016fc8:	b968      	cbnz	r0, 8016fe6 <on_full_output_buffer_fragmented+0x3a>
 8016fca:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8016fce:	4620      	mov	r0, r4
 8016fd0:	4798      	blx	r3
 8016fd2:	b918      	cbnz	r0, 8016fdc <on_full_output_buffer_fragmented+0x30>
 8016fd4:	2001      	movs	r0, #1
 8016fd6:	b00a      	add	sp, #40	@ 0x28
 8016fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fdc:	4628      	mov	r0, r5
 8016fde:	f005 fd1d 	bl	801ca1c <get_available_free_slots>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	d0f6      	beq.n	8016fd4 <on_full_output_buffer_fragmented+0x28>
 8016fe6:	892a      	ldrh	r2, [r5, #8]
 8016fe8:	686b      	ldr	r3, [r5, #4]
 8016fea:	fbb3 f8f2 	udiv	r8, r3, r2
 8016fee:	89eb      	ldrh	r3, [r5, #14]
 8016ff0:	7b29      	ldrb	r1, [r5, #12]
 8016ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8016ff6:	fb02 3310 	mls	r3, r2, r0, r3
 8016ffa:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	fb08 f303 	mul.w	r3, r8, r3
 8017004:	31fc      	adds	r1, #252	@ 0xfc
 8017006:	f1a8 0804 	sub.w	r8, r8, #4
 801700a:	4441      	add	r1, r8
 801700c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8017010:	b28f      	uxth	r7, r1
 8017012:	6829      	ldr	r1, [r5, #0]
 8017014:	3304      	adds	r3, #4
 8017016:	1bd2      	subs	r2, r2, r7
 8017018:	4419      	add	r1, r3
 801701a:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 801701e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017022:	9300      	str	r3, [sp, #0]
 8017024:	4642      	mov	r2, r8
 8017026:	2300      	movs	r3, #0
 8017028:	a802      	add	r0, sp, #8
 801702a:	f7f7 fad1 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801702e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8017032:	f102 0308 	add.w	r3, r2, #8
 8017036:	4543      	cmp	r3, r8
 8017038:	d928      	bls.n	801708c <on_full_output_buffer_fragmented+0xe0>
 801703a:	463a      	mov	r2, r7
 801703c:	2300      	movs	r3, #0
 801703e:	210d      	movs	r1, #13
 8017040:	a802      	add	r0, sp, #8
 8017042:	f7ff ff3d 	bl	8016ec0 <uxr_buffer_submessage_header>
 8017046:	8929      	ldrh	r1, [r5, #8]
 8017048:	89eb      	ldrh	r3, [r5, #14]
 801704a:	fbb3 f2f1 	udiv	r2, r3, r1
 801704e:	fb01 3312 	mls	r3, r1, r2, r3
 8017052:	b29b      	uxth	r3, r3
 8017054:	686a      	ldr	r2, [r5, #4]
 8017056:	fbb2 f2f1 	udiv	r2, r2, r1
 801705a:	fb02 f303 	mul.w	r3, r2, r3
 801705e:	682a      	ldr	r2, [r5, #0]
 8017060:	f842 8003 	str.w	r8, [r2, r3]
 8017064:	89e8      	ldrh	r0, [r5, #14]
 8017066:	2101      	movs	r1, #1
 8017068:	f005 fcf6 	bl	801ca58 <uxr_seq_num_add>
 801706c:	9904      	ldr	r1, [sp, #16]
 801706e:	9a03      	ldr	r2, [sp, #12]
 8017070:	81e8      	strh	r0, [r5, #14]
 8017072:	1a52      	subs	r2, r2, r1
 8017074:	4630      	mov	r0, r6
 8017076:	f7f7 fabd 	bl	800e5f4 <ucdr_init_buffer>
 801707a:	4630      	mov	r0, r6
 801707c:	4910      	ldr	r1, [pc, #64]	@ (80170c0 <on_full_output_buffer_fragmented+0x114>)
 801707e:	4622      	mov	r2, r4
 8017080:	f7f7 fa8c 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 8017084:	2000      	movs	r0, #0
 8017086:	b00a      	add	sp, #40	@ 0x28
 8017088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801708c:	b292      	uxth	r2, r2
 801708e:	2302      	movs	r3, #2
 8017090:	210d      	movs	r1, #13
 8017092:	a802      	add	r0, sp, #8
 8017094:	f7ff ff14 	bl	8016ec0 <uxr_buffer_submessage_header>
 8017098:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801709c:	8928      	ldrh	r0, [r5, #8]
 801709e:	f103 0208 	add.w	r2, r3, #8
 80170a2:	89eb      	ldrh	r3, [r5, #14]
 80170a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80170a8:	fb00 3311 	mls	r3, r0, r1, r3
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	6869      	ldr	r1, [r5, #4]
 80170b0:	fbb1 f1f0 	udiv	r1, r1, r0
 80170b4:	fb01 f303 	mul.w	r3, r1, r3
 80170b8:	6829      	ldr	r1, [r5, #0]
 80170ba:	50ca      	str	r2, [r1, r3]
 80170bc:	e7d2      	b.n	8017064 <on_full_output_buffer_fragmented+0xb8>
 80170be:	bf00      	nop
 80170c0:	08016fad 	.word	0x08016fad

080170c4 <uxr_prepare_output_stream>:
 80170c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170c6:	b087      	sub	sp, #28
 80170c8:	2707      	movs	r7, #7
 80170ca:	9202      	str	r2, [sp, #8]
 80170cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80170ce:	2500      	movs	r5, #0
 80170d0:	3204      	adds	r2, #4
 80170d2:	e9cd 7500 	strd	r7, r5, [sp]
 80170d6:	461c      	mov	r4, r3
 80170d8:	4606      	mov	r6, r0
 80170da:	f7ff f807 	bl	80160ec <uxr_prepare_stream_to_write_submessage>
 80170de:	f080 0201 	eor.w	r2, r0, #1
 80170e2:	b2d2      	uxtb	r2, r2
 80170e4:	75a2      	strb	r2, [r4, #22]
 80170e6:	b112      	cbz	r2, 80170ee <uxr_prepare_output_stream+0x2a>
 80170e8:	4628      	mov	r0, r5
 80170ea:	b007      	add	sp, #28
 80170ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170ee:	aa05      	add	r2, sp, #20
 80170f0:	9902      	ldr	r1, [sp, #8]
 80170f2:	4630      	mov	r0, r6
 80170f4:	f7ff f934 	bl	8016360 <uxr_init_base_object_request>
 80170f8:	a905      	add	r1, sp, #20
 80170fa:	4605      	mov	r5, r0
 80170fc:	4620      	mov	r0, r4
 80170fe:	f001 f865 	bl	80181cc <uxr_serialize_WRITE_DATA_Payload_Data>
 8017102:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8017106:	69a6      	ldr	r6, [r4, #24]
 8017108:	69e7      	ldr	r7, [r4, #28]
 801710a:	1a52      	subs	r2, r2, r1
 801710c:	4620      	mov	r0, r4
 801710e:	f7f7 fa71 	bl	800e5f4 <ucdr_init_buffer>
 8017112:	4620      	mov	r0, r4
 8017114:	463a      	mov	r2, r7
 8017116:	4631      	mov	r1, r6
 8017118:	f7f7 fa40 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 801711c:	4628      	mov	r0, r5
 801711e:	b007      	add	sp, #28
 8017120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017122:	bf00      	nop

08017124 <uxr_prepare_output_stream_fragmented>:
 8017124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017128:	b093      	sub	sp, #76	@ 0x4c
 801712a:	4605      	mov	r5, r0
 801712c:	9107      	str	r1, [sp, #28]
 801712e:	3008      	adds	r0, #8
 8017130:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017134:	9303      	str	r3, [sp, #12]
 8017136:	9206      	str	r2, [sp, #24]
 8017138:	f7ff fe8e 	bl	8016e58 <uxr_get_output_reliable_stream>
 801713c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017140:	2b01      	cmp	r3, #1
 8017142:	f000 8095 	beq.w	8017270 <uxr_prepare_output_stream_fragmented+0x14c>
 8017146:	4604      	mov	r4, r0
 8017148:	2800      	cmp	r0, #0
 801714a:	f000 8091 	beq.w	8017270 <uxr_prepare_output_stream_fragmented+0x14c>
 801714e:	f005 fc65 	bl	801ca1c <get_available_free_slots>
 8017152:	2800      	cmp	r0, #0
 8017154:	f000 8087 	beq.w	8017266 <uxr_prepare_output_stream_fragmented+0x142>
 8017158:	8922      	ldrh	r2, [r4, #8]
 801715a:	89e7      	ldrh	r7, [r4, #14]
 801715c:	fbb7 f3f2 	udiv	r3, r7, r2
 8017160:	fb02 7313 	mls	r3, r2, r3, r7
 8017164:	b29b      	uxth	r3, r3
 8017166:	6861      	ldr	r1, [r4, #4]
 8017168:	fbb1 f1f2 	udiv	r1, r1, r2
 801716c:	6822      	ldr	r2, [r4, #0]
 801716e:	9105      	str	r1, [sp, #20]
 8017170:	fb01 f303 	mul.w	r3, r1, r3
 8017174:	3304      	adds	r3, #4
 8017176:	eb02 0903 	add.w	r9, r2, r3
 801717a:	7b23      	ldrb	r3, [r4, #12]
 801717c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017180:	4543      	cmp	r3, r8
 8017182:	f1a1 0b04 	sub.w	fp, r1, #4
 8017186:	d37f      	bcc.n	8017288 <uxr_prepare_output_stream_fragmented+0x164>
 8017188:	f1ab 0a04 	sub.w	sl, fp, #4
 801718c:	ebaa 0a03 	sub.w	sl, sl, r3
 8017190:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8017192:	f8cd 8000 	str.w	r8, [sp]
 8017196:	fa1f f38a 	uxth.w	r3, sl
 801719a:	9304      	str	r3, [sp, #16]
 801719c:	465a      	mov	r2, fp
 801719e:	2300      	movs	r3, #0
 80171a0:	4649      	mov	r1, r9
 80171a2:	a80a      	add	r0, sp, #40	@ 0x28
 80171a4:	f7f7 fa14 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 80171a8:	f106 0a08 	add.w	sl, r6, #8
 80171ac:	45da      	cmp	sl, fp
 80171ae:	bf2c      	ite	cs
 80171b0:	2300      	movcs	r3, #0
 80171b2:	2301      	movcc	r3, #1
 80171b4:	9a04      	ldr	r2, [sp, #16]
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	210d      	movs	r1, #13
 80171ba:	a80a      	add	r0, sp, #40	@ 0x28
 80171bc:	f7ff fe80 	bl	8016ec0 <uxr_buffer_submessage_header>
 80171c0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80171c4:	fbb7 f2fc 	udiv	r2, r7, ip
 80171c8:	fb0c 7212 	mls	r2, ip, r2, r7
 80171cc:	b292      	uxth	r2, r2
 80171ce:	6863      	ldr	r3, [r4, #4]
 80171d0:	fbb3 f3fc 	udiv	r3, r3, ip
 80171d4:	fb02 f303 	mul.w	r3, r2, r3
 80171d8:	6822      	ldr	r2, [r4, #0]
 80171da:	2101      	movs	r1, #1
 80171dc:	f842 b003 	str.w	fp, [r2, r3]
 80171e0:	4638      	mov	r0, r7
 80171e2:	f005 fc39 	bl	801ca58 <uxr_seq_num_add>
 80171e6:	9b05      	ldr	r3, [sp, #20]
 80171e8:	9e03      	ldr	r6, [sp, #12]
 80171ea:	f1a3 0208 	sub.w	r2, r3, #8
 80171ee:	f108 0104 	add.w	r1, r8, #4
 80171f2:	4607      	mov	r7, r0
 80171f4:	eba2 0208 	sub.w	r2, r2, r8
 80171f8:	4449      	add	r1, r9
 80171fa:	4630      	mov	r0, r6
 80171fc:	f7f7 f9fa 	bl	800e5f4 <ucdr_init_buffer>
 8017200:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017202:	81e7      	strh	r7, [r4, #14]
 8017204:	1d1a      	adds	r2, r3, #4
 8017206:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801720a:	bf28      	it	cs
 801720c:	2200      	movcs	r2, #0
 801720e:	2300      	movs	r3, #0
 8017210:	b292      	uxth	r2, r2
 8017212:	2107      	movs	r1, #7
 8017214:	4630      	mov	r0, r6
 8017216:	f7ff fe53 	bl	8016ec0 <uxr_buffer_submessage_header>
 801721a:	9906      	ldr	r1, [sp, #24]
 801721c:	aa09      	add	r2, sp, #36	@ 0x24
 801721e:	4628      	mov	r0, r5
 8017220:	f7ff f89e 	bl	8016360 <uxr_init_base_object_request>
 8017224:	4604      	mov	r4, r0
 8017226:	b320      	cbz	r0, 8017272 <uxr_prepare_output_stream_fragmented+0x14e>
 8017228:	9e03      	ldr	r6, [sp, #12]
 801722a:	a909      	add	r1, sp, #36	@ 0x24
 801722c:	4630      	mov	r0, r6
 801722e:	f000 ffcd 	bl	80181cc <uxr_serialize_WRITE_DATA_Payload_Data>
 8017232:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8017236:	4630      	mov	r0, r6
 8017238:	1a52      	subs	r2, r2, r1
 801723a:	f7f7 f9db 	bl	800e5f4 <ucdr_init_buffer>
 801723e:	9b07      	ldr	r3, [sp, #28]
 8017240:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8017244:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017246:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801724a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801724c:	491a      	ldr	r1, [pc, #104]	@ (80172b8 <uxr_prepare_output_stream_fragmented+0x194>)
 801724e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8017252:	4630      	mov	r0, r6
 8017254:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8017258:	462a      	mov	r2, r5
 801725a:	f7f7 f99f 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 801725e:	4620      	mov	r0, r4
 8017260:	b013      	add	sp, #76	@ 0x4c
 8017262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017266:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8017268:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801726a:	4628      	mov	r0, r5
 801726c:	4798      	blx	r3
 801726e:	b920      	cbnz	r0, 801727a <uxr_prepare_output_stream_fragmented+0x156>
 8017270:	2400      	movs	r4, #0
 8017272:	4620      	mov	r0, r4
 8017274:	b013      	add	sp, #76	@ 0x4c
 8017276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801727a:	4620      	mov	r0, r4
 801727c:	f005 fbce 	bl	801ca1c <get_available_free_slots>
 8017280:	2800      	cmp	r0, #0
 8017282:	f47f af69 	bne.w	8017158 <uxr_prepare_output_stream_fragmented+0x34>
 8017286:	e7f3      	b.n	8017270 <uxr_prepare_output_stream_fragmented+0x14c>
 8017288:	4638      	mov	r0, r7
 801728a:	2101      	movs	r1, #1
 801728c:	f005 fbe4 	bl	801ca58 <uxr_seq_num_add>
 8017290:	8921      	ldrh	r1, [r4, #8]
 8017292:	fbb0 f2f1 	udiv	r2, r0, r1
 8017296:	fb01 0212 	mls	r2, r1, r2, r0
 801729a:	b292      	uxth	r2, r2
 801729c:	6863      	ldr	r3, [r4, #4]
 801729e:	fbb3 f3f1 	udiv	r3, r3, r1
 80172a2:	fb02 f303 	mul.w	r3, r2, r3
 80172a6:	6822      	ldr	r2, [r4, #0]
 80172a8:	3304      	adds	r3, #4
 80172aa:	eb02 0903 	add.w	r9, r2, r3
 80172ae:	4607      	mov	r7, r0
 80172b0:	7b23      	ldrb	r3, [r4, #12]
 80172b2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80172b6:	e767      	b.n	8017188 <uxr_prepare_output_stream_fragmented+0x64>
 80172b8:	08016fad 	.word	0x08016fad

080172bc <uxr_serialize_message_header>:
 80172bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c0:	4617      	mov	r7, r2
 80172c2:	4604      	mov	r4, r0
 80172c4:	461e      	mov	r6, r3
 80172c6:	460d      	mov	r5, r1
 80172c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80172cc:	f7fc f962 	bl	8013594 <ucdr_serialize_uint8_t>
 80172d0:	4639      	mov	r1, r7
 80172d2:	4620      	mov	r0, r4
 80172d4:	f7fc f95e 	bl	8013594 <ucdr_serialize_uint8_t>
 80172d8:	4632      	mov	r2, r6
 80172da:	2101      	movs	r1, #1
 80172dc:	4620      	mov	r0, r4
 80172de:	f7fc fa0f 	bl	8013700 <ucdr_serialize_endian_uint16_t>
 80172e2:	062b      	lsls	r3, r5, #24
 80172e4:	d501      	bpl.n	80172ea <uxr_serialize_message_header+0x2e>
 80172e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172ea:	4641      	mov	r1, r8
 80172ec:	4620      	mov	r0, r4
 80172ee:	2204      	movs	r2, #4
 80172f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172f4:	f7fb bf04 	b.w	8013100 <ucdr_serialize_array_uint8_t>

080172f8 <uxr_deserialize_message_header>:
 80172f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172fc:	4617      	mov	r7, r2
 80172fe:	4604      	mov	r4, r0
 8017300:	461e      	mov	r6, r3
 8017302:	460d      	mov	r5, r1
 8017304:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017308:	f7fc f95a 	bl	80135c0 <ucdr_deserialize_uint8_t>
 801730c:	4639      	mov	r1, r7
 801730e:	4620      	mov	r0, r4
 8017310:	f7fc f956 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017314:	4632      	mov	r2, r6
 8017316:	2101      	movs	r1, #1
 8017318:	4620      	mov	r0, r4
 801731a:	f7fc fae7 	bl	80138ec <ucdr_deserialize_endian_uint16_t>
 801731e:	f995 3000 	ldrsb.w	r3, [r5]
 8017322:	2b00      	cmp	r3, #0
 8017324:	da01      	bge.n	801732a <uxr_deserialize_message_header+0x32>
 8017326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801732a:	4641      	mov	r1, r8
 801732c:	4620      	mov	r0, r4
 801732e:	2204      	movs	r2, #4
 8017330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017334:	f7fb bf48 	b.w	80131c8 <ucdr_deserialize_array_uint8_t>

08017338 <uxr_serialize_submessage_header>:
 8017338:	b570      	push	{r4, r5, r6, lr}
 801733a:	4616      	mov	r6, r2
 801733c:	4604      	mov	r4, r0
 801733e:	461d      	mov	r5, r3
 8017340:	f7fc f928 	bl	8013594 <ucdr_serialize_uint8_t>
 8017344:	4631      	mov	r1, r6
 8017346:	4620      	mov	r0, r4
 8017348:	f7fc f924 	bl	8013594 <ucdr_serialize_uint8_t>
 801734c:	462a      	mov	r2, r5
 801734e:	4620      	mov	r0, r4
 8017350:	2101      	movs	r1, #1
 8017352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017356:	f7fc b9d3 	b.w	8013700 <ucdr_serialize_endian_uint16_t>
 801735a:	bf00      	nop

0801735c <uxr_deserialize_submessage_header>:
 801735c:	b570      	push	{r4, r5, r6, lr}
 801735e:	4616      	mov	r6, r2
 8017360:	4604      	mov	r4, r0
 8017362:	461d      	mov	r5, r3
 8017364:	f7fc f92c 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017368:	4631      	mov	r1, r6
 801736a:	4620      	mov	r0, r4
 801736c:	f7fc f928 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017370:	462a      	mov	r2, r5
 8017372:	4620      	mov	r0, r4
 8017374:	2101      	movs	r1, #1
 8017376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801737a:	f7fc bab7 	b.w	80138ec <ucdr_deserialize_endian_uint16_t>
 801737e:	bf00      	nop

08017380 <uxr_serialize_CLIENT_Representation>:
 8017380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017384:	2204      	movs	r2, #4
 8017386:	460e      	mov	r6, r1
 8017388:	4605      	mov	r5, r0
 801738a:	f7fb feb9 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801738e:	2202      	movs	r2, #2
 8017390:	1d31      	adds	r1, r6, #4
 8017392:	4604      	mov	r4, r0
 8017394:	4628      	mov	r0, r5
 8017396:	f7fb feb3 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801739a:	2202      	movs	r2, #2
 801739c:	4004      	ands	r4, r0
 801739e:	1db1      	adds	r1, r6, #6
 80173a0:	4628      	mov	r0, r5
 80173a2:	f7fb fead 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80173a6:	b2e4      	uxtb	r4, r4
 80173a8:	2204      	movs	r2, #4
 80173aa:	4004      	ands	r4, r0
 80173ac:	f106 0108 	add.w	r1, r6, #8
 80173b0:	4628      	mov	r0, r5
 80173b2:	f7fb fea5 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80173b6:	7b31      	ldrb	r1, [r6, #12]
 80173b8:	ea00 0804 	and.w	r8, r0, r4
 80173bc:	4628      	mov	r0, r5
 80173be:	f7fc f8e9 	bl	8013594 <ucdr_serialize_uint8_t>
 80173c2:	7b71      	ldrb	r1, [r6, #13]
 80173c4:	ea08 0800 	and.w	r8, r8, r0
 80173c8:	4628      	mov	r0, r5
 80173ca:	f7fc f8b5 	bl	8013538 <ucdr_serialize_bool>
 80173ce:	7b73      	ldrb	r3, [r6, #13]
 80173d0:	ea08 0800 	and.w	r8, r8, r0
 80173d4:	b93b      	cbnz	r3, 80173e6 <uxr_serialize_CLIENT_Representation+0x66>
 80173d6:	8bb1      	ldrh	r1, [r6, #28]
 80173d8:	4628      	mov	r0, r5
 80173da:	f7fc f907 	bl	80135ec <ucdr_serialize_uint16_t>
 80173de:	ea08 0000 	and.w	r0, r8, r0
 80173e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173e6:	6931      	ldr	r1, [r6, #16]
 80173e8:	4628      	mov	r0, r5
 80173ea:	f7fc faef 	bl	80139cc <ucdr_serialize_uint32_t>
 80173ee:	6933      	ldr	r3, [r6, #16]
 80173f0:	b1e3      	cbz	r3, 801742c <uxr_serialize_CLIENT_Representation+0xac>
 80173f2:	b1c0      	cbz	r0, 8017426 <uxr_serialize_CLIENT_Representation+0xa6>
 80173f4:	4637      	mov	r7, r6
 80173f6:	f04f 0900 	mov.w	r9, #0
 80173fa:	e001      	b.n	8017400 <uxr_serialize_CLIENT_Representation+0x80>
 80173fc:	3708      	adds	r7, #8
 80173fe:	b194      	cbz	r4, 8017426 <uxr_serialize_CLIENT_Representation+0xa6>
 8017400:	6979      	ldr	r1, [r7, #20]
 8017402:	4628      	mov	r0, r5
 8017404:	f004 fde4 	bl	801bfd0 <ucdr_serialize_string>
 8017408:	69b9      	ldr	r1, [r7, #24]
 801740a:	4604      	mov	r4, r0
 801740c:	4628      	mov	r0, r5
 801740e:	f004 fddf 	bl	801bfd0 <ucdr_serialize_string>
 8017412:	6933      	ldr	r3, [r6, #16]
 8017414:	f109 0901 	add.w	r9, r9, #1
 8017418:	4004      	ands	r4, r0
 801741a:	4599      	cmp	r9, r3
 801741c:	b2e4      	uxtb	r4, r4
 801741e:	d3ed      	bcc.n	80173fc <uxr_serialize_CLIENT_Representation+0x7c>
 8017420:	ea08 0804 	and.w	r8, r8, r4
 8017424:	e7d7      	b.n	80173d6 <uxr_serialize_CLIENT_Representation+0x56>
 8017426:	f04f 0800 	mov.w	r8, #0
 801742a:	e7d4      	b.n	80173d6 <uxr_serialize_CLIENT_Representation+0x56>
 801742c:	ea08 0800 	and.w	r8, r8, r0
 8017430:	e7d1      	b.n	80173d6 <uxr_serialize_CLIENT_Representation+0x56>
 8017432:	bf00      	nop

08017434 <uxr_deserialize_CLIENT_Representation>:
 8017434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017438:	2204      	movs	r2, #4
 801743a:	460c      	mov	r4, r1
 801743c:	4605      	mov	r5, r0
 801743e:	f7fb fec3 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017442:	2202      	movs	r2, #2
 8017444:	1d21      	adds	r1, r4, #4
 8017446:	4606      	mov	r6, r0
 8017448:	4628      	mov	r0, r5
 801744a:	f7fb febd 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801744e:	2202      	movs	r2, #2
 8017450:	4006      	ands	r6, r0
 8017452:	1da1      	adds	r1, r4, #6
 8017454:	4628      	mov	r0, r5
 8017456:	f7fb feb7 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801745a:	b2f6      	uxtb	r6, r6
 801745c:	2204      	movs	r2, #4
 801745e:	4006      	ands	r6, r0
 8017460:	f104 0108 	add.w	r1, r4, #8
 8017464:	4628      	mov	r0, r5
 8017466:	f7fb feaf 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801746a:	f104 010c 	add.w	r1, r4, #12
 801746e:	ea00 0706 	and.w	r7, r0, r6
 8017472:	4628      	mov	r0, r5
 8017474:	f7fc f8a4 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017478:	f104 010d 	add.w	r1, r4, #13
 801747c:	4007      	ands	r7, r0
 801747e:	4628      	mov	r0, r5
 8017480:	f7fc f870 	bl	8013564 <ucdr_deserialize_bool>
 8017484:	7b63      	ldrb	r3, [r4, #13]
 8017486:	4007      	ands	r7, r0
 8017488:	b93b      	cbnz	r3, 801749a <uxr_deserialize_CLIENT_Representation+0x66>
 801748a:	f104 011c 	add.w	r1, r4, #28
 801748e:	4628      	mov	r0, r5
 8017490:	f7fc f9b0 	bl	80137f4 <ucdr_deserialize_uint16_t>
 8017494:	4038      	ands	r0, r7
 8017496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801749a:	f104 0110 	add.w	r1, r4, #16
 801749e:	4628      	mov	r0, r5
 80174a0:	f7fc fbbe 	bl	8013c20 <ucdr_deserialize_uint32_t>
 80174a4:	6923      	ldr	r3, [r4, #16]
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d903      	bls.n	80174b2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80174aa:	2301      	movs	r3, #1
 80174ac:	75ab      	strb	r3, [r5, #22]
 80174ae:	2700      	movs	r7, #0
 80174b0:	e7eb      	b.n	801748a <uxr_deserialize_CLIENT_Representation+0x56>
 80174b2:	b30b      	cbz	r3, 80174f8 <uxr_deserialize_CLIENT_Representation+0xc4>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d0fa      	beq.n	80174ae <uxr_deserialize_CLIENT_Representation+0x7a>
 80174b8:	46a0      	mov	r8, r4
 80174ba:	f04f 0900 	mov.w	r9, #0
 80174be:	e003      	b.n	80174c8 <uxr_deserialize_CLIENT_Representation+0x94>
 80174c0:	f108 0808 	add.w	r8, r8, #8
 80174c4:	2e00      	cmp	r6, #0
 80174c6:	d0f2      	beq.n	80174ae <uxr_deserialize_CLIENT_Representation+0x7a>
 80174c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80174cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80174d0:	4628      	mov	r0, r5
 80174d2:	f004 fd8b 	bl	801bfec <ucdr_deserialize_string>
 80174d6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80174da:	4606      	mov	r6, r0
 80174dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80174e0:	4628      	mov	r0, r5
 80174e2:	f004 fd83 	bl	801bfec <ucdr_deserialize_string>
 80174e6:	6923      	ldr	r3, [r4, #16]
 80174e8:	f109 0901 	add.w	r9, r9, #1
 80174ec:	4006      	ands	r6, r0
 80174ee:	4599      	cmp	r9, r3
 80174f0:	b2f6      	uxtb	r6, r6
 80174f2:	d3e5      	bcc.n	80174c0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80174f4:	4037      	ands	r7, r6
 80174f6:	e7c8      	b.n	801748a <uxr_deserialize_CLIENT_Representation+0x56>
 80174f8:	4007      	ands	r7, r0
 80174fa:	e7c6      	b.n	801748a <uxr_deserialize_CLIENT_Representation+0x56>

080174fc <uxr_serialize_AGENT_Representation>:
 80174fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017500:	2204      	movs	r2, #4
 8017502:	460f      	mov	r7, r1
 8017504:	4605      	mov	r5, r0
 8017506:	f7fb fdfb 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801750a:	2202      	movs	r2, #2
 801750c:	4604      	mov	r4, r0
 801750e:	1d39      	adds	r1, r7, #4
 8017510:	4628      	mov	r0, r5
 8017512:	f7fb fdf5 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017516:	4020      	ands	r0, r4
 8017518:	2202      	movs	r2, #2
 801751a:	b2c4      	uxtb	r4, r0
 801751c:	1db9      	adds	r1, r7, #6
 801751e:	4628      	mov	r0, r5
 8017520:	f7fb fdee 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017524:	7a39      	ldrb	r1, [r7, #8]
 8017526:	4004      	ands	r4, r0
 8017528:	4628      	mov	r0, r5
 801752a:	f7fc f805 	bl	8013538 <ucdr_serialize_bool>
 801752e:	7a3b      	ldrb	r3, [r7, #8]
 8017530:	ea00 0804 	and.w	r8, r0, r4
 8017534:	b913      	cbnz	r3, 801753c <uxr_serialize_AGENT_Representation+0x40>
 8017536:	4640      	mov	r0, r8
 8017538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801753c:	68f9      	ldr	r1, [r7, #12]
 801753e:	4628      	mov	r0, r5
 8017540:	f7fc fa44 	bl	80139cc <ucdr_serialize_uint32_t>
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	b303      	cbz	r3, 801758a <uxr_serialize_AGENT_Representation+0x8e>
 8017548:	b1d0      	cbz	r0, 8017580 <uxr_serialize_AGENT_Representation+0x84>
 801754a:	463e      	mov	r6, r7
 801754c:	f04f 0900 	mov.w	r9, #0
 8017550:	e001      	b.n	8017556 <uxr_serialize_AGENT_Representation+0x5a>
 8017552:	3608      	adds	r6, #8
 8017554:	b1a4      	cbz	r4, 8017580 <uxr_serialize_AGENT_Representation+0x84>
 8017556:	6931      	ldr	r1, [r6, #16]
 8017558:	4628      	mov	r0, r5
 801755a:	f004 fd39 	bl	801bfd0 <ucdr_serialize_string>
 801755e:	6971      	ldr	r1, [r6, #20]
 8017560:	4604      	mov	r4, r0
 8017562:	4628      	mov	r0, r5
 8017564:	f004 fd34 	bl	801bfd0 <ucdr_serialize_string>
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	f109 0901 	add.w	r9, r9, #1
 801756e:	4004      	ands	r4, r0
 8017570:	4599      	cmp	r9, r3
 8017572:	b2e4      	uxtb	r4, r4
 8017574:	d3ed      	bcc.n	8017552 <uxr_serialize_AGENT_Representation+0x56>
 8017576:	ea08 0804 	and.w	r8, r8, r4
 801757a:	4640      	mov	r0, r8
 801757c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017580:	f04f 0800 	mov.w	r8, #0
 8017584:	4640      	mov	r0, r8
 8017586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801758a:	ea08 0800 	and.w	r8, r8, r0
 801758e:	e7d2      	b.n	8017536 <uxr_serialize_AGENT_Representation+0x3a>

08017590 <uxr_serialize_DATAWRITER_Representation>:
 8017590:	b570      	push	{r4, r5, r6, lr}
 8017592:	460d      	mov	r5, r1
 8017594:	7809      	ldrb	r1, [r1, #0]
 8017596:	4606      	mov	r6, r0
 8017598:	f7fb fffc 	bl	8013594 <ucdr_serialize_uint8_t>
 801759c:	4604      	mov	r4, r0
 801759e:	b130      	cbz	r0, 80175ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80175a0:	782b      	ldrb	r3, [r5, #0]
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	d00c      	beq.n	80175c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80175a6:	2b03      	cmp	r3, #3
 80175a8:	d010      	beq.n	80175cc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	d008      	beq.n	80175c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80175ae:	2202      	movs	r2, #2
 80175b0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80175b4:	4630      	mov	r0, r6
 80175b6:	f7fb fda3 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80175ba:	4020      	ands	r0, r4
 80175bc:	b2c0      	uxtb	r0, r0
 80175be:	bd70      	pop	{r4, r5, r6, pc}
 80175c0:	6869      	ldr	r1, [r5, #4]
 80175c2:	4630      	mov	r0, r6
 80175c4:	f004 fd04 	bl	801bfd0 <ucdr_serialize_string>
 80175c8:	4604      	mov	r4, r0
 80175ca:	e7f0      	b.n	80175ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80175cc:	4629      	mov	r1, r5
 80175ce:	4630      	mov	r0, r6
 80175d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80175d4:	3104      	adds	r1, #4
 80175d6:	f7f7 f8ab 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 80175da:	4604      	mov	r4, r0
 80175dc:	e7e7      	b.n	80175ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80175de:	bf00      	nop

080175e0 <uxr_serialize_ObjectVariant.part.0>:
 80175e0:	b570      	push	{r4, r5, r6, lr}
 80175e2:	780b      	ldrb	r3, [r1, #0]
 80175e4:	3b01      	subs	r3, #1
 80175e6:	460c      	mov	r4, r1
 80175e8:	4605      	mov	r5, r0
 80175ea:	2b0d      	cmp	r3, #13
 80175ec:	d816      	bhi.n	801761c <uxr_serialize_ObjectVariant.part.0+0x3c>
 80175ee:	e8df f003 	tbb	[pc, r3]
 80175f2:	0733      	.short	0x0733
 80175f4:	07071717 	.word	0x07071717
 80175f8:	0c150707 	.word	0x0c150707
 80175fc:	4c510c0c 	.word	0x4c510c0c
 8017600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017604:	3104      	adds	r1, #4
 8017606:	f7ff bfc3 	b.w	8017590 <uxr_serialize_DATAWRITER_Representation>
 801760a:	7909      	ldrb	r1, [r1, #4]
 801760c:	f7fb ffc2 	bl	8013594 <ucdr_serialize_uint8_t>
 8017610:	b300      	cbz	r0, 8017654 <uxr_serialize_ObjectVariant.part.0+0x74>
 8017612:	7923      	ldrb	r3, [r4, #4]
 8017614:	2b01      	cmp	r3, #1
 8017616:	d042      	beq.n	801769e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8017618:	2b02      	cmp	r3, #2
 801761a:	d040      	beq.n	801769e <uxr_serialize_ObjectVariant.part.0+0xbe>
 801761c:	2001      	movs	r0, #1
 801761e:	bd70      	pop	{r4, r5, r6, pc}
 8017620:	7909      	ldrb	r1, [r1, #4]
 8017622:	f7fb ffb7 	bl	8013594 <ucdr_serialize_uint8_t>
 8017626:	4606      	mov	r6, r0
 8017628:	b158      	cbz	r0, 8017642 <uxr_serialize_ObjectVariant.part.0+0x62>
 801762a:	7923      	ldrb	r3, [r4, #4]
 801762c:	2b02      	cmp	r3, #2
 801762e:	d03c      	beq.n	80176aa <uxr_serialize_ObjectVariant.part.0+0xca>
 8017630:	2b03      	cmp	r3, #3
 8017632:	d106      	bne.n	8017642 <uxr_serialize_ObjectVariant.part.0+0x62>
 8017634:	68a2      	ldr	r2, [r4, #8]
 8017636:	f104 010c 	add.w	r1, r4, #12
 801763a:	4628      	mov	r0, r5
 801763c:	f7f7 f878 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 8017640:	4606      	mov	r6, r0
 8017642:	2202      	movs	r2, #2
 8017644:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8017648:	4628      	mov	r0, r5
 801764a:	f7fb fd59 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801764e:	4030      	ands	r0, r6
 8017650:	b2c0      	uxtb	r0, r0
 8017652:	bd70      	pop	{r4, r5, r6, pc}
 8017654:	2000      	movs	r0, #0
 8017656:	bd70      	pop	{r4, r5, r6, pc}
 8017658:	7909      	ldrb	r1, [r1, #4]
 801765a:	f7fb ff9b 	bl	8013594 <ucdr_serialize_uint8_t>
 801765e:	4606      	mov	r6, r0
 8017660:	b158      	cbz	r0, 801767a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017662:	7923      	ldrb	r3, [r4, #4]
 8017664:	2b02      	cmp	r3, #2
 8017666:	d003      	beq.n	8017670 <uxr_serialize_ObjectVariant.part.0+0x90>
 8017668:	2b03      	cmp	r3, #3
 801766a:	d024      	beq.n	80176b6 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801766c:	2b01      	cmp	r3, #1
 801766e:	d104      	bne.n	801767a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8017670:	68a1      	ldr	r1, [r4, #8]
 8017672:	4628      	mov	r0, r5
 8017674:	f004 fcac 	bl	801bfd0 <ucdr_serialize_string>
 8017678:	4606      	mov	r6, r0
 801767a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801767e:	4628      	mov	r0, r5
 8017680:	f7fc fcb0 	bl	8013fe4 <ucdr_serialize_int16_t>
 8017684:	4030      	ands	r0, r6
 8017686:	b2c0      	uxtb	r0, r0
 8017688:	bd70      	pop	{r4, r5, r6, pc}
 801768a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801768e:	3104      	adds	r1, #4
 8017690:	f7ff be76 	b.w	8017380 <uxr_serialize_CLIENT_Representation>
 8017694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017698:	3104      	adds	r1, #4
 801769a:	f7ff bf2f 	b.w	80174fc <uxr_serialize_AGENT_Representation>
 801769e:	68a1      	ldr	r1, [r4, #8]
 80176a0:	4628      	mov	r0, r5
 80176a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176a6:	f004 bc93 	b.w	801bfd0 <ucdr_serialize_string>
 80176aa:	68a1      	ldr	r1, [r4, #8]
 80176ac:	4628      	mov	r0, r5
 80176ae:	f004 fc8f 	bl	801bfd0 <ucdr_serialize_string>
 80176b2:	4606      	mov	r6, r0
 80176b4:	e7c5      	b.n	8017642 <uxr_serialize_ObjectVariant.part.0+0x62>
 80176b6:	68a2      	ldr	r2, [r4, #8]
 80176b8:	f104 010c 	add.w	r1, r4, #12
 80176bc:	4628      	mov	r0, r5
 80176be:	f7f7 f837 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 80176c2:	4606      	mov	r6, r0
 80176c4:	e7d9      	b.n	801767a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80176c6:	bf00      	nop

080176c8 <uxr_deserialize_DATAWRITER_Representation>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	4606      	mov	r6, r0
 80176cc:	460d      	mov	r5, r1
 80176ce:	f7fb ff77 	bl	80135c0 <ucdr_deserialize_uint8_t>
 80176d2:	4604      	mov	r4, r0
 80176d4:	b130      	cbz	r0, 80176e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80176d6:	782b      	ldrb	r3, [r5, #0]
 80176d8:	2b02      	cmp	r3, #2
 80176da:	d00c      	beq.n	80176f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80176dc:	2b03      	cmp	r3, #3
 80176de:	d012      	beq.n	8017706 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80176e0:	2b01      	cmp	r3, #1
 80176e2:	d008      	beq.n	80176f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80176e4:	2202      	movs	r2, #2
 80176e6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80176ea:	4630      	mov	r0, r6
 80176ec:	f7fb fd6c 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 80176f0:	4020      	ands	r0, r4
 80176f2:	b2c0      	uxtb	r0, r0
 80176f4:	bd70      	pop	{r4, r5, r6, pc}
 80176f6:	6869      	ldr	r1, [r5, #4]
 80176f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80176fc:	4630      	mov	r0, r6
 80176fe:	f004 fc75 	bl	801bfec <ucdr_deserialize_string>
 8017702:	4604      	mov	r4, r0
 8017704:	e7ee      	b.n	80176e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017706:	1d2b      	adds	r3, r5, #4
 8017708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801770c:	f105 0108 	add.w	r1, r5, #8
 8017710:	4630      	mov	r0, r6
 8017712:	f7f7 f81f 	bl	800e754 <ucdr_deserialize_sequence_uint8_t>
 8017716:	4604      	mov	r4, r0
 8017718:	e7e4      	b.n	80176e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801771a:	bf00      	nop

0801771c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801771c:	b570      	push	{r4, r5, r6, lr}
 801771e:	460d      	mov	r5, r1
 8017720:	7809      	ldrb	r1, [r1, #0]
 8017722:	4606      	mov	r6, r0
 8017724:	f7fb ff08 	bl	8013538 <ucdr_serialize_bool>
 8017728:	782b      	ldrb	r3, [r5, #0]
 801772a:	4604      	mov	r4, r0
 801772c:	b94b      	cbnz	r3, 8017742 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801772e:	7a29      	ldrb	r1, [r5, #8]
 8017730:	4630      	mov	r0, r6
 8017732:	f7fb ff01 	bl	8013538 <ucdr_serialize_bool>
 8017736:	7a2b      	ldrb	r3, [r5, #8]
 8017738:	4004      	ands	r4, r0
 801773a:	b2e4      	uxtb	r4, r4
 801773c:	b943      	cbnz	r3, 8017750 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801773e:	4620      	mov	r0, r4
 8017740:	bd70      	pop	{r4, r5, r6, pc}
 8017742:	6869      	ldr	r1, [r5, #4]
 8017744:	4630      	mov	r0, r6
 8017746:	f004 fc43 	bl	801bfd0 <ucdr_serialize_string>
 801774a:	4004      	ands	r4, r0
 801774c:	b2e4      	uxtb	r4, r4
 801774e:	e7ee      	b.n	801772e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017750:	68e9      	ldr	r1, [r5, #12]
 8017752:	4630      	mov	r0, r6
 8017754:	f004 fc3c 	bl	801bfd0 <ucdr_serialize_string>
 8017758:	4004      	ands	r4, r0
 801775a:	4620      	mov	r0, r4
 801775c:	bd70      	pop	{r4, r5, r6, pc}
 801775e:	bf00      	nop

08017760 <uxr_serialize_OBJK_Topic_Binary>:
 8017760:	b570      	push	{r4, r5, r6, lr}
 8017762:	460d      	mov	r5, r1
 8017764:	6809      	ldr	r1, [r1, #0]
 8017766:	4606      	mov	r6, r0
 8017768:	f004 fc32 	bl	801bfd0 <ucdr_serialize_string>
 801776c:	7929      	ldrb	r1, [r5, #4]
 801776e:	4604      	mov	r4, r0
 8017770:	4630      	mov	r0, r6
 8017772:	f7fb fee1 	bl	8013538 <ucdr_serialize_bool>
 8017776:	792b      	ldrb	r3, [r5, #4]
 8017778:	4004      	ands	r4, r0
 801777a:	b2e4      	uxtb	r4, r4
 801777c:	b943      	cbnz	r3, 8017790 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801777e:	7b29      	ldrb	r1, [r5, #12]
 8017780:	4630      	mov	r0, r6
 8017782:	f7fb fed9 	bl	8013538 <ucdr_serialize_bool>
 8017786:	7b2b      	ldrb	r3, [r5, #12]
 8017788:	4004      	ands	r4, r0
 801778a:	b93b      	cbnz	r3, 801779c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801778c:	4620      	mov	r0, r4
 801778e:	bd70      	pop	{r4, r5, r6, pc}
 8017790:	68a9      	ldr	r1, [r5, #8]
 8017792:	4630      	mov	r0, r6
 8017794:	f004 fc1c 	bl	801bfd0 <ucdr_serialize_string>
 8017798:	4004      	ands	r4, r0
 801779a:	e7f0      	b.n	801777e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801779c:	6929      	ldr	r1, [r5, #16]
 801779e:	4630      	mov	r0, r6
 80177a0:	f004 fc16 	bl	801bfd0 <ucdr_serialize_string>
 80177a4:	4004      	ands	r4, r0
 80177a6:	b2e4      	uxtb	r4, r4
 80177a8:	4620      	mov	r0, r4
 80177aa:	bd70      	pop	{r4, r5, r6, pc}

080177ac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80177ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b0:	460c      	mov	r4, r1
 80177b2:	7809      	ldrb	r1, [r1, #0]
 80177b4:	4606      	mov	r6, r0
 80177b6:	f7fb febf 	bl	8013538 <ucdr_serialize_bool>
 80177ba:	7823      	ldrb	r3, [r4, #0]
 80177bc:	4605      	mov	r5, r0
 80177be:	b96b      	cbnz	r3, 80177dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80177c0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80177c4:	4630      	mov	r0, r6
 80177c6:	f7fb feb7 	bl	8013538 <ucdr_serialize_bool>
 80177ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80177ce:	4005      	ands	r5, r0
 80177d0:	b2ed      	uxtb	r5, r5
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d16a      	bne.n	80178ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80177d6:	4628      	mov	r0, r5
 80177d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177dc:	6861      	ldr	r1, [r4, #4]
 80177de:	4630      	mov	r0, r6
 80177e0:	f7fc f8f4 	bl	80139cc <ucdr_serialize_uint32_t>
 80177e4:	6863      	ldr	r3, [r4, #4]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d06c      	beq.n	80178c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80177ea:	2800      	cmp	r0, #0
 80177ec:	d068      	beq.n	80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80177ee:	68a1      	ldr	r1, [r4, #8]
 80177f0:	4630      	mov	r0, r6
 80177f2:	f004 fbed 	bl	801bfd0 <ucdr_serialize_string>
 80177f6:	6862      	ldr	r2, [r4, #4]
 80177f8:	2a01      	cmp	r2, #1
 80177fa:	d953      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80177fc:	2800      	cmp	r0, #0
 80177fe:	d05f      	beq.n	80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017800:	68e1      	ldr	r1, [r4, #12]
 8017802:	4630      	mov	r0, r6
 8017804:	f004 fbe4 	bl	801bfd0 <ucdr_serialize_string>
 8017808:	6862      	ldr	r2, [r4, #4]
 801780a:	2a02      	cmp	r2, #2
 801780c:	d94a      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801780e:	2800      	cmp	r0, #0
 8017810:	d056      	beq.n	80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017812:	6921      	ldr	r1, [r4, #16]
 8017814:	4630      	mov	r0, r6
 8017816:	f004 fbdb 	bl	801bfd0 <ucdr_serialize_string>
 801781a:	6862      	ldr	r2, [r4, #4]
 801781c:	2a03      	cmp	r2, #3
 801781e:	d941      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017820:	2800      	cmp	r0, #0
 8017822:	d04d      	beq.n	80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017824:	6961      	ldr	r1, [r4, #20]
 8017826:	4630      	mov	r0, r6
 8017828:	f004 fbd2 	bl	801bfd0 <ucdr_serialize_string>
 801782c:	6862      	ldr	r2, [r4, #4]
 801782e:	2a04      	cmp	r2, #4
 8017830:	d938      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017832:	2800      	cmp	r0, #0
 8017834:	d044      	beq.n	80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017836:	69a1      	ldr	r1, [r4, #24]
 8017838:	4630      	mov	r0, r6
 801783a:	f004 fbc9 	bl	801bfd0 <ucdr_serialize_string>
 801783e:	6862      	ldr	r2, [r4, #4]
 8017840:	2a05      	cmp	r2, #5
 8017842:	d92f      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017844:	2800      	cmp	r0, #0
 8017846:	d03b      	beq.n	80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017848:	69e1      	ldr	r1, [r4, #28]
 801784a:	4630      	mov	r0, r6
 801784c:	f004 fbc0 	bl	801bfd0 <ucdr_serialize_string>
 8017850:	6862      	ldr	r2, [r4, #4]
 8017852:	2a06      	cmp	r2, #6
 8017854:	d926      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017856:	b398      	cbz	r0, 80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017858:	6a21      	ldr	r1, [r4, #32]
 801785a:	4630      	mov	r0, r6
 801785c:	f004 fbb8 	bl	801bfd0 <ucdr_serialize_string>
 8017860:	6862      	ldr	r2, [r4, #4]
 8017862:	2a07      	cmp	r2, #7
 8017864:	d91e      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017866:	b358      	cbz	r0, 80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017868:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801786a:	4630      	mov	r0, r6
 801786c:	f004 fbb0 	bl	801bfd0 <ucdr_serialize_string>
 8017870:	6862      	ldr	r2, [r4, #4]
 8017872:	2a08      	cmp	r2, #8
 8017874:	d916      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017876:	b318      	cbz	r0, 80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017878:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801787a:	4630      	mov	r0, r6
 801787c:	f004 fba8 	bl	801bfd0 <ucdr_serialize_string>
 8017880:	6862      	ldr	r2, [r4, #4]
 8017882:	2a09      	cmp	r2, #9
 8017884:	d90e      	bls.n	80178a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017886:	b1d8      	cbz	r0, 80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017888:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801788c:	2709      	movs	r7, #9
 801788e:	e000      	b.n	8017892 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8017890:	b1b0      	cbz	r0, 80178c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8017892:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8017896:	4630      	mov	r0, r6
 8017898:	f004 fb9a 	bl	801bfd0 <ucdr_serialize_string>
 801789c:	6862      	ldr	r2, [r4, #4]
 801789e:	3701      	adds	r7, #1
 80178a0:	4297      	cmp	r7, r2
 80178a2:	d3f5      	bcc.n	8017890 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80178a4:	ea05 0300 	and.w	r3, r5, r0
 80178a8:	b2dd      	uxtb	r5, r3
 80178aa:	e789      	b.n	80177c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80178ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80178ae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80178b2:	4630      	mov	r0, r6
 80178b4:	f7f6 ff3c 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 80178b8:	4005      	ands	r5, r0
 80178ba:	4628      	mov	r0, r5
 80178bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c0:	2500      	movs	r5, #0
 80178c2:	e77d      	b.n	80177c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80178c4:	4028      	ands	r0, r5
 80178c6:	b2c5      	uxtb	r5, r0
 80178c8:	e77a      	b.n	80177c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80178ca:	bf00      	nop

080178cc <uxr_serialize_OBJK_Publisher_Binary>:
 80178cc:	b570      	push	{r4, r5, r6, lr}
 80178ce:	460d      	mov	r5, r1
 80178d0:	7809      	ldrb	r1, [r1, #0]
 80178d2:	4606      	mov	r6, r0
 80178d4:	f7fb fe30 	bl	8013538 <ucdr_serialize_bool>
 80178d8:	782b      	ldrb	r3, [r5, #0]
 80178da:	4604      	mov	r4, r0
 80178dc:	b94b      	cbnz	r3, 80178f2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80178de:	7a29      	ldrb	r1, [r5, #8]
 80178e0:	4630      	mov	r0, r6
 80178e2:	f7fb fe29 	bl	8013538 <ucdr_serialize_bool>
 80178e6:	7a2b      	ldrb	r3, [r5, #8]
 80178e8:	4004      	ands	r4, r0
 80178ea:	b2e4      	uxtb	r4, r4
 80178ec:	b943      	cbnz	r3, 8017900 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80178ee:	4620      	mov	r0, r4
 80178f0:	bd70      	pop	{r4, r5, r6, pc}
 80178f2:	6869      	ldr	r1, [r5, #4]
 80178f4:	4630      	mov	r0, r6
 80178f6:	f004 fb6b 	bl	801bfd0 <ucdr_serialize_string>
 80178fa:	4004      	ands	r4, r0
 80178fc:	b2e4      	uxtb	r4, r4
 80178fe:	e7ee      	b.n	80178de <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8017900:	f105 010c 	add.w	r1, r5, #12
 8017904:	4630      	mov	r0, r6
 8017906:	f7ff ff51 	bl	80177ac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801790a:	4004      	ands	r4, r0
 801790c:	4620      	mov	r0, r4
 801790e:	bd70      	pop	{r4, r5, r6, pc}

08017910 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8017910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017914:	460c      	mov	r4, r1
 8017916:	7809      	ldrb	r1, [r1, #0]
 8017918:	4606      	mov	r6, r0
 801791a:	f7fb fe0d 	bl	8013538 <ucdr_serialize_bool>
 801791e:	7823      	ldrb	r3, [r4, #0]
 8017920:	4605      	mov	r5, r0
 8017922:	b96b      	cbnz	r3, 8017940 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8017924:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017928:	4630      	mov	r0, r6
 801792a:	f7fb fe05 	bl	8013538 <ucdr_serialize_bool>
 801792e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017932:	4005      	ands	r5, r0
 8017934:	b2ed      	uxtb	r5, r5
 8017936:	2b00      	cmp	r3, #0
 8017938:	d16a      	bne.n	8017a10 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801793a:	4628      	mov	r0, r5
 801793c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017940:	6861      	ldr	r1, [r4, #4]
 8017942:	4630      	mov	r0, r6
 8017944:	f7fc f842 	bl	80139cc <ucdr_serialize_uint32_t>
 8017948:	6863      	ldr	r3, [r4, #4]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d06c      	beq.n	8017a28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 801794e:	2800      	cmp	r0, #0
 8017950:	d068      	beq.n	8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017952:	68a1      	ldr	r1, [r4, #8]
 8017954:	4630      	mov	r0, r6
 8017956:	f004 fb3b 	bl	801bfd0 <ucdr_serialize_string>
 801795a:	6862      	ldr	r2, [r4, #4]
 801795c:	2a01      	cmp	r2, #1
 801795e:	d953      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017960:	2800      	cmp	r0, #0
 8017962:	d05f      	beq.n	8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017964:	68e1      	ldr	r1, [r4, #12]
 8017966:	4630      	mov	r0, r6
 8017968:	f004 fb32 	bl	801bfd0 <ucdr_serialize_string>
 801796c:	6862      	ldr	r2, [r4, #4]
 801796e:	2a02      	cmp	r2, #2
 8017970:	d94a      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017972:	2800      	cmp	r0, #0
 8017974:	d056      	beq.n	8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017976:	6921      	ldr	r1, [r4, #16]
 8017978:	4630      	mov	r0, r6
 801797a:	f004 fb29 	bl	801bfd0 <ucdr_serialize_string>
 801797e:	6862      	ldr	r2, [r4, #4]
 8017980:	2a03      	cmp	r2, #3
 8017982:	d941      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017984:	2800      	cmp	r0, #0
 8017986:	d04d      	beq.n	8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8017988:	6961      	ldr	r1, [r4, #20]
 801798a:	4630      	mov	r0, r6
 801798c:	f004 fb20 	bl	801bfd0 <ucdr_serialize_string>
 8017990:	6862      	ldr	r2, [r4, #4]
 8017992:	2a04      	cmp	r2, #4
 8017994:	d938      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8017996:	2800      	cmp	r0, #0
 8017998:	d044      	beq.n	8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801799a:	69a1      	ldr	r1, [r4, #24]
 801799c:	4630      	mov	r0, r6
 801799e:	f004 fb17 	bl	801bfd0 <ucdr_serialize_string>
 80179a2:	6862      	ldr	r2, [r4, #4]
 80179a4:	2a05      	cmp	r2, #5
 80179a6:	d92f      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80179a8:	2800      	cmp	r0, #0
 80179aa:	d03b      	beq.n	8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80179ac:	69e1      	ldr	r1, [r4, #28]
 80179ae:	4630      	mov	r0, r6
 80179b0:	f004 fb0e 	bl	801bfd0 <ucdr_serialize_string>
 80179b4:	6862      	ldr	r2, [r4, #4]
 80179b6:	2a06      	cmp	r2, #6
 80179b8:	d926      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80179ba:	b398      	cbz	r0, 8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80179bc:	6a21      	ldr	r1, [r4, #32]
 80179be:	4630      	mov	r0, r6
 80179c0:	f004 fb06 	bl	801bfd0 <ucdr_serialize_string>
 80179c4:	6862      	ldr	r2, [r4, #4]
 80179c6:	2a07      	cmp	r2, #7
 80179c8:	d91e      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80179ca:	b358      	cbz	r0, 8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80179cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80179ce:	4630      	mov	r0, r6
 80179d0:	f004 fafe 	bl	801bfd0 <ucdr_serialize_string>
 80179d4:	6862      	ldr	r2, [r4, #4]
 80179d6:	2a08      	cmp	r2, #8
 80179d8:	d916      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80179da:	b318      	cbz	r0, 8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80179dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80179de:	4630      	mov	r0, r6
 80179e0:	f004 faf6 	bl	801bfd0 <ucdr_serialize_string>
 80179e4:	6862      	ldr	r2, [r4, #4]
 80179e6:	2a09      	cmp	r2, #9
 80179e8:	d90e      	bls.n	8017a08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80179ea:	b1d8      	cbz	r0, 8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80179ec:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80179f0:	2709      	movs	r7, #9
 80179f2:	e000      	b.n	80179f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80179f4:	b1b0      	cbz	r0, 8017a24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80179f6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80179fa:	4630      	mov	r0, r6
 80179fc:	f004 fae8 	bl	801bfd0 <ucdr_serialize_string>
 8017a00:	6862      	ldr	r2, [r4, #4]
 8017a02:	3701      	adds	r7, #1
 8017a04:	4297      	cmp	r7, r2
 8017a06:	d3f5      	bcc.n	80179f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8017a08:	ea05 0300 	and.w	r3, r5, r0
 8017a0c:	b2dd      	uxtb	r5, r3
 8017a0e:	e789      	b.n	8017924 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017a10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017a12:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017a16:	4630      	mov	r0, r6
 8017a18:	f7f6 fe8a 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 8017a1c:	4005      	ands	r5, r0
 8017a1e:	4628      	mov	r0, r5
 8017a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a24:	2500      	movs	r5, #0
 8017a26:	e77d      	b.n	8017924 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017a28:	4028      	ands	r0, r5
 8017a2a:	b2c5      	uxtb	r5, r0
 8017a2c:	e77a      	b.n	8017924 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8017a2e:	bf00      	nop

08017a30 <uxr_serialize_OBJK_Subscriber_Binary>:
 8017a30:	b570      	push	{r4, r5, r6, lr}
 8017a32:	460d      	mov	r5, r1
 8017a34:	7809      	ldrb	r1, [r1, #0]
 8017a36:	4606      	mov	r6, r0
 8017a38:	f7fb fd7e 	bl	8013538 <ucdr_serialize_bool>
 8017a3c:	782b      	ldrb	r3, [r5, #0]
 8017a3e:	4604      	mov	r4, r0
 8017a40:	b94b      	cbnz	r3, 8017a56 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8017a42:	7a29      	ldrb	r1, [r5, #8]
 8017a44:	4630      	mov	r0, r6
 8017a46:	f7fb fd77 	bl	8013538 <ucdr_serialize_bool>
 8017a4a:	7a2b      	ldrb	r3, [r5, #8]
 8017a4c:	4004      	ands	r4, r0
 8017a4e:	b2e4      	uxtb	r4, r4
 8017a50:	b943      	cbnz	r3, 8017a64 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8017a52:	4620      	mov	r0, r4
 8017a54:	bd70      	pop	{r4, r5, r6, pc}
 8017a56:	6869      	ldr	r1, [r5, #4]
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f004 fab9 	bl	801bfd0 <ucdr_serialize_string>
 8017a5e:	4004      	ands	r4, r0
 8017a60:	b2e4      	uxtb	r4, r4
 8017a62:	e7ee      	b.n	8017a42 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8017a64:	f105 010c 	add.w	r1, r5, #12
 8017a68:	4630      	mov	r0, r6
 8017a6a:	f7ff ff51 	bl	8017910 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8017a6e:	4004      	ands	r4, r0
 8017a70:	4620      	mov	r0, r4
 8017a72:	bd70      	pop	{r4, r5, r6, pc}

08017a74 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8017a74:	b570      	push	{r4, r5, r6, lr}
 8017a76:	460d      	mov	r5, r1
 8017a78:	8809      	ldrh	r1, [r1, #0]
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	f7fb fdb6 	bl	80135ec <ucdr_serialize_uint16_t>
 8017a80:	78a9      	ldrb	r1, [r5, #2]
 8017a82:	4604      	mov	r4, r0
 8017a84:	4630      	mov	r0, r6
 8017a86:	f7fb fd57 	bl	8013538 <ucdr_serialize_bool>
 8017a8a:	78ab      	ldrb	r3, [r5, #2]
 8017a8c:	4004      	ands	r4, r0
 8017a8e:	b2e4      	uxtb	r4, r4
 8017a90:	b9b3      	cbnz	r3, 8017ac0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8017a92:	79a9      	ldrb	r1, [r5, #6]
 8017a94:	4630      	mov	r0, r6
 8017a96:	f7fb fd4f 	bl	8013538 <ucdr_serialize_bool>
 8017a9a:	79ab      	ldrb	r3, [r5, #6]
 8017a9c:	4004      	ands	r4, r0
 8017a9e:	bb33      	cbnz	r3, 8017aee <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8017aa0:	7b29      	ldrb	r1, [r5, #12]
 8017aa2:	4630      	mov	r0, r6
 8017aa4:	f7fb fd48 	bl	8013538 <ucdr_serialize_bool>
 8017aa8:	7b2b      	ldrb	r3, [r5, #12]
 8017aaa:	4004      	ands	r4, r0
 8017aac:	b9c3      	cbnz	r3, 8017ae0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8017aae:	7d29      	ldrb	r1, [r5, #20]
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	f7fb fd41 	bl	8013538 <ucdr_serialize_bool>
 8017ab6:	7d2b      	ldrb	r3, [r5, #20]
 8017ab8:	4004      	ands	r4, r0
 8017aba:	b93b      	cbnz	r3, 8017acc <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8017abc:	4620      	mov	r0, r4
 8017abe:	bd70      	pop	{r4, r5, r6, pc}
 8017ac0:	88a9      	ldrh	r1, [r5, #4]
 8017ac2:	4630      	mov	r0, r6
 8017ac4:	f7fb fd92 	bl	80135ec <ucdr_serialize_uint16_t>
 8017ac8:	4004      	ands	r4, r0
 8017aca:	e7e2      	b.n	8017a92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8017acc:	69aa      	ldr	r2, [r5, #24]
 8017ace:	f105 011c 	add.w	r1, r5, #28
 8017ad2:	4630      	mov	r0, r6
 8017ad4:	f7f6 fe2c 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 8017ad8:	4004      	ands	r4, r0
 8017ada:	b2e4      	uxtb	r4, r4
 8017adc:	4620      	mov	r0, r4
 8017ade:	bd70      	pop	{r4, r5, r6, pc}
 8017ae0:	6929      	ldr	r1, [r5, #16]
 8017ae2:	4630      	mov	r0, r6
 8017ae4:	f7fb ff72 	bl	80139cc <ucdr_serialize_uint32_t>
 8017ae8:	4004      	ands	r4, r0
 8017aea:	b2e4      	uxtb	r4, r4
 8017aec:	e7df      	b.n	8017aae <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8017aee:	68a9      	ldr	r1, [r5, #8]
 8017af0:	4630      	mov	r0, r6
 8017af2:	f7fb ff6b 	bl	80139cc <ucdr_serialize_uint32_t>
 8017af6:	4004      	ands	r4, r0
 8017af8:	b2e4      	uxtb	r4, r4
 8017afa:	e7d1      	b.n	8017aa0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08017afc <uxr_serialize_OBJK_DataReader_Binary>:
 8017afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017afe:	2202      	movs	r2, #2
 8017b00:	460c      	mov	r4, r1
 8017b02:	4606      	mov	r6, r0
 8017b04:	f7fb fafc 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017b08:	78a1      	ldrb	r1, [r4, #2]
 8017b0a:	4605      	mov	r5, r0
 8017b0c:	4630      	mov	r0, r6
 8017b0e:	f7fb fd13 	bl	8013538 <ucdr_serialize_bool>
 8017b12:	78a3      	ldrb	r3, [r4, #2]
 8017b14:	4005      	ands	r5, r0
 8017b16:	b2ed      	uxtb	r5, r5
 8017b18:	b90b      	cbnz	r3, 8017b1e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8017b1a:	4628      	mov	r0, r5
 8017b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b1e:	f104 0108 	add.w	r1, r4, #8
 8017b22:	4630      	mov	r0, r6
 8017b24:	f7ff ffa6 	bl	8017a74 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017b28:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017b2c:	4607      	mov	r7, r0
 8017b2e:	4630      	mov	r0, r6
 8017b30:	f7fb fd02 	bl	8013538 <ucdr_serialize_bool>
 8017b34:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017b38:	4007      	ands	r7, r0
 8017b3a:	b2ff      	uxtb	r7, r7
 8017b3c:	b95b      	cbnz	r3, 8017b56 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8017b3e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8017b42:	4630      	mov	r0, r6
 8017b44:	f7fb fcf8 	bl	8013538 <ucdr_serialize_bool>
 8017b48:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017b4c:	4007      	ands	r7, r0
 8017b4e:	b94b      	cbnz	r3, 8017b64 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8017b50:	403d      	ands	r5, r7
 8017b52:	4628      	mov	r0, r5
 8017b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b56:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7fc f97a 	bl	8013e54 <ucdr_serialize_uint64_t>
 8017b60:	4007      	ands	r7, r0
 8017b62:	e7ec      	b.n	8017b3e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8017b64:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8017b66:	4630      	mov	r0, r6
 8017b68:	f004 fa32 	bl	801bfd0 <ucdr_serialize_string>
 8017b6c:	4007      	ands	r7, r0
 8017b6e:	b2ff      	uxtb	r7, r7
 8017b70:	e7ee      	b.n	8017b50 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8017b72:	bf00      	nop

08017b74 <uxr_serialize_OBJK_DataWriter_Binary>:
 8017b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b76:	2202      	movs	r2, #2
 8017b78:	460d      	mov	r5, r1
 8017b7a:	4606      	mov	r6, r0
 8017b7c:	f7fb fac0 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017b80:	78a9      	ldrb	r1, [r5, #2]
 8017b82:	4604      	mov	r4, r0
 8017b84:	4630      	mov	r0, r6
 8017b86:	f7fb fcd7 	bl	8013538 <ucdr_serialize_bool>
 8017b8a:	78ab      	ldrb	r3, [r5, #2]
 8017b8c:	4004      	ands	r4, r0
 8017b8e:	b2e4      	uxtb	r4, r4
 8017b90:	b90b      	cbnz	r3, 8017b96 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8017b92:	4620      	mov	r0, r4
 8017b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b96:	f105 0108 	add.w	r1, r5, #8
 8017b9a:	4630      	mov	r0, r6
 8017b9c:	f7ff ff6a 	bl	8017a74 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8017ba0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8017ba4:	4607      	mov	r7, r0
 8017ba6:	4630      	mov	r0, r6
 8017ba8:	f7fb fcc6 	bl	8013538 <ucdr_serialize_bool>
 8017bac:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017bb0:	4007      	ands	r7, r0
 8017bb2:	b2ff      	uxtb	r7, r7
 8017bb4:	b913      	cbnz	r3, 8017bbc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8017bb6:	403c      	ands	r4, r7
 8017bb8:	4620      	mov	r0, r4
 8017bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bbc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	f7fc f947 	bl	8013e54 <ucdr_serialize_uint64_t>
 8017bc6:	4007      	ands	r7, r0
 8017bc8:	e7f5      	b.n	8017bb6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8017bca:	bf00      	nop

08017bcc <uxr_deserialize_ObjectVariant>:
 8017bcc:	b570      	push	{r4, r5, r6, lr}
 8017bce:	4605      	mov	r5, r0
 8017bd0:	460e      	mov	r6, r1
 8017bd2:	f7fb fcf5 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017bd6:	b168      	cbz	r0, 8017bf4 <uxr_deserialize_ObjectVariant+0x28>
 8017bd8:	7833      	ldrb	r3, [r6, #0]
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	4604      	mov	r4, r0
 8017bde:	2b0d      	cmp	r3, #13
 8017be0:	d809      	bhi.n	8017bf6 <uxr_deserialize_ObjectVariant+0x2a>
 8017be2:	e8df f003 	tbb	[pc, r3]
 8017be6:	0a64      	.short	0x0a64
 8017be8:	0a0a2323 	.word	0x0a0a2323
 8017bec:	10080a0a 	.word	0x10080a0a
 8017bf0:	5e411010 	.word	0x5e411010
 8017bf4:	2400      	movs	r4, #0
 8017bf6:	4620      	mov	r0, r4
 8017bf8:	bd70      	pop	{r4, r5, r6, pc}
 8017bfa:	1d31      	adds	r1, r6, #4
 8017bfc:	4628      	mov	r0, r5
 8017bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c02:	f7ff bd61 	b.w	80176c8 <uxr_deserialize_DATAWRITER_Representation>
 8017c06:	1d31      	adds	r1, r6, #4
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f7fb fcd9 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d0f0      	beq.n	8017bf4 <uxr_deserialize_ObjectVariant+0x28>
 8017c12:	7933      	ldrb	r3, [r6, #4]
 8017c14:	2b01      	cmp	r3, #1
 8017c16:	d001      	beq.n	8017c1c <uxr_deserialize_ObjectVariant+0x50>
 8017c18:	2b02      	cmp	r3, #2
 8017c1a:	d1ec      	bne.n	8017bf6 <uxr_deserialize_ObjectVariant+0x2a>
 8017c1c:	68b1      	ldr	r1, [r6, #8]
 8017c1e:	4628      	mov	r0, r5
 8017c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c28:	f004 b9e0 	b.w	801bfec <ucdr_deserialize_string>
 8017c2c:	1d31      	adds	r1, r6, #4
 8017c2e:	4628      	mov	r0, r5
 8017c30:	f7fb fcc6 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017c34:	4604      	mov	r4, r0
 8017c36:	b170      	cbz	r0, 8017c56 <uxr_deserialize_ObjectVariant+0x8a>
 8017c38:	7933      	ldrb	r3, [r6, #4]
 8017c3a:	2b02      	cmp	r3, #2
 8017c3c:	d053      	beq.n	8017ce6 <uxr_deserialize_ObjectVariant+0x11a>
 8017c3e:	2b03      	cmp	r3, #3
 8017c40:	d109      	bne.n	8017c56 <uxr_deserialize_ObjectVariant+0x8a>
 8017c42:	f106 0308 	add.w	r3, r6, #8
 8017c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c4a:	f106 010c 	add.w	r1, r6, #12
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f7f6 fd80 	bl	800e754 <ucdr_deserialize_sequence_uint8_t>
 8017c54:	4604      	mov	r4, r0
 8017c56:	2202      	movs	r2, #2
 8017c58:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017c5c:	4628      	mov	r0, r5
 8017c5e:	f7fb fab3 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017c62:	4004      	ands	r4, r0
 8017c64:	b2e4      	uxtb	r4, r4
 8017c66:	e7c6      	b.n	8017bf6 <uxr_deserialize_ObjectVariant+0x2a>
 8017c68:	2204      	movs	r2, #4
 8017c6a:	18b1      	adds	r1, r6, r2
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	f7fb faab 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017c72:	2202      	movs	r2, #2
 8017c74:	f106 0108 	add.w	r1, r6, #8
 8017c78:	4604      	mov	r4, r0
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	f7fb faa4 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017c80:	2202      	movs	r2, #2
 8017c82:	4004      	ands	r4, r0
 8017c84:	f106 010a 	add.w	r1, r6, #10
 8017c88:	4628      	mov	r0, r5
 8017c8a:	f7fb fa9d 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017c8e:	b2e4      	uxtb	r4, r4
 8017c90:	4603      	mov	r3, r0
 8017c92:	f106 010c 	add.w	r1, r6, #12
 8017c96:	4628      	mov	r0, r5
 8017c98:	401c      	ands	r4, r3
 8017c9a:	f7fb fc63 	bl	8013564 <ucdr_deserialize_bool>
 8017c9e:	4004      	ands	r4, r0
 8017ca0:	e7a9      	b.n	8017bf6 <uxr_deserialize_ObjectVariant+0x2a>
 8017ca2:	1d31      	adds	r1, r6, #4
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017caa:	f7ff bbc3 	b.w	8017434 <uxr_deserialize_CLIENT_Representation>
 8017cae:	1d31      	adds	r1, r6, #4
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	f7fb fc85 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	b168      	cbz	r0, 8017cd6 <uxr_deserialize_ObjectVariant+0x10a>
 8017cba:	7933      	ldrb	r3, [r6, #4]
 8017cbc:	2b02      	cmp	r3, #2
 8017cbe:	d003      	beq.n	8017cc8 <uxr_deserialize_ObjectVariant+0xfc>
 8017cc0:	2b03      	cmp	r3, #3
 8017cc2:	d018      	beq.n	8017cf6 <uxr_deserialize_ObjectVariant+0x12a>
 8017cc4:	2b01      	cmp	r3, #1
 8017cc6:	d106      	bne.n	8017cd6 <uxr_deserialize_ObjectVariant+0x10a>
 8017cc8:	68b1      	ldr	r1, [r6, #8]
 8017cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017cce:	4628      	mov	r0, r5
 8017cd0:	f004 f98c 	bl	801bfec <ucdr_deserialize_string>
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8017cda:	4628      	mov	r0, r5
 8017cdc:	f7fc fa0c 	bl	80140f8 <ucdr_deserialize_int16_t>
 8017ce0:	4004      	ands	r4, r0
 8017ce2:	b2e4      	uxtb	r4, r4
 8017ce4:	e787      	b.n	8017bf6 <uxr_deserialize_ObjectVariant+0x2a>
 8017ce6:	68b1      	ldr	r1, [r6, #8]
 8017ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017cec:	4628      	mov	r0, r5
 8017cee:	f004 f97d 	bl	801bfec <ucdr_deserialize_string>
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	e7af      	b.n	8017c56 <uxr_deserialize_ObjectVariant+0x8a>
 8017cf6:	f106 0308 	add.w	r3, r6, #8
 8017cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017cfe:	f106 010c 	add.w	r1, r6, #12
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7f6 fd26 	bl	800e754 <ucdr_deserialize_sequence_uint8_t>
 8017d08:	4604      	mov	r4, r0
 8017d0a:	e7e4      	b.n	8017cd6 <uxr_deserialize_ObjectVariant+0x10a>

08017d0c <uxr_deserialize_BaseObjectRequest>:
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	2202      	movs	r2, #2
 8017d10:	4605      	mov	r5, r0
 8017d12:	460e      	mov	r6, r1
 8017d14:	f7fb fa58 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017d18:	2202      	movs	r2, #2
 8017d1a:	4604      	mov	r4, r0
 8017d1c:	18b1      	adds	r1, r6, r2
 8017d1e:	4628      	mov	r0, r5
 8017d20:	f7fb fa52 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017d24:	4020      	ands	r0, r4
 8017d26:	b2c0      	uxtb	r0, r0
 8017d28:	bd70      	pop	{r4, r5, r6, pc}
 8017d2a:	bf00      	nop

08017d2c <uxr_serialize_ActivityInfoVariant>:
 8017d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d30:	460d      	mov	r5, r1
 8017d32:	7809      	ldrb	r1, [r1, #0]
 8017d34:	4606      	mov	r6, r0
 8017d36:	f7fb fc2d 	bl	8013594 <ucdr_serialize_uint8_t>
 8017d3a:	b130      	cbz	r0, 8017d4a <uxr_serialize_ActivityInfoVariant+0x1e>
 8017d3c:	782b      	ldrb	r3, [r5, #0]
 8017d3e:	2b06      	cmp	r3, #6
 8017d40:	d014      	beq.n	8017d6c <uxr_serialize_ActivityInfoVariant+0x40>
 8017d42:	2b0d      	cmp	r3, #13
 8017d44:	d019      	beq.n	8017d7a <uxr_serialize_ActivityInfoVariant+0x4e>
 8017d46:	2b05      	cmp	r3, #5
 8017d48:	d001      	beq.n	8017d4e <uxr_serialize_ActivityInfoVariant+0x22>
 8017d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d4e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8017d52:	4630      	mov	r0, r6
 8017d54:	f7fc f946 	bl	8013fe4 <ucdr_serialize_int16_t>
 8017d58:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8017d5c:	4604      	mov	r4, r0
 8017d5e:	4630      	mov	r0, r6
 8017d60:	f7fc f878 	bl	8013e54 <ucdr_serialize_uint64_t>
 8017d64:	4020      	ands	r0, r4
 8017d66:	b2c0      	uxtb	r0, r0
 8017d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d6c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8017d70:	4630      	mov	r0, r6
 8017d72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d76:	f7fc b935 	b.w	8013fe4 <ucdr_serialize_int16_t>
 8017d7a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8017d7e:	4630      	mov	r0, r6
 8017d80:	f7fc f930 	bl	8013fe4 <ucdr_serialize_int16_t>
 8017d84:	68e9      	ldr	r1, [r5, #12]
 8017d86:	4681      	mov	r9, r0
 8017d88:	4630      	mov	r0, r6
 8017d8a:	f7fb fe1f 	bl	80139cc <ucdr_serialize_uint32_t>
 8017d8e:	68eb      	ldr	r3, [r5, #12]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d051      	beq.n	8017e38 <uxr_serialize_ActivityInfoVariant+0x10c>
 8017d94:	b1e8      	cbz	r0, 8017dd2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8017d96:	f105 0714 	add.w	r7, r5, #20
 8017d9a:	f04f 0800 	mov.w	r8, #0
 8017d9e:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8017da2:	4630      	mov	r0, r6
 8017da4:	f7fb fbf6 	bl	8013594 <ucdr_serialize_uint8_t>
 8017da8:	b198      	cbz	r0, 8017dd2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8017daa:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8017dae:	2b03      	cmp	r3, #3
 8017db0:	d839      	bhi.n	8017e26 <uxr_serialize_ActivityInfoVariant+0xfa>
 8017db2:	e8df f003 	tbb	[pc, r3]
 8017db6:	1e2b      	.short	0x1e2b
 8017db8:	0211      	.short	0x0211
 8017dba:	6839      	ldr	r1, [r7, #0]
 8017dbc:	4630      	mov	r0, r6
 8017dbe:	f004 f907 	bl	801bfd0 <ucdr_serialize_string>
 8017dc2:	68eb      	ldr	r3, [r5, #12]
 8017dc4:	f108 0801 	add.w	r8, r8, #1
 8017dc8:	4598      	cmp	r8, r3
 8017dca:	d231      	bcs.n	8017e30 <uxr_serialize_ActivityInfoVariant+0x104>
 8017dcc:	3718      	adds	r7, #24
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	d1e5      	bne.n	8017d9e <uxr_serialize_ActivityInfoVariant+0x72>
 8017dd2:	2000      	movs	r0, #0
 8017dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dd8:	2210      	movs	r2, #16
 8017dda:	4639      	mov	r1, r7
 8017ddc:	4630      	mov	r0, r6
 8017dde:	f7fb f98f 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017de2:	6939      	ldr	r1, [r7, #16]
 8017de4:	4604      	mov	r4, r0
 8017de6:	4630      	mov	r0, r6
 8017de8:	f7fb fdf0 	bl	80139cc <ucdr_serialize_uint32_t>
 8017dec:	4020      	ands	r0, r4
 8017dee:	b2c0      	uxtb	r0, r0
 8017df0:	e7e7      	b.n	8017dc2 <uxr_serialize_ActivityInfoVariant+0x96>
 8017df2:	2204      	movs	r2, #4
 8017df4:	4639      	mov	r1, r7
 8017df6:	4630      	mov	r0, r6
 8017df8:	f7fb f982 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017dfc:	88b9      	ldrh	r1, [r7, #4]
 8017dfe:	4604      	mov	r4, r0
 8017e00:	4630      	mov	r0, r6
 8017e02:	f7fb fbf3 	bl	80135ec <ucdr_serialize_uint16_t>
 8017e06:	4020      	ands	r0, r4
 8017e08:	b2c0      	uxtb	r0, r0
 8017e0a:	e7da      	b.n	8017dc2 <uxr_serialize_ActivityInfoVariant+0x96>
 8017e0c:	2202      	movs	r2, #2
 8017e0e:	4639      	mov	r1, r7
 8017e10:	4630      	mov	r0, r6
 8017e12:	f7fb f975 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017e16:	78b9      	ldrb	r1, [r7, #2]
 8017e18:	4604      	mov	r4, r0
 8017e1a:	4630      	mov	r0, r6
 8017e1c:	f7fb fbba 	bl	8013594 <ucdr_serialize_uint8_t>
 8017e20:	4020      	ands	r0, r4
 8017e22:	b2c0      	uxtb	r0, r0
 8017e24:	e7cd      	b.n	8017dc2 <uxr_serialize_ActivityInfoVariant+0x96>
 8017e26:	68eb      	ldr	r3, [r5, #12]
 8017e28:	f108 0801 	add.w	r8, r8, #1
 8017e2c:	4598      	cmp	r8, r3
 8017e2e:	d308      	bcc.n	8017e42 <uxr_serialize_ActivityInfoVariant+0x116>
 8017e30:	ea09 0000 	and.w	r0, r9, r0
 8017e34:	b2c0      	uxtb	r0, r0
 8017e36:	e788      	b.n	8017d4a <uxr_serialize_ActivityInfoVariant+0x1e>
 8017e38:	ea09 0900 	and.w	r9, r9, r0
 8017e3c:	fa5f f089 	uxtb.w	r0, r9
 8017e40:	e783      	b.n	8017d4a <uxr_serialize_ActivityInfoVariant+0x1e>
 8017e42:	3718      	adds	r7, #24
 8017e44:	e7ab      	b.n	8017d9e <uxr_serialize_ActivityInfoVariant+0x72>
 8017e46:	bf00      	nop

08017e48 <uxr_deserialize_BaseObjectReply>:
 8017e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e4c:	2202      	movs	r2, #2
 8017e4e:	4606      	mov	r6, r0
 8017e50:	460f      	mov	r7, r1
 8017e52:	f7fb f9b9 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017e56:	2202      	movs	r2, #2
 8017e58:	18b9      	adds	r1, r7, r2
 8017e5a:	4605      	mov	r5, r0
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	f7fb f9b3 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8017e62:	1d39      	adds	r1, r7, #4
 8017e64:	4680      	mov	r8, r0
 8017e66:	4630      	mov	r0, r6
 8017e68:	f7fb fbaa 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017e6c:	1d79      	adds	r1, r7, #5
 8017e6e:	4604      	mov	r4, r0
 8017e70:	4630      	mov	r0, r6
 8017e72:	f7fb fba5 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8017e76:	ea05 0508 	and.w	r5, r5, r8
 8017e7a:	402c      	ands	r4, r5
 8017e7c:	4020      	ands	r0, r4
 8017e7e:	b2c0      	uxtb	r0, r0
 8017e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e84 <uxr_serialize_ReadSpecification>:
 8017e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e88:	460d      	mov	r5, r1
 8017e8a:	7809      	ldrb	r1, [r1, #0]
 8017e8c:	4606      	mov	r6, r0
 8017e8e:	f7fb fb81 	bl	8013594 <ucdr_serialize_uint8_t>
 8017e92:	7869      	ldrb	r1, [r5, #1]
 8017e94:	4604      	mov	r4, r0
 8017e96:	4630      	mov	r0, r6
 8017e98:	f7fb fb7c 	bl	8013594 <ucdr_serialize_uint8_t>
 8017e9c:	78a9      	ldrb	r1, [r5, #2]
 8017e9e:	4004      	ands	r4, r0
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f7fb fb49 	bl	8013538 <ucdr_serialize_bool>
 8017ea6:	78ab      	ldrb	r3, [r5, #2]
 8017ea8:	b2e4      	uxtb	r4, r4
 8017eaa:	4004      	ands	r4, r0
 8017eac:	b94b      	cbnz	r3, 8017ec2 <uxr_serialize_ReadSpecification+0x3e>
 8017eae:	7a29      	ldrb	r1, [r5, #8]
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f7fb fb41 	bl	8013538 <ucdr_serialize_bool>
 8017eb6:	7a2b      	ldrb	r3, [r5, #8]
 8017eb8:	4004      	ands	r4, r0
 8017eba:	b943      	cbnz	r3, 8017ece <uxr_serialize_ReadSpecification+0x4a>
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ec2:	6869      	ldr	r1, [r5, #4]
 8017ec4:	4630      	mov	r0, r6
 8017ec6:	f004 f883 	bl	801bfd0 <ucdr_serialize_string>
 8017eca:	4004      	ands	r4, r0
 8017ecc:	e7ef      	b.n	8017eae <uxr_serialize_ReadSpecification+0x2a>
 8017ece:	8969      	ldrh	r1, [r5, #10]
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f7fb fb8b 	bl	80135ec <ucdr_serialize_uint16_t>
 8017ed6:	89a9      	ldrh	r1, [r5, #12]
 8017ed8:	4607      	mov	r7, r0
 8017eda:	4630      	mov	r0, r6
 8017edc:	f7fb fb86 	bl	80135ec <ucdr_serialize_uint16_t>
 8017ee0:	89e9      	ldrh	r1, [r5, #14]
 8017ee2:	4007      	ands	r7, r0
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f7fb fb81 	bl	80135ec <ucdr_serialize_uint16_t>
 8017eea:	8a29      	ldrh	r1, [r5, #16]
 8017eec:	4680      	mov	r8, r0
 8017eee:	4630      	mov	r0, r6
 8017ef0:	f7fb fb7c 	bl	80135ec <ucdr_serialize_uint16_t>
 8017ef4:	b2ff      	uxtb	r7, r7
 8017ef6:	ea04 0507 	and.w	r5, r4, r7
 8017efa:	ea05 0508 	and.w	r5, r5, r8
 8017efe:	ea00 0405 	and.w	r4, r0, r5
 8017f02:	4620      	mov	r0, r4
 8017f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f08 <uxr_serialize_CREATE_CLIENT_Payload>:
 8017f08:	f7ff ba3a 	b.w	8017380 <uxr_serialize_CLIENT_Representation>

08017f0c <uxr_serialize_CREATE_Payload>:
 8017f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f0e:	2202      	movs	r2, #2
 8017f10:	4606      	mov	r6, r0
 8017f12:	460d      	mov	r5, r1
 8017f14:	f7fb f8f4 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017f18:	2202      	movs	r2, #2
 8017f1a:	18a9      	adds	r1, r5, r2
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	4630      	mov	r0, r6
 8017f20:	f7fb f8ee 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017f24:	7929      	ldrb	r1, [r5, #4]
 8017f26:	4607      	mov	r7, r0
 8017f28:	4630      	mov	r0, r6
 8017f2a:	f7fb fb33 	bl	8013594 <ucdr_serialize_uint8_t>
 8017f2e:	b170      	cbz	r0, 8017f4e <uxr_serialize_CREATE_Payload+0x42>
 8017f30:	792b      	ldrb	r3, [r5, #4]
 8017f32:	403c      	ands	r4, r7
 8017f34:	3b01      	subs	r3, #1
 8017f36:	b2e4      	uxtb	r4, r4
 8017f38:	2b0d      	cmp	r3, #13
 8017f3a:	d809      	bhi.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 8017f3c:	e8df f003 	tbb	[pc, r3]
 8017f40:	23230a3e 	.word	0x23230a3e
 8017f44:	0a0a0a0a 	.word	0x0a0a0a0a
 8017f48:	12121208 	.word	0x12121208
 8017f4c:	5f58      	.short	0x5f58
 8017f4e:	2400      	movs	r4, #0
 8017f50:	4620      	mov	r0, r4
 8017f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f54:	f105 0108 	add.w	r1, r5, #8
 8017f58:	4630      	mov	r0, r6
 8017f5a:	f7ff fb19 	bl	8017590 <uxr_serialize_DATAWRITER_Representation>
 8017f5e:	4004      	ands	r4, r0
 8017f60:	4620      	mov	r0, r4
 8017f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f64:	7a29      	ldrb	r1, [r5, #8]
 8017f66:	4630      	mov	r0, r6
 8017f68:	f7fb fb14 	bl	8013594 <ucdr_serialize_uint8_t>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d0ee      	beq.n	8017f4e <uxr_serialize_CREATE_Payload+0x42>
 8017f70:	7a2b      	ldrb	r3, [r5, #8]
 8017f72:	2b01      	cmp	r3, #1
 8017f74:	d001      	beq.n	8017f7a <uxr_serialize_CREATE_Payload+0x6e>
 8017f76:	2b02      	cmp	r3, #2
 8017f78:	d1ea      	bne.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 8017f7a:	68e9      	ldr	r1, [r5, #12]
 8017f7c:	4630      	mov	r0, r6
 8017f7e:	f004 f827 	bl	801bfd0 <ucdr_serialize_string>
 8017f82:	4004      	ands	r4, r0
 8017f84:	e7e4      	b.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 8017f86:	7a29      	ldrb	r1, [r5, #8]
 8017f88:	4630      	mov	r0, r6
 8017f8a:	f7fb fb03 	bl	8013594 <ucdr_serialize_uint8_t>
 8017f8e:	4607      	mov	r7, r0
 8017f90:	b158      	cbz	r0, 8017faa <uxr_serialize_CREATE_Payload+0x9e>
 8017f92:	7a2b      	ldrb	r3, [r5, #8]
 8017f94:	2b02      	cmp	r3, #2
 8017f96:	d039      	beq.n	801800c <uxr_serialize_CREATE_Payload+0x100>
 8017f98:	2b03      	cmp	r3, #3
 8017f9a:	d106      	bne.n	8017faa <uxr_serialize_CREATE_Payload+0x9e>
 8017f9c:	68ea      	ldr	r2, [r5, #12]
 8017f9e:	f105 0110 	add.w	r1, r5, #16
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	f7f6 fbc4 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 8017fa8:	4607      	mov	r7, r0
 8017faa:	2202      	movs	r2, #2
 8017fac:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f7fb f8a5 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8017fb6:	4038      	ands	r0, r7
 8017fb8:	4004      	ands	r4, r0
 8017fba:	e7c9      	b.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 8017fbc:	7a29      	ldrb	r1, [r5, #8]
 8017fbe:	4630      	mov	r0, r6
 8017fc0:	f7fb fae8 	bl	8013594 <ucdr_serialize_uint8_t>
 8017fc4:	4607      	mov	r7, r0
 8017fc6:	b158      	cbz	r0, 8017fe0 <uxr_serialize_CREATE_Payload+0xd4>
 8017fc8:	7a2b      	ldrb	r3, [r5, #8]
 8017fca:	2b02      	cmp	r3, #2
 8017fcc:	d003      	beq.n	8017fd6 <uxr_serialize_CREATE_Payload+0xca>
 8017fce:	2b03      	cmp	r3, #3
 8017fd0:	d022      	beq.n	8018018 <uxr_serialize_CREATE_Payload+0x10c>
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d104      	bne.n	8017fe0 <uxr_serialize_CREATE_Payload+0xd4>
 8017fd6:	68e9      	ldr	r1, [r5, #12]
 8017fd8:	4630      	mov	r0, r6
 8017fda:	f003 fff9 	bl	801bfd0 <ucdr_serialize_string>
 8017fde:	4607      	mov	r7, r0
 8017fe0:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	f7fb fffd 	bl	8013fe4 <ucdr_serialize_int16_t>
 8017fea:	4038      	ands	r0, r7
 8017fec:	4004      	ands	r4, r0
 8017fee:	e7af      	b.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 8017ff0:	f105 0108 	add.w	r1, r5, #8
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	f7ff fa81 	bl	80174fc <uxr_serialize_AGENT_Representation>
 8017ffa:	4004      	ands	r4, r0
 8017ffc:	e7a8      	b.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 8017ffe:	f105 0108 	add.w	r1, r5, #8
 8018002:	4630      	mov	r0, r6
 8018004:	f7ff f9bc 	bl	8017380 <uxr_serialize_CLIENT_Representation>
 8018008:	4004      	ands	r4, r0
 801800a:	e7a1      	b.n	8017f50 <uxr_serialize_CREATE_Payload+0x44>
 801800c:	68e9      	ldr	r1, [r5, #12]
 801800e:	4630      	mov	r0, r6
 8018010:	f003 ffde 	bl	801bfd0 <ucdr_serialize_string>
 8018014:	4607      	mov	r7, r0
 8018016:	e7c8      	b.n	8017faa <uxr_serialize_CREATE_Payload+0x9e>
 8018018:	68ea      	ldr	r2, [r5, #12]
 801801a:	f105 0110 	add.w	r1, r5, #16
 801801e:	4630      	mov	r0, r6
 8018020:	f7f6 fb86 	bl	800e730 <ucdr_serialize_sequence_uint8_t>
 8018024:	4607      	mov	r7, r0
 8018026:	e7db      	b.n	8017fe0 <uxr_serialize_CREATE_Payload+0xd4>

08018028 <uxr_deserialize_GET_INFO_Payload>:
 8018028:	b570      	push	{r4, r5, r6, lr}
 801802a:	2202      	movs	r2, #2
 801802c:	4605      	mov	r5, r0
 801802e:	460e      	mov	r6, r1
 8018030:	f7fb f8ca 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8018034:	2202      	movs	r2, #2
 8018036:	18b1      	adds	r1, r6, r2
 8018038:	4604      	mov	r4, r0
 801803a:	4628      	mov	r0, r5
 801803c:	f7fb f8c4 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8018040:	1d31      	adds	r1, r6, #4
 8018042:	4004      	ands	r4, r0
 8018044:	4628      	mov	r0, r5
 8018046:	f7fb fdeb 	bl	8013c20 <ucdr_deserialize_uint32_t>
 801804a:	b2e4      	uxtb	r4, r4
 801804c:	4020      	ands	r0, r4
 801804e:	bd70      	pop	{r4, r5, r6, pc}

08018050 <uxr_serialize_DELETE_Payload>:
 8018050:	b570      	push	{r4, r5, r6, lr}
 8018052:	2202      	movs	r2, #2
 8018054:	4605      	mov	r5, r0
 8018056:	460e      	mov	r6, r1
 8018058:	f7fb f852 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801805c:	2202      	movs	r2, #2
 801805e:	4604      	mov	r4, r0
 8018060:	18b1      	adds	r1, r6, r2
 8018062:	4628      	mov	r0, r5
 8018064:	f7fb f84c 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8018068:	4020      	ands	r0, r4
 801806a:	b2c0      	uxtb	r0, r0
 801806c:	bd70      	pop	{r4, r5, r6, pc}
 801806e:	bf00      	nop

08018070 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018074:	4605      	mov	r5, r0
 8018076:	460e      	mov	r6, r1
 8018078:	f7fb faa2 	bl	80135c0 <ucdr_deserialize_uint8_t>
 801807c:	1c71      	adds	r1, r6, #1
 801807e:	4604      	mov	r4, r0
 8018080:	4628      	mov	r0, r5
 8018082:	f7fb fa9d 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8018086:	2204      	movs	r2, #4
 8018088:	18b1      	adds	r1, r6, r2
 801808a:	4681      	mov	r9, r0
 801808c:	4628      	mov	r0, r5
 801808e:	f7fb f89b 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8018092:	f106 0108 	add.w	r1, r6, #8
 8018096:	4680      	mov	r8, r0
 8018098:	2202      	movs	r2, #2
 801809a:	4628      	mov	r0, r5
 801809c:	f7fb f894 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 80180a0:	2202      	movs	r2, #2
 80180a2:	f106 010a 	add.w	r1, r6, #10
 80180a6:	4607      	mov	r7, r0
 80180a8:	4628      	mov	r0, r5
 80180aa:	f7fb f88d 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 80180ae:	ea04 0409 	and.w	r4, r4, r9
 80180b2:	4603      	mov	r3, r0
 80180b4:	f106 010c 	add.w	r1, r6, #12
 80180b8:	4628      	mov	r0, r5
 80180ba:	b2e4      	uxtb	r4, r4
 80180bc:	461d      	mov	r5, r3
 80180be:	ea04 0408 	and.w	r4, r4, r8
 80180c2:	f7fb fa4f 	bl	8013564 <ucdr_deserialize_bool>
 80180c6:	4027      	ands	r7, r4
 80180c8:	403d      	ands	r5, r7
 80180ca:	4028      	ands	r0, r5
 80180cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080180d0 <uxr_deserialize_STATUS_Payload>:
 80180d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180d4:	2202      	movs	r2, #2
 80180d6:	4606      	mov	r6, r0
 80180d8:	460f      	mov	r7, r1
 80180da:	f7fb f875 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 80180de:	2202      	movs	r2, #2
 80180e0:	18b9      	adds	r1, r7, r2
 80180e2:	4605      	mov	r5, r0
 80180e4:	4630      	mov	r0, r6
 80180e6:	f7fb f86f 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 80180ea:	1d39      	adds	r1, r7, #4
 80180ec:	4680      	mov	r8, r0
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7fb fa66 	bl	80135c0 <ucdr_deserialize_uint8_t>
 80180f4:	1d79      	adds	r1, r7, #5
 80180f6:	4604      	mov	r4, r0
 80180f8:	4630      	mov	r0, r6
 80180fa:	f7fb fa61 	bl	80135c0 <ucdr_deserialize_uint8_t>
 80180fe:	ea05 0508 	and.w	r5, r5, r8
 8018102:	402c      	ands	r4, r5
 8018104:	4020      	ands	r0, r4
 8018106:	b2c0      	uxtb	r0, r0
 8018108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801810c <uxr_serialize_INFO_Payload>:
 801810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018110:	2202      	movs	r2, #2
 8018112:	460c      	mov	r4, r1
 8018114:	4605      	mov	r5, r0
 8018116:	f7fa fff3 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801811a:	2202      	movs	r2, #2
 801811c:	18a1      	adds	r1, r4, r2
 801811e:	4680      	mov	r8, r0
 8018120:	4628      	mov	r0, r5
 8018122:	f7fa ffed 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8018126:	7921      	ldrb	r1, [r4, #4]
 8018128:	4607      	mov	r7, r0
 801812a:	4628      	mov	r0, r5
 801812c:	f7fb fa32 	bl	8013594 <ucdr_serialize_uint8_t>
 8018130:	7961      	ldrb	r1, [r4, #5]
 8018132:	4606      	mov	r6, r0
 8018134:	4628      	mov	r0, r5
 8018136:	f7fb fa2d 	bl	8013594 <ucdr_serialize_uint8_t>
 801813a:	ea08 0807 	and.w	r8, r8, r7
 801813e:	ea06 0608 	and.w	r6, r6, r8
 8018142:	ea00 0706 	and.w	r7, r0, r6
 8018146:	7a21      	ldrb	r1, [r4, #8]
 8018148:	4628      	mov	r0, r5
 801814a:	f7fb f9f5 	bl	8013538 <ucdr_serialize_bool>
 801814e:	7a23      	ldrb	r3, [r4, #8]
 8018150:	b2ff      	uxtb	r7, r7
 8018152:	4606      	mov	r6, r0
 8018154:	b96b      	cbnz	r3, 8018172 <uxr_serialize_INFO_Payload+0x66>
 8018156:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801815a:	4628      	mov	r0, r5
 801815c:	f7fb f9ec 	bl	8013538 <ucdr_serialize_bool>
 8018160:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8018164:	4030      	ands	r0, r6
 8018166:	b2c6      	uxtb	r6, r0
 8018168:	b983      	cbnz	r3, 801818c <uxr_serialize_INFO_Payload+0x80>
 801816a:	ea06 0007 	and.w	r0, r6, r7
 801816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018172:	7b21      	ldrb	r1, [r4, #12]
 8018174:	4628      	mov	r0, r5
 8018176:	f7fb fa0d 	bl	8013594 <ucdr_serialize_uint8_t>
 801817a:	b188      	cbz	r0, 80181a0 <uxr_serialize_INFO_Payload+0x94>
 801817c:	f104 010c 	add.w	r1, r4, #12
 8018180:	4628      	mov	r0, r5
 8018182:	f7ff fa2d 	bl	80175e0 <uxr_serialize_ObjectVariant.part.0>
 8018186:	4030      	ands	r0, r6
 8018188:	b2c6      	uxtb	r6, r0
 801818a:	e7e4      	b.n	8018156 <uxr_serialize_INFO_Payload+0x4a>
 801818c:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8018190:	4628      	mov	r0, r5
 8018192:	f7ff fdcb 	bl	8017d2c <uxr_serialize_ActivityInfoVariant>
 8018196:	4006      	ands	r6, r0
 8018198:	ea06 0007 	and.w	r0, r6, r7
 801819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181a0:	4606      	mov	r6, r0
 80181a2:	e7d8      	b.n	8018156 <uxr_serialize_INFO_Payload+0x4a>

080181a4 <uxr_serialize_READ_DATA_Payload>:
 80181a4:	b570      	push	{r4, r5, r6, lr}
 80181a6:	2202      	movs	r2, #2
 80181a8:	4605      	mov	r5, r0
 80181aa:	460e      	mov	r6, r1
 80181ac:	f7fa ffa8 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80181b0:	2202      	movs	r2, #2
 80181b2:	18b1      	adds	r1, r6, r2
 80181b4:	4604      	mov	r4, r0
 80181b6:	4628      	mov	r0, r5
 80181b8:	f7fa ffa2 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80181bc:	1d31      	adds	r1, r6, #4
 80181be:	4004      	ands	r4, r0
 80181c0:	4628      	mov	r0, r5
 80181c2:	f7ff fe5f 	bl	8017e84 <uxr_serialize_ReadSpecification>
 80181c6:	b2e4      	uxtb	r4, r4
 80181c8:	4020      	ands	r0, r4
 80181ca:	bd70      	pop	{r4, r5, r6, pc}

080181cc <uxr_serialize_WRITE_DATA_Payload_Data>:
 80181cc:	b570      	push	{r4, r5, r6, lr}
 80181ce:	2202      	movs	r2, #2
 80181d0:	4605      	mov	r5, r0
 80181d2:	460e      	mov	r6, r1
 80181d4:	f7fa ff94 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80181d8:	2202      	movs	r2, #2
 80181da:	4604      	mov	r4, r0
 80181dc:	18b1      	adds	r1, r6, r2
 80181de:	4628      	mov	r0, r5
 80181e0:	f7fa ff8e 	bl	8013100 <ucdr_serialize_array_uint8_t>
 80181e4:	4020      	ands	r0, r4
 80181e6:	b2c0      	uxtb	r0, r0
 80181e8:	bd70      	pop	{r4, r5, r6, pc}
 80181ea:	bf00      	nop

080181ec <uxr_serialize_ACKNACK_Payload>:
 80181ec:	b570      	push	{r4, r5, r6, lr}
 80181ee:	460c      	mov	r4, r1
 80181f0:	460e      	mov	r6, r1
 80181f2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80181f6:	4605      	mov	r5, r0
 80181f8:	f7fb f9f8 	bl	80135ec <ucdr_serialize_uint16_t>
 80181fc:	2202      	movs	r2, #2
 80181fe:	4621      	mov	r1, r4
 8018200:	4604      	mov	r4, r0
 8018202:	4628      	mov	r0, r5
 8018204:	f7fa ff7c 	bl	8013100 <ucdr_serialize_array_uint8_t>
 8018208:	7931      	ldrb	r1, [r6, #4]
 801820a:	4004      	ands	r4, r0
 801820c:	4628      	mov	r0, r5
 801820e:	f7fb f9c1 	bl	8013594 <ucdr_serialize_uint8_t>
 8018212:	b2e4      	uxtb	r4, r4
 8018214:	4020      	ands	r0, r4
 8018216:	bd70      	pop	{r4, r5, r6, pc}

08018218 <uxr_deserialize_ACKNACK_Payload>:
 8018218:	b570      	push	{r4, r5, r6, lr}
 801821a:	4605      	mov	r5, r0
 801821c:	460e      	mov	r6, r1
 801821e:	f7fb fae9 	bl	80137f4 <ucdr_deserialize_uint16_t>
 8018222:	2202      	movs	r2, #2
 8018224:	18b1      	adds	r1, r6, r2
 8018226:	4604      	mov	r4, r0
 8018228:	4628      	mov	r0, r5
 801822a:	f7fa ffcd 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801822e:	1d31      	adds	r1, r6, #4
 8018230:	4004      	ands	r4, r0
 8018232:	4628      	mov	r0, r5
 8018234:	f7fb f9c4 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8018238:	b2e4      	uxtb	r4, r4
 801823a:	4020      	ands	r0, r4
 801823c:	bd70      	pop	{r4, r5, r6, pc}
 801823e:	bf00      	nop

08018240 <uxr_serialize_HEARTBEAT_Payload>:
 8018240:	b570      	push	{r4, r5, r6, lr}
 8018242:	460d      	mov	r5, r1
 8018244:	8809      	ldrh	r1, [r1, #0]
 8018246:	4606      	mov	r6, r0
 8018248:	f7fb f9d0 	bl	80135ec <ucdr_serialize_uint16_t>
 801824c:	8869      	ldrh	r1, [r5, #2]
 801824e:	4604      	mov	r4, r0
 8018250:	4630      	mov	r0, r6
 8018252:	f7fb f9cb 	bl	80135ec <ucdr_serialize_uint16_t>
 8018256:	7929      	ldrb	r1, [r5, #4]
 8018258:	4004      	ands	r4, r0
 801825a:	4630      	mov	r0, r6
 801825c:	f7fb f99a 	bl	8013594 <ucdr_serialize_uint8_t>
 8018260:	b2e4      	uxtb	r4, r4
 8018262:	4020      	ands	r0, r4
 8018264:	bd70      	pop	{r4, r5, r6, pc}
 8018266:	bf00      	nop

08018268 <uxr_deserialize_HEARTBEAT_Payload>:
 8018268:	b570      	push	{r4, r5, r6, lr}
 801826a:	4605      	mov	r5, r0
 801826c:	460e      	mov	r6, r1
 801826e:	f7fb fac1 	bl	80137f4 <ucdr_deserialize_uint16_t>
 8018272:	1cb1      	adds	r1, r6, #2
 8018274:	4604      	mov	r4, r0
 8018276:	4628      	mov	r0, r5
 8018278:	f7fb fabc 	bl	80137f4 <ucdr_deserialize_uint16_t>
 801827c:	1d31      	adds	r1, r6, #4
 801827e:	4004      	ands	r4, r0
 8018280:	4628      	mov	r0, r5
 8018282:	f7fb f99d 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8018286:	b2e4      	uxtb	r4, r4
 8018288:	4020      	ands	r0, r4
 801828a:	bd70      	pop	{r4, r5, r6, pc}

0801828c <uxr_serialize_TIMESTAMP_Payload>:
 801828c:	b570      	push	{r4, r5, r6, lr}
 801828e:	460d      	mov	r5, r1
 8018290:	6809      	ldr	r1, [r1, #0]
 8018292:	4606      	mov	r6, r0
 8018294:	f7fb ffac 	bl	80141f0 <ucdr_serialize_int32_t>
 8018298:	6869      	ldr	r1, [r5, #4]
 801829a:	4604      	mov	r4, r0
 801829c:	4630      	mov	r0, r6
 801829e:	f7fb fb95 	bl	80139cc <ucdr_serialize_uint32_t>
 80182a2:	4020      	ands	r0, r4
 80182a4:	b2c0      	uxtb	r0, r0
 80182a6:	bd70      	pop	{r4, r5, r6, pc}

080182a8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	4605      	mov	r5, r0
 80182ae:	460e      	mov	r6, r1
 80182b0:	f7fc f838 	bl	8014324 <ucdr_deserialize_int32_t>
 80182b4:	1d31      	adds	r1, r6, #4
 80182b6:	4607      	mov	r7, r0
 80182b8:	4628      	mov	r0, r5
 80182ba:	f7fb fcb1 	bl	8013c20 <ucdr_deserialize_uint32_t>
 80182be:	f106 0108 	add.w	r1, r6, #8
 80182c2:	4680      	mov	r8, r0
 80182c4:	4628      	mov	r0, r5
 80182c6:	f7fc f82d 	bl	8014324 <ucdr_deserialize_int32_t>
 80182ca:	f106 010c 	add.w	r1, r6, #12
 80182ce:	4604      	mov	r4, r0
 80182d0:	4628      	mov	r0, r5
 80182d2:	f7fb fca5 	bl	8013c20 <ucdr_deserialize_uint32_t>
 80182d6:	ea07 0708 	and.w	r7, r7, r8
 80182da:	403c      	ands	r4, r7
 80182dc:	f106 0110 	add.w	r1, r6, #16
 80182e0:	4004      	ands	r4, r0
 80182e2:	4628      	mov	r0, r5
 80182e4:	f7fc f81e 	bl	8014324 <ucdr_deserialize_int32_t>
 80182e8:	f106 0114 	add.w	r1, r6, #20
 80182ec:	4607      	mov	r7, r0
 80182ee:	4628      	mov	r0, r5
 80182f0:	f7fb fc96 	bl	8013c20 <ucdr_deserialize_uint32_t>
 80182f4:	b2e4      	uxtb	r4, r4
 80182f6:	403c      	ands	r4, r7
 80182f8:	4020      	ands	r0, r4
 80182fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182fe:	bf00      	nop

08018300 <uxr_serialize_SampleIdentity>:
 8018300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018304:	220c      	movs	r2, #12
 8018306:	4604      	mov	r4, r0
 8018308:	460d      	mov	r5, r1
 801830a:	f7fa fef9 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801830e:	2203      	movs	r2, #3
 8018310:	f105 010c 	add.w	r1, r5, #12
 8018314:	4680      	mov	r8, r0
 8018316:	4620      	mov	r0, r4
 8018318:	f7fa fef2 	bl	8013100 <ucdr_serialize_array_uint8_t>
 801831c:	7be9      	ldrb	r1, [r5, #15]
 801831e:	4681      	mov	r9, r0
 8018320:	4620      	mov	r0, r4
 8018322:	f7fb f937 	bl	8013594 <ucdr_serialize_uint8_t>
 8018326:	6929      	ldr	r1, [r5, #16]
 8018328:	4607      	mov	r7, r0
 801832a:	4620      	mov	r0, r4
 801832c:	f7fb ff60 	bl	80141f0 <ucdr_serialize_int32_t>
 8018330:	6969      	ldr	r1, [r5, #20]
 8018332:	4606      	mov	r6, r0
 8018334:	4620      	mov	r0, r4
 8018336:	f7fb fb49 	bl	80139cc <ucdr_serialize_uint32_t>
 801833a:	ea08 0809 	and.w	r8, r8, r9
 801833e:	ea07 0708 	and.w	r7, r7, r8
 8018342:	403e      	ands	r6, r7
 8018344:	4030      	ands	r0, r6
 8018346:	b2c0      	uxtb	r0, r0
 8018348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801834c <uxr_deserialize_SampleIdentity>:
 801834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018350:	220c      	movs	r2, #12
 8018352:	4604      	mov	r4, r0
 8018354:	460d      	mov	r5, r1
 8018356:	f7fa ff37 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801835a:	2203      	movs	r2, #3
 801835c:	f105 010c 	add.w	r1, r5, #12
 8018360:	4680      	mov	r8, r0
 8018362:	4620      	mov	r0, r4
 8018364:	f7fa ff30 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 8018368:	f105 010f 	add.w	r1, r5, #15
 801836c:	4681      	mov	r9, r0
 801836e:	4620      	mov	r0, r4
 8018370:	f7fb f926 	bl	80135c0 <ucdr_deserialize_uint8_t>
 8018374:	f105 0110 	add.w	r1, r5, #16
 8018378:	4607      	mov	r7, r0
 801837a:	4620      	mov	r0, r4
 801837c:	f7fb ffd2 	bl	8014324 <ucdr_deserialize_int32_t>
 8018380:	f105 0114 	add.w	r1, r5, #20
 8018384:	4606      	mov	r6, r0
 8018386:	4620      	mov	r0, r4
 8018388:	f7fb fc4a 	bl	8013c20 <ucdr_deserialize_uint32_t>
 801838c:	ea08 0809 	and.w	r8, r8, r9
 8018390:	ea07 0708 	and.w	r7, r7, r8
 8018394:	403e      	ands	r6, r7
 8018396:	4030      	ands	r0, r6
 8018398:	b2c0      	uxtb	r0, r0
 801839a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801839e:	bf00      	nop

080183a0 <rcl_client_get_rmw_handle>:
 80183a0:	b118      	cbz	r0, 80183aa <rcl_client_get_rmw_handle+0xa>
 80183a2:	6800      	ldr	r0, [r0, #0]
 80183a4:	b108      	cbz	r0, 80183aa <rcl_client_get_rmw_handle+0xa>
 80183a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80183aa:	4770      	bx	lr

080183ac <rcl_send_request>:
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d048      	beq.n	8018442 <rcl_send_request+0x96>
 80183b0:	b570      	push	{r4, r5, r6, lr}
 80183b2:	4604      	mov	r4, r0
 80183b4:	6800      	ldr	r0, [r0, #0]
 80183b6:	b08a      	sub	sp, #40	@ 0x28
 80183b8:	b1c0      	cbz	r0, 80183ec <rcl_send_request+0x40>
 80183ba:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80183be:	b1ab      	cbz	r3, 80183ec <rcl_send_request+0x40>
 80183c0:	460e      	mov	r6, r1
 80183c2:	b1b9      	cbz	r1, 80183f4 <rcl_send_request+0x48>
 80183c4:	4615      	mov	r5, r2
 80183c6:	b1aa      	cbz	r2, 80183f4 <rcl_send_request+0x48>
 80183c8:	2105      	movs	r1, #5
 80183ca:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80183ce:	f7f8 fa09 	bl	80107e4 <__atomic_load_8>
 80183d2:	6823      	ldr	r3, [r4, #0]
 80183d4:	e9c5 0100 	strd	r0, r1, [r5]
 80183d8:	462a      	mov	r2, r5
 80183da:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80183de:	4631      	mov	r1, r6
 80183e0:	f003 f918 	bl	801b614 <rmw_send_request>
 80183e4:	b148      	cbz	r0, 80183fa <rcl_send_request+0x4e>
 80183e6:	2001      	movs	r0, #1
 80183e8:	b00a      	add	sp, #40	@ 0x28
 80183ea:	bd70      	pop	{r4, r5, r6, pc}
 80183ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80183f0:	b00a      	add	sp, #40	@ 0x28
 80183f2:	bd70      	pop	{r4, r5, r6, pc}
 80183f4:	200b      	movs	r0, #11
 80183f6:	b00a      	add	sp, #40	@ 0x28
 80183f8:	bd70      	pop	{r4, r5, r6, pc}
 80183fa:	6820      	ldr	r0, [r4, #0]
 80183fc:	2305      	movs	r3, #5
 80183fe:	9300      	str	r3, [sp, #0]
 8018400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018404:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8018408:	f7f8 fa58 	bl	80108bc <__atomic_exchange_8>
 801840c:	6823      	ldr	r3, [r4, #0]
 801840e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8018412:	b1a2      	cbz	r2, 801843e <rcl_send_request+0x92>
 8018414:	a905      	add	r1, sp, #20
 8018416:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801841a:	f003 f839 	bl	801b490 <rmw_get_gid_for_client>
 801841e:	4601      	mov	r1, r0
 8018420:	b990      	cbnz	r0, 8018448 <rcl_send_request+0x9c>
 8018422:	6822      	ldr	r2, [r4, #0]
 8018424:	ab06      	add	r3, sp, #24
 8018426:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 801842a:	9302      	str	r3, [sp, #8]
 801842c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018430:	4632      	mov	r2, r6
 8018432:	e9cd 4500 	strd	r4, r5, [sp]
 8018436:	f000 fdc3 	bl	8018fc0 <rcl_send_service_event_message>
 801843a:	2800      	cmp	r0, #0
 801843c:	d1d4      	bne.n	80183e8 <rcl_send_request+0x3c>
 801843e:	2000      	movs	r0, #0
 8018440:	e7d2      	b.n	80183e8 <rcl_send_request+0x3c>
 8018442:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8018446:	4770      	bx	lr
 8018448:	f000 f878 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 801844c:	e7cc      	b.n	80183e8 <rcl_send_request+0x3c>
 801844e:	bf00      	nop

08018450 <rcl_take_response>:
 8018450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018452:	468e      	mov	lr, r1
 8018454:	460c      	mov	r4, r1
 8018456:	4617      	mov	r7, r2
 8018458:	4605      	mov	r5, r0
 801845a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801845e:	b095      	sub	sp, #84	@ 0x54
 8018460:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8018464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018468:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801846c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018470:	2d00      	cmp	r5, #0
 8018472:	d044      	beq.n	80184fe <rcl_take_response+0xae>
 8018474:	682b      	ldr	r3, [r5, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d041      	beq.n	80184fe <rcl_take_response+0xae>
 801847a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801847e:	2800      	cmp	r0, #0
 8018480:	d03d      	beq.n	80184fe <rcl_take_response+0xae>
 8018482:	2f00      	cmp	r7, #0
 8018484:	d03e      	beq.n	8018504 <rcl_take_response+0xb4>
 8018486:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8018520 <rcl_take_response+0xd0>
 801848a:	2300      	movs	r3, #0
 801848c:	f88d 3013 	strb.w	r3, [sp, #19]
 8018490:	463a      	mov	r2, r7
 8018492:	f10d 0313 	add.w	r3, sp, #19
 8018496:	a90a      	add	r1, sp, #40	@ 0x28
 8018498:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801849c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80184a0:	f003 f9b8 	bl	801b814 <rmw_take_response>
 80184a4:	4606      	mov	r6, r0
 80184a6:	bb78      	cbnz	r0, 8018508 <rcl_take_response+0xb8>
 80184a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80184ac:	b373      	cbz	r3, 801850c <rcl_take_response+0xbc>
 80184ae:	682b      	ldr	r3, [r5, #0]
 80184b0:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80184b4:	b1aa      	cbz	r2, 80184e2 <rcl_take_response+0x92>
 80184b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80184ba:	a905      	add	r1, sp, #20
 80184bc:	f002 ffe8 	bl	801b490 <rmw_get_gid_for_client>
 80184c0:	bb38      	cbnz	r0, 8018512 <rcl_take_response+0xc2>
 80184c2:	682b      	ldr	r3, [r5, #0]
 80184c4:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 80184c8:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 80184cc:	ab06      	add	r3, sp, #24
 80184ce:	ed8d 7b00 	vstr	d7, [sp]
 80184d2:	463a      	mov	r2, r7
 80184d4:	9302      	str	r3, [sp, #8]
 80184d6:	2103      	movs	r1, #3
 80184d8:	f000 fd72 	bl	8018fc0 <rcl_send_service_event_message>
 80184dc:	2800      	cmp	r0, #0
 80184de:	bf18      	it	ne
 80184e0:	4606      	movne	r6, r0
 80184e2:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 80184e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80184ea:	46a4      	mov	ip, r4
 80184ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80184f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80184f8:	4630      	mov	r0, r6
 80184fa:	b015      	add	sp, #84	@ 0x54
 80184fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184fe:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8018502:	e7ee      	b.n	80184e2 <rcl_take_response+0x92>
 8018504:	260b      	movs	r6, #11
 8018506:	e7ec      	b.n	80184e2 <rcl_take_response+0x92>
 8018508:	2601      	movs	r6, #1
 801850a:	e7ea      	b.n	80184e2 <rcl_take_response+0x92>
 801850c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8018510:	e7e7      	b.n	80184e2 <rcl_take_response+0x92>
 8018512:	f000 f813 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 8018516:	4606      	mov	r6, r0
 8018518:	e7e3      	b.n	80184e2 <rcl_take_response+0x92>
 801851a:	bf00      	nop
 801851c:	f3af 8000 	nop.w
	...

08018528 <rcl_client_is_valid>:
 8018528:	b130      	cbz	r0, 8018538 <rcl_client_is_valid+0x10>
 801852a:	6800      	ldr	r0, [r0, #0]
 801852c:	b120      	cbz	r0, 8018538 <rcl_client_is_valid+0x10>
 801852e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018532:	3800      	subs	r0, #0
 8018534:	bf18      	it	ne
 8018536:	2001      	movne	r0, #1
 8018538:	4770      	bx	lr
 801853a:	bf00      	nop

0801853c <rcl_convert_rmw_ret_to_rcl_ret>:
 801853c:	280b      	cmp	r0, #11
 801853e:	dc0d      	bgt.n	801855c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8018540:	2800      	cmp	r0, #0
 8018542:	db09      	blt.n	8018558 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018544:	280b      	cmp	r0, #11
 8018546:	d807      	bhi.n	8018558 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018548:	e8df f000 	tbb	[pc, r0]
 801854c:	07060607 	.word	0x07060607
 8018550:	06060606 	.word	0x06060606
 8018554:	07070606 	.word	0x07070606
 8018558:	2001      	movs	r0, #1
 801855a:	4770      	bx	lr
 801855c:	28cb      	cmp	r0, #203	@ 0xcb
 801855e:	bf14      	ite	ne
 8018560:	2001      	movne	r0, #1
 8018562:	20cb      	moveq	r0, #203	@ 0xcb
 8018564:	4770      	bx	lr
 8018566:	bf00      	nop

08018568 <rcl_get_zero_initialized_context>:
 8018568:	4a03      	ldr	r2, [pc, #12]	@ (8018578 <rcl_get_zero_initialized_context+0x10>)
 801856a:	4603      	mov	r3, r0
 801856c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018570:	e883 0003 	stmia.w	r3, {r0, r1}
 8018574:	4618      	mov	r0, r3
 8018576:	4770      	bx	lr
 8018578:	0802112c 	.word	0x0802112c

0801857c <rcl_context_is_valid>:
 801857c:	b118      	cbz	r0, 8018586 <rcl_context_is_valid+0xa>
 801857e:	6840      	ldr	r0, [r0, #4]
 8018580:	3800      	subs	r0, #0
 8018582:	bf18      	it	ne
 8018584:	2001      	movne	r0, #1
 8018586:	4770      	bx	lr

08018588 <__cleanup_context>:
 8018588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801858c:	4606      	mov	r6, r0
 801858e:	6800      	ldr	r0, [r0, #0]
 8018590:	2300      	movs	r3, #0
 8018592:	6073      	str	r3, [r6, #4]
 8018594:	2800      	cmp	r0, #0
 8018596:	d042      	beq.n	801861e <__cleanup_context+0x96>
 8018598:	6943      	ldr	r3, [r0, #20]
 801859a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801859e:	6907      	ldr	r7, [r0, #16]
 80185a0:	b39b      	cbz	r3, 801860a <__cleanup_context+0x82>
 80185a2:	3014      	adds	r0, #20
 80185a4:	f7f6 f97e 	bl	800e8a4 <rcl_init_options_fini>
 80185a8:	4680      	mov	r8, r0
 80185aa:	2800      	cmp	r0, #0
 80185ac:	d144      	bne.n	8018638 <__cleanup_context+0xb0>
 80185ae:	6830      	ldr	r0, [r6, #0]
 80185b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80185b2:	b123      	cbz	r3, 80185be <__cleanup_context+0x36>
 80185b4:	3028      	adds	r0, #40	@ 0x28
 80185b6:	f7f8 ff67 	bl	8011488 <rmw_context_fini>
 80185ba:	bbb8      	cbnz	r0, 801862c <__cleanup_context+0xa4>
 80185bc:	6830      	ldr	r0, [r6, #0]
 80185be:	6a03      	ldr	r3, [r0, #32]
 80185c0:	b1db      	cbz	r3, 80185fa <__cleanup_context+0x72>
 80185c2:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80185c6:	2a01      	cmp	r2, #1
 80185c8:	f17c 0100 	sbcs.w	r1, ip, #0
 80185cc:	db11      	blt.n	80185f2 <__cleanup_context+0x6a>
 80185ce:	2400      	movs	r4, #0
 80185d0:	4625      	mov	r5, r4
 80185d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80185d6:	4639      	mov	r1, r7
 80185d8:	b1c8      	cbz	r0, 801860e <__cleanup_context+0x86>
 80185da:	47c8      	blx	r9
 80185dc:	6833      	ldr	r3, [r6, #0]
 80185de:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80185e2:	3401      	adds	r4, #1
 80185e4:	f145 0500 	adc.w	r5, r5, #0
 80185e8:	4294      	cmp	r4, r2
 80185ea:	eb75 010c 	sbcs.w	r1, r5, ip
 80185ee:	6a1b      	ldr	r3, [r3, #32]
 80185f0:	dbef      	blt.n	80185d2 <__cleanup_context+0x4a>
 80185f2:	4618      	mov	r0, r3
 80185f4:	4639      	mov	r1, r7
 80185f6:	47c8      	blx	r9
 80185f8:	6830      	ldr	r0, [r6, #0]
 80185fa:	4639      	mov	r1, r7
 80185fc:	47c8      	blx	r9
 80185fe:	2300      	movs	r3, #0
 8018600:	e9c6 3300 	strd	r3, r3, [r6]
 8018604:	4640      	mov	r0, r8
 8018606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801860a:	4698      	mov	r8, r3
 801860c:	e7d0      	b.n	80185b0 <__cleanup_context+0x28>
 801860e:	3401      	adds	r4, #1
 8018610:	f145 0500 	adc.w	r5, r5, #0
 8018614:	4294      	cmp	r4, r2
 8018616:	eb75 010c 	sbcs.w	r1, r5, ip
 801861a:	dbda      	blt.n	80185d2 <__cleanup_context+0x4a>
 801861c:	e7e9      	b.n	80185f2 <__cleanup_context+0x6a>
 801861e:	4680      	mov	r8, r0
 8018620:	2300      	movs	r3, #0
 8018622:	e9c6 3300 	strd	r3, r3, [r6]
 8018626:	4640      	mov	r0, r8
 8018628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801862c:	f1b8 0f00 	cmp.w	r8, #0
 8018630:	d005      	beq.n	801863e <__cleanup_context+0xb6>
 8018632:	f7f8 f9ad 	bl	8010990 <rcutils_reset_error>
 8018636:	e7c1      	b.n	80185bc <__cleanup_context+0x34>
 8018638:	f7f8 f9aa 	bl	8010990 <rcutils_reset_error>
 801863c:	e7b7      	b.n	80185ae <__cleanup_context+0x26>
 801863e:	f7ff ff7d 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 8018642:	4680      	mov	r8, r0
 8018644:	e7f5      	b.n	8018632 <__cleanup_context+0xaa>
 8018646:	bf00      	nop

08018648 <rcl_context_fini>:
 8018648:	b178      	cbz	r0, 801866a <rcl_context_fini+0x22>
 801864a:	b510      	push	{r4, lr}
 801864c:	4604      	mov	r4, r0
 801864e:	6800      	ldr	r0, [r0, #0]
 8018650:	b150      	cbz	r0, 8018668 <rcl_context_fini+0x20>
 8018652:	6863      	ldr	r3, [r4, #4]
 8018654:	b93b      	cbnz	r3, 8018666 <rcl_context_fini+0x1e>
 8018656:	f7f8 f8b7 	bl	80107c8 <rcutils_allocator_is_valid>
 801865a:	b120      	cbz	r0, 8018666 <rcl_context_fini+0x1e>
 801865c:	4620      	mov	r0, r4
 801865e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018662:	f7ff bf91 	b.w	8018588 <__cleanup_context>
 8018666:	200b      	movs	r0, #11
 8018668:	bd10      	pop	{r4, pc}
 801866a:	200b      	movs	r0, #11
 801866c:	4770      	bx	lr
 801866e:	bf00      	nop

08018670 <rcl_get_zero_initialized_guard_condition>:
 8018670:	4a03      	ldr	r2, [pc, #12]	@ (8018680 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018672:	4603      	mov	r3, r0
 8018674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018678:	e883 0003 	stmia.w	r3, {r0, r1}
 801867c:	4618      	mov	r0, r3
 801867e:	4770      	bx	lr
 8018680:	08021134 	.word	0x08021134

08018684 <rcl_guard_condition_init>:
 8018684:	b082      	sub	sp, #8
 8018686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018688:	b087      	sub	sp, #28
 801868a:	ac0c      	add	r4, sp, #48	@ 0x30
 801868c:	e884 000c 	stmia.w	r4, {r2, r3}
 8018690:	46a6      	mov	lr, r4
 8018692:	460d      	mov	r5, r1
 8018694:	4604      	mov	r4, r0
 8018696:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801869a:	f10d 0c04 	add.w	ip, sp, #4
 801869e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186a2:	f8de 3000 	ldr.w	r3, [lr]
 80186a6:	f8cc 3000 	str.w	r3, [ip]
 80186aa:	a801      	add	r0, sp, #4
 80186ac:	f7f8 f88c 	bl	80107c8 <rcutils_allocator_is_valid>
 80186b0:	b338      	cbz	r0, 8018702 <rcl_guard_condition_init+0x7e>
 80186b2:	b334      	cbz	r4, 8018702 <rcl_guard_condition_init+0x7e>
 80186b4:	6866      	ldr	r6, [r4, #4]
 80186b6:	b9ee      	cbnz	r6, 80186f4 <rcl_guard_condition_init+0x70>
 80186b8:	b31d      	cbz	r5, 8018702 <rcl_guard_condition_init+0x7e>
 80186ba:	4628      	mov	r0, r5
 80186bc:	f7ff ff5e 	bl	801857c <rcl_context_is_valid>
 80186c0:	b308      	cbz	r0, 8018706 <rcl_guard_condition_init+0x82>
 80186c2:	9b01      	ldr	r3, [sp, #4]
 80186c4:	9905      	ldr	r1, [sp, #20]
 80186c6:	201c      	movs	r0, #28
 80186c8:	4798      	blx	r3
 80186ca:	4607      	mov	r7, r0
 80186cc:	6060      	str	r0, [r4, #4]
 80186ce:	b310      	cbz	r0, 8018716 <rcl_guard_condition_init+0x92>
 80186d0:	6828      	ldr	r0, [r5, #0]
 80186d2:	3028      	adds	r0, #40	@ 0x28
 80186d4:	f002 ff00 	bl	801b4d8 <rmw_create_guard_condition>
 80186d8:	6038      	str	r0, [r7, #0]
 80186da:	6860      	ldr	r0, [r4, #4]
 80186dc:	6807      	ldr	r7, [r0, #0]
 80186de:	b1a7      	cbz	r7, 801870a <rcl_guard_condition_init+0x86>
 80186e0:	2301      	movs	r3, #1
 80186e2:	ac01      	add	r4, sp, #4
 80186e4:	7103      	strb	r3, [r0, #4]
 80186e6:	f100 0708 	add.w	r7, r0, #8
 80186ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80186ee:	6823      	ldr	r3, [r4, #0]
 80186f0:	603b      	str	r3, [r7, #0]
 80186f2:	e000      	b.n	80186f6 <rcl_guard_condition_init+0x72>
 80186f4:	2664      	movs	r6, #100	@ 0x64
 80186f6:	4630      	mov	r0, r6
 80186f8:	b007      	add	sp, #28
 80186fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80186fe:	b002      	add	sp, #8
 8018700:	4770      	bx	lr
 8018702:	260b      	movs	r6, #11
 8018704:	e7f7      	b.n	80186f6 <rcl_guard_condition_init+0x72>
 8018706:	2665      	movs	r6, #101	@ 0x65
 8018708:	e7f5      	b.n	80186f6 <rcl_guard_condition_init+0x72>
 801870a:	9b02      	ldr	r3, [sp, #8]
 801870c:	9905      	ldr	r1, [sp, #20]
 801870e:	4798      	blx	r3
 8018710:	2601      	movs	r6, #1
 8018712:	6067      	str	r7, [r4, #4]
 8018714:	e7ef      	b.n	80186f6 <rcl_guard_condition_init+0x72>
 8018716:	260a      	movs	r6, #10
 8018718:	e7ed      	b.n	80186f6 <rcl_guard_condition_init+0x72>
 801871a:	bf00      	nop

0801871c <rcl_guard_condition_init_from_rmw>:
 801871c:	b082      	sub	sp, #8
 801871e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018722:	b086      	sub	sp, #24
 8018724:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018728:	4604      	mov	r4, r0
 801872a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801872e:	460e      	mov	r6, r1
 8018730:	4617      	mov	r7, r2
 8018732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018736:	f10d 0e04 	add.w	lr, sp, #4
 801873a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801873e:	f8dc 3000 	ldr.w	r3, [ip]
 8018742:	f8ce 3000 	str.w	r3, [lr]
 8018746:	a801      	add	r0, sp, #4
 8018748:	f7f8 f83e 	bl	80107c8 <rcutils_allocator_is_valid>
 801874c:	b350      	cbz	r0, 80187a4 <rcl_guard_condition_init_from_rmw+0x88>
 801874e:	b34c      	cbz	r4, 80187a4 <rcl_guard_condition_init_from_rmw+0x88>
 8018750:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018754:	f1b8 0f00 	cmp.w	r8, #0
 8018758:	d11e      	bne.n	8018798 <rcl_guard_condition_init_from_rmw+0x7c>
 801875a:	b31f      	cbz	r7, 80187a4 <rcl_guard_condition_init_from_rmw+0x88>
 801875c:	4638      	mov	r0, r7
 801875e:	f7ff ff0d 	bl	801857c <rcl_context_is_valid>
 8018762:	b328      	cbz	r0, 80187b0 <rcl_guard_condition_init_from_rmw+0x94>
 8018764:	9b01      	ldr	r3, [sp, #4]
 8018766:	9905      	ldr	r1, [sp, #20]
 8018768:	201c      	movs	r0, #28
 801876a:	4798      	blx	r3
 801876c:	4605      	mov	r5, r0
 801876e:	6060      	str	r0, [r4, #4]
 8018770:	b358      	cbz	r0, 80187ca <rcl_guard_condition_init_from_rmw+0xae>
 8018772:	b1fe      	cbz	r6, 80187b4 <rcl_guard_condition_init_from_rmw+0x98>
 8018774:	6006      	str	r6, [r0, #0]
 8018776:	f880 8004 	strb.w	r8, [r0, #4]
 801877a:	ac01      	add	r4, sp, #4
 801877c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801877e:	f105 0c08 	add.w	ip, r5, #8
 8018782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018786:	6823      	ldr	r3, [r4, #0]
 8018788:	f8cc 3000 	str.w	r3, [ip]
 801878c:	2000      	movs	r0, #0
 801878e:	b006      	add	sp, #24
 8018790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018794:	b002      	add	sp, #8
 8018796:	4770      	bx	lr
 8018798:	2064      	movs	r0, #100	@ 0x64
 801879a:	b006      	add	sp, #24
 801879c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187a0:	b002      	add	sp, #8
 80187a2:	4770      	bx	lr
 80187a4:	200b      	movs	r0, #11
 80187a6:	b006      	add	sp, #24
 80187a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187ac:	b002      	add	sp, #8
 80187ae:	4770      	bx	lr
 80187b0:	2065      	movs	r0, #101	@ 0x65
 80187b2:	e7f2      	b.n	801879a <rcl_guard_condition_init_from_rmw+0x7e>
 80187b4:	6838      	ldr	r0, [r7, #0]
 80187b6:	3028      	adds	r0, #40	@ 0x28
 80187b8:	f002 fe8e 	bl	801b4d8 <rmw_create_guard_condition>
 80187bc:	6028      	str	r0, [r5, #0]
 80187be:	6865      	ldr	r5, [r4, #4]
 80187c0:	682e      	ldr	r6, [r5, #0]
 80187c2:	b126      	cbz	r6, 80187ce <rcl_guard_condition_init_from_rmw+0xb2>
 80187c4:	2301      	movs	r3, #1
 80187c6:	712b      	strb	r3, [r5, #4]
 80187c8:	e7d7      	b.n	801877a <rcl_guard_condition_init_from_rmw+0x5e>
 80187ca:	200a      	movs	r0, #10
 80187cc:	e7e5      	b.n	801879a <rcl_guard_condition_init_from_rmw+0x7e>
 80187ce:	4628      	mov	r0, r5
 80187d0:	9b02      	ldr	r3, [sp, #8]
 80187d2:	9905      	ldr	r1, [sp, #20]
 80187d4:	4798      	blx	r3
 80187d6:	2001      	movs	r0, #1
 80187d8:	6066      	str	r6, [r4, #4]
 80187da:	e7de      	b.n	801879a <rcl_guard_condition_init_from_rmw+0x7e>

080187dc <rcl_guard_condition_fini>:
 80187dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187de:	b1d8      	cbz	r0, 8018818 <rcl_guard_condition_fini+0x3c>
 80187e0:	4604      	mov	r4, r0
 80187e2:	6840      	ldr	r0, [r0, #4]
 80187e4:	b158      	cbz	r0, 80187fe <rcl_guard_condition_fini+0x22>
 80187e6:	6803      	ldr	r3, [r0, #0]
 80187e8:	68c6      	ldr	r6, [r0, #12]
 80187ea:	6987      	ldr	r7, [r0, #24]
 80187ec:	b153      	cbz	r3, 8018804 <rcl_guard_condition_fini+0x28>
 80187ee:	7905      	ldrb	r5, [r0, #4]
 80187f0:	b955      	cbnz	r5, 8018808 <rcl_guard_condition_fini+0x2c>
 80187f2:	4639      	mov	r1, r7
 80187f4:	47b0      	blx	r6
 80187f6:	2300      	movs	r3, #0
 80187f8:	6063      	str	r3, [r4, #4]
 80187fa:	4628      	mov	r0, r5
 80187fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187fe:	4605      	mov	r5, r0
 8018800:	4628      	mov	r0, r5
 8018802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018804:	461d      	mov	r5, r3
 8018806:	e7f4      	b.n	80187f2 <rcl_guard_condition_fini+0x16>
 8018808:	4618      	mov	r0, r3
 801880a:	f002 fe79 	bl	801b500 <rmw_destroy_guard_condition>
 801880e:	1e05      	subs	r5, r0, #0
 8018810:	bf18      	it	ne
 8018812:	2501      	movne	r5, #1
 8018814:	6860      	ldr	r0, [r4, #4]
 8018816:	e7ec      	b.n	80187f2 <rcl_guard_condition_fini+0x16>
 8018818:	250b      	movs	r5, #11
 801881a:	4628      	mov	r0, r5
 801881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801881e:	bf00      	nop

08018820 <rcl_guard_condition_get_default_options>:
 8018820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018822:	b087      	sub	sp, #28
 8018824:	4606      	mov	r6, r0
 8018826:	4668      	mov	r0, sp
 8018828:	f7f7 ffa2 	bl	8010770 <rcutils_get_default_allocator>
 801882c:	46ee      	mov	lr, sp
 801882e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018832:	4c08      	ldr	r4, [pc, #32]	@ (8018854 <rcl_guard_condition_get_default_options+0x34>)
 8018834:	46a4      	mov	ip, r4
 8018836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801883a:	4625      	mov	r5, r4
 801883c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801883e:	4634      	mov	r4, r6
 8018840:	f8de 7000 	ldr.w	r7, [lr]
 8018844:	f8cc 7000 	str.w	r7, [ip]
 8018848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801884a:	4630      	mov	r0, r6
 801884c:	6027      	str	r7, [r4, #0]
 801884e:	b007      	add	sp, #28
 8018850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018852:	bf00      	nop
 8018854:	2001f5b0 	.word	0x2001f5b0

08018858 <rcl_trigger_guard_condition>:
 8018858:	b148      	cbz	r0, 801886e <rcl_trigger_guard_condition+0x16>
 801885a:	b508      	push	{r3, lr}
 801885c:	6843      	ldr	r3, [r0, #4]
 801885e:	b143      	cbz	r3, 8018872 <rcl_trigger_guard_condition+0x1a>
 8018860:	6818      	ldr	r0, [r3, #0]
 8018862:	f003 f821 	bl	801b8a8 <rmw_trigger_guard_condition>
 8018866:	3800      	subs	r0, #0
 8018868:	bf18      	it	ne
 801886a:	2001      	movne	r0, #1
 801886c:	bd08      	pop	{r3, pc}
 801886e:	200b      	movs	r0, #11
 8018870:	4770      	bx	lr
 8018872:	200b      	movs	r0, #11
 8018874:	bd08      	pop	{r3, pc}
 8018876:	bf00      	nop

08018878 <rcl_guard_condition_get_rmw_handle>:
 8018878:	b110      	cbz	r0, 8018880 <rcl_guard_condition_get_rmw_handle+0x8>
 801887a:	6840      	ldr	r0, [r0, #4]
 801887c:	b100      	cbz	r0, 8018880 <rcl_guard_condition_get_rmw_handle+0x8>
 801887e:	6800      	ldr	r0, [r0, #0]
 8018880:	4770      	bx	lr
 8018882:	bf00      	nop

08018884 <rcl_init>:
 8018884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018888:	1e04      	subs	r4, r0, #0
 801888a:	b0a7      	sub	sp, #156	@ 0x9c
 801888c:	460d      	mov	r5, r1
 801888e:	4617      	mov	r7, r2
 8018890:	461e      	mov	r6, r3
 8018892:	dd13      	ble.n	80188bc <rcl_init+0x38>
 8018894:	b161      	cbz	r1, 80188b0 <rcl_init+0x2c>
 8018896:	f1a1 0e04 	sub.w	lr, r1, #4
 801889a:	f04f 0c00 	mov.w	ip, #0
 801889e:	e001      	b.n	80188a4 <rcl_init+0x20>
 80188a0:	4564      	cmp	r4, ip
 80188a2:	d00d      	beq.n	80188c0 <rcl_init+0x3c>
 80188a4:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80188a8:	f10c 0c01 	add.w	ip, ip, #1
 80188ac:	2800      	cmp	r0, #0
 80188ae:	d1f7      	bne.n	80188a0 <rcl_init+0x1c>
 80188b0:	f04f 080b 	mov.w	r8, #11
 80188b4:	4640      	mov	r0, r8
 80188b6:	b027      	add	sp, #156	@ 0x9c
 80188b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188bc:	2900      	cmp	r1, #0
 80188be:	d1f7      	bne.n	80188b0 <rcl_init+0x2c>
 80188c0:	2f00      	cmp	r7, #0
 80188c2:	d0f5      	beq.n	80188b0 <rcl_init+0x2c>
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d0f2      	beq.n	80188b0 <rcl_init+0x2c>
 80188ca:	469c      	mov	ip, r3
 80188cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80188d0:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 80188d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80188d8:	f8dc 3000 	ldr.w	r3, [ip]
 80188dc:	f8ce 3000 	str.w	r3, [lr]
 80188e0:	a821      	add	r0, sp, #132	@ 0x84
 80188e2:	f7f7 ff71 	bl	80107c8 <rcutils_allocator_is_valid>
 80188e6:	2800      	cmp	r0, #0
 80188e8:	d0e2      	beq.n	80188b0 <rcl_init+0x2c>
 80188ea:	2e00      	cmp	r6, #0
 80188ec:	d0e0      	beq.n	80188b0 <rcl_init+0x2c>
 80188ee:	6833      	ldr	r3, [r6, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d176      	bne.n	80189e2 <rcl_init+0x15e>
 80188f4:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 80188f8:	2198      	movs	r1, #152	@ 0x98
 80188fa:	2001      	movs	r0, #1
 80188fc:	4798      	blx	r3
 80188fe:	4680      	mov	r8, r0
 8018900:	6030      	str	r0, [r6, #0]
 8018902:	2800      	cmp	r0, #0
 8018904:	f000 80cc 	beq.w	8018aa0 <rcl_init+0x21c>
 8018908:	a802      	add	r0, sp, #8
 801890a:	f002 fb5b 	bl	801afc4 <rmw_get_zero_initialized_context>
 801890e:	a902      	add	r1, sp, #8
 8018910:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8018914:	2270      	movs	r2, #112	@ 0x70
 8018916:	f005 fb84 	bl	801e022 <memcpy>
 801891a:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
 801891e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018922:	f8d6 8000 	ldr.w	r8, [r6]
 8018926:	46c4      	mov	ip, r8
 8018928:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801892c:	f8de 3000 	ldr.w	r3, [lr]
 8018930:	f8cc 3000 	str.w	r3, [ip]
 8018934:	f108 0114 	add.w	r1, r8, #20
 8018938:	4638      	mov	r0, r7
 801893a:	f7f5 ffdd 	bl	800e8f8 <rcl_init_options_copy>
 801893e:	4680      	mov	r8, r0
 8018940:	2800      	cmp	r0, #0
 8018942:	d147      	bne.n	80189d4 <rcl_init+0x150>
 8018944:	f8d6 9000 	ldr.w	r9, [r6]
 8018948:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 801894c:	f8c9 0020 	str.w	r0, [r9, #32]
 8018950:	f8c9 4018 	str.w	r4, [r9, #24]
 8018954:	f8c9 a01c 	str.w	sl, [r9, #28]
 8018958:	2c00      	cmp	r4, #0
 801895a:	d04a      	beq.n	80189f2 <rcl_init+0x16e>
 801895c:	2d00      	cmp	r5, #0
 801895e:	d048      	beq.n	80189f2 <rcl_init+0x16e>
 8018960:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	@ 0x90
 8018964:	2104      	movs	r1, #4
 8018966:	4620      	mov	r0, r4
 8018968:	4798      	blx	r3
 801896a:	f8c9 0020 	str.w	r0, [r9, #32]
 801896e:	f8d6 9000 	ldr.w	r9, [r6]
 8018972:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8018976:	f1bb 0f00 	cmp.w	fp, #0
 801897a:	d029      	beq.n	80189d0 <rcl_init+0x14c>
 801897c:	2c01      	cmp	r4, #1
 801897e:	f17a 0300 	sbcs.w	r3, sl, #0
 8018982:	db36      	blt.n	80189f2 <rcl_init+0x16e>
 8018984:	f04f 0800 	mov.w	r8, #0
 8018988:	3d04      	subs	r5, #4
 801898a:	46c1      	mov	r9, r8
 801898c:	e00d      	b.n	80189aa <rcl_init+0x126>
 801898e:	6829      	ldr	r1, [r5, #0]
 8018990:	f005 fb47 	bl	801e022 <memcpy>
 8018994:	f118 0801 	adds.w	r8, r8, #1
 8018998:	f149 0900 	adc.w	r9, r9, #0
 801899c:	45ca      	cmp	sl, r9
 801899e:	bf08      	it	eq
 80189a0:	4544      	cmpeq	r4, r8
 80189a2:	d024      	beq.n	80189ee <rcl_init+0x16a>
 80189a4:	6833      	ldr	r3, [r6, #0]
 80189a6:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80189aa:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80189ae:	f7e7 fc97 	bl	80002e0 <strlen>
 80189b2:	1c42      	adds	r2, r0, #1
 80189b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80189b6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80189b8:	9201      	str	r2, [sp, #4]
 80189ba:	4610      	mov	r0, r2
 80189bc:	4798      	blx	r3
 80189be:	6833      	ldr	r3, [r6, #0]
 80189c0:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 80189c4:	6a1b      	ldr	r3, [r3, #32]
 80189c6:	9a01      	ldr	r2, [sp, #4]
 80189c8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80189cc:	2800      	cmp	r0, #0
 80189ce:	d1de      	bne.n	801898e <rcl_init+0x10a>
 80189d0:	f04f 080a 	mov.w	r8, #10
 80189d4:	4630      	mov	r0, r6
 80189d6:	f7ff fdd7 	bl	8018588 <__cleanup_context>
 80189da:	4640      	mov	r0, r8
 80189dc:	b027      	add	sp, #156	@ 0x9c
 80189de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e2:	f04f 0864 	mov.w	r8, #100	@ 0x64
 80189e6:	4640      	mov	r0, r8
 80189e8:	b027      	add	sp, #156	@ 0x9c
 80189ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ee:	f8d6 9000 	ldr.w	r9, [r6]
 80189f2:	4a40      	ldr	r2, [pc, #256]	@ (8018af4 <rcl_init+0x270>)
 80189f4:	6813      	ldr	r3, [r2, #0]
 80189f6:	3301      	adds	r3, #1
 80189f8:	d04d      	beq.n	8018a96 <rcl_init+0x212>
 80189fa:	461d      	mov	r5, r3
 80189fc:	2000      	movs	r0, #0
 80189fe:	4619      	mov	r1, r3
 8018a00:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8018a04:	6073      	str	r3, [r6, #4]
 8018a06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018a08:	6011      	str	r1, [r2, #0]
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8018a10:	d05e      	beq.n	8018ad0 <rcl_init+0x24c>
 8018a12:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d045      	beq.n	8018aa6 <rcl_init+0x222>
 8018a1a:	683a      	ldr	r2, [r7, #0]
 8018a1c:	2b01      	cmp	r3, #1
 8018a1e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8018a22:	d04c      	beq.n	8018abe <rcl_init+0x23a>
 8018a24:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8018a28:	2a00      	cmp	r2, #0
 8018a2a:	d05c      	beq.n	8018ae6 <rcl_init+0x262>
 8018a2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018a2e:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8018a32:	b953      	cbnz	r3, 8018a4a <rcl_init+0x1c6>
 8018a34:	2801      	cmp	r0, #1
 8018a36:	d008      	beq.n	8018a4a <rcl_init+0x1c6>
 8018a38:	a921      	add	r1, sp, #132	@ 0x84
 8018a3a:	4628      	mov	r0, r5
 8018a3c:	f004 f876 	bl	801cb2c <rcl_get_discovery_static_peers>
 8018a40:	4680      	mov	r8, r0
 8018a42:	2800      	cmp	r0, #0
 8018a44:	d1c6      	bne.n	80189d4 <rcl_init+0x150>
 8018a46:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8018a4a:	f004 f865 	bl	801cb18 <rcl_automatic_discovery_range_to_string>
 8018a4e:	6833      	ldr	r3, [r6, #0]
 8018a50:	695b      	ldr	r3, [r3, #20]
 8018a52:	aa20      	add	r2, sp, #128	@ 0x80
 8018a54:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8018a56:	a91f      	add	r1, sp, #124	@ 0x7c
 8018a58:	f000 fd26 	bl	80194a8 <rcl_validate_enclave_name>
 8018a5c:	4680      	mov	r8, r0
 8018a5e:	2800      	cmp	r0, #0
 8018a60:	d1b8      	bne.n	80189d4 <rcl_init+0x150>
 8018a62:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8018a64:	bb8b      	cbnz	r3, 8018aca <rcl_init+0x246>
 8018a66:	6831      	ldr	r1, [r6, #0]
 8018a68:	694b      	ldr	r3, [r1, #20]
 8018a6a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8018a6c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8018a70:	f000 f9d4 	bl	8018e1c <rcl_get_security_options_from_environment>
 8018a74:	4680      	mov	r8, r0
 8018a76:	2800      	cmp	r0, #0
 8018a78:	d1ac      	bne.n	80189d4 <rcl_init+0x150>
 8018a7a:	6831      	ldr	r1, [r6, #0]
 8018a7c:	6948      	ldr	r0, [r1, #20]
 8018a7e:	3128      	adds	r1, #40	@ 0x28
 8018a80:	3018      	adds	r0, #24
 8018a82:	f7f8 fb69 	bl	8011158 <rmw_init>
 8018a86:	4680      	mov	r8, r0
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	f43f af13 	beq.w	80188b4 <rcl_init+0x30>
 8018a8e:	f7ff fd55 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 8018a92:	4680      	mov	r8, r0
 8018a94:	e79e      	b.n	80189d4 <rcl_init+0x150>
 8018a96:	2101      	movs	r1, #1
 8018a98:	4618      	mov	r0, r3
 8018a9a:	460d      	mov	r5, r1
 8018a9c:	460b      	mov	r3, r1
 8018a9e:	e7af      	b.n	8018a00 <rcl_init+0x17c>
 8018aa0:	f04f 080a 	mov.w	r8, #10
 8018aa4:	e706      	b.n	80188b4 <rcl_init+0x30>
 8018aa6:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8018aaa:	f000 f843 	bl	8018b34 <rcl_get_localhost_only>
 8018aae:	4680      	mov	r8, r0
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	d18f      	bne.n	80189d4 <rcl_init+0x150>
 8018ab4:	6832      	ldr	r2, [r6, #0]
 8018ab6:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8018aba:	6954      	ldr	r4, [r2, #20]
 8018abc:	e7ad      	b.n	8018a1a <rcl_init+0x196>
 8018abe:	2002      	movs	r0, #2
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8018ac6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018ac8:	e7bf      	b.n	8018a4a <rcl_init+0x1c6>
 8018aca:	f04f 0801 	mov.w	r8, #1
 8018ace:	e781      	b.n	80189d4 <rcl_init+0x150>
 8018ad0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018ad4:	f004 f894 	bl	801cc00 <rcl_get_default_domain_id>
 8018ad8:	4680      	mov	r8, r0
 8018ada:	2800      	cmp	r0, #0
 8018adc:	f47f af7a 	bne.w	80189d4 <rcl_init+0x150>
 8018ae0:	6833      	ldr	r3, [r6, #0]
 8018ae2:	695c      	ldr	r4, [r3, #20]
 8018ae4:	e795      	b.n	8018a12 <rcl_init+0x18e>
 8018ae6:	4628      	mov	r0, r5
 8018ae8:	f003 ffd4 	bl	801ca94 <rcl_get_automatic_discovery_range>
 8018aec:	4680      	mov	r8, r0
 8018aee:	2800      	cmp	r0, #0
 8018af0:	d09c      	beq.n	8018a2c <rcl_init+0x1a8>
 8018af2:	e76f      	b.n	80189d4 <rcl_init+0x150>
 8018af4:	2001f5c4 	.word	0x2001f5c4

08018af8 <rcl_shutdown>:
 8018af8:	b1a8      	cbz	r0, 8018b26 <rcl_shutdown+0x2e>
 8018afa:	6803      	ldr	r3, [r0, #0]
 8018afc:	b510      	push	{r4, lr}
 8018afe:	4604      	mov	r4, r0
 8018b00:	b173      	cbz	r3, 8018b20 <rcl_shutdown+0x28>
 8018b02:	f7ff fd3b 	bl	801857c <rcl_context_is_valid>
 8018b06:	b140      	cbz	r0, 8018b1a <rcl_shutdown+0x22>
 8018b08:	6820      	ldr	r0, [r4, #0]
 8018b0a:	3028      	adds	r0, #40	@ 0x28
 8018b0c:	f7f8 fc58 	bl	80113c0 <rmw_shutdown>
 8018b10:	4603      	mov	r3, r0
 8018b12:	b958      	cbnz	r0, 8018b2c <rcl_shutdown+0x34>
 8018b14:	6060      	str	r0, [r4, #4]
 8018b16:	4618      	mov	r0, r3
 8018b18:	bd10      	pop	{r4, pc}
 8018b1a:	236a      	movs	r3, #106	@ 0x6a
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	bd10      	pop	{r4, pc}
 8018b20:	230b      	movs	r3, #11
 8018b22:	4618      	mov	r0, r3
 8018b24:	bd10      	pop	{r4, pc}
 8018b26:	230b      	movs	r3, #11
 8018b28:	4618      	mov	r0, r3
 8018b2a:	4770      	bx	lr
 8018b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b30:	f7ff bd04 	b.w	801853c <rcl_convert_rmw_ret_to_rcl_ret>

08018b34 <rcl_get_localhost_only>:
 8018b34:	b510      	push	{r4, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	2300      	movs	r3, #0
 8018b3a:	9301      	str	r3, [sp, #4]
 8018b3c:	b1b8      	cbz	r0, 8018b6e <rcl_get_localhost_only+0x3a>
 8018b3e:	4604      	mov	r4, r0
 8018b40:	a901      	add	r1, sp, #4
 8018b42:	480c      	ldr	r0, [pc, #48]	@ (8018b74 <rcl_get_localhost_only+0x40>)
 8018b44:	f7f7 fef4 	bl	8010930 <rcutils_get_env>
 8018b48:	b110      	cbz	r0, 8018b50 <rcl_get_localhost_only+0x1c>
 8018b4a:	2001      	movs	r0, #1
 8018b4c:	b002      	add	sp, #8
 8018b4e:	bd10      	pop	{r4, pc}
 8018b50:	9b01      	ldr	r3, [sp, #4]
 8018b52:	b10b      	cbz	r3, 8018b58 <rcl_get_localhost_only+0x24>
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	b923      	cbnz	r3, 8018b62 <rcl_get_localhost_only+0x2e>
 8018b58:	2300      	movs	r3, #0
 8018b5a:	7023      	strb	r3, [r4, #0]
 8018b5c:	2000      	movs	r0, #0
 8018b5e:	b002      	add	sp, #8
 8018b60:	bd10      	pop	{r4, pc}
 8018b62:	2b31      	cmp	r3, #49	@ 0x31
 8018b64:	bf14      	ite	ne
 8018b66:	2302      	movne	r3, #2
 8018b68:	2301      	moveq	r3, #1
 8018b6a:	7023      	strb	r3, [r4, #0]
 8018b6c:	e7f6      	b.n	8018b5c <rcl_get_localhost_only+0x28>
 8018b6e:	200b      	movs	r0, #11
 8018b70:	b002      	add	sp, #8
 8018b72:	bd10      	pop	{r4, pc}
 8018b74:	0802113c 	.word	0x0802113c

08018b78 <rcl_node_resolve_name>:
 8018b78:	b082      	sub	sp, #8
 8018b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b7e:	b091      	sub	sp, #68	@ 0x44
 8018b80:	ac1a      	add	r4, sp, #104	@ 0x68
 8018b82:	e884 000c 	stmia.w	r4, {r2, r3}
 8018b86:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8018b8a:	2800      	cmp	r0, #0
 8018b8c:	d03a      	beq.n	8018c04 <rcl_node_resolve_name+0x8c>
 8018b8e:	460c      	mov	r4, r1
 8018b90:	4605      	mov	r5, r0
 8018b92:	f7f6 f8c1 	bl	800ed18 <rcl_node_get_options>
 8018b96:	b370      	cbz	r0, 8018bf6 <rcl_node_resolve_name+0x7e>
 8018b98:	4628      	mov	r0, r5
 8018b9a:	f7f6 f8ad 	bl	800ecf8 <rcl_node_get_name>
 8018b9e:	4681      	mov	r9, r0
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	f7f6 f8b1 	bl	800ed08 <rcl_node_get_namespace>
 8018ba6:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8018baa:	4607      	mov	r7, r0
 8018bac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018bb0:	ad0b      	add	r5, sp, #44	@ 0x2c
 8018bb2:	46ac      	mov	ip, r5
 8018bb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bb8:	f8de 3000 	ldr.w	r3, [lr]
 8018bbc:	f8cc 3000 	str.w	r3, [ip]
 8018bc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018bc2:	b1fb      	cbz	r3, 8018c04 <rcl_node_resolve_name+0x8c>
 8018bc4:	468a      	mov	sl, r1
 8018bc6:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8018bca:	f002 f8ab 	bl	801ad24 <rcutils_get_zero_initialized_string_map>
 8018bce:	ab10      	add	r3, sp, #64	@ 0x40
 8018bd0:	9008      	str	r0, [sp, #32]
 8018bd2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8018bd6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018bda:	2100      	movs	r1, #0
 8018bdc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8018be0:	a808      	add	r0, sp, #32
 8018be2:	f002 f8f9 	bl	801add8 <rcutils_string_map_init>
 8018be6:	4606      	mov	r6, r0
 8018be8:	b170      	cbz	r0, 8018c08 <rcl_node_resolve_name+0x90>
 8018bea:	f7f7 feb9 	bl	8010960 <rcutils_get_error_string>
 8018bee:	f7f7 fecf 	bl	8010990 <rcutils_reset_error>
 8018bf2:	2e0a      	cmp	r6, #10
 8018bf4:	d000      	beq.n	8018bf8 <rcl_node_resolve_name+0x80>
 8018bf6:	2601      	movs	r6, #1
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	b011      	add	sp, #68	@ 0x44
 8018bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c00:	b002      	add	sp, #8
 8018c02:	4770      	bx	lr
 8018c04:	260b      	movs	r6, #11
 8018c06:	e7f7      	b.n	8018bf8 <rcl_node_resolve_name+0x80>
 8018c08:	9009      	str	r0, [sp, #36]	@ 0x24
 8018c0a:	9007      	str	r0, [sp, #28]
 8018c0c:	a808      	add	r0, sp, #32
 8018c0e:	f004 f983 	bl	801cf18 <rcl_get_default_topic_name_substitutions>
 8018c12:	4606      	mov	r6, r0
 8018c14:	b1b0      	cbz	r0, 8018c44 <rcl_node_resolve_name+0xcc>
 8018c16:	280a      	cmp	r0, #10
 8018c18:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018c1c:	d000      	beq.n	8018c20 <rcl_node_resolve_name+0xa8>
 8018c1e:	2601      	movs	r6, #1
 8018c20:	a808      	add	r0, sp, #32
 8018c22:	f002 f917 	bl	801ae54 <rcutils_string_map_fini>
 8018c26:	2800      	cmp	r0, #0
 8018c28:	d132      	bne.n	8018c90 <rcl_node_resolve_name+0x118>
 8018c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018c2c:	4659      	mov	r1, fp
 8018c2e:	47d0      	blx	sl
 8018c30:	4659      	mov	r1, fp
 8018c32:	4648      	mov	r0, r9
 8018c34:	47d0      	blx	sl
 8018c36:	f1b8 0f00 	cmp.w	r8, #0
 8018c3a:	d0dd      	beq.n	8018bf8 <rcl_node_resolve_name+0x80>
 8018c3c:	2e67      	cmp	r6, #103	@ 0x67
 8018c3e:	bf08      	it	eq
 8018c40:	2668      	moveq	r6, #104	@ 0x68
 8018c42:	e7d9      	b.n	8018bf8 <rcl_node_resolve_name+0x80>
 8018c44:	ab09      	add	r3, sp, #36	@ 0x24
 8018c46:	9305      	str	r3, [sp, #20]
 8018c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c4a:	46ec      	mov	ip, sp
 8018c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c50:	682b      	ldr	r3, [r5, #0]
 8018c52:	f8cc 3000 	str.w	r3, [ip]
 8018c56:	463a      	mov	r2, r7
 8018c58:	4649      	mov	r1, r9
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	ab08      	add	r3, sp, #32
 8018c5e:	f003 fffd 	bl	801cc5c <rcl_expand_topic_name>
 8018c62:	4606      	mov	r6, r0
 8018c64:	b9c8      	cbnz	r0, 8018c9a <rcl_node_resolve_name+0x122>
 8018c66:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8018c6a:	9009      	str	r0, [sp, #36]	@ 0x24
 8018c6c:	4602      	mov	r2, r0
 8018c6e:	a90a      	add	r1, sp, #40	@ 0x28
 8018c70:	4648      	mov	r0, r9
 8018c72:	f002 fa45 	bl	801b100 <rmw_validate_full_topic_name>
 8018c76:	b998      	cbnz	r0, 8018ca0 <rcl_node_resolve_name+0x128>
 8018c78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8018c7a:	bb14      	cbnz	r4, 8018cc2 <rcl_node_resolve_name+0x14a>
 8018c7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8018c7e:	a808      	add	r0, sp, #32
 8018c80:	f8c3 9000 	str.w	r9, [r3]
 8018c84:	f002 f8e6 	bl	801ae54 <rcutils_string_map_fini>
 8018c88:	4606      	mov	r6, r0
 8018c8a:	b978      	cbnz	r0, 8018cac <rcl_node_resolve_name+0x134>
 8018c8c:	4681      	mov	r9, r0
 8018c8e:	e7cc      	b.n	8018c2a <rcl_node_resolve_name+0xb2>
 8018c90:	f7f7 fe66 	bl	8010960 <rcutils_get_error_string>
 8018c94:	f7f7 fe7c 	bl	8010990 <rcutils_reset_error>
 8018c98:	e7c7      	b.n	8018c2a <rcl_node_resolve_name+0xb2>
 8018c9a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018c9e:	e7bf      	b.n	8018c20 <rcl_node_resolve_name+0xa8>
 8018ca0:	f7f7 fe5e 	bl	8010960 <rcutils_get_error_string>
 8018ca4:	2601      	movs	r6, #1
 8018ca6:	f7f7 fe73 	bl	8010990 <rcutils_reset_error>
 8018caa:	e7b9      	b.n	8018c20 <rcl_node_resolve_name+0xa8>
 8018cac:	f7f7 fe58 	bl	8010960 <rcutils_get_error_string>
 8018cb0:	f7f7 fe6e 	bl	8010990 <rcutils_reset_error>
 8018cb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018cb6:	4659      	mov	r1, fp
 8018cb8:	47d0      	blx	sl
 8018cba:	4659      	mov	r1, fp
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	47d0      	blx	sl
 8018cc0:	e799      	b.n	8018bf6 <rcl_node_resolve_name+0x7e>
 8018cc2:	2667      	movs	r6, #103	@ 0x67
 8018cc4:	e7ac      	b.n	8018c20 <rcl_node_resolve_name+0xa8>
 8018cc6:	bf00      	nop

08018cc8 <exact_match_lookup>:
 8018cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cca:	f102 0708 	add.w	r7, r2, #8
 8018cce:	460b      	mov	r3, r1
 8018cd0:	4614      	mov	r4, r2
 8018cd2:	4606      	mov	r6, r0
 8018cd4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8018cd8:	b085      	sub	sp, #20
 8018cda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018cde:	4618      	mov	r0, r3
 8018ce0:	4918      	ldr	r1, [pc, #96]	@ (8018d44 <exact_match_lookup+0x7c>)
 8018ce2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8018ce6:	f001 ffa9 	bl	801ac3c <rcutils_join_path>
 8018cea:	7833      	ldrb	r3, [r6, #0]
 8018cec:	2b2f      	cmp	r3, #47	@ 0x2f
 8018cee:	4605      	mov	r5, r0
 8018cf0:	d022      	beq.n	8018d38 <exact_match_lookup+0x70>
 8018cf2:	f104 030c 	add.w	r3, r4, #12
 8018cf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018cfa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018cfe:	1c70      	adds	r0, r6, #1
 8018d00:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018d04:	f001 ffa0 	bl	801ac48 <rcutils_to_native_path>
 8018d08:	4606      	mov	r6, r0
 8018d0a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8018d0e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018d12:	4631      	mov	r1, r6
 8018d14:	e894 000c 	ldmia.w	r4, {r2, r3}
 8018d18:	4628      	mov	r0, r5
 8018d1a:	f001 ff8f 	bl	801ac3c <rcutils_join_path>
 8018d1e:	6863      	ldr	r3, [r4, #4]
 8018d20:	6921      	ldr	r1, [r4, #16]
 8018d22:	4607      	mov	r7, r0
 8018d24:	4630      	mov	r0, r6
 8018d26:	4798      	blx	r3
 8018d28:	4628      	mov	r0, r5
 8018d2a:	6863      	ldr	r3, [r4, #4]
 8018d2c:	6921      	ldr	r1, [r4, #16]
 8018d2e:	4798      	blx	r3
 8018d30:	463d      	mov	r5, r7
 8018d32:	4628      	mov	r0, r5
 8018d34:	b005      	add	sp, #20
 8018d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d38:	7873      	ldrb	r3, [r6, #1]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d1d9      	bne.n	8018cf2 <exact_match_lookup+0x2a>
 8018d3e:	4628      	mov	r0, r5
 8018d40:	b005      	add	sp, #20
 8018d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d44:	0802118c 	.word	0x0802118c

08018d48 <rcl_get_secure_root>:
 8018d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d4c:	b085      	sub	sp, #20
 8018d4e:	b168      	cbz	r0, 8018d6c <rcl_get_secure_root+0x24>
 8018d50:	4607      	mov	r7, r0
 8018d52:	4608      	mov	r0, r1
 8018d54:	460c      	mov	r4, r1
 8018d56:	f7f7 fd37 	bl	80107c8 <rcutils_allocator_is_valid>
 8018d5a:	b138      	cbz	r0, 8018d6c <rcl_get_secure_root+0x24>
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	482d      	ldr	r0, [pc, #180]	@ (8018e14 <rcl_get_secure_root+0xcc>)
 8018d60:	9303      	str	r3, [sp, #12]
 8018d62:	a903      	add	r1, sp, #12
 8018d64:	f7f7 fde4 	bl	8010930 <rcutils_get_env>
 8018d68:	4605      	mov	r5, r0
 8018d6a:	b120      	cbz	r0, 8018d76 <rcl_get_secure_root+0x2e>
 8018d6c:	2500      	movs	r5, #0
 8018d6e:	4628      	mov	r0, r5
 8018d70:	b005      	add	sp, #20
 8018d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d76:	9b03      	ldr	r3, [sp, #12]
 8018d78:	781a      	ldrb	r2, [r3, #0]
 8018d7a:	2a00      	cmp	r2, #0
 8018d7c:	d0f6      	beq.n	8018d6c <rcl_get_secure_root+0x24>
 8018d7e:	f104 090c 	add.w	r9, r4, #12
 8018d82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018d86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018d90:	f7f7 ff38 	bl	8010c04 <rcutils_strdup>
 8018d94:	4680      	mov	r8, r0
 8018d96:	2800      	cmp	r0, #0
 8018d98:	d0e8      	beq.n	8018d6c <rcl_get_secure_root+0x24>
 8018d9a:	481f      	ldr	r0, [pc, #124]	@ (8018e18 <rcl_get_secure_root+0xd0>)
 8018d9c:	9503      	str	r5, [sp, #12]
 8018d9e:	a903      	add	r1, sp, #12
 8018da0:	f7f7 fdc6 	bl	8010930 <rcutils_get_env>
 8018da4:	b160      	cbz	r0, 8018dc0 <rcl_get_secure_root+0x78>
 8018da6:	2600      	movs	r6, #0
 8018da8:	6863      	ldr	r3, [r4, #4]
 8018daa:	6921      	ldr	r1, [r4, #16]
 8018dac:	4630      	mov	r0, r6
 8018dae:	4798      	blx	r3
 8018db0:	4640      	mov	r0, r8
 8018db2:	6863      	ldr	r3, [r4, #4]
 8018db4:	6921      	ldr	r1, [r4, #16]
 8018db6:	4798      	blx	r3
 8018db8:	4628      	mov	r0, r5
 8018dba:	b005      	add	sp, #20
 8018dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dc0:	9b03      	ldr	r3, [sp, #12]
 8018dc2:	781e      	ldrb	r6, [r3, #0]
 8018dc4:	b1f6      	cbz	r6, 8018e04 <rcl_get_secure_root+0xbc>
 8018dc6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8018dca:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8018dd4:	f7f7 ff16 	bl	8010c04 <rcutils_strdup>
 8018dd8:	4606      	mov	r6, r0
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	d0e3      	beq.n	8018da6 <rcl_get_secure_root+0x5e>
 8018dde:	4622      	mov	r2, r4
 8018de0:	4641      	mov	r1, r8
 8018de2:	f7ff ff71 	bl	8018cc8 <exact_match_lookup>
 8018de6:	4605      	mov	r5, r0
 8018de8:	2d00      	cmp	r5, #0
 8018dea:	d0dd      	beq.n	8018da8 <rcl_get_secure_root+0x60>
 8018dec:	4628      	mov	r0, r5
 8018dee:	f001 ff23 	bl	801ac38 <rcutils_is_directory>
 8018df2:	4607      	mov	r7, r0
 8018df4:	2800      	cmp	r0, #0
 8018df6:	d1d7      	bne.n	8018da8 <rcl_get_secure_root+0x60>
 8018df8:	4628      	mov	r0, r5
 8018dfa:	6863      	ldr	r3, [r4, #4]
 8018dfc:	6921      	ldr	r1, [r4, #16]
 8018dfe:	4798      	blx	r3
 8018e00:	463d      	mov	r5, r7
 8018e02:	e7d1      	b.n	8018da8 <rcl_get_secure_root+0x60>
 8018e04:	4622      	mov	r2, r4
 8018e06:	4638      	mov	r0, r7
 8018e08:	4641      	mov	r1, r8
 8018e0a:	f7ff ff5d 	bl	8018cc8 <exact_match_lookup>
 8018e0e:	4605      	mov	r5, r0
 8018e10:	e7ea      	b.n	8018de8 <rcl_get_secure_root+0xa0>
 8018e12:	bf00      	nop
 8018e14:	08021198 	.word	0x08021198
 8018e18:	080211b0 	.word	0x080211b0

08018e1c <rcl_get_security_options_from_environment>:
 8018e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e1e:	b083      	sub	sp, #12
 8018e20:	2300      	movs	r3, #0
 8018e22:	4605      	mov	r5, r0
 8018e24:	460e      	mov	r6, r1
 8018e26:	481a      	ldr	r0, [pc, #104]	@ (8018e90 <rcl_get_security_options_from_environment+0x74>)
 8018e28:	9301      	str	r3, [sp, #4]
 8018e2a:	a901      	add	r1, sp, #4
 8018e2c:	4617      	mov	r7, r2
 8018e2e:	f7f7 fd7f 	bl	8010930 <rcutils_get_env>
 8018e32:	b110      	cbz	r0, 8018e3a <rcl_get_security_options_from_environment+0x1e>
 8018e34:	2001      	movs	r0, #1
 8018e36:	b003      	add	sp, #12
 8018e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e3a:	4604      	mov	r4, r0
 8018e3c:	4915      	ldr	r1, [pc, #84]	@ (8018e94 <rcl_get_security_options_from_environment+0x78>)
 8018e3e:	9801      	ldr	r0, [sp, #4]
 8018e40:	f7e7 f9ee 	bl	8000220 <strcmp>
 8018e44:	b9b0      	cbnz	r0, 8018e74 <rcl_get_security_options_from_environment+0x58>
 8018e46:	9001      	str	r0, [sp, #4]
 8018e48:	b1c7      	cbz	r7, 8018e7c <rcl_get_security_options_from_environment+0x60>
 8018e4a:	4813      	ldr	r0, [pc, #76]	@ (8018e98 <rcl_get_security_options_from_environment+0x7c>)
 8018e4c:	a901      	add	r1, sp, #4
 8018e4e:	f7f7 fd6f 	bl	8010930 <rcutils_get_env>
 8018e52:	2800      	cmp	r0, #0
 8018e54:	d1ee      	bne.n	8018e34 <rcl_get_security_options_from_environment+0x18>
 8018e56:	4911      	ldr	r1, [pc, #68]	@ (8018e9c <rcl_get_security_options_from_environment+0x80>)
 8018e58:	9801      	ldr	r0, [sp, #4]
 8018e5a:	f7e7 f9e1 	bl	8000220 <strcmp>
 8018e5e:	fab0 f080 	clz	r0, r0
 8018e62:	0940      	lsrs	r0, r0, #5
 8018e64:	7038      	strb	r0, [r7, #0]
 8018e66:	4631      	mov	r1, r6
 8018e68:	4628      	mov	r0, r5
 8018e6a:	f7ff ff6d 	bl	8018d48 <rcl_get_secure_root>
 8018e6e:	b138      	cbz	r0, 8018e80 <rcl_get_security_options_from_environment+0x64>
 8018e70:	6078      	str	r0, [r7, #4]
 8018e72:	e000      	b.n	8018e76 <rcl_get_security_options_from_environment+0x5a>
 8018e74:	703c      	strb	r4, [r7, #0]
 8018e76:	2000      	movs	r0, #0
 8018e78:	b003      	add	sp, #12
 8018e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e7c:	200b      	movs	r0, #11
 8018e7e:	e7da      	b.n	8018e36 <rcl_get_security_options_from_environment+0x1a>
 8018e80:	7838      	ldrb	r0, [r7, #0]
 8018e82:	f1a0 0001 	sub.w	r0, r0, #1
 8018e86:	fab0 f080 	clz	r0, r0
 8018e8a:	0940      	lsrs	r0, r0, #5
 8018e8c:	e7d3      	b.n	8018e36 <rcl_get_security_options_from_environment+0x1a>
 8018e8e:	bf00      	nop
 8018e90:	08021150 	.word	0x08021150
 8018e94:	08021164 	.word	0x08021164
 8018e98:	0802116c 	.word	0x0802116c
 8018e9c:	08021184 	.word	0x08021184

08018ea0 <rcl_service_get_rmw_handle>:
 8018ea0:	b118      	cbz	r0, 8018eaa <rcl_service_get_rmw_handle+0xa>
 8018ea2:	6800      	ldr	r0, [r0, #0]
 8018ea4:	b108      	cbz	r0, 8018eaa <rcl_service_get_rmw_handle+0xa>
 8018ea6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018eaa:	4770      	bx	lr

08018eac <rcl_take_request>:
 8018eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eae:	468e      	mov	lr, r1
 8018eb0:	460c      	mov	r4, r1
 8018eb2:	4617      	mov	r7, r2
 8018eb4:	4605      	mov	r5, r0
 8018eb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018eba:	b091      	sub	sp, #68	@ 0x44
 8018ebc:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8018ec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ec4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018ec8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018ecc:	b30d      	cbz	r5, 8018f12 <rcl_take_request+0x66>
 8018ece:	682b      	ldr	r3, [r5, #0]
 8018ed0:	b1fb      	cbz	r3, 8018f12 <rcl_take_request+0x66>
 8018ed2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018ed6:	b1e0      	cbz	r0, 8018f12 <rcl_take_request+0x66>
 8018ed8:	b397      	cbz	r7, 8018f40 <rcl_take_request+0x94>
 8018eda:	2300      	movs	r3, #0
 8018edc:	f88d 3017 	strb.w	r3, [sp, #23]
 8018ee0:	463a      	mov	r2, r7
 8018ee2:	f10d 0317 	add.w	r3, sp, #23
 8018ee6:	a906      	add	r1, sp, #24
 8018ee8:	f002 fbdc 	bl	801b6a4 <rmw_take_request>
 8018eec:	4606      	mov	r6, r0
 8018eee:	b198      	cbz	r0, 8018f18 <rcl_take_request+0x6c>
 8018ef0:	280a      	cmp	r0, #10
 8018ef2:	bf18      	it	ne
 8018ef4:	2601      	movne	r6, #1
 8018ef6:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8018efa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018efe:	46a6      	mov	lr, r4
 8018f00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018f04:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8018f08:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018f0c:	4630      	mov	r0, r6
 8018f0e:	b011      	add	sp, #68	@ 0x44
 8018f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f12:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8018f16:	e7ee      	b.n	8018ef6 <rcl_take_request+0x4a>
 8018f18:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8018f1c:	b193      	cbz	r3, 8018f44 <rcl_take_request+0x98>
 8018f1e:	682b      	ldr	r3, [r5, #0]
 8018f20:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d0e6      	beq.n	8018ef6 <rcl_take_request+0x4a>
 8018f28:	463a      	mov	r2, r7
 8018f2a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8018f2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8018f30:	e9cd 6700 	strd	r6, r7, [sp]
 8018f34:	9302      	str	r3, [sp, #8]
 8018f36:	2101      	movs	r1, #1
 8018f38:	f000 f842 	bl	8018fc0 <rcl_send_service_event_message>
 8018f3c:	4606      	mov	r6, r0
 8018f3e:	e7da      	b.n	8018ef6 <rcl_take_request+0x4a>
 8018f40:	260b      	movs	r6, #11
 8018f42:	e7d8      	b.n	8018ef6 <rcl_take_request+0x4a>
 8018f44:	f240 2659 	movw	r6, #601	@ 0x259
 8018f48:	e7d5      	b.n	8018ef6 <rcl_take_request+0x4a>
 8018f4a:	bf00      	nop

08018f4c <rcl_send_response>:
 8018f4c:	b350      	cbz	r0, 8018fa4 <rcl_send_response+0x58>
 8018f4e:	b570      	push	{r4, r5, r6, lr}
 8018f50:	6803      	ldr	r3, [r0, #0]
 8018f52:	b084      	sub	sp, #16
 8018f54:	4604      	mov	r4, r0
 8018f56:	b1cb      	cbz	r3, 8018f8c <rcl_send_response+0x40>
 8018f58:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018f5c:	b1b0      	cbz	r0, 8018f8c <rcl_send_response+0x40>
 8018f5e:	460e      	mov	r6, r1
 8018f60:	b1e9      	cbz	r1, 8018f9e <rcl_send_response+0x52>
 8018f62:	4615      	mov	r5, r2
 8018f64:	b1da      	cbz	r2, 8018f9e <rcl_send_response+0x52>
 8018f66:	f002 fbfb 	bl	801b760 <rmw_send_response>
 8018f6a:	b998      	cbnz	r0, 8018f94 <rcl_send_response+0x48>
 8018f6c:	6823      	ldr	r3, [r4, #0]
 8018f6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8018f72:	b16b      	cbz	r3, 8018f90 <rcl_send_response+0x44>
 8018f74:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8018f78:	462a      	mov	r2, r5
 8018f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8018f7e:	9602      	str	r6, [sp, #8]
 8018f80:	2102      	movs	r1, #2
 8018f82:	4618      	mov	r0, r3
 8018f84:	f000 f81c 	bl	8018fc0 <rcl_send_service_event_message>
 8018f88:	b004      	add	sp, #16
 8018f8a:	bd70      	pop	{r4, r5, r6, pc}
 8018f8c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8018f90:	b004      	add	sp, #16
 8018f92:	bd70      	pop	{r4, r5, r6, pc}
 8018f94:	2802      	cmp	r0, #2
 8018f96:	bf18      	it	ne
 8018f98:	2001      	movne	r0, #1
 8018f9a:	b004      	add	sp, #16
 8018f9c:	bd70      	pop	{r4, r5, r6, pc}
 8018f9e:	200b      	movs	r0, #11
 8018fa0:	b004      	add	sp, #16
 8018fa2:	bd70      	pop	{r4, r5, r6, pc}
 8018fa4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8018fa8:	4770      	bx	lr
 8018faa:	bf00      	nop

08018fac <rcl_service_is_valid>:
 8018fac:	b130      	cbz	r0, 8018fbc <rcl_service_is_valid+0x10>
 8018fae:	6800      	ldr	r0, [r0, #0]
 8018fb0:	b120      	cbz	r0, 8018fbc <rcl_service_is_valid+0x10>
 8018fb2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018fb6:	3800      	subs	r0, #0
 8018fb8:	bf18      	it	ne
 8018fba:	2001      	movne	r0, #1
 8018fbc:	4770      	bx	lr
 8018fbe:	bf00      	nop

08018fc0 <rcl_send_service_event_message>:
 8018fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fc2:	b093      	sub	sp, #76	@ 0x4c
 8018fc4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018fc6:	b17a      	cbz	r2, 8018fe8 <rcl_send_service_event_message+0x28>
 8018fc8:	b176      	cbz	r6, 8018fe8 <rcl_send_service_event_message+0x28>
 8018fca:	4604      	mov	r4, r0
 8018fcc:	b150      	cbz	r0, 8018fe4 <rcl_send_service_event_message+0x24>
 8018fce:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8018fd2:	b13b      	cbz	r3, 8018fe4 <rcl_send_service_event_message+0x24>
 8018fd4:	68c0      	ldr	r0, [r0, #12]
 8018fd6:	460f      	mov	r7, r1
 8018fd8:	4615      	mov	r5, r2
 8018fda:	f000 f893 	bl	8019104 <rcl_clock_valid>
 8018fde:	b108      	cbz	r0, 8018fe4 <rcl_send_service_event_message+0x24>
 8018fe0:	7a23      	ldrb	r3, [r4, #8]
 8018fe2:	b92b      	cbnz	r3, 8018ff0 <rcl_send_service_event_message+0x30>
 8018fe4:	2501      	movs	r5, #1
 8018fe6:	e000      	b.n	8018fea <rcl_send_service_event_message+0x2a>
 8018fe8:	250b      	movs	r5, #11
 8018fea:	4628      	mov	r0, r5
 8018fec:	b013      	add	sp, #76	@ 0x4c
 8018fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ff0:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8018ff4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018ff8:	f10d 0c0c 	add.w	ip, sp, #12
 8018ffc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019000:	f8de 3000 	ldr.w	r3, [lr]
 8019004:	f8cc 3000 	str.w	r3, [ip]
 8019008:	a803      	add	r0, sp, #12
 801900a:	f7f7 fbdd 	bl	80107c8 <rcutils_allocator_is_valid>
 801900e:	2800      	cmp	r0, #0
 8019010:	d0ea      	beq.n	8018fe8 <rcl_send_service_event_message+0x28>
 8019012:	6820      	ldr	r0, [r4, #0]
 8019014:	f7f6 f81e 	bl	800f054 <rcl_publisher_is_valid>
 8019018:	2800      	cmp	r0, #0
 801901a:	d045      	beq.n	80190a8 <rcl_send_service_event_message+0xe8>
 801901c:	4669      	mov	r1, sp
 801901e:	68e0      	ldr	r0, [r4, #12]
 8019020:	f000 f918 	bl	8019254 <rcl_clock_get_now>
 8019024:	4601      	mov	r1, r0
 8019026:	2800      	cmp	r0, #0
 8019028:	d13b      	bne.n	80190a2 <rcl_send_service_event_message+0xe2>
 801902a:	2220      	movs	r2, #32
 801902c:	eb0d 0002 	add.w	r0, sp, r2
 8019030:	f004 fec6 	bl	801ddc0 <memset>
 8019034:	a324      	add	r3, pc, #144	@ (adr r3, 80190c8 <rcl_send_service_event_message+0x108>)
 8019036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801903a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801903e:	f88d 7020 	strb.w	r7, [sp, #32]
 8019042:	f7e7 fe11 	bl	8000c68 <__aeabi_ldivmod>
 8019046:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 801904a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 801904e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019052:	7a23      	ldrb	r3, [r4, #8]
 8019054:	6830      	ldr	r0, [r6, #0]
 8019056:	6871      	ldr	r1, [r6, #4]
 8019058:	68b2      	ldr	r2, [r6, #8]
 801905a:	2b01      	cmp	r3, #1
 801905c:	68f3      	ldr	r3, [r6, #12]
 801905e:	bf08      	it	eq
 8019060:	2500      	moveq	r5, #0
 8019062:	ae0b      	add	r6, sp, #44	@ 0x2c
 8019064:	2f01      	cmp	r7, #1
 8019066:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019068:	d821      	bhi.n	80190ae <rcl_send_service_event_message+0xee>
 801906a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801906e:	462a      	mov	r2, r5
 8019070:	a808      	add	r0, sp, #32
 8019072:	699d      	ldr	r5, [r3, #24]
 8019074:	a903      	add	r1, sp, #12
 8019076:	2300      	movs	r3, #0
 8019078:	47a8      	blx	r5
 801907a:	4606      	mov	r6, r0
 801907c:	2e00      	cmp	r6, #0
 801907e:	d0b1      	beq.n	8018fe4 <rcl_send_service_event_message+0x24>
 8019080:	4631      	mov	r1, r6
 8019082:	6820      	ldr	r0, [r4, #0]
 8019084:	2200      	movs	r2, #0
 8019086:	f7f5 ffc1 	bl	800f00c <rcl_publish>
 801908a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801908e:	4605      	mov	r5, r0
 8019090:	69db      	ldr	r3, [r3, #28]
 8019092:	a903      	add	r1, sp, #12
 8019094:	4630      	mov	r0, r6
 8019096:	4798      	blx	r3
 8019098:	2d00      	cmp	r5, #0
 801909a:	d0a6      	beq.n	8018fea <rcl_send_service_event_message+0x2a>
 801909c:	f7f7 fc78 	bl	8010990 <rcutils_reset_error>
 80190a0:	e7a3      	b.n	8018fea <rcl_send_service_event_message+0x2a>
 80190a2:	f7f7 fc75 	bl	8010990 <rcutils_reset_error>
 80190a6:	e79d      	b.n	8018fe4 <rcl_send_service_event_message+0x24>
 80190a8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80190ac:	e79d      	b.n	8018fea <rcl_send_service_event_message+0x2a>
 80190ae:	1eb9      	subs	r1, r7, #2
 80190b0:	2901      	cmp	r1, #1
 80190b2:	d8f6      	bhi.n	80190a2 <rcl_send_service_event_message+0xe2>
 80190b4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80190b8:	462b      	mov	r3, r5
 80190ba:	a808      	add	r0, sp, #32
 80190bc:	6995      	ldr	r5, [r2, #24]
 80190be:	a903      	add	r1, sp, #12
 80190c0:	2200      	movs	r2, #0
 80190c2:	47a8      	blx	r5
 80190c4:	4606      	mov	r6, r0
 80190c6:	e7d9      	b.n	801907c <rcl_send_service_event_message+0xbc>
 80190c8:	3b9aca00 	.word	0x3b9aca00
 80190cc:	00000000 	.word	0x00000000

080190d0 <rcl_get_system_time>:
 80190d0:	4608      	mov	r0, r1
 80190d2:	f7f7 bdf7 	b.w	8010cc4 <rcutils_system_time_now>
 80190d6:	bf00      	nop

080190d8 <rcl_get_steady_time>:
 80190d8:	4608      	mov	r0, r1
 80190da:	f7f7 be1d 	b.w	8010d18 <rcutils_steady_time_now>
 80190de:	bf00      	nop

080190e0 <rcl_get_ros_time>:
 80190e0:	7a03      	ldrb	r3, [r0, #8]
 80190e2:	b510      	push	{r4, lr}
 80190e4:	460c      	mov	r4, r1
 80190e6:	b143      	cbz	r3, 80190fa <rcl_get_ros_time+0x1a>
 80190e8:	2105      	movs	r1, #5
 80190ea:	f7f7 fb7b 	bl	80107e4 <__atomic_load_8>
 80190ee:	4602      	mov	r2, r0
 80190f0:	460b      	mov	r3, r1
 80190f2:	e9c4 2300 	strd	r2, r3, [r4]
 80190f6:	2000      	movs	r0, #0
 80190f8:	bd10      	pop	{r4, pc}
 80190fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190fe:	4608      	mov	r0, r1
 8019100:	f7f7 bde0 	b.w	8010cc4 <rcutils_system_time_now>

08019104 <rcl_clock_valid>:
 8019104:	b138      	cbz	r0, 8019116 <rcl_clock_valid+0x12>
 8019106:	7803      	ldrb	r3, [r0, #0]
 8019108:	b123      	cbz	r3, 8019114 <rcl_clock_valid+0x10>
 801910a:	68c0      	ldr	r0, [r0, #12]
 801910c:	3800      	subs	r0, #0
 801910e:	bf18      	it	ne
 8019110:	2001      	movne	r0, #1
 8019112:	4770      	bx	lr
 8019114:	4618      	mov	r0, r3
 8019116:	4770      	bx	lr

08019118 <rcl_clock_init>:
 8019118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801911a:	4605      	mov	r5, r0
 801911c:	4610      	mov	r0, r2
 801911e:	4614      	mov	r4, r2
 8019120:	460e      	mov	r6, r1
 8019122:	f7f7 fb51 	bl	80107c8 <rcutils_allocator_is_valid>
 8019126:	b128      	cbz	r0, 8019134 <rcl_clock_init+0x1c>
 8019128:	2d03      	cmp	r5, #3
 801912a:	d803      	bhi.n	8019134 <rcl_clock_init+0x1c>
 801912c:	e8df f005 	tbb	[pc, r5]
 8019130:	044c291a 	.word	0x044c291a
 8019134:	200b      	movs	r0, #11
 8019136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019138:	2e00      	cmp	r6, #0
 801913a:	d0fb      	beq.n	8019134 <rcl_clock_init+0x1c>
 801913c:	2c00      	cmp	r4, #0
 801913e:	d0f9      	beq.n	8019134 <rcl_clock_init+0x1c>
 8019140:	2300      	movs	r3, #0
 8019142:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019146:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 80191ec <rcl_clock_init+0xd4>
 801914a:	6133      	str	r3, [r6, #16]
 801914c:	f106 0514 	add.w	r5, r6, #20
 8019150:	2703      	movs	r7, #3
 8019152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019156:	6823      	ldr	r3, [r4, #0]
 8019158:	602b      	str	r3, [r5, #0]
 801915a:	f8c6 c00c 	str.w	ip, [r6, #12]
 801915e:	7037      	strb	r7, [r6, #0]
 8019160:	2000      	movs	r0, #0
 8019162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019164:	2e00      	cmp	r6, #0
 8019166:	d0e5      	beq.n	8019134 <rcl_clock_init+0x1c>
 8019168:	2300      	movs	r3, #0
 801916a:	7033      	strb	r3, [r6, #0]
 801916c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019170:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8019174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019176:	f106 0514 	add.w	r5, r6, #20
 801917a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801917c:	6823      	ldr	r3, [r4, #0]
 801917e:	602b      	str	r3, [r5, #0]
 8019180:	e7ee      	b.n	8019160 <rcl_clock_init+0x48>
 8019182:	2e00      	cmp	r6, #0
 8019184:	d0d6      	beq.n	8019134 <rcl_clock_init+0x1c>
 8019186:	2c00      	cmp	r4, #0
 8019188:	d0d4      	beq.n	8019134 <rcl_clock_init+0x1c>
 801918a:	2700      	movs	r7, #0
 801918c:	7037      	strb	r7, [r6, #0]
 801918e:	46a4      	mov	ip, r4
 8019190:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019194:	f106 0514 	add.w	r5, r6, #20
 8019198:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801919c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80191a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80191a2:	f8dc 3000 	ldr.w	r3, [ip]
 80191a6:	602b      	str	r3, [r5, #0]
 80191a8:	6921      	ldr	r1, [r4, #16]
 80191aa:	6823      	ldr	r3, [r4, #0]
 80191ac:	2010      	movs	r0, #16
 80191ae:	4798      	blx	r3
 80191b0:	6130      	str	r0, [r6, #16]
 80191b2:	b1b8      	cbz	r0, 80191e4 <rcl_clock_init+0xcc>
 80191b4:	2200      	movs	r2, #0
 80191b6:	2300      	movs	r3, #0
 80191b8:	e9c0 2300 	strd	r2, r3, [r0]
 80191bc:	4a0a      	ldr	r2, [pc, #40]	@ (80191e8 <rcl_clock_init+0xd0>)
 80191be:	7207      	strb	r7, [r0, #8]
 80191c0:	2301      	movs	r3, #1
 80191c2:	60f2      	str	r2, [r6, #12]
 80191c4:	7033      	strb	r3, [r6, #0]
 80191c6:	e7cb      	b.n	8019160 <rcl_clock_init+0x48>
 80191c8:	2e00      	cmp	r6, #0
 80191ca:	d0b3      	beq.n	8019134 <rcl_clock_init+0x1c>
 80191cc:	2c00      	cmp	r4, #0
 80191ce:	d0b1      	beq.n	8019134 <rcl_clock_init+0x1c>
 80191d0:	2300      	movs	r3, #0
 80191d2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80191d6:	f8df c018 	ldr.w	ip, [pc, #24]	@ 80191f0 <rcl_clock_init+0xd8>
 80191da:	6133      	str	r3, [r6, #16]
 80191dc:	f106 0514 	add.w	r5, r6, #20
 80191e0:	2702      	movs	r7, #2
 80191e2:	e7b6      	b.n	8019152 <rcl_clock_init+0x3a>
 80191e4:	200a      	movs	r0, #10
 80191e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191e8:	080190e1 	.word	0x080190e1
 80191ec:	080190d9 	.word	0x080190d9
 80191f0:	080190d1 	.word	0x080190d1

080191f4 <rcl_clock_fini>:
 80191f4:	b358      	cbz	r0, 801924e <rcl_clock_fini+0x5a>
 80191f6:	b538      	push	{r3, r4, r5, lr}
 80191f8:	4604      	mov	r4, r0
 80191fa:	3014      	adds	r0, #20
 80191fc:	f7f7 fae4 	bl	80107c8 <rcutils_allocator_is_valid>
 8019200:	b198      	cbz	r0, 801922a <rcl_clock_fini+0x36>
 8019202:	7823      	ldrb	r3, [r4, #0]
 8019204:	2b02      	cmp	r3, #2
 8019206:	d005      	beq.n	8019214 <rcl_clock_fini+0x20>
 8019208:	2b03      	cmp	r3, #3
 801920a:	d003      	beq.n	8019214 <rcl_clock_fini+0x20>
 801920c:	2b01      	cmp	r3, #1
 801920e:	d00e      	beq.n	801922e <rcl_clock_fini+0x3a>
 8019210:	200b      	movs	r0, #11
 8019212:	bd38      	pop	{r3, r4, r5, pc}
 8019214:	68a3      	ldr	r3, [r4, #8]
 8019216:	b133      	cbz	r3, 8019226 <rcl_clock_fini+0x32>
 8019218:	2500      	movs	r5, #0
 801921a:	69a3      	ldr	r3, [r4, #24]
 801921c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801921e:	6860      	ldr	r0, [r4, #4]
 8019220:	60a5      	str	r5, [r4, #8]
 8019222:	4798      	blx	r3
 8019224:	6065      	str	r5, [r4, #4]
 8019226:	2000      	movs	r0, #0
 8019228:	bd38      	pop	{r3, r4, r5, pc}
 801922a:	2001      	movs	r0, #1
 801922c:	bd38      	pop	{r3, r4, r5, pc}
 801922e:	68a3      	ldr	r3, [r4, #8]
 8019230:	b133      	cbz	r3, 8019240 <rcl_clock_fini+0x4c>
 8019232:	2500      	movs	r5, #0
 8019234:	69a3      	ldr	r3, [r4, #24]
 8019236:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019238:	6860      	ldr	r0, [r4, #4]
 801923a:	60a5      	str	r5, [r4, #8]
 801923c:	4798      	blx	r3
 801923e:	6065      	str	r5, [r4, #4]
 8019240:	69a3      	ldr	r3, [r4, #24]
 8019242:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8019244:	6920      	ldr	r0, [r4, #16]
 8019246:	4798      	blx	r3
 8019248:	2300      	movs	r3, #0
 801924a:	6123      	str	r3, [r4, #16]
 801924c:	e7eb      	b.n	8019226 <rcl_clock_fini+0x32>
 801924e:	200b      	movs	r0, #11
 8019250:	4770      	bx	lr
 8019252:	bf00      	nop

08019254 <rcl_clock_get_now>:
 8019254:	b140      	cbz	r0, 8019268 <rcl_clock_get_now+0x14>
 8019256:	b139      	cbz	r1, 8019268 <rcl_clock_get_now+0x14>
 8019258:	7803      	ldrb	r3, [r0, #0]
 801925a:	b11b      	cbz	r3, 8019264 <rcl_clock_get_now+0x10>
 801925c:	68c3      	ldr	r3, [r0, #12]
 801925e:	b10b      	cbz	r3, 8019264 <rcl_clock_get_now+0x10>
 8019260:	6900      	ldr	r0, [r0, #16]
 8019262:	4718      	bx	r3
 8019264:	2001      	movs	r0, #1
 8019266:	4770      	bx	lr
 8019268:	200b      	movs	r0, #11
 801926a:	4770      	bx	lr

0801926c <rcl_is_enabled_ros_time_override>:
 801926c:	b158      	cbz	r0, 8019286 <rcl_is_enabled_ros_time_override+0x1a>
 801926e:	b151      	cbz	r1, 8019286 <rcl_is_enabled_ros_time_override+0x1a>
 8019270:	7803      	ldrb	r3, [r0, #0]
 8019272:	2b01      	cmp	r3, #1
 8019274:	d105      	bne.n	8019282 <rcl_is_enabled_ros_time_override+0x16>
 8019276:	6902      	ldr	r2, [r0, #16]
 8019278:	b11a      	cbz	r2, 8019282 <rcl_is_enabled_ros_time_override+0x16>
 801927a:	7a13      	ldrb	r3, [r2, #8]
 801927c:	700b      	strb	r3, [r1, #0]
 801927e:	2000      	movs	r0, #0
 8019280:	4770      	bx	lr
 8019282:	2001      	movs	r0, #1
 8019284:	4770      	bx	lr
 8019286:	200b      	movs	r0, #11
 8019288:	4770      	bx	lr
 801928a:	bf00      	nop

0801928c <rcl_clock_add_jump_callback>:
 801928c:	b082      	sub	sp, #8
 801928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019292:	a906      	add	r1, sp, #24
 8019294:	e881 000c 	stmia.w	r1, {r2, r3}
 8019298:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 801929c:	b320      	cbz	r0, 80192e8 <rcl_clock_add_jump_callback+0x5c>
 801929e:	4605      	mov	r5, r0
 80192a0:	3014      	adds	r0, #20
 80192a2:	f7f7 fa91 	bl	80107c8 <rcutils_allocator_is_valid>
 80192a6:	b1f8      	cbz	r0, 80192e8 <rcl_clock_add_jump_callback+0x5c>
 80192a8:	b1f7      	cbz	r7, 80192e8 <rcl_clock_add_jump_callback+0x5c>
 80192aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	db1b      	blt.n	80192e8 <rcl_clock_add_jump_callback+0x5c>
 80192b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80192b4:	2a01      	cmp	r2, #1
 80192b6:	f173 0300 	sbcs.w	r3, r3, #0
 80192ba:	da15      	bge.n	80192e8 <rcl_clock_add_jump_callback+0x5c>
 80192bc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80192c0:	2c00      	cmp	r4, #0
 80192c2:	d042      	beq.n	801934a <rcl_clock_add_jump_callback+0xbe>
 80192c4:	4603      	mov	r3, r0
 80192c6:	2200      	movs	r2, #0
 80192c8:	e003      	b.n	80192d2 <rcl_clock_add_jump_callback+0x46>
 80192ca:	4294      	cmp	r4, r2
 80192cc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80192d0:	d011      	beq.n	80192f6 <rcl_clock_add_jump_callback+0x6a>
 80192d2:	6819      	ldr	r1, [r3, #0]
 80192d4:	42b9      	cmp	r1, r7
 80192d6:	f102 0201 	add.w	r2, r2, #1
 80192da:	d1f6      	bne.n	80192ca <rcl_clock_add_jump_callback+0x3e>
 80192dc:	6a19      	ldr	r1, [r3, #32]
 80192de:	42b1      	cmp	r1, r6
 80192e0:	d1f3      	bne.n	80192ca <rcl_clock_add_jump_callback+0x3e>
 80192e2:	f04f 0e01 	mov.w	lr, #1
 80192e6:	e001      	b.n	80192ec <rcl_clock_add_jump_callback+0x60>
 80192e8:	f04f 0e0b 	mov.w	lr, #11
 80192ec:	4670      	mov	r0, lr
 80192ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192f2:	b002      	add	sp, #8
 80192f4:	4770      	bx	lr
 80192f6:	3401      	adds	r4, #1
 80192f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80192fc:	00e1      	lsls	r1, r4, #3
 80192fe:	69eb      	ldr	r3, [r5, #28]
 8019300:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019302:	4798      	blx	r3
 8019304:	b1f0      	cbz	r0, 8019344 <rcl_clock_add_jump_callback+0xb8>
 8019306:	68ab      	ldr	r3, [r5, #8]
 8019308:	6068      	str	r0, [r5, #4]
 801930a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801930e:	f10d 0c18 	add.w	ip, sp, #24
 8019312:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8019316:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 801931a:	f103 0801 	add.w	r8, r3, #1
 801931e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019322:	f104 0708 	add.w	r7, r4, #8
 8019326:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019328:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801932c:	f04f 0e00 	mov.w	lr, #0
 8019330:	e887 0003 	stmia.w	r7, {r0, r1}
 8019334:	6226      	str	r6, [r4, #32]
 8019336:	4670      	mov	r0, lr
 8019338:	f8c5 8008 	str.w	r8, [r5, #8]
 801933c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019340:	b002      	add	sp, #8
 8019342:	4770      	bx	lr
 8019344:	f04f 0e0a 	mov.w	lr, #10
 8019348:	e7d0      	b.n	80192ec <rcl_clock_add_jump_callback+0x60>
 801934a:	2128      	movs	r1, #40	@ 0x28
 801934c:	e7d7      	b.n	80192fe <rcl_clock_add_jump_callback+0x72>
 801934e:	bf00      	nop

08019350 <rcl_clock_remove_jump_callback>:
 8019350:	2800      	cmp	r0, #0
 8019352:	d05a      	beq.n	801940a <rcl_clock_remove_jump_callback+0xba>
 8019354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019358:	4605      	mov	r5, r0
 801935a:	3014      	adds	r0, #20
 801935c:	460f      	mov	r7, r1
 801935e:	4692      	mov	sl, r2
 8019360:	f7f7 fa32 	bl	80107c8 <rcutils_allocator_is_valid>
 8019364:	2800      	cmp	r0, #0
 8019366:	d03f      	beq.n	80193e8 <rcl_clock_remove_jump_callback+0x98>
 8019368:	2f00      	cmp	r7, #0
 801936a:	d03d      	beq.n	80193e8 <rcl_clock_remove_jump_callback+0x98>
 801936c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8019370:	f1b8 0f00 	cmp.w	r8, #0
 8019374:	d00c      	beq.n	8019390 <rcl_clock_remove_jump_callback+0x40>
 8019376:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801937a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801937e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8019382:	464c      	mov	r4, r9
 8019384:	6823      	ldr	r3, [r4, #0]
 8019386:	42bb      	cmp	r3, r7
 8019388:	d005      	beq.n	8019396 <rcl_clock_remove_jump_callback+0x46>
 801938a:	3428      	adds	r4, #40	@ 0x28
 801938c:	42b4      	cmp	r4, r6
 801938e:	d1f9      	bne.n	8019384 <rcl_clock_remove_jump_callback+0x34>
 8019390:	2001      	movs	r0, #1
 8019392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019396:	6a23      	ldr	r3, [r4, #32]
 8019398:	3428      	adds	r4, #40	@ 0x28
 801939a:	42b4      	cmp	r4, r6
 801939c:	d02c      	beq.n	80193f8 <rcl_clock_remove_jump_callback+0xa8>
 801939e:	4553      	cmp	r3, sl
 80193a0:	d1f0      	bne.n	8019384 <rcl_clock_remove_jump_callback+0x34>
 80193a2:	46a6      	mov	lr, r4
 80193a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80193a8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80193ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80193b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80193b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80193b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80193bc:	3428      	adds	r4, #40	@ 0x28
 80193be:	42a6      	cmp	r6, r4
 80193c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80193c4:	d1ed      	bne.n	80193a2 <rcl_clock_remove_jump_callback+0x52>
 80193c6:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 80193ca:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80193cc:	60ac      	str	r4, [r5, #8]
 80193ce:	b174      	cbz	r4, 80193ee <rcl_clock_remove_jump_callback+0x9e>
 80193d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80193d4:	00e1      	lsls	r1, r4, #3
 80193d6:	69eb      	ldr	r3, [r5, #28]
 80193d8:	4648      	mov	r0, r9
 80193da:	4798      	blx	r3
 80193dc:	4604      	mov	r4, r0
 80193de:	b1b0      	cbz	r0, 801940e <rcl_clock_remove_jump_callback+0xbe>
 80193e0:	606c      	str	r4, [r5, #4]
 80193e2:	2000      	movs	r0, #0
 80193e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193e8:	200b      	movs	r0, #11
 80193ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193ee:	69ab      	ldr	r3, [r5, #24]
 80193f0:	4611      	mov	r1, r2
 80193f2:	4648      	mov	r0, r9
 80193f4:	4798      	blx	r3
 80193f6:	e7f3      	b.n	80193e0 <rcl_clock_remove_jump_callback+0x90>
 80193f8:	4553      	cmp	r3, sl
 80193fa:	d1c9      	bne.n	8019390 <rcl_clock_remove_jump_callback+0x40>
 80193fc:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8019400:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8019402:	60ac      	str	r4, [r5, #8]
 8019404:	2c00      	cmp	r4, #0
 8019406:	d1e3      	bne.n	80193d0 <rcl_clock_remove_jump_callback+0x80>
 8019408:	e7f1      	b.n	80193ee <rcl_clock_remove_jump_callback+0x9e>
 801940a:	200b      	movs	r0, #11
 801940c:	4770      	bx	lr
 801940e:	200a      	movs	r0, #10
 8019410:	e7eb      	b.n	80193ea <rcl_clock_remove_jump_callback+0x9a>
 8019412:	bf00      	nop

08019414 <rcl_validate_enclave_name_with_size>:
 8019414:	2800      	cmp	r0, #0
 8019416:	d037      	beq.n	8019488 <rcl_validate_enclave_name_with_size+0x74>
 8019418:	b570      	push	{r4, r5, r6, lr}
 801941a:	4614      	mov	r4, r2
 801941c:	b0c2      	sub	sp, #264	@ 0x108
 801941e:	b342      	cbz	r2, 8019472 <rcl_validate_enclave_name_with_size+0x5e>
 8019420:	461e      	mov	r6, r3
 8019422:	466a      	mov	r2, sp
 8019424:	ab01      	add	r3, sp, #4
 8019426:	460d      	mov	r5, r1
 8019428:	f7f7 fcf8 	bl	8010e1c <rmw_validate_namespace_with_size>
 801942c:	4684      	mov	ip, r0
 801942e:	bb28      	cbnz	r0, 801947c <rcl_validate_enclave_name_with_size+0x68>
 8019430:	9b00      	ldr	r3, [sp, #0]
 8019432:	b923      	cbnz	r3, 801943e <rcl_validate_enclave_name_with_size+0x2a>
 8019434:	2300      	movs	r3, #0
 8019436:	6023      	str	r3, [r4, #0]
 8019438:	4660      	mov	r0, ip
 801943a:	b042      	add	sp, #264	@ 0x108
 801943c:	bd70      	pop	{r4, r5, r6, pc}
 801943e:	2b07      	cmp	r3, #7
 8019440:	d00f      	beq.n	8019462 <rcl_validate_enclave_name_with_size+0x4e>
 8019442:	1e5a      	subs	r2, r3, #1
 8019444:	2a05      	cmp	r2, #5
 8019446:	d823      	bhi.n	8019490 <rcl_validate_enclave_name_with_size+0x7c>
 8019448:	e8df f002 	tbb	[pc, r2]
 801944c:	03030303 	.word	0x03030303
 8019450:	0303      	.short	0x0303
 8019452:	6023      	str	r3, [r4, #0]
 8019454:	2e00      	cmp	r6, #0
 8019456:	d0ef      	beq.n	8019438 <rcl_validate_enclave_name_with_size+0x24>
 8019458:	9b01      	ldr	r3, [sp, #4]
 801945a:	6033      	str	r3, [r6, #0]
 801945c:	4660      	mov	r0, ip
 801945e:	b042      	add	sp, #264	@ 0x108
 8019460:	bd70      	pop	{r4, r5, r6, pc}
 8019462:	2dff      	cmp	r5, #255	@ 0xff
 8019464:	d9e6      	bls.n	8019434 <rcl_validate_enclave_name_with_size+0x20>
 8019466:	6023      	str	r3, [r4, #0]
 8019468:	2e00      	cmp	r6, #0
 801946a:	d0e5      	beq.n	8019438 <rcl_validate_enclave_name_with_size+0x24>
 801946c:	23fe      	movs	r3, #254	@ 0xfe
 801946e:	6033      	str	r3, [r6, #0]
 8019470:	e7e2      	b.n	8019438 <rcl_validate_enclave_name_with_size+0x24>
 8019472:	f04f 0c0b 	mov.w	ip, #11
 8019476:	4660      	mov	r0, ip
 8019478:	b042      	add	sp, #264	@ 0x108
 801947a:	bd70      	pop	{r4, r5, r6, pc}
 801947c:	f7ff f85e 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 8019480:	4684      	mov	ip, r0
 8019482:	4660      	mov	r0, ip
 8019484:	b042      	add	sp, #264	@ 0x108
 8019486:	bd70      	pop	{r4, r5, r6, pc}
 8019488:	f04f 0c0b 	mov.w	ip, #11
 801948c:	4660      	mov	r0, ip
 801948e:	4770      	bx	lr
 8019490:	4a04      	ldr	r2, [pc, #16]	@ (80194a4 <rcl_validate_enclave_name_with_size+0x90>)
 8019492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019496:	a802      	add	r0, sp, #8
 8019498:	f7f7 fb88 	bl	8010bac <rcutils_snprintf>
 801949c:	f04f 0c01 	mov.w	ip, #1
 80194a0:	e7ca      	b.n	8019438 <rcl_validate_enclave_name_with_size+0x24>
 80194a2:	bf00      	nop
 80194a4:	080211d0 	.word	0x080211d0

080194a8 <rcl_validate_enclave_name>:
 80194a8:	b168      	cbz	r0, 80194c6 <rcl_validate_enclave_name+0x1e>
 80194aa:	b570      	push	{r4, r5, r6, lr}
 80194ac:	460d      	mov	r5, r1
 80194ae:	4616      	mov	r6, r2
 80194b0:	4604      	mov	r4, r0
 80194b2:	f7e6 ff15 	bl	80002e0 <strlen>
 80194b6:	4633      	mov	r3, r6
 80194b8:	4601      	mov	r1, r0
 80194ba:	462a      	mov	r2, r5
 80194bc:	4620      	mov	r0, r4
 80194be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194c2:	f7ff bfa7 	b.w	8019414 <rcl_validate_enclave_name_with_size>
 80194c6:	200b      	movs	r0, #11
 80194c8:	4770      	bx	lr
 80194ca:	bf00      	nop

080194cc <rcl_get_zero_initialized_wait_set>:
 80194cc:	b510      	push	{r4, lr}
 80194ce:	4c08      	ldr	r4, [pc, #32]	@ (80194f0 <rcl_get_zero_initialized_wait_set+0x24>)
 80194d0:	4686      	mov	lr, r0
 80194d2:	4684      	mov	ip, r0
 80194d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	f8cc 3000 	str.w	r3, [ip]
 80194ec:	4670      	mov	r0, lr
 80194ee:	bd10      	pop	{r4, pc}
 80194f0:	08021230 	.word	0x08021230

080194f4 <rcl_wait_set_is_valid>:
 80194f4:	b118      	cbz	r0, 80194fe <rcl_wait_set_is_valid+0xa>
 80194f6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80194f8:	3800      	subs	r0, #0
 80194fa:	bf18      	it	ne
 80194fc:	2001      	movne	r0, #1
 80194fe:	4770      	bx	lr

08019500 <rcl_wait_set_fini>:
 8019500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019504:	b083      	sub	sp, #12
 8019506:	2800      	cmp	r0, #0
 8019508:	f000 8098 	beq.w	801963c <rcl_wait_set_fini+0x13c>
 801950c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801950e:	4605      	mov	r5, r0
 8019510:	2e00      	cmp	r6, #0
 8019512:	f000 808f 	beq.w	8019634 <rcl_wait_set_fini+0x134>
 8019516:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8019518:	f002 fb62 	bl	801bbe0 <rmw_destroy_wait_set>
 801951c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801951e:	1e06      	subs	r6, r0, #0
 8019520:	bf18      	it	ne
 8019522:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8019526:	2c00      	cmp	r4, #0
 8019528:	f000 8084 	beq.w	8019634 <rcl_wait_set_fini+0x134>
 801952c:	6828      	ldr	r0, [r5, #0]
 801952e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8019532:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019536:	2700      	movs	r7, #0
 8019538:	606f      	str	r7, [r5, #4]
 801953a:	6027      	str	r7, [r4, #0]
 801953c:	b118      	cbz	r0, 8019546 <rcl_wait_set_fini+0x46>
 801953e:	4649      	mov	r1, r9
 8019540:	47c0      	blx	r8
 8019542:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019544:	602f      	str	r7, [r5, #0]
 8019546:	68a0      	ldr	r0, [r4, #8]
 8019548:	b128      	cbz	r0, 8019556 <rcl_wait_set_fini+0x56>
 801954a:	4649      	mov	r1, r9
 801954c:	47c0      	blx	r8
 801954e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019550:	2300      	movs	r3, #0
 8019552:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8019556:	68a8      	ldr	r0, [r5, #8]
 8019558:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801955a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801955c:	f04f 0800 	mov.w	r8, #0
 8019560:	f8c5 800c 	str.w	r8, [r5, #12]
 8019564:	f8c4 800c 	str.w	r8, [r4, #12]
 8019568:	b128      	cbz	r0, 8019576 <rcl_wait_set_fini+0x76>
 801956a:	47b8      	blx	r7
 801956c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801956e:	f8c5 8008 	str.w	r8, [r5, #8]
 8019572:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8019574:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8019576:	6960      	ldr	r0, [r4, #20]
 8019578:	f04f 0800 	mov.w	r8, #0
 801957c:	f8c4 8010 	str.w	r8, [r4, #16]
 8019580:	b128      	cbz	r0, 801958e <rcl_wait_set_fini+0x8e>
 8019582:	47b8      	blx	r7
 8019584:	f8c4 8014 	str.w	r8, [r4, #20]
 8019588:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801958a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801958c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801958e:	6928      	ldr	r0, [r5, #16]
 8019590:	f04f 0800 	mov.w	r8, #0
 8019594:	f8c5 8014 	str.w	r8, [r5, #20]
 8019598:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 801959c:	b128      	cbz	r0, 80195aa <rcl_wait_set_fini+0xaa>
 801959e:	47b8      	blx	r7
 80195a0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195a2:	f8c5 8010 	str.w	r8, [r5, #16]
 80195a6:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80195a8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80195aa:	69a8      	ldr	r0, [r5, #24]
 80195ac:	f04f 0800 	mov.w	r8, #0
 80195b0:	f8c5 801c 	str.w	r8, [r5, #28]
 80195b4:	f8c4 8018 	str.w	r8, [r4, #24]
 80195b8:	b128      	cbz	r0, 80195c6 <rcl_wait_set_fini+0xc6>
 80195ba:	9101      	str	r1, [sp, #4]
 80195bc:	47b8      	blx	r7
 80195be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195c0:	9901      	ldr	r1, [sp, #4]
 80195c2:	f8c5 8018 	str.w	r8, [r5, #24]
 80195c6:	6a20      	ldr	r0, [r4, #32]
 80195c8:	b120      	cbz	r0, 80195d4 <rcl_wait_set_fini+0xd4>
 80195ca:	47b8      	blx	r7
 80195cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195ce:	2300      	movs	r3, #0
 80195d0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80195d4:	6a28      	ldr	r0, [r5, #32]
 80195d6:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 80195da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80195de:	2700      	movs	r7, #0
 80195e0:	626f      	str	r7, [r5, #36]	@ 0x24
 80195e2:	6267      	str	r7, [r4, #36]	@ 0x24
 80195e4:	b118      	cbz	r0, 80195ee <rcl_wait_set_fini+0xee>
 80195e6:	4649      	mov	r1, r9
 80195e8:	47c0      	blx	r8
 80195ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195ec:	622f      	str	r7, [r5, #32]
 80195ee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80195f0:	b128      	cbz	r0, 80195fe <rcl_wait_set_fini+0xfe>
 80195f2:	4649      	mov	r1, r9
 80195f4:	47c0      	blx	r8
 80195f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80195f8:	2300      	movs	r3, #0
 80195fa:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80195fe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8019600:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8019604:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8019608:	2700      	movs	r7, #0
 801960a:	62ef      	str	r7, [r5, #44]	@ 0x2c
 801960c:	6327      	str	r7, [r4, #48]	@ 0x30
 801960e:	b118      	cbz	r0, 8019618 <rcl_wait_set_fini+0x118>
 8019610:	4649      	mov	r1, r9
 8019612:	47c0      	blx	r8
 8019614:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019616:	62af      	str	r7, [r5, #40]	@ 0x28
 8019618:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801961a:	b128      	cbz	r0, 8019628 <rcl_wait_set_fini+0x128>
 801961c:	4649      	mov	r1, r9
 801961e:	47c0      	blx	r8
 8019620:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8019622:	2300      	movs	r3, #0
 8019624:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8019628:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801962a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801962c:	4620      	mov	r0, r4
 801962e:	4798      	blx	r3
 8019630:	2300      	movs	r3, #0
 8019632:	632b      	str	r3, [r5, #48]	@ 0x30
 8019634:	4630      	mov	r0, r6
 8019636:	b003      	add	sp, #12
 8019638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801963c:	260b      	movs	r6, #11
 801963e:	4630      	mov	r0, r6
 8019640:	b003      	add	sp, #12
 8019642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019646:	bf00      	nop

08019648 <rcl_wait_set_add_subscription>:
 8019648:	b318      	cbz	r0, 8019692 <rcl_wait_set_add_subscription+0x4a>
 801964a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	4604      	mov	r4, r0
 8019650:	b30b      	cbz	r3, 8019696 <rcl_wait_set_add_subscription+0x4e>
 8019652:	b319      	cbz	r1, 801969c <rcl_wait_set_add_subscription+0x54>
 8019654:	681d      	ldr	r5, [r3, #0]
 8019656:	6840      	ldr	r0, [r0, #4]
 8019658:	4285      	cmp	r5, r0
 801965a:	d217      	bcs.n	801968c <rcl_wait_set_add_subscription+0x44>
 801965c:	6820      	ldr	r0, [r4, #0]
 801965e:	1c6e      	adds	r6, r5, #1
 8019660:	601e      	str	r6, [r3, #0]
 8019662:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019666:	b102      	cbz	r2, 801966a <rcl_wait_set_add_subscription+0x22>
 8019668:	6015      	str	r5, [r2, #0]
 801966a:	4608      	mov	r0, r1
 801966c:	f7f5 fe9c 	bl	800f3a8 <rcl_subscription_get_rmw_handle>
 8019670:	b150      	cbz	r0, 8019688 <rcl_wait_set_add_subscription+0x40>
 8019672:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019674:	6842      	ldr	r2, [r0, #4]
 8019676:	689b      	ldr	r3, [r3, #8]
 8019678:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801967c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801967e:	6853      	ldr	r3, [r2, #4]
 8019680:	3301      	adds	r3, #1
 8019682:	2000      	movs	r0, #0
 8019684:	6053      	str	r3, [r2, #4]
 8019686:	bd70      	pop	{r4, r5, r6, pc}
 8019688:	2001      	movs	r0, #1
 801968a:	bd70      	pop	{r4, r5, r6, pc}
 801968c:	f240 3086 	movw	r0, #902	@ 0x386
 8019690:	bd70      	pop	{r4, r5, r6, pc}
 8019692:	200b      	movs	r0, #11
 8019694:	4770      	bx	lr
 8019696:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801969a:	bd70      	pop	{r4, r5, r6, pc}
 801969c:	200b      	movs	r0, #11
 801969e:	bd70      	pop	{r4, r5, r6, pc}

080196a0 <rcl_wait_set_clear>:
 80196a0:	2800      	cmp	r0, #0
 80196a2:	d074      	beq.n	801978e <rcl_wait_set_clear+0xee>
 80196a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80196a6:	b510      	push	{r4, lr}
 80196a8:	4604      	mov	r4, r0
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d071      	beq.n	8019792 <rcl_wait_set_clear+0xf2>
 80196ae:	6800      	ldr	r0, [r0, #0]
 80196b0:	b138      	cbz	r0, 80196c2 <rcl_wait_set_clear+0x22>
 80196b2:	6862      	ldr	r2, [r4, #4]
 80196b4:	2100      	movs	r1, #0
 80196b6:	0092      	lsls	r2, r2, #2
 80196b8:	f004 fb82 	bl	801ddc0 <memset>
 80196bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80196be:	2200      	movs	r2, #0
 80196c0:	601a      	str	r2, [r3, #0]
 80196c2:	68a0      	ldr	r0, [r4, #8]
 80196c4:	b138      	cbz	r0, 80196d6 <rcl_wait_set_clear+0x36>
 80196c6:	68e2      	ldr	r2, [r4, #12]
 80196c8:	2100      	movs	r1, #0
 80196ca:	0092      	lsls	r2, r2, #2
 80196cc:	f004 fb78 	bl	801ddc0 <memset>
 80196d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80196d2:	2200      	movs	r2, #0
 80196d4:	60da      	str	r2, [r3, #12]
 80196d6:	69a0      	ldr	r0, [r4, #24]
 80196d8:	b138      	cbz	r0, 80196ea <rcl_wait_set_clear+0x4a>
 80196da:	69e2      	ldr	r2, [r4, #28]
 80196dc:	2100      	movs	r1, #0
 80196de:	0092      	lsls	r2, r2, #2
 80196e0:	f004 fb6e 	bl	801ddc0 <memset>
 80196e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80196e6:	2200      	movs	r2, #0
 80196e8:	619a      	str	r2, [r3, #24]
 80196ea:	6a20      	ldr	r0, [r4, #32]
 80196ec:	b138      	cbz	r0, 80196fe <rcl_wait_set_clear+0x5e>
 80196ee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80196f0:	2100      	movs	r1, #0
 80196f2:	0092      	lsls	r2, r2, #2
 80196f4:	f004 fb64 	bl	801ddc0 <memset>
 80196f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80196fa:	2200      	movs	r2, #0
 80196fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80196fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019700:	b138      	cbz	r0, 8019712 <rcl_wait_set_clear+0x72>
 8019702:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019704:	2100      	movs	r1, #0
 8019706:	0092      	lsls	r2, r2, #2
 8019708:	f004 fb5a 	bl	801ddc0 <memset>
 801970c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801970e:	2200      	movs	r2, #0
 8019710:	631a      	str	r2, [r3, #48]	@ 0x30
 8019712:	6920      	ldr	r0, [r4, #16]
 8019714:	b138      	cbz	r0, 8019726 <rcl_wait_set_clear+0x86>
 8019716:	6962      	ldr	r2, [r4, #20]
 8019718:	2100      	movs	r1, #0
 801971a:	0092      	lsls	r2, r2, #2
 801971c:	f004 fb50 	bl	801ddc0 <memset>
 8019720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019722:	2200      	movs	r2, #0
 8019724:	641a      	str	r2, [r3, #64]	@ 0x40
 8019726:	6898      	ldr	r0, [r3, #8]
 8019728:	b138      	cbz	r0, 801973a <rcl_wait_set_clear+0x9a>
 801972a:	685a      	ldr	r2, [r3, #4]
 801972c:	2100      	movs	r1, #0
 801972e:	0092      	lsls	r2, r2, #2
 8019730:	f004 fb46 	bl	801ddc0 <memset>
 8019734:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019736:	2200      	movs	r2, #0
 8019738:	605a      	str	r2, [r3, #4]
 801973a:	6958      	ldr	r0, [r3, #20]
 801973c:	b138      	cbz	r0, 801974e <rcl_wait_set_clear+0xae>
 801973e:	691a      	ldr	r2, [r3, #16]
 8019740:	2100      	movs	r1, #0
 8019742:	0092      	lsls	r2, r2, #2
 8019744:	f004 fb3c 	bl	801ddc0 <memset>
 8019748:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801974a:	2200      	movs	r2, #0
 801974c:	611a      	str	r2, [r3, #16]
 801974e:	6a18      	ldr	r0, [r3, #32]
 8019750:	b138      	cbz	r0, 8019762 <rcl_wait_set_clear+0xc2>
 8019752:	69da      	ldr	r2, [r3, #28]
 8019754:	2100      	movs	r1, #0
 8019756:	0092      	lsls	r2, r2, #2
 8019758:	f004 fb32 	bl	801ddc0 <memset>
 801975c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801975e:	2200      	movs	r2, #0
 8019760:	61da      	str	r2, [r3, #28]
 8019762:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8019764:	b138      	cbz	r0, 8019776 <rcl_wait_set_clear+0xd6>
 8019766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019768:	2100      	movs	r1, #0
 801976a:	0092      	lsls	r2, r2, #2
 801976c:	f004 fb28 	bl	801ddc0 <memset>
 8019770:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019772:	2200      	movs	r2, #0
 8019774:	629a      	str	r2, [r3, #40]	@ 0x28
 8019776:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8019778:	b138      	cbz	r0, 801978a <rcl_wait_set_clear+0xea>
 801977a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801977c:	2100      	movs	r1, #0
 801977e:	0092      	lsls	r2, r2, #2
 8019780:	f004 fb1e 	bl	801ddc0 <memset>
 8019784:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019786:	2200      	movs	r2, #0
 8019788:	635a      	str	r2, [r3, #52]	@ 0x34
 801978a:	2000      	movs	r0, #0
 801978c:	bd10      	pop	{r4, pc}
 801978e:	200b      	movs	r0, #11
 8019790:	4770      	bx	lr
 8019792:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019796:	bd10      	pop	{r4, pc}

08019798 <rcl_wait_set_resize>:
 8019798:	2800      	cmp	r0, #0
 801979a:	f000 81a1 	beq.w	8019ae0 <rcl_wait_set_resize+0x348>
 801979e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 80197a6:	b083      	sub	sp, #12
 80197a8:	4604      	mov	r4, r0
 80197aa:	f1ba 0f00 	cmp.w	sl, #0
 80197ae:	f000 8199 	beq.w	8019ae4 <rcl_wait_set_resize+0x34c>
 80197b2:	f04f 0800 	mov.w	r8, #0
 80197b6:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 80197ba:	461e      	mov	r6, r3
 80197bc:	460f      	mov	r7, r1
 80197be:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 80197c2:	4615      	mov	r5, r2
 80197c4:	f8c0 8004 	str.w	r8, [r0, #4]
 80197c8:	6800      	ldr	r0, [r0, #0]
 80197ca:	f8ca 8000 	str.w	r8, [sl]
 80197ce:	2900      	cmp	r1, #0
 80197d0:	f000 80cf 	beq.w	8019972 <rcl_wait_set_resize+0x1da>
 80197d4:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80197d8:	464a      	mov	r2, r9
 80197da:	4651      	mov	r1, sl
 80197dc:	9301      	str	r3, [sp, #4]
 80197de:	4798      	blx	r3
 80197e0:	9b01      	ldr	r3, [sp, #4]
 80197e2:	6020      	str	r0, [r4, #0]
 80197e4:	2800      	cmp	r0, #0
 80197e6:	f000 8109 	beq.w	80199fc <rcl_wait_set_resize+0x264>
 80197ea:	4652      	mov	r2, sl
 80197ec:	4641      	mov	r1, r8
 80197ee:	9301      	str	r3, [sp, #4]
 80197f0:	f004 fae6 	bl	801ddc0 <memset>
 80197f4:	6067      	str	r7, [r4, #4]
 80197f6:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 80197f8:	9b01      	ldr	r3, [sp, #4]
 80197fa:	68b8      	ldr	r0, [r7, #8]
 80197fc:	f8c7 8004 	str.w	r8, [r7, #4]
 8019800:	464a      	mov	r2, r9
 8019802:	4651      	mov	r1, sl
 8019804:	4798      	blx	r3
 8019806:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019808:	60b8      	str	r0, [r7, #8]
 801980a:	689f      	ldr	r7, [r3, #8]
 801980c:	2f00      	cmp	r7, #0
 801980e:	f000 80f0 	beq.w	80199f2 <rcl_wait_set_resize+0x25a>
 8019812:	4652      	mov	r2, sl
 8019814:	4641      	mov	r1, r8
 8019816:	4638      	mov	r0, r7
 8019818:	f004 fad2 	bl	801ddc0 <memset>
 801981c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019820:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019824:	68a0      	ldr	r0, [r4, #8]
 8019826:	2700      	movs	r7, #0
 8019828:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 801982c:	60e7      	str	r7, [r4, #12]
 801982e:	f8ca 700c 	str.w	r7, [sl, #12]
 8019832:	2d00      	cmp	r5, #0
 8019834:	f040 80b0 	bne.w	8019998 <rcl_wait_set_resize+0x200>
 8019838:	b130      	cbz	r0, 8019848 <rcl_wait_set_resize+0xb0>
 801983a:	4641      	mov	r1, r8
 801983c:	4790      	blx	r2
 801983e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019842:	60a5      	str	r5, [r4, #8]
 8019844:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019848:	f8da 0014 	ldr.w	r0, [sl, #20]
 801984c:	2700      	movs	r7, #0
 801984e:	19ad      	adds	r5, r5, r6
 8019850:	f8ca 7010 	str.w	r7, [sl, #16]
 8019854:	f040 80b8 	bne.w	80199c8 <rcl_wait_set_resize+0x230>
 8019858:	b148      	cbz	r0, 801986e <rcl_wait_set_resize+0xd6>
 801985a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 801985e:	4641      	mov	r1, r8
 8019860:	4798      	blx	r3
 8019862:	f8ca 5014 	str.w	r5, [sl, #20]
 8019866:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801986a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801986e:	6920      	ldr	r0, [r4, #16]
 8019870:	2500      	movs	r5, #0
 8019872:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019876:	6165      	str	r5, [r4, #20]
 8019878:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 801987c:	2e00      	cmp	r6, #0
 801987e:	f040 80c1 	bne.w	8019a04 <rcl_wait_set_resize+0x26c>
 8019882:	b140      	cbz	r0, 8019896 <rcl_wait_set_resize+0xfe>
 8019884:	4641      	mov	r1, r8
 8019886:	47c8      	blx	r9
 8019888:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801988c:	6126      	str	r6, [r4, #16]
 801988e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019892:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019896:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019898:	69a0      	ldr	r0, [r4, #24]
 801989a:	2500      	movs	r5, #0
 801989c:	61e5      	str	r5, [r4, #28]
 801989e:	f8ca 5018 	str.w	r5, [sl, #24]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	f040 80c2 	bne.w	8019a2c <rcl_wait_set_resize+0x294>
 80198a8:	b128      	cbz	r0, 80198b6 <rcl_wait_set_resize+0x11e>
 80198aa:	4641      	mov	r1, r8
 80198ac:	47c8      	blx	r9
 80198ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80198b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80198b4:	61a3      	str	r3, [r4, #24]
 80198b6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80198ba:	b130      	cbz	r0, 80198ca <rcl_wait_set_resize+0x132>
 80198bc:	4641      	mov	r1, r8
 80198be:	47c8      	blx	r9
 80198c0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80198c4:	2300      	movs	r3, #0
 80198c6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80198ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80198cc:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80198d0:	6a20      	ldr	r0, [r4, #32]
 80198d2:	2500      	movs	r5, #0
 80198d4:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80198d8:	6265      	str	r5, [r4, #36]	@ 0x24
 80198da:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 80198de:	2b00      	cmp	r3, #0
 80198e0:	f000 80c8 	beq.w	8019a74 <rcl_wait_set_resize+0x2dc>
 80198e4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80198e8:	4632      	mov	r2, r6
 80198ea:	4649      	mov	r1, r9
 80198ec:	47c0      	blx	r8
 80198ee:	6220      	str	r0, [r4, #32]
 80198f0:	2800      	cmp	r0, #0
 80198f2:	f000 8083 	beq.w	80199fc <rcl_wait_set_resize+0x264>
 80198f6:	464a      	mov	r2, r9
 80198f8:	4629      	mov	r1, r5
 80198fa:	f004 fa61 	bl	801ddc0 <memset>
 80198fe:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019904:	6263      	str	r3, [r4, #36]	@ 0x24
 8019906:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801990a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 801990e:	4632      	mov	r2, r6
 8019910:	4649      	mov	r1, r9
 8019912:	47c0      	blx	r8
 8019914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019916:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 801991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801991c:	2b00      	cmp	r3, #0
 801991e:	f000 80fb 	beq.w	8019b18 <rcl_wait_set_resize+0x380>
 8019922:	464a      	mov	r2, r9
 8019924:	4629      	mov	r1, r5
 8019926:	4618      	mov	r0, r3
 8019928:	f004 fa4a 	bl	801ddc0 <memset>
 801992c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019932:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8019936:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019938:	2500      	movs	r5, #0
 801993a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 801993e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8019940:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8019944:	2b00      	cmp	r3, #0
 8019946:	f040 80a9 	bne.w	8019a9c <rcl_wait_set_resize+0x304>
 801994a:	b128      	cbz	r0, 8019958 <rcl_wait_set_resize+0x1c0>
 801994c:	4631      	mov	r1, r6
 801994e:	47b8      	blx	r7
 8019950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019952:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019956:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019958:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801995c:	b128      	cbz	r0, 801996a <rcl_wait_set_resize+0x1d2>
 801995e:	4631      	mov	r1, r6
 8019960:	47b8      	blx	r7
 8019962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019964:	2200      	movs	r2, #0
 8019966:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 801996a:	2000      	movs	r0, #0
 801996c:	b003      	add	sp, #12
 801996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019972:	b120      	cbz	r0, 801997e <rcl_wait_set_resize+0x1e6>
 8019974:	4649      	mov	r1, r9
 8019976:	47d8      	blx	fp
 8019978:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801997c:	6027      	str	r7, [r4, #0]
 801997e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8019982:	2800      	cmp	r0, #0
 8019984:	f43f af4c 	beq.w	8019820 <rcl_wait_set_resize+0x88>
 8019988:	4649      	mov	r1, r9
 801998a:	47d8      	blx	fp
 801998c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019990:	2300      	movs	r3, #0
 8019992:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8019996:	e743      	b.n	8019820 <rcl_wait_set_resize+0x88>
 8019998:	4642      	mov	r2, r8
 801999a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 801999e:	4641      	mov	r1, r8
 80199a0:	4798      	blx	r3
 80199a2:	60a0      	str	r0, [r4, #8]
 80199a4:	b350      	cbz	r0, 80199fc <rcl_wait_set_resize+0x264>
 80199a6:	4642      	mov	r2, r8
 80199a8:	4639      	mov	r1, r7
 80199aa:	f004 fa09 	bl	801ddc0 <memset>
 80199ae:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80199b2:	60e5      	str	r5, [r4, #12]
 80199b4:	2700      	movs	r7, #0
 80199b6:	19ad      	adds	r5, r5, r6
 80199b8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80199bc:	f8da 0014 	ldr.w	r0, [sl, #20]
 80199c0:	f8ca 7010 	str.w	r7, [sl, #16]
 80199c4:	f43f af48 	beq.w	8019858 <rcl_wait_set_resize+0xc0>
 80199c8:	00ad      	lsls	r5, r5, #2
 80199ca:	4642      	mov	r2, r8
 80199cc:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 80199d0:	4629      	mov	r1, r5
 80199d2:	4798      	blx	r3
 80199d4:	4680      	mov	r8, r0
 80199d6:	f8ca 0014 	str.w	r0, [sl, #20]
 80199da:	2800      	cmp	r0, #0
 80199dc:	f000 8085 	beq.w	8019aea <rcl_wait_set_resize+0x352>
 80199e0:	462a      	mov	r2, r5
 80199e2:	4639      	mov	r1, r7
 80199e4:	f004 f9ec 	bl	801ddc0 <memset>
 80199e8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80199ec:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80199f0:	e73d      	b.n	801986e <rcl_wait_set_resize+0xd6>
 80199f2:	6820      	ldr	r0, [r4, #0]
 80199f4:	4649      	mov	r1, r9
 80199f6:	47d8      	blx	fp
 80199f8:	e9c4 7700 	strd	r7, r7, [r4]
 80199fc:	200a      	movs	r0, #10
 80199fe:	b003      	add	sp, #12
 8019a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a04:	4642      	mov	r2, r8
 8019a06:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8019a0a:	4641      	mov	r1, r8
 8019a0c:	47b8      	blx	r7
 8019a0e:	6120      	str	r0, [r4, #16]
 8019a10:	2800      	cmp	r0, #0
 8019a12:	d0f3      	beq.n	80199fc <rcl_wait_set_resize+0x264>
 8019a14:	4642      	mov	r2, r8
 8019a16:	4629      	mov	r1, r5
 8019a18:	f004 f9d2 	bl	801ddc0 <memset>
 8019a1c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019a20:	6166      	str	r6, [r4, #20]
 8019a22:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8019a26:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8019a2a:	e734      	b.n	8019896 <rcl_wait_set_resize+0xfe>
 8019a2c:	009e      	lsls	r6, r3, #2
 8019a2e:	4642      	mov	r2, r8
 8019a30:	4631      	mov	r1, r6
 8019a32:	47b8      	blx	r7
 8019a34:	61a0      	str	r0, [r4, #24]
 8019a36:	2800      	cmp	r0, #0
 8019a38:	d0e0      	beq.n	80199fc <rcl_wait_set_resize+0x264>
 8019a3a:	4632      	mov	r2, r6
 8019a3c:	4629      	mov	r1, r5
 8019a3e:	f004 f9bf 	bl	801ddc0 <memset>
 8019a42:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a48:	61e3      	str	r3, [r4, #28]
 8019a4a:	f8da 0020 	ldr.w	r0, [sl, #32]
 8019a4e:	f8ca 501c 	str.w	r5, [sl, #28]
 8019a52:	4642      	mov	r2, r8
 8019a54:	4631      	mov	r1, r6
 8019a56:	47b8      	blx	r7
 8019a58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a5a:	f8ca 0020 	str.w	r0, [sl, #32]
 8019a5e:	6a1f      	ldr	r7, [r3, #32]
 8019a60:	2f00      	cmp	r7, #0
 8019a62:	d053      	beq.n	8019b0c <rcl_wait_set_resize+0x374>
 8019a64:	4632      	mov	r2, r6
 8019a66:	4629      	mov	r1, r5
 8019a68:	4638      	mov	r0, r7
 8019a6a:	f004 f9a9 	bl	801ddc0 <memset>
 8019a6e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019a72:	e72a      	b.n	80198ca <rcl_wait_set_resize+0x132>
 8019a74:	b128      	cbz	r0, 8019a82 <rcl_wait_set_resize+0x2ea>
 8019a76:	4631      	mov	r1, r6
 8019a78:	47b8      	blx	r7
 8019a7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019a7c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019a80:	6223      	str	r3, [r4, #32]
 8019a82:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8019a86:	2800      	cmp	r0, #0
 8019a88:	f43f af52 	beq.w	8019930 <rcl_wait_set_resize+0x198>
 8019a8c:	4631      	mov	r1, r6
 8019a8e:	47b8      	blx	r7
 8019a90:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019a94:	2300      	movs	r3, #0
 8019a96:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8019a9a:	e749      	b.n	8019930 <rcl_wait_set_resize+0x198>
 8019a9c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8019aa0:	4632      	mov	r2, r6
 8019aa2:	4649      	mov	r1, r9
 8019aa4:	47c0      	blx	r8
 8019aa6:	62a0      	str	r0, [r4, #40]	@ 0x28
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	d0a7      	beq.n	80199fc <rcl_wait_set_resize+0x264>
 8019aac:	464a      	mov	r2, r9
 8019aae:	4629      	mov	r1, r5
 8019ab0:	f004 f986 	bl	801ddc0 <memset>
 8019ab4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8019ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019aba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019abc:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8019ac0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8019ac4:	4632      	mov	r2, r6
 8019ac6:	4649      	mov	r1, r9
 8019ac8:	47c0      	blx	r8
 8019aca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019acc:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8019ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019ad2:	b34b      	cbz	r3, 8019b28 <rcl_wait_set_resize+0x390>
 8019ad4:	464a      	mov	r2, r9
 8019ad6:	4629      	mov	r1, r5
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f004 f971 	bl	801ddc0 <memset>
 8019ade:	e744      	b.n	801996a <rcl_wait_set_resize+0x1d2>
 8019ae0:	200b      	movs	r0, #11
 8019ae2:	4770      	bx	lr
 8019ae4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019ae8:	e789      	b.n	80199fe <rcl_wait_set_resize+0x266>
 8019aea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019aec:	68a0      	ldr	r0, [r4, #8]
 8019aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019af0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019af2:	4790      	blx	r2
 8019af4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019af6:	6920      	ldr	r0, [r4, #16]
 8019af8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019afa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019afc:	f8c4 800c 	str.w	r8, [r4, #12]
 8019b00:	f8c4 8008 	str.w	r8, [r4, #8]
 8019b04:	4790      	blx	r2
 8019b06:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8019b0a:	e777      	b.n	80199fc <rcl_wait_set_resize+0x264>
 8019b0c:	69a0      	ldr	r0, [r4, #24]
 8019b0e:	4641      	mov	r1, r8
 8019b10:	47c8      	blx	r9
 8019b12:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8019b16:	e771      	b.n	80199fc <rcl_wait_set_resize+0x264>
 8019b18:	6a20      	ldr	r0, [r4, #32]
 8019b1a:	9301      	str	r3, [sp, #4]
 8019b1c:	4631      	mov	r1, r6
 8019b1e:	47b8      	blx	r7
 8019b20:	9b01      	ldr	r3, [sp, #4]
 8019b22:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8019b26:	e769      	b.n	80199fc <rcl_wait_set_resize+0x264>
 8019b28:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019b2a:	9301      	str	r3, [sp, #4]
 8019b2c:	4631      	mov	r1, r6
 8019b2e:	47b8      	blx	r7
 8019b30:	9b01      	ldr	r3, [sp, #4]
 8019b32:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8019b36:	e761      	b.n	80199fc <rcl_wait_set_resize+0x264>

08019b38 <rcl_wait_set_init>:
 8019b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b3c:	b084      	sub	sp, #16
 8019b3e:	4604      	mov	r4, r0
 8019b40:	a810      	add	r0, sp, #64	@ 0x40
 8019b42:	460d      	mov	r5, r1
 8019b44:	4690      	mov	r8, r2
 8019b46:	461f      	mov	r7, r3
 8019b48:	f7f6 fe3e 	bl	80107c8 <rcutils_allocator_is_valid>
 8019b4c:	2800      	cmp	r0, #0
 8019b4e:	d06c      	beq.n	8019c2a <rcl_wait_set_init+0xf2>
 8019b50:	2c00      	cmp	r4, #0
 8019b52:	d06a      	beq.n	8019c2a <rcl_wait_set_init+0xf2>
 8019b54:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8019b56:	b126      	cbz	r6, 8019b62 <rcl_wait_set_init+0x2a>
 8019b58:	2564      	movs	r5, #100	@ 0x64
 8019b5a:	4628      	mov	r0, r5
 8019b5c:	b004      	add	sp, #16
 8019b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d060      	beq.n	8019c2a <rcl_wait_set_init+0xf2>
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f7fe fd07 	bl	801857c <rcl_context_is_valid>
 8019b6e:	2800      	cmp	r0, #0
 8019b70:	d060      	beq.n	8019c34 <rcl_wait_set_init+0xfc>
 8019b72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019b74:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8019b76:	205c      	movs	r0, #92	@ 0x5c
 8019b78:	4798      	blx	r3
 8019b7a:	6320      	str	r0, [r4, #48]	@ 0x30
 8019b7c:	2800      	cmp	r0, #0
 8019b7e:	d063      	beq.n	8019c48 <rcl_wait_set_init+0x110>
 8019b80:	4631      	mov	r1, r6
 8019b82:	225c      	movs	r2, #92	@ 0x5c
 8019b84:	f004 f91c 	bl	801ddc0 <memset>
 8019b88:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8019b8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019b8e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 8019b92:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8019b96:	eb03 0e02 	add.w	lr, r3, r2
 8019b9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b9c:	449e      	add	lr, r3
 8019b9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ba0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8019ba4:	f8d3 a000 	ldr.w	sl, [r3]
 8019ba8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019bac:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8019bb0:	e9c9 6604 	strd	r6, r6, [r9, #16]
 8019bb4:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8019bb8:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8019bbc:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8019bc0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 8019bc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019bc6:	44c6      	add	lr, r8
 8019bc8:	f8dc 3000 	ldr.w	r3, [ip]
 8019bcc:	6033      	str	r3, [r6, #0]
 8019bce:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8019bd2:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8019bd6:	f001 fff9 	bl	801bbcc <rmw_create_wait_set>
 8019bda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019bdc:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8019be0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019be2:	b348      	cbz	r0, 8019c38 <rcl_wait_set_init+0x100>
 8019be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019be6:	9302      	str	r3, [sp, #8]
 8019be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019bea:	9301      	str	r3, [sp, #4]
 8019bec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019bee:	9300      	str	r3, [sp, #0]
 8019bf0:	4629      	mov	r1, r5
 8019bf2:	463b      	mov	r3, r7
 8019bf4:	4642      	mov	r2, r8
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	f7ff fdce 	bl	8019798 <rcl_wait_set_resize>
 8019bfc:	4605      	mov	r5, r0
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	d0ab      	beq.n	8019b5a <rcl_wait_set_init+0x22>
 8019c02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019c04:	bb13      	cbnz	r3, 8019c4c <rcl_wait_set_init+0x114>
 8019c06:	2600      	movs	r6, #0
 8019c08:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8019c0c:	9600      	str	r6, [sp, #0]
 8019c0e:	4633      	mov	r3, r6
 8019c10:	4632      	mov	r2, r6
 8019c12:	4631      	mov	r1, r6
 8019c14:	4620      	mov	r0, r4
 8019c16:	f7ff fdbf 	bl	8019798 <rcl_wait_set_resize>
 8019c1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019c1c:	2800      	cmp	r0, #0
 8019c1e:	d09c      	beq.n	8019b5a <rcl_wait_set_init+0x22>
 8019c20:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8019c22:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8019c24:	4798      	blx	r3
 8019c26:	6326      	str	r6, [r4, #48]	@ 0x30
 8019c28:	e797      	b.n	8019b5a <rcl_wait_set_init+0x22>
 8019c2a:	250b      	movs	r5, #11
 8019c2c:	4628      	mov	r0, r5
 8019c2e:	b004      	add	sp, #16
 8019c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c34:	2565      	movs	r5, #101	@ 0x65
 8019c36:	e790      	b.n	8019b5a <rcl_wait_set_init+0x22>
 8019c38:	2501      	movs	r5, #1
 8019c3a:	f001 ffd1 	bl	801bbe0 <rmw_destroy_wait_set>
 8019c3e:	2800      	cmp	r0, #0
 8019c40:	bf18      	it	ne
 8019c42:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8019c46:	e7de      	b.n	8019c06 <rcl_wait_set_init+0xce>
 8019c48:	250a      	movs	r5, #10
 8019c4a:	e786      	b.n	8019b5a <rcl_wait_set_init+0x22>
 8019c4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8019c4e:	e7f4      	b.n	8019c3a <rcl_wait_set_init+0x102>

08019c50 <rcl_wait_set_add_guard_condition>:
 8019c50:	b318      	cbz	r0, 8019c9a <rcl_wait_set_add_guard_condition+0x4a>
 8019c52:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019c54:	b570      	push	{r4, r5, r6, lr}
 8019c56:	4604      	mov	r4, r0
 8019c58:	b30b      	cbz	r3, 8019c9e <rcl_wait_set_add_guard_condition+0x4e>
 8019c5a:	b319      	cbz	r1, 8019ca4 <rcl_wait_set_add_guard_condition+0x54>
 8019c5c:	68dd      	ldr	r5, [r3, #12]
 8019c5e:	68c0      	ldr	r0, [r0, #12]
 8019c60:	4285      	cmp	r5, r0
 8019c62:	d217      	bcs.n	8019c94 <rcl_wait_set_add_guard_condition+0x44>
 8019c64:	68a0      	ldr	r0, [r4, #8]
 8019c66:	1c6e      	adds	r6, r5, #1
 8019c68:	60de      	str	r6, [r3, #12]
 8019c6a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019c6e:	b102      	cbz	r2, 8019c72 <rcl_wait_set_add_guard_condition+0x22>
 8019c70:	6015      	str	r5, [r2, #0]
 8019c72:	4608      	mov	r0, r1
 8019c74:	f7fe fe00 	bl	8018878 <rcl_guard_condition_get_rmw_handle>
 8019c78:	b150      	cbz	r0, 8019c90 <rcl_wait_set_add_guard_condition+0x40>
 8019c7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019c7c:	6842      	ldr	r2, [r0, #4]
 8019c7e:	695b      	ldr	r3, [r3, #20]
 8019c80:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019c84:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019c86:	6913      	ldr	r3, [r2, #16]
 8019c88:	3301      	adds	r3, #1
 8019c8a:	2000      	movs	r0, #0
 8019c8c:	6113      	str	r3, [r2, #16]
 8019c8e:	bd70      	pop	{r4, r5, r6, pc}
 8019c90:	2001      	movs	r0, #1
 8019c92:	bd70      	pop	{r4, r5, r6, pc}
 8019c94:	f240 3086 	movw	r0, #902	@ 0x386
 8019c98:	bd70      	pop	{r4, r5, r6, pc}
 8019c9a:	200b      	movs	r0, #11
 8019c9c:	4770      	bx	lr
 8019c9e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019ca2:	bd70      	pop	{r4, r5, r6, pc}
 8019ca4:	200b      	movs	r0, #11
 8019ca6:	bd70      	pop	{r4, r5, r6, pc}

08019ca8 <rcl_wait_set_add_timer>:
 8019ca8:	b328      	cbz	r0, 8019cf6 <rcl_wait_set_add_timer+0x4e>
 8019caa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019cac:	b570      	push	{r4, r5, r6, lr}
 8019cae:	4604      	mov	r4, r0
 8019cb0:	b31b      	cbz	r3, 8019cfa <rcl_wait_set_add_timer+0x52>
 8019cb2:	b329      	cbz	r1, 8019d00 <rcl_wait_set_add_timer+0x58>
 8019cb4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8019cb6:	6965      	ldr	r5, [r4, #20]
 8019cb8:	42a8      	cmp	r0, r5
 8019cba:	d219      	bcs.n	8019cf0 <rcl_wait_set_add_timer+0x48>
 8019cbc:	6925      	ldr	r5, [r4, #16]
 8019cbe:	1c46      	adds	r6, r0, #1
 8019cc0:	641e      	str	r6, [r3, #64]	@ 0x40
 8019cc2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8019cc6:	b102      	cbz	r2, 8019cca <rcl_wait_set_add_timer+0x22>
 8019cc8:	6010      	str	r0, [r2, #0]
 8019cca:	4608      	mov	r0, r1
 8019ccc:	f7f5 fdf0 	bl	800f8b0 <rcl_timer_get_guard_condition>
 8019cd0:	b160      	cbz	r0, 8019cec <rcl_wait_set_add_timer+0x44>
 8019cd2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019cd4:	68e3      	ldr	r3, [r4, #12]
 8019cd6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8019cd8:	3b01      	subs	r3, #1
 8019cda:	441d      	add	r5, r3
 8019cdc:	f7fe fdcc 	bl	8018878 <rcl_guard_condition_get_rmw_handle>
 8019ce0:	b180      	cbz	r0, 8019d04 <rcl_wait_set_add_timer+0x5c>
 8019ce2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ce4:	6842      	ldr	r2, [r0, #4]
 8019ce6:	695b      	ldr	r3, [r3, #20]
 8019ce8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019cec:	2000      	movs	r0, #0
 8019cee:	bd70      	pop	{r4, r5, r6, pc}
 8019cf0:	f240 3086 	movw	r0, #902	@ 0x386
 8019cf4:	bd70      	pop	{r4, r5, r6, pc}
 8019cf6:	200b      	movs	r0, #11
 8019cf8:	4770      	bx	lr
 8019cfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019cfe:	bd70      	pop	{r4, r5, r6, pc}
 8019d00:	200b      	movs	r0, #11
 8019d02:	bd70      	pop	{r4, r5, r6, pc}
 8019d04:	2001      	movs	r0, #1
 8019d06:	bd70      	pop	{r4, r5, r6, pc}

08019d08 <rcl_wait_set_add_client>:
 8019d08:	b318      	cbz	r0, 8019d52 <rcl_wait_set_add_client+0x4a>
 8019d0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019d0c:	b570      	push	{r4, r5, r6, lr}
 8019d0e:	4604      	mov	r4, r0
 8019d10:	b30b      	cbz	r3, 8019d56 <rcl_wait_set_add_client+0x4e>
 8019d12:	b319      	cbz	r1, 8019d5c <rcl_wait_set_add_client+0x54>
 8019d14:	699d      	ldr	r5, [r3, #24]
 8019d16:	69c0      	ldr	r0, [r0, #28]
 8019d18:	4285      	cmp	r5, r0
 8019d1a:	d217      	bcs.n	8019d4c <rcl_wait_set_add_client+0x44>
 8019d1c:	69a0      	ldr	r0, [r4, #24]
 8019d1e:	1c6e      	adds	r6, r5, #1
 8019d20:	619e      	str	r6, [r3, #24]
 8019d22:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019d26:	b102      	cbz	r2, 8019d2a <rcl_wait_set_add_client+0x22>
 8019d28:	6015      	str	r5, [r2, #0]
 8019d2a:	4608      	mov	r0, r1
 8019d2c:	f7fe fb38 	bl	80183a0 <rcl_client_get_rmw_handle>
 8019d30:	b150      	cbz	r0, 8019d48 <rcl_wait_set_add_client+0x40>
 8019d32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019d34:	6842      	ldr	r2, [r0, #4]
 8019d36:	6a1b      	ldr	r3, [r3, #32]
 8019d38:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019d3c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019d3e:	69d3      	ldr	r3, [r2, #28]
 8019d40:	3301      	adds	r3, #1
 8019d42:	2000      	movs	r0, #0
 8019d44:	61d3      	str	r3, [r2, #28]
 8019d46:	bd70      	pop	{r4, r5, r6, pc}
 8019d48:	2001      	movs	r0, #1
 8019d4a:	bd70      	pop	{r4, r5, r6, pc}
 8019d4c:	f240 3086 	movw	r0, #902	@ 0x386
 8019d50:	bd70      	pop	{r4, r5, r6, pc}
 8019d52:	200b      	movs	r0, #11
 8019d54:	4770      	bx	lr
 8019d56:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}
 8019d5c:	200b      	movs	r0, #11
 8019d5e:	bd70      	pop	{r4, r5, r6, pc}

08019d60 <rcl_wait_set_add_service>:
 8019d60:	b318      	cbz	r0, 8019daa <rcl_wait_set_add_service+0x4a>
 8019d62:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019d64:	b570      	push	{r4, r5, r6, lr}
 8019d66:	4604      	mov	r4, r0
 8019d68:	b30b      	cbz	r3, 8019dae <rcl_wait_set_add_service+0x4e>
 8019d6a:	b319      	cbz	r1, 8019db4 <rcl_wait_set_add_service+0x54>
 8019d6c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8019d6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8019d70:	4285      	cmp	r5, r0
 8019d72:	d217      	bcs.n	8019da4 <rcl_wait_set_add_service+0x44>
 8019d74:	6a20      	ldr	r0, [r4, #32]
 8019d76:	1c6e      	adds	r6, r5, #1
 8019d78:	625e      	str	r6, [r3, #36]	@ 0x24
 8019d7a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8019d7e:	b102      	cbz	r2, 8019d82 <rcl_wait_set_add_service+0x22>
 8019d80:	6015      	str	r5, [r2, #0]
 8019d82:	4608      	mov	r0, r1
 8019d84:	f7ff f88c 	bl	8018ea0 <rcl_service_get_rmw_handle>
 8019d88:	b150      	cbz	r0, 8019da0 <rcl_wait_set_add_service+0x40>
 8019d8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019d8c:	6842      	ldr	r2, [r0, #4]
 8019d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d90:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019d94:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019d96:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8019d98:	3301      	adds	r3, #1
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	6293      	str	r3, [r2, #40]	@ 0x28
 8019d9e:	bd70      	pop	{r4, r5, r6, pc}
 8019da0:	2001      	movs	r0, #1
 8019da2:	bd70      	pop	{r4, r5, r6, pc}
 8019da4:	f240 3086 	movw	r0, #902	@ 0x386
 8019da8:	bd70      	pop	{r4, r5, r6, pc}
 8019daa:	200b      	movs	r0, #11
 8019dac:	4770      	bx	lr
 8019dae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019db2:	bd70      	pop	{r4, r5, r6, pc}
 8019db4:	200b      	movs	r0, #11
 8019db6:	bd70      	pop	{r4, r5, r6, pc}

08019db8 <rcl_wait>:
 8019db8:	2800      	cmp	r0, #0
 8019dba:	f000 81d4 	beq.w	801a166 <rcl_wait+0x3ae>
 8019dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc2:	ed2d 8b02 	vpush	{d8}
 8019dc6:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8019dc8:	b099      	sub	sp, #100	@ 0x64
 8019dca:	4604      	mov	r4, r0
 8019dcc:	2d00      	cmp	r5, #0
 8019dce:	f000 8178 	beq.w	801a0c2 <rcl_wait+0x30a>
 8019dd2:	461f      	mov	r7, r3
 8019dd4:	6843      	ldr	r3, [r0, #4]
 8019dd6:	4690      	mov	r8, r2
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	f000 809b 	beq.w	8019f14 <rcl_wait+0x15c>
 8019dde:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8019de0:	2e00      	cmp	r6, #0
 8019de2:	f000 80b2 	beq.w	8019f4a <rcl_wait+0x192>
 8019de6:	2100      	movs	r1, #0
 8019de8:	468c      	mov	ip, r1
 8019dea:	460a      	mov	r2, r1
 8019dec:	46a6      	mov	lr, r4
 8019dee:	f8de 3010 	ldr.w	r3, [lr, #16]
 8019df2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019df6:	b173      	cbz	r3, 8019e16 <rcl_wait+0x5e>
 8019df8:	f8de 300c 	ldr.w	r3, [lr, #12]
 8019dfc:	6968      	ldr	r0, [r5, #20]
 8019dfe:	440b      	add	r3, r1
 8019e00:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8019e04:	b13c      	cbz	r4, 8019e16 <rcl_wait+0x5e>
 8019e06:	692b      	ldr	r3, [r5, #16]
 8019e08:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8019e0c:	3301      	adds	r3, #1
 8019e0e:	612b      	str	r3, [r5, #16]
 8019e10:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8019e14:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8019e16:	3101      	adds	r1, #1
 8019e18:	f14c 0c00 	adc.w	ip, ip, #0
 8019e1c:	42b1      	cmp	r1, r6
 8019e1e:	f17c 0300 	sbcs.w	r3, ip, #0
 8019e22:	d3e4      	bcc.n	8019dee <rcl_wait+0x36>
 8019e24:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 801a0d0 <rcl_wait+0x318>
 8019e28:	ea58 0307 	orrs.w	r3, r8, r7
 8019e2c:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8019e30:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8019e34:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8019e38:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8019e3c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8019e40:	4674      	mov	r4, lr
 8019e42:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8019e46:	f000 8094 	beq.w	8019f72 <rcl_wait+0x1ba>
 8019e4a:	2e00      	cmp	r6, #0
 8019e4c:	f000 8145 	beq.w	801a0da <rcl_wait+0x322>
 8019e50:	2500      	movs	r5, #0
 8019e52:	46bb      	mov	fp, r7
 8019e54:	e02c      	b.n	8019eb0 <rcl_wait+0xf8>
 8019e56:	6923      	ldr	r3, [r4, #16]
 8019e58:	f853 0009 	ldr.w	r0, [r3, r9]
 8019e5c:	a908      	add	r1, sp, #32
 8019e5e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8019e62:	f7f5 fd03 	bl	800f86c <rcl_timer_get_next_call_time>
 8019e66:	f240 3321 	movw	r3, #801	@ 0x321
 8019e6a:	4298      	cmp	r0, r3
 8019e6c:	f000 80bb 	beq.w	8019fe6 <rcl_wait+0x22e>
 8019e70:	2800      	cmp	r0, #0
 8019e72:	d165      	bne.n	8019f40 <rcl_wait+0x188>
 8019e74:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8019e78:	7830      	ldrb	r0, [r6, #0]
 8019e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019e7c:	ab18      	add	r3, sp, #96	@ 0x60
 8019e7e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8019e82:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8019e86:	9205      	str	r2, [sp, #20]
 8019e88:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8019e8c:	4297      	cmp	r7, r2
 8019e8e:	9a05      	ldr	r2, [sp, #20]
 8019e90:	eb71 0202 	sbcs.w	r2, r1, r2
 8019e94:	da06      	bge.n	8019ea4 <rcl_wait+0xec>
 8019e96:	e943 7108 	strd	r7, r1, [r3, #-32]
 8019e9a:	ab18      	add	r3, sp, #96	@ 0x60
 8019e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019ea0:	f840 6c30 	str.w	r6, [r0, #-48]
 8019ea4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019ea6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8019ea8:	3501      	adds	r5, #1
 8019eaa:	42b5      	cmp	r5, r6
 8019eac:	f080 8114 	bcs.w	801a0d8 <rcl_wait+0x320>
 8019eb0:	6923      	ldr	r3, [r4, #16]
 8019eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019eb6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8019eba:	2800      	cmp	r0, #0
 8019ebc:	d0f4      	beq.n	8019ea8 <rcl_wait+0xf0>
 8019ebe:	a907      	add	r1, sp, #28
 8019ec0:	f7f5 fc00 	bl	800f6c4 <rcl_timer_clock>
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	2800      	cmp	r0, #0
 8019ec8:	f040 8141 	bne.w	801a14e <rcl_wait+0x396>
 8019ecc:	9807      	ldr	r0, [sp, #28]
 8019ece:	7802      	ldrb	r2, [r0, #0]
 8019ed0:	2a01      	cmp	r2, #1
 8019ed2:	d1c0      	bne.n	8019e56 <rcl_wait+0x9e>
 8019ed4:	f10d 011b 	add.w	r1, sp, #27
 8019ed8:	f88d 301b 	strb.w	r3, [sp, #27]
 8019edc:	f7ff f9c6 	bl	801926c <rcl_is_enabled_ros_time_override>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	2800      	cmp	r0, #0
 8019ee4:	f040 8133 	bne.w	801a14e <rcl_wait+0x396>
 8019ee8:	6923      	ldr	r3, [r4, #16]
 8019eea:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8019eee:	f853 0009 	ldr.w	r0, [r3, r9]
 8019ef2:	2900      	cmp	r1, #0
 8019ef4:	d0b0      	beq.n	8019e58 <rcl_wait+0xa0>
 8019ef6:	ae08      	add	r6, sp, #32
 8019ef8:	4631      	mov	r1, r6
 8019efa:	f88d 2020 	strb.w	r2, [sp, #32]
 8019efe:	f7f5 fc7b 	bl	800f7f8 <rcl_timer_is_ready>
 8019f02:	2800      	cmp	r0, #0
 8019f04:	f040 8123 	bne.w	801a14e <rcl_wait+0x396>
 8019f08:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d0c9      	beq.n	8019ea4 <rcl_wait+0xec>
 8019f10:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8019f12:	e02f      	b.n	8019f74 <rcl_wait+0x1bc>
 8019f14:	68c3      	ldr	r3, [r0, #12]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	f47f af61 	bne.w	8019dde <rcl_wait+0x26>
 8019f1c:	6943      	ldr	r3, [r0, #20]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	f47f af5d 	bne.w	8019dde <rcl_wait+0x26>
 8019f24:	69c3      	ldr	r3, [r0, #28]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f47f af59 	bne.w	8019dde <rcl_wait+0x26>
 8019f2c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	f47f af55 	bne.w	8019dde <rcl_wait+0x26>
 8019f34:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	f47f af51 	bne.w	8019dde <rcl_wait+0x26>
 8019f3c:	f240 3085 	movw	r0, #901	@ 0x385
 8019f40:	b019      	add	sp, #100	@ 0x64
 8019f42:	ecbd 8b02 	vpop	{d8}
 8019f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019f52:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8019f56:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8019f5a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8019f5e:	ea58 0307 	orrs.w	r3, r8, r7
 8019f62:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8019f66:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8019f6a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8019f6e:	f040 80b4 	bne.w	801a0da <rcl_wait+0x322>
 8019f72:	ae08      	add	r6, sp, #32
 8019f74:	2200      	movs	r2, #0
 8019f76:	2300      	movs	r3, #0
 8019f78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019f7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8019f80:	9602      	str	r6, [sp, #8]
 8019f82:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8019f84:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8019f88:	e9cd 3200 	strd	r3, r2, [sp]
 8019f8c:	f105 0110 	add.w	r1, r5, #16
 8019f90:	f105 031c 	add.w	r3, r5, #28
 8019f94:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8019f98:	1d28      	adds	r0, r5, #4
 8019f9a:	f001 fc95 	bl	801b8c8 <rmw_wait>
 8019f9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019fa2:	4680      	mov	r8, r0
 8019fa4:	b332      	cbz	r2, 8019ff4 <rcl_wait+0x23c>
 8019fa6:	2500      	movs	r5, #0
 8019fa8:	462f      	mov	r7, r5
 8019faa:	462e      	mov	r6, r5
 8019fac:	e007      	b.n	8019fbe <rcl_wait+0x206>
 8019fae:	6922      	ldr	r2, [r4, #16]
 8019fb0:	f842 3009 	str.w	r3, [r2, r9]
 8019fb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019fb8:	3501      	adds	r5, #1
 8019fba:	4295      	cmp	r5, r2
 8019fbc:	d21b      	bcs.n	8019ff6 <rcl_wait+0x23e>
 8019fbe:	6920      	ldr	r0, [r4, #16]
 8019fc0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019fc4:	a907      	add	r1, sp, #28
 8019fc6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8019fca:	2800      	cmp	r0, #0
 8019fcc:	d0f4      	beq.n	8019fb8 <rcl_wait+0x200>
 8019fce:	f88d 601c 	strb.w	r6, [sp, #28]
 8019fd2:	f7f5 fc11 	bl	800f7f8 <rcl_timer_is_ready>
 8019fd6:	2800      	cmp	r0, #0
 8019fd8:	d1b2      	bne.n	8019f40 <rcl_wait+0x188>
 8019fda:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d0e5      	beq.n	8019fae <rcl_wait+0x1f6>
 8019fe2:	461f      	mov	r7, r3
 8019fe4:	e7e6      	b.n	8019fb4 <rcl_wait+0x1fc>
 8019fe6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8019fe8:	6923      	ldr	r3, [r4, #16]
 8019fea:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8019fec:	2200      	movs	r2, #0
 8019fee:	f843 2009 	str.w	r2, [r3, r9]
 8019ff2:	e759      	b.n	8019ea8 <rcl_wait+0xf0>
 8019ff4:	4617      	mov	r7, r2
 8019ff6:	f038 0002 	bics.w	r0, r8, #2
 8019ffa:	f040 80a8 	bne.w	801a14e <rcl_wait+0x396>
 8019ffe:	6866      	ldr	r6, [r4, #4]
 801a000:	4602      	mov	r2, r0
 801a002:	b91e      	cbnz	r6, 801a00c <rcl_wait+0x254>
 801a004:	e00d      	b.n	801a022 <rcl_wait+0x26a>
 801a006:	3201      	adds	r2, #1
 801a008:	4296      	cmp	r6, r2
 801a00a:	d00a      	beq.n	801a022 <rcl_wait+0x26a>
 801a00c:	6899      	ldr	r1, [r3, #8]
 801a00e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a012:	2900      	cmp	r1, #0
 801a014:	d1f7      	bne.n	801a006 <rcl_wait+0x24e>
 801a016:	6825      	ldr	r5, [r4, #0]
 801a018:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a01c:	3201      	adds	r2, #1
 801a01e:	4296      	cmp	r6, r2
 801a020:	d1f4      	bne.n	801a00c <rcl_wait+0x254>
 801a022:	68e6      	ldr	r6, [r4, #12]
 801a024:	2200      	movs	r2, #0
 801a026:	b91e      	cbnz	r6, 801a030 <rcl_wait+0x278>
 801a028:	e00d      	b.n	801a046 <rcl_wait+0x28e>
 801a02a:	3201      	adds	r2, #1
 801a02c:	42b2      	cmp	r2, r6
 801a02e:	d00a      	beq.n	801a046 <rcl_wait+0x28e>
 801a030:	6959      	ldr	r1, [r3, #20]
 801a032:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a036:	2900      	cmp	r1, #0
 801a038:	d1f7      	bne.n	801a02a <rcl_wait+0x272>
 801a03a:	68a5      	ldr	r5, [r4, #8]
 801a03c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a040:	3201      	adds	r2, #1
 801a042:	42b2      	cmp	r2, r6
 801a044:	d1f4      	bne.n	801a030 <rcl_wait+0x278>
 801a046:	69e6      	ldr	r6, [r4, #28]
 801a048:	2200      	movs	r2, #0
 801a04a:	b91e      	cbnz	r6, 801a054 <rcl_wait+0x29c>
 801a04c:	e00d      	b.n	801a06a <rcl_wait+0x2b2>
 801a04e:	3201      	adds	r2, #1
 801a050:	4296      	cmp	r6, r2
 801a052:	d00a      	beq.n	801a06a <rcl_wait+0x2b2>
 801a054:	6a19      	ldr	r1, [r3, #32]
 801a056:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a05a:	2900      	cmp	r1, #0
 801a05c:	d1f7      	bne.n	801a04e <rcl_wait+0x296>
 801a05e:	69a5      	ldr	r5, [r4, #24]
 801a060:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a064:	3201      	adds	r2, #1
 801a066:	4296      	cmp	r6, r2
 801a068:	d1f4      	bne.n	801a054 <rcl_wait+0x29c>
 801a06a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801a06c:	2200      	movs	r2, #0
 801a06e:	b91e      	cbnz	r6, 801a078 <rcl_wait+0x2c0>
 801a070:	e00d      	b.n	801a08e <rcl_wait+0x2d6>
 801a072:	3201      	adds	r2, #1
 801a074:	42b2      	cmp	r2, r6
 801a076:	d00a      	beq.n	801a08e <rcl_wait+0x2d6>
 801a078:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801a07a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a07e:	2900      	cmp	r1, #0
 801a080:	d1f7      	bne.n	801a072 <rcl_wait+0x2ba>
 801a082:	6a25      	ldr	r5, [r4, #32]
 801a084:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a088:	3201      	adds	r2, #1
 801a08a:	42b2      	cmp	r2, r6
 801a08c:	d1f4      	bne.n	801a078 <rcl_wait+0x2c0>
 801a08e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a090:	2200      	movs	r2, #0
 801a092:	b91e      	cbnz	r6, 801a09c <rcl_wait+0x2e4>
 801a094:	e00d      	b.n	801a0b2 <rcl_wait+0x2fa>
 801a096:	3201      	adds	r2, #1
 801a098:	42b2      	cmp	r2, r6
 801a09a:	d00a      	beq.n	801a0b2 <rcl_wait+0x2fa>
 801a09c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a09e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a0a2:	2900      	cmp	r1, #0
 801a0a4:	d1f7      	bne.n	801a096 <rcl_wait+0x2de>
 801a0a6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 801a0a8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801a0ac:	3201      	adds	r2, #1
 801a0ae:	42b2      	cmp	r2, r6
 801a0b0:	d1f4      	bne.n	801a09c <rcl_wait+0x2e4>
 801a0b2:	f1b8 0f02 	cmp.w	r8, #2
 801a0b6:	f47f af43 	bne.w	8019f40 <rcl_wait+0x188>
 801a0ba:	f087 0701 	eor.w	r7, r7, #1
 801a0be:	0078      	lsls	r0, r7, #1
 801a0c0:	e73e      	b.n	8019f40 <rcl_wait+0x188>
 801a0c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a0c6:	b019      	add	sp, #100	@ 0x64
 801a0c8:	ecbd 8b02 	vpop	{d8}
 801a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d0:	ffffffff 	.word	0xffffffff
 801a0d4:	7fffffff 	.word	0x7fffffff
 801a0d8:	465f      	mov	r7, fp
 801a0da:	f1b8 0f01 	cmp.w	r8, #1
 801a0de:	f177 0300 	sbcs.w	r3, r7, #0
 801a0e2:	db3a      	blt.n	801a15a <rcl_wait+0x3a2>
 801a0e4:	2601      	movs	r6, #1
 801a0e6:	ad10      	add	r5, sp, #64	@ 0x40
 801a0e8:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 801a0ec:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801a0f0:	a908      	add	r1, sp, #32
 801a0f2:	b1a0      	cbz	r0, 801a11e <rcl_wait+0x366>
 801a0f4:	f7ff f8ae 	bl	8019254 <rcl_clock_get_now>
 801a0f8:	2800      	cmp	r0, #0
 801a0fa:	f47f af21 	bne.w	8019f40 <rcl_wait+0x188>
 801a0fe:	9a08      	ldr	r2, [sp, #32]
 801a100:	68ab      	ldr	r3, [r5, #8]
 801a102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a104:	1a9b      	subs	r3, r3, r2
 801a106:	68ea      	ldr	r2, [r5, #12]
 801a108:	eb62 0201 	sbc.w	r2, r2, r1
 801a10c:	4598      	cmp	r8, r3
 801a10e:	eb77 0102 	sbcs.w	r1, r7, r2
 801a112:	bfba      	itte	lt
 801a114:	4643      	movlt	r3, r8
 801a116:	463a      	movlt	r2, r7
 801a118:	2601      	movge	r6, #1
 801a11a:	4698      	mov	r8, r3
 801a11c:	4617      	mov	r7, r2
 801a11e:	3508      	adds	r5, #8
 801a120:	45a9      	cmp	r9, r5
 801a122:	d1e3      	bne.n	801a0ec <rcl_wait+0x334>
 801a124:	2f00      	cmp	r7, #0
 801a126:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a128:	bfab      	itete	ge
 801a12a:	4640      	movge	r0, r8
 801a12c:	2000      	movlt	r0, #0
 801a12e:	4639      	movge	r1, r7
 801a130:	2100      	movlt	r1, #0
 801a132:	2e00      	cmp	r6, #0
 801a134:	f43f af24 	beq.w	8019f80 <rcl_wait+0x1c8>
 801a138:	a30d      	add	r3, pc, #52	@ (adr r3, 801a170 <rcl_wait+0x3b8>)
 801a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a13e:	f7e6 fd93 	bl	8000c68 <__aeabi_ldivmod>
 801a142:	ae08      	add	r6, sp, #32
 801a144:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a148:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801a14c:	e718      	b.n	8019f80 <rcl_wait+0x1c8>
 801a14e:	2001      	movs	r0, #1
 801a150:	b019      	add	sp, #100	@ 0x64
 801a152:	ecbd 8b02 	vpop	{d8}
 801a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a15a:	2600      	movs	r6, #0
 801a15c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801a160:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801a164:	e7bf      	b.n	801a0e6 <rcl_wait+0x32e>
 801a166:	200b      	movs	r0, #11
 801a168:	4770      	bx	lr
 801a16a:	bf00      	nop
 801a16c:	f3af 8000 	nop.w
 801a170:	3b9aca00 	.word	0x3b9aca00
 801a174:	00000000 	.word	0x00000000

0801a178 <rcl_action_take_goal_response>:
 801a178:	b3b0      	cbz	r0, 801a1e8 <rcl_action_take_goal_response+0x70>
 801a17a:	b570      	push	{r4, r5, r6, lr}
 801a17c:	4604      	mov	r4, r0
 801a17e:	6800      	ldr	r0, [r0, #0]
 801a180:	b368      	cbz	r0, 801a1de <rcl_action_take_goal_response+0x66>
 801a182:	460d      	mov	r5, r1
 801a184:	4616      	mov	r6, r2
 801a186:	f7fe f9cf 	bl	8018528 <rcl_client_is_valid>
 801a18a:	b330      	cbz	r0, 801a1da <rcl_action_take_goal_response+0x62>
 801a18c:	6820      	ldr	r0, [r4, #0]
 801a18e:	3004      	adds	r0, #4
 801a190:	f7fe f9ca 	bl	8018528 <rcl_client_is_valid>
 801a194:	b308      	cbz	r0, 801a1da <rcl_action_take_goal_response+0x62>
 801a196:	6820      	ldr	r0, [r4, #0]
 801a198:	3008      	adds	r0, #8
 801a19a:	f7fe f9c5 	bl	8018528 <rcl_client_is_valid>
 801a19e:	b1e0      	cbz	r0, 801a1da <rcl_action_take_goal_response+0x62>
 801a1a0:	6820      	ldr	r0, [r4, #0]
 801a1a2:	300c      	adds	r0, #12
 801a1a4:	f7f5 f906 	bl	800f3b4 <rcl_subscription_is_valid>
 801a1a8:	b1b8      	cbz	r0, 801a1da <rcl_action_take_goal_response+0x62>
 801a1aa:	6820      	ldr	r0, [r4, #0]
 801a1ac:	3010      	adds	r0, #16
 801a1ae:	f7f5 f901 	bl	800f3b4 <rcl_subscription_is_valid>
 801a1b2:	b190      	cbz	r0, 801a1da <rcl_action_take_goal_response+0x62>
 801a1b4:	b1b5      	cbz	r5, 801a1e4 <rcl_action_take_goal_response+0x6c>
 801a1b6:	b1ae      	cbz	r6, 801a1e4 <rcl_action_take_goal_response+0x6c>
 801a1b8:	6820      	ldr	r0, [r4, #0]
 801a1ba:	4632      	mov	r2, r6
 801a1bc:	4629      	mov	r1, r5
 801a1be:	f7fe f947 	bl	8018450 <rcl_take_response>
 801a1c2:	b148      	cbz	r0, 801a1d8 <rcl_action_take_goal_response+0x60>
 801a1c4:	280a      	cmp	r0, #10
 801a1c6:	d007      	beq.n	801a1d8 <rcl_action_take_goal_response+0x60>
 801a1c8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a1cc:	f640 0337 	movw	r3, #2103	@ 0x837
 801a1d0:	4290      	cmp	r0, r2
 801a1d2:	bf0c      	ite	eq
 801a1d4:	4618      	moveq	r0, r3
 801a1d6:	2001      	movne	r0, #1
 801a1d8:	bd70      	pop	{r4, r5, r6, pc}
 801a1da:	f7f6 fbd9 	bl	8010990 <rcutils_reset_error>
 801a1de:	f640 0036 	movw	r0, #2102	@ 0x836
 801a1e2:	bd70      	pop	{r4, r5, r6, pc}
 801a1e4:	200b      	movs	r0, #11
 801a1e6:	bd70      	pop	{r4, r5, r6, pc}
 801a1e8:	f640 0036 	movw	r0, #2102	@ 0x836
 801a1ec:	4770      	bx	lr
 801a1ee:	bf00      	nop

0801a1f0 <rcl_action_send_result_request>:
 801a1f0:	b378      	cbz	r0, 801a252 <rcl_action_send_result_request+0x62>
 801a1f2:	b570      	push	{r4, r5, r6, lr}
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	6800      	ldr	r0, [r0, #0]
 801a1f8:	b330      	cbz	r0, 801a248 <rcl_action_send_result_request+0x58>
 801a1fa:	460d      	mov	r5, r1
 801a1fc:	4616      	mov	r6, r2
 801a1fe:	f7fe f993 	bl	8018528 <rcl_client_is_valid>
 801a202:	b1f8      	cbz	r0, 801a244 <rcl_action_send_result_request+0x54>
 801a204:	6820      	ldr	r0, [r4, #0]
 801a206:	3004      	adds	r0, #4
 801a208:	f7fe f98e 	bl	8018528 <rcl_client_is_valid>
 801a20c:	b1d0      	cbz	r0, 801a244 <rcl_action_send_result_request+0x54>
 801a20e:	6820      	ldr	r0, [r4, #0]
 801a210:	3008      	adds	r0, #8
 801a212:	f7fe f989 	bl	8018528 <rcl_client_is_valid>
 801a216:	b1a8      	cbz	r0, 801a244 <rcl_action_send_result_request+0x54>
 801a218:	6820      	ldr	r0, [r4, #0]
 801a21a:	300c      	adds	r0, #12
 801a21c:	f7f5 f8ca 	bl	800f3b4 <rcl_subscription_is_valid>
 801a220:	b180      	cbz	r0, 801a244 <rcl_action_send_result_request+0x54>
 801a222:	6820      	ldr	r0, [r4, #0]
 801a224:	3010      	adds	r0, #16
 801a226:	f7f5 f8c5 	bl	800f3b4 <rcl_subscription_is_valid>
 801a22a:	b158      	cbz	r0, 801a244 <rcl_action_send_result_request+0x54>
 801a22c:	b17d      	cbz	r5, 801a24e <rcl_action_send_result_request+0x5e>
 801a22e:	b176      	cbz	r6, 801a24e <rcl_action_send_result_request+0x5e>
 801a230:	6820      	ldr	r0, [r4, #0]
 801a232:	4632      	mov	r2, r6
 801a234:	4629      	mov	r1, r5
 801a236:	3008      	adds	r0, #8
 801a238:	f7fe f8b8 	bl	80183ac <rcl_send_request>
 801a23c:	3800      	subs	r0, #0
 801a23e:	bf18      	it	ne
 801a240:	2001      	movne	r0, #1
 801a242:	bd70      	pop	{r4, r5, r6, pc}
 801a244:	f7f6 fba4 	bl	8010990 <rcutils_reset_error>
 801a248:	f640 0036 	movw	r0, #2102	@ 0x836
 801a24c:	bd70      	pop	{r4, r5, r6, pc}
 801a24e:	200b      	movs	r0, #11
 801a250:	bd70      	pop	{r4, r5, r6, pc}
 801a252:	f640 0036 	movw	r0, #2102	@ 0x836
 801a256:	4770      	bx	lr

0801a258 <rcl_action_take_result_response>:
 801a258:	2800      	cmp	r0, #0
 801a25a:	d037      	beq.n	801a2cc <rcl_action_take_result_response+0x74>
 801a25c:	b570      	push	{r4, r5, r6, lr}
 801a25e:	4604      	mov	r4, r0
 801a260:	6800      	ldr	r0, [r0, #0]
 801a262:	b370      	cbz	r0, 801a2c2 <rcl_action_take_result_response+0x6a>
 801a264:	460d      	mov	r5, r1
 801a266:	4616      	mov	r6, r2
 801a268:	f7fe f95e 	bl	8018528 <rcl_client_is_valid>
 801a26c:	b338      	cbz	r0, 801a2be <rcl_action_take_result_response+0x66>
 801a26e:	6820      	ldr	r0, [r4, #0]
 801a270:	3004      	adds	r0, #4
 801a272:	f7fe f959 	bl	8018528 <rcl_client_is_valid>
 801a276:	b310      	cbz	r0, 801a2be <rcl_action_take_result_response+0x66>
 801a278:	6820      	ldr	r0, [r4, #0]
 801a27a:	3008      	adds	r0, #8
 801a27c:	f7fe f954 	bl	8018528 <rcl_client_is_valid>
 801a280:	b1e8      	cbz	r0, 801a2be <rcl_action_take_result_response+0x66>
 801a282:	6820      	ldr	r0, [r4, #0]
 801a284:	300c      	adds	r0, #12
 801a286:	f7f5 f895 	bl	800f3b4 <rcl_subscription_is_valid>
 801a28a:	b1c0      	cbz	r0, 801a2be <rcl_action_take_result_response+0x66>
 801a28c:	6820      	ldr	r0, [r4, #0]
 801a28e:	3010      	adds	r0, #16
 801a290:	f7f5 f890 	bl	800f3b4 <rcl_subscription_is_valid>
 801a294:	b198      	cbz	r0, 801a2be <rcl_action_take_result_response+0x66>
 801a296:	b1bd      	cbz	r5, 801a2c8 <rcl_action_take_result_response+0x70>
 801a298:	b1b6      	cbz	r6, 801a2c8 <rcl_action_take_result_response+0x70>
 801a29a:	6820      	ldr	r0, [r4, #0]
 801a29c:	4632      	mov	r2, r6
 801a29e:	4629      	mov	r1, r5
 801a2a0:	3008      	adds	r0, #8
 801a2a2:	f7fe f8d5 	bl	8018450 <rcl_take_response>
 801a2a6:	b148      	cbz	r0, 801a2bc <rcl_action_take_result_response+0x64>
 801a2a8:	280a      	cmp	r0, #10
 801a2aa:	d007      	beq.n	801a2bc <rcl_action_take_result_response+0x64>
 801a2ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a2b0:	f640 0337 	movw	r3, #2103	@ 0x837
 801a2b4:	4290      	cmp	r0, r2
 801a2b6:	bf0c      	ite	eq
 801a2b8:	4618      	moveq	r0, r3
 801a2ba:	2001      	movne	r0, #1
 801a2bc:	bd70      	pop	{r4, r5, r6, pc}
 801a2be:	f7f6 fb67 	bl	8010990 <rcutils_reset_error>
 801a2c2:	f640 0036 	movw	r0, #2102	@ 0x836
 801a2c6:	bd70      	pop	{r4, r5, r6, pc}
 801a2c8:	200b      	movs	r0, #11
 801a2ca:	bd70      	pop	{r4, r5, r6, pc}
 801a2cc:	f640 0036 	movw	r0, #2102	@ 0x836
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop

0801a2d4 <rcl_action_take_cancel_response>:
 801a2d4:	2800      	cmp	r0, #0
 801a2d6:	d037      	beq.n	801a348 <rcl_action_take_cancel_response+0x74>
 801a2d8:	b570      	push	{r4, r5, r6, lr}
 801a2da:	4604      	mov	r4, r0
 801a2dc:	6800      	ldr	r0, [r0, #0]
 801a2de:	b370      	cbz	r0, 801a33e <rcl_action_take_cancel_response+0x6a>
 801a2e0:	460d      	mov	r5, r1
 801a2e2:	4616      	mov	r6, r2
 801a2e4:	f7fe f920 	bl	8018528 <rcl_client_is_valid>
 801a2e8:	b338      	cbz	r0, 801a33a <rcl_action_take_cancel_response+0x66>
 801a2ea:	6820      	ldr	r0, [r4, #0]
 801a2ec:	3004      	adds	r0, #4
 801a2ee:	f7fe f91b 	bl	8018528 <rcl_client_is_valid>
 801a2f2:	b310      	cbz	r0, 801a33a <rcl_action_take_cancel_response+0x66>
 801a2f4:	6820      	ldr	r0, [r4, #0]
 801a2f6:	3008      	adds	r0, #8
 801a2f8:	f7fe f916 	bl	8018528 <rcl_client_is_valid>
 801a2fc:	b1e8      	cbz	r0, 801a33a <rcl_action_take_cancel_response+0x66>
 801a2fe:	6820      	ldr	r0, [r4, #0]
 801a300:	300c      	adds	r0, #12
 801a302:	f7f5 f857 	bl	800f3b4 <rcl_subscription_is_valid>
 801a306:	b1c0      	cbz	r0, 801a33a <rcl_action_take_cancel_response+0x66>
 801a308:	6820      	ldr	r0, [r4, #0]
 801a30a:	3010      	adds	r0, #16
 801a30c:	f7f5 f852 	bl	800f3b4 <rcl_subscription_is_valid>
 801a310:	b198      	cbz	r0, 801a33a <rcl_action_take_cancel_response+0x66>
 801a312:	b1bd      	cbz	r5, 801a344 <rcl_action_take_cancel_response+0x70>
 801a314:	b1b6      	cbz	r6, 801a344 <rcl_action_take_cancel_response+0x70>
 801a316:	6820      	ldr	r0, [r4, #0]
 801a318:	4632      	mov	r2, r6
 801a31a:	4629      	mov	r1, r5
 801a31c:	3004      	adds	r0, #4
 801a31e:	f7fe f897 	bl	8018450 <rcl_take_response>
 801a322:	b148      	cbz	r0, 801a338 <rcl_action_take_cancel_response+0x64>
 801a324:	280a      	cmp	r0, #10
 801a326:	d007      	beq.n	801a338 <rcl_action_take_cancel_response+0x64>
 801a328:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801a32c:	f640 0337 	movw	r3, #2103	@ 0x837
 801a330:	4290      	cmp	r0, r2
 801a332:	bf0c      	ite	eq
 801a334:	4618      	moveq	r0, r3
 801a336:	2001      	movne	r0, #1
 801a338:	bd70      	pop	{r4, r5, r6, pc}
 801a33a:	f7f6 fb29 	bl	8010990 <rcutils_reset_error>
 801a33e:	f640 0036 	movw	r0, #2102	@ 0x836
 801a342:	bd70      	pop	{r4, r5, r6, pc}
 801a344:	200b      	movs	r0, #11
 801a346:	bd70      	pop	{r4, r5, r6, pc}
 801a348:	f640 0036 	movw	r0, #2102	@ 0x836
 801a34c:	4770      	bx	lr
 801a34e:	bf00      	nop

0801a350 <rcl_action_take_feedback>:
 801a350:	2800      	cmp	r0, #0
 801a352:	d037      	beq.n	801a3c4 <rcl_action_take_feedback+0x74>
 801a354:	b530      	push	{r4, r5, lr}
 801a356:	4604      	mov	r4, r0
 801a358:	6800      	ldr	r0, [r0, #0]
 801a35a:	b08f      	sub	sp, #60	@ 0x3c
 801a35c:	b358      	cbz	r0, 801a3b6 <rcl_action_take_feedback+0x66>
 801a35e:	460d      	mov	r5, r1
 801a360:	f7fe f8e2 	bl	8018528 <rcl_client_is_valid>
 801a364:	b328      	cbz	r0, 801a3b2 <rcl_action_take_feedback+0x62>
 801a366:	6820      	ldr	r0, [r4, #0]
 801a368:	3004      	adds	r0, #4
 801a36a:	f7fe f8dd 	bl	8018528 <rcl_client_is_valid>
 801a36e:	b300      	cbz	r0, 801a3b2 <rcl_action_take_feedback+0x62>
 801a370:	6820      	ldr	r0, [r4, #0]
 801a372:	3008      	adds	r0, #8
 801a374:	f7fe f8d8 	bl	8018528 <rcl_client_is_valid>
 801a378:	b1d8      	cbz	r0, 801a3b2 <rcl_action_take_feedback+0x62>
 801a37a:	6820      	ldr	r0, [r4, #0]
 801a37c:	300c      	adds	r0, #12
 801a37e:	f7f5 f819 	bl	800f3b4 <rcl_subscription_is_valid>
 801a382:	b1b0      	cbz	r0, 801a3b2 <rcl_action_take_feedback+0x62>
 801a384:	6820      	ldr	r0, [r4, #0]
 801a386:	3010      	adds	r0, #16
 801a388:	f7f5 f814 	bl	800f3b4 <rcl_subscription_is_valid>
 801a38c:	b188      	cbz	r0, 801a3b2 <rcl_action_take_feedback+0x62>
 801a38e:	b1b5      	cbz	r5, 801a3be <rcl_action_take_feedback+0x6e>
 801a390:	6820      	ldr	r0, [r4, #0]
 801a392:	2300      	movs	r3, #0
 801a394:	466a      	mov	r2, sp
 801a396:	4629      	mov	r1, r5
 801a398:	300c      	adds	r0, #12
 801a39a:	f7f4 ffad 	bl	800f2f8 <rcl_take>
 801a39e:	b160      	cbz	r0, 801a3ba <rcl_action_take_feedback+0x6a>
 801a3a0:	f240 1391 	movw	r3, #401	@ 0x191
 801a3a4:	4298      	cmp	r0, r3
 801a3a6:	d010      	beq.n	801a3ca <rcl_action_take_feedback+0x7a>
 801a3a8:	280a      	cmp	r0, #10
 801a3aa:	bf18      	it	ne
 801a3ac:	2001      	movne	r0, #1
 801a3ae:	b00f      	add	sp, #60	@ 0x3c
 801a3b0:	bd30      	pop	{r4, r5, pc}
 801a3b2:	f7f6 faed 	bl	8010990 <rcutils_reset_error>
 801a3b6:	f640 0036 	movw	r0, #2102	@ 0x836
 801a3ba:	b00f      	add	sp, #60	@ 0x3c
 801a3bc:	bd30      	pop	{r4, r5, pc}
 801a3be:	200b      	movs	r0, #11
 801a3c0:	b00f      	add	sp, #60	@ 0x3c
 801a3c2:	bd30      	pop	{r4, r5, pc}
 801a3c4:	f640 0036 	movw	r0, #2102	@ 0x836
 801a3c8:	4770      	bx	lr
 801a3ca:	f640 0037 	movw	r0, #2103	@ 0x837
 801a3ce:	e7f4      	b.n	801a3ba <rcl_action_take_feedback+0x6a>

0801a3d0 <rcl_action_wait_set_add_action_client>:
 801a3d0:	2800      	cmp	r0, #0
 801a3d2:	d045      	beq.n	801a460 <rcl_action_wait_set_add_action_client+0x90>
 801a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3d6:	460c      	mov	r4, r1
 801a3d8:	2900      	cmp	r1, #0
 801a3da:	d03e      	beq.n	801a45a <rcl_action_wait_set_add_action_client+0x8a>
 801a3dc:	4605      	mov	r5, r0
 801a3de:	6808      	ldr	r0, [r1, #0]
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	d03a      	beq.n	801a45a <rcl_action_wait_set_add_action_client+0x8a>
 801a3e4:	4617      	mov	r7, r2
 801a3e6:	461e      	mov	r6, r3
 801a3e8:	f7fe f89e 	bl	8018528 <rcl_client_is_valid>
 801a3ec:	b398      	cbz	r0, 801a456 <rcl_action_wait_set_add_action_client+0x86>
 801a3ee:	6820      	ldr	r0, [r4, #0]
 801a3f0:	3004      	adds	r0, #4
 801a3f2:	f7fe f899 	bl	8018528 <rcl_client_is_valid>
 801a3f6:	b370      	cbz	r0, 801a456 <rcl_action_wait_set_add_action_client+0x86>
 801a3f8:	6820      	ldr	r0, [r4, #0]
 801a3fa:	3008      	adds	r0, #8
 801a3fc:	f7fe f894 	bl	8018528 <rcl_client_is_valid>
 801a400:	b348      	cbz	r0, 801a456 <rcl_action_wait_set_add_action_client+0x86>
 801a402:	6820      	ldr	r0, [r4, #0]
 801a404:	300c      	adds	r0, #12
 801a406:	f7f4 ffd5 	bl	800f3b4 <rcl_subscription_is_valid>
 801a40a:	b320      	cbz	r0, 801a456 <rcl_action_wait_set_add_action_client+0x86>
 801a40c:	6820      	ldr	r0, [r4, #0]
 801a40e:	3010      	adds	r0, #16
 801a410:	f7f4 ffd0 	bl	800f3b4 <rcl_subscription_is_valid>
 801a414:	b1f8      	cbz	r0, 801a456 <rcl_action_wait_set_add_action_client+0x86>
 801a416:	6821      	ldr	r1, [r4, #0]
 801a418:	4628      	mov	r0, r5
 801a41a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801a41e:	f7ff fc73 	bl	8019d08 <rcl_wait_set_add_client>
 801a422:	b9b8      	cbnz	r0, 801a454 <rcl_action_wait_set_add_action_client+0x84>
 801a424:	6821      	ldr	r1, [r4, #0]
 801a426:	4628      	mov	r0, r5
 801a428:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801a42c:	3104      	adds	r1, #4
 801a42e:	f7ff fc6b 	bl	8019d08 <rcl_wait_set_add_client>
 801a432:	b978      	cbnz	r0, 801a454 <rcl_action_wait_set_add_action_client+0x84>
 801a434:	6821      	ldr	r1, [r4, #0]
 801a436:	4628      	mov	r0, r5
 801a438:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801a43c:	3108      	adds	r1, #8
 801a43e:	f7ff fc63 	bl	8019d08 <rcl_wait_set_add_client>
 801a442:	b938      	cbnz	r0, 801a454 <rcl_action_wait_set_add_action_client+0x84>
 801a444:	6821      	ldr	r1, [r4, #0]
 801a446:	4628      	mov	r0, r5
 801a448:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801a44c:	310c      	adds	r1, #12
 801a44e:	f7ff f8fb 	bl	8019648 <rcl_wait_set_add_subscription>
 801a452:	b140      	cbz	r0, 801a466 <rcl_action_wait_set_add_action_client+0x96>
 801a454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a456:	f7f6 fa9b 	bl	8010990 <rcutils_reset_error>
 801a45a:	f640 0036 	movw	r0, #2102	@ 0x836
 801a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a460:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a464:	4770      	bx	lr
 801a466:	6821      	ldr	r1, [r4, #0]
 801a468:	4628      	mov	r0, r5
 801a46a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801a46e:	3110      	adds	r1, #16
 801a470:	f7ff f8ea 	bl	8019648 <rcl_wait_set_add_subscription>
 801a474:	2800      	cmp	r0, #0
 801a476:	d1ed      	bne.n	801a454 <rcl_action_wait_set_add_action_client+0x84>
 801a478:	b11f      	cbz	r7, 801a482 <rcl_action_wait_set_add_action_client+0xb2>
 801a47a:	6823      	ldr	r3, [r4, #0]
 801a47c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801a480:	603b      	str	r3, [r7, #0]
 801a482:	2e00      	cmp	r6, #0
 801a484:	d0e6      	beq.n	801a454 <rcl_action_wait_set_add_action_client+0x84>
 801a486:	6823      	ldr	r3, [r4, #0]
 801a488:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801a48c:	6033      	str	r3, [r6, #0]
 801a48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a490 <rcl_action_client_wait_set_get_entities_ready>:
 801a490:	2800      	cmp	r0, #0
 801a492:	f000 8089 	beq.w	801a5a8 <rcl_action_client_wait_set_get_entities_ready+0x118>
 801a496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a49a:	460c      	mov	r4, r1
 801a49c:	2900      	cmp	r1, #0
 801a49e:	d079      	beq.n	801a594 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801a4a0:	4605      	mov	r5, r0
 801a4a2:	6808      	ldr	r0, [r1, #0]
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	d075      	beq.n	801a594 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801a4a8:	4616      	mov	r6, r2
 801a4aa:	461f      	mov	r7, r3
 801a4ac:	f7fe f83c 	bl	8018528 <rcl_client_is_valid>
 801a4b0:	2800      	cmp	r0, #0
 801a4b2:	d06d      	beq.n	801a590 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a4b4:	6820      	ldr	r0, [r4, #0]
 801a4b6:	3004      	adds	r0, #4
 801a4b8:	f7fe f836 	bl	8018528 <rcl_client_is_valid>
 801a4bc:	2800      	cmp	r0, #0
 801a4be:	d067      	beq.n	801a590 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a4c0:	6820      	ldr	r0, [r4, #0]
 801a4c2:	3008      	adds	r0, #8
 801a4c4:	f7fe f830 	bl	8018528 <rcl_client_is_valid>
 801a4c8:	2800      	cmp	r0, #0
 801a4ca:	d061      	beq.n	801a590 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a4cc:	6820      	ldr	r0, [r4, #0]
 801a4ce:	300c      	adds	r0, #12
 801a4d0:	f7f4 ff70 	bl	800f3b4 <rcl_subscription_is_valid>
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	d05b      	beq.n	801a590 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a4d8:	6820      	ldr	r0, [r4, #0]
 801a4da:	3010      	adds	r0, #16
 801a4dc:	f7f4 ff6a 	bl	800f3b4 <rcl_subscription_is_valid>
 801a4e0:	2800      	cmp	r0, #0
 801a4e2:	d055      	beq.n	801a590 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801a4e4:	2e00      	cmp	r6, #0
 801a4e6:	d05c      	beq.n	801a5a2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a4e8:	2f00      	cmp	r7, #0
 801a4ea:	d05a      	beq.n	801a5a2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a4ec:	9b06      	ldr	r3, [sp, #24]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d057      	beq.n	801a5a2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a4f2:	9b07      	ldr	r3, [sp, #28]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d054      	beq.n	801a5a2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a4f8:	9b08      	ldr	r3, [sp, #32]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d051      	beq.n	801a5a2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 801a4fe:	6823      	ldr	r3, [r4, #0]
 801a500:	686a      	ldr	r2, [r5, #4]
 801a502:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801a506:	428a      	cmp	r2, r1
 801a508:	d948      	bls.n	801a59c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a50a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801a50e:	4282      	cmp	r2, r0
 801a510:	d944      	bls.n	801a59c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a512:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801a516:	69ea      	ldr	r2, [r5, #28]
 801a518:	42a2      	cmp	r2, r4
 801a51a:	d93f      	bls.n	801a59c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a51c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 801a520:	4562      	cmp	r2, ip
 801a522:	d93b      	bls.n	801a59c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a524:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 801a528:	4572      	cmp	r2, lr
 801a52a:	d937      	bls.n	801a59c <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801a52c:	69aa      	ldr	r2, [r5, #24]
 801a52e:	682d      	ldr	r5, [r5, #0]
 801a530:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801a534:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801a538:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801a53c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 801a540:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801a544:	f103 0c0c 	add.w	ip, r3, #12
 801a548:	eba5 050c 	sub.w	r5, r5, ip
 801a54c:	fab5 f585 	clz	r5, r5
 801a550:	096d      	lsrs	r5, r5, #5
 801a552:	7035      	strb	r5, [r6, #0]
 801a554:	f103 0510 	add.w	r5, r3, #16
 801a558:	1b64      	subs	r4, r4, r5
 801a55a:	fab4 f484 	clz	r4, r4
 801a55e:	0964      	lsrs	r4, r4, #5
 801a560:	703c      	strb	r4, [r7, #0]
 801a562:	eba3 0008 	sub.w	r0, r3, r8
 801a566:	1d1c      	adds	r4, r3, #4
 801a568:	3308      	adds	r3, #8
 801a56a:	1ad3      	subs	r3, r2, r3
 801a56c:	fab0 f080 	clz	r0, r0
 801a570:	9a06      	ldr	r2, [sp, #24]
 801a572:	0940      	lsrs	r0, r0, #5
 801a574:	1b09      	subs	r1, r1, r4
 801a576:	7010      	strb	r0, [r2, #0]
 801a578:	fab1 f181 	clz	r1, r1
 801a57c:	9a07      	ldr	r2, [sp, #28]
 801a57e:	0949      	lsrs	r1, r1, #5
 801a580:	7011      	strb	r1, [r2, #0]
 801a582:	fab3 f383 	clz	r3, r3
 801a586:	9a08      	ldr	r2, [sp, #32]
 801a588:	095b      	lsrs	r3, r3, #5
 801a58a:	2000      	movs	r0, #0
 801a58c:	7013      	strb	r3, [r2, #0]
 801a58e:	e003      	b.n	801a598 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801a590:	f7f6 f9fe 	bl	8010990 <rcutils_reset_error>
 801a594:	f640 0036 	movw	r0, #2102	@ 0x836
 801a598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a59c:	2001      	movs	r0, #1
 801a59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5a2:	200b      	movs	r0, #11
 801a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a5ac:	4770      	bx	lr
 801a5ae:	bf00      	nop

0801a5b0 <rcl_action_take_goal_request>:
 801a5b0:	b3b0      	cbz	r0, 801a620 <rcl_action_take_goal_request+0x70>
 801a5b2:	b570      	push	{r4, r5, r6, lr}
 801a5b4:	4604      	mov	r4, r0
 801a5b6:	6800      	ldr	r0, [r0, #0]
 801a5b8:	b368      	cbz	r0, 801a616 <rcl_action_take_goal_request+0x66>
 801a5ba:	460d      	mov	r5, r1
 801a5bc:	4616      	mov	r6, r2
 801a5be:	f7fe fcf5 	bl	8018fac <rcl_service_is_valid>
 801a5c2:	b330      	cbz	r0, 801a612 <rcl_action_take_goal_request+0x62>
 801a5c4:	6820      	ldr	r0, [r4, #0]
 801a5c6:	3004      	adds	r0, #4
 801a5c8:	f7fe fcf0 	bl	8018fac <rcl_service_is_valid>
 801a5cc:	b308      	cbz	r0, 801a612 <rcl_action_take_goal_request+0x62>
 801a5ce:	6820      	ldr	r0, [r4, #0]
 801a5d0:	3008      	adds	r0, #8
 801a5d2:	f7fe fceb 	bl	8018fac <rcl_service_is_valid>
 801a5d6:	b1e0      	cbz	r0, 801a612 <rcl_action_take_goal_request+0x62>
 801a5d8:	6820      	ldr	r0, [r4, #0]
 801a5da:	300c      	adds	r0, #12
 801a5dc:	f7f4 fd3a 	bl	800f054 <rcl_publisher_is_valid>
 801a5e0:	b1b8      	cbz	r0, 801a612 <rcl_action_take_goal_request+0x62>
 801a5e2:	6820      	ldr	r0, [r4, #0]
 801a5e4:	3010      	adds	r0, #16
 801a5e6:	f7f4 fd35 	bl	800f054 <rcl_publisher_is_valid>
 801a5ea:	b190      	cbz	r0, 801a612 <rcl_action_take_goal_request+0x62>
 801a5ec:	b1b5      	cbz	r5, 801a61c <rcl_action_take_goal_request+0x6c>
 801a5ee:	b1ae      	cbz	r6, 801a61c <rcl_action_take_goal_request+0x6c>
 801a5f0:	6820      	ldr	r0, [r4, #0]
 801a5f2:	4632      	mov	r2, r6
 801a5f4:	4629      	mov	r1, r5
 801a5f6:	f7fe fc59 	bl	8018eac <rcl_take_request>
 801a5fa:	b148      	cbz	r0, 801a610 <rcl_action_take_goal_request+0x60>
 801a5fc:	280a      	cmp	r0, #10
 801a5fe:	d007      	beq.n	801a610 <rcl_action_take_goal_request+0x60>
 801a600:	f240 2259 	movw	r2, #601	@ 0x259
 801a604:	f640 0399 	movw	r3, #2201	@ 0x899
 801a608:	4290      	cmp	r0, r2
 801a60a:	bf0c      	ite	eq
 801a60c:	4618      	moveq	r0, r3
 801a60e:	2001      	movne	r0, #1
 801a610:	bd70      	pop	{r4, r5, r6, pc}
 801a612:	f7f6 f9bd 	bl	8010990 <rcutils_reset_error>
 801a616:	f640 0098 	movw	r0, #2200	@ 0x898
 801a61a:	bd70      	pop	{r4, r5, r6, pc}
 801a61c:	200b      	movs	r0, #11
 801a61e:	bd70      	pop	{r4, r5, r6, pc}
 801a620:	f640 0098 	movw	r0, #2200	@ 0x898
 801a624:	4770      	bx	lr
 801a626:	bf00      	nop

0801a628 <rcl_action_send_goal_response>:
 801a628:	b378      	cbz	r0, 801a68a <rcl_action_send_goal_response+0x62>
 801a62a:	b570      	push	{r4, r5, r6, lr}
 801a62c:	4604      	mov	r4, r0
 801a62e:	6800      	ldr	r0, [r0, #0]
 801a630:	b330      	cbz	r0, 801a680 <rcl_action_send_goal_response+0x58>
 801a632:	460d      	mov	r5, r1
 801a634:	4616      	mov	r6, r2
 801a636:	f7fe fcb9 	bl	8018fac <rcl_service_is_valid>
 801a63a:	b1f8      	cbz	r0, 801a67c <rcl_action_send_goal_response+0x54>
 801a63c:	6820      	ldr	r0, [r4, #0]
 801a63e:	3004      	adds	r0, #4
 801a640:	f7fe fcb4 	bl	8018fac <rcl_service_is_valid>
 801a644:	b1d0      	cbz	r0, 801a67c <rcl_action_send_goal_response+0x54>
 801a646:	6820      	ldr	r0, [r4, #0]
 801a648:	3008      	adds	r0, #8
 801a64a:	f7fe fcaf 	bl	8018fac <rcl_service_is_valid>
 801a64e:	b1a8      	cbz	r0, 801a67c <rcl_action_send_goal_response+0x54>
 801a650:	6820      	ldr	r0, [r4, #0]
 801a652:	300c      	adds	r0, #12
 801a654:	f7f4 fcfe 	bl	800f054 <rcl_publisher_is_valid>
 801a658:	b180      	cbz	r0, 801a67c <rcl_action_send_goal_response+0x54>
 801a65a:	6820      	ldr	r0, [r4, #0]
 801a65c:	3010      	adds	r0, #16
 801a65e:	f7f4 fcf9 	bl	800f054 <rcl_publisher_is_valid>
 801a662:	b158      	cbz	r0, 801a67c <rcl_action_send_goal_response+0x54>
 801a664:	b17d      	cbz	r5, 801a686 <rcl_action_send_goal_response+0x5e>
 801a666:	b176      	cbz	r6, 801a686 <rcl_action_send_goal_response+0x5e>
 801a668:	6820      	ldr	r0, [r4, #0]
 801a66a:	4632      	mov	r2, r6
 801a66c:	4629      	mov	r1, r5
 801a66e:	f7fe fc6d 	bl	8018f4c <rcl_send_response>
 801a672:	b110      	cbz	r0, 801a67a <rcl_action_send_goal_response+0x52>
 801a674:	2802      	cmp	r0, #2
 801a676:	bf18      	it	ne
 801a678:	2001      	movne	r0, #1
 801a67a:	bd70      	pop	{r4, r5, r6, pc}
 801a67c:	f7f6 f988 	bl	8010990 <rcutils_reset_error>
 801a680:	f640 0098 	movw	r0, #2200	@ 0x898
 801a684:	bd70      	pop	{r4, r5, r6, pc}
 801a686:	200b      	movs	r0, #11
 801a688:	bd70      	pop	{r4, r5, r6, pc}
 801a68a:	f640 0098 	movw	r0, #2200	@ 0x898
 801a68e:	4770      	bx	lr

0801a690 <rcl_action_take_result_request>:
 801a690:	2800      	cmp	r0, #0
 801a692:	d037      	beq.n	801a704 <rcl_action_take_result_request+0x74>
 801a694:	b570      	push	{r4, r5, r6, lr}
 801a696:	4604      	mov	r4, r0
 801a698:	6800      	ldr	r0, [r0, #0]
 801a69a:	b370      	cbz	r0, 801a6fa <rcl_action_take_result_request+0x6a>
 801a69c:	460d      	mov	r5, r1
 801a69e:	4616      	mov	r6, r2
 801a6a0:	f7fe fc84 	bl	8018fac <rcl_service_is_valid>
 801a6a4:	b338      	cbz	r0, 801a6f6 <rcl_action_take_result_request+0x66>
 801a6a6:	6820      	ldr	r0, [r4, #0]
 801a6a8:	3004      	adds	r0, #4
 801a6aa:	f7fe fc7f 	bl	8018fac <rcl_service_is_valid>
 801a6ae:	b310      	cbz	r0, 801a6f6 <rcl_action_take_result_request+0x66>
 801a6b0:	6820      	ldr	r0, [r4, #0]
 801a6b2:	3008      	adds	r0, #8
 801a6b4:	f7fe fc7a 	bl	8018fac <rcl_service_is_valid>
 801a6b8:	b1e8      	cbz	r0, 801a6f6 <rcl_action_take_result_request+0x66>
 801a6ba:	6820      	ldr	r0, [r4, #0]
 801a6bc:	300c      	adds	r0, #12
 801a6be:	f7f4 fcc9 	bl	800f054 <rcl_publisher_is_valid>
 801a6c2:	b1c0      	cbz	r0, 801a6f6 <rcl_action_take_result_request+0x66>
 801a6c4:	6820      	ldr	r0, [r4, #0]
 801a6c6:	3010      	adds	r0, #16
 801a6c8:	f7f4 fcc4 	bl	800f054 <rcl_publisher_is_valid>
 801a6cc:	b198      	cbz	r0, 801a6f6 <rcl_action_take_result_request+0x66>
 801a6ce:	b1bd      	cbz	r5, 801a700 <rcl_action_take_result_request+0x70>
 801a6d0:	b1b6      	cbz	r6, 801a700 <rcl_action_take_result_request+0x70>
 801a6d2:	6820      	ldr	r0, [r4, #0]
 801a6d4:	4632      	mov	r2, r6
 801a6d6:	4629      	mov	r1, r5
 801a6d8:	3008      	adds	r0, #8
 801a6da:	f7fe fbe7 	bl	8018eac <rcl_take_request>
 801a6de:	b148      	cbz	r0, 801a6f4 <rcl_action_take_result_request+0x64>
 801a6e0:	280a      	cmp	r0, #10
 801a6e2:	d007      	beq.n	801a6f4 <rcl_action_take_result_request+0x64>
 801a6e4:	f240 2259 	movw	r2, #601	@ 0x259
 801a6e8:	f640 0399 	movw	r3, #2201	@ 0x899
 801a6ec:	4290      	cmp	r0, r2
 801a6ee:	bf0c      	ite	eq
 801a6f0:	4618      	moveq	r0, r3
 801a6f2:	2001      	movne	r0, #1
 801a6f4:	bd70      	pop	{r4, r5, r6, pc}
 801a6f6:	f7f6 f94b 	bl	8010990 <rcutils_reset_error>
 801a6fa:	f640 0098 	movw	r0, #2200	@ 0x898
 801a6fe:	bd70      	pop	{r4, r5, r6, pc}
 801a700:	200b      	movs	r0, #11
 801a702:	bd70      	pop	{r4, r5, r6, pc}
 801a704:	f640 0098 	movw	r0, #2200	@ 0x898
 801a708:	4770      	bx	lr
 801a70a:	bf00      	nop

0801a70c <rcl_action_take_cancel_request>:
 801a70c:	2800      	cmp	r0, #0
 801a70e:	d037      	beq.n	801a780 <rcl_action_take_cancel_request+0x74>
 801a710:	b570      	push	{r4, r5, r6, lr}
 801a712:	4604      	mov	r4, r0
 801a714:	6800      	ldr	r0, [r0, #0]
 801a716:	b370      	cbz	r0, 801a776 <rcl_action_take_cancel_request+0x6a>
 801a718:	460d      	mov	r5, r1
 801a71a:	4616      	mov	r6, r2
 801a71c:	f7fe fc46 	bl	8018fac <rcl_service_is_valid>
 801a720:	b338      	cbz	r0, 801a772 <rcl_action_take_cancel_request+0x66>
 801a722:	6820      	ldr	r0, [r4, #0]
 801a724:	3004      	adds	r0, #4
 801a726:	f7fe fc41 	bl	8018fac <rcl_service_is_valid>
 801a72a:	b310      	cbz	r0, 801a772 <rcl_action_take_cancel_request+0x66>
 801a72c:	6820      	ldr	r0, [r4, #0]
 801a72e:	3008      	adds	r0, #8
 801a730:	f7fe fc3c 	bl	8018fac <rcl_service_is_valid>
 801a734:	b1e8      	cbz	r0, 801a772 <rcl_action_take_cancel_request+0x66>
 801a736:	6820      	ldr	r0, [r4, #0]
 801a738:	300c      	adds	r0, #12
 801a73a:	f7f4 fc8b 	bl	800f054 <rcl_publisher_is_valid>
 801a73e:	b1c0      	cbz	r0, 801a772 <rcl_action_take_cancel_request+0x66>
 801a740:	6820      	ldr	r0, [r4, #0]
 801a742:	3010      	adds	r0, #16
 801a744:	f7f4 fc86 	bl	800f054 <rcl_publisher_is_valid>
 801a748:	b198      	cbz	r0, 801a772 <rcl_action_take_cancel_request+0x66>
 801a74a:	b1bd      	cbz	r5, 801a77c <rcl_action_take_cancel_request+0x70>
 801a74c:	b1b6      	cbz	r6, 801a77c <rcl_action_take_cancel_request+0x70>
 801a74e:	6820      	ldr	r0, [r4, #0]
 801a750:	4632      	mov	r2, r6
 801a752:	4629      	mov	r1, r5
 801a754:	3004      	adds	r0, #4
 801a756:	f7fe fba9 	bl	8018eac <rcl_take_request>
 801a75a:	b148      	cbz	r0, 801a770 <rcl_action_take_cancel_request+0x64>
 801a75c:	280a      	cmp	r0, #10
 801a75e:	d007      	beq.n	801a770 <rcl_action_take_cancel_request+0x64>
 801a760:	f240 2259 	movw	r2, #601	@ 0x259
 801a764:	f640 0399 	movw	r3, #2201	@ 0x899
 801a768:	4290      	cmp	r0, r2
 801a76a:	bf0c      	ite	eq
 801a76c:	4618      	moveq	r0, r3
 801a76e:	2001      	movne	r0, #1
 801a770:	bd70      	pop	{r4, r5, r6, pc}
 801a772:	f7f6 f90d 	bl	8010990 <rcutils_reset_error>
 801a776:	f640 0098 	movw	r0, #2200	@ 0x898
 801a77a:	bd70      	pop	{r4, r5, r6, pc}
 801a77c:	200b      	movs	r0, #11
 801a77e:	bd70      	pop	{r4, r5, r6, pc}
 801a780:	f640 0098 	movw	r0, #2200	@ 0x898
 801a784:	4770      	bx	lr
 801a786:	bf00      	nop

0801a788 <rcl_action_send_cancel_response>:
 801a788:	b380      	cbz	r0, 801a7ec <rcl_action_send_cancel_response+0x64>
 801a78a:	b570      	push	{r4, r5, r6, lr}
 801a78c:	4604      	mov	r4, r0
 801a78e:	6800      	ldr	r0, [r0, #0]
 801a790:	b338      	cbz	r0, 801a7e2 <rcl_action_send_cancel_response+0x5a>
 801a792:	460d      	mov	r5, r1
 801a794:	4616      	mov	r6, r2
 801a796:	f7fe fc09 	bl	8018fac <rcl_service_is_valid>
 801a79a:	b300      	cbz	r0, 801a7de <rcl_action_send_cancel_response+0x56>
 801a79c:	6820      	ldr	r0, [r4, #0]
 801a79e:	3004      	adds	r0, #4
 801a7a0:	f7fe fc04 	bl	8018fac <rcl_service_is_valid>
 801a7a4:	b1d8      	cbz	r0, 801a7de <rcl_action_send_cancel_response+0x56>
 801a7a6:	6820      	ldr	r0, [r4, #0]
 801a7a8:	3008      	adds	r0, #8
 801a7aa:	f7fe fbff 	bl	8018fac <rcl_service_is_valid>
 801a7ae:	b1b0      	cbz	r0, 801a7de <rcl_action_send_cancel_response+0x56>
 801a7b0:	6820      	ldr	r0, [r4, #0]
 801a7b2:	300c      	adds	r0, #12
 801a7b4:	f7f4 fc4e 	bl	800f054 <rcl_publisher_is_valid>
 801a7b8:	b188      	cbz	r0, 801a7de <rcl_action_send_cancel_response+0x56>
 801a7ba:	6820      	ldr	r0, [r4, #0]
 801a7bc:	3010      	adds	r0, #16
 801a7be:	f7f4 fc49 	bl	800f054 <rcl_publisher_is_valid>
 801a7c2:	b160      	cbz	r0, 801a7de <rcl_action_send_cancel_response+0x56>
 801a7c4:	b185      	cbz	r5, 801a7e8 <rcl_action_send_cancel_response+0x60>
 801a7c6:	b17e      	cbz	r6, 801a7e8 <rcl_action_send_cancel_response+0x60>
 801a7c8:	6820      	ldr	r0, [r4, #0]
 801a7ca:	4632      	mov	r2, r6
 801a7cc:	4629      	mov	r1, r5
 801a7ce:	3004      	adds	r0, #4
 801a7d0:	f7fe fbbc 	bl	8018f4c <rcl_send_response>
 801a7d4:	b110      	cbz	r0, 801a7dc <rcl_action_send_cancel_response+0x54>
 801a7d6:	2802      	cmp	r0, #2
 801a7d8:	bf18      	it	ne
 801a7da:	2001      	movne	r0, #1
 801a7dc:	bd70      	pop	{r4, r5, r6, pc}
 801a7de:	f7f6 f8d7 	bl	8010990 <rcutils_reset_error>
 801a7e2:	f640 0098 	movw	r0, #2200	@ 0x898
 801a7e6:	bd70      	pop	{r4, r5, r6, pc}
 801a7e8:	200b      	movs	r0, #11
 801a7ea:	bd70      	pop	{r4, r5, r6, pc}
 801a7ec:	f640 0098 	movw	r0, #2200	@ 0x898
 801a7f0:	4770      	bx	lr
 801a7f2:	bf00      	nop

0801a7f4 <rcl_action_wait_set_add_action_server>:
 801a7f4:	2800      	cmp	r0, #0
 801a7f6:	d04d      	beq.n	801a894 <rcl_action_wait_set_add_action_server+0xa0>
 801a7f8:	b570      	push	{r4, r5, r6, lr}
 801a7fa:	460c      	mov	r4, r1
 801a7fc:	b159      	cbz	r1, 801a816 <rcl_action_wait_set_add_action_server+0x22>
 801a7fe:	4605      	mov	r5, r0
 801a800:	6808      	ldr	r0, [r1, #0]
 801a802:	b140      	cbz	r0, 801a816 <rcl_action_wait_set_add_action_server+0x22>
 801a804:	4616      	mov	r6, r2
 801a806:	f7fe fbd1 	bl	8018fac <rcl_service_is_valid>
 801a80a:	b120      	cbz	r0, 801a816 <rcl_action_wait_set_add_action_server+0x22>
 801a80c:	6820      	ldr	r0, [r4, #0]
 801a80e:	3004      	adds	r0, #4
 801a810:	f7fe fbcc 	bl	8018fac <rcl_service_is_valid>
 801a814:	b910      	cbnz	r0, 801a81c <rcl_action_wait_set_add_action_server+0x28>
 801a816:	f640 0098 	movw	r0, #2200	@ 0x898
 801a81a:	bd70      	pop	{r4, r5, r6, pc}
 801a81c:	6820      	ldr	r0, [r4, #0]
 801a81e:	3008      	adds	r0, #8
 801a820:	f7fe fbc4 	bl	8018fac <rcl_service_is_valid>
 801a824:	2800      	cmp	r0, #0
 801a826:	d0f6      	beq.n	801a816 <rcl_action_wait_set_add_action_server+0x22>
 801a828:	6820      	ldr	r0, [r4, #0]
 801a82a:	300c      	adds	r0, #12
 801a82c:	f7f4 fc2a 	bl	800f084 <rcl_publisher_is_valid_except_context>
 801a830:	2800      	cmp	r0, #0
 801a832:	d0f0      	beq.n	801a816 <rcl_action_wait_set_add_action_server+0x22>
 801a834:	6820      	ldr	r0, [r4, #0]
 801a836:	3010      	adds	r0, #16
 801a838:	f7f4 fc24 	bl	800f084 <rcl_publisher_is_valid_except_context>
 801a83c:	2800      	cmp	r0, #0
 801a83e:	d0ea      	beq.n	801a816 <rcl_action_wait_set_add_action_server+0x22>
 801a840:	6821      	ldr	r1, [r4, #0]
 801a842:	4628      	mov	r0, r5
 801a844:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801a848:	f7ff fa8a 	bl	8019d60 <rcl_wait_set_add_service>
 801a84c:	2800      	cmp	r0, #0
 801a84e:	d1e4      	bne.n	801a81a <rcl_action_wait_set_add_action_server+0x26>
 801a850:	6821      	ldr	r1, [r4, #0]
 801a852:	4628      	mov	r0, r5
 801a854:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801a858:	3104      	adds	r1, #4
 801a85a:	f7ff fa81 	bl	8019d60 <rcl_wait_set_add_service>
 801a85e:	2800      	cmp	r0, #0
 801a860:	d1db      	bne.n	801a81a <rcl_action_wait_set_add_action_server+0x26>
 801a862:	6821      	ldr	r1, [r4, #0]
 801a864:	4628      	mov	r0, r5
 801a866:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801a86a:	3108      	adds	r1, #8
 801a86c:	f7ff fa78 	bl	8019d60 <rcl_wait_set_add_service>
 801a870:	2800      	cmp	r0, #0
 801a872:	d1d2      	bne.n	801a81a <rcl_action_wait_set_add_action_server+0x26>
 801a874:	6821      	ldr	r1, [r4, #0]
 801a876:	4628      	mov	r0, r5
 801a878:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801a87c:	3114      	adds	r1, #20
 801a87e:	f7ff fa13 	bl	8019ca8 <rcl_wait_set_add_timer>
 801a882:	2800      	cmp	r0, #0
 801a884:	d1c9      	bne.n	801a81a <rcl_action_wait_set_add_action_server+0x26>
 801a886:	2e00      	cmp	r6, #0
 801a888:	d0c7      	beq.n	801a81a <rcl_action_wait_set_add_action_server+0x26>
 801a88a:	6823      	ldr	r3, [r4, #0]
 801a88c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801a890:	6033      	str	r3, [r6, #0]
 801a892:	bd70      	pop	{r4, r5, r6, pc}
 801a894:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a898:	4770      	bx	lr
 801a89a:	bf00      	nop

0801a89c <rcl_action_server_wait_set_get_entities_ready>:
 801a89c:	2800      	cmp	r0, #0
 801a89e:	d05a      	beq.n	801a956 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8a2:	460c      	mov	r4, r1
 801a8a4:	b161      	cbz	r1, 801a8c0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a8a6:	4605      	mov	r5, r0
 801a8a8:	6808      	ldr	r0, [r1, #0]
 801a8aa:	b148      	cbz	r0, 801a8c0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a8ac:	4616      	mov	r6, r2
 801a8ae:	461f      	mov	r7, r3
 801a8b0:	f7fe fb7c 	bl	8018fac <rcl_service_is_valid>
 801a8b4:	b120      	cbz	r0, 801a8c0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a8b6:	6820      	ldr	r0, [r4, #0]
 801a8b8:	3004      	adds	r0, #4
 801a8ba:	f7fe fb77 	bl	8018fac <rcl_service_is_valid>
 801a8be:	b910      	cbnz	r0, 801a8c6 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801a8c0:	f640 0098 	movw	r0, #2200	@ 0x898
 801a8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8c6:	6820      	ldr	r0, [r4, #0]
 801a8c8:	3008      	adds	r0, #8
 801a8ca:	f7fe fb6f 	bl	8018fac <rcl_service_is_valid>
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d0f6      	beq.n	801a8c0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a8d2:	6820      	ldr	r0, [r4, #0]
 801a8d4:	300c      	adds	r0, #12
 801a8d6:	f7f4 fbd5 	bl	800f084 <rcl_publisher_is_valid_except_context>
 801a8da:	2800      	cmp	r0, #0
 801a8dc:	d0f0      	beq.n	801a8c0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a8de:	6820      	ldr	r0, [r4, #0]
 801a8e0:	3010      	adds	r0, #16
 801a8e2:	f7f4 fbcf 	bl	800f084 <rcl_publisher_is_valid_except_context>
 801a8e6:	2800      	cmp	r0, #0
 801a8e8:	d0ea      	beq.n	801a8c0 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801a8ea:	b3be      	cbz	r6, 801a95c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a8ec:	b3b7      	cbz	r7, 801a95c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a8ee:	9b06      	ldr	r3, [sp, #24]
 801a8f0:	b3a3      	cbz	r3, 801a95c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a8f2:	9b07      	ldr	r3, [sp, #28]
 801a8f4:	b393      	cbz	r3, 801a95c <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801a8f6:	6821      	ldr	r1, [r4, #0]
 801a8f8:	692a      	ldr	r2, [r5, #16]
 801a8fa:	6a2c      	ldr	r4, [r5, #32]
 801a8fc:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801a900:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801a904:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801a908:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801a90c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801a910:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a914:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a918:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801a91c:	1a64      	subs	r4, r4, r1
 801a91e:	fab4 f484 	clz	r4, r4
 801a922:	0964      	lsrs	r4, r4, #5
 801a924:	7034      	strb	r4, [r6, #0]
 801a926:	1d0c      	adds	r4, r1, #4
 801a928:	1b1b      	subs	r3, r3, r4
 801a92a:	fab3 f383 	clz	r3, r3
 801a92e:	095b      	lsrs	r3, r3, #5
 801a930:	f101 0408 	add.w	r4, r1, #8
 801a934:	703b      	strb	r3, [r7, #0]
 801a936:	f101 0314 	add.w	r3, r1, #20
 801a93a:	1b01      	subs	r1, r0, r4
 801a93c:	1ad3      	subs	r3, r2, r3
 801a93e:	fab1 f181 	clz	r1, r1
 801a942:	9a06      	ldr	r2, [sp, #24]
 801a944:	0949      	lsrs	r1, r1, #5
 801a946:	7011      	strb	r1, [r2, #0]
 801a948:	fab3 f383 	clz	r3, r3
 801a94c:	9a07      	ldr	r2, [sp, #28]
 801a94e:	095b      	lsrs	r3, r3, #5
 801a950:	2000      	movs	r0, #0
 801a952:	7013      	strb	r3, [r2, #0]
 801a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a956:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a95a:	4770      	bx	lr
 801a95c:	200b      	movs	r0, #11
 801a95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a960 <_execute_event_handler>:
 801a960:	2002      	movs	r0, #2
 801a962:	4770      	bx	lr

0801a964 <_cancel_goal_event_handler>:
 801a964:	2003      	movs	r0, #3
 801a966:	4770      	bx	lr

0801a968 <_succeed_event_handler>:
 801a968:	2004      	movs	r0, #4
 801a96a:	4770      	bx	lr

0801a96c <_abort_event_handler>:
 801a96c:	2006      	movs	r0, #6
 801a96e:	4770      	bx	lr

0801a970 <_canceled_event_handler>:
 801a970:	2005      	movs	r0, #5
 801a972:	4770      	bx	lr

0801a974 <rcl_action_transition_goal_state>:
 801a974:	fa5f fc80 	uxtb.w	ip, r0
 801a978:	f1bc 0f06 	cmp.w	ip, #6
 801a97c:	d80c      	bhi.n	801a998 <rcl_action_transition_goal_state+0x24>
 801a97e:	2904      	cmp	r1, #4
 801a980:	d80a      	bhi.n	801a998 <rcl_action_transition_goal_state+0x24>
 801a982:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801a986:	b410      	push	{r4}
 801a988:	440b      	add	r3, r1
 801a98a:	4c06      	ldr	r4, [pc, #24]	@ (801a9a4 <rcl_action_transition_goal_state+0x30>)
 801a98c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a990:	b123      	cbz	r3, 801a99c <rcl_action_transition_goal_state+0x28>
 801a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a996:	4718      	bx	r3
 801a998:	2000      	movs	r0, #0
 801a99a:	4770      	bx	lr
 801a99c:	2000      	movs	r0, #0
 801a99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9a2:	4770      	bx	lr
 801a9a4:	08021264 	.word	0x08021264

0801a9a8 <rcl_action_get_zero_initialized_cancel_response>:
 801a9a8:	b510      	push	{r4, lr}
 801a9aa:	4c07      	ldr	r4, [pc, #28]	@ (801a9c8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801a9ac:	4686      	mov	lr, r0
 801a9ae:	4684      	mov	ip, r0
 801a9b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a9b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a9bc:	6823      	ldr	r3, [r4, #0]
 801a9be:	f8cc 3000 	str.w	r3, [ip]
 801a9c2:	4670      	mov	r0, lr
 801a9c4:	bd10      	pop	{r4, pc}
 801a9c6:	bf00      	nop
 801a9c8:	080212f0 	.word	0x080212f0

0801a9cc <rclc_action_send_result_request>:
 801a9cc:	b1d0      	cbz	r0, 801aa04 <rclc_action_send_result_request+0x38>
 801a9ce:	b500      	push	{lr}
 801a9d0:	4684      	mov	ip, r0
 801a9d2:	b087      	sub	sp, #28
 801a9d4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801a9d8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801a9dc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801a9e0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801a9e4:	f10d 0e08 	add.w	lr, sp, #8
 801a9e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a9ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801a9f0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801a9f4:	a902      	add	r1, sp, #8
 801a9f6:	3010      	adds	r0, #16
 801a9f8:	f7ff fbfa 	bl	801a1f0 <rcl_action_send_result_request>
 801a9fc:	b920      	cbnz	r0, 801aa08 <rclc_action_send_result_request+0x3c>
 801a9fe:	b007      	add	sp, #28
 801aa00:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa04:	200b      	movs	r0, #11
 801aa06:	4770      	bx	lr
 801aa08:	9001      	str	r0, [sp, #4]
 801aa0a:	f7f5 ffc1 	bl	8010990 <rcutils_reset_error>
 801aa0e:	9801      	ldr	r0, [sp, #4]
 801aa10:	b007      	add	sp, #28
 801aa12:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa16:	bf00      	nop

0801aa18 <rclc_action_take_goal_handle>:
 801aa18:	4603      	mov	r3, r0
 801aa1a:	b158      	cbz	r0, 801aa34 <rclc_action_take_goal_handle+0x1c>
 801aa1c:	6880      	ldr	r0, [r0, #8]
 801aa1e:	b148      	cbz	r0, 801aa34 <rclc_action_take_goal_handle+0x1c>
 801aa20:	6801      	ldr	r1, [r0, #0]
 801aa22:	6099      	str	r1, [r3, #8]
 801aa24:	2200      	movs	r2, #0
 801aa26:	7202      	strb	r2, [r0, #8]
 801aa28:	68d9      	ldr	r1, [r3, #12]
 801aa2a:	6001      	str	r1, [r0, #0]
 801aa2c:	6202      	str	r2, [r0, #32]
 801aa2e:	8482      	strh	r2, [r0, #36]	@ 0x24
 801aa30:	60d8      	str	r0, [r3, #12]
 801aa32:	4770      	bx	lr
 801aa34:	4770      	bx	lr
 801aa36:	bf00      	nop

0801aa38 <rclc_action_remove_used_goal_handle>:
 801aa38:	b180      	cbz	r0, 801aa5c <rclc_action_remove_used_goal_handle+0x24>
 801aa3a:	b179      	cbz	r1, 801aa5c <rclc_action_remove_used_goal_handle+0x24>
 801aa3c:	68c3      	ldr	r3, [r0, #12]
 801aa3e:	4299      	cmp	r1, r3
 801aa40:	d00d      	beq.n	801aa5e <rclc_action_remove_used_goal_handle+0x26>
 801aa42:	b12b      	cbz	r3, 801aa50 <rclc_action_remove_used_goal_handle+0x18>
 801aa44:	681a      	ldr	r2, [r3, #0]
 801aa46:	4291      	cmp	r1, r2
 801aa48:	d003      	beq.n	801aa52 <rclc_action_remove_used_goal_handle+0x1a>
 801aa4a:	4613      	mov	r3, r2
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d1f9      	bne.n	801aa44 <rclc_action_remove_used_goal_handle+0xc>
 801aa50:	4770      	bx	lr
 801aa52:	680a      	ldr	r2, [r1, #0]
 801aa54:	601a      	str	r2, [r3, #0]
 801aa56:	6883      	ldr	r3, [r0, #8]
 801aa58:	600b      	str	r3, [r1, #0]
 801aa5a:	6081      	str	r1, [r0, #8]
 801aa5c:	4770      	bx	lr
 801aa5e:	680b      	ldr	r3, [r1, #0]
 801aa60:	60c3      	str	r3, [r0, #12]
 801aa62:	e7f8      	b.n	801aa56 <rclc_action_remove_used_goal_handle+0x1e>

0801aa64 <rclc_action_find_goal_handle_by_uuid>:
 801aa64:	b538      	push	{r3, r4, r5, lr}
 801aa66:	b180      	cbz	r0, 801aa8a <rclc_action_find_goal_handle_by_uuid+0x26>
 801aa68:	460d      	mov	r5, r1
 801aa6a:	b181      	cbz	r1, 801aa8e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801aa6c:	68c4      	ldr	r4, [r0, #12]
 801aa6e:	b914      	cbnz	r4, 801aa76 <rclc_action_find_goal_handle_by_uuid+0x12>
 801aa70:	e009      	b.n	801aa86 <rclc_action_find_goal_handle_by_uuid+0x22>
 801aa72:	6824      	ldr	r4, [r4, #0]
 801aa74:	b13c      	cbz	r4, 801aa86 <rclc_action_find_goal_handle_by_uuid+0x22>
 801aa76:	2210      	movs	r2, #16
 801aa78:	4629      	mov	r1, r5
 801aa7a:	f104 0009 	add.w	r0, r4, #9
 801aa7e:	f003 f975 	bl	801dd6c <memcmp>
 801aa82:	2800      	cmp	r0, #0
 801aa84:	d1f5      	bne.n	801aa72 <rclc_action_find_goal_handle_by_uuid+0xe>
 801aa86:	4620      	mov	r0, r4
 801aa88:	bd38      	pop	{r3, r4, r5, pc}
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	e7fb      	b.n	801aa86 <rclc_action_find_goal_handle_by_uuid+0x22>
 801aa8e:	460c      	mov	r4, r1
 801aa90:	e7f9      	b.n	801aa86 <rclc_action_find_goal_handle_by_uuid+0x22>
 801aa92:	bf00      	nop

0801aa94 <rclc_action_find_first_handle_by_status>:
 801aa94:	b140      	cbz	r0, 801aaa8 <rclc_action_find_first_handle_by_status+0x14>
 801aa96:	68c0      	ldr	r0, [r0, #12]
 801aa98:	b910      	cbnz	r0, 801aaa0 <rclc_action_find_first_handle_by_status+0xc>
 801aa9a:	e005      	b.n	801aaa8 <rclc_action_find_first_handle_by_status+0x14>
 801aa9c:	6800      	ldr	r0, [r0, #0]
 801aa9e:	b118      	cbz	r0, 801aaa8 <rclc_action_find_first_handle_by_status+0x14>
 801aaa0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801aaa4:	428b      	cmp	r3, r1
 801aaa6:	d1f9      	bne.n	801aa9c <rclc_action_find_first_handle_by_status+0x8>
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop

0801aaac <rclc_action_find_first_terminated_handle>:
 801aaac:	b140      	cbz	r0, 801aac0 <rclc_action_find_first_terminated_handle+0x14>
 801aaae:	68c0      	ldr	r0, [r0, #12]
 801aab0:	b910      	cbnz	r0, 801aab8 <rclc_action_find_first_terminated_handle+0xc>
 801aab2:	e005      	b.n	801aac0 <rclc_action_find_first_terminated_handle+0x14>
 801aab4:	6800      	ldr	r0, [r0, #0]
 801aab6:	b118      	cbz	r0, 801aac0 <rclc_action_find_first_terminated_handle+0x14>
 801aab8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801aabc:	2b03      	cmp	r3, #3
 801aabe:	ddf9      	ble.n	801aab4 <rclc_action_find_first_terminated_handle+0x8>
 801aac0:	4770      	bx	lr
 801aac2:	bf00      	nop

0801aac4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801aac4:	b170      	cbz	r0, 801aae4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801aac6:	68c0      	ldr	r0, [r0, #12]
 801aac8:	b160      	cbz	r0, 801aae4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801aaca:	b410      	push	{r4}
 801aacc:	e001      	b.n	801aad2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801aace:	6800      	ldr	r0, [r0, #0]
 801aad0:	b128      	cbz	r0, 801aade <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801aad2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801aad6:	4299      	cmp	r1, r3
 801aad8:	bf08      	it	eq
 801aada:	4294      	cmpeq	r4, r2
 801aadc:	d1f7      	bne.n	801aace <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801aade:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aae2:	4770      	bx	lr
 801aae4:	4770      	bx	lr
 801aae6:	bf00      	nop

0801aae8 <rclc_action_find_handle_by_result_request_sequence_number>:
 801aae8:	b170      	cbz	r0, 801ab08 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801aaea:	68c0      	ldr	r0, [r0, #12]
 801aaec:	b160      	cbz	r0, 801ab08 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801aaee:	b410      	push	{r4}
 801aaf0:	e001      	b.n	801aaf6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801aaf2:	6800      	ldr	r0, [r0, #0]
 801aaf4:	b128      	cbz	r0, 801ab02 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801aaf6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801aafa:	4299      	cmp	r1, r3
 801aafc:	bf08      	it	eq
 801aafe:	4294      	cmpeq	r4, r2
 801ab00:	d1f7      	bne.n	801aaf2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801ab02:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab06:	4770      	bx	lr
 801ab08:	4770      	bx	lr
 801ab0a:	bf00      	nop

0801ab0c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801ab0c:	b170      	cbz	r0, 801ab2c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801ab0e:	68c0      	ldr	r0, [r0, #12]
 801ab10:	b160      	cbz	r0, 801ab2c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801ab12:	b410      	push	{r4}
 801ab14:	e001      	b.n	801ab1a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801ab16:	6800      	ldr	r0, [r0, #0]
 801ab18:	b128      	cbz	r0, 801ab26 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801ab1a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801ab1e:	4299      	cmp	r1, r3
 801ab20:	bf08      	it	eq
 801ab22:	4294      	cmpeq	r4, r2
 801ab24:	d1f7      	bne.n	801ab16 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801ab26:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab2a:	4770      	bx	lr
 801ab2c:	4770      	bx	lr
 801ab2e:	bf00      	nop

0801ab30 <rclc_action_find_first_handle_with_goal_response>:
 801ab30:	b140      	cbz	r0, 801ab44 <rclc_action_find_first_handle_with_goal_response+0x14>
 801ab32:	68c0      	ldr	r0, [r0, #12]
 801ab34:	b910      	cbnz	r0, 801ab3c <rclc_action_find_first_handle_with_goal_response+0xc>
 801ab36:	e005      	b.n	801ab44 <rclc_action_find_first_handle_with_goal_response+0x14>
 801ab38:	6800      	ldr	r0, [r0, #0]
 801ab3a:	b118      	cbz	r0, 801ab44 <rclc_action_find_first_handle_with_goal_response+0x14>
 801ab3c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d0f9      	beq.n	801ab38 <rclc_action_find_first_handle_with_goal_response+0x8>
 801ab44:	4770      	bx	lr
 801ab46:	bf00      	nop

0801ab48 <rclc_action_find_first_handle_with_result_response>:
 801ab48:	b140      	cbz	r0, 801ab5c <rclc_action_find_first_handle_with_result_response+0x14>
 801ab4a:	68c0      	ldr	r0, [r0, #12]
 801ab4c:	b910      	cbnz	r0, 801ab54 <rclc_action_find_first_handle_with_result_response+0xc>
 801ab4e:	e005      	b.n	801ab5c <rclc_action_find_first_handle_with_result_response+0x14>
 801ab50:	6800      	ldr	r0, [r0, #0]
 801ab52:	b118      	cbz	r0, 801ab5c <rclc_action_find_first_handle_with_result_response+0x14>
 801ab54:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d0f9      	beq.n	801ab50 <rclc_action_find_first_handle_with_result_response+0x8>
 801ab5c:	4770      	bx	lr
 801ab5e:	bf00      	nop

0801ab60 <rclc_action_server_response_goal_request>:
 801ab60:	b198      	cbz	r0, 801ab8a <rclc_action_server_response_goal_request+0x2a>
 801ab62:	b510      	push	{r4, lr}
 801ab64:	6844      	ldr	r4, [r0, #4]
 801ab66:	b086      	sub	sp, #24
 801ab68:	2200      	movs	r2, #0
 801ab6a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801ab6e:	460b      	mov	r3, r1
 801ab70:	9205      	str	r2, [sp, #20]
 801ab72:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801ab76:	aa03      	add	r2, sp, #12
 801ab78:	f104 0010 	add.w	r0, r4, #16
 801ab7c:	f88d 300c 	strb.w	r3, [sp, #12]
 801ab80:	f7ff fd52 	bl	801a628 <rcl_action_send_goal_response>
 801ab84:	b918      	cbnz	r0, 801ab8e <rclc_action_server_response_goal_request+0x2e>
 801ab86:	b006      	add	sp, #24
 801ab88:	bd10      	pop	{r4, pc}
 801ab8a:	200b      	movs	r0, #11
 801ab8c:	4770      	bx	lr
 801ab8e:	9001      	str	r0, [sp, #4]
 801ab90:	f7f5 fefe 	bl	8010990 <rcutils_reset_error>
 801ab94:	9801      	ldr	r0, [sp, #4]
 801ab96:	b006      	add	sp, #24
 801ab98:	bd10      	pop	{r4, pc}
 801ab9a:	bf00      	nop
 801ab9c:	0000      	movs	r0, r0
	...

0801aba0 <rclc_action_server_goal_cancel_accept>:
 801aba0:	b310      	cbz	r0, 801abe8 <rclc_action_server_goal_cancel_accept+0x48>
 801aba2:	b510      	push	{r4, lr}
 801aba4:	b090      	sub	sp, #64	@ 0x40
 801aba6:	4604      	mov	r4, r0
 801aba8:	a806      	add	r0, sp, #24
 801abaa:	f7ff fefd 	bl	801a9a8 <rcl_action_get_zero_initialized_cancel_response>
 801abae:	2300      	movs	r3, #0
 801abb0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801abb4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801abb8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801abbc:	f88d 3018 	strb.w	r3, [sp, #24]
 801abc0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801abc4:	f8cd d01c 	str.w	sp, [sp, #28]
 801abc8:	46ec      	mov	ip, sp
 801abca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801abce:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801abf0 <rclc_action_server_goal_cancel_accept+0x50>
 801abd2:	6860      	ldr	r0, [r4, #4]
 801abd4:	aa06      	add	r2, sp, #24
 801abd6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801abda:	3010      	adds	r0, #16
 801abdc:	ed8d 7b08 	vstr	d7, [sp, #32]
 801abe0:	f7ff fdd2 	bl	801a788 <rcl_action_send_cancel_response>
 801abe4:	b010      	add	sp, #64	@ 0x40
 801abe6:	bd10      	pop	{r4, pc}
 801abe8:	200b      	movs	r0, #11
 801abea:	4770      	bx	lr
 801abec:	f3af 8000 	nop.w
 801abf0:	00000001 	.word	0x00000001
 801abf4:	00000001 	.word	0x00000001

0801abf8 <rclc_action_server_goal_cancel_reject>:
 801abf8:	b082      	sub	sp, #8
 801abfa:	b530      	push	{r4, r5, lr}
 801abfc:	b08b      	sub	sp, #44	@ 0x2c
 801abfe:	ac0e      	add	r4, sp, #56	@ 0x38
 801ac00:	e884 000c 	stmia.w	r4, {r2, r3}
 801ac04:	b188      	cbz	r0, 801ac2a <rclc_action_server_goal_cancel_reject+0x32>
 801ac06:	4604      	mov	r4, r0
 801ac08:	a801      	add	r0, sp, #4
 801ac0a:	460d      	mov	r5, r1
 801ac0c:	f7ff fecc 	bl	801a9a8 <rcl_action_get_zero_initialized_cancel_response>
 801ac10:	aa01      	add	r2, sp, #4
 801ac12:	a90e      	add	r1, sp, #56	@ 0x38
 801ac14:	f104 0010 	add.w	r0, r4, #16
 801ac18:	f88d 5004 	strb.w	r5, [sp, #4]
 801ac1c:	f7ff fdb4 	bl	801a788 <rcl_action_send_cancel_response>
 801ac20:	b00b      	add	sp, #44	@ 0x2c
 801ac22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac26:	b002      	add	sp, #8
 801ac28:	4770      	bx	lr
 801ac2a:	200b      	movs	r0, #11
 801ac2c:	b00b      	add	sp, #44	@ 0x2c
 801ac2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac32:	b002      	add	sp, #8
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop

0801ac38 <rcutils_is_directory>:
 801ac38:	2000      	movs	r0, #0
 801ac3a:	4770      	bx	lr

0801ac3c <rcutils_join_path>:
 801ac3c:	b082      	sub	sp, #8
 801ac3e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801ac42:	2000      	movs	r0, #0
 801ac44:	b002      	add	sp, #8
 801ac46:	4770      	bx	lr

0801ac48 <rcutils_to_native_path>:
 801ac48:	b084      	sub	sp, #16
 801ac4a:	a801      	add	r0, sp, #4
 801ac4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801ac50:	b004      	add	sp, #16
 801ac52:	2000      	movs	r0, #0
 801ac54:	4770      	bx	lr
 801ac56:	bf00      	nop

0801ac58 <rcutils_get_zero_initialized_string_array>:
 801ac58:	b570      	push	{r4, r5, r6, lr}
 801ac5a:	b086      	sub	sp, #24
 801ac5c:	4606      	mov	r6, r0
 801ac5e:	4668      	mov	r0, sp
 801ac60:	f7f5 fd78 	bl	8010754 <rcutils_get_zero_initialized_allocator>
 801ac64:	46ee      	mov	lr, sp
 801ac66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ac6a:	4c09      	ldr	r4, [pc, #36]	@ (801ac90 <rcutils_get_zero_initialized_string_array+0x38>)
 801ac6c:	f104 0508 	add.w	r5, r4, #8
 801ac70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ac72:	46a4      	mov	ip, r4
 801ac74:	f8de 3000 	ldr.w	r3, [lr]
 801ac78:	602b      	str	r3, [r5, #0]
 801ac7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac7e:	4634      	mov	r4, r6
 801ac80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac82:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801ac86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801ac8a:	4630      	mov	r0, r6
 801ac8c:	b006      	add	sp, #24
 801ac8e:	bd70      	pop	{r4, r5, r6, pc}
 801ac90:	2001f5c8 	.word	0x2001f5c8

0801ac94 <rcutils_string_array_init>:
 801ac94:	b1da      	cbz	r2, 801acce <rcutils_string_array_init+0x3a>
 801ac96:	b570      	push	{r4, r5, r6, lr}
 801ac98:	4605      	mov	r5, r0
 801ac9a:	b1d0      	cbz	r0, 801acd2 <rcutils_string_array_init+0x3e>
 801ac9c:	460e      	mov	r6, r1
 801ac9e:	4614      	mov	r4, r2
 801aca0:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801aca4:	6001      	str	r1, [r0, #0]
 801aca6:	2104      	movs	r1, #4
 801aca8:	4630      	mov	r0, r6
 801acaa:	4798      	blx	r3
 801acac:	6068      	str	r0, [r5, #4]
 801acae:	b150      	cbz	r0, 801acc6 <rcutils_string_array_init+0x32>
 801acb0:	46a4      	mov	ip, r4
 801acb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801acb6:	f105 0408 	add.w	r4, r5, #8
 801acba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acbc:	f8dc 3000 	ldr.w	r3, [ip]
 801acc0:	6023      	str	r3, [r4, #0]
 801acc2:	2000      	movs	r0, #0
 801acc4:	bd70      	pop	{r4, r5, r6, pc}
 801acc6:	2e00      	cmp	r6, #0
 801acc8:	d0f2      	beq.n	801acb0 <rcutils_string_array_init+0x1c>
 801acca:	200a      	movs	r0, #10
 801accc:	bd70      	pop	{r4, r5, r6, pc}
 801acce:	200b      	movs	r0, #11
 801acd0:	4770      	bx	lr
 801acd2:	200b      	movs	r0, #11
 801acd4:	bd70      	pop	{r4, r5, r6, pc}
 801acd6:	bf00      	nop

0801acd8 <rcutils_string_array_fini>:
 801acd8:	b310      	cbz	r0, 801ad20 <rcutils_string_array_fini+0x48>
 801acda:	6843      	ldr	r3, [r0, #4]
 801acdc:	b570      	push	{r4, r5, r6, lr}
 801acde:	4604      	mov	r4, r0
 801ace0:	b1d3      	cbz	r3, 801ad18 <rcutils_string_array_fini+0x40>
 801ace2:	3008      	adds	r0, #8
 801ace4:	f7f5 fd70 	bl	80107c8 <rcutils_allocator_is_valid>
 801ace8:	b1c0      	cbz	r0, 801ad1c <rcutils_string_array_fini+0x44>
 801acea:	e9d4 3000 	ldrd	r3, r0, [r4]
 801acee:	b16b      	cbz	r3, 801ad0c <rcutils_string_array_fini+0x34>
 801acf0:	2500      	movs	r5, #0
 801acf2:	462e      	mov	r6, r5
 801acf4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801acf8:	68e3      	ldr	r3, [r4, #12]
 801acfa:	69a1      	ldr	r1, [r4, #24]
 801acfc:	4798      	blx	r3
 801acfe:	e9d4 3000 	ldrd	r3, r0, [r4]
 801ad02:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801ad06:	3501      	adds	r5, #1
 801ad08:	42ab      	cmp	r3, r5
 801ad0a:	d8f3      	bhi.n	801acf4 <rcutils_string_array_fini+0x1c>
 801ad0c:	68e3      	ldr	r3, [r4, #12]
 801ad0e:	69a1      	ldr	r1, [r4, #24]
 801ad10:	4798      	blx	r3
 801ad12:	2300      	movs	r3, #0
 801ad14:	e9c4 3300 	strd	r3, r3, [r4]
 801ad18:	2000      	movs	r0, #0
 801ad1a:	bd70      	pop	{r4, r5, r6, pc}
 801ad1c:	200b      	movs	r0, #11
 801ad1e:	bd70      	pop	{r4, r5, r6, pc}
 801ad20:	200b      	movs	r0, #11
 801ad22:	4770      	bx	lr

0801ad24 <rcutils_get_zero_initialized_string_map>:
 801ad24:	4b01      	ldr	r3, [pc, #4]	@ (801ad2c <rcutils_get_zero_initialized_string_map+0x8>)
 801ad26:	2000      	movs	r0, #0
 801ad28:	6018      	str	r0, [r3, #0]
 801ad2a:	4770      	bx	lr
 801ad2c:	2001f5e4 	.word	0x2001f5e4

0801ad30 <rcutils_string_map_reserve>:
 801ad30:	2800      	cmp	r0, #0
 801ad32:	d04e      	beq.n	801add2 <rcutils_string_map_reserve+0xa2>
 801ad34:	b530      	push	{r4, r5, lr}
 801ad36:	6803      	ldr	r3, [r0, #0]
 801ad38:	b087      	sub	sp, #28
 801ad3a:	4604      	mov	r4, r0
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d043      	beq.n	801adc8 <rcutils_string_map_reserve+0x98>
 801ad40:	f103 0c0c 	add.w	ip, r3, #12
 801ad44:	460d      	mov	r5, r1
 801ad46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ad4a:	f10d 0e04 	add.w	lr, sp, #4
 801ad4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ad52:	f8dc 3000 	ldr.w	r3, [ip]
 801ad56:	f8ce 3000 	str.w	r3, [lr]
 801ad5a:	a801      	add	r0, sp, #4
 801ad5c:	f7f5 fd34 	bl	80107c8 <rcutils_allocator_is_valid>
 801ad60:	b308      	cbz	r0, 801ada6 <rcutils_string_map_reserve+0x76>
 801ad62:	6823      	ldr	r3, [r4, #0]
 801ad64:	6899      	ldr	r1, [r3, #8]
 801ad66:	42a9      	cmp	r1, r5
 801ad68:	d829      	bhi.n	801adbe <rcutils_string_map_reserve+0x8e>
 801ad6a:	685a      	ldr	r2, [r3, #4]
 801ad6c:	42aa      	cmp	r2, r5
 801ad6e:	d024      	beq.n	801adba <rcutils_string_map_reserve+0x8a>
 801ad70:	b1e5      	cbz	r5, 801adac <rcutils_string_map_reserve+0x7c>
 801ad72:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801ad76:	d22a      	bcs.n	801adce <rcutils_string_map_reserve+0x9e>
 801ad78:	6818      	ldr	r0, [r3, #0]
 801ad7a:	9a05      	ldr	r2, [sp, #20]
 801ad7c:	9b03      	ldr	r3, [sp, #12]
 801ad7e:	00e9      	lsls	r1, r5, #3
 801ad80:	4798      	blx	r3
 801ad82:	b320      	cbz	r0, 801adce <rcutils_string_map_reserve+0x9e>
 801ad84:	6824      	ldr	r4, [r4, #0]
 801ad86:	6861      	ldr	r1, [r4, #4]
 801ad88:	6020      	str	r0, [r4, #0]
 801ad8a:	42a9      	cmp	r1, r5
 801ad8c:	d214      	bcs.n	801adb8 <rcutils_string_map_reserve+0x88>
 801ad8e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801ad92:	1a69      	subs	r1, r5, r1
 801ad94:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801ad98:	2200      	movs	r2, #0
 801ad9a:	e9c3 2200 	strd	r2, r2, [r3]
 801ad9e:	3308      	adds	r3, #8
 801ada0:	428b      	cmp	r3, r1
 801ada2:	d1fa      	bne.n	801ad9a <rcutils_string_map_reserve+0x6a>
 801ada4:	e008      	b.n	801adb8 <rcutils_string_map_reserve+0x88>
 801ada6:	200b      	movs	r0, #11
 801ada8:	b007      	add	sp, #28
 801adaa:	bd30      	pop	{r4, r5, pc}
 801adac:	9a02      	ldr	r2, [sp, #8]
 801adae:	9905      	ldr	r1, [sp, #20]
 801adb0:	6818      	ldr	r0, [r3, #0]
 801adb2:	4790      	blx	r2
 801adb4:	6824      	ldr	r4, [r4, #0]
 801adb6:	6025      	str	r5, [r4, #0]
 801adb8:	6065      	str	r5, [r4, #4]
 801adba:	2000      	movs	r0, #0
 801adbc:	e7f4      	b.n	801ada8 <rcutils_string_map_reserve+0x78>
 801adbe:	4620      	mov	r0, r4
 801adc0:	f7ff ffb6 	bl	801ad30 <rcutils_string_map_reserve>
 801adc4:	b007      	add	sp, #28
 801adc6:	bd30      	pop	{r4, r5, pc}
 801adc8:	201f      	movs	r0, #31
 801adca:	b007      	add	sp, #28
 801adcc:	bd30      	pop	{r4, r5, pc}
 801adce:	200a      	movs	r0, #10
 801add0:	e7ea      	b.n	801ada8 <rcutils_string_map_reserve+0x78>
 801add2:	200b      	movs	r0, #11
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop

0801add8 <rcutils_string_map_init>:
 801add8:	b082      	sub	sp, #8
 801adda:	b570      	push	{r4, r5, r6, lr}
 801addc:	ac04      	add	r4, sp, #16
 801adde:	e884 000c 	stmia.w	r4, {r2, r3}
 801ade2:	b378      	cbz	r0, 801ae44 <rcutils_string_map_init+0x6c>
 801ade4:	6806      	ldr	r6, [r0, #0]
 801ade6:	4604      	mov	r4, r0
 801ade8:	b12e      	cbz	r6, 801adf6 <rcutils_string_map_init+0x1e>
 801adea:	251e      	movs	r5, #30
 801adec:	4628      	mov	r0, r5
 801adee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801adf2:	b002      	add	sp, #8
 801adf4:	4770      	bx	lr
 801adf6:	a804      	add	r0, sp, #16
 801adf8:	460d      	mov	r5, r1
 801adfa:	f7f5 fce5 	bl	80107c8 <rcutils_allocator_is_valid>
 801adfe:	b308      	cbz	r0, 801ae44 <rcutils_string_map_init+0x6c>
 801ae00:	9b04      	ldr	r3, [sp, #16]
 801ae02:	9908      	ldr	r1, [sp, #32]
 801ae04:	2020      	movs	r0, #32
 801ae06:	4798      	blx	r3
 801ae08:	6020      	str	r0, [r4, #0]
 801ae0a:	b308      	cbz	r0, 801ae50 <rcutils_string_map_init+0x78>
 801ae0c:	f10d 0e10 	add.w	lr, sp, #16
 801ae10:	e9c0 6600 	strd	r6, r6, [r0]
 801ae14:	6086      	str	r6, [r0, #8]
 801ae16:	f100 0c0c 	add.w	ip, r0, #12
 801ae1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae22:	f8de 3000 	ldr.w	r3, [lr]
 801ae26:	f8cc 3000 	str.w	r3, [ip]
 801ae2a:	4629      	mov	r1, r5
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f7ff ff7f 	bl	801ad30 <rcutils_string_map_reserve>
 801ae32:	4605      	mov	r5, r0
 801ae34:	2800      	cmp	r0, #0
 801ae36:	d0d9      	beq.n	801adec <rcutils_string_map_init+0x14>
 801ae38:	9b05      	ldr	r3, [sp, #20]
 801ae3a:	9908      	ldr	r1, [sp, #32]
 801ae3c:	6820      	ldr	r0, [r4, #0]
 801ae3e:	4798      	blx	r3
 801ae40:	6026      	str	r6, [r4, #0]
 801ae42:	e7d3      	b.n	801adec <rcutils_string_map_init+0x14>
 801ae44:	250b      	movs	r5, #11
 801ae46:	4628      	mov	r0, r5
 801ae48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae4c:	b002      	add	sp, #8
 801ae4e:	4770      	bx	lr
 801ae50:	250a      	movs	r5, #10
 801ae52:	e7cb      	b.n	801adec <rcutils_string_map_init+0x14>

0801ae54 <rcutils_string_map_fini>:
 801ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae58:	b086      	sub	sp, #24
 801ae5a:	2800      	cmp	r0, #0
 801ae5c:	d04f      	beq.n	801aefe <rcutils_string_map_fini+0xaa>
 801ae5e:	6805      	ldr	r5, [r0, #0]
 801ae60:	4606      	mov	r6, r0
 801ae62:	2d00      	cmp	r5, #0
 801ae64:	d046      	beq.n	801aef4 <rcutils_string_map_fini+0xa0>
 801ae66:	686b      	ldr	r3, [r5, #4]
 801ae68:	b353      	cbz	r3, 801aec0 <rcutils_string_map_fini+0x6c>
 801ae6a:	2400      	movs	r4, #0
 801ae6c:	682a      	ldr	r2, [r5, #0]
 801ae6e:	4627      	mov	r7, r4
 801ae70:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801ae74:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801ae78:	b1f8      	cbz	r0, 801aeba <rcutils_string_map_fini+0x66>
 801ae7a:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 801ae7e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ae82:	4651      	mov	r1, sl
 801ae84:	47c8      	blx	r9
 801ae86:	682b      	ldr	r3, [r5, #0]
 801ae88:	eb03 0208 	add.w	r2, r3, r8
 801ae8c:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 801ae90:	6850      	ldr	r0, [r2, #4]
 801ae92:	4651      	mov	r1, sl
 801ae94:	47c8      	blx	r9
 801ae96:	682a      	ldr	r2, [r5, #0]
 801ae98:	68ab      	ldr	r3, [r5, #8]
 801ae9a:	4442      	add	r2, r8
 801ae9c:	3b01      	subs	r3, #1
 801ae9e:	6057      	str	r7, [r2, #4]
 801aea0:	60ab      	str	r3, [r5, #8]
 801aea2:	6835      	ldr	r5, [r6, #0]
 801aea4:	686b      	ldr	r3, [r5, #4]
 801aea6:	3401      	adds	r4, #1
 801aea8:	429c      	cmp	r4, r3
 801aeaa:	d209      	bcs.n	801aec0 <rcutils_string_map_fini+0x6c>
 801aeac:	682a      	ldr	r2, [r5, #0]
 801aeae:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 801aeb2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801aeb6:	2800      	cmp	r0, #0
 801aeb8:	d1df      	bne.n	801ae7a <rcutils_string_map_fini+0x26>
 801aeba:	3401      	adds	r4, #1
 801aebc:	42a3      	cmp	r3, r4
 801aebe:	d8d7      	bhi.n	801ae70 <rcutils_string_map_fini+0x1c>
 801aec0:	2100      	movs	r1, #0
 801aec2:	4630      	mov	r0, r6
 801aec4:	f7ff ff34 	bl	801ad30 <rcutils_string_map_reserve>
 801aec8:	4604      	mov	r4, r0
 801aeca:	b118      	cbz	r0, 801aed4 <rcutils_string_map_fini+0x80>
 801aecc:	4620      	mov	r0, r4
 801aece:	b006      	add	sp, #24
 801aed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aed4:	6835      	ldr	r5, [r6, #0]
 801aed6:	350c      	adds	r5, #12
 801aed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aeda:	af01      	add	r7, sp, #4
 801aedc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801aede:	682b      	ldr	r3, [r5, #0]
 801aee0:	603b      	str	r3, [r7, #0]
 801aee2:	a801      	add	r0, sp, #4
 801aee4:	f7f5 fc70 	bl	80107c8 <rcutils_allocator_is_valid>
 801aee8:	b148      	cbz	r0, 801aefe <rcutils_string_map_fini+0xaa>
 801aeea:	9b02      	ldr	r3, [sp, #8]
 801aeec:	9905      	ldr	r1, [sp, #20]
 801aeee:	6830      	ldr	r0, [r6, #0]
 801aef0:	4798      	blx	r3
 801aef2:	6034      	str	r4, [r6, #0]
 801aef4:	2400      	movs	r4, #0
 801aef6:	4620      	mov	r0, r4
 801aef8:	b006      	add	sp, #24
 801aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aefe:	240b      	movs	r4, #11
 801af00:	4620      	mov	r0, r4
 801af02:	b006      	add	sp, #24
 801af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801af08 <rcutils_string_map_getn>:
 801af08:	b338      	cbz	r0, 801af5a <rcutils_string_map_getn+0x52>
 801af0a:	6800      	ldr	r0, [r0, #0]
 801af0c:	b328      	cbz	r0, 801af5a <rcutils_string_map_getn+0x52>
 801af0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af12:	460e      	mov	r6, r1
 801af14:	b1c1      	cbz	r1, 801af48 <rcutils_string_map_getn+0x40>
 801af16:	e9d0 9800 	ldrd	r9, r8, [r0]
 801af1a:	f1b8 0f00 	cmp.w	r8, #0
 801af1e:	d013      	beq.n	801af48 <rcutils_string_map_getn+0x40>
 801af20:	4617      	mov	r7, r2
 801af22:	2400      	movs	r4, #0
 801af24:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801af28:	4628      	mov	r0, r5
 801af2a:	b155      	cbz	r5, 801af42 <rcutils_string_map_getn+0x3a>
 801af2c:	f7e5 f9d8 	bl	80002e0 <strlen>
 801af30:	42b8      	cmp	r0, r7
 801af32:	4602      	mov	r2, r0
 801af34:	4629      	mov	r1, r5
 801af36:	bf38      	it	cc
 801af38:	463a      	movcc	r2, r7
 801af3a:	4630      	mov	r0, r6
 801af3c:	f002 ff55 	bl	801ddea <strncmp>
 801af40:	b128      	cbz	r0, 801af4e <rcutils_string_map_getn+0x46>
 801af42:	3401      	adds	r4, #1
 801af44:	45a0      	cmp	r8, r4
 801af46:	d1ed      	bne.n	801af24 <rcutils_string_map_getn+0x1c>
 801af48:	2000      	movs	r0, #0
 801af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af4e:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801af52:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801af56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af5a:	4770      	bx	lr

0801af5c <rmw_get_zero_initialized_discovery_options>:
 801af5c:	b510      	push	{r4, lr}
 801af5e:	2220      	movs	r2, #32
 801af60:	4604      	mov	r4, r0
 801af62:	2100      	movs	r1, #0
 801af64:	f002 ff2c 	bl	801ddc0 <memset>
 801af68:	4620      	mov	r0, r4
 801af6a:	bd10      	pop	{r4, pc}

0801af6c <rmw_discovery_options_init>:
 801af6c:	b328      	cbz	r0, 801afba <rmw_discovery_options_init+0x4e>
 801af6e:	b570      	push	{r4, r5, r6, lr}
 801af70:	4604      	mov	r4, r0
 801af72:	4610      	mov	r0, r2
 801af74:	460e      	mov	r6, r1
 801af76:	4615      	mov	r5, r2
 801af78:	f7f5 fc26 	bl	80107c8 <rcutils_allocator_is_valid>
 801af7c:	b1d8      	cbz	r0, 801afb6 <rmw_discovery_options_init+0x4a>
 801af7e:	68a3      	ldr	r3, [r4, #8]
 801af80:	b9cb      	cbnz	r3, 801afb6 <rmw_discovery_options_init+0x4a>
 801af82:	6863      	ldr	r3, [r4, #4]
 801af84:	b9bb      	cbnz	r3, 801afb6 <rmw_discovery_options_init+0x4a>
 801af86:	7823      	ldrb	r3, [r4, #0]
 801af88:	b90b      	cbnz	r3, 801af8e <rmw_discovery_options_init+0x22>
 801af8a:	2302      	movs	r3, #2
 801af8c:	7023      	strb	r3, [r4, #0]
 801af8e:	b186      	cbz	r6, 801afb2 <rmw_discovery_options_init+0x46>
 801af90:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801af94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801af98:	4630      	mov	r0, r6
 801af9a:	4798      	blx	r3
 801af9c:	6060      	str	r0, [r4, #4]
 801af9e:	b170      	cbz	r0, 801afbe <rmw_discovery_options_init+0x52>
 801afa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801afa2:	f104 0c0c 	add.w	ip, r4, #12
 801afa6:	60a6      	str	r6, [r4, #8]
 801afa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801afac:	682b      	ldr	r3, [r5, #0]
 801afae:	f8cc 3000 	str.w	r3, [ip]
 801afb2:	2000      	movs	r0, #0
 801afb4:	bd70      	pop	{r4, r5, r6, pc}
 801afb6:	200b      	movs	r0, #11
 801afb8:	bd70      	pop	{r4, r5, r6, pc}
 801afba:	200b      	movs	r0, #11
 801afbc:	4770      	bx	lr
 801afbe:	200a      	movs	r0, #10
 801afc0:	bd70      	pop	{r4, r5, r6, pc}
 801afc2:	bf00      	nop

0801afc4 <rmw_get_zero_initialized_context>:
 801afc4:	b530      	push	{r4, r5, lr}
 801afc6:	b097      	sub	sp, #92	@ 0x5c
 801afc8:	4604      	mov	r4, r0
 801afca:	4668      	mov	r0, sp
 801afcc:	f7f5 fece 	bl	8010d6c <rmw_get_zero_initialized_init_options>
 801afd0:	2300      	movs	r3, #0
 801afd2:	2200      	movs	r2, #0
 801afd4:	e9c4 2300 	strd	r2, r3, [r4]
 801afd8:	2500      	movs	r5, #0
 801afda:	4669      	mov	r1, sp
 801afdc:	2258      	movs	r2, #88	@ 0x58
 801afde:	f104 0010 	add.w	r0, r4, #16
 801afe2:	60a5      	str	r5, [r4, #8]
 801afe4:	f003 f81d 	bl	801e022 <memcpy>
 801afe8:	4620      	mov	r0, r4
 801afea:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 801afee:	b017      	add	sp, #92	@ 0x5c
 801aff0:	bd30      	pop	{r4, r5, pc}
 801aff2:	bf00      	nop

0801aff4 <rmw_time_equal>:
 801aff4:	b570      	push	{r4, r5, r6, lr}
 801aff6:	b084      	sub	sp, #16
 801aff8:	ac04      	add	r4, sp, #16
 801affa:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801affe:	4925      	ldr	r1, [pc, #148]	@ (801b094 <rmw_time_equal+0xa0>)
 801b000:	9c01      	ldr	r4, [sp, #4]
 801b002:	2202      	movs	r2, #2
 801b004:	4281      	cmp	r1, r0
 801b006:	41a2      	sbcs	r2, r4
 801b008:	d333      	bcc.n	801b072 <rmw_time_equal+0x7e>
 801b00a:	4603      	mov	r3, r0
 801b00c:	4822      	ldr	r0, [pc, #136]	@ (801b098 <rmw_time_equal+0xa4>)
 801b00e:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 801b012:	fba3 3200 	umull	r3, r2, r3, r0
 801b016:	fb00 2204 	mla	r2, r0, r4, r2
 801b01a:	43de      	mvns	r6, r3
 801b01c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b020:	1a84      	subs	r4, r0, r2
 801b022:	428e      	cmp	r6, r1
 801b024:	41ac      	sbcs	r4, r5
 801b026:	d332      	bcc.n	801b08e <rmw_time_equal+0x9a>
 801b028:	eb11 0e03 	adds.w	lr, r1, r3
 801b02c:	eb42 0005 	adc.w	r0, r2, r5
 801b030:	9b08      	ldr	r3, [sp, #32]
 801b032:	4918      	ldr	r1, [pc, #96]	@ (801b094 <rmw_time_equal+0xa0>)
 801b034:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b036:	2202      	movs	r2, #2
 801b038:	4299      	cmp	r1, r3
 801b03a:	41aa      	sbcs	r2, r5
 801b03c:	d31e      	bcc.n	801b07c <rmw_time_equal+0x88>
 801b03e:	4c16      	ldr	r4, [pc, #88]	@ (801b098 <rmw_time_equal+0xa4>)
 801b040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b042:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801b044:	fba3 3104 	umull	r3, r1, r3, r4
 801b048:	fb04 1105 	mla	r1, r4, r5, r1
 801b04c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801b050:	43dd      	mvns	r5, r3
 801b052:	ebac 0401 	sub.w	r4, ip, r1
 801b056:	4295      	cmp	r5, r2
 801b058:	41b4      	sbcs	r4, r6
 801b05a:	d314      	bcc.n	801b086 <rmw_time_equal+0x92>
 801b05c:	18d2      	adds	r2, r2, r3
 801b05e:	eb41 0306 	adc.w	r3, r1, r6
 801b062:	4283      	cmp	r3, r0
 801b064:	bf08      	it	eq
 801b066:	4572      	cmpeq	r2, lr
 801b068:	bf0c      	ite	eq
 801b06a:	2001      	moveq	r0, #1
 801b06c:	2000      	movne	r0, #0
 801b06e:	b004      	add	sp, #16
 801b070:	bd70      	pop	{r4, r5, r6, pc}
 801b072:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801b076:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b07a:	e7d9      	b.n	801b030 <rmw_time_equal+0x3c>
 801b07c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b080:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801b084:	e7ed      	b.n	801b062 <rmw_time_equal+0x6e>
 801b086:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b08a:	4663      	mov	r3, ip
 801b08c:	e7e9      	b.n	801b062 <rmw_time_equal+0x6e>
 801b08e:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801b092:	e7cd      	b.n	801b030 <rmw_time_equal+0x3c>
 801b094:	25c17d04 	.word	0x25c17d04
 801b098:	3b9aca00 	.word	0x3b9aca00

0801b09c <rmw_time_total_nsec>:
 801b09c:	b430      	push	{r4, r5}
 801b09e:	b084      	sub	sp, #16
 801b0a0:	ac04      	add	r4, sp, #16
 801b0a2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801b0a6:	4914      	ldr	r1, [pc, #80]	@ (801b0f8 <rmw_time_total_nsec+0x5c>)
 801b0a8:	9c01      	ldr	r4, [sp, #4]
 801b0aa:	2202      	movs	r2, #2
 801b0ac:	4281      	cmp	r1, r0
 801b0ae:	41a2      	sbcs	r2, r4
 801b0b0:	d315      	bcc.n	801b0de <rmw_time_total_nsec+0x42>
 801b0b2:	4912      	ldr	r1, [pc, #72]	@ (801b0fc <rmw_time_total_nsec+0x60>)
 801b0b4:	4603      	mov	r3, r0
 801b0b6:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 801b0ba:	fba3 3201 	umull	r3, r2, r3, r1
 801b0be:	fb01 2204 	mla	r2, r1, r4, r2
 801b0c2:	ea6f 0c03 	mvn.w	ip, r3
 801b0c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b0ca:	1a8c      	subs	r4, r1, r2
 801b0cc:	4584      	cmp	ip, r0
 801b0ce:	41ac      	sbcs	r4, r5
 801b0d0:	d30c      	bcc.n	801b0ec <rmw_time_total_nsec+0x50>
 801b0d2:	1818      	adds	r0, r3, r0
 801b0d4:	eb42 0105 	adc.w	r1, r2, r5
 801b0d8:	b004      	add	sp, #16
 801b0da:	bc30      	pop	{r4, r5}
 801b0dc:	4770      	bx	lr
 801b0de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b0e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b0e6:	b004      	add	sp, #16
 801b0e8:	bc30      	pop	{r4, r5}
 801b0ea:	4770      	bx	lr
 801b0ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b0f0:	b004      	add	sp, #16
 801b0f2:	bc30      	pop	{r4, r5}
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	25c17d04 	.word	0x25c17d04
 801b0fc:	3b9aca00 	.word	0x3b9aca00

0801b100 <rmw_validate_full_topic_name>:
 801b100:	2800      	cmp	r0, #0
 801b102:	d049      	beq.n	801b198 <rmw_validate_full_topic_name+0x98>
 801b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b108:	460e      	mov	r6, r1
 801b10a:	2900      	cmp	r1, #0
 801b10c:	d056      	beq.n	801b1bc <rmw_validate_full_topic_name+0xbc>
 801b10e:	4615      	mov	r5, r2
 801b110:	4604      	mov	r4, r0
 801b112:	f7e5 f8e5 	bl	80002e0 <strlen>
 801b116:	b150      	cbz	r0, 801b12e <rmw_validate_full_topic_name+0x2e>
 801b118:	7823      	ldrb	r3, [r4, #0]
 801b11a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b11c:	d00c      	beq.n	801b138 <rmw_validate_full_topic_name+0x38>
 801b11e:	2302      	movs	r3, #2
 801b120:	6033      	str	r3, [r6, #0]
 801b122:	b10d      	cbz	r5, 801b128 <rmw_validate_full_topic_name+0x28>
 801b124:	2300      	movs	r3, #0
 801b126:	602b      	str	r3, [r5, #0]
 801b128:	2000      	movs	r0, #0
 801b12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b12e:	2301      	movs	r3, #1
 801b130:	6033      	str	r3, [r6, #0]
 801b132:	2d00      	cmp	r5, #0
 801b134:	d1f6      	bne.n	801b124 <rmw_validate_full_topic_name+0x24>
 801b136:	e7f7      	b.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b138:	1e47      	subs	r7, r0, #1
 801b13a:	5de3      	ldrb	r3, [r4, r7]
 801b13c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b13e:	d03f      	beq.n	801b1c0 <rmw_validate_full_topic_name+0xc0>
 801b140:	1e63      	subs	r3, r4, #1
 801b142:	4621      	mov	r1, r4
 801b144:	eb03 0e00 	add.w	lr, r3, r0
 801b148:	469c      	mov	ip, r3
 801b14a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801b14e:	2a5f      	cmp	r2, #95	@ 0x5f
 801b150:	d006      	beq.n	801b160 <rmw_validate_full_topic_name+0x60>
 801b152:	d823      	bhi.n	801b19c <rmw_validate_full_topic_name+0x9c>
 801b154:	2a39      	cmp	r2, #57	@ 0x39
 801b156:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801b15a:	d82b      	bhi.n	801b1b4 <rmw_validate_full_topic_name+0xb4>
 801b15c:	2a2e      	cmp	r2, #46	@ 0x2e
 801b15e:	d920      	bls.n	801b1a2 <rmw_validate_full_topic_name+0xa2>
 801b160:	4573      	cmp	r3, lr
 801b162:	d1f1      	bne.n	801b148 <rmw_validate_full_topic_name+0x48>
 801b164:	4c21      	ldr	r4, [pc, #132]	@ (801b1ec <rmw_validate_full_topic_name+0xec>)
 801b166:	2300      	movs	r3, #0
 801b168:	e003      	b.n	801b172 <rmw_validate_full_topic_name+0x72>
 801b16a:	4298      	cmp	r0, r3
 801b16c:	f101 0101 	add.w	r1, r1, #1
 801b170:	d02c      	beq.n	801b1cc <rmw_validate_full_topic_name+0xcc>
 801b172:	429f      	cmp	r7, r3
 801b174:	f103 0301 	add.w	r3, r3, #1
 801b178:	d0f7      	beq.n	801b16a <rmw_validate_full_topic_name+0x6a>
 801b17a:	780a      	ldrb	r2, [r1, #0]
 801b17c:	2a2f      	cmp	r2, #47	@ 0x2f
 801b17e:	d1f4      	bne.n	801b16a <rmw_validate_full_topic_name+0x6a>
 801b180:	784a      	ldrb	r2, [r1, #1]
 801b182:	2a2f      	cmp	r2, #47	@ 0x2f
 801b184:	d02d      	beq.n	801b1e2 <rmw_validate_full_topic_name+0xe2>
 801b186:	5ca2      	ldrb	r2, [r4, r2]
 801b188:	0752      	lsls	r2, r2, #29
 801b18a:	d5ee      	bpl.n	801b16a <rmw_validate_full_topic_name+0x6a>
 801b18c:	2206      	movs	r2, #6
 801b18e:	6032      	str	r2, [r6, #0]
 801b190:	2d00      	cmp	r5, #0
 801b192:	d0c9      	beq.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b194:	602b      	str	r3, [r5, #0]
 801b196:	e7c7      	b.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b198:	200b      	movs	r0, #11
 801b19a:	4770      	bx	lr
 801b19c:	3a61      	subs	r2, #97	@ 0x61
 801b19e:	2a19      	cmp	r2, #25
 801b1a0:	d9de      	bls.n	801b160 <rmw_validate_full_topic_name+0x60>
 801b1a2:	2304      	movs	r3, #4
 801b1a4:	6033      	str	r3, [r6, #0]
 801b1a6:	2d00      	cmp	r5, #0
 801b1a8:	d0be      	beq.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1aa:	f1c4 0401 	rsb	r4, r4, #1
 801b1ae:	4464      	add	r4, ip
 801b1b0:	602c      	str	r4, [r5, #0]
 801b1b2:	e7b9      	b.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1b4:	f1b8 0f19 	cmp.w	r8, #25
 801b1b8:	d9d2      	bls.n	801b160 <rmw_validate_full_topic_name+0x60>
 801b1ba:	e7f2      	b.n	801b1a2 <rmw_validate_full_topic_name+0xa2>
 801b1bc:	200b      	movs	r0, #11
 801b1be:	e7b4      	b.n	801b12a <rmw_validate_full_topic_name+0x2a>
 801b1c0:	2303      	movs	r3, #3
 801b1c2:	6033      	str	r3, [r6, #0]
 801b1c4:	2d00      	cmp	r5, #0
 801b1c6:	d0af      	beq.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1c8:	602f      	str	r7, [r5, #0]
 801b1ca:	e7ad      	b.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1cc:	28f7      	cmp	r0, #247	@ 0xf7
 801b1ce:	d802      	bhi.n	801b1d6 <rmw_validate_full_topic_name+0xd6>
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	6033      	str	r3, [r6, #0]
 801b1d4:	e7a8      	b.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1d6:	2307      	movs	r3, #7
 801b1d8:	6033      	str	r3, [r6, #0]
 801b1da:	2d00      	cmp	r5, #0
 801b1dc:	d0a4      	beq.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1de:	23f6      	movs	r3, #246	@ 0xf6
 801b1e0:	e7d8      	b.n	801b194 <rmw_validate_full_topic_name+0x94>
 801b1e2:	2205      	movs	r2, #5
 801b1e4:	6032      	str	r2, [r6, #0]
 801b1e6:	2d00      	cmp	r5, #0
 801b1e8:	d1d4      	bne.n	801b194 <rmw_validate_full_topic_name+0x94>
 801b1ea:	e79d      	b.n	801b128 <rmw_validate_full_topic_name+0x28>
 801b1ec:	08021752 	.word	0x08021752

0801b1f0 <on_status>:
 801b1f0:	b082      	sub	sp, #8
 801b1f2:	b002      	add	sp, #8
 801b1f4:	4770      	bx	lr
 801b1f6:	bf00      	nop

0801b1f8 <on_topic>:
 801b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fc:	4a22      	ldr	r2, [pc, #136]	@ (801b288 <on_topic+0x90>)
 801b1fe:	b094      	sub	sp, #80	@ 0x50
 801b200:	6812      	ldr	r2, [r2, #0]
 801b202:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b204:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b208:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b20c:	b3c2      	cbz	r2, 801b280 <on_topic+0x88>
 801b20e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b212:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b216:	e001      	b.n	801b21c <on_topic+0x24>
 801b218:	6852      	ldr	r2, [r2, #4]
 801b21a:	b38a      	cbz	r2, 801b280 <on_topic+0x88>
 801b21c:	6894      	ldr	r4, [r2, #8]
 801b21e:	8aa3      	ldrh	r3, [r4, #20]
 801b220:	428b      	cmp	r3, r1
 801b222:	d1f9      	bne.n	801b218 <on_topic+0x20>
 801b224:	7da3      	ldrb	r3, [r4, #22]
 801b226:	4283      	cmp	r3, r0
 801b228:	d1f6      	bne.n	801b218 <on_topic+0x20>
 801b22a:	2248      	movs	r2, #72	@ 0x48
 801b22c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b230:	4668      	mov	r0, sp
 801b232:	f002 fef6 	bl	801e022 <memcpy>
 801b236:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b23a:	cb0c      	ldmia	r3, {r2, r3}
 801b23c:	4620      	mov	r0, r4
 801b23e:	f7f7 f807 	bl	8012250 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b242:	4607      	mov	r7, r0
 801b244:	b1e0      	cbz	r0, 801b280 <on_topic+0x88>
 801b246:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b24a:	4632      	mov	r2, r6
 801b24c:	4628      	mov	r0, r5
 801b24e:	f108 0110 	add.w	r1, r8, #16
 801b252:	f7f7 ffb9 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801b256:	b930      	cbnz	r0, 801b266 <on_topic+0x6e>
 801b258:	480c      	ldr	r0, [pc, #48]	@ (801b28c <on_topic+0x94>)
 801b25a:	4639      	mov	r1, r7
 801b25c:	b014      	add	sp, #80	@ 0x50
 801b25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b262:	f000 b8bd 	b.w	801b3e0 <put_memory>
 801b266:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b26a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b26e:	f7f6 fded 	bl	8011e4c <rmw_uros_epoch_nanos>
 801b272:	2305      	movs	r3, #5
 801b274:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b278:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b27c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b280:	b014      	add	sp, #80	@ 0x50
 801b282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b286:	bf00      	nop
 801b288:	2001d618 	.word	0x2001d618
 801b28c:	2001ce68 	.word	0x2001ce68

0801b290 <on_request>:
 801b290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b294:	4823      	ldr	r0, [pc, #140]	@ (801b324 <on_request+0x94>)
 801b296:	b094      	sub	sp, #80	@ 0x50
 801b298:	6800      	ldr	r0, [r0, #0]
 801b29a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b29c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b2a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b2a2:	2800      	cmp	r0, #0
 801b2a4:	d03b      	beq.n	801b31e <on_request+0x8e>
 801b2a6:	461d      	mov	r5, r3
 801b2a8:	e001      	b.n	801b2ae <on_request+0x1e>
 801b2aa:	6840      	ldr	r0, [r0, #4]
 801b2ac:	b3b8      	cbz	r0, 801b31e <on_request+0x8e>
 801b2ae:	6884      	ldr	r4, [r0, #8]
 801b2b0:	8b21      	ldrh	r1, [r4, #24]
 801b2b2:	4291      	cmp	r1, r2
 801b2b4:	d1f9      	bne.n	801b2aa <on_request+0x1a>
 801b2b6:	2248      	movs	r2, #72	@ 0x48
 801b2b8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b2bc:	4668      	mov	r0, sp
 801b2be:	f002 feb0 	bl	801e022 <memcpy>
 801b2c2:	f104 0320 	add.w	r3, r4, #32
 801b2c6:	cb0c      	ldmia	r3, {r2, r3}
 801b2c8:	4620      	mov	r0, r4
 801b2ca:	f7f6 ffc1 	bl	8012250 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b2ce:	4680      	mov	r8, r0
 801b2d0:	b328      	cbz	r0, 801b31e <on_request+0x8e>
 801b2d2:	4638      	mov	r0, r7
 801b2d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b2d8:	4632      	mov	r2, r6
 801b2da:	f107 0110 	add.w	r1, r7, #16
 801b2de:	f7f7 ff73 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801b2e2:	b930      	cbnz	r0, 801b2f2 <on_request+0x62>
 801b2e4:	4810      	ldr	r0, [pc, #64]	@ (801b328 <on_request+0x98>)
 801b2e6:	4641      	mov	r1, r8
 801b2e8:	b014      	add	sp, #80	@ 0x50
 801b2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ee:	f000 b877 	b.w	801b3e0 <put_memory>
 801b2f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2f4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b2f8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b2fc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b300:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b304:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b308:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b30c:	f7f6 fd9e 	bl	8011e4c <rmw_uros_epoch_nanos>
 801b310:	2303      	movs	r3, #3
 801b312:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b316:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b31a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b31e:	b014      	add	sp, #80	@ 0x50
 801b320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b324:	2001d1d0 	.word	0x2001d1d0
 801b328:	2001ce68 	.word	0x2001ce68

0801b32c <on_reply>:
 801b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b330:	4821      	ldr	r0, [pc, #132]	@ (801b3b8 <on_reply+0x8c>)
 801b332:	b094      	sub	sp, #80	@ 0x50
 801b334:	6800      	ldr	r0, [r0, #0]
 801b336:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b338:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b33c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b33e:	b3b8      	cbz	r0, 801b3b0 <on_reply+0x84>
 801b340:	461d      	mov	r5, r3
 801b342:	e001      	b.n	801b348 <on_reply+0x1c>
 801b344:	6840      	ldr	r0, [r0, #4]
 801b346:	b398      	cbz	r0, 801b3b0 <on_reply+0x84>
 801b348:	6884      	ldr	r4, [r0, #8]
 801b34a:	8b21      	ldrh	r1, [r4, #24]
 801b34c:	4291      	cmp	r1, r2
 801b34e:	d1f9      	bne.n	801b344 <on_reply+0x18>
 801b350:	2248      	movs	r2, #72	@ 0x48
 801b352:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b356:	4668      	mov	r0, sp
 801b358:	f002 fe63 	bl	801e022 <memcpy>
 801b35c:	f104 0320 	add.w	r3, r4, #32
 801b360:	cb0c      	ldmia	r3, {r2, r3}
 801b362:	4620      	mov	r0, r4
 801b364:	f7f6 ff74 	bl	8012250 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b368:	4680      	mov	r8, r0
 801b36a:	b308      	cbz	r0, 801b3b0 <on_reply+0x84>
 801b36c:	4638      	mov	r0, r7
 801b36e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b372:	4632      	mov	r2, r6
 801b374:	f107 0110 	add.w	r1, r7, #16
 801b378:	f7f7 ff26 	bl	80131c8 <ucdr_deserialize_array_uint8_t>
 801b37c:	b930      	cbnz	r0, 801b38c <on_reply+0x60>
 801b37e:	480f      	ldr	r0, [pc, #60]	@ (801b3bc <on_reply+0x90>)
 801b380:	4641      	mov	r1, r8
 801b382:	b014      	add	sp, #80	@ 0x50
 801b384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b388:	f000 b82a 	b.w	801b3e0 <put_memory>
 801b38c:	2200      	movs	r2, #0
 801b38e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b392:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b396:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b39a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b39e:	f7f6 fd55 	bl	8011e4c <rmw_uros_epoch_nanos>
 801b3a2:	2304      	movs	r3, #4
 801b3a4:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b3a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b3ac:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b3b0:	b014      	add	sp, #80	@ 0x50
 801b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3b6:	bf00      	nop
 801b3b8:	2001d0f8 	.word	0x2001d0f8
 801b3bc:	2001ce68 	.word	0x2001ce68

0801b3c0 <get_memory>:
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	6840      	ldr	r0, [r0, #4]
 801b3c4:	b158      	cbz	r0, 801b3de <get_memory+0x1e>
 801b3c6:	6842      	ldr	r2, [r0, #4]
 801b3c8:	605a      	str	r2, [r3, #4]
 801b3ca:	b10a      	cbz	r2, 801b3d0 <get_memory+0x10>
 801b3cc:	2100      	movs	r1, #0
 801b3ce:	6011      	str	r1, [r2, #0]
 801b3d0:	681a      	ldr	r2, [r3, #0]
 801b3d2:	6042      	str	r2, [r0, #4]
 801b3d4:	b102      	cbz	r2, 801b3d8 <get_memory+0x18>
 801b3d6:	6010      	str	r0, [r2, #0]
 801b3d8:	2200      	movs	r2, #0
 801b3da:	6002      	str	r2, [r0, #0]
 801b3dc:	6018      	str	r0, [r3, #0]
 801b3de:	4770      	bx	lr

0801b3e0 <put_memory>:
 801b3e0:	680b      	ldr	r3, [r1, #0]
 801b3e2:	b10b      	cbz	r3, 801b3e8 <put_memory+0x8>
 801b3e4:	684a      	ldr	r2, [r1, #4]
 801b3e6:	605a      	str	r2, [r3, #4]
 801b3e8:	684a      	ldr	r2, [r1, #4]
 801b3ea:	b102      	cbz	r2, 801b3ee <put_memory+0xe>
 801b3ec:	6013      	str	r3, [r2, #0]
 801b3ee:	6803      	ldr	r3, [r0, #0]
 801b3f0:	428b      	cmp	r3, r1
 801b3f2:	6843      	ldr	r3, [r0, #4]
 801b3f4:	bf08      	it	eq
 801b3f6:	6002      	streq	r2, [r0, #0]
 801b3f8:	604b      	str	r3, [r1, #4]
 801b3fa:	b103      	cbz	r3, 801b3fe <put_memory+0x1e>
 801b3fc:	6019      	str	r1, [r3, #0]
 801b3fe:	2300      	movs	r3, #0
 801b400:	600b      	str	r3, [r1, #0]
 801b402:	6041      	str	r1, [r0, #4]
 801b404:	4770      	bx	lr
 801b406:	bf00      	nop

0801b408 <rmw_destroy_client>:
 801b408:	b570      	push	{r4, r5, r6, lr}
 801b40a:	b128      	cbz	r0, 801b418 <rmw_destroy_client+0x10>
 801b40c:	4604      	mov	r4, r0
 801b40e:	6800      	ldr	r0, [r0, #0]
 801b410:	460d      	mov	r5, r1
 801b412:	f7f7 f8a1 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 801b416:	b910      	cbnz	r0, 801b41e <rmw_destroy_client+0x16>
 801b418:	2401      	movs	r4, #1
 801b41a:	4620      	mov	r0, r4
 801b41c:	bd70      	pop	{r4, r5, r6, pc}
 801b41e:	6863      	ldr	r3, [r4, #4]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d0f9      	beq.n	801b418 <rmw_destroy_client+0x10>
 801b424:	2d00      	cmp	r5, #0
 801b426:	d0f7      	beq.n	801b418 <rmw_destroy_client+0x10>
 801b428:	6828      	ldr	r0, [r5, #0]
 801b42a:	f7f7 f895 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 801b42e:	2800      	cmp	r0, #0
 801b430:	d0f2      	beq.n	801b418 <rmw_destroy_client+0x10>
 801b432:	686e      	ldr	r6, [r5, #4]
 801b434:	2e00      	cmp	r6, #0
 801b436:	d0ef      	beq.n	801b418 <rmw_destroy_client+0x10>
 801b438:	6864      	ldr	r4, [r4, #4]
 801b43a:	6932      	ldr	r2, [r6, #16]
 801b43c:	6920      	ldr	r0, [r4, #16]
 801b43e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b442:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b446:	6819      	ldr	r1, [r3, #0]
 801b448:	f7f9 fe10 	bl	801506c <uxr_buffer_cancel_data>
 801b44c:	4602      	mov	r2, r0
 801b44e:	6920      	ldr	r0, [r4, #16]
 801b450:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b454:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b458:	f7f6 fff8 	bl	801244c <run_xrce_session>
 801b45c:	6920      	ldr	r0, [r4, #16]
 801b45e:	6932      	ldr	r2, [r6, #16]
 801b460:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b464:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b468:	6819      	ldr	r1, [r3, #0]
 801b46a:	f7f9 faff 	bl	8014a6c <uxr_buffer_delete_entity>
 801b46e:	4602      	mov	r2, r0
 801b470:	6920      	ldr	r0, [r4, #16]
 801b472:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b476:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b47a:	f7f6 ffe7 	bl	801244c <run_xrce_session>
 801b47e:	f080 0401 	eor.w	r4, r0, #1
 801b482:	b2e4      	uxtb	r4, r4
 801b484:	4628      	mov	r0, r5
 801b486:	0064      	lsls	r4, r4, #1
 801b488:	f7f6 fec0 	bl	801220c <rmw_uxrce_fini_client_memory>
 801b48c:	e7c5      	b.n	801b41a <rmw_destroy_client+0x12>
 801b48e:	bf00      	nop

0801b490 <rmw_get_gid_for_client>:
 801b490:	b1a8      	cbz	r0, 801b4be <rmw_get_gid_for_client+0x2e>
 801b492:	b538      	push	{r3, r4, r5, lr}
 801b494:	460c      	mov	r4, r1
 801b496:	b1a1      	cbz	r1, 801b4c2 <rmw_get_gid_for_client+0x32>
 801b498:	4605      	mov	r5, r0
 801b49a:	6800      	ldr	r0, [r0, #0]
 801b49c:	b120      	cbz	r0, 801b4a8 <rmw_get_gid_for_client+0x18>
 801b49e:	4b0a      	ldr	r3, [pc, #40]	@ (801b4c8 <rmw_get_gid_for_client+0x38>)
 801b4a0:	6819      	ldr	r1, [r3, #0]
 801b4a2:	f7e4 febd 	bl	8000220 <strcmp>
 801b4a6:	b940      	cbnz	r0, 801b4ba <rmw_get_gid_for_client+0x2a>
 801b4a8:	686b      	ldr	r3, [r5, #4]
 801b4aa:	2000      	movs	r0, #0
 801b4ac:	6060      	str	r0, [r4, #4]
 801b4ae:	60a0      	str	r0, [r4, #8]
 801b4b0:	60e0      	str	r0, [r4, #12]
 801b4b2:	6120      	str	r0, [r4, #16]
 801b4b4:	691b      	ldr	r3, [r3, #16]
 801b4b6:	6063      	str	r3, [r4, #4]
 801b4b8:	bd38      	pop	{r3, r4, r5, pc}
 801b4ba:	200c      	movs	r0, #12
 801b4bc:	bd38      	pop	{r3, r4, r5, pc}
 801b4be:	200b      	movs	r0, #11
 801b4c0:	4770      	bx	lr
 801b4c2:	200b      	movs	r0, #11
 801b4c4:	bd38      	pop	{r3, r4, r5, pc}
 801b4c6:	bf00      	nop
 801b4c8:	0802132c 	.word	0x0802132c

0801b4cc <rmw_get_implementation_identifier>:
 801b4cc:	4b01      	ldr	r3, [pc, #4]	@ (801b4d4 <rmw_get_implementation_identifier+0x8>)
 801b4ce:	6818      	ldr	r0, [r3, #0]
 801b4d0:	4770      	bx	lr
 801b4d2:	bf00      	nop
 801b4d4:	0802132c 	.word	0x0802132c

0801b4d8 <rmw_create_guard_condition>:
 801b4d8:	b538      	push	{r3, r4, r5, lr}
 801b4da:	4605      	mov	r5, r0
 801b4dc:	4807      	ldr	r0, [pc, #28]	@ (801b4fc <rmw_create_guard_condition+0x24>)
 801b4de:	f7ff ff6f 	bl	801b3c0 <get_memory>
 801b4e2:	b148      	cbz	r0, 801b4f8 <rmw_create_guard_condition+0x20>
 801b4e4:	6884      	ldr	r4, [r0, #8]
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	7423      	strb	r3, [r4, #16]
 801b4ea:	61e5      	str	r5, [r4, #28]
 801b4ec:	f7ff ffee 	bl	801b4cc <rmw_get_implementation_identifier>
 801b4f0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b4f4:	f104 0014 	add.w	r0, r4, #20
 801b4f8:	bd38      	pop	{r3, r4, r5, pc}
 801b4fa:	bf00      	nop
 801b4fc:	2001ac40 	.word	0x2001ac40

0801b500 <rmw_destroy_guard_condition>:
 801b500:	b508      	push	{r3, lr}
 801b502:	4b08      	ldr	r3, [pc, #32]	@ (801b524 <rmw_destroy_guard_condition+0x24>)
 801b504:	6819      	ldr	r1, [r3, #0]
 801b506:	b911      	cbnz	r1, 801b50e <rmw_destroy_guard_condition+0xe>
 801b508:	e00a      	b.n	801b520 <rmw_destroy_guard_condition+0x20>
 801b50a:	6849      	ldr	r1, [r1, #4]
 801b50c:	b141      	cbz	r1, 801b520 <rmw_destroy_guard_condition+0x20>
 801b50e:	688b      	ldr	r3, [r1, #8]
 801b510:	3314      	adds	r3, #20
 801b512:	4298      	cmp	r0, r3
 801b514:	d1f9      	bne.n	801b50a <rmw_destroy_guard_condition+0xa>
 801b516:	4803      	ldr	r0, [pc, #12]	@ (801b524 <rmw_destroy_guard_condition+0x24>)
 801b518:	f7ff ff62 	bl	801b3e0 <put_memory>
 801b51c:	2000      	movs	r0, #0
 801b51e:	bd08      	pop	{r3, pc}
 801b520:	2001      	movs	r0, #1
 801b522:	bd08      	pop	{r3, pc}
 801b524:	2001ac40 	.word	0x2001ac40

0801b528 <create_topic>:
 801b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b52c:	4604      	mov	r4, r0
 801b52e:	b084      	sub	sp, #16
 801b530:	4824      	ldr	r0, [pc, #144]	@ (801b5c4 <create_topic+0x9c>)
 801b532:	460f      	mov	r7, r1
 801b534:	4616      	mov	r6, r2
 801b536:	f7ff ff43 	bl	801b3c0 <get_memory>
 801b53a:	2800      	cmp	r0, #0
 801b53c:	d03c      	beq.n	801b5b8 <create_topic+0x90>
 801b53e:	6923      	ldr	r3, [r4, #16]
 801b540:	6885      	ldr	r5, [r0, #8]
 801b542:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801b5cc <create_topic+0xa4>
 801b546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b54a:	e9c5 6405 	strd	r6, r4, [r5, #20]
 801b54e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801b552:	1c42      	adds	r2, r0, #1
 801b554:	2102      	movs	r1, #2
 801b556:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801b55a:	f7f9 fd21 	bl	8014fa0 <uxr_object_id>
 801b55e:	223c      	movs	r2, #60	@ 0x3c
 801b560:	6128      	str	r0, [r5, #16]
 801b562:	4641      	mov	r1, r8
 801b564:	4638      	mov	r0, r7
 801b566:	f7f6 ffdd 	bl	8012524 <generate_topic_name>
 801b56a:	b310      	cbz	r0, 801b5b2 <create_topic+0x8a>
 801b56c:	4f16      	ldr	r7, [pc, #88]	@ (801b5c8 <create_topic+0xa0>)
 801b56e:	4630      	mov	r0, r6
 801b570:	2264      	movs	r2, #100	@ 0x64
 801b572:	4639      	mov	r1, r7
 801b574:	f7f6 ffa6 	bl	80124c4 <generate_type_name>
 801b578:	b1d8      	cbz	r0, 801b5b2 <create_topic+0x8a>
 801b57a:	6920      	ldr	r0, [r4, #16]
 801b57c:	2306      	movs	r3, #6
 801b57e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801b582:	f8cd 8000 	str.w	r8, [sp]
 801b586:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801b58a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b58e:	6811      	ldr	r1, [r2, #0]
 801b590:	6963      	ldr	r3, [r4, #20]
 801b592:	692a      	ldr	r2, [r5, #16]
 801b594:	f7f9 fae6 	bl	8014b64 <uxr_buffer_create_topic_bin>
 801b598:	4602      	mov	r2, r0
 801b59a:	6920      	ldr	r0, [r4, #16]
 801b59c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801b5a0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801b5a4:	f7f6 ff52 	bl	801244c <run_xrce_session>
 801b5a8:	b118      	cbz	r0, 801b5b2 <create_topic+0x8a>
 801b5aa:	4628      	mov	r0, r5
 801b5ac:	b004      	add	sp, #16
 801b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5b2:	4628      	mov	r0, r5
 801b5b4:	f7f6 fe40 	bl	8012238 <rmw_uxrce_fini_topic_memory>
 801b5b8:	2500      	movs	r5, #0
 801b5ba:	4628      	mov	r0, r5
 801b5bc:	b004      	add	sp, #16
 801b5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5c2:	bf00      	nop
 801b5c4:	2001d01c 	.word	0x2001d01c
 801b5c8:	2001f5e8 	.word	0x2001f5e8
 801b5cc:	2001f64c 	.word	0x2001f64c

0801b5d0 <destroy_topic>:
 801b5d0:	b538      	push	{r3, r4, r5, lr}
 801b5d2:	6984      	ldr	r4, [r0, #24]
 801b5d4:	b1d4      	cbz	r4, 801b60c <destroy_topic+0x3c>
 801b5d6:	4605      	mov	r5, r0
 801b5d8:	6920      	ldr	r0, [r4, #16]
 801b5da:	692a      	ldr	r2, [r5, #16]
 801b5dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801b5e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b5e4:	6819      	ldr	r1, [r3, #0]
 801b5e6:	f7f9 fa41 	bl	8014a6c <uxr_buffer_delete_entity>
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	6920      	ldr	r0, [r4, #16]
 801b5ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801b5f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801b5f6:	f7f6 ff29 	bl	801244c <run_xrce_session>
 801b5fa:	f080 0401 	eor.w	r4, r0, #1
 801b5fe:	b2e4      	uxtb	r4, r4
 801b600:	4628      	mov	r0, r5
 801b602:	0064      	lsls	r4, r4, #1
 801b604:	f7f6 fe18 	bl	8012238 <rmw_uxrce_fini_topic_memory>
 801b608:	4620      	mov	r0, r4
 801b60a:	bd38      	pop	{r3, r4, r5, pc}
 801b60c:	2401      	movs	r4, #1
 801b60e:	4620      	mov	r0, r4
 801b610:	bd38      	pop	{r3, r4, r5, pc}
 801b612:	bf00      	nop

0801b614 <rmw_send_request>:
 801b614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b618:	4604      	mov	r4, r0
 801b61a:	6800      	ldr	r0, [r0, #0]
 801b61c:	b08a      	sub	sp, #40	@ 0x28
 801b61e:	460e      	mov	r6, r1
 801b620:	4615      	mov	r5, r2
 801b622:	b128      	cbz	r0, 801b630 <rmw_send_request+0x1c>
 801b624:	4b1e      	ldr	r3, [pc, #120]	@ (801b6a0 <rmw_send_request+0x8c>)
 801b626:	6819      	ldr	r1, [r3, #0]
 801b628:	f7e4 fdfa 	bl	8000220 <strcmp>
 801b62c:	2800      	cmp	r0, #0
 801b62e:	d133      	bne.n	801b698 <rmw_send_request+0x84>
 801b630:	6864      	ldr	r4, [r4, #4]
 801b632:	6963      	ldr	r3, [r4, #20]
 801b634:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801b636:	689b      	ldr	r3, [r3, #8]
 801b638:	4798      	blx	r3
 801b63a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b63e:	4630      	mov	r0, r6
 801b640:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b644:	4798      	blx	r3
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	9000      	str	r0, [sp, #0]
 801b64a:	6922      	ldr	r2, [r4, #16]
 801b64c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801b64e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801b652:	ab02      	add	r3, sp, #8
 801b654:	f7fb fd36 	bl	80170c4 <uxr_prepare_output_stream>
 801b658:	2300      	movs	r3, #0
 801b65a:	6028      	str	r0, [r5, #0]
 801b65c:	606b      	str	r3, [r5, #4]
 801b65e:	b190      	cbz	r0, 801b686 <rmw_send_request+0x72>
 801b660:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b664:	a902      	add	r1, sp, #8
 801b666:	4630      	mov	r0, r6
 801b668:	4798      	blx	r3
 801b66a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801b66e:	6938      	ldr	r0, [r7, #16]
 801b670:	2b01      	cmp	r3, #1
 801b672:	d00c      	beq.n	801b68e <rmw_send_request+0x7a>
 801b674:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801b676:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b67a:	f7fa fa8d 	bl	8015b98 <uxr_run_session_until_confirm_delivery>
 801b67e:	2000      	movs	r0, #0
 801b680:	b00a      	add	sp, #40	@ 0x28
 801b682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b686:	2001      	movs	r0, #1
 801b688:	b00a      	add	sp, #40	@ 0x28
 801b68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b68e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b692:	f7f9 fee9 	bl	8015468 <uxr_flash_output_streams>
 801b696:	e7f2      	b.n	801b67e <rmw_send_request+0x6a>
 801b698:	200c      	movs	r0, #12
 801b69a:	b00a      	add	sp, #40	@ 0x28
 801b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6a0:	0802132c 	.word	0x0802132c

0801b6a4 <rmw_take_request>:
 801b6a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6a8:	4605      	mov	r5, r0
 801b6aa:	6800      	ldr	r0, [r0, #0]
 801b6ac:	b089      	sub	sp, #36	@ 0x24
 801b6ae:	460c      	mov	r4, r1
 801b6b0:	4690      	mov	r8, r2
 801b6b2:	461e      	mov	r6, r3
 801b6b4:	b128      	cbz	r0, 801b6c2 <rmw_take_request+0x1e>
 801b6b6:	4b28      	ldr	r3, [pc, #160]	@ (801b758 <rmw_take_request+0xb4>)
 801b6b8:	6819      	ldr	r1, [r3, #0]
 801b6ba:	f7e4 fdb1 	bl	8000220 <strcmp>
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d146      	bne.n	801b750 <rmw_take_request+0xac>
 801b6c2:	b10e      	cbz	r6, 801b6c8 <rmw_take_request+0x24>
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	7033      	strb	r3, [r6, #0]
 801b6c8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801b6cc:	f7f6 fe40 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 801b6d0:	4648      	mov	r0, r9
 801b6d2:	f7f6 fe15 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b6d6:	4607      	mov	r7, r0
 801b6d8:	b3b0      	cbz	r0, 801b748 <rmw_take_request+0xa4>
 801b6da:	6885      	ldr	r5, [r0, #8]
 801b6dc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801b6e0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801b6e4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801b6e8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801b6ec:	7423      	strb	r3, [r4, #16]
 801b6ee:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801b6f2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801b6f6:	74e2      	strb	r2, [r4, #19]
 801b6f8:	f8a4 3011 	strh.w	r3, [r4, #17]
 801b6fc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801b700:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801b704:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801b708:	61e1      	str	r1, [r4, #28]
 801b70a:	6162      	str	r2, [r4, #20]
 801b70c:	61a3      	str	r3, [r4, #24]
 801b70e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801b712:	689b      	ldr	r3, [r3, #8]
 801b714:	4798      	blx	r3
 801b716:	6844      	ldr	r4, [r0, #4]
 801b718:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801b71c:	f105 0110 	add.w	r1, r5, #16
 801b720:	4668      	mov	r0, sp
 801b722:	f7f2 ff67 	bl	800e5f4 <ucdr_init_buffer>
 801b726:	68e3      	ldr	r3, [r4, #12]
 801b728:	4641      	mov	r1, r8
 801b72a:	4668      	mov	r0, sp
 801b72c:	4798      	blx	r3
 801b72e:	4639      	mov	r1, r7
 801b730:	4604      	mov	r4, r0
 801b732:	480a      	ldr	r0, [pc, #40]	@ (801b75c <rmw_take_request+0xb8>)
 801b734:	f7ff fe54 	bl	801b3e0 <put_memory>
 801b738:	b106      	cbz	r6, 801b73c <rmw_take_request+0x98>
 801b73a:	7034      	strb	r4, [r6, #0]
 801b73c:	f084 0001 	eor.w	r0, r4, #1
 801b740:	b2c0      	uxtb	r0, r0
 801b742:	b009      	add	sp, #36	@ 0x24
 801b744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b748:	2001      	movs	r0, #1
 801b74a:	b009      	add	sp, #36	@ 0x24
 801b74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b750:	200c      	movs	r0, #12
 801b752:	b009      	add	sp, #36	@ 0x24
 801b754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b758:	0802132c 	.word	0x0802132c
 801b75c:	2001ce68 	.word	0x2001ce68

0801b760 <rmw_send_response>:
 801b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b762:	4605      	mov	r5, r0
 801b764:	6800      	ldr	r0, [r0, #0]
 801b766:	b091      	sub	sp, #68	@ 0x44
 801b768:	460c      	mov	r4, r1
 801b76a:	4616      	mov	r6, r2
 801b76c:	b128      	cbz	r0, 801b77a <rmw_send_response+0x1a>
 801b76e:	4b28      	ldr	r3, [pc, #160]	@ (801b810 <rmw_send_response+0xb0>)
 801b770:	6819      	ldr	r1, [r3, #0]
 801b772:	f7e4 fd55 	bl	8000220 <strcmp>
 801b776:	2800      	cmp	r0, #0
 801b778:	d141      	bne.n	801b7fe <rmw_send_response+0x9e>
 801b77a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801b77e:	9306      	str	r3, [sp, #24]
 801b780:	4623      	mov	r3, r4
 801b782:	9207      	str	r2, [sp, #28]
 801b784:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b788:	686d      	ldr	r5, [r5, #4]
 801b78a:	789b      	ldrb	r3, [r3, #2]
 801b78c:	68a1      	ldr	r1, [r4, #8]
 801b78e:	f88d 2017 	strb.w	r2, [sp, #23]
 801b792:	f88d 3016 	strb.w	r3, [sp, #22]
 801b796:	68e2      	ldr	r2, [r4, #12]
 801b798:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801b79c:	6860      	ldr	r0, [r4, #4]
 801b79e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b7a2:	ab02      	add	r3, sp, #8
 801b7a4:	c307      	stmia	r3!, {r0, r1, r2}
 801b7a6:	696b      	ldr	r3, [r5, #20]
 801b7a8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801b7aa:	68db      	ldr	r3, [r3, #12]
 801b7ac:	4798      	blx	r3
 801b7ae:	6844      	ldr	r4, [r0, #4]
 801b7b0:	4630      	mov	r0, r6
 801b7b2:	6923      	ldr	r3, [r4, #16]
 801b7b4:	4798      	blx	r3
 801b7b6:	f100 0318 	add.w	r3, r0, #24
 801b7ba:	6938      	ldr	r0, [r7, #16]
 801b7bc:	9300      	str	r3, [sp, #0]
 801b7be:	692a      	ldr	r2, [r5, #16]
 801b7c0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801b7c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b7c6:	ab08      	add	r3, sp, #32
 801b7c8:	f7fb fc7c 	bl	80170c4 <uxr_prepare_output_stream>
 801b7cc:	b910      	cbnz	r0, 801b7d4 <rmw_send_response+0x74>
 801b7ce:	2001      	movs	r0, #1
 801b7d0:	b011      	add	sp, #68	@ 0x44
 801b7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7d4:	a902      	add	r1, sp, #8
 801b7d6:	a808      	add	r0, sp, #32
 801b7d8:	f7fc fd92 	bl	8018300 <uxr_serialize_SampleIdentity>
 801b7dc:	68a3      	ldr	r3, [r4, #8]
 801b7de:	a908      	add	r1, sp, #32
 801b7e0:	4630      	mov	r0, r6
 801b7e2:	4798      	blx	r3
 801b7e4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801b7e8:	6938      	ldr	r0, [r7, #16]
 801b7ea:	2b01      	cmp	r3, #1
 801b7ec:	d00a      	beq.n	801b804 <rmw_send_response+0xa4>
 801b7ee:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801b7f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b7f4:	f7fa f9d0 	bl	8015b98 <uxr_run_session_until_confirm_delivery>
 801b7f8:	2000      	movs	r0, #0
 801b7fa:	b011      	add	sp, #68	@ 0x44
 801b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7fe:	200c      	movs	r0, #12
 801b800:	b011      	add	sp, #68	@ 0x44
 801b802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b804:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801b808:	f7f9 fe2e 	bl	8015468 <uxr_flash_output_streams>
 801b80c:	e7f4      	b.n	801b7f8 <rmw_send_response+0x98>
 801b80e:	bf00      	nop
 801b810:	0802132c 	.word	0x0802132c

0801b814 <rmw_take_response>:
 801b814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b818:	4604      	mov	r4, r0
 801b81a:	6800      	ldr	r0, [r0, #0]
 801b81c:	b088      	sub	sp, #32
 801b81e:	4688      	mov	r8, r1
 801b820:	4617      	mov	r7, r2
 801b822:	461d      	mov	r5, r3
 801b824:	b120      	cbz	r0, 801b830 <rmw_take_response+0x1c>
 801b826:	4b1e      	ldr	r3, [pc, #120]	@ (801b8a0 <rmw_take_response+0x8c>)
 801b828:	6819      	ldr	r1, [r3, #0]
 801b82a:	f7e4 fcf9 	bl	8000220 <strcmp>
 801b82e:	bb78      	cbnz	r0, 801b890 <rmw_take_response+0x7c>
 801b830:	b10d      	cbz	r5, 801b836 <rmw_take_response+0x22>
 801b832:	2300      	movs	r3, #0
 801b834:	702b      	strb	r3, [r5, #0]
 801b836:	6864      	ldr	r4, [r4, #4]
 801b838:	f7f6 fd8a 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 801b83c:	4620      	mov	r0, r4
 801b83e:	f7f6 fd5f 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 801b842:	4606      	mov	r6, r0
 801b844:	b340      	cbz	r0, 801b898 <rmw_take_response+0x84>
 801b846:	6963      	ldr	r3, [r4, #20]
 801b848:	6884      	ldr	r4, [r0, #8]
 801b84a:	68db      	ldr	r3, [r3, #12]
 801b84c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801b850:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801b854:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801b858:	4798      	blx	r3
 801b85a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b85e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801b862:	f104 0110 	add.w	r1, r4, #16
 801b866:	4668      	mov	r0, sp
 801b868:	f7f2 fec4 	bl	800e5f4 <ucdr_init_buffer>
 801b86c:	4639      	mov	r1, r7
 801b86e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b872:	4668      	mov	r0, sp
 801b874:	4798      	blx	r3
 801b876:	4631      	mov	r1, r6
 801b878:	4604      	mov	r4, r0
 801b87a:	480a      	ldr	r0, [pc, #40]	@ (801b8a4 <rmw_take_response+0x90>)
 801b87c:	f7ff fdb0 	bl	801b3e0 <put_memory>
 801b880:	b105      	cbz	r5, 801b884 <rmw_take_response+0x70>
 801b882:	702c      	strb	r4, [r5, #0]
 801b884:	f084 0001 	eor.w	r0, r4, #1
 801b888:	b2c0      	uxtb	r0, r0
 801b88a:	b008      	add	sp, #32
 801b88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b890:	200c      	movs	r0, #12
 801b892:	b008      	add	sp, #32
 801b894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b898:	2001      	movs	r0, #1
 801b89a:	b008      	add	sp, #32
 801b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8a0:	0802132c 	.word	0x0802132c
 801b8a4:	2001ce68 	.word	0x2001ce68

0801b8a8 <rmw_trigger_guard_condition>:
 801b8a8:	b160      	cbz	r0, 801b8c4 <rmw_trigger_guard_condition+0x1c>
 801b8aa:	b510      	push	{r4, lr}
 801b8ac:	4604      	mov	r4, r0
 801b8ae:	6800      	ldr	r0, [r0, #0]
 801b8b0:	f7f6 fe52 	bl	8012558 <is_uxrce_rmw_identifier_valid>
 801b8b4:	b908      	cbnz	r0, 801b8ba <rmw_trigger_guard_condition+0x12>
 801b8b6:	2001      	movs	r0, #1
 801b8b8:	bd10      	pop	{r4, pc}
 801b8ba:	6863      	ldr	r3, [r4, #4]
 801b8bc:	2201      	movs	r2, #1
 801b8be:	741a      	strb	r2, [r3, #16]
 801b8c0:	2000      	movs	r0, #0
 801b8c2:	bd10      	pop	{r4, pc}
 801b8c4:	2001      	movs	r0, #1
 801b8c6:	4770      	bx	lr

0801b8c8 <rmw_wait>:
 801b8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8cc:	b089      	sub	sp, #36	@ 0x24
 801b8ce:	4607      	mov	r7, r0
 801b8d0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b8d2:	460e      	mov	r6, r1
 801b8d4:	4698      	mov	r8, r3
 801b8d6:	4691      	mov	r9, r2
 801b8d8:	2a00      	cmp	r2, #0
 801b8da:	f000 811e 	beq.w	801bb1a <rmw_wait+0x252>
 801b8de:	2c00      	cmp	r4, #0
 801b8e0:	f000 80ef 	beq.w	801bac2 <rmw_wait+0x1fa>
 801b8e4:	4bb5      	ldr	r3, [pc, #724]	@ (801bbbc <rmw_wait+0x2f4>)
 801b8e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b8e8:	ad04      	add	r5, sp, #16
 801b8ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801b8ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801b8f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b8f6:	f7ff fb7d 	bl	801aff4 <rmw_time_equal>
 801b8fa:	2800      	cmp	r0, #0
 801b8fc:	f000 811b 	beq.w	801bb36 <rmw_wait+0x26e>
 801b900:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b904:	f7f6 fd24 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 801b908:	4bad      	ldr	r3, [pc, #692]	@ (801bbc0 <rmw_wait+0x2f8>)
 801b90a:	681c      	ldr	r4, [r3, #0]
 801b90c:	b14c      	cbz	r4, 801b922 <rmw_wait+0x5a>
 801b90e:	4623      	mov	r3, r4
 801b910:	2100      	movs	r1, #0
 801b912:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801b916:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b91a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d1f7      	bne.n	801b912 <rmw_wait+0x4a>
 801b922:	f1b9 0f00 	cmp.w	r9, #0
 801b926:	d011      	beq.n	801b94c <rmw_wait+0x84>
 801b928:	f8d9 1000 	ldr.w	r1, [r9]
 801b92c:	b171      	cbz	r1, 801b94c <rmw_wait+0x84>
 801b92e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801b932:	2300      	movs	r3, #0
 801b934:	2001      	movs	r0, #1
 801b936:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b93a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801b93c:	6912      	ldr	r2, [r2, #16]
 801b93e:	3301      	adds	r3, #1
 801b940:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b944:	4299      	cmp	r1, r3
 801b946:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b94a:	d1f4      	bne.n	801b936 <rmw_wait+0x6e>
 801b94c:	f1b8 0f00 	cmp.w	r8, #0
 801b950:	f000 8109 	beq.w	801bb66 <rmw_wait+0x29e>
 801b954:	f8d8 1000 	ldr.w	r1, [r8]
 801b958:	2900      	cmp	r1, #0
 801b95a:	f000 8116 	beq.w	801bb8a <rmw_wait+0x2c2>
 801b95e:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801b962:	2300      	movs	r3, #0
 801b964:	2001      	movs	r0, #1
 801b966:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b96a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801b96c:	6912      	ldr	r2, [r2, #16]
 801b96e:	3301      	adds	r3, #1
 801b970:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b974:	4299      	cmp	r1, r3
 801b976:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b97a:	d1f4      	bne.n	801b966 <rmw_wait+0x9e>
 801b97c:	2f00      	cmp	r7, #0
 801b97e:	f000 8114 	beq.w	801bbaa <rmw_wait+0x2e2>
 801b982:	6839      	ldr	r1, [r7, #0]
 801b984:	b171      	cbz	r1, 801b9a4 <rmw_wait+0xdc>
 801b986:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801b98a:	2300      	movs	r3, #0
 801b98c:	2001      	movs	r0, #1
 801b98e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b992:	6a12      	ldr	r2, [r2, #32]
 801b994:	6912      	ldr	r2, [r2, #16]
 801b996:	3301      	adds	r3, #1
 801b998:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801b99c:	4299      	cmp	r1, r3
 801b99e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801b9a2:	d1f4      	bne.n	801b98e <rmw_wait+0xc6>
 801b9a4:	b344      	cbz	r4, 801b9f8 <rmw_wait+0x130>
 801b9a6:	4622      	mov	r2, r4
 801b9a8:	2300      	movs	r3, #0
 801b9aa:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801b9ae:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801b9b2:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801b9b6:	440b      	add	r3, r1
 801b9b8:	b2db      	uxtb	r3, r3
 801b9ba:	2a00      	cmp	r2, #0
 801b9bc:	d1f5      	bne.n	801b9aa <rmw_wait+0xe2>
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d075      	beq.n	801baae <rmw_wait+0x1e6>
 801b9c2:	1c6a      	adds	r2, r5, #1
 801b9c4:	d00d      	beq.n	801b9e2 <rmw_wait+0x11a>
 801b9c6:	ee07 5a90 	vmov	s15, r5
 801b9ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b9ce:	ee07 3a90 	vmov	s15, r3
 801b9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801b9da:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801b9de:	ee17 5a90 	vmov	r5, s15
 801b9e2:	68a0      	ldr	r0, [r4, #8]
 801b9e4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801b9e8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	f040 808a 	bne.w	801bb06 <rmw_wait+0x23e>
 801b9f2:	6864      	ldr	r4, [r4, #4]
 801b9f4:	2c00      	cmp	r4, #0
 801b9f6:	d1f4      	bne.n	801b9e2 <rmw_wait+0x11a>
 801b9f8:	f1b9 0f00 	cmp.w	r9, #0
 801b9fc:	f000 80c3 	beq.w	801bb86 <rmw_wait+0x2be>
 801ba00:	f8d9 5000 	ldr.w	r5, [r9]
 801ba04:	b185      	cbz	r5, 801ba28 <rmw_wait+0x160>
 801ba06:	2400      	movs	r4, #0
 801ba08:	4625      	mov	r5, r4
 801ba0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ba0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ba12:	f7f6 fc75 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ba16:	2800      	cmp	r0, #0
 801ba18:	d06d      	beq.n	801baf6 <rmw_wait+0x22e>
 801ba1a:	f8d9 3000 	ldr.w	r3, [r9]
 801ba1e:	3401      	adds	r4, #1
 801ba20:	42a3      	cmp	r3, r4
 801ba22:	f04f 0501 	mov.w	r5, #1
 801ba26:	d8f0      	bhi.n	801ba0a <rmw_wait+0x142>
 801ba28:	f1b8 0f00 	cmp.w	r8, #0
 801ba2c:	d012      	beq.n	801ba54 <rmw_wait+0x18c>
 801ba2e:	f8d8 1000 	ldr.w	r1, [r8]
 801ba32:	2400      	movs	r4, #0
 801ba34:	b171      	cbz	r1, 801ba54 <rmw_wait+0x18c>
 801ba36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ba3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ba3e:	f7f6 fc5f 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ba42:	2800      	cmp	r0, #0
 801ba44:	d047      	beq.n	801bad6 <rmw_wait+0x20e>
 801ba46:	f8d8 3000 	ldr.w	r3, [r8]
 801ba4a:	3401      	adds	r4, #1
 801ba4c:	42a3      	cmp	r3, r4
 801ba4e:	f04f 0501 	mov.w	r5, #1
 801ba52:	d8f0      	bhi.n	801ba36 <rmw_wait+0x16e>
 801ba54:	b17f      	cbz	r7, 801ba76 <rmw_wait+0x1ae>
 801ba56:	683b      	ldr	r3, [r7, #0]
 801ba58:	2400      	movs	r4, #0
 801ba5a:	b163      	cbz	r3, 801ba76 <rmw_wait+0x1ae>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ba62:	f7f6 fc4d 	bl	8012300 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ba66:	2800      	cmp	r0, #0
 801ba68:	d03d      	beq.n	801bae6 <rmw_wait+0x21e>
 801ba6a:	683b      	ldr	r3, [r7, #0]
 801ba6c:	3401      	adds	r4, #1
 801ba6e:	42a3      	cmp	r3, r4
 801ba70:	f04f 0501 	mov.w	r5, #1
 801ba74:	d8f2      	bhi.n	801ba5c <rmw_wait+0x194>
 801ba76:	b1a6      	cbz	r6, 801baa2 <rmw_wait+0x1da>
 801ba78:	6834      	ldr	r4, [r6, #0]
 801ba7a:	b194      	cbz	r4, 801baa2 <rmw_wait+0x1da>
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	461f      	mov	r7, r3
 801ba80:	e004      	b.n	801ba8c <rmw_wait+0x1c4>
 801ba82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801ba86:	3301      	adds	r3, #1
 801ba88:	429c      	cmp	r4, r3
 801ba8a:	d00a      	beq.n	801baa2 <rmw_wait+0x1da>
 801ba8c:	6870      	ldr	r0, [r6, #4]
 801ba8e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801ba92:	7c0a      	ldrb	r2, [r1, #16]
 801ba94:	2a00      	cmp	r2, #0
 801ba96:	d0f4      	beq.n	801ba82 <rmw_wait+0x1ba>
 801ba98:	3301      	adds	r3, #1
 801ba9a:	429c      	cmp	r4, r3
 801ba9c:	740f      	strb	r7, [r1, #16]
 801ba9e:	4615      	mov	r5, r2
 801baa0:	d1f4      	bne.n	801ba8c <rmw_wait+0x1c4>
 801baa2:	f085 0001 	eor.w	r0, r5, #1
 801baa6:	0040      	lsls	r0, r0, #1
 801baa8:	b009      	add	sp, #36	@ 0x24
 801baaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801baae:	68a0      	ldr	r0, [r4, #8]
 801bab0:	2100      	movs	r1, #0
 801bab2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bab6:	f7fa f835 	bl	8015b24 <uxr_run_session_timeout>
 801baba:	6864      	ldr	r4, [r4, #4]
 801babc:	2c00      	cmp	r4, #0
 801babe:	d1f6      	bne.n	801baae <rmw_wait+0x1e6>
 801bac0:	e79a      	b.n	801b9f8 <rmw_wait+0x130>
 801bac2:	f7f6 fc45 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 801bac6:	4b3e      	ldr	r3, [pc, #248]	@ (801bbc0 <rmw_wait+0x2f8>)
 801bac8:	681c      	ldr	r4, [r3, #0]
 801baca:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bace:	2c00      	cmp	r4, #0
 801bad0:	f47f af1d 	bne.w	801b90e <rmw_wait+0x46>
 801bad4:	e728      	b.n	801b928 <rmw_wait+0x60>
 801bad6:	e9d8 3200 	ldrd	r3, r2, [r8]
 801bada:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bade:	3401      	adds	r4, #1
 801bae0:	429c      	cmp	r4, r3
 801bae2:	d3a8      	bcc.n	801ba36 <rmw_wait+0x16e>
 801bae4:	e7b6      	b.n	801ba54 <rmw_wait+0x18c>
 801bae6:	e9d7 3200 	ldrd	r3, r2, [r7]
 801baea:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801baee:	3401      	adds	r4, #1
 801baf0:	42a3      	cmp	r3, r4
 801baf2:	d8b3      	bhi.n	801ba5c <rmw_wait+0x194>
 801baf4:	e7bf      	b.n	801ba76 <rmw_wait+0x1ae>
 801baf6:	e9d9 3200 	ldrd	r3, r2, [r9]
 801bafa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801bafe:	3401      	adds	r4, #1
 801bb00:	42a3      	cmp	r3, r4
 801bb02:	d882      	bhi.n	801ba0a <rmw_wait+0x142>
 801bb04:	e790      	b.n	801ba28 <rmw_wait+0x160>
 801bb06:	4629      	mov	r1, r5
 801bb08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801bb0c:	f7fa f824 	bl	8015b58 <uxr_run_session_until_data>
 801bb10:	6864      	ldr	r4, [r4, #4]
 801bb12:	2c00      	cmp	r4, #0
 801bb14:	f47f af65 	bne.w	801b9e2 <rmw_wait+0x11a>
 801bb18:	e76e      	b.n	801b9f8 <rmw_wait+0x130>
 801bb1a:	b1f3      	cbz	r3, 801bb5a <rmw_wait+0x292>
 801bb1c:	2c00      	cmp	r4, #0
 801bb1e:	f47f aee1 	bne.w	801b8e4 <rmw_wait+0x1c>
 801bb22:	f7f6 fc15 	bl	8012350 <rmw_uxrce_clean_expired_static_input_buffer>
 801bb26:	4b26      	ldr	r3, [pc, #152]	@ (801bbc0 <rmw_wait+0x2f8>)
 801bb28:	681c      	ldr	r4, [r3, #0]
 801bb2a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801bb2e:	2c00      	cmp	r4, #0
 801bb30:	f47f aeed 	bne.w	801b90e <rmw_wait+0x46>
 801bb34:	e70a      	b.n	801b94c <rmw_wait+0x84>
 801bb36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801bb3a:	f7ff faaf 	bl	801b09c <rmw_time_total_nsec>
 801bb3e:	4a21      	ldr	r2, [pc, #132]	@ (801bbc4 <rmw_wait+0x2fc>)
 801bb40:	2300      	movs	r3, #0
 801bb42:	f7e5 f8e1 	bl	8000d08 <__aeabi_uldivmod>
 801bb46:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801bb4a:	f171 0100 	sbcs.w	r1, r1, #0
 801bb4e:	4605      	mov	r5, r0
 801bb50:	f6ff aed8 	blt.w	801b904 <rmw_wait+0x3c>
 801bb54:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801bb58:	e6d4      	b.n	801b904 <rmw_wait+0x3c>
 801bb5a:	2800      	cmp	r0, #0
 801bb5c:	d1de      	bne.n	801bb1c <rmw_wait+0x254>
 801bb5e:	2900      	cmp	r1, #0
 801bb60:	d1dc      	bne.n	801bb1c <rmw_wait+0x254>
 801bb62:	4608      	mov	r0, r1
 801bb64:	e7a0      	b.n	801baa8 <rmw_wait+0x1e0>
 801bb66:	2f00      	cmp	r7, #0
 801bb68:	f47f af0b 	bne.w	801b982 <rmw_wait+0xba>
 801bb6c:	2c00      	cmp	r4, #0
 801bb6e:	f47f af1a 	bne.w	801b9a6 <rmw_wait+0xde>
 801bb72:	f1b9 0f00 	cmp.w	r9, #0
 801bb76:	d027      	beq.n	801bbc8 <rmw_wait+0x300>
 801bb78:	f8d9 3000 	ldr.w	r3, [r9]
 801bb7c:	4625      	mov	r5, r4
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	f47f af41 	bne.w	801ba06 <rmw_wait+0x13e>
 801bb84:	e777      	b.n	801ba76 <rmw_wait+0x1ae>
 801bb86:	464d      	mov	r5, r9
 801bb88:	e74e      	b.n	801ba28 <rmw_wait+0x160>
 801bb8a:	2f00      	cmp	r7, #0
 801bb8c:	f47f aef9 	bne.w	801b982 <rmw_wait+0xba>
 801bb90:	2c00      	cmp	r4, #0
 801bb92:	f47f af08 	bne.w	801b9a6 <rmw_wait+0xde>
 801bb96:	f1b9 0f00 	cmp.w	r9, #0
 801bb9a:	d015      	beq.n	801bbc8 <rmw_wait+0x300>
 801bb9c:	f8d9 3000 	ldr.w	r3, [r9]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	f47f af30 	bne.w	801ba06 <rmw_wait+0x13e>
 801bba6:	2500      	movs	r5, #0
 801bba8:	e743      	b.n	801ba32 <rmw_wait+0x16a>
 801bbaa:	2c00      	cmp	r4, #0
 801bbac:	f47f aefb 	bne.w	801b9a6 <rmw_wait+0xde>
 801bbb0:	f1b9 0f00 	cmp.w	r9, #0
 801bbb4:	f47f af24 	bne.w	801ba00 <rmw_wait+0x138>
 801bbb8:	e7f5      	b.n	801bba6 <rmw_wait+0x2de>
 801bbba:	bf00      	nop
 801bbbc:	080201b0 	.word	0x080201b0
 801bbc0:	2001f508 	.word	0x2001f508
 801bbc4:	000f4240 	.word	0x000f4240
 801bbc8:	464d      	mov	r5, r9
 801bbca:	e754      	b.n	801ba76 <rmw_wait+0x1ae>

0801bbcc <rmw_create_wait_set>:
 801bbcc:	b508      	push	{r3, lr}
 801bbce:	4803      	ldr	r0, [pc, #12]	@ (801bbdc <rmw_create_wait_set+0x10>)
 801bbd0:	f7ff fbf6 	bl	801b3c0 <get_memory>
 801bbd4:	b108      	cbz	r0, 801bbda <rmw_create_wait_set+0xe>
 801bbd6:	6880      	ldr	r0, [r0, #8]
 801bbd8:	3010      	adds	r0, #16
 801bbda:	bd08      	pop	{r3, pc}
 801bbdc:	2001acc0 	.word	0x2001acc0

0801bbe0 <rmw_destroy_wait_set>:
 801bbe0:	b508      	push	{r3, lr}
 801bbe2:	4b08      	ldr	r3, [pc, #32]	@ (801bc04 <rmw_destroy_wait_set+0x24>)
 801bbe4:	6819      	ldr	r1, [r3, #0]
 801bbe6:	b911      	cbnz	r1, 801bbee <rmw_destroy_wait_set+0xe>
 801bbe8:	e00a      	b.n	801bc00 <rmw_destroy_wait_set+0x20>
 801bbea:	6849      	ldr	r1, [r1, #4]
 801bbec:	b141      	cbz	r1, 801bc00 <rmw_destroy_wait_set+0x20>
 801bbee:	688b      	ldr	r3, [r1, #8]
 801bbf0:	3310      	adds	r3, #16
 801bbf2:	4298      	cmp	r0, r3
 801bbf4:	d1f9      	bne.n	801bbea <rmw_destroy_wait_set+0xa>
 801bbf6:	4803      	ldr	r0, [pc, #12]	@ (801bc04 <rmw_destroy_wait_set+0x24>)
 801bbf8:	f7ff fbf2 	bl	801b3e0 <put_memory>
 801bbfc:	2000      	movs	r0, #0
 801bbfe:	bd08      	pop	{r3, pc}
 801bc00:	2001      	movs	r0, #1
 801bc02:	bd08      	pop	{r3, pc}
 801bc04:	2001acc0 	.word	0x2001acc0

0801bc08 <sensor_msgs__msg__Imu__get_type_hash>:
 801bc08:	4800      	ldr	r0, [pc, #0]	@ (801bc0c <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 801bc0a:	4770      	bx	lr
 801bc0c:	20000d18 	.word	0x20000d18

0801bc10 <sensor_msgs__msg__Imu__get_type_description>:
 801bc10:	b570      	push	{r4, r5, r6, lr}
 801bc12:	4e15      	ldr	r6, [pc, #84]	@ (801bc68 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 801bc14:	7835      	ldrb	r5, [r6, #0]
 801bc16:	b10d      	cbz	r5, 801bc1c <sensor_msgs__msg__Imu__get_type_description+0xc>
 801bc18:	4814      	ldr	r0, [pc, #80]	@ (801bc6c <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801bc1a:	bd70      	pop	{r4, r5, r6, pc}
 801bc1c:	4628      	mov	r0, r5
 801bc1e:	f7f6 fff9 	bl	8012c14 <builtin_interfaces__msg__Time__get_type_description>
 801bc22:	300c      	adds	r0, #12
 801bc24:	c807      	ldmia	r0, {r0, r1, r2}
 801bc26:	4c12      	ldr	r4, [pc, #72]	@ (801bc70 <sensor_msgs__msg__Imu__get_type_description+0x60>)
 801bc28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bc2c:	4628      	mov	r0, r5
 801bc2e:	f000 f955 	bl	801bedc <geometry_msgs__msg__Quaternion__get_type_description>
 801bc32:	300c      	adds	r0, #12
 801bc34:	c807      	ldmia	r0, {r0, r1, r2}
 801bc36:	f104 0318 	add.w	r3, r4, #24
 801bc3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bc3e:	4628      	mov	r0, r5
 801bc40:	f000 f994 	bl	801bf6c <geometry_msgs__msg__Vector3__get_type_description>
 801bc44:	300c      	adds	r0, #12
 801bc46:	c807      	ldmia	r0, {r0, r1, r2}
 801bc48:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801bc4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bc50:	4628      	mov	r0, r5
 801bc52:	f000 f8c9 	bl	801bde8 <std_msgs__msg__Header__get_type_description>
 801bc56:	300c      	adds	r0, #12
 801bc58:	c807      	ldmia	r0, {r0, r1, r2}
 801bc5a:	3448      	adds	r4, #72	@ 0x48
 801bc5c:	2301      	movs	r3, #1
 801bc5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bc62:	7033      	strb	r3, [r6, #0]
 801bc64:	4801      	ldr	r0, [pc, #4]	@ (801bc6c <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801bc66:	bd70      	pop	{r4, r5, r6, pc}
 801bc68:	2001f73d 	.word	0x2001f73d
 801bc6c:	08021360 	.word	0x08021360
 801bc70:	20001208 	.word	0x20001208

0801bc74 <sensor_msgs__msg__Imu__get_type_description_sources>:
 801bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc76:	4d26      	ldr	r5, [pc, #152]	@ (801bd10 <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 801bc78:	782f      	ldrb	r7, [r5, #0]
 801bc7a:	b10f      	cbz	r7, 801bc80 <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 801bc7c:	4825      	ldr	r0, [pc, #148]	@ (801bd14 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801bc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc80:	4e25      	ldr	r6, [pc, #148]	@ (801bd18 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801bc82:	4c26      	ldr	r4, [pc, #152]	@ (801bd1c <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 801bc84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bc86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bc88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bc8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bc8c:	6833      	ldr	r3, [r6, #0]
 801bc8e:	4626      	mov	r6, r4
 801bc90:	4638      	mov	r0, r7
 801bc92:	f846 3b04 	str.w	r3, [r6], #4
 801bc96:	f7f6 ffc9 	bl	8012c2c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801bc9a:	4684      	mov	ip, r0
 801bc9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bca0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bca2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bca6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bca8:	4638      	mov	r0, r7
 801bcaa:	f8dc 3000 	ldr.w	r3, [ip]
 801bcae:	6033      	str	r3, [r6, #0]
 801bcb0:	f000 f920 	bl	801bef4 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801bcb4:	4684      	mov	ip, r0
 801bcb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcba:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 801bcbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bcc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bcc6:	4638      	mov	r0, r7
 801bcc8:	f8dc 3000 	ldr.w	r3, [ip]
 801bccc:	6033      	str	r3, [r6, #0]
 801bcce:	f000 f959 	bl	801bf84 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801bcd2:	4684      	mov	ip, r0
 801bcd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcd8:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801bcdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bcde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bce2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bce4:	4638      	mov	r0, r7
 801bce6:	f8dc 3000 	ldr.w	r3, [ip]
 801bcea:	6033      	str	r3, [r6, #0]
 801bcec:	f000 f894 	bl	801be18 <std_msgs__msg__Header__get_individual_type_description_source>
 801bcf0:	2301      	movs	r3, #1
 801bcf2:	4684      	mov	ip, r0
 801bcf4:	702b      	strb	r3, [r5, #0]
 801bcf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcfa:	3470      	adds	r4, #112	@ 0x70
 801bcfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bcfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bd02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd04:	f8dc 3000 	ldr.w	r3, [ip]
 801bd08:	4802      	ldr	r0, [pc, #8]	@ (801bd14 <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 801bd0a:	6023      	str	r3, [r4, #0]
 801bd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd0e:	bf00      	nop
 801bd10:	2001f73c 	.word	0x2001f73c
 801bd14:	08021330 	.word	0x08021330
 801bd18:	0802133c 	.word	0x0802133c
 801bd1c:	2001f688 	.word	0x2001f688

0801bd20 <sensor_msgs__msg__Imu__init>:
 801bd20:	b3d8      	cbz	r0, 801bd9a <sensor_msgs__msg__Imu__init+0x7a>
 801bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd24:	4604      	mov	r4, r0
 801bd26:	f000 f8a3 	bl	801be70 <std_msgs__msg__Header__init>
 801bd2a:	b190      	cbz	r0, 801bd52 <sensor_msgs__msg__Imu__init+0x32>
 801bd2c:	f104 0518 	add.w	r5, r4, #24
 801bd30:	4628      	mov	r0, r5
 801bd32:	f000 f901 	bl	801bf38 <geometry_msgs__msg__Quaternion__init>
 801bd36:	b358      	cbz	r0, 801bd90 <sensor_msgs__msg__Imu__init+0x70>
 801bd38:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 801bd3c:	4630      	mov	r0, r6
 801bd3e:	f000 f941 	bl	801bfc4 <geometry_msgs__msg__Vector3__init>
 801bd42:	b1b8      	cbz	r0, 801bd74 <sensor_msgs__msg__Imu__init+0x54>
 801bd44:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 801bd48:	4638      	mov	r0, r7
 801bd4a:	f000 f93b 	bl	801bfc4 <geometry_msgs__msg__Vector3__init>
 801bd4e:	b330      	cbz	r0, 801bd9e <sensor_msgs__msg__Imu__init+0x7e>
 801bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd52:	4620      	mov	r0, r4
 801bd54:	f000 f8ac 	bl	801beb0 <std_msgs__msg__Header__fini>
 801bd58:	f104 0018 	add.w	r0, r4, #24
 801bd5c:	f000 f900 	bl	801bf60 <geometry_msgs__msg__Quaternion__fini>
 801bd60:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801bd64:	f000 f932 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bd68:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801bd6c:	f000 f92e 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bd70:	2000      	movs	r0, #0
 801bd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd74:	4620      	mov	r0, r4
 801bd76:	f000 f89b 	bl	801beb0 <std_msgs__msg__Header__fini>
 801bd7a:	4628      	mov	r0, r5
 801bd7c:	f000 f8f0 	bl	801bf60 <geometry_msgs__msg__Quaternion__fini>
 801bd80:	4630      	mov	r0, r6
 801bd82:	f000 f923 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bd86:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801bd8a:	f000 f91f 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bd8e:	e7ef      	b.n	801bd70 <sensor_msgs__msg__Imu__init+0x50>
 801bd90:	4620      	mov	r0, r4
 801bd92:	f000 f88d 	bl	801beb0 <std_msgs__msg__Header__fini>
 801bd96:	4628      	mov	r0, r5
 801bd98:	e7e0      	b.n	801bd5c <sensor_msgs__msg__Imu__init+0x3c>
 801bd9a:	2000      	movs	r0, #0
 801bd9c:	4770      	bx	lr
 801bd9e:	4620      	mov	r0, r4
 801bda0:	f000 f886 	bl	801beb0 <std_msgs__msg__Header__fini>
 801bda4:	4628      	mov	r0, r5
 801bda6:	f000 f8db 	bl	801bf60 <geometry_msgs__msg__Quaternion__fini>
 801bdaa:	4630      	mov	r0, r6
 801bdac:	f000 f90e 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bdb0:	4638      	mov	r0, r7
 801bdb2:	f000 f90b 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bdb6:	e7db      	b.n	801bd70 <sensor_msgs__msg__Imu__init+0x50>

0801bdb8 <sensor_msgs__msg__Imu__fini>:
 801bdb8:	b188      	cbz	r0, 801bdde <sensor_msgs__msg__Imu__fini+0x26>
 801bdba:	b510      	push	{r4, lr}
 801bdbc:	4604      	mov	r4, r0
 801bdbe:	f000 f877 	bl	801beb0 <std_msgs__msg__Header__fini>
 801bdc2:	f104 0018 	add.w	r0, r4, #24
 801bdc6:	f000 f8cb 	bl	801bf60 <geometry_msgs__msg__Quaternion__fini>
 801bdca:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801bdce:	f000 f8fd 	bl	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bdd2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801bdd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdda:	f000 b8f7 	b.w	801bfcc <geometry_msgs__msg__Vector3__fini>
 801bdde:	4770      	bx	lr

0801bde0 <std_msgs__msg__Header__get_type_hash>:
 801bde0:	4800      	ldr	r0, [pc, #0]	@ (801bde4 <std_msgs__msg__Header__get_type_hash+0x4>)
 801bde2:	4770      	bx	lr
 801bde4:	20001568 	.word	0x20001568

0801bde8 <std_msgs__msg__Header__get_type_description>:
 801bde8:	b510      	push	{r4, lr}
 801bdea:	4c08      	ldr	r4, [pc, #32]	@ (801be0c <std_msgs__msg__Header__get_type_description+0x24>)
 801bdec:	7820      	ldrb	r0, [r4, #0]
 801bdee:	b108      	cbz	r0, 801bdf4 <std_msgs__msg__Header__get_type_description+0xc>
 801bdf0:	4807      	ldr	r0, [pc, #28]	@ (801be10 <std_msgs__msg__Header__get_type_description+0x28>)
 801bdf2:	bd10      	pop	{r4, pc}
 801bdf4:	f7f6 ff0e 	bl	8012c14 <builtin_interfaces__msg__Time__get_type_description>
 801bdf8:	300c      	adds	r0, #12
 801bdfa:	c807      	ldmia	r0, {r0, r1, r2}
 801bdfc:	4b05      	ldr	r3, [pc, #20]	@ (801be14 <std_msgs__msg__Header__get_type_description+0x2c>)
 801bdfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801be02:	2301      	movs	r3, #1
 801be04:	4802      	ldr	r0, [pc, #8]	@ (801be10 <std_msgs__msg__Header__get_type_description+0x28>)
 801be06:	7023      	strb	r3, [r4, #0]
 801be08:	bd10      	pop	{r4, pc}
 801be0a:	bf00      	nop
 801be0c:	2001f789 	.word	0x2001f789
 801be10:	080213b4 	.word	0x080213b4
 801be14:	200016e0 	.word	0x200016e0

0801be18 <std_msgs__msg__Header__get_individual_type_description_source>:
 801be18:	4800      	ldr	r0, [pc, #0]	@ (801be1c <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 801be1a:	4770      	bx	lr
 801be1c:	08021390 	.word	0x08021390

0801be20 <std_msgs__msg__Header__get_type_description_sources>:
 801be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be22:	4e0f      	ldr	r6, [pc, #60]	@ (801be60 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801be24:	7837      	ldrb	r7, [r6, #0]
 801be26:	b10f      	cbz	r7, 801be2c <std_msgs__msg__Header__get_type_description_sources+0xc>
 801be28:	480e      	ldr	r0, [pc, #56]	@ (801be64 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801be2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be2c:	4d0e      	ldr	r5, [pc, #56]	@ (801be68 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 801be2e:	4c0f      	ldr	r4, [pc, #60]	@ (801be6c <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 801be30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be38:	682b      	ldr	r3, [r5, #0]
 801be3a:	f844 3b04 	str.w	r3, [r4], #4
 801be3e:	4638      	mov	r0, r7
 801be40:	f7f6 fef4 	bl	8012c2c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801be44:	2301      	movs	r3, #1
 801be46:	4684      	mov	ip, r0
 801be48:	7033      	strb	r3, [r6, #0]
 801be4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801be4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801be54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801be56:	f8dc 3000 	ldr.w	r3, [ip]
 801be5a:	4802      	ldr	r0, [pc, #8]	@ (801be64 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801be5c:	6023      	str	r3, [r4, #0]
 801be5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be60:	2001f788 	.word	0x2001f788
 801be64:	08021384 	.word	0x08021384
 801be68:	08021390 	.word	0x08021390
 801be6c:	2001f740 	.word	0x2001f740

0801be70 <std_msgs__msg__Header__init>:
 801be70:	b1d8      	cbz	r0, 801beaa <std_msgs__msg__Header__init+0x3a>
 801be72:	b538      	push	{r3, r4, r5, lr}
 801be74:	4604      	mov	r4, r0
 801be76:	f000 f827 	bl	801bec8 <builtin_interfaces__msg__Time__init>
 801be7a:	b130      	cbz	r0, 801be8a <std_msgs__msg__Header__init+0x1a>
 801be7c:	f104 0508 	add.w	r5, r4, #8
 801be80:	4628      	mov	r0, r5
 801be82:	f001 f9f3 	bl	801d26c <rosidl_runtime_c__String__init>
 801be86:	b148      	cbz	r0, 801be9c <std_msgs__msg__Header__init+0x2c>
 801be88:	bd38      	pop	{r3, r4, r5, pc}
 801be8a:	4620      	mov	r0, r4
 801be8c:	f000 f820 	bl	801bed0 <builtin_interfaces__msg__Time__fini>
 801be90:	f104 0008 	add.w	r0, r4, #8
 801be94:	f001 fa04 	bl	801d2a0 <rosidl_runtime_c__String__fini>
 801be98:	2000      	movs	r0, #0
 801be9a:	bd38      	pop	{r3, r4, r5, pc}
 801be9c:	4620      	mov	r0, r4
 801be9e:	f000 f817 	bl	801bed0 <builtin_interfaces__msg__Time__fini>
 801bea2:	4628      	mov	r0, r5
 801bea4:	f001 f9fc 	bl	801d2a0 <rosidl_runtime_c__String__fini>
 801bea8:	e7f6      	b.n	801be98 <std_msgs__msg__Header__init+0x28>
 801beaa:	2000      	movs	r0, #0
 801beac:	4770      	bx	lr
 801beae:	bf00      	nop

0801beb0 <std_msgs__msg__Header__fini>:
 801beb0:	b148      	cbz	r0, 801bec6 <std_msgs__msg__Header__fini+0x16>
 801beb2:	b510      	push	{r4, lr}
 801beb4:	4604      	mov	r4, r0
 801beb6:	f000 f80b 	bl	801bed0 <builtin_interfaces__msg__Time__fini>
 801beba:	f104 0008 	add.w	r0, r4, #8
 801bebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bec2:	f001 b9ed 	b.w	801d2a0 <rosidl_runtime_c__String__fini>
 801bec6:	4770      	bx	lr

0801bec8 <builtin_interfaces__msg__Time__init>:
 801bec8:	3800      	subs	r0, #0
 801beca:	bf18      	it	ne
 801becc:	2001      	movne	r0, #1
 801bece:	4770      	bx	lr

0801bed0 <builtin_interfaces__msg__Time__fini>:
 801bed0:	4770      	bx	lr
 801bed2:	bf00      	nop

0801bed4 <geometry_msgs__msg__Quaternion__get_type_hash>:
 801bed4:	4800      	ldr	r0, [pc, #0]	@ (801bed8 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801bed6:	4770      	bx	lr
 801bed8:	200017c4 	.word	0x200017c4

0801bedc <geometry_msgs__msg__Quaternion__get_type_description>:
 801bedc:	4b03      	ldr	r3, [pc, #12]	@ (801beec <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801bede:	781a      	ldrb	r2, [r3, #0]
 801bee0:	b90a      	cbnz	r2, 801bee6 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801bee2:	2201      	movs	r2, #1
 801bee4:	701a      	strb	r2, [r3, #0]
 801bee6:	4802      	ldr	r0, [pc, #8]	@ (801bef0 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 801bee8:	4770      	bx	lr
 801beea:	bf00      	nop
 801beec:	2001f7b1 	.word	0x2001f7b1
 801bef0:	08021408 	.word	0x08021408

0801bef4 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 801bef4:	4800      	ldr	r0, [pc, #0]	@ (801bef8 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 801bef6:	4770      	bx	lr
 801bef8:	080213e4 	.word	0x080213e4

0801befc <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 801befc:	4b09      	ldr	r3, [pc, #36]	@ (801bf24 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801befe:	781a      	ldrb	r2, [r3, #0]
 801bf00:	b96a      	cbnz	r2, 801bf1e <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801bf02:	b430      	push	{r4, r5}
 801bf04:	4d08      	ldr	r5, [pc, #32]	@ (801bf28 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 801bf06:	4c09      	ldr	r4, [pc, #36]	@ (801bf2c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 801bf08:	2201      	movs	r2, #1
 801bf0a:	701a      	strb	r2, [r3, #0]
 801bf0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bf0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bf10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bf12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bf14:	682b      	ldr	r3, [r5, #0]
 801bf16:	4806      	ldr	r0, [pc, #24]	@ (801bf30 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801bf18:	6023      	str	r3, [r4, #0]
 801bf1a:	bc30      	pop	{r4, r5}
 801bf1c:	4770      	bx	lr
 801bf1e:	4804      	ldr	r0, [pc, #16]	@ (801bf30 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801bf20:	4770      	bx	lr
 801bf22:	bf00      	nop
 801bf24:	2001f7b0 	.word	0x2001f7b0
 801bf28:	080213e4 	.word	0x080213e4
 801bf2c:	2001f78c 	.word	0x2001f78c
 801bf30:	080213d8 	.word	0x080213d8
 801bf34:	00000000 	.word	0x00000000

0801bf38 <geometry_msgs__msg__Quaternion__init>:
 801bf38:	b160      	cbz	r0, 801bf54 <geometry_msgs__msg__Quaternion__init+0x1c>
 801bf3a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801bf58 <geometry_msgs__msg__Quaternion__init+0x20>
 801bf3e:	2200      	movs	r2, #0
 801bf40:	2300      	movs	r3, #0
 801bf42:	e9c0 2300 	strd	r2, r3, [r0]
 801bf46:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801bf4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801bf4e:	ed80 7b06 	vstr	d7, [r0, #24]
 801bf52:	2001      	movs	r0, #1
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop
 801bf58:	00000000 	.word	0x00000000
 801bf5c:	3ff00000 	.word	0x3ff00000

0801bf60 <geometry_msgs__msg__Quaternion__fini>:
 801bf60:	4770      	bx	lr
 801bf62:	bf00      	nop

0801bf64 <geometry_msgs__msg__Vector3__get_type_hash>:
 801bf64:	4800      	ldr	r0, [pc, #0]	@ (801bf68 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 801bf66:	4770      	bx	lr
 801bf68:	200019c0 	.word	0x200019c0

0801bf6c <geometry_msgs__msg__Vector3__get_type_description>:
 801bf6c:	4b03      	ldr	r3, [pc, #12]	@ (801bf7c <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 801bf6e:	781a      	ldrb	r2, [r3, #0]
 801bf70:	b90a      	cbnz	r2, 801bf76 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 801bf72:	2201      	movs	r2, #1
 801bf74:	701a      	strb	r2, [r3, #0]
 801bf76:	4802      	ldr	r0, [pc, #8]	@ (801bf80 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 801bf78:	4770      	bx	lr
 801bf7a:	bf00      	nop
 801bf7c:	2001f7d9 	.word	0x2001f7d9
 801bf80:	0802145c 	.word	0x0802145c

0801bf84 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 801bf84:	4800      	ldr	r0, [pc, #0]	@ (801bf88 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 801bf86:	4770      	bx	lr
 801bf88:	08021438 	.word	0x08021438

0801bf8c <geometry_msgs__msg__Vector3__get_type_description_sources>:
 801bf8c:	4b09      	ldr	r3, [pc, #36]	@ (801bfb4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 801bf8e:	781a      	ldrb	r2, [r3, #0]
 801bf90:	b96a      	cbnz	r2, 801bfae <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 801bf92:	b430      	push	{r4, r5}
 801bf94:	4d08      	ldr	r5, [pc, #32]	@ (801bfb8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 801bf96:	4c09      	ldr	r4, [pc, #36]	@ (801bfbc <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 801bf98:	2201      	movs	r2, #1
 801bf9a:	701a      	strb	r2, [r3, #0]
 801bf9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bf9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bfa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bfa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bfa4:	682b      	ldr	r3, [r5, #0]
 801bfa6:	4806      	ldr	r0, [pc, #24]	@ (801bfc0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 801bfa8:	6023      	str	r3, [r4, #0]
 801bfaa:	bc30      	pop	{r4, r5}
 801bfac:	4770      	bx	lr
 801bfae:	4804      	ldr	r0, [pc, #16]	@ (801bfc0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 801bfb0:	4770      	bx	lr
 801bfb2:	bf00      	nop
 801bfb4:	2001f7d8 	.word	0x2001f7d8
 801bfb8:	08021438 	.word	0x08021438
 801bfbc:	2001f7b4 	.word	0x2001f7b4
 801bfc0:	0802142c 	.word	0x0802142c

0801bfc4 <geometry_msgs__msg__Vector3__init>:
 801bfc4:	3800      	subs	r0, #0
 801bfc6:	bf18      	it	ne
 801bfc8:	2001      	movne	r0, #1
 801bfca:	4770      	bx	lr

0801bfcc <geometry_msgs__msg__Vector3__fini>:
 801bfcc:	4770      	bx	lr
 801bfce:	bf00      	nop

0801bfd0 <ucdr_serialize_string>:
 801bfd0:	b538      	push	{r3, r4, r5, lr}
 801bfd2:	4605      	mov	r5, r0
 801bfd4:	4608      	mov	r0, r1
 801bfd6:	460c      	mov	r4, r1
 801bfd8:	f7e4 f982 	bl	80002e0 <strlen>
 801bfdc:	4621      	mov	r1, r4
 801bfde:	1c42      	adds	r2, r0, #1
 801bfe0:	4628      	mov	r0, r5
 801bfe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bfe6:	f7f2 bb75 	b.w	800e6d4 <ucdr_serialize_sequence_char>
 801bfea:	bf00      	nop

0801bfec <ucdr_deserialize_string>:
 801bfec:	b500      	push	{lr}
 801bfee:	b083      	sub	sp, #12
 801bff0:	ab01      	add	r3, sp, #4
 801bff2:	f7f2 fb81 	bl	800e6f8 <ucdr_deserialize_sequence_char>
 801bff6:	b003      	add	sp, #12
 801bff8:	f85d fb04 	ldr.w	pc, [sp], #4

0801bffc <uxr_init_input_best_effort_stream>:
 801bffc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c000:	8003      	strh	r3, [r0, #0]
 801c002:	4770      	bx	lr

0801c004 <uxr_reset_input_best_effort_stream>:
 801c004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c008:	8003      	strh	r3, [r0, #0]
 801c00a:	4770      	bx	lr

0801c00c <uxr_receive_best_effort_message>:
 801c00c:	b538      	push	{r3, r4, r5, lr}
 801c00e:	4604      	mov	r4, r0
 801c010:	8800      	ldrh	r0, [r0, #0]
 801c012:	460d      	mov	r5, r1
 801c014:	f000 fd28 	bl	801ca68 <uxr_seq_num_cmp>
 801c018:	4603      	mov	r3, r0
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801c020:	bfb8      	it	lt
 801c022:	8025      	strhlt	r5, [r4, #0]
 801c024:	bd38      	pop	{r3, r4, r5, pc}
 801c026:	bf00      	nop

0801c028 <on_full_input_buffer>:
 801c028:	b570      	push	{r4, r5, r6, lr}
 801c02a:	4605      	mov	r5, r0
 801c02c:	460c      	mov	r4, r1
 801c02e:	682b      	ldr	r3, [r5, #0]
 801c030:	6809      	ldr	r1, [r1, #0]
 801c032:	8920      	ldrh	r0, [r4, #8]
 801c034:	6862      	ldr	r2, [r4, #4]
 801c036:	fbb2 f2f0 	udiv	r2, r2, r0
 801c03a:	1a5b      	subs	r3, r3, r1
 801c03c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c040:	3301      	adds	r3, #1
 801c042:	b29b      	uxth	r3, r3
 801c044:	fbb3 f6f0 	udiv	r6, r3, r0
 801c048:	fb00 3316 	mls	r3, r0, r6, r3
 801c04c:	b29b      	uxth	r3, r3
 801c04e:	fb02 f303 	mul.w	r3, r2, r3
 801c052:	1d18      	adds	r0, r3, #4
 801c054:	4408      	add	r0, r1
 801c056:	7d26      	ldrb	r6, [r4, #20]
 801c058:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801c05c:	b116      	cbz	r6, 801c064 <on_full_input_buffer+0x3c>
 801c05e:	2600      	movs	r6, #0
 801c060:	f840 6c04 	str.w	r6, [r0, #-4]
 801c064:	2a03      	cmp	r2, #3
 801c066:	d801      	bhi.n	801c06c <on_full_input_buffer+0x44>
 801c068:	2001      	movs	r0, #1
 801c06a:	bd70      	pop	{r4, r5, r6, pc}
 801c06c:	3308      	adds	r3, #8
 801c06e:	4419      	add	r1, r3
 801c070:	4628      	mov	r0, r5
 801c072:	692b      	ldr	r3, [r5, #16]
 801c074:	3a04      	subs	r2, #4
 801c076:	f7f2 fab5 	bl	800e5e4 <ucdr_init_buffer_origin>
 801c07a:	4628      	mov	r0, r5
 801c07c:	4902      	ldr	r1, [pc, #8]	@ (801c088 <on_full_input_buffer+0x60>)
 801c07e:	4622      	mov	r2, r4
 801c080:	f7f2 fa8c 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 801c084:	2000      	movs	r0, #0
 801c086:	bd70      	pop	{r4, r5, r6, pc}
 801c088:	0801c029 	.word	0x0801c029

0801c08c <uxr_init_input_reliable_stream>:
 801c08c:	b500      	push	{lr}
 801c08e:	e9c0 1200 	strd	r1, r2, [r0]
 801c092:	f04f 0e00 	mov.w	lr, #0
 801c096:	9a01      	ldr	r2, [sp, #4]
 801c098:	8103      	strh	r3, [r0, #8]
 801c09a:	6102      	str	r2, [r0, #16]
 801c09c:	f880 e014 	strb.w	lr, [r0, #20]
 801c0a0:	b1d3      	cbz	r3, 801c0d8 <uxr_init_input_reliable_stream+0x4c>
 801c0a2:	f8c1 e000 	str.w	lr, [r1]
 801c0a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c0aa:	f1bc 0f01 	cmp.w	ip, #1
 801c0ae:	d913      	bls.n	801c0d8 <uxr_init_input_reliable_stream+0x4c>
 801c0b0:	2301      	movs	r3, #1
 801c0b2:	fbb3 f1fc 	udiv	r1, r3, ip
 801c0b6:	fb0c 3111 	mls	r1, ip, r1, r3
 801c0ba:	b289      	uxth	r1, r1
 801c0bc:	6842      	ldr	r2, [r0, #4]
 801c0be:	fbb2 f2fc 	udiv	r2, r2, ip
 801c0c2:	fb01 f202 	mul.w	r2, r1, r2
 801c0c6:	6801      	ldr	r1, [r0, #0]
 801c0c8:	f841 e002 	str.w	lr, [r1, r2]
 801c0cc:	3301      	adds	r3, #1
 801c0ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c0d2:	b29b      	uxth	r3, r3
 801c0d4:	459c      	cmp	ip, r3
 801c0d6:	d8ec      	bhi.n	801c0b2 <uxr_init_input_reliable_stream+0x26>
 801c0d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c0dc:	60c3      	str	r3, [r0, #12]
 801c0de:	f85d fb04 	ldr.w	pc, [sp], #4
 801c0e2:	bf00      	nop

0801c0e4 <uxr_reset_input_reliable_stream>:
 801c0e4:	8901      	ldrh	r1, [r0, #8]
 801c0e6:	b1e9      	cbz	r1, 801c124 <uxr_reset_input_reliable_stream+0x40>
 801c0e8:	f04f 0c00 	mov.w	ip, #0
 801c0ec:	b500      	push	{lr}
 801c0ee:	4663      	mov	r3, ip
 801c0f0:	46e6      	mov	lr, ip
 801c0f2:	fbb3 f2f1 	udiv	r2, r3, r1
 801c0f6:	fb01 3312 	mls	r3, r1, r2, r3
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	6842      	ldr	r2, [r0, #4]
 801c0fe:	fbb2 f2f1 	udiv	r2, r2, r1
 801c102:	fb03 f202 	mul.w	r2, r3, r2
 801c106:	6803      	ldr	r3, [r0, #0]
 801c108:	f843 e002 	str.w	lr, [r3, r2]
 801c10c:	f10c 0c01 	add.w	ip, ip, #1
 801c110:	8901      	ldrh	r1, [r0, #8]
 801c112:	fa1f f38c 	uxth.w	r3, ip
 801c116:	4299      	cmp	r1, r3
 801c118:	d8eb      	bhi.n	801c0f2 <uxr_reset_input_reliable_stream+0xe>
 801c11a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c11e:	60c3      	str	r3, [r0, #12]
 801c120:	f85d fb04 	ldr.w	pc, [sp], #4
 801c124:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c128:	60c3      	str	r3, [r0, #12]
 801c12a:	4770      	bx	lr

0801c12c <uxr_receive_reliable_message>:
 801c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c130:	4604      	mov	r4, r0
 801c132:	460d      	mov	r5, r1
 801c134:	8901      	ldrh	r1, [r0, #8]
 801c136:	8980      	ldrh	r0, [r0, #12]
 801c138:	4690      	mov	r8, r2
 801c13a:	461f      	mov	r7, r3
 801c13c:	f000 fc8c 	bl	801ca58 <uxr_seq_num_add>
 801c140:	4629      	mov	r1, r5
 801c142:	4606      	mov	r6, r0
 801c144:	89a0      	ldrh	r0, [r4, #12]
 801c146:	f000 fc8f 	bl	801ca68 <uxr_seq_num_cmp>
 801c14a:	2800      	cmp	r0, #0
 801c14c:	db0a      	blt.n	801c164 <uxr_receive_reliable_message+0x38>
 801c14e:	2600      	movs	r6, #0
 801c150:	89e0      	ldrh	r0, [r4, #14]
 801c152:	4629      	mov	r1, r5
 801c154:	f000 fc88 	bl	801ca68 <uxr_seq_num_cmp>
 801c158:	2800      	cmp	r0, #0
 801c15a:	bfb8      	it	lt
 801c15c:	81e5      	strhlt	r5, [r4, #14]
 801c15e:	4630      	mov	r0, r6
 801c160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c164:	4630      	mov	r0, r6
 801c166:	4629      	mov	r1, r5
 801c168:	f000 fc7e 	bl	801ca68 <uxr_seq_num_cmp>
 801c16c:	2800      	cmp	r0, #0
 801c16e:	dbee      	blt.n	801c14e <uxr_receive_reliable_message+0x22>
 801c170:	6923      	ldr	r3, [r4, #16]
 801c172:	4640      	mov	r0, r8
 801c174:	4798      	blx	r3
 801c176:	2101      	movs	r1, #1
 801c178:	4606      	mov	r6, r0
 801c17a:	89a0      	ldrh	r0, [r4, #12]
 801c17c:	f000 fc6c 	bl	801ca58 <uxr_seq_num_add>
 801c180:	b90e      	cbnz	r6, 801c186 <uxr_receive_reliable_message+0x5a>
 801c182:	4285      	cmp	r5, r0
 801c184:	d046      	beq.n	801c214 <uxr_receive_reliable_message+0xe8>
 801c186:	8921      	ldrh	r1, [r4, #8]
 801c188:	fbb5 f2f1 	udiv	r2, r5, r1
 801c18c:	fb01 5212 	mls	r2, r1, r2, r5
 801c190:	b292      	uxth	r2, r2
 801c192:	6863      	ldr	r3, [r4, #4]
 801c194:	6820      	ldr	r0, [r4, #0]
 801c196:	fbb3 f3f1 	udiv	r3, r3, r1
 801c19a:	fb02 f303 	mul.w	r3, r2, r3
 801c19e:	3304      	adds	r3, #4
 801c1a0:	4418      	add	r0, r3
 801c1a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d1d1      	bne.n	801c14e <uxr_receive_reliable_message+0x22>
 801c1aa:	4641      	mov	r1, r8
 801c1ac:	463a      	mov	r2, r7
 801c1ae:	f001 ff38 	bl	801e022 <memcpy>
 801c1b2:	8921      	ldrh	r1, [r4, #8]
 801c1b4:	fbb5 f2f1 	udiv	r2, r5, r1
 801c1b8:	fb01 5212 	mls	r2, r1, r2, r5
 801c1bc:	b292      	uxth	r2, r2
 801c1be:	6863      	ldr	r3, [r4, #4]
 801c1c0:	fbb3 f3f1 	udiv	r3, r3, r1
 801c1c4:	fb02 f303 	mul.w	r3, r2, r3
 801c1c8:	6822      	ldr	r2, [r4, #0]
 801c1ca:	50d7      	str	r7, [r2, r3]
 801c1cc:	9a06      	ldr	r2, [sp, #24]
 801c1ce:	2301      	movs	r3, #1
 801c1d0:	7013      	strb	r3, [r2, #0]
 801c1d2:	2e00      	cmp	r6, #0
 801c1d4:	d0bb      	beq.n	801c14e <uxr_receive_reliable_message+0x22>
 801c1d6:	89a6      	ldrh	r6, [r4, #12]
 801c1d8:	2101      	movs	r1, #1
 801c1da:	4630      	mov	r0, r6
 801c1dc:	f000 fc3c 	bl	801ca58 <uxr_seq_num_add>
 801c1e0:	8921      	ldrh	r1, [r4, #8]
 801c1e2:	fbb0 f2f1 	udiv	r2, r0, r1
 801c1e6:	fb01 0212 	mls	r2, r1, r2, r0
 801c1ea:	b292      	uxth	r2, r2
 801c1ec:	6863      	ldr	r3, [r4, #4]
 801c1ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801c1f2:	4606      	mov	r6, r0
 801c1f4:	fb02 f303 	mul.w	r3, r2, r3
 801c1f8:	6820      	ldr	r0, [r4, #0]
 801c1fa:	3304      	adds	r3, #4
 801c1fc:	4418      	add	r0, r3
 801c1fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d0a3      	beq.n	801c14e <uxr_receive_reliable_message+0x22>
 801c206:	6923      	ldr	r3, [r4, #16]
 801c208:	4798      	blx	r3
 801c20a:	2802      	cmp	r0, #2
 801c20c:	d005      	beq.n	801c21a <uxr_receive_reliable_message+0xee>
 801c20e:	2801      	cmp	r0, #1
 801c210:	d0e2      	beq.n	801c1d8 <uxr_receive_reliable_message+0xac>
 801c212:	e79c      	b.n	801c14e <uxr_receive_reliable_message+0x22>
 801c214:	9b06      	ldr	r3, [sp, #24]
 801c216:	81a5      	strh	r5, [r4, #12]
 801c218:	701e      	strb	r6, [r3, #0]
 801c21a:	2601      	movs	r6, #1
 801c21c:	e798      	b.n	801c150 <uxr_receive_reliable_message+0x24>
 801c21e:	bf00      	nop

0801c220 <uxr_next_input_reliable_buffer_available>:
 801c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c224:	4604      	mov	r4, r0
 801c226:	460f      	mov	r7, r1
 801c228:	8980      	ldrh	r0, [r0, #12]
 801c22a:	2101      	movs	r1, #1
 801c22c:	4690      	mov	r8, r2
 801c22e:	f000 fc13 	bl	801ca58 <uxr_seq_num_add>
 801c232:	8921      	ldrh	r1, [r4, #8]
 801c234:	fbb0 f2f1 	udiv	r2, r0, r1
 801c238:	fb01 0212 	mls	r2, r1, r2, r0
 801c23c:	b292      	uxth	r2, r2
 801c23e:	6863      	ldr	r3, [r4, #4]
 801c240:	6826      	ldr	r6, [r4, #0]
 801c242:	fbb3 f3f1 	udiv	r3, r3, r1
 801c246:	fb02 f303 	mul.w	r3, r2, r3
 801c24a:	3304      	adds	r3, #4
 801c24c:	441e      	add	r6, r3
 801c24e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801c252:	f1b9 0f00 	cmp.w	r9, #0
 801c256:	d023      	beq.n	801c2a0 <uxr_next_input_reliable_buffer_available+0x80>
 801c258:	6923      	ldr	r3, [r4, #16]
 801c25a:	4605      	mov	r5, r0
 801c25c:	4630      	mov	r0, r6
 801c25e:	4798      	blx	r3
 801c260:	4682      	mov	sl, r0
 801c262:	b300      	cbz	r0, 801c2a6 <uxr_next_input_reliable_buffer_available+0x86>
 801c264:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801c268:	2101      	movs	r1, #1
 801c26a:	4650      	mov	r0, sl
 801c26c:	f000 fbf4 	bl	801ca58 <uxr_seq_num_add>
 801c270:	8921      	ldrh	r1, [r4, #8]
 801c272:	fbb0 f2f1 	udiv	r2, r0, r1
 801c276:	4682      	mov	sl, r0
 801c278:	fb01 0212 	mls	r2, r1, r2, r0
 801c27c:	e9d4 0300 	ldrd	r0, r3, [r4]
 801c280:	b292      	uxth	r2, r2
 801c282:	fbb3 f3f1 	udiv	r3, r3, r1
 801c286:	fb02 f303 	mul.w	r3, r2, r3
 801c28a:	3304      	adds	r3, #4
 801c28c:	4418      	add	r0, r3
 801c28e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c292:	b12b      	cbz	r3, 801c2a0 <uxr_next_input_reliable_buffer_available+0x80>
 801c294:	6923      	ldr	r3, [r4, #16]
 801c296:	4798      	blx	r3
 801c298:	2802      	cmp	r0, #2
 801c29a:	d01b      	beq.n	801c2d4 <uxr_next_input_reliable_buffer_available+0xb4>
 801c29c:	2801      	cmp	r0, #1
 801c29e:	d0e3      	beq.n	801c268 <uxr_next_input_reliable_buffer_available+0x48>
 801c2a0:	2000      	movs	r0, #0
 801c2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2a6:	464a      	mov	r2, r9
 801c2a8:	4631      	mov	r1, r6
 801c2aa:	4638      	mov	r0, r7
 801c2ac:	f7f2 f9a2 	bl	800e5f4 <ucdr_init_buffer>
 801c2b0:	8921      	ldrh	r1, [r4, #8]
 801c2b2:	fbb5 f2f1 	udiv	r2, r5, r1
 801c2b6:	fb01 5212 	mls	r2, r1, r2, r5
 801c2ba:	b292      	uxth	r2, r2
 801c2bc:	6863      	ldr	r3, [r4, #4]
 801c2be:	fbb3 f3f1 	udiv	r3, r3, r1
 801c2c2:	fb02 f303 	mul.w	r3, r2, r3
 801c2c6:	6822      	ldr	r2, [r4, #0]
 801c2c8:	f842 a003 	str.w	sl, [r2, r3]
 801c2cc:	81a5      	strh	r5, [r4, #12]
 801c2ce:	2001      	movs	r0, #1
 801c2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2d4:	eb06 0108 	add.w	r1, r6, r8
 801c2d8:	8926      	ldrh	r6, [r4, #8]
 801c2da:	fbb5 f0f6 	udiv	r0, r5, r6
 801c2de:	fb06 5010 	mls	r0, r6, r0, r5
 801c2e2:	b280      	uxth	r0, r0
 801c2e4:	6863      	ldr	r3, [r4, #4]
 801c2e6:	fbb3 f3f6 	udiv	r3, r3, r6
 801c2ea:	fb00 f303 	mul.w	r3, r0, r3
 801c2ee:	6820      	ldr	r0, [r4, #0]
 801c2f0:	2500      	movs	r5, #0
 801c2f2:	50c5      	str	r5, [r0, r3]
 801c2f4:	eba9 0208 	sub.w	r2, r9, r8
 801c2f8:	4638      	mov	r0, r7
 801c2fa:	f7f2 f97b 	bl	800e5f4 <ucdr_init_buffer>
 801c2fe:	4903      	ldr	r1, [pc, #12]	@ (801c30c <uxr_next_input_reliable_buffer_available+0xec>)
 801c300:	4622      	mov	r2, r4
 801c302:	4638      	mov	r0, r7
 801c304:	f7f2 f94a 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 801c308:	4655      	mov	r5, sl
 801c30a:	e7df      	b.n	801c2cc <uxr_next_input_reliable_buffer_available+0xac>
 801c30c:	0801c029 	.word	0x0801c029

0801c310 <uxr_process_heartbeat>:
 801c310:	b538      	push	{r3, r4, r5, lr}
 801c312:	4611      	mov	r1, r2
 801c314:	4604      	mov	r4, r0
 801c316:	89c0      	ldrh	r0, [r0, #14]
 801c318:	4615      	mov	r5, r2
 801c31a:	f000 fba5 	bl	801ca68 <uxr_seq_num_cmp>
 801c31e:	2800      	cmp	r0, #0
 801c320:	bfb8      	it	lt
 801c322:	81e5      	strhlt	r5, [r4, #14]
 801c324:	bd38      	pop	{r3, r4, r5, pc}
 801c326:	bf00      	nop

0801c328 <uxr_compute_acknack>:
 801c328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c32c:	8903      	ldrh	r3, [r0, #8]
 801c32e:	8985      	ldrh	r5, [r0, #12]
 801c330:	4604      	mov	r4, r0
 801c332:	460e      	mov	r6, r1
 801c334:	2b00      	cmp	r3, #0
 801c336:	d048      	beq.n	801c3ca <uxr_compute_acknack+0xa2>
 801c338:	4628      	mov	r0, r5
 801c33a:	2701      	movs	r7, #1
 801c33c:	e003      	b.n	801c346 <uxr_compute_acknack+0x1e>
 801c33e:	4567      	cmp	r7, ip
 801c340:	d243      	bcs.n	801c3ca <uxr_compute_acknack+0xa2>
 801c342:	89a0      	ldrh	r0, [r4, #12]
 801c344:	3701      	adds	r7, #1
 801c346:	b2b9      	uxth	r1, r7
 801c348:	f000 fb86 	bl	801ca58 <uxr_seq_num_add>
 801c34c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c350:	fbb0 f2fc 	udiv	r2, r0, ip
 801c354:	e9d4 1300 	ldrd	r1, r3, [r4]
 801c358:	fb0c 0212 	mls	r2, ip, r2, r0
 801c35c:	b292      	uxth	r2, r2
 801c35e:	fbb3 f3fc 	udiv	r3, r3, ip
 801c362:	fb02 f303 	mul.w	r3, r2, r3
 801c366:	58cb      	ldr	r3, [r1, r3]
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d1e8      	bne.n	801c33e <uxr_compute_acknack+0x16>
 801c36c:	8030      	strh	r0, [r6, #0]
 801c36e:	2101      	movs	r1, #1
 801c370:	89e5      	ldrh	r5, [r4, #14]
 801c372:	f000 fb75 	bl	801ca60 <uxr_seq_num_sub>
 801c376:	4601      	mov	r1, r0
 801c378:	4628      	mov	r0, r5
 801c37a:	f000 fb71 	bl	801ca60 <uxr_seq_num_sub>
 801c37e:	4605      	mov	r5, r0
 801c380:	4607      	mov	r7, r0
 801c382:	b1f8      	cbz	r0, 801c3c4 <uxr_compute_acknack+0x9c>
 801c384:	f04f 0900 	mov.w	r9, #0
 801c388:	464d      	mov	r5, r9
 801c38a:	f04f 0801 	mov.w	r8, #1
 801c38e:	fa1f f189 	uxth.w	r1, r9
 801c392:	8830      	ldrh	r0, [r6, #0]
 801c394:	f000 fb60 	bl	801ca58 <uxr_seq_num_add>
 801c398:	8921      	ldrh	r1, [r4, #8]
 801c39a:	fbb0 f3f1 	udiv	r3, r0, r1
 801c39e:	fb03 0011 	mls	r0, r3, r1, r0
 801c3a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c3a6:	b280      	uxth	r0, r0
 801c3a8:	fbb3 f3f1 	udiv	r3, r3, r1
 801c3ac:	fb00 f303 	mul.w	r3, r0, r3
 801c3b0:	fa08 f109 	lsl.w	r1, r8, r9
 801c3b4:	58d3      	ldr	r3, [r2, r3]
 801c3b6:	f109 0901 	add.w	r9, r9, #1
 801c3ba:	b90b      	cbnz	r3, 801c3c0 <uxr_compute_acknack+0x98>
 801c3bc:	4329      	orrs	r1, r5
 801c3be:	b28d      	uxth	r5, r1
 801c3c0:	454f      	cmp	r7, r9
 801c3c2:	d1e4      	bne.n	801c38e <uxr_compute_acknack+0x66>
 801c3c4:	4628      	mov	r0, r5
 801c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3ca:	4628      	mov	r0, r5
 801c3cc:	e7ce      	b.n	801c36c <uxr_compute_acknack+0x44>
 801c3ce:	bf00      	nop

0801c3d0 <uxr_init_output_best_effort_stream>:
 801c3d0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801c3d4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801c3d8:	6001      	str	r1, [r0, #0]
 801c3da:	7303      	strb	r3, [r0, #12]
 801c3dc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c3e0:	4770      	bx	lr
 801c3e2:	bf00      	nop

0801c3e4 <uxr_reset_output_best_effort_stream>:
 801c3e4:	7b02      	ldrb	r2, [r0, #12]
 801c3e6:	6042      	str	r2, [r0, #4]
 801c3e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c3ec:	81c3      	strh	r3, [r0, #14]
 801c3ee:	4770      	bx	lr

0801c3f0 <uxr_prepare_best_effort_buffer_to_write>:
 801c3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3f2:	4604      	mov	r4, r0
 801c3f4:	b083      	sub	sp, #12
 801c3f6:	6840      	ldr	r0, [r0, #4]
 801c3f8:	460d      	mov	r5, r1
 801c3fa:	4616      	mov	r6, r2
 801c3fc:	f7fa fda0 	bl	8016f40 <uxr_submessage_padding>
 801c400:	6863      	ldr	r3, [r4, #4]
 801c402:	4418      	add	r0, r3
 801c404:	68a3      	ldr	r3, [r4, #8]
 801c406:	1942      	adds	r2, r0, r5
 801c408:	4293      	cmp	r3, r2
 801c40a:	bf2c      	ite	cs
 801c40c:	2701      	movcs	r7, #1
 801c40e:	2700      	movcc	r7, #0
 801c410:	d202      	bcs.n	801c418 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801c412:	4638      	mov	r0, r7
 801c414:	b003      	add	sp, #12
 801c416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c418:	9000      	str	r0, [sp, #0]
 801c41a:	6821      	ldr	r1, [r4, #0]
 801c41c:	4630      	mov	r0, r6
 801c41e:	2300      	movs	r3, #0
 801c420:	f7f2 f8d6 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801c424:	6863      	ldr	r3, [r4, #4]
 801c426:	4638      	mov	r0, r7
 801c428:	442b      	add	r3, r5
 801c42a:	6063      	str	r3, [r4, #4]
 801c42c:	b003      	add	sp, #12
 801c42e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c430 <uxr_prepare_best_effort_buffer_to_send>:
 801c430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c434:	4604      	mov	r4, r0
 801c436:	461d      	mov	r5, r3
 801c438:	6840      	ldr	r0, [r0, #4]
 801c43a:	7b23      	ldrb	r3, [r4, #12]
 801c43c:	4298      	cmp	r0, r3
 801c43e:	bf8c      	ite	hi
 801c440:	2601      	movhi	r6, #1
 801c442:	2600      	movls	r6, #0
 801c444:	d802      	bhi.n	801c44c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801c446:	4630      	mov	r0, r6
 801c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c44c:	4688      	mov	r8, r1
 801c44e:	89e0      	ldrh	r0, [r4, #14]
 801c450:	2101      	movs	r1, #1
 801c452:	4617      	mov	r7, r2
 801c454:	f000 fb00 	bl	801ca58 <uxr_seq_num_add>
 801c458:	6823      	ldr	r3, [r4, #0]
 801c45a:	81e0      	strh	r0, [r4, #14]
 801c45c:	8028      	strh	r0, [r5, #0]
 801c45e:	f8c8 3000 	str.w	r3, [r8]
 801c462:	6863      	ldr	r3, [r4, #4]
 801c464:	603b      	str	r3, [r7, #0]
 801c466:	7b23      	ldrb	r3, [r4, #12]
 801c468:	6063      	str	r3, [r4, #4]
 801c46a:	4630      	mov	r0, r6
 801c46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c470 <on_full_output_buffer>:
 801c470:	b538      	push	{r3, r4, r5, lr}
 801c472:	460c      	mov	r4, r1
 801c474:	6803      	ldr	r3, [r0, #0]
 801c476:	6809      	ldr	r1, [r1, #0]
 801c478:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c47c:	6862      	ldr	r2, [r4, #4]
 801c47e:	fbb2 f2fc 	udiv	r2, r2, ip
 801c482:	1a5b      	subs	r3, r3, r1
 801c484:	fbb3 f3f2 	udiv	r3, r3, r2
 801c488:	3301      	adds	r3, #1
 801c48a:	b29b      	uxth	r3, r3
 801c48c:	fbb3 fefc 	udiv	lr, r3, ip
 801c490:	fb0c 331e 	mls	r3, ip, lr, r3
 801c494:	b29b      	uxth	r3, r3
 801c496:	fb02 f303 	mul.w	r3, r2, r3
 801c49a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801c49e:	58ca      	ldr	r2, [r1, r3]
 801c4a0:	4463      	add	r3, ip
 801c4a2:	eba2 020c 	sub.w	r2, r2, ip
 801c4a6:	3308      	adds	r3, #8
 801c4a8:	4605      	mov	r5, r0
 801c4aa:	4419      	add	r1, r3
 801c4ac:	3a04      	subs	r2, #4
 801c4ae:	6903      	ldr	r3, [r0, #16]
 801c4b0:	f7f2 f898 	bl	800e5e4 <ucdr_init_buffer_origin>
 801c4b4:	4628      	mov	r0, r5
 801c4b6:	4903      	ldr	r1, [pc, #12]	@ (801c4c4 <on_full_output_buffer+0x54>)
 801c4b8:	4622      	mov	r2, r4
 801c4ba:	f7f2 f86f 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 801c4be:	2000      	movs	r0, #0
 801c4c0:	bd38      	pop	{r3, r4, r5, pc}
 801c4c2:	bf00      	nop
 801c4c4:	0801c471 	.word	0x0801c471

0801c4c8 <uxr_init_output_reliable_stream>:
 801c4c8:	b410      	push	{r4}
 801c4ca:	f89d c004 	ldrb.w	ip, [sp, #4]
 801c4ce:	8103      	strh	r3, [r0, #8]
 801c4d0:	e9c0 1200 	strd	r1, r2, [r0]
 801c4d4:	f880 c00c 	strb.w	ip, [r0, #12]
 801c4d8:	b1d3      	cbz	r3, 801c510 <uxr_init_output_reliable_stream+0x48>
 801c4da:	f8c1 c000 	str.w	ip, [r1]
 801c4de:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c4e2:	f1bc 0f01 	cmp.w	ip, #1
 801c4e6:	d913      	bls.n	801c510 <uxr_init_output_reliable_stream+0x48>
 801c4e8:	2301      	movs	r3, #1
 801c4ea:	fbb3 f1fc 	udiv	r1, r3, ip
 801c4ee:	fb0c 3111 	mls	r1, ip, r1, r3
 801c4f2:	b289      	uxth	r1, r1
 801c4f4:	6842      	ldr	r2, [r0, #4]
 801c4f6:	6804      	ldr	r4, [r0, #0]
 801c4f8:	fbb2 f2fc 	udiv	r2, r2, ip
 801c4fc:	fb01 f202 	mul.w	r2, r1, r2
 801c500:	7b01      	ldrb	r1, [r0, #12]
 801c502:	50a1      	str	r1, [r4, r2]
 801c504:	3301      	adds	r3, #1
 801c506:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	459c      	cmp	ip, r3
 801c50e:	d8ec      	bhi.n	801c4ea <uxr_init_output_reliable_stream+0x22>
 801c510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c514:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c518:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c51c:	4905      	ldr	r1, [pc, #20]	@ (801c534 <uxr_init_output_reliable_stream+0x6c>)
 801c51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c522:	f8c0 100e 	str.w	r1, [r0, #14]
 801c526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c52a:	2300      	movs	r3, #0
 801c52c:	8242      	strh	r2, [r0, #18]
 801c52e:	8403      	strh	r3, [r0, #32]
 801c530:	4770      	bx	lr
 801c532:	bf00      	nop
 801c534:	ffff0000 	.word	0xffff0000

0801c538 <uxr_reset_output_reliable_stream>:
 801c538:	8901      	ldrh	r1, [r0, #8]
 801c53a:	b1b1      	cbz	r1, 801c56a <uxr_reset_output_reliable_stream+0x32>
 801c53c:	f04f 0c00 	mov.w	ip, #0
 801c540:	4663      	mov	r3, ip
 801c542:	fbb3 f2f1 	udiv	r2, r3, r1
 801c546:	fb01 3312 	mls	r3, r1, r2, r3
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	6842      	ldr	r2, [r0, #4]
 801c54e:	fbb2 f2f1 	udiv	r2, r2, r1
 801c552:	6801      	ldr	r1, [r0, #0]
 801c554:	fb03 f202 	mul.w	r2, r3, r2
 801c558:	7b03      	ldrb	r3, [r0, #12]
 801c55a:	508b      	str	r3, [r1, r2]
 801c55c:	f10c 0c01 	add.w	ip, ip, #1
 801c560:	8901      	ldrh	r1, [r0, #8]
 801c562:	fa1f f38c 	uxth.w	r3, ip
 801c566:	4299      	cmp	r1, r3
 801c568:	d8eb      	bhi.n	801c542 <uxr_reset_output_reliable_stream+0xa>
 801c56a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c56e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c572:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801c576:	4904      	ldr	r1, [pc, #16]	@ (801c588 <uxr_reset_output_reliable_stream+0x50>)
 801c578:	f8c0 100e 	str.w	r1, [r0, #14]
 801c57c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c580:	2300      	movs	r3, #0
 801c582:	8242      	strh	r2, [r0, #18]
 801c584:	8403      	strh	r3, [r0, #32]
 801c586:	4770      	bx	lr
 801c588:	ffff0000 	.word	0xffff0000

0801c58c <uxr_prepare_reliable_buffer_to_write>:
 801c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c590:	4604      	mov	r4, r0
 801c592:	b091      	sub	sp, #68	@ 0x44
 801c594:	8900      	ldrh	r0, [r0, #8]
 801c596:	89e7      	ldrh	r7, [r4, #14]
 801c598:	6823      	ldr	r3, [r4, #0]
 801c59a:	9204      	str	r2, [sp, #16]
 801c59c:	fbb7 f2f0 	udiv	r2, r7, r0
 801c5a0:	fb00 7212 	mls	r2, r0, r2, r7
 801c5a4:	b292      	uxth	r2, r2
 801c5a6:	6865      	ldr	r5, [r4, #4]
 801c5a8:	fbb5 f5f0 	udiv	r5, r5, r0
 801c5ac:	fb05 3202 	mla	r2, r5, r2, r3
 801c5b0:	3204      	adds	r2, #4
 801c5b2:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801c5b6:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801c5ba:	9203      	str	r2, [sp, #12]
 801c5bc:	4688      	mov	r8, r1
 801c5be:	f1a5 0904 	sub.w	r9, r5, #4
 801c5c2:	2800      	cmp	r0, #0
 801c5c4:	f000 8143 	beq.w	801c84e <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801c5c8:	2100      	movs	r1, #0
 801c5ca:	460e      	mov	r6, r1
 801c5cc:	b28a      	uxth	r2, r1
 801c5ce:	fbb2 fcf0 	udiv	ip, r2, r0
 801c5d2:	fb00 221c 	mls	r2, r0, ip, r2
 801c5d6:	b292      	uxth	r2, r2
 801c5d8:	fb05 f202 	mul.w	r2, r5, r2
 801c5dc:	3101      	adds	r1, #1
 801c5de:	589a      	ldr	r2, [r3, r2]
 801c5e0:	455a      	cmp	r2, fp
 801c5e2:	bf04      	itt	eq
 801c5e4:	3601      	addeq	r6, #1
 801c5e6:	b2b6      	uxtheq	r6, r6
 801c5e8:	4281      	cmp	r1, r0
 801c5ea:	d1ef      	bne.n	801c5cc <uxr_prepare_reliable_buffer_to_write+0x40>
 801c5ec:	4650      	mov	r0, sl
 801c5ee:	2104      	movs	r1, #4
 801c5f0:	9605      	str	r6, [sp, #20]
 801c5f2:	f7f2 f803 	bl	800e5fc <ucdr_alignment>
 801c5f6:	4482      	add	sl, r0
 801c5f8:	eb0a 0208 	add.w	r2, sl, r8
 801c5fc:	454a      	cmp	r2, r9
 801c5fe:	f240 80ca 	bls.w	801c796 <uxr_prepare_reliable_buffer_to_write+0x20a>
 801c602:	7b22      	ldrb	r2, [r4, #12]
 801c604:	4442      	add	r2, r8
 801c606:	454a      	cmp	r2, r9
 801c608:	f240 80b2 	bls.w	801c770 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801c60c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801c610:	32fc      	adds	r2, #252	@ 0xfc
 801c612:	fa1f f389 	uxth.w	r3, r9
 801c616:	441a      	add	r2, r3
 801c618:	b292      	uxth	r2, r2
 801c61a:	fb06 fb02 	mul.w	fp, r6, r2
 801c61e:	45c3      	cmp	fp, r8
 801c620:	9205      	str	r2, [sp, #20]
 801c622:	9206      	str	r2, [sp, #24]
 801c624:	f0c0 80b3 	bcc.w	801c78e <uxr_prepare_reliable_buffer_to_write+0x202>
 801c628:	f10a 0204 	add.w	r2, sl, #4
 801c62c:	454a      	cmp	r2, r9
 801c62e:	f080 80db 	bcs.w	801c7e8 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801c632:	f1a3 0b04 	sub.w	fp, r3, #4
 801c636:	ebab 0b0a 	sub.w	fp, fp, sl
 801c63a:	9b05      	ldr	r3, [sp, #20]
 801c63c:	fa1f fb8b 	uxth.w	fp, fp
 801c640:	eba8 080b 	sub.w	r8, r8, fp
 801c644:	fbb8 fcf3 	udiv	ip, r8, r3
 801c648:	fb03 831c 	mls	r3, r3, ip, r8
 801c64c:	fa1f fc8c 	uxth.w	ip, ip
 801c650:	2b00      	cmp	r3, #0
 801c652:	f040 80c1 	bne.w	801c7d8 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801c656:	45b4      	cmp	ip, r6
 801c658:	f200 8099 	bhi.w	801c78e <uxr_prepare_reliable_buffer_to_write+0x202>
 801c65c:	f10d 0820 	add.w	r8, sp, #32
 801c660:	f1bc 0f00 	cmp.w	ip, #0
 801c664:	d040      	beq.n	801c6e8 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801c666:	f8cd a01c 	str.w	sl, [sp, #28]
 801c66a:	2600      	movs	r6, #0
 801c66c:	f8dd a014 	ldr.w	sl, [sp, #20]
 801c670:	9505      	str	r5, [sp, #20]
 801c672:	f10d 0820 	add.w	r8, sp, #32
 801c676:	4665      	mov	r5, ip
 801c678:	e000      	b.n	801c67c <uxr_prepare_reliable_buffer_to_write+0xf0>
 801c67a:	46d3      	mov	fp, sl
 801c67c:	8921      	ldrh	r1, [r4, #8]
 801c67e:	fbb7 f2f1 	udiv	r2, r7, r1
 801c682:	fb01 7212 	mls	r2, r1, r2, r7
 801c686:	b292      	uxth	r2, r2
 801c688:	6863      	ldr	r3, [r4, #4]
 801c68a:	fbb3 f3f1 	udiv	r3, r3, r1
 801c68e:	6821      	ldr	r1, [r4, #0]
 801c690:	fb02 f303 	mul.w	r3, r2, r3
 801c694:	3304      	adds	r3, #4
 801c696:	4419      	add	r1, r3
 801c698:	4640      	mov	r0, r8
 801c69a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801c69e:	9200      	str	r2, [sp, #0]
 801c6a0:	2300      	movs	r3, #0
 801c6a2:	464a      	mov	r2, r9
 801c6a4:	f7f1 ff94 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801c6a8:	465a      	mov	r2, fp
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	210d      	movs	r1, #13
 801c6ae:	4640      	mov	r0, r8
 801c6b0:	f7fa fc06 	bl	8016ec0 <uxr_buffer_submessage_header>
 801c6b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c6b8:	fbb7 f2fc 	udiv	r2, r7, ip
 801c6bc:	fb0c 7212 	mls	r2, ip, r2, r7
 801c6c0:	b292      	uxth	r2, r2
 801c6c2:	6863      	ldr	r3, [r4, #4]
 801c6c4:	fbb3 f3fc 	udiv	r3, r3, ip
 801c6c8:	fb02 f303 	mul.w	r3, r2, r3
 801c6cc:	6822      	ldr	r2, [r4, #0]
 801c6ce:	4638      	mov	r0, r7
 801c6d0:	f842 9003 	str.w	r9, [r2, r3]
 801c6d4:	2101      	movs	r1, #1
 801c6d6:	f000 f9bf 	bl	801ca58 <uxr_seq_num_add>
 801c6da:	3601      	adds	r6, #1
 801c6dc:	42ae      	cmp	r6, r5
 801c6de:	4607      	mov	r7, r0
 801c6e0:	d1cb      	bne.n	801c67a <uxr_prepare_reliable_buffer_to_write+0xee>
 801c6e2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c6e6:	9d05      	ldr	r5, [sp, #20]
 801c6e8:	8920      	ldrh	r0, [r4, #8]
 801c6ea:	fbb7 f1f0 	udiv	r1, r7, r0
 801c6ee:	fb00 7111 	mls	r1, r0, r1, r7
 801c6f2:	b289      	uxth	r1, r1
 801c6f4:	6863      	ldr	r3, [r4, #4]
 801c6f6:	fbb3 f3f0 	udiv	r3, r3, r0
 801c6fa:	fb01 f303 	mul.w	r3, r1, r3
 801c6fe:	6821      	ldr	r1, [r4, #0]
 801c700:	3304      	adds	r3, #4
 801c702:	4419      	add	r1, r3
 801c704:	464a      	mov	r2, r9
 801c706:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801c70a:	9000      	str	r0, [sp, #0]
 801c70c:	2300      	movs	r3, #0
 801c70e:	4640      	mov	r0, r8
 801c710:	f7f1 ff5e 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801c714:	4640      	mov	r0, r8
 801c716:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c71a:	2302      	movs	r3, #2
 801c71c:	fa1f f288 	uxth.w	r2, r8
 801c720:	210d      	movs	r1, #13
 801c722:	f7fa fbcd 	bl	8016ec0 <uxr_buffer_submessage_header>
 801c726:	8926      	ldrh	r6, [r4, #8]
 801c728:	9b03      	ldr	r3, [sp, #12]
 801c72a:	7b20      	ldrb	r0, [r4, #12]
 801c72c:	f1a5 0208 	sub.w	r2, r5, #8
 801c730:	f10a 0104 	add.w	r1, sl, #4
 801c734:	fbb7 f5f6 	udiv	r5, r7, r6
 801c738:	fb06 7515 	mls	r5, r6, r5, r7
 801c73c:	440b      	add	r3, r1
 801c73e:	b2ad      	uxth	r5, r5
 801c740:	4619      	mov	r1, r3
 801c742:	3004      	adds	r0, #4
 801c744:	6863      	ldr	r3, [r4, #4]
 801c746:	fbb3 f3f6 	udiv	r3, r3, r6
 801c74a:	fb05 f303 	mul.w	r3, r5, r3
 801c74e:	6825      	ldr	r5, [r4, #0]
 801c750:	4440      	add	r0, r8
 801c752:	50e8      	str	r0, [r5, r3]
 801c754:	9d04      	ldr	r5, [sp, #16]
 801c756:	eba2 020a 	sub.w	r2, r2, sl
 801c75a:	4628      	mov	r0, r5
 801c75c:	f7f1 ff4a 	bl	800e5f4 <ucdr_init_buffer>
 801c760:	493c      	ldr	r1, [pc, #240]	@ (801c854 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801c762:	4622      	mov	r2, r4
 801c764:	4628      	mov	r0, r5
 801c766:	f7f1 ff19 	bl	800e59c <ucdr_set_on_full_buffer_callback>
 801c76a:	81e7      	strh	r7, [r4, #14]
 801c76c:	2001      	movs	r0, #1
 801c76e:	e00f      	b.n	801c790 <uxr_prepare_reliable_buffer_to_write+0x204>
 801c770:	2101      	movs	r1, #1
 801c772:	89e0      	ldrh	r0, [r4, #14]
 801c774:	f000 f970 	bl	801ca58 <uxr_seq_num_add>
 801c778:	8921      	ldrh	r1, [r4, #8]
 801c77a:	4605      	mov	r5, r0
 801c77c:	8a60      	ldrh	r0, [r4, #18]
 801c77e:	f000 f96b 	bl	801ca58 <uxr_seq_num_add>
 801c782:	4601      	mov	r1, r0
 801c784:	4628      	mov	r0, r5
 801c786:	f000 f96f 	bl	801ca68 <uxr_seq_num_cmp>
 801c78a:	2800      	cmp	r0, #0
 801c78c:	dd45      	ble.n	801c81a <uxr_prepare_reliable_buffer_to_write+0x28e>
 801c78e:	2000      	movs	r0, #0
 801c790:	b011      	add	sp, #68	@ 0x44
 801c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c796:	8921      	ldrh	r1, [r4, #8]
 801c798:	8a60      	ldrh	r0, [r4, #18]
 801c79a:	9205      	str	r2, [sp, #20]
 801c79c:	f000 f95c 	bl	801ca58 <uxr_seq_num_add>
 801c7a0:	4601      	mov	r1, r0
 801c7a2:	4638      	mov	r0, r7
 801c7a4:	f000 f960 	bl	801ca68 <uxr_seq_num_cmp>
 801c7a8:	2800      	cmp	r0, #0
 801c7aa:	9a05      	ldr	r2, [sp, #20]
 801c7ac:	dcef      	bgt.n	801c78e <uxr_prepare_reliable_buffer_to_write+0x202>
 801c7ae:	8926      	ldrh	r6, [r4, #8]
 801c7b0:	fbb7 f5f6 	udiv	r5, r7, r6
 801c7b4:	fb06 7515 	mls	r5, r6, r5, r7
 801c7b8:	b2ad      	uxth	r5, r5
 801c7ba:	6863      	ldr	r3, [r4, #4]
 801c7bc:	6824      	ldr	r4, [r4, #0]
 801c7be:	fbb3 f3f6 	udiv	r3, r3, r6
 801c7c2:	fb05 f303 	mul.w	r3, r5, r3
 801c7c6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801c7ca:	50e2      	str	r2, [r4, r3]
 801c7cc:	2300      	movs	r3, #0
 801c7ce:	f8cd a000 	str.w	sl, [sp]
 801c7d2:	f7f1 fefd 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801c7d6:	e7c9      	b.n	801c76c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801c7d8:	f10c 0c01 	add.w	ip, ip, #1
 801c7dc:	fa1f fc8c 	uxth.w	ip, ip
 801c7e0:	45b4      	cmp	ip, r6
 801c7e2:	9306      	str	r3, [sp, #24]
 801c7e4:	d8d3      	bhi.n	801c78e <uxr_prepare_reliable_buffer_to_write+0x202>
 801c7e6:	e739      	b.n	801c65c <uxr_prepare_reliable_buffer_to_write+0xd0>
 801c7e8:	4638      	mov	r0, r7
 801c7ea:	2101      	movs	r1, #1
 801c7ec:	9307      	str	r3, [sp, #28]
 801c7ee:	f000 f933 	bl	801ca58 <uxr_seq_num_add>
 801c7f2:	8921      	ldrh	r1, [r4, #8]
 801c7f4:	6862      	ldr	r2, [r4, #4]
 801c7f6:	4607      	mov	r7, r0
 801c7f8:	fbb0 f0f1 	udiv	r0, r0, r1
 801c7fc:	fb01 7010 	mls	r0, r1, r0, r7
 801c800:	b280      	uxth	r0, r0
 801c802:	fbb2 f1f1 	udiv	r1, r2, r1
 801c806:	6822      	ldr	r2, [r4, #0]
 801c808:	fb00 f101 	mul.w	r1, r0, r1
 801c80c:	3104      	adds	r1, #4
 801c80e:	1853      	adds	r3, r2, r1
 801c810:	9303      	str	r3, [sp, #12]
 801c812:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801c816:	9b07      	ldr	r3, [sp, #28]
 801c818:	e70b      	b.n	801c632 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801c81a:	8921      	ldrh	r1, [r4, #8]
 801c81c:	fbb5 f2f1 	udiv	r2, r5, r1
 801c820:	fb01 5212 	mls	r2, r1, r2, r5
 801c824:	b292      	uxth	r2, r2
 801c826:	6863      	ldr	r3, [r4, #4]
 801c828:	fbb3 f3f1 	udiv	r3, r3, r1
 801c82c:	6821      	ldr	r1, [r4, #0]
 801c82e:	9804      	ldr	r0, [sp, #16]
 801c830:	fb02 f303 	mul.w	r3, r2, r3
 801c834:	3304      	adds	r3, #4
 801c836:	7b22      	ldrb	r2, [r4, #12]
 801c838:	4419      	add	r1, r3
 801c83a:	4442      	add	r2, r8
 801c83c:	f841 2c04 	str.w	r2, [r1, #-4]
 801c840:	7b23      	ldrb	r3, [r4, #12]
 801c842:	9300      	str	r3, [sp, #0]
 801c844:	2300      	movs	r3, #0
 801c846:	f7f1 fec3 	bl	800e5d0 <ucdr_init_buffer_origin_offset>
 801c84a:	81e5      	strh	r5, [r4, #14]
 801c84c:	e78e      	b.n	801c76c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801c84e:	4606      	mov	r6, r0
 801c850:	e6cc      	b.n	801c5ec <uxr_prepare_reliable_buffer_to_write+0x60>
 801c852:	bf00      	nop
 801c854:	0801c471 	.word	0x0801c471

0801c858 <uxr_prepare_next_reliable_buffer_to_send>:
 801c858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c85a:	4604      	mov	r4, r0
 801c85c:	460f      	mov	r7, r1
 801c85e:	8a00      	ldrh	r0, [r0, #16]
 801c860:	2101      	movs	r1, #1
 801c862:	4615      	mov	r5, r2
 801c864:	461e      	mov	r6, r3
 801c866:	f000 f8f7 	bl	801ca58 <uxr_seq_num_add>
 801c86a:	8030      	strh	r0, [r6, #0]
 801c86c:	8922      	ldrh	r2, [r4, #8]
 801c86e:	fbb0 f3f2 	udiv	r3, r0, r2
 801c872:	fb02 0c13 	mls	ip, r2, r3, r0
 801c876:	fa1f fc8c 	uxth.w	ip, ip
 801c87a:	6863      	ldr	r3, [r4, #4]
 801c87c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c880:	fb0c fc03 	mul.w	ip, ip, r3
 801c884:	6823      	ldr	r3, [r4, #0]
 801c886:	89e1      	ldrh	r1, [r4, #14]
 801c888:	f10c 0c04 	add.w	ip, ip, #4
 801c88c:	4463      	add	r3, ip
 801c88e:	603b      	str	r3, [r7, #0]
 801c890:	6823      	ldr	r3, [r4, #0]
 801c892:	4463      	add	r3, ip
 801c894:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c898:	602b      	str	r3, [r5, #0]
 801c89a:	f000 f8e5 	bl	801ca68 <uxr_seq_num_cmp>
 801c89e:	2800      	cmp	r0, #0
 801c8a0:	dd01      	ble.n	801c8a6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8a6:	7b23      	ldrb	r3, [r4, #12]
 801c8a8:	682a      	ldr	r2, [r5, #0]
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d9f9      	bls.n	801c8a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c8ae:	8a61      	ldrh	r1, [r4, #18]
 801c8b0:	8a20      	ldrh	r0, [r4, #16]
 801c8b2:	f000 f8d5 	bl	801ca60 <uxr_seq_num_sub>
 801c8b6:	8923      	ldrh	r3, [r4, #8]
 801c8b8:	4283      	cmp	r3, r0
 801c8ba:	d0f2      	beq.n	801c8a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801c8bc:	8830      	ldrh	r0, [r6, #0]
 801c8be:	89e3      	ldrh	r3, [r4, #14]
 801c8c0:	8220      	strh	r0, [r4, #16]
 801c8c2:	4298      	cmp	r0, r3
 801c8c4:	d001      	beq.n	801c8ca <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801c8c6:	2001      	movs	r0, #1
 801c8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c8ca:	2101      	movs	r1, #1
 801c8cc:	f000 f8c4 	bl	801ca58 <uxr_seq_num_add>
 801c8d0:	81e0      	strh	r0, [r4, #14]
 801c8d2:	e7f8      	b.n	801c8c6 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801c8d4 <uxr_update_output_stream_heartbeat_timestamp>:
 801c8d4:	b570      	push	{r4, r5, r6, lr}
 801c8d6:	8a01      	ldrh	r1, [r0, #16]
 801c8d8:	4604      	mov	r4, r0
 801c8da:	8a40      	ldrh	r0, [r0, #18]
 801c8dc:	4615      	mov	r5, r2
 801c8de:	461e      	mov	r6, r3
 801c8e0:	f000 f8c2 	bl	801ca68 <uxr_seq_num_cmp>
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	db07      	blt.n	801c8f8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801c8e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c8ec:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801c8f0:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c8f4:	2000      	movs	r0, #0
 801c8f6:	bd70      	pop	{r4, r5, r6, pc}
 801c8f8:	f894 3020 	ldrb.w	r3, [r4, #32]
 801c8fc:	b953      	cbnz	r3, 801c914 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801c8fe:	2301      	movs	r3, #1
 801c900:	f884 3020 	strb.w	r3, [r4, #32]
 801c904:	3564      	adds	r5, #100	@ 0x64
 801c906:	f04f 0000 	mov.w	r0, #0
 801c90a:	f146 0600 	adc.w	r6, r6, #0
 801c90e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c912:	bd70      	pop	{r4, r5, r6, pc}
 801c914:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801c918:	428d      	cmp	r5, r1
 801c91a:	eb76 0202 	sbcs.w	r2, r6, r2
 801c91e:	dbf1      	blt.n	801c904 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801c920:	3301      	adds	r3, #1
 801c922:	3564      	adds	r5, #100	@ 0x64
 801c924:	f884 3020 	strb.w	r3, [r4, #32]
 801c928:	f04f 0001 	mov.w	r0, #1
 801c92c:	f146 0600 	adc.w	r6, r6, #0
 801c930:	e7ed      	b.n	801c90e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801c932:	bf00      	nop

0801c934 <uxr_begin_output_nack_buffer_it>:
 801c934:	8a40      	ldrh	r0, [r0, #18]
 801c936:	4770      	bx	lr

0801c938 <uxr_next_reliable_nack_buffer_to_send>:
 801c938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c93c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801c940:	f1b8 0f00 	cmp.w	r8, #0
 801c944:	d104      	bne.n	801c950 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801c946:	f04f 0800 	mov.w	r8, #0
 801c94a:	4640      	mov	r0, r8
 801c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c950:	4604      	mov	r4, r0
 801c952:	460e      	mov	r6, r1
 801c954:	8818      	ldrh	r0, [r3, #0]
 801c956:	4617      	mov	r7, r2
 801c958:	461d      	mov	r5, r3
 801c95a:	e019      	b.n	801c990 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801c95c:	8921      	ldrh	r1, [r4, #8]
 801c95e:	8828      	ldrh	r0, [r5, #0]
 801c960:	fbb0 fcf1 	udiv	ip, r0, r1
 801c964:	e9d4 3200 	ldrd	r3, r2, [r4]
 801c968:	fb01 0c1c 	mls	ip, r1, ip, r0
 801c96c:	fa1f fc8c 	uxth.w	ip, ip
 801c970:	fbb2 f2f1 	udiv	r2, r2, r1
 801c974:	fb02 fc0c 	mul.w	ip, r2, ip
 801c978:	f10c 0c04 	add.w	ip, ip, #4
 801c97c:	4463      	add	r3, ip
 801c97e:	6033      	str	r3, [r6, #0]
 801c980:	6823      	ldr	r3, [r4, #0]
 801c982:	4463      	add	r3, ip
 801c984:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801c988:	603b      	str	r3, [r7, #0]
 801c98a:	7b22      	ldrb	r2, [r4, #12]
 801c98c:	429a      	cmp	r2, r3
 801c98e:	d1dc      	bne.n	801c94a <uxr_next_reliable_nack_buffer_to_send+0x12>
 801c990:	2101      	movs	r1, #1
 801c992:	f000 f861 	bl	801ca58 <uxr_seq_num_add>
 801c996:	8028      	strh	r0, [r5, #0]
 801c998:	8a21      	ldrh	r1, [r4, #16]
 801c99a:	f000 f865 	bl	801ca68 <uxr_seq_num_cmp>
 801c99e:	2800      	cmp	r0, #0
 801c9a0:	dddc      	ble.n	801c95c <uxr_next_reliable_nack_buffer_to_send+0x24>
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801c9a8:	e7cd      	b.n	801c946 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801c9aa:	bf00      	nop

0801c9ac <uxr_process_acknack>:
 801c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ae:	4604      	mov	r4, r0
 801c9b0:	460e      	mov	r6, r1
 801c9b2:	4610      	mov	r0, r2
 801c9b4:	2101      	movs	r1, #1
 801c9b6:	f000 f853 	bl	801ca60 <uxr_seq_num_sub>
 801c9ba:	8a61      	ldrh	r1, [r4, #18]
 801c9bc:	f000 f850 	bl	801ca60 <uxr_seq_num_sub>
 801c9c0:	b1c0      	cbz	r0, 801c9f4 <uxr_process_acknack+0x48>
 801c9c2:	4605      	mov	r5, r0
 801c9c4:	2700      	movs	r7, #0
 801c9c6:	2101      	movs	r1, #1
 801c9c8:	8a60      	ldrh	r0, [r4, #18]
 801c9ca:	f000 f845 	bl	801ca58 <uxr_seq_num_add>
 801c9ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801c9d2:	fbb0 f1fc 	udiv	r1, r0, ip
 801c9d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c9da:	fb0c 0111 	mls	r1, ip, r1, r0
 801c9de:	b289      	uxth	r1, r1
 801c9e0:	3701      	adds	r7, #1
 801c9e2:	fbb3 f3fc 	udiv	r3, r3, ip
 801c9e6:	fb01 f303 	mul.w	r3, r1, r3
 801c9ea:	42bd      	cmp	r5, r7
 801c9ec:	7b21      	ldrb	r1, [r4, #12]
 801c9ee:	8260      	strh	r0, [r4, #18]
 801c9f0:	50d1      	str	r1, [r2, r3]
 801c9f2:	d1e8      	bne.n	801c9c6 <uxr_process_acknack+0x1a>
 801c9f4:	3e00      	subs	r6, #0
 801c9f6:	f04f 0300 	mov.w	r3, #0
 801c9fa:	bf18      	it	ne
 801c9fc:	2601      	movne	r6, #1
 801c9fe:	f884 3020 	strb.w	r3, [r4, #32]
 801ca02:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ca06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ca08 <uxr_is_output_up_to_date>:
 801ca08:	8a01      	ldrh	r1, [r0, #16]
 801ca0a:	8a40      	ldrh	r0, [r0, #18]
 801ca0c:	b508      	push	{r3, lr}
 801ca0e:	f000 f82b 	bl	801ca68 <uxr_seq_num_cmp>
 801ca12:	fab0 f080 	clz	r0, r0
 801ca16:	0940      	lsrs	r0, r0, #5
 801ca18:	bd08      	pop	{r3, pc}
 801ca1a:	bf00      	nop

0801ca1c <get_available_free_slots>:
 801ca1c:	8901      	ldrh	r1, [r0, #8]
 801ca1e:	b1c1      	cbz	r1, 801ca52 <get_available_free_slots+0x36>
 801ca20:	b530      	push	{r4, r5, lr}
 801ca22:	2200      	movs	r2, #0
 801ca24:	6843      	ldr	r3, [r0, #4]
 801ca26:	6805      	ldr	r5, [r0, #0]
 801ca28:	7b04      	ldrb	r4, [r0, #12]
 801ca2a:	fbb3 fef1 	udiv	lr, r3, r1
 801ca2e:	4610      	mov	r0, r2
 801ca30:	b293      	uxth	r3, r2
 801ca32:	fbb3 fcf1 	udiv	ip, r3, r1
 801ca36:	fb01 331c 	mls	r3, r1, ip, r3
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	fb0e f303 	mul.w	r3, lr, r3
 801ca40:	3201      	adds	r2, #1
 801ca42:	58eb      	ldr	r3, [r5, r3]
 801ca44:	429c      	cmp	r4, r3
 801ca46:	bf04      	itt	eq
 801ca48:	3001      	addeq	r0, #1
 801ca4a:	b280      	uxtheq	r0, r0
 801ca4c:	4291      	cmp	r1, r2
 801ca4e:	d1ef      	bne.n	801ca30 <get_available_free_slots+0x14>
 801ca50:	bd30      	pop	{r4, r5, pc}
 801ca52:	4608      	mov	r0, r1
 801ca54:	4770      	bx	lr
 801ca56:	bf00      	nop

0801ca58 <uxr_seq_num_add>:
 801ca58:	4408      	add	r0, r1
 801ca5a:	b280      	uxth	r0, r0
 801ca5c:	4770      	bx	lr
 801ca5e:	bf00      	nop

0801ca60 <uxr_seq_num_sub>:
 801ca60:	1a40      	subs	r0, r0, r1
 801ca62:	b280      	uxth	r0, r0
 801ca64:	4770      	bx	lr
 801ca66:	bf00      	nop

0801ca68 <uxr_seq_num_cmp>:
 801ca68:	4288      	cmp	r0, r1
 801ca6a:	d010      	beq.n	801ca8e <uxr_seq_num_cmp+0x26>
 801ca6c:	d207      	bcs.n	801ca7e <uxr_seq_num_cmp+0x16>
 801ca6e:	1a09      	subs	r1, r1, r0
 801ca70:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801ca74:	bfb4      	ite	lt
 801ca76:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 801ca7a:	2001      	movge	r0, #1
 801ca7c:	4770      	bx	lr
 801ca7e:	1a41      	subs	r1, r0, r1
 801ca80:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801ca84:	bfcc      	ite	gt
 801ca86:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801ca8a:	2001      	movle	r0, #1
 801ca8c:	4770      	bx	lr
 801ca8e:	2000      	movs	r0, #0
 801ca90:	4770      	bx	lr
 801ca92:	bf00      	nop

0801ca94 <rcl_get_automatic_discovery_range>:
 801ca94:	b530      	push	{r4, r5, lr}
 801ca96:	b083      	sub	sp, #12
 801ca98:	2300      	movs	r3, #0
 801ca9a:	9301      	str	r3, [sp, #4]
 801ca9c:	b1c0      	cbz	r0, 801cad0 <rcl_get_automatic_discovery_range+0x3c>
 801ca9e:	4604      	mov	r4, r0
 801caa0:	a901      	add	r1, sp, #4
 801caa2:	4818      	ldr	r0, [pc, #96]	@ (801cb04 <rcl_get_automatic_discovery_range+0x70>)
 801caa4:	f7f3 ff44 	bl	8010930 <rcutils_get_env>
 801caa8:	b110      	cbz	r0, 801cab0 <rcl_get_automatic_discovery_range+0x1c>
 801caaa:	2001      	movs	r0, #1
 801caac:	b003      	add	sp, #12
 801caae:	bd30      	pop	{r4, r5, pc}
 801cab0:	9d01      	ldr	r5, [sp, #4]
 801cab2:	782b      	ldrb	r3, [r5, #0]
 801cab4:	b923      	cbnz	r3, 801cac0 <rcl_get_automatic_discovery_range+0x2c>
 801cab6:	2303      	movs	r3, #3
 801cab8:	7023      	strb	r3, [r4, #0]
 801caba:	2000      	movs	r0, #0
 801cabc:	b003      	add	sp, #12
 801cabe:	bd30      	pop	{r4, r5, pc}
 801cac0:	4911      	ldr	r1, [pc, #68]	@ (801cb08 <rcl_get_automatic_discovery_range+0x74>)
 801cac2:	4628      	mov	r0, r5
 801cac4:	f7e3 fbac 	bl	8000220 <strcmp>
 801cac8:	b928      	cbnz	r0, 801cad6 <rcl_get_automatic_discovery_range+0x42>
 801caca:	2301      	movs	r3, #1
 801cacc:	7023      	strb	r3, [r4, #0]
 801cace:	e7f4      	b.n	801caba <rcl_get_automatic_discovery_range+0x26>
 801cad0:	200b      	movs	r0, #11
 801cad2:	b003      	add	sp, #12
 801cad4:	bd30      	pop	{r4, r5, pc}
 801cad6:	490d      	ldr	r1, [pc, #52]	@ (801cb0c <rcl_get_automatic_discovery_range+0x78>)
 801cad8:	4628      	mov	r0, r5
 801cada:	f7e3 fba1 	bl	8000220 <strcmp>
 801cade:	b168      	cbz	r0, 801cafc <rcl_get_automatic_discovery_range+0x68>
 801cae0:	490b      	ldr	r1, [pc, #44]	@ (801cb10 <rcl_get_automatic_discovery_range+0x7c>)
 801cae2:	4628      	mov	r0, r5
 801cae4:	f7e3 fb9c 	bl	8000220 <strcmp>
 801cae8:	2800      	cmp	r0, #0
 801caea:	d0e4      	beq.n	801cab6 <rcl_get_automatic_discovery_range+0x22>
 801caec:	4909      	ldr	r1, [pc, #36]	@ (801cb14 <rcl_get_automatic_discovery_range+0x80>)
 801caee:	4628      	mov	r0, r5
 801caf0:	f7e3 fb96 	bl	8000220 <strcmp>
 801caf4:	b910      	cbnz	r0, 801cafc <rcl_get_automatic_discovery_range+0x68>
 801caf6:	2304      	movs	r3, #4
 801caf8:	7023      	strb	r3, [r4, #0]
 801cafa:	e7de      	b.n	801caba <rcl_get_automatic_discovery_range+0x26>
 801cafc:	2302      	movs	r3, #2
 801cafe:	7023      	strb	r3, [r4, #0]
 801cb00:	e7db      	b.n	801caba <rcl_get_automatic_discovery_range+0x26>
 801cb02:	bf00      	nop
 801cb04:	08021480 	.word	0x08021480
 801cb08:	080214a0 	.word	0x080214a0
 801cb0c:	080214a4 	.word	0x080214a4
 801cb10:	080214b0 	.word	0x080214b0
 801cb14:	080214b8 	.word	0x080214b8

0801cb18 <rcl_automatic_discovery_range_to_string>:
 801cb18:	2804      	cmp	r0, #4
 801cb1a:	bf9a      	itte	ls
 801cb1c:	4b02      	ldrls	r3, [pc, #8]	@ (801cb28 <rcl_automatic_discovery_range_to_string+0x10>)
 801cb1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801cb22:	2000      	movhi	r0, #0
 801cb24:	4770      	bx	lr
 801cb26:	bf00      	nop
 801cb28:	080215a8 	.word	0x080215a8

0801cb2c <rcl_get_discovery_static_peers>:
 801cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb30:	b08c      	sub	sp, #48	@ 0x30
 801cb32:	2300      	movs	r3, #0
 801cb34:	9304      	str	r3, [sp, #16]
 801cb36:	2800      	cmp	r0, #0
 801cb38:	d04e      	beq.n	801cbd8 <rcl_get_discovery_static_peers+0xac>
 801cb3a:	460d      	mov	r5, r1
 801cb3c:	2900      	cmp	r1, #0
 801cb3e:	d04b      	beq.n	801cbd8 <rcl_get_discovery_static_peers+0xac>
 801cb40:	4604      	mov	r4, r0
 801cb42:	a904      	add	r1, sp, #16
 801cb44:	482d      	ldr	r0, [pc, #180]	@ (801cbfc <rcl_get_discovery_static_peers+0xd0>)
 801cb46:	f7f3 fef3 	bl	8010930 <rcutils_get_env>
 801cb4a:	b118      	cbz	r0, 801cb54 <rcl_get_discovery_static_peers+0x28>
 801cb4c:	2001      	movs	r0, #1
 801cb4e:	b00c      	add	sp, #48	@ 0x30
 801cb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb54:	9b04      	ldr	r3, [sp, #16]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d0f8      	beq.n	801cb4c <rcl_get_discovery_static_peers+0x20>
 801cb5a:	af05      	add	r7, sp, #20
 801cb5c:	4638      	mov	r0, r7
 801cb5e:	f7fe f87b 	bl	801ac58 <rcutils_get_zero_initialized_string_array>
 801cb62:	f105 0308 	add.w	r3, r5, #8
 801cb66:	9703      	str	r7, [sp, #12]
 801cb68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cb6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801cb70:	9804      	ldr	r0, [sp, #16]
 801cb72:	e895 000c 	ldmia.w	r5, {r2, r3}
 801cb76:	213b      	movs	r1, #59	@ 0x3b
 801cb78:	f000 fac6 	bl	801d108 <rcutils_split>
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	d1e5      	bne.n	801cb4c <rcl_get_discovery_static_peers+0x20>
 801cb80:	9905      	ldr	r1, [sp, #20]
 801cb82:	462a      	mov	r2, r5
 801cb84:	4620      	mov	r0, r4
 801cb86:	f7fe f9f1 	bl	801af6c <rmw_discovery_options_init>
 801cb8a:	4606      	mov	r6, r0
 801cb8c:	bb90      	cbnz	r0, 801cbf4 <rcl_get_discovery_static_peers+0xc8>
 801cb8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801cb92:	f1b9 0f00 	cmp.w	r9, #0
 801cb96:	d026      	beq.n	801cbe6 <rcl_get_discovery_static_peers+0xba>
 801cb98:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cb9c:	4680      	mov	r8, r0
 801cb9e:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801cba2:	4628      	mov	r0, r5
 801cba4:	f7e3 fb9c 	bl	80002e0 <strlen>
 801cba8:	28ff      	cmp	r0, #255	@ 0xff
 801cbaa:	4629      	mov	r1, r5
 801cbac:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801cbb0:	d816      	bhi.n	801cbe0 <rcl_get_discovery_static_peers+0xb4>
 801cbb2:	6860      	ldr	r0, [r4, #4]
 801cbb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cbb8:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801cbbc:	f001 f927 	bl	801de0e <strncpy>
 801cbc0:	6863      	ldr	r3, [r4, #4]
 801cbc2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801cbc6:	3601      	adds	r6, #1
 801cbc8:	442b      	add	r3, r5
 801cbca:	454e      	cmp	r6, r9
 801cbcc:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801cbd0:	d209      	bcs.n	801cbe6 <rcl_get_discovery_static_peers+0xba>
 801cbd2:	f8dd a018 	ldr.w	sl, [sp, #24]
 801cbd6:	e7e2      	b.n	801cb9e <rcl_get_discovery_static_peers+0x72>
 801cbd8:	200b      	movs	r0, #11
 801cbda:	b00c      	add	sp, #48	@ 0x30
 801cbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbe0:	3601      	adds	r6, #1
 801cbe2:	454e      	cmp	r6, r9
 801cbe4:	d3db      	bcc.n	801cb9e <rcl_get_discovery_static_peers+0x72>
 801cbe6:	4638      	mov	r0, r7
 801cbe8:	f7fe f876 	bl	801acd8 <rcutils_string_array_fini>
 801cbec:	3800      	subs	r0, #0
 801cbee:	bf18      	it	ne
 801cbf0:	2001      	movne	r0, #1
 801cbf2:	e7ac      	b.n	801cb4e <rcl_get_discovery_static_peers+0x22>
 801cbf4:	f7fb fca2 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 801cbf8:	e7a9      	b.n	801cb4e <rcl_get_discovery_static_peers+0x22>
 801cbfa:	bf00      	nop
 801cbfc:	080214c8 	.word	0x080214c8

0801cc00 <rcl_get_default_domain_id>:
 801cc00:	b530      	push	{r4, r5, lr}
 801cc02:	b083      	sub	sp, #12
 801cc04:	2300      	movs	r3, #0
 801cc06:	9300      	str	r3, [sp, #0]
 801cc08:	b1f0      	cbz	r0, 801cc48 <rcl_get_default_domain_id+0x48>
 801cc0a:	4604      	mov	r4, r0
 801cc0c:	4669      	mov	r1, sp
 801cc0e:	4812      	ldr	r0, [pc, #72]	@ (801cc58 <rcl_get_default_domain_id+0x58>)
 801cc10:	f7f3 fe8e 	bl	8010930 <rcutils_get_env>
 801cc14:	4602      	mov	r2, r0
 801cc16:	b108      	cbz	r0, 801cc1c <rcl_get_default_domain_id+0x1c>
 801cc18:	2001      	movs	r0, #1
 801cc1a:	e004      	b.n	801cc26 <rcl_get_default_domain_id+0x26>
 801cc1c:	9800      	ldr	r0, [sp, #0]
 801cc1e:	b108      	cbz	r0, 801cc24 <rcl_get_default_domain_id+0x24>
 801cc20:	7803      	ldrb	r3, [r0, #0]
 801cc22:	b913      	cbnz	r3, 801cc2a <rcl_get_default_domain_id+0x2a>
 801cc24:	2000      	movs	r0, #0
 801cc26:	b003      	add	sp, #12
 801cc28:	bd30      	pop	{r4, r5, pc}
 801cc2a:	a901      	add	r1, sp, #4
 801cc2c:	9201      	str	r2, [sp, #4]
 801cc2e:	f000 fdc3 	bl	801d7b8 <strtoul>
 801cc32:	4605      	mov	r5, r0
 801cc34:	b158      	cbz	r0, 801cc4e <rcl_get_default_domain_id+0x4e>
 801cc36:	1c43      	adds	r3, r0, #1
 801cc38:	d104      	bne.n	801cc44 <rcl_get_default_domain_id+0x44>
 801cc3a:	f001 f9bd 	bl	801dfb8 <__errno>
 801cc3e:	6803      	ldr	r3, [r0, #0]
 801cc40:	2b22      	cmp	r3, #34	@ 0x22
 801cc42:	d0e9      	beq.n	801cc18 <rcl_get_default_domain_id+0x18>
 801cc44:	6025      	str	r5, [r4, #0]
 801cc46:	e7ed      	b.n	801cc24 <rcl_get_default_domain_id+0x24>
 801cc48:	200b      	movs	r0, #11
 801cc4a:	b003      	add	sp, #12
 801cc4c:	bd30      	pop	{r4, r5, pc}
 801cc4e:	9b01      	ldr	r3, [sp, #4]
 801cc50:	781b      	ldrb	r3, [r3, #0]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d0f6      	beq.n	801cc44 <rcl_get_default_domain_id+0x44>
 801cc56:	e7df      	b.n	801cc18 <rcl_get_default_domain_id+0x18>
 801cc58:	080215bc 	.word	0x080215bc

0801cc5c <rcl_expand_topic_name>:
 801cc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc60:	b08b      	sub	sp, #44	@ 0x2c
 801cc62:	9306      	str	r3, [sp, #24]
 801cc64:	2800      	cmp	r0, #0
 801cc66:	f000 80ad 	beq.w	801cdc4 <rcl_expand_topic_name+0x168>
 801cc6a:	460e      	mov	r6, r1
 801cc6c:	2900      	cmp	r1, #0
 801cc6e:	f000 80a9 	beq.w	801cdc4 <rcl_expand_topic_name+0x168>
 801cc72:	4617      	mov	r7, r2
 801cc74:	2a00      	cmp	r2, #0
 801cc76:	f000 80a5 	beq.w	801cdc4 <rcl_expand_topic_name+0x168>
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	f000 80a2 	beq.w	801cdc4 <rcl_expand_topic_name+0x168>
 801cc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	f000 809e 	beq.w	801cdc4 <rcl_expand_topic_name+0x168>
 801cc88:	2200      	movs	r2, #0
 801cc8a:	a909      	add	r1, sp, #36	@ 0x24
 801cc8c:	4680      	mov	r8, r0
 801cc8e:	f000 f949 	bl	801cf24 <rcl_validate_topic_name>
 801cc92:	4605      	mov	r5, r0
 801cc94:	2800      	cmp	r0, #0
 801cc96:	f040 8096 	bne.w	801cdc6 <rcl_expand_topic_name+0x16a>
 801cc9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	f040 809a 	bne.w	801cdd6 <rcl_expand_topic_name+0x17a>
 801cca2:	4602      	mov	r2, r0
 801cca4:	a909      	add	r1, sp, #36	@ 0x24
 801cca6:	4630      	mov	r0, r6
 801cca8:	f7f4 f916 	bl	8010ed8 <rmw_validate_node_name>
 801ccac:	2800      	cmp	r0, #0
 801ccae:	f040 808e 	bne.w	801cdce <rcl_expand_topic_name+0x172>
 801ccb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ccb4:	2a00      	cmp	r2, #0
 801ccb6:	f040 8093 	bne.w	801cde0 <rcl_expand_topic_name+0x184>
 801ccba:	a909      	add	r1, sp, #36	@ 0x24
 801ccbc:	4638      	mov	r0, r7
 801ccbe:	f7f4 f8ed 	bl	8010e9c <rmw_validate_namespace>
 801ccc2:	2800      	cmp	r0, #0
 801ccc4:	f040 8083 	bne.w	801cdce <rcl_expand_topic_name+0x172>
 801ccc8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ccca:	2d00      	cmp	r5, #0
 801cccc:	f040 80f4 	bne.w	801ceb8 <rcl_expand_topic_name+0x25c>
 801ccd0:	217b      	movs	r1, #123	@ 0x7b
 801ccd2:	4640      	mov	r0, r8
 801ccd4:	f001 f87c 	bl	801ddd0 <strchr>
 801ccd8:	f898 3000 	ldrb.w	r3, [r8]
 801ccdc:	2b2f      	cmp	r3, #47	@ 0x2f
 801ccde:	4604      	mov	r4, r0
 801cce0:	f000 809f 	beq.w	801ce22 <rcl_expand_topic_name+0x1c6>
 801cce4:	2b7e      	cmp	r3, #126	@ 0x7e
 801cce6:	f040 80e9 	bne.w	801cebc <rcl_expand_topic_name+0x260>
 801ccea:	4638      	mov	r0, r7
 801ccec:	f7e3 faf8 	bl	80002e0 <strlen>
 801ccf0:	4a82      	ldr	r2, [pc, #520]	@ (801cefc <rcl_expand_topic_name+0x2a0>)
 801ccf2:	4b83      	ldr	r3, [pc, #524]	@ (801cf00 <rcl_expand_topic_name+0x2a4>)
 801ccf4:	2801      	cmp	r0, #1
 801ccf6:	bf08      	it	eq
 801ccf8:	4613      	moveq	r3, r2
 801ccfa:	9302      	str	r3, [sp, #8]
 801ccfc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ccfe:	9300      	str	r3, [sp, #0]
 801cd00:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801cd04:	f108 0301 	add.w	r3, r8, #1
 801cd08:	9305      	str	r3, [sp, #20]
 801cd0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801cd0e:	9301      	str	r3, [sp, #4]
 801cd10:	ab14      	add	r3, sp, #80	@ 0x50
 801cd12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801cd14:	f7f3 fe58 	bl	80109c8 <rcutils_format_string_limit>
 801cd18:	4682      	mov	sl, r0
 801cd1a:	2800      	cmp	r0, #0
 801cd1c:	f000 80d1 	beq.w	801cec2 <rcl_expand_topic_name+0x266>
 801cd20:	2c00      	cmp	r4, #0
 801cd22:	f000 8085 	beq.w	801ce30 <rcl_expand_topic_name+0x1d4>
 801cd26:	217b      	movs	r1, #123	@ 0x7b
 801cd28:	f001 f852 	bl	801ddd0 <strchr>
 801cd2c:	46d1      	mov	r9, sl
 801cd2e:	4604      	mov	r4, r0
 801cd30:	9507      	str	r5, [sp, #28]
 801cd32:	464d      	mov	r5, r9
 801cd34:	2c00      	cmp	r4, #0
 801cd36:	f000 80a0 	beq.w	801ce7a <rcl_expand_topic_name+0x21e>
 801cd3a:	217d      	movs	r1, #125	@ 0x7d
 801cd3c:	4628      	mov	r0, r5
 801cd3e:	f001 f847 	bl	801ddd0 <strchr>
 801cd42:	eba0 0904 	sub.w	r9, r0, r4
 801cd46:	f109 0b01 	add.w	fp, r9, #1
 801cd4a:	486e      	ldr	r0, [pc, #440]	@ (801cf04 <rcl_expand_topic_name+0x2a8>)
 801cd4c:	465a      	mov	r2, fp
 801cd4e:	4621      	mov	r1, r4
 801cd50:	f001 f84b 	bl	801ddea <strncmp>
 801cd54:	2800      	cmp	r0, #0
 801cd56:	d069      	beq.n	801ce2c <rcl_expand_topic_name+0x1d0>
 801cd58:	486b      	ldr	r0, [pc, #428]	@ (801cf08 <rcl_expand_topic_name+0x2ac>)
 801cd5a:	465a      	mov	r2, fp
 801cd5c:	4621      	mov	r1, r4
 801cd5e:	f001 f844 	bl	801ddea <strncmp>
 801cd62:	b130      	cbz	r0, 801cd72 <rcl_expand_topic_name+0x116>
 801cd64:	4869      	ldr	r0, [pc, #420]	@ (801cf0c <rcl_expand_topic_name+0x2b0>)
 801cd66:	465a      	mov	r2, fp
 801cd68:	4621      	mov	r1, r4
 801cd6a:	f001 f83e 	bl	801ddea <strncmp>
 801cd6e:	2800      	cmp	r0, #0
 801cd70:	d138      	bne.n	801cde4 <rcl_expand_topic_name+0x188>
 801cd72:	46b9      	mov	r9, r7
 801cd74:	ab16      	add	r3, sp, #88	@ 0x58
 801cd76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801cd7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801cd7e:	ab14      	add	r3, sp, #80	@ 0x50
 801cd80:	4620      	mov	r0, r4
 801cd82:	cb0c      	ldmia	r3, {r2, r3}
 801cd84:	4659      	mov	r1, fp
 801cd86:	f7f3 ff73 	bl	8010c70 <rcutils_strndup>
 801cd8a:	4604      	mov	r4, r0
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	f000 809d 	beq.w	801cecc <rcl_expand_topic_name+0x270>
 801cd92:	464a      	mov	r2, r9
 801cd94:	4628      	mov	r0, r5
 801cd96:	ab14      	add	r3, sp, #80	@ 0x50
 801cd98:	4621      	mov	r1, r4
 801cd9a:	f7f3 fe4f 	bl	8010a3c <rcutils_repl_str>
 801cd9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cda0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cda2:	4605      	mov	r5, r0
 801cda4:	4620      	mov	r0, r4
 801cda6:	4798      	blx	r3
 801cda8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cdaa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801cdac:	4650      	mov	r0, sl
 801cdae:	4798      	blx	r3
 801cdb0:	2d00      	cmp	r5, #0
 801cdb2:	f000 8086 	beq.w	801cec2 <rcl_expand_topic_name+0x266>
 801cdb6:	217b      	movs	r1, #123	@ 0x7b
 801cdb8:	4628      	mov	r0, r5
 801cdba:	f001 f809 	bl	801ddd0 <strchr>
 801cdbe:	46aa      	mov	sl, r5
 801cdc0:	4604      	mov	r4, r0
 801cdc2:	e7b7      	b.n	801cd34 <rcl_expand_topic_name+0xd8>
 801cdc4:	250b      	movs	r5, #11
 801cdc6:	4628      	mov	r0, r5
 801cdc8:	b00b      	add	sp, #44	@ 0x2c
 801cdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdce:	f7fb fbb5 	bl	801853c <rcl_convert_rmw_ret_to_rcl_ret>
 801cdd2:	4605      	mov	r5, r0
 801cdd4:	e7f7      	b.n	801cdc6 <rcl_expand_topic_name+0x16a>
 801cdd6:	2567      	movs	r5, #103	@ 0x67
 801cdd8:	4628      	mov	r0, r5
 801cdda:	b00b      	add	sp, #44	@ 0x2c
 801cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cde0:	25c9      	movs	r5, #201	@ 0xc9
 801cde2:	e7f0      	b.n	801cdc6 <rcl_expand_topic_name+0x16a>
 801cde4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801cde8:	9806      	ldr	r0, [sp, #24]
 801cdea:	1c61      	adds	r1, r4, #1
 801cdec:	f7fe f88c 	bl	801af08 <rcutils_string_map_getn>
 801cdf0:	4681      	mov	r9, r0
 801cdf2:	2800      	cmp	r0, #0
 801cdf4:	d1be      	bne.n	801cd74 <rcl_expand_topic_name+0x118>
 801cdf6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cdf8:	ab16      	add	r3, sp, #88	@ 0x58
 801cdfa:	6010      	str	r0, [r2, #0]
 801cdfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ce00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ce04:	ab14      	add	r3, sp, #80	@ 0x50
 801ce06:	cb0c      	ldmia	r3, {r2, r3}
 801ce08:	4659      	mov	r1, fp
 801ce0a:	4620      	mov	r0, r4
 801ce0c:	f7f3 ff30 	bl	8010c70 <rcutils_strndup>
 801ce10:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ce12:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ce14:	4798      	blx	r3
 801ce16:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ce18:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ce1a:	4650      	mov	r0, sl
 801ce1c:	4798      	blx	r3
 801ce1e:	2569      	movs	r5, #105	@ 0x69
 801ce20:	e7d1      	b.n	801cdc6 <rcl_expand_topic_name+0x16a>
 801ce22:	2800      	cmp	r0, #0
 801ce24:	d059      	beq.n	801ceda <rcl_expand_topic_name+0x27e>
 801ce26:	46c1      	mov	r9, r8
 801ce28:	46aa      	mov	sl, r5
 801ce2a:	e781      	b.n	801cd30 <rcl_expand_topic_name+0xd4>
 801ce2c:	46b1      	mov	r9, r6
 801ce2e:	e7a1      	b.n	801cd74 <rcl_expand_topic_name+0x118>
 801ce30:	f89a 3000 	ldrb.w	r3, [sl]
 801ce34:	2b2f      	cmp	r3, #47	@ 0x2f
 801ce36:	d01c      	beq.n	801ce72 <rcl_expand_topic_name+0x216>
 801ce38:	4638      	mov	r0, r7
 801ce3a:	f7e3 fa51 	bl	80002e0 <strlen>
 801ce3e:	4a34      	ldr	r2, [pc, #208]	@ (801cf10 <rcl_expand_topic_name+0x2b4>)
 801ce40:	4b34      	ldr	r3, [pc, #208]	@ (801cf14 <rcl_expand_topic_name+0x2b8>)
 801ce42:	f8cd a010 	str.w	sl, [sp, #16]
 801ce46:	2801      	cmp	r0, #1
 801ce48:	bf18      	it	ne
 801ce4a:	4613      	movne	r3, r2
 801ce4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ce50:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ce54:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ce56:	9703      	str	r7, [sp, #12]
 801ce58:	9200      	str	r2, [sp, #0]
 801ce5a:	ab14      	add	r3, sp, #80	@ 0x50
 801ce5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ce5e:	f7f3 fdb3 	bl	80109c8 <rcutils_format_string_limit>
 801ce62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ce64:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ce66:	4604      	mov	r4, r0
 801ce68:	4650      	mov	r0, sl
 801ce6a:	4798      	blx	r3
 801ce6c:	46a2      	mov	sl, r4
 801ce6e:	4653      	mov	r3, sl
 801ce70:	b33b      	cbz	r3, 801cec2 <rcl_expand_topic_name+0x266>
 801ce72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ce74:	f8c3 a000 	str.w	sl, [r3]
 801ce78:	e7a5      	b.n	801cdc6 <rcl_expand_topic_name+0x16a>
 801ce7a:	4653      	mov	r3, sl
 801ce7c:	9d07      	ldr	r5, [sp, #28]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d1d6      	bne.n	801ce30 <rcl_expand_topic_name+0x1d4>
 801ce82:	f898 3000 	ldrb.w	r3, [r8]
 801ce86:	2b2f      	cmp	r3, #47	@ 0x2f
 801ce88:	d0f3      	beq.n	801ce72 <rcl_expand_topic_name+0x216>
 801ce8a:	4638      	mov	r0, r7
 801ce8c:	f7e3 fa28 	bl	80002e0 <strlen>
 801ce90:	4a1f      	ldr	r2, [pc, #124]	@ (801cf10 <rcl_expand_topic_name+0x2b4>)
 801ce92:	4b20      	ldr	r3, [pc, #128]	@ (801cf14 <rcl_expand_topic_name+0x2b8>)
 801ce94:	f8cd 8010 	str.w	r8, [sp, #16]
 801ce98:	2801      	cmp	r0, #1
 801ce9a:	bf18      	it	ne
 801ce9c:	4613      	movne	r3, r2
 801ce9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801cea2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801cea6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cea8:	9703      	str	r7, [sp, #12]
 801ceaa:	9200      	str	r2, [sp, #0]
 801ceac:	ab14      	add	r3, sp, #80	@ 0x50
 801ceae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ceb0:	f7f3 fd8a 	bl	80109c8 <rcutils_format_string_limit>
 801ceb4:	4682      	mov	sl, r0
 801ceb6:	e7da      	b.n	801ce6e <rcl_expand_topic_name+0x212>
 801ceb8:	25ca      	movs	r5, #202	@ 0xca
 801ceba:	e784      	b.n	801cdc6 <rcl_expand_topic_name+0x16a>
 801cebc:	2800      	cmp	r0, #0
 801cebe:	d1b2      	bne.n	801ce26 <rcl_expand_topic_name+0x1ca>
 801cec0:	e7e3      	b.n	801ce8a <rcl_expand_topic_name+0x22e>
 801cec2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cec4:	2300      	movs	r3, #0
 801cec6:	6013      	str	r3, [r2, #0]
 801cec8:	250a      	movs	r5, #10
 801ceca:	e77c      	b.n	801cdc6 <rcl_expand_topic_name+0x16a>
 801cecc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801ced0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ced2:	6014      	str	r4, [r2, #0]
 801ced4:	4650      	mov	r0, sl
 801ced6:	4798      	blx	r3
 801ced8:	e7f6      	b.n	801cec8 <rcl_expand_topic_name+0x26c>
 801ceda:	ab17      	add	r3, sp, #92	@ 0x5c
 801cedc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cee0:	e88d 0003 	stmia.w	sp, {r0, r1}
 801cee4:	ab14      	add	r3, sp, #80	@ 0x50
 801cee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801cee8:	4640      	mov	r0, r8
 801ceea:	f7f3 fe8b 	bl	8010c04 <rcutils_strdup>
 801ceee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cef0:	6018      	str	r0, [r3, #0]
 801cef2:	2800      	cmp	r0, #0
 801cef4:	f47f af67 	bne.w	801cdc6 <rcl_expand_topic_name+0x16a>
 801cef8:	e7e6      	b.n	801cec8 <rcl_expand_topic_name+0x26c>
 801cefa:	bf00      	nop
 801cefc:	08020b54 	.word	0x08020b54
 801cf00:	080215cc 	.word	0x080215cc
 801cf04:	080215d4 	.word	0x080215d4
 801cf08:	080215dc 	.word	0x080215dc
 801cf0c:	080215e4 	.word	0x080215e4
 801cf10:	080205cc 	.word	0x080205cc
 801cf14:	080205c4 	.word	0x080205c4

0801cf18 <rcl_get_default_topic_name_substitutions>:
 801cf18:	2800      	cmp	r0, #0
 801cf1a:	bf0c      	ite	eq
 801cf1c:	200b      	moveq	r0, #11
 801cf1e:	2000      	movne	r0, #0
 801cf20:	4770      	bx	lr
 801cf22:	bf00      	nop

0801cf24 <rcl_validate_topic_name>:
 801cf24:	2800      	cmp	r0, #0
 801cf26:	d06b      	beq.n	801d000 <rcl_validate_topic_name+0xdc>
 801cf28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf2c:	460d      	mov	r5, r1
 801cf2e:	2900      	cmp	r1, #0
 801cf30:	d06d      	beq.n	801d00e <rcl_validate_topic_name+0xea>
 801cf32:	4616      	mov	r6, r2
 801cf34:	4604      	mov	r4, r0
 801cf36:	f7e3 f9d3 	bl	80002e0 <strlen>
 801cf3a:	b190      	cbz	r0, 801cf62 <rcl_validate_topic_name+0x3e>
 801cf3c:	7821      	ldrb	r1, [r4, #0]
 801cf3e:	4a71      	ldr	r2, [pc, #452]	@ (801d104 <rcl_validate_topic_name+0x1e0>)
 801cf40:	5c53      	ldrb	r3, [r2, r1]
 801cf42:	f013 0304 	ands.w	r3, r3, #4
 801cf46:	d15d      	bne.n	801d004 <rcl_validate_topic_name+0xe0>
 801cf48:	1e47      	subs	r7, r0, #1
 801cf4a:	f814 c007 	ldrb.w	ip, [r4, r7]
 801cf4e:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801cf52:	d10d      	bne.n	801cf70 <rcl_validate_topic_name+0x4c>
 801cf54:	2302      	movs	r3, #2
 801cf56:	602b      	str	r3, [r5, #0]
 801cf58:	b146      	cbz	r6, 801cf6c <rcl_validate_topic_name+0x48>
 801cf5a:	6037      	str	r7, [r6, #0]
 801cf5c:	2000      	movs	r0, #0
 801cf5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf62:	2301      	movs	r3, #1
 801cf64:	602b      	str	r3, [r5, #0]
 801cf66:	b10e      	cbz	r6, 801cf6c <rcl_validate_topic_name+0x48>
 801cf68:	2300      	movs	r3, #0
 801cf6a:	6033      	str	r3, [r6, #0]
 801cf6c:	2000      	movs	r0, #0
 801cf6e:	e7f6      	b.n	801cf5e <rcl_validate_topic_name+0x3a>
 801cf70:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 801cf74:	469a      	mov	sl, r3
 801cf76:	469e      	mov	lr, r3
 801cf78:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801cf7c:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801cf80:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801cf84:	d85b      	bhi.n	801d03e <rcl_validate_topic_name+0x11a>
 801cf86:	e8df f00c 	tbb	[pc, ip]
 801cf8a:	4463      	.short	0x4463
 801cf8c:	44444444 	.word	0x44444444
 801cf90:	44444444 	.word	0x44444444
 801cf94:	5a5a5a44 	.word	0x5a5a5a44
 801cf98:	5a5a5a5a 	.word	0x5a5a5a5a
 801cf9c:	44444444 	.word	0x44444444
 801cfa0:	44444444 	.word	0x44444444
 801cfa4:	44444444 	.word	0x44444444
 801cfa8:	44444444 	.word	0x44444444
 801cfac:	44444444 	.word	0x44444444
 801cfb0:	44444444 	.word	0x44444444
 801cfb4:	5a5a4444 	.word	0x5a5a4444
 801cfb8:	5a2e5a5a 	.word	0x5a2e5a5a
 801cfbc:	44444444 	.word	0x44444444
 801cfc0:	44444444 	.word	0x44444444
 801cfc4:	44444444 	.word	0x44444444
 801cfc8:	44444444 	.word	0x44444444
 801cfcc:	44444444 	.word	0x44444444
 801cfd0:	44444444 	.word	0x44444444
 801cfd4:	5a284444 	.word	0x5a284444
 801cfd8:	6b73      	.short	0x6b73
 801cfda:	f1ba 0f00 	cmp.w	sl, #0
 801cfde:	d13a      	bne.n	801d056 <rcl_validate_topic_name+0x132>
 801cfe0:	4673      	mov	r3, lr
 801cfe2:	f04f 0a01 	mov.w	sl, #1
 801cfe6:	f10e 0e01 	add.w	lr, lr, #1
 801cfea:	4570      	cmp	r0, lr
 801cfec:	d1c4      	bne.n	801cf78 <rcl_validate_topic_name+0x54>
 801cfee:	f1ba 0f00 	cmp.w	sl, #0
 801cff2:	d048      	beq.n	801d086 <rcl_validate_topic_name+0x162>
 801cff4:	2205      	movs	r2, #5
 801cff6:	602a      	str	r2, [r5, #0]
 801cff8:	2e00      	cmp	r6, #0
 801cffa:	d0b7      	beq.n	801cf6c <rcl_validate_topic_name+0x48>
 801cffc:	6033      	str	r3, [r6, #0]
 801cffe:	e7b5      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d000:	200b      	movs	r0, #11
 801d002:	4770      	bx	lr
 801d004:	2304      	movs	r3, #4
 801d006:	602b      	str	r3, [r5, #0]
 801d008:	2e00      	cmp	r6, #0
 801d00a:	d1ad      	bne.n	801cf68 <rcl_validate_topic_name+0x44>
 801d00c:	e7ae      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d00e:	200b      	movs	r0, #11
 801d010:	e7a5      	b.n	801cf5e <rcl_validate_topic_name+0x3a>
 801d012:	f812 c009 	ldrb.w	ip, [r2, r9]
 801d016:	f01c 0f04 	tst.w	ip, #4
 801d01a:	d0e4      	beq.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d01c:	f1ba 0f00 	cmp.w	sl, #0
 801d020:	d0e1      	beq.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d022:	f1be 0f00 	cmp.w	lr, #0
 801d026:	d0de      	beq.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d028:	f10e 3cff 	add.w	ip, lr, #4294967295	@ 0xffffffff
 801d02c:	4563      	cmp	r3, ip
 801d02e:	d1da      	bne.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d030:	2309      	movs	r3, #9
 801d032:	602b      	str	r3, [r5, #0]
 801d034:	2e00      	cmp	r6, #0
 801d036:	d099      	beq.n	801cf6c <rcl_validate_topic_name+0x48>
 801d038:	f8c6 e000 	str.w	lr, [r6]
 801d03c:	e796      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d03e:	f1ba 0f00 	cmp.w	sl, #0
 801d042:	bf0c      	ite	eq
 801d044:	2303      	moveq	r3, #3
 801d046:	2308      	movne	r3, #8
 801d048:	602b      	str	r3, [r5, #0]
 801d04a:	2e00      	cmp	r6, #0
 801d04c:	d1f4      	bne.n	801d038 <rcl_validate_topic_name+0x114>
 801d04e:	e78d      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d050:	f1ba 0f00 	cmp.w	sl, #0
 801d054:	d0c7      	beq.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d056:	2308      	movs	r3, #8
 801d058:	602b      	str	r3, [r5, #0]
 801d05a:	2e00      	cmp	r6, #0
 801d05c:	d1ec      	bne.n	801d038 <rcl_validate_topic_name+0x114>
 801d05e:	e785      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d060:	f1be 0f00 	cmp.w	lr, #0
 801d064:	d0bf      	beq.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d066:	2306      	movs	r3, #6
 801d068:	602b      	str	r3, [r5, #0]
 801d06a:	2e00      	cmp	r6, #0
 801d06c:	d1e4      	bne.n	801d038 <rcl_validate_topic_name+0x114>
 801d06e:	e77d      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d070:	f1ba 0f00 	cmp.w	sl, #0
 801d074:	d104      	bne.n	801d080 <rcl_validate_topic_name+0x15c>
 801d076:	2305      	movs	r3, #5
 801d078:	602b      	str	r3, [r5, #0]
 801d07a:	2e00      	cmp	r6, #0
 801d07c:	d1dc      	bne.n	801d038 <rcl_validate_topic_name+0x114>
 801d07e:	e775      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d080:	f04f 0a00 	mov.w	sl, #0
 801d084:	e7af      	b.n	801cfe6 <rcl_validate_topic_name+0xc2>
 801d086:	297e      	cmp	r1, #126	@ 0x7e
 801d088:	d01d      	beq.n	801d0c6 <rcl_validate_topic_name+0x1a2>
 801d08a:	2101      	movs	r1, #1
 801d08c:	e006      	b.n	801d09c <rcl_validate_topic_name+0x178>
 801d08e:	458e      	cmp	lr, r1
 801d090:	f104 0401 	add.w	r4, r4, #1
 801d094:	f101 0301 	add.w	r3, r1, #1
 801d098:	d912      	bls.n	801d0c0 <rcl_validate_topic_name+0x19c>
 801d09a:	4619      	mov	r1, r3
 801d09c:	4557      	cmp	r7, sl
 801d09e:	f10a 0a01 	add.w	sl, sl, #1
 801d0a2:	d0f4      	beq.n	801d08e <rcl_validate_topic_name+0x16a>
 801d0a4:	7823      	ldrb	r3, [r4, #0]
 801d0a6:	2b2f      	cmp	r3, #47	@ 0x2f
 801d0a8:	d1f1      	bne.n	801d08e <rcl_validate_topic_name+0x16a>
 801d0aa:	7863      	ldrb	r3, [r4, #1]
 801d0ac:	5cd3      	ldrb	r3, [r2, r3]
 801d0ae:	075b      	lsls	r3, r3, #29
 801d0b0:	d5ed      	bpl.n	801d08e <rcl_validate_topic_name+0x16a>
 801d0b2:	2304      	movs	r3, #4
 801d0b4:	602b      	str	r3, [r5, #0]
 801d0b6:	2e00      	cmp	r6, #0
 801d0b8:	f43f af58 	beq.w	801cf6c <rcl_validate_topic_name+0x48>
 801d0bc:	6031      	str	r1, [r6, #0]
 801d0be:	e755      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d0c0:	2300      	movs	r3, #0
 801d0c2:	602b      	str	r3, [r5, #0]
 801d0c4:	e752      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d0c6:	4653      	mov	r3, sl
 801d0c8:	2101      	movs	r1, #1
 801d0ca:	e00a      	b.n	801d0e2 <rcl_validate_topic_name+0x1be>
 801d0cc:	2b01      	cmp	r3, #1
 801d0ce:	d012      	beq.n	801d0f6 <rcl_validate_topic_name+0x1d2>
 801d0d0:	458e      	cmp	lr, r1
 801d0d2:	f103 0301 	add.w	r3, r3, #1
 801d0d6:	f104 0401 	add.w	r4, r4, #1
 801d0da:	f101 0001 	add.w	r0, r1, #1
 801d0de:	d9ef      	bls.n	801d0c0 <rcl_validate_topic_name+0x19c>
 801d0e0:	4601      	mov	r1, r0
 801d0e2:	429f      	cmp	r7, r3
 801d0e4:	d0f4      	beq.n	801d0d0 <rcl_validate_topic_name+0x1ac>
 801d0e6:	7820      	ldrb	r0, [r4, #0]
 801d0e8:	282f      	cmp	r0, #47	@ 0x2f
 801d0ea:	d1ef      	bne.n	801d0cc <rcl_validate_topic_name+0x1a8>
 801d0ec:	7860      	ldrb	r0, [r4, #1]
 801d0ee:	5c10      	ldrb	r0, [r2, r0]
 801d0f0:	0740      	lsls	r0, r0, #29
 801d0f2:	d5ed      	bpl.n	801d0d0 <rcl_validate_topic_name+0x1ac>
 801d0f4:	e7dd      	b.n	801d0b2 <rcl_validate_topic_name+0x18e>
 801d0f6:	2207      	movs	r2, #7
 801d0f8:	602a      	str	r2, [r5, #0]
 801d0fa:	2e00      	cmp	r6, #0
 801d0fc:	f47f af7e 	bne.w	801cffc <rcl_validate_topic_name+0xd8>
 801d100:	e734      	b.n	801cf6c <rcl_validate_topic_name+0x48>
 801d102:	bf00      	nop
 801d104:	08021752 	.word	0x08021752

0801d108 <rcutils_split>:
 801d108:	b082      	sub	sp, #8
 801d10a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d10e:	b08b      	sub	sp, #44	@ 0x2c
 801d110:	ac14      	add	r4, sp, #80	@ 0x50
 801d112:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801d114:	e884 000c 	stmia.w	r4, {r2, r3}
 801d118:	2f00      	cmp	r7, #0
 801d11a:	f000 809f 	beq.w	801d25c <rcutils_split+0x154>
 801d11e:	4606      	mov	r6, r0
 801d120:	2800      	cmp	r0, #0
 801d122:	d071      	beq.n	801d208 <rcutils_split+0x100>
 801d124:	7804      	ldrb	r4, [r0, #0]
 801d126:	2c00      	cmp	r4, #0
 801d128:	d06e      	beq.n	801d208 <rcutils_split+0x100>
 801d12a:	460d      	mov	r5, r1
 801d12c:	f7e3 f8d8 	bl	80002e0 <strlen>
 801d130:	1833      	adds	r3, r6, r0
 801d132:	1b64      	subs	r4, r4, r5
 801d134:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d138:	4680      	mov	r8, r0
 801d13a:	fab4 f484 	clz	r4, r4
 801d13e:	0964      	lsrs	r4, r4, #5
 801d140:	42ab      	cmp	r3, r5
 801d142:	bf08      	it	eq
 801d144:	f1a8 0801 	subeq.w	r8, r8, #1
 801d148:	4544      	cmp	r4, r8
 801d14a:	d278      	bcs.n	801d23e <rcutils_split+0x136>
 801d14c:	1933      	adds	r3, r6, r4
 801d14e:	eb06 0008 	add.w	r0, r6, r8
 801d152:	2101      	movs	r1, #1
 801d154:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d158:	42aa      	cmp	r2, r5
 801d15a:	bf08      	it	eq
 801d15c:	3101      	addeq	r1, #1
 801d15e:	4283      	cmp	r3, r0
 801d160:	d1f8      	bne.n	801d154 <rcutils_split+0x4c>
 801d162:	aa14      	add	r2, sp, #80	@ 0x50
 801d164:	4638      	mov	r0, r7
 801d166:	f7fd fd95 	bl	801ac94 <rcutils_string_array_init>
 801d16a:	4681      	mov	r9, r0
 801d16c:	2800      	cmp	r0, #0
 801d16e:	d159      	bne.n	801d224 <rcutils_split+0x11c>
 801d170:	687a      	ldr	r2, [r7, #4]
 801d172:	46a2      	mov	sl, r4
 801d174:	e002      	b.n	801d17c <rcutils_split+0x74>
 801d176:	3401      	adds	r4, #1
 801d178:	4544      	cmp	r4, r8
 801d17a:	d222      	bcs.n	801d1c2 <rcutils_split+0xba>
 801d17c:	5d33      	ldrb	r3, [r6, r4]
 801d17e:	42ab      	cmp	r3, r5
 801d180:	d1f9      	bne.n	801d176 <rcutils_split+0x6e>
 801d182:	4554      	cmp	r4, sl
 801d184:	eba4 0b0a 	sub.w	fp, r4, sl
 801d188:	d037      	beq.n	801d1fa <rcutils_split+0xf2>
 801d18a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d18c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d18e:	9201      	str	r2, [sp, #4]
 801d190:	f10b 0002 	add.w	r0, fp, #2
 801d194:	4798      	blx	r3
 801d196:	9a01      	ldr	r2, [sp, #4]
 801d198:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801d19c:	687a      	ldr	r2, [r7, #4]
 801d19e:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801d1a2:	eb06 030a 	add.w	r3, r6, sl
 801d1a6:	f10b 0101 	add.w	r1, fp, #1
 801d1aa:	2800      	cmp	r0, #0
 801d1ac:	d038      	beq.n	801d220 <rcutils_split+0x118>
 801d1ae:	4a2e      	ldr	r2, [pc, #184]	@ (801d268 <rcutils_split+0x160>)
 801d1b0:	f000 fc98 	bl	801dae4 <sniprintf>
 801d1b4:	687a      	ldr	r2, [r7, #4]
 801d1b6:	f109 0901 	add.w	r9, r9, #1
 801d1ba:	3401      	adds	r4, #1
 801d1bc:	4544      	cmp	r4, r8
 801d1be:	46a2      	mov	sl, r4
 801d1c0:	d3dc      	bcc.n	801d17c <rcutils_split+0x74>
 801d1c2:	4554      	cmp	r4, sl
 801d1c4:	d043      	beq.n	801d24e <rcutils_split+0x146>
 801d1c6:	eba4 040a 	sub.w	r4, r4, sl
 801d1ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d1cc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801d1ce:	9201      	str	r2, [sp, #4]
 801d1d0:	1ca0      	adds	r0, r4, #2
 801d1d2:	4798      	blx	r3
 801d1d4:	9a01      	ldr	r2, [sp, #4]
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 801d1dc:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 801d1e0:	b300      	cbz	r0, 801d224 <rcutils_split+0x11c>
 801d1e2:	4a21      	ldr	r2, [pc, #132]	@ (801d268 <rcutils_split+0x160>)
 801d1e4:	eb06 030a 	add.w	r3, r6, sl
 801d1e8:	1c61      	adds	r1, r4, #1
 801d1ea:	f000 fc7b 	bl	801dae4 <sniprintf>
 801d1ee:	2000      	movs	r0, #0
 801d1f0:	b00b      	add	sp, #44	@ 0x2c
 801d1f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1f6:	b002      	add	sp, #8
 801d1f8:	4770      	bx	lr
 801d1fa:	683b      	ldr	r3, [r7, #0]
 801d1fc:	3b01      	subs	r3, #1
 801d1fe:	2100      	movs	r1, #0
 801d200:	603b      	str	r3, [r7, #0]
 801d202:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d206:	e7d8      	b.n	801d1ba <rcutils_split+0xb2>
 801d208:	a802      	add	r0, sp, #8
 801d20a:	ac02      	add	r4, sp, #8
 801d20c:	f7fd fd24 	bl	801ac58 <rcutils_get_zero_initialized_string_array>
 801d210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d212:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d214:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801d218:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801d21c:	2000      	movs	r0, #0
 801d21e:	e7e7      	b.n	801d1f0 <rcutils_split+0xe8>
 801d220:	f8c7 9000 	str.w	r9, [r7]
 801d224:	4638      	mov	r0, r7
 801d226:	f7fd fd57 	bl	801acd8 <rcutils_string_array_fini>
 801d22a:	b928      	cbnz	r0, 801d238 <rcutils_split+0x130>
 801d22c:	200a      	movs	r0, #10
 801d22e:	b00b      	add	sp, #44	@ 0x2c
 801d230:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d234:	b002      	add	sp, #8
 801d236:	4770      	bx	lr
 801d238:	f7f3 fbaa 	bl	8010990 <rcutils_reset_error>
 801d23c:	e7f6      	b.n	801d22c <rcutils_split+0x124>
 801d23e:	aa14      	add	r2, sp, #80	@ 0x50
 801d240:	2101      	movs	r1, #1
 801d242:	4638      	mov	r0, r7
 801d244:	f7fd fd26 	bl	801ac94 <rcutils_string_array_init>
 801d248:	2800      	cmp	r0, #0
 801d24a:	d1eb      	bne.n	801d224 <rcutils_split+0x11c>
 801d24c:	687a      	ldr	r2, [r7, #4]
 801d24e:	683b      	ldr	r3, [r7, #0]
 801d250:	3b01      	subs	r3, #1
 801d252:	2100      	movs	r1, #0
 801d254:	603b      	str	r3, [r7, #0]
 801d256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d25a:	e7df      	b.n	801d21c <rcutils_split+0x114>
 801d25c:	200b      	movs	r0, #11
 801d25e:	b00b      	add	sp, #44	@ 0x2c
 801d260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d264:	b002      	add	sp, #8
 801d266:	4770      	bx	lr
 801d268:	08020b58 	.word	0x08020b58

0801d26c <rosidl_runtime_c__String__init>:
 801d26c:	b1b0      	cbz	r0, 801d29c <rosidl_runtime_c__String__init+0x30>
 801d26e:	b510      	push	{r4, lr}
 801d270:	b086      	sub	sp, #24
 801d272:	4604      	mov	r4, r0
 801d274:	a801      	add	r0, sp, #4
 801d276:	f7f3 fa7b 	bl	8010770 <rcutils_get_default_allocator>
 801d27a:	9b01      	ldr	r3, [sp, #4]
 801d27c:	9905      	ldr	r1, [sp, #20]
 801d27e:	2001      	movs	r0, #1
 801d280:	4798      	blx	r3
 801d282:	6020      	str	r0, [r4, #0]
 801d284:	b138      	cbz	r0, 801d296 <rosidl_runtime_c__String__init+0x2a>
 801d286:	2200      	movs	r2, #0
 801d288:	2301      	movs	r3, #1
 801d28a:	7002      	strb	r2, [r0, #0]
 801d28c:	4618      	mov	r0, r3
 801d28e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801d292:	b006      	add	sp, #24
 801d294:	bd10      	pop	{r4, pc}
 801d296:	2000      	movs	r0, #0
 801d298:	b006      	add	sp, #24
 801d29a:	bd10      	pop	{r4, pc}
 801d29c:	2000      	movs	r0, #0
 801d29e:	4770      	bx	lr

0801d2a0 <rosidl_runtime_c__String__fini>:
 801d2a0:	b320      	cbz	r0, 801d2ec <rosidl_runtime_c__String__fini+0x4c>
 801d2a2:	b510      	push	{r4, lr}
 801d2a4:	6803      	ldr	r3, [r0, #0]
 801d2a6:	b086      	sub	sp, #24
 801d2a8:	4604      	mov	r4, r0
 801d2aa:	b173      	cbz	r3, 801d2ca <rosidl_runtime_c__String__fini+0x2a>
 801d2ac:	6883      	ldr	r3, [r0, #8]
 801d2ae:	b1f3      	cbz	r3, 801d2ee <rosidl_runtime_c__String__fini+0x4e>
 801d2b0:	a801      	add	r0, sp, #4
 801d2b2:	f7f3 fa5d 	bl	8010770 <rcutils_get_default_allocator>
 801d2b6:	9b02      	ldr	r3, [sp, #8]
 801d2b8:	9905      	ldr	r1, [sp, #20]
 801d2ba:	6820      	ldr	r0, [r4, #0]
 801d2bc:	4798      	blx	r3
 801d2be:	2300      	movs	r3, #0
 801d2c0:	e9c4 3300 	strd	r3, r3, [r4]
 801d2c4:	60a3      	str	r3, [r4, #8]
 801d2c6:	b006      	add	sp, #24
 801d2c8:	bd10      	pop	{r4, pc}
 801d2ca:	6843      	ldr	r3, [r0, #4]
 801d2cc:	b9db      	cbnz	r3, 801d306 <rosidl_runtime_c__String__fini+0x66>
 801d2ce:	6883      	ldr	r3, [r0, #8]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d0f8      	beq.n	801d2c6 <rosidl_runtime_c__String__fini+0x26>
 801d2d4:	4b12      	ldr	r3, [pc, #72]	@ (801d320 <rosidl_runtime_c__String__fini+0x80>)
 801d2d6:	4813      	ldr	r0, [pc, #76]	@ (801d324 <rosidl_runtime_c__String__fini+0x84>)
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	2251      	movs	r2, #81	@ 0x51
 801d2dc:	68db      	ldr	r3, [r3, #12]
 801d2de:	2101      	movs	r1, #1
 801d2e0:	f000 fb82 	bl	801d9e8 <fwrite>
 801d2e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d2e8:	f000 f83e 	bl	801d368 <exit>
 801d2ec:	4770      	bx	lr
 801d2ee:	4b0c      	ldr	r3, [pc, #48]	@ (801d320 <rosidl_runtime_c__String__fini+0x80>)
 801d2f0:	480d      	ldr	r0, [pc, #52]	@ (801d328 <rosidl_runtime_c__String__fini+0x88>)
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	224c      	movs	r2, #76	@ 0x4c
 801d2f6:	68db      	ldr	r3, [r3, #12]
 801d2f8:	2101      	movs	r1, #1
 801d2fa:	f000 fb75 	bl	801d9e8 <fwrite>
 801d2fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d302:	f000 f831 	bl	801d368 <exit>
 801d306:	4b06      	ldr	r3, [pc, #24]	@ (801d320 <rosidl_runtime_c__String__fini+0x80>)
 801d308:	4808      	ldr	r0, [pc, #32]	@ (801d32c <rosidl_runtime_c__String__fini+0x8c>)
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	224e      	movs	r2, #78	@ 0x4e
 801d30e:	68db      	ldr	r3, [r3, #12]
 801d310:	2101      	movs	r1, #1
 801d312:	f000 fb69 	bl	801d9e8 <fwrite>
 801d316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d31a:	f000 f825 	bl	801d368 <exit>
 801d31e:	bf00      	nop
 801d320:	20001bf4 	.word	0x20001bf4
 801d324:	08021690 	.word	0x08021690
 801d328:	080215f0 	.word	0x080215f0
 801d32c:	08021640 	.word	0x08021640

0801d330 <calloc>:
 801d330:	4b02      	ldr	r3, [pc, #8]	@ (801d33c <calloc+0xc>)
 801d332:	460a      	mov	r2, r1
 801d334:	4601      	mov	r1, r0
 801d336:	6818      	ldr	r0, [r3, #0]
 801d338:	f000 b802 	b.w	801d340 <_calloc_r>
 801d33c:	20001bf4 	.word	0x20001bf4

0801d340 <_calloc_r>:
 801d340:	b570      	push	{r4, r5, r6, lr}
 801d342:	fba1 5402 	umull	r5, r4, r1, r2
 801d346:	b93c      	cbnz	r4, 801d358 <_calloc_r+0x18>
 801d348:	4629      	mov	r1, r5
 801d34a:	f000 f899 	bl	801d480 <_malloc_r>
 801d34e:	4606      	mov	r6, r0
 801d350:	b928      	cbnz	r0, 801d35e <_calloc_r+0x1e>
 801d352:	2600      	movs	r6, #0
 801d354:	4630      	mov	r0, r6
 801d356:	bd70      	pop	{r4, r5, r6, pc}
 801d358:	220c      	movs	r2, #12
 801d35a:	6002      	str	r2, [r0, #0]
 801d35c:	e7f9      	b.n	801d352 <_calloc_r+0x12>
 801d35e:	462a      	mov	r2, r5
 801d360:	4621      	mov	r1, r4
 801d362:	f000 fd2d 	bl	801ddc0 <memset>
 801d366:	e7f5      	b.n	801d354 <_calloc_r+0x14>

0801d368 <exit>:
 801d368:	b508      	push	{r3, lr}
 801d36a:	4b06      	ldr	r3, [pc, #24]	@ (801d384 <exit+0x1c>)
 801d36c:	4604      	mov	r4, r0
 801d36e:	b113      	cbz	r3, 801d376 <exit+0xe>
 801d370:	2100      	movs	r1, #0
 801d372:	f3af 8000 	nop.w
 801d376:	4b04      	ldr	r3, [pc, #16]	@ (801d388 <exit+0x20>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	b103      	cbz	r3, 801d37e <exit+0x16>
 801d37c:	4798      	blx	r3
 801d37e:	4620      	mov	r0, r4
 801d380:	f7e6 f90c 	bl	800359c <_exit>
 801d384:	00000000 	.word	0x00000000
 801d388:	2001f91c 	.word	0x2001f91c

0801d38c <getenv>:
 801d38c:	b507      	push	{r0, r1, r2, lr}
 801d38e:	4b04      	ldr	r3, [pc, #16]	@ (801d3a0 <getenv+0x14>)
 801d390:	4601      	mov	r1, r0
 801d392:	aa01      	add	r2, sp, #4
 801d394:	6818      	ldr	r0, [r3, #0]
 801d396:	f000 f805 	bl	801d3a4 <_findenv_r>
 801d39a:	b003      	add	sp, #12
 801d39c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d3a0:	20001bf4 	.word	0x20001bf4

0801d3a4 <_findenv_r>:
 801d3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801d418 <_findenv_r+0x74>
 801d3ac:	4606      	mov	r6, r0
 801d3ae:	4689      	mov	r9, r1
 801d3b0:	4617      	mov	r7, r2
 801d3b2:	f000 fe63 	bl	801e07c <__env_lock>
 801d3b6:	f8da 4000 	ldr.w	r4, [sl]
 801d3ba:	b134      	cbz	r4, 801d3ca <_findenv_r+0x26>
 801d3bc:	464b      	mov	r3, r9
 801d3be:	4698      	mov	r8, r3
 801d3c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d3c4:	b13a      	cbz	r2, 801d3d6 <_findenv_r+0x32>
 801d3c6:	2a3d      	cmp	r2, #61	@ 0x3d
 801d3c8:	d1f9      	bne.n	801d3be <_findenv_r+0x1a>
 801d3ca:	4630      	mov	r0, r6
 801d3cc:	f000 fe5c 	bl	801e088 <__env_unlock>
 801d3d0:	2000      	movs	r0, #0
 801d3d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d6:	eba8 0809 	sub.w	r8, r8, r9
 801d3da:	46a3      	mov	fp, r4
 801d3dc:	f854 0b04 	ldr.w	r0, [r4], #4
 801d3e0:	2800      	cmp	r0, #0
 801d3e2:	d0f2      	beq.n	801d3ca <_findenv_r+0x26>
 801d3e4:	4642      	mov	r2, r8
 801d3e6:	4649      	mov	r1, r9
 801d3e8:	f000 fcff 	bl	801ddea <strncmp>
 801d3ec:	2800      	cmp	r0, #0
 801d3ee:	d1f4      	bne.n	801d3da <_findenv_r+0x36>
 801d3f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d3f4:	eb03 0508 	add.w	r5, r3, r8
 801d3f8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d3fc:	2b3d      	cmp	r3, #61	@ 0x3d
 801d3fe:	d1ec      	bne.n	801d3da <_findenv_r+0x36>
 801d400:	f8da 3000 	ldr.w	r3, [sl]
 801d404:	ebab 0303 	sub.w	r3, fp, r3
 801d408:	109b      	asrs	r3, r3, #2
 801d40a:	4630      	mov	r0, r6
 801d40c:	603b      	str	r3, [r7, #0]
 801d40e:	f000 fe3b 	bl	801e088 <__env_unlock>
 801d412:	1c68      	adds	r0, r5, #1
 801d414:	e7dd      	b.n	801d3d2 <_findenv_r+0x2e>
 801d416:	bf00      	nop
 801d418:	20000018 	.word	0x20000018

0801d41c <malloc>:
 801d41c:	4b02      	ldr	r3, [pc, #8]	@ (801d428 <malloc+0xc>)
 801d41e:	4601      	mov	r1, r0
 801d420:	6818      	ldr	r0, [r3, #0]
 801d422:	f000 b82d 	b.w	801d480 <_malloc_r>
 801d426:	bf00      	nop
 801d428:	20001bf4 	.word	0x20001bf4

0801d42c <free>:
 801d42c:	4b02      	ldr	r3, [pc, #8]	@ (801d438 <free+0xc>)
 801d42e:	4601      	mov	r1, r0
 801d430:	6818      	ldr	r0, [r3, #0]
 801d432:	f000 be2f 	b.w	801e094 <_free_r>
 801d436:	bf00      	nop
 801d438:	20001bf4 	.word	0x20001bf4

0801d43c <sbrk_aligned>:
 801d43c:	b570      	push	{r4, r5, r6, lr}
 801d43e:	4e0f      	ldr	r6, [pc, #60]	@ (801d47c <sbrk_aligned+0x40>)
 801d440:	460c      	mov	r4, r1
 801d442:	6831      	ldr	r1, [r6, #0]
 801d444:	4605      	mov	r5, r0
 801d446:	b911      	cbnz	r1, 801d44e <sbrk_aligned+0x12>
 801d448:	f000 fd94 	bl	801df74 <_sbrk_r>
 801d44c:	6030      	str	r0, [r6, #0]
 801d44e:	4621      	mov	r1, r4
 801d450:	4628      	mov	r0, r5
 801d452:	f000 fd8f 	bl	801df74 <_sbrk_r>
 801d456:	1c43      	adds	r3, r0, #1
 801d458:	d103      	bne.n	801d462 <sbrk_aligned+0x26>
 801d45a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801d45e:	4620      	mov	r0, r4
 801d460:	bd70      	pop	{r4, r5, r6, pc}
 801d462:	1cc4      	adds	r4, r0, #3
 801d464:	f024 0403 	bic.w	r4, r4, #3
 801d468:	42a0      	cmp	r0, r4
 801d46a:	d0f8      	beq.n	801d45e <sbrk_aligned+0x22>
 801d46c:	1a21      	subs	r1, r4, r0
 801d46e:	4628      	mov	r0, r5
 801d470:	f000 fd80 	bl	801df74 <_sbrk_r>
 801d474:	3001      	adds	r0, #1
 801d476:	d1f2      	bne.n	801d45e <sbrk_aligned+0x22>
 801d478:	e7ef      	b.n	801d45a <sbrk_aligned+0x1e>
 801d47a:	bf00      	nop
 801d47c:	2001f7dc 	.word	0x2001f7dc

0801d480 <_malloc_r>:
 801d480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d484:	1ccd      	adds	r5, r1, #3
 801d486:	f025 0503 	bic.w	r5, r5, #3
 801d48a:	3508      	adds	r5, #8
 801d48c:	2d0c      	cmp	r5, #12
 801d48e:	bf38      	it	cc
 801d490:	250c      	movcc	r5, #12
 801d492:	2d00      	cmp	r5, #0
 801d494:	4606      	mov	r6, r0
 801d496:	db01      	blt.n	801d49c <_malloc_r+0x1c>
 801d498:	42a9      	cmp	r1, r5
 801d49a:	d904      	bls.n	801d4a6 <_malloc_r+0x26>
 801d49c:	230c      	movs	r3, #12
 801d49e:	6033      	str	r3, [r6, #0]
 801d4a0:	2000      	movs	r0, #0
 801d4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d57c <_malloc_r+0xfc>
 801d4aa:	f000 f869 	bl	801d580 <__malloc_lock>
 801d4ae:	f8d8 3000 	ldr.w	r3, [r8]
 801d4b2:	461c      	mov	r4, r3
 801d4b4:	bb44      	cbnz	r4, 801d508 <_malloc_r+0x88>
 801d4b6:	4629      	mov	r1, r5
 801d4b8:	4630      	mov	r0, r6
 801d4ba:	f7ff ffbf 	bl	801d43c <sbrk_aligned>
 801d4be:	1c43      	adds	r3, r0, #1
 801d4c0:	4604      	mov	r4, r0
 801d4c2:	d158      	bne.n	801d576 <_malloc_r+0xf6>
 801d4c4:	f8d8 4000 	ldr.w	r4, [r8]
 801d4c8:	4627      	mov	r7, r4
 801d4ca:	2f00      	cmp	r7, #0
 801d4cc:	d143      	bne.n	801d556 <_malloc_r+0xd6>
 801d4ce:	2c00      	cmp	r4, #0
 801d4d0:	d04b      	beq.n	801d56a <_malloc_r+0xea>
 801d4d2:	6823      	ldr	r3, [r4, #0]
 801d4d4:	4639      	mov	r1, r7
 801d4d6:	4630      	mov	r0, r6
 801d4d8:	eb04 0903 	add.w	r9, r4, r3
 801d4dc:	f000 fd4a 	bl	801df74 <_sbrk_r>
 801d4e0:	4581      	cmp	r9, r0
 801d4e2:	d142      	bne.n	801d56a <_malloc_r+0xea>
 801d4e4:	6821      	ldr	r1, [r4, #0]
 801d4e6:	1a6d      	subs	r5, r5, r1
 801d4e8:	4629      	mov	r1, r5
 801d4ea:	4630      	mov	r0, r6
 801d4ec:	f7ff ffa6 	bl	801d43c <sbrk_aligned>
 801d4f0:	3001      	adds	r0, #1
 801d4f2:	d03a      	beq.n	801d56a <_malloc_r+0xea>
 801d4f4:	6823      	ldr	r3, [r4, #0]
 801d4f6:	442b      	add	r3, r5
 801d4f8:	6023      	str	r3, [r4, #0]
 801d4fa:	f8d8 3000 	ldr.w	r3, [r8]
 801d4fe:	685a      	ldr	r2, [r3, #4]
 801d500:	bb62      	cbnz	r2, 801d55c <_malloc_r+0xdc>
 801d502:	f8c8 7000 	str.w	r7, [r8]
 801d506:	e00f      	b.n	801d528 <_malloc_r+0xa8>
 801d508:	6822      	ldr	r2, [r4, #0]
 801d50a:	1b52      	subs	r2, r2, r5
 801d50c:	d420      	bmi.n	801d550 <_malloc_r+0xd0>
 801d50e:	2a0b      	cmp	r2, #11
 801d510:	d917      	bls.n	801d542 <_malloc_r+0xc2>
 801d512:	1961      	adds	r1, r4, r5
 801d514:	42a3      	cmp	r3, r4
 801d516:	6025      	str	r5, [r4, #0]
 801d518:	bf18      	it	ne
 801d51a:	6059      	strne	r1, [r3, #4]
 801d51c:	6863      	ldr	r3, [r4, #4]
 801d51e:	bf08      	it	eq
 801d520:	f8c8 1000 	streq.w	r1, [r8]
 801d524:	5162      	str	r2, [r4, r5]
 801d526:	604b      	str	r3, [r1, #4]
 801d528:	4630      	mov	r0, r6
 801d52a:	f000 f82f 	bl	801d58c <__malloc_unlock>
 801d52e:	f104 000b 	add.w	r0, r4, #11
 801d532:	1d23      	adds	r3, r4, #4
 801d534:	f020 0007 	bic.w	r0, r0, #7
 801d538:	1ac2      	subs	r2, r0, r3
 801d53a:	bf1c      	itt	ne
 801d53c:	1a1b      	subne	r3, r3, r0
 801d53e:	50a3      	strne	r3, [r4, r2]
 801d540:	e7af      	b.n	801d4a2 <_malloc_r+0x22>
 801d542:	6862      	ldr	r2, [r4, #4]
 801d544:	42a3      	cmp	r3, r4
 801d546:	bf0c      	ite	eq
 801d548:	f8c8 2000 	streq.w	r2, [r8]
 801d54c:	605a      	strne	r2, [r3, #4]
 801d54e:	e7eb      	b.n	801d528 <_malloc_r+0xa8>
 801d550:	4623      	mov	r3, r4
 801d552:	6864      	ldr	r4, [r4, #4]
 801d554:	e7ae      	b.n	801d4b4 <_malloc_r+0x34>
 801d556:	463c      	mov	r4, r7
 801d558:	687f      	ldr	r7, [r7, #4]
 801d55a:	e7b6      	b.n	801d4ca <_malloc_r+0x4a>
 801d55c:	461a      	mov	r2, r3
 801d55e:	685b      	ldr	r3, [r3, #4]
 801d560:	42a3      	cmp	r3, r4
 801d562:	d1fb      	bne.n	801d55c <_malloc_r+0xdc>
 801d564:	2300      	movs	r3, #0
 801d566:	6053      	str	r3, [r2, #4]
 801d568:	e7de      	b.n	801d528 <_malloc_r+0xa8>
 801d56a:	230c      	movs	r3, #12
 801d56c:	6033      	str	r3, [r6, #0]
 801d56e:	4630      	mov	r0, r6
 801d570:	f000 f80c 	bl	801d58c <__malloc_unlock>
 801d574:	e794      	b.n	801d4a0 <_malloc_r+0x20>
 801d576:	6005      	str	r5, [r0, #0]
 801d578:	e7d6      	b.n	801d528 <_malloc_r+0xa8>
 801d57a:	bf00      	nop
 801d57c:	2001f7e0 	.word	0x2001f7e0

0801d580 <__malloc_lock>:
 801d580:	4801      	ldr	r0, [pc, #4]	@ (801d588 <__malloc_lock+0x8>)
 801d582:	f000 bd44 	b.w	801e00e <__retarget_lock_acquire_recursive>
 801d586:	bf00      	nop
 801d588:	2001f925 	.word	0x2001f925

0801d58c <__malloc_unlock>:
 801d58c:	4801      	ldr	r0, [pc, #4]	@ (801d594 <__malloc_unlock+0x8>)
 801d58e:	f000 bd3f 	b.w	801e010 <__retarget_lock_release_recursive>
 801d592:	bf00      	nop
 801d594:	2001f925 	.word	0x2001f925

0801d598 <srand>:
 801d598:	b538      	push	{r3, r4, r5, lr}
 801d59a:	4b10      	ldr	r3, [pc, #64]	@ (801d5dc <srand+0x44>)
 801d59c:	681d      	ldr	r5, [r3, #0]
 801d59e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d5a0:	4604      	mov	r4, r0
 801d5a2:	b9b3      	cbnz	r3, 801d5d2 <srand+0x3a>
 801d5a4:	2018      	movs	r0, #24
 801d5a6:	f7ff ff39 	bl	801d41c <malloc>
 801d5aa:	4602      	mov	r2, r0
 801d5ac:	6328      	str	r0, [r5, #48]	@ 0x30
 801d5ae:	b920      	cbnz	r0, 801d5ba <srand+0x22>
 801d5b0:	4b0b      	ldr	r3, [pc, #44]	@ (801d5e0 <srand+0x48>)
 801d5b2:	480c      	ldr	r0, [pc, #48]	@ (801d5e4 <srand+0x4c>)
 801d5b4:	2146      	movs	r1, #70	@ 0x46
 801d5b6:	f000 fd43 	bl	801e040 <__assert_func>
 801d5ba:	490b      	ldr	r1, [pc, #44]	@ (801d5e8 <srand+0x50>)
 801d5bc:	4b0b      	ldr	r3, [pc, #44]	@ (801d5ec <srand+0x54>)
 801d5be:	e9c0 1300 	strd	r1, r3, [r0]
 801d5c2:	4b0b      	ldr	r3, [pc, #44]	@ (801d5f0 <srand+0x58>)
 801d5c4:	6083      	str	r3, [r0, #8]
 801d5c6:	230b      	movs	r3, #11
 801d5c8:	8183      	strh	r3, [r0, #12]
 801d5ca:	2100      	movs	r1, #0
 801d5cc:	2001      	movs	r0, #1
 801d5ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d5d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	611c      	str	r4, [r3, #16]
 801d5d8:	615a      	str	r2, [r3, #20]
 801d5da:	bd38      	pop	{r3, r4, r5, pc}
 801d5dc:	20001bf4 	.word	0x20001bf4
 801d5e0:	080216e2 	.word	0x080216e2
 801d5e4:	080216f9 	.word	0x080216f9
 801d5e8:	abcd330e 	.word	0xabcd330e
 801d5ec:	e66d1234 	.word	0xe66d1234
 801d5f0:	0005deec 	.word	0x0005deec

0801d5f4 <rand>:
 801d5f4:	4b16      	ldr	r3, [pc, #88]	@ (801d650 <rand+0x5c>)
 801d5f6:	b510      	push	{r4, lr}
 801d5f8:	681c      	ldr	r4, [r3, #0]
 801d5fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d5fc:	b9b3      	cbnz	r3, 801d62c <rand+0x38>
 801d5fe:	2018      	movs	r0, #24
 801d600:	f7ff ff0c 	bl	801d41c <malloc>
 801d604:	4602      	mov	r2, r0
 801d606:	6320      	str	r0, [r4, #48]	@ 0x30
 801d608:	b920      	cbnz	r0, 801d614 <rand+0x20>
 801d60a:	4b12      	ldr	r3, [pc, #72]	@ (801d654 <rand+0x60>)
 801d60c:	4812      	ldr	r0, [pc, #72]	@ (801d658 <rand+0x64>)
 801d60e:	2152      	movs	r1, #82	@ 0x52
 801d610:	f000 fd16 	bl	801e040 <__assert_func>
 801d614:	4911      	ldr	r1, [pc, #68]	@ (801d65c <rand+0x68>)
 801d616:	4b12      	ldr	r3, [pc, #72]	@ (801d660 <rand+0x6c>)
 801d618:	e9c0 1300 	strd	r1, r3, [r0]
 801d61c:	4b11      	ldr	r3, [pc, #68]	@ (801d664 <rand+0x70>)
 801d61e:	6083      	str	r3, [r0, #8]
 801d620:	230b      	movs	r3, #11
 801d622:	8183      	strh	r3, [r0, #12]
 801d624:	2100      	movs	r1, #0
 801d626:	2001      	movs	r0, #1
 801d628:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d62c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d62e:	480e      	ldr	r0, [pc, #56]	@ (801d668 <rand+0x74>)
 801d630:	690b      	ldr	r3, [r1, #16]
 801d632:	694c      	ldr	r4, [r1, #20]
 801d634:	4a0d      	ldr	r2, [pc, #52]	@ (801d66c <rand+0x78>)
 801d636:	4358      	muls	r0, r3
 801d638:	fb02 0004 	mla	r0, r2, r4, r0
 801d63c:	fba3 3202 	umull	r3, r2, r3, r2
 801d640:	3301      	adds	r3, #1
 801d642:	eb40 0002 	adc.w	r0, r0, r2
 801d646:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d64a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d64e:	bd10      	pop	{r4, pc}
 801d650:	20001bf4 	.word	0x20001bf4
 801d654:	080216e2 	.word	0x080216e2
 801d658:	080216f9 	.word	0x080216f9
 801d65c:	abcd330e 	.word	0xabcd330e
 801d660:	e66d1234 	.word	0xe66d1234
 801d664:	0005deec 	.word	0x0005deec
 801d668:	5851f42d 	.word	0x5851f42d
 801d66c:	4c957f2d 	.word	0x4c957f2d

0801d670 <realloc>:
 801d670:	4b02      	ldr	r3, [pc, #8]	@ (801d67c <realloc+0xc>)
 801d672:	460a      	mov	r2, r1
 801d674:	4601      	mov	r1, r0
 801d676:	6818      	ldr	r0, [r3, #0]
 801d678:	f000 b802 	b.w	801d680 <_realloc_r>
 801d67c:	20001bf4 	.word	0x20001bf4

0801d680 <_realloc_r>:
 801d680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d684:	4680      	mov	r8, r0
 801d686:	4615      	mov	r5, r2
 801d688:	460c      	mov	r4, r1
 801d68a:	b921      	cbnz	r1, 801d696 <_realloc_r+0x16>
 801d68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d690:	4611      	mov	r1, r2
 801d692:	f7ff bef5 	b.w	801d480 <_malloc_r>
 801d696:	b92a      	cbnz	r2, 801d6a4 <_realloc_r+0x24>
 801d698:	f000 fcfc 	bl	801e094 <_free_r>
 801d69c:	2400      	movs	r4, #0
 801d69e:	4620      	mov	r0, r4
 801d6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6a4:	f000 fd40 	bl	801e128 <_malloc_usable_size_r>
 801d6a8:	4285      	cmp	r5, r0
 801d6aa:	4606      	mov	r6, r0
 801d6ac:	d802      	bhi.n	801d6b4 <_realloc_r+0x34>
 801d6ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d6b2:	d8f4      	bhi.n	801d69e <_realloc_r+0x1e>
 801d6b4:	4629      	mov	r1, r5
 801d6b6:	4640      	mov	r0, r8
 801d6b8:	f7ff fee2 	bl	801d480 <_malloc_r>
 801d6bc:	4607      	mov	r7, r0
 801d6be:	2800      	cmp	r0, #0
 801d6c0:	d0ec      	beq.n	801d69c <_realloc_r+0x1c>
 801d6c2:	42b5      	cmp	r5, r6
 801d6c4:	462a      	mov	r2, r5
 801d6c6:	4621      	mov	r1, r4
 801d6c8:	bf28      	it	cs
 801d6ca:	4632      	movcs	r2, r6
 801d6cc:	f000 fca9 	bl	801e022 <memcpy>
 801d6d0:	4621      	mov	r1, r4
 801d6d2:	4640      	mov	r0, r8
 801d6d4:	f000 fcde 	bl	801e094 <_free_r>
 801d6d8:	463c      	mov	r4, r7
 801d6da:	e7e0      	b.n	801d69e <_realloc_r+0x1e>

0801d6dc <_strtoul_l.constprop.0>:
 801d6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6e0:	4e34      	ldr	r6, [pc, #208]	@ (801d7b4 <_strtoul_l.constprop.0+0xd8>)
 801d6e2:	4686      	mov	lr, r0
 801d6e4:	460d      	mov	r5, r1
 801d6e6:	4628      	mov	r0, r5
 801d6e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d6ec:	5d37      	ldrb	r7, [r6, r4]
 801d6ee:	f017 0708 	ands.w	r7, r7, #8
 801d6f2:	d1f8      	bne.n	801d6e6 <_strtoul_l.constprop.0+0xa>
 801d6f4:	2c2d      	cmp	r4, #45	@ 0x2d
 801d6f6:	d12f      	bne.n	801d758 <_strtoul_l.constprop.0+0x7c>
 801d6f8:	782c      	ldrb	r4, [r5, #0]
 801d6fa:	2701      	movs	r7, #1
 801d6fc:	1c85      	adds	r5, r0, #2
 801d6fe:	f033 0010 	bics.w	r0, r3, #16
 801d702:	d109      	bne.n	801d718 <_strtoul_l.constprop.0+0x3c>
 801d704:	2c30      	cmp	r4, #48	@ 0x30
 801d706:	d12c      	bne.n	801d762 <_strtoul_l.constprop.0+0x86>
 801d708:	7828      	ldrb	r0, [r5, #0]
 801d70a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801d70e:	2858      	cmp	r0, #88	@ 0x58
 801d710:	d127      	bne.n	801d762 <_strtoul_l.constprop.0+0x86>
 801d712:	786c      	ldrb	r4, [r5, #1]
 801d714:	2310      	movs	r3, #16
 801d716:	3502      	adds	r5, #2
 801d718:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801d71c:	2600      	movs	r6, #0
 801d71e:	fbb8 f8f3 	udiv	r8, r8, r3
 801d722:	fb03 f908 	mul.w	r9, r3, r8
 801d726:	ea6f 0909 	mvn.w	r9, r9
 801d72a:	4630      	mov	r0, r6
 801d72c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d730:	f1bc 0f09 	cmp.w	ip, #9
 801d734:	d81c      	bhi.n	801d770 <_strtoul_l.constprop.0+0x94>
 801d736:	4664      	mov	r4, ip
 801d738:	42a3      	cmp	r3, r4
 801d73a:	dd2a      	ble.n	801d792 <_strtoul_l.constprop.0+0xb6>
 801d73c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801d740:	d007      	beq.n	801d752 <_strtoul_l.constprop.0+0x76>
 801d742:	4580      	cmp	r8, r0
 801d744:	d322      	bcc.n	801d78c <_strtoul_l.constprop.0+0xb0>
 801d746:	d101      	bne.n	801d74c <_strtoul_l.constprop.0+0x70>
 801d748:	45a1      	cmp	r9, r4
 801d74a:	db1f      	blt.n	801d78c <_strtoul_l.constprop.0+0xb0>
 801d74c:	fb00 4003 	mla	r0, r0, r3, r4
 801d750:	2601      	movs	r6, #1
 801d752:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d756:	e7e9      	b.n	801d72c <_strtoul_l.constprop.0+0x50>
 801d758:	2c2b      	cmp	r4, #43	@ 0x2b
 801d75a:	bf04      	itt	eq
 801d75c:	782c      	ldrbeq	r4, [r5, #0]
 801d75e:	1c85      	addeq	r5, r0, #2
 801d760:	e7cd      	b.n	801d6fe <_strtoul_l.constprop.0+0x22>
 801d762:	2b00      	cmp	r3, #0
 801d764:	d1d8      	bne.n	801d718 <_strtoul_l.constprop.0+0x3c>
 801d766:	2c30      	cmp	r4, #48	@ 0x30
 801d768:	bf0c      	ite	eq
 801d76a:	2308      	moveq	r3, #8
 801d76c:	230a      	movne	r3, #10
 801d76e:	e7d3      	b.n	801d718 <_strtoul_l.constprop.0+0x3c>
 801d770:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801d774:	f1bc 0f19 	cmp.w	ip, #25
 801d778:	d801      	bhi.n	801d77e <_strtoul_l.constprop.0+0xa2>
 801d77a:	3c37      	subs	r4, #55	@ 0x37
 801d77c:	e7dc      	b.n	801d738 <_strtoul_l.constprop.0+0x5c>
 801d77e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801d782:	f1bc 0f19 	cmp.w	ip, #25
 801d786:	d804      	bhi.n	801d792 <_strtoul_l.constprop.0+0xb6>
 801d788:	3c57      	subs	r4, #87	@ 0x57
 801d78a:	e7d5      	b.n	801d738 <_strtoul_l.constprop.0+0x5c>
 801d78c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801d790:	e7df      	b.n	801d752 <_strtoul_l.constprop.0+0x76>
 801d792:	1c73      	adds	r3, r6, #1
 801d794:	d106      	bne.n	801d7a4 <_strtoul_l.constprop.0+0xc8>
 801d796:	2322      	movs	r3, #34	@ 0x22
 801d798:	f8ce 3000 	str.w	r3, [lr]
 801d79c:	4630      	mov	r0, r6
 801d79e:	b932      	cbnz	r2, 801d7ae <_strtoul_l.constprop.0+0xd2>
 801d7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7a4:	b107      	cbz	r7, 801d7a8 <_strtoul_l.constprop.0+0xcc>
 801d7a6:	4240      	negs	r0, r0
 801d7a8:	2a00      	cmp	r2, #0
 801d7aa:	d0f9      	beq.n	801d7a0 <_strtoul_l.constprop.0+0xc4>
 801d7ac:	b106      	cbz	r6, 801d7b0 <_strtoul_l.constprop.0+0xd4>
 801d7ae:	1e69      	subs	r1, r5, #1
 801d7b0:	6011      	str	r1, [r2, #0]
 801d7b2:	e7f5      	b.n	801d7a0 <_strtoul_l.constprop.0+0xc4>
 801d7b4:	08021752 	.word	0x08021752

0801d7b8 <strtoul>:
 801d7b8:	4613      	mov	r3, r2
 801d7ba:	460a      	mov	r2, r1
 801d7bc:	4601      	mov	r1, r0
 801d7be:	4802      	ldr	r0, [pc, #8]	@ (801d7c8 <strtoul+0x10>)
 801d7c0:	6800      	ldr	r0, [r0, #0]
 801d7c2:	f7ff bf8b 	b.w	801d6dc <_strtoul_l.constprop.0>
 801d7c6:	bf00      	nop
 801d7c8:	20001bf4 	.word	0x20001bf4

0801d7cc <std>:
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	b510      	push	{r4, lr}
 801d7d0:	4604      	mov	r4, r0
 801d7d2:	e9c0 3300 	strd	r3, r3, [r0]
 801d7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d7da:	6083      	str	r3, [r0, #8]
 801d7dc:	8181      	strh	r1, [r0, #12]
 801d7de:	6643      	str	r3, [r0, #100]	@ 0x64
 801d7e0:	81c2      	strh	r2, [r0, #14]
 801d7e2:	6183      	str	r3, [r0, #24]
 801d7e4:	4619      	mov	r1, r3
 801d7e6:	2208      	movs	r2, #8
 801d7e8:	305c      	adds	r0, #92	@ 0x5c
 801d7ea:	f000 fae9 	bl	801ddc0 <memset>
 801d7ee:	4b0d      	ldr	r3, [pc, #52]	@ (801d824 <std+0x58>)
 801d7f0:	6263      	str	r3, [r4, #36]	@ 0x24
 801d7f2:	4b0d      	ldr	r3, [pc, #52]	@ (801d828 <std+0x5c>)
 801d7f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d7f6:	4b0d      	ldr	r3, [pc, #52]	@ (801d82c <std+0x60>)
 801d7f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d7fa:	4b0d      	ldr	r3, [pc, #52]	@ (801d830 <std+0x64>)
 801d7fc:	6323      	str	r3, [r4, #48]	@ 0x30
 801d7fe:	4b0d      	ldr	r3, [pc, #52]	@ (801d834 <std+0x68>)
 801d800:	6224      	str	r4, [r4, #32]
 801d802:	429c      	cmp	r4, r3
 801d804:	d006      	beq.n	801d814 <std+0x48>
 801d806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d80a:	4294      	cmp	r4, r2
 801d80c:	d002      	beq.n	801d814 <std+0x48>
 801d80e:	33d0      	adds	r3, #208	@ 0xd0
 801d810:	429c      	cmp	r4, r3
 801d812:	d105      	bne.n	801d820 <std+0x54>
 801d814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d81c:	f000 bbf6 	b.w	801e00c <__retarget_lock_init_recursive>
 801d820:	bd10      	pop	{r4, pc}
 801d822:	bf00      	nop
 801d824:	0801db4d 	.word	0x0801db4d
 801d828:	0801db6f 	.word	0x0801db6f
 801d82c:	0801dba7 	.word	0x0801dba7
 801d830:	0801dbcb 	.word	0x0801dbcb
 801d834:	2001f7e4 	.word	0x2001f7e4

0801d838 <stdio_exit_handler>:
 801d838:	4a02      	ldr	r2, [pc, #8]	@ (801d844 <stdio_exit_handler+0xc>)
 801d83a:	4903      	ldr	r1, [pc, #12]	@ (801d848 <stdio_exit_handler+0x10>)
 801d83c:	4803      	ldr	r0, [pc, #12]	@ (801d84c <stdio_exit_handler+0x14>)
 801d83e:	f000 b869 	b.w	801d914 <_fwalk_sglue>
 801d842:	bf00      	nop
 801d844:	20001be8 	.word	0x20001be8
 801d848:	0801ea91 	.word	0x0801ea91
 801d84c:	20001bf8 	.word	0x20001bf8

0801d850 <cleanup_stdio>:
 801d850:	6841      	ldr	r1, [r0, #4]
 801d852:	4b0c      	ldr	r3, [pc, #48]	@ (801d884 <cleanup_stdio+0x34>)
 801d854:	4299      	cmp	r1, r3
 801d856:	b510      	push	{r4, lr}
 801d858:	4604      	mov	r4, r0
 801d85a:	d001      	beq.n	801d860 <cleanup_stdio+0x10>
 801d85c:	f001 f918 	bl	801ea90 <_fflush_r>
 801d860:	68a1      	ldr	r1, [r4, #8]
 801d862:	4b09      	ldr	r3, [pc, #36]	@ (801d888 <cleanup_stdio+0x38>)
 801d864:	4299      	cmp	r1, r3
 801d866:	d002      	beq.n	801d86e <cleanup_stdio+0x1e>
 801d868:	4620      	mov	r0, r4
 801d86a:	f001 f911 	bl	801ea90 <_fflush_r>
 801d86e:	68e1      	ldr	r1, [r4, #12]
 801d870:	4b06      	ldr	r3, [pc, #24]	@ (801d88c <cleanup_stdio+0x3c>)
 801d872:	4299      	cmp	r1, r3
 801d874:	d004      	beq.n	801d880 <cleanup_stdio+0x30>
 801d876:	4620      	mov	r0, r4
 801d878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d87c:	f001 b908 	b.w	801ea90 <_fflush_r>
 801d880:	bd10      	pop	{r4, pc}
 801d882:	bf00      	nop
 801d884:	2001f7e4 	.word	0x2001f7e4
 801d888:	2001f84c 	.word	0x2001f84c
 801d88c:	2001f8b4 	.word	0x2001f8b4

0801d890 <global_stdio_init.part.0>:
 801d890:	b510      	push	{r4, lr}
 801d892:	4b0b      	ldr	r3, [pc, #44]	@ (801d8c0 <global_stdio_init.part.0+0x30>)
 801d894:	4c0b      	ldr	r4, [pc, #44]	@ (801d8c4 <global_stdio_init.part.0+0x34>)
 801d896:	4a0c      	ldr	r2, [pc, #48]	@ (801d8c8 <global_stdio_init.part.0+0x38>)
 801d898:	601a      	str	r2, [r3, #0]
 801d89a:	4620      	mov	r0, r4
 801d89c:	2200      	movs	r2, #0
 801d89e:	2104      	movs	r1, #4
 801d8a0:	f7ff ff94 	bl	801d7cc <std>
 801d8a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d8a8:	2201      	movs	r2, #1
 801d8aa:	2109      	movs	r1, #9
 801d8ac:	f7ff ff8e 	bl	801d7cc <std>
 801d8b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d8b4:	2202      	movs	r2, #2
 801d8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8ba:	2112      	movs	r1, #18
 801d8bc:	f7ff bf86 	b.w	801d7cc <std>
 801d8c0:	2001f91c 	.word	0x2001f91c
 801d8c4:	2001f7e4 	.word	0x2001f7e4
 801d8c8:	0801d839 	.word	0x0801d839

0801d8cc <__sfp_lock_acquire>:
 801d8cc:	4801      	ldr	r0, [pc, #4]	@ (801d8d4 <__sfp_lock_acquire+0x8>)
 801d8ce:	f000 bb9e 	b.w	801e00e <__retarget_lock_acquire_recursive>
 801d8d2:	bf00      	nop
 801d8d4:	2001f926 	.word	0x2001f926

0801d8d8 <__sfp_lock_release>:
 801d8d8:	4801      	ldr	r0, [pc, #4]	@ (801d8e0 <__sfp_lock_release+0x8>)
 801d8da:	f000 bb99 	b.w	801e010 <__retarget_lock_release_recursive>
 801d8de:	bf00      	nop
 801d8e0:	2001f926 	.word	0x2001f926

0801d8e4 <__sinit>:
 801d8e4:	b510      	push	{r4, lr}
 801d8e6:	4604      	mov	r4, r0
 801d8e8:	f7ff fff0 	bl	801d8cc <__sfp_lock_acquire>
 801d8ec:	6a23      	ldr	r3, [r4, #32]
 801d8ee:	b11b      	cbz	r3, 801d8f8 <__sinit+0x14>
 801d8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8f4:	f7ff bff0 	b.w	801d8d8 <__sfp_lock_release>
 801d8f8:	4b04      	ldr	r3, [pc, #16]	@ (801d90c <__sinit+0x28>)
 801d8fa:	6223      	str	r3, [r4, #32]
 801d8fc:	4b04      	ldr	r3, [pc, #16]	@ (801d910 <__sinit+0x2c>)
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	2b00      	cmp	r3, #0
 801d902:	d1f5      	bne.n	801d8f0 <__sinit+0xc>
 801d904:	f7ff ffc4 	bl	801d890 <global_stdio_init.part.0>
 801d908:	e7f2      	b.n	801d8f0 <__sinit+0xc>
 801d90a:	bf00      	nop
 801d90c:	0801d851 	.word	0x0801d851
 801d910:	2001f91c 	.word	0x2001f91c

0801d914 <_fwalk_sglue>:
 801d914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d918:	4607      	mov	r7, r0
 801d91a:	4688      	mov	r8, r1
 801d91c:	4614      	mov	r4, r2
 801d91e:	2600      	movs	r6, #0
 801d920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d924:	f1b9 0901 	subs.w	r9, r9, #1
 801d928:	d505      	bpl.n	801d936 <_fwalk_sglue+0x22>
 801d92a:	6824      	ldr	r4, [r4, #0]
 801d92c:	2c00      	cmp	r4, #0
 801d92e:	d1f7      	bne.n	801d920 <_fwalk_sglue+0xc>
 801d930:	4630      	mov	r0, r6
 801d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d936:	89ab      	ldrh	r3, [r5, #12]
 801d938:	2b01      	cmp	r3, #1
 801d93a:	d907      	bls.n	801d94c <_fwalk_sglue+0x38>
 801d93c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d940:	3301      	adds	r3, #1
 801d942:	d003      	beq.n	801d94c <_fwalk_sglue+0x38>
 801d944:	4629      	mov	r1, r5
 801d946:	4638      	mov	r0, r7
 801d948:	47c0      	blx	r8
 801d94a:	4306      	orrs	r6, r0
 801d94c:	3568      	adds	r5, #104	@ 0x68
 801d94e:	e7e9      	b.n	801d924 <_fwalk_sglue+0x10>

0801d950 <_fwrite_r>:
 801d950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d954:	9c08      	ldr	r4, [sp, #32]
 801d956:	468a      	mov	sl, r1
 801d958:	4690      	mov	r8, r2
 801d95a:	fb02 f903 	mul.w	r9, r2, r3
 801d95e:	4606      	mov	r6, r0
 801d960:	b118      	cbz	r0, 801d96a <_fwrite_r+0x1a>
 801d962:	6a03      	ldr	r3, [r0, #32]
 801d964:	b90b      	cbnz	r3, 801d96a <_fwrite_r+0x1a>
 801d966:	f7ff ffbd 	bl	801d8e4 <__sinit>
 801d96a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d96c:	07dd      	lsls	r5, r3, #31
 801d96e:	d405      	bmi.n	801d97c <_fwrite_r+0x2c>
 801d970:	89a3      	ldrh	r3, [r4, #12]
 801d972:	0598      	lsls	r0, r3, #22
 801d974:	d402      	bmi.n	801d97c <_fwrite_r+0x2c>
 801d976:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d978:	f000 fb49 	bl	801e00e <__retarget_lock_acquire_recursive>
 801d97c:	89a3      	ldrh	r3, [r4, #12]
 801d97e:	0719      	lsls	r1, r3, #28
 801d980:	d516      	bpl.n	801d9b0 <_fwrite_r+0x60>
 801d982:	6923      	ldr	r3, [r4, #16]
 801d984:	b1a3      	cbz	r3, 801d9b0 <_fwrite_r+0x60>
 801d986:	2500      	movs	r5, #0
 801d988:	454d      	cmp	r5, r9
 801d98a:	d01f      	beq.n	801d9cc <_fwrite_r+0x7c>
 801d98c:	68a7      	ldr	r7, [r4, #8]
 801d98e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801d992:	3f01      	subs	r7, #1
 801d994:	2f00      	cmp	r7, #0
 801d996:	60a7      	str	r7, [r4, #8]
 801d998:	da04      	bge.n	801d9a4 <_fwrite_r+0x54>
 801d99a:	69a3      	ldr	r3, [r4, #24]
 801d99c:	429f      	cmp	r7, r3
 801d99e:	db0f      	blt.n	801d9c0 <_fwrite_r+0x70>
 801d9a0:	290a      	cmp	r1, #10
 801d9a2:	d00d      	beq.n	801d9c0 <_fwrite_r+0x70>
 801d9a4:	6823      	ldr	r3, [r4, #0]
 801d9a6:	1c5a      	adds	r2, r3, #1
 801d9a8:	6022      	str	r2, [r4, #0]
 801d9aa:	7019      	strb	r1, [r3, #0]
 801d9ac:	3501      	adds	r5, #1
 801d9ae:	e7eb      	b.n	801d988 <_fwrite_r+0x38>
 801d9b0:	4621      	mov	r1, r4
 801d9b2:	4630      	mov	r0, r6
 801d9b4:	f000 f984 	bl	801dcc0 <__swsetup_r>
 801d9b8:	2800      	cmp	r0, #0
 801d9ba:	d0e4      	beq.n	801d986 <_fwrite_r+0x36>
 801d9bc:	2500      	movs	r5, #0
 801d9be:	e005      	b.n	801d9cc <_fwrite_r+0x7c>
 801d9c0:	4622      	mov	r2, r4
 801d9c2:	4630      	mov	r0, r6
 801d9c4:	f000 f93e 	bl	801dc44 <__swbuf_r>
 801d9c8:	3001      	adds	r0, #1
 801d9ca:	d1ef      	bne.n	801d9ac <_fwrite_r+0x5c>
 801d9cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d9ce:	07da      	lsls	r2, r3, #31
 801d9d0:	d405      	bmi.n	801d9de <_fwrite_r+0x8e>
 801d9d2:	89a3      	ldrh	r3, [r4, #12]
 801d9d4:	059b      	lsls	r3, r3, #22
 801d9d6:	d402      	bmi.n	801d9de <_fwrite_r+0x8e>
 801d9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d9da:	f000 fb19 	bl	801e010 <__retarget_lock_release_recursive>
 801d9de:	fbb5 f0f8 	udiv	r0, r5, r8
 801d9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d9e8 <fwrite>:
 801d9e8:	b507      	push	{r0, r1, r2, lr}
 801d9ea:	9300      	str	r3, [sp, #0]
 801d9ec:	4613      	mov	r3, r2
 801d9ee:	460a      	mov	r2, r1
 801d9f0:	4601      	mov	r1, r0
 801d9f2:	4803      	ldr	r0, [pc, #12]	@ (801da00 <fwrite+0x18>)
 801d9f4:	6800      	ldr	r0, [r0, #0]
 801d9f6:	f7ff ffab 	bl	801d950 <_fwrite_r>
 801d9fa:	b003      	add	sp, #12
 801d9fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801da00:	20001bf4 	.word	0x20001bf4

0801da04 <iprintf>:
 801da04:	b40f      	push	{r0, r1, r2, r3}
 801da06:	b507      	push	{r0, r1, r2, lr}
 801da08:	4906      	ldr	r1, [pc, #24]	@ (801da24 <iprintf+0x20>)
 801da0a:	ab04      	add	r3, sp, #16
 801da0c:	6808      	ldr	r0, [r1, #0]
 801da0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801da12:	6881      	ldr	r1, [r0, #8]
 801da14:	9301      	str	r3, [sp, #4]
 801da16:	f000 fd11 	bl	801e43c <_vfiprintf_r>
 801da1a:	b003      	add	sp, #12
 801da1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801da20:	b004      	add	sp, #16
 801da22:	4770      	bx	lr
 801da24:	20001bf4 	.word	0x20001bf4

0801da28 <_puts_r>:
 801da28:	6a03      	ldr	r3, [r0, #32]
 801da2a:	b570      	push	{r4, r5, r6, lr}
 801da2c:	6884      	ldr	r4, [r0, #8]
 801da2e:	4605      	mov	r5, r0
 801da30:	460e      	mov	r6, r1
 801da32:	b90b      	cbnz	r3, 801da38 <_puts_r+0x10>
 801da34:	f7ff ff56 	bl	801d8e4 <__sinit>
 801da38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801da3a:	07db      	lsls	r3, r3, #31
 801da3c:	d405      	bmi.n	801da4a <_puts_r+0x22>
 801da3e:	89a3      	ldrh	r3, [r4, #12]
 801da40:	0598      	lsls	r0, r3, #22
 801da42:	d402      	bmi.n	801da4a <_puts_r+0x22>
 801da44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801da46:	f000 fae2 	bl	801e00e <__retarget_lock_acquire_recursive>
 801da4a:	89a3      	ldrh	r3, [r4, #12]
 801da4c:	0719      	lsls	r1, r3, #28
 801da4e:	d502      	bpl.n	801da56 <_puts_r+0x2e>
 801da50:	6923      	ldr	r3, [r4, #16]
 801da52:	2b00      	cmp	r3, #0
 801da54:	d135      	bne.n	801dac2 <_puts_r+0x9a>
 801da56:	4621      	mov	r1, r4
 801da58:	4628      	mov	r0, r5
 801da5a:	f000 f931 	bl	801dcc0 <__swsetup_r>
 801da5e:	b380      	cbz	r0, 801dac2 <_puts_r+0x9a>
 801da60:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801da64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801da66:	07da      	lsls	r2, r3, #31
 801da68:	d405      	bmi.n	801da76 <_puts_r+0x4e>
 801da6a:	89a3      	ldrh	r3, [r4, #12]
 801da6c:	059b      	lsls	r3, r3, #22
 801da6e:	d402      	bmi.n	801da76 <_puts_r+0x4e>
 801da70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801da72:	f000 facd 	bl	801e010 <__retarget_lock_release_recursive>
 801da76:	4628      	mov	r0, r5
 801da78:	bd70      	pop	{r4, r5, r6, pc}
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	da04      	bge.n	801da88 <_puts_r+0x60>
 801da7e:	69a2      	ldr	r2, [r4, #24]
 801da80:	429a      	cmp	r2, r3
 801da82:	dc17      	bgt.n	801dab4 <_puts_r+0x8c>
 801da84:	290a      	cmp	r1, #10
 801da86:	d015      	beq.n	801dab4 <_puts_r+0x8c>
 801da88:	6823      	ldr	r3, [r4, #0]
 801da8a:	1c5a      	adds	r2, r3, #1
 801da8c:	6022      	str	r2, [r4, #0]
 801da8e:	7019      	strb	r1, [r3, #0]
 801da90:	68a3      	ldr	r3, [r4, #8]
 801da92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801da96:	3b01      	subs	r3, #1
 801da98:	60a3      	str	r3, [r4, #8]
 801da9a:	2900      	cmp	r1, #0
 801da9c:	d1ed      	bne.n	801da7a <_puts_r+0x52>
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	da11      	bge.n	801dac6 <_puts_r+0x9e>
 801daa2:	4622      	mov	r2, r4
 801daa4:	210a      	movs	r1, #10
 801daa6:	4628      	mov	r0, r5
 801daa8:	f000 f8cc 	bl	801dc44 <__swbuf_r>
 801daac:	3001      	adds	r0, #1
 801daae:	d0d7      	beq.n	801da60 <_puts_r+0x38>
 801dab0:	250a      	movs	r5, #10
 801dab2:	e7d7      	b.n	801da64 <_puts_r+0x3c>
 801dab4:	4622      	mov	r2, r4
 801dab6:	4628      	mov	r0, r5
 801dab8:	f000 f8c4 	bl	801dc44 <__swbuf_r>
 801dabc:	3001      	adds	r0, #1
 801dabe:	d1e7      	bne.n	801da90 <_puts_r+0x68>
 801dac0:	e7ce      	b.n	801da60 <_puts_r+0x38>
 801dac2:	3e01      	subs	r6, #1
 801dac4:	e7e4      	b.n	801da90 <_puts_r+0x68>
 801dac6:	6823      	ldr	r3, [r4, #0]
 801dac8:	1c5a      	adds	r2, r3, #1
 801daca:	6022      	str	r2, [r4, #0]
 801dacc:	220a      	movs	r2, #10
 801dace:	701a      	strb	r2, [r3, #0]
 801dad0:	e7ee      	b.n	801dab0 <_puts_r+0x88>
	...

0801dad4 <puts>:
 801dad4:	4b02      	ldr	r3, [pc, #8]	@ (801dae0 <puts+0xc>)
 801dad6:	4601      	mov	r1, r0
 801dad8:	6818      	ldr	r0, [r3, #0]
 801dada:	f7ff bfa5 	b.w	801da28 <_puts_r>
 801dade:	bf00      	nop
 801dae0:	20001bf4 	.word	0x20001bf4

0801dae4 <sniprintf>:
 801dae4:	b40c      	push	{r2, r3}
 801dae6:	b530      	push	{r4, r5, lr}
 801dae8:	4b17      	ldr	r3, [pc, #92]	@ (801db48 <sniprintf+0x64>)
 801daea:	1e0c      	subs	r4, r1, #0
 801daec:	681d      	ldr	r5, [r3, #0]
 801daee:	b09d      	sub	sp, #116	@ 0x74
 801daf0:	da08      	bge.n	801db04 <sniprintf+0x20>
 801daf2:	238b      	movs	r3, #139	@ 0x8b
 801daf4:	602b      	str	r3, [r5, #0]
 801daf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dafa:	b01d      	add	sp, #116	@ 0x74
 801dafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db00:	b002      	add	sp, #8
 801db02:	4770      	bx	lr
 801db04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801db08:	f8ad 3014 	strh.w	r3, [sp, #20]
 801db0c:	bf14      	ite	ne
 801db0e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801db12:	4623      	moveq	r3, r4
 801db14:	9304      	str	r3, [sp, #16]
 801db16:	9307      	str	r3, [sp, #28]
 801db18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801db1c:	9002      	str	r0, [sp, #8]
 801db1e:	9006      	str	r0, [sp, #24]
 801db20:	f8ad 3016 	strh.w	r3, [sp, #22]
 801db24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801db26:	ab21      	add	r3, sp, #132	@ 0x84
 801db28:	a902      	add	r1, sp, #8
 801db2a:	4628      	mov	r0, r5
 801db2c:	9301      	str	r3, [sp, #4]
 801db2e:	f000 fb5f 	bl	801e1f0 <_svfiprintf_r>
 801db32:	1c43      	adds	r3, r0, #1
 801db34:	bfbc      	itt	lt
 801db36:	238b      	movlt	r3, #139	@ 0x8b
 801db38:	602b      	strlt	r3, [r5, #0]
 801db3a:	2c00      	cmp	r4, #0
 801db3c:	d0dd      	beq.n	801dafa <sniprintf+0x16>
 801db3e:	9b02      	ldr	r3, [sp, #8]
 801db40:	2200      	movs	r2, #0
 801db42:	701a      	strb	r2, [r3, #0]
 801db44:	e7d9      	b.n	801dafa <sniprintf+0x16>
 801db46:	bf00      	nop
 801db48:	20001bf4 	.word	0x20001bf4

0801db4c <__sread>:
 801db4c:	b510      	push	{r4, lr}
 801db4e:	460c      	mov	r4, r1
 801db50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db54:	f000 f9fc 	bl	801df50 <_read_r>
 801db58:	2800      	cmp	r0, #0
 801db5a:	bfab      	itete	ge
 801db5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801db5e:	89a3      	ldrhlt	r3, [r4, #12]
 801db60:	181b      	addge	r3, r3, r0
 801db62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801db66:	bfac      	ite	ge
 801db68:	6563      	strge	r3, [r4, #84]	@ 0x54
 801db6a:	81a3      	strhlt	r3, [r4, #12]
 801db6c:	bd10      	pop	{r4, pc}

0801db6e <__swrite>:
 801db6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db72:	461f      	mov	r7, r3
 801db74:	898b      	ldrh	r3, [r1, #12]
 801db76:	05db      	lsls	r3, r3, #23
 801db78:	4605      	mov	r5, r0
 801db7a:	460c      	mov	r4, r1
 801db7c:	4616      	mov	r6, r2
 801db7e:	d505      	bpl.n	801db8c <__swrite+0x1e>
 801db80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db84:	2302      	movs	r3, #2
 801db86:	2200      	movs	r2, #0
 801db88:	f000 f9d0 	bl	801df2c <_lseek_r>
 801db8c:	89a3      	ldrh	r3, [r4, #12]
 801db8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801db96:	81a3      	strh	r3, [r4, #12]
 801db98:	4632      	mov	r2, r6
 801db9a:	463b      	mov	r3, r7
 801db9c:	4628      	mov	r0, r5
 801db9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dba2:	f000 b9f7 	b.w	801df94 <_write_r>

0801dba6 <__sseek>:
 801dba6:	b510      	push	{r4, lr}
 801dba8:	460c      	mov	r4, r1
 801dbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbae:	f000 f9bd 	bl	801df2c <_lseek_r>
 801dbb2:	1c43      	adds	r3, r0, #1
 801dbb4:	89a3      	ldrh	r3, [r4, #12]
 801dbb6:	bf15      	itete	ne
 801dbb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801dbba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801dbbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801dbc2:	81a3      	strheq	r3, [r4, #12]
 801dbc4:	bf18      	it	ne
 801dbc6:	81a3      	strhne	r3, [r4, #12]
 801dbc8:	bd10      	pop	{r4, pc}

0801dbca <__sclose>:
 801dbca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbce:	f000 b947 	b.w	801de60 <_close_r>

0801dbd2 <_vsniprintf_r>:
 801dbd2:	b530      	push	{r4, r5, lr}
 801dbd4:	4614      	mov	r4, r2
 801dbd6:	2c00      	cmp	r4, #0
 801dbd8:	b09b      	sub	sp, #108	@ 0x6c
 801dbda:	4605      	mov	r5, r0
 801dbdc:	461a      	mov	r2, r3
 801dbde:	da05      	bge.n	801dbec <_vsniprintf_r+0x1a>
 801dbe0:	238b      	movs	r3, #139	@ 0x8b
 801dbe2:	6003      	str	r3, [r0, #0]
 801dbe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dbe8:	b01b      	add	sp, #108	@ 0x6c
 801dbea:	bd30      	pop	{r4, r5, pc}
 801dbec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801dbf0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dbf4:	bf14      	ite	ne
 801dbf6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801dbfa:	4623      	moveq	r3, r4
 801dbfc:	9302      	str	r3, [sp, #8]
 801dbfe:	9305      	str	r3, [sp, #20]
 801dc00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dc04:	9100      	str	r1, [sp, #0]
 801dc06:	9104      	str	r1, [sp, #16]
 801dc08:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dc0c:	4669      	mov	r1, sp
 801dc0e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801dc10:	f000 faee 	bl	801e1f0 <_svfiprintf_r>
 801dc14:	1c43      	adds	r3, r0, #1
 801dc16:	bfbc      	itt	lt
 801dc18:	238b      	movlt	r3, #139	@ 0x8b
 801dc1a:	602b      	strlt	r3, [r5, #0]
 801dc1c:	2c00      	cmp	r4, #0
 801dc1e:	d0e3      	beq.n	801dbe8 <_vsniprintf_r+0x16>
 801dc20:	9b00      	ldr	r3, [sp, #0]
 801dc22:	2200      	movs	r2, #0
 801dc24:	701a      	strb	r2, [r3, #0]
 801dc26:	e7df      	b.n	801dbe8 <_vsniprintf_r+0x16>

0801dc28 <vsniprintf>:
 801dc28:	b507      	push	{r0, r1, r2, lr}
 801dc2a:	9300      	str	r3, [sp, #0]
 801dc2c:	4613      	mov	r3, r2
 801dc2e:	460a      	mov	r2, r1
 801dc30:	4601      	mov	r1, r0
 801dc32:	4803      	ldr	r0, [pc, #12]	@ (801dc40 <vsniprintf+0x18>)
 801dc34:	6800      	ldr	r0, [r0, #0]
 801dc36:	f7ff ffcc 	bl	801dbd2 <_vsniprintf_r>
 801dc3a:	b003      	add	sp, #12
 801dc3c:	f85d fb04 	ldr.w	pc, [sp], #4
 801dc40:	20001bf4 	.word	0x20001bf4

0801dc44 <__swbuf_r>:
 801dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc46:	460e      	mov	r6, r1
 801dc48:	4614      	mov	r4, r2
 801dc4a:	4605      	mov	r5, r0
 801dc4c:	b118      	cbz	r0, 801dc56 <__swbuf_r+0x12>
 801dc4e:	6a03      	ldr	r3, [r0, #32]
 801dc50:	b90b      	cbnz	r3, 801dc56 <__swbuf_r+0x12>
 801dc52:	f7ff fe47 	bl	801d8e4 <__sinit>
 801dc56:	69a3      	ldr	r3, [r4, #24]
 801dc58:	60a3      	str	r3, [r4, #8]
 801dc5a:	89a3      	ldrh	r3, [r4, #12]
 801dc5c:	071a      	lsls	r2, r3, #28
 801dc5e:	d501      	bpl.n	801dc64 <__swbuf_r+0x20>
 801dc60:	6923      	ldr	r3, [r4, #16]
 801dc62:	b943      	cbnz	r3, 801dc76 <__swbuf_r+0x32>
 801dc64:	4621      	mov	r1, r4
 801dc66:	4628      	mov	r0, r5
 801dc68:	f000 f82a 	bl	801dcc0 <__swsetup_r>
 801dc6c:	b118      	cbz	r0, 801dc76 <__swbuf_r+0x32>
 801dc6e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801dc72:	4638      	mov	r0, r7
 801dc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc76:	6823      	ldr	r3, [r4, #0]
 801dc78:	6922      	ldr	r2, [r4, #16]
 801dc7a:	1a98      	subs	r0, r3, r2
 801dc7c:	6963      	ldr	r3, [r4, #20]
 801dc7e:	b2f6      	uxtb	r6, r6
 801dc80:	4283      	cmp	r3, r0
 801dc82:	4637      	mov	r7, r6
 801dc84:	dc05      	bgt.n	801dc92 <__swbuf_r+0x4e>
 801dc86:	4621      	mov	r1, r4
 801dc88:	4628      	mov	r0, r5
 801dc8a:	f000 ff01 	bl	801ea90 <_fflush_r>
 801dc8e:	2800      	cmp	r0, #0
 801dc90:	d1ed      	bne.n	801dc6e <__swbuf_r+0x2a>
 801dc92:	68a3      	ldr	r3, [r4, #8]
 801dc94:	3b01      	subs	r3, #1
 801dc96:	60a3      	str	r3, [r4, #8]
 801dc98:	6823      	ldr	r3, [r4, #0]
 801dc9a:	1c5a      	adds	r2, r3, #1
 801dc9c:	6022      	str	r2, [r4, #0]
 801dc9e:	701e      	strb	r6, [r3, #0]
 801dca0:	6962      	ldr	r2, [r4, #20]
 801dca2:	1c43      	adds	r3, r0, #1
 801dca4:	429a      	cmp	r2, r3
 801dca6:	d004      	beq.n	801dcb2 <__swbuf_r+0x6e>
 801dca8:	89a3      	ldrh	r3, [r4, #12]
 801dcaa:	07db      	lsls	r3, r3, #31
 801dcac:	d5e1      	bpl.n	801dc72 <__swbuf_r+0x2e>
 801dcae:	2e0a      	cmp	r6, #10
 801dcb0:	d1df      	bne.n	801dc72 <__swbuf_r+0x2e>
 801dcb2:	4621      	mov	r1, r4
 801dcb4:	4628      	mov	r0, r5
 801dcb6:	f000 feeb 	bl	801ea90 <_fflush_r>
 801dcba:	2800      	cmp	r0, #0
 801dcbc:	d0d9      	beq.n	801dc72 <__swbuf_r+0x2e>
 801dcbe:	e7d6      	b.n	801dc6e <__swbuf_r+0x2a>

0801dcc0 <__swsetup_r>:
 801dcc0:	b538      	push	{r3, r4, r5, lr}
 801dcc2:	4b29      	ldr	r3, [pc, #164]	@ (801dd68 <__swsetup_r+0xa8>)
 801dcc4:	4605      	mov	r5, r0
 801dcc6:	6818      	ldr	r0, [r3, #0]
 801dcc8:	460c      	mov	r4, r1
 801dcca:	b118      	cbz	r0, 801dcd4 <__swsetup_r+0x14>
 801dccc:	6a03      	ldr	r3, [r0, #32]
 801dcce:	b90b      	cbnz	r3, 801dcd4 <__swsetup_r+0x14>
 801dcd0:	f7ff fe08 	bl	801d8e4 <__sinit>
 801dcd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcd8:	0719      	lsls	r1, r3, #28
 801dcda:	d422      	bmi.n	801dd22 <__swsetup_r+0x62>
 801dcdc:	06da      	lsls	r2, r3, #27
 801dcde:	d407      	bmi.n	801dcf0 <__swsetup_r+0x30>
 801dce0:	2209      	movs	r2, #9
 801dce2:	602a      	str	r2, [r5, #0]
 801dce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dce8:	81a3      	strh	r3, [r4, #12]
 801dcea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dcee:	e033      	b.n	801dd58 <__swsetup_r+0x98>
 801dcf0:	0758      	lsls	r0, r3, #29
 801dcf2:	d512      	bpl.n	801dd1a <__swsetup_r+0x5a>
 801dcf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dcf6:	b141      	cbz	r1, 801dd0a <__swsetup_r+0x4a>
 801dcf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dcfc:	4299      	cmp	r1, r3
 801dcfe:	d002      	beq.n	801dd06 <__swsetup_r+0x46>
 801dd00:	4628      	mov	r0, r5
 801dd02:	f000 f9c7 	bl	801e094 <_free_r>
 801dd06:	2300      	movs	r3, #0
 801dd08:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd0a:	89a3      	ldrh	r3, [r4, #12]
 801dd0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dd10:	81a3      	strh	r3, [r4, #12]
 801dd12:	2300      	movs	r3, #0
 801dd14:	6063      	str	r3, [r4, #4]
 801dd16:	6923      	ldr	r3, [r4, #16]
 801dd18:	6023      	str	r3, [r4, #0]
 801dd1a:	89a3      	ldrh	r3, [r4, #12]
 801dd1c:	f043 0308 	orr.w	r3, r3, #8
 801dd20:	81a3      	strh	r3, [r4, #12]
 801dd22:	6923      	ldr	r3, [r4, #16]
 801dd24:	b94b      	cbnz	r3, 801dd3a <__swsetup_r+0x7a>
 801dd26:	89a3      	ldrh	r3, [r4, #12]
 801dd28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dd2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dd30:	d003      	beq.n	801dd3a <__swsetup_r+0x7a>
 801dd32:	4621      	mov	r1, r4
 801dd34:	4628      	mov	r0, r5
 801dd36:	f000 ff0b 	bl	801eb50 <__smakebuf_r>
 801dd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd3e:	f013 0201 	ands.w	r2, r3, #1
 801dd42:	d00a      	beq.n	801dd5a <__swsetup_r+0x9a>
 801dd44:	2200      	movs	r2, #0
 801dd46:	60a2      	str	r2, [r4, #8]
 801dd48:	6962      	ldr	r2, [r4, #20]
 801dd4a:	4252      	negs	r2, r2
 801dd4c:	61a2      	str	r2, [r4, #24]
 801dd4e:	6922      	ldr	r2, [r4, #16]
 801dd50:	b942      	cbnz	r2, 801dd64 <__swsetup_r+0xa4>
 801dd52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dd56:	d1c5      	bne.n	801dce4 <__swsetup_r+0x24>
 801dd58:	bd38      	pop	{r3, r4, r5, pc}
 801dd5a:	0799      	lsls	r1, r3, #30
 801dd5c:	bf58      	it	pl
 801dd5e:	6962      	ldrpl	r2, [r4, #20]
 801dd60:	60a2      	str	r2, [r4, #8]
 801dd62:	e7f4      	b.n	801dd4e <__swsetup_r+0x8e>
 801dd64:	2000      	movs	r0, #0
 801dd66:	e7f7      	b.n	801dd58 <__swsetup_r+0x98>
 801dd68:	20001bf4 	.word	0x20001bf4

0801dd6c <memcmp>:
 801dd6c:	b510      	push	{r4, lr}
 801dd6e:	3901      	subs	r1, #1
 801dd70:	4402      	add	r2, r0
 801dd72:	4290      	cmp	r0, r2
 801dd74:	d101      	bne.n	801dd7a <memcmp+0xe>
 801dd76:	2000      	movs	r0, #0
 801dd78:	e005      	b.n	801dd86 <memcmp+0x1a>
 801dd7a:	7803      	ldrb	r3, [r0, #0]
 801dd7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dd80:	42a3      	cmp	r3, r4
 801dd82:	d001      	beq.n	801dd88 <memcmp+0x1c>
 801dd84:	1b18      	subs	r0, r3, r4
 801dd86:	bd10      	pop	{r4, pc}
 801dd88:	3001      	adds	r0, #1
 801dd8a:	e7f2      	b.n	801dd72 <memcmp+0x6>

0801dd8c <memmove>:
 801dd8c:	4288      	cmp	r0, r1
 801dd8e:	b510      	push	{r4, lr}
 801dd90:	eb01 0402 	add.w	r4, r1, r2
 801dd94:	d902      	bls.n	801dd9c <memmove+0x10>
 801dd96:	4284      	cmp	r4, r0
 801dd98:	4623      	mov	r3, r4
 801dd9a:	d807      	bhi.n	801ddac <memmove+0x20>
 801dd9c:	1e43      	subs	r3, r0, #1
 801dd9e:	42a1      	cmp	r1, r4
 801dda0:	d008      	beq.n	801ddb4 <memmove+0x28>
 801dda2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dda6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ddaa:	e7f8      	b.n	801dd9e <memmove+0x12>
 801ddac:	4402      	add	r2, r0
 801ddae:	4601      	mov	r1, r0
 801ddb0:	428a      	cmp	r2, r1
 801ddb2:	d100      	bne.n	801ddb6 <memmove+0x2a>
 801ddb4:	bd10      	pop	{r4, pc}
 801ddb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ddba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ddbe:	e7f7      	b.n	801ddb0 <memmove+0x24>

0801ddc0 <memset>:
 801ddc0:	4402      	add	r2, r0
 801ddc2:	4603      	mov	r3, r0
 801ddc4:	4293      	cmp	r3, r2
 801ddc6:	d100      	bne.n	801ddca <memset+0xa>
 801ddc8:	4770      	bx	lr
 801ddca:	f803 1b01 	strb.w	r1, [r3], #1
 801ddce:	e7f9      	b.n	801ddc4 <memset+0x4>

0801ddd0 <strchr>:
 801ddd0:	b2c9      	uxtb	r1, r1
 801ddd2:	4603      	mov	r3, r0
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ddda:	b112      	cbz	r2, 801dde2 <strchr+0x12>
 801dddc:	428a      	cmp	r2, r1
 801ddde:	d1f9      	bne.n	801ddd4 <strchr+0x4>
 801dde0:	4770      	bx	lr
 801dde2:	2900      	cmp	r1, #0
 801dde4:	bf18      	it	ne
 801dde6:	2000      	movne	r0, #0
 801dde8:	4770      	bx	lr

0801ddea <strncmp>:
 801ddea:	b510      	push	{r4, lr}
 801ddec:	b16a      	cbz	r2, 801de0a <strncmp+0x20>
 801ddee:	3901      	subs	r1, #1
 801ddf0:	1884      	adds	r4, r0, r2
 801ddf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ddf6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ddfa:	429a      	cmp	r2, r3
 801ddfc:	d103      	bne.n	801de06 <strncmp+0x1c>
 801ddfe:	42a0      	cmp	r0, r4
 801de00:	d001      	beq.n	801de06 <strncmp+0x1c>
 801de02:	2a00      	cmp	r2, #0
 801de04:	d1f5      	bne.n	801ddf2 <strncmp+0x8>
 801de06:	1ad0      	subs	r0, r2, r3
 801de08:	bd10      	pop	{r4, pc}
 801de0a:	4610      	mov	r0, r2
 801de0c:	e7fc      	b.n	801de08 <strncmp+0x1e>

0801de0e <strncpy>:
 801de0e:	b510      	push	{r4, lr}
 801de10:	3901      	subs	r1, #1
 801de12:	4603      	mov	r3, r0
 801de14:	b132      	cbz	r2, 801de24 <strncpy+0x16>
 801de16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801de1a:	f803 4b01 	strb.w	r4, [r3], #1
 801de1e:	3a01      	subs	r2, #1
 801de20:	2c00      	cmp	r4, #0
 801de22:	d1f7      	bne.n	801de14 <strncpy+0x6>
 801de24:	441a      	add	r2, r3
 801de26:	2100      	movs	r1, #0
 801de28:	4293      	cmp	r3, r2
 801de2a:	d100      	bne.n	801de2e <strncpy+0x20>
 801de2c:	bd10      	pop	{r4, pc}
 801de2e:	f803 1b01 	strb.w	r1, [r3], #1
 801de32:	e7f9      	b.n	801de28 <strncpy+0x1a>

0801de34 <strstr>:
 801de34:	780a      	ldrb	r2, [r1, #0]
 801de36:	b570      	push	{r4, r5, r6, lr}
 801de38:	b96a      	cbnz	r2, 801de56 <strstr+0x22>
 801de3a:	bd70      	pop	{r4, r5, r6, pc}
 801de3c:	429a      	cmp	r2, r3
 801de3e:	d109      	bne.n	801de54 <strstr+0x20>
 801de40:	460c      	mov	r4, r1
 801de42:	4605      	mov	r5, r0
 801de44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d0f6      	beq.n	801de3a <strstr+0x6>
 801de4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801de50:	429e      	cmp	r6, r3
 801de52:	d0f7      	beq.n	801de44 <strstr+0x10>
 801de54:	3001      	adds	r0, #1
 801de56:	7803      	ldrb	r3, [r0, #0]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d1ef      	bne.n	801de3c <strstr+0x8>
 801de5c:	4618      	mov	r0, r3
 801de5e:	e7ec      	b.n	801de3a <strstr+0x6>

0801de60 <_close_r>:
 801de60:	b538      	push	{r3, r4, r5, lr}
 801de62:	4d06      	ldr	r5, [pc, #24]	@ (801de7c <_close_r+0x1c>)
 801de64:	2300      	movs	r3, #0
 801de66:	4604      	mov	r4, r0
 801de68:	4608      	mov	r0, r1
 801de6a:	602b      	str	r3, [r5, #0]
 801de6c:	f7e5 fbbe 	bl	80035ec <_close>
 801de70:	1c43      	adds	r3, r0, #1
 801de72:	d102      	bne.n	801de7a <_close_r+0x1a>
 801de74:	682b      	ldr	r3, [r5, #0]
 801de76:	b103      	cbz	r3, 801de7a <_close_r+0x1a>
 801de78:	6023      	str	r3, [r4, #0]
 801de7a:	bd38      	pop	{r3, r4, r5, pc}
 801de7c:	2001f920 	.word	0x2001f920

0801de80 <_reclaim_reent>:
 801de80:	4b29      	ldr	r3, [pc, #164]	@ (801df28 <_reclaim_reent+0xa8>)
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	4283      	cmp	r3, r0
 801de86:	b570      	push	{r4, r5, r6, lr}
 801de88:	4604      	mov	r4, r0
 801de8a:	d04b      	beq.n	801df24 <_reclaim_reent+0xa4>
 801de8c:	69c3      	ldr	r3, [r0, #28]
 801de8e:	b1ab      	cbz	r3, 801debc <_reclaim_reent+0x3c>
 801de90:	68db      	ldr	r3, [r3, #12]
 801de92:	b16b      	cbz	r3, 801deb0 <_reclaim_reent+0x30>
 801de94:	2500      	movs	r5, #0
 801de96:	69e3      	ldr	r3, [r4, #28]
 801de98:	68db      	ldr	r3, [r3, #12]
 801de9a:	5959      	ldr	r1, [r3, r5]
 801de9c:	2900      	cmp	r1, #0
 801de9e:	d13b      	bne.n	801df18 <_reclaim_reent+0x98>
 801dea0:	3504      	adds	r5, #4
 801dea2:	2d80      	cmp	r5, #128	@ 0x80
 801dea4:	d1f7      	bne.n	801de96 <_reclaim_reent+0x16>
 801dea6:	69e3      	ldr	r3, [r4, #28]
 801dea8:	4620      	mov	r0, r4
 801deaa:	68d9      	ldr	r1, [r3, #12]
 801deac:	f000 f8f2 	bl	801e094 <_free_r>
 801deb0:	69e3      	ldr	r3, [r4, #28]
 801deb2:	6819      	ldr	r1, [r3, #0]
 801deb4:	b111      	cbz	r1, 801debc <_reclaim_reent+0x3c>
 801deb6:	4620      	mov	r0, r4
 801deb8:	f000 f8ec 	bl	801e094 <_free_r>
 801debc:	6961      	ldr	r1, [r4, #20]
 801debe:	b111      	cbz	r1, 801dec6 <_reclaim_reent+0x46>
 801dec0:	4620      	mov	r0, r4
 801dec2:	f000 f8e7 	bl	801e094 <_free_r>
 801dec6:	69e1      	ldr	r1, [r4, #28]
 801dec8:	b111      	cbz	r1, 801ded0 <_reclaim_reent+0x50>
 801deca:	4620      	mov	r0, r4
 801decc:	f000 f8e2 	bl	801e094 <_free_r>
 801ded0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ded2:	b111      	cbz	r1, 801deda <_reclaim_reent+0x5a>
 801ded4:	4620      	mov	r0, r4
 801ded6:	f000 f8dd 	bl	801e094 <_free_r>
 801deda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dedc:	b111      	cbz	r1, 801dee4 <_reclaim_reent+0x64>
 801dede:	4620      	mov	r0, r4
 801dee0:	f000 f8d8 	bl	801e094 <_free_r>
 801dee4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801dee6:	b111      	cbz	r1, 801deee <_reclaim_reent+0x6e>
 801dee8:	4620      	mov	r0, r4
 801deea:	f000 f8d3 	bl	801e094 <_free_r>
 801deee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801def0:	b111      	cbz	r1, 801def8 <_reclaim_reent+0x78>
 801def2:	4620      	mov	r0, r4
 801def4:	f000 f8ce 	bl	801e094 <_free_r>
 801def8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801defa:	b111      	cbz	r1, 801df02 <_reclaim_reent+0x82>
 801defc:	4620      	mov	r0, r4
 801defe:	f000 f8c9 	bl	801e094 <_free_r>
 801df02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801df04:	b111      	cbz	r1, 801df0c <_reclaim_reent+0x8c>
 801df06:	4620      	mov	r0, r4
 801df08:	f000 f8c4 	bl	801e094 <_free_r>
 801df0c:	6a23      	ldr	r3, [r4, #32]
 801df0e:	b14b      	cbz	r3, 801df24 <_reclaim_reent+0xa4>
 801df10:	4620      	mov	r0, r4
 801df12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df16:	4718      	bx	r3
 801df18:	680e      	ldr	r6, [r1, #0]
 801df1a:	4620      	mov	r0, r4
 801df1c:	f000 f8ba 	bl	801e094 <_free_r>
 801df20:	4631      	mov	r1, r6
 801df22:	e7bb      	b.n	801de9c <_reclaim_reent+0x1c>
 801df24:	bd70      	pop	{r4, r5, r6, pc}
 801df26:	bf00      	nop
 801df28:	20001bf4 	.word	0x20001bf4

0801df2c <_lseek_r>:
 801df2c:	b538      	push	{r3, r4, r5, lr}
 801df2e:	4d07      	ldr	r5, [pc, #28]	@ (801df4c <_lseek_r+0x20>)
 801df30:	4604      	mov	r4, r0
 801df32:	4608      	mov	r0, r1
 801df34:	4611      	mov	r1, r2
 801df36:	2200      	movs	r2, #0
 801df38:	602a      	str	r2, [r5, #0]
 801df3a:	461a      	mov	r2, r3
 801df3c:	f7e5 fb7d 	bl	800363a <_lseek>
 801df40:	1c43      	adds	r3, r0, #1
 801df42:	d102      	bne.n	801df4a <_lseek_r+0x1e>
 801df44:	682b      	ldr	r3, [r5, #0]
 801df46:	b103      	cbz	r3, 801df4a <_lseek_r+0x1e>
 801df48:	6023      	str	r3, [r4, #0]
 801df4a:	bd38      	pop	{r3, r4, r5, pc}
 801df4c:	2001f920 	.word	0x2001f920

0801df50 <_read_r>:
 801df50:	b538      	push	{r3, r4, r5, lr}
 801df52:	4d07      	ldr	r5, [pc, #28]	@ (801df70 <_read_r+0x20>)
 801df54:	4604      	mov	r4, r0
 801df56:	4608      	mov	r0, r1
 801df58:	4611      	mov	r1, r2
 801df5a:	2200      	movs	r2, #0
 801df5c:	602a      	str	r2, [r5, #0]
 801df5e:	461a      	mov	r2, r3
 801df60:	f7e5 fb27 	bl	80035b2 <_read>
 801df64:	1c43      	adds	r3, r0, #1
 801df66:	d102      	bne.n	801df6e <_read_r+0x1e>
 801df68:	682b      	ldr	r3, [r5, #0]
 801df6a:	b103      	cbz	r3, 801df6e <_read_r+0x1e>
 801df6c:	6023      	str	r3, [r4, #0]
 801df6e:	bd38      	pop	{r3, r4, r5, pc}
 801df70:	2001f920 	.word	0x2001f920

0801df74 <_sbrk_r>:
 801df74:	b538      	push	{r3, r4, r5, lr}
 801df76:	4d06      	ldr	r5, [pc, #24]	@ (801df90 <_sbrk_r+0x1c>)
 801df78:	2300      	movs	r3, #0
 801df7a:	4604      	mov	r4, r0
 801df7c:	4608      	mov	r0, r1
 801df7e:	602b      	str	r3, [r5, #0]
 801df80:	f7e5 fb68 	bl	8003654 <_sbrk>
 801df84:	1c43      	adds	r3, r0, #1
 801df86:	d102      	bne.n	801df8e <_sbrk_r+0x1a>
 801df88:	682b      	ldr	r3, [r5, #0]
 801df8a:	b103      	cbz	r3, 801df8e <_sbrk_r+0x1a>
 801df8c:	6023      	str	r3, [r4, #0]
 801df8e:	bd38      	pop	{r3, r4, r5, pc}
 801df90:	2001f920 	.word	0x2001f920

0801df94 <_write_r>:
 801df94:	b538      	push	{r3, r4, r5, lr}
 801df96:	4d07      	ldr	r5, [pc, #28]	@ (801dfb4 <_write_r+0x20>)
 801df98:	4604      	mov	r4, r0
 801df9a:	4608      	mov	r0, r1
 801df9c:	4611      	mov	r1, r2
 801df9e:	2200      	movs	r2, #0
 801dfa0:	602a      	str	r2, [r5, #0]
 801dfa2:	461a      	mov	r2, r3
 801dfa4:	f7e4 f816 	bl	8001fd4 <_write>
 801dfa8:	1c43      	adds	r3, r0, #1
 801dfaa:	d102      	bne.n	801dfb2 <_write_r+0x1e>
 801dfac:	682b      	ldr	r3, [r5, #0]
 801dfae:	b103      	cbz	r3, 801dfb2 <_write_r+0x1e>
 801dfb0:	6023      	str	r3, [r4, #0]
 801dfb2:	bd38      	pop	{r3, r4, r5, pc}
 801dfb4:	2001f920 	.word	0x2001f920

0801dfb8 <__errno>:
 801dfb8:	4b01      	ldr	r3, [pc, #4]	@ (801dfc0 <__errno+0x8>)
 801dfba:	6818      	ldr	r0, [r3, #0]
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop
 801dfc0:	20001bf4 	.word	0x20001bf4

0801dfc4 <__libc_init_array>:
 801dfc4:	b570      	push	{r4, r5, r6, lr}
 801dfc6:	4d0d      	ldr	r5, [pc, #52]	@ (801dffc <__libc_init_array+0x38>)
 801dfc8:	4c0d      	ldr	r4, [pc, #52]	@ (801e000 <__libc_init_array+0x3c>)
 801dfca:	1b64      	subs	r4, r4, r5
 801dfcc:	10a4      	asrs	r4, r4, #2
 801dfce:	2600      	movs	r6, #0
 801dfd0:	42a6      	cmp	r6, r4
 801dfd2:	d109      	bne.n	801dfe8 <__libc_init_array+0x24>
 801dfd4:	4d0b      	ldr	r5, [pc, #44]	@ (801e004 <__libc_init_array+0x40>)
 801dfd6:	4c0c      	ldr	r4, [pc, #48]	@ (801e008 <__libc_init_array+0x44>)
 801dfd8:	f001 ff8a 	bl	801fef0 <_init>
 801dfdc:	1b64      	subs	r4, r4, r5
 801dfde:	10a4      	asrs	r4, r4, #2
 801dfe0:	2600      	movs	r6, #0
 801dfe2:	42a6      	cmp	r6, r4
 801dfe4:	d105      	bne.n	801dff2 <__libc_init_array+0x2e>
 801dfe6:	bd70      	pop	{r4, r5, r6, pc}
 801dfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 801dfec:	4798      	blx	r3
 801dfee:	3601      	adds	r6, #1
 801dff0:	e7ee      	b.n	801dfd0 <__libc_init_array+0xc>
 801dff2:	f855 3b04 	ldr.w	r3, [r5], #4
 801dff6:	4798      	blx	r3
 801dff8:	3601      	adds	r6, #1
 801dffa:	e7f2      	b.n	801dfe2 <__libc_init_array+0x1e>
 801dffc:	08021940 	.word	0x08021940
 801e000:	08021940 	.word	0x08021940
 801e004:	08021940 	.word	0x08021940
 801e008:	0802194c 	.word	0x0802194c

0801e00c <__retarget_lock_init_recursive>:
 801e00c:	4770      	bx	lr

0801e00e <__retarget_lock_acquire_recursive>:
 801e00e:	4770      	bx	lr

0801e010 <__retarget_lock_release_recursive>:
 801e010:	4770      	bx	lr

0801e012 <strcpy>:
 801e012:	4603      	mov	r3, r0
 801e014:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e018:	f803 2b01 	strb.w	r2, [r3], #1
 801e01c:	2a00      	cmp	r2, #0
 801e01e:	d1f9      	bne.n	801e014 <strcpy+0x2>
 801e020:	4770      	bx	lr

0801e022 <memcpy>:
 801e022:	440a      	add	r2, r1
 801e024:	4291      	cmp	r1, r2
 801e026:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e02a:	d100      	bne.n	801e02e <memcpy+0xc>
 801e02c:	4770      	bx	lr
 801e02e:	b510      	push	{r4, lr}
 801e030:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e034:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e038:	4291      	cmp	r1, r2
 801e03a:	d1f9      	bne.n	801e030 <memcpy+0xe>
 801e03c:	bd10      	pop	{r4, pc}
	...

0801e040 <__assert_func>:
 801e040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e042:	4614      	mov	r4, r2
 801e044:	461a      	mov	r2, r3
 801e046:	4b09      	ldr	r3, [pc, #36]	@ (801e06c <__assert_func+0x2c>)
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	4605      	mov	r5, r0
 801e04c:	68d8      	ldr	r0, [r3, #12]
 801e04e:	b954      	cbnz	r4, 801e066 <__assert_func+0x26>
 801e050:	4b07      	ldr	r3, [pc, #28]	@ (801e070 <__assert_func+0x30>)
 801e052:	461c      	mov	r4, r3
 801e054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e058:	9100      	str	r1, [sp, #0]
 801e05a:	462b      	mov	r3, r5
 801e05c:	4905      	ldr	r1, [pc, #20]	@ (801e074 <__assert_func+0x34>)
 801e05e:	f000 fd3f 	bl	801eae0 <fiprintf>
 801e062:	f000 fdd3 	bl	801ec0c <abort>
 801e066:	4b04      	ldr	r3, [pc, #16]	@ (801e078 <__assert_func+0x38>)
 801e068:	e7f4      	b.n	801e054 <__assert_func+0x14>
 801e06a:	bf00      	nop
 801e06c:	20001bf4 	.word	0x20001bf4
 801e070:	0802188d 	.word	0x0802188d
 801e074:	0802185f 	.word	0x0802185f
 801e078:	08021852 	.word	0x08021852

0801e07c <__env_lock>:
 801e07c:	4801      	ldr	r0, [pc, #4]	@ (801e084 <__env_lock+0x8>)
 801e07e:	f7ff bfc6 	b.w	801e00e <__retarget_lock_acquire_recursive>
 801e082:	bf00      	nop
 801e084:	2001f924 	.word	0x2001f924

0801e088 <__env_unlock>:
 801e088:	4801      	ldr	r0, [pc, #4]	@ (801e090 <__env_unlock+0x8>)
 801e08a:	f7ff bfc1 	b.w	801e010 <__retarget_lock_release_recursive>
 801e08e:	bf00      	nop
 801e090:	2001f924 	.word	0x2001f924

0801e094 <_free_r>:
 801e094:	b538      	push	{r3, r4, r5, lr}
 801e096:	4605      	mov	r5, r0
 801e098:	2900      	cmp	r1, #0
 801e09a:	d041      	beq.n	801e120 <_free_r+0x8c>
 801e09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e0a0:	1f0c      	subs	r4, r1, #4
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	bfb8      	it	lt
 801e0a6:	18e4      	addlt	r4, r4, r3
 801e0a8:	f7ff fa6a 	bl	801d580 <__malloc_lock>
 801e0ac:	4a1d      	ldr	r2, [pc, #116]	@ (801e124 <_free_r+0x90>)
 801e0ae:	6813      	ldr	r3, [r2, #0]
 801e0b0:	b933      	cbnz	r3, 801e0c0 <_free_r+0x2c>
 801e0b2:	6063      	str	r3, [r4, #4]
 801e0b4:	6014      	str	r4, [r2, #0]
 801e0b6:	4628      	mov	r0, r5
 801e0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e0bc:	f7ff ba66 	b.w	801d58c <__malloc_unlock>
 801e0c0:	42a3      	cmp	r3, r4
 801e0c2:	d908      	bls.n	801e0d6 <_free_r+0x42>
 801e0c4:	6820      	ldr	r0, [r4, #0]
 801e0c6:	1821      	adds	r1, r4, r0
 801e0c8:	428b      	cmp	r3, r1
 801e0ca:	bf01      	itttt	eq
 801e0cc:	6819      	ldreq	r1, [r3, #0]
 801e0ce:	685b      	ldreq	r3, [r3, #4]
 801e0d0:	1809      	addeq	r1, r1, r0
 801e0d2:	6021      	streq	r1, [r4, #0]
 801e0d4:	e7ed      	b.n	801e0b2 <_free_r+0x1e>
 801e0d6:	461a      	mov	r2, r3
 801e0d8:	685b      	ldr	r3, [r3, #4]
 801e0da:	b10b      	cbz	r3, 801e0e0 <_free_r+0x4c>
 801e0dc:	42a3      	cmp	r3, r4
 801e0de:	d9fa      	bls.n	801e0d6 <_free_r+0x42>
 801e0e0:	6811      	ldr	r1, [r2, #0]
 801e0e2:	1850      	adds	r0, r2, r1
 801e0e4:	42a0      	cmp	r0, r4
 801e0e6:	d10b      	bne.n	801e100 <_free_r+0x6c>
 801e0e8:	6820      	ldr	r0, [r4, #0]
 801e0ea:	4401      	add	r1, r0
 801e0ec:	1850      	adds	r0, r2, r1
 801e0ee:	4283      	cmp	r3, r0
 801e0f0:	6011      	str	r1, [r2, #0]
 801e0f2:	d1e0      	bne.n	801e0b6 <_free_r+0x22>
 801e0f4:	6818      	ldr	r0, [r3, #0]
 801e0f6:	685b      	ldr	r3, [r3, #4]
 801e0f8:	6053      	str	r3, [r2, #4]
 801e0fa:	4408      	add	r0, r1
 801e0fc:	6010      	str	r0, [r2, #0]
 801e0fe:	e7da      	b.n	801e0b6 <_free_r+0x22>
 801e100:	d902      	bls.n	801e108 <_free_r+0x74>
 801e102:	230c      	movs	r3, #12
 801e104:	602b      	str	r3, [r5, #0]
 801e106:	e7d6      	b.n	801e0b6 <_free_r+0x22>
 801e108:	6820      	ldr	r0, [r4, #0]
 801e10a:	1821      	adds	r1, r4, r0
 801e10c:	428b      	cmp	r3, r1
 801e10e:	bf04      	itt	eq
 801e110:	6819      	ldreq	r1, [r3, #0]
 801e112:	685b      	ldreq	r3, [r3, #4]
 801e114:	6063      	str	r3, [r4, #4]
 801e116:	bf04      	itt	eq
 801e118:	1809      	addeq	r1, r1, r0
 801e11a:	6021      	streq	r1, [r4, #0]
 801e11c:	6054      	str	r4, [r2, #4]
 801e11e:	e7ca      	b.n	801e0b6 <_free_r+0x22>
 801e120:	bd38      	pop	{r3, r4, r5, pc}
 801e122:	bf00      	nop
 801e124:	2001f7e0 	.word	0x2001f7e0

0801e128 <_malloc_usable_size_r>:
 801e128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e12c:	1f18      	subs	r0, r3, #4
 801e12e:	2b00      	cmp	r3, #0
 801e130:	bfbc      	itt	lt
 801e132:	580b      	ldrlt	r3, [r1, r0]
 801e134:	18c0      	addlt	r0, r0, r3
 801e136:	4770      	bx	lr

0801e138 <__ssputs_r>:
 801e138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e13c:	688e      	ldr	r6, [r1, #8]
 801e13e:	461f      	mov	r7, r3
 801e140:	42be      	cmp	r6, r7
 801e142:	680b      	ldr	r3, [r1, #0]
 801e144:	4682      	mov	sl, r0
 801e146:	460c      	mov	r4, r1
 801e148:	4690      	mov	r8, r2
 801e14a:	d82d      	bhi.n	801e1a8 <__ssputs_r+0x70>
 801e14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e154:	d026      	beq.n	801e1a4 <__ssputs_r+0x6c>
 801e156:	6965      	ldr	r5, [r4, #20]
 801e158:	6909      	ldr	r1, [r1, #16]
 801e15a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e15e:	eba3 0901 	sub.w	r9, r3, r1
 801e162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e166:	1c7b      	adds	r3, r7, #1
 801e168:	444b      	add	r3, r9
 801e16a:	106d      	asrs	r5, r5, #1
 801e16c:	429d      	cmp	r5, r3
 801e16e:	bf38      	it	cc
 801e170:	461d      	movcc	r5, r3
 801e172:	0553      	lsls	r3, r2, #21
 801e174:	d527      	bpl.n	801e1c6 <__ssputs_r+0x8e>
 801e176:	4629      	mov	r1, r5
 801e178:	f7ff f982 	bl	801d480 <_malloc_r>
 801e17c:	4606      	mov	r6, r0
 801e17e:	b360      	cbz	r0, 801e1da <__ssputs_r+0xa2>
 801e180:	6921      	ldr	r1, [r4, #16]
 801e182:	464a      	mov	r2, r9
 801e184:	f7ff ff4d 	bl	801e022 <memcpy>
 801e188:	89a3      	ldrh	r3, [r4, #12]
 801e18a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e192:	81a3      	strh	r3, [r4, #12]
 801e194:	6126      	str	r6, [r4, #16]
 801e196:	6165      	str	r5, [r4, #20]
 801e198:	444e      	add	r6, r9
 801e19a:	eba5 0509 	sub.w	r5, r5, r9
 801e19e:	6026      	str	r6, [r4, #0]
 801e1a0:	60a5      	str	r5, [r4, #8]
 801e1a2:	463e      	mov	r6, r7
 801e1a4:	42be      	cmp	r6, r7
 801e1a6:	d900      	bls.n	801e1aa <__ssputs_r+0x72>
 801e1a8:	463e      	mov	r6, r7
 801e1aa:	6820      	ldr	r0, [r4, #0]
 801e1ac:	4632      	mov	r2, r6
 801e1ae:	4641      	mov	r1, r8
 801e1b0:	f7ff fdec 	bl	801dd8c <memmove>
 801e1b4:	68a3      	ldr	r3, [r4, #8]
 801e1b6:	1b9b      	subs	r3, r3, r6
 801e1b8:	60a3      	str	r3, [r4, #8]
 801e1ba:	6823      	ldr	r3, [r4, #0]
 801e1bc:	4433      	add	r3, r6
 801e1be:	6023      	str	r3, [r4, #0]
 801e1c0:	2000      	movs	r0, #0
 801e1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1c6:	462a      	mov	r2, r5
 801e1c8:	f7ff fa5a 	bl	801d680 <_realloc_r>
 801e1cc:	4606      	mov	r6, r0
 801e1ce:	2800      	cmp	r0, #0
 801e1d0:	d1e0      	bne.n	801e194 <__ssputs_r+0x5c>
 801e1d2:	6921      	ldr	r1, [r4, #16]
 801e1d4:	4650      	mov	r0, sl
 801e1d6:	f7ff ff5d 	bl	801e094 <_free_r>
 801e1da:	230c      	movs	r3, #12
 801e1dc:	f8ca 3000 	str.w	r3, [sl]
 801e1e0:	89a3      	ldrh	r3, [r4, #12]
 801e1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e1e6:	81a3      	strh	r3, [r4, #12]
 801e1e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e1ec:	e7e9      	b.n	801e1c2 <__ssputs_r+0x8a>
	...

0801e1f0 <_svfiprintf_r>:
 801e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f4:	4698      	mov	r8, r3
 801e1f6:	898b      	ldrh	r3, [r1, #12]
 801e1f8:	061b      	lsls	r3, r3, #24
 801e1fa:	b09d      	sub	sp, #116	@ 0x74
 801e1fc:	4607      	mov	r7, r0
 801e1fe:	460d      	mov	r5, r1
 801e200:	4614      	mov	r4, r2
 801e202:	d510      	bpl.n	801e226 <_svfiprintf_r+0x36>
 801e204:	690b      	ldr	r3, [r1, #16]
 801e206:	b973      	cbnz	r3, 801e226 <_svfiprintf_r+0x36>
 801e208:	2140      	movs	r1, #64	@ 0x40
 801e20a:	f7ff f939 	bl	801d480 <_malloc_r>
 801e20e:	6028      	str	r0, [r5, #0]
 801e210:	6128      	str	r0, [r5, #16]
 801e212:	b930      	cbnz	r0, 801e222 <_svfiprintf_r+0x32>
 801e214:	230c      	movs	r3, #12
 801e216:	603b      	str	r3, [r7, #0]
 801e218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e21c:	b01d      	add	sp, #116	@ 0x74
 801e21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e222:	2340      	movs	r3, #64	@ 0x40
 801e224:	616b      	str	r3, [r5, #20]
 801e226:	2300      	movs	r3, #0
 801e228:	9309      	str	r3, [sp, #36]	@ 0x24
 801e22a:	2320      	movs	r3, #32
 801e22c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e230:	f8cd 800c 	str.w	r8, [sp, #12]
 801e234:	2330      	movs	r3, #48	@ 0x30
 801e236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e3d4 <_svfiprintf_r+0x1e4>
 801e23a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e23e:	f04f 0901 	mov.w	r9, #1
 801e242:	4623      	mov	r3, r4
 801e244:	469a      	mov	sl, r3
 801e246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e24a:	b10a      	cbz	r2, 801e250 <_svfiprintf_r+0x60>
 801e24c:	2a25      	cmp	r2, #37	@ 0x25
 801e24e:	d1f9      	bne.n	801e244 <_svfiprintf_r+0x54>
 801e250:	ebba 0b04 	subs.w	fp, sl, r4
 801e254:	d00b      	beq.n	801e26e <_svfiprintf_r+0x7e>
 801e256:	465b      	mov	r3, fp
 801e258:	4622      	mov	r2, r4
 801e25a:	4629      	mov	r1, r5
 801e25c:	4638      	mov	r0, r7
 801e25e:	f7ff ff6b 	bl	801e138 <__ssputs_r>
 801e262:	3001      	adds	r0, #1
 801e264:	f000 80a7 	beq.w	801e3b6 <_svfiprintf_r+0x1c6>
 801e268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e26a:	445a      	add	r2, fp
 801e26c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e26e:	f89a 3000 	ldrb.w	r3, [sl]
 801e272:	2b00      	cmp	r3, #0
 801e274:	f000 809f 	beq.w	801e3b6 <_svfiprintf_r+0x1c6>
 801e278:	2300      	movs	r3, #0
 801e27a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e282:	f10a 0a01 	add.w	sl, sl, #1
 801e286:	9304      	str	r3, [sp, #16]
 801e288:	9307      	str	r3, [sp, #28]
 801e28a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e28e:	931a      	str	r3, [sp, #104]	@ 0x68
 801e290:	4654      	mov	r4, sl
 801e292:	2205      	movs	r2, #5
 801e294:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e298:	484e      	ldr	r0, [pc, #312]	@ (801e3d4 <_svfiprintf_r+0x1e4>)
 801e29a:	f7e1 ffd1 	bl	8000240 <memchr>
 801e29e:	9a04      	ldr	r2, [sp, #16]
 801e2a0:	b9d8      	cbnz	r0, 801e2da <_svfiprintf_r+0xea>
 801e2a2:	06d0      	lsls	r0, r2, #27
 801e2a4:	bf44      	itt	mi
 801e2a6:	2320      	movmi	r3, #32
 801e2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e2ac:	0711      	lsls	r1, r2, #28
 801e2ae:	bf44      	itt	mi
 801e2b0:	232b      	movmi	r3, #43	@ 0x2b
 801e2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e2b6:	f89a 3000 	ldrb.w	r3, [sl]
 801e2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 801e2bc:	d015      	beq.n	801e2ea <_svfiprintf_r+0xfa>
 801e2be:	9a07      	ldr	r2, [sp, #28]
 801e2c0:	4654      	mov	r4, sl
 801e2c2:	2000      	movs	r0, #0
 801e2c4:	f04f 0c0a 	mov.w	ip, #10
 801e2c8:	4621      	mov	r1, r4
 801e2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e2ce:	3b30      	subs	r3, #48	@ 0x30
 801e2d0:	2b09      	cmp	r3, #9
 801e2d2:	d94b      	bls.n	801e36c <_svfiprintf_r+0x17c>
 801e2d4:	b1b0      	cbz	r0, 801e304 <_svfiprintf_r+0x114>
 801e2d6:	9207      	str	r2, [sp, #28]
 801e2d8:	e014      	b.n	801e304 <_svfiprintf_r+0x114>
 801e2da:	eba0 0308 	sub.w	r3, r0, r8
 801e2de:	fa09 f303 	lsl.w	r3, r9, r3
 801e2e2:	4313      	orrs	r3, r2
 801e2e4:	9304      	str	r3, [sp, #16]
 801e2e6:	46a2      	mov	sl, r4
 801e2e8:	e7d2      	b.n	801e290 <_svfiprintf_r+0xa0>
 801e2ea:	9b03      	ldr	r3, [sp, #12]
 801e2ec:	1d19      	adds	r1, r3, #4
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	9103      	str	r1, [sp, #12]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	bfbb      	ittet	lt
 801e2f6:	425b      	neglt	r3, r3
 801e2f8:	f042 0202 	orrlt.w	r2, r2, #2
 801e2fc:	9307      	strge	r3, [sp, #28]
 801e2fe:	9307      	strlt	r3, [sp, #28]
 801e300:	bfb8      	it	lt
 801e302:	9204      	strlt	r2, [sp, #16]
 801e304:	7823      	ldrb	r3, [r4, #0]
 801e306:	2b2e      	cmp	r3, #46	@ 0x2e
 801e308:	d10a      	bne.n	801e320 <_svfiprintf_r+0x130>
 801e30a:	7863      	ldrb	r3, [r4, #1]
 801e30c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e30e:	d132      	bne.n	801e376 <_svfiprintf_r+0x186>
 801e310:	9b03      	ldr	r3, [sp, #12]
 801e312:	1d1a      	adds	r2, r3, #4
 801e314:	681b      	ldr	r3, [r3, #0]
 801e316:	9203      	str	r2, [sp, #12]
 801e318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e31c:	3402      	adds	r4, #2
 801e31e:	9305      	str	r3, [sp, #20]
 801e320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e3e4 <_svfiprintf_r+0x1f4>
 801e324:	7821      	ldrb	r1, [r4, #0]
 801e326:	2203      	movs	r2, #3
 801e328:	4650      	mov	r0, sl
 801e32a:	f7e1 ff89 	bl	8000240 <memchr>
 801e32e:	b138      	cbz	r0, 801e340 <_svfiprintf_r+0x150>
 801e330:	9b04      	ldr	r3, [sp, #16]
 801e332:	eba0 000a 	sub.w	r0, r0, sl
 801e336:	2240      	movs	r2, #64	@ 0x40
 801e338:	4082      	lsls	r2, r0
 801e33a:	4313      	orrs	r3, r2
 801e33c:	3401      	adds	r4, #1
 801e33e:	9304      	str	r3, [sp, #16]
 801e340:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e344:	4824      	ldr	r0, [pc, #144]	@ (801e3d8 <_svfiprintf_r+0x1e8>)
 801e346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e34a:	2206      	movs	r2, #6
 801e34c:	f7e1 ff78 	bl	8000240 <memchr>
 801e350:	2800      	cmp	r0, #0
 801e352:	d036      	beq.n	801e3c2 <_svfiprintf_r+0x1d2>
 801e354:	4b21      	ldr	r3, [pc, #132]	@ (801e3dc <_svfiprintf_r+0x1ec>)
 801e356:	bb1b      	cbnz	r3, 801e3a0 <_svfiprintf_r+0x1b0>
 801e358:	9b03      	ldr	r3, [sp, #12]
 801e35a:	3307      	adds	r3, #7
 801e35c:	f023 0307 	bic.w	r3, r3, #7
 801e360:	3308      	adds	r3, #8
 801e362:	9303      	str	r3, [sp, #12]
 801e364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e366:	4433      	add	r3, r6
 801e368:	9309      	str	r3, [sp, #36]	@ 0x24
 801e36a:	e76a      	b.n	801e242 <_svfiprintf_r+0x52>
 801e36c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e370:	460c      	mov	r4, r1
 801e372:	2001      	movs	r0, #1
 801e374:	e7a8      	b.n	801e2c8 <_svfiprintf_r+0xd8>
 801e376:	2300      	movs	r3, #0
 801e378:	3401      	adds	r4, #1
 801e37a:	9305      	str	r3, [sp, #20]
 801e37c:	4619      	mov	r1, r3
 801e37e:	f04f 0c0a 	mov.w	ip, #10
 801e382:	4620      	mov	r0, r4
 801e384:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e388:	3a30      	subs	r2, #48	@ 0x30
 801e38a:	2a09      	cmp	r2, #9
 801e38c:	d903      	bls.n	801e396 <_svfiprintf_r+0x1a6>
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d0c6      	beq.n	801e320 <_svfiprintf_r+0x130>
 801e392:	9105      	str	r1, [sp, #20]
 801e394:	e7c4      	b.n	801e320 <_svfiprintf_r+0x130>
 801e396:	fb0c 2101 	mla	r1, ip, r1, r2
 801e39a:	4604      	mov	r4, r0
 801e39c:	2301      	movs	r3, #1
 801e39e:	e7f0      	b.n	801e382 <_svfiprintf_r+0x192>
 801e3a0:	ab03      	add	r3, sp, #12
 801e3a2:	9300      	str	r3, [sp, #0]
 801e3a4:	462a      	mov	r2, r5
 801e3a6:	4b0e      	ldr	r3, [pc, #56]	@ (801e3e0 <_svfiprintf_r+0x1f0>)
 801e3a8:	a904      	add	r1, sp, #16
 801e3aa:	4638      	mov	r0, r7
 801e3ac:	f3af 8000 	nop.w
 801e3b0:	1c42      	adds	r2, r0, #1
 801e3b2:	4606      	mov	r6, r0
 801e3b4:	d1d6      	bne.n	801e364 <_svfiprintf_r+0x174>
 801e3b6:	89ab      	ldrh	r3, [r5, #12]
 801e3b8:	065b      	lsls	r3, r3, #25
 801e3ba:	f53f af2d 	bmi.w	801e218 <_svfiprintf_r+0x28>
 801e3be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e3c0:	e72c      	b.n	801e21c <_svfiprintf_r+0x2c>
 801e3c2:	ab03      	add	r3, sp, #12
 801e3c4:	9300      	str	r3, [sp, #0]
 801e3c6:	462a      	mov	r2, r5
 801e3c8:	4b05      	ldr	r3, [pc, #20]	@ (801e3e0 <_svfiprintf_r+0x1f0>)
 801e3ca:	a904      	add	r1, sp, #16
 801e3cc:	4638      	mov	r0, r7
 801e3ce:	f000 f9bb 	bl	801e748 <_printf_i>
 801e3d2:	e7ed      	b.n	801e3b0 <_svfiprintf_r+0x1c0>
 801e3d4:	0802188e 	.word	0x0802188e
 801e3d8:	08021898 	.word	0x08021898
 801e3dc:	00000000 	.word	0x00000000
 801e3e0:	0801e139 	.word	0x0801e139
 801e3e4:	08021894 	.word	0x08021894

0801e3e8 <__sfputc_r>:
 801e3e8:	6893      	ldr	r3, [r2, #8]
 801e3ea:	3b01      	subs	r3, #1
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	b410      	push	{r4}
 801e3f0:	6093      	str	r3, [r2, #8]
 801e3f2:	da08      	bge.n	801e406 <__sfputc_r+0x1e>
 801e3f4:	6994      	ldr	r4, [r2, #24]
 801e3f6:	42a3      	cmp	r3, r4
 801e3f8:	db01      	blt.n	801e3fe <__sfputc_r+0x16>
 801e3fa:	290a      	cmp	r1, #10
 801e3fc:	d103      	bne.n	801e406 <__sfputc_r+0x1e>
 801e3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e402:	f7ff bc1f 	b.w	801dc44 <__swbuf_r>
 801e406:	6813      	ldr	r3, [r2, #0]
 801e408:	1c58      	adds	r0, r3, #1
 801e40a:	6010      	str	r0, [r2, #0]
 801e40c:	7019      	strb	r1, [r3, #0]
 801e40e:	4608      	mov	r0, r1
 801e410:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e414:	4770      	bx	lr

0801e416 <__sfputs_r>:
 801e416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e418:	4606      	mov	r6, r0
 801e41a:	460f      	mov	r7, r1
 801e41c:	4614      	mov	r4, r2
 801e41e:	18d5      	adds	r5, r2, r3
 801e420:	42ac      	cmp	r4, r5
 801e422:	d101      	bne.n	801e428 <__sfputs_r+0x12>
 801e424:	2000      	movs	r0, #0
 801e426:	e007      	b.n	801e438 <__sfputs_r+0x22>
 801e428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e42c:	463a      	mov	r2, r7
 801e42e:	4630      	mov	r0, r6
 801e430:	f7ff ffda 	bl	801e3e8 <__sfputc_r>
 801e434:	1c43      	adds	r3, r0, #1
 801e436:	d1f3      	bne.n	801e420 <__sfputs_r+0xa>
 801e438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e43c <_vfiprintf_r>:
 801e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e440:	460d      	mov	r5, r1
 801e442:	b09d      	sub	sp, #116	@ 0x74
 801e444:	4614      	mov	r4, r2
 801e446:	4698      	mov	r8, r3
 801e448:	4606      	mov	r6, r0
 801e44a:	b118      	cbz	r0, 801e454 <_vfiprintf_r+0x18>
 801e44c:	6a03      	ldr	r3, [r0, #32]
 801e44e:	b90b      	cbnz	r3, 801e454 <_vfiprintf_r+0x18>
 801e450:	f7ff fa48 	bl	801d8e4 <__sinit>
 801e454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e456:	07d9      	lsls	r1, r3, #31
 801e458:	d405      	bmi.n	801e466 <_vfiprintf_r+0x2a>
 801e45a:	89ab      	ldrh	r3, [r5, #12]
 801e45c:	059a      	lsls	r2, r3, #22
 801e45e:	d402      	bmi.n	801e466 <_vfiprintf_r+0x2a>
 801e460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e462:	f7ff fdd4 	bl	801e00e <__retarget_lock_acquire_recursive>
 801e466:	89ab      	ldrh	r3, [r5, #12]
 801e468:	071b      	lsls	r3, r3, #28
 801e46a:	d501      	bpl.n	801e470 <_vfiprintf_r+0x34>
 801e46c:	692b      	ldr	r3, [r5, #16]
 801e46e:	b99b      	cbnz	r3, 801e498 <_vfiprintf_r+0x5c>
 801e470:	4629      	mov	r1, r5
 801e472:	4630      	mov	r0, r6
 801e474:	f7ff fc24 	bl	801dcc0 <__swsetup_r>
 801e478:	b170      	cbz	r0, 801e498 <_vfiprintf_r+0x5c>
 801e47a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e47c:	07dc      	lsls	r4, r3, #31
 801e47e:	d504      	bpl.n	801e48a <_vfiprintf_r+0x4e>
 801e480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e484:	b01d      	add	sp, #116	@ 0x74
 801e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e48a:	89ab      	ldrh	r3, [r5, #12]
 801e48c:	0598      	lsls	r0, r3, #22
 801e48e:	d4f7      	bmi.n	801e480 <_vfiprintf_r+0x44>
 801e490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e492:	f7ff fdbd 	bl	801e010 <__retarget_lock_release_recursive>
 801e496:	e7f3      	b.n	801e480 <_vfiprintf_r+0x44>
 801e498:	2300      	movs	r3, #0
 801e49a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e49c:	2320      	movs	r3, #32
 801e49e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4a6:	2330      	movs	r3, #48	@ 0x30
 801e4a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e658 <_vfiprintf_r+0x21c>
 801e4ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e4b0:	f04f 0901 	mov.w	r9, #1
 801e4b4:	4623      	mov	r3, r4
 801e4b6:	469a      	mov	sl, r3
 801e4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4bc:	b10a      	cbz	r2, 801e4c2 <_vfiprintf_r+0x86>
 801e4be:	2a25      	cmp	r2, #37	@ 0x25
 801e4c0:	d1f9      	bne.n	801e4b6 <_vfiprintf_r+0x7a>
 801e4c2:	ebba 0b04 	subs.w	fp, sl, r4
 801e4c6:	d00b      	beq.n	801e4e0 <_vfiprintf_r+0xa4>
 801e4c8:	465b      	mov	r3, fp
 801e4ca:	4622      	mov	r2, r4
 801e4cc:	4629      	mov	r1, r5
 801e4ce:	4630      	mov	r0, r6
 801e4d0:	f7ff ffa1 	bl	801e416 <__sfputs_r>
 801e4d4:	3001      	adds	r0, #1
 801e4d6:	f000 80a7 	beq.w	801e628 <_vfiprintf_r+0x1ec>
 801e4da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e4dc:	445a      	add	r2, fp
 801e4de:	9209      	str	r2, [sp, #36]	@ 0x24
 801e4e0:	f89a 3000 	ldrb.w	r3, [sl]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	f000 809f 	beq.w	801e628 <_vfiprintf_r+0x1ec>
 801e4ea:	2300      	movs	r3, #0
 801e4ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4f4:	f10a 0a01 	add.w	sl, sl, #1
 801e4f8:	9304      	str	r3, [sp, #16]
 801e4fa:	9307      	str	r3, [sp, #28]
 801e4fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e500:	931a      	str	r3, [sp, #104]	@ 0x68
 801e502:	4654      	mov	r4, sl
 801e504:	2205      	movs	r2, #5
 801e506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e50a:	4853      	ldr	r0, [pc, #332]	@ (801e658 <_vfiprintf_r+0x21c>)
 801e50c:	f7e1 fe98 	bl	8000240 <memchr>
 801e510:	9a04      	ldr	r2, [sp, #16]
 801e512:	b9d8      	cbnz	r0, 801e54c <_vfiprintf_r+0x110>
 801e514:	06d1      	lsls	r1, r2, #27
 801e516:	bf44      	itt	mi
 801e518:	2320      	movmi	r3, #32
 801e51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e51e:	0713      	lsls	r3, r2, #28
 801e520:	bf44      	itt	mi
 801e522:	232b      	movmi	r3, #43	@ 0x2b
 801e524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e528:	f89a 3000 	ldrb.w	r3, [sl]
 801e52c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e52e:	d015      	beq.n	801e55c <_vfiprintf_r+0x120>
 801e530:	9a07      	ldr	r2, [sp, #28]
 801e532:	4654      	mov	r4, sl
 801e534:	2000      	movs	r0, #0
 801e536:	f04f 0c0a 	mov.w	ip, #10
 801e53a:	4621      	mov	r1, r4
 801e53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e540:	3b30      	subs	r3, #48	@ 0x30
 801e542:	2b09      	cmp	r3, #9
 801e544:	d94b      	bls.n	801e5de <_vfiprintf_r+0x1a2>
 801e546:	b1b0      	cbz	r0, 801e576 <_vfiprintf_r+0x13a>
 801e548:	9207      	str	r2, [sp, #28]
 801e54a:	e014      	b.n	801e576 <_vfiprintf_r+0x13a>
 801e54c:	eba0 0308 	sub.w	r3, r0, r8
 801e550:	fa09 f303 	lsl.w	r3, r9, r3
 801e554:	4313      	orrs	r3, r2
 801e556:	9304      	str	r3, [sp, #16]
 801e558:	46a2      	mov	sl, r4
 801e55a:	e7d2      	b.n	801e502 <_vfiprintf_r+0xc6>
 801e55c:	9b03      	ldr	r3, [sp, #12]
 801e55e:	1d19      	adds	r1, r3, #4
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	9103      	str	r1, [sp, #12]
 801e564:	2b00      	cmp	r3, #0
 801e566:	bfbb      	ittet	lt
 801e568:	425b      	neglt	r3, r3
 801e56a:	f042 0202 	orrlt.w	r2, r2, #2
 801e56e:	9307      	strge	r3, [sp, #28]
 801e570:	9307      	strlt	r3, [sp, #28]
 801e572:	bfb8      	it	lt
 801e574:	9204      	strlt	r2, [sp, #16]
 801e576:	7823      	ldrb	r3, [r4, #0]
 801e578:	2b2e      	cmp	r3, #46	@ 0x2e
 801e57a:	d10a      	bne.n	801e592 <_vfiprintf_r+0x156>
 801e57c:	7863      	ldrb	r3, [r4, #1]
 801e57e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e580:	d132      	bne.n	801e5e8 <_vfiprintf_r+0x1ac>
 801e582:	9b03      	ldr	r3, [sp, #12]
 801e584:	1d1a      	adds	r2, r3, #4
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	9203      	str	r2, [sp, #12]
 801e58a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e58e:	3402      	adds	r4, #2
 801e590:	9305      	str	r3, [sp, #20]
 801e592:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e668 <_vfiprintf_r+0x22c>
 801e596:	7821      	ldrb	r1, [r4, #0]
 801e598:	2203      	movs	r2, #3
 801e59a:	4650      	mov	r0, sl
 801e59c:	f7e1 fe50 	bl	8000240 <memchr>
 801e5a0:	b138      	cbz	r0, 801e5b2 <_vfiprintf_r+0x176>
 801e5a2:	9b04      	ldr	r3, [sp, #16]
 801e5a4:	eba0 000a 	sub.w	r0, r0, sl
 801e5a8:	2240      	movs	r2, #64	@ 0x40
 801e5aa:	4082      	lsls	r2, r0
 801e5ac:	4313      	orrs	r3, r2
 801e5ae:	3401      	adds	r4, #1
 801e5b0:	9304      	str	r3, [sp, #16]
 801e5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5b6:	4829      	ldr	r0, [pc, #164]	@ (801e65c <_vfiprintf_r+0x220>)
 801e5b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e5bc:	2206      	movs	r2, #6
 801e5be:	f7e1 fe3f 	bl	8000240 <memchr>
 801e5c2:	2800      	cmp	r0, #0
 801e5c4:	d03f      	beq.n	801e646 <_vfiprintf_r+0x20a>
 801e5c6:	4b26      	ldr	r3, [pc, #152]	@ (801e660 <_vfiprintf_r+0x224>)
 801e5c8:	bb1b      	cbnz	r3, 801e612 <_vfiprintf_r+0x1d6>
 801e5ca:	9b03      	ldr	r3, [sp, #12]
 801e5cc:	3307      	adds	r3, #7
 801e5ce:	f023 0307 	bic.w	r3, r3, #7
 801e5d2:	3308      	adds	r3, #8
 801e5d4:	9303      	str	r3, [sp, #12]
 801e5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5d8:	443b      	add	r3, r7
 801e5da:	9309      	str	r3, [sp, #36]	@ 0x24
 801e5dc:	e76a      	b.n	801e4b4 <_vfiprintf_r+0x78>
 801e5de:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5e2:	460c      	mov	r4, r1
 801e5e4:	2001      	movs	r0, #1
 801e5e6:	e7a8      	b.n	801e53a <_vfiprintf_r+0xfe>
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	3401      	adds	r4, #1
 801e5ec:	9305      	str	r3, [sp, #20]
 801e5ee:	4619      	mov	r1, r3
 801e5f0:	f04f 0c0a 	mov.w	ip, #10
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5fa:	3a30      	subs	r2, #48	@ 0x30
 801e5fc:	2a09      	cmp	r2, #9
 801e5fe:	d903      	bls.n	801e608 <_vfiprintf_r+0x1cc>
 801e600:	2b00      	cmp	r3, #0
 801e602:	d0c6      	beq.n	801e592 <_vfiprintf_r+0x156>
 801e604:	9105      	str	r1, [sp, #20]
 801e606:	e7c4      	b.n	801e592 <_vfiprintf_r+0x156>
 801e608:	fb0c 2101 	mla	r1, ip, r1, r2
 801e60c:	4604      	mov	r4, r0
 801e60e:	2301      	movs	r3, #1
 801e610:	e7f0      	b.n	801e5f4 <_vfiprintf_r+0x1b8>
 801e612:	ab03      	add	r3, sp, #12
 801e614:	9300      	str	r3, [sp, #0]
 801e616:	462a      	mov	r2, r5
 801e618:	4b12      	ldr	r3, [pc, #72]	@ (801e664 <_vfiprintf_r+0x228>)
 801e61a:	a904      	add	r1, sp, #16
 801e61c:	4630      	mov	r0, r6
 801e61e:	f3af 8000 	nop.w
 801e622:	4607      	mov	r7, r0
 801e624:	1c78      	adds	r0, r7, #1
 801e626:	d1d6      	bne.n	801e5d6 <_vfiprintf_r+0x19a>
 801e628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e62a:	07d9      	lsls	r1, r3, #31
 801e62c:	d405      	bmi.n	801e63a <_vfiprintf_r+0x1fe>
 801e62e:	89ab      	ldrh	r3, [r5, #12]
 801e630:	059a      	lsls	r2, r3, #22
 801e632:	d402      	bmi.n	801e63a <_vfiprintf_r+0x1fe>
 801e634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e636:	f7ff fceb 	bl	801e010 <__retarget_lock_release_recursive>
 801e63a:	89ab      	ldrh	r3, [r5, #12]
 801e63c:	065b      	lsls	r3, r3, #25
 801e63e:	f53f af1f 	bmi.w	801e480 <_vfiprintf_r+0x44>
 801e642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e644:	e71e      	b.n	801e484 <_vfiprintf_r+0x48>
 801e646:	ab03      	add	r3, sp, #12
 801e648:	9300      	str	r3, [sp, #0]
 801e64a:	462a      	mov	r2, r5
 801e64c:	4b05      	ldr	r3, [pc, #20]	@ (801e664 <_vfiprintf_r+0x228>)
 801e64e:	a904      	add	r1, sp, #16
 801e650:	4630      	mov	r0, r6
 801e652:	f000 f879 	bl	801e748 <_printf_i>
 801e656:	e7e4      	b.n	801e622 <_vfiprintf_r+0x1e6>
 801e658:	0802188e 	.word	0x0802188e
 801e65c:	08021898 	.word	0x08021898
 801e660:	00000000 	.word	0x00000000
 801e664:	0801e417 	.word	0x0801e417
 801e668:	08021894 	.word	0x08021894

0801e66c <_printf_common>:
 801e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e670:	4616      	mov	r6, r2
 801e672:	4698      	mov	r8, r3
 801e674:	688a      	ldr	r2, [r1, #8]
 801e676:	690b      	ldr	r3, [r1, #16]
 801e678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e67c:	4293      	cmp	r3, r2
 801e67e:	bfb8      	it	lt
 801e680:	4613      	movlt	r3, r2
 801e682:	6033      	str	r3, [r6, #0]
 801e684:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e688:	4607      	mov	r7, r0
 801e68a:	460c      	mov	r4, r1
 801e68c:	b10a      	cbz	r2, 801e692 <_printf_common+0x26>
 801e68e:	3301      	adds	r3, #1
 801e690:	6033      	str	r3, [r6, #0]
 801e692:	6823      	ldr	r3, [r4, #0]
 801e694:	0699      	lsls	r1, r3, #26
 801e696:	bf42      	ittt	mi
 801e698:	6833      	ldrmi	r3, [r6, #0]
 801e69a:	3302      	addmi	r3, #2
 801e69c:	6033      	strmi	r3, [r6, #0]
 801e69e:	6825      	ldr	r5, [r4, #0]
 801e6a0:	f015 0506 	ands.w	r5, r5, #6
 801e6a4:	d106      	bne.n	801e6b4 <_printf_common+0x48>
 801e6a6:	f104 0a19 	add.w	sl, r4, #25
 801e6aa:	68e3      	ldr	r3, [r4, #12]
 801e6ac:	6832      	ldr	r2, [r6, #0]
 801e6ae:	1a9b      	subs	r3, r3, r2
 801e6b0:	42ab      	cmp	r3, r5
 801e6b2:	dc26      	bgt.n	801e702 <_printf_common+0x96>
 801e6b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e6b8:	6822      	ldr	r2, [r4, #0]
 801e6ba:	3b00      	subs	r3, #0
 801e6bc:	bf18      	it	ne
 801e6be:	2301      	movne	r3, #1
 801e6c0:	0692      	lsls	r2, r2, #26
 801e6c2:	d42b      	bmi.n	801e71c <_printf_common+0xb0>
 801e6c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e6c8:	4641      	mov	r1, r8
 801e6ca:	4638      	mov	r0, r7
 801e6cc:	47c8      	blx	r9
 801e6ce:	3001      	adds	r0, #1
 801e6d0:	d01e      	beq.n	801e710 <_printf_common+0xa4>
 801e6d2:	6823      	ldr	r3, [r4, #0]
 801e6d4:	6922      	ldr	r2, [r4, #16]
 801e6d6:	f003 0306 	and.w	r3, r3, #6
 801e6da:	2b04      	cmp	r3, #4
 801e6dc:	bf02      	ittt	eq
 801e6de:	68e5      	ldreq	r5, [r4, #12]
 801e6e0:	6833      	ldreq	r3, [r6, #0]
 801e6e2:	1aed      	subeq	r5, r5, r3
 801e6e4:	68a3      	ldr	r3, [r4, #8]
 801e6e6:	bf0c      	ite	eq
 801e6e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e6ec:	2500      	movne	r5, #0
 801e6ee:	4293      	cmp	r3, r2
 801e6f0:	bfc4      	itt	gt
 801e6f2:	1a9b      	subgt	r3, r3, r2
 801e6f4:	18ed      	addgt	r5, r5, r3
 801e6f6:	2600      	movs	r6, #0
 801e6f8:	341a      	adds	r4, #26
 801e6fa:	42b5      	cmp	r5, r6
 801e6fc:	d11a      	bne.n	801e734 <_printf_common+0xc8>
 801e6fe:	2000      	movs	r0, #0
 801e700:	e008      	b.n	801e714 <_printf_common+0xa8>
 801e702:	2301      	movs	r3, #1
 801e704:	4652      	mov	r2, sl
 801e706:	4641      	mov	r1, r8
 801e708:	4638      	mov	r0, r7
 801e70a:	47c8      	blx	r9
 801e70c:	3001      	adds	r0, #1
 801e70e:	d103      	bne.n	801e718 <_printf_common+0xac>
 801e710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e718:	3501      	adds	r5, #1
 801e71a:	e7c6      	b.n	801e6aa <_printf_common+0x3e>
 801e71c:	18e1      	adds	r1, r4, r3
 801e71e:	1c5a      	adds	r2, r3, #1
 801e720:	2030      	movs	r0, #48	@ 0x30
 801e722:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e726:	4422      	add	r2, r4
 801e728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e72c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e730:	3302      	adds	r3, #2
 801e732:	e7c7      	b.n	801e6c4 <_printf_common+0x58>
 801e734:	2301      	movs	r3, #1
 801e736:	4622      	mov	r2, r4
 801e738:	4641      	mov	r1, r8
 801e73a:	4638      	mov	r0, r7
 801e73c:	47c8      	blx	r9
 801e73e:	3001      	adds	r0, #1
 801e740:	d0e6      	beq.n	801e710 <_printf_common+0xa4>
 801e742:	3601      	adds	r6, #1
 801e744:	e7d9      	b.n	801e6fa <_printf_common+0x8e>
	...

0801e748 <_printf_i>:
 801e748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e74c:	7e0f      	ldrb	r7, [r1, #24]
 801e74e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e750:	2f78      	cmp	r7, #120	@ 0x78
 801e752:	4691      	mov	r9, r2
 801e754:	4680      	mov	r8, r0
 801e756:	460c      	mov	r4, r1
 801e758:	469a      	mov	sl, r3
 801e75a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e75e:	d807      	bhi.n	801e770 <_printf_i+0x28>
 801e760:	2f62      	cmp	r7, #98	@ 0x62
 801e762:	d80a      	bhi.n	801e77a <_printf_i+0x32>
 801e764:	2f00      	cmp	r7, #0
 801e766:	f000 80d2 	beq.w	801e90e <_printf_i+0x1c6>
 801e76a:	2f58      	cmp	r7, #88	@ 0x58
 801e76c:	f000 80b9 	beq.w	801e8e2 <_printf_i+0x19a>
 801e770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e778:	e03a      	b.n	801e7f0 <_printf_i+0xa8>
 801e77a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e77e:	2b15      	cmp	r3, #21
 801e780:	d8f6      	bhi.n	801e770 <_printf_i+0x28>
 801e782:	a101      	add	r1, pc, #4	@ (adr r1, 801e788 <_printf_i+0x40>)
 801e784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e788:	0801e7e1 	.word	0x0801e7e1
 801e78c:	0801e7f5 	.word	0x0801e7f5
 801e790:	0801e771 	.word	0x0801e771
 801e794:	0801e771 	.word	0x0801e771
 801e798:	0801e771 	.word	0x0801e771
 801e79c:	0801e771 	.word	0x0801e771
 801e7a0:	0801e7f5 	.word	0x0801e7f5
 801e7a4:	0801e771 	.word	0x0801e771
 801e7a8:	0801e771 	.word	0x0801e771
 801e7ac:	0801e771 	.word	0x0801e771
 801e7b0:	0801e771 	.word	0x0801e771
 801e7b4:	0801e8f5 	.word	0x0801e8f5
 801e7b8:	0801e81f 	.word	0x0801e81f
 801e7bc:	0801e8af 	.word	0x0801e8af
 801e7c0:	0801e771 	.word	0x0801e771
 801e7c4:	0801e771 	.word	0x0801e771
 801e7c8:	0801e917 	.word	0x0801e917
 801e7cc:	0801e771 	.word	0x0801e771
 801e7d0:	0801e81f 	.word	0x0801e81f
 801e7d4:	0801e771 	.word	0x0801e771
 801e7d8:	0801e771 	.word	0x0801e771
 801e7dc:	0801e8b7 	.word	0x0801e8b7
 801e7e0:	6833      	ldr	r3, [r6, #0]
 801e7e2:	1d1a      	adds	r2, r3, #4
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	6032      	str	r2, [r6, #0]
 801e7e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e7ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e7f0:	2301      	movs	r3, #1
 801e7f2:	e09d      	b.n	801e930 <_printf_i+0x1e8>
 801e7f4:	6833      	ldr	r3, [r6, #0]
 801e7f6:	6820      	ldr	r0, [r4, #0]
 801e7f8:	1d19      	adds	r1, r3, #4
 801e7fa:	6031      	str	r1, [r6, #0]
 801e7fc:	0606      	lsls	r6, r0, #24
 801e7fe:	d501      	bpl.n	801e804 <_printf_i+0xbc>
 801e800:	681d      	ldr	r5, [r3, #0]
 801e802:	e003      	b.n	801e80c <_printf_i+0xc4>
 801e804:	0645      	lsls	r5, r0, #25
 801e806:	d5fb      	bpl.n	801e800 <_printf_i+0xb8>
 801e808:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e80c:	2d00      	cmp	r5, #0
 801e80e:	da03      	bge.n	801e818 <_printf_i+0xd0>
 801e810:	232d      	movs	r3, #45	@ 0x2d
 801e812:	426d      	negs	r5, r5
 801e814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e818:	4859      	ldr	r0, [pc, #356]	@ (801e980 <_printf_i+0x238>)
 801e81a:	230a      	movs	r3, #10
 801e81c:	e011      	b.n	801e842 <_printf_i+0xfa>
 801e81e:	6821      	ldr	r1, [r4, #0]
 801e820:	6833      	ldr	r3, [r6, #0]
 801e822:	0608      	lsls	r0, r1, #24
 801e824:	f853 5b04 	ldr.w	r5, [r3], #4
 801e828:	d402      	bmi.n	801e830 <_printf_i+0xe8>
 801e82a:	0649      	lsls	r1, r1, #25
 801e82c:	bf48      	it	mi
 801e82e:	b2ad      	uxthmi	r5, r5
 801e830:	2f6f      	cmp	r7, #111	@ 0x6f
 801e832:	4853      	ldr	r0, [pc, #332]	@ (801e980 <_printf_i+0x238>)
 801e834:	6033      	str	r3, [r6, #0]
 801e836:	bf14      	ite	ne
 801e838:	230a      	movne	r3, #10
 801e83a:	2308      	moveq	r3, #8
 801e83c:	2100      	movs	r1, #0
 801e83e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e842:	6866      	ldr	r6, [r4, #4]
 801e844:	60a6      	str	r6, [r4, #8]
 801e846:	2e00      	cmp	r6, #0
 801e848:	bfa2      	ittt	ge
 801e84a:	6821      	ldrge	r1, [r4, #0]
 801e84c:	f021 0104 	bicge.w	r1, r1, #4
 801e850:	6021      	strge	r1, [r4, #0]
 801e852:	b90d      	cbnz	r5, 801e858 <_printf_i+0x110>
 801e854:	2e00      	cmp	r6, #0
 801e856:	d04b      	beq.n	801e8f0 <_printf_i+0x1a8>
 801e858:	4616      	mov	r6, r2
 801e85a:	fbb5 f1f3 	udiv	r1, r5, r3
 801e85e:	fb03 5711 	mls	r7, r3, r1, r5
 801e862:	5dc7      	ldrb	r7, [r0, r7]
 801e864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e868:	462f      	mov	r7, r5
 801e86a:	42bb      	cmp	r3, r7
 801e86c:	460d      	mov	r5, r1
 801e86e:	d9f4      	bls.n	801e85a <_printf_i+0x112>
 801e870:	2b08      	cmp	r3, #8
 801e872:	d10b      	bne.n	801e88c <_printf_i+0x144>
 801e874:	6823      	ldr	r3, [r4, #0]
 801e876:	07df      	lsls	r7, r3, #31
 801e878:	d508      	bpl.n	801e88c <_printf_i+0x144>
 801e87a:	6923      	ldr	r3, [r4, #16]
 801e87c:	6861      	ldr	r1, [r4, #4]
 801e87e:	4299      	cmp	r1, r3
 801e880:	bfde      	ittt	le
 801e882:	2330      	movle	r3, #48	@ 0x30
 801e884:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e888:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801e88c:	1b92      	subs	r2, r2, r6
 801e88e:	6122      	str	r2, [r4, #16]
 801e890:	f8cd a000 	str.w	sl, [sp]
 801e894:	464b      	mov	r3, r9
 801e896:	aa03      	add	r2, sp, #12
 801e898:	4621      	mov	r1, r4
 801e89a:	4640      	mov	r0, r8
 801e89c:	f7ff fee6 	bl	801e66c <_printf_common>
 801e8a0:	3001      	adds	r0, #1
 801e8a2:	d14a      	bne.n	801e93a <_printf_i+0x1f2>
 801e8a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e8a8:	b004      	add	sp, #16
 801e8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8ae:	6823      	ldr	r3, [r4, #0]
 801e8b0:	f043 0320 	orr.w	r3, r3, #32
 801e8b4:	6023      	str	r3, [r4, #0]
 801e8b6:	4833      	ldr	r0, [pc, #204]	@ (801e984 <_printf_i+0x23c>)
 801e8b8:	2778      	movs	r7, #120	@ 0x78
 801e8ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e8be:	6823      	ldr	r3, [r4, #0]
 801e8c0:	6831      	ldr	r1, [r6, #0]
 801e8c2:	061f      	lsls	r7, r3, #24
 801e8c4:	f851 5b04 	ldr.w	r5, [r1], #4
 801e8c8:	d402      	bmi.n	801e8d0 <_printf_i+0x188>
 801e8ca:	065f      	lsls	r7, r3, #25
 801e8cc:	bf48      	it	mi
 801e8ce:	b2ad      	uxthmi	r5, r5
 801e8d0:	6031      	str	r1, [r6, #0]
 801e8d2:	07d9      	lsls	r1, r3, #31
 801e8d4:	bf44      	itt	mi
 801e8d6:	f043 0320 	orrmi.w	r3, r3, #32
 801e8da:	6023      	strmi	r3, [r4, #0]
 801e8dc:	b11d      	cbz	r5, 801e8e6 <_printf_i+0x19e>
 801e8de:	2310      	movs	r3, #16
 801e8e0:	e7ac      	b.n	801e83c <_printf_i+0xf4>
 801e8e2:	4827      	ldr	r0, [pc, #156]	@ (801e980 <_printf_i+0x238>)
 801e8e4:	e7e9      	b.n	801e8ba <_printf_i+0x172>
 801e8e6:	6823      	ldr	r3, [r4, #0]
 801e8e8:	f023 0320 	bic.w	r3, r3, #32
 801e8ec:	6023      	str	r3, [r4, #0]
 801e8ee:	e7f6      	b.n	801e8de <_printf_i+0x196>
 801e8f0:	4616      	mov	r6, r2
 801e8f2:	e7bd      	b.n	801e870 <_printf_i+0x128>
 801e8f4:	6833      	ldr	r3, [r6, #0]
 801e8f6:	6825      	ldr	r5, [r4, #0]
 801e8f8:	6961      	ldr	r1, [r4, #20]
 801e8fa:	1d18      	adds	r0, r3, #4
 801e8fc:	6030      	str	r0, [r6, #0]
 801e8fe:	062e      	lsls	r6, r5, #24
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	d501      	bpl.n	801e908 <_printf_i+0x1c0>
 801e904:	6019      	str	r1, [r3, #0]
 801e906:	e002      	b.n	801e90e <_printf_i+0x1c6>
 801e908:	0668      	lsls	r0, r5, #25
 801e90a:	d5fb      	bpl.n	801e904 <_printf_i+0x1bc>
 801e90c:	8019      	strh	r1, [r3, #0]
 801e90e:	2300      	movs	r3, #0
 801e910:	6123      	str	r3, [r4, #16]
 801e912:	4616      	mov	r6, r2
 801e914:	e7bc      	b.n	801e890 <_printf_i+0x148>
 801e916:	6833      	ldr	r3, [r6, #0]
 801e918:	1d1a      	adds	r2, r3, #4
 801e91a:	6032      	str	r2, [r6, #0]
 801e91c:	681e      	ldr	r6, [r3, #0]
 801e91e:	6862      	ldr	r2, [r4, #4]
 801e920:	2100      	movs	r1, #0
 801e922:	4630      	mov	r0, r6
 801e924:	f7e1 fc8c 	bl	8000240 <memchr>
 801e928:	b108      	cbz	r0, 801e92e <_printf_i+0x1e6>
 801e92a:	1b80      	subs	r0, r0, r6
 801e92c:	6060      	str	r0, [r4, #4]
 801e92e:	6863      	ldr	r3, [r4, #4]
 801e930:	6123      	str	r3, [r4, #16]
 801e932:	2300      	movs	r3, #0
 801e934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e938:	e7aa      	b.n	801e890 <_printf_i+0x148>
 801e93a:	6923      	ldr	r3, [r4, #16]
 801e93c:	4632      	mov	r2, r6
 801e93e:	4649      	mov	r1, r9
 801e940:	4640      	mov	r0, r8
 801e942:	47d0      	blx	sl
 801e944:	3001      	adds	r0, #1
 801e946:	d0ad      	beq.n	801e8a4 <_printf_i+0x15c>
 801e948:	6823      	ldr	r3, [r4, #0]
 801e94a:	079b      	lsls	r3, r3, #30
 801e94c:	d413      	bmi.n	801e976 <_printf_i+0x22e>
 801e94e:	68e0      	ldr	r0, [r4, #12]
 801e950:	9b03      	ldr	r3, [sp, #12]
 801e952:	4298      	cmp	r0, r3
 801e954:	bfb8      	it	lt
 801e956:	4618      	movlt	r0, r3
 801e958:	e7a6      	b.n	801e8a8 <_printf_i+0x160>
 801e95a:	2301      	movs	r3, #1
 801e95c:	4632      	mov	r2, r6
 801e95e:	4649      	mov	r1, r9
 801e960:	4640      	mov	r0, r8
 801e962:	47d0      	blx	sl
 801e964:	3001      	adds	r0, #1
 801e966:	d09d      	beq.n	801e8a4 <_printf_i+0x15c>
 801e968:	3501      	adds	r5, #1
 801e96a:	68e3      	ldr	r3, [r4, #12]
 801e96c:	9903      	ldr	r1, [sp, #12]
 801e96e:	1a5b      	subs	r3, r3, r1
 801e970:	42ab      	cmp	r3, r5
 801e972:	dcf2      	bgt.n	801e95a <_printf_i+0x212>
 801e974:	e7eb      	b.n	801e94e <_printf_i+0x206>
 801e976:	2500      	movs	r5, #0
 801e978:	f104 0619 	add.w	r6, r4, #25
 801e97c:	e7f5      	b.n	801e96a <_printf_i+0x222>
 801e97e:	bf00      	nop
 801e980:	0802189f 	.word	0x0802189f
 801e984:	080218b0 	.word	0x080218b0

0801e988 <__sflush_r>:
 801e988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e990:	0716      	lsls	r6, r2, #28
 801e992:	4605      	mov	r5, r0
 801e994:	460c      	mov	r4, r1
 801e996:	d454      	bmi.n	801ea42 <__sflush_r+0xba>
 801e998:	684b      	ldr	r3, [r1, #4]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	dc02      	bgt.n	801e9a4 <__sflush_r+0x1c>
 801e99e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	dd48      	ble.n	801ea36 <__sflush_r+0xae>
 801e9a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e9a6:	2e00      	cmp	r6, #0
 801e9a8:	d045      	beq.n	801ea36 <__sflush_r+0xae>
 801e9aa:	2300      	movs	r3, #0
 801e9ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e9b0:	682f      	ldr	r7, [r5, #0]
 801e9b2:	6a21      	ldr	r1, [r4, #32]
 801e9b4:	602b      	str	r3, [r5, #0]
 801e9b6:	d030      	beq.n	801ea1a <__sflush_r+0x92>
 801e9b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e9ba:	89a3      	ldrh	r3, [r4, #12]
 801e9bc:	0759      	lsls	r1, r3, #29
 801e9be:	d505      	bpl.n	801e9cc <__sflush_r+0x44>
 801e9c0:	6863      	ldr	r3, [r4, #4]
 801e9c2:	1ad2      	subs	r2, r2, r3
 801e9c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e9c6:	b10b      	cbz	r3, 801e9cc <__sflush_r+0x44>
 801e9c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e9ca:	1ad2      	subs	r2, r2, r3
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e9d0:	6a21      	ldr	r1, [r4, #32]
 801e9d2:	4628      	mov	r0, r5
 801e9d4:	47b0      	blx	r6
 801e9d6:	1c43      	adds	r3, r0, #1
 801e9d8:	89a3      	ldrh	r3, [r4, #12]
 801e9da:	d106      	bne.n	801e9ea <__sflush_r+0x62>
 801e9dc:	6829      	ldr	r1, [r5, #0]
 801e9de:	291d      	cmp	r1, #29
 801e9e0:	d82b      	bhi.n	801ea3a <__sflush_r+0xb2>
 801e9e2:	4a2a      	ldr	r2, [pc, #168]	@ (801ea8c <__sflush_r+0x104>)
 801e9e4:	410a      	asrs	r2, r1
 801e9e6:	07d6      	lsls	r6, r2, #31
 801e9e8:	d427      	bmi.n	801ea3a <__sflush_r+0xb2>
 801e9ea:	2200      	movs	r2, #0
 801e9ec:	6062      	str	r2, [r4, #4]
 801e9ee:	04d9      	lsls	r1, r3, #19
 801e9f0:	6922      	ldr	r2, [r4, #16]
 801e9f2:	6022      	str	r2, [r4, #0]
 801e9f4:	d504      	bpl.n	801ea00 <__sflush_r+0x78>
 801e9f6:	1c42      	adds	r2, r0, #1
 801e9f8:	d101      	bne.n	801e9fe <__sflush_r+0x76>
 801e9fa:	682b      	ldr	r3, [r5, #0]
 801e9fc:	b903      	cbnz	r3, 801ea00 <__sflush_r+0x78>
 801e9fe:	6560      	str	r0, [r4, #84]	@ 0x54
 801ea00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ea02:	602f      	str	r7, [r5, #0]
 801ea04:	b1b9      	cbz	r1, 801ea36 <__sflush_r+0xae>
 801ea06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ea0a:	4299      	cmp	r1, r3
 801ea0c:	d002      	beq.n	801ea14 <__sflush_r+0x8c>
 801ea0e:	4628      	mov	r0, r5
 801ea10:	f7ff fb40 	bl	801e094 <_free_r>
 801ea14:	2300      	movs	r3, #0
 801ea16:	6363      	str	r3, [r4, #52]	@ 0x34
 801ea18:	e00d      	b.n	801ea36 <__sflush_r+0xae>
 801ea1a:	2301      	movs	r3, #1
 801ea1c:	4628      	mov	r0, r5
 801ea1e:	47b0      	blx	r6
 801ea20:	4602      	mov	r2, r0
 801ea22:	1c50      	adds	r0, r2, #1
 801ea24:	d1c9      	bne.n	801e9ba <__sflush_r+0x32>
 801ea26:	682b      	ldr	r3, [r5, #0]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d0c6      	beq.n	801e9ba <__sflush_r+0x32>
 801ea2c:	2b1d      	cmp	r3, #29
 801ea2e:	d001      	beq.n	801ea34 <__sflush_r+0xac>
 801ea30:	2b16      	cmp	r3, #22
 801ea32:	d11e      	bne.n	801ea72 <__sflush_r+0xea>
 801ea34:	602f      	str	r7, [r5, #0]
 801ea36:	2000      	movs	r0, #0
 801ea38:	e022      	b.n	801ea80 <__sflush_r+0xf8>
 801ea3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ea3e:	b21b      	sxth	r3, r3
 801ea40:	e01b      	b.n	801ea7a <__sflush_r+0xf2>
 801ea42:	690f      	ldr	r7, [r1, #16]
 801ea44:	2f00      	cmp	r7, #0
 801ea46:	d0f6      	beq.n	801ea36 <__sflush_r+0xae>
 801ea48:	0793      	lsls	r3, r2, #30
 801ea4a:	680e      	ldr	r6, [r1, #0]
 801ea4c:	bf08      	it	eq
 801ea4e:	694b      	ldreq	r3, [r1, #20]
 801ea50:	600f      	str	r7, [r1, #0]
 801ea52:	bf18      	it	ne
 801ea54:	2300      	movne	r3, #0
 801ea56:	eba6 0807 	sub.w	r8, r6, r7
 801ea5a:	608b      	str	r3, [r1, #8]
 801ea5c:	f1b8 0f00 	cmp.w	r8, #0
 801ea60:	dde9      	ble.n	801ea36 <__sflush_r+0xae>
 801ea62:	6a21      	ldr	r1, [r4, #32]
 801ea64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ea66:	4643      	mov	r3, r8
 801ea68:	463a      	mov	r2, r7
 801ea6a:	4628      	mov	r0, r5
 801ea6c:	47b0      	blx	r6
 801ea6e:	2800      	cmp	r0, #0
 801ea70:	dc08      	bgt.n	801ea84 <__sflush_r+0xfc>
 801ea72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ea7a:	81a3      	strh	r3, [r4, #12]
 801ea7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ea80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea84:	4407      	add	r7, r0
 801ea86:	eba8 0800 	sub.w	r8, r8, r0
 801ea8a:	e7e7      	b.n	801ea5c <__sflush_r+0xd4>
 801ea8c:	dfbffffe 	.word	0xdfbffffe

0801ea90 <_fflush_r>:
 801ea90:	b538      	push	{r3, r4, r5, lr}
 801ea92:	690b      	ldr	r3, [r1, #16]
 801ea94:	4605      	mov	r5, r0
 801ea96:	460c      	mov	r4, r1
 801ea98:	b913      	cbnz	r3, 801eaa0 <_fflush_r+0x10>
 801ea9a:	2500      	movs	r5, #0
 801ea9c:	4628      	mov	r0, r5
 801ea9e:	bd38      	pop	{r3, r4, r5, pc}
 801eaa0:	b118      	cbz	r0, 801eaaa <_fflush_r+0x1a>
 801eaa2:	6a03      	ldr	r3, [r0, #32]
 801eaa4:	b90b      	cbnz	r3, 801eaaa <_fflush_r+0x1a>
 801eaa6:	f7fe ff1d 	bl	801d8e4 <__sinit>
 801eaaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d0f3      	beq.n	801ea9a <_fflush_r+0xa>
 801eab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801eab4:	07d0      	lsls	r0, r2, #31
 801eab6:	d404      	bmi.n	801eac2 <_fflush_r+0x32>
 801eab8:	0599      	lsls	r1, r3, #22
 801eaba:	d402      	bmi.n	801eac2 <_fflush_r+0x32>
 801eabc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eabe:	f7ff faa6 	bl	801e00e <__retarget_lock_acquire_recursive>
 801eac2:	4628      	mov	r0, r5
 801eac4:	4621      	mov	r1, r4
 801eac6:	f7ff ff5f 	bl	801e988 <__sflush_r>
 801eaca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eacc:	07da      	lsls	r2, r3, #31
 801eace:	4605      	mov	r5, r0
 801ead0:	d4e4      	bmi.n	801ea9c <_fflush_r+0xc>
 801ead2:	89a3      	ldrh	r3, [r4, #12]
 801ead4:	059b      	lsls	r3, r3, #22
 801ead6:	d4e1      	bmi.n	801ea9c <_fflush_r+0xc>
 801ead8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eada:	f7ff fa99 	bl	801e010 <__retarget_lock_release_recursive>
 801eade:	e7dd      	b.n	801ea9c <_fflush_r+0xc>

0801eae0 <fiprintf>:
 801eae0:	b40e      	push	{r1, r2, r3}
 801eae2:	b503      	push	{r0, r1, lr}
 801eae4:	4601      	mov	r1, r0
 801eae6:	ab03      	add	r3, sp, #12
 801eae8:	4805      	ldr	r0, [pc, #20]	@ (801eb00 <fiprintf+0x20>)
 801eaea:	f853 2b04 	ldr.w	r2, [r3], #4
 801eaee:	6800      	ldr	r0, [r0, #0]
 801eaf0:	9301      	str	r3, [sp, #4]
 801eaf2:	f7ff fca3 	bl	801e43c <_vfiprintf_r>
 801eaf6:	b002      	add	sp, #8
 801eaf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801eafc:	b003      	add	sp, #12
 801eafe:	4770      	bx	lr
 801eb00:	20001bf4 	.word	0x20001bf4

0801eb04 <__swhatbuf_r>:
 801eb04:	b570      	push	{r4, r5, r6, lr}
 801eb06:	460c      	mov	r4, r1
 801eb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb0c:	2900      	cmp	r1, #0
 801eb0e:	b096      	sub	sp, #88	@ 0x58
 801eb10:	4615      	mov	r5, r2
 801eb12:	461e      	mov	r6, r3
 801eb14:	da0d      	bge.n	801eb32 <__swhatbuf_r+0x2e>
 801eb16:	89a3      	ldrh	r3, [r4, #12]
 801eb18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801eb1c:	f04f 0100 	mov.w	r1, #0
 801eb20:	bf14      	ite	ne
 801eb22:	2340      	movne	r3, #64	@ 0x40
 801eb24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801eb28:	2000      	movs	r0, #0
 801eb2a:	6031      	str	r1, [r6, #0]
 801eb2c:	602b      	str	r3, [r5, #0]
 801eb2e:	b016      	add	sp, #88	@ 0x58
 801eb30:	bd70      	pop	{r4, r5, r6, pc}
 801eb32:	466a      	mov	r2, sp
 801eb34:	f000 f848 	bl	801ebc8 <_fstat_r>
 801eb38:	2800      	cmp	r0, #0
 801eb3a:	dbec      	blt.n	801eb16 <__swhatbuf_r+0x12>
 801eb3c:	9901      	ldr	r1, [sp, #4]
 801eb3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801eb42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801eb46:	4259      	negs	r1, r3
 801eb48:	4159      	adcs	r1, r3
 801eb4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eb4e:	e7eb      	b.n	801eb28 <__swhatbuf_r+0x24>

0801eb50 <__smakebuf_r>:
 801eb50:	898b      	ldrh	r3, [r1, #12]
 801eb52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eb54:	079d      	lsls	r5, r3, #30
 801eb56:	4606      	mov	r6, r0
 801eb58:	460c      	mov	r4, r1
 801eb5a:	d507      	bpl.n	801eb6c <__smakebuf_r+0x1c>
 801eb5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eb60:	6023      	str	r3, [r4, #0]
 801eb62:	6123      	str	r3, [r4, #16]
 801eb64:	2301      	movs	r3, #1
 801eb66:	6163      	str	r3, [r4, #20]
 801eb68:	b003      	add	sp, #12
 801eb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb6c:	ab01      	add	r3, sp, #4
 801eb6e:	466a      	mov	r2, sp
 801eb70:	f7ff ffc8 	bl	801eb04 <__swhatbuf_r>
 801eb74:	9f00      	ldr	r7, [sp, #0]
 801eb76:	4605      	mov	r5, r0
 801eb78:	4639      	mov	r1, r7
 801eb7a:	4630      	mov	r0, r6
 801eb7c:	f7fe fc80 	bl	801d480 <_malloc_r>
 801eb80:	b948      	cbnz	r0, 801eb96 <__smakebuf_r+0x46>
 801eb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb86:	059a      	lsls	r2, r3, #22
 801eb88:	d4ee      	bmi.n	801eb68 <__smakebuf_r+0x18>
 801eb8a:	f023 0303 	bic.w	r3, r3, #3
 801eb8e:	f043 0302 	orr.w	r3, r3, #2
 801eb92:	81a3      	strh	r3, [r4, #12]
 801eb94:	e7e2      	b.n	801eb5c <__smakebuf_r+0xc>
 801eb96:	89a3      	ldrh	r3, [r4, #12]
 801eb98:	6020      	str	r0, [r4, #0]
 801eb9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eb9e:	81a3      	strh	r3, [r4, #12]
 801eba0:	9b01      	ldr	r3, [sp, #4]
 801eba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eba6:	b15b      	cbz	r3, 801ebc0 <__smakebuf_r+0x70>
 801eba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebac:	4630      	mov	r0, r6
 801ebae:	f000 f81d 	bl	801ebec <_isatty_r>
 801ebb2:	b128      	cbz	r0, 801ebc0 <__smakebuf_r+0x70>
 801ebb4:	89a3      	ldrh	r3, [r4, #12]
 801ebb6:	f023 0303 	bic.w	r3, r3, #3
 801ebba:	f043 0301 	orr.w	r3, r3, #1
 801ebbe:	81a3      	strh	r3, [r4, #12]
 801ebc0:	89a3      	ldrh	r3, [r4, #12]
 801ebc2:	431d      	orrs	r5, r3
 801ebc4:	81a5      	strh	r5, [r4, #12]
 801ebc6:	e7cf      	b.n	801eb68 <__smakebuf_r+0x18>

0801ebc8 <_fstat_r>:
 801ebc8:	b538      	push	{r3, r4, r5, lr}
 801ebca:	4d07      	ldr	r5, [pc, #28]	@ (801ebe8 <_fstat_r+0x20>)
 801ebcc:	2300      	movs	r3, #0
 801ebce:	4604      	mov	r4, r0
 801ebd0:	4608      	mov	r0, r1
 801ebd2:	4611      	mov	r1, r2
 801ebd4:	602b      	str	r3, [r5, #0]
 801ebd6:	f7e4 fd15 	bl	8003604 <_fstat>
 801ebda:	1c43      	adds	r3, r0, #1
 801ebdc:	d102      	bne.n	801ebe4 <_fstat_r+0x1c>
 801ebde:	682b      	ldr	r3, [r5, #0]
 801ebe0:	b103      	cbz	r3, 801ebe4 <_fstat_r+0x1c>
 801ebe2:	6023      	str	r3, [r4, #0]
 801ebe4:	bd38      	pop	{r3, r4, r5, pc}
 801ebe6:	bf00      	nop
 801ebe8:	2001f920 	.word	0x2001f920

0801ebec <_isatty_r>:
 801ebec:	b538      	push	{r3, r4, r5, lr}
 801ebee:	4d06      	ldr	r5, [pc, #24]	@ (801ec08 <_isatty_r+0x1c>)
 801ebf0:	2300      	movs	r3, #0
 801ebf2:	4604      	mov	r4, r0
 801ebf4:	4608      	mov	r0, r1
 801ebf6:	602b      	str	r3, [r5, #0]
 801ebf8:	f7e4 fd14 	bl	8003624 <_isatty>
 801ebfc:	1c43      	adds	r3, r0, #1
 801ebfe:	d102      	bne.n	801ec06 <_isatty_r+0x1a>
 801ec00:	682b      	ldr	r3, [r5, #0]
 801ec02:	b103      	cbz	r3, 801ec06 <_isatty_r+0x1a>
 801ec04:	6023      	str	r3, [r4, #0]
 801ec06:	bd38      	pop	{r3, r4, r5, pc}
 801ec08:	2001f920 	.word	0x2001f920

0801ec0c <abort>:
 801ec0c:	b508      	push	{r3, lr}
 801ec0e:	2006      	movs	r0, #6
 801ec10:	f000 f82c 	bl	801ec6c <raise>
 801ec14:	2001      	movs	r0, #1
 801ec16:	f7e4 fcc1 	bl	800359c <_exit>

0801ec1a <_raise_r>:
 801ec1a:	291f      	cmp	r1, #31
 801ec1c:	b538      	push	{r3, r4, r5, lr}
 801ec1e:	4605      	mov	r5, r0
 801ec20:	460c      	mov	r4, r1
 801ec22:	d904      	bls.n	801ec2e <_raise_r+0x14>
 801ec24:	2316      	movs	r3, #22
 801ec26:	6003      	str	r3, [r0, #0]
 801ec28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ec2c:	bd38      	pop	{r3, r4, r5, pc}
 801ec2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ec30:	b112      	cbz	r2, 801ec38 <_raise_r+0x1e>
 801ec32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ec36:	b94b      	cbnz	r3, 801ec4c <_raise_r+0x32>
 801ec38:	4628      	mov	r0, r5
 801ec3a:	f000 f831 	bl	801eca0 <_getpid_r>
 801ec3e:	4622      	mov	r2, r4
 801ec40:	4601      	mov	r1, r0
 801ec42:	4628      	mov	r0, r5
 801ec44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec48:	f000 b818 	b.w	801ec7c <_kill_r>
 801ec4c:	2b01      	cmp	r3, #1
 801ec4e:	d00a      	beq.n	801ec66 <_raise_r+0x4c>
 801ec50:	1c59      	adds	r1, r3, #1
 801ec52:	d103      	bne.n	801ec5c <_raise_r+0x42>
 801ec54:	2316      	movs	r3, #22
 801ec56:	6003      	str	r3, [r0, #0]
 801ec58:	2001      	movs	r0, #1
 801ec5a:	e7e7      	b.n	801ec2c <_raise_r+0x12>
 801ec5c:	2100      	movs	r1, #0
 801ec5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ec62:	4620      	mov	r0, r4
 801ec64:	4798      	blx	r3
 801ec66:	2000      	movs	r0, #0
 801ec68:	e7e0      	b.n	801ec2c <_raise_r+0x12>
	...

0801ec6c <raise>:
 801ec6c:	4b02      	ldr	r3, [pc, #8]	@ (801ec78 <raise+0xc>)
 801ec6e:	4601      	mov	r1, r0
 801ec70:	6818      	ldr	r0, [r3, #0]
 801ec72:	f7ff bfd2 	b.w	801ec1a <_raise_r>
 801ec76:	bf00      	nop
 801ec78:	20001bf4 	.word	0x20001bf4

0801ec7c <_kill_r>:
 801ec7c:	b538      	push	{r3, r4, r5, lr}
 801ec7e:	4d07      	ldr	r5, [pc, #28]	@ (801ec9c <_kill_r+0x20>)
 801ec80:	2300      	movs	r3, #0
 801ec82:	4604      	mov	r4, r0
 801ec84:	4608      	mov	r0, r1
 801ec86:	4611      	mov	r1, r2
 801ec88:	602b      	str	r3, [r5, #0]
 801ec8a:	f7e4 fc77 	bl	800357c <_kill>
 801ec8e:	1c43      	adds	r3, r0, #1
 801ec90:	d102      	bne.n	801ec98 <_kill_r+0x1c>
 801ec92:	682b      	ldr	r3, [r5, #0]
 801ec94:	b103      	cbz	r3, 801ec98 <_kill_r+0x1c>
 801ec96:	6023      	str	r3, [r4, #0]
 801ec98:	bd38      	pop	{r3, r4, r5, pc}
 801ec9a:	bf00      	nop
 801ec9c:	2001f920 	.word	0x2001f920

0801eca0 <_getpid_r>:
 801eca0:	f7e4 bc64 	b.w	800356c <_getpid>

0801eca4 <pow>:
 801eca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eca6:	ed2d 8b02 	vpush	{d8}
 801ecaa:	eeb0 8a40 	vmov.f32	s16, s0
 801ecae:	eef0 8a60 	vmov.f32	s17, s1
 801ecb2:	ec55 4b11 	vmov	r4, r5, d1
 801ecb6:	f000 fb1b 	bl	801f2f0 <__ieee754_pow>
 801ecba:	4622      	mov	r2, r4
 801ecbc:	462b      	mov	r3, r5
 801ecbe:	4620      	mov	r0, r4
 801ecc0:	4629      	mov	r1, r5
 801ecc2:	ec57 6b10 	vmov	r6, r7, d0
 801ecc6:	f7e1 ff69 	bl	8000b9c <__aeabi_dcmpun>
 801ecca:	2800      	cmp	r0, #0
 801eccc:	d13b      	bne.n	801ed46 <pow+0xa2>
 801ecce:	ec51 0b18 	vmov	r0, r1, d8
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	f7e1 ff2f 	bl	8000b38 <__aeabi_dcmpeq>
 801ecda:	b1b8      	cbz	r0, 801ed0c <pow+0x68>
 801ecdc:	2200      	movs	r2, #0
 801ecde:	2300      	movs	r3, #0
 801ece0:	4620      	mov	r0, r4
 801ece2:	4629      	mov	r1, r5
 801ece4:	f7e1 ff28 	bl	8000b38 <__aeabi_dcmpeq>
 801ece8:	2800      	cmp	r0, #0
 801ecea:	d146      	bne.n	801ed7a <pow+0xd6>
 801ecec:	ec45 4b10 	vmov	d0, r4, r5
 801ecf0:	f000 fa16 	bl	801f120 <finite>
 801ecf4:	b338      	cbz	r0, 801ed46 <pow+0xa2>
 801ecf6:	2200      	movs	r2, #0
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	4620      	mov	r0, r4
 801ecfc:	4629      	mov	r1, r5
 801ecfe:	f7e1 ff25 	bl	8000b4c <__aeabi_dcmplt>
 801ed02:	b300      	cbz	r0, 801ed46 <pow+0xa2>
 801ed04:	f7ff f958 	bl	801dfb8 <__errno>
 801ed08:	2322      	movs	r3, #34	@ 0x22
 801ed0a:	e01b      	b.n	801ed44 <pow+0xa0>
 801ed0c:	ec47 6b10 	vmov	d0, r6, r7
 801ed10:	f000 fa06 	bl	801f120 <finite>
 801ed14:	b9e0      	cbnz	r0, 801ed50 <pow+0xac>
 801ed16:	eeb0 0a48 	vmov.f32	s0, s16
 801ed1a:	eef0 0a68 	vmov.f32	s1, s17
 801ed1e:	f000 f9ff 	bl	801f120 <finite>
 801ed22:	b1a8      	cbz	r0, 801ed50 <pow+0xac>
 801ed24:	ec45 4b10 	vmov	d0, r4, r5
 801ed28:	f000 f9fa 	bl	801f120 <finite>
 801ed2c:	b180      	cbz	r0, 801ed50 <pow+0xac>
 801ed2e:	4632      	mov	r2, r6
 801ed30:	463b      	mov	r3, r7
 801ed32:	4630      	mov	r0, r6
 801ed34:	4639      	mov	r1, r7
 801ed36:	f7e1 ff31 	bl	8000b9c <__aeabi_dcmpun>
 801ed3a:	2800      	cmp	r0, #0
 801ed3c:	d0e2      	beq.n	801ed04 <pow+0x60>
 801ed3e:	f7ff f93b 	bl	801dfb8 <__errno>
 801ed42:	2321      	movs	r3, #33	@ 0x21
 801ed44:	6003      	str	r3, [r0, #0]
 801ed46:	ecbd 8b02 	vpop	{d8}
 801ed4a:	ec47 6b10 	vmov	d0, r6, r7
 801ed4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed50:	2200      	movs	r2, #0
 801ed52:	2300      	movs	r3, #0
 801ed54:	4630      	mov	r0, r6
 801ed56:	4639      	mov	r1, r7
 801ed58:	f7e1 feee 	bl	8000b38 <__aeabi_dcmpeq>
 801ed5c:	2800      	cmp	r0, #0
 801ed5e:	d0f2      	beq.n	801ed46 <pow+0xa2>
 801ed60:	eeb0 0a48 	vmov.f32	s0, s16
 801ed64:	eef0 0a68 	vmov.f32	s1, s17
 801ed68:	f000 f9da 	bl	801f120 <finite>
 801ed6c:	2800      	cmp	r0, #0
 801ed6e:	d0ea      	beq.n	801ed46 <pow+0xa2>
 801ed70:	ec45 4b10 	vmov	d0, r4, r5
 801ed74:	f000 f9d4 	bl	801f120 <finite>
 801ed78:	e7c3      	b.n	801ed02 <pow+0x5e>
 801ed7a:	4f01      	ldr	r7, [pc, #4]	@ (801ed80 <pow+0xdc>)
 801ed7c:	2600      	movs	r6, #0
 801ed7e:	e7e2      	b.n	801ed46 <pow+0xa2>
 801ed80:	3ff00000 	.word	0x3ff00000

0801ed84 <sqrt>:
 801ed84:	b538      	push	{r3, r4, r5, lr}
 801ed86:	ed2d 8b02 	vpush	{d8}
 801ed8a:	ec55 4b10 	vmov	r4, r5, d0
 801ed8e:	f000 f9d3 	bl	801f138 <__ieee754_sqrt>
 801ed92:	4622      	mov	r2, r4
 801ed94:	462b      	mov	r3, r5
 801ed96:	4620      	mov	r0, r4
 801ed98:	4629      	mov	r1, r5
 801ed9a:	eeb0 8a40 	vmov.f32	s16, s0
 801ed9e:	eef0 8a60 	vmov.f32	s17, s1
 801eda2:	f7e1 fefb 	bl	8000b9c <__aeabi_dcmpun>
 801eda6:	b990      	cbnz	r0, 801edce <sqrt+0x4a>
 801eda8:	2200      	movs	r2, #0
 801edaa:	2300      	movs	r3, #0
 801edac:	4620      	mov	r0, r4
 801edae:	4629      	mov	r1, r5
 801edb0:	f7e1 fecc 	bl	8000b4c <__aeabi_dcmplt>
 801edb4:	b158      	cbz	r0, 801edce <sqrt+0x4a>
 801edb6:	f7ff f8ff 	bl	801dfb8 <__errno>
 801edba:	2321      	movs	r3, #33	@ 0x21
 801edbc:	6003      	str	r3, [r0, #0]
 801edbe:	2200      	movs	r2, #0
 801edc0:	2300      	movs	r3, #0
 801edc2:	4610      	mov	r0, r2
 801edc4:	4619      	mov	r1, r3
 801edc6:	f7e1 fd79 	bl	80008bc <__aeabi_ddiv>
 801edca:	ec41 0b18 	vmov	d8, r0, r1
 801edce:	eeb0 0a48 	vmov.f32	s0, s16
 801edd2:	eef0 0a68 	vmov.f32	s1, s17
 801edd6:	ecbd 8b02 	vpop	{d8}
 801edda:	bd38      	pop	{r3, r4, r5, pc}
 801eddc:	0000      	movs	r0, r0
	...

0801ede0 <atan>:
 801ede0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede4:	ec55 4b10 	vmov	r4, r5, d0
 801ede8:	4bbf      	ldr	r3, [pc, #764]	@ (801f0e8 <atan+0x308>)
 801edea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801edee:	429e      	cmp	r6, r3
 801edf0:	46ab      	mov	fp, r5
 801edf2:	d918      	bls.n	801ee26 <atan+0x46>
 801edf4:	4bbd      	ldr	r3, [pc, #756]	@ (801f0ec <atan+0x30c>)
 801edf6:	429e      	cmp	r6, r3
 801edf8:	d801      	bhi.n	801edfe <atan+0x1e>
 801edfa:	d109      	bne.n	801ee10 <atan+0x30>
 801edfc:	b144      	cbz	r4, 801ee10 <atan+0x30>
 801edfe:	4622      	mov	r2, r4
 801ee00:	462b      	mov	r3, r5
 801ee02:	4620      	mov	r0, r4
 801ee04:	4629      	mov	r1, r5
 801ee06:	f7e1 fa79 	bl	80002fc <__adddf3>
 801ee0a:	4604      	mov	r4, r0
 801ee0c:	460d      	mov	r5, r1
 801ee0e:	e006      	b.n	801ee1e <atan+0x3e>
 801ee10:	f1bb 0f00 	cmp.w	fp, #0
 801ee14:	f340 812b 	ble.w	801f06e <atan+0x28e>
 801ee18:	a597      	add	r5, pc, #604	@ (adr r5, 801f078 <atan+0x298>)
 801ee1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ee1e:	ec45 4b10 	vmov	d0, r4, r5
 801ee22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee26:	4bb2      	ldr	r3, [pc, #712]	@ (801f0f0 <atan+0x310>)
 801ee28:	429e      	cmp	r6, r3
 801ee2a:	d813      	bhi.n	801ee54 <atan+0x74>
 801ee2c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801ee30:	429e      	cmp	r6, r3
 801ee32:	d80c      	bhi.n	801ee4e <atan+0x6e>
 801ee34:	a392      	add	r3, pc, #584	@ (adr r3, 801f080 <atan+0x2a0>)
 801ee36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3a:	4620      	mov	r0, r4
 801ee3c:	4629      	mov	r1, r5
 801ee3e:	f7e1 fa5d 	bl	80002fc <__adddf3>
 801ee42:	4bac      	ldr	r3, [pc, #688]	@ (801f0f4 <atan+0x314>)
 801ee44:	2200      	movs	r2, #0
 801ee46:	f7e1 fe9f 	bl	8000b88 <__aeabi_dcmpgt>
 801ee4a:	2800      	cmp	r0, #0
 801ee4c:	d1e7      	bne.n	801ee1e <atan+0x3e>
 801ee4e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ee52:	e029      	b.n	801eea8 <atan+0xc8>
 801ee54:	f000 f95c 	bl	801f110 <fabs>
 801ee58:	4ba7      	ldr	r3, [pc, #668]	@ (801f0f8 <atan+0x318>)
 801ee5a:	429e      	cmp	r6, r3
 801ee5c:	ec55 4b10 	vmov	r4, r5, d0
 801ee60:	f200 80bc 	bhi.w	801efdc <atan+0x1fc>
 801ee64:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ee68:	429e      	cmp	r6, r3
 801ee6a:	f200 809e 	bhi.w	801efaa <atan+0x1ca>
 801ee6e:	4622      	mov	r2, r4
 801ee70:	462b      	mov	r3, r5
 801ee72:	4620      	mov	r0, r4
 801ee74:	4629      	mov	r1, r5
 801ee76:	f7e1 fa41 	bl	80002fc <__adddf3>
 801ee7a:	4b9e      	ldr	r3, [pc, #632]	@ (801f0f4 <atan+0x314>)
 801ee7c:	2200      	movs	r2, #0
 801ee7e:	f7e1 fa3b 	bl	80002f8 <__aeabi_dsub>
 801ee82:	2200      	movs	r2, #0
 801ee84:	4606      	mov	r6, r0
 801ee86:	460f      	mov	r7, r1
 801ee88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ee8c:	4620      	mov	r0, r4
 801ee8e:	4629      	mov	r1, r5
 801ee90:	f7e1 fa34 	bl	80002fc <__adddf3>
 801ee94:	4602      	mov	r2, r0
 801ee96:	460b      	mov	r3, r1
 801ee98:	4630      	mov	r0, r6
 801ee9a:	4639      	mov	r1, r7
 801ee9c:	f7e1 fd0e 	bl	80008bc <__aeabi_ddiv>
 801eea0:	f04f 0a00 	mov.w	sl, #0
 801eea4:	4604      	mov	r4, r0
 801eea6:	460d      	mov	r5, r1
 801eea8:	4622      	mov	r2, r4
 801eeaa:	462b      	mov	r3, r5
 801eeac:	4620      	mov	r0, r4
 801eeae:	4629      	mov	r1, r5
 801eeb0:	f7e1 fbda 	bl	8000668 <__aeabi_dmul>
 801eeb4:	4602      	mov	r2, r0
 801eeb6:	460b      	mov	r3, r1
 801eeb8:	4680      	mov	r8, r0
 801eeba:	4689      	mov	r9, r1
 801eebc:	f7e1 fbd4 	bl	8000668 <__aeabi_dmul>
 801eec0:	a371      	add	r3, pc, #452	@ (adr r3, 801f088 <atan+0x2a8>)
 801eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec6:	4606      	mov	r6, r0
 801eec8:	460f      	mov	r7, r1
 801eeca:	f7e1 fbcd 	bl	8000668 <__aeabi_dmul>
 801eece:	a370      	add	r3, pc, #448	@ (adr r3, 801f090 <atan+0x2b0>)
 801eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eed4:	f7e1 fa12 	bl	80002fc <__adddf3>
 801eed8:	4632      	mov	r2, r6
 801eeda:	463b      	mov	r3, r7
 801eedc:	f7e1 fbc4 	bl	8000668 <__aeabi_dmul>
 801eee0:	a36d      	add	r3, pc, #436	@ (adr r3, 801f098 <atan+0x2b8>)
 801eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eee6:	f7e1 fa09 	bl	80002fc <__adddf3>
 801eeea:	4632      	mov	r2, r6
 801eeec:	463b      	mov	r3, r7
 801eeee:	f7e1 fbbb 	bl	8000668 <__aeabi_dmul>
 801eef2:	a36b      	add	r3, pc, #428	@ (adr r3, 801f0a0 <atan+0x2c0>)
 801eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eef8:	f7e1 fa00 	bl	80002fc <__adddf3>
 801eefc:	4632      	mov	r2, r6
 801eefe:	463b      	mov	r3, r7
 801ef00:	f7e1 fbb2 	bl	8000668 <__aeabi_dmul>
 801ef04:	a368      	add	r3, pc, #416	@ (adr r3, 801f0a8 <atan+0x2c8>)
 801ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef0a:	f7e1 f9f7 	bl	80002fc <__adddf3>
 801ef0e:	4632      	mov	r2, r6
 801ef10:	463b      	mov	r3, r7
 801ef12:	f7e1 fba9 	bl	8000668 <__aeabi_dmul>
 801ef16:	a366      	add	r3, pc, #408	@ (adr r3, 801f0b0 <atan+0x2d0>)
 801ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef1c:	f7e1 f9ee 	bl	80002fc <__adddf3>
 801ef20:	4642      	mov	r2, r8
 801ef22:	464b      	mov	r3, r9
 801ef24:	f7e1 fba0 	bl	8000668 <__aeabi_dmul>
 801ef28:	a363      	add	r3, pc, #396	@ (adr r3, 801f0b8 <atan+0x2d8>)
 801ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef2e:	4680      	mov	r8, r0
 801ef30:	4689      	mov	r9, r1
 801ef32:	4630      	mov	r0, r6
 801ef34:	4639      	mov	r1, r7
 801ef36:	f7e1 fb97 	bl	8000668 <__aeabi_dmul>
 801ef3a:	a361      	add	r3, pc, #388	@ (adr r3, 801f0c0 <atan+0x2e0>)
 801ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef40:	f7e1 f9da 	bl	80002f8 <__aeabi_dsub>
 801ef44:	4632      	mov	r2, r6
 801ef46:	463b      	mov	r3, r7
 801ef48:	f7e1 fb8e 	bl	8000668 <__aeabi_dmul>
 801ef4c:	a35e      	add	r3, pc, #376	@ (adr r3, 801f0c8 <atan+0x2e8>)
 801ef4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef52:	f7e1 f9d1 	bl	80002f8 <__aeabi_dsub>
 801ef56:	4632      	mov	r2, r6
 801ef58:	463b      	mov	r3, r7
 801ef5a:	f7e1 fb85 	bl	8000668 <__aeabi_dmul>
 801ef5e:	a35c      	add	r3, pc, #368	@ (adr r3, 801f0d0 <atan+0x2f0>)
 801ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef64:	f7e1 f9c8 	bl	80002f8 <__aeabi_dsub>
 801ef68:	4632      	mov	r2, r6
 801ef6a:	463b      	mov	r3, r7
 801ef6c:	f7e1 fb7c 	bl	8000668 <__aeabi_dmul>
 801ef70:	a359      	add	r3, pc, #356	@ (adr r3, 801f0d8 <atan+0x2f8>)
 801ef72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef76:	f7e1 f9bf 	bl	80002f8 <__aeabi_dsub>
 801ef7a:	4632      	mov	r2, r6
 801ef7c:	463b      	mov	r3, r7
 801ef7e:	f7e1 fb73 	bl	8000668 <__aeabi_dmul>
 801ef82:	4602      	mov	r2, r0
 801ef84:	460b      	mov	r3, r1
 801ef86:	4640      	mov	r0, r8
 801ef88:	4649      	mov	r1, r9
 801ef8a:	f7e1 f9b7 	bl	80002fc <__adddf3>
 801ef8e:	4622      	mov	r2, r4
 801ef90:	462b      	mov	r3, r5
 801ef92:	f7e1 fb69 	bl	8000668 <__aeabi_dmul>
 801ef96:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801ef9a:	4602      	mov	r2, r0
 801ef9c:	460b      	mov	r3, r1
 801ef9e:	d148      	bne.n	801f032 <atan+0x252>
 801efa0:	4620      	mov	r0, r4
 801efa2:	4629      	mov	r1, r5
 801efa4:	f7e1 f9a8 	bl	80002f8 <__aeabi_dsub>
 801efa8:	e72f      	b.n	801ee0a <atan+0x2a>
 801efaa:	4b52      	ldr	r3, [pc, #328]	@ (801f0f4 <atan+0x314>)
 801efac:	2200      	movs	r2, #0
 801efae:	4620      	mov	r0, r4
 801efb0:	4629      	mov	r1, r5
 801efb2:	f7e1 f9a1 	bl	80002f8 <__aeabi_dsub>
 801efb6:	4b4f      	ldr	r3, [pc, #316]	@ (801f0f4 <atan+0x314>)
 801efb8:	4606      	mov	r6, r0
 801efba:	460f      	mov	r7, r1
 801efbc:	2200      	movs	r2, #0
 801efbe:	4620      	mov	r0, r4
 801efc0:	4629      	mov	r1, r5
 801efc2:	f7e1 f99b 	bl	80002fc <__adddf3>
 801efc6:	4602      	mov	r2, r0
 801efc8:	460b      	mov	r3, r1
 801efca:	4630      	mov	r0, r6
 801efcc:	4639      	mov	r1, r7
 801efce:	f7e1 fc75 	bl	80008bc <__aeabi_ddiv>
 801efd2:	f04f 0a01 	mov.w	sl, #1
 801efd6:	4604      	mov	r4, r0
 801efd8:	460d      	mov	r5, r1
 801efda:	e765      	b.n	801eea8 <atan+0xc8>
 801efdc:	4b47      	ldr	r3, [pc, #284]	@ (801f0fc <atan+0x31c>)
 801efde:	429e      	cmp	r6, r3
 801efe0:	d21c      	bcs.n	801f01c <atan+0x23c>
 801efe2:	4b47      	ldr	r3, [pc, #284]	@ (801f100 <atan+0x320>)
 801efe4:	2200      	movs	r2, #0
 801efe6:	4620      	mov	r0, r4
 801efe8:	4629      	mov	r1, r5
 801efea:	f7e1 f985 	bl	80002f8 <__aeabi_dsub>
 801efee:	4b44      	ldr	r3, [pc, #272]	@ (801f100 <atan+0x320>)
 801eff0:	4606      	mov	r6, r0
 801eff2:	460f      	mov	r7, r1
 801eff4:	2200      	movs	r2, #0
 801eff6:	4620      	mov	r0, r4
 801eff8:	4629      	mov	r1, r5
 801effa:	f7e1 fb35 	bl	8000668 <__aeabi_dmul>
 801effe:	4b3d      	ldr	r3, [pc, #244]	@ (801f0f4 <atan+0x314>)
 801f000:	2200      	movs	r2, #0
 801f002:	f7e1 f97b 	bl	80002fc <__adddf3>
 801f006:	4602      	mov	r2, r0
 801f008:	460b      	mov	r3, r1
 801f00a:	4630      	mov	r0, r6
 801f00c:	4639      	mov	r1, r7
 801f00e:	f7e1 fc55 	bl	80008bc <__aeabi_ddiv>
 801f012:	f04f 0a02 	mov.w	sl, #2
 801f016:	4604      	mov	r4, r0
 801f018:	460d      	mov	r5, r1
 801f01a:	e745      	b.n	801eea8 <atan+0xc8>
 801f01c:	4622      	mov	r2, r4
 801f01e:	462b      	mov	r3, r5
 801f020:	4938      	ldr	r1, [pc, #224]	@ (801f104 <atan+0x324>)
 801f022:	2000      	movs	r0, #0
 801f024:	f7e1 fc4a 	bl	80008bc <__aeabi_ddiv>
 801f028:	f04f 0a03 	mov.w	sl, #3
 801f02c:	4604      	mov	r4, r0
 801f02e:	460d      	mov	r5, r1
 801f030:	e73a      	b.n	801eea8 <atan+0xc8>
 801f032:	4b35      	ldr	r3, [pc, #212]	@ (801f108 <atan+0x328>)
 801f034:	4e35      	ldr	r6, [pc, #212]	@ (801f10c <atan+0x32c>)
 801f036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f03e:	f7e1 f95b 	bl	80002f8 <__aeabi_dsub>
 801f042:	4622      	mov	r2, r4
 801f044:	462b      	mov	r3, r5
 801f046:	f7e1 f957 	bl	80002f8 <__aeabi_dsub>
 801f04a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801f04e:	4602      	mov	r2, r0
 801f050:	460b      	mov	r3, r1
 801f052:	e9d6 0100 	ldrd	r0, r1, [r6]
 801f056:	f7e1 f94f 	bl	80002f8 <__aeabi_dsub>
 801f05a:	f1bb 0f00 	cmp.w	fp, #0
 801f05e:	4604      	mov	r4, r0
 801f060:	460d      	mov	r5, r1
 801f062:	f6bf aedc 	bge.w	801ee1e <atan+0x3e>
 801f066:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f06a:	461d      	mov	r5, r3
 801f06c:	e6d7      	b.n	801ee1e <atan+0x3e>
 801f06e:	a51c      	add	r5, pc, #112	@ (adr r5, 801f0e0 <atan+0x300>)
 801f070:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f074:	e6d3      	b.n	801ee1e <atan+0x3e>
 801f076:	bf00      	nop
 801f078:	54442d18 	.word	0x54442d18
 801f07c:	3ff921fb 	.word	0x3ff921fb
 801f080:	8800759c 	.word	0x8800759c
 801f084:	7e37e43c 	.word	0x7e37e43c
 801f088:	e322da11 	.word	0xe322da11
 801f08c:	3f90ad3a 	.word	0x3f90ad3a
 801f090:	24760deb 	.word	0x24760deb
 801f094:	3fa97b4b 	.word	0x3fa97b4b
 801f098:	a0d03d51 	.word	0xa0d03d51
 801f09c:	3fb10d66 	.word	0x3fb10d66
 801f0a0:	c54c206e 	.word	0xc54c206e
 801f0a4:	3fb745cd 	.word	0x3fb745cd
 801f0a8:	920083ff 	.word	0x920083ff
 801f0ac:	3fc24924 	.word	0x3fc24924
 801f0b0:	5555550d 	.word	0x5555550d
 801f0b4:	3fd55555 	.word	0x3fd55555
 801f0b8:	2c6a6c2f 	.word	0x2c6a6c2f
 801f0bc:	bfa2b444 	.word	0xbfa2b444
 801f0c0:	52defd9a 	.word	0x52defd9a
 801f0c4:	3fadde2d 	.word	0x3fadde2d
 801f0c8:	af749a6d 	.word	0xaf749a6d
 801f0cc:	3fb3b0f2 	.word	0x3fb3b0f2
 801f0d0:	fe231671 	.word	0xfe231671
 801f0d4:	3fbc71c6 	.word	0x3fbc71c6
 801f0d8:	9998ebc4 	.word	0x9998ebc4
 801f0dc:	3fc99999 	.word	0x3fc99999
 801f0e0:	54442d18 	.word	0x54442d18
 801f0e4:	bff921fb 	.word	0xbff921fb
 801f0e8:	440fffff 	.word	0x440fffff
 801f0ec:	7ff00000 	.word	0x7ff00000
 801f0f0:	3fdbffff 	.word	0x3fdbffff
 801f0f4:	3ff00000 	.word	0x3ff00000
 801f0f8:	3ff2ffff 	.word	0x3ff2ffff
 801f0fc:	40038000 	.word	0x40038000
 801f100:	3ff80000 	.word	0x3ff80000
 801f104:	bff00000 	.word	0xbff00000
 801f108:	080218c8 	.word	0x080218c8
 801f10c:	080218e8 	.word	0x080218e8

0801f110 <fabs>:
 801f110:	ec51 0b10 	vmov	r0, r1, d0
 801f114:	4602      	mov	r2, r0
 801f116:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801f11a:	ec43 2b10 	vmov	d0, r2, r3
 801f11e:	4770      	bx	lr

0801f120 <finite>:
 801f120:	b082      	sub	sp, #8
 801f122:	ed8d 0b00 	vstr	d0, [sp]
 801f126:	9801      	ldr	r0, [sp, #4]
 801f128:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801f12c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801f130:	0fc0      	lsrs	r0, r0, #31
 801f132:	b002      	add	sp, #8
 801f134:	4770      	bx	lr
	...

0801f138 <__ieee754_sqrt>:
 801f138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f13c:	4a68      	ldr	r2, [pc, #416]	@ (801f2e0 <__ieee754_sqrt+0x1a8>)
 801f13e:	ec55 4b10 	vmov	r4, r5, d0
 801f142:	43aa      	bics	r2, r5
 801f144:	462b      	mov	r3, r5
 801f146:	4621      	mov	r1, r4
 801f148:	d110      	bne.n	801f16c <__ieee754_sqrt+0x34>
 801f14a:	4622      	mov	r2, r4
 801f14c:	4620      	mov	r0, r4
 801f14e:	4629      	mov	r1, r5
 801f150:	f7e1 fa8a 	bl	8000668 <__aeabi_dmul>
 801f154:	4602      	mov	r2, r0
 801f156:	460b      	mov	r3, r1
 801f158:	4620      	mov	r0, r4
 801f15a:	4629      	mov	r1, r5
 801f15c:	f7e1 f8ce 	bl	80002fc <__adddf3>
 801f160:	4604      	mov	r4, r0
 801f162:	460d      	mov	r5, r1
 801f164:	ec45 4b10 	vmov	d0, r4, r5
 801f168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f16c:	2d00      	cmp	r5, #0
 801f16e:	dc0e      	bgt.n	801f18e <__ieee754_sqrt+0x56>
 801f170:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f174:	4322      	orrs	r2, r4
 801f176:	d0f5      	beq.n	801f164 <__ieee754_sqrt+0x2c>
 801f178:	b19d      	cbz	r5, 801f1a2 <__ieee754_sqrt+0x6a>
 801f17a:	4622      	mov	r2, r4
 801f17c:	4620      	mov	r0, r4
 801f17e:	4629      	mov	r1, r5
 801f180:	f7e1 f8ba 	bl	80002f8 <__aeabi_dsub>
 801f184:	4602      	mov	r2, r0
 801f186:	460b      	mov	r3, r1
 801f188:	f7e1 fb98 	bl	80008bc <__aeabi_ddiv>
 801f18c:	e7e8      	b.n	801f160 <__ieee754_sqrt+0x28>
 801f18e:	152a      	asrs	r2, r5, #20
 801f190:	d115      	bne.n	801f1be <__ieee754_sqrt+0x86>
 801f192:	2000      	movs	r0, #0
 801f194:	e009      	b.n	801f1aa <__ieee754_sqrt+0x72>
 801f196:	0acb      	lsrs	r3, r1, #11
 801f198:	3a15      	subs	r2, #21
 801f19a:	0549      	lsls	r1, r1, #21
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d0fa      	beq.n	801f196 <__ieee754_sqrt+0x5e>
 801f1a0:	e7f7      	b.n	801f192 <__ieee754_sqrt+0x5a>
 801f1a2:	462a      	mov	r2, r5
 801f1a4:	e7fa      	b.n	801f19c <__ieee754_sqrt+0x64>
 801f1a6:	005b      	lsls	r3, r3, #1
 801f1a8:	3001      	adds	r0, #1
 801f1aa:	02dc      	lsls	r4, r3, #11
 801f1ac:	d5fb      	bpl.n	801f1a6 <__ieee754_sqrt+0x6e>
 801f1ae:	1e44      	subs	r4, r0, #1
 801f1b0:	1b12      	subs	r2, r2, r4
 801f1b2:	f1c0 0420 	rsb	r4, r0, #32
 801f1b6:	fa21 f404 	lsr.w	r4, r1, r4
 801f1ba:	4323      	orrs	r3, r4
 801f1bc:	4081      	lsls	r1, r0
 801f1be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f1c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801f1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f1ca:	07d2      	lsls	r2, r2, #31
 801f1cc:	bf5c      	itt	pl
 801f1ce:	005b      	lslpl	r3, r3, #1
 801f1d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801f1d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f1d8:	bf58      	it	pl
 801f1da:	0049      	lslpl	r1, r1, #1
 801f1dc:	2600      	movs	r6, #0
 801f1de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801f1e2:	106d      	asrs	r5, r5, #1
 801f1e4:	0049      	lsls	r1, r1, #1
 801f1e6:	2016      	movs	r0, #22
 801f1e8:	4632      	mov	r2, r6
 801f1ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801f1ee:	1917      	adds	r7, r2, r4
 801f1f0:	429f      	cmp	r7, r3
 801f1f2:	bfde      	ittt	le
 801f1f4:	193a      	addle	r2, r7, r4
 801f1f6:	1bdb      	suble	r3, r3, r7
 801f1f8:	1936      	addle	r6, r6, r4
 801f1fa:	0fcf      	lsrs	r7, r1, #31
 801f1fc:	3801      	subs	r0, #1
 801f1fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801f202:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f206:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f20a:	d1f0      	bne.n	801f1ee <__ieee754_sqrt+0xb6>
 801f20c:	4604      	mov	r4, r0
 801f20e:	2720      	movs	r7, #32
 801f210:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801f214:	429a      	cmp	r2, r3
 801f216:	eb00 0e0c 	add.w	lr, r0, ip
 801f21a:	db02      	blt.n	801f222 <__ieee754_sqrt+0xea>
 801f21c:	d113      	bne.n	801f246 <__ieee754_sqrt+0x10e>
 801f21e:	458e      	cmp	lr, r1
 801f220:	d811      	bhi.n	801f246 <__ieee754_sqrt+0x10e>
 801f222:	f1be 0f00 	cmp.w	lr, #0
 801f226:	eb0e 000c 	add.w	r0, lr, ip
 801f22a:	da42      	bge.n	801f2b2 <__ieee754_sqrt+0x17a>
 801f22c:	2800      	cmp	r0, #0
 801f22e:	db40      	blt.n	801f2b2 <__ieee754_sqrt+0x17a>
 801f230:	f102 0801 	add.w	r8, r2, #1
 801f234:	1a9b      	subs	r3, r3, r2
 801f236:	458e      	cmp	lr, r1
 801f238:	bf88      	it	hi
 801f23a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801f23e:	eba1 010e 	sub.w	r1, r1, lr
 801f242:	4464      	add	r4, ip
 801f244:	4642      	mov	r2, r8
 801f246:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801f24a:	3f01      	subs	r7, #1
 801f24c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801f250:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801f254:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f258:	d1dc      	bne.n	801f214 <__ieee754_sqrt+0xdc>
 801f25a:	4319      	orrs	r1, r3
 801f25c:	d01b      	beq.n	801f296 <__ieee754_sqrt+0x15e>
 801f25e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801f2e4 <__ieee754_sqrt+0x1ac>
 801f262:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801f2e8 <__ieee754_sqrt+0x1b0>
 801f266:	e9da 0100 	ldrd	r0, r1, [sl]
 801f26a:	e9db 2300 	ldrd	r2, r3, [fp]
 801f26e:	f7e1 f843 	bl	80002f8 <__aeabi_dsub>
 801f272:	e9da 8900 	ldrd	r8, r9, [sl]
 801f276:	4602      	mov	r2, r0
 801f278:	460b      	mov	r3, r1
 801f27a:	4640      	mov	r0, r8
 801f27c:	4649      	mov	r1, r9
 801f27e:	f7e1 fc6f 	bl	8000b60 <__aeabi_dcmple>
 801f282:	b140      	cbz	r0, 801f296 <__ieee754_sqrt+0x15e>
 801f284:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801f288:	e9da 0100 	ldrd	r0, r1, [sl]
 801f28c:	e9db 2300 	ldrd	r2, r3, [fp]
 801f290:	d111      	bne.n	801f2b6 <__ieee754_sqrt+0x17e>
 801f292:	3601      	adds	r6, #1
 801f294:	463c      	mov	r4, r7
 801f296:	1072      	asrs	r2, r6, #1
 801f298:	0863      	lsrs	r3, r4, #1
 801f29a:	07f1      	lsls	r1, r6, #31
 801f29c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801f2a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801f2a4:	bf48      	it	mi
 801f2a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801f2aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	e756      	b.n	801f160 <__ieee754_sqrt+0x28>
 801f2b2:	4690      	mov	r8, r2
 801f2b4:	e7be      	b.n	801f234 <__ieee754_sqrt+0xfc>
 801f2b6:	f7e1 f821 	bl	80002fc <__adddf3>
 801f2ba:	e9da 8900 	ldrd	r8, r9, [sl]
 801f2be:	4602      	mov	r2, r0
 801f2c0:	460b      	mov	r3, r1
 801f2c2:	4640      	mov	r0, r8
 801f2c4:	4649      	mov	r1, r9
 801f2c6:	f7e1 fc41 	bl	8000b4c <__aeabi_dcmplt>
 801f2ca:	b120      	cbz	r0, 801f2d6 <__ieee754_sqrt+0x19e>
 801f2cc:	1ca0      	adds	r0, r4, #2
 801f2ce:	bf08      	it	eq
 801f2d0:	3601      	addeq	r6, #1
 801f2d2:	3402      	adds	r4, #2
 801f2d4:	e7df      	b.n	801f296 <__ieee754_sqrt+0x15e>
 801f2d6:	1c63      	adds	r3, r4, #1
 801f2d8:	f023 0401 	bic.w	r4, r3, #1
 801f2dc:	e7db      	b.n	801f296 <__ieee754_sqrt+0x15e>
 801f2de:	bf00      	nop
 801f2e0:	7ff00000 	.word	0x7ff00000
 801f2e4:	20001c50 	.word	0x20001c50
 801f2e8:	20001c48 	.word	0x20001c48
 801f2ec:	00000000 	.word	0x00000000

0801f2f0 <__ieee754_pow>:
 801f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f4:	b091      	sub	sp, #68	@ 0x44
 801f2f6:	ed8d 1b00 	vstr	d1, [sp]
 801f2fa:	e9dd 1900 	ldrd	r1, r9, [sp]
 801f2fe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801f302:	ea5a 0001 	orrs.w	r0, sl, r1
 801f306:	ec57 6b10 	vmov	r6, r7, d0
 801f30a:	d113      	bne.n	801f334 <__ieee754_pow+0x44>
 801f30c:	19b3      	adds	r3, r6, r6
 801f30e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801f312:	4152      	adcs	r2, r2
 801f314:	4298      	cmp	r0, r3
 801f316:	4b98      	ldr	r3, [pc, #608]	@ (801f578 <__ieee754_pow+0x288>)
 801f318:	4193      	sbcs	r3, r2
 801f31a:	f080 84ea 	bcs.w	801fcf2 <__ieee754_pow+0xa02>
 801f31e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f322:	4630      	mov	r0, r6
 801f324:	4639      	mov	r1, r7
 801f326:	f7e0 ffe9 	bl	80002fc <__adddf3>
 801f32a:	ec41 0b10 	vmov	d0, r0, r1
 801f32e:	b011      	add	sp, #68	@ 0x44
 801f330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f334:	4a91      	ldr	r2, [pc, #580]	@ (801f57c <__ieee754_pow+0x28c>)
 801f336:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801f33a:	4590      	cmp	r8, r2
 801f33c:	463d      	mov	r5, r7
 801f33e:	4633      	mov	r3, r6
 801f340:	d806      	bhi.n	801f350 <__ieee754_pow+0x60>
 801f342:	d101      	bne.n	801f348 <__ieee754_pow+0x58>
 801f344:	2e00      	cmp	r6, #0
 801f346:	d1ea      	bne.n	801f31e <__ieee754_pow+0x2e>
 801f348:	4592      	cmp	sl, r2
 801f34a:	d801      	bhi.n	801f350 <__ieee754_pow+0x60>
 801f34c:	d10e      	bne.n	801f36c <__ieee754_pow+0x7c>
 801f34e:	b169      	cbz	r1, 801f36c <__ieee754_pow+0x7c>
 801f350:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801f354:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801f358:	431d      	orrs	r5, r3
 801f35a:	d1e0      	bne.n	801f31e <__ieee754_pow+0x2e>
 801f35c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f360:	18db      	adds	r3, r3, r3
 801f362:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801f366:	4152      	adcs	r2, r2
 801f368:	429d      	cmp	r5, r3
 801f36a:	e7d4      	b.n	801f316 <__ieee754_pow+0x26>
 801f36c:	2d00      	cmp	r5, #0
 801f36e:	46c3      	mov	fp, r8
 801f370:	da3a      	bge.n	801f3e8 <__ieee754_pow+0xf8>
 801f372:	4a83      	ldr	r2, [pc, #524]	@ (801f580 <__ieee754_pow+0x290>)
 801f374:	4592      	cmp	sl, r2
 801f376:	d84d      	bhi.n	801f414 <__ieee754_pow+0x124>
 801f378:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801f37c:	4592      	cmp	sl, r2
 801f37e:	f240 84c7 	bls.w	801fd10 <__ieee754_pow+0xa20>
 801f382:	ea4f 522a 	mov.w	r2, sl, asr #20
 801f386:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801f38a:	2a14      	cmp	r2, #20
 801f38c:	dd0f      	ble.n	801f3ae <__ieee754_pow+0xbe>
 801f38e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801f392:	fa21 f402 	lsr.w	r4, r1, r2
 801f396:	fa04 f202 	lsl.w	r2, r4, r2
 801f39a:	428a      	cmp	r2, r1
 801f39c:	f040 84b8 	bne.w	801fd10 <__ieee754_pow+0xa20>
 801f3a0:	f004 0401 	and.w	r4, r4, #1
 801f3a4:	f1c4 0402 	rsb	r4, r4, #2
 801f3a8:	2900      	cmp	r1, #0
 801f3aa:	d158      	bne.n	801f45e <__ieee754_pow+0x16e>
 801f3ac:	e00e      	b.n	801f3cc <__ieee754_pow+0xdc>
 801f3ae:	2900      	cmp	r1, #0
 801f3b0:	d154      	bne.n	801f45c <__ieee754_pow+0x16c>
 801f3b2:	f1c2 0214 	rsb	r2, r2, #20
 801f3b6:	fa4a f402 	asr.w	r4, sl, r2
 801f3ba:	fa04 f202 	lsl.w	r2, r4, r2
 801f3be:	4552      	cmp	r2, sl
 801f3c0:	f040 84a3 	bne.w	801fd0a <__ieee754_pow+0xa1a>
 801f3c4:	f004 0401 	and.w	r4, r4, #1
 801f3c8:	f1c4 0402 	rsb	r4, r4, #2
 801f3cc:	4a6d      	ldr	r2, [pc, #436]	@ (801f584 <__ieee754_pow+0x294>)
 801f3ce:	4592      	cmp	sl, r2
 801f3d0:	d12e      	bne.n	801f430 <__ieee754_pow+0x140>
 801f3d2:	f1b9 0f00 	cmp.w	r9, #0
 801f3d6:	f280 8494 	bge.w	801fd02 <__ieee754_pow+0xa12>
 801f3da:	496a      	ldr	r1, [pc, #424]	@ (801f584 <__ieee754_pow+0x294>)
 801f3dc:	4632      	mov	r2, r6
 801f3de:	463b      	mov	r3, r7
 801f3e0:	2000      	movs	r0, #0
 801f3e2:	f7e1 fa6b 	bl	80008bc <__aeabi_ddiv>
 801f3e6:	e7a0      	b.n	801f32a <__ieee754_pow+0x3a>
 801f3e8:	2400      	movs	r4, #0
 801f3ea:	bbc1      	cbnz	r1, 801f45e <__ieee754_pow+0x16e>
 801f3ec:	4a63      	ldr	r2, [pc, #396]	@ (801f57c <__ieee754_pow+0x28c>)
 801f3ee:	4592      	cmp	sl, r2
 801f3f0:	d1ec      	bne.n	801f3cc <__ieee754_pow+0xdc>
 801f3f2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801f3f6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801f3fa:	431a      	orrs	r2, r3
 801f3fc:	f000 8479 	beq.w	801fcf2 <__ieee754_pow+0xa02>
 801f400:	4b61      	ldr	r3, [pc, #388]	@ (801f588 <__ieee754_pow+0x298>)
 801f402:	4598      	cmp	r8, r3
 801f404:	d908      	bls.n	801f418 <__ieee754_pow+0x128>
 801f406:	f1b9 0f00 	cmp.w	r9, #0
 801f40a:	f2c0 8476 	blt.w	801fcfa <__ieee754_pow+0xa0a>
 801f40e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f412:	e78a      	b.n	801f32a <__ieee754_pow+0x3a>
 801f414:	2402      	movs	r4, #2
 801f416:	e7e8      	b.n	801f3ea <__ieee754_pow+0xfa>
 801f418:	f1b9 0f00 	cmp.w	r9, #0
 801f41c:	f04f 0000 	mov.w	r0, #0
 801f420:	f04f 0100 	mov.w	r1, #0
 801f424:	da81      	bge.n	801f32a <__ieee754_pow+0x3a>
 801f426:	e9dd 0300 	ldrd	r0, r3, [sp]
 801f42a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801f42e:	e77c      	b.n	801f32a <__ieee754_pow+0x3a>
 801f430:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801f434:	d106      	bne.n	801f444 <__ieee754_pow+0x154>
 801f436:	4632      	mov	r2, r6
 801f438:	463b      	mov	r3, r7
 801f43a:	4630      	mov	r0, r6
 801f43c:	4639      	mov	r1, r7
 801f43e:	f7e1 f913 	bl	8000668 <__aeabi_dmul>
 801f442:	e772      	b.n	801f32a <__ieee754_pow+0x3a>
 801f444:	4a51      	ldr	r2, [pc, #324]	@ (801f58c <__ieee754_pow+0x29c>)
 801f446:	4591      	cmp	r9, r2
 801f448:	d109      	bne.n	801f45e <__ieee754_pow+0x16e>
 801f44a:	2d00      	cmp	r5, #0
 801f44c:	db07      	blt.n	801f45e <__ieee754_pow+0x16e>
 801f44e:	ec47 6b10 	vmov	d0, r6, r7
 801f452:	b011      	add	sp, #68	@ 0x44
 801f454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f458:	f7ff be6e 	b.w	801f138 <__ieee754_sqrt>
 801f45c:	2400      	movs	r4, #0
 801f45e:	ec47 6b10 	vmov	d0, r6, r7
 801f462:	9302      	str	r3, [sp, #8]
 801f464:	f7ff fe54 	bl	801f110 <fabs>
 801f468:	9b02      	ldr	r3, [sp, #8]
 801f46a:	ec51 0b10 	vmov	r0, r1, d0
 801f46e:	bb53      	cbnz	r3, 801f4c6 <__ieee754_pow+0x1d6>
 801f470:	4b44      	ldr	r3, [pc, #272]	@ (801f584 <__ieee754_pow+0x294>)
 801f472:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801f476:	429a      	cmp	r2, r3
 801f478:	d002      	beq.n	801f480 <__ieee754_pow+0x190>
 801f47a:	f1b8 0f00 	cmp.w	r8, #0
 801f47e:	d122      	bne.n	801f4c6 <__ieee754_pow+0x1d6>
 801f480:	f1b9 0f00 	cmp.w	r9, #0
 801f484:	da05      	bge.n	801f492 <__ieee754_pow+0x1a2>
 801f486:	4602      	mov	r2, r0
 801f488:	460b      	mov	r3, r1
 801f48a:	2000      	movs	r0, #0
 801f48c:	493d      	ldr	r1, [pc, #244]	@ (801f584 <__ieee754_pow+0x294>)
 801f48e:	f7e1 fa15 	bl	80008bc <__aeabi_ddiv>
 801f492:	2d00      	cmp	r5, #0
 801f494:	f6bf af49 	bge.w	801f32a <__ieee754_pow+0x3a>
 801f498:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801f49c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801f4a0:	ea58 0804 	orrs.w	r8, r8, r4
 801f4a4:	d108      	bne.n	801f4b8 <__ieee754_pow+0x1c8>
 801f4a6:	4602      	mov	r2, r0
 801f4a8:	460b      	mov	r3, r1
 801f4aa:	4610      	mov	r0, r2
 801f4ac:	4619      	mov	r1, r3
 801f4ae:	f7e0 ff23 	bl	80002f8 <__aeabi_dsub>
 801f4b2:	4602      	mov	r2, r0
 801f4b4:	460b      	mov	r3, r1
 801f4b6:	e794      	b.n	801f3e2 <__ieee754_pow+0xf2>
 801f4b8:	2c01      	cmp	r4, #1
 801f4ba:	f47f af36 	bne.w	801f32a <__ieee754_pow+0x3a>
 801f4be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f4c2:	4619      	mov	r1, r3
 801f4c4:	e731      	b.n	801f32a <__ieee754_pow+0x3a>
 801f4c6:	0feb      	lsrs	r3, r5, #31
 801f4c8:	3b01      	subs	r3, #1
 801f4ca:	ea53 0204 	orrs.w	r2, r3, r4
 801f4ce:	d102      	bne.n	801f4d6 <__ieee754_pow+0x1e6>
 801f4d0:	4632      	mov	r2, r6
 801f4d2:	463b      	mov	r3, r7
 801f4d4:	e7e9      	b.n	801f4aa <__ieee754_pow+0x1ba>
 801f4d6:	3c01      	subs	r4, #1
 801f4d8:	431c      	orrs	r4, r3
 801f4da:	d016      	beq.n	801f50a <__ieee754_pow+0x21a>
 801f4dc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801f568 <__ieee754_pow+0x278>
 801f4e0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801f4e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f4e8:	f240 8112 	bls.w	801f710 <__ieee754_pow+0x420>
 801f4ec:	4b28      	ldr	r3, [pc, #160]	@ (801f590 <__ieee754_pow+0x2a0>)
 801f4ee:	459a      	cmp	sl, r3
 801f4f0:	4b25      	ldr	r3, [pc, #148]	@ (801f588 <__ieee754_pow+0x298>)
 801f4f2:	d916      	bls.n	801f522 <__ieee754_pow+0x232>
 801f4f4:	4598      	cmp	r8, r3
 801f4f6:	d80b      	bhi.n	801f510 <__ieee754_pow+0x220>
 801f4f8:	f1b9 0f00 	cmp.w	r9, #0
 801f4fc:	da0b      	bge.n	801f516 <__ieee754_pow+0x226>
 801f4fe:	2000      	movs	r0, #0
 801f500:	b011      	add	sp, #68	@ 0x44
 801f502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f506:	f000 bceb 	b.w	801fee0 <__math_oflow>
 801f50a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801f570 <__ieee754_pow+0x280>
 801f50e:	e7e7      	b.n	801f4e0 <__ieee754_pow+0x1f0>
 801f510:	f1b9 0f00 	cmp.w	r9, #0
 801f514:	dcf3      	bgt.n	801f4fe <__ieee754_pow+0x20e>
 801f516:	2000      	movs	r0, #0
 801f518:	b011      	add	sp, #68	@ 0x44
 801f51a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f51e:	f000 bcd7 	b.w	801fed0 <__math_uflow>
 801f522:	4598      	cmp	r8, r3
 801f524:	d20c      	bcs.n	801f540 <__ieee754_pow+0x250>
 801f526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f52a:	2200      	movs	r2, #0
 801f52c:	2300      	movs	r3, #0
 801f52e:	f7e1 fb0d 	bl	8000b4c <__aeabi_dcmplt>
 801f532:	3800      	subs	r0, #0
 801f534:	bf18      	it	ne
 801f536:	2001      	movne	r0, #1
 801f538:	f1b9 0f00 	cmp.w	r9, #0
 801f53c:	daec      	bge.n	801f518 <__ieee754_pow+0x228>
 801f53e:	e7df      	b.n	801f500 <__ieee754_pow+0x210>
 801f540:	4b10      	ldr	r3, [pc, #64]	@ (801f584 <__ieee754_pow+0x294>)
 801f542:	4598      	cmp	r8, r3
 801f544:	f04f 0200 	mov.w	r2, #0
 801f548:	d924      	bls.n	801f594 <__ieee754_pow+0x2a4>
 801f54a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f54e:	2300      	movs	r3, #0
 801f550:	f7e1 fafc 	bl	8000b4c <__aeabi_dcmplt>
 801f554:	3800      	subs	r0, #0
 801f556:	bf18      	it	ne
 801f558:	2001      	movne	r0, #1
 801f55a:	f1b9 0f00 	cmp.w	r9, #0
 801f55e:	dccf      	bgt.n	801f500 <__ieee754_pow+0x210>
 801f560:	e7da      	b.n	801f518 <__ieee754_pow+0x228>
 801f562:	bf00      	nop
 801f564:	f3af 8000 	nop.w
 801f568:	00000000 	.word	0x00000000
 801f56c:	3ff00000 	.word	0x3ff00000
 801f570:	00000000 	.word	0x00000000
 801f574:	bff00000 	.word	0xbff00000
 801f578:	fff00000 	.word	0xfff00000
 801f57c:	7ff00000 	.word	0x7ff00000
 801f580:	433fffff 	.word	0x433fffff
 801f584:	3ff00000 	.word	0x3ff00000
 801f588:	3fefffff 	.word	0x3fefffff
 801f58c:	3fe00000 	.word	0x3fe00000
 801f590:	43f00000 	.word	0x43f00000
 801f594:	4b5a      	ldr	r3, [pc, #360]	@ (801f700 <__ieee754_pow+0x410>)
 801f596:	f7e0 feaf 	bl	80002f8 <__aeabi_dsub>
 801f59a:	a351      	add	r3, pc, #324	@ (adr r3, 801f6e0 <__ieee754_pow+0x3f0>)
 801f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5a0:	4604      	mov	r4, r0
 801f5a2:	460d      	mov	r5, r1
 801f5a4:	f7e1 f860 	bl	8000668 <__aeabi_dmul>
 801f5a8:	a34f      	add	r3, pc, #316	@ (adr r3, 801f6e8 <__ieee754_pow+0x3f8>)
 801f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ae:	4606      	mov	r6, r0
 801f5b0:	460f      	mov	r7, r1
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	4629      	mov	r1, r5
 801f5b6:	f7e1 f857 	bl	8000668 <__aeabi_dmul>
 801f5ba:	4b52      	ldr	r3, [pc, #328]	@ (801f704 <__ieee754_pow+0x414>)
 801f5bc:	4682      	mov	sl, r0
 801f5be:	468b      	mov	fp, r1
 801f5c0:	2200      	movs	r2, #0
 801f5c2:	4620      	mov	r0, r4
 801f5c4:	4629      	mov	r1, r5
 801f5c6:	f7e1 f84f 	bl	8000668 <__aeabi_dmul>
 801f5ca:	4602      	mov	r2, r0
 801f5cc:	460b      	mov	r3, r1
 801f5ce:	a148      	add	r1, pc, #288	@ (adr r1, 801f6f0 <__ieee754_pow+0x400>)
 801f5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5d4:	f7e0 fe90 	bl	80002f8 <__aeabi_dsub>
 801f5d8:	4622      	mov	r2, r4
 801f5da:	462b      	mov	r3, r5
 801f5dc:	f7e1 f844 	bl	8000668 <__aeabi_dmul>
 801f5e0:	4602      	mov	r2, r0
 801f5e2:	460b      	mov	r3, r1
 801f5e4:	2000      	movs	r0, #0
 801f5e6:	4948      	ldr	r1, [pc, #288]	@ (801f708 <__ieee754_pow+0x418>)
 801f5e8:	f7e0 fe86 	bl	80002f8 <__aeabi_dsub>
 801f5ec:	4622      	mov	r2, r4
 801f5ee:	4680      	mov	r8, r0
 801f5f0:	4689      	mov	r9, r1
 801f5f2:	462b      	mov	r3, r5
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	4629      	mov	r1, r5
 801f5f8:	f7e1 f836 	bl	8000668 <__aeabi_dmul>
 801f5fc:	4602      	mov	r2, r0
 801f5fe:	460b      	mov	r3, r1
 801f600:	4640      	mov	r0, r8
 801f602:	4649      	mov	r1, r9
 801f604:	f7e1 f830 	bl	8000668 <__aeabi_dmul>
 801f608:	a33b      	add	r3, pc, #236	@ (adr r3, 801f6f8 <__ieee754_pow+0x408>)
 801f60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f60e:	f7e1 f82b 	bl	8000668 <__aeabi_dmul>
 801f612:	4602      	mov	r2, r0
 801f614:	460b      	mov	r3, r1
 801f616:	4650      	mov	r0, sl
 801f618:	4659      	mov	r1, fp
 801f61a:	f7e0 fe6d 	bl	80002f8 <__aeabi_dsub>
 801f61e:	4602      	mov	r2, r0
 801f620:	460b      	mov	r3, r1
 801f622:	4680      	mov	r8, r0
 801f624:	4689      	mov	r9, r1
 801f626:	4630      	mov	r0, r6
 801f628:	4639      	mov	r1, r7
 801f62a:	f7e0 fe67 	bl	80002fc <__adddf3>
 801f62e:	2400      	movs	r4, #0
 801f630:	4632      	mov	r2, r6
 801f632:	463b      	mov	r3, r7
 801f634:	4620      	mov	r0, r4
 801f636:	460d      	mov	r5, r1
 801f638:	f7e0 fe5e 	bl	80002f8 <__aeabi_dsub>
 801f63c:	4602      	mov	r2, r0
 801f63e:	460b      	mov	r3, r1
 801f640:	4640      	mov	r0, r8
 801f642:	4649      	mov	r1, r9
 801f644:	f7e0 fe58 	bl	80002f8 <__aeabi_dsub>
 801f648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f64c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801f650:	2300      	movs	r3, #0
 801f652:	9304      	str	r3, [sp, #16]
 801f654:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f658:	4606      	mov	r6, r0
 801f65a:	460f      	mov	r7, r1
 801f65c:	4652      	mov	r2, sl
 801f65e:	465b      	mov	r3, fp
 801f660:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f664:	f7e0 fe48 	bl	80002f8 <__aeabi_dsub>
 801f668:	4622      	mov	r2, r4
 801f66a:	462b      	mov	r3, r5
 801f66c:	f7e0 fffc 	bl	8000668 <__aeabi_dmul>
 801f670:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f674:	4680      	mov	r8, r0
 801f676:	4689      	mov	r9, r1
 801f678:	4630      	mov	r0, r6
 801f67a:	4639      	mov	r1, r7
 801f67c:	f7e0 fff4 	bl	8000668 <__aeabi_dmul>
 801f680:	4602      	mov	r2, r0
 801f682:	460b      	mov	r3, r1
 801f684:	4640      	mov	r0, r8
 801f686:	4649      	mov	r1, r9
 801f688:	f7e0 fe38 	bl	80002fc <__adddf3>
 801f68c:	4652      	mov	r2, sl
 801f68e:	465b      	mov	r3, fp
 801f690:	4606      	mov	r6, r0
 801f692:	460f      	mov	r7, r1
 801f694:	4620      	mov	r0, r4
 801f696:	4629      	mov	r1, r5
 801f698:	f7e0 ffe6 	bl	8000668 <__aeabi_dmul>
 801f69c:	460b      	mov	r3, r1
 801f69e:	4602      	mov	r2, r0
 801f6a0:	4680      	mov	r8, r0
 801f6a2:	4689      	mov	r9, r1
 801f6a4:	4630      	mov	r0, r6
 801f6a6:	4639      	mov	r1, r7
 801f6a8:	f7e0 fe28 	bl	80002fc <__adddf3>
 801f6ac:	4b17      	ldr	r3, [pc, #92]	@ (801f70c <__ieee754_pow+0x41c>)
 801f6ae:	4299      	cmp	r1, r3
 801f6b0:	4604      	mov	r4, r0
 801f6b2:	460d      	mov	r5, r1
 801f6b4:	468a      	mov	sl, r1
 801f6b6:	468b      	mov	fp, r1
 801f6b8:	f340 82ef 	ble.w	801fc9a <__ieee754_pow+0x9aa>
 801f6bc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801f6c0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801f6c4:	4303      	orrs	r3, r0
 801f6c6:	f000 81e8 	beq.w	801fa9a <__ieee754_pow+0x7aa>
 801f6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	2300      	movs	r3, #0
 801f6d2:	f7e1 fa3b 	bl	8000b4c <__aeabi_dcmplt>
 801f6d6:	3800      	subs	r0, #0
 801f6d8:	bf18      	it	ne
 801f6da:	2001      	movne	r0, #1
 801f6dc:	e710      	b.n	801f500 <__ieee754_pow+0x210>
 801f6de:	bf00      	nop
 801f6e0:	60000000 	.word	0x60000000
 801f6e4:	3ff71547 	.word	0x3ff71547
 801f6e8:	f85ddf44 	.word	0xf85ddf44
 801f6ec:	3e54ae0b 	.word	0x3e54ae0b
 801f6f0:	55555555 	.word	0x55555555
 801f6f4:	3fd55555 	.word	0x3fd55555
 801f6f8:	652b82fe 	.word	0x652b82fe
 801f6fc:	3ff71547 	.word	0x3ff71547
 801f700:	3ff00000 	.word	0x3ff00000
 801f704:	3fd00000 	.word	0x3fd00000
 801f708:	3fe00000 	.word	0x3fe00000
 801f70c:	408fffff 	.word	0x408fffff
 801f710:	4bd5      	ldr	r3, [pc, #852]	@ (801fa68 <__ieee754_pow+0x778>)
 801f712:	402b      	ands	r3, r5
 801f714:	2200      	movs	r2, #0
 801f716:	b92b      	cbnz	r3, 801f724 <__ieee754_pow+0x434>
 801f718:	4bd4      	ldr	r3, [pc, #848]	@ (801fa6c <__ieee754_pow+0x77c>)
 801f71a:	f7e0 ffa5 	bl	8000668 <__aeabi_dmul>
 801f71e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801f722:	468b      	mov	fp, r1
 801f724:	ea4f 532b 	mov.w	r3, fp, asr #20
 801f728:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801f72c:	4413      	add	r3, r2
 801f72e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f730:	4bcf      	ldr	r3, [pc, #828]	@ (801fa70 <__ieee754_pow+0x780>)
 801f732:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801f736:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801f73a:	459b      	cmp	fp, r3
 801f73c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f740:	dd08      	ble.n	801f754 <__ieee754_pow+0x464>
 801f742:	4bcc      	ldr	r3, [pc, #816]	@ (801fa74 <__ieee754_pow+0x784>)
 801f744:	459b      	cmp	fp, r3
 801f746:	f340 81a5 	ble.w	801fa94 <__ieee754_pow+0x7a4>
 801f74a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f74c:	3301      	adds	r3, #1
 801f74e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f750:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801f754:	f04f 0a00 	mov.w	sl, #0
 801f758:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801f75c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f75e:	4bc6      	ldr	r3, [pc, #792]	@ (801fa78 <__ieee754_pow+0x788>)
 801f760:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f764:	ed93 7b00 	vldr	d7, [r3]
 801f768:	4629      	mov	r1, r5
 801f76a:	ec53 2b17 	vmov	r2, r3, d7
 801f76e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f772:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f776:	f7e0 fdbf 	bl	80002f8 <__aeabi_dsub>
 801f77a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f77e:	4606      	mov	r6, r0
 801f780:	460f      	mov	r7, r1
 801f782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f786:	f7e0 fdb9 	bl	80002fc <__adddf3>
 801f78a:	4602      	mov	r2, r0
 801f78c:	460b      	mov	r3, r1
 801f78e:	2000      	movs	r0, #0
 801f790:	49ba      	ldr	r1, [pc, #744]	@ (801fa7c <__ieee754_pow+0x78c>)
 801f792:	f7e1 f893 	bl	80008bc <__aeabi_ddiv>
 801f796:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801f79a:	4602      	mov	r2, r0
 801f79c:	460b      	mov	r3, r1
 801f79e:	4630      	mov	r0, r6
 801f7a0:	4639      	mov	r1, r7
 801f7a2:	f7e0 ff61 	bl	8000668 <__aeabi_dmul>
 801f7a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f7aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801f7ae:	106d      	asrs	r5, r5, #1
 801f7b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801f7b4:	f04f 0b00 	mov.w	fp, #0
 801f7b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801f7bc:	4661      	mov	r1, ip
 801f7be:	2200      	movs	r2, #0
 801f7c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801f7c4:	4658      	mov	r0, fp
 801f7c6:	46e1      	mov	r9, ip
 801f7c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801f7cc:	4614      	mov	r4, r2
 801f7ce:	461d      	mov	r5, r3
 801f7d0:	f7e0 ff4a 	bl	8000668 <__aeabi_dmul>
 801f7d4:	4602      	mov	r2, r0
 801f7d6:	460b      	mov	r3, r1
 801f7d8:	4630      	mov	r0, r6
 801f7da:	4639      	mov	r1, r7
 801f7dc:	f7e0 fd8c 	bl	80002f8 <__aeabi_dsub>
 801f7e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f7e4:	4606      	mov	r6, r0
 801f7e6:	460f      	mov	r7, r1
 801f7e8:	4620      	mov	r0, r4
 801f7ea:	4629      	mov	r1, r5
 801f7ec:	f7e0 fd84 	bl	80002f8 <__aeabi_dsub>
 801f7f0:	4602      	mov	r2, r0
 801f7f2:	460b      	mov	r3, r1
 801f7f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f7f8:	f7e0 fd7e 	bl	80002f8 <__aeabi_dsub>
 801f7fc:	465a      	mov	r2, fp
 801f7fe:	464b      	mov	r3, r9
 801f800:	f7e0 ff32 	bl	8000668 <__aeabi_dmul>
 801f804:	4602      	mov	r2, r0
 801f806:	460b      	mov	r3, r1
 801f808:	4630      	mov	r0, r6
 801f80a:	4639      	mov	r1, r7
 801f80c:	f7e0 fd74 	bl	80002f8 <__aeabi_dsub>
 801f810:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801f814:	f7e0 ff28 	bl	8000668 <__aeabi_dmul>
 801f818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f81c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f820:	4610      	mov	r0, r2
 801f822:	4619      	mov	r1, r3
 801f824:	f7e0 ff20 	bl	8000668 <__aeabi_dmul>
 801f828:	a37d      	add	r3, pc, #500	@ (adr r3, 801fa20 <__ieee754_pow+0x730>)
 801f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f82e:	4604      	mov	r4, r0
 801f830:	460d      	mov	r5, r1
 801f832:	f7e0 ff19 	bl	8000668 <__aeabi_dmul>
 801f836:	a37c      	add	r3, pc, #496	@ (adr r3, 801fa28 <__ieee754_pow+0x738>)
 801f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f83c:	f7e0 fd5e 	bl	80002fc <__adddf3>
 801f840:	4622      	mov	r2, r4
 801f842:	462b      	mov	r3, r5
 801f844:	f7e0 ff10 	bl	8000668 <__aeabi_dmul>
 801f848:	a379      	add	r3, pc, #484	@ (adr r3, 801fa30 <__ieee754_pow+0x740>)
 801f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f84e:	f7e0 fd55 	bl	80002fc <__adddf3>
 801f852:	4622      	mov	r2, r4
 801f854:	462b      	mov	r3, r5
 801f856:	f7e0 ff07 	bl	8000668 <__aeabi_dmul>
 801f85a:	a377      	add	r3, pc, #476	@ (adr r3, 801fa38 <__ieee754_pow+0x748>)
 801f85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f860:	f7e0 fd4c 	bl	80002fc <__adddf3>
 801f864:	4622      	mov	r2, r4
 801f866:	462b      	mov	r3, r5
 801f868:	f7e0 fefe 	bl	8000668 <__aeabi_dmul>
 801f86c:	a374      	add	r3, pc, #464	@ (adr r3, 801fa40 <__ieee754_pow+0x750>)
 801f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f872:	f7e0 fd43 	bl	80002fc <__adddf3>
 801f876:	4622      	mov	r2, r4
 801f878:	462b      	mov	r3, r5
 801f87a:	f7e0 fef5 	bl	8000668 <__aeabi_dmul>
 801f87e:	a372      	add	r3, pc, #456	@ (adr r3, 801fa48 <__ieee754_pow+0x758>)
 801f880:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f884:	f7e0 fd3a 	bl	80002fc <__adddf3>
 801f888:	4622      	mov	r2, r4
 801f88a:	4606      	mov	r6, r0
 801f88c:	460f      	mov	r7, r1
 801f88e:	462b      	mov	r3, r5
 801f890:	4620      	mov	r0, r4
 801f892:	4629      	mov	r1, r5
 801f894:	f7e0 fee8 	bl	8000668 <__aeabi_dmul>
 801f898:	4602      	mov	r2, r0
 801f89a:	460b      	mov	r3, r1
 801f89c:	4630      	mov	r0, r6
 801f89e:	4639      	mov	r1, r7
 801f8a0:	f7e0 fee2 	bl	8000668 <__aeabi_dmul>
 801f8a4:	465a      	mov	r2, fp
 801f8a6:	4604      	mov	r4, r0
 801f8a8:	460d      	mov	r5, r1
 801f8aa:	464b      	mov	r3, r9
 801f8ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f8b0:	f7e0 fd24 	bl	80002fc <__adddf3>
 801f8b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f8b8:	f7e0 fed6 	bl	8000668 <__aeabi_dmul>
 801f8bc:	4622      	mov	r2, r4
 801f8be:	462b      	mov	r3, r5
 801f8c0:	f7e0 fd1c 	bl	80002fc <__adddf3>
 801f8c4:	465a      	mov	r2, fp
 801f8c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f8ca:	464b      	mov	r3, r9
 801f8cc:	4658      	mov	r0, fp
 801f8ce:	4649      	mov	r1, r9
 801f8d0:	f7e0 feca 	bl	8000668 <__aeabi_dmul>
 801f8d4:	4b6a      	ldr	r3, [pc, #424]	@ (801fa80 <__ieee754_pow+0x790>)
 801f8d6:	2200      	movs	r2, #0
 801f8d8:	4606      	mov	r6, r0
 801f8da:	460f      	mov	r7, r1
 801f8dc:	f7e0 fd0e 	bl	80002fc <__adddf3>
 801f8e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f8e4:	f7e0 fd0a 	bl	80002fc <__adddf3>
 801f8e8:	46d8      	mov	r8, fp
 801f8ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801f8ee:	460d      	mov	r5, r1
 801f8f0:	465a      	mov	r2, fp
 801f8f2:	460b      	mov	r3, r1
 801f8f4:	4640      	mov	r0, r8
 801f8f6:	4649      	mov	r1, r9
 801f8f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801f8fc:	f7e0 feb4 	bl	8000668 <__aeabi_dmul>
 801f900:	465c      	mov	r4, fp
 801f902:	4680      	mov	r8, r0
 801f904:	4689      	mov	r9, r1
 801f906:	4b5e      	ldr	r3, [pc, #376]	@ (801fa80 <__ieee754_pow+0x790>)
 801f908:	2200      	movs	r2, #0
 801f90a:	4620      	mov	r0, r4
 801f90c:	4629      	mov	r1, r5
 801f90e:	f7e0 fcf3 	bl	80002f8 <__aeabi_dsub>
 801f912:	4632      	mov	r2, r6
 801f914:	463b      	mov	r3, r7
 801f916:	f7e0 fcef 	bl	80002f8 <__aeabi_dsub>
 801f91a:	4602      	mov	r2, r0
 801f91c:	460b      	mov	r3, r1
 801f91e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f922:	f7e0 fce9 	bl	80002f8 <__aeabi_dsub>
 801f926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f92a:	f7e0 fe9d 	bl	8000668 <__aeabi_dmul>
 801f92e:	4622      	mov	r2, r4
 801f930:	4606      	mov	r6, r0
 801f932:	460f      	mov	r7, r1
 801f934:	462b      	mov	r3, r5
 801f936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f93a:	f7e0 fe95 	bl	8000668 <__aeabi_dmul>
 801f93e:	4602      	mov	r2, r0
 801f940:	460b      	mov	r3, r1
 801f942:	4630      	mov	r0, r6
 801f944:	4639      	mov	r1, r7
 801f946:	f7e0 fcd9 	bl	80002fc <__adddf3>
 801f94a:	4606      	mov	r6, r0
 801f94c:	460f      	mov	r7, r1
 801f94e:	4602      	mov	r2, r0
 801f950:	460b      	mov	r3, r1
 801f952:	4640      	mov	r0, r8
 801f954:	4649      	mov	r1, r9
 801f956:	f7e0 fcd1 	bl	80002fc <__adddf3>
 801f95a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801f95e:	a33c      	add	r3, pc, #240	@ (adr r3, 801fa50 <__ieee754_pow+0x760>)
 801f960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f964:	4658      	mov	r0, fp
 801f966:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801f96a:	460d      	mov	r5, r1
 801f96c:	f7e0 fe7c 	bl	8000668 <__aeabi_dmul>
 801f970:	465c      	mov	r4, fp
 801f972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f976:	4642      	mov	r2, r8
 801f978:	464b      	mov	r3, r9
 801f97a:	4620      	mov	r0, r4
 801f97c:	4629      	mov	r1, r5
 801f97e:	f7e0 fcbb 	bl	80002f8 <__aeabi_dsub>
 801f982:	4602      	mov	r2, r0
 801f984:	460b      	mov	r3, r1
 801f986:	4630      	mov	r0, r6
 801f988:	4639      	mov	r1, r7
 801f98a:	f7e0 fcb5 	bl	80002f8 <__aeabi_dsub>
 801f98e:	a332      	add	r3, pc, #200	@ (adr r3, 801fa58 <__ieee754_pow+0x768>)
 801f990:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f994:	f7e0 fe68 	bl	8000668 <__aeabi_dmul>
 801f998:	a331      	add	r3, pc, #196	@ (adr r3, 801fa60 <__ieee754_pow+0x770>)
 801f99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f99e:	4606      	mov	r6, r0
 801f9a0:	460f      	mov	r7, r1
 801f9a2:	4620      	mov	r0, r4
 801f9a4:	4629      	mov	r1, r5
 801f9a6:	f7e0 fe5f 	bl	8000668 <__aeabi_dmul>
 801f9aa:	4602      	mov	r2, r0
 801f9ac:	460b      	mov	r3, r1
 801f9ae:	4630      	mov	r0, r6
 801f9b0:	4639      	mov	r1, r7
 801f9b2:	f7e0 fca3 	bl	80002fc <__adddf3>
 801f9b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f9b8:	4b32      	ldr	r3, [pc, #200]	@ (801fa84 <__ieee754_pow+0x794>)
 801f9ba:	4413      	add	r3, r2
 801f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9c0:	f7e0 fc9c 	bl	80002fc <__adddf3>
 801f9c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801f9c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f9ca:	f7e0 fde3 	bl	8000594 <__aeabi_i2d>
 801f9ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f9d0:	4b2d      	ldr	r3, [pc, #180]	@ (801fa88 <__ieee754_pow+0x798>)
 801f9d2:	4413      	add	r3, r2
 801f9d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f9d8:	4606      	mov	r6, r0
 801f9da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f9de:	460f      	mov	r7, r1
 801f9e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f9e4:	f7e0 fc8a 	bl	80002fc <__adddf3>
 801f9e8:	4642      	mov	r2, r8
 801f9ea:	464b      	mov	r3, r9
 801f9ec:	f7e0 fc86 	bl	80002fc <__adddf3>
 801f9f0:	4632      	mov	r2, r6
 801f9f2:	463b      	mov	r3, r7
 801f9f4:	f7e0 fc82 	bl	80002fc <__adddf3>
 801f9f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801f9fc:	4632      	mov	r2, r6
 801f9fe:	463b      	mov	r3, r7
 801fa00:	4658      	mov	r0, fp
 801fa02:	460d      	mov	r5, r1
 801fa04:	f7e0 fc78 	bl	80002f8 <__aeabi_dsub>
 801fa08:	4642      	mov	r2, r8
 801fa0a:	464b      	mov	r3, r9
 801fa0c:	f7e0 fc74 	bl	80002f8 <__aeabi_dsub>
 801fa10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801fa14:	f7e0 fc70 	bl	80002f8 <__aeabi_dsub>
 801fa18:	465c      	mov	r4, fp
 801fa1a:	4602      	mov	r2, r0
 801fa1c:	e036      	b.n	801fa8c <__ieee754_pow+0x79c>
 801fa1e:	bf00      	nop
 801fa20:	4a454eef 	.word	0x4a454eef
 801fa24:	3fca7e28 	.word	0x3fca7e28
 801fa28:	93c9db65 	.word	0x93c9db65
 801fa2c:	3fcd864a 	.word	0x3fcd864a
 801fa30:	a91d4101 	.word	0xa91d4101
 801fa34:	3fd17460 	.word	0x3fd17460
 801fa38:	518f264d 	.word	0x518f264d
 801fa3c:	3fd55555 	.word	0x3fd55555
 801fa40:	db6fabff 	.word	0xdb6fabff
 801fa44:	3fdb6db6 	.word	0x3fdb6db6
 801fa48:	33333303 	.word	0x33333303
 801fa4c:	3fe33333 	.word	0x3fe33333
 801fa50:	e0000000 	.word	0xe0000000
 801fa54:	3feec709 	.word	0x3feec709
 801fa58:	dc3a03fd 	.word	0xdc3a03fd
 801fa5c:	3feec709 	.word	0x3feec709
 801fa60:	145b01f5 	.word	0x145b01f5
 801fa64:	be3e2fe0 	.word	0xbe3e2fe0
 801fa68:	7ff00000 	.word	0x7ff00000
 801fa6c:	43400000 	.word	0x43400000
 801fa70:	0003988e 	.word	0x0003988e
 801fa74:	000bb679 	.word	0x000bb679
 801fa78:	08021928 	.word	0x08021928
 801fa7c:	3ff00000 	.word	0x3ff00000
 801fa80:	40080000 	.word	0x40080000
 801fa84:	08021908 	.word	0x08021908
 801fa88:	08021918 	.word	0x08021918
 801fa8c:	460b      	mov	r3, r1
 801fa8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801fa92:	e5d7      	b.n	801f644 <__ieee754_pow+0x354>
 801fa94:	f04f 0a01 	mov.w	sl, #1
 801fa98:	e65e      	b.n	801f758 <__ieee754_pow+0x468>
 801fa9a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801fd6c <__ieee754_pow+0xa7c>)
 801fa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faa0:	4630      	mov	r0, r6
 801faa2:	4639      	mov	r1, r7
 801faa4:	f7e0 fc2a 	bl	80002fc <__adddf3>
 801faa8:	4642      	mov	r2, r8
 801faaa:	e9cd 0100 	strd	r0, r1, [sp]
 801faae:	464b      	mov	r3, r9
 801fab0:	4620      	mov	r0, r4
 801fab2:	4629      	mov	r1, r5
 801fab4:	f7e0 fc20 	bl	80002f8 <__aeabi_dsub>
 801fab8:	4602      	mov	r2, r0
 801faba:	460b      	mov	r3, r1
 801fabc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fac0:	f7e1 f862 	bl	8000b88 <__aeabi_dcmpgt>
 801fac4:	2800      	cmp	r0, #0
 801fac6:	f47f ae00 	bne.w	801f6ca <__ieee754_pow+0x3da>
 801faca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801face:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801fad2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801fad6:	fa43 fa0a 	asr.w	sl, r3, sl
 801fada:	44da      	add	sl, fp
 801fadc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801fae0:	489d      	ldr	r0, [pc, #628]	@ (801fd58 <__ieee754_pow+0xa68>)
 801fae2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801fae6:	4108      	asrs	r0, r1
 801fae8:	ea00 030a 	and.w	r3, r0, sl
 801faec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801faf0:	f1c1 0114 	rsb	r1, r1, #20
 801faf4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801faf8:	fa4a fa01 	asr.w	sl, sl, r1
 801fafc:	f1bb 0f00 	cmp.w	fp, #0
 801fb00:	4640      	mov	r0, r8
 801fb02:	4649      	mov	r1, r9
 801fb04:	f04f 0200 	mov.w	r2, #0
 801fb08:	bfb8      	it	lt
 801fb0a:	f1ca 0a00 	rsblt	sl, sl, #0
 801fb0e:	f7e0 fbf3 	bl	80002f8 <__aeabi_dsub>
 801fb12:	4680      	mov	r8, r0
 801fb14:	4689      	mov	r9, r1
 801fb16:	4632      	mov	r2, r6
 801fb18:	463b      	mov	r3, r7
 801fb1a:	4640      	mov	r0, r8
 801fb1c:	4649      	mov	r1, r9
 801fb1e:	f7e0 fbed 	bl	80002fc <__adddf3>
 801fb22:	2400      	movs	r4, #0
 801fb24:	a37c      	add	r3, pc, #496	@ (adr r3, 801fd18 <__ieee754_pow+0xa28>)
 801fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb2a:	4620      	mov	r0, r4
 801fb2c:	460d      	mov	r5, r1
 801fb2e:	f7e0 fd9b 	bl	8000668 <__aeabi_dmul>
 801fb32:	4642      	mov	r2, r8
 801fb34:	e9cd 0100 	strd	r0, r1, [sp]
 801fb38:	464b      	mov	r3, r9
 801fb3a:	4620      	mov	r0, r4
 801fb3c:	4629      	mov	r1, r5
 801fb3e:	f7e0 fbdb 	bl	80002f8 <__aeabi_dsub>
 801fb42:	4602      	mov	r2, r0
 801fb44:	460b      	mov	r3, r1
 801fb46:	4630      	mov	r0, r6
 801fb48:	4639      	mov	r1, r7
 801fb4a:	f7e0 fbd5 	bl	80002f8 <__aeabi_dsub>
 801fb4e:	a374      	add	r3, pc, #464	@ (adr r3, 801fd20 <__ieee754_pow+0xa30>)
 801fb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb54:	f7e0 fd88 	bl	8000668 <__aeabi_dmul>
 801fb58:	a373      	add	r3, pc, #460	@ (adr r3, 801fd28 <__ieee754_pow+0xa38>)
 801fb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb5e:	4680      	mov	r8, r0
 801fb60:	4689      	mov	r9, r1
 801fb62:	4620      	mov	r0, r4
 801fb64:	4629      	mov	r1, r5
 801fb66:	f7e0 fd7f 	bl	8000668 <__aeabi_dmul>
 801fb6a:	4602      	mov	r2, r0
 801fb6c:	460b      	mov	r3, r1
 801fb6e:	4640      	mov	r0, r8
 801fb70:	4649      	mov	r1, r9
 801fb72:	f7e0 fbc3 	bl	80002fc <__adddf3>
 801fb76:	4604      	mov	r4, r0
 801fb78:	460d      	mov	r5, r1
 801fb7a:	4602      	mov	r2, r0
 801fb7c:	460b      	mov	r3, r1
 801fb7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fb82:	f7e0 fbbb 	bl	80002fc <__adddf3>
 801fb86:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fb8a:	4680      	mov	r8, r0
 801fb8c:	4689      	mov	r9, r1
 801fb8e:	f7e0 fbb3 	bl	80002f8 <__aeabi_dsub>
 801fb92:	4602      	mov	r2, r0
 801fb94:	460b      	mov	r3, r1
 801fb96:	4620      	mov	r0, r4
 801fb98:	4629      	mov	r1, r5
 801fb9a:	f7e0 fbad 	bl	80002f8 <__aeabi_dsub>
 801fb9e:	4642      	mov	r2, r8
 801fba0:	4606      	mov	r6, r0
 801fba2:	460f      	mov	r7, r1
 801fba4:	464b      	mov	r3, r9
 801fba6:	4640      	mov	r0, r8
 801fba8:	4649      	mov	r1, r9
 801fbaa:	f7e0 fd5d 	bl	8000668 <__aeabi_dmul>
 801fbae:	a360      	add	r3, pc, #384	@ (adr r3, 801fd30 <__ieee754_pow+0xa40>)
 801fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbb4:	4604      	mov	r4, r0
 801fbb6:	460d      	mov	r5, r1
 801fbb8:	f7e0 fd56 	bl	8000668 <__aeabi_dmul>
 801fbbc:	a35e      	add	r3, pc, #376	@ (adr r3, 801fd38 <__ieee754_pow+0xa48>)
 801fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbc2:	f7e0 fb99 	bl	80002f8 <__aeabi_dsub>
 801fbc6:	4622      	mov	r2, r4
 801fbc8:	462b      	mov	r3, r5
 801fbca:	f7e0 fd4d 	bl	8000668 <__aeabi_dmul>
 801fbce:	a35c      	add	r3, pc, #368	@ (adr r3, 801fd40 <__ieee754_pow+0xa50>)
 801fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbd4:	f7e0 fb92 	bl	80002fc <__adddf3>
 801fbd8:	4622      	mov	r2, r4
 801fbda:	462b      	mov	r3, r5
 801fbdc:	f7e0 fd44 	bl	8000668 <__aeabi_dmul>
 801fbe0:	a359      	add	r3, pc, #356	@ (adr r3, 801fd48 <__ieee754_pow+0xa58>)
 801fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbe6:	f7e0 fb87 	bl	80002f8 <__aeabi_dsub>
 801fbea:	4622      	mov	r2, r4
 801fbec:	462b      	mov	r3, r5
 801fbee:	f7e0 fd3b 	bl	8000668 <__aeabi_dmul>
 801fbf2:	a357      	add	r3, pc, #348	@ (adr r3, 801fd50 <__ieee754_pow+0xa60>)
 801fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbf8:	f7e0 fb80 	bl	80002fc <__adddf3>
 801fbfc:	4622      	mov	r2, r4
 801fbfe:	462b      	mov	r3, r5
 801fc00:	f7e0 fd32 	bl	8000668 <__aeabi_dmul>
 801fc04:	4602      	mov	r2, r0
 801fc06:	460b      	mov	r3, r1
 801fc08:	4640      	mov	r0, r8
 801fc0a:	4649      	mov	r1, r9
 801fc0c:	f7e0 fb74 	bl	80002f8 <__aeabi_dsub>
 801fc10:	4604      	mov	r4, r0
 801fc12:	460d      	mov	r5, r1
 801fc14:	4602      	mov	r2, r0
 801fc16:	460b      	mov	r3, r1
 801fc18:	4640      	mov	r0, r8
 801fc1a:	4649      	mov	r1, r9
 801fc1c:	f7e0 fd24 	bl	8000668 <__aeabi_dmul>
 801fc20:	2200      	movs	r2, #0
 801fc22:	e9cd 0100 	strd	r0, r1, [sp]
 801fc26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801fc2a:	4620      	mov	r0, r4
 801fc2c:	4629      	mov	r1, r5
 801fc2e:	f7e0 fb63 	bl	80002f8 <__aeabi_dsub>
 801fc32:	4602      	mov	r2, r0
 801fc34:	460b      	mov	r3, r1
 801fc36:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fc3a:	f7e0 fe3f 	bl	80008bc <__aeabi_ddiv>
 801fc3e:	4632      	mov	r2, r6
 801fc40:	4604      	mov	r4, r0
 801fc42:	460d      	mov	r5, r1
 801fc44:	463b      	mov	r3, r7
 801fc46:	4640      	mov	r0, r8
 801fc48:	4649      	mov	r1, r9
 801fc4a:	f7e0 fd0d 	bl	8000668 <__aeabi_dmul>
 801fc4e:	4632      	mov	r2, r6
 801fc50:	463b      	mov	r3, r7
 801fc52:	f7e0 fb53 	bl	80002fc <__adddf3>
 801fc56:	4602      	mov	r2, r0
 801fc58:	460b      	mov	r3, r1
 801fc5a:	4620      	mov	r0, r4
 801fc5c:	4629      	mov	r1, r5
 801fc5e:	f7e0 fb4b 	bl	80002f8 <__aeabi_dsub>
 801fc62:	4642      	mov	r2, r8
 801fc64:	464b      	mov	r3, r9
 801fc66:	f7e0 fb47 	bl	80002f8 <__aeabi_dsub>
 801fc6a:	460b      	mov	r3, r1
 801fc6c:	4602      	mov	r2, r0
 801fc6e:	493b      	ldr	r1, [pc, #236]	@ (801fd5c <__ieee754_pow+0xa6c>)
 801fc70:	2000      	movs	r0, #0
 801fc72:	f7e0 fb41 	bl	80002f8 <__aeabi_dsub>
 801fc76:	ec41 0b10 	vmov	d0, r0, r1
 801fc7a:	ee10 3a90 	vmov	r3, s1
 801fc7e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801fc82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fc86:	da30      	bge.n	801fcea <__ieee754_pow+0x9fa>
 801fc88:	4650      	mov	r0, sl
 801fc8a:	f000 f875 	bl	801fd78 <scalbn>
 801fc8e:	ec51 0b10 	vmov	r0, r1, d0
 801fc92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fc96:	f7ff bbd2 	b.w	801f43e <__ieee754_pow+0x14e>
 801fc9a:	4c31      	ldr	r4, [pc, #196]	@ (801fd60 <__ieee754_pow+0xa70>)
 801fc9c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801fca0:	42a3      	cmp	r3, r4
 801fca2:	d91a      	bls.n	801fcda <__ieee754_pow+0x9ea>
 801fca4:	4b2f      	ldr	r3, [pc, #188]	@ (801fd64 <__ieee754_pow+0xa74>)
 801fca6:	440b      	add	r3, r1
 801fca8:	4303      	orrs	r3, r0
 801fcaa:	d009      	beq.n	801fcc0 <__ieee754_pow+0x9d0>
 801fcac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fcb0:	2200      	movs	r2, #0
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	f7e0 ff4a 	bl	8000b4c <__aeabi_dcmplt>
 801fcb8:	3800      	subs	r0, #0
 801fcba:	bf18      	it	ne
 801fcbc:	2001      	movne	r0, #1
 801fcbe:	e42b      	b.n	801f518 <__ieee754_pow+0x228>
 801fcc0:	4642      	mov	r2, r8
 801fcc2:	464b      	mov	r3, r9
 801fcc4:	f7e0 fb18 	bl	80002f8 <__aeabi_dsub>
 801fcc8:	4632      	mov	r2, r6
 801fcca:	463b      	mov	r3, r7
 801fccc:	f7e0 ff52 	bl	8000b74 <__aeabi_dcmpge>
 801fcd0:	2800      	cmp	r0, #0
 801fcd2:	d1eb      	bne.n	801fcac <__ieee754_pow+0x9bc>
 801fcd4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801fd74 <__ieee754_pow+0xa84>
 801fcd8:	e6f7      	b.n	801faca <__ieee754_pow+0x7da>
 801fcda:	469a      	mov	sl, r3
 801fcdc:	4b22      	ldr	r3, [pc, #136]	@ (801fd68 <__ieee754_pow+0xa78>)
 801fcde:	459a      	cmp	sl, r3
 801fce0:	f63f aef3 	bhi.w	801faca <__ieee754_pow+0x7da>
 801fce4:	f8dd a010 	ldr.w	sl, [sp, #16]
 801fce8:	e715      	b.n	801fb16 <__ieee754_pow+0x826>
 801fcea:	ec51 0b10 	vmov	r0, r1, d0
 801fcee:	4619      	mov	r1, r3
 801fcf0:	e7cf      	b.n	801fc92 <__ieee754_pow+0x9a2>
 801fcf2:	491a      	ldr	r1, [pc, #104]	@ (801fd5c <__ieee754_pow+0xa6c>)
 801fcf4:	2000      	movs	r0, #0
 801fcf6:	f7ff bb18 	b.w	801f32a <__ieee754_pow+0x3a>
 801fcfa:	2000      	movs	r0, #0
 801fcfc:	2100      	movs	r1, #0
 801fcfe:	f7ff bb14 	b.w	801f32a <__ieee754_pow+0x3a>
 801fd02:	4630      	mov	r0, r6
 801fd04:	4639      	mov	r1, r7
 801fd06:	f7ff bb10 	b.w	801f32a <__ieee754_pow+0x3a>
 801fd0a:	460c      	mov	r4, r1
 801fd0c:	f7ff bb5e 	b.w	801f3cc <__ieee754_pow+0xdc>
 801fd10:	2400      	movs	r4, #0
 801fd12:	f7ff bb49 	b.w	801f3a8 <__ieee754_pow+0xb8>
 801fd16:	bf00      	nop
 801fd18:	00000000 	.word	0x00000000
 801fd1c:	3fe62e43 	.word	0x3fe62e43
 801fd20:	fefa39ef 	.word	0xfefa39ef
 801fd24:	3fe62e42 	.word	0x3fe62e42
 801fd28:	0ca86c39 	.word	0x0ca86c39
 801fd2c:	be205c61 	.word	0xbe205c61
 801fd30:	72bea4d0 	.word	0x72bea4d0
 801fd34:	3e663769 	.word	0x3e663769
 801fd38:	c5d26bf1 	.word	0xc5d26bf1
 801fd3c:	3ebbbd41 	.word	0x3ebbbd41
 801fd40:	af25de2c 	.word	0xaf25de2c
 801fd44:	3f11566a 	.word	0x3f11566a
 801fd48:	16bebd93 	.word	0x16bebd93
 801fd4c:	3f66c16c 	.word	0x3f66c16c
 801fd50:	5555553e 	.word	0x5555553e
 801fd54:	3fc55555 	.word	0x3fc55555
 801fd58:	fff00000 	.word	0xfff00000
 801fd5c:	3ff00000 	.word	0x3ff00000
 801fd60:	4090cbff 	.word	0x4090cbff
 801fd64:	3f6f3400 	.word	0x3f6f3400
 801fd68:	3fe00000 	.word	0x3fe00000
 801fd6c:	652b82fe 	.word	0x652b82fe
 801fd70:	3c971547 	.word	0x3c971547
 801fd74:	4090cc00 	.word	0x4090cc00

0801fd78 <scalbn>:
 801fd78:	b570      	push	{r4, r5, r6, lr}
 801fd7a:	ec55 4b10 	vmov	r4, r5, d0
 801fd7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fd82:	4606      	mov	r6, r0
 801fd84:	462b      	mov	r3, r5
 801fd86:	b991      	cbnz	r1, 801fdae <scalbn+0x36>
 801fd88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fd8c:	4323      	orrs	r3, r4
 801fd8e:	d03d      	beq.n	801fe0c <scalbn+0x94>
 801fd90:	4b35      	ldr	r3, [pc, #212]	@ (801fe68 <scalbn+0xf0>)
 801fd92:	4620      	mov	r0, r4
 801fd94:	4629      	mov	r1, r5
 801fd96:	2200      	movs	r2, #0
 801fd98:	f7e0 fc66 	bl	8000668 <__aeabi_dmul>
 801fd9c:	4b33      	ldr	r3, [pc, #204]	@ (801fe6c <scalbn+0xf4>)
 801fd9e:	429e      	cmp	r6, r3
 801fda0:	4604      	mov	r4, r0
 801fda2:	460d      	mov	r5, r1
 801fda4:	da0f      	bge.n	801fdc6 <scalbn+0x4e>
 801fda6:	a328      	add	r3, pc, #160	@ (adr r3, 801fe48 <scalbn+0xd0>)
 801fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdac:	e01e      	b.n	801fdec <scalbn+0x74>
 801fdae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801fdb2:	4291      	cmp	r1, r2
 801fdb4:	d10b      	bne.n	801fdce <scalbn+0x56>
 801fdb6:	4622      	mov	r2, r4
 801fdb8:	4620      	mov	r0, r4
 801fdba:	4629      	mov	r1, r5
 801fdbc:	f7e0 fa9e 	bl	80002fc <__adddf3>
 801fdc0:	4604      	mov	r4, r0
 801fdc2:	460d      	mov	r5, r1
 801fdc4:	e022      	b.n	801fe0c <scalbn+0x94>
 801fdc6:	460b      	mov	r3, r1
 801fdc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fdcc:	3936      	subs	r1, #54	@ 0x36
 801fdce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801fdd2:	4296      	cmp	r6, r2
 801fdd4:	dd0d      	ble.n	801fdf2 <scalbn+0x7a>
 801fdd6:	2d00      	cmp	r5, #0
 801fdd8:	a11d      	add	r1, pc, #116	@ (adr r1, 801fe50 <scalbn+0xd8>)
 801fdda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fdde:	da02      	bge.n	801fde6 <scalbn+0x6e>
 801fde0:	a11d      	add	r1, pc, #116	@ (adr r1, 801fe58 <scalbn+0xe0>)
 801fde2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fde6:	a31a      	add	r3, pc, #104	@ (adr r3, 801fe50 <scalbn+0xd8>)
 801fde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdec:	f7e0 fc3c 	bl	8000668 <__aeabi_dmul>
 801fdf0:	e7e6      	b.n	801fdc0 <scalbn+0x48>
 801fdf2:	1872      	adds	r2, r6, r1
 801fdf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fdf8:	428a      	cmp	r2, r1
 801fdfa:	dcec      	bgt.n	801fdd6 <scalbn+0x5e>
 801fdfc:	2a00      	cmp	r2, #0
 801fdfe:	dd08      	ble.n	801fe12 <scalbn+0x9a>
 801fe00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fe04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fe08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fe0c:	ec45 4b10 	vmov	d0, r4, r5
 801fe10:	bd70      	pop	{r4, r5, r6, pc}
 801fe12:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fe16:	da08      	bge.n	801fe2a <scalbn+0xb2>
 801fe18:	2d00      	cmp	r5, #0
 801fe1a:	a10b      	add	r1, pc, #44	@ (adr r1, 801fe48 <scalbn+0xd0>)
 801fe1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe20:	dac1      	bge.n	801fda6 <scalbn+0x2e>
 801fe22:	a10f      	add	r1, pc, #60	@ (adr r1, 801fe60 <scalbn+0xe8>)
 801fe24:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe28:	e7bd      	b.n	801fda6 <scalbn+0x2e>
 801fe2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fe2e:	3236      	adds	r2, #54	@ 0x36
 801fe30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fe34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fe38:	4620      	mov	r0, r4
 801fe3a:	4b0d      	ldr	r3, [pc, #52]	@ (801fe70 <scalbn+0xf8>)
 801fe3c:	4629      	mov	r1, r5
 801fe3e:	2200      	movs	r2, #0
 801fe40:	e7d4      	b.n	801fdec <scalbn+0x74>
 801fe42:	bf00      	nop
 801fe44:	f3af 8000 	nop.w
 801fe48:	c2f8f359 	.word	0xc2f8f359
 801fe4c:	01a56e1f 	.word	0x01a56e1f
 801fe50:	8800759c 	.word	0x8800759c
 801fe54:	7e37e43c 	.word	0x7e37e43c
 801fe58:	8800759c 	.word	0x8800759c
 801fe5c:	fe37e43c 	.word	0xfe37e43c
 801fe60:	c2f8f359 	.word	0xc2f8f359
 801fe64:	81a56e1f 	.word	0x81a56e1f
 801fe68:	43500000 	.word	0x43500000
 801fe6c:	ffff3cb0 	.word	0xffff3cb0
 801fe70:	3c900000 	.word	0x3c900000

0801fe74 <with_errno>:
 801fe74:	b510      	push	{r4, lr}
 801fe76:	ed2d 8b02 	vpush	{d8}
 801fe7a:	eeb0 8a40 	vmov.f32	s16, s0
 801fe7e:	eef0 8a60 	vmov.f32	s17, s1
 801fe82:	4604      	mov	r4, r0
 801fe84:	f7fe f898 	bl	801dfb8 <__errno>
 801fe88:	eeb0 0a48 	vmov.f32	s0, s16
 801fe8c:	eef0 0a68 	vmov.f32	s1, s17
 801fe90:	ecbd 8b02 	vpop	{d8}
 801fe94:	6004      	str	r4, [r0, #0]
 801fe96:	bd10      	pop	{r4, pc}

0801fe98 <xflow>:
 801fe98:	4603      	mov	r3, r0
 801fe9a:	b507      	push	{r0, r1, r2, lr}
 801fe9c:	ec51 0b10 	vmov	r0, r1, d0
 801fea0:	b183      	cbz	r3, 801fec4 <xflow+0x2c>
 801fea2:	4602      	mov	r2, r0
 801fea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801fea8:	e9cd 2300 	strd	r2, r3, [sp]
 801feac:	e9dd 2300 	ldrd	r2, r3, [sp]
 801feb0:	f7e0 fbda 	bl	8000668 <__aeabi_dmul>
 801feb4:	ec41 0b10 	vmov	d0, r0, r1
 801feb8:	2022      	movs	r0, #34	@ 0x22
 801feba:	b003      	add	sp, #12
 801febc:	f85d eb04 	ldr.w	lr, [sp], #4
 801fec0:	f7ff bfd8 	b.w	801fe74 <with_errno>
 801fec4:	4602      	mov	r2, r0
 801fec6:	460b      	mov	r3, r1
 801fec8:	e7ee      	b.n	801fea8 <xflow+0x10>
 801feca:	0000      	movs	r0, r0
 801fecc:	0000      	movs	r0, r0
	...

0801fed0 <__math_uflow>:
 801fed0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801fed8 <__math_uflow+0x8>
 801fed4:	f7ff bfe0 	b.w	801fe98 <xflow>
 801fed8:	00000000 	.word	0x00000000
 801fedc:	10000000 	.word	0x10000000

0801fee0 <__math_oflow>:
 801fee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801fee8 <__math_oflow+0x8>
 801fee4:	f7ff bfd8 	b.w	801fe98 <xflow>
 801fee8:	00000000 	.word	0x00000000
 801feec:	70000000 	.word	0x70000000

0801fef0 <_init>:
 801fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fef2:	bf00      	nop
 801fef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fef6:	bc08      	pop	{r3}
 801fef8:	469e      	mov	lr, r3
 801fefa:	4770      	bx	lr

0801fefc <_fini>:
 801fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fefe:	bf00      	nop
 801ff00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff02:	bc08      	pop	{r3}
 801ff04:	469e      	mov	lr, r3
 801ff06:	4770      	bx	lr
